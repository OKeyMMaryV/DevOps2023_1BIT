
#Область ПрограммныйИнтерфейс

// Процедура выполняет стандартные действия при создании на сервере
//  для форм не ссылочных объектов (отчеты, обработки).
//
// Параметры:
//  Отказ				 - Булево	 - признак ошибки выполнения.
//  СтандартнаяОбработка - Булево	 - признак стандартной (системной) обработки события.
//  ТекущаяФорма		 - УправляемаяФорма	 - Текущая форма.
//  ТекущийОбъект		 - Произвольный		 - Текущий объект.
//  СтрПар				 - Структура		 - Структура параметров.
//
Процедура ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ТекущаяФорма, ТекущийОбъект, СтрПар = Неопределено) Экспорт
	
	ПолноеИмяОбъекта = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ТекущаяФорма.ИмяФормы, Истина);
	
	// Вызов механизма разделения прав доступа.
	Если НЕ бит_ПраваДоступаОсновной.МеханизмОтключен() Тогда
		
		Имена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ПолноеИмяОбъекта);
		
		Если ЗначениеЗаполнено(Имена.ИмяКоллекции)  Тогда
			
			ИмяТипаОбъект = Имена.ИмяКласса+"Объект."+Имена.ИмяОбъекта;				
			ТипОбъект = Тип(ИмяТипаОбъект);
			
			Об = ДанныеФормыВЗначение(ТекущийОбъект, ТипОбъект);
			бит_ПраваДоступа.ПередОткрытиемФормыОтчета(Отказ, СтандартнаяОбработка, Об, ТекущаяФорма);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	бит_ук_СлужебныйСервер.РегистрацияПриОткрытии(Отказ, ПолноеИмяОбъекта);
	
КонецПроцедуры // ФормаОбъектаПриСозданииНаСервере()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщиеДействияВУправляемыхФормах

// Процедура выполняет стандартные действия при создании на сервере в форме списка. 
// 
// Параметры:
//  Отказ                - Булево.
//  СтандартнаяОбработка - Булево.
//  ТекущаяФорма         - УправляемаяФорма.
//  СтрПар               - Структура.
// 
Процедура СписокПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ТекущаяФорма, СтрПар = Неопределено) Экспорт

	//// Вызов механизма дополнительных обработок.
	//Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
	//	
	//	// СтандартныеПодсистемы.Печать
	//	Если ТекущаяФорма.Элементы.Найти("ГруппаПечать") <> Неопределено Тогда
	//		ПодключаемыеКоманды.ПриСозданииНаСервере(ТекущаяФорма);
	//	КонецЕсли;
	//	// Конец СтандартныеПодсистемы.Печать
	//			
	//КонецЕсли; 

	ПолноеИмяОбъекта = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ТекущаяФорма.ИмяФормы, Истина);
	ПолноеИмяОбъекта = ПолноеИмяОбъекта + ".ФормаСписка";
	
	бит_ук_СлужебныйСервер.РегистрацияПриОткрытии(Отказ, ПолноеИмяОбъекта);
	
КонецПроцедуры // СписокПриСозданииНаСервере()

// Процедура выполняет стандартные действия при создании на сервере в форме выбора. 
// 
// Параметры:
//  Отказ                - Булево.
//  СтандартнаяОбработка - Булево.
//  ТекущаяФорма         - УправляемаяФорма.
//  СтрПар               - Структура.
// 
Процедура ФормаВыбораПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ТекущаяФорма, СтрПар = Неопределено) Экспорт

	ПолноеИмяОбъекта = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ТекущаяФорма.ИмяФормы, Истина);
	ПолноеИмяОбъекта = ПолноеИмяОбъекта + ".ФормаВыбора";
	
	бит_ук_СлужебныйСервер.РегистрацияПриОткрытии(Отказ, ПолноеИмяОбъекта);
	
КонецПроцедуры // СписокПриСозданииНаСервере()

// Процедура выполняет стандартные действия при создании на сервере в форме списка регистра сведений. 
// 
// Параметры:
//  Отказ                - Булево.
//  СтандартнаяОбработка - Булево.
//  ТекущаяФорма         - УправляемаяФорма.
//  СтрПар               - Структура.
// 
Процедура ФормаСпискаРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ТекущаяФорма, СтрПар = Неопределено) Экспорт

	ПолноеИмяОбъекта = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ТекущаяФорма.ИмяФормы, Истина);
	ПолноеИмяОбъекта = ПолноеИмяОбъекта + ".ФормаСписка";
	
	бит_ук_СлужебныйСервер.РегистрацияПриОткрытии(Отказ, ПолноеИмяОбъекта);
	
КонецПроцедуры // СписокПриСозданииНаСервере()

// Процедура выполняет стандартные действия при создании на сервере в форме списка регистра сведений. 
// 
// Параметры:
//  Отказ                - Булево.
//  СтандартнаяОбработка - Булево.
//  ТекущаяФорма         - УправляемаяФорма.
//  СтрПар               - Структура.
// 
Процедура ФормаЗаписиРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ТекущаяФорма, СтрПар = Неопределено) Экспорт

	ПолноеИмяОбъекта = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ТекущаяФорма.ИмяФормы, Истина);
	ПолноеИмяОбъекта = ПолноеИмяОбъекта;
	
	бит_ук_СлужебныйСервер.РегистрацияПриОткрытии(Отказ, ПолноеИмяОбъекта);
	
КонецПроцедуры // СписокПриСозданииНаСервере()

// Процедура выполняет стандартные действия при создании на сервере в формах ссылочных объектов.
// 
// Параметры:
//  Отказ                - Булево.
//  СтандартнаяОбработка - Булево.
//  ТекущаяФорма         - Строка.
//  ТекущийОбъект        - Произвольный.
//  СтрПар               - Структура.
// 
Процедура ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ТекущаяФорма, ТекущийОбъект, СтрПар = Неопределено) Экспорт
	
	// Изменение кода. Начало. 07.09.2017{{
	//// СтандартныеПодсистемы.Печать
	//Если ТекущаяФорма.Элементы.Найти("ГруппаПечать") <> Неопределено Тогда
	//	УправлениеПечатью.ПриСозданииНаСервере(ТекущаяФорма, ТекущаяФорма.Элементы.ГруппаПечать);
	//КонецЕсли;
	// Конец СтандартныеПодсистемы.Печать
	// Изменение кода. Конец. 07.09.2017}}
	
	// Проверим дату запрета редактирования.
	бит_ДатыЗапретаРедактирования.УстановитьДоступностьФормыОбъекта(ТекущаяФорма, ТекущийОбъект);
	
	ПолноеИмяОбъекта = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ТекущаяФорма.ИмяФормы, Истина);
	
	// Вызов механизма разделения прав доступа.
	Если НЕ бит_ПраваДоступаОсновной.МеханизмОтключен() Тогда
		
		Имена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ПолноеИмяОбъекта);
		
		Если ЗначениеЗаполнено(Имена.ИмяКоллекции)  Тогда
			
			ИмяТипаОбъект = Имена.ИмяКласса+"Объект."+Имена.ИмяОбъекта;				
			ТипОбъект = Тип(ИмяТипаОбъект);
			
			Об = ДанныеФормыВЗначение(ТекущийОбъект, ТипОбъект);
			бит_ПраваДоступа.ПередОткрытиемФормы(Отказ, СтандартнаяОбработка, Об, ТекущаяФорма);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	бит_ук_СлужебныйСервер.РегистрацияПриОткрытии(Отказ, ПолноеИмяОбъекта);

	//СофтЛаб Начало 2019-09-22 #3493
	ок_УправлениеФормами.ПриСозданииНаСервере(ТекущаяФорма, Отказ, СтандартнаяОбработка);
	//СофтЛаб Конец 2019-09-22 #3493
	
КонецПроцедуры // ФормаОбъектаПриСозданииНаСервере()

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСУсловнымОформлением

// Функция формирует массив реквизитов статей оборотов - признаков учета,
// учитываемых при оформлении таблиц в качестве оформляемых полей.
//  
// Возвращаемое значение:
//   Массив.
// 
Функция СформироватьМассивРеквизитовСтатей() Экспорт

	МетаОбъект = Метаданные.Справочники.бит_СтатьиОборотов;
	
	// Массив реквизитов статей оборотов, учитываемых при оформлении таблиц
	// в качестве оформляемых полей.
	МассивРеквизитовСтатей = Новый Массив;
	
	МассивРеквизитовСтатей.Добавить("Количество");
	МассивРеквизитовСтатей.Добавить("Сумма");
	Если бит_ОбщегоНазначения.ЕстьРеквизит("Учет_Проект", МетаОбъект) Тогда
		МассивРеквизитовСтатей.Добавить("Проект");
	КонецЕсли;
	Если бит_ОбщегоНазначения.ЕстьРеквизит("Учет_БанковскийСчет", МетаОбъект) Тогда
		МассивРеквизитовСтатей.Добавить("БанковскийСчет");
	КонецЕсли;
	Если бит_ОбщегоНазначения.ЕстьРеквизит("Учет_Контрагент", МетаОбъект) Тогда
		МассивРеквизитовСтатей.Добавить("Контрагент");
	КонецЕсли;
	Если бит_ОбщегоНазначения.ЕстьРеквизит("Учет_ДоговорКонтрагента", МетаОбъект) Тогда
		МассивРеквизитовСтатей.Добавить("ДоговорКонтрагента");
	КонецЕсли;	
	Если бит_ОбщегоНазначения.ЕстьРеквизит("Учет_НоменклатурнаяГруппа", МетаОбъект) Тогда
		МассивРеквизитовСтатей.Добавить("НоменклатурнаяГруппа");
	КонецЕсли;
	
	МаксКол = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для н = 1 По МаксКол Цикл		
		МассивРеквизитовСтатей.Добавить("Аналитика_" + н);		
	КонецЦикла; 

	Возврат МассивРеквизитовСтатей;
	
КонецФункции // СформироватьМассивРеквизитовСтатей()

// Функция формирует массив реквизитов статей оборотов - признаков учета,
// учитываемых при оформлении таблиц в качестве оформляемых полей.
//  
// Возвращаемое значение:
//   Массив.
// 
Функция СформироватьМассивРеквизитовСтатейИмяТипа() Экспорт

	МетаОбъект = Метаданные.Справочники.бит_СтатьиОборотов;
	
	// Массив реквизитов статей оборотов, учитываемых при оформлении таблиц
	// в качестве оформляемых полей.
	МассивРеквизитовСтатей = Новый Массив;
	
	МаксКол = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для н = 1 По МаксКол Цикл		
		МассивРеквизитовСтатей.Добавить("Аналитика_" + н);		
	КонецЦикла; 

	Возврат МассивРеквизитовСтатей;
	
КонецФункции // СформироватьМассивРеквизитовСтатей()

// Процедура удаляет элементы условного оформления по представлению.
// 
// Параметры:
//  Представление 	   - Строка.
//  УсловноеОформление - УсловноеОформлениеКомпановкиДанных.
// 
Процедура УдалитьЭлементыОформленияПоПредставлению(Представление, УсловноеОформление) Экспорт

	КоличестоЭлементов = УсловноеОформление.Элементы.Количество();
	Если КоличестоЭлементов = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Для Сч = 1 По КоличестоЭлементов Цикл
		
		НомерЭл = КоличестоЭлементов - Сч;
		
		СтарыйЭлемент = УсловноеОформление.Элементы.Получить(НомерЭл);
		Если СтарыйЭлемент.Представление = Представление Тогда
			УсловноеОформление.Элементы.Удалить(СтарыйЭлемент);	
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементыОформленияПоПредставлению()

// Функция формирует простое условия условного оформления.
//  
// Параметры:
//	УсловиеЛевое  - Строка.
//	УсловиеПравое - Любое значение.
//	ВидСравненияУсловия (По умолчанию = Неопределено).
//
// Возвращаемое значение:
//   Структура.
//
Функция ПростоеУсловие(УсловиеЛевое, УсловиеПравое, ВидСравненияУсловия = Неопределено) Экспорт

	СтруктураУсловия = Новый Структура;
	СтруктураУсловия.Вставить("УсловиеЛевое" , УсловиеЛевое);
	СтруктураУсловия.Вставить("УсловиеПравое", УсловиеПравое);
	Если ВидСравненияУсловия <> Неопределено Тогда
		СтруктураУсловия.Вставить("ВидСравнения", ВидСравненияУсловия);
	КонецЕсли;
	
	Возврат СтруктураУсловия;
	
КонецФункции // ПростоеУсловие()

// Процедура добавляет элемент условного оформления.
// 
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпановкиДанных.
//  Представление  	   - Строка.
//  СтруктураУО 	   - Структура ("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей").
//  Позиция			   - Число (Позиция, в которую необходимо добавить оформление. 
// 							Если = Неопределено, тогда добавляется в конец).
// 
Процедура ДобавитьЭлементУсловногоОформления(УсловноеОформление, Представление, СтруктураУО, Позиция = Неопределено) Экспорт

	// Раскроем структуру УО.
	СтруктураОформления 	= СтруктураУО.СтруктураОформления;
	СтруктураУсловия 		= СтруктураУО.СтруктураУсловия;
	МассивОформляемыхПолей 	= СтруктураУО.МассивОформляемыхПолей;
	
	// Новый элемент условного оформления.
	Если Позиция = Неопределено Тогда
	 	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	Иначе	
	    ЭлементУО = УсловноеОформление.Элементы.Вставить(Позиция);
	КонецЕсли;
	ЭлементУО.Представление = Представление;
	ЭлементУО.Использование = Истина;
	
	// Оформление. 	
	Для каждого КлЗн Из СтруктураОформления Цикл
		ЭлементУО.Оформление.УстановитьЗначениеПараметра(КлЗн.Ключ, КлЗн.Значение);
	КонецЦикла;	
	
	// Условие.
	Если ТипЗнч(СтруктураУсловия) = Тип("Массив") Тогда
		МассивУсловий = СтруктураУсловия;
	Иначе
		МассивУсловий = Новый Массив;
		МассивУсловий.Добавить(СтруктураУсловия);
	КонецЕсли;		
	Для Каждого СтрУсловия Из МассивУсловий Цикл		
		УсловиеУО 				 = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		УсловиеУО.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(СтрУсловия.УсловиеЛевое);
		Если СтрУсловия.Свойство("ВидСравнения") Тогда
			// По умолчанию: ВидСравненияКомпоновкиДанных.Равно.
			УсловиеУО.ВидСравнения = СтрУсловия.ВидСравнения;
		КонецЕсли;
		Если СтрУсловия.Свойство("УсловиеПравое") Тогда
			УсловиеУО.ПравоеЗначение = СтрУсловия.УсловиеПравое;
		КонецЕсли;
	КонецЦикла;
	
	// Оформляемые поля.	
	Для каждого ОфПоле Из МассивОформляемыхПолей Цикл
		ОформляемоеПоле 	 = ЭлементУО.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОфПоле);
	КонецЦикла;
		
КонецПроцедуры // ДобавитьЭлементУсловногоОформления()

// Процедура оформляет табличное поле по признакам учета статей оборотов.
// 
// Параметры:
//  УсловноеОформление 		- УсловноеОформлениеКомпоновкиДанных.
//  МассивСтатей   			- Массив.
//  УдалитьСтароеОформление	- Булево.
//  ПрефиксКонтейнера 		- Строка ("Объект." или "").
//  ПрефиксТаблицы 			- Строка (Имя оформляемой таблицы).
//  Постфикс 				- Строка (Если необходимо добавлять к стандартным именам реквизитов).
//  СтруктураДопПолей 		- Структура (Ключ 	- Имя реквизита статьи - признак учета, Значение - Имя поля таблицы).
//  ИменаОформляемыхТаблиц  - Массив ИЛИ Строка (По умолчанию = Неопределено).
// 	ДопПараметры			- Структура - произвольные дополнительные параметры.
// 
Процедура ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление,
	                                       МассивСтатей, 
										   УдалитьСтароеОформление, 
										   ПрефиксКонтейнера = "", 
										   ПрефиксТаблицы = "", 
										   Постфикс = "", 
										   СтруктураДопПолей = Неопределено, 
										   ИменаОформляемыхТаблиц = Неопределено, 
										   ДопПараметры=Неопределено,
										   ИмяРеквизитаСтатья = "СтатьяОборотов") Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	// Представление элемента условного оформления.
	Представление = "Только просмотр ( " + ПрефиксТаблицы + ")";
	ПредставлениеУО = "Отметка незаполненного ( " + ПрефиксТаблицы + ")";
	
	// Структура оформления
	ЦветФона   = Новый Цвет(225, 225, 225);
	ЦветТекста = Новый Цвет(150, 150, 150);
	Текст 	   = НСтр("ru = 'недоступно'");
	СтрОформления = Новый Структура("ЦветФона, ЦветТекста, Текст, ТолькоПросмотр", ЦветФона, ЦветТекста, Текст, Истина);
	
	ЦветТекста = ЦветаСтиля.ЦветНедоступногоТекста;
	Текст	   = НСтр("ru = '<не требуется>'");
	СтрОформления = Новый Структура("ЦветТекста, Текст, ТолькоПросмотр", ЦветТекста, Текст, Истина);
	
	Если УдалитьСтароеОформление Тогда
		УдалитьЭлементыОформленияПоПредставлению(Представление, УсловноеОформление);	
		УдалитьЭлементыОформленияПоПредставлению(ПредставлениеУО, УсловноеОформление);
	КонецЕсли;
	
	// Добавление новых элементов условного оформления.
	Для каждого Статья Из МассивСтатей Цикл 
		ДобавитьУсловноеОформлениеПоСтатьеОборотов(УсловноеОформление, СтрОформления, Представление, Статья, ПрефиксКонтейнера, ПрефиксТаблицы, Постфикс, СтруктураДопПолей, ИменаОформляемыхТаблиц, ДопПараметры, ИмяРеквизитаСтатья);
	КонецЦикла;
			
КонецПроцедуры // ОФормитьТаблицуПоСтатьямОборотов()

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСУсловнымОформлениемПоСтатусамДокументовВизирование

// Процедура добавляет кнопку "Раскрасить по статусам" в командную панель формы.
// 
// Параметры:
//  Элементы 			- ВсеЭлементыФормы.
//  Команды         	- КомандыФормы.
//  КоманднаяПанель 	- ГруппаФормы (командная панель).
//  МетаданныеОбъекта   - ОбъектМетаданных.
// 
Процедура ДобавитьКнопкуРаскраситьПоСтатусам(Элементы, Команды, КоманднаяПанель, МетаданныеОбъекта) Экспорт

	ИмяКнопки = "РаскраситьПоСтатусам";
	Синоним   = "Раскрасить по статусам";
	Картинка  = БиблиотекаКартинок.бит_Раскрасить;
	
	// Восстановление значения пометки
	СтруктураПараметров = Новый Структура("ОбъектСистемы, КлючЗначения", МетаданныеОбъекта,	"РаскраситьПоСтатусам_Пометка"); 
	Раскрасить_Пометка = РегистрыСведений.бит_СохраненныеЗначения.ПолучитьЗнч(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), 
																			  СтруктураПараметров);
	Пометка = ?(ТипЗнч(Раскрасить_Пометка) = Тип("Булево"), Раскрасить_Пометка, Ложь);
	
	ДобавитьКнопкуНаФорму(Элементы, Команды, ИмяКнопки, Синоним, ИмяКнопки, КоманднаяПанель, Истина, Картинка, Пометка);
			
КонецПроцедуры // ДобавитьКнопкуРаскраситьПоСтатусам()

// Процедура удаляет элементы условного оформления, относящихся к оформлению списка по статусам.
// 
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпановкиДанных.
// 
Процедура ОчиститьОформлениеПоСтатусам(УсловноеОформление) Экспорт

	УдалитьЭлементыОформленияПоПредставлению("Оформление списка по статусам", УсловноеОформление);
	
КонецПроцедуры // ОчиститьОформлениеПоСтатусам()

// Процедура получает результат запроса - данные офомления списка по статусам.
// 
// Параметры:
//  МассивОбъектов - Массив.
// 
Функция ПолучитьОформлениеПоСтатусам(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_СтатусыОбъектов.Объект КАК Объект,
	|	бит_СтатусыОбъектов.Ссылка КАК Статус,
	|	бит_СтатусыОбъектов.Оформление
	|	ИЗ
	|	Справочник.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	|ГДЕ
	|	бит_СтатусыОбъектов.Объект В(&МассивОбъектов)
    |
	|УПОРЯДОЧИТЬ ПО
	|	Объект
	|";
	Результат = Запрос.Выполнить();
	
    Возврат Результат;
	
КонецФункции // ПолучитьОформлениеПоСтатусам()

// Функция формирует массив объектов системы.
// 
// Параметры:
//  МетаданныеОбъекта - ОбъектМетаданных.
//  МассивТипов       - Массив.
//  
// Возвращаемое значение:
//   Массив.
// 
Функция ПолучитьМассивОбъектов(МетаданныеОбъекта, МассивТипов = Неопределено) Экспорт

	МассивОбъектов = Новый Массив;
	
	Если МассивТипов = Неопределено Тогда
		
		ВидОбъекта 			= бит_УправлениеОбъектамиСистемы.ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);
		ИмяОбъекта 		    = МетаданныеОбъекта.Имя;
		ИмяОбъектаПолное   	= бит_УправлениеОбъектамиСистемы.ПолучитьПолноеИмяОбъекта(ИмяОбъекта, ВидОбъекта);
		ОбъектСистемы 		= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное",
																			ИмяОбъектаПолное);
		МассивОбъектов.Добавить(ОбъектСистемы);
		
	Иначе
		
		Если МассивТипов.Количество() > 0 Тогда
			
			// Если в элементах массива описания типов с одним элементом
			// ЭтоОписание = ?(ТипЗнч(МассивТипов[0]) = Тип("ОписаниеТипов"), Истина, Ложь);
						
			Для каждого ЭлТип Из МассивТипов Цикл
				
				// ТипОбъекта = ?(ЭтоОписание, ЭлТип.Типы()[0], ЭлТип);
				ОбъектСистемы = бит_УправлениеОбъектамиСистемы.НайтиОбъектДоступаПоТипу(ЭлТип, 
															Перечисления.бит_ВидыОбъектовСистемы.Документ);
				МассивОбъектов.Добавить(ОбъектСистемы);
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 

	Возврат МассивОбъектов;
	
КонецФункции // ПолучитьМассивОбъектов()

// Процедура добовляет оформление списка документов по настройкам статусов.
// 
// Параметры:
//  МассивОбъектов   	- Массив.
//  ПометкаКнопки		- Булево.
//  УсловноеОформление  - УсловноеОформлениеКомпановкиДанных.
//  ИмяСписка 			- Строка (по умолчанию будет применяться значение "Список"). 
// 
Процедура ОформитьСписокДокументовПоСтатусам(МассивОбъектов
	                                          , ПометкаКнопки
											  , УсловноеОформление
											  , ИмяСписка = "Список"
											  , ИмяПоляСтатус = "Статус"
											  , Очищать = Истина) Экспорт

											  
	Если Очищать Тогда
		  
	  // Удалим старые элементы оформления по статусам.
	  ОчиститьОформлениеПоСтатусам(УсловноеОформление);
		  
	КонецЕсли; 										  
	
	// Если требуется только очистить оформление - выход из процедуры.
	Если Не ПометкаКнопки Тогда
		Возврат;	
	КонецЕсли;
	
	// Представление элемента условного оформления.
	Представление = "Оформление списка по статусам";
		
	ТекущаяДатаКд = ТекущаяДата();
	ОформлениеПоСрокуИсполнения = Неопределено;
	
	// Массив оформляемых полей.
	МассивОформляемых = Новый Массив;
	МассивОформляемых.Добавить(ИмяСписка);
		
	// Структура условия условного оформления.
	СтрУсловия = Новый Структура("УсловиеЛевое, УсловиеПравое");	
	СтрУсловия.Вставить("УсловиеЛевое", ИмяСписка + "." + ИмяПоляСтатус);
	
	
	// Получим настройки.
	Результат = ПолучитьОформлениеПоСтатусам(МассивОбъектов);
	
	Выборка = Результат.Выбрать();  
	Пока Выборка.Следующий() Цикл
		
		ТекущийСтатус = Выборка.Статус;
		
		Оформление = Выборка.Оформление.Получить();
		Если ТипЗнч(Оформление) = Тип("Структура") Тогда
			
			
			// Пропускаем оформление для просроченных задач.
			Если ТекущийСтатус = Справочники.бит_СтатусыОбъектов.Задача_Просрочена Тогда				
				ОформлениеПоСрокуИсполнения = Оформление;
				Продолжить; 					
			КонецЕсли;
			
			СтрУсловия.Вставить("УсловиеПравое", ТекущийСтатус);
			ДобавитьНаборЭлементовУсловногоОформления(УсловноеОформление, 
													Оформление, 
													СтрУсловия, 
													МассивОформляемых, 
													Представление); 			
			
		КонецЕсли;
		 		
	КонецЦикла;
	
	// Оформление для просроченных задач.
	Если ОформлениеПоСрокуИсполнения <> Неопределено Тогда
				
		СтрУсловия.Вставить("УсловиеЛевое" , ИмяСписка + ".Просрочена");	
		СтрУсловия.Вставить("УсловиеПравое", Истина);
		СтрУсловия.Вставить("ВидСравнения" , ВидСравненияКомпоновкиДанных.Равно);
		
		ДобавитьНаборЭлементовУсловногоОформления(УсловноеОформление, 
												ОформлениеПоСрокуИсполнения, 
												СтрУсловия, 
												МассивОформляемых, 
												Представление);
					
	КонецЕсли;

КонецПроцедуры // ОформитьСписокДокументовПоСтатусам() 

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЭлементамиФормы

// Процедура проверяет владельца договора в текущей строке при изменении контрагента,
// если владелец изменился, тогда очищаем договор контрагента.
// 
// Параметры:
//  ВыбранныйКонтрагент - СправочникСсылка.Контрагенты.
//  ДоговорКонтрагента  - СправочникСсылка.ДоговорыКонтрагентов.
// 
Процедура ПроверитьВладельцаДоговораКонтрагентаВСтроке(ВыбранныйКонтрагент, ДоговорКонтрагента) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйКонтрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
        
        ИмяКонтр = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
        
		Если ДоговорКонтрагента[ИмяКонтр] <> ВыбранныйКонтрагент Тогда
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
				
	КонецЕсли; // Если ЗначениеЗаполнено(ТекущаяСтрока.ДоговорКонтрагента) Тогда.
		
КонецПроцедуры // ПроверитьВладельцаДоговораКонтрагентаВСтроке()

// Процедура обрабатывает изменение поля ввода "ДоговорКонтрагента". 
//
// Параметры:
//  ВыбранныйДоговор - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент 		 - СправочникСсылка.Контрагенты.
//
Процедура ИзменениеДоговораКонтрагента(ВыбранныйДоговор, Контрагент) Экспорт
    
    ИмяКонтр = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
    
    // Если в строке не заполнен контрагент, тогда заполним его из договора.
    Если ЗначениеЗаполнено(ВыбранныйДоговор) Тогда
        Если Контрагент <> ВыбранныйДоговор[ИмяКонтр] Тогда
            Контрагент = ВыбранныйДоговор[ИмяКонтр];      
        КонецЕсли;
    КонецЕсли;
    	
КонецПроцедуры // ИзменениеДоговораКонтрагента()

// Процедура устанавливает подменю выбора операции.
// 
// Параметры:
//  Элементы 			  - ВсеЭлементыФормы.
//  Команды         	  - КомандыФормы.
//  ИмяКнопки 			  - Строка.
//  Синоним 			  - Строка.
//  ИмяДействия 		  - Строка.
//  ГруппаРодитель 		  - ГруппаФормы (По умолчанию = Неопределено).
//  ТолькоВоВсехДействиях - Булево (По умолчанию = Ложь).
//  Картинка 			  - Картинка (По умолчанию = Неопределено).
//  Пометка 			  - Булево (По умолчанию = Ложь). 
// 
Процедура ДобавитьКнопкуНаФорму(Элементы, Команды, ИмяКнопки, Синоним, ИмяДействия
	, ГруппаРодитель = Неопределено, ТолькоВоВсехДействиях = Ложь, Картинка = Неопределено, Пометка = Ложь) Экспорт

	ИмяКоманды = "Команда" + ИмяКнопки;
	
	// Добавляем новую команду обработки выбора вида операции.
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Действие = "Подключаемый_" + ИмяДействия;
	Если Картинка <> Неопределено Тогда
		Команда.Картинка = Картинка;
	КонецЕсли;
	
	Если ГруппаРодитель = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"));
	Иначе	
	    НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаРодитель);
	КонецЕсли;  	
	НоваяКнопка.Вид		   				= ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды 				= ИмяКоманды;
	НоваяКнопка.Заголовок  				= Синоним;
	НоваяКнопка.ТолькоВоВсехДействиях 	= ТолькоВоВсехДействиях;
	НоваяКнопка.Пометка 			    = Пометка;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

// Процедура удаляет элементы группы.
// 
// Параметры:
//  Элементы    - ВсеЭлементыФормы.
//  ГруппаФормы - ГруппаФормы.
// 
Процедура УдалитьЭлементыГруппыФормы(Элементы, ГруппаФормы) Экспорт

	КоличествоДекораций = ГруппаФормы.ПодчиненныеЭлементы.Количество();
		
	Для Сч = 1 По КоличествоДекораций Цикл
		
		ЭлементГруппы = ГруппаФормы.ПодчиненныеЭлементы[КоличествоДекораций - Сч];
				
		НайденныйЭлемент = Элементы.Найти(ЭлементГруппы.Имя);
		Если НайденныйЭлемент <> Неопределено Тогда
			
			Элементы.Удалить(НайденныйЭлемент);
		
		КонецЕсли;
					
	КонецЦикла;	

КонецПроцедуры // УдалитьЭлементыГруппыФормы()

// Функция Активизирует один из реквизитов при открытии формы объекта. 
// Типовая процедура модифицирована для работы не только с документами.
// 
// Параметры:
//  ТекущийОбъект       - Произвольный объект. 
//  ТекущаяФорма        - Форма документа.
//  СтруктураРеквизитов - Струкутра (Заранее определенные реквизиты для проверки).
//  ИмяТаблицы   		- Строка (Имя таблицы на каторую будет установлен фокус если все обяз. реквизиты заполнены).
//  ИмяСтраницы			- Строка.
//  ИмяПанели			- Строка (По умолчанию = "ПанельОсновная").
// 
Функция АктивизироватьРеквизитВФорме(ТекущийОбъект, ТекущаяФорма , СтруктураРеквизитов = Неопределено, ИмяТаблицы = Неопределено, ИмяСтраницы = Неопределено, ИмяПанели = "ПанельОсновная") Экспорт
	
	// ----------------------------------------------------------------------
	// Шапка
	флВыполнитьУстановкуВШапке = Истина;
	Если Метаданные.Документы.Найти(Метаданные) <> Неопределено Тогда 		
		флВыполнитьУстановкуВШапке = НЕ ТекущийОбъект.Проведен; 		
	КонецЕсли;
	
	Если флВыполнитьУстановкуВШапке Тогда
		
		Если СтруктураРеквизитов = Неопределено Тогда
			// Структура - порядок активизации реквизитов.
			// Активизируется первый не заполненный.
			СтруктураРеквизитов = Новый Структура();
			СтруктураРеквизитов.Вставить("Дата");
			СтруктураРеквизитов.Вставить("Организация");      
			СтруктураРеквизитов.Вставить("СчетОрганизации");
			СтруктураРеквизитов.Вставить("Склад");
			СтруктураРеквизитов.Вставить("БанковскийСчет");
			СтруктураРеквизитов.Вставить("ФизЛицо");
			СтруктураРеквизитов.Вставить("Контрагент");
			СтруктураРеквизитов.Вставить("ДоговорКонтрагента");
			СтруктураРеквизитов.Вставить("Касса");
			СтруктураРеквизитов.Вставить("Получатель");
			СтруктураРеквизитов.Вставить("Плательщик");
			СтруктураРеквизитов.Вставить("ПодразделениеОрганизации");
		КонецЕсли;
		
		Для каждого Элемент Из СтруктураРеквизитов Цикл
			
			// Определим, есть ли ЭУ с таким именем.
			ЭлементУправления = ТекущаяФорма.Элементы.Найти(Элемент.Ключ);
			Если ЭлементУправления <> Неопределено Тогда // Есть такой
				
				ЗначениеЭлемента = ТекущийОбъект[СтрЗаменить(ЭлементУправления.ПутьКДанным, "Объект.", "")];
				Если ЭлементУправления.Видимость И ЭлементУправления.Доступность И Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда 
					// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
					ТекущаяФорма.ТекущийЭлемент = ЭлементУправления;
					Возврат(Истина);
					Прервать;
				КонецЕсли;
				
				ТекущийРеквезит = ЭлементУправления;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	// ----------------------------------------------------------------------
	// Активация нужной страницы панели. 
	Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
			
		ЭлементПанель = ТекущаяФорма.Элементы.Найти(ИмяПанели);
		Если ЭлементПанель <> Неопределено Тогда
			
			ЭлементСтраница = ТекущаяФорма.Элементы.Найти(ИмяСтраницы);
			Если ЭлементСтраница <> Неопределено Тогда
				
				ЭлементПанель.ТекущаяСтраница = ЭлементСтраница;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	
	// ----------------------------------------------------------------------
	// Если в документе есть таблица то необходимой фокус передать ей.
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		
		ЭлементУправления = ТекущаяФорма.Элементы.Найти(ИмяТаблицы);
		
		Если ТипЗнч(ЭлементУправления) = Тип("ТаблицаФормы") Тогда
			
			ТекущаяФорма.ТекущийЭлемент = ЭлементУправления;
			Возврат(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// ----------------------------------------------------------------------
	// Если все поля заполнены но нет ТЧ то передадим фокус панели, в результате
	// визуально будет казаться что фокус не установлен ни на одном ЭФ.
	// Хотелось бы фокус установить на кнопке "Закрыть", но пока технически не предоставляется
	// такой возможности.
	ЭлементУправления = ТекущаяФорма.Элементы.Найти("ФормаКоманднаяПанель");
	Если ЭлементУправления <> Неопределено Тогда
		
		ТекущаяФорма.ТекущийЭлемент = ЭлементУправления;
		Возврат(Истина);
		
	КонецЕсли;
	
	Возврат(Ложь);

КонецФункции // АктивизироватьРеквизитВФорме()

// Процедура устанавливает параметры выбора элемента.
// 
// Параметры:
//  Элемент 		- ПолеФормы.
//  СтруктураОтбора - Структура.
// 
Процедура УстановитьПараметрыВыбораДляЭлементов(Элементы) Экспорт

	МассивПараметров = Новый Массив;
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь);
	
	МассивПараметров.Добавить(НовыйПараметр);
	
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

	Для Каждого Элемент Из Элементы Цикл
		
		Элемент.ПараметрыВыбора = ПараметрыВыбора;

	КонецЦикла;
	
КонецПроцедуры // УстановитьПараметрыВыбораЭлемента()

// Процедура устанавливает связи параметров выбора для договора контрагента. 
// 
// Параметры:
//  Элемент         - ЭлементУправления.
//  ПутьКонтрагент  - Строка.
//  ПутьОрганизация - Строка.
// 
Процедура УстановитьСвязиПараметровВыбораДоговора(Элемент, ПутьКонтрагент, ПутьОрганизация = "Объект.Организация" ) Экспорт
	
	ИмяКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();	
	ПутьОтборКонтрагент = "Отбор." + ИмяКонтрагента;  
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСвязьПараметраВыбораЭлемента(Элемент
																			,ПутьОтборКонтрагент
																			,ПутьКонтрагент
																			,РежимИзмененияСвязанногоЗначения.Очищать);
	
	Если ЗначениеЗаполнено(ПутьОрганизация) Тогда
		
		бит_ОбщегоНазначенияКлиентСервер.УстановитьСвязьПараметраВыбораЭлемента(Элемент
																				,"Отбор.Организация"
																				,ПутьОрганизация
																				,РежимИзмененияСвязанногоЗначения.Очищать);
		
	КонецЕсли; 																			
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораДоговора()

#КонецОбласти

#Область ПроцедурыИФункцииУправленияВидимостьюКолонок

// Функция определяет необходимо ли изменение видимости колонок бюджета
// При необходимости изменения изменяется значение переменной НастройкаВидимостиКолонок.
// 
// Параметры:
//  МассивСтатей              - Массив.
//  МассивСтатейЭталон        - Массив.
//  НастройкаВидимостиКолонок - Структура.
//  НастройкиИзмерений        - Соответствие.
// 
// Возвращаемое значение:
//  флНужноИзменить - Булево.
// 
Функция НужноИзменитьВидимостьКолонокБюджета(МассивСтатей
											 ,МассивСтатейЭталон
											 ,НастройкаВидимостиКолонок
											 ,НастройкиИзмерений = Неопределено) Экспорт
											 
    флНужноИзменитьВидимость = Ложь;											 
											 
	МассивСтатей = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	СтрПредставление1 = ЗначениеВСтрокуВнутр(МассивСтатей);
	СтрПредставление2 = ЗначениеВСтрокуВнутр(МассивСтатейЭталон);
	
	Если СтрПредставление1 <> СтрПредставление2 Тогда
		
		МассивСтатейЭталон = МассивСтатей;
		
		НастройкаВидимостиКолонок = бит_Бюджетирование.ПолучитьНастройкуВидимостиКолонок(МассивСтатей,НастройкиИзмерений);
		
		флНужноИзменитьВидимость  = Истина;
		
	КонецЕсли; // Изменился состав статей.
	
	Возврат флНужноИзменитьВидимость;
	
КонецФункции // НужноИзменитьВидимостьКолонокБюджета()

// Процедура устанавливает видимость колонок табличного поля по структуре настройки.
// 
// Параметры:
//  Элементы 				  - Элементы формы.
//  НастройкаВидимостиКолонок - Структура (Ключ: ИмяКолонки, Значение: Видимость).
//  Префикс  				  - Строка.
//  Постфикс 				  - Строка.
// 
Процедура УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 ,НастройкаВидимостиКолонок
											 ,Префикс  = ""
											 ,Постфикс = "") Экспорт
		 
	 Для каждого КиЗ Из НастройкаВидимостиКолонок Цикл
				
		ИмяКолонки 	   = Префикс + КиЗ.Ключ + Постфикс;
		КолонкаТабПоля = Элементы.Найти(ИмяКолонки);
		
		Если КолонкаТабПоля <> Неопределено Тогда
			КолонкаТабПоля.Видимость = КиЗ.Значение;
		КонецЕсли;
 	КонецЦикла; // По ключам настройки	
	
КонецПроцедуры // УправлениеВидимостьюКолонокТабличногоПоля()

#КонецОбласти

#Область ПроцедурыИФункцииПоРаботеСЕдиницамиИзмеренияСумм

// Функция получает длину сумм.
// 
// Параметры:
//  ЕдиницаИзмеренияСумм - ПеречислениеСсылка.бит_ЕдиницыИзмеренияСумм.
// 
// Возвращаемое значение:
//  Число.
// 
Функция ПолучитьДлинуСуммПоЕдиницеИзмерения(ЕдиницаИзмеренияСумм) Экспорт

	СоответствиеКоэффициентов = Новый Соответствие;
	СоответствиеКоэффициентов.Вставить(Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы , 15);
	СоответствиеКоэффициентов.Вставить(Перечисления.бит_ЕдиницыИзмеренияСумм.Тысячи  , 12);
	СоответствиеКоэффициентов.Вставить(Перечисления.бит_ЕдиницыИзмеренияСумм.Миллионы, 9);
	
	ДлинаСуммы = СоответствиеКоэффициентов.Получить(ЕдиницаИзмеренияСумм);
    ДлинаСуммы = ?(ДлинаСуммы = Неопределено, 15, ДлинаСуммы);
	
	Возврат ДлинаСуммы;
	
КонецФункции // ПолучитьРазмерностьЕдиницыИзмеренияСумм()

// Функция получает размерность единицы измерения сумм.
// 
// Параметры:
//  ЕдиницаИзмеренияСумм - ПеречислениеСсылка.бит_ЕдиницыИзмеренияСумм.
// 
// Возвращаемое значение:
//  Коэффициент - Число.
// 
Функция ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм) Экспорт

	СоответствиеКоэффициентов = Новый Соответствие;
	СоответствиеКоэффициентов.Вставить(Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы , 1);
	СоответствиеКоэффициентов.Вставить(Перечисления.бит_ЕдиницыИзмеренияСумм.Тысячи  , 1000);
	СоответствиеКоэффициентов.Вставить(Перечисления.бит_ЕдиницыИзмеренияСумм.Миллионы, 1000000);
	
	Коэффициент = СоответствиеКоэффициентов.Получить(ЕдиницаИзмеренияСумм);
    Коэффициент = ?(Коэффициент = Неопределено, 1, Коэффициент);
	
	Возврат Коэффициент;
	
КонецФункции // ПолучитьРазмерностьЕдиницыИзмеренияСумм()

// Функция получает точность числа единицы измерения сумм.
// 
// Параметры:
//  ЕдиницаИзмеренияСумм - ПеречислениеСсылка.бит_ЕдиницыИзмеренияСумм.
// 
// Возвращаемое значение:
//  ТочностьЧисла - Число.
// 
Функция ПолучитьТочностьЧислаЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм) Экспорт

	// Сформируем массив точности числа.
	СоответствиеТочности = Новый Соответствие;
	СоответствиеТочности.Вставить(Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы , 2);
	СоответствиеТочности.Вставить(Перечисления.бит_ЕдиницыИзмеренияСумм.Тысячи  , 5);
	СоответствиеТочности.Вставить(Перечисления.бит_ЕдиницыИзмеренияСумм.Миллионы, 8);
	
	// Получим точность числа единицы измерения сумм.
	ТочностьЧисла = СоответствиеТочности.Получить(ЕдиницаИзмеренияСумм);
	ТочностьЧисла = ?(ТочностьЧисла = Неопределено, 2, ТочностьЧисла);

	Возврат ТочностьЧисла;
	
КонецФункции // ПолучитьТочностьЧислаЕдиницыИзмеренияСумм()

// Функция формирует структуру редактирования числового значения по единице измерения.
// 
// Параметры:
//  ЕдиницаИзмеренияСумм - ПеречислениеСсылка.бит_ЕдиницыИзмеренияСумм. 
//  СуммаИсточник 		 - Число.
//  ПредставлениеСуммы   - Строка.
// 
// Возвращаемое значение:
//  Структура или Неопределено.
// 
Функция ПолучитьСтруктуруРедактированияЧисловогоЗначенияПоЕдиницеИзмерения(ЕдиницаИзмеренияСумм, СуммаИсточник, ПредставлениеСуммы) Экспорт

	Если ЕдиницаИзмеренияСумм = Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы Тогда
		
		СтруктуруРедактированияНДС = Неопределено;
		
	Иначе
		 		
		// Размерность единицы.
		РазмерностьЕдиницы = ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм);
        
		// Точность числа указанной единицы измерения сумм.
		ТочностьЧисла = ПолучитьТочностьЧислаЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм);
		
		// Тип числа.
		ТипЧислаЕдиницы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, ТочностьЧисла));
		
		// Расчет суммы в указанной единице измерения сумм.
		ИзменяемаяСумма = бит_ОбщегоНазначенияКлиентСервер.ПересчитатьИзРазмерностиВРазмерность(СуммаИсточник
																				   ,1
																				   ,РазмерностьЕдиницы);		
		
		СтруктуруРедактированияНДС = Новый Структура;
		СтруктуруРедактированияНДС.Вставить("РазмерностьЕдиницы", РазмерностьЕдиницы);
		СтруктуруРедактированияНДС.Вставить("ИзменяемаяСумма"	, ИзменяемаяСумма);
		СтруктуруРедактированияНДС.Вставить("ТочностьЧисла"	 	, ТочностьЧисла);
		СтруктуруРедактированияНДС.Вставить("ТипЧислаЕдиницы"	, ТипЧислаЕдиницы);
		СтруктуруРедактированияНДС.Вставить("ПредставлениеСуммы", ПредставлениеСуммы);
		
	КонецЕсли;
	
	Возврат СтруктуруРедактированияНДС;
	
КонецФункции // ПолучитьСтруктуруРедактированияЧисловогоЗначенияПоЕдиницеИзмерения()

#КонецОбласти

#Область ПроцедурыИФункцииПоРаботеСОтборамиДинамическихСписков

// Процедура удаляет элемент отбора динамического списка.
// 
// Параметры:
//  Список  - ДинамическийСписок.
//  ИмяПоля - Имя поля компоновки, отбор по которому нужно удалить.
// 
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыДляУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементОтбораДляУдаления Из ЭлементыДляУдаления Цикл
		ЭлементыОтбора.Удалить(ЭлементОтбораДляУдаления);
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Процедура устанавливает элемент отбор динамического списка.
// 
// Параметры:
//  Список			- Динамический список.
//  ИмяПоля			- Строка - имя поля компоновки, отбор по которому нужно установить.
//  ПравоеЗначение 	- Произвольный - значение отбора.
//  ВидСравнения	- ВидСравненияКомпоновкиДанных (По умолчанию = Равно).
//  Представление   - Строка (По умолчанию = "").
//  Использование	- Булево (По усолчанию = Истина).
// 
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, Представление = "", Использование = Истина) Экспорт
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);	
	ЭлементОтбора.ВидСравнения   = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование  = Использование;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбора.Представление  = Представление;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Процедура изменяет элемент отбора динамического списка.
// 
// Параметры:
//  Список         - Динамический список.
//  ИмяПоля        - Строка - имя поля компоновки, отбор по которому нужно установить.
//  ПравоеЗначение - Произвольный.
//  Установить     - Булево - признак необходимости установить отбор.
//  ВидСравнения   - ВидСравненияКомпоновкиДанных (По умолчанию = Равно).
// 
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// Изменение элементов отбора.
//
// Параметры:
//  ИмяПоля          - Строка - имя поля компоновки.
//  ВидСравнения     - ВидСравненияКомпоновкиДанных - вид сравнения.
//  ПравоеЗначение   - Произвольный.
//  Представление    - Строка - представление элемента компоновки данных.
//  Использование    - Булево - использование элемента.
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
// 
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								знач ИмяПоля = Неопределено,
								знач Представление = Неопределено,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции // ИзменитьЭлементыОтбора()

// Добавление элемента компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления                      - контейнер с элементами и группами отбора, например,
//                                              Список.Отбор или группа в отборе.
//  ИмяПоля                                - Строка - имя для поля компоновки данных.
//  ВидСравнения                           - ВидСравненияКомпоновкиДанных - вид сравнения.
//  ПравоеЗначение                         - Произвольный.
//  Представление                          - Представление элемента компоновки данных.
//  Использование                          - Булево - использование элемента.
//  РежимОтображения                       - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка 
// 				(См. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки в синтакс-помощнике).
// 
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									знач ИмяПоля,
									знач ВидСравнения,
									знач ПравоеЗначение = Неопределено,
									знач Представление  = Неопределено,
									знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции // ДобавитьЭлементКомпоновки()

// Используется для создания элемента отбора или, если таковой не найден,
// установления существующим элементам свойств.
// Параметры:
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе.
//  ИмяПоля - Строка - имя для поля компоновки данных (заполняется всегда).
//
// Устанавливаемые поля:
//  ВидСравнения     - ВидСравненияКомпоновкиДанных - вид сравнения.
//  ПравоеЗначение   - Произвольный.
//  Представление    - Представление элемента компоновки данных.
//  Использование    - Булево - использование элемента.
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка 
//            (См. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки в синтакс-помощнике).
// 
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								знач ИмяПоля,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Представление = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено,
								знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры // УстановитьЭлементОтбора()

// Процедура устанавливает отбор по организации для списков.
// 
// Параметры:
//  Форма  		   - Форма.
//  ИмяСписка	   - Строка (По умолчанию = "Список").
//  ИмяРеквизита   - Строка (По умолчанию = "Организация").
//  ЗначениеОтбора - СправочникСсылка.Организации (По умолчанию = Неопределено).
// 
Функция УстановитьОтборПоОсновнойОрганизацииБит(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт
	
	Если Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
		// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем.
		ОсновнаяОрганизация = Форма.Параметры.Отбор[ИмяРеквизита];
		Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") 
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
		ОсновнаяОрганизация = ЗначениеОтбора;
	Иначе
		ОсновнаяОрганизация = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ОсновнаяОрганизация");
	КонецЕсли;

	Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;

	ИспользованиеОтбора = ЗначениеЗаполнено(ОсновнаяОрганизация);

	ИзменитьЭлементОтбораСписка(Форма[ИмяСписка]
									, ИмяРеквизита
									, ОсновнаяОрганизация
									, ЗначениеЗаполнено(ОсновнаяОрганизация)
									, ВидСравненияОтбора);
		
	Возврат ОсновнаяОрганизация;    	

КонецФункции // УстановитьОтборПоОсновнойОрганизацииБит()

// Процедура устанавливает отбор по организации для списков.
// 
// Параметры:
//  Форма  		   - Форма.
//  ИмяСписка	   - Строка (По умолчанию = "Список").
//  ИмяРеквизита   - Строка (По умолчанию = "Организация").
//  ЗначениеОтбора - СправочникСсылка.Организации (По умолчанию = Неопределено).
// 
Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт
    
    Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Возврат Истина;
	КонецЕсли;
    
	Если Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
		// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем.
		ОсновнаяОрганизация = Форма.Параметры.Отбор[ИмяРеквизита];
		Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") 
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
		ОсновнаяОрганизация = ЗначениеОтбора;
	Иначе
		ОсновнаяОрганизация = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ОсновнаяОрганизация");
	КонецЕсли;

	Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;

	ИспользованиеОтбора = ЗначениеЗаполнено(ОсновнаяОрганизация);

	// бит_РаботаСДиалогамиСервер.ИзменитьЭлементОтбораСписка(Форма[ИмяСписка]
	// 								, ИмяРеквизита
	// 								, ОсновнаяОрганизация
	// 								, ЗначениеЗаполнено(ОсновнаяОрганизация)
	// 								, ВидСравненияОтбора);

	Если бит_ОбщегоНазначения.ЭтоСемействоБП() ИЛИ бит_ОбщегоНазначения.ЭтоУТ() Тогда
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма[ИмяСписка], ИмяРеквизита, ОсновнаяОрганизация, ВидСравненияОтбора, , ИспользованиеОтбора, 
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
							
		
	КонецЕсли;  	
		
	Возврат ОсновнаяОрганизация;    	

КонецФункции // УстановитьОтборПоОсновнойОрганизации()

// Заменяет отбор, установленный пользователем в сохраненной настройке списка, на отбор.
// установленный программно при создании формы списка.
// Вызывается при восстановлении пользовательских настроек динамического списка
// из обработчика списка ПередЗагрузкойПользовательскихНастроекНаСервере.
// 
// Параметры
//  Список    - ДинамическийСписок.
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - восстанавливаемые настройки списка.
//  ИмяОтбора - Строка - имя элемента отбора.
// 
Процедура ВосстановитьОтборСписка(Список, Настройки, ИмяОтбора) Экспорт
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() ИЛИ бит_ОбщегоНазначения.ЭтоУТ() Тогда
		
	     Модуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияБП");
		 Модуль.ВосстановитьОтборСписка(Список, Настройки, "Организация");
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьОтборСписка()

#КонецОбласти

#Область ПроцедурыИФункцииВыборИнтервала

// Функция формирует представление периода в зависимости от периодичности планирования.
// 
// Параметры:
//  ДатаНачала		  - Дата. 
//  ЗнчПериодичность  - ПеречислениеСсылка.бит_ПериодичностьПланирования. 
// 
// Возвращаемое значение:
//  Представление - Строка. 
// 
Функция СформироватьПредставлениеПериода(ДатаНачала, ЗнчПериодичность) Экспорт

	СтрФрм_День    = "ДФ=dd.MM.yyyy";  		    // Строка для форматирования дня.
	СтрФрм_Месяц   = "ДФ='MMMM yyyy'"; 		    // Строка для форматирования месяца.
	СтрФрм_Квартал = "ДФ='q ""квартал"" yyyy'"; // Строка для форматирования квартала.
	СтрФрм_Год     = "ДФ=yyyy";        		    // Строка для форматирования года.
	
	
	Если ЗнчПериодичность = Перечисления.бит_ПериодичностьПланирования.День Тогда
		
		Представление = "День (" + Формат(ДатаНачала, СтрФрм_День) + ")";
		
	ИначеЕсли ЗнчПериодичность = Перечисления.бит_ПериодичностьПланирования.Неделя Тогда
		
		Представление = "Неделя (" + Формат(НачалоНедели(ДатаНачала), СтрФрм_День) + " - " + Формат(КонецНедели(ДатаНачала), СтрФрм_День) + ")";
		
	ИначеЕсли ЗнчПериодичность = Перечисления.бит_ПериодичностьПланирования.Декада Тогда
		
		Представление = "Декада (" + Формат(бит_Бюджетирование.ПолучитьНачалоПериода(ДатаНачала, ЗнчПериодичность), СтрФрм_День) 
								+ " - " + Формат(бит_Бюджетирование.ПолучитьКонецПериода(ДатаНачала, ЗнчПериодичность), СтрФрм_День) + ")";		
		
	ИначеЕсли ЗнчПериодичность = Перечисления.бит_ПериодичностьПланирования.Месяц Тогда	
		
		Представление = Формат(ДатаНачала, СтрФрм_Месяц);
		
	ИначеЕсли ЗнчПериодичность = Перечисления.бит_ПериодичностьПланирования.Квартал Тогда
		
		Представление = Формат(ДатаНачала, СтрФрм_Квартал);
		
	ИначеЕсли ЗнчПериодичность = Перечисления.бит_ПериодичностьПланирования.Полугодие Тогда
		
		Если Формат(ДатаНачала, "ДФ=q") = "3" ИЛИ Формат(ДатаНачала, "ДФ=q") = "4" Тогда			
			Представление = "2-ое полугодие " + Формат(ДатаНачала, СтрФрм_Год) + " г."; 			
		Иначе                                                                     			
			Представление = "1-ое полугодие " + Формат(ДатаНачала, СтрФрм_Год) + " г.";
		КонецЕсли;
		
	ИначеЕсли ЗнчПериодичность = Перечисления.бит_ПериодичностьПланирования.Год Тогда	
		
		Представление = Формат(ДатаНачала, СтрФрм_Год);
		
	КонецЕсли; 

   Возврат Представление;
   
КонецФункции // СформироватьПредставлениеПериода()

// Процедура получает периодичность сверки ВГО, устанавливает интервал по дате начала и периодичности.
// 
// Параметры:
//  ДатаНачала 			 - Дата. 
//  ДатаОкончания 		 - Дата.
//  ЗнчПериодичность 	 - ПеречислениеСсылка.бит_ПериодичностьПланирования .
//  ПредставлениеПериода - Строка. 
// 
Процедура ЗаполнитьДанныеИнтервала(ДатаНачала, ДатаОкончания, ЗнчПериодичность, ПредставлениеПериода) Экспорт

	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДата();
	КонецЕсли;
	
	ЗнчПериодичность = бит_вго_Сервер.ПолучитьПериодичностьСверкиВГО(ДатаНачала);
	
	ПредставлениеПериода = СформироватьПредставлениеПериода(ДатаНачала, ЗнчПериодичность);
	
	ДатаНачала    = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаНачала, ЗнчПериодичность);
	ДатаОкончания = бит_Бюджетирование.ПолучитьКонецПериода(ДатаНачала, ЗнчПериодичность);
 	
КонецПроцедуры // ЗаполнитьДанныеИнтервала()

#КонецОбласти

#Область ПерехватТиповыхСобытий

// Процедура выполняет перехват типовых событий управляемой формы.
// 
// Параметры:
//  ТекущаяФорма          - Управляемая форма.
//  События               - Массив - Имена, событий, которые нужно перехватить.
//  ИмяРеквизитаХранилища - Строка - Имя реквизита формы для хранения имен обработчиков.
// 
Процедура ВыполнитьПерехватСобытий(ТекущаяФорма, События, ИмяРеквизитаХранилища) Экспорт

	// Тело модуля может выполняться более одного раза - поэтому проверим был ли проведен перехват типовых событий.
	МассивРеквизитов = ТекущаяФорма.ПолучитьРеквизиты();
	
	флЕсть = Ложь;
	Для каждого ТекРеквизит Из МассивРеквизитов Цикл
	
		Если ТекРеквизит.Имя = ИмяРеквизитаХранилища Тогда
			
			флЕсть = Истина;
			Продолжить;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Если флЕсть Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	// Создание реквизита формы для хранения обработчиков.
	ДобавляемыеРеквизиты = Новый Массив;
	
	НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизитаХранилища, Новый ОписаниеТипов("Неопределено"), , "Обработчики (БИТ)", Ложь);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ТекущаяФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Инициализация хранилища обработчиков
	ТекущаяФорма[ИмяРеквизитаХранилища] = Новый Структура("Форма", Новый Структура);
	
	Для каждого ТиповоеСобытие Из События Цикл
		
		ТекДействие   = Строка(ТекущаяФорма.ПолучитьДействие(ТиповоеСобытие));
		ИмяСобытияНов = "бит_"+ТиповоеСобытие;
		
		// Типовой обработчик назначен - кэшируем его имя.
		Если НЕ ПустаяСтрока(ТекДействие) Тогда
			
			КлючТиповогоСобытия = "бит_Типовой_"+ТиповоеСобытие;
			ТекущаяФорма[ИмяРеквизитаХранилища].Форма.Вставить(КлючТиповогоСобытия,ТекДействие);
			
		КонецЕсли; 
		
		ТекущаяФорма.УстановитьДействие(ТиповоеСобытие, ИмяСобытияНов);
		
	КонецЦикла; 

КонецПроцедуры // ВыполнитьПерехватСобытий()

#КонецОбласти

#Область ДинамическоеФормированиеЭлементовУправленияСправочникаРбп

// Процедура добавляет элементы управления для реквизитов БИТ в форму элемента справочника РБП. 
// 
// Парметры:
//  Элементы
// 
Процедура РБП_Элемент_ДобавитьДинамическиеЭлементы(Элементы) Экспорт

  ГруппаМСФО = Элементы.Добавить("бит_ГруппаМСФО", Тип("ГруппаФормы"));
  ГруппаМСФО.Заголовок           = НСтр("ru = 'МСФО (БИТ)'");
  ГруппаМСФО.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
  ГруппаМСФО.Отображение         = ОтображениеОбычнойГруппы.СлабоеВыделение;
  ГруппаМСФО.ОтображатьЗаголовок = Истина;
  
  ЭУ = Элементы.Добавить("бит_ВидРБП_МСФО", Тип("ПолеФормы"), ГруппаМСФО);
  ЭУ.ПутьКДанным = "Объект.бит_ВидРБП_МСФО";
  ЭУ.Вид         = ВидПоляФормы.ПолеВвода;
  ЭУ.Заголовок   =  НСтр("ru = 'Вид РБП'");
  
  ЭУ = Элементы.Добавить("бит_НМА_МСФО", Тип("ПолеФормы"), ГруппаМСФО);
  ЭУ.ПутьКДанным = "Объект.бит_НМА_МСФО";
  ЭУ.Вид         = ВидПоляФормы.ПолеВвода;
  ЭУ.Заголовок   =  НСтр("ru = 'НМА'");

КонецПроцедуры // РБП_Элемент_ДобавитьДинамическиеЭлементы()

// Процедура добавляет элементы управления для реквизитов БИТ в форму списка справочника РБП. 
// 
// Парметры:
//  Элементы
//
Процедура РБП_Список_ДобавитьДинамическиеЭлементы(Элементы) Экспорт

  ГруппаМСФО = Элементы.Добавить("бит_ГруппаМСФО", Тип("ГруппаФормы"),Элементы.Список);
  ГруппаМСФО.Заголовок           = НСтр("ru = 'МСФО (БИТ)'");
  ГруппаМСФО.Вид                 = ВидГруппыФормы.ГруппаКолонок;
  
  ЭУ = Элементы.Добавить("бит_ВидРБП_МСФО", Тип("ПолеФормы"), ГруппаМСФО);
  ЭУ.ПутьКДанным = "Список.бит_ВидРБП_МСФО";
  ЭУ.Вид         = ВидПоляФормы.ПолеВвода;
  
  ЭУ = Элементы.Добавить("бит_НМА_МСФО", Тип("ПолеФормы"), ГруппаМСФО);
  ЭУ.ПутьКДанным = "Список.бит_НМА_МСФО";
  ЭУ.Вид         = ВидПоляФормы.ПолеВвода;

КонецПроцедуры // РБП_Список_ДобавитьДинамическиеЭлементы()

#КонецОбласти

#Область Картинки

// Процедура устанавливает картинку строки: документ проведен, непроведен, удален.
// 
// Параметры:
//  ТекущаяСтрока  			  - ДанныеФормыЭлементКоллекции.
//  ИсточникДанныхПоДокументу - ДокументСсылка или Выборка результата запроса.
//  ИмяРеквизитаКартинки 	  - Строка (По умолчанию = "СтандартнаяКартинка").
//  Проведен                  - Булево (По умолчанию = Неопределено).
//  ПометкаУдаления           - Булево (По умолчанию = Неопределено).
// 
Процедура УстановитьКартинкиСтрокиПоДокументам(ТекущаяСтрока
                                              , ДокСсылка
                                              , ИмяРеквизитаКартинки = "СтандартнаяКартинка"
                                              , Проведен = Неопределено
                                              , ПометкаУдаления = Неопределено) Экспорт

                                              
   Если Проведен = Неопределено Тогда
       
        ИмяДокумента = ДокСсылка.Метаданные().Имя;
        
        Запрос = Новый Запрос;
        Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   ТаблДок.Проведен,
        |   ТаблДок.ПометкаУдаления
        |ИЗ
        |   Документ.%ИмяДок% КАК ТаблДок
        |ГДЕ
        |   ТаблДок.Ссылка = &ДокСсылка
        |
        |";
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяДок%", ИмяДокумента);
        Результат = Запрос.Выполнить();
        
        Если Результат.Пустой() Тогда
            Проведен        = Ложь;
        	ПометкаУдаления = Ложь;
        Иначе
            Выборка = Результат.Выбрать();
            Выборка.Следующий();
            Проведен        = Выборка.Проведен;
	        ПометкаУдаления = Выборка.ПометкаУдаления;
        КонецЕсли;
    
    КонецЕсли;  
	
	Если Проведен Тогда	
		
		ТекущаяСтрока[ИмяРеквизитаКартинки] = БиблиотекаКартинок.бит_ДокументПроведен;
		
	ИначеЕсли ПометкаУдаления Тогда	
		
		ТекущаяСтрока[ИмяРеквизитаКартинки] = БиблиотекаКартинок.бит_ДокументУдален;
		
	Иначе
		
		ТекущаяСтрока[ИмяРеквизитаКартинки] = БиблиотекаКартинок.бит_ДокументНепроведен;
	
	КонецЕсли;	

КонецПроцедуры // УстановитьКартинкиСтрокиПоДокументам()

#КонецОбласти

#Область УстаревшийФункционал

Процедура УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы) Экспорт
	// Устарело.
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет значения в массив оформляемых полей.
// 
// Параметры:
//  МассивОформляемых  	   - Массив.
//  ИмяОформляемойТаблицы  - Строка.
//  Постфикс			   - Строка. 
//  Статья                 - СправочникСсылка.бит_СтатьиОборотов.
//  МассивРеквизитовСтатей - Массив.
//  СтруктураДопПолей	   - Структура (Ключ - Имя реквизита статьи - признак учета, Значение - Имя поля таблицы).
// 
Процедура ДобавитьОформляемыеПоля(МассивОформляемых, ИмяОформляемойТаблицы, Постфикс, Статья, МассивРеквизитовСтатей, СтруктураДопПолей)

	// Основные оформляемые поля.
	Для каждого СтрРеквизит Из МассивРеквизитовСтатей Цикл
		ИмяРеквизита = "Учет_" + СтрРеквизит;
		Если Не Статья[ИмяРеквизита] Тогда
			МассивОформляемых.Добавить(ИмяОформляемойТаблицы + СтрРеквизит + Постфикс);				
		КонецЕсли;		
	КонецЦикла;
	
	// Оформляемые поля переданные через дополнительную структуру.
	Если СтруктураДопПолей <> Неопределено Тогда
		
		Для каждого КлЗнч Из СтруктураДопПолей Цикл
			
			ИмяРеквизита   = КлЗнч.Ключ;
			ИмяПоляТаблицы = КлЗнч.Значение;
			
			Если Не Статья[ИмяРеквизита] Тогда
				
				Если ТипЗнч(ИмяПоляТаблицы) = Тип("Массив") Тогда
					Для каждого ЭлементМассиваИмен Из ИмяПоляТаблицы Цикл
						МассивОформляемых.Добавить(ИмяОформляемойТаблицы + ЭлементМассиваИмен + Постфикс);
					КонецЦикла;
				Иначе	
					МассивОформляемых.Добавить(ИмяОформляемойТаблицы + ИмяПоляТаблицы + Постфикс);
				КонецЕсли;
								
			КонецЕсли;  
			
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры // ДобавитьОформляемыеПоля()

// Процедура добавляет набор элементов условного оформления (ЦветФона, ЦфетТекста, Шрифт).
// 
// Параметры:
//  УсловноеОформление  - УсловноеОформление.
//  Оформление  		- Структура.
//  СтрУсловия          - Структура.
//  МассивОформляемых   - Массив.
//  Представление       - Строка.
// 
Процедура ДобавитьНаборЭлементовУсловногоОформления(УсловноеОформление, Оформление, СтрУсловия, МассивОформляемых, Представление)

	Если Оформление.Свойство("ЦветФона") Тогда
				
		// СтрУсловия.Вставить("УсловиеПравое", Выборка.Статус);
		СтрОформления = Новый Структура("ЦветФона", Оформление.ЦветФона);
		СтруктураУО = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей",
										СтрОформления, СтрУсловия, МассивОформляемых);
		ДобавитьЭлементУсловногоОформления(УсловноеОформление, Представление, СтруктураУО);				

	КонецЕсли;
	
	Если Оформление.Свойство("ЦветТекста") Тогда
		
		// СтрУсловия.Вставить("УсловиеПравое", Выборка.Статус);
		СтрОформления = Новый Структура("ЦветТекста", Оформление.ЦветТекста);
		СтруктураУО = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей",
										СтрОформления, СтрУсловия, МассивОформляемых);
		ДобавитьЭлементУсловногоОформления(УсловноеОформление, Представление, СтруктураУО);
		
	КонецЕсли;
	
	Если Оформление.Свойство("Шрифт") Тогда
		
		// СтрУсловия.Вставить("УсловиеПравое", Выборка.Статус);
		СтрОформления = Новый Структура("Шрифт", Оформление.Шрифт);
		СтруктураУО = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей",
										СтрОформления, СтрУсловия, МассивОформляемых);
		ДобавитьЭлементУсловногоОформления(УсловноеОформление, Представление, СтруктураУО);
		
	КонецЕсли;	

КонецПроцедуры // ДобавитьНаборЭлементовУсловногоОформления()

// Процедура для рекурсивного поиска.
//
// Параметры:
//  КоллекцияЭлементов.
//  МассивЭлементов.
//  СпособПоиска.
//  ЗначениеПоиска.
//
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // НайтиРекурсивно()

Процедура ДобавитьУсловноеОформлениеПоСтатьеОборотов(УсловноеОформление, СтрОформления, Представление, 
	Статья, ПрефиксКонтейнера = "", ПрефиксТаблицы = "", Постфикс = "", СтруктураДопПолей = Неопределено, 
	ИменаОформляемыхТаблиц = Неопределено, ДопПараметры=Неопределено, ИмяРеквизитаСтатья)

	Если Не ЗначениеЗаполнено(Статья) ИЛИ Статья.ЭтоГруппа Тогда	
		Возврат;  	
	КонецЕсли; 
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ОтметитьОбязательныеРазрезыСтатей = Ложь;
	Если ДопПараметры.Свойство("ОтметитьОбязательныеРазрезыСтатей") Тогда
		ОтметитьОбязательныеРазрезыСтатей = ДопПараметры.ОтметитьОбязательныеРазрезыСтатей;
	КонецЕсли;
	
	// ----------------------------------------------------------------------
	// Стуктура условия.
	СтрУсловия = Новый Структура("УсловиеЛевое, УсловиеПравое", 
										ПрефиксКонтейнера + ПрефиксТаблицы + "."+ИмяРеквизитаСтатья + Постфикс,
										Статья);
										
										
	// ----------------------------------------------------------------------										
	// Массив реквизитов статей.								
	МассивРеквизитовСтатей = СформироватьМассивРеквизитовСтатей();
	
	
	// ----------------------------------------------------------------------
	// Массив оформляемых полей.	
	МассивОформляемых = Новый Массив();
	
	Если ИменаОформляемыхТаблиц = Неопределено Тогда
		
		ДобавитьОформляемыеПоля(МассивОформляемых, ПрефиксТаблицы, Постфикс, Статья, МассивРеквизитовСтатей, СтруктураДопПолей);
		
	ИначеЕсли ТипЗнч(ИменаОформляемыхТаблиц) = Тип("Строка") Тогда
		
		ДобавитьОформляемыеПоля(МассивОформляемых, ИменаОформляемыхТаблиц, Постфикс, Статья, МассивРеквизитовСтатей, СтруктураДопПолей);	
		
	Иначе
		
		Для каждого ИмяОфТаб Из ИменаОформляемыхТаблиц Цикл
			ДобавитьОформляемыеПоля(МассивОформляемых, ИмяОфТаб, Постфикс, Статья, МассивРеквизитовСтатей, СтруктураДопПолей);
		КонецЦикла;
		
	КонецЕсли;     		
	
	
	// ----------------------------------------------------------------------
	// Добавление элемента условного оформления.
	СтруктураУО = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей",
								СтрОформления, СтрУсловия, МассивОформляемых);  								
	ДобавитьЭлементУсловногоОформления(УсловноеОформление, Представление, СтруктураУО);	

	
	// Добавим отметку незаполненных обязательных разрезов статьи оборотов.
	
	Если ОтметитьОбязательныеРазрезыСтатей Тогда
		
		ПредставлениеУО = "Отметка незаполненного ( " + ПрефиксТаблицы + ")";
		// Структура оформления.
		СтруктураОформления = Новый Структура("ОтметкаНезаполненного", Истина);
		
		МетаСтатьи = Метаданные.Справочники.бит_СтатьиОборотов;
		
		// Основные оформляемые поля.
		Для Каждого СтрРеквизит Из МассивРеквизитовСтатей Цикл
			
			ИмяРеквизита = "Обязательный_" + СтрРеквизит;
			
			Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизита, МетаСтатьи)
				И Статья[ИмяРеквизита] Тогда
				
				МассивОформляемых = Новый Массив;
				
				МассивУсловий = Новый Массив;
				МассивУсловий.Добавить(СтрУсловия);
				
				Если ИменаОформляемыхТаблиц = Неопределено Тогда
					
					МассивОформляемых.Добавить(ПрефиксТаблицы + СтрРеквизит + Постфикс);
					
					ПутьККолонке = ПрефиксКонтейнера + ПрефиксТаблицы + "." + СтрРеквизит + Постфикс;
					СтрВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
					СтруктураУсловия = Новый Структура("УсловиеЛевое,ВидСравнения", ПутьККолонке, СтрВидСравнения);
					
					МассивУсловий.Добавить(СтруктураУсловия);
				ИначеЕсли ТипЗнч(ИменаОформляемыхТаблиц) = Тип("Строка") Тогда
					
					МассивОформляемых.Добавить(ИменаОформляемыхТаблиц + СтрРеквизит + Постфикс);	
					
					ПутьККолонке = ПрефиксКонтейнера + ИменаОформляемыхТаблиц + "." + СтрРеквизит + Постфикс;
					СтрВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
					СтруктураУсловия = Новый Структура("УсловиеЛевое,ВидСравнения", ПутьККолонке, СтрВидСравнения);
					
					МассивУсловий.Добавить(СтруктураУсловия);
				Иначе
					
					Для каждого ИмяОфТаб Из ИменаОформляемыхТаблиц Цикл
						МассивОформляемых.Добавить(ИмяОфТаб + СтрРеквизит + Постфикс);
						
						ПутьККолонке = ПрефиксКонтейнера + ИмяОфТаб + "." + СтрРеквизит + Постфикс;
						СтрВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
						СтруктураУсловия = Новый Структура("УсловиеЛевое,ВидСравнения", ПутьККолонке, СтрВидСравнения);
						
						МассивУсловий.Добавить(СтруктураУсловия);
					КонецЦикла;
					
				КонецЕсли;
				
				// Добавление элемента условного оформления.
				СтруктураУО = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей",
				СтруктураОформления, МассивУсловий, МассивОформляемых);  								
				ДобавитьЭлементУсловногоОформления(УсловноеОформление, Представление, СтруктураУО);
			КонецЕсли;		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьУсловноеОформлениеПоСтатьеОборотов()

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-15 (#3488)
Функция ПолучитьСписокДоступныхПолей(Форма, ПараметрыОтбора) Экспорт
	
	СписокДоступныхПолейФОрмы = Новый СписокЗначений();
	
	Если НЕ (ТипЗнч(ПараметрыОтбора) = Тип("Структура")
		И ПараметрыОтбора.Свойство("Виза")
		И ПараметрыОтбора.Свойство("Объект")) Тогда
		
		Возврат СписокДоступныхПолейФОрмы;
		
	КонецЕсли; 
	
	Виза = ПараметрыОтбора.Виза;
	Объект = ПараметрыОтбора.Объект;
	
	Если ТипЗнч(Виза) = Тип("СписокЗначений") Тогда
		МассивВиз = Виза.ВыгрузитьЗначения();
	ИначеЕсли ТипЗнч(Виза) = Тип("Массив") Тогда
		МассивВиз = Виза;
	Иначе
		МассивВиз = Новый Массив();
		МассивВиз.Добавить(Виза);
	КонецЕсли; 
	
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		Объект = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", Объект);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НастройкиДступностиПолейОбъектовДляРедактирования.ТабличнаяЧасть КАК ТабличнаяЧасть,
	               |	НастройкиДступностиПолейОбъектовДляРедактирования.Реквизит КАК Реквизит,
	               |	НастройкиДступностиПолейОбъектовДляРедактирования.РеквизитСиноним КАК РеквизитСиноним,
	               |	ВЫБОР
	               |		КОГДА НастройкиДступностиПолейОбъектовДляРедактирования.РеквизитСиноним ПОДОБНО ""%Команда %""
	               |			ТОГДА НастройкиДступностиПолейОбъектовДляРедактирования.ТабличнаяЧасть + НастройкиДступностиПолейОбъектовДляРедактирования.Реквизит
	               |		ИНАЧЕ ""Объект."" + НастройкиДступностиПолейОбъектовДляРедактирования.ТабличнаяЧасть + ВЫБОР
	               |				КОГДА НастройкиДступностиПолейОбъектовДляРедактирования.ТабличнаяЧасть = """"
	               |						ИЛИ НастройкиДступностиПолейОбъектовДляРедактирования.Реквизит = """"
	               |					ТОГДА """"
	               |				ИНАЧЕ "".""
	               |			КОНЕЦ + НастройкиДступностиПолейОбъектовДляРедактирования.Реквизит
	               |	КОНЕЦ КАК ПутьКДанным,
	               |	НастройкиДступностиПолейОбъектовДляРедактирования.Доступность КАК Доступность
	               |ИЗ
	               |	РегистрСведений.ок_НастройкиДоступностиПолейОбъектовДляРедактирования КАК НастройкиДступностиПолейОбъектовДляРедактирования
	               |ГДЕ
	               |	НастройкиДступностиПолейОбъектовДляРедактирования.Виза В(&МассивВиз)
	               |	И НастройкиДступностиПолейОбъектовДляРедактирования.Объект = &Объект
	               |	И НастройкиДступностиПолейОбъектовДляРедактирования.Доступность";
	
	Запрос.УстановитьПараметр("МассивВиз", 	МассивВиз);
	Запрос.УстановитьПараметр("Объект",		Объект);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	МассивПутейКДанным = РезультатЗапроса.ВыгрузитьКолонку("ПутьКДанным");
	МассивТЧДляРазблокировки = Новый Массив;
	
	Для каждого ТекущийЭлемент Из Форма.Элементы Цикл
		
		Если ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы") Тогда
			
			ПутьКДаннымЭлементаФормы = ТекущийЭлемент.ПутьКДанным;
			НайденнаяСтрока = МассивПутейКДанным.Найти(ПутьКДаннымЭлементаФормы);
			Если НайденнаяСтрока <> Неопределено Тогда
				СписокДоступныхПолейФормы.Добавить(ТекущийЭлемент.Имя);
				Если ТипЗнч(ТекущийЭлемент.Родитель) = Тип("ТаблицаФормы")
					И СписокДоступныхПолейФормы.НайтиПоЗначению(ТекущийЭлемент.Родитель.Имя) = Неопределено Тогда 
					СписокДоступныхПолейФормы.Добавить(ТекущийЭлемент.Родитель.Имя);
					МассивТЧДляРазблокировки.Добавить(ТекущийЭлемент.Родитель);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущийЭлемент) = Тип("КнопкаФормы") Тогда								
			
			НайденнаяСтрока = МассивПутейКДанным.Найти(ТекущийЭлемент.Имя);
			Если НайденнаяСтрока <> Неопределено Тогда
				СписокДоступныхПолейФормы.Добавить(ТекущийЭлемент.Имя);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущийЭлемент) = Тип("ТаблицаФормы") 
			И МассивТЧДляРазблокировки.Найти(ТекущийЭлемент) = Неопределено Тогда								
			
			СписокДоступныхПолейФормы.Добавить(ТекущийЭлемент.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокДоступныхПолейФормы;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-15 (#3488)

#КонецОбласти
