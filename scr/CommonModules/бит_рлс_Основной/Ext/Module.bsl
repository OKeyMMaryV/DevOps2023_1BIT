
#Область СлужебныйПрограммныйИнтерфейс

#Область Подписки

// Подписка на событие ПередЗаписью документов с дополнительными аналитиками. 
// Выполняет проверки на битые ссылки.
// 
Процедура бит_рлс_ПередЗаписьюБитыеСсылкиПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 		
		
	Если Источник.ОбменДанными.Загрузка  ИЛИ ТипЗнч(Источник) = Тип("УдалениеОбъекта") Тогда
	     Возврат;
	КонецЕсли; 	
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверкиВДопАналитиках(Источник);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(Источник, МассивТипов, Отказ);
	бит_рлс_Основной.ПроверитьБитыеСсылкиВДопАналитиках(Источник, МассивТипов,, Отказ);	
		
КонецПроцедуры

#КонецОбласти

#Область ПроверкиРЛС

// Функция определяет следует ли включать РЛС (устанавливать параметры сеанса) для данного сеанса.
// 
// Возвращаемое значение:
//  флВключитьРЛС - Булево.
// 
Функция ВключитьРЛС() Экспорт

	флВключитьРЛС = Ложь;
	
	Если бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия() Тогда // Это "Бухгалтерия предприятия"
		
		флВключитьРЛС = Константы.бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписей.Получить() 
						И (РольДоступна(Метаданные.Роли.бит_рлс_Финансист) 
						ИЛИ РольДоступна(Метаданные.Роли.бит_рлс_ФинансистЦФО)
						ИЛИ РольДоступна(Метаданные.Роли.бит_рлс_ИсполнительКазначейства)
						ИЛИ РольДоступна(Метаданные.Роли.бит_рлс_Казначей)
						ИЛИ РольДоступна(Метаданные.Роли.бит_рлс_ИсполнительЗаявкиНаЗатраты)
						ИЛИ РольДоступна(Метаданные.Роли.бит_мто_ИсполнительПоЗаявкамНаПотребность)
						ИЛИ РольДоступна(Метаданные.Роли.бит_рлс_ИсполнительБюджетирования));
												
	ИначеЕсли бит_ОбщегоНазначения.ЭтоУТ() Тогда // Это УТ
		
		флВключитьРЛС = Константы.бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписей.Получить() 
						И РольДоступна(Метаданные.Роли.бит_рлс_Финансист);
						
	КонецЕсли;
	
	Возврат флВключитьРЛС;
	
КонецФункции // ВключитьРЛС()

// Функция получает массив типов, подлежащих проверке на "битые" ссылки.
// 
// Возвращаемое значение:
//   МассивТипов   - Массив
// 
Функция ПодготовитьМассивТиповДляПроверки(ТекущийОбъект) Экспорт

	МассивТипов = Новый Массив;
	
	ИмяТипаЦФО 	   = бит_ОбщегоНазначения.ПолучитьИмяТипаЦФО();
	ИмяТипаПроекты = бит_ОбщегоНазначения.ПолучитьИмяТипаПроекты();
	
	Если ПараметрыСеанса.бит_рлс_ЦФОСтатьиОборотов Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.бит_СтатьиОборотов"));   // Бп // СтатьиОборотов
		МассивТипов.Добавить(Тип(ИмяТипаЦФО));                              // Бп // ЦФО
	КонецЕсли; 		
	ИмяПараметраПроекты 	 = "бит_рлс_Проекты"; 
	ИмяПараметраПользователи = "бит_рлс_Пользователи"; 
	
	Если Метаданные.Перечисления.бит_рлс_ВидыОбластейДоступа.ЗначенияПеречисления.Найти("Проекты") <> Неопределено Тогда		
		Если ПараметрыСеанса[ИмяПараметраПроекты] Тогда
			МассивТипов.Добавить(Тип(ИмяТипаПроекты));                              // Проекты
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыСеанса[ИмяПараметраПользователи] Тогда                        // Пользователи
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
	КонецЕсли;    	
	
	Если МассивТипов.Количество()>0 Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли; 
	
	Возврат МассивТипов;

КонецФункции // ПодготовитьМассивТипов()
 	
// Функция получает массив типов, подлежащих проверке на "битые" ссылки для объектов портала ВГО.
// 
// Возвращаемое значение:
//   МассивТипов   - Массив
// 
Функция ПодготовитьМассивТиповДляПроверкиДляПорталаВГО(ТекущийОбъект) Экспорт

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));          // Бп // Организации
	                    
	Возврат МассивТипов;

КонецФункции // ПодготовитьМассивТиповДляПроверкиДляПорталаВГО()

// Функция получает массив типов, подлежащих проверке на "битые" ссылки для дополнительной аналитики.
// 
// Параметры:
//  ТекущийОбъект - Объект.
// 
// Возвращаемое значение:
//   МассивТипов - Массив.
// 
Функция ПодготовитьМассивТиповДляПроверкиВДопАналитиках(ТекущийОбъект) Экспорт

	// Получим основной массив типов для проверки.
	МассивТипов = ПодготовитьМассивТиповДляПроверки(ТекущийОбъект);
	
	Если Метаданные.Документы.Найти("бит_ПлатежнаяПозиция") <> Неопределено Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.бит_ПлатежнаяПозиция"));	
	КонецЕсли;
	
	Возврат МассивТипов;

КонецФункции // ПодготовитьМассивТиповДляПроверкиВДопАналитиках()

// Процедура выполняет проверку наличия "битых" ссылок в шапке и табличных частях объекта.
// 
// Параметры:
// 	ДокументОбъект - ДокументОбъект
// 	МассивТипов    - МассивТипов
// 	Отказ 		   - Булево
//  РежимСообщений - Строка: "Нет","Все","Ошибки". По умолчанию "Все".
// 
Процедура ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ, РежимСообщений = "Все") Экспорт
	
	Если МассивТипов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ИспользуетсяRLS = ПараметрыСеанса.бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписей; 
	
	Если НЕ ИспользуетсяRLS Тогда
		Возврат;
	КонецЕсли; 
	
	ВыводитьИнформацию = ?(ВРег(РежимСообщений) = "ВСЕ", Истина, Ложь);
	
	ОписаниеКонтроль = Новый ОписаниеТипов(МассивТипов);
	
	Заголовок = "Проверка прав доступа к объекту """+Строка(ДокументОбъект)+"""";
	
	МетаданныеОбъекта = ДокументОбъект.Метаданные();
	
	// Проверим шапку документа
	ПроверенныеЗначения = Новый Соответствие;
	
	Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		МассивТиповРеквизита = Реквизит.Тип.Типы();
		
		Для каждого Элемент Из МассивТиповРеквизита Цикл
			
			Если ОписаниеКонтроль.СодержитТип(Элемент) Тогда
				
				ЗначениеДляПроверки = ДокументОбъект[Реквизит.Имя];
				
				Если ОписаниеКонтроль.СодержитТип(ТипЗнч(ЗначениеДляПроверки)) Тогда
					
					ТекстСообщения = "Нет доступа к реквизиту шапки документа """
									 +Реквизит.Имя
									 +""" .";
					
					ПроверитьДоступностьЗначения(ЗначениеДляПроверки
												,ПроверенныеЗначения
												,ТекстСообщения
												,Отказ
												,Заголовок
												,ВыводитьИнформацию);												
					
				КонецЕсли; 
				
			КонецЕсли; // Контроль доступа
			
		КонецЦикла; // Цикл по типам
		
	КонецЦикла; // Цикл по реквизитам
	
	// Проверим табличные части
	Для каждого ТабличнаяЧастьМета Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		ИмяТабЧасти 	  = ТабличнаяЧастьМета.Имя;
		МассивДляКонтроля = Новый Массив;
		
		Для каждого Реквизит Из ТабличнаяЧастьМета.Реквизиты Цикл
			
			МассивТиповРеквизита = Реквизит.Тип.Типы();
			
			Для каждого Элемент Из МассивТиповРеквизита Цикл
				
				Если ОписаниеКонтроль.СодержитТип(Элемент) Тогда
					МассивДляКонтроля.Добавить(Реквизит.Имя);
				КонецЕсли; // Контроль доступа				
				
			КонецЦикла; // По типам	
			
		КонецЦикла; // По реквизитам
		
		ТабличнаяЧасть = ДокументОбъект[ИмяТабЧасти];
		
		ПроверенныеЗначения = Новый Соответствие;
		
		Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			
			Для каждого ИмяРеквизита Из МассивДляКонтроля Цикл
				
				ЗначениеДляПроверки = СтрокаТаблицы[ИмяРеквизита];
				
				Если ОписаниеКонтроль.СодержитТип(ТипЗнч(ЗначениеДляПроверки)) Тогда
					
					ТекстСообщения = "В строке № "
									 +СтрокаТаблицы.НомерСтроки
									 +" табличной части """
									 +ТабличнаяЧастьМета.Синоним
									 +""" нет доступа к реквизиту """
									 +ИмяРеквизита
									 +""".";
					
					ПроверитьДоступностьЗначения(ЗначениеДляПроверки
												,ПроверенныеЗначения
												,ТекстСообщения
												,Отказ
												,Заголовок
												,ВыводитьИнформацию);
					
				КонецЕсли;	   
				
			КонецЦикла; // По именам реквизитов
			
		КонецЦикла; // По строкам таб. части
		
	КонецЦикла; // По табличным частям
	
КонецПроцедуры // ПроверитьБитыеСсылкиВОбъекте()

// Процедура проверяет наличие "битых" ссылок в наборе записей дополнительных аналитик для документа.
// 
// Параметры:
//  ДокументОбъект  - ДокуменОбъект.
//  МассивТипов     - Массив.
//  НаборАналитик   - РегистрСведенийНаборЗаписей.бит_ДополнительныеАналитики.
//  Отказ           - Булево.
// 
Процедура ПроверитьБитыеСсылкиВДопАналитиках(ДокументОбъект,МассивТипов,НаборАналитики=Неопределено,Отказ) Экспорт

	ОписаниеКонтроль = Метаданные.РегистрыСведений.бит_ДополнительныеАналитики.Измерения.Объект.Тип;
	Если МассивТипов.Количество() = 0 ИЛИ Не ОписаниеКонтроль.СодержитТип(ТипЗнч(ДокументОбъект.Ссылка)) Тогда
		Возврат;
	КонецЕсли; 	
	
	ИспользуетсяRLS = ПараметрыСеанса.бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписей;
	
	Если НЕ ИспользуетсяRLS Тогда
		Возврат;
	КонецЕсли; 
	
	Заголовок = "Проверка прав доступа к дополнительным аналитикам объекта """+Строка(ДокументОбъект)+"""";
	
	Если НаборАналитики = Неопределено Тогда
		
		Попытка
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("Объект",ДокументОбъект.Ссылка);
			НаборАналитики = бит_ОбщегоНазначения.ПрочитатьНаборАналитики(СтрОтбор);
			
		Исключение
			ТекстСообщения = "Нет доступа к дополнительным аналитикам!";
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЕсли; 
	
	ПроверенныеЗначения = Новый Соответствие;
	
	Для каждого Запись Из НаборАналитики Цикл
		
		ЗначениеДляПроверки = Запись.ЗначениеАналитики;
		
		Для каждого ТекущийТип Из МассивТипов Цикл
			
			Если ТипЗнч(ЗначениеДляПроверки) = ТекущийТип Тогда
				ТекстСообщения = "Нет доступа к дополнительной аналитике """+Запись.Аналитика+""".";
				ПроверитьДоступностьЗначения(ЗначениеДляПроверки,ПроверенныеЗначения,ТекстСообщения,Отказ,Заголовок);
			КонецЕсли; 
			
		КонецЦикла; // По типам к проверке
		
	КонецЦикла; // По записям набора записей

КонецПроцедуры // ПроверитьБитыеСсылкиВДопАналитиках()

// Процедура проверяет допустимые сочетания ЦФО/СтатьяОборотов.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект.
//  ИмяТаблицы     - Строка.
//  Отказ          - Булево.
// 
Процедура ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ТекущийОбъект,ПроверочнаяТаблица,НаименованиеТаблицы,Заголовок="",Отказ) Экспорт

	ИспользуетсяRLS = ПараметрыСеанса.бит_рлс_ЦФОСтатьиОборотов; 
	
	Если НЕ ИспользуетсяRLS Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроверочнаяТаблица",ПроверочнаяТаблица);
	Запрос.УстановитьПараметр("ТекущийПользователь",бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("бит_рлс_ГруппыТекущегоПользователя",ПараметрыСеанса.бит_рлс_ГруппыТекущегоПользователя);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроверочнаяТаблица.НомерСтроки,
	               |	ПроверочнаяТаблица.ЦФО,
	               |	ПроверочнаяТаблица.СтатьяОборотов
	               |ПОМЕСТИТЬ ПроверочнаяТаблица
	               |ИЗ
	               |	&ПроверочнаяТаблица КАК ПроверочнаяТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроверочнаяТаблица.НомерСтроки,
	               |	ПроверочнаяТаблица.ЦФО,
	               |	ПроверочнаяТаблица.СтатьяОборотов
	               |ПОМЕСТИТЬ Доступные
	               |ИЗ
	               |	ПроверочнаяТаблица КАК ПроверочнаяТаблица
	               |ГДЕ
	               |	1 В
	               |			(ВЫБРАТЬ ПЕРВЫЕ 1
	               |				1 КАК ЕстьОтбор
	               |			ИЗ
	               |				РегистрСведений.бит_рлс_ПраваДоступа КАК бит_рлс_ПраваДоступа
	               |			ГДЕ
	               |				бит_рлс_ПраваДоступа.ВидОбластиДоступа = ЗНАЧЕНИЕ(Перечисление.бит_рлс_ВидыОбластейДоступа.ЦФОСтатьиОборотов)
	               |				И бит_рлс_ПраваДоступа.ВидНастройки = ЗНАЧЕНИЕ(Перечисление.бит_рлс_ВидыНастроекПрав.Доступ)
	               |				И бит_рлс_ПраваДоступа.Запись = ИСТИНА
	               |				И (бит_рлс_ПраваДоступа.Пользователь = &ТекущийПользователь
	               |					ИЛИ бит_рлс_ПраваДоступа.Пользователь В (&бит_рлс_ГруппыТекущегоПользователя))
	               |				И (бит_рлс_ПраваДоступа.Разделитель_1 = ПроверочнаяТаблица.ЦФО
	               |						И бит_рлс_ПраваДоступа.Разделитель_2 = ПроверочнаяТаблица.СтатьяОборотов
	               |					ИЛИ бит_рлс_ПраваДоступа.Разделитель_1 = ПроверочнаяТаблица.ЦФО
	               |						И бит_рлс_ПраваДоступа.Разделитель_2 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_Все.Все)
	               |					ИЛИ бит_рлс_ПраваДоступа.Разделитель_1 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_Все.Все)
	               |						И бит_рлс_ПраваДоступа.Разделитель_2 = ПроверочнаяТаблица.СтатьяОборотов
	               |					ИЛИ бит_рлс_ПраваДоступа.Разделитель_1 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_Все.Все)
	               |						И бит_рлс_ПраваДоступа.Разделитель_2 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_Все.Все)))
	               |	И (НЕ -1 В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					-1 КАК ЕстьОтбор
	               |				ИЗ
	               |					РегистрСведений.бит_рлс_ПраваДоступа КАК бит_рлс_ПраваДоступа
	               |				ГДЕ
	               |					бит_рлс_ПраваДоступа.ВидОбластиДоступа = ЗНАЧЕНИЕ(Перечисление.бит_рлс_ВидыОбластейДоступа.ЦФОСтатьиОборотов)
	               |					И бит_рлс_ПраваДоступа.ВидНастройки = ЗНАЧЕНИЕ(Перечисление.бит_рлс_ВидыНастроекПрав.Запрет)
	               |					И бит_рлс_ПраваДоступа.Запись = ИСТИНА
	               |					И бит_рлс_ПраваДоступа.Пользователь = &ТекущийПользователь
	               |					И (бит_рлс_ПраваДоступа.Разделитель_1 = ПроверочнаяТаблица.ЦФО
	               |							И бит_рлс_ПраваДоступа.Разделитель_2 = ПроверочнаяТаблица.СтатьяОборотов
	               |						ИЛИ бит_рлс_ПраваДоступа.Разделитель_1 = ПроверочнаяТаблица.ЦФО
	               |							И бит_рлс_ПраваДоступа.Разделитель_2 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_Все.Все)
	               |						ИЛИ бит_рлс_ПраваДоступа.Разделитель_1 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_Все.Все)
	               |							И бит_рлс_ПраваДоступа.Разделитель_2 = ПроверочнаяТаблица.СтатьяОборотов
	               |						ИЛИ бит_рлс_ПраваДоступа.Разделитель_1 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_Все.Все)
	               |							И бит_рлс_ПраваДоступа.Разделитель_2 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_Все.Все))))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроверочнаяТаблица.НомерСтроки,
	               |	ПроверочнаяТаблица.ЦФО,
	               |	ПроверочнаяТаблица.СтатьяОборотов
	               |ИЗ
	               |	ПроверочнаяТаблица КАК ПроверочнаяТаблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Доступные КАК Доступные
	               |		ПО ПроверочнаяТаблица.ЦФО = Доступные.ЦФО
	               |			И ПроверочнаяТаблица.СтатьяОборотов = Доступные.СтатьяОборотов
	               |ГДЕ
	               |	(Доступные.ЦФО ЕСТЬ NULL 
	               |			ИЛИ Доступные.СтатьяОборотов ЕСТЬ NULL )
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПроверочнаяТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Доступные";
	

 Результат = Запрос.Выполнить();
 
 Выборка = Результат.Выбрать();
 
 Пока Выборка.Следующий() Цикл
 
 	ТекстСообщения = "В строке №"
	                 +Выборка.НомерСтроки
					 +" табличной части """
					 +НаименованиеТаблицы
					 +""" обнаружено сочетание ЦФО/Статья оборотов """
					 +Выборка.ЦФО
					 +"/"
					 +Выборка.СтатьяОборотов
					 +""", запрещенное для записи!";
					 
    бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное); 					 
 
 КонецЦикла; 
				   
КонецПроцедуры // ПроверитьДопустимыеПарыЦФОСтатьяОборотов()

// Процедура проверяет допустимые ЦФО.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект.
//  ИмяТаблицы     - Строка.
//  Отказ          - Булево.
// 
Процедура ПроверитьДопустимыеЦФО(ТекущийОбъект,ПроверочнаяТаблица,НаименованиеТаблицы,Заголовок="",Отказ) Экспорт

	ИспользуетсяRLS = ПараметрыСеанса.бит_рлс_ЦФОСтатьиОборотов; 
	
	Если НЕ ИспользуетсяRLS Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроверочнаяТаблица",ПроверочнаяТаблица);
	Запрос.УстановитьПараметр("ТекущийПользователь",бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("бит_рлс_ГруппыТекущегоПользователя",ПараметрыСеанса.бит_рлс_ГруппыТекущегоПользователя);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроверочнаяТаблица.НомерСтроки,
	               |	ПроверочнаяТаблица.ЦФО
	               |ПОМЕСТИТЬ ПроверочнаяТаблица
	               |ИЗ
	               |	&ПроверочнаяТаблица КАК ПроверочнаяТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроверочнаяТаблица.НомерСтроки,
	               |	ПроверочнаяТаблица.ЦФО
	               |ПОМЕСТИТЬ Доступные
	               |ИЗ
	               |	ПроверочнаяТаблица КАК ПроверочнаяТаблица
	               |ГДЕ
	               |	1 В
	               |			(ВЫБРАТЬ ПЕРВЫЕ 1
	               |				1 КАК ЕстьОтбор
	               |			ИЗ
	               |				РегистрСведений.бит_рлс_ПраваДоступа КАК бит_рлс_ПраваДоступа
	               |			ГДЕ
	               |				бит_рлс_ПраваДоступа.ВидОбластиДоступа = ЗНАЧЕНИЕ(Перечисление.бит_рлс_ВидыОбластейДоступа.ЦФОСтатьиОборотов)
	               |				И бит_рлс_ПраваДоступа.ВидНастройки = ЗНАЧЕНИЕ(Перечисление.бит_рлс_ВидыНастроекПрав.Доступ)
	               |				И бит_рлс_ПраваДоступа.Запись = ИСТИНА
	               |				И (бит_рлс_ПраваДоступа.Пользователь = &ТекущийПользователь
	               |					ИЛИ бит_рлс_ПраваДоступа.Пользователь В (&бит_рлс_ГруппыТекущегоПользователя))
	               |				И (бит_рлс_ПраваДоступа.Разделитель_1 = ПроверочнаяТаблица.ЦФО
				   |						 ИЛИ бит_рлс_ПраваДоступа.Разделитель_1 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_Все.Все)))
	               |	И (НЕ -1 В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					-1 КАК ЕстьОтбор
	               |				ИЗ
	               |					РегистрСведений.бит_рлс_ПраваДоступа КАК бит_рлс_ПраваДоступа
	               |				ГДЕ
	               |					бит_рлс_ПраваДоступа.ВидОбластиДоступа = ЗНАЧЕНИЕ(Перечисление.бит_рлс_ВидыОбластейДоступа.ЦФОСтатьиОборотов)
	               |					И бит_рлс_ПраваДоступа.ВидНастройки = ЗНАЧЕНИЕ(Перечисление.бит_рлс_ВидыНастроекПрав.Запрет)
	               |					И бит_рлс_ПраваДоступа.Запись = ИСТИНА
	               |					И бит_рлс_ПраваДоступа.Пользователь = &ТекущийПользователь
	               |					И (бит_рлс_ПраваДоступа.Разделитель_1 = ПроверочнаяТаблица.ЦФО
	               |							И бит_рлс_ПраваДоступа.Разделитель_2 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_Все.Все))))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроверочнаяТаблица.НомерСтроки,
	               |	ПроверочнаяТаблица.ЦФО
	               |ИЗ
	               |	ПроверочнаяТаблица КАК ПроверочнаяТаблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Доступные КАК Доступные
	               |		ПО ПроверочнаяТаблица.ЦФО = Доступные.ЦФО
	               |ГДЕ
	               |	(Доступные.ЦФО ЕСТЬ NULL) 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПроверочнаяТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Доступные";
				   

	Результат = Запрос.Выполнить();
				   
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = "В строке №"
		+Выборка.НомерСтроки
		+" табличной части """
		+НаименованиеТаблицы
		+""" обнаружено ЦФО """
		+Выборка.ЦФО                                                                                                   
		+""", запрещенное для записи!";
		
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное); 					 
		
	КонецЦикла; 
				   
КонецПроцедуры // ПроверитьДопустимыеПарыЦФОСтатьяОборотов()

// Функция проверяет значение на "битую" ссылку.
// 
// Параметры:
//  ЗначениеДляПроверки  - Произвольный.
// 
// Возвращаемое значение:
//   ЗначениеДоступно   - Булево.
// 
Функция СсылкаДоступна(ЗначениеДляПроверки) Экспорт
	
	ЗначениеДоступно = Истина;
	
	Если ЗначениеЗаполнено(ЗначениеДляПроверки) 
		 И НЕ бит_ОбщегоНазначения.ЭтоПримитивныйТип(ЗначениеДляПроверки) Тогда
		
		Попытка
			ТекОбъект = ЗначениеДляПроверки.ПолучитьОбъект();
			Если ТекОбъект = Неопределено Тогда
			
				ЗначениеДоступно = Ложь;
			
			КонецЕсли; 
		Исключение
			ЗначениеДоступно = Ложь;
		КонецПопытки;
		
	КонецЕсли; 
	
	Возврат ЗначениеДоступно;
	
КонецФункции // СсылкаДоступна()

// Функция получает настройки видов областей доступа.
// 
// Возвращаемое значение:
//   НастройкиВидовОбластей   - Соответствие.
// 
Функция ПолучитьНастройкиВидовОбластейДоступа()   Экспорт

	ЕстьРазделитель_4       = Метаданные.РегистрыСведений.бит_рлс_ПраваДоступа.Измерения.Найти("Разделитель_4") <> Неопределено;
	МетаВидыОбластейДоступа = Метаданные.Перечисления.бит_рлс_ВидыОбластейДоступа.ЗначенияПеречисления;
	
	НастройкиВидовОбластей = Новый Соответствие;
	
	Если МетаВидыОбластейДоступа.Найти("Пользователи") <> Неопределено Тогда
	
		// Область "Пользователи"
		Разделители = Новый Структура;
		Разделители.Вставить("Разделитель_1", Неопределено);
		Разделители.Вставить("Разделитель_2", Неопределено);
		
		// Разделитель_3 - Пользователи
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
		
		Настройки = Новый Структура;  
		Настройки.Вставить("Типы"	  , МассивТипов);
		Настройки.Вставить("Заголовок", "Пользователь");
		
		Разделители.Вставить("Разделитель_3", Настройки);
		Если ЕстьРазделитель_4 Тогда
			Разделители.Вставить("Разделитель_4", Неопределено);		
		КонецЕсли;		
		
		НастройкиВидовОбластей.Вставить(Перечисления.бит_рлс_ВидыОбластейДоступа.Пользователи, Разделители);
	
	КонецЕсли;

	Если МетаВидыОбластейДоступа.Найти("ЦФОСтатьиОборотов") <> Неопределено Тогда
		
		// Область ЦФО & Статьи
		Разделители = Новый Структура;	
		
		// Разделитель_1 - ЦФО
		МассивТипов = Новый Массив;
		ИмяТипа = бит_ОбщегоНазначения.ПолучитьИмяТипаЦФО();
		МассивТипов.Добавить(Тип(ИмяТипа));
		
		Настройки = Новый Структура;  
		Настройки.Вставить("Типы"	  , МассивТипов);
		Настройки.Вставить("Заголовок", "ЦФО");
		Разделители.Вставить("Разделитель_1", Настройки);
		
		// Разделитель_2 - СтатьиОборотов
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.бит_СтатьиОборотов"));
		
		Настройки = Новый Структура;  
		Настройки.Вставить("Типы",МассивТипов);
		Настройки.Вставить("Заголовок"		, "Статья оборотов");
		Разделители.Вставить("Разделитель_2", Настройки);
		
		Разделители.Вставить("Разделитель_3", Неопределено);
		Если ЕстьРазделитель_4 Тогда
			Разделители.Вставить("Разделитель_4", Неопределено);		
		КонецЕсли;
		
		НастройкиВидовОбластей.Вставить(Перечисления.бит_рлс_ВидыОбластейДоступа.ЦФОСтатьиОборотов, Разделители);	                               
		
	КонецЕсли;

	Если МетаВидыОбластейДоступа.Найти("Проекты") <> Неопределено И ЕстьРазделитель_4 Тогда
	
		// Область Проекты
		Разделители = Новый Структура;	
		Разделители.Вставить("Разделитель_1" , Неопределено);
		Разделители.Вставить("Разделитель_2" , Неопределено);
		Разделители.Вставить("Разделитель_3" , Неопределено);
		
		// Разделитель_4 - Проект
		МассивТипов = Новый Массив;
		ИмяТипа = бит_ОбщегоНазначения.ПолучитьИмяТипаПроекты();
		МассивТипов.Добавить(Тип(ИмяТипа));
		
		Настройки = Новый Структура;  
		Настройки.Вставить("Типы"	  , МассивТипов);
		Настройки.Вставить("Заголовок", "Проект");
		Разделители.Вставить("Разделитель_4", Настройки);
		
		НастройкиВидовОбластей.Вставить(Перечисления.бит_рлс_ВидыОбластейДоступа.Проекты, Разделители);
	
	КонецЕсли;
	
	Возврат НастройкиВидовОбластей;

КонецФункции // ПолучитьНастройкиВидовОбластейДоступа()

// Процедура устанавливает параметры сеанса, необходимы при работе RLS.
// 
// 
Процедура ЗаполнитьПараметрыСеансаRLS() Экспорт

	// Признак включения механизма RLS
	ВключитьРЛС = ВключитьРЛС();
	ПараметрыСеанса.бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписей = ВключитьРЛС;
	ПараметрыСеанса.бит_ОграничиватьДоступКДоговорамРЛС = Константы.бит_ОграничиватьДоступКДоговорам.Получить();

	ВключенныеОбласти = Новый Соответствие;
	
	Если ВключитьРЛС Тогда		
		ВключенныеОбласти = ПолучитьВключенныеВидыОбластей();	
	КонецЕсли; 
	
	// Заполним параметры сеанса, соответсвтвующие видам областей доступа
	// имя параметра сеанса состоит из префикса "бит_рлс_" и ИмениОбластиДоступа.
	Для каждого МетаЗначение Из Метаданные.Перечисления.бит_рлс_ВидыОбластейДоступа.ЗначенияПеречисления Цикл
	
		ИмяПараметраСеанса   = "бит_рлс_"+МетаЗначение.Имя;
		Если НЕ Метаданные.ПараметрыСеанса.Найти(ИмяПараметраСеанса) = Неопределено Тогда
			ЗначениеПеречисления = Перечисления.бит_рлс_ВидыОбластейДоступа[МетаЗначение.Имя];		 
			ОбластьВключена      = ?(ВключенныеОбласти[ЗначениеПеречисления]= Истина,Истина,Ложь);		 
			ПараметрыСеанса[ИмяПараметраСеанса] = ОбластьВключена;
		КонецЕсли; // Есть параметр сеанса с таким именем
		 
	КонецЦикла; // По областям доступа

	Если НЕ Метаданные.ПараметрыСеанса.Найти("ГруппыТекущегоПользователя") = Неопределено Тогда
	
		ПараметрыСеанса.бит_рлс_ГруппыТекущегоПользователя = ПараметрыСеанса["ГруппыТекущегоПользователя"];
		 
	ИначеЕсли Метаданные.Справочники.ГруппыПользователей.ТабличныеЧасти.Найти("Состав") <> Неопределено Тогда
		 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийПользователь", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"));
		 
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Ссылка КАК ГруппаПользователей
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь = &ТекущийПользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
		|";
						
		Результат = Запрос.Выполнить();
		 
		МассивГрупп = Результат.Выгрузить().ВыгрузитьКолонку("ГруппаПользователей");
		 
		ПараметрыСеанса.бит_рлс_ГруппыТекущегоПользователя = Новый ФиксированныйМассив(МассивГрупп);
	
	КонецЕсли; 
	
	// Признак актуальности кэша настроек
	ПараметрыСеанса.бит_ИдентификаторКэшаНастроек = Константы.бит_ИдентификаторКэшаНастроек.Получить();
	
	// Для совместимости с Комплексной кешируем пустое ЦФО.
	ИмяСправочникаЦФО = бит_ОбщегоНазначения.ПолучитьИмяСправочникаЦФО();
	ПараметрыСеанса.бит_рлс_ПустоеЦФО = Справочники[ИмяСправочникаЦФО].ПустаяСсылка();	
	
КонецПроцедуры // ЗаполнитьПараметрыСеансаRLS()

// Функция получает включенные виды областей.
// 
// Возвращаемое значение:
//   Включенные   - Соответствие
// 
Функция ПолучитьВключенныеВидыОбластей() Экспорт

	Включенные = Новый Соответствие;
	
	// Определим включенные области доступа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	бит_рлс_НазначениеВидовОбластейДоступа.ВидОбластиДоступа
	|ИЗ
	|	РегистрСведений.бит_рлс_НазначениеВидовОбластейДоступа КАК бит_рлс_НазначениеВидовОбластейДоступа";
	
	
	Результат = Запрос.Выполнить();			  
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Включенные.Вставить(Выборка.ВидОбластиДоступа,Истина);
		
	КонецЦикла; 
	
	Возврат Включенные;
		
КонецФункции // ПолучитьВключенныеВидыОбластей()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет проверку доступности значения ссылочного типа.
// 
// Параметры:
//  ЗначениеДляПроверки - СправочникСсылка
//  ТекстСообщения      - Строка
//  Отказ               - Булево
//  Заголовок 			- Строка
//  ВыводитьИнформацию  - Булево, по умолчанию Истина.
// 
Процедура ПроверитьДоступностьЗначения(ЗначениеДляПроверки
									  ,ПроверенныеЗначения
									  ,ТекстСообщения
									  ,Отказ
									  ,Заголовок
									  ,ВыводитьИнформацию = Истина)
	
	ЗначениеДоступно = Истина;
	
	РезультатПредыдущихПроверок = ПроверенныеЗначения[ЗначениеДляПроверки];
	
	Если РезультатПредыдущихПроверок = Неопределено Тогда
		
		ЗначениеДоступно = СсылкаДоступна(ЗначениеДляПроверки);
		
	Иначе	
		
		ЗначениеДоступно = РезультатПредыдущихПроверок;
		
	КонецЕсли; 
	
	
	Если НЕ ЗначениеДоступно Тогда
		
		Отказ = Истина;
		
		Если ВыводитьИнформацию Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если РезультатПредыдущихПроверок = Неопределено Тогда
		
		ПроверенныеЗначения.Вставить(ЗначениеДляПроверки,ЗначениеДоступно);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
