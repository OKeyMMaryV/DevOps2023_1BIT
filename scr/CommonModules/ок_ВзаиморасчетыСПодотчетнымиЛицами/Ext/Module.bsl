//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-22 (#ТП_БП05_ФР06)

#Область ПрограммныйИнтерфейс
// Функция - Сформировать движения по регистру "Взаиморасчеты с подотчетными лицами"
//
// В зависимости от типа источника вызывает основную процедуру
//
// Параметры:
//  Источник					 - ДокументОбъект - объект документа, который делает движения по регистру накопления ок_ВзаиморасчетыСПодотчетнымиЛицами,
//  Отказ						 - Булево
//  РежимПроведения	             - РежимПроведенияДокумента
Процедура СформироватьДвиженияПоРегиструВзаиморасчетыСПодотчетнымиЛицами(Источник, Отказ, РежимПроведения) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВыдачаДенежныхДокументов") Тогда
		СформироватьДвиженияВыдачаДенежныхДокументов(Источник,Отказ, РежимПроведения);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеДенежныхДокументов") Тогда
		СформироватьДвиженияПоступлениеДенежныхДокументов(Источник,Отказ, РежимПроведения);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		СформироватьДвиженияРасходныйКассовыйОрдер(Источник,Отказ, РежимПроведения);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		СформироватьДвиженияПриходныйКассовыйОрдер(Источник,Отказ, РежимПроведения);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ок_ЗакрытиеЗадолженностиПодотчетногоЛица") Тогда
		СформироватьДвиженияЗачетОстатковПодотчетногоЛица(Источник,Отказ, РежимПроведения);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ок_ОперацияБОСС") Тогда
		СформироватьДвиженияОперацияБОСС(Источник,Отказ, РежимПроведения);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		СформироватьДвиженияАвансовыйОтчет(Источник,Отказ, РежимПроведения);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		СформироватьДвиженияСписаниеСРасчетногоСчета(Источник,Отказ, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции
Процедура СформироватьДвиженияВыдачаДенежныхДокументов(Документ, Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Документ.Движения;
	Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.Записывать = Истина;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураКурсаДокумента		=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(Документ.ВалютаДокумента, Документ.Дата);
	ПараметрыКурсаДокумента		=	Новый Структура("Валюта, Курс, Кратность", Документ.ВалютаДокумента, СтруктураКурсаДокумента.Курс, СтруктураКурсаДокумента.Кратность);
	
	ПараметрыКурсаВалютыРегламентированногоУчета	=	Новый Структура("Валюта, Курс, Кратность", ВалютаРегламентированногоУчета, 1, 1);
	
	Для Каждого Строка Из Документ.ДенежныеДокументы Цикл
		Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьПриход();
		Движение.Период				=	Документ.Дата;
		Движение.ДокументРасчетов	=	Документ.Ссылка;
		Движение.Организация		=	Документ.Организация;
		Движение.ПодотчетноеЛицо	=	Документ.Контрагент;
		Движение.ДенежныйДокумент	=	Строка.ДенежныйДокумент;
		Движение.Валюта				=	Документ.ВалютаДокумента;
		Движение.Сумма				=	Строка.Стоимость;
		Движение.СуммаРегл 			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
										Строка.Стоимость,
										ПараметрыКурсаДокумента,
										ПараметрыКурсаВалютыРегламентированногоУчета);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоступлениеДенежныхДокументов(Документ, Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Документ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Документ.Движения;
	Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.Записывать = Истина;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураКурсаДокумента =	РаботаСКурсамиВалют.ПолучитьКурсВалюты(Документ.ВалютаДокумента, Документ.Дата);
	ПараметрыКурсаДокумента	=	Новый Структура("Валюта, Курс, Кратность", Документ.ВалютаДокумента, СтруктураКурсаДокумента.Курс, СтруктураКурсаДокумента.Кратность);
	
	ПараметрыКурсаВалютыРегламентированногоУчета = Новый Структура("Валюта, Курс, Кратность", ВалютаРегламентированногоУчета, 1, 1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВТ_ДенежныеДокументы", Документ.ДенежныеДокументы.Выгрузить());
	Если НачалоДня(Документ.Дата) = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя()) Тогда
		Запрос.УстановитьПараметр("ДатаДокумента",   Неопределено);
	Иначе	
		//Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(Документ.Ссылка.МоментВремени(), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(Документ.Дата, ВидГраницы.Исключая));
	КонецЕсли;
	Запрос.УстановитьПараметр("Период",				Документ.Дата);
	Запрос.УстановитьПараметр("Организация",		Документ.Организация);
	Запрос.УстановитьПараметр("Валюта",				Документ.ВалютаДокумента);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо",	Документ.Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_ДенежныеДокументы.НомерСтроки КАК НомерСтроки,
	|	ВТ_ДенежныеДокументы.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ВТ_ДенежныеДокументы.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Документ
	|ИЗ
	|	&ВТ_ДенежныеДокументы КАК ВТ_ДенежныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация КАК Организация,
	|	ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ДокументРасчетов КАК ДокументРасчетов,
	|	ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаРеглОстаток КАК СуммаРеглОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ок_ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|				И Валюта = &Валюта
	|				И ПодотчетноеЛицо = &ПодотчетноеЛицо
	|				И ДенежныйДокумент В
	|					(ВЫБРАТЬ
	|						ВТ_Документ.ДенежныйДокумент
	|					ИЗ
	|						ВТ_Документ КАК ВТ_Документ)) КАК ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	&Организация КАК Организация,
	|	&Валюта КАК Валюта,
	|	ВТ_Документ.НомерСтроки КАК НомерСтроки,
	|	ВТ_Документ.ДенежныйДокумент КАК ДенежныйДокументПоступлениеДД,
	|	ВТ_Документ.Сумма КАК Сумма,
	|	ВТ_Остатки.Организация КАК ОрганизацияОстатки,
	|	ВТ_Остатки.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ВТ_Остатки.ДокументРасчетов КАК ДокументРасчетов,
	|	ЕСТЬNULL(ВТ_Остатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(ВТ_Остатки.СуммаРеглОстаток, 0) КАК СуммаРеглОстаток,
	|	ВЫБОР
	|		КОГДА ВТ_Документ.Сумма = ЕСТЬNULL(ВТ_Остатки.СуммаОстаток, 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуммыРавны
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО ВТ_Документ.ДенежныйДокумент = ВТ_Остатки.ДенежныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Остатки.ДокументРасчетов.Дата";
	Результат	=	Запрос.Выполнить();
	Выборка		=	Результат.Выбрать();
	
	МассивСообщенийПользователю = Новый Массив;
	
	Пока Выборка.НайтиСледующий(Новый Структура("СуммыРавны", Ложь)) Цикл
		Отказ = Истина;
		Если Выборка.СуммаОстаток = 0 Тогда
			МассивСообщенийПользователю.Добавить(НСтр("ru = 'Не найден остаток по денежному документу " + Выборка.ДенежныйДокументПоступлениеДД + ".'"));
		Иначе
			МассивСообщенийПользователю.Добавить(НСтр("ru = 'Сумма возвращаемого билета в строке " + Выборка.НомерСтроки + " не равна сумме остатка по билету.'"));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекстСообщения Из МассивСообщенийПользователю Цикл
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.СуммаРегл = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							Выборка.Сумма,
							ПараметрыКурсаДокумента,
							ПараметрыКурсаВалютыРегламентированногоУчета);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияРасходныйКассовыйОрдер(Документ, Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Документ.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Документ.Движения;
	Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.Записывать = Истина;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураКурсаДокумента	=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(Документ.ВалютаДокумента, Документ.Дата);
	ПараметрыКурсаДокумента	=	Новый Структура("Валюта, Курс, Кратность", Документ.ВалютаДокумента, СтруктураКурсаДокумента.Курс, СтруктураКурсаДокумента.Кратность);
	
	ПараметрыКурсаВалютыРегламентированногоУчета = Новый Структура("Валюта, Курс, Кратность", ВалютаРегламентированногоУчета, 1, 1);
	
	
	Если Не ЗначениеЗаполнено(Документ.ДокументОснование) Или ЗначениеЗаполнено(Документ.ДокументОснование)
		И ТипЗнч(Документ.ДокументОснование) <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ДокументРасчетов = Документ.Ссылка;
	Иначе
		ДокументРасчетов = Документ.ДокументОснование;
	КонецЕсли;
	Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьПриход();
	Движение.Период				=	Документ.Дата;
	Движение.ДокументРасчетов	=	ДокументРасчетов;
	Движение.Организация		=	Документ.Организация;
	Движение.ПодотчетноеЛицо	=	Документ.Контрагент;
	Движение.Валюта				=	Документ.ВалютаДокумента;
	Движение.Сумма				=	Документ.СуммаДокумента;
	Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
									Документ.СуммаДокумента,
									ПараметрыКурсаДокумента,
									ПараметрыКурсаВалютыРегламентированногоУчета);
	
КонецПроцедуры

Процедура СформироватьДвиженияПриходныйКассовыйОрдер(Документ, Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Документ.ВидОперации <> Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Документ.Движения;
	Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.Записывать = Истина;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураКурсаДокумента	=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(Документ.ВалютаДокумента, Документ.Дата);
	ПараметрыКурсаДокумента	=	Новый Структура("Валюта, Курс, Кратность", Документ.ВалютаДокумента, СтруктураКурсаДокумента.Курс, СтруктураКурсаДокумента.Кратность);
	
	ПараметрыКурсаВалютыРегламентированногоУчета = Новый Структура("Валюта, Курс, Кратность", ВалютаРегламентированногоУчета, 1, 1);
	
	Если Не ЗначениеЗаполнено(Документ.ДокументОснование) Или ЗначениеЗаполнено(Документ.ДокументОснование)
		И ТипЗнч(Документ.ДокументОснование) <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьРасход();
		Движение.Период				=	Документ.Дата;
		Движение.ДокументРасчетов	=	Документ.Ссылка;
		Движение.Организация		=	Документ.Организация;
		Движение.ПодотчетноеЛицо	=	Документ.Контрагент;
		Движение.Валюта				=	Документ.ВалютаДокумента;
		Движение.Сумма				=	Документ.СуммаДокумента;
		Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
										Документ.СуммаДокумента,
										ПараметрыКурсаДокумента,
										ПараметрыКурсаВалютыРегламентированногоУчета);
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаДокумента",		Документ.Дата);
		Запрос.УстановитьПараметр("Организация",		Документ.Организация);
		Запрос.УстановитьПараметр("Валюта",				Документ.ВалютаДокумента);
		Запрос.УстановитьПараметр("ПодотчетноеЛицо",	Документ.Контрагент);
		Запрос.УстановитьПараметр("Ссылка",				Документ.ДокументОснование);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АвансовыйОтчетВыданныеАвансы.ДокументАванса КАК ДокументАванса
		|ПОМЕСТИТЬ ВТ_ДокументыАванса
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
		|ГДЕ
		|	АвансовыйОтчетВыданныеАвансы.Ссылка = &Ссылка
		|	И НЕ АвансовыйОтчетВыданныеАвансы.ДокументАванса ССЫЛКА Документ.ВыдачаДенежныхДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация КАК Организация,
		|	ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ДокументРасчетов КАК ДокументРасчетов,
		|	ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ок_ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
		|			&ДатаДокумента,
		|			Организация = &Организация
		|				И Валюта = &Валюта
		|				И ПодотчетноеЛицо = &ПодотчетноеЛицо
		|				И ДокументРасчетов В
		|					(ВЫБРАТЬ
		|						ВТ_ДокументыАванса.ДокументАванса
		|					ИЗ
		|						ВТ_ДокументыАванса КАК ВТ_ДокументыАванса)) КАК ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ок_ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ДокументРасчетов.Дата
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	ОБЩИЕ";
		ВыборкаОбщийИтог	=	Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТекущийОстаток		=	Документ.СуммаДокумента;
		
		Если ВыборкаОбщийИтог.Количество() Тогда
			ВыборкаОбщийИтог.Следующий();
			Если ВыборкаОбщийИтог.Сумма <> ТекущийОстаток Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма документа больше суммы остатков авансов у подотчетного лица. Документ не будет проведен.'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Выборка = ВыборкаОбщийИтог.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТекущийОстаток > 0  Тогда 
				Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьРасход();
				Движение.Период				=	Документ.Дата;
				Движение.ДокументРасчетов	=	Выборка.ДокументРасчетов;
				Движение.Организация		=	Документ.Организация;
				Движение.ПодотчетноеЛицо	=	Документ.Контрагент;
				Движение.Валюта				=	Документ.ВалютаДокумента;
				Движение.Сумма				=	Мин(ТекущийОстаток,Выборка.Сумма);
				Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
												Движение.Сумма,
												ПараметрыКурсаДокумента,
												ПараметрыКурсаВалютыРегламентированногоУчета);
				ТекущийОстаток = ТекущийОстаток - Мин(ТекущийОстаток, Выборка.Сумма);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияЗачетОстатковПодотчетногоЛица(Документ, Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Документ.Движения;
	Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.Записывать = Истина;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураКурсаДокумента	=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(Документ.Валюта, Документ.Дата);
	ПараметрыКурсаДокумента	=	Новый Структура("Валюта, Курс, Кратность", Документ.Валюта, СтруктураКурсаДокумента.Курс, СтруктураКурсаДокумента.Кратность);
	
	ПараметрыКурсаВалютыРегламентированногоУчета = Новый Структура("Валюта, Курс, Кратность", ВалютаРегламентированногоУчета, 1, 1);
	
	Для Каждого Строка Из Документ.ДолгиСотрудника Цикл
		Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьРасход();
		Движение.Период = Документ.Дата;
		Движение.ДокументРасчетов	=	Строка.ДокументРасчетов;
		Движение.Организация		=	Документ.Организация;
		Движение.ПодотчетноеЛицо	=	Документ.ПодотчетноеЛицо;
		Движение.Валюта				=	Документ.Валюта;
		Движение.ДенежныйДокумент	=	Строка.ДенежныйДокумент;
		Движение.Сумма				=	Строка.СуммаЗачета;
		Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
										Строка.СуммаЗачета,
										ПараметрыКурсаДокумента,
										ПараметрыКурсаВалютыРегламентированногоУчета);
		
	КонецЦикла;
	
	Для Каждого Строка Из Документ.ДолгиКомпании Цикл
		Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьПриход();
		Движение.Период				=	Документ.Дата;
		Движение.ДокументРасчетов	=	Строка.ДокументРасчетов;
		Движение.Организация		=	Документ.Организация;
		Движение.ПодотчетноеЛицо	=	Документ.ПодотчетноеЛицо;
		Движение.Валюта				=	Документ.Валюта;
		Движение.ДенежныйДокумент	=	Строка.ДенежныйДокумент;
		Движение.Сумма				=	Строка.СуммаЗачета;
		Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
										Строка.СуммаЗачета,
										ПараметрыКурсаДокумента,
										ПараметрыКурсаВалютыРегламентированногоУчета);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияОперацияБОСС(Документ, Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Документ.Движения;
	Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.Записывать = Истина;
	Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.Очистить();
	ДвиженияРСБУ = Движения.Хозрасчетный;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого Строка Из ДвиженияРСБУ Цикл
		Если Строка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда
			И Строка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами Тогда
			Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьРасход();
			Движение.Период				=	Документ.Дата;
			Движение.ДокументРасчетов	=	Документ.Ссылка;
			Движение.Организация		=	Документ.Организация;
			Движение.ПодотчетноеЛицо	=	Строка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций];
			Движение.Валюта				=	ВалютаРегламентированногоУчета;
			Движение.Сумма				=	Строка.Сумма;
			Движение.СуммаРегл			=	Строка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияАвансовыйОтчет(Документ, Отказ, РежимПроведения)
	
	//ОКЕЙ Завьялова Е.А.(ПервыйБИТ) Начало 2021-11-11 (#AT-2155226#)
	ЕстьНепроведнныеВыдачиДенежныхСредств = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыданныеАвансы",	Документ.ВыданныеАвансы.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ_ВыданныеАвансы.ДокументАванса КАК ДокументАванса
	|ПОМЕСТИТЬ ВТ_НепроведенныеДокументы
	|ИЗ
	|	&ВыданныеАвансы КАК ТЧ_ВыданныеАвансы
	|ГДЕ
	|	ТЧ_ВыданныеАвансы.ДокументАванса ССЫЛКА Документ.ВыдачаДенежныхДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НепроведенныеДокументы.ДокументАванса КАК ДокументАванса
	|ИЗ
	|	ВТ_НепроведенныеДокументы КАК ВТ_НепроведенныеДокументы
	|ГДЕ
	|	НЕ ВТ_НепроведенныеДокументы.ДокументАванса.Проведен";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ЕстьНепроведнныеВыдачиДенежныхСредств = Истина;
	КонецЕсли;
	
	//ОКЕЙ Завьялова Е.А.(ПервыйБИТ) Конец  2021-11-11 (#AT-2155226#)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ_ВыданныеАвансы.ок_СуммаАванса КАК ок_СуммаАванса,
	|	0 КАК СуммаБСО,
	|	""Отклонения"" КАК ТЧ
	|ПОМЕСТИТЬ ВТ_СуммыАвансов
	|ИЗ
	|	&ВыданныеАвансы КАК ТЧ_ВыданныеАвансы
	|ГДЕ
	|	ТЧ_ВыданныеАвансы.ДокументАванса ССЫЛКА Документ.ВыдачаДенежныхДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК ок_СуммаАванса,
	|	ТЧ_Прочее.Сумма КАК СуммаБСО,
	|	""Отклонения"" КАК ТЧ
	|ПОМЕСТИТЬ ВТ_СуммыБСО
	|ИЗ
	|	&Прочее КАК ТЧ_Прочее
	|ГДЕ
	|	ТЧ_Прочее.БланкСтрогойОтчетности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_СуммыАвансов.ок_СуммаАванса) КАК ок_СуммаАванса,
	|	СУММА(ВТ_СуммыАвансов.СуммаБСО) КАК СуммаБСО,
	|	ВТ_СуммыАвансов.ТЧ КАК ТЧ
	|ПОМЕСТИТЬ ВТ_Суммы
	|ИЗ
	|	ВТ_СуммыАвансов КАК ВТ_СуммыАвансов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СуммыАвансов.ТЧ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ВТ_СуммыБСО.ок_СуммаАванса),
	|	СУММА(ВТ_СуммыБСО.СуммаБСО),
	|	ВТ_СуммыБСО.ТЧ
	|ИЗ
	|	ВТ_СуммыБСО КАК ВТ_СуммыБСО
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СуммыБСО.ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Суммы.ок_СуммаАванса) КАК ок_СуммаАванса,
	|	СУММА(ВТ_Суммы.СуммаБСО) КАК СуммаБСО,
	|	ВТ_Суммы.ТЧ КАК ТЧ
	|ИЗ
	|	ВТ_Суммы КАК ВТ_Суммы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Суммы.ТЧ";
	Запрос.УстановитьПараметр("ВыданныеАвансы",	Документ.ВыданныеАвансы.Выгрузить());
	Запрос.УстановитьПараметр("Прочее",			Документ.Прочее.Выгрузить());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаДенежныхДокументов = 0;
	
	Если Выборка.Количество() Тогда
		Выборка.Следующий();
		СуммаДенежныхДокументов = Выборка.ок_СуммаАванса;
		//ОКЕЙ Завьялова Е.А.(ПервыйБИТ) Начало 2021-11-11 (#AT-2155226#)
		Если Не ЕстьНепроведнныеВыдачиДенежныхСредств Тогда
			//ОКЕЙ Завьялова Е.А.(ПервыйБИТ) Конец 2021-11-11 (#AT-2155226#)
			
			Если Выборка.ок_СуммаАванса <> Выборка.СуммаБСО Тогда
				ТекстСообщения = НСтр("ru = 'Суммы авансов и отчета сотрудника по денежным документам не совпадают. Документ не проведен.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
			//ОКЕЙ Завьялова Е.А.(ПервыйБИТ) Начало 2021-11-11 (#AT-2155226#)
		КонецЕсли;
		//ОКЕЙ Завьялова Е.А.(ПервыйБИТ) Конец 2021-11-11 (#AT-2155226#)
		
	//ОКЕЙ Завьялова Е.А.(ПервыйБИТ) Начало 2021-11-15 (#AT-2156709#)
	//Иначе
	//	Отказ = Истина;
	//ОКЕЙ Завьялова Е.А.(ПервыйБИТ) Конец 2021-11-15 (#AT-2156709#)
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Документ.Движения;
	Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.Записывать = Истина;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Документ.ВалютаДокумента, Документ.Дата);
	ПараметрыКурсаДокумента	= Новый Структура("Валюта, Курс, Кратность", Документ.ВалютаДокумента, СтруктураКурсаДокумента.Курс, СтруктураКурсаДокумента.Кратность);
	
	ПараметрыКурсаВалютыРегламентированногоУчета	=	Новый Структура("Валюта, Курс, Кратность", ВалютаРегламентированногоУчета, 1, 1);
	
	СуммаРасходов = Документ.СуммаДокумента - СуммаДенежныхДокументов;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ_ВыданныеАвансы.ДокументАванса КАК ДокументАванса,
	|	ТЧ_ВыданныеАвансы.ок_СуммаАванса КАК ок_СуммаАванса
	|ПОМЕСТИТЬ ВТ_СуммыАвансов
	|ИЗ
	|	&ВыданныеАвансы КАК ТЧ_ВыданныеАвансы
	|ГДЕ
	|	ТЧ_ВыданныеАвансы.ДокументАванса ССЫЛКА Документ.ВыдачаДенежныхДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыдачаДенежныхДокументовДенежныеДокументы.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ВыдачаДенежныхДокументовДенежныеДокументы.Ссылка КАК ДокументВыдачаДД
	|ПОМЕСТИТЬ ВТ_денежныеДокументы
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов.ДенежныеДокументы КАК ВыдачаДенежныхДокументовДенежныеДокументы
	|ГДЕ
	|	ВыдачаДенежныхДокументовДенежныеДокументы.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_СуммыАвансов.ДокументАванса
	|			ИЗ
	|				ВТ_СуммыАвансов КАК ВТ_СуммыАвансов)
	|	И ВыдачаДенежныхДокументовДенежныеДокументы.НомерСтроки = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СуммыАвансов.ДокументАванса КАК ДокументАванса,
	|	ВТ_СуммыАвансов.ок_СуммаАванса КАК ок_СуммаАванса,
	|	ВТ_денежныеДокументы.ДенежныйДокумент КАК ДенежныйДокумент
	|ИЗ
	|	ВТ_СуммыАвансов КАК ВТ_СуммыАвансов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_денежныеДокументы КАК ВТ_денежныеДокументы
	|		ПО ВТ_СуммыАвансов.ДокументАванса = ВТ_денежныеДокументы.ДокументВыдачаДД";
	Запрос.УстановитьПараметр("ВыданныеАвансы", Документ.ВыданныеАвансы.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьРасход();
		Движение.Период				=	Документ.Дата;
		Движение.ДокументРасчетов	=	Выборка.ДокументАванса;
		Движение.Организация		=	Документ.Организация;
		Движение.ПодотчетноеЛицо	=	Документ.ФизЛицо;
		Движение.Валюта				=	Документ.ВалютаДокумента;
		Движение.ДенежныйДокумент	=	Выборка.ДенежныйДокумент;
		Движение.Сумма				=	Выборка.ок_СуммаАванса;
		Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		Выборка.ок_СуммаАванса,
		ПараметрыКурсаДокумента,
		ПараметрыКурсаВалютыРегламентированногоУчета);
		
	КонецЦикла;
	
	Для Каждого Строка Из Документ.ВыданныеАвансы Цикл
		Если СуммаРасходов > 0 Тогда
			Если ТипЗнч(Строка.ДокументАванса) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
				Продолжить;
			КонецЕсли;
			Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьРасход();
			Движение.Период				=	Документ.Дата;
			Движение.ДокументРасчетов	=	Строка.ДокументАванса;
			Движение.Организация		=	Документ.Организация;
			Движение.ПодотчетноеЛицо	=	Документ.ФизЛицо;
			Движение.Валюта				=	Документ.ВалютаДокумента;
			Движение.Сумма				=	Мин(Строка.ок_СуммаАванса, СуммаРасходов);
			Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
			Движение.Сумма,
			ПараметрыКурсаДокумента,
			ПараметрыКурсаВалютыРегламентированногоУчета);
			СуммаРасходов = СуммаРасходов - Строка.ок_СуммаАванса;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаРасходов > 0  Тогда 
		Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьРасход();
		Движение.Период				=	Документ.Дата;
		Движение.ДокументРасчетов	=	Документ.Ссылка;
		Движение.Организация		=	Документ.Организация;
		Движение.ПодотчетноеЛицо	=	Документ.ФизЛицо;
		Движение.Валюта				=	Документ.ВалютаДокумента;
		Движение.Сумма				=	СуммаРасходов;
		Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		СуммаРасходов,
		ПараметрыКурсаДокумента,
		ПараметрыКурсаВалютыРегламентированногоУчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияСписаниеСРасчетногоСчета(Документ, Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Документ.СБ_ПрофильРазноски <> "71.01" Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Документ.Движения;
	Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.Записывать = Истина;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураКурсаДокумента		=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(Документ.ВалютаДокумента, Документ.Дата);
	ПараметрыКурсаДокумента		=	Новый Структура("Валюта, Курс, Кратность", Документ.ВалютаДокумента, СтруктураКурсаДокумента.Курс, СтруктураКурсаДокумента.Кратность);
	
	ПараметрыКурсаВалютыРегламентированногоУчета = Новый Структура("Валюта, Курс, Кратность", ВалютаРегламентированногоУчета, 1, 1);
	
	Если ЗначениеЗаполнено(Документ.ДокументОснование) И ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.бит_ПлатежнаяПозиция") 
		И ЗначениеЗаполнено(Документ.ДокументОснование.ДокументОснование) И ТипЗнч(Документ.ДокументОснование.ДокументОснование)= Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") 
		Или ЗначениеЗаполнено(Документ.ДокументОснование) И ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Запрос = Новый Запрос;
		Если Документ.ПодотчетныеЛица.Количество() Тогда
			ТЧ_ПодотчетныеЛица = Документ.ПодотчетныеЛица.Выгрузить();
			ТЧ_ПодотчетныеЛица.Свернуть("ФизЛицо","Сумма");
			Запрос.УстановитьПараметр("ТЧ_ПодотчетныеЛица",	ТЧ_ПодотчетныеЛица);
			Запрос.УстановитьПараметр("ДокументРасчетов",	Документ.Ссылка);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&ДокументРасчетов КАК ДокументРасчетов,
			|	ТЧ_ПодотчетныеЛица.ФизЛицо КАК ФизЛицо,
			|	ТЧ_ПодотчетныеЛица.Сумма КАК Сумма
			|ПОМЕСТИТЬ ВТ_ПодотчетныеЛица
			|ИЗ
			|	&ТЧ_ПодотчетныеЛица КАК ТЧ_ПодотчетныеЛица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		Иначе
			Запрос.УстановитьПараметр("ДокументРасчетов",	Документ.Ссылка);
			Запрос.УстановитьПараметр("ФизЛицо",			Документ.Контрагент);
			Запрос.УстановитьПараметр("Сумма",				Документ.СуммаДокумента);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(&ДокументРасчетов КАК Документ.СписаниеСРасчетногоСчета) КАК ДокументРасчетов,
			|	&ФизЛицо КАК ФизЛицо,
			|	&Сумма КАК Сумма
			|ПОМЕСТИТЬ ВТ_ПодотчетныеЛица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
		КонецЕсли;
		ТекстЗнРДС = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(бит_ЗаявкаНаРасходованиеСредствРаспределение.ок_ПрогнозПлатежа.ок_ДокументОснование, ВТ_ПодотчетныеЛица.ДокументРасчетов) КАК ДокументРасчетов,
		|	ВТ_ПодотчетныеЛица.ФизЛицо КАК ФизЛицо,
		|	СУММА(ЕСТЬNULL(бит_ЗаявкаНаРасходованиеСредствРаспределение.Сумма, ВТ_ПодотчетныеЛица.Сумма)) КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(бит_ЗаявкаНаРасходованиеСредствРаспределение.ок_ПрогнозПлатежа.ок_ДокументОснование, ВТ_ПодотчетныеЛица.ДокументРасчетов) ССЫЛКА Документ.АвансовыйОтчет
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет,
		|	СУММА(ВТ_ПодотчетныеЛица.Сумма) КАК ИтоговаяСуммаПоФизЛицу,
		|	ЕСТЬNULL(бит_ЗаявкаНаРасходованиеСредствРаспределение.ок_ПрогнозПлатежа.ок_ДокументОснование.Дата, ВТ_ПодотчетныеЛица.ДокументРасчетов.Дата) КАК Дата
		|ИЗ
		|	ВТ_ПодотчетныеЛица КАК ВТ_ПодотчетныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
		|		ПО ВТ_ПодотчетныеЛица.ФизЛицо = бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_5
		|			И (бит_ЗаявкаНаРасходованиеСредствРаспределение.ок_ПрогнозПлатежа.ок_ДокументОснование <> ЗНАЧЕНИЕ(Документ.АвансовыйОтчет.ПустаяСсылка))
		|			И (бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка = &ЗнРДС)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПодотчетныеЛица.ФизЛицо,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(бит_ЗаявкаНаРасходованиеСредствРаспределение.ок_ПрогнозПлатежа.ок_ДокументОснование, ВТ_ПодотчетныеЛица.ДокументРасчетов) ССЫЛКА Документ.АвансовыйОтчет
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	ЕСТЬNULL(бит_ЗаявкаНаРасходованиеСредствРаспределение.ок_ПрогнозПлатежа.ок_ДокументОснование.Дата, ВТ_ПодотчетныеЛица.ДокументРасчетов.Дата),
		|	ЕСТЬNULL(бит_ЗаявкаНаРасходованиеСредствРаспределение.ок_ПрогнозПлатежа.ок_ДокументОснование, ВТ_ПодотчетныеЛица.ДокументРасчетов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	Дата
		|ИТОГИ
		|	СУММА(ИтоговаяСуммаПоФизЛицу)
		|ПО
		|	ФизЛицо";
		Если ЗначениеЗаполнено(Документ.ДокументОснование) И ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			ЗапросЗнРДС = Новый Запрос;
			ЗапросЗнРДС.Текст =  
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПлатежноеПоручениебит_ПлатежныеПозиции.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
			|	бит_ЗаявкаНаРасходованиеСредств.Ссылка КАК ЗнРДС
			|ИЗ
			|	Документ.ПлатежноеПоручение.бит_ПлатежныеПозиции КАК ПлатежноеПоручениебит_ПлатежныеПозиции
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
			|		ПО ПлатежноеПоручениебит_ПлатежныеПозиции.ПлатежнаяПозиция.ДокументОснование = бит_ЗаявкаНаРасходованиеСредств.Ссылка
			|ГДЕ
			|	ПлатежноеПоручениебит_ПлатежныеПозиции.Ссылка = &Ссылка";
			ЗапросЗнРДС.УстановитьПараметр("Ссылка", Документ.ДокументОснование);
			ВыборкаЗнРДС = ЗапросЗнРДС.Выполнить().Выбрать();
			
			Запрос.УстановитьПараметр("ЗнРДС", Неопределено);
			Если ВыборкаЗнРДС.Количество() Тогда
				ВыборкаЗнРДС.Следующий();
				Запрос.УстановитьПараметр("ЗнРДС", ВыборкаЗнРДС.ЗнРДС);
			КонецЕсли;
			
		Иначе
			Запрос.УстановитьПараметр("ЗнРДС", Документ.ДокументОснование.ДокументОснование);
		КонецЕсли;
		Запрос.Текст	=	Запрос.Текст + ТекстЗнРДС;
		ВыборкаФизЛицо	=	Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаФизЛицо.Следующий() Цикл
			ВыборкаДетальныеЗаписи	=	ВыборкаФизЛицо.Выбрать();
			СуммаОстатокПоФизЛицу	=	ВыборкаФизЛицо.ИтоговаяСуммаПоФизЛицу;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если СуммаОстатокПоФизЛицу > 0 Тогда
					Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьПриход();
					Движение.Период				=	Документ.Дата;
					Движение.ДокументРасчетов	=	ВыборкаДетальныеЗаписи.ДокументРасчетов;
					Движение.Организация		=	Документ.Организация;
					Движение.ПодотчетноеЛицо	=	ВыборкаДетальныеЗаписи.ФизЛицо;
					Движение.Валюта				=	Документ.ВалютаДокумента;
					Движение.Сумма				=	ВыборкаДетальныеЗаписи.Сумма;
					Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
													ВыборкаДетальныеЗаписи.Сумма,
													ПараметрыКурсаДокумента,
													ПараметрыКурсаВалютыРегламентированногоУчета);
					СуммаОстатокПоФИзЛицу		=	СуммаОстатокПоФИзЛицу - ВыборкаДетальныеЗаписи.Сумма;
				КонецЕсли;
				
			КонецЦикла;
			Если СуммаОстатокПоФизЛицу > 0 Тогда
				Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьПриход();
				Движение.Период				=	Документ.Дата;
				Движение.ДокументРасчетов	=	Документ.Ссылка;
				Движение.Организация		=	Документ.Организация;
				Движение.ПодотчетноеЛицо	=	ВыборкаФизЛицо.ФизЛицо;
				Движение.Валюта				=	Документ.ВалютаДокумента;
				Движение.Сумма				=	СуммаОстатокПоФИзЛицу;
				Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
												СуммаОстатокПоФИзЛицу,
												ПараметрыКурсаДокумента,
												ПараметрыКурсаВалютыРегламентированногоУчета);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если Документ.ПодотчетныеЛица.Количество() Тогда
			Для Каждого Строка Из Документ.ПодотчетныеЛица Цикл
				Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьПриход();
				Движение.Период = Документ.Дата;
				Движение.ДокументРасчетов	=	Документ.Ссылка;
				Движение.Организация		=	Документ.Организация;
				Движение.ПодотчетноеЛицо	=	Строка.ФизЛицо;
				Движение.Валюта				=	Документ.ВалютаДокумента;
				Движение.Сумма				=	Строка.Сумма;
				Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
												Строка.Сумма,
												ПараметрыКурсаДокумента,
												ПараметрыКурсаВалютыРегламентированногоУчета);
				
			КонецЦикла;
		Иначе
			Движение = Движения.ок_ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьПриход();
			Движение.Период = Документ.Дата;
			Движение.ДокументРасчетов	=	Документ.Ссылка;
			Движение.Организация		=	Документ.Организация;
			Движение.ПодотчетноеЛицо	=	Документ.Контрагент;
			Движение.Валюта				=	Документ.ВалютаДокумента;
			Движение.Сумма				=	Документ.СуммаДокумента;
			Движение.СуммаРегл			=	РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
											Документ.СуммаДокумента,
											ПараметрыКурсаДокумента,
											ПараметрыКурсаВалютыРегламентированногоУчета);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-22 (#ТП_БП05_ФР06)



