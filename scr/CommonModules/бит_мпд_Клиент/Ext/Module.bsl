////////////////////////////////////////////////////////////////////////////////
// Модуль содержит клиентские методы механизма получения данных.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСТабличнымПолемОтбор

// Процедура открывает форму выбора полей построителя.
// 
// Параметры:
//  ТекущаяСтрока 	 - СтрокаТабЧасти.
//  ИмяТабЧасти 	 - Строка.
//  ИмяПоля     	 - Строка.
//  Режим            - Строка.
//  АдресПостроителя - Строка.
//  СтрПар 			 - Структура (По умолчанию = Неопределено).
//  ЭлементВладелец  - Структура (По умолчанию = Неопределено).
// 
Процедура ОткрытьФормуПолейПостроителя(ТекущаяСтрока, ИмяТабЧасти, ИмяПоля, Режим, АдресПостроителя, СтрПар = Неопределено, ЭлементВладелец = Неопределено) Экспорт

	ПараметрыФормы  = Новый Структура;
	ПараметрыФормы.Вставить("АдресПостроителя" , АдресПостроителя);
	ПараметрыФормы.Вставить("Режим"            , Режим);
	ПараметрыФормы.Вставить("ВыводитьВложенные", Истина);
	
	Если ТипЗнч(СтрПар) = Тип("Структура") Тогда
		
		Если СтрПар.Свойство("АдресСоединения") Тогда			
			ПараметрыФормы.Вставить("АдресСоединения", СтрПар.АдресСоединения); 			
		КонецЕсли; 
		
		Если СтрПар.Свойство("ТекстЗапроса") Тогда  			
			ПараметрыФормы.Вставить("ТекстЗапроса", СтрПар.ТекстЗапроса); 			
		КонецЕсли;   		     	
		
		Если СтрПар.Свойство("АдресИсточникаПостроителя") Тогда 		
			ПараметрыФормы.Вставить("АдресИсточникаПостроителя", СтрПар.АдресИсточникаПостроителя); 		
		КонецЕсли;
		
		Если СтрПар.Свойство("МассивСубконто") Тогда 			
			ПараметрыФормы.Вставить("МассивСубконто", СтрПар.МассивСубконто);  			
		КонецЕсли;	
		
		Если СтрПар.Свойство("ДтКт") Тогда			
			ПараметрыФормы.Вставить("ДтКт", СтрПар.ДтКт); 			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(ТекущаяСтрока[ИмяПоля]) Тогда 		
		ПараметрыФормы.Вставить("ТекПутьКДанным",ТекущаяСтрока[ИмяПоля]);  		
	КонецЕсли; 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДопПараметры.Вставить("ИмяПоля"		 , ИмяПоля);
	ДопПараметры.Вставить("ИмяТабЧасти"  , ИмяТабЧасти);
	ОбработчикВСП = Новый ОписаниеОповещения("ОткрытьФормуПолейПостроителяЗавершение", ЭтотОбъект, ДопПараметры);
	Если ЭлементВладелец = Неопределено Тогда
		ОткрытьФорму( "ОбщаяФорма.бит_мпд_ФормаВыбораСвойствПостроителя", ПараметрыФормы,,,,, ОбработчикВСП);
	Иначе
		ОткрытьФорму( "ОбщаяФорма.бит_мпд_ФормаВыбораСвойствПостроителя", ПараметрыФормы, ЭлементВладелец,,,, ОбработчикВСП);
	КонецЕсли;
			
КонецПроцедуры // ОткрытьФормуПолейПостроителя()

// Процедура обработчик оповещения "ОткрытьФормуПолейПостроителяЗавершение".
// 
// Параметры:
// РезВыбора - Структура
// ДопПараметры - Структура
// 
Процедура ОткрытьФормуПолейПостроителяЗавершение(РезВыбора, ДопПараметры) Экспорт
	
	ТекущаяСтрока = ДопПараметры.ТекущаяСтрока;
	ИмяПоля     = ДопПараметры.ИмяПоля;
	ИмяТабЧасти = ДопПараметры.ИмяТабЧасти;
	
	Если ТипЗнч(РезВыбора) = Тип("Структура") Тогда
	
		ТекущаяСтрока[ИмяПоля] = РезВыбора.ПутьКДанным;
		
		Попытка
			ТекущаяСтрока.Представление = РезВыбора.Представление;
		Исключение 		
		КонецПопытки;
		
		Попытка
			ТекущаяСтрока.Имя = СтрЗаменить(РезВыбора.ПутьКДанным, ".", "_");
		Исключение 		
		КонецПопытки;
		
		Если ИмяТабЧасти = "ТаблицаОтбор" ИЛИ ИмяТабЧасти = "ТаблицаОтборКорреспонденции" Тогда
		
			ТекущаяСтрока.ТипЗначения  = РезВыбора.ТипЗначения;
			ТекущаяСтрока.Значение     = ТекущаяСтрока.ТипЗначения.ПривестиЗначение(ТекущаяСтрока.Значение);
			Если ТипЗнч(ТекущаяСтрока.ТипЗначения) = Тип("ОписаниеТипов") 
				И ТипЗнч(ТекущаяСтрока.Значение) = Тип("Строка") Тогда
				ТекущаяСтрока.Значение = Неопределено;
			КонецЕсли;	
			Если ТекущаяСтрока.Свойство("ЗначениеС") И ТекущаяСтрока.Свойство("ЗначениеПо") Тогда
			 	ТекущаяСтрока.ЗначениеС  = ТекущаяСтрока.ТипЗначения.ПривестиЗначение(ТекущаяСтрока.ЗначениеС);
				ТекущаяСтрока.ЗначениеПо = ТекущаяСтрока.ТипЗначения.ПривестиЗначение(ТекущаяСтрока.ЗначениеПо);
			КонецЕсли;
			ТекущаяСтрока.ВидСравнения = ВидСравнения.Равно;
			
			Если ТекущаяСтрока.ПутьКДанным = "Периодичность" 
				 И ТипЗнч(ТекущаяСтрока.Значение) = Тип("Число") Тогда
			
				ТекущаяСтрока.ЭтоПериодичность = Истина;
			
			КонецЕсли; 
			
		ИначеЕсли ИмяТабЧасти = "ОтборВОтчете" Тогда
			
			ТекущаяСтрока.ТипЗначенияСтр = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(РезВыбора.ТипЗначения);
			
		ИначеЕсли ИмяТабЧасти = "Поля" Тогда	
			
			Если РезВыбора.ЭтоЧисловоеПоле Тогда				
				ТекущаяСтрока.ВидПоля = "Ресурс";			
			Иначе 				
				ТекущаяСтрока.ВидПоля = "Поле";				
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЕсли;    	

КонецПроцедуры // ОткрытьФормуПолейПостроителяЗавершение()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Значение" табличного поля "ТаблицаОтбор".
// 
&НаКлиенте
Процедура ТаблицаОтборЗначениеНачалоВыбора(ТекущаяФорма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка)  Экспорт
	
	Попытка
		ЭтоПериодичность = ТекущаяСтрока.ЭтоПериодичность;    	
	Исключение
		ЭтоПериодичность = Ложь;	
	КонецПопытки;
	
	Если ЭтоПериодичность Тогда
	
		СтандартнаяОбработка = Ложь;
		
		СписокПериодичности = бит_ОбщегоНазначенияКлиентСервер.ПолучитьПериодичности(); 		
		ВыбЗначение = ТекущаяФорма.ВыбратьИзСписка(СписокПериодичности);  		
		Если ВыбЗначение <> Неопределено Тогда  	
			ТекущаяСтрока.Значение = ВыбЗначение.Значение; 		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если ТипЗнч(ТекущаяСтрока.ТипЗначения) = Тип("ОписаниеТипов") 
		 И ТекущаяСтрока.ТипЗначения.Типы().Количество() > 1 
		 И ТекущаяСтрока.Значение = Неопределено  Тогда
		
		Элемент.ВыбиратьТип = Истина;	
		Элемент.ОграничениеТипа = ТекущаяСтрока.ТипЗначения;
		
	Иначе	
		
		Элемент.ВыбиратьТип = Ложь;	
        Элемент.ОграничениеТипа = Новый ОписаниеТипов;		
		
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаОтборЗначениеНачалоВыбора()

#КонецОбласти

#Область РаботаСМакетомПроизвольногоОтчета

// Процедура - обработчик события "Очистка" поля ввода "Значение" табличного поля "ТаблицаОтбор".
// 
Процедура ТаблицаОтборЗначениеОчистка(ТекущаяСтрока, Элемент, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ТекущаяСтрока.ТипЗначения) = Тип("ОписаниеТипов") Тогда
		
		Если ТекущаяСтрока.ТипЗначения.Типы().Количество() = 1 Тогда
			СтандартнаяОбработка = Ложь;
			ТекущаяСтрока.Значение = ТекущаяСтрока.ТипЗначения.ПривестиЗначение(Неопределено);
		ИначеЕсли ТекущаяСтрока.ТипЗначения.Типы().Количество() > 1 Тогда 
			СтандартнаяОбработка = Ложь;
			ТекущаяСтрока.Значение = Неопределено;
		КонецЕсли;
	
	КонецЕсли;	 
	
КонецПроцедуры

// Функция получает область ячеек табличного документа по имени.
// 
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент.
//  ИмяОбласти        - Строка.
//  ВыводитьСообщения - Булево.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ПолучитьОбластьЯчеек(ТабличныйДокумент, ИмяОбласти, ВыводитьСообщения = Ложь)  Экспорт
	
    Попытка
        
        Обл = ТабличныйДокумент.Область(ИмяОбласти);
        Если ТипЗнч(Обл) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда     			
            Обл = Неопределено; 			
        КонецЕсли;    		
        
    Исключение
        
        Обл = Неопределено; 		
        
    КонецПопытки;  

    Если ВыводитьСообщения И Обл = Неопределено Тогда  			
        ТекстСообщения = Нстр("ru = 'Не удалось найти область макета по имени: %1%!'");
        ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяОбласти);
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);    			
    КонецЕсли;

    Возврат Обл;
	
КонецФункции // ПолучитьОбластьЯчеек()

#КонецОбласти

// Процедура открывает значения расшифровки из внешних баз.
// 
// Параметры:
//  Расшифровка   - Произвольный
//  СтандартнаяОбработка - Булево.
// 
Процедура РасшифроватьИзВнешнейБазы(Расшифровка, СтандартнаяОбработка) Экспорт
    
    Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Расшифровка, "ЗначениеВнешнейБазы") Тогда
		
        НастройкаРасшифровки = Расшифровка;
		
		СтандартнаяОбработка = Ложь;
			  
        Если ЗначениеЗаполнено(НастройкаРасшифровки.Значение) Тогда

            // Была произведена конвертация - открываем значение из текущей базы.
            ПоказатьЗначение( , НастройкаРасшифровки.Значение);
				  
        ИначеЕсли Найти(НастройкаРасшифровки.ПолноеИмя,"Перечисление") > 0 Тогда

            ПоказатьЗначение( , НастройкаРасшифровки.Представление);
          
        Иначе	 
  
            Если Расшифровка.Свойство("Режим") И Расшифровка.Режим = "HTTP" Тогда

                // Переходы по внешним нав. ссылкам не работают в данной версии платформы. Отправлено в 1С.
                ДанныеОбъекта = бит_мпд_ВнешниеИсточникиСервер.ПолучитьДанныеРасшировкиHTTP(Расшифровка);
                ПараметрыФормы = Новый Структура;
                ПараметрыФормы.Вставить("Режим"        , "РасшифровкаОбъекта");
                ПараметрыФормы.Вставить("ДанныеОбъекта", ДанныеОбъекта);
                ПараметрыФормы.Вставить("Расшифровка"  , Расшифровка);

                ОткрытьФорму("ОбщаяФорма.бит_мпд_Расшифровка",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

            Иначе	

                Соединение = бит_мпд_ПовтИсп.ПодключитьОЛЕ(НастройкаРасшифровки.НастройкаПодключения);
                Если Соединение <> Неопределено Тогда
						  
                    СтруктураИмен = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(НастройкаРасшифровки.ПолноеИмя);

                    СтрПар = Новый Структура("Правило,Направление,ЗначениеПоиска,ИмяОбъектаПолное");
                    СтрПар.Направление      = "ТекущаяВнешняя";
                    СтрПар.ЗначениеПоиска   = НастройкаРасшифровки.ИД;
                    СтрПар.ИмяОбъектаПолное = НастройкаРасшифровки.ПолноеИмя;

                    НайденноеЗначение = бит_мпд_КлиентСервер.НайтиПоИД(Соединение 
                                                                        ,СтрПар
                                                                        ,СтруктураИмен
                                                                        ,"ПоИД"
                                                                        ,Истина);
						  
                    Если НайденноеЗначение <> Неопределено И НЕ НайденноеЗначение.Пустая() Тогда

                        ФормаДляОткрытия = НайденноеЗначение.ПолучитьФорму();
                        ФормаДляОткрытия.ТолькоПросмотр = Истина;
                        Если Соединение.String(ФормаДляОткрытия) = "Форма" Тогда
                            // Обычная форма.
                            Если Найти(СтруктураИмен.ИмяКоллекции, "Документы") > 0 Тогда
                                ЗаголовокФормы = НайденноеЗначение.Метаданные().Синоним;
                            Иначе	
                                ЗаголовокФормы = ФормаДляОткрытия.Caption;
                            КонецЕсли;      
                        Иначе
                            // Соединение.String(ФормаДляОткрытия) = "УправляемаяФорма" ИЛИ "ФормаКлиентскогоПриложения".
                            ЗаголовокФормы = ФормаДляОткрытия.Title;
                        КонецЕсли; 

                        Если ПустаяСтрока(ЗаголовокФормы) Тогда							
                            ЗаголовокФормы = НастройкаРасшифровки.Представление; 							
                        КонецЕсли; 

                        // Окно откроется в фоне - нужно его активировать.
                        бит_ОбщегоНазначенияКлиент.АктивироватьПриложение(ЗаголовокФормы);
						// АПК:565-выкл отсутсвуют варианты получения оповещения (и ухода от модального режима) для ComОбъектов без внесения доработок в интерфесные методы данных Com объектов.
						ФормаДляОткрытия.ОткрытьМодально();
						// АПК:565-вкл.

                    КонецЕсли; 
						  
				КонецЕсли; // Соединение не равно Неопределено. 
					  
            КонецЕсли; // ЗначениеЗаполнено(НастройкаРасшифровки.Значение).

        КонецЕсли; 				  
		  
	КонецЕсли; // Расшифровка - элемент списка

КонецПроцедуры // РасшифроватьИзВнешнейБазы()

// Процедура закрывает расшифровки произвольного отчета. 
// 
Процедура ЗакрытьРасшифровки() Экспорт

	// Закрываем все открытые расшифровки
	Окна = ПолучитьОкна();
	
	Для каждого ТекОкно Из Окна Цикл
		
		Если ТекОкно.Основное Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		УФ = ТекОкно.ПолучитьСодержимое();
		
		Если ТипЗнч(УФ) = Тип("УправляемаяФорма") И (УФ.ИмяФормы = "Обработка.бит_РасшифровкаПроизвольногоОтчета.Форма.ФормаУправляемая") Тогда
			
			УФ.Закрыть();
			
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры // ЗакрытьРасшифровки()

#КонецОбласти
