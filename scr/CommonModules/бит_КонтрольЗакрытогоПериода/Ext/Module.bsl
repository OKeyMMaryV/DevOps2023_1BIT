////////////////////////////////////////////////////////////////////////////////
// 1С:Бухучет и торговля
// Модуль содержит процедуры и функции механизма формирования проводок в закрытом периоде.
// В текущей реализации механизм распространяется только на РегистрБухгалтерии.бит_Дополнительный_2.
// Включение/настройка механизма осуществляется в РегистреСведений.бит_НачалоОткрытогоПериода. 

#Область СлужебныйПрограммныйИнтерфейс

#Область КонтрольЗакрытогоПериода

// Функция определяет идентичны ли таблицы значений или нет. Первоначально 
// производится сравнение количества строк и колонок, если количества совпадают производится 
// сравнение строковых представлений таблиц.
// 
// Параметры:
//  Таблица1  - ТаблицаЗначений - таблица.
//  Таблица2  - ТаблицаЗначений - таблица.
// 
// Возвращаемое значение:
//   флТаблицыИдентичны   - Булево.
// 
Функция СравнитьТаблицы(Таблица1,Таблица2,ПорядокСортировки="") Экспорт
	
	флТаблицыИдентичны = Истина;
	
	Если Таблица1.Количество() <> Таблица2.Количество() Тогда
		флТаблицыИдентичны = Ложь;
	ИначеЕсли Таблица1.Колонки.Количество() <> Таблица2.Колонки.Количество() Тогда
		флТаблицыИдентичны = Ложь;
	Иначе	
		
		СтрКолонки = "";
		Для Каждого Колонка ИЗ Таблица1.Колонки Цикл
			
			СтрКолонки = СтрКолонки + ?(ПустаяСтрока(СтрКолонки),"",",")+Колонка.Имя;
			
		КонецЦикла;
		
		// Копируем обе таблицы во временную таблицу.
		ТабВрем = Таблица1.Скопировать();
		// Добавляем колонки, необходимые для анализа различий.
		
		// В данной колонке изначально будут 1, если свертка выполнена, в результирующих строках, будет число отличное от 1.
		ТабВрем.Колонки.Добавить("_System_Number_Replications_", Новый ОписаниеТипов("Число"));
		// В данной колонки будут метки принадлежности к таблицам. 1 для первой, -1 для второй. 
		// Таким образом при свертке из разных таблиц получаем 0, если свертка произошла по одной таблице, будет не 0.
		ТабВрем.Колонки.Добавить("_System_TableLabel_", Новый ОписаниеТипов("Число"));		
		ТабВрем.ЗаполнитьЗначения(1,"_System_Number_Replications_");
		ТабВрем.ЗаполнитьЗначения(1,"_System_TableLabel_");
		
		
		Для Каждого СтрокаТаблицы ИЗ Таблица2 Цикл
			
			НоваяСтрока = ТабВрем.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока._System_Number_Replications_ = 1;
			НоваяСтрока._System_TableLabel_ = -1;
			
		КонецЦикла;	   
		
		ТабВрем.Свернуть(СтрКолонки, "_System_Number_Replications_, _System_TableLabel_");
		
		Для Каждого СтрокаТаблицы ИЗ ТабВрем Цикл
			// Были свернуты данные из одной таблицы или свертка вообще не произошла.
			Если СтрокаТаблицы._System_TableLabel_ <> 0 ИЛИ СтрокаТаблицы._System_Number_Replications_ = 1 Тогда
				флТаблицыИдентичны = Ложь;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли; 
	
	Возврат флТаблицыИдентичны;
	
КонецФункции // СравнитьТаблицы()

// Функция получает даты открытого периода по регистрам для организации.
// 
// Параметры:
//  Организация   - СправочникСсылка.Организации
//  ОбъектСистемы - СправочникСсылка.бит_ОбъектыСистемы
//  ТаблицаДат    - ТаблицаЗначение,Неопределено - если Неопределено будет получено из параметров сеанса.
// 
// Возвращаемое значение:
//   ДатыОткрытогоПериода   - Соответствие - Ключ:ОбъектСистемы, Значение:Дата.
// 
Функция ПолучитьДатыОткрытогоПериода(Организация,ОбъектСистемы = Неопределено,ТаблицаДат = Неопределено) Экспорт
	
	ДатыОткрытогоПериода = Новый Соответствие;
	
	Если ТаблицаДат = Неопределено Тогда
		
		ТаблицаДат = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НачалоОткрытогоПериода");
		
	КонецЕсли; 
	
	Если ТаблицаДат.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаДат"       ,ТаблицаДат);
		Запрос.УстановитьПараметр("Организация"      ,Организация);
		Запрос.УстановитьПараметр("ОбъектСистемы"    ,ОбъектСистемы);
		Запрос.УстановитьПараметр("ВсеОбъектыСистемы",?(ЗначениеЗаполнено(ОбъектСистемы),Ложь,Истина));
		Запрос.УстановитьПараметр("ПустаяДата"       ,Дата('00010101'));
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаДат.Организация,
		|	ТаблицаДат.ОбъектСистемы,
		|	ТаблицаДат.ДатаОткрытогоПериода
		|ПОМЕСТИТЬ ТаблицаДат
		|ИЗ
		|	&ТаблицаДат КАК ТаблицаДат
		|ГДЕ
		|	(ТаблицаДат.ОбъектСистемы = &ОбъектСистемы
		|			ИЛИ &ВсеОбъектыСистемы)
		|	И ТаблицаДат.ДатаОткрытогоПериода <> &ПустаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ТаблицаДат.ОбъектСистемы,
		|	ТаблицаДат.ДатаОткрытогоПериода
		|ИЗ
		|	ТаблицаДат КАК ТаблицаДат
		|ГДЕ
		|	ТаблицаДат.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ТаблицаДат.ОбъектСистемы,
		|	ТаблицаДат.ДатаОткрытогоПериода
		|ИЗ
		|	ТаблицаДат КАК ТаблицаДат
		|ГДЕ
		|	ТаблицаДат.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДат";
		
		Результат = Запрос.Выполнить();
		
		Выборка   = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДатыОткрытогоПериода.Вставить(Выборка.ОбъектСистемы,Выборка.ДатаОткрытогоПериода);
			ДатаОткрытогоПериода = Выборка.ДатаОткрытогоПериода;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат ДатыОткрытогоПериода;
	
КонецФункции // ПолучитьДатыОткрытогоПериода()

// Функция определяет есть ли корректирующие проводки в заданном периоде или нет.
// 
// Параметры:
//  ОбъектСистемы  - СправочникСсылка.бит_ОбъектыСистемы
//  Организация    - СправочникСсылка.Организации
//  ДатаНачала     - Дата
//  ДатаОкончания  - Дата.
// 
// Возвращаемое значение:
//   флЕстьКорректировки   - Булево.
// 
Функция ЕстьКорректировки(ОбъектСистемы, Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		НачалоПериода = ДатаНачала;
	Иначе
		НачалоПериода = '2000-01-01';
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		КонецПериода = ДатаОкончания;
	Иначе
		КонецПериода = '2036-12-31';
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|  ТаблицаДвижений.Регистратор КАК Регистратор
	|ИЗ
	|  #ТаблицаДвижений КАК ТаблицаДвижений
	|ГДЕ
	|  ТаблицаДвижений.ВидПроводки = &ВидПроводки
	|  И ТаблицаДвижений.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|  И &ЛюбаяОрганизация";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЛюбаяОрганизация", "ТаблицаДвижений.Организация = &Организация");
	КонецЕсли;   
	
	ИмяРегистра  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСистемы, "ИмяОбъекта");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДвижений", "РегистрБухгалтерии." + ИмяРегистра);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидПроводки",    Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",    КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ЛюбаяОрганизация", Истина);
	
	Результат       = Запрос.Выполнить();
	ЕстьКорректировки = НЕ Результат.Пустой();
	
	Возврат ЕстьКорректировки;  
	
КонецФункции

// Функция формирует строку для сортировки таблиц движений перед выполнением сравнения.
// 
// Параметры:
//  ИмяРегистра  - Строка
// 
// Возвращаемое значение:
//   СтрокаСортировки   - Строка.
// 
Функция СформироватьСтрокуДляСортировки(ИмяРегистра) Экспорт  

	 СтрокаСортировки = "СчетДт,СчетКт";
	 
	 МетаРегистр = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	 
	 КоличествоСубконто = МетаРегистр.ПланСчетов.МаксКоличествоСубконто;
	 
	 Для н = 1 По КоличествоСубконто Цикл
	 
	 	 Для й = 1  По 2 Цикл
			 
			Постфикс = ?(й = 1,"Дт","Кт");	 			 
		 	ИмяСубконто = "Субконто"+Постфикс+н;
			СтрокаСортировки = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(СтрокаСортировки,ИмяСубконто,",");
		 
		 КонецЦикла; 
	 
	 КонецЦикла; 
	 
	 Для каждого МетаРесурс Из МетаРегистр.Ресурсы Цикл
		 
		 Если МетаРесурс.Балансовый Тогда
			 
			 СтрокаСортировки = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(СтрокаСортировки,МетаРесурс.Имя,",");
			 
		 Иначе
			 
			 Для й = 1 По 2 Цикл
				 
			  Постфикс = ?(й = 1,"Дт","Кт");	 
			  СтрокаСортировки = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(СтрокаСортировки,МетаРесурс.Имя+Постфикс,",");
			 
			 КонецЦикла;
			 
		 КонецЕсли; 
	 
	 КонецЦикла; 

	 Возврат СтрокаСортировки;
	 
КонецФункции // СформироватьСтрокуДляСортировки()

// Процедура формирует обрабатывает проведение документов (для ручной операции - запись)
// Формируются проводки в закрытом периоде и сторно.
// 
// Параметры:
//  Источник  - ДокументОбъект
//  РегистрыКонтроля   - Соответствие
//  ЗаписыватьДвижения - Булево.
// 
Процедура ОбработатьДвиженияЗакрытогоПериода(Источник,РегистрыКонтроля,ЗаписыватьДвижения=Ложь) Экспорт

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-06-13 (#2843)
	Если Источник.ДополнительныеСвойства.Свойство("ДополнительныеАналитики") Тогда
		ОтразитьВЗакрытомПериоде = Источник.ДополнительныеСвойства.ДополнительныеАналитики.Получить("ОтразитьВЗакрытомПериоде");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтразитьВЗакрытомПериоде) Тогда
		ОтразитьВЗакрытомПериоде = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Источник.Ссылка,
			ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ОтразитьВЗакрытомПериоде, Ложь);
	КонецЕсли;
	
	Если ОтразитьВЗакрытомПериоде Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-06-13 (#2843)
	
	МетаИсточник = Источник.Метаданные();	
	
	Для каждого КиЗ Из РегистрыКонтроля Цикл
		
		ОбъектСистемы        = КиЗ.Ключ;
		ИмяОбъекта           = ОбъектСистемы.ИмяОбъекта;
		ДатаОткрытогоПериода = КиЗ.Значение;
		
		Если НЕ ЗначениеЗаполнено(ДатаОткрытогоПериода) Тогда			
			Продолжить;
		КонецЕсли; 
		
		// Если регистр не участвует в движениях - дальнейшая обработка не нужна.
		Если НЕ бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения,ИмяОбъекта) Тогда			
			Продолжить;
		КонецЕсли; 
		
		Если Не МетаИсточник.Реквизиты.Найти("ОтразитьВЗакрытомПериоде") = Неопределено Тогда
			ИзмененВЗакрытомПериоде = Источник.ОтразитьВЗакрытомПериоде;
		Иначе
			ИзмененВЗакрытомПериоде = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Источник.Ссылка,
		                                   	ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ОтразитьВЗакрытомПериоде, Ложь);
		КонецЕсли;
		
		Если ИзмененВЗакрытомПериоде Тогда
			Продолжить;			
		КонецЕсли; 
		
		МетаданныеРегистра  = Метаданные.РегистрыБухгалтерии[ИмяОбъекта];
		КоличествоСубконто  = МетаданныеРегистра.ПланСчетов.МаксКоличествоСубконто;
		
		НаборЗаписей        = Источник.Движения[ИмяОбъекта];
		Если ЗаписыватьДвижения Тогда
			НаборЗаписей.Прочитать();
		КонецЕсли; 
		
		// BIT AMerkulov 14-03-2015 ++
		Если Источник.ДополнительныеСвойства.Свойство("ПроведениеИзФормы") Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		// BIT AMerkulov 14-03-2015 -		
		
		Если бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения, "бит_СоответствиеОборотовТрансляции") Тогда
			НаборЗаписейСоотвОб = Источник.Движения.бит_СоответствиеОборотовТрансляции;
		Иначе	
			НаборЗаписейСоотвОб = Неопределено;		
		КонецЕсли; 
		
		Если Источник.ДополнительныеСвойства.Свойство("ТаблицаДвижений_бит_СоответствиеОборотовТрансляции") Тогда
			ТабСоотвОб = Источник.ДополнительныеСвойства["ТаблицаДвижений_бит_СоответствиеОборотовТрансляции"];
		Иначе
			ТабСоотвОб = Неопределено;
		КонецЕсли; 
			
		ИмяТаблицыДвижений  = "ТаблицаДвижений_" + ИмяОбъекта;
		ИмяТаблицыСторно    = "ТаблицаСторно_"   + ИмяОбъекта;
			
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ОперацияУправленческий") Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ОбъектСистемы",       ОбъектСистемы);
			СтруктураПараметров.Вставить("ИмяОбъекта",          ИмяОбъекта);
			СтруктураПараметров.Вставить("ДатаОткрытогоПериода",ДатаОткрытогоПериода);
			СтруктураПараметров.Вставить("Источник",            Источник);
			СтруктураПараметров.Вставить("МетаданныеРегистра",  МетаданныеРегистра);
			СтруктураПараметров.Вставить("КоличествоСубконто",  КоличествоСубконто);
			СтруктураПараметров.Вставить("НаборЗаписей",        НаборЗаписей);
			СтруктураПараметров.Вставить("ЗаписыватьДвижения",  ЗаписыватьДвижения);
			СтруктураПараметров.Вставить("НаборЗаписейСоотвОб", НаборЗаписейСоотвОб);
			СтруктураПараметров.Вставить("ТабСоотвОб",          ТабСоотвОб);
			СтруктураПараметров.Вставить("ИмяТаблицыДвижений",  ИмяТаблицыДвижений);
			СтруктураПараметров.Вставить("ИмяТаблицыСторно",    ИмяТаблицыСторно);
			
			ОбработатьяДвиженияОперацияУправленческий(СтруктураПараметров);
		Иначе		
			
			Если Источник.ДополнительныеСвойства.Свойство(ИмяТаблицыДвижений) Тогда
				
				// Получим новые движения
				ТаблицаДвижений = Источник.Движения[ИмяОбъекта].Выгрузить();
				
				// Номер строки движений необходимо сохранить, для сопоставления с номерами строк 
				// источника при анализе отчетом бит_СоответствиеЗаписейТрансляции.
				
				// Для сравнения с предыдущими движениями необходима таблица движений в закрытом периоде.
				ТаблицаЗакрытыйПериод = ТаблицаДвижений.СкопироватьКолонки();
				
				// Сравнение необходимо проводить без учета данных колонок.
				ТаблицаЗакрытыйПериод.Колонки.Удалить("Регистратор");
				ТаблицаЗакрытыйПериод.Колонки.Удалить("МоментВремени");
				ТаблицаЗакрытыйПериод.Колонки.Удалить("НомерСтроки");
				
				Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидПроводки) Тогда
						НоваяСтрока = ТаблицаЗакрытыйПериод.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
						НоваяСтрока.Период = ДатаОткрытогоПериода;
						ПривестиПустыеСубконто(НоваяСтрока,КоличествоСубконто);
					КонецЕсли; 
				КонецЦикла; // По таблице движений 
				
				ТаблицаДвиженийПред = Источник.ДополнительныеСвойства[ИмяТаблицыДвижений];	
				
				//ТипПроводки = Справочники.бит_ТипыПроводок.КорректировкиЗакрытогоПериода;
				//1С-ИжТиСи, Кондратьев, 16.03.2020, обновление, некомментированный исправленный код (
				//ЕстьТипПроводки = (ТаблицаДвиженийПред.Колонки.Найти("ТипПроводки") <> Неопределено); 
				//
				//Индекс = ТаблицаДвиженийПред.Количество() - 1;
				//Пока Индекс >= 0 Цикл
				//	СтрокаТаблицы = ТаблицаДвиженийПред[Индекс];
				//	// бит_Финанс изменения кода: 17.01.18 // BF-1842
				//	Если СтрокаТаблицы.Период >= ДатаОткрытогоПериода Тогда
				//		Если ЕстьТипПроводки Тогда
				//			Если СтрокаТаблицы.ТипПроводки <> Справочники.бит_ТипыПроводок.КорректировкиЗакрытогоПериода Тогда
				//				ТаблицаДвиженийПред.Удалить(Индекс);
				//			КонецЕсли; 
				//		Иначе	
				//			ТаблицаДвиженийПред.Удалить(Индекс);
				//		КонецЕсли; 					
				//	КонецЕсли; 
				//	Индекс = Индекс - 1;
				//КонецЦикла;	
				//1С-ИжТиСи, Кондратьев, 16.03.2020, обновление, некомментированный исправленный код )
				
				// Движения должны консервироваться также в случае, если документ из закрытого периода перенсен в открытый.
				флЕстьДвиженияЗакрытый = ?(ТаблицаЗакрытыйПериод.Количество()>0 ИЛИ ТаблицаДвиженийПред.Количество() > 0,Истина,Ложь);
				
				// Есть движения в закрытом периоде
				Если флЕстьДвиженияЗакрытый Тогда
					
					// ТаблицаДвиженийПред = Источник.ДополнительныеСвойства[ИмяТаблицыДвижений];			
					
					// Перед сравнение отсортируем таблицы по всем ключевым реквизитам.
					СтрокаСортировки    = СформироватьСтрокуДляСортировки(ИмяОбъекта);
					ТаблицаЗакрытыйПериод.Сортировать(СтрокаСортировки);
					ТаблицаДвиженийПред.Сортировать(СтрокаСортировки);
					
					// При сравнении таблиц ДатаФормирования и Период будут мешать
					// сохраним для возможности дальнейшего использования.
					МассивДатаФормирования = ТаблицаДвиженийПред.ВыгрузитьКолонку("ДатаФормирования");
					ТаблицаДвиженийПред.Колонки.Удалить("ДатаФормирования");
					МассивПериод           = ТаблицаДвиженийПред.ВыгрузитьКолонку("Период");
					ТаблицаДвиженийПред.Колонки.Удалить("Период");	
					Если НЕ ТаблицаДвиженийПред.Колонки.Найти("ТипПроводки") = Неопределено Тогда
						МассивТипПроводки = ТаблицаДвиженийПред.ВыгрузитьКолонку("ТипПроводки");
						ТаблицаДвиженийПред.Колонки.Удалить("ТипПроводки");
					КонецЕсли;	
					МассивНомерСтроки = ТаблицаДвиженийПред.ВыгрузитьКолонку("НомерСтроки");
					ТаблицаДвиженийПред.Колонки.Удалить("НомерСтроки");
					
					ТаблицаЗакрытыйПериод.Колонки.Удалить("ДатаФормирования");
					ТаблицаЗакрытыйПериод.Колонки.Удалить("Период");
					Если НЕ ТаблицаЗакрытыйПериод.Колонки.Найти("ТипПроводки") = Неопределено Тогда
						ТаблицаЗакрытыйПериод.Колонки.Удалить("ТипПроводки");
					КонецЕсли;	
					
					// Сравним таблицы
					флТаблицыИдентичны = СравнитьТаблицы(ТаблицаЗакрытыйПериод,ТаблицаДвиженийПред);
					
					// Восстановим даты формирования
					ТаблицаДвиженийПред.Колонки.Добавить("ДатаФормирования");
					ТаблицаДвиженийПред.ЗагрузитьКолонку(МассивДатаФормирования,"ДатаФормирования");
					ТаблицаДвиженийПред.Колонки.Добавить("Период");
					ТаблицаДвиженийПред.ЗагрузитьКолонку(МассивПериод,"Период");
					Если ТипЗнч(МассивТипПроводки) = Тип("Массив") Тогда
						
						ТаблицаДвиженийПред.Колонки.Добавить("ТипПроводки");
						ТаблицаДвиженийПред.ЗагрузитьКолонку(МассивТипПроводки, "ТипПроводки");
						
					КонецЕсли;	
					
					ТаблицаДвиженийПред.Колонки.Добавить("НомерСтроки");
					ТаблицаДвиженийПред.ЗагрузитьКолонку(МассивНомерСтроки, "НомерСтроки");
					
					//БИТ Тртилек 19.06.2012
					//Если НЕ флТаблицыИдентичны Тогда
					Если НЕ флТаблицыИдентичны ИЛИ Источник.ДополнительныеСвойства.Свойство("бит_ДокументИзТрансляции") Тогда
					///БИТ Тртилек
					
						НаборЗаписей.Очистить();
						
						// Формируем движения
						Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
							// BIT AMerkulov 14-03-2015 ++
							Если Источник.ДополнительныеСвойства.Свойство("ПроведениеИзФормы") Тогда
								Если СтрокаТаблицы.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод Или СтрокаТаблицы.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							// BIT AMerkulov 14-03-2015 --
							Если СтрокаТаблицы.Период < ДатаОткрытогоПериода   Тогда
								// Формируем запись в открытом периоде
								СформироватьЗапись(НаборЗаписей
								,СтрокаТаблицы
								,МетаданныеРегистра
								,ТекущаяДата()
								,ДатаОткрытогоПериода
								,Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка()); 
							Иначе	
								// Записи открытого периода оставим без изменений.
								СформироватьЗапись(НаборЗаписей
								,СтрокаТаблицы
								,МетаданныеРегистра); 
							КонецЕсли; // Условие по периоду
						КонецЦикла; // По таблице движений
						
						Если НЕ НаборЗаписейСоотвОб = Неопределено Тогда
							Для каждого Запись Из НаборЗаписейСоотвОб Цикл
								Если Запись.ПериодПриемника < ДатаОткрытогоПериода Тогда
									Запись.ПериодПриемника = ДатаОткрытогоПериода;
									Запись.ТипПроводки = Справочники.бит_ТипыПроводок.КорректировкиЗакрытогоПериода;
								КонецЕсли; 
							КонецЦикла; 
						КонецЕсли; 
						
						// Формируем коректировки
						Для каждого СтрокаТаблицы Из ТаблицаДвиженийПред Цикл
							
							// Если сдвигаем дату назад из открытого периода - сторно не нужно.
							Если СтрокаТаблицы.Период >= ДатаОткрытогоПериода Тогда
								Продолжить;
							КонецЕсли;	
							
							// Консервируем запись в прошлом периоде
							СформироватьЗапись(НаборЗаписей
							,СтрокаТаблицы
							,МетаданныеРегистра
							,ТекущаяДата()
							,СтрокаТаблицы.Период
							,Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод); 
							
							СформироватьЗаписьСоответствияОборотов(НаборЗаписейСоотвОб
							, ТабСоотвОб 
							, СтрокаТаблицы
							, СтрокаТаблицы.Период
							, Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод
							, Ложь);
							
							// Сторнируем запись в открытом периоде
							СформироватьЗапись(НаборЗаписей
							,СтрокаТаблицы
							,МетаданныеРегистра
							,ТекущаяДата()
							,ДатаОткрытогоПериода
							,Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно
							,Истина); 
							
							СформироватьЗаписьСоответствияОборотов(НаборЗаписейСоотвОб
							, ТабСоотвОб 
							, СтрокаТаблицы
							, ДатаОткрытогоПериода
							, Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно
							, Истина);
							
						КонецЦикла; // По предыдушей таблице
						
					Иначе
						
						// Таблицы закрытого периода не отличаются
						НаборЗаписей.Очистить();
						ТаблицаИсточник = ?(ТаблицаДвиженийПред.Количество() > 0, ТаблицаДвиженийПред, ТаблицаДвижений);
						
						Для каждого СтрокаТаблицы Из ТаблицаИсточник Цикл	
							// Оставим те же записи	закрытого периода
							СформироватьЗапись(НаборЗаписей, СтрокаТаблицы, МетаданныеРегистра, ТекущаяДата(), СтрокаТаблицы.Период); 
						КонецЦикла; 
					
					КонецЕсли;  // Таблицы отличаются
				Иначе
					
					// Движений в закрытом периоде нет
					ТаблицаДвиженийПред = Источник.ДополнительныеСвойства[ИмяТаблицыДвижений];			
					
					Если ТаблицаДвижений.Количество() = 0 И ТаблицаДвиженийПред.Количество() > 0 Тогда
						
						// Ситуация аналогичная отмене проведения
						Для каждого СтрокаТаблицы Из ТаблицаДвиженийПред Цикл
							
							Если СтрокаТаблицы.Период < ДатаОткрытогоПериода Тогда
								
								// Консервируем запись в прошлом периоде
								СформироватьЗапись(НаборЗаписей
								,СтрокаТаблицы
								,МетаданныеРегистра
								,ТекущаяДата()
								,СтрокаТаблицы.Период
								,Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод); 
								
								СформироватьЗаписьСоответствияОборотов(НаборЗаписейСоотвОб
								, ТабСоотвОб 
								, СтрокаТаблицы
								, СтрокаТаблицы.Период
								, Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод
								, Ложь);
								
								// Сторнируем запись в открытом периоде
								СформироватьЗапись(НаборЗаписей
								,СтрокаТаблицы
								,МетаданныеРегистра
								,ТекущаяДата()
								,ДатаОткрытогоПериода
								,Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно
								,Истина); 
								
								СформироватьЗаписьСоответствияОборотов(НаборЗаписейСоотвОб
								, ТабСоотвОб 
								, СтрокаТаблицы
								, ДатаОткрытогоПериода
								, Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно
								, Истина);
							КонецЕсли; // Запись в закрытом периоде
						КонецЦикла;  // По таблице обычных движений
					КонецЕсли; // Движения исчезли
				КонецЕсли; // Есть движения в закрытом периоде
			КонецЕсли; // Есть таблица движений предыдущая
			
			флКопироватьСторно = Истина;	
			Если Источник.ДополнительныеСвойства.Свойство(ИмяТаблицыСторно) Тогда
				
				Если Источник.ДополнительныеСвойства.Свойство("бит_ПроведениеНепроведенного") 
					И Источник.ДополнительныеСвойства.бит_ПроведениеНепроведенного = Истина Тогда
					
					// В случае если проводится распроведенный документ спец-проводки сохраняем только если что-то изменилось.
					ТаблицаЗакрытыйПериод.Колонки.Удалить("ВидПроводки");
					ТабСторноПрошлыйПериод = ТаблицаЗакрытыйПериод.СкопироватьКолонки();
					Для каждого СтрокаТаблицы Из Источник.ДополнительныеСвойства[ИмяТаблицыСторно] Цикл
						Если СтрокаТаблицы.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод Тогда
							
							НоваяСтрока = ТабСторноПрошлыйПериод.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
							
						КонецЕсли; 
					КонецЦикла;
					
					Если ТабСторноПрошлыйПериод.Количество() > 0 Тогда
						
						флТаблицыИдентичны = СравнитьТаблицы(ТаблицаЗакрытыйПериод,ТабСторноПрошлыйПериод);
						
						Если флТаблицыИдентичны Тогда
							
							флКопироватьСторно = Ложь;
							// Изменений не было - проводки прошлого периода превращаем в текущие.
							НаборЗаписей.Очистить();
							
							ТекПериод = Источник.Дата;
							Для каждого СтрокаТаблицы Из Источник.ДополнительныеСвойства[ИмяТаблицыСторно] Цикл
								Если СтрокаТаблицы.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод Тогда
									
									СтрокаТаблицы.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка();
									СформироватьЗапись(НаборЗаписей
									,СтрокаТаблицы
									,МетаданныеРегистра); 
									
									ТекПериод = СтрокаТаблицы.Период;
									
								КонецЕсли; 
							КонецЦикла; // По таблице сторно
							
							Если НЕ НаборЗаписейСоотвОб = Неопределено Тогда
								Для каждого Запись Из НаборЗаписейСоотвОб Цикл
									Запись.ПериодПриемника = ТекПериод;
								КонецЦикла; 
							КонецЕсли;	 
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
				
				Если флКопироватьСторно Тогда
					Для каждого СтрокаТаблицы Из Источник.ДополнительныеСвойства[ИмяТаблицыСторно] Цикл
						// Корректирующие записи сохраним
						СформироватьЗапись(НаборЗаписей
						,СтрокаТаблицы
						,МетаданныеРегистра); 
					КонецЦикла; // По таблице сторно
				КонецЕсли; 
			КонецЕсли; // Есть таблица сторно
			
			// BIT AMerkulov 14-03-2015 ++	
			// Если новые движения совпадают с движениями прошлого периода,
			// проводки открытой датой формировать не следует
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
			//Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты") И ИмяОбъекта = "бит_Дополнительный_2" Тогда
			Если (ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты")
					ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты12"))
				И ИмяОбъекта = "бит_Дополнительный_2" Тогда
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
				ТаблицаДляПроверки = НаборЗаписей.Выгрузить();
				Если  НЕ ДвиженияПоменялись(ТаблицаДляПроверки) Тогда
					
					МассивКУдалению = Новый Массив;
					
					Для Каждого Стр Из НаборЗаписей Цикл
						Если Стр.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка() Или Стр.ВидПроводки =  Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно Тогда
							МассивКУдалению.Добавить(Стр);
						ИначеЕсли  Стр.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод Тогда
							Стр.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка();
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого СтрокаКУдалению Из МассивКУдалению Цикл
						НаборЗаписей.Удалить(СтрокаКУдалению);
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			// BIT AMerkulov 14-03-2015 --			
			
			Если Источник.ДополнительныеСвойства.Свойство("ТаблицаСторно_бит_СоответствиеОборотовТрансляции") 
				И НЕ НаборЗаписейСоотвОб = Неопределено Тогда
				
				Если флКопироватьСторно Тогда
					Для каждого СтрокаТаблицы ИЗ Источник.ДополнительныеСвойства["ТаблицаСторно_бит_СоответствиеОборотовТрансляции"] Цикл
						Запись = НаборЗаписейСоотвОб.Добавить();
						ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			// Определим были ли корректировки
			// в зависимости от этого установим тип проводки.
			ЭтоНовый = Ложь;
			Источник.ДополнительныеСвойства.Свойство("ЭтоНовый",ЭтоНовый);
			ЗаполнитьТипПроводки(НаборЗаписей, МетаданныеРегистра, ЭтоНовый);
			НаборЗаписей.Записывать = Истина;
			
			Если НЕ НаборЗаписейСоотвОб = Неопределено Тогда
				НаборЗаписейСоотвОб.Записывать = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЗаписыватьДвижения Тогда
			НаборЗаписей.Записать();
			Если НЕ НаборЗаписейСоотвОб = Неопределено Тогда
				НаборЗаписейСоотвОб.Записать();
			КонецЕсли; 
		КонецЕсли; 
		
		// Перетранслируем движения, источником которых является текущий регистр.
		// *Обновление*, Братухин М.В., 2017.03.30 (
		//РегистрОбБюдж = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам);
		//МассивИсточники = Новый Массив;
		//МассивИсточники.Добавить(ОбъектСистемы);
		//МассивИсточники.Добавить(РегистрОбБюдж);
		//
		//РезДанные = бит_МеханизмТрансляции.ВыполнитьТрансляцию(Источник, МассивИсточники, , ЗаписыватьДвижения, Перечисления.бит_РежимыТрансляции.Ручной);
		// *Обновление*, Братухин М.В., 2017.03.30 )
		
		Если Источник.ДополнительныеСвойства.Свойство(ИмяТаблицыСторно) Тогда
			Источник.ДополнительныеСвойства.Удалить(ИмяТаблицыСторно);
		КонецЕсли; 
		
		Если Источник.ДополнительныеСвойства.Свойство("ТаблицаСторно_бит_СоответствиеОборотовТрансляции") Тогда
			Источник.ДополнительныеСвойства.Удалить("ТаблицаСторно_бит_СоответствиеОборотовТрансляции");
		КонецЕсли; 	
		
		Если Источник.ДополнительныеСвойства.Свойство(ИмяТаблицыДвижений) Тогда
			Источник.ДополнительныеСвойства.Удалить(ИмяТаблицыДвижений);
		КонецЕсли; 
		
		Если Источник.ДополнительныеСвойства.Свойство("ТаблицаДвижений_бит_СоответствиеОборотовТрансляции") Тогда
			Источник.ДополнительныеСвойства.Удалить("ТаблицаДвижений_бит_СоответствиеОборотовТрансляции");
		КонецЕсли;
		
	КонецЦикла; // По регистрам
	
	Если Источник.ДополнительныеСвойства.Свойство("бит_ДвиженияЗаконсервированы")  Тогда
		Источник.ДополнительныеСвойства.Удалить("бит_ДвиженияЗаконсервированы");
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("бит_ПроведениеНепроведенного") Тогда
		Источник.ДополнительныеСвойства.Удалить("бит_ПроведениеНепроведенного");
	КонецЕсли; 

КонецПроцедуры // ОбработатьДвиженияЗакрытогоПериода()

// Процедура выполняет кэширование существующих движений в ДополнительныеСвойства
// Для передачи в обработчики ОбработкаПроведения и ОбработкаУдаленияПроведения.
// 
// Параметры:
// Источник    - ДокументОбъект
// Отказ       - Булево
// РежимЗаписи     - РежимЗаписиДокумента
// РежимПроведения - РежимПроведенияДокумента.
// 
Процедура КонсервироватьДвижения(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	// 1С-ИжТиСи Полина 3.11.2015 (
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	// 1С-ИжТиСи Полина 3.11.2015 )

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-06-13 (#2843)
	Если Источник.ДополнительныеСвойства.Свойство("ДополнительныеАналитики") Тогда
		ДополнительныеАналитики = Источник.ДополнительныеСвойства.ДополнительныеАналитики;
	Иначе	
		ДополнительныеАналитики = бит_МеханизмТрансляции.ПолучитьАналитикиОбъекта(Источник.Ссылка);
		Источник.ДополнительныеСвойства.Вставить("ДополнительныеАналитики",	ДополнительныеАналитики);	
	КонецЕсли;
	
	ОтразитьВЗакрытомПериоде = ДополнительныеАналитики.Получить("ОтразитьВЗакрытомПериоде");
	Если НЕ ЗначениеЗаполнено(ОтразитьВЗакрытомПериоде) Тогда 
				
		ОтразитьВЗакрытомПериоде = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Источник.Ссылка,
									  	   ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ОтразитьВЗакрытомПериоде, Ложь);
		
		Источник.ДополнительныеСвойства.ДополнительныеАналитики.Вставить("ОтразитьВЗакрытомПериоде",	ОтразитьВЗакрытомПериоде);		
	КонецЕсли;
	
	Если ОтразитьВЗакрытомПериоде Тогда
				
		Источник.ДополнительныеСвойства.Вставить("НеПроверятьНаЗакрытый",);
		
		Возврат;
		
	КонецЕсли; 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-06-13 (#2843)
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	МетаданныеОбъекта = Источник.Метаданные();	
	
	// Массив документов, которые не проводятся, но их нужно обрабатывать.
	МассивЗаписываемых = Новый Массив;
	МассивЗаписываемых.Добавить("ОперацияБух");
	МассивЗаписываемых.Добавить("бит_ОперацияУправленческий");	
	МассивЗаписываемых.Добавить("РегламентнаяОперация");
	//БИТ Тртилек 16.10.2012
	МассивЗаписываемых.Добавить("бит_ок_ОперацияАксапты");
	//БИТ Тртилек
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
	МассивЗаписываемых.Добавить("бит_ок_ОперацияАксапты12");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись 
		 И МассивЗаписываемых.Найти(МетаданныеОбъекта.Имя) = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	// Защита от повторной консервации движений
	Если Источник.ДополнительныеСвойства.Свойство("бит_ДвиженияЗаконсервированы") 
		 И Источник.ДополнительныеСвойства.бит_ДвиженияЗаконсервированы = Истина Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Источник.ДополнительныеСвойства.Вставить("бит_ДвиженияЗаконсервированы", Истина);
	
	//БИТ Тртилек К.И. 26.07.2012
	//Отсекаем не нужные нам документы
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ПереоценкаВалютныхДенежныхСтатей") Тогда
		Если Источник.ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеОбъекта) Тогда
		
		Организация = Источник.Организация;
		
	Иначе
		
		Организация = Неопределено;
		
	КонецЕсли; 
	
	РегистрыКонтроля = ПолучитьДатыОткрытогоПериода(Организация);
	
	Для каждого КиЗ Из РегистрыКонтроля Цикл
		
		ОбъектСистемы        = КиЗ.Ключ;
		ИмяОбъекта           = ОбъектСистемы.ИмяОбъекта;
		ДатаОткрытогоПериода = КиЗ.Значение;
		
		Если НЕ ЗначениеЗаполнено(ДатаОткрытогоПериода) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		// Если регистр не участвует в движениях - дальнейшая обработка не нужна.
		Если НЕ бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения,ИмяОбъекта) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		МетаданныеРегистра  = Метаданные.РегистрыБухгалтерии[ИмяОбъекта];
		
		КоличествоСубконто  = МетаданныеРегистра.ПланСчетов.МаксКоличествоСубконто;
		
		// Сохраним существующие движения
		НаборСуществующий = РегистрыБухгалтерии[ИмяОбъекта].СоздатьНаборЗаписей();
		НаборСуществующий.Отбор.Регистратор.Установить(Источник.Ссылка);
		НаборСуществующий.Прочитать();
		
		ТаблицаДвижений = НаборСуществующий.Выгрузить();
		ТаблицаДвижений.Колонки.Удалить("Регистратор");
		ТаблицаДвижений.Колонки.Удалить("МоментВремени");
		// ТаблицаДвижений.Колонки.Удалить("НомерСтроки");
		
		флПроведениеНепроведенного = Ложь;
		Если МетаданныеОбъекта.Имя = "РегламентнаяОперация" Тогда
			флПроведениеНепроведенного = ?(НЕ Источник.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено 
			                               И НЕ Источник.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками, Истина, Ложь);
		ИначеЕсли МетаданныеОбъекта.Имя = "ОперацияБух" Тогда								   
			
			// Нужно определить переключение активности
			НаборХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			НаборХозрасчетный.Отбор.Регистратор.Установить(Источник.Ссылка);
			НаборХозрасчетный.Прочитать();
			
			Если НаборХозрасчетный.Количество() > 0 И Источник.Движения.Хозрасчетный.Количество() > 0 Тогда
			
				Если НаборХозрасчетный[0].Активность = Ложь И Источник.Движения.Хозрасчетный[0].Активность = Истина Тогда
					
					флПроведениеНепроведенного = Истина;
					
				КонецЕсли; 
			
			КонецЕсли; 
			
		ИначеЕсли МетаданныеОбъекта.Имя = "бит_ОперацияУправленческий" Тогда
			
			Если Источник.Ссылка.ПометкаУдаления = Истина И Источник.ПометкаУдаления = Ложь Тогда
			
			   флПроведениеНепроведенного = Истина;
			   
			   // Добавление кода. Начало: 09.12.2016 BF-382 {{
			   // Снятие пометки для операции эквивалентно перепроведению, добавим новые проводки, 
			   // которые возникли бы у обычного документа после перепроведения.
			   КоличествоЗаписей = ТаблицаДвижений.Количество();										   
			   Для Сч = 1 По КоличествоЗаписей Цикл
			   
			   	 Инд = Сч - 1;
			   	 ТекЗапись = ТаблицаДвижений[Инд];
			   	 Если ТекЗапись.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод Тогда
			   	 
			   	 	  НоваяЗапись = ТаблицаДвижений.Добавить();
			   		  ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекЗапись,,"ВидПроводки");
			   		  НоваяЗапись.Период = Источник.Дата;
			   	 КонецЕсли; 
			   
			   КонецЦикла; 										   
			   // Добавление кода конец }}  
			КонецЕсли; 			
			
		Иначе	
			флПроведениеНепроведенного = ?(НЕ Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение, Истина, Ложь); 
		КонецЕсли; 
		Источник.ДополнительныеСвойства.Вставить("бит_ПроведениеНепроведенного", флПроведениеНепроведенного);
		
		
		// Разделим таблицу движений на таблицу корректирующих проводок и таблицу движений.
		ТаблицаСторно = ТаблицаДвижений.СкопироватьКолонки();
		
		КоличествоСтрок = ТаблицаДвижений.Количество();
		
		Для Сч = 0 По КоличествоСтрок-1 Цикл
			
			Счй = КоличествоСтрок-1-Сч;
			СтрокаТаблицы = ТаблицаДвижений[Счй];
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПроводки)   Тогда
				НоваяСтрока = ТаблицаСторно.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
				ТаблицаДвижений.Удалить(Счй);
			Иначе
				ПривестиПустыеСубконто(СтрокаТаблицы,КоличествоСубконто);					 
			КонецЕсли; 
			
		КонецЦикла; // Количество строк
		
		Источник.ДополнительныеСвойства.Вставить("ТаблицаДвижений_"+ИмяОбъекта,ТаблицаДвижений);
		Источник.ДополнительныеСвойства.Вставить("ТаблицаСторно_"+ИмяОбъекта  ,ТаблицаСторно);
		
		// Консервирум движения регистра соответствия оборотов.
		Если бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения,"бит_СоответствиеОборотовТрансляции") Тогда
			
			// Сохраним существующие движения
			// ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-05-02 (#2824)
			//НаборСуществующий = РегистрыНакопления.бит_СоответствиеОборотовТрансляции.СоздатьНаборЗаписей();
			//НаборСуществующий.Отбор.Регистратор.Установить(Источник.Ссылка);
			//НаборСуществующий.Прочитать();
			//
			//ТаблицаДвижений = НаборСуществующий.Выгрузить();
			НаборСоответствиеОборотовТрансляции = РегистрыНакопления.бит_СоответствиеОборотовТрансляции.СоздатьНаборЗаписей();
			НаборСоответствиеОборотовТрансляции.Отбор.Регистратор.Установить(Источник.Ссылка);
			НаборСоответствиеОборотовТрансляции.Прочитать();
			
			ТаблицаДвижений = НаборСоответствиеОборотовТрансляции.Выгрузить();
			// ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-05-02 (#2824)
			
		    Источник.ДополнительныеСвойства.Вставить("ТаблицаДвижений_бит_СоответствиеОборотовТрансляции",ТаблицаДвижений);
			
			ТаблицаСторно = ТаблицаДвижений.СкопироватьКолонки();
			
			КоличествоСтрок = ТаблицаДвижений.Количество();
			
			Для Сч = 0 По КоличествоСтрок-1 Цикл
				
				Счй = КоличествоСтрок-1-Сч;
				СтрокаТаблицы = ТаблицаДвижений[Счй];
				Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПроводки)   Тогда
					НоваяСтрока = ТаблицаСторно.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
				КонецЕсли; 
				
			КонецЦикла; // Количество строк
			
		    Источник.ДополнительныеСвойства.Вставить("ТаблицаСторно_бит_СоответствиеОборотовТрансляции",ТаблицаСторно);
			
		КонецЕсли; 
		
	КонецЦикла; // По регистрам

	//БИТ Тртилек 21.01.2013 требуется удалить движения с видом проводки "Сторно" и "Прошлый период", т.к.
	//в противном случае они будут задваиваться в конце алгоритма, т.к. они консервируются
	Если НЕ НаборСуществующий = Неопределено Тогда
		КоличествоПред = НаборСуществующий.Количество();
		Ном = 0;
		Пока Ном <= НаборСуществующий.Количество()-1 Цикл
			Если ЗначениеЗаполнено(НаборСуществующий[Ном].ВидПроводки) Тогда
				НаборСуществующий.Удалить(Ном);
			Иначе
				Ном = Ном+1;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоПред <> НаборСуществующий.Количество() Тогда
			НаборСуществующий.Записать()
		КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек
	
	//БИТ Тртилек 19.06.2012
	Если ТаблицаСторно <> Неопределено Тогда
		Если ТаблицаСторно.Количество() > 0 И Источник.ДополнительныеСвойства.Свойство("бит_ДокументИзТрансляции") Тогда
			Источник.ДополнительныеСвойства.Удалить("бит_ДокументИзТрансляции");
		КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры // КонсервироватьДвижения()

// Выполняется формирование корректирующих движений при обработке проведения. 
// 
// Параметры:
// Источник           - ДокументОбъект
// Отказ              - Булево
// РежимПроведения    - РежимПроведенияДокумента
// ЗаписыватьДвижения - Булево.
// 
Процедура КонтрольПриОбработкеПроведения(Источник, Отказ, РежимПроведения,ЗаписыватьДвижения) Экспорт

	Если Отказ Тогда
		             
		Возврат;
		
	КонецЕсли; 
	
	// BIT AMerkulov 10-04-2015 ++
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
	//Если  ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты") 
	Если (ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты")
			ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты12"))
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
		И Источник.глРежимЗаписи = РежимЗаписиДокумента.Проведение
		И НЕ (Источник.ДополнительныеСвойства.ТаблицаДвижений_бит_Дополнительный_2.Количество() = 0 И Источник.ДополнительныеСвойства.ТаблицаСторно_бит_Дополнительный_2.Количество() > 0 )
	Тогда
		Возврат;
	КонецЕсли;
	// BIT AMerkulov 10-04-2015 --
	
	//БИТ Тртилек К.И. 26.07.2012
	//Отсекаем не нужные нам документы
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ПереоценкаВалютныхДенежныхСтатей") Тогда
		Если Источник.ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек	
	
	МетаданныеОбъекта = Источник.Метаданные();
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеОбъекта) Тогда
		
		Организация = Источник.Организация;
		
	Иначе
		
		Организация = Неопределено;
		
	КонецЕсли; 
	
	// ВАЖНО!!! Закомментировал по BF-496
	// Думаю, что это было сделано для оптимизации.

	// Добавление кода. Начало: 30.11.2016 BF-370 {{
	//Если НЕ ЭтоДокументЗакрытогоПериода(Источник, Организация) Тогда
	//	 Возврат;
	//КонецЕсли; 
	// Добавление кода конец }}.  
	
	РегистрыКонтроля = ПолучитьДатыОткрытогоПериода(Организация);
	
	// Формируем сторно и проводки закрытого периода.
	ОбработатьДвиженияЗакрытогоПериода(Источник,РегистрыКонтроля,ЗаписыватьДвижения);
	

КонецПроцедуры // КонтрольПриОбработкеПроведения()

// Процедура выполняет формирование корректирующих движений при отмене проведения. 
// 
// Параметры:
// Источник - ДокументОбъект
// Отказ - Булево.
// 
Процедура КонтрольПриУдаленииПроведения(Источник, Отказ) Экспорт

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	МетаданныеОбъекта = Источник.Метаданные();
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеОбъекта) Тогда
		
		Организация = Источник.Организация;
		
	Иначе
		
		Организация = Неопределено;
		
	КонецЕсли; 
	
	
	РегистрыКонтроля = ПолучитьДатыОткрытогоПериода(Организация);
	
	Для каждого КиЗ Из РегистрыКонтроля Цикл
		
		ОбъектСистемы        = КиЗ.Ключ;
		ИмяОбъекта           = ОбъектСистемы.ИмяОбъекта;
		ДатаОткрытогоПериода = КиЗ.Значение;
		
		Если НЕ ЗначениеЗаполнено(ДатаОткрытогоПериода) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		// Если регистр не участвует в движениях - дальнейшая обработка не нужна.
		Если НЕ бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения,ИмяОбъекта) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		МетаданныеРегистра  = Метаданные.РегистрыБухгалтерии[ИмяОбъекта];
		КоличествоСубконто  = МетаданныеРегистра.ПланСчетов.МаксКоличествоСубконто;
		
		НаборЗаписей        = Источник.Движения[ИмяОбъекта];
		
		ИмяТаблицыДвижений  = "ТаблицаДвижений_"+ИмяОбъекта;
		ИмяТаблицыСторно    = "ТаблицаСторно_"+ИмяОбъекта;
		
		Если бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения, "бит_СоответствиеОборотовТрансляции") Тогда
			
			НаборЗаписейСоотвОб = Источник.Движения.бит_СоответствиеОборотовТрансляции;
			
		Иначе	
			
			НаборЗаписейСоотвОб = Неопределено;		
			
		КонецЕсли; 
		
		
		Если Источник.ДополнительныеСвойства.Свойство(ИмяТаблицыДвижений) Тогда
			
			
			Для каждого СтрокаТаблицы Из Источник.ДополнительныеСвойства[ИмяТаблицыДвижений] Цикл
				
				Если СтрокаТаблицы.Период < ДатаОткрытогоПериода Тогда
					
					// Консервируем запись в прошлом периоде
					СформироватьЗапись(НаборЗаписей
										,СтрокаТаблицы
										,МетаданныеРегистра
										,ТекущаяДата()
										,СтрокаТаблицы.Период
										,Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод); 
					
					// Сторнируем запись в открытом периоде
					СформироватьЗапись(НаборЗаписей
										,СтрокаТаблицы
										,МетаданныеРегистра
										,ТекущаяДата()
										,ДатаОткрытогоПериода
										,Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно
										,Истина); 
					
				КонецЕсли; // Запись в закрытом периоде
				
			КонецЦикла;  // По таблице обычных движений
			
		КонецЕсли; // Есть таблица движений
		
		Если Источник.ДополнительныеСвойства.Свойство(ИмяТаблицыСторно) Тогда
			
			Для каждого СтрокаТаблицы Из Источник.ДополнительныеСвойства[ИмяТаблицыСторно] Цикл
				
				// Записи прошлых периодов сохраним
				СформироватьЗапись(НаборЗаписей
									,СтрокаТаблицы
									,МетаданныеРегистра); 
				
				
			КонецЦикла; // По таблице сторно
			
		КонецЕсли; // Есть таблица сторно
		
		Если Источник.ДополнительныеСвойства.Свойство("ТаблицаСторно_бит_СоответствиеОборотовТрансляции") 
			И НЕ НаборЗаписейСоотвОб = Неопределено Тогда
			
			Для каждого СтрокаТаблицы ИЗ Источник.ДополнительныеСвойства["ТаблицаСторно_бит_СоответствиеОборотовТрансляции"] Цикл
				
				Запись = НаборЗаписейСоотвОб.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
				
			КонецЦикла; 
			
		КонецЕсли; 
		
		Если НаборЗаписей.Количество() > 0  Тогда
			
			// Определим были ли корректировки
			// в зависимости от этого установим тип проводки.
			ЭтоНовый = Ложь;
			Источник.ДополнительныеСвойства.Свойство("ЭтоНовый",ЭтоНовый);
			
			ЗаполнитьТипПроводки(НаборЗаписей, МетаданныеРегистра, ЭтоНовый);			
			// Добавление кода. Начало: 25.04.2017 # BF-921 {{
			ПривестиАктивностьКЕдиному(НаборЗаписей);
			// Добавление кода конец }}
			
			// Изменения кода. Начало: 06.03.2017  {{ 
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник.Ссылка, , , Отказ); 
			КонецПопытки; 
						
			Если НЕ НаборЗаписейСоотвОб = Неопределено Тогда
				// Добавление кода. Начало: 25.04.2017 # BF-921 {{
				ПривестиАктивностьКЕдиному(НаборЗаписейСоотвОб);
				// Добавление кода конец }}
				Попытка
					НаборЗаписейСоотвОб.Записать();
				Исключение
					ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник.Ссылка, , , Отказ); 
				КонецПопытки; 
			КонецЕсли; 
			// Изменения кода. Конец 06.03.2017  }} 
			
			// Изменение кода. Начало. 13.09.2016{{
			// Перетранслируем движения, источником которых является текущий регистр. Замечание 5341.
			РегистрОбБюдж = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам);
			МассивИсточники = Новый Массив;
			МассивИсточники.Добавить(ОбъектСистемы);
			МассивИсточники.Добавить(РегистрОбБюдж);
			
			РезДанные = бит_МеханизмТрансляции.ВыполнитьТрансляцию(Источник, МассивИсточники, , Истина, Перечисления.бит_РежимыТрансляции.Ручной);
			// Изменение кода. Конец. 13.09.2016}}

			
		КонецЕсли; 
		
		Если Источник.ДополнительныеСвойства.Свойство(ИмяТаблицыСторно) Тогда
			
			Источник.ДополнительныеСвойства.Удалить(ИмяТаблицыСторно);
			
		КонецЕсли; 
		
		Если Источник.ДополнительныеСвойства.Свойство("ТаблицаСторно_бит_СоответствиеОборотовТрансляции") Тогда
			
			Источник.ДополнительныеСвойства.Удалить("ТаблицаСторно_бит_СоответствиеОборотовТрансляции");
			
		КонецЕсли; 	
		
		Если Источник.ДополнительныеСвойства.Свойство(ИмяТаблицыДвижений) Тогда
			
			Источник.ДополнительныеСвойства.Удалить(ИмяТаблицыДвижений);
			
		КонецЕсли; 
		
		Если Источник.ДополнительныеСвойства.Свойство("ТаблицаДвижений_бит_СоответствиеОборотовТрансляции") Тогда
			
			Источник.ДополнительныеСвойства.Удалить("ТаблицаДвижений_бит_СоответствиеОборотовТрансляции");
			
		КонецЕсли;
		
		
	КонецЦикла; // По регистрам

Если Источник.ДополнительныеСвойства.Свойство("бит_ДвиженияЗаконсервированы")  Тогда
	
	Источник.ДополнительныеСвойства.Удалить("бит_ДвиженияЗаконсервированы");
	
КонецЕсли; 

Если Источник.ДополнительныеСвойства.Свойство("бит_ПроведениеНепроведенного") Тогда
	
	Источник.ДополнительныеСвойства.Удалить("бит_ПроведениеНепроведенного");
	
КонецЕсли; 

	
КонецПроцедуры // КонтрольПриУдаленииПроведения()

// Определяет, попадает документ в закрытый период или нет. 
// Анализ производится по дате документа.
// 
// Параметры:
// Объект - ДокументСсылка, ДокументОбъект
// Организация - СправочникСсылка.Организации - организация.
// 
// Возвращаемое значение:
//  флЗакрытыйПериод - Булево.
// 
Функция ЭтоДокументЗакрытогоПериода(Объект, Организация) Экспорт
	
	флЗакрытыйПериод = Ложь;
	
	МетаданныеОбъекта = Объект.Метаданные();
	РегистрыКонтроля = бит_КонтрольЗакрытогоПериода.ПолучитьДатыОткрытогоПериода(Организация);
	
	Если РегистрыКонтроля.Количество() > 0 Тогда
		
		флЗакрытыйПериод = Ложь;
		Для каждого КиЗ Из РегистрыКонтроля Цикл
			
			ОбъектСистемы        = КиЗ.Ключ;
			ИмяОбъекта           = ОбъектСистемы.ИмяОбъекта;
			ДатаОткрытогоПериода = КиЗ.Значение;
			
			Если НЕ ЗначениеЗаполнено(ДатаОткрытогоПериода) Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			// Если регистр не участвует в движениях - дальнейшая обработка не нужна.
			МетаРегистр = Метаданные.РегистрыБухгалтерии[ИмяОбъекта];
			Если НЕ МетаданныеОбъекта.Движения.Содержит(МетаРегистр) Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			Если Объект.Дата < ДатаОткрытогоПериода Тогда
				
				флЗакрытыйПериод = Истина;
				Прервать;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат флЗакрытыйПериод;
	
КонецФункции // ЭтоДокументЗакрытогоПериода()

// BF-321
// 
Процедура ПодготовитьНаборыЗаписейКОтменеПроведенияПереопределяемый(Источник, МассивИменРегистров, Отказ) Экспорт 

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	МетаданныеОбъекта = Источник.Метаданные();
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеОбъекта) Тогда
		
		Организация = Источник.Организация;
		
	Иначе
		
		Организация = Неопределено;
		
	КонецЕсли; 
	
	МассивКУдалению  = Новый Массив(); 
	РегистрыКонтроля = ПолучитьДатыОткрытогоПериода(Организация);
	Успех 			 = Ложь;
	Для каждого КиЗ Из РегистрыКонтроля Цикл
		
		ОбъектСистемы        = КиЗ.Ключ;
		ИмяОбъекта           = ОбъектСистемы.ИмяОбъекта;
		ДатаОткрытогоПериода = КиЗ.Значение;
		
		Если НЕ ЗначениеЗаполнено(ДатаОткрытогоПериода) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		// Если регистр не участвует в движениях - дальнейшая обработка не нужна.
		Если НЕ бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения,ИмяОбъекта) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		// Если дата открытого периода больше периода записей регистра, 
		// то нужно предотвратить чтение записей в вызывающей процедуре.
		// Период определяю первой строке набора.
		мдНабора         = Источник.Движения[ИмяОбъекта].Метаданные();
		РегистрыМенеджер = "";
		Если НЕ Метаданные.РегистрыБухгалтерии.Содержит(мдНабора) = Неопределено Тогда
			РегистрыМенеджер = РегистрыБухгалтерии;
		ИначеЕсли НЕ Метаданные.РегистрыНакопления.Содержит(мдНабора) = Неопределено Тогда 
		    РегистрыМенеджер = РегистрыНакопления;
		ИначеЕсли НЕ Метаданные.РегистрыСведений.Содержит(мдНабора) = Неопределено Тогда 
		    РегистрыМенеджер = РегистрыСведений;
		ИначеЕсли НЕ Метаданные.РегистрыРасчета.Содержит(мдНабора) = Неопределено Тогда 
		    РегистрыМенеджер = РегистрыРасчета;
		КонецЕсли; 
		
		СуществующийНабор = РегистрыМенеджер[ИмяОбъекта].СоздатьНаборЗаписей();
		СуществующийНабор.Отбор.Регистратор.Установить(Источник.Ссылка);
		СуществующийНабор.Прочитать();
		
		Если НЕ СуществующийНабор.Количество() = 0 
		   И СуществующийНабор[0].Период < ДатаОткрытогоПериода Тогда
			
			Индекс = МассивИменРегистров.Найти(ИмяОбъекта);
			Если НЕ Индекс = Неопределено Тогда
				МассивИменРегистров.Удалить(Индекс);
				Успех = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;	

	// Добавим технологические
	Индекс = МассивИменРегистров.Найти("бит_СоответствиеОборотовТрансляции");
	Если НЕ Индекс = Неопределено И Успех Тогда
		МассивИменРегистров.Удалить(Индекс);
	КонецЕсли; 
		
КонецПроцедуры

// BF-321
// 
Функция ИзменитьАктивностьПоРегистраторуПереопределяемый(Источник, Отказ) Экспорт 

	МассивКУдалению = Новый Массив(); 
	
	Если НЕ Отказ Тогда
		
		МетаданныеОбъекта = Источник.Метаданные();
		Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеОбъекта) Тогда
			Организация = Источник.Организация;
		Иначе
			Организация = Неопределено;
		КонецЕсли; 
		
		МассивКУдалению  = Новый Массив(); 
		РегистрыКонтроля = ПолучитьДатыОткрытогоПериода(Организация);
		
		Для каждого КиЗ Из РегистрыКонтроля Цикл
			
			ОбъектСистемы        = КиЗ.Ключ;
			ИмяОбъекта           = ОбъектСистемы.ИмяОбъекта;
			ДатаОткрытогоПериода = КиЗ.Значение;
			
			Если НЕ ЗначениеЗаполнено(ДатаОткрытогоПериода) Тогда
				Продолжить;
			КонецЕсли; 
			
			// Если регистр не участвует в движениях - дальнейшая обработка не нужна.
			Если НЕ бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения,ИмяОбъекта) Тогда
				Продолжить;
			КонецЕсли; 
			МассивКУдалению.Добавить(ИмяОбъекта);
			
		КонецЦикла;	
		
		Если НЕ МассивКУдалению.Количество() = 0 Тогда
			МассивКУдалению.Добавить("бит_СоответствиеОборотовТрансляции");
		КонецЕсли; 
	КонецЕсли;
	
	Возврат МассивКУдалению;
	
КонецФункции // ИзменитьАктивностьПоРегистратору()

Функция ПереключениеПроводокДоступно(Документ, Организация, Дата, ИмяРегистраБухгалтерии) Экспорт
	
	Успех 	  = Истина;
	РегистрыКонтроля = ПолучитьДатыОткрытогоПериода(Организация);
	Для каждого КлючЗначение Из РегистрыКонтроля Цикл
	
		ИмяОбъекта           = КлючЗначение.Ключ.ИмяОбъекта;
		ДатаОткрытогоПериода = КлючЗначение.Значение;
		
		Если НЕ ВРЕГ(ИмяОбъекта) = ВРЕГ(ИмяРегистраБухгалтерии) Тогда
			Продолжить;
		КонецЕсли; 
		
		ОтразитьВЗакрытомПериоде = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Документ, 
										"ОтразитьВЗакрытомПериоде", Ложь);
		
		Если НЕ ОтразитьВЗакрытомПериоде Тогда
		     Успех = (ДатаОткрытогоПериода < Дата);
		КонецЕсли;
		
	КонецЦикла; 
	
	Если НЕ Успех Тогда
		ТекстСообщения = НСтр("ru = 'Регистр находится в закрытом периоде. Изменение активности проводок запрещено.'"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
	
	Возврат Успех;
	
КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

// Процедура обработчик подписки "бит_КонтрольЗакрытогоПериодаПередЗаписью" 
// на событие  "ПередЗаписью". Выполняется кэширование существующих движений в ДополнительныеСвойства
// Для передачи в обработчики ОбработкаПроведения и ОбработкаУдаленияПроведения.
// 
// Параметры:
// Источник    - ДокументОбъект.
// Отказ       - Булево.
// РежимЗаписи - РежимЗаписиДокумента.
// РежимПроведения - РежимПроведенияДокумента.
// 
Процедура бит_КонтрольЗакрытогоПериодаПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-06-13 (#2843)
	////БИТ Тртилек 02072013 отключим закрытый период, если у документа есть соответствующая аналитика
	//Отбор = Новый Структура("Объект, Аналитика");
	//Отбор.Объект = ?(Источник.ЭтоНовый() И ТипЗнч(Источник) = Тип("ДокументОбъект.ОперацияБух"), Источник.ПолучитьСсылкуНового(), Источник.Ссылка);
	//Отбор.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НеКонтролироватьНаЗакрытыйПериод;
	//НаборЗаписейАналитики = бит_ОбщегоНазначения.ПрочитатьНаборАналитики(Отбор);
	//
	//Если НЕ НаборЗаписейАналитики.Количество() = 0 Тогда
	//	Если НаборЗаписейАналитики[0].ЗначениеАналитики Тогда
	//		//21082013
	//		Источник.ДополнительныеСвойства.Вставить("НеПроверятьНаЗакрытый",);
	//		///21082013
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	/////БИТ Тртилек
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-06-13 (#2843)	
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 	
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-08-09 (#2836)
	Если ОК_ПодпискиНаСобытия.ЭтоИзменениеРеквизитовОбъектаБезПроведения(Источник) Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-08-09 (#2836)	
		
	КонсервироватьДвижения(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура обработчик подписки "бит_КонтрольЗакрытогоПериодаОбработкаПроведения" 
// на событие  "ОбработкаПроведения". Выполняется формирование корректирующих движений. 
// 
// Параметры:
// Источник - ДокументОбъект.
// Отказ - Булево.
// РежимПроведения - РежимПроведенияДокумента.
// 
Процедура бит_КонтрольЗакрытогоПериодаОбработкаПроведенияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	//БИТ Тртилек 02072013 отключим закрытый период, если у документа есть соответствующая аналитика
	Отбор = Новый Структура("Объект, Аналитика");
	Отбор.Объект = Источник.Ссылка;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-06-13 (#2843)	
	//Отбор.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НеКонтролироватьНаЗакрытыйПериод;
	//Заменено на:
	Отбор.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ОтразитьВЗакрытомПериоде;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-06-13 (#2843)	
	НаборЗаписейАналитики = бит_ОбщегоНазначения.ПрочитатьНаборАналитики(Отбор);
	
	Если НЕ НаборЗаписейАналитики.Количество() = 0 Тогда
		Если НаборЗаписейАналитики[0].ЗначениеАналитики Тогда
			Сообщить("Не контролируем на закрытый период");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 		
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-08-09 (#2836)
	Если ОК_ПодпискиНаСобытия.ЭтоИзменениеРеквизитовОбъектаБезПроведения(Источник) Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-08-09 (#2836)	
		
	КонтрольПриОбработкеПроведения(Источник,Отказ,РежимПроведения,Ложь);
	
КонецПроцедуры

// Процедура обработчик подписки "бит_КонтрольЗакрытогоПериодаОбработкаУдаленияПроведения" 
// на событие  "ОбработкаУдаленияПроведения".Выполняется формирование корректирующих движений. 
// 
// Параметры:
// Источник - ДокументОбъект.
// Отказ - Булево.
// 
Процедура бит_КонтрольЗакрытогоПериодаОбработкаУдаленияПроведенияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	//БИТ Тртилек 02072013 отключим закрытый период, если у документа есть соответствующая аналитика
	Отбор = Новый Структура("Объект, Аналитика");
	Отбор.Объект = Источник.Ссылка;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-06-13 (#2843)	
	//Отбор.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НеКонтролироватьНаЗакрытыйПериод;
	//Заменено на:
	Отбор.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ОтразитьВЗакрытомПериоде;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-06-13 (#2843)	
	НаборЗаписейАналитики = бит_ОбщегоНазначения.ПрочитатьНаборАналитики(Отбор);
	
	Если НЕ НаборЗаписейАналитики.Количество() = 0 Тогда
		Если НаборЗаписейАналитики[0].ЗначениеАналитики Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 	
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-08-09 (#2836)
	Если ОК_ПодпискиНаСобытия.ЭтоИзменениеРеквизитовОбъектаБезПроведения(Источник) Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-08-09 (#2836)	
	
	КонтрольПриУдаленииПроведения(Источник, Отказ);
	
КонецПроцедуры

// Процедура обработчик подписки "бит_КонтрольЗакрытогоПериодаОперацияПриЗаписи" 
// на событие  "ПриЗаписи" документа ОперацияБух. Выполняется формирование корректирующих движений. 
// 
// Параметры:
// Источник - ДокументОбъект.
// Отказ - Булево.
// 
Процедура бит_КонтрольЗакрытогоПериодаОперацияПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-08-09 (#2836)
	Если ОК_ПодпискиНаСобытия.ЭтоИзменениеРеквизитовОбъектаБезПроведения(Источник) Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-08-09 (#2836)
	
	//БИТ Тртилек 02072013 отключим закрытый период, если у документа есть соответствующая аналитика
	Отбор = Новый Структура("Объект, Аналитика");
	//Отбор.Объект = ?(Источник.ЭтоНовый() И ТипЗнч(Источник) = Тип("ДокументОбъект.ОперацияБух"), Источник.ПолучитьСсылкуНового(), Источник.Ссылка);
	Отбор.Объект = Источник.Ссылка;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-06-13 (#2843)	
	//Отбор.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НеКонтролироватьНаЗакрытыйПериод;
	//Заменено на:
	Отбор.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ОтразитьВЗакрытомПериоде;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-06-13 (#2843)	
	НаборЗаписейАналитики = бит_ОбщегоНазначения.ПрочитатьНаборАналитики(Отбор);
	
	Если НЕ НаборЗаписейАналитики.Количество() = 0 Тогда
		Если НаборЗаписейАналитики[0].ЗначениеАналитики Тогда
			Сообщить("Не контролируем на закрытый период");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек
	
	//БИТ Тртилек К.И. 26.07.2012
	//Отсекаем не нужные нам документы
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ОперацияУправленческий") Тогда
		Если Источник.РегистрБухгалтерии = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек
	
	//БИТ Тртилек 10.07.2012
	//Если документ проводится, а не загружается из аксапты тогда прервать
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты") И НЕ Источник.ДополнительныеСвойства.Свойство("бит_ДокументЗагружаетсяИзАксапты") Тогда
	Если (ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты") 
			ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты12"))
		И НЕ Источник.ДополнительныеСвойства.Свойство("бит_ДокументЗагружаетсяИзАксапты") Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
		
		Возврат;
				
	КонецЕсли;
	///БИТ Тртилек	
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 		
		
	МетаданныеОбъекта = Источник.Метаданные();
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеОбъекта) Тогда
		
		Организация = Источник.Организация;
		
	Иначе
		
		Организация = Неопределено;
		
	КонецЕсли; 
	
	РегистрыКонтроля = ПолучитьДатыОткрытогоПериода(Организация);
	
	// Формируем сторно и проводки закрытого периода.
	ОбработатьДвиженияЗакрытогоПериода(Источник,РегистрыКонтроля);
	
	Для каждого КиЗ Из РегистрыКонтроля Цикл
		
		ОбъектСистемы        = КиЗ.Ключ;
		ИмяОбъекта           = ОбъектСистемы.ИмяОбъекта;
		ДатаОткрытогоПериода = КиЗ.Значение;
		
		Если НЕ ЗначениеЗаполнено(ДатаОткрытогоПериода) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		// Если регистр не участвует в движениях - дальнейшая обработка не нужна.
		Если НЕ бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения,ИмяОбъекта) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		МетаданныеРегистра  = Метаданные.РегистрыБухгалтерии[ИмяОбъекта];
		КоличествоСубконто  = МетаданныеРегистра.ПланСчетов.МаксКоличествоСубконто;
		
		НаборЗаписей = Источник.Движения[ИмяОбъекта];
		ПривестиАктивностьКЕдиному(НаборЗаписей);
		
	КонецЦикла;	 // По регистрам контроля
	
	// Соответствие оборотов трансляции.
	Если бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения,"бит_СоответствиеОборотовТрансляции") Тогда
		НаборЗаписей = Источник.Движения.бит_СоответствиеОборотовТрансляции;
		ПривестиАктивностьКЕдиному(НаборЗаписей);
	КонецЕсли; 

КонецПроцедуры

// Процедура обработчик подписки "бит_КонтрольЗакрытогоПериодаПередУдалением" 
// на событие  "ПередУдалением" документов. Выполняется контроль возможности удаления. 
// 
// Параметры:
// Источник - ДокументОбъект.
// Отказ - Булево.
// 
Процедура бит_КонтрольЗакрытогоПериодаПередУдалениемПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 		
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-08-09 (#2836)
	Если ОК_ПодпискиНаСобытия.ЭтоИзменениеРеквизитовОбъектаБезПроведения(Источник) Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-08-09 (#2836)	
		
	МетаданныеОбъекта = Источник.Метаданные();
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеОбъекта) Тогда
		
		Организация = Источник.Организация;
		
	Иначе
		
		Организация = Неопределено;
		
	КонецЕсли; 
	
    флРазрешеноУдалять = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь")
	                                                       , ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноУдалениеДокументовЗакрытогоПериода);	
	
	Если НЕ флРазрешеноУдалять Тогда 
		
		РегистрыКонтроля   = ПолучитьДатыОткрытогоПериода(Организация);
		
		Для каждого КиЗ Из РегистрыКонтроля Цикл
			
			ОбъектСистемы        = КиЗ.Ключ;
			ИмяОбъекта           = ОбъектСистемы.ИмяОбъекта;
			
			// Если регистр не участвует в движениях - дальнейшая обработка не нужна.
			Если НЕ бит_ОбщегоНазначения.РегистрУчаствуетВДвижениях(Источник.Движения,ИмяОбъекта) Тогда
				
				Продолжить;
				
			КонецЕсли; 		
			
			НаборЗаписей        = Источник.Движения[ИмяОбъекта];
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 И НЕ флРазрешеноУдалять Тогда 
				
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Удаление документа %1%. У пользователя отсутствует дополнительное право на удаление документов закрытого периода!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(Источник));
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				Возврат;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик подписки "бит_ОтражениеЗарплатыВБухучетеОбработкаУдаленияПроведения".
//
// Параметры:
//  Источник - ДокументОбъект.ОтражениеЗарплатыВБухучете - источник подписки.
//  Отказ	 - Булево.
//
Процедура ОтражениеЗарплатыВБухучетеОбработкаУдаленияПроведения(Источник, Отказ)  Экспорт

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(Источник);
	Источник.Движения.Записать();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирует запись в регистре бухгалтерии по строке таблицы движений.
// Возможно выполнение сторнирования.
// 
// Параметры:
//  НаборЗаписей   - РегистрБухгалтерииНаборЗаписей - набор в котором будет создана запись
//  СтрокаДвижений - СтрокаТаблицыЗначений          - строка таблицы движений по которой будет создана запись
//  МетаданныеРегистра - ОбъектМетаданных
//  ДатаФормирования - Дата - Реальная дата, когда были сформированы движения
//  Период         - Дата - период в который должны попасть данные
//  ВидПроводки    - ПеречислениеСсылка.бит_КонтрольПериодов_ВидыПроводок
//  Сторно         - Булево.
// 
Процедура СформироватьЗапись(НаборЗаписей, СтрокаДвижений, МетаданныеРегистра, ДатаФормирования = Неопределено,
			Период = Неопределено, ВидПроводки = Неопределено, Сторно= Ложь)

	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись,СтрокаДвижений);
	
	Если ЗначениеЗаполнено(ДатаФормирования) Тогда
		Запись.ДатаФормирования = ДатаФормирования;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВидПроводки) Тогда
		Запись.ВидПроводки = ВидПроводки;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Период) Тогда
		Запись.Период = Период;
	КонецЕсли; 
	
	КоличествоСубконто = МетаданныеРегистра.ПланСчетов.МаксКоличествоСубконто;
	
	// Заполним аналитику
	Для й = 1 По 2 Цикл
		
		ДтКт = ?(й = 1,"Дт","Кт");
		Субконто = Запись["Субконто"+ДтКт];
		
		Для н = 1 По КоличествоСубконто Цикл
			
			ИмяКолонкиСубконто    = "Субконто"+ДтКт+н;
			ИмяКолонкиВидСубконто = "ВидСубконто"+ДтКт+н;
			
			ТекВидСубконто = СтрокаДвижений[ИмяКолонкиВидСубконто];
			Если ЗначениеЗаполнено(ТекВидСубконто) Тогда
				Субконто.Вставить(ТекВидСубконто,СтрокаДвижений[ИмяКолонкиСубконто]);
			КонецЕсли; 
		КонецЦикла; // По количеству субконто
	КонецЦикла; // По Дт/Кт 
	
	// Выполним сторнирование
	Если Сторно Тогда
		Для каждого МетаРесурс Из МетаданныеРегистра.Ресурсы Цикл
			Если МетаРесурс.Балансовый Тогда
				Запись[МетаРесурс.Имя] = - Запись[МетаРесурс.Имя];
			Иначе
				Для й = 1 По 2 Цикл
					ДтКт = ?(й = 1,"Дт","Кт");	 
					ИмяРесурса = МетаРесурс.Имя+ДтКт;
					Запись[ИмяРесурса] = -Запись[ИмяРесурса];
				КонецЦикла; // По Дт/Кт
			КонецЕсли; // Проверка Балансовый/НЕ балансовый
		КонецЦикла; // По ресурсам
	КонецЕсли; // Сторно

КонецПроцедуры // СформироватьЗаписьПоТаблицеДвижений()

// Процедура формирует запись в регистр соответствия оборотов трансляции.
// 
// Параметры:
//  НаборЗаписей - РегистрНакопления.бит_СоответствияОборотовТрансляции.
//  ТаблицаСоответстия - ТаблицаЗначений
//  СтрокаДвижений - СтрокаТаблицыЗначений
//  Период - Дата
//  ВидПроводки - ПеречислениеСсылка.бит_ВидыПроводокТрансляции
//  Сторно - Булево.
// 
Процедура СформироватьЗаписьСоответствияОборотов(НаборЗаписей
	                                              , ТаблицаСоответствия
												  , СтрокаДвижений
												  , Период = Неопределено
												  , ВидПроводки = Неопределено
												  , Сторно = Ложь)

												  
	Если НаборЗаписей = Неопределено ИЛИ ТаблицаСоответствия = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 											  
	
	СтрОтбор = Новый Структура("НомерСтрокиПриемника", СтрокаДвижений.НомерСтроки);
	
	НайденныеСтроки = ТаблицаСоответствия.НайтиСтроки(СтрОтбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекСтрока = НайденныеСтроки[0];
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ТекСтрока,,"НомерСтроки");
		
		Если ЗначениеЗаполнено(ВидПроводки) Тогда
			
			Запись.ВидПроводки = ВидПроводки;
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Период) Тогда
			
			Запись.ПериодПриемника = Период;
			
		КонецЕсли; 
		
		Если Сторно Тогда
			
			Запись.СуммаРегл = - Запись.СуммаРегл;
			Запись.СуммаУпр = - Запись.СуммаУпр;
			Запись.СуммаМУ = - Запись.СуммаМУ;
			
			Запись.ТипПроводки = Справочники.бит_ТипыПроводок.КорректировкиЗакрытогоПериода;
			
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры // СформироватьЗаписьСоответствияОборотов()

// Процедура приводит пустые субконто в строке таблицы движений к пустому ссылочному значению.
// Необходимо для выполнения коректного сравнения таблиц.
// 
// Параметры:
//  СтрокаТаблицы      - СтрокаТаблицыЗначений
//  КоличествоСубконто - Число.
// 
Процедура ПривестиПустыеСубконто(СтрокаТаблицы,КоличествоСубконто)

	Для й = 1 По 2 Цикл
		
		ДтКт = ?(й = 1,"Дт","Кт");
		
		Для н = 1 По КоличествоСубконто Цикл
			
			ИмяКолонкиСубконто    = "Субконто"+ДтКт+н;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиСубконто]) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы["Вид" + ИмяКолонкиСубконто]) Тогда
					СтрокаТаблицы[ИмяКолонкиСубконто] = СтрокаТаблицы["Вид" + ИмяКолонкиСубконто].ТипЗначения.ПривестиЗначение(СтрокаТаблицы[ИмяКолонкиСубконто]);
				Иначе
					СтрокаТаблицы[ИмяКолонкиСубконто] = Неопределено;
				КонецЕсли;
			КонецЕсли; 
			
		КонецЦикла; // По числу субконто
		
	КонецЦикла; // По ДтКт
	
	
КонецПроцедуры // ПривестиПустыеСубконто()

// Процедура определяет и устанавливает тип проводки для набора записей. 
// 
// Параметры:
//  НаборЗаписей   - РегистрБухгалтерииНаборЗаписей - набор в котором будет создана запись
//  МетаданныеРегистра - ОбъектМетаданных
//  ЭтоНовый - Булево, Неопределено - Признак, что документ только что введен.
// 
Процедура ЗаполнитьТипПроводки(НаборЗаписей, МетаданныеРегистра, ЭтоНовый)
	
	Если НЕ МетаданныеРегистра.Реквизиты.Найти("ТипПроводки") = Неопределено Тогда
		
		МассивВидПроводки = НаборЗаписей.ВыгрузитьКолонку("ВидПроводки");
		
		Если НЕ МассивВидПроводки.Найти(Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод) = Неопределено 
			ИЛИ НЕ МассивВидПроводки.Найти(Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно) = Неопределено Тогда
			
			Для каждого Запись Из НаборЗаписей Цикл
				Если НЕ Запись.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод Тогда
					Запись.ТипПроводки = Справочники.бит_ТипыПроводок.КорректировкиЗакрытогоПериода;
				КонецЕсли; 
			КонецЦикла; 
		Иначе	
			
			// Движений с заполненным видом проводки нет.
			Для каждого Запись Из НаборЗаписей Цикл
				// бит_Финанс изменения кода. Начало: 03.12.2018 BF-2706. 
				Если ЗначениеЗаполнено(Запись.ДатаФормирования) И НЕ ЗначениеЗаполнено(Запись.ТипПроводки) Тогда
					Запись.ТипПроводки = Справочники.бит_ТипыПроводок.КорректировкиЗакрытогоПериода;
				Иначе	
					// Обычные проводки - ничего не делаем
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТипПроводки()

Процедура ОбработатьяДвиженияОперацияУправленческий(СтруктураПараметров)
	
	ОбъектСистемы        = СтруктураПараметров.ОбъектСистемы;
	ИмяОбъекта           = СтруктураПараметров.ИмяОбъекта;
	ДатаОткрытогоПериода = СтруктураПараметров.ДатаОткрытогоПериода;
	Источник             = СтруктураПараметров.Источник;
	МетаданныеРегистра   = СтруктураПараметров.МетаданныеРегистра;
	КоличествоСубконто   = СтруктураПараметров.КоличествоСубконто;
	НаборЗаписей         = СтруктураПараметров.НаборЗаписей;
	ЗаписыватьДвижения   = СтруктураПараметров.ЗаписыватьДвижения;
	НаборЗаписейСоотвОб  = СтруктураПараметров.НаборЗаписейСоотвОб;
	ТабСоотвОб           = СтруктураПараметров.ТабСоотвОб;
	ИмяТаблицыДвижений   = СтруктураПараметров.ИмяТаблицыДвижений;
	ИмяТаблицыСторно     = СтруктураПараметров.ИмяТаблицыСторно;
			
	Если Источник.ДополнительныеСвойства.Свойство(ИмяТаблицыДвижений) Тогда
		
		флПроведениеНепроведенного = Источник.ДополнительныеСвойства.Свойство("бит_ПроведениеНепроведенного") 
			И Источник.ДополнительныеСвойства.бит_ПроведениеНепроведенного = Истина ;
			
		Если флПроведениеНепроведенного Тогда
			
			ТекНабор = НаборЗаписей.Выгрузить();
			Для каждого СтрокаТаблицы Из ТекНабор Цикл
				
				Если СтрокаТаблицы.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод Тогда
					// Формируем запись в открытом периоде
					СформироватьЗапись(НаборЗаписей
					,СтрокаТаблицы
					,МетаданныеРегистра
					,СтрокаТаблицы.ДатаФормирования
					,Источник.Дата
					,Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка()); 
					НоваяСтрока = НаборЗаписей[НаборЗаписей.Количество() - 1];
					НоваяСтрока.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка();
				КонецЕсли;	
			КонецЦикла;
		
		КонецЕсли; 
		
			
		// Получим новые движения
		ТаблицаДвижений = Источник.Движения[ИмяОбъекта].Выгрузить();
		
		// Номер строки движений необходимо сохранить, для сопоставления с номерами строк 
		// источника при анализе отчетом бит_СоответствиеЗаписейТрансляции.
		
		// Для сравнения с предыдущими движениями необходима таблица движений в закрытом периоде.
		ТаблицаЗакрытыйПериод = ТаблицаДвижений.СкопироватьКолонки();
		
		// Сравнение необходимо проводить без учета данных колонок.
		ТаблицаЗакрытыйПериод.Колонки.Удалить("Регистратор");
		ТаблицаЗакрытыйПериод.Колонки.Удалить("МоментВремени");
		ТаблицаЗакрытыйПериод.Колонки.Удалить("НомерСтроки");
		
		Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.Период < ДатаОткрытогоПериода 
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидПроводки) Тогда
				НоваяСтрока = ТаблицаЗакрытыйПериод.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
				ПривестиПустыеСубконто(НоваяСтрока,КоличествоСубконто);
			КонецЕсли; 
		КонецЦикла; // По таблице движений 
		
		ТаблицаДвиженийПред = Источник.ДополнительныеСвойства[ИмяТаблицыДвижений];	
				
		Индекс = ТаблицаДвиженийПред.Количество() - 1;
		Пока Индекс >= 0 Цикл
			СтрокаТаблицы = ТаблицаДвиженийПред[Индекс];
			Если СтрокаТаблицы.Период >= ДатаОткрытогоПериода 
				ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.ВидПроводки) Тогда
				ТаблицаДвиженийПред.Удалить(Индекс);
			КонецЕсли; 
			Индекс = Индекс - 1;
		КонецЦикла;	
		
		// Перед сравнение отсортируем таблицы по всем ключевым реквизитам.
		СтрокаСортировки    = СформироватьСтрокуДляСортировки(ИмяОбъекта);
		ТаблицаЗакрытыйПериод.Сортировать(СтрокаСортировки);
		ТаблицаДвиженийПред.Сортировать(СтрокаСортировки);
		
		// При сравнении таблиц ДатаФормирования и Период будут мешать
		// сохраним для возможности дальнейшего использования.
		МассивДатаФормирования = ТаблицаДвиженийПред.ВыгрузитьКолонку("ДатаФормирования");
		ТаблицаДвиженийПред.Колонки.Удалить("ДатаФормирования");
		МассивПериод           = ТаблицаДвиженийПред.ВыгрузитьКолонку("Период");
		ТаблицаДвиженийПред.Колонки.Удалить("Период");	
		Если НЕ ТаблицаДвиженийПред.Колонки.Найти("ТипПроводки") = Неопределено Тогда
			МассивТипПроводки = ТаблицаДвиженийПред.ВыгрузитьКолонку("ТипПроводки");
			ТаблицаДвиженийПред.Колонки.Удалить("ТипПроводки");
		КонецЕсли;	
		МассивНомерСтроки = ТаблицаДвиженийПред.ВыгрузитьКолонку("НомерСтроки");
		ТаблицаДвиженийПред.Колонки.Удалить("НомерСтроки");
		
		ТаблицаЗакрытыйПериод.Колонки.Удалить("ДатаФормирования");
		ТаблицаЗакрытыйПериод.Колонки.Удалить("Период");
		Если НЕ ТаблицаЗакрытыйПериод.Колонки.Найти("ТипПроводки") = Неопределено Тогда
			ТаблицаЗакрытыйПериод.Колонки.Удалить("ТипПроводки");
		КонецЕсли;	
		
		// Сравним таблицы
		флТаблицыИдентичны = СравнитьТаблицы(ТаблицаЗакрытыйПериод,ТаблицаДвиженийПред);
		
		// Восстановим даты формирования
		ТаблицаДвиженийПред.Колонки.Добавить("ДатаФормирования");
		ТаблицаДвиженийПред.ЗагрузитьКолонку(МассивДатаФормирования,"ДатаФормирования");
		ТаблицаДвиженийПред.Колонки.Добавить("Период");
		ТаблицаДвиженийПред.ЗагрузитьКолонку(МассивПериод,"Период");
		Если ТипЗнч(МассивТипПроводки) = Тип("Массив") Тогда
			
			ТаблицаДвиженийПред.Колонки.Добавить("ТипПроводки");
			ТаблицаДвиженийПред.ЗагрузитьКолонку(МассивТипПроводки, "ТипПроводки");
			
		КонецЕсли;	
		
		ТаблицаДвиженийПред.Колонки.Добавить("НомерСтроки");
		ТаблицаДвиженийПред.ЗагрузитьКолонку(МассивНомерСтроки, "НомерСтроки");
					
		// Движения должны консервироваться также в случае, если документ из закрытого периода перенсен в открытый.
		флЕстьДвиженияЗакрытый = ?(ТаблицаЗакрытыйПериод.Количество()>0,Истина,Ложь);
		
		// Есть движения в закрытом периоде
		Если флЕстьДвиженияЗакрытый И Не флТаблицыИдентичны Тогда
				
			НаборЗаписей.Очистить();
			
			// Формируем движения
			Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
				Если СтрокаТаблицы.Период < ДатаОткрытогоПериода
					И Не ЗначениеЗаполнено(СтрокаТаблицы.ВидПроводки) Тогда
					// Формируем запись в открытом периоде
					СформироватьЗапись(НаборЗаписей
					,СтрокаТаблицы
					,МетаданныеРегистра
					,ТекущаяДата()
					,ДатаОткрытогоПериода
					,Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка()); 
				Иначе	
					// Записи открытого периода оставим без изменений.
					СформироватьЗапись(НаборЗаписей
					,СтрокаТаблицы
					,МетаданныеРегистра); 
				КонецЕсли; // Условие по периоду
			КонецЦикла; // По таблице движений
			
			Если НЕ НаборЗаписейСоотвОб = Неопределено Тогда
				Для каждого Запись Из НаборЗаписейСоотвОб Цикл
					Если Запись.ПериодПриемника < ДатаОткрытогоПериода Тогда
						Запись.ПериодПриемника = ДатаОткрытогоПериода;
						Запись.ТипПроводки = Справочники.бит_ТипыПроводок.КорректировкиЗакрытогоПериода;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
			
			// Формируем коректировки
			Для каждого СтрокаТаблицы Из ТаблицаДвиженийПред Цикл
				
				// Если сдвигаем дату назад из открытого периода - сторно не нужно.
				Если СтрокаТаблицы.Период >= ДатаОткрытогоПериода Тогда
					Продолжить;
				КонецЕсли;	
				
				// Консервируем запись в прошлом периоде
				СформироватьЗапись(НаборЗаписей
				,СтрокаТаблицы
				,МетаданныеРегистра
				,ТекущаяДата()
				,СтрокаТаблицы.Период
				,Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод); 
				
				СформироватьЗаписьСоответствияОборотов(НаборЗаписейСоотвОб
				, ТабСоотвОб 
				, СтрокаТаблицы
				, СтрокаТаблицы.Период
				, Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод
				, Ложь);
				
				// Сторнируем запись в открытом периоде
				СформироватьЗапись(НаборЗаписей
				,СтрокаТаблицы
				,МетаданныеРегистра
				,ТекущаяДата()
				,ДатаОткрытогоПериода
				,Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно
				,Истина); 
				
				СформироватьЗаписьСоответствияОборотов(НаборЗаписейСоотвОб
				, ТабСоотвОб 
				, СтрокаТаблицы
				, ДатаОткрытогоПериода
				, Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно
				, Истина);
				
			КонецЦикла; // По предыдушей таблице
			
		Иначе
			// Движений в закрытом периоде нет
			ТаблицаДвиженийПред = Источник.ДополнительныеСвойства[ИмяТаблицыДвижений];			
			
			Если ТаблицаДвижений.Количество() = 0 И ТаблицаДвиженийПред.Количество() > 0 Тогда
				
				// Ситуация аналогичная отмене проведения
				Для каждого СтрокаТаблицы Из ТаблицаДвиженийПред Цикл
					
					Если СтрокаТаблицы.Период < ДатаОткрытогоПериода Тогда
						
						// Консервируем запись в прошлом периоде
						СформироватьЗапись(НаборЗаписей
						,СтрокаТаблицы
						,МетаданныеРегистра
						,ТекущаяДата()
						,СтрокаТаблицы.Период
						,Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод); 
						
						СформироватьЗаписьСоответствияОборотов(НаборЗаписейСоотвОб
						, ТабСоотвОб 
						, СтрокаТаблицы
						, СтрокаТаблицы.Период
						, Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод
						, Ложь);
						
						// Сторнируем запись в открытом периоде
						СформироватьЗапись(НаборЗаписей
						,СтрокаТаблицы
						,МетаданныеРегистра
						,ТекущаяДата()
						,ДатаОткрытогоПериода
						,Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно
						,Истина); 
						
						СформироватьЗаписьСоответствияОборотов(НаборЗаписейСоотвОб
						, ТабСоотвОб 
						, СтрокаТаблицы
						, ДатаОткрытогоПериода
						, Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно
						, Истина);
					КонецЕсли; // Запись в закрытом периоде
				КонецЦикла;  // По таблице обычных движений
			КонецЕсли; // Движения исчезли
					
		КонецЕсли; // Есть движения в закрытом периоде
		
	КонецЕсли; // Есть таблица движений предыдущая
	
	флКопироватьСторно = Истина;	
	Если Источник.ДополнительныеСвойства.Свойство(ИмяТаблицыСторно) Тогда
		
		Если флПроведениеНепроведенного Тогда
			
			// В случае если проводится распроведенный документ спец-проводки сохраняем только если что-то изменилось.
			ТаблицаЗакрытыйПериод.Колонки.Удалить("ВидПроводки");
			ТабСторноПрошлыйПериод = ТаблицаЗакрытыйПериод.СкопироватьКолонки();
			Для каждого СтрокаТаблицы Из Источник.ДополнительныеСвойства[ИмяТаблицыСторно] Цикл
				Если СтрокаТаблицы.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод Тогда
					
					НоваяСтрока = ТабСторноПрошлыйПериод.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					
				КонецЕсли; 
			КонецЦикла;
			
			Если ТабСторноПрошлыйПериод.Количество() > 0 Тогда
				
				флТаблицыИдентичны = СравнитьТаблицы(ТаблицаЗакрытыйПериод,ТабСторноПрошлыйПериод);
				
				Если флТаблицыИдентичны Тогда
					
					флКопироватьСторно = Ложь;
					// Изменений не было - проводки прошлого периода превращаем в текущие.
					НаборЗаписей.Очистить();
					
					ТекПериод = Источник.Дата;
					Для каждого СтрокаТаблицы Из Источник.ДополнительныеСвойства[ИмяТаблицыСторно] Цикл
						Если СтрокаТаблицы.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод Тогда
							
							СтрокаТаблицы.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка();
							СформироватьЗапись(НаборЗаписей
							,СтрокаТаблицы
							,МетаданныеРегистра); 
							
							ТекПериод = СтрокаТаблицы.Период;
							
						КонецЕсли; 
					КонецЦикла; // По таблице сторно
					
					Если НЕ НаборЗаписейСоотвОб = Неопределено Тогда
						Для каждого Запись Из НаборЗаписейСоотвОб Цикл
							Запись.ПериодПриемника = ТекПериод;
						КонецЦикла; 
					КонецЕсли;	 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ТаблицаСторно_бит_СоответствиеОборотовТрансляции") 
		И НЕ НаборЗаписейСоотвОб = Неопределено Тогда
		
		Для каждого СтрокаТаблицы ИЗ Источник.ДополнительныеСвойства["ТаблицаСторно_бит_СоответствиеОборотовТрансляции"] Цикл
			Запись = НаборЗаписейСоотвОб.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		КонецЦикла; 
	КонецЕсли; 	

КонецПроцедуры

// Процедура удаляет неактивные проводки у набора записей закрытого периода.
//
// Параметры:
//  НаборЗаписей - Набор записей регистра.
//
Процедура ПривестиАктивностьКЕдиному(НаборЗаписей)
	
	// Определим наличие в наборе и активных и не активных записей
	// это признак отключения активности в закрытом периоде.
	ТаблицаКонтроль   = НаборЗаписей.Выгрузить(,"Активность");
	КоличествоСтрок   = ТаблицаКонтроль.Количество();
	КонтрольнаяСумма  = ТаблицаКонтроль.Итог("Активность"); 
	
	// В случае переключения активности удалим неактивные проводки.
	Если КонтрольнаяСумма > 0 И КоличествоСтрок <> КонтрольнаяСумма Тогда
		Для Сч = 0 По КоличествоСтрок - 1 Цикл
			
			Счй = КоличествоСтрок - 1 - Сч;
			ТекущаяЗапись = НаборЗаписей[Счй];
			Если НЕ ТекущаяЗапись.Активность Тогда
				НаборЗаписей.Удалить(ТекущаяЗапись);
			КонецЕсли; 
		КонецЦикла; // По строкам набора записей
	КонецЕсли;  // Было переключение активности в закрытом периоде.

КонецПроцедуры  // ПривестиАктивностьКЕдиному()

#КонецОбласти

// BIT AMerkulov 18-05-2015 ++					

// Получает таблицу движений и сравнивает движения открытой датой с движениями 
Функция ДвиженияПоменялись(ТаблицаПроводок)
	
	ТаблицаНовая 	= Новый ТаблицаЗначений;
	ТаблицаНовая.Колонки.Добавить("КоличествоДт");
	ТаблицаНовая.Колонки.Добавить("КоличествоКт");
	ТаблицаНовая.Колонки.Добавить("ВалютаДт");
	ТаблицаНовая.Колонки.Добавить("ВалютаКт");	
	ТаблицаНовая.Колонки.Добавить("Организация"); 
	ТаблицаНовая.Колонки.Добавить("СубконтоДт1"); 
	ТаблицаНовая.Колонки.Добавить("СубконтоДт2"); 
	ТаблицаНовая.Колонки.Добавить("СубконтоДт3"); 
	ТаблицаНовая.Колонки.Добавить("СубконтоДт4"); 
	ТаблицаНовая.Колонки.Добавить("СубконтоКт1"); 
	ТаблицаНовая.Колонки.Добавить("СубконтоКт2"); 
	ТаблицаНовая.Колонки.Добавить("СубконтоКт3"); 
	ТаблицаНовая.Колонки.Добавить("СубконтоКт4"); 
	ТаблицаНовая.Колонки.Добавить("СчетДт"); 
	ТаблицаНовая.Колонки.Добавить("СчетКт"); 
	ТаблицаНовая.Колонки.Добавить("СуммаМУ"); 
	ТаблицаНовая.Колонки.Добавить("СуммаРегл"); 
	ТаблицаНовая.Колонки.Добавить("СуммаУпр"); 
	ТаблицаНовая.Колонки.Добавить("ВалютнаяСуммаДт"); 
	ТаблицаНовая.Колонки.Добавить("ВалютнаяСуммаКт"); 
	
	ТаблицаСтарая 	= ТаблицаНовая.Скопировать();
	
	Для Каждого Стр Из ТаблицаПроводок Цикл
		
		СтрокаДобавленная = Неопределено;
		
		Если Стр.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка() Тогда
			СтрокаДобавленная = ТаблицаНовая.Добавить();
		ИначеЕсли  Стр.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод Тогда
			СтрокаДобавленная = ТаблицаСтарая.Добавить();			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДобавленная) Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаДобавленная, Стр);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьТипНеопределено(ТаблицаСтарая, "СубконтоДт1");
	УстановитьТипНеопределено(ТаблицаСтарая, "СубконтоДт2");
	УстановитьТипНеопределено(ТаблицаСтарая, "СубконтоДт3");
	УстановитьТипНеопределено(ТаблицаСтарая, "СубконтоДт4");
	УстановитьТипНеопределено(ТаблицаСтарая, "СубконтоКт1");
	УстановитьТипНеопределено(ТаблицаСтарая, "СубконтоКт2");
	УстановитьТипНеопределено(ТаблицаСтарая, "СубконтоКт4");
	
		
	УстановитьТипНеопределено(ТаблицаНовая, "СубконтоДт1");
	УстановитьТипНеопределено(ТаблицаНовая, "СубконтоДт2");
	УстановитьТипНеопределено(ТаблицаНовая, "СубконтоДт3");
	УстановитьТипНеопределено(ТаблицаНовая, "СубконтоДт4");
	УстановитьТипНеопределено(ТаблицаНовая, "СубконтоКт1");
	УстановитьТипНеопределено(ТаблицаНовая, "СубконтоКт2");
	УстановитьТипНеопределено(ТаблицаНовая, "СубконтоКт4");

	
	Если ТаблицаСтарая.Количество() = 0 Тогда
		Возврат 1;   // Если нет движений прошлого периода - пропускаем проверку
	КонецЕсли;
	
	РезультатСравнения = РазницаТаблицЗначений(ТаблицаСтарая, ТаблицаНовая);
	
	Возврат РезультатСравнения.Количество();
	
КонецФункции

Функция РазницаТаблицЗначений(Таблица0, Таблица1) Экспорт
    
    ВсеКолонки = "";
    Для Каждого Колонка Из Таблица0.Колонки Цикл 
        ВсеКолонки = ВсеКолонки + ", " + Колонка.Имя
    КонецЦикла;
    ВсеКолонки = Сред(ВсеКолонки, 2);
    
    Таблица = Таблица1.Скопировать();    
    
    Таблица.Колонки.Добавить("Знак", Новый ОписаниеТипов("Число"));
    
    Таблица.ЗаполнитьЗначения(1, "Знак");
    
    Для ё = 1 По Таблица0.Количество() Цикл Таблица.Вставить(0) КонецЦикла;
    
    Для ё = 0 По Таблица0.Колонки.Количество() - 1 Цикл Таблица.ЗагрузитьКолонку(Таблица0.ВыгрузитьКолонку(ё), ё) КонецЦикла;
    
    Таблица.Колонки.Добавить("Счёт");
    Таблица.ЗаполнитьЗначения(1, "Счёт");
    
    Таблица.Свернуть(ВсеКолонки, "Знак, Счёт");
    
    Ответ = Таблица.Скопировать(Новый Структура("Счёт", 1), ВсеКолонки + ", Знак");
        
    Возврат Ответ
    
КонецФункции

Процедура УстановитьТипНеопределено(Таблица, Имя)
	
	Для Каждого Стр Из Таблица Цикл
		Если НЕ ЗначениеЗаполнено(Стр[Имя]) Тогда
			Стр[Имя] = Неопределено;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
// BIT AMerkulov 18-05-2015 --
