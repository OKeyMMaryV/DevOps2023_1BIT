
#Область СлужебныйПрограммныйИнтерфейс

#Область ОткрытиеФорм

// Функция получает основное окно программы.
//  
// Возвращаемое значение:
//   ОкноКлиентскогоПриложения
// 
Функция ПолучитьОсновноеОкноПрограммы() Экспорт

	ОсновноеОкноПрограммы = Неопределено;
		
	ОткрытыеОкна = ПолучитьОкна();
	Если ОткрытыеОкна <> Неопределено И ОткрытыеОкна.Количество() <> 0 Тогда
		Для каждого ТекОкно Из ОткрытыеОкна Цикл
			Если ТекОкно.Основное Тогда
				ОсновноеОкноПрограммы = ТекОкно;
				Прервать;
			КонецЕсли;		
		КонецЦикла; 		
	КонецЕсли;  

	Возврат ОсновноеОкноПрограммы;
	
КонецФункции // ПолучитьОсновноеОкноПрограммы()

// Процедура открывает новую форму вводу бюджета с заданной настройкой. 
//
// Параметры:
//  НастройкаФормы - СправочникСсылка.бит_НастройкиВнешнихПодключений.
//
Процедура ОткрытьНовуюФормуВводаБюджета(НастройкаФормы) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("НастройкаФормы", НастройкаФормы);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры // ОткрытьНовуюФормуВводаБюджета()

// Процедура открывает новую форму документа бит_ПротоколРасхожденийБюджета с заданной настройкой. 
//
// Параметры:
//  НастройкаПротокола - СправочникСсылка.бит_НастройкиПротоколовРасхожденийБюджета.
//
Процедура ОткрытьНовуюФормуДокументаПротоколРасхожденийБюджета(НастройкаПротокола) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Настройка", НастройкаПротокола);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.бит_ПротоколРасхожденийБюджета.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры // ОткрытьНовуюФормуДокументаПротоколРасхожденийБюджета()

// Процедура открывает новую форму документа бит_РаспределениеБюджета с заданной настройкой. 
//
// Параметры:
//  НастройкаРаспределения - СправочникСсылка.бит_НастройкиРаспределенияБюджета.
//
Процедура ОткрытьНовуюФормуДокументаРаспределениеБюджета(НастройкаРаспределения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("НастройкаРаспределения", НастройкаРаспределения);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.бит_РаспределениеБюджета.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры // ОткрытьНовуюФормуДокументаРаспределениеБюджета()

// Процедура открывает новую форму документа бит_НазначениеСоответствияАналитик с заданной настройкой. 
//
// Параметры:
//  НастройкаРаспределения - СправочникСсылка.бит_НастройкиРаспределенияБюджета.
//
Процедура ОткрытьНовуюФормуДокументаНазначениеСоответствияАналитик(ВидСоответствия) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидСоответствия", ВидСоответствия);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.бит_НазначениеСоответствияАналитик.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры // ОткрытьНовуюФормуДокументаНазначениеСоответствияАналитик()

// Процедура открывает новую форму документа бит_РаспределениеБюджета с заданной настройкой. 
//
// Параметры:
//  НастройкаРаспределения - СправочникСсылка.бит_НастройкиРаспределенияБюджета.
//
Процедура ОткрытьНовуюФормуСправочникаЭкземплярОтчета(НастройкаОтчета) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("НастройкаОтчета"	  , НастройкаОтчета);
	ЗначенияЗаполнения.Вставить("ЗаполнитьПриОткрытии", Истина);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.бит_ЭкземплярыОтчетов.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры // ОткрытьНовуюФормуСправочникаЭкземплярОтчета()

#КонецОбласти

#Область ИнтерфейсыКМетодамТиповыхКонфигураций

// Открывает форму выбора договора. 
// 
Процедура ОткрытьФормуВыбораДоговора(ЭлементФормы, Организация, Контрагент, ЗначениеСубконто = Неопределено) Экспорт
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда	
		
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", бит_ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ИмяРеквизитаКонтрагентДоговора = "";
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("БухгалтерскийУчетКлиентСерверПереопределяемый");
			ИмяРеквизитаКонтрагентДоговора = Модуль.ПолучитьИмяРеквизитаКонтрагентДоговора();                
			Отбор.Вставить(ИмяРеквизитаКонтрагентДоговора, Контрагент);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор, ТекущаяСтрока", Отбор, ЗначениеСубконто);
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("БухгалтерскийУчетКлиентПереопределяемый");
		Модуль.ОткрытьФормуВыбораДоговора(ПараметрыФормы, ЭлементФормы);                
		
	КонецЕсли; 
	
КонецПроцедуры // ОткрытьФормуВыбораДоговора()

// Интерфейс к обработчику подключаемой команды печати. 
//
// Команда  - КомандаФормы - подключаемая команда формы, выполняющая обработчик Подключаемый_ВыполнитьКомандуПечати.
//            (альтернативный вызов*) Структура    - строка таблицы КомандыПечати, преобразованная в структуру.
// Источник - ТаблицаФормы, ДанныеФормыСтруктура - источник объектов печати (Форма.Объект, Форма.Элементы.Список).
//            (альтернативный вызов*) Массив - список объектов печати.
//
// *Альтернативный вызов - указанные типы используются в случае, если вызов выполняется не из штатного
//                         обработчика Подключаемый_ВыполнитьКомандуПечати.
//
Процедура ВыполнитьПодключаемуюКомандуПечати(Знач Команда, Знач Форма, Знач Источник) Экспорт
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(Форма, Команда, Источник);
	
КонецПроцедуры // ВыполнитьПодключаемуюКомандуПечати()

#КонецОбласти

#Область ПроцедурыИФункцииОформленияФормы

// Формирует и устанавливает текст заголовка формы документа.
// 
// Параметры:
//  ФормаДокумента 	   - УправляемаяФорма, ФормаОбычная.
//  СтруктураЗаголовка - Структура:
// 							ЭтоНовый 			 - Булево
// 							ПредставлениеОбъекта - Строка
// 							СтрокаВидаОперации 	 - Строка (По умолчанию = "")
// 							ДокументПроведен 	 - Булево (По умолчанию = Ложь)
// 							ПроведениеРазрешено  - Булево (По умолчанию = Истина).
// 
Процедура УстановитьЗаголовокФормыДокумента(ФормаДокумента, СтруктураЗаголовка) Экспорт

	бит_РаботаСДиалогамиКлиентСервер.УстановитьЗаголовокФормыДокумента(ФормаДокумента, СтруктураЗаголовка);

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

#КонецОбласти

#Область РаботаСПериодом

// Процедура инициализирует структуру настройки периода.
// 
// Параметры:
//  НастройкаПериода - Произвольный.
//  Период  	     - Стандартный период или структура (ДатаНачала, ДатаОкончания).
// 
Процедура ИнициализироватьНастройкуПериода(НастройкаПериода, Период) Экспорт

	НастройкаПериода = Новый Структура;
	
	// ВариантНастройки - Определяет закладку, на которой будет открыт диалог редактирования периода.
	НастройкаПериода.Вставить("ВариантНастройки"		, 1); 
	// Варианты настройки периода:
	// 0 - Интервал, 
	// 1 - Период.
	
	// ВариантНачала, ВариантОкончания - Определяет вариант начала/окончания периода.
	НастройкаПериода.Вставить("ВариантНачала"			, 7);
	НастройкаПериода.Вставить("ВариантОкончания"		, 7);
	// Варианты границы интервала:
	// 0 - БезОграничения 
	// 1 - Смещение
	// 2 - Год 
	// 3 - Квартал 
	// 4 - Месяц 
	// 5 - Неделя 
	// 6 - РабочаяДата	
	// 7 - КонкретнаяДата.
		
	// ВариантПериода - Содержит вариант периода настраиваемого интервала.
	НастройкаПериода.Вставить("ВариантПериода"			, ОпределитьНастройкуВариантаПериода(Период));
	// Варианты периода:
	// 0  - Год 
	// 1  - День 
	// 2  - ДеньСНачалаГода 
	// 3  - ДеньСНачалаКвартала 
	// 4  - ДеньСНачалаМесяца 
	// 5  - Квартал 
	// 6  - КварталСНачалаГода 
	// 7  - Месяц 
	// 8  - МесяцСНачалаГода 
	// 9  - МесяцСНачалаКвартала 
	// 10 - ПроизвольныйИнтервал. 
	
	НастройкаПериода.Вставить("ДатаНачала"				, Период.ДатаНачала);
	НастройкаПериода.Вставить("ДатаОкончания"			, Период.ДатаОкончания);
	
	// ЗначениеПериода (Дата)- Дата периода настраиваемого интервала. 
	// От этой даты будет отсчитываться период, если задано значение свойства ВариантПериода.
	// НастройкаПериода.Вставить("ЗначениеПериода"			, Дата('00010101'));
	      
	// РедактироватьКакИнтервал (Булево) - Определяет видимость закладки "Интервал" 
	// в диалоге для визуальной настройки периода.
	НастройкаПериода.Вставить("РедактироватьКакИнтервал", Истина);
	               	
	// РедактироватьКакПериод (Булево) - Определяет видимость закладки "Период" 
	// в диалоге для визуальной настройки периода.    
	НастройкаПериода.Вставить("РедактироватьКакПериод"	, Истина);
	
	// СмещениеНачала (Число) - Количество дней до рабочей даты для начала интервала.
	НастройкаПериода.Вставить("СмещениеНачала"			, 0);
	// СмещениеОкончания (Число)- Количество дней после рабочей даты для конца интервала.
	НастройкаПериода.Вставить("СмещениеОкончания"		, 0);

КонецПроцедуры // ИнициализироватьНастройкуПериода()

// Процедура открывает форму настройки интервала.
// 
// Параметры:
//  Период  				- Стандартный период или структура (ДатаНачала, ДатаОкончания).
//  НастройкаПериода  		- Произвольный.
//  МодифицированностьФормы - Булево (По умолчанию = Ложь).
// 
Процедура ОткрытьДиалогСтандартногоПериодаПоДатам(Контейнер, ЭтаФорма = Неопределено) Экспорт
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала 	= Контейнер.ДатаНачала;
	Диалог.Период.ДатаОкончания = Контейнер.ДатаОкончания;
	Диалог.Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Контейнер", Контейнер);
	ДопПараметры.Вставить("ЭтаФорма" , ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаПоДатамЗавершение", ЭтотОбъект, ДопПараметры);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры // ОткрытьДиалогСтандартногоПериодаПоДатам()

// Процедура обработчик оповещения "ВыборПериодаПоДатамЗавершение".
//
// Параметры:
// Период 		- СтандартныйПериод.
// ДопПараметры - Структура.
//
Процедура ВыборПериодаПоДатамЗавершение(ПериодРезультат, ДопПараметры) Экспорт

	Если ПериодРезультат <> Неопределено Тогда
	
		ДопПараметры.Контейнер.ДатаНачала    = ПериодРезультат.ДатаНачала;
		ДопПараметры.Контейнер.ДатаОкончания = ПериодРезультат.ДатаОкончания;
		
		Если ДопПараметры.ЭтаФорма <> Неопределено Тогда
			ДопПараметры.ЭтаФорма.Модифицированность = Истина;	
			Оповестить("Выбор периода", ДопПараметры.Контейнер, ДопПараметры.ЭтаФорма);
		КонецЕсли; 		
		
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПериодаПоДатамЗавершение

// Процедура открывает форму настройки интервала.
// 
// Параметры:
//  Период  				- Стандартный период или структура (ДатаНачала, ДатаОкончания).
//  НастройкаПериода  		- Произвольный.
//  МодифицированностьФормы - Булево (По умолчанию = Ложь).
// 
Процедура ОткрытьДиалогСтандартногоПериода(Контейнер, ИмяРеквизита = "Период", УстановитьЗнПрКомпоновщика = Ложь) Экспорт
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала 	= Контейнер[ИмяРеквизита].ДатаНачала;
	Диалог.Период.ДатаОкончания = Контейнер[ИмяРеквизита].ДатаОкончания;
	Диалог.Период.Вариант		= Контейнер[ИмяРеквизита].Вариант;
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Контейнер"	, Контейнер);
	ДопПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	ДопПараметры.Вставить("УстановитьЗнПрКомпоновщика", УстановитьЗнПрКомпоновщика);
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, ДопПараметры);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры // ОткрытьДиалогСтандартногоПериода()

// Процедура обработчик оповещения "ВыборПериодаЗавершение".
//
// Параметры:
// Период 		- СтандартныйПериод.
// ДопПараметры - Структура.
//
Процедура ВыборПериодаЗавершение(ПериодРезультат, ДопПараметры) Экспорт
	
	Если ПериодРезультат <> Неопределено Тогда
		
		ИмяРеквизита = ДопПараметры.ИмяРеквизита;
		
		ДопПараметры.Контейнер[ИмяРеквизита].ДатаНачала    = ПериодРезультат.ДатаНачала;
		ДопПараметры.Контейнер[ИмяРеквизита].ДатаОкончания = ПериодРезультат.ДатаОкончания;
		ДопПараметры.Контейнер[ИмяРеквизита].Вариант 	   = ПериодРезультат.Вариант;
		
		Если ДопПараметры.УстановитьЗнПрКомпоновщика Тогда		
			бит_ОтчетыКлиент.УстановитьЗначениеПараметраКомпоновщика(ДопПараметры.Контейнер.КомпоновщикНастроек, 
															ДопПараметры.Контейнер[ИмяРеквизита], ИмяРеквизита);
		КонецЕсли;
														
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПериодаЗавершение

// бит_ASubbotina Процедура открывает форму настройки периода
//
// Параметры:
//  Период  				- Стандартный период или структура (ДатаНачала, ДатаОкончания)
//  НастройкаПериода  		- Произвольный
//  МодифицированностьФормы - Булево (По умолчанию = Ложь)
//
Процедура НастроитьПериод(Период, НастройкаПериода = Неопределено, МодифицированностьФормы = Ложь) Экспорт
	
	НачалоПериода = Период.ДатаНачала;
	КонецПериода  = ?(Период.ДатаОкончания = '0001-01-01', Период.ДатаОкончания, КонецДня(Период.ДатаОкончания));
	
	Если НастройкаПериода = Неопределено Тогда
		ИнициализироватьНастройкуПериода(НастройкаПериода, Период); 			     				
	Иначе     	
		НастройкаПериода.Вставить("ДатаНачала"	 	, НачалоПериода);
		НастройкаПериода.Вставить("ДатаОкончания"	, КонецПериода);	
		НастройкаПериода.Вставить("ВариантНастройки", 1);
		НастройкаПериода.Вставить("ВариантПериода"  , ОпределитьНастройкуВариантаПериода(Период));
	КонецЕсли;
	
	ПараметрыЗакрытия = ОткрытьФормуМодально("ОбщаяФорма.бит_ФормаНастройкиПериодаУправляемая", НастройкаПериода);

	Если НЕ ПараметрыЗакрытия = Неопределено Тогда
	
		 Период.ДатаНачала    = ПараметрыЗакрытия.ДатаНачала;
		 Период.ДатаОкончания = ПараметрыЗакрытия.ДатаОкончания;				 
		 НастройкаПериода 	  = ПараметрыЗакрытия.НастройкаПериода;
		 
		 МодифицированностьФормы = Истина;

	 КонецЕсли;
	 	
КонецПроцедуры // НастроитьПериод()

// бит_ASubbotina Процедура открывает форму настройки интервала
//
// Параметры:
//  Период  				- Стандартный период или структура (ДатаНачала, ДатаОкончания)
//  НастройкаПериода  		- Произвольный
//  МодифицированностьФормы - Булево (По умолчанию = Ложь)
//
Процедура НастроитьПериодПоДатам(ДатаНачала, ДатаОкончания, НастройкаПериода = Неопределено, МодифицированностьФормы = Ложь) Экспорт
	
	СтруктураПериода = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	         	
	НастроитьПериод(СтруктураПериода, НастройкаПериода, МодифицированностьФормы);
	
	ДатаНачала    = СтруктураПериода.ДатаНачала;
	ДатаОкончания = СтруктураПериода.ДатаОкончания;
	
КонецПроцедуры // НастроитьПериодПоДатам()
     
#КонецОбласти

#Область ПроцедурыОбработкиВыбора

// Процедура осуществляет выбор составного типа из списка в управляемой форме. 
//
// Параметры:
//  ТекущаяФорма  - Форма
//  ЭлементВладелец - ЭлементУправления
//  Контейнер     - Объект,СтрокаТабличнойЧасти
//  ИмяРеквизита  - Строка
//  СписокВыбора  - Список с типами, которые выбираем
//  СтандартнаяОбработка - Булево
//
Процедура НачалоВыбораСоставного(ТекущаяФорма
	                               ,ЭлементВладелец
								   ,Контейнер
								   ,ИмяРеквизита
								   ,СписокВыбора
								   ,СтандартнаяОбработка) Экспорт

	
   Если Контейнер = Неопределено Тогда	   
	   Возврат;	   
   КонецЕсли; 
   
   ТекущееЗначение = Контейнер[ИмяРеквизита];
   
   ЭлементВладелец.ВыбиратьТип = Ложь;  
   
   Если ТекущееЗначение = Неопределено Тогда
	   
        СтандартнаяОбработка        = Ложь;
        ЭлементВладелец.ВыбиратьТип = Истина;   

        ДопПараметры = Новый Структура;
        ДопПараметры.Вставить("Контейнер"		    , Контейнер);
        ДопПараметры.Вставить("ИмяРеквизита"	    , ИмяРеквизита);
        ДопПараметры.Вставить("ЭлементВладелец"	    , ЭлементВладелец);
        ДопПараметры.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
        Оп = Новый ОписаниеОповещения("НачалоВыбораСоставного_Завершение", ЭтотОбъект, ДопПараметры);
        ТекущаяФорма.ПоказатьВыборИзСписка(Оп, СписокВыбора);//, ЭлементВладелец, ТекущееЗначение);
	   	   
    КонецЕсли; // Текущее значение неопределено.

КонецПроцедуры // НачалоВыбораСоставного()

// Процедура завершает выбор составного типа из списка в управляемой форме. 
//
Процедура НачалоВыбораСоставного_Завершение(ВыбранныйЭлемент, ДопПараметры) Экспорт

	Контейнер 		     = ДопПараметры.Контейнер;
	ИмяРеквизита 	     = ДопПараметры.ИмяРеквизита;
	ЭлементВладелец      = ДопПараметры.ЭлементВладелец;
	СтандартнаяОбработка = ДопПараметры.СтандартнаяОбработка;
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
        
        // Устанавливаем выбранный тип.
        МассивТипов = Новый Массив;
        МассивТипов.Добавить(ВыбранныйЭлемент.Значение);
        Описание = Новый ОписаниеТипов(МассивТипов);
        Контейнер[ИмяРеквизита] = Описание.ПривестиЗначение();
        ЭлементВладелец.ВыбиратьТип = Ложь;
        
    Иначе
        
        Возврат;
        
    КонецЕсли;
      
    // Возвращаем стандартную обработку в Истину, чтобы автоматически открылась форма выбора.
    СтандартнаяОбработка = Истина;  
	
КонецПроцедуры // ВыбратьТипСоставнойАналитики_Завершение()

// Процедура обрабатывает выбор значения в табличном поле - открывает значение.
//
// Параметры:
//  ИмяТабПоля				 - Строка - Имя табличной части.
//  ОбъектТабПоле			 - ДанныеФормыКоллекция - данные формы таблицы.
//  ПолеФормыТабличнаяЧасть	 - ПолеФормы - поле формы.
//  ВыбраннаяСтрока			 - Число - индекс.
//
Процедура ОбработкаВыбораПоляТабличногоПоля(ИмяТабПоля, ОбъектТабПоле, ПолеФормыТабличнаяЧасть, ВыбраннаяСтрока) Экспорт
	
	Если НЕ ПолеФормыТабличнаяЧасть.ТолькоПросмотр Тогда
		Возврат;	
	КонецЕсли;
	
	ТекЗнч = Неопределено;
	
	ТекущаяСтрока = ОбъектТабПоле.НайтиПоИдентификатору(ВыбраннаяСтрока);	
	Если ТекущаяСтрока <> Неопределено Тогда
	
		ИмяРеквизита = СтрЗаменить(ПолеФормыТабличнаяЧасть.Имя, ИмяТабПоля, "");
		Попытка
		 	ТекЗнч = ТекущаяСтрока[ИмяРеквизита];
		Исключение		
		КонецПопытки;		
		
		Если ЗначениеЗаполнено(ТекЗнч) Тогда		
			ПоказатьЗначение(,ТекЗнч);		
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораПоляТабличногоПоля()

#КонецОбласти

#Область ПроцедурыИФункцииВызываемыеИзУправляемыхФормВОбычномПриложении

// Процедура выполняет действия необходимые при начале выбора Договора контрагента
// в ОБЫЧНОМ ПРИЛОЖЕНИИ из УПРАВЛЯЕМОЙ ФОРМЫ.
// 
// Параметры:
//  Объект							  - ДанныеФормыСтруктура. Данные редактируемого документа.
//  Элемент							  - ПолеФормы. ПолеФормы формы документа, которое надо заполнить.
//  Контрагент						  - СправочникСсылка.Контрагенты.
//  ДоговорКонтрагента				  - СправочникСсылка.ДоговорыКонтрагентов.
//  ВидыДоговораВзаиморасчетов 		  - СписокЗначений, ПеречислениеСсылка.ВидыДоговоровКонтрагентов.
//  СтандартнаяОбработка 			  - Булево. Признак выполнения стандартной (системной) обработки события.
//  СтруктураДополнительныхПараметров - Структура. Содержит дополнительные значения отбора. По умолчанию Неопределено.
//                                      Ключ - имя отбора, значение - структура, определяющая отбор с ключами:
//                                      ЗначениеОтбора 	   (если не задан, то отбор не устанавливается), 
//                                      ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
//                                      ДоступностьОтбора  (если не задан, то Ложь).
// 
Процедура НачалоВыбораДоговораКонтрагентаОбычноеПриложение(Объект
														  ,Элемент
														  ,Контрагент
														  ,ДоговорКонтрагента
														  ,ВидыДоговораВзаиморасчетов
														  ,СтандартнаяОбработка
														  ,СтруктураДополнительныхПараметров = Неопределено) Экспорт 
	
	СтандартнаяОбработка = Ложь;

	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	
	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",, Элемент);

	// Владельца менять по умолчанию не даем.
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	Если ЗначениеЗаполнено(ВидыДоговораВзаиморасчетов) Тогда

		// Оставим в выборе только "правильные" договоры.
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения = ВидСравнения.Равно;
		КонецЕсли;
		
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение      = ВидыДоговораВзаиморасчетов;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование = Истина;
		
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
		
	КонецЕсли;

	// Если в документе выбрана организация, фильтруем договоры по головной организации.
	Если бит_РаботаСМетаданнымиСервер.ЕстьРеквизит("Организация", МетаданныеДокумента)
		И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ГоловнаяОрганизация = бит_ОбщегоНазначения.ГоловнаяОрганизация(Объект.Организация);
		
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = ГоловнаяОрганизация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
		
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		
	КонецЕсли;

	// Добавим фильтры по дополнительным параметрам отбора.
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
		
		Для Каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл

			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;

			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда

				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравненияОтбора;
				Иначе
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.Равно;
				КонецЕсли;

				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЗначениеОтбора;
				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = ДоступностьОтбора;
				Иначе
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли; // Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда.
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;
	ФормаВыбора.ПараметрВыборГруппИЭлементов 				 = ИспользованиеГруппИЭлементов.Элементы;

	ФормаВыбора.Открыть();
	
КонецПроцедуры // НачалоВыбораДоговораКонтрагентаОбычноеПриложение()

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыПоФормированиюПлатежныхДокументов

// Процедура - обработчик события "НачалоВыбора" поля ввода "БанковскийСчет" 
// табличного поля.
// 
// Параметры:
//  ТекущиеДанные 	 	 - ДанныеФормыЭлементКоллекции.
//  СтандартнаяОбработка - Булево.
//  ИмяРеквизита		 - Строка (По умолчанию = "БанковскийСчет").
// 
Процедура ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяРеквизита = "БанковскийСчет") Экспорт
	
	СтандартнаяОбработка = Ложь;
				
	ВыбранныйБанковскийСчет = ТекущиеДанные[ИмяРеквизита];
	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчет(ВыбранныйБанковскийСчет,, Новый Структура("Контейнер, Ключ", ТекущиеДанные, ИмяРеквизита));
	Если Не ВыбранныйБанковскийСчет = Неопределено Тогда
		ТекущиеДанные[ИмяРеквизита] = ВыбранныйБанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры // ВыбратьБанковскийСчетБезВладельца()

// Функция выбирает банковский счет.
// 
// Параметры:
//  ТекущийСчет  - СправочникСсылка.БанковскиеСчета (по умолчанию = Неопределено).
//  ТипВладельца - Строка ("Организация" или "Контрагент", по умолчанию = Неопределено).
//  Получатель   - Структура получателя.
//
Процедура ВыбратьБанковскийСчет(ТекущийСчет = Неопределено, ТипВладельца = Неопределено, Получатель) Экспорт
	
	ПараметрыФормы = Новый Структура("ТекущийСчет, ТипВладельца", ТекущийСчет, ТипВладельца);
	Оповещение     = Новый ОписаниеОповещения("ВыбратьБанковскийСчетЗавершение", ЭтотОбъект, Получатель);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораБанковскогоСчетаУправляемая",ПараметрыФормы, ,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ВыбратьБанковскийСчет()

Процедура ВыбратьБанковскийСчетЗавершение(ЗначениВыбора, ДопПараметры) Экспорт 

	ДопПараметры.Контейнер[ДопПараметры.Ключ] = ЗначениВыбора;	

КонецПроцедуры // ВыбратьБанковскийСчетЗавершение()
 
// Процедура открывает форму для подбора расчетного счета с установленными фильтрами.
// 
// Параметры:
//  СтруктураПараметров  - Структура.
// 
Процедура ОткрытьФормуВыбораРасчетногоСчета(СтруктураПараметров) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", СтруктураПараметров.Владелец);
	
	Если СтруктураПараметров.Свойство("ВалютаДенежныхСредств") Тогда
		Отбор.Вставить("ВалютаДенежныхСредств", СтруктураПараметров.ВалютаДенежныхСредств);
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтруктураПараметров.БанковскийСчетОрганизация);
		
	ВладелецФормы = СтруктураПараметров.ЭлементВладелец;
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, ВладелецФормы);

КонецПроцедуры // ОткрытьФормуВыбораРасчетногоСчета()
          
// Процедура, вызываемая в обработчике события "НачалоВыбора" поля ввода "ИсточникДанныхТабло".
// 
// Параметры:
// 	ДанныеВыбора 			- СписокЗначений.
// 	ЭтоБухгалтерия 			- Булево.
// 	ПеречислениеИсточников  - ПеречислениеМенеджер.бит_РежимПолученияДанныхТаблоСчетов.
//  СтандартнаяОбработка 	- Булево.
// 
Процедура НачалоВыбораИсточникаДанныхТабло(ДанныеВыбора, ЭтоБухгалтерия, ПеречислениеИсточников, СтандартнаяОбработка = Ложь) Экспорт
		
	Если ЭтоБухгалтерия Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПеречислениеИсточников.ДанныеБухгалтерскогоУчета);
		ДанныеВыбора.Добавить(ПеречислениеИсточников.СведенияОДвиженииДенежныхСредств);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораИсточникаДанныхТабло()
        
#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСПараметрамиСоставляющихПлатежаПоФиндоговорам

// Процедура выполняет действия связанные с началом выбора 
// значения параметра составляющей платежа.
// 
// Параметры:
// 	ТекущаяФорма 		 - Форма.
// 	Элемент              - Элемент формы.
// 	Контейнер 		     - Объект, СтрокаТабличнойЧасти.
// 	СтруктураПараметров  - Структура.
// 	СтандартнаяОбработка - Булево.
// 
Процедура НачалоВыбораЗначенияПараметраСоставляющейПлатежа(ТекущаяФорма, Элемент, Контейнер, СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	// (Далее сокращение: тип ПМ* = тип ПеречислениеМенеджер).
	// 
	// обязательные элементы структуры СтруктураПараметров:
	// 	- СтатьяОборотовБДДСПоступление  
	// 		- тип ПланыВидовХарактеристикСсылка.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДДСПоступление
	// 	- СтатьяОборотовБДДСРасходование 
	// 		- тип ПланыВидовХарактеристикСсылка.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДДСРасходование
	// 	- СтатьяОборотовБДРПоступление   
	// 		- тип ПланыВидовХарактеристикСсылка.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДРПоступление
	// 	- СтатьяОборотовБДРРасходование  
	// 		- тип ПланыВидовХарактеристикСсылка.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДРРасходование
	// 	- Перечисления 
	// 		- тип Структура, обязательные значения:
	// 			- бит_РасходДоход								 - тип ПМ*.бит_РасходДоход.
	// 			- бит_ТипыСтатейОборотов 						 - тип ПМ*.бит_ТипыСтатейОборотов.
	// 			- бит_ТипыПлатежейПоФинансовымДоговорам 		 - тип ПМ*.бит_ТипыПлатежейПоФинансовымДоговорам.
	// 			- бит_АлгоритмыРасчетовПоФинДоговорам 			 - тип ПМ*.бит_АлгоритмыРасчетовПоФинДоговорам.
	// 			- бит_КонтекстыВыполненияПользовательскихФункций - тип ПМ*.бит_КонтекстыВыполненияПользовательскихФункций.
	// 
	// не обязательные элементы структуры:
	// 	- ИмяРеквизитаПараметр 	 - тип Строка
	// 	- ИмяРеквизитаЗначение 	 - тип Строка
	// 	- ИмяРеквизитаТипПлатежа - тип Строка.
	
	Если СтруктураПараметров.Свойство("ИмяРеквизитаПараметр") Тогда
		ИмяРеквизитаПараметр = СтруктураПараметров.ИмяРеквизитаПараметр;
	Иначе
		ИмяРеквизитаПараметр = "Параметр";
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ИмяРеквизитаЗначение") Тогда
		ИмяРеквизитаЗначение = СтруктураПараметров.ИмяРеквизитаЗначение;
	Иначе
		ИмяРеквизитаЗначение = "ЗначениеПоУмолчанию";
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ИмяРеквизитаТипПлатежа") Тогда
		ИмяРеквизитаТипПлатежа = СтруктураПараметров.ИмяРеквизитаТипПлатежа;
	Иначе
		ИмяРеквизитаТипПлатежа = "ТипПлатежа";
	КонецЕсли;
	
	Если Контейнер[ИмяРеквизитаПараметр] = СтруктураПараметров.СтатьяОборотовБДДСПоступление
		ИЛИ Контейнер[ИмяРеквизитаПараметр] = СтруктураПараметров.СтатьяОборотовБДДСРасходование
		ИЛИ Контейнер[ИмяРеквизитаПараметр] = СтруктураПараметров.СтатьяОборотовБДРПоступление
		ИЛИ Контейнер[ИмяРеквизитаПараметр] = СтруктураПараметров.СтатьяОборотовБДРРасходование Тогда
		
		Если Контейнер[ИмяРеквизитаПараметр] = СтруктураПараметров.СтатьяОборотовБДДСПоступление Тогда
			РасходДоход = СтруктураПараметров.Перечисления.бит_РасходДоход.Поступление;
			ТипСтатьи   = СтруктураПараметров.Перечисления.бит_ТипыСтатейОборотов.БДДС;
		ИначеЕсли Контейнер[ИмяРеквизитаПараметр] = СтруктураПараметров.СтатьяОборотовБДДСРасходование Тогда
			РасходДоход = СтруктураПараметров.Перечисления.бит_РасходДоход.Расходование;
			ТипСтатьи   = СтруктураПараметров.Перечисления.бит_ТипыСтатейОборотов.БДДС;
		ИначеЕсли Контейнер[ИмяРеквизитаПараметр] = СтруктураПараметров.СтатьяОборотовБДРПоступление Тогда
			РасходДоход = СтруктураПараметров.Перечисления.бит_РасходДоход.Поступление;
			ТипСтатьи   = СтруктураПараметров.Перечисления.бит_ТипыСтатейОборотов.БДР;
		ИначеЕсли Контейнер[ИмяРеквизитаПараметр] = СтруктураПараметров.СтатьяОборотовБДРРасходование Тогда
			РасходДоход = СтруктураПараметров.Перечисления.бит_РасходДоход.Расходование;
			ТипСтатьи   = СтруктураПараметров.Перечисления.бит_ТипыСтатейОборотов.БДР;	
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("РасходДоход", РасходДоход);
		СтруктураОтбора.Вставить("ТипСтатьи"  , ТипСтатьи);
		
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
				
	ИначеЕсли ЗначениеЗаполнено(Контейнер[ИмяРеквизитаПараметр]) Тогда
		МассивТипов = бит_ОбщегоНазначения.ПолучитьМассивТиповЭлементаПВХ(Контейнер[ИмяРеквизитаПараметр]);
		
		Если МассивТипов.Количество() > 1 Тогда
			СписокТипов = Новый СписокЗначений;
			СписокТипов.ЗагрузитьЗначения(МассивТипов);
			бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ТекущаяФорма, Элемент, Контейнер, ИмяРеквизитаЗначение, СписокТипов, СтандартнаяОбработка);
			
			// Ограничим выбор предопределенных видов расчета по типу платежа составляющей.
			Если ТипЗнч(Контейнер[ИмяРеквизитаЗначение]) = Тип("ПеречислениеСсылка.бит_АлгоритмыРасчетовПоФинДоговорам") Тогда
				СтандартнаяОбработка = Ложь;
				
				СписокВыбора = Новый СписокЗначений;                              
				Если Контейнер[ИмяРеквизитаТипПлатежа] = СтруктураПараметров.Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг Тогда
					
					СписокВыбора.Добавить(СтруктураПараметров.Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетСуммыОсновногоДолгаДифференцированный);
					СписокВыбора.Добавить(СтруктураПараметров.Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетСуммыОсновногоДолгаАннуитетный);
					
				ИначеЕсли Контейнер[ИмяРеквизитаТипПлатежа] = СтруктураПараметров.Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.Проценты Тогда
					
					СписокВыбора.Добавить(СтруктураПараметров.Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетСуммыПроцентов);
					
				ИначеЕсли Контейнер[ИмяРеквизитаТипПлатежа] = СтруктураПараметров.Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.Комиссия Тогда
					
					СписокВыбора.Добавить(СтруктураПараметров.Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетКомиссииЗаВыдачу);
					
				ИначеЕсли Контейнер[ИмяРеквизитаТипПлатежа] = СтруктураПараметров.Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.КомиссияЗаНеиспользованныйЛимит Тогда
					
					СписокВыбора.Добавить(СтруктураПараметров.Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетКомиссииЗаНеиспользованныйЛимитВозобновляемая);
					СписокВыбора.Добавить(СтруктураПараметров.Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетКомиссииЗаНеиспользованныйЛимитНеВозобновляемая);
					
				КонецЕсли;
				
				Если СписокВыбора.Количество() = 1 Тогда
					Контейнер[ИмяРеквизитаЗначение] = СписокВыбора[0].Значение;
				Иначе	
					ВыбранноеЗначение = ТекущаяФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
					Если НЕ ВыбранноеЗначение = Неопределено Тогда
						Контейнер[ИмяРеквизитаЗначение] = ВыбранноеЗначение.Значение;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Контейнер[ИмяРеквизитаЗначение]) = Тип("СправочникСсылка.бит_ПользовательскиеФункции") Тогда	
				
				СтандартнаяОбработка = Ложь;
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Контекст", СтруктураПараметров.Перечисления.бит_КонтекстыВыполненияПользовательскихФункций.ФинансовыеДоговора);
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Отбор"		   , СтруктураОтбора);
				ПараметрыФормы.Вставить("ТекущаяСтрока", Контейнер[ИмяРеквизитаЗначение]);
				
				ОткрытьФорму("Справочник.бит_ПользовательскиеФункции.ФормаВыбора", ПараметрыФормы, Элемент);
				
			КонецЕсли;
			
		КонецЕсли; // Если МассивТипов.Количество() > 1 Тогда
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет действия при очистке поля ввода 
// содержащего значение параметра составляющей платежа.
// 
// Параметры:
// 	Контейнер            - Объект, СтрокаТабличнойЧасти.
// 	ИмяРеквизитаПараметр - Строка.
// 	ИмяРеквизитаЗначение - Строка.
// 	СтандартнаяОбработка - Булево.
// 
Процедура ОчисткаЗначенияПараметраСоставляющейПлатежа(Контейнер,ИмяРеквизитаПараметр,ИмяРеквизитаЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Контейнер[ИмяРеквизитаПараметр]) Тогда
		// Приведем к значению по умолчанию для параметра.
		МассивТипов = бит_ОбщегоНазначения.ПолучитьМассивТиповЭлементаПВХ(Контейнер[ИмяРеквизитаПараметр]);
		ОписаниеТипаПараметра = Новый ОписаниеТипов(МассивТипов);
		
		Контейнер[ИмяРеквизитаЗначение] = ОписаниеТипаПараметра.ПривестиЗначение();
	Иначе
		Контейнер[ИмяРеквизитаЗначение] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область ВыборИнтервала

// Процедура обрабатывает событие начала выбора из списка в поле представления периода.
//  
Процедура НачалоВыбораИзСпискаПредставленияПериода(Элемент, ЭтаФорма, СтандартнаяОбработка, ДатаНачала, ЗнчПериодичность, ПредставлениеПериода) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтрФрм_День    = "ДФ=dd.MM.гггг";  		    // Строка для форматирования дня.
	СтрФрм_Месяц   = "ДФ='MMMM гггг'"; 		    // Строка для форматирования месяца.
	СтрФрм_Квартал = "ДФ='q ""квартал"" гггг'"; // Строка для форматирования квартала.
	СтрФрм_Год     = "ДФ=гггг";        		    // Строка для форматирования года.
	
	СписокВыбора = Новый СписокЗначений;
	
	СтрокаПериодичность = СокрЛП(ЗнчПериодичность);
	Если СтрокаПериодичность = "День" Тогда
		
		ДатаНачалаТекущего     = НачалоНедели(ДатаНачала);
		ДатаНачалаПредыдущего  = НачалоНедели(ДатаНачалаТекущего - 1);
		ДатаНачалоСледующего   = НачалоНедели(ДатаНачалаТекущего + 7*24*60*60);
		
		ТекущееПредставление = "Неделя (" + Формат(ДатаНачалаПредыдущего, СтрФрм_День)
										  + " - " 
										  + Формат(КонецНедели(ДатаНачалаПредыдущего), СтрФрм_День) + ")";
		СписокВыбора.Добавить(ДатаНачалаПредыдущего, ТекущееПредставление);
				
		ТекущийИнтервал = ДатаНачалаТекущего;
		ЭлементПоУмолчанию = Неопределено;
		Для i = 1 По 7 Цикл
			ТекущееПредставление = "День (" + Формат(ТекущийИнтервал, СтрФрм_День) + ")";
			ДобавленныйЭлемент = СписокВыбора.Добавить(ТекущийИнтервал, ТекущееПредставление);
			Если ПредставлениеПериода = ТекущееПредставление Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			ТекущийИнтервал = ТекущийИнтервал + 60*60*24;
		КонецЦикла;
		
		ТекущееПредставление = "Неделя (" + Формат(ДатаНачалоСледующего, СтрФрм_День)
										  + " - " 
										  + Формат(КонецНедели(ДатаНачалоСледующего), СтрФрм_День) + ")";
		СписокВыбора.Добавить(ДатаНачалоСледующего, ТекущееПредставление);
				
	ИначеЕсли СтрокаПериодичность = "Неделя" Тогда
		
		ДатаНачалаТекущего     = НачалоМесяца(ДатаНачала);
		ДатаНачалаПредыдущего  = НачалоМесяца(ДатаНачалаТекущего - 1);
		ДатаНачалоСледующего   = НачалоМесяца(ДобавитьМесяц(ДатаНачалаТекущего, 1));
		
		СписокВыбора.Добавить(ДатаНачалаПредыдущего, Формат(ДатаНачалаПредыдущего, СтрФрм_Месяц) + "...");
		
		ТекущийИнтервал = ДатаНачалаТекущего;
		ЭлементПоУмолчанию = Неопределено;
		Пока НачалоМесяца(ТекущийИнтервал) = ДатаНачалаТекущего Цикл
			ТекущееПредставление = "Неделя (" + Формат(НачалоНедели(ТекущийИнтервал), СтрФрм_День)
											  + " - " 
											  + Формат(КонецНедели(ТекущийИнтервал), СтрФрм_День) + ")";
			ДобавленныйЭлемент = СписокВыбора.Добавить(ТекущийИнтервал, ТекущееПредставление);
			Если ПредставлениеПериода = ТекущееПредставление Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли;
			ТекущийИнтервал = ТекущийИнтервал + 7*24*60*60;		
		КонецЦикла;
				
		СписокВыбора.Добавить(ДатаНачалоСледующего, Формат(ДатаНачалоСледующего, СтрФрм_Месяц) + "...");
				
	ИначеЕсли СтрокаПериодичность = "Декада" Тогда
		
		ДатаНачалаТекущего     = НачалоМесяца(ДатаНачала);
		ДатаНачалаПредыдущего  = НачалоМесяца(ДатаНачалаТекущего - 1);
		ДатаНачалоСледующего   = НачалоМесяца(ДобавитьМесяц(ДатаНачалаТекущего, 1));
		
		СписокВыбора.Добавить(ДатаНачалаПредыдущего, Формат(ДатаНачалаПредыдущего, СтрФрм_Месяц) + "...");
		
		ТекущийИнтервал = ДатаНачалаТекущего;
		ЭлементПоУмолчанию = Неопределено;
		Пока НачалоМесяца(ТекущийИнтервал) = ДатаНачалаТекущего Цикл
			ТекущееПредставление = "Декада (" + Формат(бит_Бюджетирование.ПолучитьНачалоПериода(ТекущийИнтервал, ЗнчПериодичность), СтрФрм_День) 
											  + " - " 
											  + Формат(бит_Бюджетирование.ПолучитьКонецПериода(ТекущийИнтервал, ЗнчПериодичность), СтрФрм_День) + ")";
			ДобавленныйЭлемент = СписокВыбора.Добавить(ТекущийИнтервал, ТекущееПредставление);
			Если ПредставлениеПериода = ТекущееПредставление Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли;
			ТекущийИнтервал = ТекущийИнтервал + 10*24*60*60;		
		КонецЦикла;
				
		СписокВыбора.Добавить(ДатаНачалоСледующего, Формат(ДатаНачалоСледующего, СтрФрм_Месяц) + "...");
				
	ИначеЕсли СтрокаПериодичность = "Месяц" Тогда
		
		ДатаНачалаТекущего     = НачалоГода(ДатаНачала);
		ДатаНачалаПредыдущего  = НачалоГода(ДатаНачалаТекущего - 1);
		ДатаНачалоСледующего   = КонецГода(ДатаНачалаТекущего) + 1;
		
		СписокВыбора.Добавить(ДатаНачалаПредыдущего, Формат(ДатаНачалаПредыдущего, СтрФрм_Год) + "...");
		
		ТекущийИнтервал = ДатаНачалаТекущего;
		ЭлементПоУмолчанию = Неопределено;
		Для i = 1 По 12 Цикл
			ТекущееПредставление = Формат(ТекущийИнтервал, СтрФрм_Месяц);
			ДобавленныйЭлемент = СписокВыбора.Добавить(ТекущийИнтервал, ТекущееПредставление);
			Если ПредставлениеПериода = ТекущееПредставление Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			ТекущийИнтервал = ДобавитьМесяц(ТекущийИнтервал, 1);
		КонецЦикла;
		
		СписокВыбора.Добавить(ДатаНачалоСледующего, Формат(ДатаНачалоСледующего, СтрФрм_Год) + "...");
		
	ИначеЕсли СтрокаПериодичность = "Квартал" Тогда
		
		ДатаНачалаТекущего     = НачалоГода(ДатаНачала);
		ДатаНачалаПредыдущего  = НачалоГода(ДатаНачалаТекущего - 1);
		ДатаНачалоСледующего   = КонецГода(ДатаНачалаТекущего) + 1;
		
		СписокВыбора.Добавить(ДатаНачалаПредыдущего, Формат(ДатаНачалаПредыдущего, СтрФрм_Год) + "...");
		
		ТекущийИнтервал = ДатаНачалаТекущего;
		ЭлементПоУмолчанию = Неопределено;
		Для i = 1 По 4 Цикл
			ТекущееПредставление = Формат(ТекущийИнтервал, СтрФрм_Квартал);
			ДобавленныйЭлемент = СписокВыбора.Добавить(ТекущийИнтервал, ТекущееПредставление);
			Если ПредставлениеПериода = ТекущееПредставление Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			ТекущийИнтервал = ДобавитьМесяц(ТекущийИнтервал, 3);
		КонецЦикла;
		
		СписокВыбора.Добавить(ДатаНачалоСледующего, Формат(ДатаНачалоСледующего, СтрФрм_Год) + "...");
		
	ИначеЕсли СтрокаПериодичность = "Год" Тогда
		
		ДатаНачалаТекущего     = Дата(Формат(Цел(Год(ДатаНачала)/10)*10, "ЧГ=4")+"0101");
		ДатаНачалаПредыдущего  = НачалоГода(ДобавитьМесяц(ДатаНачалаТекущего, -10*12));
		ДатаНачалоСледующего   = НачалоГода(ДобавитьМесяц(ДатаНачалаТекущего, 10*12));
		
		
		СписокВыбора.Добавить(ДатаНачалаПредыдущего, Формат(ДатаНачалаПредыдущего, СтрФрм_Год) + " - " + Формат(НачалоГода(ДатаНачалаТекущего - 1), СтрФрм_Год) + "...");
		
		ТекущийИнтервал = ДатаНачалаТекущего;
		ЭлементПоУмолчанию = Неопределено;
		Для i = 1 По 10 Цикл
			ТекущееПредставление = Формат(ТекущийИнтервал, СтрФрм_Год);
			ДобавленныйЭлемент = СписокВыбора.Добавить(ТекущийИнтервал, ТекущееПредставление);
			Если ПредставлениеПериода = ТекущееПредставление Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			ТекущийИнтервал = ДобавитьМесяц(ТекущийИнтервал, 12);
		КонецЦикла;
		
		СписокВыбора.Добавить(ДатаНачалоСледующего, Формат(ДатаНачалоСледующего, СтрФрм_Год) + "...");
			
	ИначеЕсли СтрокаПериодичность = "Полугодие" Тогда
		
		ДатаНачалаТекущего     = НачалоГода(ДатаНачала);
		ДатаНачалаПредыдущего  = НачалоГода(ДатаНачалаТекущего - 1);
		ДатаНачалоСледующего   = КонецГода(ДатаНачалаТекущего) + 1;
		
		СписокВыбора.Добавить(ДатаНачалаПредыдущего, Формат(ДатаНачалаПредыдущего, СтрФрм_Год) + "...");
		
		ТекущийИнтервал = ДатаНачалаТекущего;
		ЭлементПоУмолчанию = Неопределено;
		Для i = 1 По 2 Цикл
			Если Формат(ТекущийИнтервал, "ДФ=q") = "3" ИЛИ Формат(ТекущийИнтервал, "ДФ=q") = "4" Тогда			
				ТекущееПредставление = "2-ое полугодие " + Формат(ТекущийИнтервал, СтрФрм_Год) + " г."; 			
			Иначе                                                                     			
				ТекущееПредставление = "1-ое полугодие " + Формат(ТекущийИнтервал, СтрФрм_Год) + " г.";
			КонецЕсли;
			ДобавленныйЭлемент = СписокВыбора.Добавить(ТекущийИнтервал, ТекущееПредставление);
			Если ПредставлениеПериода = ТекущееПредставление Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			ТекущийИнтервал = ДобавитьМесяц(ТекущийИнтервал, 6);
		КонецЦикла;
		
		СписокВыбора.Добавить(ДатаНачалоСледующего, Формат(ДатаНачалоСледующего, СтрФрм_Год) + "...");
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	

	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ВыбранныйЭлемент.Значение;
	
	Если ВыбранноеЗначение = ДатаНачалаПредыдущего Тогда
		НачалоВыбораИзСпискаПредставленияПериода(Элемент, ЭтаФорма, СтандартнаяОбработка, ДатаНачалаПредыдущего, ЗнчПериодичность, ВыбранныйЭлемент.Представление);
		ДатаНачала = ДатаНачалаПредыдущего;
		Возврат;	
	ИначеЕсли ВыбранноеЗначение = ДатаНачалоСледующего Тогда
		НачалоВыбораИзСпискаПредставленияПериода(Элемент, ЭтаФорма, СтандартнаяОбработка, ДатаНачалоСледующего, ЗнчПериодичность, ВыбранныйЭлемент.Представление);
		ДатаНачала = ДатаНачалоСледующего;
		Возврат;
	КонецЕсли;
	
	ДатаНачала = ВыбранноеЗначение;
	// ПредставлениеПериода = ВыбранныйЭлемент.Представление;
	
КонецПроцедуры // НачалоВыбораИзСпискаПредставленияПериода()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Процедура выполняет обновление интерфейса пользователя.
// 
// Параметры:
//  АктивацияРешений - Структура. По умолчанию Неопределено.
// 
Процедура ОбновитьИнтерфейсПользователя(АктивацияРешений = Неопределено) Экспорт
	
	// Обновим интерфейсы пользователя - отобразим только доступные.
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		//1С-ИжТиСи, Кондратьев, 16.03.2020, обновление, некомментированный исправленный код (
		//ОбновитьИнтерфейс();
		//1С-ИжТиСи, Кондратьев, 16.03.2020, обновление, некомментированный исправленный код )
			
	КонецЕсли;
	
КонецПроцедуры // ОбновитьИнтерфейсПользователя()

// Процедура устанавливает параметры функциональных опций интерфейса. 
// 
// Параметры:
//  ЭтоИнтПоставка.
//
Процедура УстановитьПараметрыОпций(ЭтоИнтПоставка) Экспорт
	
	// Установим параметры функциональных опций интерфейса для перестроения.
	Если ЭтоИнтПоставка Тогда
		
	    СтруктураПараметров = Новый Структура;		
	    ТекПользователь = бит_ОбщегоНазначения.ПолучитьТекущегоПользователя();		
		СтруктураПараметров.Вставить("бит_ПользовательИнтерфейса", ТекПользователь);	
	    УстановитьПараметрыФункциональныхОпцийИнтерфейса(СтруктураПараметров);
		
	КонецЕсли; 
	
	
КонецПроцедуры // УстановитьПараметрыОпций()

// Процедура открывает форму изменения данных таблицы.
// 
// Параметры:
//  Таблица	- ТаблицаЗначений.
//  Форма	- УправляемаяФорма.
// 
Процедура ОткрытьФормуИзмененияДанныхТаблицы(СтруктураПараметров, Форма) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаИзмененияДанныхТаблицыУправляемая"
				,СтруктураПараметров
				,Форма);
	
КонецПроцедуры // ОткрытьФормуИзмененияДанныхТаблицы

// Процедура открывает список форм сбора данных. 
// 
Процедура ОткрытьСписок_ВидыФормСбораДанных() Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Назначение", "ФормаСбораДанных");
	
	ОткрытьФорму("Справочник.бит_ВидыПроформ.ФормаСписка", ПараметрыФормы, , "Справочник.бит_ВидыПроформ.ФормаСбораДанных");

КонецПроцедуры // ОткрытьСписок_ВидыФормСбораДанных()

// Процедура открывает список произвольных форм. 
// 
Процедура ОткрытьСписок_ВидыПроизвольныхФорм() Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Назначение", "ПроизвольнаяФорма");
	
	ОткрытьФорму("Справочник.бит_ВидыПроформ.ФормаСписка", ПараметрыФормы,, "Справочник.бит_ВидыПроформ.ПроизвольнаяФорма");

КонецПроцедуры // ОткрытьСписок_ВидыФормСбораДанных()

// Процедура открывает список форм сбора данных. 
// 
Процедура ОткрытьСписок_ФормыСбораДанных() Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Назначение", "ФормаСбораДанных");
	
	ОткрытьФорму("Документ.бит_Проформы.ФормаСписка", ПараметрыФормы, ,"Документ.бит_Проформы.ФормаСбораДанных");

КонецПроцедуры // ОткрытьСписок_ВидыФормСбораДанных()

// Процедура открывает список произвольных форм. 
// 
Процедура ОткрытьСписок_ПроизвольныеФормы() Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Назначение", "ПроизвольнаяФорма");
	
	ОткрытьФорму("Документ.бит_Проформы.ФормаСписка", ПараметрыФормы, ,"Документ.бит_Проформы.ПроизвольнаяФорма");

КонецПроцедуры // ОткрытьСписок_ВидыФормСбораДанных()

// Процедура управляет флагами в таблице.
// 
// Парметры:
//  ТекТаблица  - ДанныеФормыКоллекция.
//  ИмяФлага    - Строка.
//  ТекЗначение - Число (0 - снять флаги, 1 - установить истина, 2 - инвертировать).
// 
Процедура ОбработатьФлагиТаблицы(ТекТаблица, ИмяФлага, ТекЗначение) Экспорт
	
	Для каждого СтрокаТаблицы Из ТекТаблица Цикл
			
		СтрокаТаблицы[ИмяФлага] = ?(ТекЗначение = 2, Не СтрокаТаблицы[ИмяФлага], ТекЗначение = 1);
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьФлагиТаблицы()
                           
#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура открывает форму для подбора элементов данных установленными фильтрами.
// 
// Параметры:
//  СтруктураПараметров - Структура.
//      Элементы структуры:
//      СтруктураПараметров.Владелец - СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных
//      СтруктураПараметров.ЭлементВладелец - ЭлементФормы - Элемент управления в который будет возвращено значение.
//      СтруктураПараметров.ТекущийЭлемент  - СправочникСсылка.бит_ЭлементыДанных 
// 										    - Элемент на котором нужно позиционироваться в списке.
// 
Процедура ОткрытьФормуВыбораЭлементаДанных(СтруктураПараметров)  Экспорт
 
	ФормаВыбора = Справочники.бит_ЭлементыДанных.ПолучитьФормуВыбора(,СтруктураПараметров.ЭлементВладелец);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Владелец) Тогда
		
		ФормаВыбора.Отбор.Владелец.Использование = Истина;
		ФормаВыбора.Отбор.Владелец.Значение      = СтруктураПараметров.Владелец;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность  = Ложь;
		
	КонецЕсли; 
	
	
	Если СтруктураПараметров.Свойство("ТекущийЭлемент") И ЗначениеЗаполнено(СтруктураПараметров.ТекущийЭлемент) Тогда
	
		ФормаВыбора.НачальноеЗначениеВыбора = СтруктураПараметров.ТекущийЭлемент;
	
	КонецЕсли; 
	
	ФормаВыбора.Открыть();
 
КонецПроцедуры // ОткрытьФормуВыбораЭлементаДанных()

#КонецЕсли

// Процедура позволяет развернуть группы дерева в управляемой форму до определенного уровня.
// 
// Параметры:
//  Дерево          - ТаблицаФормы.
//  СтрокаВерх      - ДанныеФормыЭлементДерева.
//  УровеньДействия - Число - Уровень до которого будет развернуто дерево.
//  УровеньРекурсии - Число.
// 
Процедура РазвернутьДоУровня(Дерево,СтрокаВерх,УровеньДействия,УровеньРекурсии=0) Экспорт
	 
	ТекКоллекция = СтрокаВерх.ПолучитьЭлементы();
	УровеньТекущий = УровеньРекурсии+1;

	Для каждого СтрокаТекущая Из ТекКоллекция Цикл
	 
	ИдСтроки = СтрокаТекущая.ПолучитьИдентификатор(); 
	 
	Если УровеньТекущий >= УровеньДействия Тогда
		Дерево.Свернуть(ИдСтроки); 			 
	Иначе	
		
		РазвернутьДоУровня(Дерево,СтрокаТекущая,УровеньДействия,УровеньТекущий);		 
		Дерево.Развернуть(ИдСтроки); 		
		
	КонецЕсли; 
	 
	КонецЦикла; 
	 
КонецПроцедуры // РазвернутьДоУровня()
       
// Процедура раскрывает дерево от определенной строки полностью или на 1 уровень.
// 
// Параметры:
//  ДеревоДанных 		     - ТаблицаФормы.
//  КоллекцияСтрокДерева     - ДанныеФормыКоллекцияЭлементовДерева.
//  РазворачиватьПодчиненные - Булево (по умолчанию = Истина - раскрываются все подуровни).
// 
Процедура РазвернутьДеревоПолностью(ДеревоДанных, КоллекцияСтрокДерева, РазворачиватьПодчиненные = Истина) Экспорт

	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		
		ИдСтроки = СтрокаДерева.ПолучитьИдентификатор();
		ДеревоДанных.Развернуть(ИдСтроки, РазворачиватьПодчиненные);
	
	КонецЦикла;

КонецПроцедуры // РазвернутьДеревоПолностью()

// Процедура обрабатывает изменения настроек пользователя.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
Процедура ОбработатьИзмененияНастроекПользователя(Пользователь, СтруктураНастроек = Неопределено) Экспорт
	
	Если Пользователь <> бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь") Тогда
		Возврат;	
	КонецЕсли;
	
    // Получим интервал уведомления установки виз (в минутах) пользователя, если они не переданы.
	Если СтруктураНастроек <> Неопределено 
		И (СтруктураНастроек.Свойство("ИнтервалУведомленияУстановкиВиз")) Тогда	
		ИнтервалУв = СтруктураНастроек.ИнтервалУведомленияУстановкиВиз;	
	Иначе	
		ИнтервалУв = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ИнтервалУведомленияУстановкиВиз", Пользователь);																		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////
    // УПРАВЛЕНИЕ УВЕДОМЛЕНИЕМ УСТАНОВКИ ВИЗ
    
    // Если интервал уведомлений не равен нулю, тогда.
	Если ИнтервалУв = 0 Тогда
		ОтключитьОбработчикОжидания("бит_ОжиданиеУведомленияОбУстановкеВиз");
	Иначе
		ПодключитьОбработчикОжидания("бит_ОжиданиеУведомленияОбУстановкеВиз", ИнтервалУв * 60);
	КонецЕсли;

    // УПРАВЛЕНИЕ УВЕДОМЛЕНИЕМ УСТАНОВКИ ВИЗ
    ///////////////////////////////////////////////////////////////////////////////////////// 
    
КонецПроцедуры // ОбработатьИзмененияНастроекПользователя()
 
// Запрашивает у пользователя подтверждение очистки данных.
// 
// Параметры:
//  ТекФорма     - УправляемаяФорма.
//  ДопПараметры - Структура.
//  вхТекст      - Строка (По умолчанию = "").
//
Процедура ЗапросПодтвержденияОчисткиДанных(Форма, ДопПараметры, вхТекст = "") Экспорт
	
	флВыполнять = Истина;
	
	Если ПустаяСтрока(вхТекст) Тогда
		ТекстВопроса = НСтр("ru = 'Данные будут очищены. Продолжить?'");
	Иначе
		ТекстВопроса = вхТекст;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ИмяПроцедурыВозврата") Тогда
		ОповещениеОтвет = Новый ОписаниеОповещения(ДопПараметры.ИмяПроцедурыВозврата, Форма, ДопПараметры);
	Иначе
		ОповещениеОтвет = Новый ОписаниеОповещения("ОтветНаПотверждениеОчистки", Форма, ДопПараметры);
	КонецЕсли;
    ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
КонецПроцедуры

// Процедура открывает историю редактирования реквизитов.
// 
// Параметры:
// ТекОбъект              - ЛюбаяСсылка.
// ИмяРеквизита           - Строка.
// ПредставлениеРеквизита - Строка.
// 
Процедура ОткрытьИсторию(ТекОбъект,ИмяРеквизита,ПредставлениеРеквизита,ФормаВладелец) Экспорт

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Объект", ТекОбъект);
	СтруктураОтбора.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект", ТекОбъект);
	ПараметрыФормы.Вставить("ИмяРеквизита", ИмяРеквизита);
	ПараметрыФормы.Вставить("ПредставлениеРеквизита", ПредставлениеРеквизита);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.бит_ИсторияРедактированияРеквизитов.Форма.ФормаИсторииРедактированияУправляемая", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры // ОткрытьИсторию()

// Изменяет значение отбора в динамическом списке.
// Поиск производится по представлению в элементах отборов верхнего уровня.
// 
// Надо анализировать возвращаемое значение - и если вернется
//  Неопределено (т.е. отбор не установлен по причине того, что в списке
//  нет отбора по основной организации (он исправлен вручную и т.п.)), то не надо
//  присваивать Неопределено специальному полю "ОтборПоОрганизации" в форме списка.
// 
// Параметры:
//  Список         - ДинамическийСписок - список, в котором необходимо изменить значение отбора.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
// 
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
// 
Функция ИзменитьОтборПоОсновнойОрганизации(Список, ИмяРеквизита = "Организация", Знач ЗначениеОтбора = Неопределено) Экспорт

	Если бит_ОбщегоНазначения.ЭтоБП() Тогда
		
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбщегоНазначенияБПКлиент");
		Модуль.ИзменитьОтборПоОсновнойОрганизации(Список, ИмяРеквизита, ЗначениеОтбора);
		
	КонецЕсли; 
	
	Возврат ЗначениеОтбора;
	
КонецФункции // ИзменитьОтборПоОсновнойОрганизации()

// Открывает форму по переданному имени.
// 
Процедура ОткрытьФормуПоИмени(ИмяФормы, СтрПар,  ПараметрыФормы = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если СтрПар.Свойство("ПреобразоватьИзИмени") И СтрПар.ПреобразоватьИзИмени = Истина Тогда
		
		ИмяФормы = СтрЗаменить(ИмяФормы, "_",".");
		ИмяФормы = СтрЗаменить(ИмяФормы, "chr95", "_");
		
	КонецЕсли;
	
	Попытка
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецФормы);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось открыть форму %1%! Описание ошибки: %2%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяФормы, ОписаниеОшибки());
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецПопытки	
	
КонецПроцедуры // ОткрытьФормуПоИмени() 	

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция определяет вариант периода.
// 
// Параметры:
//  Период - Стандартный период или структура (ДатаНачала, ДатаОкончания).
//  
// Возвращаемое значение:
//   Чило.
// 
Функция ОпределитьНастройкуВариантаПериода(Период)

	// Варианты периода:
	// 0  - Год 
	// 1  - День 
	// 2  - ДеньСНачалаГода 
	// 3  - ДеньСНачалаКвартала 
	// 4  - ДеньСНачалаМесяца 
	// 5  - Квартал 
	// 6  - КварталСНачалаГода 
	// 7  - Месяц 
	// 8  - МесяцСНачалаГода 
	// 9  - МесяцСНачалаКвартала 
	// 10 - ПроизвольныйИнтервал.
	
	флВариантПериода = 10;
	
	НачалоПериода  = Период.ДатаНачала;
	КонецПериода   = ?(Период.ДатаОкончания = '0001-01-01', Период.ДатаОкончания, КонецДня(Период.ДатаОкончания));
		
	Если КонецПериода = КонецГода(КонецПериода) Тогда
		
		Если НачалоПериода = НачалоГода(КонецПериода) Тогда
		 	флВариантПериода = 0;
		ИначеЕсли НачалоПериода = НачалоКвартала(КонецПериода) Тогда
			флВариантПериода = 5;	
		ИначеЕсли НачалоПериода = НачалоМесяца(КонецПериода) Тогда
			флВариантПериода = 7;	
		ИначеЕсли НачалоПериода = НачалоДня(КонецПериода) Тогда
			флВариантПериода = 1;		
		КонецЕсли;
		
	ИначеЕсли КонецПериода = КонецКвартала(КонецПериода) Тогда
		
		Если НачалоПериода = НачалоКвартала(КонецПериода) Тогда
		 	флВариантПериода = 5;
		ИначеЕсли НачалоПериода = НачалоГода(КонецПериода) Тогда
			флВариантПериода = 6;
		ИначеЕсли НачалоПериода = НачалоМесяца(КонецПериода) Тогда
			флВариантПериода = 7;	
		ИначеЕсли НачалоПериода = НачалоДня(КонецПериода) Тогда
			флВариантПериода = 1;		
		КонецЕсли;
		
	ИначеЕсли КонецПериода = КонецМесяца(КонецПериода) Тогда
		
		Если НачалоПериода = НачалоМесяца(КонецПериода) Тогда
		 	флВариантПериода = 7;
		ИначеЕсли НачалоПериода = НачалоКвартала(КонецПериода) Тогда
		 	флВариантПериода = 9;
		ИначеЕсли НачалоПериода = НачалоГода(КонецПериода) Тогда
			флВариантПериода = 8;
		ИначеЕсли НачалоПериода = НачалоДня(КонецПериода) Тогда
			флВариантПериода = 1;		
		КонецЕсли;
		
	ИначеЕсли КонецПериода = КонецДня(КонецПериода) Тогда
		
		Если НачалоПериода = НачалоДня(КонецПериода) Тогда
		 	флВариантПериода = 1;
		ИначеЕсли НачалоПериода = НачалоМесяца(КонецПериода) Тогда
		 	флВариантПериода = 4;
		ИначеЕсли НачалоПериода = НачалоКвартала(КонецПериода) Тогда
		 	флВариантПериода = 3;
		ИначеЕсли НачалоПериода = НачалоГода(КонецПериода) Тогда
			флВариантПериода = 2;
		КонецЕсли;
		
	КонецЕсли;  	

	Возврат флВариантПериода;
	
КонецФункции // ОпределитьНастройкуВариантаПериода()

#КонецОбласти
