
#Область СлужебныйПрограммныйИнтерфейс

#Область РегистрацияСобытий

// Процедура обработчик подписки "бит_фн_ДокументПередЗаписьюРегистрацияСобытий" на событие  "ПередЗаписью".
// 
// Параметры:
// Источник        - ДокументОбъект.
// Отказ           - Булево.
// РежимЗаписи     - РежимЗаписиДокумента.
// РежимПроведения - РежимПроведенияДокумента.
// 
Процедура бит_фн_ДокументПередЗаписьюРегистрацияСобытийПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли; 		
		
	 Источник.ДополнительныеСвойства.Вставить("бит_фн_РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры // бит_фн_ДокументПередЗаписьюРегистрацияСобытийПередЗаписью()

// Процедура обработчик подписки "бит_фн_ДокументПриЗаписиРегистрацияСобытий" на событие  "ПриЗаписи".
// 
// Параметры:
// Источник        - ДокументОбъект.
// Отказ           - Булево.
// 
Процедура бит_фн_ДокументПриЗаписиРегистрацияСобытийПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли; 		
	
	РежимЗаписи = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("бит_фн_РежимЗаписи", РежимЗаписи);
	ВыполнитьРегистрациюСобытий(Источник,Отказ,РежимЗаписи);
	
КонецПроцедуры // бит_фн_ДокументПриЗаписиРегистрацияСобытийПриЗаписи()

// Процедура обработчик подписки "бит_фн_СправочникПриЗаписиРегистрацияСобытий" на событие  "ПриЗаписи".
// 
// Параметры:
// Источник        - СправочникОбъект.
// Отказ           - Булево.
// 
Процедура бит_фн_СправочникПриЗаписиРегистрацияСобытийПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 		
	
	ВыполнитьРегистрациюСобытий(Источник,Отказ);
	
КонецПроцедуры // бит_фн_СправочникПриЗаписиРегистрацияСобытийПриЗаписи()
 
// Процедура регистрирует событие в регистре сведений бит_фн_РегистрацияСобытийОповещений 
// для последующей обработки и создания оповещений.
//
// Параметры:
//  ВидСобытия	 - ПеречислениеСсылка.бит_фн_ВидыСобытийОповещений - вид события.
//  Оповещение	 - СправочникСсылка.бит_фн_Оповещения - регистрируемое оповещение.
//  Объект		 - ДокументСсылка, БизнесПроцессСсылка.бит_уп_Процесс, 
//					СправочникСсылка, ЗадачаСсылка.бит_уп_Задача - объект базы, связанный с оповещением.
//  Пользователь - СправочникСсылка.Пользователи - получатель оповещения. 
//  Виза		 - СправочникСсылка.бит_Визы - виза в контексте события.
//  Статус		 - СправочникСсылка.бит_СтатусыОбъектов	 - статус, связанного объекта.
//  Решение		 - СправочникСсылка.бит_ВидыРешенийСогласования	 - принятое решение. 
//  Комментарий	 - Строка (100)	 - произвольный текст.
//
Процедура ЗарегистрироватьСобытиеДляОповещений(ВидСобытия, Оповещение, Объект, 
						Пользователь = Неопределено, Виза = Неопределено, Статус = Неопределено, 					
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)
						//Решение = Неопределено, Комментарий = "") Экспорт
						//Заменено на:
						Решение = Неопределено, Комментарий = ""
						,НеПроверятьНаличиеЗаписи = Ложь) Экспорт
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-15 (#2873)
						
	//+СБ Пискунова #2691 29.03.2017 
	ДатаУстановкиВизы = ТекущаяДата();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-14 (#2880)   
	// КоличествоСекунд = Час(ДатаУстановкиВизы)*3600 + Минута(ДатаУстановкиВизы)*60 + Секунда(ДатаУстановкиВизы);
	//ДатаКрайняя = Дата(1, 1, 1) ;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	РегламентированныйПроизводственныйКалендарь.Дата КАК Дата
	//|ПОМЕСТИТЬ Даты
	//|ИЗ
	//|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК РегламентированныйПроизводственныйКалендарь
	//|ГДЕ
	//|	РегламентированныйПроизводственныйКалендарь.Дата В(&ВходящиеДаты)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	Даты.Дата,
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.Дата) КАК КоличествоРабочихДней,
	//|	МАКСИМУМ(РегламентированныйПроизводственныйКалендарь.Дата) КАК ДатаКалендаря,
	//|	РегламентированныйПроизводственныйКалендарь1.Дата КАК ДатаКалендаряДляГруппировки
	//|ИЗ
	//|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК РегламентированныйПроизводственныйКалендарь
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Даты КАК Даты
	//|		ПО (Даты.Дата <= РегламентированныйПроизводственныйКалендарь.Дата)
	//|			И (ДОБАВИТЬКДАТЕ(Даты.Дата, ДЕНЬ, &ГлубинаДней) > РегламентированныйПроизводственныйКалендарь.Дата)
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК РегламентированныйПроизводственныйКалендарь1
	//|		ПО РегламентированныйПроизводственныйКалендарь.Дата <= РегламентированныйПроизводственныйКалендарь1.Дата
	//|ГДЕ
	//|	(РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	//|			ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий))
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РегламентированныйПроизводственныйКалендарь1.Дата,
	//|	Даты.Дата
	//|
	//|ИМЕЮЩИЕ
	//|	МАКСИМУМ(РегламентированныйПроизводственныйКалендарь.Дата) = РегламентированныйПроизводственныйКалендарь1.Дата И
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.Дата) = &РабочихДней";
	//
	//Запрос.УстановитьПараметр("ВходящиеДаты", НачалоДня(КонецДня(ДатаУстановкиВизы) + 100));
	//Запрос.УстановитьПараметр("ГлубинаДней", 30);
	//Запрос.УстановитьПараметр("РабочихДней", 2);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда  											        												   
	//    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//    
	//    ВыборкаДетальныеЗаписи.Следующий();
	//    ДатаКрайняя = ВыборкаДетальныеЗаписи.ДатаКалендаря;
	//КонецЕсли;
	//
	//Если ТекПользователь = Справочники.бит_БК_Инициаторы.СБ_НеЗадан или ТекПользователь = Справочники.Пользователи.СБ_НеЗадан Тогда
	//    
	//    НаборЗаписей = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	//    НаборЗаписей.Отбор.Виза.Установить(ТекВиза); 
	//    НаборЗаписей.Отбор.Объект.Установить(ИсточникСсылка);
	//    НаборЗаписей.Прочитать();
	//    Если  НаборЗаписей.Количество() > 0  Тогда
	// 	   Для каждого запись из НаборЗаписей Цикл
	// 		   // условие на НЕ Запись.ИзмененоВручнуюВТолстомКлиенте служит для того, что корректно отрабатывал механизм очистки в форме обработки "бит_УстановкаВиз"
	// 		   Если Запись.ФизическоеЛицо = Справочники.бит_БК_Инициаторы.СБ_НеЗадан и не ЗначениеЗаполнено(Запись.Решение) и НЕ Запись.ИзмененоВручнуюВТолстомКлиенте Тогда
	// 			   Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Согласовано;
	// 			   Запись.Пользователь = Справочники.Пользователи.СБ_НеЗадан;
	// 			   Запись.ВремяНаУстановку = 172800;
	// 			   Запись.СБ_УстановленаАвтоматически = Истина;
	// 			   Запись.ДатаКрайняя  = НачалоДня(ДатаКрайняя) + КоличествоСекунд;
	// 			   Запись.ДатаУстановки = ДатаУстановкиВизы;
	// 			   Запись.ИзмененоВручнуюВТолстомКлиенте = Ложь;
	// 		   ИначеЕсли  Запись.ФизическоеЛицо = Справочники.бит_БК_Инициаторы.СБ_НеЗадан и не ЗначениеЗаполнено(Запись.Решение) и Запись.ИзмененоВручнуюВТолстомКлиенте Тогда
	// 			   Запись.ИзмененоВручнуюВТолстомКлиенте = Ложь; 													   
	// 		   КонецЕсли;
	// 	   КонецЦикла;
	// 	   НаборЗаписей.Записать();
	//    КонецЕсли;     				 
	//Иначе   												   
	//    НаборЗаписей = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	//    НаборЗаписей.Отбор.Виза.Установить(ТекВиза); 
	//    НаборЗаписей.Отбор.Объект.Установить(ИсточникСсылка);
	//    НаборЗаписей.Прочитать();
	//    
	//    Если  НаборЗаписей.Количество() > 0  Тогда
	//        Для каждого Запись из НаборЗаписей Цикл 														   		
	//     	   Запись.ВремяНаУстановку = 172800;
	//     	   Запись.ДатаКрайняя = НачалоДня(ДатаКрайняя) + КоличествоСекунд;
	//        КонецЦикла;
	//        НаборЗаписей.Записать();
	//    КонецЕсли;  
	//КонецЕсли;
	////-СБ Пискунова #2691 29.03.2017
	//
	////+СБ. Пискунова 19.05.2017 #2691 // автоматически устанавливаем визу в момент доступности визы пользователю, если он уже ранее ставил свое решение
	////02.06.2017 Добавлена доработка, которая заполняет  ВремяНаУстановку  = Период доступности + 2 дня 
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	//|	бит_УстановленныеВизы.Виза,
	//|	бит_УстановленныеВизы.Пользователь,
	//|	бит_УстановленныеВизы.ФизическоеЛицо КАК Инициатор,
	//|	бит_УстановленныеВизы.КодСортировки,
	//|	бит_УстановленныеВизы.Решение
	//|ИЗ
	//|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	//|ГДЕ
	//|	(бит_УстановленныеВизы.ФизическоеЛицо.Пользователь = &ФизическоеЛицо
	//|			ИЛИ бит_УстановленныеВизы.Пользователь = &ФизическоеЛицо)
	//|	И бит_УстановленныеВизы.Решение В(&Решение)
	//|	И бит_УстановленныеВизы.Объект = &Объект
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	бит_УстановленныеВизы.КодСортировки УБЫВ";
	//
	//СписокРешений = Новый Массив;
	//СписокРешений.Добавить(Справочники.бит_ВидыРешенийСогласования.Согласовано);
	//СписокРешений.Добавить(Справочники.бит_ВидыРешенийСогласования.Отклонено);
	//
	//
	//Запрос.УстановитьПараметр("Объект", ИсточникСсылка);
	//Запрос.УстановитьПараметр("Решение", СписокРешений);
	//Запрос.УстановитьПараметр("ФизическоеЛицо", ТекПользователь);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда 	
	//    ПерезаписатьНабор = Истина;
	//    
	//    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//    
	//    ВыборкаДетальныеЗаписи.Следующий();
	//    
	//    НаборЗаписей = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	//    НаборЗаписей.Отбор.Виза.Установить(ТекВиза); 
	//    НаборЗаписей.Отбор.Объект.Установить(ИсточникСсылка);
	//    НаборЗаписей.Прочитать();
	//    Если  НаборЗаписей.Количество() > 0  Тогда
	// 	   Для каждого запись из НаборЗаписей Цикл
	// 		   Если Запись.ФизическоеЛицо = ВыборкаДетальныеЗаписи.Инициатор  или Запись.ФизическоеЛицо.Пользователь = ТекПользователь  Тогда
	// 			   Если Запись.ФизическоеЛицо <> Справочники.бит_БК_Инициаторы.СБ_НеЗадан Тогда // для того, что корректно отрабатывал механизм очистки в форме обработки "бит_УстановкаВиз" 
	// 				   Запись.Решение = ВыборкаДетальныеЗаписи.Решение;
	// 				   Запись.Пользователь = ВыборкаДетальныеЗаписи.Пользователь;
	// 				   Запись.СБ_УстановленаАвтоматически = Истина;
	// 				   Запись.ВремяНаУстановку = 172800;
	// 				   Запись.ДатаКрайняя = НачалоДня(ДатаКрайняя) + КоличествоСекунд;
	// 			   КонецЕсли;
	// 		   КонецЕсли;
	// 	   КонецЦикла;
	// 	   НаборЗаписей.Записать();
	//    КонецЕсли; 												   
	//      
	//КонецЕсли; 			   
	//
	////-СБ. Пискунова 19.05.2017 #2691
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-14 (#2880)
	
	МенеджерЗаписи = РегистрыСведений.бит_фн_РегистрацияСобытийОповещений.СоздатьМенеджерЗаписи();
	//+СБ ПИскунова 27.02.2017 #2691
	//МенеджерЗаписи.СтатусРегистрации = Перечисления.бит_фн_СтатусыРегистрацииОповещений.Зарегистрировано;	
	//Если у документ стоит флаг не отправлять на почту, то сразу изменим вид события на обработано
	Если ТипЗнч(Объект) = ТипЗнч(Документы.бит_ФормаВводаБюджета.ПустаяСсылка()) Тогда
		Если Объект.СБ_НеОтправлятьУведомленияНаПочту Тогда
			МенеджерЗаписи.СтатусРегистрации = Перечисления.бит_фн_СтатусыРегистрацииОповещений.Обработано;
		Иначе
			МенеджерЗаписи.СтатусРегистрации = Перечисления.бит_фн_СтатусыРегистрацииОповещений.Зарегистрировано;
		КонецЕсли;
	Иначе
		МенеджерЗаписи.СтатусРегистрации = Перечисления.бит_фн_СтатусыРегистрацииОповещений.Зарегистрировано;
	КонецЕсли;
	//+СБ ПИскунова 27.02.2017 #2691	
	МенеджерЗаписи.ВидСобытия        = ВидСобытия;     
	МенеджерЗаписи.Оповещение        = Оповещение;
	МенеджерЗаписи.Объект            = Объект;
	МенеджерЗаписи.ИД                = Новый УникальныйИдентификатор;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		МенеджерЗаписи.Пользователь = Пользователь;
	Иначе	
		МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	МенеджерЗаписи.Виза   = Виза;
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Статус = Статус;	
	МенеджерЗаписи.Решение = Решение;
	МенеджерЗаписи.Комментарий = Комментарий;
	
	Попытка
		//Отбор = Новый Структура;
		//Отбор.Вставить("Объект",ИсточникСсылка);
		//Отбор.Вставить("Виза",ТекВиза);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)
		Если НЕ НеПроверятьНаличиеЗаписи Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-15 (#2873)
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_фн_РегистрацияСобытийОповещений.Виза
			|ИЗ
			|	РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК бит_фн_РегистрацияСобытийОповещений
			|ГДЕ
			|	бит_фн_РегистрацияСобытийОповещений.Объект = &Объект
			|	И бит_фн_РегистрацияСобытийОповещений.Виза = &Виза
			|	И бит_фн_РегистрацияСобытийОповещений.Пользователь = &Пользователь
			|	И бит_фн_РегистрацияСобытийОповещений.Оповещение = &Оповещение
			|	И бит_фн_РегистрацияСобытийОповещений.ВидСобытия = &ВидСобытия";
			
			Запрос.УстановитьПараметр("Виза", Виза);
			Запрос.УстановитьПараметр("Объект", Объект);
			Запрос.УстановитьПараметр("Пользователь", МенеджерЗаписи.Пользователь);
			Запрос.УстановитьПараметр("Оповещение", Оповещение);
			Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				МенеджерЗаписи.Записать();                
			КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-15 (#2873) 
		НачатьСозданиеОбсуждения(МенеджерЗаписи);
	Исключение
		Шаблон	 	   = НСтр("ru = 'Не удалось зарегистрировать событие для оповещений по объекту ""%1"". По причине: %2.'");
		Кратко	 	   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Подробно 	   = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон(Шаблон, Строка(Объект), Кратко);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации("Регистрация оповещения", УровеньЖурналаРегистрации.Предупреждение,,Объект,Подробно);				
		
	КонецПопытки;
	
КонецПроцедуры // ЗарегистрироватьСобытиеДляОповещений()

// Процедура выполняет регистрацию событий вида ДоступнаВиза. Может вызвана в фоновом режиме. 
//
// Параметры:
//  ОбъектВизирования - ДокументСсылка.
//  ТаблицаВизы - ТаблицаЗначений.
//  МассивОповещений - Массив.
//
Процедура ЗарегистрироватьСобытиеДоступныеВизы(ОбъектВизирования, ТаблицаВизы, МассивОповещений) Экспорт
	
	// Определим, какие визы доступны исходя из структуры алгоритма.
	Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
	
	Для каждого СтрокаВизы Из ТаблицаВизы Цикл
		Если ЗначениеЗаполнено(СтрокаВизы.Алгоритм) Тогда
			Алгоритм = СтрокаВизы.Алгоритм;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	локТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы);
	
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);		
	бит_уп_Сервер.ОпределитьДоступностьТочек(локТаблицаТочкиВизы,флВыполнятьПоэтапно);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-06 (#2939)
	Если Алгоритм.ок_НоваяСхема Тогда
		//ЗарегистрироватьСобытиеДоступныеВизыПоНовойСхеме();
			
		ОтборСтрок = Новый Структура;
			
		ОтборСтрок.Вставить("Доступность"		, Истина);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-10 (#2966)
		//ОтборСтрок.Вставить("Решение"	 		, ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка"));
		
		//МассивДоступныхВиз = локТаблицаТочкиВизы.Скопировать(ОтборСтрок,"Виза").ВыгрузитьКолонку("Виза");
		//Заменено на:
		
		пТалицаСтрокДоступныхВиз = локТаблицаТочкиВизы.Скопировать(ОтборСтрок);
		МассивДоступныхВиз		 = Новый Массив;
		
		пИндекс = пТалицаСтрокДоступныхВиз.Количество()-1;
		Пока пИндекс>=0 Цикл 
			Если (пТалицаСтрокДоступныхВиз[пИндекс].СложнаяВиза И
				 ЗначениеЗаполнено(пТалицаСтрокДоступныхВиз[пИндекс].РешениеПоСложнойВизе)) ИЛИ
				 (Не пТалицаСтрокДоступныхВиз[пИндекс].СложнаяВиза И
				 ЗначениеЗаполнено(пТалицаСтрокДоступныхВиз[пИндекс].Решение))
			Тогда 
				пТалицаСтрокДоступныхВиз.Удалить(пИндекс);
				пИндекс = пИндекс - 1;
				Продолжить;
			КонецЕсли;
			
			МассивДоступныхВиз.Добавить(пТалицаСтрокДоступныхВиз[пИндекс].Виза);
			
			пИндекс = пИндекс - 1;
			
		КонецЦикла;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-10 (#2966)
		Если МассивДоступныхВиз.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаВизы"	 	  ,	ТаблицаВизы);
		Запрос.УстановитьПараметр("ТекущаяДата"	 	  ,	ТекущаяДата());
		Запрос.УстановитьПараметр("ТаблицаОповещений" , МассивОповещений);
		Запрос.УстановитьПараметр("МассивДоступныхВиз", МассивДоступныхВиз);
				
		Запрос.Текст = "ВЫБРАТЬ
		|	ТабВизы.Виза,
		|	ТабВизы.ДобавленаВручную,
		|	ТабВизы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТабВизы.Объект
		|ПОМЕСТИТЬ ВТ0_ВизыИнициаторы
		|ИЗ
		|	&ТаблицаВизы КАК ТабВизы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОповещений.Виза КАК Виза,
		|	ТаблицаОповещений.ВидСобытия КАК ВидСобытия,
		|	ТаблицаОповещений.Оповещение КАК Оповещение
		|ПОМЕСТИТЬ ВТ1_Оповещения
		|ИЗ
		|	&ТаблицаОповещений КАК ТаблицаОповещений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Виза,
		|	ВидСобытия,
		|	Оповещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ0_ТаблицаВизы.Виза КАК Виза,
		|	ВТ0_ТаблицаВизы.ДобавленаВручную,
		|	бит_БК_Инициаторы.Пользователь КАК Пользователь,
		|	ВТ0_ТаблицаВизы.Объект
		|ПОМЕСТИТЬ ВТ2_ВизыПользователи
		|ИЗ
		|	ВТ0_ВизыИнициаторы КАК ВТ0_ТаблицаВизы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
		|		ПО ВТ0_ТаблицаВизы.ФизическоеЛицо = бит_БК_Инициаторы.Ссылка
		|ГДЕ
		|	ВТ0_ТаблицаВизы.Виза В(&МассивДоступныхВиз)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ0_ТаблицаВизы.ДобавленаВручную,
		|	бит_БК_Инициаторы.Пользователь,
		|	ВТ0_ТаблицаВизы.Виза,
		|	ВТ0_ТаблицаВизы.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Виза,
		|	Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ2_ВизыПользователи.Виза КАК Виза,
		|	ВТ2_ВизыПользователи.ДобавленаВручную,
		|	ВТ2_ВизыПользователи.Пользователь КАК Пользователь,
		|	ВТ2_ВизыПользователи.Объект,
		|	ВТ1_Оповещения.Оповещение КАК Оповещение
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	,ЗНАЧЕНИЕ(Справочник.бит_ПользовательскиеУсловия.ПустаяСсылка) КАК ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|ПОМЕСТИТЬ ВТ3_ВизыПользователиЗаместители
		|ИЗ
		|	ВТ1_Оповещения КАК ВТ1_Оповещения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ2_ВизыПользователи КАК ВТ2_ВизыПользователи
		|		ПО ВТ1_Оповещения.Виза = ВТ2_ВизыПользователи.Виза
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ1_Оповещения.Оповещение,
		|	ВТ2_ВизыПользователи.Виза,
		|	ВТ2_ВизыПользователи.ДобавленаВручную,
		|	ВТ2_ВизыПользователи.Объект,
		|	ВТ2_ВизыПользователи.Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ2_ВизыПользователи.Виза,
		|	ВТ2_ВизыПользователи.ДобавленаВручную,
		|	бит_НазначенныеЗаместители.Заместитель,
		|	ВТ2_ВизыПользователи.Объект,
		|	ВТ1_Оповещения.Оповещение
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	,бит_НазначенныеЗаместители.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|ИЗ
		|	ВТ2_ВизыПользователи КАК ВТ2_ВизыПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
		|		ПО ВТ2_ВизыПользователи.Пользователь = бит_НазначенныеЗаместители.Пользователь
		|			И ВТ2_ВизыПользователи.Виза = бит_НазначенныеЗаместители.Виза
		|			И (НАЧАЛОПЕРИОДА(бит_НазначенныеЗаместители.ДатаНачала, ДЕНЬ) <= &ТекущаяДата)
		|			И (КОНЕЦПЕРИОДА(бит_НазначенныеЗаместители.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата)
		|			И (бит_НазначенныеЗаместители.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ1_Оповещения КАК ВТ1_Оповещения
		|		ПО ВТ2_ВизыПользователи.Виза = ВТ1_Оповещения.Виза
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ1_Оповещения.Оповещение,
		|	бит_НазначенныеЗаместители.Заместитель,
		|	ВТ2_ВизыПользователи.Объект,
		|	ВТ2_ВизыПользователи.ДобавленаВручную,
		|	ВТ2_ВизыПользователи.Виза
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		//|ОБЪЕДИНИТЬ ВСЕ
		//Заменено на:
		|	,бит_НазначенныеЗаместители.ПользовательскоеУсловие		
		|
		|ОБЪЕДИНИТЬ
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)		
		|
		|ВЫБРАТЬ
		|	ВТ2_ВизыПользователи.Виза,
		|	ВТ2_ВизыПользователи.ДобавленаВручную,
		|	бит_НазначенныеЗаместители.Заместитель,
		|	ВТ2_ВизыПользователи.Объект,
		|	ВТ1_Оповещения.Оповещение
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	,бит_НазначенныеЗаместители.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|ИЗ
		|	ВТ2_ВизыПользователи КАК ВТ2_ВизыПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
		|			ПО бит_НазначенныеЗаместители.Виза = бит_ГруппыВизВизыГруппы.Ссылка
		|		ПО ВТ2_ВизыПользователи.Пользователь = бит_НазначенныеЗаместители.Пользователь
		|			И (НАЧАЛОПЕРИОДА(бит_НазначенныеЗаместители.ДатаНачала, ДЕНЬ) <= &ТекущаяДата)
		|			И (КОНЕЦПЕРИОДА(бит_НазначенныеЗаместители.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата)
		|			И (бит_НазначенныеЗаместители.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ1_Оповещения КАК ВТ1_Оповещения
		|		ПО ВТ2_ВизыПользователи.Виза = ВТ1_Оповещения.Виза
		|ГДЕ
		|	ВТ2_ВизыПользователи.Виза = бит_ГруппыВизВизыГруппы.Виза
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ1_Оповещения.Оповещение,
		|	бит_НазначенныеЗаместители.Заместитель,
		|	ВТ2_ВизыПользователи.Объект,
		|	ВТ2_ВизыПользователи.ДобавленаВручную,
		|	ВТ2_ВизыПользователи.Виза
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	,бит_НазначенныеЗаместители.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-14 (#2980)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ2_ВизыПользователи.Виза,
		|	ВТ2_ВизыПользователи.ДобавленаВручную,
		|	бит_НазначенныеЗаместители_Заместителей.Заместитель,
		|	ВТ2_ВизыПользователи.Объект,
		|	ВТ1_Оповещения.Оповещение,
		|	бит_НазначенныеЗаместители_Заместителей.ПользовательскоеУсловие
		|ИЗ
		|	ВТ2_ВизыПользователи КАК ВТ2_ВизыПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители_Визирующих
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители_Заместителей
		|			ПО (бит_НазначенныеЗаместители_Заместителей.Пользователь = бит_НазначенныеЗаместители_Визирующих.Заместитель)
		|				И (бит_НазначенныеЗаместители_Заместителей.Виза = бит_НазначенныеЗаместители_Визирующих.Виза)
		|				И (НАЧАЛОПЕРИОДА(бит_НазначенныеЗаместители_Заместителей.ДатаНачала, ДЕНЬ) <= &ТекущаяДата)
		|		ПО ВТ2_ВизыПользователи.Пользователь = бит_НазначенныеЗаместители_Визирующих.Пользователь
		|			И ВТ2_ВизыПользователи.Виза = бит_НазначенныеЗаместители_Визирующих.Виза
		|			И (НАЧАЛОПЕРИОДА(бит_НазначенныеЗаместители_Визирующих.ДатаНачала, ДЕНЬ) <= &ТекущаяДата)
		|			И (КОНЕЦПЕРИОДА(бит_НазначенныеЗаместители_Визирующих.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата)
		|			И (бит_НазначенныеЗаместители_Визирующих.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен))
		|			И (КОНЕЦПЕРИОДА(бит_НазначенныеЗаместители_Заместителей.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата)
		|			И (бит_НазначенныеЗаместители_Заместителей.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ1_Оповещения КАК ВТ1_Оповещения
		|		ПО ВТ2_ВизыПользователи.Виза = ВТ1_Оповещения.Виза
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ1_Оповещения.Оповещение,
		|	ВТ2_ВизыПользователи.Объект,
		|	ВТ2_ВизыПользователи.ДобавленаВручную,
		|	ВТ2_ВизыПользователи.Виза,
		|	бит_НазначенныеЗаместители_Заместителей.ПользовательскоеУсловие,
		|	бит_НазначенныеЗаместители_Заместителей.Заместитель
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ2_ВизыПользователи.Виза,
		|	ВТ2_ВизыПользователи.ДобавленаВручную,
		|	бит_НазначенныеЗаместители_Заместителей.Заместитель,
		|	ВТ2_ВизыПользователи.Объект,
		|	ВТ1_Оповещения.Оповещение,
		|	бит_НазначенныеЗаместители_Заместителей.ПользовательскоеУсловие
		|ИЗ
		|	ВТ2_ВизыПользователи КАК ВТ2_ВизыПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители_Визирующих
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
		|			ПО бит_НазначенныеЗаместители_Визирующих.Виза = бит_ГруппыВизВизыГруппы.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители_Заместителей
		|			ПО (бит_НазначенныеЗаместители_Заместителей.Пользователь = бит_НазначенныеЗаместители_Визирующих.Заместитель)
		|				И (НАЧАЛОПЕРИОДА(бит_НазначенныеЗаместители_Заместителей.ДатаНачала, ДЕНЬ) <= &ТекущаяДата)
		|		ПО ВТ2_ВизыПользователи.Пользователь = бит_НазначенныеЗаместители_Визирующих.Пользователь
		|			И (НАЧАЛОПЕРИОДА(бит_НазначенныеЗаместители_Визирующих.ДатаНачала, ДЕНЬ) <= &ТекущаяДата)
		|			И (КОНЕЦПЕРИОДА(бит_НазначенныеЗаместители_Визирующих.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата)
		|			И (бит_НазначенныеЗаместители_Визирующих.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен))
		|			И (КОНЕЦПЕРИОДА(бит_НазначенныеЗаместители_Заместителей.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата)
		|			И (бит_НазначенныеЗаместители_Заместителей.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ1_Оповещения КАК ВТ1_Оповещения
		|		ПО ВТ2_ВизыПользователи.Виза = ВТ1_Оповещения.Виза
		|ГДЕ
		|	ВТ2_ВизыПользователи.Виза = бит_ГруппыВизВизыГруппы.Виза
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ1_Оповещения.Оповещение,
		|	ВТ2_ВизыПользователи.Объект,
		|	ВТ2_ВизыПользователи.ДобавленаВручную,
		|	ВТ2_ВизыПользователи.Виза,
		|	бит_НазначенныеЗаместители_Заместителей.Заместитель,
		|	бит_НазначенныеЗаместители_Заместителей.ПользовательскоеУсловие
		|
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-14 (#2980)
		|ИНДЕКСИРОВАТЬ ПО
		|	Виза,
		|	Пользователь,
		|	Оповещение
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	,ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ1_Оповещения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ3_ВизыПользователиЗаместители.Виза КАК Виза,
		|	ВТ3_ВизыПользователиЗаместители.ДобавленаВручную КАК ДобавленаВручную,
		|	ВТ3_ВизыПользователиЗаместители.Пользователь КАК Пользователь,
		|	ВТ3_ВизыПользователиЗаместители.Оповещение
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	,ВТ3_ВизыПользователиЗаместители.ПользовательскоеУсловие,
		|	ВТ3_ВизыПользователиЗаместители.Объект
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|ПОМЕСТИТЬ ВТ4_ОтобранныеВизыПользователи
		|ИЗ
		|	ВТ3_ВизыПользователиЗаместители КАК ВТ3_ВизыПользователиЗаместители
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_РегистрацияСобытийОповещений.СрезПоследних(
		//|				&ТекущаяДата,
		//|				Объект В
		//|						(ВЫБРАТЬ ПЕРВЫЕ 1
		//|							ВТ0_ВизыИнициаторы.Объект
		//|						ИЗ
		//|							ВТ0_ВизыИнициаторы КАК ВТ0_ВизыИнициаторы)
		//|					И ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза)) КАК бит_фн_РегистрацияСобытийОповещенийСрезПоследних
		//|		ПО (бит_фн_РегистрацияСобытийОповещенийСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза))
		//|			И ВТ3_ВизыПользователиЗаместители.Пользователь = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Пользователь
		//|			И ВТ3_ВизыПользователиЗаместители.Объект = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Объект
		//|			И ВТ3_ВизыПользователиЗаместители.Оповещение = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Оповещение
		//|ГДЕ
		//|	бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Объект ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ3_ВизыПользователиЗаместители.ДобавленаВручную,
		|	ВТ3_ВизыПользователиЗаместители.Виза,
		|	ВТ3_ВизыПользователиЗаместители.Пользователь,
		|	ВТ3_ВизыПользователиЗаместители.Оповещение
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	,ВТ3_ВизыПользователиЗаместители.ПользовательскоеУсловие,
		|	ВТ3_ВизыПользователиЗаместители.Объект		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Виза,
		|	Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ0_ВизыИнициаторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ2_ВизыПользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ3_ВизыПользователиЗаместители
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ4_ОтобранныеВизыПользователи.Виза КАК Виза,
		|	ВТ4_ОтобранныеВизыПользователи.ДобавленаВручную,
		|	ВТ4_ОтобранныеВизыПользователи.Пользователь КАК Пользователь,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)
		//|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие,
		//Заменено на:
		|	ВТ4_ОтобранныеВизыПользователи.ПользовательскоеУсловие,
		|	ВТ4_ОтобранныеВизыПользователи.Объект,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|	ВТ4_ОтобранныеВизыПользователи.Оповещение
		|ПОМЕСТИТЬ ВТ5_РазрешенныеПоВизеИлиПользователю
		|ИЗ
		|	ВТ4_ОтобранныеВизыПользователи КАК ВТ4_ОтобранныеВизыПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
		|		ПО ВТ4_ОтобранныеВизыПользователи.Виза = бит_ПраваУстановкиВиз.Виза
		|			И ВТ4_ОтобранныеВизыПользователи.Пользователь = бит_ПраваУстановкиВиз.Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|			И ВТ4_ОтобранныеВизыПользователи.ПользовательскоеУсловие = бит_ПраваУстановкиВиз.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ4_ОтобранныеВизыПользователи.Виза,
		|	ВТ4_ОтобранныеВизыПользователи.ДобавленаВручную,
		|	ВТ4_ОтобранныеВизыПользователи.Пользователь,
		|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)
		|	ВТ4_ОтобранныеВизыПользователи.Объект,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|	ВТ4_ОтобранныеВизыПользователи.Оповещение
		|ИЗ
		|	ВТ4_ОтобранныеВизыПользователи КАК ВТ4_ОтобранныеВизыПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
		|		ПО ВТ4_ОтобранныеВизыПользователи.Виза = бит_ПраваУстановкиВиз.Виза
		|			И (бит_ПраваУстановкиВиз.Пользователь = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|			И ВТ4_ОтобранныеВизыПользователи.ПользовательскоеУсловие = бит_ПраваУстановкиВиз.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)		
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ4_ОтобранныеВизыПользователи.Виза,
		|	ВТ4_ОтобранныеВизыПользователи.ДобавленаВручную,
		|	ВТ4_ОтобранныеВизыПользователи.Пользователь,
		|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)
		|	ВТ4_ОтобранныеВизыПользователи.Объект,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)
		|	ВТ4_ОтобранныеВизыПользователи.Оповещение
		|ИЗ
		|	ВТ4_ОтобранныеВизыПользователи КАК ВТ4_ОтобранныеВизыПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
		|		ПО (бит_ПраваУстановкиВиз.Виза = ЗНАЧЕНИЕ(Справочник.бит_ГруппыВиз.ВсеВизы))
		|			И ВТ4_ОтобранныеВизыПользователи.Пользователь = бит_ПраваУстановкиВиз.Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|			И ВТ4_ОтобранныеВизыПользователи.ПользовательскоеУсловие = бит_ПраваУстановкиВиз.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)		
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Виза,
		|	Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ4_ОтобранныеВизыПользователи.Виза,
		|	ВТ4_ОтобранныеВизыПользователи.ДобавленаВручную,
		|	ВТ4_ОтобранныеВизыПользователи.Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	,ВТ4_ОтобранныеВизыПользователи.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)		
		|ПОМЕСТИТЬ ВТ6_Оставшиеся
		|ИЗ
		|	ВТ4_ОтобранныеВизыПользователи КАК ВТ4_ОтобранныеВизыПользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ5_РазрешенныеПоВизеИлиПользователю КАК ВТ5_РазрешенныеПоВизеИлиПользователю
		|		ПО ВТ4_ОтобранныеВизыПользователи.Виза = ВТ5_РазрешенныеПоВизеИлиПользователю.Виза
		|			И ВТ4_ОтобранныеВизыПользователи.ДобавленаВручную = ВТ5_РазрешенныеПоВизеИлиПользователю.ДобавленаВручную
		|			И ВТ4_ОтобранныеВизыПользователи.Пользователь = ВТ5_РазрешенныеПоВизеИлиПользователю.Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|			И ВТ4_ОтобранныеВизыПользователи.ПользовательскоеУсловие = ВТ5_РазрешенныеПоВизеИлиПользователю.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)		
		|ГДЕ
		|	ВТ5_РазрешенныеПоВизеИлиПользователю.Виза ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ4_ОтобранныеВизыПользователи.Виза,
		|	ВТ4_ОтобранныеВизыПользователи.ДобавленаВручную,
		|	ВТ4_ОтобранныеВизыПользователи.Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	,ВТ4_ОтобранныеВизыПользователи.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ6_Оставшиеся.Виза КАК Виза,
		|	ВТ6_Оставшиеся.ДобавленаВручную,
		|	ВТ6_Оставшиеся.Пользователь КАК Пользователь,
		|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие КАК ПользовательскоеУсловие
		|ПОМЕСТИТЬ ВТ7_РазрешенныеОставшиеся
		|ИЗ
		|	ВТ6_Оставшиеся КАК ВТ6_Оставшиеся
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
		|			ПО (бит_ПраваУстановкиВиз.Пользователь = ГруппыПользователейСостав.Ссылка)
		|				И (бит_ПраваУстановкиВиз.Пользователь <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
		|				И (бит_ПраваУстановкиВиз.Виза <> ЗНАЧЕНИЕ(Справочник.бит_ГруппыВиз.ВсеВизы))
		|		ПО ВТ6_Оставшиеся.Пользователь = ГруппыПользователейСостав.Пользователь
		|ГДЕ
		|	ВТ6_Оставшиеся.Виза = бит_ПраваУстановкиВиз.Виза
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	И ВТ6_Оставшиеся.ПользовательскоеУсловие = бит_ПраваУстановкиВиз.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)		
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ6_Оставшиеся.Виза,
		|	ВТ6_Оставшиеся.ДобавленаВручную,
		|	ВТ6_Оставшиеся.Пользователь,
		|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие
		|ИЗ
		|	ВТ6_Оставшиеся КАК ВТ6_Оставшиеся
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
		|			ПО (бит_ПраваУстановкиВиз.Пользователь = ГруппыПользователейСостав.Ссылка)
		|				И (бит_ПраваУстановкиВиз.Пользователь <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
		|				И (бит_ПраваУстановкиВиз.Виза <> ЗНАЧЕНИЕ(Справочник.бит_ГруппыВиз.ВсеВизы))
		|		ПО ВТ6_Оставшиеся.Пользователь = ГруппыПользователейСостав.Пользователь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
		|		ПО ВТ6_Оставшиеся.Виза = бит_ГруппыВизВизыГруппы.Виза
		|ГДЕ
		|	бит_ГруппыВизВизыГруппы.Ссылка = бит_ПраваУстановкиВиз.Виза
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	И ВТ6_Оставшиеся.ПользовательскоеУсловие = бит_ПраваУстановкиВиз.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)		
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ6_Оставшиеся.Виза,
		|	ВТ6_Оставшиеся.ДобавленаВручную,
		|	ВТ6_Оставшиеся.Пользователь,
		|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие
		|ИЗ
		|	ВТ6_Оставшиеся КАК ВТ6_Оставшиеся
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
		|			ПО (бит_ПраваУстановкиВиз.Виза = бит_ГруппыВизВизыГруппы.Ссылка)
		|				И (бит_ПраваУстановкиВиз.Виза <> ЗНАЧЕНИЕ(Справочник.бит_ГруппыВиз.ВсеВизы))
		|		ПО ВТ6_Оставшиеся.Виза = бит_ГруппыВизВизыГруппы.Виза
		|ГДЕ
		|	ВТ6_Оставшиеся.Пользователь = бит_ПраваУстановкиВиз.Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-09 (#2966)		
		|	И ВТ6_Оставшиеся.ПользовательскоеУсловие = бит_ПраваУстановкиВиз.ПользовательскоеУсловие
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-09 (#2966)		
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Виза,
		|	Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ6_Оставшиеся
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ7_РазрешенныеОставшиеся.Виза,
		|	ВТ7_РазрешенныеОставшиеся.ДобавленаВручную КАК ДобавленаВручную,
		|	ВТ7_РазрешенныеОставшиеся.Пользователь КАК Пользователь,
		|	ВТ7_РазрешенныеОставшиеся.ПользовательскоеУсловие КАК ПользовательскоеУсловие,
		|	ВТ4_ОтобранныеВизыПользователи.Оповещение КАК Оповещение,
		|	ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза) КАК ВидСобытия
		|ИЗ
		|	ВТ7_РазрешенныеОставшиеся КАК ВТ7_РазрешенныеОставшиеся
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ4_ОтобранныеВизыПользователи КАК ВТ4_ОтобранныеВизыПользователи
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-12 (#2966)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК бит_фн_РегистрацияСобытийОповещений
		|			ПО ВТ4_ОтобранныеВизыПользователи.Виза = бит_фн_РегистрацияСобытийОповещений.Виза
		|				И ВТ4_ОтобранныеВизыПользователи.Пользователь = бит_фн_РегистрацияСобытийОповещений.Пользователь
		|				И ВТ4_ОтобранныеВизыПользователи.Оповещение = бит_фн_РегистрацияСобытийОповещений.Оповещение
		|				И ВТ4_ОтобранныеВизыПользователи.Объект = бит_фн_РегистрацияСобытийОповещений.Объект
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-12 (#2966)
		|		ПО ВТ7_РазрешенныеОставшиеся.Виза = ВТ4_ОтобранныеВизыПользователи.Виза
		|			И ВТ7_РазрешенныеОставшиеся.Пользователь = ВТ4_ОтобранныеВизыПользователи.Пользователь
		|
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-12 (#2966)
		|ГДЕ
		|	бит_фн_РегистрацияСобытийОповещений.Объект ЕСТЬ NULL
		|
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-12 (#2966)
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ5_РазрешенныеПоВизеИлиПользователю.Виза,
		|	ВТ5_РазрешенныеПоВизеИлиПользователю.ДобавленаВручную,
		|	ВТ5_РазрешенныеПоВизеИлиПользователю.Пользователь,
		|	ВТ5_РазрешенныеПоВизеИлиПользователю.ПользовательскоеУсловие,
		|	ВТ5_РазрешенныеПоВизеИлиПользователю.Оповещение,
		|	ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза)
		|ИЗ
		|	ВТ5_РазрешенныеПоВизеИлиПользователю КАК ВТ5_РазрешенныеПоВизеИлиПользователю
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-12 (#2966)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК бит_фн_РегистрацияСобытийОповещений
		|		ПО ВТ5_РазрешенныеПоВизеИлиПользователю.Виза = бит_фн_РегистрацияСобытийОповещений.Виза
		|			И ВТ5_РазрешенныеПоВизеИлиПользователю.Пользователь = бит_фн_РегистрацияСобытийОповещений.Пользователь
		|			И ВТ5_РазрешенныеПоВизеИлиПользователю.Оповещение = бит_фн_РегистрацияСобытийОповещений.Оповещение
		|			И ВТ5_РазрешенныеПоВизеИлиПользователю.Объект = бит_фн_РегистрацияСобытийОповещений.Объект
		|ГДЕ
		|	бит_фн_РегистрацияСобытийОповещений.Объект ЕСТЬ NULL
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-12 (#2966)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДобавленаВручную
		|ИТОГИ ПО
		|	Оповещение,
		|	Пользователь,
		|	ПользовательскоеУсловие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ7_РазрешенныеОставшиеся
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ5_РазрешенныеПоВизеИлиПользователю
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ4_ОтобранныеВизыПользователи";   
				
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда 			
			Возврат;					
		КонецЕсли;
		
		ЭтоФВБ = ТипЗнч(ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета");
		Если ЭтоФВБ Тогда
			Если ОбъектВизирования.СБ_НеОтправлятьУведомленияНаПочту Тогда
				СтатусРегистрации = Перечисления.бит_фн_СтатусыРегистрацииОповещений.Обработано;
			Иначе  													   
				СтатусРегистрации = Перечисления.бит_фн_СтатусыРегистрацииОповещений.Зарегистрировано;
			КонецЕсли;
		Иначе 
			СтатусРегистрации = Перечисления.бит_фн_СтатусыРегистрацииОповещений.Зарегистрировано;
		КонецЕсли;
		
		ВыборкаОповещения = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОповещения.Следующий() Цикл 
			
			НаборЗаписей = РегистрыСведений.бит_фн_РегистрацияСобытийОповещений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Оповещение.Установить(ВыборкаОповещения.Оповещение);
			НаборЗаписей.Отбор.ВидСобытия.Установить(ПредопределенноеЗначение("Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза"));
			НаборЗаписей.Отбор.Объект.Установить(ОбъектВизирования);
			
			НаборЗаписей.Прочитать();
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-13 (#2980)
			//НаборЗаписей.Очистить();
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-13 (#2980)			
			
			ВыборкаПользователи = ВыборкаОповещения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПользователи.Следующий() Цикл 
				ВыборкаПользовательскоеУсловие = ВыборкаПользователи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПользовательскоеУсловие.Следующий() Цикл 
					
					Если ЗначениеЗаполнено(ВыборкаПользовательскоеУсловие.ПользовательскоеУсловие) Тогда
						
						// Проверка пользовательского условия из РС.бит_ПраваУстановкиВиз
						ПараметрыУсловия = Новый Структура;
						ПараметрыУсловия.Вставить("ТекущийОбъект"		, ОбъектВизирования);
						ПараметрыУсловия.Вставить("ТекущийПользователь" , ВыборкаПользовательскоеУсловие.Пользователь);
						
						флУсловиеВыполнено = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(ВыборкаПользовательскоеУсловие.ПользовательскоеУсловие
						,ПараметрыУсловия
						,
						,
						,"Ошибки");
						
						Если НЕ флУсловиеВыполнено Тогда
							
							Продолжить;
							
						КонецЕсли; 																	 						
						
					КонецЕсли;  
					
					ВыборкаДетали = ВыборкаПользовательскоеУсловие.Выбрать();
					//Берем только одну запись по оповещению, т.к. по остальным согласование устанавливается автоматически.
					//Наличие записи в РС по объекту гарантирует возможность согласования
					Если ВыборкаДетали.Следующий() Тогда 
						
						ЗаписьРС = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьРС,ВыборкаДетали);
						
						ЗаписьРС.СтатусРегистрации = СтатусРегистрации;  												
						ЗаписьРС.Объект            = ОбъектВизирования;
						ЗаписьРС.ИД                = Новый УникальныйИдентификатор;
						
						Если НЕ ЗначениеЗаполнено(ВыборкаДетали.Пользователь) Тогда							
							ЗаписьРС.Пользователь      = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
						КонецЕсли; 
						
						ЗаписьРС.Период            = ТекущаяДата();
						               
					КонецЕсли;
					
				КонецЦикла; //ВыборкаПользовательскоеУсловие
			КонецЦикла; //ВыборкаПользователи
			
			Если НаборЗаписей.Количество() > 0 Тогда 
				Попытка
					
					НаборЗаписей.Записать();
					
				Исключение
										
					ТекстОшибки = НСтр("ru = 'Не удалось зарегистрировать событие для оповещений %1 по объекту ""%2""!'") + 
								  Символы.ПС +
								  ОписаниеОшибки();
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибки,
					ВыборкаОповещения.Оповещение,
					Строка(ОбъектВизирования));		
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);  
									
				КонецПопытки;	
			КонецЕсли;
			
		КонецЦикла; //ВыборкаОповещения
				                                                                                                                                               
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-06 (#2939)	
	
	ТабДоступныеПоСтруктуре = Новый ТаблицаЗначений;
	ТабДоступныеПоСтруктуре.Колонки.Добавить("Виза", Новый ОписаниеТипов("СправочникСсылка.бит_Визы"));
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)	
	ТаблицаДобавленоВручную  = ТаблицаВизы.Скопировать(Новый Структура("ДобавленаВручную,Решение",Истина,ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка")));	
	ТаблицаДобавленоВручную.Колонки.Добавить("ПользовательДляОтправки", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Если ТаблицаДобавленоВручную.Количество()>0 Тогда  
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТЗ_Источник",ТаблицаДобавленоВручную);
		Запрос.Текст = "ВЫБРАТЬ
		|	ТЗ_Источник.Виза,
		|	ТЗ_Источник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТЗ_Источник.Пользователь КАК Пользователь,
		|	ТЗ_Источник.Объект
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	&ТЗ_Источник КАК ТЗ_Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Источник.Виза КАК Виза,
		|	ВЫРАЗИТЬ(Источник.ФизическоеЛицо КАК Справочник.бит_БК_Инициаторы).Пользователь КАК ПользовательДляОтправки,
		|	Источник.Объект КАК Объект
		|ПОМЕСТИТЬ ТаблицаВиз
		|ИЗ
		|	Источник КАК Источник
		|ГДЕ
		|	Источник.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВЫБОР
		|			КОГДА Источник.ФизическоеЛицо ССЫЛКА Справочник.бит_БК_Инициаторы
		|				ТОГДА ВЫРАЗИТЬ(Источник.ФизическоеЛицо КАК Справочник.бит_БК_Инициаторы).Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Виза,
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВиз.Виза,
		|	ТаблицаВиз.ПользовательДляОтправки КАК ПользовательДляОтправки
		|ИЗ
		|	ТаблицаВиз КАК ТаблицаВиз
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_Оповещения КАК бит_фн_Оповещения
		|		ПО ТаблицаВиз.Объект = бит_фн_Оповещения.СБ_ФормаВводаБюджета
		|			И ТаблицаВиз.ПользовательДляОтправки = бит_фн_Оповещения.Пользователь
		|ГДЕ
		|	бит_фн_Оповещения.Пользователь ЕСТЬ NULL";
		
		ТаблицаДобавленоВручную = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ОтборДобавленныхВручную  = Новый Структура("Виза,ПользовательДляОтправки");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-15 (#2873)	
	ДоступныеПоСтруктуре = Новый Массив;
	Для каждого ТекущаяСтрока Из локТаблицаТочкиВизы Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Виза) 
			 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-18 (#2873)
			 //И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Решение) 
			 //Заменено на:
			 И ?(ТекущаяСтрока.СложнаяВиза, НЕ ЗначениеЗаполнено(ТекущаяСтрока.РешениеПоСложнойВизе),НЕ ЗначениеЗаполнено(ТекущаяСтрока.Решение))
			 И НЕ ТекущаяСтрока.ДобавленаВручную //обрабатываем отдельно
			 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-18 (#2873)			 
			 И ТекущаяСтрока.Доступность = Истина Тогда
		
			   ДоступныеПоСтруктуре.Добавить(ТекущаяСтрока.Виза);
			   НоваяСтрока = ТабДоступныеПоСтруктуре.Добавить();
			   НоваяСтрока.Виза = ТекущаяСтрока.Виза;
		
		КонецЕсли; 
	КонецЦикла; 
	
	// Определим у каких пользователей есть права на установку виз, доступных по структуре.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДоступныеПоСтруктуре", ДоступныеПоСтруктуре);
	Запрос.УстановитьПараметр("ТабВизы", ТабДоступныеПоСтруктуре);
	Запрос.УстановитьПараметр("ГруппаВсеПользователи", Справочники.ГруппыПользователей.ВсеПользователи);
	Запрос.УстановитьПараметр("ОбъектВизирования", ОбъектВизирования);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-25 (#2873)
	Запрос.УстановитьПараметр("ТабДобВручную", ТаблицаДобавленоВручную);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-25 (#2873)	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабВизы.Виза КАК Виза
	|ПОМЕСТИТЬ ТабДоступныеПоСтруктуре
	|ИЗ
	|	&ТабВизы КАК ТабВизы
	|;
	|
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-25 (#2873)
	|ВЫБРАТЬ
	|	ТабДобВручную.Виза,
	|	ТабДобВручную.ПользовательДляОтправки КАК Пользователь
	|ПОМЕСТИТЬ ВТ_ТабДобВручную
	|ИЗ
	|	&ТабДобВручную КАК ТабДобВручную
	|;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ПраваУстановкиВиз.Пользователь КАК ПользовательСПравами,
	|	бит_ГруппыВизВизыГруппы.Виза,
	|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие,
	|	ВТ_ТабДобВручную.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_ТабДобВручнуюДоступныеПоГруппеВиз
	|ИЗ
	|	ВТ_ТабДобВручную КАК ВТ_ТабДобВручную
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
	|			ПО бит_ПраваУстановкиВиз.Виза = бит_ГруппыВизВизыГруппы.Ссылка
	|		ПО (ВТ_ТабДобВручную.Виза = бит_ГруппыВизВизыГруппы.Виза)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.Виза,
	|	ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.ПользовательскоеУсловие,
	|	ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.Пользователь
	|ПОМЕСТИТЬ ВТ_ДобавленныеСПравамиПоГруппам
	|ИЗ
	|ВТ_ТабДобВручнуюДоступныеПоГруппеВиз КАК ВТ_ТабДобВручнуюДоступныеПоГруппеВиз
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ПО ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.ПользовательСПравами = ГруппыПользователейСостав.Ссылка
	|			И ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.Пользователь = ГруппыПользователейСостав.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТабДобВручную КАК ВТ_ТабДобВручную
	|		ПО ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.Пользователь = ВТ_ТабДобВручную.Пользователь
	|			И ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.Пользователь = ВТ_ТабДобВручную.Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.Виза,
	|	ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.ПользовательскоеУсловие,
	|	ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.Пользователь
	|ИЗ
	|	ВТ_ТабДобВручнуюДоступныеПоГруппеВиз КАК ВТ_ТабДобВручнуюДоступныеПоГруппеВиз
	|ГДЕ
	|	ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.ПользовательСПравами = ВТ_ТабДобВручнуюДоступныеПоГруппеВиз.Пользователь
	|;
	|
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-25 (#2873)	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-08 (#2934)
	|РАЗРЕШЕННЫЕ
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-08 (#2934)	
	|	бит_ПраваУстановкиВиз.Пользователь КАК Пользователь,
	|	бит_ПраваУстановкиВиз.Виза КАК Виза,
	|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие КАК ПользовательскоеУсловие
	|ПОМЕСТИТЬ ТабПользовательВиза
	|ИЗ
	|	РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
	|ГДЕ
	|	бит_ПраваУстановкиВиз.Виза В(&ДоступныеПоСтруктуре)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-25 (#2873)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ПраваУстановкиВиз.Пользователь,
	|	бит_ПраваУстановкиВиз.Виза,
	|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие КАК ПользовательскоеУсловие
	|ИЗ
	|	РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВТ_ТабДобВручную ПО ВТ_ТабДобВручную.Пользователь = бит_ПраваУстановкиВиз.Пользователь И
	|			ВТ_ТабДобВручную.Виза = бит_ПраваУстановкиВиз.Виза
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ПраваУстановкиВиз.Пользователь,
	|	ВТ_ТабДобВручную.Виза,
	|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие
	|ИЗ
	|	РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВТ_ТабДобВручную ПО ВТ_ТабДобВручную.Пользователь = бит_ПраваУстановкиВиз.Пользователь И
	|			бит_ПраваУстановкиВиз.Виза = ЗНАЧЕНИЕ(Справочник.бит_ГруппыВиз.ВсеВизы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДобавленныеСПравамиПоГруппам.Пользователь,
	|	ВТ_ДобавленныеСПравамиПоГруппам.Виза,
	|	ВТ_ДобавленныеСПравамиПоГруппам.ПользовательскоеУсловие
	|ИЗ
	|	ВТ_ДобавленныеСПравамиПоГруппам КАК ВТ_ДобавленныеСПравамиПоГруппам	               
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-25 (#2873)	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-08 (#2934)
	| ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ПраваУстановкиВиз.Пользователь,
	|	ВТ_ТабДобВручную.Виза,
	|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие
	|ИЗ
	|	ВТ_ТабДобВручную КАК ВТ_ТабДобВручную
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|			ПО бит_ПраваУстановкиВиз.Пользователь = ГруппыПользователейСостав.Ссылка
	|		ПО ВТ_ТабДобВручную.Виза = бит_ПраваУстановкиВиз.Виза
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь В
	|			(ВЫБРАТЬ
	|				ВТ_ТабДобВручную.Пользователь
	|			ИЗ
	|				ВТ_ТабДобВручную КАК ВТ_ТабДобВручную)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-08 (#2934	
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	бит_ПраваУстановкиВиз.Пользователь,
	|	ТабДоступныеПоСтруктуре.Виза,
	|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие
	|ИЗ
	|	РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабДоступныеПоСтруктуре КАК ТабДоступныеПоСтруктуре
	|		ПО (ИСТИНА)
	|ГДЕ
	|	бит_ПраваУстановкиВиз.Виза = ЗНАЧЕНИЕ(Справочник.бит_ГруппыВиз.ВсеВизы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	бит_ПраваУстановкиВиз.Пользователь,
	|	бит_ГруппыВизВизыГруппы.Виза,
	|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие
	|ИЗ
	|	РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
	|		ПО бит_ПраваУстановкиВиз.Виза = бит_ГруппыВизВизыГруппы.Ссылка
	|ГДЕ
	|	бит_ГруппыВизВизыГруппы.Виза В(&ДоступныеПоСтруктуре)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацияСобытийОповещений.Виза КАК Виза,
	|	РегистрацияСобытийОповещений.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ТабЗарегестрированы
	|ИЗ
	|	РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК РегистрацияСобытийОповещений
	|ГДЕ
	|	РегистрацияСобытийОповещений.Объект = &ОбъектВизирования
	|	И РегистрацияСобытийОповещений.Оповещение.НеРегистрироватьПовторно = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПользовательВиза.Пользователь КАК Пользователь,
	|	ТабПользовательВиза.Виза КАК Виза,
	|	ТабПользовательВиза.ПользовательскоеУсловие КАК ПользовательскоеУсловие
	|ПОМЕСТИТЬ ТаблицаДоступныхВиз
	|ИЗ
	|	ТабПользовательВиза КАК ТабПользовательВиза
	|ГДЕ
	|	ТабПользовательВиза.Пользователь ССЫЛКА Справочник.Пользователи
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	ТабПользовательВиза.Виза,
	|	ТабПользовательВиза.ПользовательскоеУсловие
	|ИЗ
	|	ТабПользовательВиза КАК ТабПользовательВиза
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТабПользовательВиза.Пользователь = &ГруппаВсеПользователи
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГруппыПользователейСостав.Пользователь,
	|	ТабПользовательВиза.Виза,
	|	ТабПользовательВиза.ПользовательскоеУсловие
	|ИЗ
	|	ТабПользовательВиза КАК ТабПользовательВиза
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ПО ТабПользовательВиза.Пользователь = ГруппыПользователейСостав.Ссылка
	|ГДЕ
	|	ТабПользовательВиза.Пользователь ССЫЛКА Справочник.ГруппыПользователей
	|	И ТабПользовательВиза.Пользователь <> &ГруппаВсеПользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДоступныхВиз.Пользователь КАК Пользователь,
	|	ТаблицаДоступныхВиз.Виза КАК Виза,
	|	ТаблицаДоступныхВиз.ПользовательскоеУсловие КАК ПользовательскоеУсловие
	|ИЗ
	|	ТаблицаДоступныхВиз КАК ТаблицаДоступныхВиз
	|ГДЕ
	|	НЕ (ТаблицаДоступныхВиз.Пользователь, ТаблицаДоступныхВиз.Виза) В
	|				(ВЫБРАТЬ
	|					ТабЗарегестрированы.Пользователь КАК Пользователь,
	|					ТабЗарегестрированы.Виза КАК Виза
	|				ИЗ
	|					ТабЗарегестрированы КАК ТабЗарегестрированы)
	|	И НЕ ТаблицаДоступныхВиз.Виза ЕСТЬ NULL";
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	 Пока Выборка.Следующий() Цикл
		 
		 Если ЗначениеЗаполнено(Выборка.ПользовательскоеУсловие) Тогда
		 
		 	// Проверка пользовательского условия из РС.бит_ПраваУстановкиВиз
			ПараметрыУсловия = Новый Структура;
			ПараметрыУсловия.Вставить("ТекущийОбъект",ОбъектВизирования);
			ПараметрыУсловия.Вставить("ТекущийПользователь", Выборка.Пользователь);
			флУсловиеВыполнено = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(Выборка.ПользовательскоеУсловие,
									ПараметрыУсловия,,,"Ошибки");
			  
			Если НЕ флУсловиеВыполнено Тогда
				 Продолжить;
			КонецЕсли; 																	 
		 КонецЕсли; 
		 
		 Для каждого СтрокаОповещения Из МассивОповещений Цикл
			 
			 // проверка на визу в оповещении
			 Если ЗначениеЗаполнено(СтрокаОповещения.Виза) И СтрокаОповещения.Виза <> Выборка.Виза Тогда
			 	  Продолжить;
			 КонецЕсли; 
			 
			 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)
			 ОтборДобавленныхВручную.Вставить("Виза",Выборка.Виза);
			 ОтборДобавленныхВручную.Вставить("ПользовательДляОтправки",Выборка.Пользователь);
			 
			 НеПроверятьНаличиеЗаписи = ТаблицаДобавленоВручную.НайтиСтроки(ОтборДобавленныхВручную).Количество() > 0;
			 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-15 (#2873)			 
			 
			 // регистрируем событие
			 //+СБ. Пискунова #2691 Ошибка - Отправка идет на все визы, а не только  на доступные
			 //бит_фн_ОповещенияСервер.ЗарегистрироватьСобытиеДляОповещений(СтрокаОповещения.ВидСобытия, 
			 //   СтрокаОповещения.Оповещение, ОбъектВизирования, Выборка.Пользователь, Выборка.Виза); 			 
			 Если ДоступныеПоСтруктуре.Найти(СтрокаОповещения.Виза) <> Неопределено 
				 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-25 (#2873)
				 ИЛИ НеПроверятьНаличиеЗаписи
				 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-25 (#2873)
				 тогда
			 //+СБ. Пискунова #2691 30.03.2017
				 //Будем добавлять запись в РС Регистрация событий для оповещений только в том случае, если  Процесс запущен, либо 
				 //идет проверка запуска процесса на наличие пользователей.
				 //Эти проверки так же нужны, когда прошла отмена запуска процесса, а визы еще попадают в регистр и поэтому письма отправляются
				 
				 Если ТипЗнч(ОбъектВизирования) = ТипЗнч(Документы.бит_ФормаВводаБюджета.ПустаяСсылка()) Тогда
					 Если ОбъектВизирования.СБ_ПроцессЗапущен Тогда
						 бит_фн_ОповещенияСервер.ЗарегистрироватьСобытиеДляОповещений(СтрокаОповещения.ВидСобытия
							 , СтрокаОповещения.Оповещение
							 , ОбъектВизирования
							 , Выборка.Пользователь
							 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)	
							 //, Выборка.Виза);
							 //Заменено на:
							 , Выборка.Виза,
							 НеПроверятьНаличиеЗаписи);
							 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-15 (#2873)
						 
					 ИначеЕсли     ОбъектВизирования.СБ_ЗапускПроцессаСПроверкой и ЗначениеЗаполнено(Выборка.Пользователь) Тогда
						 бит_фн_ОповещенияСервер.ЗарегистрироватьСобытиеДляОповещений(СтрокаОповещения.ВидСобытия
							 , СтрокаОповещения.Оповещение
							 , ОбъектВизирования
							 , Выборка.Пользователь
							 , Выборка.Виза);					 
					 КонецЕсли;
				 Иначе
					 бит_фн_ОповещенияСервер.ЗарегистрироватьСобытиеДляОповещений(СтрокаОповещения.ВидСобытия, 
					 		СтрокаОповещения.Оповещение, ОбъектВизирования, Выборка.Пользователь, Выборка.Виза); 
				 КонецЕсли;
			 КонецЕсли;
			 //-СБ. Пискунова #2691 30.03.2017
			 
		 КонецЦикла; // по массиву оповещений	
	 КонецЦикла;  // по выборке

КонецПроцедуры

#КонецОбласти

#Область СистемаВзаимодействия

Процедура СоздатьОбсуждения(ОповещенияПолучателям) Экспорт

	# Если НЕ ВнешнееСоединение Тогда 
		
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
			Возврат;	
		КонецЕсли; 
		
		Если НЕ ОбсужденияСлужебныйВызовСервера.Подключены() Тогда
			Возврат;
		КонецЕсли; 
		
		УстановитьПривилегированныйРежим(Истина);
		
		РеквизитыПользователей = Новый Соответствие(); 
		Для каждого ПараметрыОповещения Из ОповещенияПолучателям Цикл
			// Конструктор см. в Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.НовыеПараметрыОповещения();
			Если ТипЗнч(ПараметрыОповещения.Пользователь) = Тип("СправочникСсылка.Пользователи") 
				И ПараметрыОповещения.СоздаватьОбсуждение Тогда
				
				РеквизитыПользователя = РеквизитыПользователей.Получить(ПараметрыОповещения.Пользователь);
				Если РеквизитыПользователя = Неопределено Тогда
					РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОповещения.Пользователь, 
					"ИдентификаторПользователяИБ");
					РеквизитыПользователей.Вставить(ПараметрыОповещения.Пользователь, РеквизитыПользователя);
				КонецЕсли; 
				
				ИдентификаторПользователя = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(РеквизитыПользователя.ИдентификаторПользователяИБ);
				Если ИдентификаторПользователя = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыСообщения = ПодготовитьПараметрыСообщения(ПараметрыОповещения);
				
				Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
				Обсуждение.Заголовок = ПараметрыСообщения.Заголовок;
				Обсуждение.Участники.Добавить(ИдентификаторПользователя);
				Обсуждение.Записать();
				
				СообщениеСВ = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
				СообщениеСВ.Получатели.Добавить(ИдентификаторПользователя);
				СообщениеСВ.Текст = ПараметрыСообщения.Текст;
				СообщениеСВ.Данные = ПараметрыСообщения.Данные;
				Для каждого Элемент Из ПараметрыСообщения.Ссылки Цикл
					СообщениеСВ.Действия.Добавить(ПолучитьНавигационнуюСсылку(Элемент.Значение), Элемент.Представление);
				КонецЦикла; 
				СообщениеСВ.Записать();	
			КонецЕсли; 
		КонецЦикла; 
	# КонецЕсли 

КонецПроцедуры
 
#КонецОбласти 

#Область ФормированиеСообщений

// Функция формирует сообщение по шаблону сообщения.
// 
// Параметры:
//  ШаблонСообщения    - СправочникСсылка.бит_фн_ШаблоныСообщений.
//  СтруктураКонтекст  - СтруктураКонтекст - Структура в контексте которой вычисляются параметры шаблона.
// 
// Возвращаемое значение:
//   СтруктураКонтекст   - Структура
//                                  -Заголовок.
//                                  -Текст.
//                                  -Подпись.
// 
Функция СформироватьСообщениеПоШаблону(ШаблонСообщения,СтруктураКонтекст) Экспорт

	СтруктураСообщения = Новый Структура("Заголовок,Текст,Подпись"
	                               ,ШаблонСообщения.Сообщение_Заголовок
								   ,ШаблонСообщения.Сообщение_Текст
								   ,ШаблонСообщения.Сообщение_Подпись);
	
	СтрОткрытие = "/[";
	СтрЗакрытие = "/]";	
	ПараметрыТекста = Новый Соответствие;
	
	// Определим параметры шаблона
	ОпределитьПараметрыТекста(СтруктураСообщения.Заголовок,ПараметрыТекста);
	ОпределитьПараметрыТекста(СтруктураСообщения.Текст    ,ПараметрыТекста);
	ОпределитьПараметрыТекста(СтруктураСообщения.Подпись  ,ПараметрыТекста);

	Для каждого КиЗ Из ПараметрыТекста Цикл
		
		СтрШаблон = СтрОткрытие+КиЗ.Ключ+СтрЗакрытие;
		
		// Вычислим значения параметров шаблона
		Выражение       = "СтруктураКонтекст."+КиЗ.Ключ;
		Попытка
			
			ЗначениеШаблона = Строка(Вычислить(Выражение));
			
		Исключение
			
			//БИТ АКриштопов 08042016 ++ если выражение не удалось вычислить, то шаблон сообщения в текст вставлять не требуется.
			//ЗначениеШаблона = СтрШаблон;
			ЗначениеШаблона = "";
			//БИТ АКриштопов 08042016 --
			
		КонецПопытки;
		
		// Подставим вычисленные значения параметров в шаблон.
		СтруктураСообщения.Заголовок = СтрЗаменить(СтруктураСообщения.Заголовок,СтрШаблон,ЗначениеШаблона);
		СтруктураСообщения.Текст     = СтрЗаменить(СтруктураСообщения.Текст    ,СтрШаблон,ЗначениеШаблона);
		СтруктураСообщения.Подпись   = СтрЗаменить(СтруктураСообщения.Подпись  ,СтрШаблон,ЗначениеШаблона);
		
	КонецЦикла; 
	
	Возврат СтруктураСообщения;
	
КонецФункции // СформироватьСообщениеПоШаблону()

// Функция определяет параметры, используемые в данном шаблоне.
// 
// Параметры:
//  ШаблонСообщения    - СправочникСсылка.бит_фн_ШаблоныСообщений.
//  ПараметрыТекста    - Соответствие.
// 
// Возвращаемое значение:
//   ПараметрыТекста   - Соответствие.
// 
Процедура ОпределитьПараметрыТекста(ШаблонТекста,ПараметрыТекста = Неопределено) Экспорт
	
	Если ПараметрыТекста = Неопределено Тогда
		
		ПараметрыТекста = Новый Соответствие;
		
	КонецЕсли; 
	СтрОткрытие = "/[";
	СтрЗакрытие = "/]";
	
	Стр = ШаблонТекста;	
	ЧислоШаблонов = СтрЧислоВхождений(Стр,СтрОткрытие);
	Для н=1 По ЧислоШаблонов Цикл
		
		НомерСимволаОткрытие = Найти(Стр,СтрОткрытие);
		Если НомерСимволаОткрытие>0 Тогда
			
			Стр = Сред(Стр,НомерСимволаОткрытие+2);
			НомерСимволаЗакрытие = Найти(Стр,СтрЗакрытие);
			Если НомерСимволаЗакрытие>0 Тогда
				
				ИмяПараметра =СокрЛП(Лев(Стр,НомерСимволаЗакрытие-1));							
				Если ПараметрыТекста[ИмяПараметра] = Неопределено Тогда
					ПараметрыТекста.Вставить(ИмяПараметра);
				КонецЕсли; 
				Стр = Сред(Стр,НомерСимволаЗакрытие+2);
				
			КонецЕсли; // Нашли закрытие
			
		КонецЕсли; // Нашли открытие
		
	КонецЦикла; // По количеству параметров в тексте
	
КонецПроцедуры // ОпределитьПараметрыТекста()

// Функция получает мобильные устройства пользователя.
//
// Параметры:
//  Получатель               - СправочникСсылка.Пользователи.
//  КэшАдресов               - ТаблицаЗначений.
//
// Возвращаемое значение:
//  МобильныеУстройства - Строка.
//
Функция ПолучитьМобильныеУстройства(Получатель, КэшАдресов, ВидКонтактнойИнформации = "МобильноеУстройство") Экспорт

	МобильныеУстройства = Новый Массив;
	
	// Вначале пробуем найти адрес в кэше.
	СтрОтбор = Новый Структура("Получатель,ВидКонтактнойИнформации", Получатель, ВидКонтактнойИнформации);
	
	МассивСтрок = КэшАдресов.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() >0 Тогда
		
		// Нашли в кэше
		Для каждого ТекСтрока Из МассивСтрок Цикл
		
			МобильныеУстройства.Добавить(ТекСтрока.Адрес);
		
		КонецЦикла; 
		
	Иначе	

		// В кэше нет, извлекаем запросом.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", Получатель);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТабУстр.Устройство
		               |ИЗ
		               |	РегистрСведений.бит_УстройстваПользователей КАК ТабУстр
		               |ГДЕ
		               |	НЕ ТабУстр.Отключено
		               |	И ТабУстр.Пользователь = &Пользователь";
					   
		Если ВидКонтактнойИнформации = "ЧатТелеграм" Тогда
						   
			Запрос.Текст = Запрос.Текст + "	И ТабУстр.Устройство ССЫЛКА Справочник.бит_ЧатыTelegram";
			
		Иначе	
			
			Запрос.Текст = Запрос.Текст + "	И ТабУстр.Устройство ССЫЛКА Справочник.бит_МобильныеУстройства";
			
		КонецЕсли; 			   
					   
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МобильныеУстройства.Добавить(Выборка.Устройство);
			
			НоваяСтрока = КэшАдресов.Добавить();		
			НоваяСтрока.Получатель = Получатель;
		    НоваяСтрока.ВидКонтактнойИнформации = ВидКонтактнойИнформации;			
			НоваяСтрока.Адрес = Выборка.Устройство;
			
		КонецЦикла;  // по мобильным устройствам
		
	КонецЕсли;	
		
	Возврат МобильныеУстройства;
	
КонецФункции // ПолучитьМобильныеУстройства()

// Функция получает адрес получателя оповещения из кэша или регистра КонтактнаяИнформация.
// 
// Параметры:
//  Получатель               - СправочникСсылка.Пользователи.
//  ВидКонтактнойИнформации  - СправочникСсылка.ВидыКонтактнойИнформации.
//  КэшАдресов               - ТаблицаЗначений.
// 
// Возвращаемое значение:
//   СтрАдрес   - Строка.
// 
Функция ПолучитьАдрес(Получатель,ВидКонтактнойИнформации,КэшАдресов) Экспорт

	// Вначале пробуем найти адрес в кэше
	СтрОтбор = Новый Структура("Получатель,ВидКонтактнойИнформации",Получатель,ВидКонтактнойИнформации);
	
	МассивСтрок = КэшАдресов.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() >0 Тогда
		// Нашли в кэше
		СтрАдрес = МассивСтрок[0].Адрес;
	Иначе	
		
		// Не нашли в кэше - получаем адрес из контактной информации.
		
		Запрос = Новый Запрос;	
		Запрос.УстановитьПараметр("Объект",Получатель);
		Запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Вид",ВидКонтактнойИнформации);
		
		Если бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("РегистрыСведений", "КонтактнаяИнформация") Тогда
			
			// Есть регистр КонтактнаяИнформация
			Запрос.Текст = "ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК Адрес
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И КонтактнаяИнформация.Тип  = &Тип
			|	И КонтактнаяИнформация.Вид  = &Вид";
			
		Иначе	
			
			//+СБ Пискунова #2691 20.02.2017
			Если ЗначениеЗаполнено(Получатель) Тогда
			//-СБ Пискунова #2691 20.02.2017
			
			МетаПолучатель = Получатель.Метаданные();
			Если бит_РаботаСМетаданными.ЕстьТабЧасть("КонтактнаяИнформация", МетаПолучатель) Тогда
				
				// Контактная информация в табличных частях
				Запрос.Текст = "ВЫБРАТЬ
				               |	ТабКонтактнаяИнформация.Представление КАК Адрес
				               |ИЗ
				               |	Справочник.%ИмяСправочника%.КонтактнаяИнформация КАК ТабКонтактнаяИнформация
				               |ГДЕ
				               |	ТабКонтактнаяИнформация.Ссылка = &Объект
				               |	И ТабКонтактнаяИнформация.Тип = &Тип
				               |	И ТабКонтактнаяИнформация.Вид = &Вид";
							   
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ИмяСправочника%",МетаПолучатель.Имя);			   
				
			//+СБ Пискунова #2691 20.02.2017
			ИначеЕсли ТипЗнч(Получатель) = ТипЗнч(Справочники.бит_БК_Инициаторы.ПустаяСсылка()) Тогда
				Запрос.Текст =  "ВЫБРАТЬ
				|	бит_БК_Инициаторы.Email КАК Адрес
				|ИЗ
				|	Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
				|ГДЕ
				|	бит_БК_Инициаторы.Ссылка = &Объект";
			КонецЕсли; 	
			//-СБ Пискунова #2691 20.02.2017				
			КонецЕсли; 
			
		КонецЕсли; 
		
		//+СБ Пискунова #2691 20.02.2017
		Если ЗначениеЗаполнено(Получатель) Тогда
		//-СБ Пискунова #2691 20.02.2017		
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		// Запишем в кэш полученный адрес
		НоваяСтрока = КэшАдресов.Добавить();		
		НоваяСтрока.Получатель              = Получатель;
		НоваяСтрока.ВидКонтактнойИнформации = ВидКонтактнойИнформации;
		Если Выборка.Следующий() Тогда
			НоваяСтрока.Адрес = Выборка.Адрес;
		Иначе
			// Если адрес не указан запишем в кэш пустую строку.
			НоваяСтрока.Адрес = "";
		КонецЕсли; 
		//+СБ Пискунова #2691 20.02.2017
			СтрАдрес = НоваяСтрока.Адрес;
		Иначе		
			СтрАдрес = "";
		КонецЕсли;
		//-СБ Пискунова #2691 20.02.2017	
	КонецЕсли; 

	Возврат СтрАдрес;
	
КонецФункции // ПолучитьАдрес()

#КонецОбласти

#Область РаботаСОбработкамиДоставки

// Функция получает структуру настроек доставки 
// из табличной части справочника бит_фн_НастройкиДоставкиОповещений 
// либо инициализирует структуру настроек доставки по исходя из реквизитов обработки доставки.
// 
// Параметры:
//  Контейнет  - ОбработкаОбъект,СправочникТабличнаяЧасть.бит_фн_НастройкиДоставкиОповещений.НастройкиДоставки.
// 
// Возвращаемое значение:
//   НастройкиДоставки   - Структура.
// 
Функция ПолучитьСтруктуруНастроекДоставки(Контейнер)  Экспорт
	
	НастройкиДоставки = Новый Структура;
	
	Если ТипЗнч(Контейнер) = Тип("СправочникТабличнаяЧасть.бит_фн_НастройкиДоставкиОповещений.НастройкиДоставки") Тогда
		
		Для каждого СтрокаТаблицы Из Контейнер Цикл
		
			НастройкиДоставки.Вставить(СтрокаТаблицы.ИмяНастройки,СтрокаТаблицы.ЗначениеНастройки);
		
		КонецЦикла; 
		
	Иначе	
		
		Для каждого МетаРеквизит Из Контейнер.Метаданные().Реквизиты Цикл
			
			ИмяРеквизита = МетаРеквизит.Имя;
			Если Найти(ИмяРеквизита,"Настройка_") > 0 Тогда
				
				ИмяНастройки = СтрЗаменить(ИмяРеквизита,"Настройка_","");
				НастройкиДоставки.Вставить(ИмяНастройки,Контейнер[ИмяРеквизита]);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	
	Возврат НастройкиДоставки;
	
КонецФункции // ПолучитьСтруктуруНастроекДоставки()

// Функция Получает обработку доставки оповещений  по указанному элементу 
// справочника ОбъектыСистемы или по указанному элементу справочника ВнешниеОбработки.
// 
// Параметры:
//  СсылкаНаОбработку  - СправочникСсылка.бит_ОбъектыСистемы, СправочникСсылка.ВнешниеОбработки.
//  ВыводитьСообщения  - Булево.
// 
// Возвращаемое значение:
//   ОбъектОбработкаДоставки   - ОбработкаОбъект.
// 
Функция ПолучитьОбработкуДоставки(СсылкаНаОбработку,ВыводитьСообщения = Ложь)  Экспорт
	
	ОбъектОбработкаДоставки = Неопределено;
	Если ЗначениеЗаполнено(СсылкаНаОбработку) Тогда
		
		Если ТипЗнч(СсылкаНаОбработку) = Тип("СправочникСсылка.бит_ОбъектыСистемы") Тогда
			// Создаем внутреннюю обработку доставки
			Попытка
				МенеджерОбработки = Обработки[СсылкаНаОбработку.ИмяОбъекта];
				ОбъектОбработкаДоставки = МенеджерОбработки.Создать();
			Исключение
				
				Если ВыводитьСообщения Тогда
					
					ТекстСообщения = НСтр("ru = 'Не удалось создать внутреннюю обработку доставки %ОбработкаДоставки%! По причине %ОписаниеОшибки%'");
					СтруктураЗамены= Новый Структура; 
					СтруктураЗамены.Вставить("ОбработкаДоставки",СсылкаНаОбработку);
					СтруктураЗамены.Вставить("ОписаниеОшибки",Строка(ОписаниеОшибки()));
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ЗаполнитьПараметрыСтроки(ТекстСообщения,СтруктураЗамены);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);				
					
				КонецЕсли; 
			КонецПопытки;

		КонецЕсли;
		
	КонецЕсли; // Ссылка заполнена
	
	Возврат ОбъектОбработкаДоставки;
	
КонецФункции // ПолучитьОбработкуДоставки()

// Функция проверяет пригодность обработки для выполнения доставки оповещений.
// 
// Параметры:
//  ОбъектОбработкаДоставки  - ОбработкаОбъект.
//  НаименованиеОбработки    - Строка.
//  ВыводитьСообщения        - Булево.
// 
// Возвращаемое значение:
//   флОбработкаКорректна   - Булево.
// 
Функция ОбработкаДоставкиКорректна(ОбъектОбработкаДоставки,НаименованиеОбработки = "",ВыводитьСообщения = Ложь) Экспорт
	
	флОбработкаКорректна = Ложь;
	
	// Проверим является ли данная обработка обработкой доставки оповещений.
	Если НЕ ОбъектОбработкаДоставки = Неопределено Тогда
		
		Попытка
			
			флОбработкаКорректна = ОбъектОбработкаДоставки.ЭтоОбработкаДоставкиОповещений();
			
		Исключение
			
			флОбработкаКорректна = Ложь;				 
			
		КонецПопытки;
		
		Если НЕ флОбработкаКорректна Тогда
			
			ОбъектОбработкаДоставки = Неопределено;
			
			Если ВыводитьСообщения Тогда
				
				ТекстСообщения = НСтр("ru = 'Обработка ""%ОбработкаДоставки%"" не является обработкой доставки оповещений!'");
				СтруктураЗамены= Новый Структура("ОбработкаДоставки",НаименованиеОбработки); 
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ЗаполнитьПараметрыСтроки(ТекстСообщения,СтруктураЗамены);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; // Обработка получена
	
	Возврат флОбработкаКорректна;
	
КонецФункции // ПроверитьОбработкуДоставки()

#КонецОбласти

// Функция получает настройки компоновщика.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура.
// 
Функция ПолучитьНастройкиКомпоновщика(НастройкиКомпоновщика) Экспорт
	
	СтруктураНастроек = НастройкиКомпоновщика.Получить();
	
	Если НЕ ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
	
		СтруктураНастроек = Новый Структура;
	
	КонецЕсли; 	
	
	Возврат СтруктураНастроек;
	
КонецФункции // ПолучитьНастройки()

// Функция получает таблицу назначенных оповещений.
// 
// Возвращаемое значение:
//   ТаблицаОповещений   - ТаблицаЗначений.
// 
Функция ПолучитьАктивныеОповещения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_фн_НазначениеОповещений.ВидСобытия КАК ВидСобытия,
	|	бит_фн_НазначениеОповещений.ОбъектСистемы КАК ОбъектСистемы,
	|	бит_фн_НазначениеОповещений.Оповещение,
	|	бит_фн_НазначениеОповещений.Оповещение.Статус КАК Статус,
	|	бит_фн_НазначениеОповещений.Оповещение.Виза КАК Виза,
	|	бит_фн_НазначениеОповещений.Оповещение.Решение КАК Решение,
	|	бит_фн_НазначениеОповещений.Оповещение.ПользовательскоеУсловие КАК ПользовательскоеУсловие,
	|	бит_фн_НазначениеОповещений.Оповещение.АлгоритмПроцесса КАК АлгоритмПроцесса,
	|	бит_фн_НазначениеОповещений.Оповещение.ТочкаАлгоритма КАК ТочкаАлгоритма,
	|	бит_фн_НазначениеОповещений.Оповещение.ФоновыйРежим КАК ФоновыйРежим
	|ИЗ
	|	РегистрСведений.бит_фн_НазначениеОповещений КАК бит_фн_НазначениеОповещений";
	
	ТаблицаОповещений = Запрос.Выполнить().Выгрузить();			   
	
	ТаблицаОповещений.Индексы.Добавить("ВидСобытия,ОбъектСистемы");
	
	Возврат ТаблицаОповещений;
	
КонецФункции // ПолучитьАктивныеОповещения()

// Процедура готовит список выбора видов событий в зависимости от вида решения 
//
// Параметры:
// СписокВыбора - СписокЗначений.
// ЭтоЕРП - Булево.
//
Процедура ЗаполнитьСписокВыбораВидовСобытий(СписокВыбора, ЭтоЕРП) Экспорт

	ИсключенияERP = Новый Структура;
	ИсключенияERP.Вставить("НапоминанияПоГрафикуНачислений");
	ИсключенияERP.Вставить("НапоминанияПоГрафикуПлатежей");
	// Список выбора для вида события
	Для каждого ТекЗнчМета Из Метаданные.Перечисления.бит_фн_ВидыСобытийОповещений.ЗначенияПеречисления Цикл
	
		Если ЭтоЕРП И ИсключенияERP.Свойство(ТекЗнчМета.Имя) Тогда
		
			Продолжить; 
		
		КонецЕсли;
		СписокВыбора.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений[ТекЗнчМета.Имя]);
	
	КонецЦикла; 
	

КонецПроцедуры // ЗаполнитьСписокВыбораВидовСобытий()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет регистрацию событий для оповещений.
// 
// Параметры:
//  Источник  - СправочникСсылка, ДокументСсылка.
//  Отказ     - Булево.
//  РежимЗаписи - РежимЗаписиДокумента.
// 
Процедура ВыполнитьРегистрациюСобытий(Источник,Отказ,РежимЗаписи = Неопределено)

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьМеханизмОповещений") Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаОповещений  = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_фн_АктивныеОповещения");
	
	// Обработаем события
	Если НЕ ТаблицаОповещений = Неопределено И НЕ Источник.ДополнительныеСвойства.Свойство("бит_ОтключитьРегистрациюОповещений") Тогда
		
		// Определим объект системы по метаданным
		ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Источник.Метаданные());
		
		// Определим вид события в зависимости от режима записи.
		Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		
			ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ЗаписанДокумент;
			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ПроведенДокумент;
			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ОтмененоПроведениеДокумента;
			
		ИначеЕсли РежимЗаписи = Неопределено Тогда	
			
			ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ЗаписанСправочник;
			
		КонецЕсли; 
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаОповещений",   ТаблицаОповещений);
		Запрос.УстановитьПараметр("ОбъектСистемы",       ОбъектСистемы);
		Запрос.УстановитьПараметр("ВидСобытия",          ВидСобытия);
		Запрос.УстановитьПараметр("Объект",              Источник.Ссылка);
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаОповещений.Оповещение КАК Оповещение,
			|	ТаблицаОповещений.ПользовательскоеУсловие КАК ПользовательскоеУсловие,
			|	ТаблицаОповещений.ВидСобытия КАК ВидСобытия,
			|	ТаблицаОповещений.ОбъектСистемы КАК ОбъектСистемы
			|ПОМЕСТИТЬ Оповещения
			|ИЗ
			|	&ТаблицаОповещений КАК ТаблицаОповещений
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Оповещения.Оповещение КАК Оповещение,
			|	Оповещения.ПользовательскоеУсловие КАК ПользовательскоеУсловие
			|ПОМЕСТИТЬ ОповещенияПоОбъекту
			|ИЗ
			|	Оповещения КАК Оповещения
			|ГДЕ
			|	Оповещения.ВидСобытия = &ВидСобытия
			|	И Оповещения.ОбъектСистемы = &ОбъектСистемы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РегистрацияОповещений.Оповещение КАК Оповещение
			|ПОМЕСТИТЬ ОповещенияНеРегистрировать
			|ИЗ
			|	РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК РегистрацияОповещений
			|ГДЕ
			|	РегистрацияОповещений.Пользователь = &ТекущийПользователь
			|	И РегистрацияОповещений.Объект = &Объект
			|	И РегистрацияОповещений.Оповещение В
			|			(ВЫБРАТЬ
			|				Оповещения.Оповещение КАК Оповещение
			|			ИЗ
			|				Оповещения КАК Оповещения
			|			ГДЕ
			|				Оповещения.Оповещение.НеРегистрироватьПовторно = ИСТИНА)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОповещенияПоОбъекту.Оповещение КАК Оповещение,
			|	ОповещенияПоОбъекту.ПользовательскоеУсловие КАК ПользовательскоеУсловие
			|ИЗ
			|	ОповещенияПоОбъекту КАК ОповещенияПоОбъекту
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОповещенияНеРегистрировать КАК ОповещенияНеРегистрировать
			|		ПО ОповещенияПоОбъекту.Оповещение = ОповещенияНеРегистрировать.Оповещение
			|ГДЕ
			|	ОповещенияНеРегистрировать.Оповещение ЕСТЬ NULL";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл			
			флСоответствует = Истина;
			// Если задано пользовательское условие, проверим его.
			Если ЗначениеЗаполнено(Выборка.ПользовательскоеУсловие) Тогда
				
				СтруктураКонтекст = Новый Структура("ТекущийОбъект,Статус",Источник,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
				флСоответствует   = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(Выборка.ПользовательскоеУсловие, СтруктураКонтекст);
				
			КонецЕсли; 
			
			Если флСоответствует Тогда
				ЗарегистрироватьСобытиеДляОповещений(ВидСобытия, Выборка.Оповещение, Источник.Ссылка);
			КонецЕсли;  // Событие соответствует отборам
		КонецЦикла; // По массиву оповещений
	КонецЕсли; // Есть оповещения, нужно выполнять регистрацию.

КонецПроцедуры // ВыполнитьРегистрациюСобытий()

Процедура НачатьСозданиеОбсуждения(Параметры)
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НЕ ОбсужденияСлужебныйВызовСервера.Подключены() Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&СтатусРегистрации КАК СтатусРегистрации,
	|	&ВидСобытия КАК ВидСобытия,
	|	&Оповещение КАК Оповещение,
	|	&Объект КАК Объект,
	|	&ИД КАК ИД,
	|	&Статус КАК Статус,
	|	&Виза КАК Виза,
	|	&Решение КАК Решение,
	|	&Пользователь КАК Пользователь,
	|	&Комментарий КАК Комментарий
	|ИТОГИ ПО
	|	ВидСобытия,
	|	Оповещение,
	|	Пользователь";
	
	Запрос.УстановитьПараметр("Период",			  Параметры.Период);
	Запрос.УстановитьПараметр("СтатусРегистрации",Параметры.СтатусРегистрации);
	Запрос.УстановитьПараметр("ВидСобытия",		  Параметры.ВидСобытия);
	Запрос.УстановитьПараметр("Оповещение",		  Параметры.Оповещение);
	Запрос.УстановитьПараметр("Объект",			  Параметры.Объект);
	Запрос.УстановитьПараметр("ИД",				  Параметры.ИД);
	Запрос.УстановитьПараметр("Статус",			  Параметры.Статус);
	Запрос.УстановитьПараметр("Виза",			  Параметры.Виза);
	Запрос.УстановитьПараметр("Решение",		  Параметры.Решение);
	Запрос.УстановитьПараметр("Пользователь",	  Параметры.Пользователь);
	Запрос.УстановитьПараметр("Комментарий",	  Параметры.Комментарий);
	
	Результат = Запрос.Выполнить();
	Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.ОбработатьСобытияОповещений(Результат,"Нет", Ложь, Истина);
	
КонецПроцедуры

Функция ПодготовитьПараметрыСообщения(ПараметрыОповещения)

	Ключи = ""
		  + "Заголовок,"
		  + "Текст,"
		  + "Данные,"
		  + "Ссылки";
	
	ПараметрыСообщения = Новый Структура(Ключи); 	
	
	Ссылки 			  = Новый СписокЗначений(); 
	ТекущийОбъект 	  = Неопределено;
	Оповещение 		  = Неопределено;
	ВыборкаДокументов = Неопределено;
	Если ТипЗнч(ПараметрыОповещения.ДополнительныеСвойства) = Тип("Структура") Тогда 
		ПараметрыОповещения.ДополнительныеСвойства.Свойство("ТекущийОбъект", ТекущийОбъект);
		ПараметрыОповещения.ДополнительныеСвойства.Свойство("Оповещение", Оповещение);
		ПараметрыОповещения.ДополнительныеСвойства.Свойство("ВыборкаДокументов", ВыборкаДокументов);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыОповещения.Сообщение_Заголовок) Тогда
		Заголовок = ПараметрыОповещения.Сообщение_Заголовок;
	ИначеЕсли ЗначениеЗаполнено(Оповещение) Тогда
		Заголовок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Оповещение, "ВидСобытия");
	Иначе	
		Заголовок = "Новое обсуждение " + ТекущаяДата();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыОповещения.Сообщение_Текст) Тогда
		Текст = ПараметрыОповещения.Сообщение_Текст;
		Если ПараметрыОповещения.ТипТекстаСообщения = "HTML" Тогда
			Текст = Заголовок;
		КонецЕсли;
	Иначе	
		Текст = Заголовок;
	КонецЕсли;
	
	ДобавитьСсылкиДляСообщений(ТекущийОбъект, Ссылки);
	Если ТипЗнч(ВыборкаДокументов) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ВыборкаДокументов.Сбросить();
		Пока ВыборкаДокументов.Следующий() Цикл
			ДобавитьСсылкиДляСообщений(ВыборкаДокументов.Объект, Ссылки);
		КонецЦикла; 
	КонецЕсли; 
	
	ПараметрыСообщения.Заголовок = Заголовок;
	ПараметрыСообщения.Текст 	 = Текст;
	ПараметрыСообщения.Данные 	 = "ОткрытьНавигационнуюСсылку";
	ПараметрыСообщения.Ссылки 	 = Ссылки;
	
	Возврат ПараметрыСообщения;
	
КонецФункции

Процедура ДобавитьСсылкиДляСообщений(Ссылка, Ссылки)
	
	Если ЗначениеЗаполнено(Ссылка) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Ссылка)) Тогда
		Ссылки.Добавить(Ссылка, Строка(Ссылка));
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
