
#Область СлужебныйПрограммныйИнтерфейс

#Область ШаблонНазначенияПлатежа

Функция УсловиеШаблонаНазначенияПлатежаВыполнено(МаскаНазначенияПлатежа, Запрос, ТекстЗапроса, ТочкаПоиска) Экспорт

	НайденоЗначение = Ложь;
	
	Если СтрНайти(МаскаНазначенияПлатежа, "&")>0
		И СтрНайти(МаскаНазначенияПлатежа, "~")>0
		ИЛИ СтрНайти(МаскаНазначенияПлатежа, "{")>0 Тогда
		
		МассивШаблонов = СтрРазделить(МаскаНазначенияПлатежа, "{}", Ложь);
		
		Первый = Истина;
		УсловияШаблона = "";
		КоличествоШаблонов = МассивШаблонов.Количество();
		Для каждого СтрокаШаблона Из МассивШаблонов Цикл
			
			Если Первый Тогда
				УсловияШаблона = УсловияШаблона + "(";
				Первый = Ложь;
				СтрокаШаблонаНов = СтрокаШаблона;
			ИначеЕсли Лев(СтрокаШаблона, 1) = "&" Тогда 
				
				СтрокаШаблонаНов = Сред(СтрокаШаблона, 2);
				СловоУсловия = "И";
			Иначе
				СловоУсловия = "ИЛИ";
				СтрокаШаблонаНов = Сред(СтрокаШаблона, 2);
			КонецЕсли;	
			
			Если СтрНайти(СтрокаШаблонаНов, "&")>0
				И СтрНайти(СтрокаШаблонаНов, "~")>0 Тогда
			
				РазложитьСтрокуУсловий(СтрокаШаблонаНов, УсловияШаблона, ТочкаПоиска);
			ИначеЕсли СтрНайти(СтрокаШаблонаНов, "&")>0 Тогда	
				
				Если КоличествоШаблонов = МассивШаблонов.Найти(СтрокаШаблона)+1 Тогда 
					УсловияШаблона = УсловияШаблона + СловоУсловия + "(" + НоваяСтрокаУсловия(СтрокаШаблонаНов, ТочкаПоиска, "&") + ")";
				Иначе	
					УсловияШаблона = УсловияШаблона + НоваяСтрокаУсловия(СтрокаШаблонаНов, ТочкаПоиска, "&") + ") " ;
				КонецЕсли; 
			ИначеЕсли СтрНайти(СтрокаШаблонаНов, "~")>0 Тогда	
				
				Если КоличествоШаблонов = МассивШаблонов.Найти(СтрокаШаблона)+1 Тогда 
					УсловияШаблона =  УсловияШаблона + СловоУсловия + "(" + НоваяСтрокаУсловия(СтрокаШаблонаНов, ТочкаПоиска, "~") + ")";
				Иначе	
					УсловияШаблона = УсловияШаблона + НоваяСтрокаУсловия(СтрокаШаблонаНов, ТочкаПоиска, "~") + ") ";
				КонецЕсли; 
			Иначе	
				УсловияШаблона = УсловияШаблона + СловоУсловия + "(" + ТочкаПоиска + " ПОДОБНО """ + СтрокаШаблонаНов + """)";
			КонецЕсли; 
		КонецЦикла; 
		
	ИначеЕсли СтрНайти(МаскаНазначенияПлатежа, "&")>0 Тогда 
		УсловияШаблона = НоваяСтрокаУсловия(МаскаНазначенияПлатежа, ТочкаПоиска,  "&");
	ИначеЕсли СтрНайти(МаскаНазначенияПлатежа, "~")>0 Тогда 
		УсловияШаблона = НоваяСтрокаУсловия(МаскаНазначенияПлатежа, ТочкаПоиска,  "~");
	Иначе	
		УсловияШаблона = ТочкаПоиска + " ПОДОБНО """ + МаскаНазначенияПлатежа + """";
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияШаблона"	,УсловияШаблона);
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		РезультатДок 	= Запрос.Выполнить();
		НайденоЗначение = НЕ РезультатДок.Пустой();
	Исключение
	КонецПопытки; 

	Возврат НайденоЗначение;
	
КонецФункции

#КонецОбласти 

#Область ЗаполнениеДополнительныхАналитикВДокументах

// Процедура добавляет аналитику в набор дополнительных аналитик.
// 
// Параметры:
//  ТекущийОбъект  		- ДокументОбъект.
//  НаборЗаписей   		- РегистрСведенийНаборЗаписей.бит_ДополнительныеАналитики.
//  Аналитика      		- Характеристика.бит_ВидыДополнительныхАналитик.
//  ЗначенияПоУмолчанию - Соответствие.
// 
Процедура ДобавитьАналитикуВНабор(ТекущийОбъект, НаборЗаписей, Аналитика, ЗначенияПоУмолчанию)  Экспорт
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Объект    = ТекущийОбъект.Ссылка;	
	НоваяЗапись.Аналитика = Аналитика;
	
	ЗначениеАналитики = ЗначенияПоУмолчанию[Аналитика];
	
	// Изменение кода. Начало. 17.02.2015{{
	Если Аналитика.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.Организации")
		И (ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
		ИЛИ ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет")
		ИЛИ ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер"))	Тогда
		
		ЗначениеАналитики = ТекущийОбъект.Организация;
	КонецЕсли; 
	// Изменение кода. Конец. 17.02.2015}}
	
	Если ЗначениеЗаполнено(ЗначениеАналитики) Тогда
	    НоваяЗапись.ЗначениеАналитики = ЗначениеАналитики;
	Иначе	
	    НоваяЗапись.ЗначениеАналитики = Аналитика.ТипЗначения.ПривестиЗначение();
	КонецЕсли;
		
КонецПроцедуры

// Процедура добавляет аналитику в набор дополнительных аналитик.
// 
// Параметры:
//  ТекущийОбъект  		- ДокументОбъект.
//  НаборЗаписей   		- ДанныеФормыКоллекция или ДанныеФормыСтруктураСКоллекцией.
//  Аналитика      		- Характеристика.бит_ВидыДополнительныхАналитик.
//  ЗначенияПоУмолчанию - Соответствие.
// 
Процедура ДобавитьАналитикуВДанныеФормы(ТекущийОбъект, НаборЗаписей, Аналитика, ЗначенияПоУмолчанию)  Экспорт
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	Если НоваяЗапись.Свойство("Объект") Тогда
		НоваяЗапись.Объект = ТекущийОбъект.Ссылка;	
	КонецЕсли;
	Если НоваяЗапись.Свойство("Документ") Тогда
		НоваяЗапись.Документ = ТекущийОбъект.Ссылка;	
	КонецЕсли;
	
	НоваяЗапись.Аналитика = Аналитика;
	Если НоваяЗапись.Свойство("ИмяАналитики") Тогда
		НоваяЗапись.ИмяАналитики = СокрЛп(Аналитика.Код);	
	КонецЕсли;                                           	
	
	// Изменение кода. Начало. 11.04.2017{{
	Если ВРег(СокрЛп(Аналитика.Код)) = ВРег("Организация") Тогда
		ЗначениеАналитики = ТекущийОбъект.Организация;
	Иначе	
		ЗначениеАналитики = ЗначенияПоУмолчанию[Аналитика];
	КонецЕсли; 
	// Изменение кода. Конец. 11.04.2017}}
	Если ЗначениеЗаполнено(ЗначениеАналитики) Тогда
	    НоваяЗапись.ЗначениеАналитики = ЗначениеАналитики;
	Иначе	
	    НоваяЗапись.ЗначениеАналитики = Аналитика.ТипЗначения.ПривестиЗначение();
	КонецЕсли;
	Если НоваяЗапись.Свойство("ЗначениеАналитикиСтарое") Тогда
		НоваяЗапись.ЗначениеАналитикиСтарое = НоваяЗапись.ЗначениеАналитики;		
	КонецЕсли;
	
КонецПроцедуры
 
// Функция получает значения дополнительных аналитик.
// 
// Параметры:
//  ТекущийОбъект   - ДокументОбъект, ДокументСсылка.
//  ЗаполнениеШапки - Булево (По умолчанию = Истина).
// 
// Возвращаемое значение:
//   ЗначенияПоУмолчанию   - Соответствие.
// 
Функция ЗначенияАналитикПоУмолчанию(ТекущийОбъект, ЗаполнениеШапки = Истина) Экспорт
	
	// Приоритеты заполнения аналитик:
	// 1) По платежной позиции.
	// 2) По назначению платежа (если установлена константа "Использовать заполнение аналитик по назначению платежа").
	// 3) Регистры соответствий.
	// 4) Договор (если в договоре стоит "Высокий приоритет" при заполнении аналитик, 
	//	  то договор становится 3, а регистры сведений 4).
	// 5) Настройки пользователя.

	ЗначенияПоУмолчанию = Новый Соответствие; 	
	МетаданныеОбъекта  	= ТекущийОбъект.Метаданные();
	ТекПользователь 	= Пользователи.ТекущийПользователь();
	
	Аналитики = Новый Структура; 
	Аналитики.Вставить("ЦФО", 					Неопределено);
	Аналитики.Вставить("СтатьяОборотов", 		Неопределено);
	Аналитики.Вставить("Проект", 				Неопределено);
	Аналитики.Вставить("НоменклатурнаяГруппа",  Неопределено);
	Аналитики.Вставить("Контрагент", 		    Неопределено);
	Аналитики.Вставить("ДоговорКонтрагента",    Неопределено);
	
	// По реквизиту "Назначение платежа".
	ПодготовитьЗначенияАналитикПоНазначениюПлатежа(Аналитики, ЗначенияПоУмолчанию, ТекущийОбъект);
	
	// Из данных документов движения денежных средств.
	Если бит_РаботаСМетаданными.ЕстьРеквизит("ВидОперации", МетаданныеОбъекта)
		И бит_РаботаСМетаданными.ЕстьРеквизит("СчетУчетаРасчетовСКонтрагентом", МетаданныеОбъекта) Тогда 
		
		Если (ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
			ИЛИ ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход)
			И ЗначениеЗаполнено(ТекущийОбъект.СчетУчетаРасчетовСКонтрагентом) Тогда 
			
			ОпределитьКонтрагентДоговорИзСубконто(ТекущийОбъект, "Дт", Аналитики.Контрагент, Аналитики.ДоговорКонтрагента);
		ИначеЕсли ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
			ИЛИ ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход 
			И ЗначениеЗаполнено(ТекущийОбъект.СчетУчетаРасчетовСКонтрагентом) Тогда 
	
			ОпределитьКонтрагентДоговорИзСубконто(ТекущийОбъект, "Кт", Аналитики.Контрагент, Аналитики.ДоговорКонтрагента);
		КонецЕсли; 
	КонецЕсли; 

	// Поиск договора в данных.
	Аналитики.ДоговорКонтрагента = ЗначениеАналитикиДоговор(Аналитики, ТекущийОбъект);

	// Предварительная версия аналитик по договору.	
	АналитикиПоДоговору = ОбщегоНазначения.СкопироватьРекурсивно(Аналитики);
	АналитикиПоДоговору.Вставить("ВысокийПриоритет", Ложь);
	АналитикиПоДоговору.Вставить("ДоговорКонтрагента", Аналитики.ДоговорКонтрагента);

	ПодготовитьЗначенияАналитикПоДоговору(АналитикиПоДоговору, ТекущийОбъект);
	
	Если АналитикиПоДоговору.ВысокийПриоритет И ЗначениеЗаполнено(АналитикиПоДоговору.ЦФО) Тогда
		Аналитики.ЦФО = АналитикиПоДоговору.ЦФО;
	Иначе
		Аналитики.ЦФО = ЗначениеАналитикиЦФО(Аналитики, ТекущийОбъект);
	КонецЕсли; 
	
	Если АналитикиПоДоговору.ВысокийПриоритет И ЗначениеЗаполнено(АналитикиПоДоговору.СтатьяОборотов) Тогда
		Аналитики.СтатьяОборотов = АналитикиПоДоговору.СтатьяОборотов
	Иначе	
		Аналитики.СтатьяОборотов = ЗначениеАналитикиСтатьяОборотов(Аналитики, ТекущийОбъект);
	КонецЕсли;
	
	Если АналитикиПоДоговору.ВысокийПриоритет И ЗначениеЗаполнено(АналитикиПоДоговору.Проект) Тогда
		Аналитики.Проект = АналитикиПоДоговору.Проект
	Иначе	
		ЗаполнитьЗначениеДопАналитикиИзНастройкиПользователя(Аналитики.Проект,
				"ОсновнойПроект", ТекПользователь);
	КонецЕсли;
		
	Аналитики.НоменклатурнаяГруппа = ЗначениеАналитикиНоменклатурнаяГруппа(Аналитики, ТекущийОбъект);
	
	// По предварительным данным договора, если обычный приоритет и не заполнено.
	Если НЕ ЗначениеЗаполнено(Аналитики.СтатьяОборотов) Тогда
		Аналитики.СтатьяОборотов = АналитикиПоДоговору.СтатьяОборотов;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Аналитики.ЦФО) Тогда
		Аналитики.ЦФО = АналитикиПоДоговору.ЦФО;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Аналитики.Проект) Тогда
		Аналитики.Проект = АналитикиПоДоговору.Проект;
	КонецЕсли;
	
	// По настройкам пользователя.
	Если НЕ ЗначениеЗаполнено(Аналитики.СтатьяОборотов) Тогда
		ОтборДляСтатьи = ПолучитьОтборДляСтатьиОборотовПоДокументу(ТекущийОбъект);
		Если ОтборДляСтатьи.ЗаполнятьСтатью Тогда
			ТипСтатьи   = ОтборДляСтатьи.ТипСтатьи;
			РасходДоход = ОтборДляСтатьи.РасходДоход;
			ИмяОсновнойСтатьи = "ОсновнаяСтатья" + Строка(РасходДоход) + Строка(ТипСтатьи);
			ЗаполнитьЗначениеДопАналитикиИзНастройкиПользователя(Аналитики.СтатьяОборотов,
				ИмяОсновнойСтатьи, ТекПользователь);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Аналитики.ЦФО) Тогда
		ЗаполнитьЗначениеДопАналитикиИзНастройкиПользователя(Аналитики.ЦФО,
		"ОсновноеЦФО", ТекПользователь);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Аналитики.Проект) Тогда
		ЗаполнитьЗначениеДопАналитикиИзНастройкиПользователя(Аналитики.Проект,
		"ОсновнойПроект", ТекПользователь);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Аналитики.НоменклатурнаяГруппа) Тогда
		ЗаполнитьЗначениеДопАналитикиИзНастройкиПользователя(Аналитики.НоменклатурнаяГруппа,
		"ОсновнаяНоменклатурнаяГруппа", ТекПользователь);
	КонецЕсли; 
	
	Если ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
		И ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
	
		Аналитики.Контрагент = ТекущийОбъект.Налогоплательщик;
	КонецЕсли; 
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Контрагент", МетаданныеОбъекта)
		И ЗначениеЗаполнено(ТекущийОбъект.Контрагент)
		И НЕ ЗначениеЗаполнено(Аналитики.Контрагент) Тогда
		
		Аналитики.Контрагент = ТекущийОбъект.Контрагент;
	КонецЕсли; 
	
	ПВХ = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик;
	ВидыАналитик = Новый Массив(); 
	ВидыАналитик.Добавить(ПВХ.ЦФО);
	ВидыАналитик.Добавить(ПВХ.СтатьяОборотов);
	ВидыАналитик.Добавить(ПВХ.Проект);
	ВидыАналитик.Добавить(ПВХ.НоменклатурнаяГруппа);
	ВидыАналитик.Добавить(ПВХ.Контрагент);
	ВидыАналитик.Добавить(ПВХ.ДоговорКонтрагента);
	
	ДопустимыеТипы = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыАналитик, "ТипЗначения");
	
	// Результаты.
	Если ЗначениеЗаполнено(Аналитики.ЦФО) Тогда
		ОписаниеТипа = ДопустимыеТипы.Получить(ПВХ.ЦФО).ТипЗначения;
		ЗначенияПоУмолчанию.Вставить(ПВХ.ЦФО, ОписаниеТипа.ПривестиЗначение(Аналитики.ЦФО));  	
	КонецЕсли;
	Если ЗначениеЗаполнено(Аналитики.СтатьяОборотов) Тогда
		ОписаниеТипа = ДопустимыеТипы.Получить(ПВХ.СтатьяОборотов).ТипЗначения;
		ЗначенияПоУмолчанию.Вставить(ПВХ.СтатьяОборотов	  , ОписаниеТипа.ПривестиЗначение(Аналитики.СтатьяОборотов));
	КонецЕсли;
	Если ЗначениеЗаполнено(Аналитики.Проект) Тогда
		ОписаниеТипа = ДопустимыеТипы.Получить(ПВХ.Проект).ТипЗначения;
		ЗначенияПоУмолчанию.Вставить(ПВХ.Проект			  , ОписаниеТипа.ПривестиЗначение(Аналитики.Проект));
	КонецЕсли;
	Если ЗначениеЗаполнено(Аналитики.НоменклатурнаяГруппа) Тогда
		ОписаниеТипа = ДопустимыеТипы.Получить(ПВХ.НоменклатурнаяГруппа).ТипЗначения;
		ЗначенияПоУмолчанию.Вставить(ПВХ.НоменклатурнаяГруппа, ОписаниеТипа.ПривестиЗначение(Аналитики.НоменклатурнаяГруппа));	
	КонецЕсли;
	Если ЗначениеЗаполнено(Аналитики.Контрагент) Тогда
		ОписаниеТипа = ДопустимыеТипы.Получить(ПВХ.Контрагент).ТипЗначения;
		ЗначенияПоУмолчанию.Вставить(ПВХ.Контрагент, ОписаниеТипа.ПривестиЗначение(Аналитики.Контрагент));	
	КонецЕсли;
	Если ЗначениеЗаполнено(Аналитики.ДоговорКонтрагента) Тогда
		ОписаниеТипа = ДопустимыеТипы.Получить(ПВХ.ДоговорКонтрагента).ТипЗначения;
		ЗначенияПоУмолчанию.Вставить(ПВХ.ДоговорКонтрагента, ОписаниеТипа.ПривестиЗначение(Аналитики.ДоговорКонтрагента));	
	КонецЕсли;
	
	Возврат ЗначенияПоУмолчанию;	

КонецФункции

// Процедура заполняет перечень дополнительных аналитиков по-умолчанию.
// 
// Параметры:
//  ТекущийОбъект  			- ДокументОбъект.
//  НаборЗаписей   		   	- РегистрСведенийНаборЗаписей.бит_ДополнительныеАналитики (По умолчанию = Неопределено)
//								ИЛИ ДанныеФормыКоллекция (При заполнении тч из обработки бит_ГрупповоеРедактированиеДополнительныхАналитик).
//  ЗаполнятьАналитикиШапки - Булево (По умолчанию = Ложь).
//  ЗаполнятьАналитикиТч 	- Булево (По умолчанию = Ложь).
// 
Процедура ЗаполнитьДополнительныеАналитикиПоУмолчанию(ТекущийОбъект, НаборЗаписей = Неопределено, 
	ЗаполнятьАналитикиШапки = Ложь, ЗаполнятьАналитикиТч = Ложь) Экспорт	
	
	Если ЗаполнятьАналитикиШапки Тогда
		ЗаполнитьДополнительныеАналитикиШапки(ТекущийОбъект, НаборЗаписей);
	КонецЕсли;
	
	Если ЗаполнятьАналитикиТч Тогда
		ДокументыСРасшифровкой 			 = бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ДокументыСРасшифровкой();	
		ИспользуетсяРаспределениеБюджета = ДокументыСРасшифровкой.Найти(ТипЗнч(ТекущийОбъект.Ссылка)) <> Неопределено;
		Если ИспользуетсяРаспределениеБюджета Тогда
			ЗаполнитьДополнительныеАналитикиРаспределенияБюджета(ТекущийОбъект, НаборЗаписей);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Функция проверяет включен ли режим заполнения аналитик "Заполнять всегда".
//  
// Возвращаемое значение:
//   Булево.
// 
Функция ВключенРежимЗаполнятьВсегда() Экспорт
	
	РежимЗаполнения = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_РежимАвтоЗаполненияАналитик");	
	// ++ NB Сделать переопределяемый.
	Возврат РежимЗаполнения = Перечисления.бит_РежимыАвтоЗаполненияАналитик.ЗаполнятьВсегда;
	
КонецФункции

// Функция проверяет разрешено ли заполнение аналитик.
// 
// Параметры:
//  Источник - ДокументОбъект.
//  
// Возвращаемое значение:
//   Булево - разрешено.
// 
Функция РазрешеноПерезаполнениеАналитик(Источник)

	Разрешено = Истина;
	
	Если Источник.ДополнительныеСвойства.Свойство("бит_НеЗаполнятьАналитикиПоУмолчанию") 
		И Источник.ДополнительныеСвойства.бит_НеЗаполнятьАналитикиПоУмолчанию Тогда
	
		Разрешено = Ложь;
	Иначе		
		
		// ++БП
		РежимЗаполнения     = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_РежимАвтоЗаполненияАналитик");
		ПеречисленияРежимов = Перечисления.бит_РежимыАвтоЗаполненияАналитик;
		
		Если РежимЗаполнения = ПеречисленияРежимов.НеЗаполнять Тогда
			// Заполнение запрещено, если режим автозаполнения аналитик установлен в значение "НеЗаполнять".
			Разрешено = Ложь; 		
		ИначеЕсли РежимЗаполнения = ПеречисленияРежимов.ЗаполнятьТолькоДляНовыхДокументов Тогда
			// Заполнение запрещено, если режим автозаполнения аналитик 
			// установлен в значение "ЗаполнятьТолькоДляНовыхДокументов"
			// и документ не новый.
			Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
				Разрешено = Источник.ДополнительныеСвойства.ЭтоНовый;
			Иначе	
				Разрешено = Ложь;
			КонецЕсли;
		ИначеЕсли РежимЗаполнения = ПеречисленияРежимов.ЗаполнятьВсегда Тогда
			
			// Заполнение запрещено, если режим = "ЗаполнятьВсегда" и для документа установлен запрет на перезаполнение аналитик.
			Разрешено = Не ПолучитьЗначениеДополнительногоПарамераОбъекта(Источник.Ссылка, "ЗапретитьПерезаполнениеАналитик");
		КонецЕсли;
		// --БП
		
		Если бит_ОбщегоНазначения.ЭтоСемействоБП() 
		   И Метаданные.Документы.Найти("бит_ПлатежнаяПозиция") <> Неопределено Тогда
		   
		   Если Разрешено Тогда
			   // Заполнение запрещено, если в дополнительных аналитиках есть привязка документа к платежной позиции.
			   Запрос = Новый Запрос;
			   Запрос.УстановитьПараметр("Объект"   , Источник.Ссылка);
			   Запрос.УстановитьПараметр("Аналитика", ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция);
			   Запрос.Текст = "
			   |ВЫБРАТЬ
			   |	бит_ДополнительныеАналитики.Аналитика,
			   |	бит_ДополнительныеАналитики.ЗначениеАналитики
			   |ИЗ
			   |	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
			   |ГДЕ
			   |	бит_ДополнительныеАналитики.Объект = &Объект
			   |	И бит_ДополнительныеАналитики.Аналитика = &Аналитика
			   |";
			   РезультатЗапроса = Запрос.Выполнить();
			   Если Не РезультатЗапроса.Пустой() Тогда
				   Выборка = РезультатЗапроса.Выбрать();
				   Выборка.Следующий();
				   Разрешено = Не ЗначениеЗаполнено(Выборка.ЗначениеАналитики);          		
			   КонецЕсли;
		   КонецЕсли; 
			
			Если бит_Казначейство.ТребуетсяАльтернативноеЗаполнениеАналитик(Источник) Тогда
				Источник.ДополнительныеСвойства.Вставить("бит_АльтернативноеЗаполнениеАналитик",Истина);
			КонецЕсли; 
		КонецЕсли;
	
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("бит_НеЗаполнятьАналитикиПоУмолчанию", НЕ Разрешено);
	
	Возврат Разрешено;
	
КонецФункции

// Обработчик подписки "бит_ПередЗаписьюДокументаСАналитиками".
// См.  Синтакс-помощник: ДокументОбъект.ПередЗаписью().
//
Процедура бит_ПередЗаписьюДокументаСАналитиками(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда 		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;   	
	КонецЕсли; 
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьДоговора") Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НЕ Источник.ЭтоНовый() Тогда
		// При установке пометки удаления, ни чего не далаем.
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");	
		Если Источник.ПометкаУдаления И НЕ ПометкаУдаления Тогда
			Источник.ДополнительныеСвойства.Вставить("УстановкаПометкиУдаления", Истина);
			Возврат;
		КонецЕсли; 		
	КонецЕсли; 
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		ИЛИ бит_ОбщегоНазначения.ЭтоСемействоERP()
		ИЛИ Не РазрешеноПерезаполнениеАналитик(Источник) Тогда
		// Ничего не делаем, если режим записи документа - отмена проведения.
	 	Возврат;	
	КонецЕсли;
	
	ЗаполнятьТаблицу = Ложь;
	
	ЕстьРасшифровкаПлатежа = бит_РаботаСМетаданными.ЕстьТабЧасть("РасшифровкаПлатежа", Источник.Метаданные());
	Если ЕстьРасшифровкаПлатежа Тогда
		ЗаполнятьТаблицу = Источник.РасшифровкаПлатежа.Количество() > 1;
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("бит_АльтернативноеЗаполнениеАналитик") 
	   И Источник.ДополнительныеСвойства.бит_АльтернативноеЗаполнениеАналитик Тогда
		ЗаполнятьТаблицу = Ложь;
	КонецЕсли; 
	
	ЗаполнитьДополнительныеАналитикиПоУмолчанию(Источник, Неопределено, Ложь, ЗаполнятьТаблицу);																																						
   																			
КонецПроцедуры

// Обработчик подписки "бит_ПриЗаписиДокументаСАналитиками".
// См.  Синтакс-помощник: ДокументОбъект.ПриЗаписи().
//
Процедура бит_ПриЗаписиДокументаСАналитиками(Источник, Отказ) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат; 	
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьДоговора") Тогда
		Возврат;	
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("УстановкаПометкиУдаления")
	   И Источник.ДополнительныеСвойства.УстановкаПометкиУдаления Тогда
		Возврат;
	КонецЕсли; 

	Если Источник.ДополнительныеСвойства.Свойство("бит_АльтернативноеЗаполнениеАналитик") 
	   И Источник.ДополнительныеСвойства.бит_АльтернативноеЗаполнениеАналитик Тогда
	   
	   	бит_Казначейство.АльтернативноеЗаполнениеДополнительныхАналитик(Источник);
	КонецЕсли; 
		
	// В зависимости от режима заполнения и решения уставливается флаг "ЗапретитьПерезаполнениеАналитик".
	УстановитьЗапретитьПерезаполнениеАналитикНовому(Источник);

	Если НЕ РазрешеноПерезаполнениеАналитик(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
	
	бит_МеханизмДопИзмерений.ЗаполнитьДополнительныеАналитикиПоУмолчанию(Источник, НаборЗаписей, Истина, Ложь);
	
	Если Не бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей) Тогда
		Отказ = Истина;
	КонецЕсли; 	
	
КонецПроцедуры
 
#КонецОбласти

#Область ДополнительныеАналитикиВОбработках

// Процедура заполняет дополнительные аналитики по документу БИТ.
// 
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.бит_ДополнительныеАналитики.
//  ОбъектСсылка - ДокументСсылка.*.
//  ДокументБит  - ДокументСсылка.бит_ПлатежнаяПозиция 
// 					или ДокументСсылка.бит_РасходнаяПозиция 
// 					или ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств.
// 
Процедура ЗаполнитьДополнительныеАналитикиПоДокументуБит(НаборЗаписей, ОбъектСсылка, Знач ДокументБит) Экспорт
                                                                                    	
	Если бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЗнч(ДокументБит), "ДокументСсылка.бит_ПлатежнаяПозиция") Тогда
		Менеджер 		  = Документы["бит_ПлатежнаяПозиция"];
		ТаблицаРеквизитов = Менеджер.РеквизитыДокумента(ДокументБит);
		Если НЕ ТаблицаРеквизитов.Количество() = 0 Тогда
			ДанныеЗаполнения = ТаблицаРеквизитов[0];
			АналитикиШапки   = бит_Казначейство.ПолучитьДополнительныеАналитикиШапкиПоПлатежнойПозиции(ОбъектСсылка,ДанныеЗаполнения); 
			бит_Казначейство.ЗаполнитьДополнительныеАналитикиПоПлатежнойПозиции(НаборЗаписей, ОбъектСсылка, АналитикиШапки);
		КонецЕсли; 
	ИначеЕсли бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЗнч(ДокументБит), "ДокументСсылка.бит_РасходнаяПозиция") Тогда
		бит_ДоговораСервер.ЗаполнитьДополнительныеАналитикиПоРасходнойПозиции(НаборЗаписей, ОбъектСсылка, ДокументБит);
	ИначеЕсли бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЗнч(ДокументБит), "ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств") Тогда
		бит_Казначейство.ЗаполнитьДополнительныеАналитиикПоПланируемомуПоступлению(НаборЗаписей, ОбъектСсылка, ДокументБит);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ДополнительныеПараметрыОбъектов

// Функция получает значение дополнительного параметра объекта.
// 
// Параметры:
//  СсылкаНаОбъект - Любая ссылка.
//  ИмяПараметра   - Строка.
//  
// Возвращаемое значение:
//   Тип.Вид   - описание.
// 
Функция ПолучитьЗначениеДополнительногоПарамераОбъекта(СсылкаНаОбъект, ИмяПараметра) Экспорт
	
	МетаПараметра = Метаданные.РегистрыСведений.бит_ДополнительныеПараметрыОбъектов.Ресурсы.Найти(ИмяПараметра);
	Если МетаПараметра = Неопределено Тогда
		ТекстСообщения = Нстр("ru = 'Не найден дополнительный параметр в структуре регистра.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		ЗначениеПараметра = Неопределено;	
	Иначе
		РезультатЗапроса  = ПолучитьРезультатЗапросаНаДополнительныеПарамерыОбъекта(СсылкаНаОбъект);	
		ЗначениеПараметра = ПолучитьЗначениеДополнительногоПарамераОбъектаПоРезультатуЗапроса(РезультатЗапроса, ИмяПараметра, МетаПараметра);
	КонецЕсли;

	Возврат ЗначениеПараметра;
	
КонецФункции

// Функция получает значение дополнительного параметра объекта.
// 
// Параметры:
//  СсылкаНаОбъект 		- Любая ссылка.
//  СтруктураПараметров - Структура.
// 
Процедура ПолучитьЗначенияДополнительныхПарамеровОбъекта(СсылкаНаОбъект, СтруктураПараметров) Экспорт
	
	РезультатЗапроса = ПолучитьРезультатЗапросаНаДополнительныеПарамерыОбъекта(СсылкаНаОбъект);
	Для каждого КлЗнч Из СтруктураПараметров Цикл
		ИмяПараметра = КлЗнч.Ключ;
		МетаПараметра = Метаданные.РегистрыСведений.бит_ДополнительныеПараметрыОбъектов.Ресурсы.Найти(ИмяПараметра);
		Если МетаПараметра = Неопределено Тогда
			ТекстСообщения = Нстр("ru = 'Не найден дополнительный параметр в структуре регистра.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			ЗначениеПараметра = Неопределено;
		Иначе
			ЗначениеПараметра = ПолучитьЗначениеДополнительногоПарамераОбъектаПоРезультатуЗапроса(РезультатЗапроса, ИмяПараметра, МетаПараметра);
		КонецЕсли;
		СтруктураПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
	
КонецПроцедуры

// Процедура записывает дополнительные параметры объекта 
// в регистр сведений бит_ДополнительныеПараметрыОбъектов.
// 
// Параметры:
//  СсылкаНаОбъект 		- Любая ссылка.
//  СтруктураПараметров - Структура (Ключ = имя параметра, Значение = значение параметра).
// 
Процедура ЗаписатьДополнительныеПараметрыОбъекта(СсылкаНаОбъект, СтруктураПараметров) Экспорт

	НаборЗаписей = РегистрыСведений.бит_ДополнительныеПараметрыОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();	 
	
	Запись = НаборЗаписей.Добавить();
	Запись.Объект = СсылкаНаОбъект;
	Для каждого КлЗнч Из СтруктураПараметров Цикл
		ИмяПараметра = КлЗнч.Ключ;
		Запись[ИмяПараметра] = СтруктураПараметров[ИмяПараметра];	
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#Область ПроизвольныеПараметры

// Функция получить максимально доступное количество.
// 
// Параметры:
//  Нет.
//  
// Возвращаемое значение:
//  Число.
// 
Функция ПолучитьМаксимальноеКоличествоИзмеренийПроизвольныхПараметров() Экспорт

	Результат = 0;
	ИзмеренияРегистра = Метаданные.РегистрыСведений.бит_ЗначенияПроизвольныхПараметровРегистратор.Измерения;
	Для каждого Измерение Из ИзмеренияРегистра Цикл
		Если Лев(Измерение.Имя, 10) = "Аналитика_" Тогда
			Результат = Результат + 1;		
		КонецЕсли;
	КонецЦикла;                   		

	Возврат Результат;
	
КонецФункции

// Функция формирует соответствие настроек измерений по параметру.
// 
// Параметры:
//  ТекущийПараметр - ПланВидовХарактеристикСсылка.бит_ВидыПроизвольныхПараметров.
//  
// Возвращаемое значение:
//   Соответствие.
// 
Функция ПолучитьНастройкиИзмеренийПроизвольногоПараметра(ТекущийПараметр) Экспорт

	НастройкиИзмерений = Новый Соответствие;
	Если ЗначениеЗаполнено(ТекущийПараметр) Тогда
		Для каждого СтрокаТабЧасти Из ТекущийПараметр.ИспользованиеАналитики Цикл
			ТекущаяАналитика = СтрокаТабЧасти.Аналитика;
			СтруктураАналитики = Новый Структура;
			СтруктураАналитики.Вставить("Аналитика",			ТекущаяАналитика);
			СтруктураАналитики.Вставить("Синоним",				ТекущаяАналитика.Наименование);
			СтруктураАналитики.Вставить("Обязательное",			Ложь);
			СтруктураАналитики.Вставить("ТипЗначения",			ТекущаяАналитика.ТипЗначения);
			СтруктураАналитики.Вставить("ЭтоСоставнойТип",		ТекущаяАналитика.ТипЗначения.Типы().Количество() > 1);
			СтруктураАналитики.Вставить("ИмяТипаПоУмолчанию",	СтрокаТабЧасти.ИмяТипаПоУмолчанию);
			СтруктураАналитики.Вставить("ЗначениеПоУмолчанию",	Неопределено);
			бит_МеханизмДопИзмерений.ОпределитьЗначениеПоУмолчанию(СтруктураАналитики);
			НастройкиИзмерений.Вставить(СтрокаТабЧасти.ИмяИзмерения, СтруктураАналитики);
		КонецЦикла;
	КонецЕсли;

	Возврат НастройкиИзмерений;
	
КонецФункции

// Процедура очищает значения дополнительных измерений, если тип не подходит.
// 
// Параметры:
//  ЭлементыФормы  		- Элементы формы.
//  Измерения			- Структура.
//  НастройкиИзмерений  - Соответствие.
// 
Процедура ОчиститьЗначенияНеподходящихТипов(ТекущийОбъект, Измерения, НастройкиИзмерений) Экспорт

	Для каждого КлЗнАналитики Из Измерения Цикл
		НайденныйЭлемент = ТекущийОбъект[КлЗнАналитики.Ключ];
		Если НайденныйЭлемент = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		СтруктураАналитики = НастройкиИзмерений.Получить(КлЗнАналитики.Ключ);
		Если СтруктураАналитики = Неопределено Тогда
			ТекущийОбъект[КлЗнАналитики.Ключ] = Неопределено;
		Иначе
			ТипАналитики = СтруктураАналитики.ТипЗначения;
			ТипЭлемента  = ТипЗнч(НайденныйЭлемент);
			Если Не ТипАналитики.СодержитТип(ТипЭлемента) Тогда
				ТекущийОбъект[КлЗнАналитики.Ключ] = Неопределено;	
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти  

#Область УстаревшийФункционал

// Устарела. Следует использовать бит_МеханизмДопИзмерений.ЗначенияАналитикПоУмолчанию(). 
Функция ПолучитьЗначенияАналитикПоУмолчаниюПоДоговору(ТекущийОбъект, ЗаполнениеШапки = Истина) Экспорт
	
	Возврат ЗначенияАналитикПоУмолчанию(ТекущийОбъект, ЗаполнениеШапки);	

КонецФункции

#КонецОбласти 

// Функция определяет назначено ли в системе доп измерение, содержащее тип Организация.
//  
// Возвращаемое значение:
//  Имя - Строка.
// 
Функция ЕстьДопИзмерениеОрганизация(вхНастройки = Неопределено) Экспорт
	
	Имя = ИмяДопИзмененияОрганизация(вхНастройки);
	Есть = ?(ЗначениеЗаполнено(Имя), Истина, Ложь);
	Возврат Есть;
	
КонецФункции

// Функция определяет имя дополнительного измерения, содержащего тип Организация.
//  
// Возвращаемое значение:
//  Имя - Строка.
// 
Функция ИмяДопИзмененияОрганизация(вхНастройки = Неопределено) Экспорт
	
	Имя = "";
	
	Если вхНастройки = Неопределено Тогда
		Настройки = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	Иначе
		Настройки = вхНастройки;
	КонецЕсли;
	
	Для Каждого КиЗ ИЗ Настройки Цикл
		 ТекНастройка = КиЗ.Значение;
		 Если ТекНастройка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
			 Имя = КиЗ.Ключ;
			 Прервать;
		 КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Имя;
	
КонецФункции

// Функция получить максимально доступное количество дополнительных измерений БИТ.
//  
// Возвращаемое значение:
//  Результат - Число.
// 
Функция ПолучитьМаксимальноеКоличествоДополнительныхИзмерений() Экспорт

	Возврат бит_МеханизмДопИзмеренийКлиентСерверПереопределяемый.КоличествоДополнительныхИзмерений();
	
КонецФункции

// Функция получает настройки отображения дополнительных измерений.
// 
// Возвращаемое значение:
//   Настройки   - Соответствие - Ключ: имя измерения, Значение: структура настроек измерения.
// 
Функция ПолучитьНастройкиДополнительныхИзмерений(Ключ = "")  Экспорт
	
	Настройки = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникНастроек.ИмяИзмерения КАК ИмяИзмерения,
	|	ИсточникНастроек.Синоним КАК Синоним,
	|	ИсточникНастроек.Аналитика КАК Аналитика,
	|	ИсточникНастроек.Обязательное КАК Обязательное,
	|	ИсточникНастроек.ИмяТипаПоУмолчанию КАК ИмяТипаПоУмолчанию,
	|	ИсточникНастроек.Аналитика.Предопределенный КАК Предопределенная
	|ИЗ
	|	РегистрСведений.бит_НазначениеДополнительныхИзмерений КАК ИсточникНастроек";
				   
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		СтрНастроек						= КонструкторСтруктураНастроек();
		СтрНастроек.Синоним				= СокрЛП(Выборка.Синоним);
		СтрНастроек.Аналитика			= Выборка.Аналитика;
		СтрНастроек.Предопределенная	= Выборка.Предопределенная;
		СтрНастроек.ТипЗначения			= Выборка.Аналитика.ТипЗначения;
		СтрНастроек.Обязательное		= Выборка.Обязательное;
		СтрНастроек.ЭтоСоставнойТип		= ЭтоАналитикаСоставногоТипа(Выборка.Аналитика);
		СтрНастроек.ИмяТипаПоУмолчанию	= Выборка.ИмяТипаПоУмолчанию;
		СтрНастроек.ИмяИзмерения		= Выборка.ИмяИзмерения;
		ОпределитьЗначениеПоУмолчанию(СтрНастроек);
		
		Если ВРег(Ключ) = ВРег("Аналитика") Тогда
			Настройки.Вставить(Выборка.Аналитика, СтрНастроек);
		Иначе	
			Настройки.Вставить(СокрЛП(Выборка.ИмяИзмерения), СтрНастроек);
		КонецЕсли; 
	КонецЦикла; 
				   
	Возврат Настройки;
	
КонецФункции

// Функция получает настройки всех дополнительных аналитик.
// 
// Возвращаемое значение:
//  Настройки - Соответствие.
// 
Функция ПолучитьНастройкиДополнительныхАналитик() Экспорт

	Настройки = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ВидыДополнительныхАналитик.Код КАК ИмяИзмерения,
	               |	бит_ВидыДополнительныхАналитик.Наименование КАК Синоним,
	               |	бит_ВидыДополнительныхАналитик.ТипЗначения КАК ТипЗначения,
	               |	бит_ВидыДополнительныхАналитик.Ссылка КАК Аналитика,
	               |	ЛОЖЬ КАК Обязательное,
	               |	"""" КАК ИмяТипаПоУмолчанию,
	               |	бит_ВидыДополнительныхАналитик.Предопределенный КАК Предопределенная
	               |ИЗ
	               |	ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик КАК бит_ВидыДополнительныхАналитик";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрНастроек						= КонструкторСтруктураНастроек();
		СтрНастроек.Синоним				= СокрЛП(Выборка.Синоним);
		СтрНастроек.Аналитика			= Выборка.Аналитика;
		СтрНастроек.Предопределенная	= Выборка.Предопределенная;
		СтрНастроек.ТипЗначения			= Выборка.ТипЗначения;
		СтрНастроек.Обязательное		= Выборка.Обязательное;
		СтрНастроек.ЭтоСоставнойТип		= ЭтоАналитикаСоставногоТипа(Выборка.Аналитика);
		СтрНастроек.ИмяТипаПоУмолчанию	= Выборка.ИмяТипаПоУмолчанию;
		ОпределитьЗначениеПоУмолчанию(СтрНастроек);
		Настройки.Вставить(СокрЛП(Выборка.ИмяИзмерения), СтрНастроек);
	КонецЦикла; 
				   
	Возврат Настройки;
	
КонецФункции

// Функция инициализирует структуру, хранящую настройки аналитики.
// 
// Параметры:
// Аналитика          - ПланВидовХарактеристикСсылка.бит_ВидыДополнительныхАналитик.
// Предопределенная   - Булево.
// Обязательное       - Булево.
// ТипЗначения        - ОписаниеТипов.
// ЭтоСоставнойТип    - Булево.
// ЗначениеПоУмолчнию - Произвольный.
// ИмяТипаПоУмолчанию - Строка.
// 
// Возвращаемое значение:
//   СтрНастроек   - Структура.
// 
Функция КонструкторСтруктураНастроек(Аналитика = Неопределено
									, Предопределенная = Ложь
									, Синоним = ""
									, Обязательное = Ложь
									, ТипЗначения = Неопределено
									, ЭтоСоставнойТип = Ложь
									, ЗначениеПоУмолчанию = Ложь
									, ИмяТипаПоУмолчанию = "")  Экспорт

	СтрНастроек = Новый Структура;
	СтрНастроек.Вставить("Аналитика",			Аналитика);
	СтрНастроек.Вставить("Предопределенная",	Предопределенная);
	СтрНастроек.Вставить("Синоним",				Синоним);
	СтрНастроек.Вставить("Обязательное",		Обязательное);
	СтрНастроек.Вставить("ТипЗначения",			ТипЗначения);
	СтрНастроек.Вставить("ЭтоСоставнойТип",		ЭтоСоставнойТип);
	СтрНастроек.Вставить("ЗначениеПоУмолчанию",	ЗначениеПоУмолчанию);
	СтрНастроек.Вставить("ИмяТипаПоУмолчанию",	ИмяТипаПоУмолчанию);
	СтрНастроек.Вставить("ИмяКласса",			"НастройкиАналитики");	
	СтрНастроек.Вставить("ИмяАналитики");
	СтрНастроек.Вставить("ИмяПоля");
	СтрНастроек.Вставить("ИмяИзмерения");
										
	Возврат СтрНастроек;
	
КонецФункции

// Функция определяет значение дополнительной аналитики по-умолчанию.
// 
// Параметры:
//  СтрНастроек  - Структура.
// 
Процедура ОпределитьЗначениеПоУмолчанию(СтрНастроек)  Экспорт

	Если ЗначениеЗаполнено(СтрНастроек.Аналитика) Тогда
		Если СтрНастроек.ЭтоСоставнойТип Тогда
			Если ЗначениеЗаполнено(СтрНастроек.ИмяТипаПоУмолчанию) Тогда
				// Заполним значение по умолчанию для составного типа.
				НайденныйОбъект = Метаданные.НайтиПоПолномуИмени(СтрНастроек.ИмяТипаПоУмолчанию);
				Если НайденныйОбъект <> Неопределено Тогда
					ПозицияТочки = Найти(СтрНастроек.ИмяТипаПоУмолчанию,".");
					Если ПозицияТочки > 0 Тогда
						ИмяТипа = СтрЗаменить(СтрНастроек.ИмяТипаПоУмолчанию,".","Ссылка.");
						Описание = Новый ОписаниеТипов(ИмяТипа);
						СтрНастроек.ЗначениеПоУмолчанию = Описание.ПривестиЗначение();
					КонецЕсли; 
				КонецЕсли; // Нашли объект метаданный по полному имени.
			Иначе
				СтрНастроек.ЗначениеПоУмолчанию = Неопределено;	
			КонецЕсли; // Заполнено имя типа.
		Иначе	
			СтрНастроек.ЗначениеПоУмолчанию = СтрНастроек.Аналитика.ТипЗначения.ПривестиЗначение();
		КонецЕсли; // Составной/не составной.
	КонецЕсли; // Аналитика заполнена.
	
КонецПроцедуры

// Функция определяет, является ли аналитика составного типа или нет.
// 
// Параметры:
//  Аналитика  - ПланВидовХарактеристик.Ссылка.
// 
// Возвращаемое значение:
//   ЭтоСоставной   - Булево.
// 
Функция ЭтоАналитикаСоставногоТипа(Аналитика) Экспорт

	ЭтоСоставной = Ложь;
	Если ЗначениеЗаполнено(Аналитика) 
		И Аналитика.ТипЗначения.Типы().Количество()>1 Тогда
		
		ЭтоСоставной = Истина;
	КонецЕсли; 
	
	Возврат ЭтоСоставной;

КонецФункции

// Функция проверяет вид аналитики - банковский счет или нет
//
// Параметры:
//  ИмяАналитики  	   - Строка.
//  НастройкиИзмерений - Соответствие.
//  
// Возвращаемое значение:
//   Булево.
//
Функция ЭтоАналитикаБанковскийСчет(ИмяАналитики, НастройкиИзмерений) Экспорт

	ЭтоБанковскийСчет = Ложь;
	Если СтрСравнить(ИмяАналитики, "БанковскийСчет") = 0 Тогда
		ЭтоБанковскийСчет = Истина;
	Иначе
		Настройка = НастройкиИзмерений.Получить(ИмяАналитики);
		Если Настройка <> Неопределено Тогда
			ТекАналитика = Настройка.Аналитика;
			ЭтоБанковскийСчет = ТекАналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.БанковскийСчет;
		КонецЕсли; 
	КонецЕсли; 
	            
	Возврат ЭтоБанковскийСчет;
	
КонецФункции

// Процедура инициализирует значения дополнительных измерений.
// 
// Параметры:
//  Контейнер   - СтрокаТабличнойЧасти,ДокументОбъект.
//  Измерения   - Структура.
//  НастройкиИзмерений - Соответствие.
// 
Процедура ИнициализироватьЗначенияДопИзмерений(Контейнер,Измерения = Неопределено,НастройкиИзмерений = Неопределено) Экспорт

	Если Контейнер = Неопределено Тогда
		Возврат; 
	КонецЕсли; 
	
	Если Измерения = Неопределено Тогда
		Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	КонецЕсли; 
	
	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли; 
	
	Для каждого КлючИЗначение Из Измерения Цикл
		ИмяИзмерения = КлючИЗначение.Ключ;
		ТекущаяНастройка = НастройкиИзмерений[ИмяИзмерения];
		Если ТекущаяНастройка <> Неопределено Тогда
			Если Контейнер[ИмяИзмерения] = Неопределено Тогда
            	Контейнер[ИмяИзмерения] = ТекущаяНастройка.ЗначениеПоУмолчанию;
			КонецЕсли;	
		КонецЕсли;   		
	КонецЦикла; 	

КонецПроцедуры

// Процедура обрабатывает событие очистки дополнительного измерения.
// 
// Параметры:
//  Контейнер				   - СтрокаТабличнойЧасти,ДокументОбъект.
//  ИмяПоля					   - Строка.
//  СтандартнаяОбработка 	   - Ложь.
//  НастройкиИзмерений 		   - Соответствие.
// 
//  ИмяКлючаНастройкиИзмерений - Строка. По умолчанию "".
//     Когда ИмяПоля указано с префиксом "бит_" 				 	   например: бит_Аналитика_1,
//     тогда значение параметра необходимо указать без префикса "бит_" например: Аналитика_1.
// 
Процедура ОбработкаОчисткиДополнительногоИзмерения(Контейнер
												  ,ИмяПоля
												  ,СтандартнаяОбработка
												  ,НастройкиИзмерений = Неопределено
												  ,ИмяКлючаНастройкиИзмерений = "") Экспорт

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли;  
	
	Если ПустаяСтрока(ИмяКлючаНастройкиИзмерений) Тогда
		ИмяКлючаНастройкиИзмерений = ИмяПоля;
	КонецЕсли;
	
	ТекущаяНастройка = НастройкиИзмерений[ИмяКлючаНастройкиИзмерений];
	
	Если ТекущаяНастройка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Если ТекущаяНастройка.ЭтоСоставнойТип Тогда
			Контейнер[ИмяПоля]   = Неопределено;
		Иначе	
			Контейнер[ИмяПоля]   = ТекущаяНастройка.ЗначениеПоУмолчанию;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Функция проверяет наличие движений по дополнительной аналитике в регистрах подсистем БИТ:ФИНАНС.
// 
// Параметры:
//  ИмяАналитики      - Строка.
//  ВыводитьСообщения - Булево.
//  ТекстСообщения	  - Строка, в которую будет помещено диагностическое собщение.
// 
// Возвращаемое значение:
//   Булево.
// 
Функция ЕстьДвиженияПоАналитике(ИмяАналитики, ВыводитьСообщения, ТекстСообщения = "") Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	флРезультат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""Обороты по бюджетам"" КАК ИмяРегистра,
	|	бит_ОборотыПоБюджетамОбороты.%ИмяАналитики%
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(, , Период, %ИмяАналитики% <> НЕОПРЕДЕЛЕНО) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""Контрольные значения бюджетов"",
	|	бит_КонтрольныеЗначенияБюджетовОбороты.%ИмяАналитики%
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(, , , %ИмяАналитики% <> НЕОПРЕДЕЛЕНО) КАК бит_КонтрольныеЗначенияБюджетовОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""Зависимые обороты"",
	|	бит_ЗависимыеОбороты.%ИмяАналитики%
	|ИЗ
	|	РегистрСведений.бит_ЗависимыеОбороты КАК бит_ЗависимыеОбороты
	|ГДЕ
	|	(бит_ЗависимыеОбороты.%ИмяАналитики% <> НЕОПРЕДЕЛЕНО
	|			ИЛИ бит_ЗависимыеОбороты.%ИмяАналитики%_Зависимый <> НЕОПРЕДЕЛЕНО)
	|
	|";
	Если Метаданные.РегистрыНакопления.Найти("бит_ПланируемоеПоступлениеДенежныхСредств") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	""Планируемое поступление денежных средств"",
		|	бит_ПланируемоеПоступлениеДенежныхСредствОбороты.%ИмяАналитики%
		|ИЗ
		|	РегистрНакопления.бит_ПланируемоеПоступлениеДенежныхСредств.Обороты(, , , %ИмяАналитики% <> НЕОПРЕДЕЛЕНО) КАК бит_ПланируемоеПоступлениеДенежныхСредствОбороты
		|
		|";
	КонецЕсли;
	Если Метаданные.РегистрыНакопления.Найти("бит_ПланируемыйРасходДенежныхСредств") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	""Планируемый расход денежных средств"",
		|	бит_ПланируемыйРасходДенежныхСредствОбороты.%ИмяАналитики%
		|ИЗ
		|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(, , , %ИмяАналитики% <> НЕОПРЕДЕЛЕНО) КАК бит_ПланируемыйРасходДенежныхСредствОбороты
		|
		|";
	КонецЕсли;
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ИмяАналитики%", ИмяАналитики);			   
				   
	Результат = Запрос.Выполнить();	
	Если НЕ Результат.Пустой() Тогда
		
		флРезультат = Истина;
		
		ТекстСообщения = НСтр("ru = 'Обнаружены движения по аналитике ""%1"" в регистрах: '");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяАналитики); 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл				 
			ТекстСообщения = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(ТекстСообщения, Выборка.ИмяРегистра, Символы.ПС + "-");				 
		КонецЦикла; 
		
		Если ВыводитьСообщения Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		КонецЕсли; 
	КонецЕсли; 

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат флРезультат;
	
КонецФункции

// Процедура контролирует совпадение типов дополнительных аналитик в наборе записей с типами аналитик, 
// назначенными в регистре сведений "бит_Назначение дополнительных измерений".
// 
// Параметры:
//  НаборЗаписей  - РегистрНакопленияНаборЗаписей.
// 
Процедура КонтрольТиповДополнительныАналитик(НаборЗаписей) Экспорт
	
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	ИзмеренияДоп = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	
	Для каждого Запись Из НаборЗаписей Цикл
		Для каждого КлючИЗначение Из ИзмеренияДоп Цикл
			ИмяИзмерения      = КлючИЗначение.Ключ;
			ТекущаяНастройка  = НастройкиИзмерений[ИмяИзмерения];
			ЗначениеИзмерения = Запись[ИмяИзмерения];
			Если НЕ ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
				// Согласно стандарту пустые значения составного типа - приводим к неопределено.
				Запись[ИмяИзмерения] = Неопределено;
			Иначе	
				Если ТекущаяНастройка = Неопределено Тогда
					Если ЗначениеИзмерения <> Неопределено Тогда
						// Настройки нет - приводим к неопределено.
						Запись[ИмяИзмерения] = Неопределено;
					КонецЕсли; 
				Иначе	
					Если НЕ ТекущаяНастройка.Аналитика.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеИзмерения)) Тогда
						// Тип значения не соответствует настройке доп. измерения - приводим к неопределено.
						Запись[ИмяИзмерения] = Неопределено
					КонецЕсли; 
				КонецЕсли; // Заполнена настройка для измерения.
			КонецЕсли; // Заполнено значение измерения.
		КонецЦикла; // По дополнительным измерениям.
	КонецЦикла; // По записям набора.
	
КонецПроцедуры

// Функция формирует текст для конкретного поля отбора построителя отчета.
// 
// Параметры:
// 	ИмяРегистра - строка - имя таблицы запроса, поле которой будет использоваться в отборе.
// 	Аналитика - строка - имя поля таблицы, которое используется в отборе.
// 	СтруктураНастройки - структура - содержит настройки отображения дополнительных измерений регистра.
// 
// Возвращаемое значение:
//   СтрокаПоляОтбора   - Строка.
// 
Функция СформироватьТекстПоляОтбора(ИмяРегистра, Аналитика, СтруктураНастройки)  Экспорт
	
	СтрокаПоляОтбора = "";
	
	Если НЕ СтруктураНастройки.ЭтоСоставнойТип Тогда
		// Определим полное имя объекта.
		Если НЕ бит_ОбщегоНазначения.ЭтоПримитивныйТип(СтруктураНастройки.Аналитика.ТипЗначения.ПривестиЗначение()) Тогда
			
			ПустоеЗначение = СтруктураНастройки.Аналитика.ТипЗначения.ПривестиЗначение();
			
			МетаданныеОбъекта = ПустоеЗначение.Метаданные();
			
			ИмяОбъекта = МетаданныеОбъекта.Имя;
			
			Если бит_ОбщегоНазначения.ЗначениеПринадлежитКоллекцииМетаданных("Перечисления",ПустоеЗначение) Тогда
				ИмяОбъектаПолное = "Перечисление."+ИмяОбъекта;
			Иначе	
				ВидОбъекта = бит_ПраваДоступа.ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);	
				ИмяОбъектаПолное = бит_ПраваДоступа.ПолучитьПолноеИмяОбъекта(ИмяОбъекта,ВидОбъекта);
			КонецЕсли; 
		Иначе
			ИмяОбъектаПолное = Строка(СтруктураНастройки.Аналитика.ТипЗначения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяОбъектаПолное) Тогда
			СтрокаПоляОтбора = ",
			|Выразить("+ИмяРегистра+"."+Аналитика + " КАК "+ИмяОбъектаПолное+").* КАК "+Аналитика;
		Иначе
			СтрокаПоляОтбора = ",
			|"+ИмяРегистра+"."+Аналитика;	
		КонецЕсли;
		
	Иначе
		СтрокаПоляОтбора = ",
		|"+ИмяРегистра+"."+Аналитика;	
	КонецЕсли; 
	
	Возврат СтрокаПоляОтбора;
	
КонецФункции

// Процедура управляет видимостью полей ввода дополнительных измерений. 
// Выводит синонимы назначенные измерениям и скрывает неиспользуемые дополнительные измерения.
// 
// Параметры:
//  ТекущаяФорма       - Форма.
//  Измерения          - Структура - все дополнительные измерения регистра.
//  НастройкиИзмерений - Соответствие - настройки используемых дополнительных измерений.
//  СоответствиеИмен   - Сответствие - соответствие имен измерений регистра и имен элементов управления на форме
// 								Ключ - Строка - имя измерения в регистре
// 								Значение - Структура - (ИмяНадписи, ИмяПоляВвода, Префикс, Постфикс).
// 
Процедура ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ТекущаяФорма, Измерения, НастройкиИзмерений, СоответствиеИмен = Неопределено) Экспорт
	
	Если СоответствиеИмен = Неопределено Тогда
		СоответствиеИмен = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого КлючИЗначение ИЗ Измерения Цикл
		ИмяИзмерения = КлючИЗначение.Ключ;
		Если НЕ СоответствиеИмен[ИмяИзмерения] = Неопределено Тогда
			СтруктураДанных = СоответствиеИмен[ИмяИзмерения];
			ИмяНадписи 		= СтруктураДанных.ИмяНадписи;
			ИмяПоляВвода 	= СтруктураДанных.ИмяПоляВвода;
			Префикс			= СтруктураДанных.Префикс;
			Постфикс		= СтруктураДанных.Постфикс;
		Иначе
			ИмяНадписи 		= "Надпись" + ИмяИзмерения;
			ИмяПоляВвода 	= ИмяИзмерения;
			Префикс			= "";
			Постфикс		= "";
		КонецЕсли;
		
		НайденноеПолеВвода = ТекущаяФорма.Элементы.Найти(ИмяПоляВвода);
		ТекущаяНастройка = НастройкиИзмерений[ИмяИзмерения];
		Если ТекущаяНастройка = Неопределено Тогда
			Если НЕ НайденноеПолеВвода = Неопределено Тогда
				НайденноеПолеВвода.Видимость 	= Ложь;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если Не НайденноеПолеВвода = Неопределено Тогда
			НайденноеПолеВвода.Заголовок				= Префикс + ТекущаяНастройка.Синоним + Постфикс;			
			НайденноеПолеВвода.Подсказка				= ТекущаяНастройка.Синоним;
			НайденноеПолеВвода.АвтоОтметкаНезаполненного= ТекущаяНастройка.Обязательное;
		    НайденноеПолеВвода.ОграничениеТипа			= ТекущаяНастройка.ТипЗначения;
		    НайденноеПолеВвода.ДоступныеТипы			= ТекущаяНастройка.ТипЗначения;
			НайденноеПолеВвода.Видимость				= Истина;
		КонецЕсли;
	КонецЦикла; // По измерениям.
	
КонецПроцедуры

// Процедура управляет видимостью колонок дополнительных измерений. 
// Выводит синонимы назначенные измерениям.
// 
// Параметры:
//  ТекущаяФорма       - Форма.
//  ИмяТабличногоПоля  - Строка.
//  Измерения          - Структура.
//  НастройкиИзмерений - Соответствие.
//  СоответствиеИмен   - Сответствие.
// 
Процедура ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ТекущаяФорма
	                                                      ,ИмяТабличногоПоля
														  ,Измерения = Неопределено
														  ,НастройкиИзмерений = Неопределено
														  ,СоответствиеИмен = Неопределено) Экспорт

	Если Измерения = Неопределено Тогда
		Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	КонецЕсли; 
	
	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли;
	
	// Текущая реализация не учитывает объединение элементов в группы.
	КолонкиТабПоля = ТекущаяФорма.Элементы;
		
	Если СоответствиеИмен = Неопределено Тогда
		СоответствиеИмен = Новый Соответствие;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из Измерения Цикл
		ИмяИзмерения = КлючИЗначение.Ключ;
		Если НЕ СоответствиеИмен[ИмяИзмерения] = Неопределено Тогда
			СтруктураДанных	= СоответствиеИмен[ИмяИзмерения];
			ИмяКолонки		= СтруктураДанных.ИмяПоля;
			Префикс			= СтруктураДанных.Префикс;
			Постфикс		= СтруктураДанных.Постфикс;
		Иначе
			ИмяКолонки	= ИмяТабличногоПоля + ИмяИзмерения;
			Префикс		= "";
			Постфикс	= "";
		КонецЕсли;
		
		ТекущаяКолонка = КолонкиТабПоля.Найти(ИмяКолонки);
		Если ТекущаяКолонка <> Неопределено Тогда
		   ТекущаяНастройка = НастройкиИзмерений[ИмяИзмерения];
			Если ТекущаяНастройка <> Неопределено Тогда
				ТекущаяКолонка.Видимость = Истина;				
				ТекущаяКолонка.Заголовок = Префикс + ТекущаяНастройка.Синоним + Постфикс;
				Если ТекущаяКолонка.Вид = ВидПоляФормы.ПолеВвода Тогда					
					ТекущаяКолонка.АвтоОтметкаНезаполненного = ТекущаяНастройка.Обязательное;
				 	ТекущаяКолонка.ОграничениеТипа 			 = ТекущаяНастройка.Аналитика.ТипЗначения; 				 
				КонецЕсли; 
			Иначе
				ТекущаяКолонка.Видимость = Ложь;
			КонецЕсли;  
		КонецЕсли; // Есть колонка с заданным именем.
	КонецЦикла; // По именам дополнительных измерений.

КонецПроцедуры
        
// Процедура если по статье не было движений и удаляют назначенную доп. аналитику.
// Необходимо удалить во всех справочниках статьи оборотов обязательность заполнения по данной аналитике,
// чтобы не возникало ошибок.
// 
// Параметры
// 	ИмяАналитики - строка.
// 
Процедура УдалитьОбязательностьЗаполненияВСтатьеОборотов(ИмяАналитики) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасширениеАналитик", Неопределено);
	Запрос.УстановитьПараметр("РасширениеСвойствАналитик", Неопределено);
	Запрос.УстановитьПараметр("РасширениеУсловияАналитик", Ложь);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Наименование КАК Наименование,
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.Учет_Аналитика_1 КАК Учет_Аналитика_1,
	|	Таблица.Учет_Аналитика_2 КАК Учет_Аналитика_2,
	|	Таблица.Учет_Аналитика_3 КАК Учет_Аналитика_3,
	|	Таблица.Учет_Аналитика_4 КАК Учет_Аналитика_4,
	|	Таблица.Учет_Аналитика_5 КАК Учет_Аналитика_5,
	|	Таблица.Учет_Аналитика_6 КАК Учет_Аналитика_6,
	|	Таблица.Учет_Аналитика_7 КАК Учет_Аналитика_7,
	|	Таблица.Обязательный_Аналитика_1 КАК Обязательный_Аналитика_1,
	|	Таблица.Обязательный_Аналитика_2 КАК Обязательный_Аналитика_2,
	|	Таблица.Обязательный_Аналитика_3 КАК Обязательный_Аналитика_3,
	|	Таблица.Обязательный_Аналитика_4 КАК Обязательный_Аналитика_4,
	|	Таблица.Обязательный_Аналитика_5 КАК Обязательный_Аналитика_5,
	|	Таблица.Обязательный_Аналитика_6 КАК Обязательный_Аналитика_6,
	|	Таблица.Обязательный_Аналитика_7 КАК Обязательный_Аналитика_7,
	|	&РасширениеАналитик,
	|	&РасширениеСвойствАналитик
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК Таблица
	|ГДЕ
	|	(Таблица.Обязательный_Аналитика_1 = ИСТИНА
	|			ИЛИ Таблица.Учет_Аналитика_2 = ИСТИНА
	|			ИЛИ Таблица.Учет_Аналитика_3 = ИСТИНА
	|			ИЛИ Таблица.Учет_Аналитика_4 = ИСТИНА
	|			ИЛИ Таблица.Учет_Аналитика_5 = ИСТИНА
	|			ИЛИ Таблица.Учет_Аналитика_6 = ИСТИНА
	|			ИЛИ Таблица.Учет_Аналитика_7 = ИСТИНА
	|			ИЛИ &РасширениеУсловияАналитик)";
	
	Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		
		РасширениеАналитик = 
		"
		|	Таблица.Учет_Аналитика_8 КАК Учет_Аналитика_8,
		|	Таблица.Учет_Аналитика_9 КАК Учет_Аналитика_9,
		|	Таблица.Учет_Аналитика_10 КАК Учет_Аналитика_10,
		|	Таблица.Учет_Аналитика_11 КАК Учет_Аналитика_11,
		|	Таблица.Учет_Аналитика_12 КАК Учет_Аналитика_12";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РасширениеАналитик", РасширениеАналитик);
		
		РасширениеСвойствАналитик = 
		"
		|	Таблица.Обязательный_Аналитика_8 КАК Обязательный_Аналитика_8,
		|	Таблица.Обязательный_Аналитика_9 КАК Обязательный_Аналитика_9,
		|	Таблица.Обязательный_Аналитика_10 КАК Обязательный_Аналитика_10,
		|	Таблица.Обязательный_Аналитика_11 КАК Обязательный_Аналитика_11,
		|	Таблица.Обязательный_Аналитика_12 КАК Обязательный_Аналитика_12";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РасширениеСвойствАналитик", РасширениеСвойствАналитик);
		
		РасширениеУсловияАналитик =
		"
		|	ИЛИ Таблица.Учет_Аналитика_8
		|	ИЛИ Таблица.Учет_Аналитика_9
		|	ИЛИ Таблица.Учет_Аналитика_10
		|	ИЛИ Таблица.Учет_Аналитика_11
		|	ИЛИ Таблица.Учет_Аналитика_21";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РасширениеУсловияАналитик", РасширениеУсловияАналитик);
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	
	СтрОтбор = Новый Структура("Обязательный_"+ИмяАналитики, Истина);
	МассивСтрок = ТЗ.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		Для каждого СтрокаТЗ Из МассивСтрок Цикл
			СпрОб = СтрокаТЗ.Ссылка.ПолучитьОбъект();
			СпрОб["Обязательный_"+ИмяАналитики] = Ложь;
			СпрОб["Учет_"+ИмяАналитики] = Ложь;
			бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОб,,"Ошибки");
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

// Функция получает значение аналитики.
// 
// Параметры:
//  Объект             	- Объект, доп. аналитика, которого получается.
//  ИмяАналитики       	- Строка или значение ПВХ "бит_ВидыДополнительныхАналитик".
//  ЗначениеПоУмолчанию	- Значение, которое нужно вернуть, если в регистре нет такой аналитики.
//
// Возвращаемое значение:
//   Значение аналитики.
//
Функция ПолучитьЗначениеДопАналитики(Объект, ИмяАналитики, ЗначениеПоУмолчанию = Неопределено) Экспорт

	Если ТипЗнч(ИмяАналитики) = Тип("Строка") Тогда
	     Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик[ИмяАналитики];
	Иначе	
	     Аналитика = ИмяАналитики;
	КонецЕсли; 
	
	Значение = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ДополнительныеАналитики.ЗначениеАналитики КАК ЗначениеАналитики
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|ГДЕ
	|	бит_ДополнительныеАналитики.Объект = &Объект
	|	И бит_ДополнительныеАналитики.Аналитика = &Аналитика";
	
	Запрос.УстановитьПараметр("Аналитика", Аналитика);
	Запрос.УстановитьПараметр("Объект",    Объект);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
	    Значение = Выборка.ЗначениеАналитики;
	Иначе
		Значение = ЗначениеПоУмолчанию;
	КонецЕсли; 
	
	Возврат Значение;
	
КонецФункции

// Функция проверяет ручную корректировку.   
// 
Функция ЕстьРучнаяКорректировкаФакта(Объект) Экспорт 

	Результат = Ложь;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
	     Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_РучнаяКорректировкаФакта.Значение
	|ИЗ
	|	РегистрСведений.бит_РучнаяКорректировкаФакта КАК бит_РучнаяКорректировкаФакта
	|ГДЕ
	|	бит_РучнаяКорректировкаФакта.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.Значение;
	КонецЕсли; 
	
    Возврат Результат;
	
КонецФункции

// Обработчик подписки "бит_ИспользоватьРучнуюКорректировкуДвиженийПриЗаписи".
//
// Параметры:
//  Источник - КонстантаМенеджерЗначения.ИспользоватьРучнуюКорректировкуДвижений. 
//  Отказ	 - Булево.
//
Процедура ИспользоватьРучнуюКорректировкуДвиженийПриЗаписи(Источник, Отказ) Экспорт 

	УстановитьПривилегированныйРежим(Истина);	
	
	// Обрабатываем только выключение.
	// Если в регистре нет "значимых" записей, считаем, что корректировок не было и отключаем ФО.
	
	Если НЕ Источник.Значение И ПолучитьФункциональнуюОпцию("бит_ИспользоватьРучнуюКорректировкуФакта") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(РучнаяКорректировкаФакта.Значение) КАК Значение
		|ИЗ
		|	РегистрСведений.бит_РучнаяКорректировкаФакта КАК РучнаяКорректировкаФакта
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(РучнаяКорректировкаФакта.Значение) = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Константы.бит_ИспользоватьРучнуюКорректировкуФакта.Установить(Ложь);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
 
#Если Клиент Тогда

// Процедура управляет видимостью колонок дополнительных измерений. 
// Выводит синонимы назначенные измерениям.
// 
// Параметры:
//  ТекущаяФорма       	   - Форма.
//  ИмяТабличногоПоля  	   - Строка.
//  Измерения          	   - Структура.
//  НастройкиИзмерений 	   - Соответствие.
//  СоответствиеИмен   	   - Сответствие.
//  ПрефиксИмениДопКолонки - Строка. По умолчанию "".
//     Стандартное имя доп колонок "Аналитика_(i)", при необходимости указываеться 
//     префикс для имени колонки например: "бит_", в итоге: бит_Аналитика_(i).
// 
Процедура ОтобразитьДополнительныеИзмеренияВТабличномПоле(ТекущаяФорма
	                                                      ,ИмяТабличногоПоля
														  ,Измерения = Неопределено
														  ,НастройкиИзмерений = Неопределено
														  ,СоответствиеИмен = Неопределено
														  ,ПрефиксИмениДопКолонки = "") Экспорт

	КолонкиТабПоля = ТекущаяФорма.ЭлементыФормы[ИмяТабличногоПоля].Колонки;
	
	Если Измерения = Неопределено Тогда
		Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	КонецЕсли; 
	
	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли; 
	
	Если СоответствиеИмен = Неопределено Тогда
		СоответствиеИмен = Новый Соответствие;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из Измерения Цикл
	
		ИмяИзмерения = КлючИЗначение.Ключ;
		
		Если НЕ СоответствиеИмен[ИмяИзмерения] = Неопределено Тогда
			СтруктураДанных	= СоответствиеИмен[ИмяИзмерения];
			ИмяКолонки		= СтруктураДанных.ИмяПоля;
			Префикс			= СтруктураДанных.Префикс;
			Постфикс		= СтруктураДанных.Постфикс;
		Иначе
			ИмяКолонки 	= ИмяИзмерения;
			Префикс		= "";
			Постфикс	= "";
		КонецЕсли;
		
		ИмяКолонкиАналитики = ПрефиксИмениДопКолонки + ИмяКолонки;
		ТекущаяКолонка 		= КолонкиТабПоля.Найти(ИмяКолонкиАналитики);
		
		Если ТекущаяКолонка <> Неопределено Тогда
		   ТекущаяНастройка = НастройкиИзмерений[ИмяИзмерения];
			Если ТекущаяНастройка <> Неопределено Тогда
				 ТекущаяКолонка.Видимость 					= Истина;
				 ТекущаяКолонка.АвтоОтметкаНезаполненного 	= ТекущаяНастройка.Обязательное;
				 ТекущаяКолонка.ТекстШапки   				= Префикс + ТекущаяНастройка.Синоним + Постфикс;
				 Если ТипЗнч(ТекущаяКолонка.ЭлементУправления) = Тип("ПолеВвода") Тогда
				 	ТекущаяКолонка.ЭлементУправления.ОграничениеТипа = ТекущаяНастройка.Аналитика.ТипЗначения;
				 КонецЕсли; 
			Иначе
				ТекущаяКолонка.Видимость = Ложь;
			КонецЕсли;  
		КонецЕсли; // Есть колонка с заданным именем.
	КонецЦикла; // По именам дополнительных измерений.

КонецПроцедуры

// Процедура управляет видимостью полей ввода дополнительных измерений. 
// Выводит синонимы назначенные измерениям и скрывает неиспользуемые дополнительные измерения.
// 
// Параметры:
//  ТекущаяФорма       - Форма.
//  Измерения          - Структура - все дополнительные измерения регистра.
//  НастройкиИзмерений - Соответствие - настройки используемых дополнительных измерений.
//  СоответствиеИмен   - Сответствие - соответствие имен измерений регистра и имен элементов управления на форме
// 								Ключ - Строка - имя измерения в регистре
// 								Значение - Структура - (ИмяНадписи, ИмяПоляВвода, Префикс, Постфикс).
// 
Процедура ОтобразитьДополнительныеИзмеренияНаФорме(ТекущаяФорма, Измерения=Неопределено, НастройкиИзмерений=Неопределено, СоответствиеИмен=Неопределено) Экспорт
	
	Если Измерения = Неопределено Тогда
		Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	КонецЕсли; 
	
	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли;
	
	Если СоответствиеИмен = Неопределено Тогда
		СоответствиеИмен = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого КлючИЗначение ИЗ Измерения Цикл
		
		ИмяИзмерения = КлючИЗначение.Ключ;
		
		Если НЕ СоответствиеИмен[ИмяИзмерения] = Неопределено Тогда
			СтруктураДанных = СоответствиеИмен[ИмяИзмерения];
			
			ИмяНадписи 		= СтруктураДанных.ИмяНадписи;
			ИмяПоляВвода 	= СтруктураДанных.ИмяПоляВвода;
			Префикс			= СтруктураДанных.Префикс;
			Постфикс		= СтруктураДанных.Постфикс;
		Иначе
			ИмяНадписи 		= "Надпись" + ИмяИзмерения;
			ИмяПоляВвода 	= ИмяИзмерения;
			Префикс			= "";
			Постфикс		= "";
		КонецЕсли;
		
		НайденнаяНадпись 	= ТекущаяФорма.ЭлементыФормы.Найти(ИмяНадписи);
		НайденноеПолеВвода 	= ТекущаяФорма.ЭлементыФормы.Найти(ИмяПоляВвода);
		
		ТекущаяНастройка = НастройкиИзмерений[ИмяИзмерения];
		
		Если ТекущаяНастройка = Неопределено Тогда
			Если НЕ НайденнаяНадпись = Неопределено Тогда
				НайденнаяНадпись.Видимость 		= Ложь;
			КонецЕсли;
			Если НЕ НайденноеПолеВвода = Неопределено Тогда
				НайденноеПолеВвода.Видимость 	= Ложь;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если НЕ НайденнаяНадпись = Неопределено Тогда
			НайденнаяНадпись.Заголовок = Префикс + ТекущаяНастройка.Синоним + Постфикс;
		КонецЕсли;
		
		Если Не НайденноеПолеВвода = Неопределено Тогда
			НайденноеПолеВвода.Подсказка 					= ТекущаяНастройка.Синоним;
			НайденноеПолеВвода.АвтоОтметкаНезаполненного 	= ТекущаяНастройка.Обязательное;
		    НайденноеПолеВвода.ОграничениеТипа              = ТекущаяНастройка.Аналитика.ТипЗначения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

// Процедура формирует заголовки полей схемы компоновки данных связанных с дополнительными
// 	измерениями регистра в соответствии с указанными настройками доп.измерений.
// 
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных.
// 	ИмяНабораДанных - Строка - набор данных переданной схемы компоновки данных,
// 					в котором необходимо сформировать заголовки полей связанных с дополнительными измерениями.
// 	НастройкиИзмерений - Соответствие - настройки используемых дополнительных измерений.
// 	ДопИзмерения - Структура - содержит дополнительные измерения регистра накопления "бит_ОборотыПоБюджетам".
// 	МассивИсключаемыхАналитик - Массив - содержит типы аналитик, которые дублируются с реквизитами документа.
// 
Процедура СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СхемаКомпоновкиДанных
																, ИмяНабораДанных
																, НастройкиИзмерений=Неопределено
																, ДопИзмерения=Неопределено
																, МассивИсключаемыхАналитик=Неопределено) Экспорт
	
	Если ДопИзмерения = Неопределено Тогда
		ДопИзмерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	КонецЕсли;
	
	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли;
	
	Поля = СхемаКомпоновкиДанных.НаборыДанных[ИмяНабораДанных].Поля;
	
	Для Каждого ТекущаяНастройка Из ДопИзмерения Цикл
		
		НайденноеПоле = Поля.Найти(ТекущаяНастройка.Ключ);
		
		Если НайденноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Изменение кода. Начало. 30.01.2017{{
		СтруктураАналитики = НастройкиИзмерений[ТекущаяНастройка.Ключ];
		
		Если СтруктураАналитики = Неопределено Тогда
			НайденноеПоле.Заголовок 	= "Ңе используется";
		Иначе
			НайденноеПоле.Заголовок 	= СтруктураАналитики.Синоним;
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(СтруктураАналитики.ЗначениеПоУмолчанию));
			
			НайденноеПоле.ТипЗначения 	= Новый ОписаниеТипов(МассивТипов);
			
			Если СтруктураАналитики.ЭтоСоставнойТип = Ложь
				И МассивИсключаемыхАналитик <> Неопределено
				И МассивИсключаемыхАналитик.Найти(СтруктураАналитики.ТипЗначения.типы()[0]) <> Неопределено Тогда
			
				НайденноеПоле.ОграничениеИспользования.Группировка = Истина;
				НайденноеПоле.ОграничениеИспользования.Поле        = Истина;
				НайденноеПоле.ОграничениеИспользования.Условие     = Истина;
				НайденноеПоле.ОграничениеИспользования.Порядок     = Истина;
				
				НайденноеПоле.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				НайденноеПоле.ОграничениеИспользованияРеквизитов.Поле        = Истина;
				НайденноеПоле.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				НайденноеПоле.ОграничениеИспользованияРеквизитов.Порядок     = Истина;
			
			КонецЕсли; 
		КонецЕсли;
		// Изменение кода. Конец. 30.01.2017}}
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует заголовки полей схемы компоновки данных связанных с дополнительными
// 	измерениями регистра в соответствии с указанными настройками доп.измерений. 
//  Данная модификация процедуры используется в настройках формы ввода.
// 
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных.
// 	ИмяНабораДанных - Строка - набор данных переданной схемы компоновки данных,
// 					в котором необходимо сформировать заголовки полей связанных с дополнительными измерениями.
// 	НастройкиИзмерений - Соответствие - настройки используемых дополнительных измерений.
// 	ДопИзмерения - Структура - содержит дополнительные измерения регистра накопления "бит_ОборотыПоБюджетам".
// 
Процедура СформироватьЗаголовкиПолейДополнительныхИзмеренийНастройкиФормыВвода(СхемаКомпоновкиДанных
	                                                                            , ИмяНабораДанных
																				, НастройкиИзмерений=Неопределено
																				, ДопИзмерения=Неопределено
																				, УстанавливатьТипы = Истина) Экспорт
	
	Если ДопИзмерения = Неопределено Тогда
		ДопИзмерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	КонецЕсли;
	
	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли;
	
	Поля = СхемаКомпоновкиДанных.НаборыДанных[ИмяНабораДанных].Поля;
	
	Для Каждого ТекущаяНастройка Из ДопИзмерения Цикл
		
		// Сами измерения.
		НайденноеПоле = Поля.Найти(ТекущаяНастройка.Ключ);
		Если НЕ НайденноеПоле = Неопределено Тогда
			Если НастройкиИзмерений[ТекущаяНастройка.Ключ] = Неопределено Тогда
				НайденноеПоле.Заголовок 	= "Ңе используется";
			Иначе
				НайденноеПоле.Заголовок 	= НастройкиИзмерений[ТекущаяНастройка.Ключ].Синоним;
				Если УстанавливатьТипы Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ТипЗнч(НастройкиИзмерений[ТекущаяНастройка.Ключ].ЗначениеПоУмолчанию));
					НайденноеПоле.ТипЗначения 	= Новый ОписаниеТипов(МассивТипов);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		// Кодификаторы.
		ИмяПоля = ТекущаяНастройка.Ключ+"_Кодификатор";
		НайденноеПоле = Поля.Найти(ИмяПоля);
		Если НЕ НайденноеПоле = Неопределено Тогда
			Если НастройкиИзмерений[ТекущаяНастройка.Ключ] = Неопределено Тогда
				НайденноеПоле.Заголовок 	= "Ңе используется";
			Иначе
				НайденноеПоле.Заголовок 	= НастройкиИзмерений[ТекущаяНастройка.Ключ].Синоним+"_Кодификатор";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
Функция ЗначениеАналитикиНоменклатурнаяГруппа(Аналитики, ТекущийОбъект)
	
	Если ЗначениеЗаполнено(Аналитики.НоменклатурнаяГруппа) Тогда
		Возврат Аналитики.НоменклатурнаяГруппа;	
	КонецЕсли; 
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("НоменклатурнаяГруппа");
	ИменаРеквизитов.Добавить("Субконто1");
	ИменаРеквизитов.Добавить("Субконто2");
	ИменаРеквизитов.Добавить("Субконто3");
	
	// Оценка возможности применимости имен.
	Индекс = ИменаРеквизитов.ВГраница();
	Пока Индекс >= 0 Цикл
		Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта(ИменаРеквизитов.Получить(Индекс), МетаданныеОбъекта) Тогда
			ИменаРеквизитов.Удалить(Индекс);
		КонецЕсли; 
		Индекс = Индекс - 1;
	КонецЦикла;
	
	НоменклатурнаяГруппа = Неопределено;
	
	// ТекущийОбъект может быть ссылкой или объектом. От этого зависит способ чтения данных.
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ТекущийОбъект)) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект,
								СтрСоединить(ИменаРеквизитов, ","));
	Иначе			
		РеквизитыОбъекта = Новый Структура(СтрСоединить(ИменаРеквизитов, ","));
		ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, ТекущийОбъект);
	КонецЕсли; 
	
	Для каждого КлючЗначение Из РеквизитыОбъекта Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение) 
			И ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			НоменклатурнаяГруппа = КлючЗначение.Значение; 
			Прервать;			
		КонецЕсли; 
	КонецЦикла;
	
	Возврат НоменклатурнаяГруппа;
	
КонецФункции

Функция ЗначениеАналитикиСтатьяОборотов(Аналитики, ТекущийОбъект)
	
	Если ЗначениеЗаполнено(Аналитики.СтатьяОборотов) Тогда
		Возврат Аналитики.СтатьяОборотов;	
	КонецЕсли; 
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	ТекПользователь	  = Пользователи.ТекущийПользователь();
	
	ЕстьСтатьяДДС 		   = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтатьяДвиженияДенежныхСредств", МетаданныеОбъекта);
	ЕстьСтатьяДДСВТаблице  = бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти("СтатьяДвиженияДенежныхСредств", 
								МетаданныеОбъекта, "РасшифровкаПлатежа");
	
	РеквизитыОбъекта = Новый Массив(); 
	РеквизитыОбъекта.Добавить("Ссылка");
	
	Если ЕстьСтатьяДДС Тогда
		РеквизитыОбъекта.Добавить("СтатьяДвиженияДенежныхСредств");
	КонецЕсли; 
	Если ЕстьСтатьяДДСВТаблице Тогда
		РеквизитыОбъекта.Добавить("РасшифровкаПлатежа");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ТекущийОбъект)) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект, РеквизитыОбъекта);
	Иначе	
		Реквизиты = Новый Структура(СтрСоединить(РеквизитыОбъекта, ","));
		ЗаполнитьЗначенияСвойств(Реквизиты, ТекущийОбъект);
	КонецЕсли; 
	
	Если ЕстьСтатьяДДСВТаблице Тогда
		Реквизиты.Вставить("РасшифровкаПлатежа", Реквизиты.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли; 

	// Статья оборотов уточняется по реквизитам шапки или ТЧ "Расшифровка платежа", если кол-во строк = 1.
	СтатьяОборотов = Неопределено;
	СтатьяДДС 	   = Неопределено; 
	Если ЕстьСтатьяДДСВТаблице И Реквизиты.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтатьяДДС = Реквизиты.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СтатьяДДС) И ЕстьСтатьяДДС Тогда
		СтатьяДДС = Реквизиты.СтатьяДвиженияДенежныхСредств;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтатьяДДС) Тогда
		СоответствиеСтатей = бит_Бюджетирование.СвязанныеСтатьиОборотовИСтатьиРегл(СтатьяДДС);
		Если СоответствиеСтатей.Количество() = 1 
				И ТипЗнч(СоответствиеСтатей[0]) = Тип("СправочникСсылка.бит_СтатьиОборотов") Тогда 	
			СтатьяОборотов = СоответствиеСтатей[0];  					 
		КонецЕсли;
	КонецЕсли; 
	
	// По остальным реквизитам через соответствия.
	Если Не ЗначениеЗаполнено(СтатьяОборотов) Тогда
		// Заполним структуру типов с массивами реквизитов.
		СтруктураТипов = Новый Структура;
		Типы = Новый Массив;
		Типы.Добавить("СтатьяДвиженияДенежныхСредств");
		СтруктураТипов.Вставить("СтатьиДвиженияДенежныхСредств", Типы);
		
		Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
			Типы = Новый Массив;
			Типы.Добавить("СтатьяЗатрат");
			СтруктураТипов.Вставить("СтатьиЗатрат", Типы);
		КонецЕсли; 
		
		Для каждого КлючЗначение Из СтруктураТипов Цикл
			Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
				Прервать; // Если значение уже заполнено - не продолжаем поиск.
			Иначе
				ИменаРеквизитов = КлючЗначение.Значение;
				Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
					ЗаполнитьЗначениеДопАналитикиСтатьиОборотовПоРеквизиту(СтатьяОборотов, ИмяРеквизита, ТекущийОбъект, МетаданныеОбъекта);
				КонецЦикла; 
				
				ТребуемыйТип = Тип("СправочникСсылка." + КлючЗначение.Ключ);			
				ЗаполнитьЗначениеДопАналитикиСтатьиОборотовПоНаборуРеквизитов(СтатьяОборотов, "Субконто", ТекущийОбъект, МетаданныеОбъекта, ТребуемыйТип);    		 		
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат СтатьяОборотов;
	
КонецФункции

Функция ЗначениеАналитикиЦФО(Аналитики, ТекущийОбъект)
	
	Если ЗначениеЗаполнено(Аналитики.ЦФО) Тогда
		Возврат Аналитики.ЦФО;
	КонецЕсли; 

	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	
	РеквизитыСтрокой = Новый Массив;
	РеквизитыСтрокой.Добавить("Организация");
	РеквизитыСтрокой.Добавить("ПодразделениеОрганизации");
	
	// Оценка возможности применимости имен.
	Индекс = РеквизитыСтрокой.ВГраница();
	Пока Индекс >= 0 Цикл
		Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта(РеквизитыСтрокой.Получить(Индекс), МетаданныеОбъекта) Тогда
			РеквизитыСтрокой.Удалить(Индекс);
		КонецЕсли; 
		Индекс = Индекс - 1;
	КонецЦикла;
	
	// ТекущийОбъект может быть ссылкой или объектом. От этого зависит способ чтения данных.
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ТекущийОбъект)) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект, СтрСоединить(РеквизитыСтрокой, ","));
	Иначе			
		РеквизитыОбъекта = Новый Структура(СтрСоединить(РеквизитыСтрокой, ","));
		ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, ТекущийОбъект);
	КонецЕсли; 
	
	ЦФО = Неопределено;
	// Обход, полученных данных.
	Для каждого КлючЗначение Из РеквизитыОбъекта Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение) 
			И (ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.Организации")
			ИЛИ  ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
			
			ЗначенияПодстановки = бит_Бюджетирование.СвязанныеЦФОИПодразделения(КлючЗначение.Значение);		
			Если ЗначенияПодстановки.Количество() <> 0 Тогда
				Если ТипЗнч(ЗначенияПодстановки[0]) = Тип("СправочникСсылка.Подразделения") Тогда				
					ЦФО = ЗначенияПодстановки[0];				
				КонецЕсли; 
			КонецЕсли;	
			Если ЗначениеЗаполнено(ЦФО) Тогда
				Прервать;			
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ЦФО;
	
КонецФункции

Функция ЗначениеАналитикиДоговор(Аналитики, ТекущийОбъект)
	
	Если ЗначениеЗаполнено(Аналитики.ДоговорКонтрагента) Тогда
		Возврат Аналитики.ДоговорКонтрагента;
	КонецЕсли;
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	ПолеДоговора 	  = "";
	
	РеквизитыСтрокой = Новый Массив(); 
	РеквизитыСтрокой.Добавить("ДоговорКонтрагента");
	РеквизитыСтрокой.Добавить("Договор");
	Индекс = РеквизитыСтрокой.ВГраница();
	Пока Индекс >= 0 Цикл
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(РеквизитыСтрокой.Получить(Индекс), МетаданныеОбъекта) Тогда
			ПолеДоговора = РеквизитыСтрокой.Получить(Индекс);
		Иначе
			РеквизитыСтрокой.Удалить(Индекс);
		КонецЕсли; 
		Индекс = Индекс - 1;
	КонецЦикла; 
	
	ЕстьРасшифровкаПлатежа = бит_РаботаСМетаданными.ЕстьТабЧасть("РасшифровкаПлатежа", МетаданныеОбъекта);
	Если ЕстьРасшифровкаПлатежа Тогда
		РеквизитыСтрокой.Добавить("РасшифровкаПлатежа");
	КонецЕсли; 
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ТекущийОбъект)) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект, СтрСоединить(РеквизитыСтрокой, ","));
	Иначе	
		Реквизиты = Новый Структура(СтрСоединить(РеквизитыСтрокой, ","));
		ЗаполнитьЗначенияСвойств(Реквизиты, ТекущийОбъект);
	КонецЕсли; 
	Если ЕстьРасшифровкаПлатежа Тогда
		Реквизиты.Вставить("РасшифровкаПлатежа", Реквизиты.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли; 
	
	// Договор уточняется по реквизитам шапки или ТЧ "Расшифровка платежа", если кол-во строк = 1.
	ДоговорКандидат = Неопределено;
	Если ЕстьРасшифровкаПлатежа И Реквизиты.РасшифровкаПлатежа.Количество() = 1 Тогда
		ДоговорКандидат = Реквизиты.РасшифровкаПлатежа[0].ДоговорКонтрагента;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ДоговорКандидат) И НЕ ПустаяСтрока(ПолеДоговора) Тогда
		ДоговорКандидат = Реквизиты[ПолеДоговора];
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДоговорКандидат) Тогда
		Если ЗначениеЗаполнено(Аналитики.Контрагент) Тогда	
			ВладелецДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКандидат, "Владелец");		
			Если ВладелецДоговора = Аналитики.Контрагент Тогда
				ДоговорКонтрагента = ДоговорКандидат;
			КонецЕсли;
		Иначе
			ДоговорКонтрагента = ДоговорКандидат;
		КонецЕсли; 
	Иначе
		ДоговорКонтрагента = Аналитики.ДоговорКонтрагента;
	КонецЕсли;

	Возврат ДоговорКонтрагента;
	
КонецФункции

Процедура ПодготовитьЗначенияАналитикПоНазначениюПлатежа(Аналитики, ЗначенияПоУмолчанию, ТекущийОбъект)
	
	МетаданныеОбъекта   = ТекущийОбъект.Метаданные();
	ПоНазначениюПлатежа = Ложь;
	Если МетаданныеОбъекта = Метаданные.Документы.СписаниеСРасчетногоСчета 
	 ИЛИ МетаданныеОбъекта = Метаданные.Документы.ПоступлениеНаРасчетныйСчет Тогда
		ПоНазначениюПлатежа = Константы.бит_ИспользоватьЗаполнениеАналитикПоНазначениюПлатежа.Получить();
	КонецЕсли;

	Если НЕ ПоНазначениюПлатежа Тогда
		Возврат;
	КонецЕсли; 
	
	ОбъектСистемы 	   = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаданныеОбъекта);
	ЕстьБанковскийСчет = ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеОбъекта);
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ТекущийОбъект));
	Если ЭтоСсылка Тогда
		РеквизитыСтрокой = "Организация, Контрагент, ДоговорКонтрагента, Дата, РасшифровкаПлатежа, Ссылка";
		Если ЕстьБанковскийСчет Тогда
			РеквизитыСтрокой = РеквизитыСтрокой + ", СчетОрганизации";
		КонецЕсли; 
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект, РеквизитыСтрокой);
		Реквизиты.РасшифровкаПлатежа = Реквизиты.РасшифровкаПлатежа.Выгрузить();
	Иначе	
		Реквизиты = ТекущийОбъект;
	КонецЕсли; 

	Организации = Новый Массив(); 
	Организации.Добавить(Реквизиты.Организация);
	Организации.Добавить(Справочники.Организации.ПустаяСсылка());
	
	БанковскиеСчета = Новый Массив(); 
	БанковскиеСчета.Добавить(Справочники.БанковскиеСчета.ПустаяСсылка());
	Если ЕстьБанковскийСчет Тогда
		БанковскиеСчета.Добавить(Реквизиты.СчетОрганизации);
	КонецЕсли; 
	
	Контрагенты = Новый Массив(); 
	Контрагенты.Добавить(Реквизиты.Контрагент);
	Контрагенты.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",		   Реквизиты.Дата);
	Запрос.УстановитьПараметр("ОбъектСистемы",  ОбъектСистемы);
	Запрос.УстановитьПараметр("Организации",    Организации);
	Запрос.УстановитьПараметр("Контрагенты",     Контрагенты);
	Запрос.УстановитьПараметр("БанковскиеСчета", БанковскиеСчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.МаскаНазначенияПлатежа КАК МаскаНазначенияПлатежа,
	|	Настройки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Настройки.ЦФО КАК ЦФО,
	|	Настройки.СтатьяОборотов КАК СтатьяОборотов,
	|	Настройки.Проект КАК Проект,
	|	Настройки.Аналитика_1 КАК Аналитика_1,
	|	Настройки.Аналитика_2 КАК Аналитика_2,
	|	Настройки.Аналитика_3 КАК Аналитика_3,
	|	Настройки.Аналитика_4 КАК Аналитика_4,
	|	Настройки.Аналитика_5 КАК Аналитика_5,
	|	Настройки.Аналитика_6 КАК Аналитика_6,
	|	Настройки.Аналитика_7 КАК Аналитика_7,
	|	Настройки.Контрагент КАК Контрагент,
	|	Настройки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	РегистрСведений.бит_НастройкиЗаполненияАналитикПоНазначениюПлатежа.СрезПоследних(&Период, ) КАК Настройки
	|ГДЕ
	|	Настройки.Объект = &ОбъектСистемы
	|	И Настройки.Организация В(&Организации)
	|	И Настройки.БанковскийСчет В(&БанковскиеСчета)
	|	И Настройки.Контрагент В(&Контрагенты)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЗапросДляПроверкиШаблона = Новый Запрос;
	ЗапросДляПроверкиШаблона.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	ТекстЗапросаДляПроверкиШаблона = 
	"ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	&Документ КАК Документ
	|ГДЕ
	|	&УсловияШаблона
	|	И Документ.Ссылка = &Ссылка";
	
	Пока Выборка.Следующий() Цикл
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаДляПроверкиШаблона, "&Документ", МетаданныеОбъекта.ПолноеИмя());
		
		Маска = СтрЗаменить(Выборка.МаскаНазначенияПлатежа, """", """"""); 
		УсловиеВыполнено = УсловиеШаблонаНазначенияПлатежаВыполнено(Маска, ЗапросДляПроверкиШаблона, ТекстЗапроса, "Документ.НазначениеПлатежа");
		
		Если УсловиеВыполнено Тогда
			
			Аналитики.ЦФО 				   = Выборка.ЦФО;
			Аналитики.СтатьяОборотов 	   = Выборка.СтатьяОборотов;
			Аналитики.Проект 			   = Выборка.Проект;
			Аналитики.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			Аналитики.Контрагент 		   = Выборка.Контрагент;
			Аналитики.ДоговорКонтрагента   = Выборка.ДоговорКонтрагента; 
			
			Для каждого НастройкиИзмерений Из бит_Бюджетирование.НастройкиИзмеренийБюджетирования() Цикл
				Если СтрНайти(НастройкиИзмерений.Ключ, "Аналитика") > 0 Тогда
					Значение = Выборка[НастройкиИзмерений.Ключ];
					Если Значение <> Неопределено Тогда
						ЗначенияПоУмолчанию.Вставить(Значение.Владелец, Выборка[НастройкиИзмерений.Ключ]);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			
			// Договор уточняется по реквизитам шапки или ТЧ "Расшифровка платежа", если кол-во строк = 1.
			ДоговорКандидат = Неопределено;
			Если Реквизиты.РасшифровкаПлатежа.Количество() = 1 Тогда
				ДоговорКандидат = Реквизиты.РасшифровкаПлатежа[0].ДоговорКонтрагента;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ДоговорКандидат) Тогда
				ДоговорКандидат = Реквизиты.ДоговорКонтрагента;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ДоговорКандидат)  Тогда
				ВладелецДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКандидат, "Владелец");
				Если ВладелецДоговора = Аналитики.Контрагент Тогда
					Аналитики.ДоговорКонтрагента = ДоговорКандидат;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьЗначенияАналитикПоДоговору(Аналитики, ТекущийОбъект)

	Если НЕ ЗначениеЗаполнено(Аналитики.ДоговорКонтрагента) Тогда
		Возврат;	
	КонецЕсли; 
	
	Реквизиты = "бит_ЦФО, бит_Проект, бит_ВысокийПриоритетПриЗаполненииАналитик, Владелец";
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Аналитики.ДоговорКонтрагента, Реквизиты);
	
	Аналитики.Вставить("ЦФО",	 		   Реквизиты.бит_ЦФО);
	Аналитики.Вставить("Проект", 		   Реквизиты.бит_Проект);
	Аналитики.Вставить("ВысокийПриоритет", Реквизиты.бит_ВысокийПриоритетПриЗаполненииАналитик);
	Аналитики.Вставить("Контрагент",	   Реквизиты.Владелец);
	Аналитики.Вставить("СтатьяОборотов",   ОсновнаяСтатьяПоДоговору(ТекущийОбъект, Аналитики.ДоговорКонтрагента));
	
КонецПроцедуры 

Функция ОсновнаяСтатьяПоДоговору(ДокументОбъект, ДоговорКонтрагента)
	
	ОсновнаяСтатья = Неопределено;
	Если ТипЗнч(ДоговорКонтрагента) = Тип("Структура") Тогда
		Договор = ДоговорКонтрагента.Ссылка;
	Иначе	
		Договор = ДоговорКонтрагента;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат ОсновнаяСтатья;
	КонецЕсли; 
	
	// Статья оборотов.
	СтруктураОтбораСтатьи = ПолучитьОтборДляСтатьиОборотовПоДокументу(ДокументОбъект);
	Если СтруктураОтбораСтатьи.ЗаполнятьСтатью Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&СтатьяОборотов КАК СтатьяОборотов,
		|	0 КАК ПорядокВыборки
		|ПОМЕСТИТЬ СтатьиОборотов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтатьиОборотовДоговора.СтатьяОборотов,
		|	1
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.бит_СтатьиОборотов КАК СтатьиОборотовДоговора
		|ГДЕ
		|	СтатьиОборотовДоговора.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатьиОборотов.СтатьяОборотов КАК СтатьяОборотов
		|ИЗ
		|	СтатьиОборотов КАК СтатьиОборотов
		|ГДЕ
		|	СтатьиОборотов.СтатьяОборотов.ТипСтатьи = &ТипСтатьи
		|	И СтатьиОборотов.СтатьяОборотов.РасходДоход = &РасходДоход
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатьиОборотов.ПорядокВыборки";
		
		ЧтоЗаменить = "&СтатьяОборотов";
		Если СтруктураОтбораСтатьи.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДР Тогда
			НаЧтоЗаменить = "бит_ОсновнаяСтатьяОборотовБДР";
		Иначе	
			НаЧтоЗаменить = "бит_ОсновнаяСтатьяОборотов";
		КонецЕсли; 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", 	 Договор);
		Запрос.УстановитьПараметр("ТипСтатьи", 	 СтруктураОтбораСтатьи.ТипСтатьи);
		Запрос.УстановитьПараметр("РасходДоход", СтруктураОтбораСтатьи.РасходДоход);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ОсновнаяСтатья = Выборка.СтатьяОборотов;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ОсновнаяСтатья;
	
КонецФункции

Процедура ЗаполнитьДополнительныеАналитикиШапки(ТекущийОбъект, НаборЗаписей)
		
	ЗначенияПоУмолчанию = ЗначенияАналитикПоУмолчанию(ТекущийОбъект, Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_НазначениеДополнительныхАналитик.Аналитика
	|ИЗ
	|	РегистрСведений.бит_НазначениеДополнительныхАналитик КАК бит_НазначениеДополнительныхАналитик
	|ГДЕ
	|	(бит_НазначениеДополнительныхАналитик.Объект = &Объект
	|			ИЛИ бит_НазначениеДополнительныхАналитик.Объект = ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка))
	|";
	
	Запрос.УстановитьПараметр("Объект", бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(ТекущийОбъект.Метаданные()));		
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(); 		
	// Заполним аналитики в регистре.
	Если ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.бит_ДополнительныеАналитики") Тогда
		Пока Выборка.Следующий() Цикл 			
			ДобавитьАналитикуВНабор(ТекущийОбъект, НаборЗаписей, Выборка.Аналитика, ЗначенияПоУмолчанию); 			
		КонецЦикла;
	Иначе
		Пока Выборка.Следующий() Цикл 			
			ДобавитьАналитикуВДанныеФормы(ТекущийОбъект, НаборЗаписей, Выборка.Аналитика, ЗначенияПоУмолчанию); 			
		КонецЦикла;		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДополнительныеАналитикиРаспределенияБюджета(ТекущийОбъект, ДопАналитикиШапки)
	
	ЗначенияПоУмолчанию = ЗначенияАналитикПоУмолчанию(ТекущийОбъект, Истина);
	Пользователь        = Пользователи.ТекущийПользователь();
	
	СоответствиеСтатейПоСтатьямРг = Новый Соответствие;
		
	РасшифровкаПлатежа 	 = ТекущийОбъект.РасшифровкаПлатежа;
	РаспределениеБюджета = ТекущийОбъект.бит_РаспределениеБюджета;
	
	ВидыДополнительныхАналитик = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик;
	
	РеквизитыТабЧасти = Новый Структура;
	РеквизитыТабЧасти.Вставить("ЦФО", 				   ВидыДополнительныхАналитик.ЦФО);
	РеквизитыТабЧасти.Вставить("СтатьяОборотов", 	   ВидыДополнительныхАналитик.СтатьяОборотов);
	РеквизитыТабЧасти.Вставить("Проект", 			   ВидыДополнительныхАналитик.Проект);
	РеквизитыТабЧасти.Вставить("НоменклатурнаяГруппа", ВидыДополнительныхАналитик.НоменклатурнаяГруппа);
	
	// Не заполнять аналитику (заполненную в шапке) в тч, если в тч одна строка(и в шапке заполнена).
	ОднострочныйДокумент = (РаспределениеБюджета.Количество() = 1);
	Если ОднострочныйДокумент Тогда
		Возврат;	
	КонецЕсли; 
	
	АналитикиШаблон = Новый Структура; 
	АналитикиШаблон.Вставить("ЦФО", 				Неопределено);
	АналитикиШаблон.Вставить("СтатьяОборотов", 		Неопределено);
	АналитикиШаблон.Вставить("Проект", 				Неопределено);
	АналитикиШаблон.Вставить("НоменклатурнаяГруппа",Неопределено);
	АналитикиШаблон.Вставить("Контрагент", 		    Неопределено);
	АналитикиШаблон.Вставить("ДоговорКонтрагента",  Неопределено);
	АналитикиШаблон.Вставить("ВысокийПриоритет",    Ложь);
	
	АналитикиПоДоговорам = Новый Соответствие(); 
	
	Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		
		АналитикиПоДоговору = АналитикиПоДоговорам.Получить(СтрокаРасшифровки.ДоговорКонтрагента);
		Если АналитикиПоДоговору = Неопределено Тогда
			// Предварительная версия аналитик по договору.	
			АналитикиПоДоговору = ОбщегоНазначения.СкопироватьРекурсивно(АналитикиШаблон);
			АналитикиПоДоговору.Вставить("ДоговорКонтрагента", СтрокаРасшифровки.ДоговорКонтрагента);
			
			ПодготовитьЗначенияАналитикПоДоговору(АналитикиПоДоговору, ТекущийОбъект);
			АналитикиПоДоговорам.Вставить(СтрокаРасшифровки.ДоговорКонтрагента, АналитикиПоДоговору);
		КонецЕсли; 
		
		// Наследуются аналитики, полученные для документа.
		// Далее, в зависимости от приоритета договора, они могут быть заменены данными по договору строки.
		УжеЗаполнены = ОбщегоНазначения.СкопироватьРекурсивно(ЗначенияПоУмолчанию);
		УжеЗаполнены.Вставить(ВидыДополнительныхАналитик.СтатьяОборотов, Неопределено);
		
		Если АналитикиПоДоговору.ВысокийПриоритет И ЗначениеЗаполнено(АналитикиПоДоговору.ЦФО) Тогда
			УжеЗаполнены.Вставить(ВидыДополнительныхАналитик.ЦФО, АналитикиПоДоговору.ЦФО);
		КонецЕсли; 
		
		Если АналитикиПоДоговору.ВысокийПриоритет И ЗначениеЗаполнено(АналитикиПоДоговору.СтатьяОборотов) Тогда
			УжеЗаполнены.Вставить(ВидыДополнительныхАналитик.СтатьяОборотов, АналитикиПоДоговору.СтатьяОборотов);
		Иначе
			СтатьяОборотов = СоответствиеСтатейПоСтатьямРг.Получить(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств);
			Если СтатьяОборотов = Неопределено Тогда
				СвязанныеСтатьи = бит_Бюджетирование.СвязанныеСтатьиОборотовИСтатьиРегл(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств);
				Если СвязанныеСтатьи.Количество() = 1 Тогда 	 							
					Если ТипЗнч(СвязанныеСтатьи[0]) = Тип("СправочникСсылка.бит_СтатьиОборотов") Тогда 					 
						СтатьяОборотов = СвязанныеСтатьи[0];
						СоответствиеСтатейПоСтатьямРг.Вставить(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств, СтатьяОборотов);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
				УжеЗаполнены.Вставить(ВидыДополнительныхАналитик.СтатьяОборотов, СтатьяОборотов);
			КонецЕсли; 
		КонецЕсли;
		
		Если АналитикиПоДоговору.ВысокийПриоритет И ЗначениеЗаполнено(АналитикиПоДоговору.Проект) Тогда
			УжеЗаполнены.Вставить(ВидыДополнительныхАналитик.Проект, АналитикиПоДоговору.Проект);
		КонецЕсли;
				
		// Заполнение аналитик табличной части по договору, если у него низкий приоритет.
		Если Не АналитикиПоДоговору.ВысокийПриоритет Тогда					
			Если НЕ ЗначениеЗаполнено(УжеЗаполнены.Получить(ВидыДополнительныхАналитик.ЦФО)) Тогда
				УжеЗаполнены.Вставить(ВидыДополнительныхАналитик.ЦФО, АналитикиПоДоговору.ЦФО);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(УжеЗаполнены.Получить(ВидыДополнительныхАналитик.Проект)) Тогда
				УжеЗаполнены.Вставить(ВидыДополнительныхАналитик.Проект, АналитикиПоДоговору.Проект);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(УжеЗаполнены.Получить(ВидыДополнительныхАналитик.СтатьяОборотов)) Тогда
				УжеЗаполнены.Вставить(ВидыДополнительныхАналитик.СтатьяОборотов, АналитикиПоДоговору.СтатьяОборотов);
			КонецЕсли;
		КонецЕсли;
		
		НайденныеСтроки = РаспределениеБюджета.НайтиСтроки(Новый Структура("бит_КлючСтроки", 
							СтрокаРасшифровки.бит_КлючСтроки));
							
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			Для каждого КлючИЗначение Из РеквизитыТабЧасти Цикл
				ИмяРеквизита = КлючИЗначение.Ключ;
				СтрокаТаблицы[ИмяРеквизита] = УжеЗаполнены.Получить(КлючИЗначение.Значение);
			КонецЦикла;
		КонецЦикла; 
	КонецЦикла;

КонецПроцедуры 

// Процедура заполняет значение дополнительной аналитики по реквизиту объекта.
// 
// Параметры:
//  ДопАн_СтатьяОборотов  - Неопределено или СправочникСсылка.бит_СтатьиОборотов.
//  ИмяРеквизита  		  - Строка.
//  ТекущийОбъект         - ДокументОбъект.
//  МетаданныеОбъекта     - Коллекция метаданных объекта.
//  ТребуемыйТип 		  - Строка.
// 
Процедура ЗаполнитьЗначениеДопАналитикиСтатьиОборотовПоРеквизиту(ДопАн_СтатьяОборотов, ИмяРеквизита, ТекущийОбъект, МетаданныеОбъекта, ТребуемыйТип = Неопределено)

	Если Не ЗначениеЗаполнено(ДопАн_СтатьяОборотов) И бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизита, МетаданныеОбъекта) Тогда
		
		Если ТребуемыйТип = Неопределено 
			ИЛИ ТипЗнч(ТекущийОбъект[ИмяРеквизита]) = ТребуемыйТип Тогда
			
			ЗначениеИсточник = ТекущийОбъект[ИмяРеквизита];
		
			Если бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЗнч(ЗначениеИсточник), бит_ОбщегоНазначения.ПолучитьИмяТипаНоменклатурныеГруппы()) Тогда
				РезМассив = бит_Бюджетирование.СвязанныеСтатьиОборотовИНоменклатурныеГруппы(ЗначениеИсточник);
			Иначе	
				РезМассив = бит_Бюджетирование.СвязанныеСтатьиОборотовИСтатьиРегл(ЗначениеИсточник);
			КонецЕсли;
		
			Если РезМассив.Количество() <> 0 Тогда  			
				Если ТипЗнч(РезМассив[0]) = Тип("СправочникСсылка.бит_СтатьиОборотов") Тогда				
					ДопАн_СтатьяОборотов = РезМассив[0];				
				КонецЕсли;  			
			КонецЕсли;			
		КонецЕсли;    		 
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет значение дополнительной аналитики по набору реквизитов объекта
// типа: Субконто1, Субконто2, Субконто3 (ПрефиксРеквизитов = "Субконто").
// 
// Параметры:
//  ДопАн_СтатьяОборотов  - Неопределено или СправочникСсылка.бит_СтатьиОборотов.
//  ПрефиксРеквизитов	  - Строка.
//  ТекущийОбъект         - ДокументОбъект.
//  МетаданныеОбъекта     - Коллекция метаданных объекта.
//  ТребуемыйТип 		  - Строка.
// 
Процедура ЗаполнитьЗначениеДопАналитикиСтатьиОборотовПоНаборуРеквизитов(ДопАн_СтатьяОборотов, ПрефиксРеквизитов, ТекущийОбъект, МетаданныеОбъекта, ТребуемыйТип)

	Если Не ЗначениеЗаполнено(ДопАн_СтатьяОборотов) Тогда
		Для Сч = 1 По 3 Цикл
			ИмяРеквизита = ПрефиксРеквизитов + Сч;
			ЗаполнитьЗначениеДопАналитикиСтатьиОборотовПоРеквизиту(ДопАн_СтатьяОборотов, ИмяРеквизита, ТекущийОбъект, МетаданныеОбъекта, ТребуемыйТип);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет значение дополнительной аналитики по значению пользователя.
// 
// Параметры:
//  ЗначениеДопАн   - Произвольное значение.
//  ИмяНастройки    - Строка.
//  ТекПользователь - СправочникСсылка.Пользователи.
// 
Процедура ЗаполнитьЗначениеДопАналитикиИзНастройкиПользователя(ЗначениеДопАн, ИмяНастройки, ТекПользователь)

	Если Не ЗначениеЗаполнено(ЗначениеДопАн) Тогда
		ТекЗначение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(ИмяНастройки, ТекПользователь);
		Если ЗначениеЗаполнено(ТекЗначение) Тогда
			ЗначениеДопАн = ТекЗначение;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
              
// Функция заполняет структуру поиска статьи оборотов.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект, ДокументСсылка.
//  
// Возвращаемое значение:
//   Структура("ЗаполнятьСтатью, ТипСтатьи, РасходДоход").
// 
Функция ПолучитьОтборДляСтатьиОборотовПоДокументу(ТекущийОбъект)

	СтруктураРезультата = Новый Структура;	
	ЗаполнятьСтатью 	= Истина;
		
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ТекущийОбъект)); 	
	Если МетаданныеДокумента = Неопределено Тогда
		ЗаполнятьСтатью = Ложь;
	Иначе
		// Имя документа.
		ИмяДокумента = МетаданныеДокумента.Имя;

		Если ИмяДокумента = "АвансовыйОтчет"
			ИЛИ ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций" 
			ИЛИ ИмяДокумента = "ОтчетКомитентуОПродажах" 
			ИЛИ ИмяДокумента = "ОтчетПроизводстваЗаСмену" 
			ИЛИ ИмяДокумента = "ПоступлениеДопРасходов" 
			ИЛИ ИмяДокумента = "ПоступлениеИзПереработки" 
			ИЛИ ИмяДокумента = "ПоступлениеТоваровИзПереработки" 
			ИЛИ ИмяДокумента = "ПоступлениеТоваровУслуг" 
			ИЛИ ИмяДокумента = "РаспределениеНДСКосвенныхРасходов" 
			ИЛИ ИмяДокумента = "ТребованиеНакладная" Тогда
			
			ТипСтатьи   = Перечисления.бит_ТипыСтатейОборотов.БДР;
			РасходДоход = Перечисления.бит_РасходДоход.Расходование;
		ИначеЕсли ИмяДокумента = "АктОбОказанииПроизводственныхУслуг"
			ИЛИ ИмяДокумента = "ОтчетКомиссионераОПродажах" 
			ИЛИ ИмяДокумента = "ОтчетОРозничныхПродажах" 
			ИЛИ ИмяДокумента = "РеализацияОтгруженныхТоваров" 
			ИЛИ ИмяДокумента = "РеализацияТоваровУслуг" Тогда
			
			ТипСтатьи   = Перечисления.бит_ТипыСтатейОборотов.БДР;
			РасходДоход = Перечисления.бит_РасходДоход.Поступление;
		ИначеЕсли ИмяДокумента = "ПлатежноеПоручениеИсходящее"
			ИЛИ ИмяДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" 
			ИЛИ ИмяДокумента = "РасходныйКассовыйОрдер" 
			ИЛИ ИмяДокумента = "СписаниеСРасчетногоСчета" Тогда
			
			ТипСтатьи   = Перечисления.бит_ТипыСтатейОборотов.БДДС;
			РасходДоход = Перечисления.бит_РасходДоход.Расходование;
		ИначеЕсли ИмяДокумента = "ПлатежноеПоручениеВходящее"
			ИЛИ ИмяДокумента = "ПоступлениеНаРасчетныйСчет" 
			ИЛИ ИмяДокумента = "ПлатежноеТребованиеВыставленное" 
			ИЛИ ИмяДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" 
			ИЛИ ИмяДокумента = "ПриходныйКассовыйОрдер" Тогда
			
			ТипСтатьи   = Перечисления.бит_ТипыСтатейОборотов.БДДС;
			РасходДоход = Перечисления.бит_РасходДоход.Поступление;
		Иначе
			// Ничего не выбираем.
			ЗаполнятьСтатью = Ложь;
		КонецЕсли;   		
				
	КонецЕсли;
	
	// Заполним структуру результата.
	СтруктураРезультата.Вставить("ЗаполнятьСтатью", ЗаполнятьСтатью);
	Если ЗаполнятьСтатью Тогда
		СтруктураРезультата.Вставить("ТипСтатьи"  , ТипСтатьи); 	
		СтруктураРезультата.Вставить("РасходДоход", РасходДоход);	
	КонецЕсли;  	

	Возврат СтруктураРезультата;
	
КонецФункции

Процедура РазложитьСтрокуУсловий(Маска, УсловияШаблона, ТочкаПоиска)

	МассивШаблонов = СтрРазделить(Маска, "&", Ложь);
	
	КоличествоШаблонов = МассивШаблонов.Количество();
	ЭтоПервый = Истина;
	Для каждого СтрокаШаблона Из МассивШаблонов Цикл
		
		Если ЭтоПервый Тогда
			ЭтоПервый = Ложь;
		Иначе	
			УсловияШаблона = УсловияШаблона + " И ";
		КонецЕсли; 
		
		Если СтрНайти(СтрокаШаблона, "&")>0
			И СтрНайти(СтрокаШаблона, "~")>0 Тогда
		
			РазложитьСтрокуУсловий(Маска, УсловияШаблона, ТочкаПоиска);
		ИначеЕсли СтрНайти(СтрокаШаблона, "&")>0 Тогда 
			УсловияШаблона = УсловияШаблона + НоваяСтрокаУсловия(СтрокаШаблона, ТочкаПоиска,  "&");
		ИначеЕсли СтрНайти(СтрокаШаблона, "~")>0 Тогда 
			УсловияШаблона = УсловияШаблона + НоваяСтрокаУсловия(СтрокаШаблона, ТочкаПоиска,  "~");
		Иначе	
			УсловияШаблона = УсловияШаблона + ТочкаПоиска + " ПОДОБНО """ + СтрокаШаблона + """";
		КонецЕсли; 
		
		Если КоличествоШаблонов = МассивШаблонов.Найти(СтрокаШаблона)+1 Тогда 
			УсловияШаблона = УсловияШаблона + ")";
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры

Функция НоваяСтрокаУсловия(МаскаНазначенияПлатежа, ТочкаПоиска, ЗнакУсловия) 
	
	УсловияШаблона = "";
	Если ЗнакУсловия = "&" Тогда
		СловоУсловия = "И";
	Иначе	
		СловоУсловия = "ИЛИ";
	КонецЕсли; 
	
	МассивШаблонов = СтрРазделить(МаскаНазначенияПлатежа, ЗнакУсловия, Ложь);
	
	КоличествоШаблонов = МассивШаблонов.Количество();
	Для каждого СтрШаблона Из МассивШаблонов Цикл
		Если КоличествоШаблонов = МассивШаблонов.Найти(СтрШаблона)+1 Тогда 
			УсловияШаблона = УсловияШаблона + ТочкаПоиска + " ПОДОБНО """ + СокрЛП(СтрШаблона) + """";
		Иначе	
			УсловияШаблона = УсловияШаблона + ТочкаПоиска + " ПОДОБНО """ + СокрЛП(СтрШаблона) + """ " + СловоУсловия + " ";
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат УсловияШаблона;
	
КонецФункции

Функция ЭтоОплатаПлатежнойКартой(ТекущийОбъект)

	Результат = Истина;
	Если Метаданные.Документы.Найти("ОплатаПлатежнойКартой") = Неопределено Тогда
		Результат = Ложь;
	ИначеЕсли ТипЗнч(ТекущийОбъект) <> Тип("ДокументОбъект.ОплатаПлатежнойКартой") Тогда
		Результат = Ложь;
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

Процедура УстановитьЗапретитьПерезаполнениеАналитикНовому(Источник)

	ЭтоНовый = Ложь;
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый) Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НЕ ЭтоНовый Тогда
		Возврат;
	КонецЕсли; 
	
	РежимЗаполнения     = Константы.бит_РежимАвтоЗаполненияАналитик.Получить();
	ПеречисленияРежимов = Перечисления.бит_РежимыАвтоЗаполненияАналитик;
	Запретить 		    = Ложь;
	
	// При переключении режима в константах на заполнение, этот прием исключит перезаполнение аналитик введенных вручную.
	Если РежимЗаполнения = ПеречисленияРежимов.НеЗаполнять Тогда
		Запретить = Истина;
	Иначе	
		Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
			Если РежимЗаполнения = ПеречисленияРежимов.ЗаполнятьТолькоДляНовыхДокументов Тогда
				Запретить = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 

	Если НЕ Запретить Тогда
		Возврат;
	КонецЕсли; 	
	
	НаборЗаписей = РегистрыСведений.бит_ДополнительныеПараметрыОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Объект = Источник.Ссылка;
	Запись.ЗапретитьПерезаполнениеАналитик = Истина;
	
	НаборЗаписей.Записать();

КонецПроцедуры

// Функция получает результат запроса на данные из регистра бит_ДополнительныеПараметрыОбъектов.
// 
// Параметры:
//  СсылкаНаОбъект  - Любая ссылка.
//  
// Возвращаемое значение:
//   Результат выполнения запроса.
// 
Функция ПолучитьРезультатЗапросаНаДополнительныеПарамерыОбъекта(СсылкаНаОбъект)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_ДополнительныеПараметрыОбъектов.Объект,
	|	бит_ДополнительныеПараметрыОбъектов.ЗапретитьПерезаполнениеАналитик
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеПараметрыОбъектов КАК бит_ДополнительныеПараметрыОбъектов
	|ГДЕ
	|	бит_ДополнительныеПараметрыОбъектов.Объект = &СсылкаНаОбъект
	|";
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса;
	
КонецФункции

// Функция получает значение дополнительного параметра объекта.
// 
// Параметры:
//  СсылкаНаОбъект - Любая ссылка.
//  ИмяПараметра   - Строка.
//  
// Возвращаемое значение:
//   Тип.Вид   - описание.
// 
Функция ПолучитьЗначениеДополнительногоПарамераОбъектаПоРезультатуЗапроса(РезультатЗапроса, ИмяПараметра, МетаПараметра)
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗначениеПараметра = Неопределено;
		ЗначениеПараметра = МетаПараметра.Тип.ПривестиЗначение(ЗначениеПараметра);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗначениеПараметра = Выборка[ИмяПараметра];
	КонецЕсли;

	Возврат ЗначениеПараметра;
	
КонецФункции

// Процедура находит в значениях субконто документа Контрагента или Договор. 
//
Процедура ОпределитьКонтрагентДоговорИзСубконто(ТекущийОбъект, ДтКт, ДопАн_Контрагент, ДопАн_ДоговорКонтрагента)

	Сч=0;
	Для Сч=Сч+1 По 3 Цикл
		ЗначСубконто = ТекущийОбъект["Субконто"+ДтКт+Сч];
		Если ЗначениеЗаполнено(ЗначСубконто)
			И ТипЗнч(ЗначСубконто) = Тип("СправочникСсылка.Контрагенты")
			И НЕ ЗначениеЗаполнено(ДопАн_Контрагент) Тогда
		
			ДопАн_Контрагент = ЗначСубконто;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ЗначСубконто)
			И ТипЗнч(ЗначСубконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			И НЕ ЗначениеЗаполнено(ДопАн_ДоговорКонтрагента) Тогда
		
			ДопАн_ДоговорКонтрагента = ЗначСубконто;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти
