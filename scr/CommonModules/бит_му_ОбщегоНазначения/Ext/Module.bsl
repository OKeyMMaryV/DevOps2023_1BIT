
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыРаботыСоСчетамиСубконто

// Процедура готовит параметры для осуществления обработки начала выбора субконто.
// 
// Параметры:
//  Контейнер  		   - СтрокаТабличнойЧасти.
//  ИмяСубконто 	   - Строка.
//  КоличествоСубконто - Строка.
//  ЭтоНовый		   - Булево.
// 
// Возвращаемое значение:
//  СписокПараметров - Структура.
// 
Функция ПодготовитьПараметрыДляВыбораСубконто(Контейнер, ИмяСубконто, КоличествоСубконто, ЭтоНовый) Экспорт

	СписокПараметров = Новый Структура();
	
	Для Ном = 1 По КоличествоСубконто Цикл
		
		ИмяРеквизитаСубконто = ИмяСубконто + Ном;
		ТипЗначенияРеквизита = ТипЗнч(Контейнер[ИмяРеквизитаСубконто]);
		
		Если ТипЗначенияРеквизита = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Контейнер[ИмяРеквизитаСубконто]);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокПараметров.Вставить("ЭтоНовыйДокумент", ЭтоНовый);

	Возврат СписокПараметров;

КонецФункции // ПодготовитьПараметрыДляВыбораСубконто()

#Если Клиент тогда

// Процедура устанавливает отборы в формах выбора субконто, такие как
// Организация, Контрагент и др.
// 
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор.
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы.
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами.
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления.
// 
Процедура ОбработатьВыборСубконто(Элемент
	                              , СтандартнаяОбработка
								  , Организация
								  , СписокПараметров = Неопределено
								  , ОграничениеТипаЭлемента = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ТипЭлемента = Неопределено Тогда
		    Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ?(ТипЭлемента = Неопределено, Истина, не ОграничениеТипаЭлемента.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

		Если Организация <> Неопределено Тогда
			ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = бит_ОбщегоНазначения.ГоловнаяОрганизация(Организация);
			ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
			ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
			
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			Если СписокПараметров.Свойство("Контрагент") Тогда
				
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = СписокПараметров.Контрагент;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;

	Если НЕ СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()

#КонецЕсли

// Процедура заполняет запись регистра МУ.
// 
// Параметры:
//  Запись  			- Запись регистра бухгалтерии.
//  СтруктураПараметров - Структура.
// 
Процедура ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров) Экспорт

		Запись.Организация = СтруктураПараметров.Организация;
		Запись.Период      = СтруктураПараметров.Период;
		//БИТ Изюмов А.В. 30.07.12 <--- заполним вид движения для новой записи
		Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО; 
		//БИТ Изюмов А.В. 30.07.12 <---
		
		Если СтруктураПараметров.Свойство("Активность") Тогда
			Запись.Активность  = СтруктураПараметров.Активность;
		Иначе
			Запись.Активность = Истина;
		КонецЕсли; 

		Если СтруктураПараметров.Свойство("Содержание") Тогда
		
			 Запись.Содержание = СтруктураПараметров.Содержание;
		
		КонецЕсли; 
		
		Запись.СчетДт = СтруктураПараметров.СчетДт;
		Запись.СчетКт = СтруктураПараметров.СчетКт;
        
        СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетДт);
        СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетКт);
		
		Если СвСчДт.Валютный И СтруктураПараметров.Свойство("Валюта") Тогда
		
			Запись.ВалютаДт        = СтруктураПараметров.Валюта;
			Запись.ВалютнаяСуммаДт = СтруктураПараметров.Сумма;
			
		КонецЕсли; 
		
		Если СвСчКт.Валютный И СтруктураПараметров.Свойство("Валюта") Тогда
		
			Запись.ВалютаКт        = СтруктураПараметров.Валюта;
			Запись.ВалютнаяСуммаКт = СтруктураПараметров.Сумма;
		
		КонецЕсли; 

		Если СвСчДт.Количественный И СтруктураПараметров.Свойство("Количество")  Тогда
			
			Запись.КоличествоДт = СтруктураПараметров.Количество;
			
		КонецЕсли;
		
		Если СвСчКт.Количественный И СтруктураПараметров.Свойство("Количество")  Тогда
			
			Запись.КоличествоКт = СтруктураПараметров.Количество;
			
		КонецЕсли; 		

КонецПроцедуры // ЗаполнитьЗаписьРегистраМУ()
	
// Процедура заполняет аналитику счета Дт и Кт записи регистра бухгалтерии,
// есть возможность заполнения аналити одного направления Дт или Кт.
// 
// Параметры:
//  Запись		  	   - РегистрБухгалтерииЗапись.
//  СтрокаТаблицы 	   - СтрокаТаблицыЗначений.
//  ИмяСубконтоДт 	   - Строка, по умолчанию "".
//  ИмяСубконтоКт 	   - Строка, по умолчанию "".
//  КоличествоСубконто - Число.
// 
Процедура ЗаполнитьАналитикуДт_Кт(Запись
								 ,СтрокаТаблицы
								 ,ИмяСубконтоДт = ""
								 ,ИмяСубконтоКт = ""
								 ,КоличествоСубконто) Экспорт 
								 
	ЗаполнитьАналитикуДт = Не ПустаяСтрока(ИмяСубконтоДт);
	ЗаполнитьАналитикуКт = Не ПустаяСтрока(ИмяСубконтоКт);
	
	Для Ном = 1 по КоличествоСубконто Цикл
		
		Если ЗаполнитьАналитикуДт Тогда
			УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Ном, СтрокаТаблицы[ИмяСубконтоДт + Ном]);
		КонецЕсли;
		
		Если ЗаполнитьАналитикуКт Тогда
			УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Ном, СтрокаТаблицы[ИмяСубконтоКт + Ном]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАналитикуДт_Кт()

#КонецОбласти

#Область РасчетЭффективнойПроцентнойСтавки

// Функция вычисляет значение алгебраической функции вида KnX^n+Kn-1X^n-1+...+K2X^2+K1X^1+K0X^0.
// 
// Параметры:
//  МассивКоэффициентов  - Массив - коэффициенты алгебраической функции, 
//                                  индекс элемента соотвествует коэффициенту перед слагаемым степени i.
//  Аргумент             - Число.
// 
// Возвращаемое значение:
//   ЗначениеФункции     - Число.
// 
Функция АлгебраическаяФункция(МассивКоэффициентов,Аргумент) Экспорт

	ЗначениеФункции = 0;
	
	Ном = 0;
	Для каждого Коэффициент Из МассивКоэффициентов Цикл
		
		Если Коэффициент <> 0 Тогда
			
			Попытка
			
				РезультатВозведения = Pow(Аргумент,Ном);
			
			Исключение
				
				РезультатВозведения = 0;
				
			КонецПопытки;
			
			ЗначениеФункции = ЗначениеФункции+Коэффициент*РезультатВозведения;
			
		КонецЕсли; 
		
	Ном = Ном+1;
	КонецЦикла; 

	Возврат ЗначениеФункции;
	
КонецФункции // АлгебраическаяФункция()

// Вычисляет значение степенной функции вида KnX^An+Kn-1X^An-1+...+K2X^A2+K1X^A1+K0X^A0.
// 
// Параметры:
//  ПараметрыФункции - Массив - элемент Структура.ПараметрыСтепеннойФункции{Коэффициент - Число, Степень - Число}.
// 
// Возвращаемое значение:
//  ЗначениеФункции - Число.
// 
Функция СтепеннаяФункция(ПараметрыФункции, Аргумент) Экспорт
	
	ЗначениеФункции = 0;
	
	Для каждого ТекПараметры Из ПараметрыФункции Цикл
		
		Если НЕ бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ТекПараметры, "ПараметрыСтепеннойФункции") Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Если ТекПараметры.Коэффициент <> 0 Тогда
			
			Попытка
			
				РезультатВозведения = Pow(Аргумент, ТекПараметры.Степень); 
			
			Исключение
				
				РезультатВозведения = 0;
				
			КонецПопытки;
			
			ЗначениеФункции = ЗначениеФункции+ТекПараметры.Коэффициент*РезультатВозведения;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ЗначениеФункции;
	
КонецФункции // СтепеннаяФункция()

// Функция-конструктор параметров степенной функции.
// 
// Параметры:
//  Коэффициент - Число.
//  Степень - Число.
// 
// Возвращаемое значение:
//  СтрПар - Структура.ПараметрыСтепеннойФункции.
// 
Функция ПараметрыСтепеннойФункции(Коэффициент, Степень) Экспорт

	СтрПар = Новый Структура("ИмяКласса, Коэффициент, Степень", "ПараметрыСтепеннойФункции", Коэффициент, Степень);

	Возврат СтрПар;
	
КонецФункции // ПараметрыСтепеннойФункции()

// Вычисляет функцию произвольного вида. 
// 
// Параметры:
//  ПараметрыФункции - Структура
//  Аргумент - Число
//  ВыводитьСообщения - Булево
// 
// Возвращаемое значение:
//  ЗначениеФункции - Число.
// 
Функция ВычислитьФункциюВида(ПараметрыФункции, Аргумент, ВыводитьСообщения = Ложь) Экспорт
	
	ЗначениеФункции = 0;
	
	ВидФункции = "";
	ПараметрыФункции.Свойство("ВидФункции", ВидФункции);
	Если НЕ ЗначениеЗаполнено(ВидФункции) Тогда
	
		ВидФункции = "Неопределено";
	
	КонецЕсли; 
	
	Если ВРег(ВидФункции) = ВРег("АлгебраическаяФункция") Тогда
		
		ЗначениеФункции = АлгебраическаяФункция(ПараметрыФункции.МассивКоэффициентов, Аргумент);
		
	ИначеЕсли ВРег(ВидФункции) = ВРег("СтепеннаяФункция") Тогда
		
		ЗначениеФункции = СтепеннаяФункция(ПараметрыФункции.МассивКоэффициентов, Аргумент);
		
	Иначе	
		
		Если ВыводитьСообщения Тогда
			
			ТекстСообщения = "Метод для вычисления функции вида ""%1%"" не определен!";
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,ВидФункции);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ЗначениеФункции;
	
КонецФункции // ВычислитьФункциюВида()

// Функция численно решает уравнение методом дихотомии.
// 
// Параметры:
//  СтруктураПараметров  - Структура 
//  ГраницаЛево          - Число - Левая граница начального интервала приближения.
//  ГраницаПраво         - Число - Правая граница начального интервала приближения.
// 
// Возвращаемое значение:
//   ТекАргумент     - Число - Приближение корня функции.
// 
Функция ВычислитьПриближение(СтруктураПараметров,ГраницаЛево,ГраницаПраво,РежимСообщений = "Ошибки") Экспорт

	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	
	ТекАргументЛево  = ГраницаЛево;
	ТекАргументПраво = ГраницаПраво;
	
	Ошибка      = ТекАргументПраво-ТекАргументЛево;
	ТекАргумент = (ТекАргументЛево+ТекАргументПраво)/2;
	
	НомерИтерации = 1;
	Пока  НомерИтерации <= СтруктураПараметров.МаксимальноеЧислоИтераций И Ошибка > СтруктураПараметров.Точность  Цикл
		
		ТекАргумент = (ТекАргументЛево+ТекАргументПраво)/2;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ВидФункции)  Тогда
			
			ЗначениеПриближения = ВычислитьФункциюВида(СтруктураПараметров,ТекАргумент);
			ЗначениеЛево        = ВычислитьФункциюВида(СтруктураПараметров,ТекАргументЛево);
			
			Если ЗначениеПриближения*ЗначениеЛево < 0 Тогда
				
				ТекАргументПраво = ТекАргумент;
				
			Иначе	
				
				ТекАргументЛево  = ТекАргумент;	
				
			КонецЕсли; 
			
			Ошибка = ТекАргументПраво-ТекАргументЛево;
			
			Если РежимыВывода.ВыводитьИнформацию Тогда
			
				ТекстСообщения = "Номер итерации: %1% Х: %2% Y: %3% Ошибка: %4%";
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
				                                                                             ,Строка(НомерИтерации)
																							 ,Строка(ТекАргумент)
																							 ,Строка(ЗначениеПриближения)
																							 ,Строка(Ошибка));
																							 
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																			 
			
			КонецЕсли; 
			
			
		Иначе
			
			ЗначениеПриближения = 0;
			
			Если РежимыВывода.ВыводитьОшибки Тогда
			
				 ТекстСообщения = "Метод для вычисления функции вида ""%1%"" не определен!";
				 ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтруктураПараметров.ВидФункции);
				 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			КонецЕсли; 
			
		КонецЕсли; 
		
		НомерИтерации = НомерИтерации+1;		
		
	КонецЦикла; 

	Возврат ТекАргумент;
	
КонецФункции // ВычислитьПриближение()

// Функция вычисляет эффективную процентную ставку исходя из денежного потока для дисконтирования.
// 
// Параметры:
//  МассивПлатежи  - Массив - помесячные платежи, номер элемента - номер периода платежа.
//  Стоимость      - Число.
//  ГраницаЛево    - Число - Левая граница для начального приближения.
//  ГраницаПраво   - Число - Правая граница для начального приближения.
//  Точность       - Число.
// 
// Возвращаемое значение:
//   Ставка   - Число - Эффективная процентная ставка.
// 
Функция ВычислитьЭффективнуюСтавку(МассивПлатежи,Стоимость,ГраницаЛево=0,ГраницаПраво=1.1,Точность=0.00000001,РежимСообщений = "Ошибки") Экспорт

	// Решаем уравнение вида Стоимость = Сумма(Платеж[n]/(1+i)^n), где i - эффективная процентная ставка;
	// Перед решением нормируем все платежи на стоимость и переопределяем Х=1/(1+i)^n.
	
	МассивКоэфф = Новый Массив;
	МассивКоэфф.Добавить(-1);
	Для каждого Платеж Из МассивПлатежи Цикл
		
		Если НЕ ЗначениеЗаполнено(Стоимость) Тогда
			МассивКоэфф.Добавить(0);
		Иначе	
			МассивКоэфф.Добавить(Платеж/Стоимость);
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Параметры для численного решения уравнения.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидФункции"               ,"АлгебраическаяФункция");
	СтруктураПараметров.Вставить("МассивКоэффициентов"      ,МассивКоэфф);
	СтруктураПараметров.Вставить("МаксимальноеЧислоИтераций",40);
	СтруктураПараметров.Вставить("Точность"                 ,Точность);
	
	// Численно решаем уравнение
	Результат = ВычислитьПриближение(СтруктураПараметров,ГраницаЛево,ГраницаПраво,РежимСообщений);
	
	Если Результат = 0 Тогда
		
		Ставка = 0;
		
	Иначе
		
		// Определяем эффективную процентную ставку по найденному X.
	    Ставка = (1/Результат - 1)*100;
	
	КонецЕсли; 

	Возврат Ставка;
	
КонецФункции // ВычислитьЭффективнуюСтавку()

// Функция вычисляет эффективную процентную ставку различными способами.
// 
// Параметры:
//  СтрПар - Структура
//  РежимСообщений - Строка
// 
// Возвращаемое значение:
//  Ставка - 0.
// 
Функция ВычислитьЭСП(СтрПар, РежимСообщений = "Ошибки") Экспорт
	
	Ставка = 0;
	
	ГраницаЛево  = ?(СтрПар.Свойство("ГраницаЛево"),СтрПар.ГраницаЛево,0);
	ГраницаПраво = ?(СтрПар.Свойство("ГраницаПраво"),СтрПар.ГраницаПраво,1.1);
	Точность     = ?(СтрПар.Свойство("Граница"),СтрПар.Точность,0.00000001);
	
	Если СтрПар.СпособРасчета = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		
		ПараметрыФункции = Новый Массив;
		
		Для каждого СтрокаТаблицы Из СтрПар.ТаблицаПлатежи Цикл
			
			Коэф = ?(СтрПар.Стоимость = 0, 0, СтрокаТаблицы.СуммаПлатежаВзаиморасчеты/СтрПар.Стоимость);
			Степень = (НачалоДня(СтрокаТаблицы.ДатаПлатежа)-НачалоДня(СтрПар.ПервыйПериод))/(86400*365);
			
			ПарамСлагаемого = бит_му_ОбщегоНазначения.ПараметрыСтепеннойФункции(Коэф, Степень);
			ПараметрыФункции.Добавить(ПарамСлагаемого);
			
		КонецЦикла; 
		
		// Слагаемое справедливой стоимости
		ПарамСлагаемого = бит_му_ОбщегоНазначения.ПараметрыСтепеннойФункции(-1, 0);
		ПараметрыФункции.Добавить(ПарамСлагаемого);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидФункции"               ,"СтепеннаяФункция");
		СтруктураПараметров.Вставить("МассивКоэффициентов"      ,ПараметрыФункции);
		СтруктураПараметров.Вставить("МаксимальноеЧислоИтераций",40);
		СтруктураПараметров.Вставить("Точность"                 ,Точность);
		
		// Численно решаем уравнение
		Результат = ВычислитьПриближение(СтруктураПараметров,ГраницаЛево,ГраницаПраво,РежимСообщений);
		
		Если Результат = 0 Тогда
			
			Ставка = 0;
			
		Иначе
			
			// Определяем эффективную процентную ставку по найденному X.
			Ставка = (1/Результат - 1)*100;
			
		КонецЕсли; 
		
	Иначе	
		
		Ставка = ВычислитьЭффективнуюСтавку(СтрПар.МассивПлатежи, СтрПар.Стоимость, ГраницаЛево, ГраницаПраво, Точность, РежимСообщений); 		
		
	КонецЕсли; 
	
	Возврат Ставка;
	
КонецФункции // ВычислитьЭСП()

#КонецОбласти

#Область ДанныеГрафикаПлатежей

// Функция получает график платежей.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
// Возвращаемое значение:
//   Результат   - Результат.
// 
Функция ПолучитьГрафикПлатежей(ДоговорКонтрагента,Объект,ДатаПринятия = Неопределено,СтруктураПараметров = Неопределено) Экспорт

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") И СтруктураПараметров.Свойство("ФинансовыйГрафик") Тогда
		Результат = ПолучитьГрафикПлатежейПоТаблицеЗначений(СтруктураПараметров.ФинансовыйГрафик, ДоговорКонтрагента, Объект, ДатаПринятия,СтруктураПараметров);
	Иначе
		Результат = ПолучитьГрафикПлатежейПоРегистру(ДоговорКонтрагента, Объект, ДатаПринятия,СтруктураПараметров);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьГрафикПлатежей()

// Функция формирует массив платежей по графику платежей.
// 
// Параметры:
//  ДоговорКонтрагента  - СправочникСсылка.ДоговорыКонтрагентов.
//  Объект              - СправочникСсылка.ДоговорыКонтрагентов.
//                        ,СправочникСсылка.ОсновныеСредства.
//                        ,СправочникСсылка.ЦенныеБумаги.
//  ДатаПринятия        - Дата.
//  ДополнятьПериоды    - Булево.
//  СтруктураПараметров - Структура.
// 
// Возвращаемое значение:
//   МассивПлатежей   - Массив.
// 
Функция СформироватьМассивПлатежей(ДоговорКонтрагента
	                               ,Объект
								   ,ДатаПринятия        = Неопределено
								   ,ДополнятьПериоды    = Истина
								   ,СтруктураПараметров = Неопределено) Экспорт

   МассивПлатежей = Новый Массив;
   
   Результат = ПолучитьГрафикПлатежей(ДоговорКонтрагента,Объект,ДатаПринятия,СтруктураПараметров);
   
   Если НЕ Результат.Пустой() Тогда
	   
	   РежимЗаполнения = ?(ДополнятьПериоды = Истина,"Все","");
	   Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		   ИмяРесурса      = "СуммаПлатежа"+?(СтруктураПараметров.Свойство("Взаиморасчеты"),"Взаиморасчеты","Регл");
	   Иначе	
		   ИмяРесурса      = "СуммаПлатежаРегл";
	   КонецЕсли; 
	   
	   Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период",РежимЗаполнения);
	   Пока Выборка.Следующий() Цикл
		   
		   Если ЗначениеЗаполнено(Выборка[ИмяРесурса]) Тогда
			   ЗначениеПлатежа = Выборка[ИмяРесурса];
		   Иначе	
			   ЗначениеПлатежа = 0;
		   КонецЕсли; 
		   
		   Если СтруктураПараметров.Свойство("НачалоДолгосрочнойЧасти") Тогда
		   
		   	    Если Выборка.Период<СтруктураПараметров.НачалоДолгосрочнойЧасти Тогда
				
					ЗначениеПлатежа = 0;
					
				КонецЕсли; 
		   
		   КонецЕсли; 
		   
		   МассивПлатежей.Добавить(ЗначениеПлатежа);
		   
	   КонецЦикла;			
	   
   КонецЕсли; 
   
   флРежимКорректировки = Ложь;
   Если ТипЗнч(СтруктураПараметров) = Тип("Структура") И СтруктураПараметров.Свойство("РежимКорректировки") Тогда
	   флРежимКорректировки = Истина;   
   КонецЕсли;	   
   
   Если НЕ флРежимКорректировки И МассивПлатежей.Количество() > 0 Тогда
	   
	   МассивПлатежей.Удалить(0);
	   
   КонецЕсли; 
   
   Возврат МассивПлатежей;
	
КонецФункции // СформироватьМассивПлатежей()

// Функция формирует таблицу платежей по графику платежей.
// 
// Параметры:
//  ДоговорКонтрагента  - СправочникСсылка.ДоговорыКонтрагентов.
//  Объект              - СправочникСсылка.ДоговорыКонтрагентов.
//                        ,СправочникСсылка.ОсновныеСредства.
//                        ,СправочникСсылка.ЦенныеБумаги.
//  ДатаПринятия        - Дата.
//  ДополнятьПериоды    - Булево.
//  СтруктураПараметров - Структура.
// 
// Возвращаемое значение:
//   ТаблицаПлатежей   - ТаблицаЗначений.
// 
Функция ПолучитьТаблицуПлатежей(ДоговорКонтрагента
	                             ,Объект
								 ,ДатаПринятия = Неопределено
								 ,ДополнятьПериоды = Истина
								 ,СтруктураПараметров = Неопределено) Экспорт

	 ТаблицаПлатежей = Новый ТаблицаЗначений;
	 ТаблицаПлатежей.Колонки.Добавить("ДатаПлатежа"              ,Новый ОписаниеТипов("Дата"));
	 ТаблицаПлатежей.Колонки.Добавить("СуммаПлатежаРегл"         ,Новый ОписаниеТипов("Число"));
	 ТаблицаПлатежей.Колонки.Добавить("СуммаПлатежаВзаиморасчеты",Новый ОписаниеТипов("Число"));
	 
	 Результат = ПолучитьГрафикПлатежей(ДоговорКонтрагента,Объект,ДатаПринятия,СтруктураПараметров);
	 
	 флПоДням = (ТипЗнч(СтруктураПараметров) = Тип("Структура") 
	              И СтруктураПараметров.Свойство("Периодичность") 
				  И ВРег(СтруктураПараметров.Периодичность) = ВРег("День"));
	 
	 Если НЕ Результат.Пустой() Тогда
		 
		 РежимЗаполнения = ?(ДополнятьПериоды = Истина,"Все","");
		 
		 Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период",РежимЗаполнения);
		 Пока Выборка.Следующий() Цикл
			 
			 НоваяСтрока = ТаблицаПлатежей.Добавить();
			 НоваяСтрока.ДатаПлатежа               = ?(флПоДням,КонецДня(Выборка.Период),КонецМесяца(Выборка.Период));
			 НоваяСтрока.СуммаПлатежаРегл          = Выборка.СуммаПлатежаРегл;
			 НоваяСтрока.СуммаПлатежаВзаиморасчеты = Выборка.СуммаПлатежаВзаиморасчеты;
			 
		 КонецЦикла;			
		 
		 Если флПоДням Тогда
		 
		 	 // В таблице платежей должны быть даты окончания всех месяцев, для начисления процентов.
			 ТаблицаПлатежей.Сортировать("ДатаПлатежа");
			 
			 Если ТаблицаПлатежей.Количество() > 0 Тогда
			 
			 	ДатаНач = ТаблицаПлатежей[0].ДатаПлатежа;
				ДатаКон = ТаблицаПлатежей[ТаблицаПлатежей.Количество()-1].ДатаПлатежа;
				
				ТекДата = ДатаНач;
				
				ТекДата = КонецМесяца(ТекДата);				
				Пока ТекДата <= ДатаКон  Цикл
				
					НоваяСтрока = ТаблицаПлатежей.Добавить();
					НоваяСтрока.ДатаПлатежа = ТекДата;
					
				    ТекДата = ТекДата+1;
					ТекДата = КонецМесяца(ТекДата);					
				КонецЦикла; 
			 
			 КонецЕсли; 
			 
			 ТаблицаПлатежей.Свернуть("ДатаПлатежа", "СуммаПлатежаРегл, СуммаПлатежаВзаиморасчеты");
			 ТаблицаПлатежей.Сортировать("ДатаПлатежа");
		 
		 КонецЕсли;  // ФлПоДням
		 
	 КонецЕсли; 

	Возврат ТаблицаПлатежей;
	
КонецФункции // ПолучитьТаблицуПлатежей()

// Функция переводит стоимость в валюту регламентированного учета.
// 
// Параметры:
//  Стоимость  - Число.
//  СтруктураКурсыВалют  - Структура.
//  
// Возвращаемое значение:
//   Число.
// 
Функция ПересчитатьСтоимостьВВалютуРегл(Стоимость, СтруктураКурсыВалют) Экспорт

	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	
	СтруктураСумм = Новый Структура("Сумма", Стоимость);
	
	Результат = Новый Структура("СуммаРегл");
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("СуммаУпр"); 
	МассивИсключений.Добавить("СуммаМУ");
	МассивИсключений.Добавить("СуммаВзаиморасчеты");
	
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураСумм ,Результат ,МассивИмен
											,СтруктураКурсыВалют ,СтруктураКурсыВалют.МУ, МассивИсключений);
											
	РезультатСтоимость = Результат.СуммаРегл;
    
	Возврат РезультатСтоимость;
	
КонецФункции // ПересчитатьСтоимостьВВалютуРегл()

// Функция выполняет начисление процентов. Рассмотрены ситуации обычного периодического 
// начисления и начисления для ситуации, когда ЭСП рассчитана по дням.
// 
// Параметры:
//  Сумма - Число
//  Ставка - Число
//  СтрПар - Структура
// 
// Возвращаемое значение:
//  СуммаПроцентов - Сумма.
// 
Функция НачислитьПроценты(Сумма, Ставка, СтрПар) Экспорт
	
	СуммаПроцентов = 0;
	
	Если СтрПар.СпособРасчета = "ПоДням" Тогда
		
		// Эсп была рассчитана по дням
		Степень = (НачалоДня(СтрПар.Период)-НачалоДня(СтрПар.ПериодПервый))/(86400*365);
		СуммаПроцентов = Сумма*(pow((1+Ставка),Степень)-1);
		
	Иначе
		
		// Обычное периодическое начисление
		СуммаПроцентов = Сумма*Ставка;
		
	КонецЕсли; 
	
	Возврат СуммаПроцентов;
	
КонецФункции // НачислитьПроценты()

// Процедура выполняет расчет графика финансовых начислений.
// 
// Параметры:
//  ТаблицаДвижений  		- ТаблицаЗначений.
//  СтруктураПараметров  	- Структура. 
// 								- ОбъектЗаписи. 
// 								- ВариантРасчетаПроцентов.
// 								- ВидСтавки. 
// 								- Ставка 			(В процентах)
// 								- НоминальныеСтавки (Соответствие: Дата, Ставка).
// 								- Стоимость.	
//  СтруктураШапкиДокумента - Структура (Структура шапки документа).
// 
Процедура СформироватьТаблицуФинансовыхНачислений(ТаблицаДвижений, СтруктураПараметров, СтруктураКурсов, РежимСообщений = "Ошибки") Экспорт

	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	
	РасчетПоДням = (СтруктураПараметров.Свойство("СпособРасчетаЭСП") 
	                   И СтруктураПараметров.СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням);
					   
	ИзменениеПараметровУчетаОС = СтруктураПараметров.Свойство("ИзменениеПараметровУчетаОС");
	
	// Очистим таблицу движений
	ТаблицаДвижений.Очистить();
															
	// Данные из структуры параметров
	Объект 			        = СтруктураПараметров.Объект;
	ВариантРасчетаПроцентов = СтруктураПараметров.ВариантРасчетаПроцентов;
	
	Если СтруктураПараметров.Свойство("СтоимостьРегл") Тогда
		
		Стоимость = СтруктураПараметров.СтоимостьРегл;
		
	Иначе	
		
		Если СтруктураКурсов.Свойство("Документ") Тогда
		
			Стоимость = бит_КурсыВалют.ПересчитатьДокРегл(СтруктураПараметров.Стоимость,СтруктураКурсов);
			
		Иначе	
			
			Стоимость = СтруктураПараметров.Стоимость;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если СтруктураПараметров.Свойство("СтоимостьВзаиморасчеты") Тогда
		
		СтоимостьВз = СтруктураПараметров.СтоимостьВзаиморасчеты;
		
	Иначе	
		
		Если СтруктураКурсов.Свойство("Взаиморасчеты") И СтруктураКурсов.Свойство("Документ") Тогда
			
			КурсыВз     = СтруктураКурсов.Взаиморасчеты;
			КурсыДок    = СтруктураКурсов.Документ;
			СтоимостьВз = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтруктураПараметров.Стоимость
			                                                                          ,КурсыДок.Валюта
																					  ,КурсыВз.Валюта
																					  ,КурсыДок.Курс
																					  ,КурсыВз.Курс
																					  ,КурсыДок.Кратность
																					  ,КурсыВз.Кратность);
		Иначе
			
			СтоимостьВз = СтруктураПараметров.Стоимость;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	УчитыватьНоминальныеСтавки	= СтруктураПараметров.ВидСтавки = Перечисления.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента;
	Ставка 						= ?(СтруктураПараметров.Свойство("Ставка"), СтруктураПараметров.Ставка / 100 , 0);
	НоминальныеСтавки			= ?(СтруктураПараметров.Свойство("НоминальныеСтавки")
									, СтруктураПараметров.НоминальныеСтавки 
									, Новый Соответствие);
	
	флДополнятьПериоды = НЕ РасчетПоДням;
	ТаблицаПлатежей = ПолучитьТаблицуПлатежей(СтруктураПараметров.ДоговорКонтрагента
												,Объект
												,СтруктураПараметров.Дата
												,флДополнятьПериоды
												,СтруктураПараметров);
	
	Если Не ИзменениеПараметровУчетаОС И ТаблицаПлатежей.Количество()>0 И НЕ РасчетПоДням Тогда
		ТаблицаПлатежей[0].СуммаПлатежаРегл = 0;
		ТаблицаПлатежей[0].СуммаПлатежаВзаиморасчеты = 0;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("НачалоДолгосрочнойЧасти") Тогда
		
		// До начала долгосрочной части начисляем только проценты.
		Для каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
			
			Если СтрокаТаблицы.ДатаПлатежа < СтруктураПараметров.НачалоДолгосрочнойЧасти Тогда
				
				СтрокаТаблицы.СуммаПлатежаРегл          = 0;
				СтрокаТаблицы.СуммаПлатежаВзаиморасчеты = 0;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Проверим корректность ставок и заполненность графика платежей.
	Если ТаблицаПлатежей.Количество() = 0 Тогда
		
		Если РежимыВывода.ВыводитьОшибки Тогда
			
			ТекстСообщения = Нстр("ru = 'График платежей пуст!'");
    		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		Возврат;
		
	КонецЕсли; 

	// Первая строка - плюс по справедливой стоимости.
	СтрокаПриход = ТаблицаДвижений.Добавить();
	СтрокаПриход.РасходДоход        = Перечисления.бит_РасходДоход.Поступление;
	СтрокаПриход.Период             = СтруктураПараметров.Дата;
	СтрокаПриход.Объект             = Объект;
	СтрокаПриход.СуммаРегл          = Стоимость;
	СтрокаПриход.СуммаВзаиморасчеты = СтоимостьВз;
	ЗаполнитьЗначенияСвойств(СтрокаПриход,СтруктураПараметров);
	
	// Инициализируем данные, необходимы для расчета.
	ДанныеНачисленияРегл = КонструкторДанныеФинНачисления(Стоимость);
	ДанныеНачисленияВз   = КонструкторДанныеФинНачисления(СтоимостьВз);
	
	Если СтруктураПараметров.Свойство("ОстаткиПроцентов") Тогда
	
		ДанныеНачисленияРегл.ОстатокПроценты = СтруктураПараметров.ОстаткиПроцентов.ОстатокРегл;
		ДанныеНачисленияВз.ОстатокПроценты   = СтруктураПараметров.ОстаткиПроцентов.ОстатокВзаиморасчеты;
		
	КонецЕсли; 
	
	// Расчет финансовых процентов и погашения обязательств.
	Индекс = 0;
	МаксИндекс = ТаблицаПлатежей.Количество()-1;
	ПериодПред = СтруктураПараметров.Дата;
	Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
		
		Если УчитыватьНоминальныеСтавки  Тогда
			Ставка = ПолучитьНоминальнуюСтавку(СтрокаПлатеж.ДатаПлатежа, НоминальныеСтавки, Ставка);	
		КонецЕсли;
		
		// В случае расчета по дням необходимы еще и периоды.
		ПарамРасчетаСтавки = Новый Структура;
		ПарамРасчетаСтавки.Вставить("СпособРасчета", ?(РасчетПоДням,"ПоДням", "ПоМесяцам"));
		Если Индекс = 0 Тогда
			ПериодПред = СтрокаПлатеж.ДатаПлатежа;
		ИначеЕсли РасчетПоДням И СтрокаПлатеж.ДатаПлатежа = КонецДня(СтруктураПараметров.Дата) Тогда
			ПериодПред = СтрокаПлатеж.ДатаПлатежа;
			Продолжить;
		КонецЕсли; 
		ПарамРасчетаСтавки.Вставить("Период"      , СтрокаПлатеж.ДатаПлатежа);
		ПарамРасчетаСтавки.Вставить("ПериодПервый", ПериодПред);
		
		// Создание новой строки начислений
		СтрокаРасход = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасход,СтруктураПараметров);
		Если РасчетПоДням Тогда
			СтрокаРасход.Период                    = КонецДня(СтрокаПлатеж.ДатаПлатежа);
		Иначе	
			СтрокаРасход.Период                    = КонецМесяца(СтрокаПлатеж.ДатаПлатежа);
		КонецЕсли; 
		СтрокаРасход.РасходДоход               = Перечисления.бит_РасходДоход.Расходование;
		СтрокаРасход.Объект                    = Объект;
		СтрокаРасход.СуммаПлатежаРегл          = СтрокаПлатеж.СуммаПлатежаРегл;
		СтрокаРасход.СуммаПлатежаВзаиморасчеты = СтрокаПлатеж.СуммаПлатежаВзаиморасчеты;
		
		// Начисление процентов
		Если ВариантРасчетаПроцентов = Перечисления.бит_му_ВариантыРасчетаФинансовыхПроцентов.Аванс Тогда
			
			// Вариант аванс
			ПарамНачисления = Новый Структура("Ставка, ПарамРасчетаСтавки, РасчетПоДням, ПоследнийПериод"
			                                    , Ставка
												, ПарамРасчетаСтавки
												, РасчетПоДням
												, Индекс = МаксИндекс);
												
			НачислитьАванс(СтрокаРасход.СуммаПлатежаРегл, ДанныеНачисленияРегл, ПарамНачисления);
			НачислитьАванс(СтрокаРасход.СуммаПлатежаВзаиморасчеты, ДанныеНачисленияВз, ПарамНачисления);
			
			
		Иначе
			
			// Вариант постоплата
			ПарамНачисления = Новый Структура("Ставка, ПарамРасчетаСтавки, РасчетПоДням"
			                                  , Ставка
											  , ПарамРасчетаСтавки
											  , РасчетПоДням);			
											  
			НачислитьПостоплату(СтрокаРасход.СуммаПлатежаРегл, ДанныеНачисленияРегл, ПарамНачисления);
			НачислитьПостоплату(СтрокаРасход.СуммаПлатежаВзаиморасчеты, ДанныеНачисленияВз, ПарамНачисления);
			
		КонецЕсли; // Варианты расчета процентов	
		
		ОбнулитьПроценты = (Индекс = 0 И (СтруктураПараметров.Свойство("ЭтоВводОстатоковАрендаОС") ИЛИ РасчетПоДням));
		
		// Заполнение рассчитанных данных в строку начислений.
		СформироватьСтрокуФинНачислений(СтрокаРасход, ДанныеНачисленияРегл, "Регл", ОбнулитьПроценты);
		СформироватьСтрокуФинНачислений(СтрокаРасход, ДанныеНачисленияВз, "Взаиморасчеты", ОбнулитьПроценты);
		
		ПериодПред = СтрокаПлатеж.ДатаПлатежа;
		Индекс = Индекс + 1;	
	КонецЦикла; // По таблице платежей 
	
	// Проверка на переполнение
	МодульПогашенное = бит_ОбщегоНазначения.МодульЧисла(ДанныеНачисленияВз.ИтСуммаПогашенногоОбязательства);
	
	Если МодульПогашенное > 100000000000 Тогда
		
		ТекстСообщения =  НСтр("ru = 'В процессе расчета финансовых начислений обнаружено переполнение. Движения по регистру ""Финансовые начисления"" не были сформированы.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		ТаблицаДвижений.Очистить();
	
	КонецЕсли; 
	
КонецПроцедуры // СформироватьТаблицуФинансовыхНачислений()

// Функция получает остаток непогашенных процентов по графику финансовых начислений.
// 
// Параметры:
// СтруктураПараметров - Структура.
// СтрПлатежи - Структура.
// 
// Возвращаемое значение:
//   РезСтруктура   - Структура.
// 
Функция ПолучитьОстатокНепогашенныхПроцентов(СтруктураПараметров, СтрПлатежи) Экспорт

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("ОстатокРегл"         ,0);
	РезСтруктура.Вставить("ОстатокВзаиморасчеты",0);
	
	Запрос = Новый Запрос;
	// Изменение кода. Начало. 18.10.2011{{
	Запрос.УстановитьПараметр("КонецПериода"             ,КонецМесяца(ДобавитьМесяц(СтруктураПараметров.Дата,-1)));
	// Изменение кода. Конец. 18.10.2011}}
	Запрос.УстановитьПараметр("Организация"              ,СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Контрагент"               ,СтруктураПараметров.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента"       ,СтруктураПараметров.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Объект"                   ,СтруктураПараметров.Объект);
	Запрос.УстановитьПараметр("ВидСтавки"                ,СтруктураПараметров.ВидСтавки);
	Запрос.УстановитьПараметр("ВидИсточникаЗадолженности",СтруктураПараметров.ВидИсточникаЗадолженности);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ФинНачисления.ПогашеннаяСуммаФинансовыхПроцентовРеглОборот) КАК ПогашеннаяСуммаФинансовыхПроцентовРеглОборот,
	               |	СУММА(ФинНачисления.НачисленнаяСуммаФинансовыхПроцентовРеглОборот) КАК НачисленнаяСуммаФинансовыхПроцентовРеглОборот,
	               |	СУММА(ФинНачисления.НачисленнаяСуммаФинансовыхПроцентовРеглОборот - ФинНачисления.ПогашеннаяСуммаФинансовыхПроцентовРеглОборот) КАК ОстатокРегл,
	               |	ФинНачисления.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот,
	               |	ФинНачисления.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот,
	               |	ФинНачисления.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот - ФинНачисления.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот КАК ОстатокВзаиморасчеты
	               |ИЗ
	               |	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	               |			,
	               |			&КонецПериода,
	               |			Период,
	               |			Объект = &Объект
	               |				И Организация = &Организация
	               |				И Контрагент = &Контрагент
	               |				И ДоговорКонтрагента = &ДоговорКонтрагента
	               |				И ВидСтавки = &ВидСтавки
	               |				И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности) КАК ФинНачисления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФинНачисления.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот,
	               |	ФинНачисления.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот";
				   
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		РезСтруктура.ОстатокРегл          = Выборка.ОстатокРегл;
		РезСтруктура.ОстатокВзаиморасчеты = Выборка.ОстатокВзаиморасчеты;
	
	КонецЕсли; 

	// Изменение кода. Начало. 18.10.2011{{
	// учтем, суммы процентов, которые будут погашены в текущем периоде.
	Если СтрПлатежи.СуммаРегл >= РезСтруктура.ОстатокРегл Тогда
		
		РезСтруктура.ОстатокРегл = 0;
		
	Иначе	
		
		РезСтруктура.ОстатокРегл = РезСтруктура.ОстатокРегл - СтрПлатежи.СуммаРегл;
		
	КонецЕсли;
	
	Если СтрПлатежи.СуммаВз >= РезСтруктура.ОстатокВзаиморасчеты Тогда
		
		РезСтруктура.ОстатокВзаиморасчеты  = 0;
		
	Иначе	
		
		РезСтруктура.ОстатокВзаиморасчеты  = РезСтруктура.ОстатокВзаиморасчеты-СтрПлатежи.СуммаВз;
		
	КонецЕсли; 
	// Изменение кода. Конец. 18.10.2011}}
	
	
	Возврат РезСтруктура;
	
КонецФункции // ПолучитьОстатокНепогашенныхПроцентов()

// Функция определяем начало графика финансовых начислений исходя из договора или даты документа.
// 
// Параметры:
//  ДоговорКонтрагента  - СправочникСсылка.ДоговорыКонтрагентов.
//  ДатаДокумента       - Дата.
// 
// Возвращаемое значение:
//   ДатаНачалаГрафика   - Дата.
// 
Функция ОпределитьНачалоГрафика(ДоговорКонтрагента,ДатаДокумента) Экспорт

	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ЗначениеЗаполнено(ДоговорКонтрагента.бит_ФактическоеНачало) Тогда
		ДатаНачалаГрафика =  ДоговорКонтрагента.бит_ФактическоеНачало;
	Иначе	
		ДатаНачалаГрафика =  ДатаДокумента;
	КонецЕсли; 

	Возврат ДатаНачалаГрафика;
	
КонецФункции // ОпределитьНачалоГрафика()

#КонецОбласти

#Область РасчетыОтложенныхНалогов

// Функция получает настройки из регистра сведений бит_му_НастройкиРасчетаОтложенныхНалогов.
// 
// Параметры:
//  СтруктураПараметров  - Структура (Период, Организация, Список видов активов/обязательств).
//  
// Возвращаемое значение:
//   Таблица значений  (Колонки: ВидАктивовОбязательств, ИсточникДанных).
// 
Функция ПолучитьНастройкиРасчетаОтложенныхНалогов(СтруктураПараметров) Экспорт

	Организация = ?(СтруктураПараметров.Свойство("Организация"), 
							СтруктураПараметров.Организация, 
							Справочники.Организации.ПустаяСсылка());
							
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"	   , СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Настройки.ВидАктивовОбязательств, НастройкиВсе.ВидАктивовОбязательств) КАК ВидАктивовОбязательств,
	|	ВЫБОР КОГДА Настройки.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.бит_му_ВидыАктивовОбязательств.ПустаяСсылка)
	|		ТОГДА  НастройкиВсе.ИсточникДанных
	|		ИНАЧЕ  ЕСТЬNULL(Настройки.ИсточникДанных, НастройкиВсе.ИсточникДанных)
	|	КОНЕЦ 																			КАК ИсточникДанных
	|ПОМЕСТИТЬ ВремТабл	
	|ИЗ
	|	РегистрСведений.бит_му_НастройкиРасчетаОтложенныхНалогов.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	//bit Amerkulov 09.12.2014 ++ Расчет отложенных налогов		
    | 			И ТипНастройки = Значение(Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза) 
	//bit Amerkulov 09.12.2014 ++ Расчет отложенных налогов		
	|				%ДопУсловие%
	|				) КАК Настройки
	|
	|	ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НастройкиРасчетаОтложенныхНалогов.СрезПоследних(
	|			&Период,
	|			Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//bit Amerkulov 09.12.2014 ++ Расчет отложенных налогов		
    | 			И ТипНастройки = Значение(Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза) 
	//bit Amerkulov 09.12.2014 ++ Расчет отложенных налогов		
	|				%ДопУсловие%
	|				) КАК НастройкиВсе
	|		ПО Настройки.ВидАктивовОбязательств = НастройкиВсе.ВидАктивовОбязательств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Табл.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	Табл.ИсточникДанных
	|ИЗ
	|	ВремТабл КАК Табл
	|ГДЕ
	|	ИсточникДанных <> ЗНАЧЕНИЕ(Справочник.бит_ИсточникиДанных.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	Табл.ВидАктивовОбязательств.Код
	|ИТОГИ ПО
	|	ВидАктивовОбязательств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТабл
	|";
	Если СтруктураПараметров.Свойство("ВидыАктивовОбязательств") Тогда
		
		ВидыАктивовОбязательств = СтруктураПараметров.ВидыАктивовОбязательств;
				
		Запрос.УстановитьПараметр("ВидыАктивовОбязательств", ВидыАктивовОбязательств);
		Запрос.Текст = СтрЗаменить(Текст, "%ДопУсловие%"  , " И ВидАктивовОбязательств  В(&ВидыАктивовОбязательств)");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Текст, "%ДопУсловие%", "");
		
	КонецЕсли;
		
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
		
КонецФункции // ПолучитьНастройкиРасчетаОтложенныхНалогов()

//bit Amerkulov 26.11.2014 ++ Расчет отложенных налогов					
Функция ПолучитьНастройкиРасчетаОтложенныхНалоговРасширенная(СтруктураПараметров) Экспорт

	Организация = ?(СтруктураПараметров.Свойство("Организация"), 
							СтруктураПараметров.Организация, 
							Справочники.Организации.ПустаяСсылка());
							
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"	   , СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Текст = "ВЫБРАТЬ
	        |	ЕСТЬNULL(Настройки.ВидАктивовОбязательств, НастройкиВсе.ВидАктивовОбязательств) КАК ВидАктивовОбязательств,
	        |	ВЫБОР
	        |		КОГДА Настройки.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.бит_му_ВидыАктивовОбязательств.ПустаяСсылка)
	        |			ТОГДА НастройкиВсе.ИсточникДанных
	        |		ИНАЧЕ ЕСТЬNULL(Настройки.ИсточникДанных, НастройкиВсе.ИсточникДанных)
	        |	КОНЕЦ КАК ИсточникДанных,
	        |	ЕСТЬNULL(Настройки.ТипНастройки, НастройкиВсе.ТипНастройки) КАК ТипНастройки,
	        |	ЕСТЬNULL(Настройки.ВидАктивовОбязательствДляРекласса, НастройкиВсе.ВидАктивовОбязательствДляРекласса) КАК ВидАктивовОбязательствДляРекласса,
	        |	ЕСТЬNULL(Настройки.ИсточникДанныхДляВычета, НастройкиВсе.ИсточникДанныхДляВычета) КАК ИсточникДанныхДляВычета
	        |ПОМЕСТИТЬ ВремТабл
	        |ИЗ
	        |	РегистрСведений.бит_му_НастройкиРасчетаОтложенныхНалогов.СрезПоследних(
			|			&Период,
			|			Организация = &Организация
			|				%ДопУсловие%
			|				) КАК Настройки
		
			|	ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НастройкиРасчетаОтложенныхНалогов.СрезПоследних(
			|			&Период,
			|			Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|				%ДопУсловие%
			|				) КАК НастройкиВсе
			
	        |		ПО Настройки.ВидАктивовОбязательств = НастройкиВсе.ВидАктивовОбязательств
			|		И Настройки.ВидАктивовОбязательствДляРекласса = НастройкиВсе.ВидАктивовОбязательствДляРекласса
			
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	Табл.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	        |	Табл.ИсточникДанных,
	        |	Табл.ТипНастройки,
	        |	Табл.ВидАктивовОбязательствДляРекласса,
	        |	Табл.ИсточникДанныхДляВычета
	        |ИЗ
	        |	ВремТабл КАК Табл
	        |ГДЕ
	        |	Табл.ИсточникДанных <> ЗНАЧЕНИЕ(Справочник.бит_ИсточникиДанных.ПустаяСсылка)
	        |ИТОГИ ПО
	        |	ВидАктивовОбязательств, ТипНастройки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |УНИЧТОЖИТЬ ВремТабл";
	Если СтруктураПараметров.Свойство("ВидАктивовОбязательств") Тогда
		
		ВидАктивовОбязательств = СтруктураПараметров.ВидАктивовОбязательств;
				
		Запрос.УстановитьПараметр("ВидАктивовОбязательств", ВидАктивовОбязательств);
		Текст  = СтрЗаменить(Текст, "%ДопУсловие%"  , "%ДопУсловие% И (ВидАктивовОбязательствДляРекласса = &ВидАктивовОбязательств ИЛИ ВидАктивовОбязательств  = &ВидАктивовОбязательств)");
		
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ИсточникДанных") Тогда
		
		ИсточникДанных = СтруктураПараметров.ИсточникДанных;
				
		Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
		Текст  = СтрЗаменить(Текст, "%ДопУсловие%"  , "%ДопУсловие% И (ИсточникДанных  = &ИсточникДанных ИЛИ ИсточникДанныхДляВычета  = &ИсточникДанных)")
		
	КонецЕсли;

	
	Если СтруктураПараметров.Свойство("ТипНастройки") Тогда
		
		ТипНастройки = СтруктураПараметров.ТипНастройки;
				
		Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
		Текст  = СтрЗаменить(Текст, "%ДопУсловие%"  , "%ДопУсловие% И ТипНастройки  = &ТипНастройки")
		
	КонецЕсли;	
	
	Если СтруктураПараметров.Свойство("ТипыНастройки") Тогда
		
		ТипыНастройки = СтруктураПараметров.ТипыНастройки;
				
		Запрос.УстановитьПараметр("ТипыНастройки", ТипыНастройки);
		Текст  = СтрЗаменить(Текст, "%ДопУсловие%"  , "%ДопУсловие% И ТипНастройки  В (&ТипыНастройки)")
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Текст, "%ДопУсловие%", "");	
		
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
		
КонецФункции // ПолучитьНастройкиРасчетаОтложенныхНалогов()
//bit Amerkulov 26.11.2014 -- Расчет отложенных налогов	

// Процедура расчитывает суммы ОНА и ОНО.
// 
// Параметры:
//  ТекущиеДанные  			- Строка таблицы значений.
//  СтавкаНалогаНаПрибыль 	- Число.
// 
Процедура РасчитатьСуммыОтложенныхНалоговыхАктивовОбязательств(ТекущиеДанные, СтавкаНалогаНаПрибыль) Экспорт
	
	Ставка = СтавкаНалогаНаПрибыль/100;
	
	// Временные разницы вычисляются по формуле:  
	// Налоговая база - Балансовая стоимость - Постоянные разницы.
	СуммаВР = ТекущиеДанные.СуммаНУ - ТекущиеДанные.СуммаМУ + ТекущиеДанные.СуммаПР;
	ТекущиеДанные.СуммаВР = СуммаВР;
	
	// СуммаОНА  равно произведению положительной суммы временных разниц 
	// на ставку налога на прибыль; 
	// если сумма в графе «Временные разницы» отрицательна или нулевая, ОНА равно нулю.
	Если СуммаВР <= 0 Тогда
		ТекущиеДанные.СуммаОНА = 0;			
	Иначе
	    ТекущиеДанные.СуммаОНА = СуммаВР * Ставка;		
	КонецЕсли; 
	
	// СуммаОНО равно произведению отрицательной суммы временных разниц 
	// на ставку налога на прибыль со знаком минус; 
	// если сумма в графе «Временные разницы» положительна или нулевая, ОНО равно нулю.
	Если СуммаВР >= 0 Тогда
		ТекущиеДанные.СуммаОНО = 0;			
	Иначе
	    ТекущиеДанные.СуммаОНО = СуммаВР * (Ставка * -1);		
	КонецЕсли;	

КонецПроцедуры // РасчитатьСуммыОтложенныхНалоговыхАктивовОбязательств()

// Процедура получает ставку налога на прибыль.
// 
// Параметры:
//  Дата        - Дата.
//  Организация - СправочникСсылка.Организации.
// 
Функция ПолучитьСтавкуНалогаНаПрибыль(Дата, Организация) Экспорт

	СтавкаНалога = 0;
	
	Если Метаданные.РегистрыСведений.Найти("СтавкиНалогаНаПрибыльДляВсехОрганизаций") <> Неопределено Тогда
		
		НаборСтавок  = РегистрыСведений["СтавкиНалогаНаПрибыльДляВсехОрганизаций"].ПолучитьПоследнее(Дата);	
		СтавкаНалога = НаборСтавок.СтавкаФБ + НаборСтавок.СтавкаСубъектРФ;
		
	ИначеЕсли Метаданные.РегистрыСведений.Найти("СтавкиНалогаНаПрибыль") <> Неопределено Тогда
		
		Отбор = Новый Структура("Организация", Организация);
		НаборСтавок  = РегистрыСведений["СтавкиНалогаНаПрибыль"].ПолучитьПоследнее(Дата, Отбор);
		СтавкаНалога = НаборСтавок.СтавкаФБ + НаборСтавок.СтавкаСубъектРФ + НаборСтавок.СтавкаМестный;
        
    ИначеЕсли Метаданные.РегистрыСведений.Найти("НастройкиУчетаНалогаНаПрибыль") <> Неопределено Тогда
        
        Отбор = Новый Структура("Организация", Организация);
    	НаборСтавок  = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ПолучитьПоследнее(Дата, Отбор);
    	СтавкаНалога = НаборСтавок.СтавкаФБ + НаборСтавок.СтавкаСубъектРФ;
        
	КонецЕсли;
		
	Возврат СтавкаНалога;
	
КонецФункции // ПолучитьСтавкуНалогаНаПрибыль()

#КонецОбласти

// Функция определяет наличие движений по международному учету.
// 
// Параметры:
//  Организация  - СправочникСсылка.Организации,Неопределено.
// 
// Возвращаемое значение:
//   ЕстьДвижения   - Булево.
// 
Функция ЕстьДвиженияПоМУ(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_Дополнительный_2.Организация
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Дополнительный_2 КАК бит_Дополнительный_2
	               |ГДЕ
	               |	бит_Дополнительный_2.Активность";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст = Запрос.Текст +"
		|	И бит_Дополнительный_2.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		
	КонецЕсли; 				

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
	     ЕстьДвижения = Ложь;
	Иначе	
	     ЕстьДвижения = Истина;
	КонецЕсли; 
	
	Возврат ЕстьДвижения;
	
КонецФункции // ЕстьДвиженияПоМУ()

// Функция получает значения параметров учетной политики на текущую дату.
// 
// Параметры:
// ТекущаяДата 		   - Дата
// СтруктураПараметров - Структура.
//                
// Возвращаемое значение:
//   РезСоответствие   - Соответствие.
// 
Функция ПолучитьУчетнуюПолитику(ТекущаяДата, СтруктураПараметров = Неопределено) Экспорт

	РезСоответствие = Новый Соответствие;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяДата) Тогда
	
		Возврат РезСоответствие;
	
	КонецЕсли; 
	
	Если СтруктураПараметров = Неопределено Тогда
	
		СтруктураПараметров = Новый Структура;
	
	КонецЕсли; 
	
	ТаблицаДанныхВрем = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_му_УчетнаяПолитика");	
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Период"     , Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации,НЕОПРЕДЕЛЕНО"));
	ТаблицаДанных.Колонки.Добавить("Настройка"  , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.бит_му_ВидыПараметровУчетнойПолитики"));
	// ТаблицаДанных.Колонки.Добавить("ЗначениеНастройки"
	// 			, Новый ОписаниеТипов("Булево,Число,Строка,Дата,СправочникСсылка.Валюты,
	// 								|ПеречислениеСсылка.бит_му_МетодыУчетаАмортизацииПриПереоценке,
	// 								|ПланСчетовСсылка.бит_Дополнительный_2,
	// 								|ПеречислениеСсылка.бит_му_СпособыРасчетаЭСП"));
																		  
    ТаблицаДанных.Колонки.Добавить("ЗначениеНастройки", Метаданные.ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.Тип);
																		  
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныхВрем Цикл
	
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
	
	КонецЦикла;
	
	Организация  = бит_ОбщегоНазначения.ПолучитьЗначениеИзСтруктуры(СтруктураПараметров,"Организация");
	
	
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанных.Период,
	               |	ТаблицаДанных.Организация,
	               |	ТаблицаДанных.Настройка,
	               |	ТаблицаДанных.ЗначениеНастройки
	               |ПОМЕСТИТЬ Настройки
	               |ИЗ
	               |	&ТаблицаДанных КАК ТаблицаДанных
	               |ГДЕ
	               |	(ТаблицаДанных.Организация = &Организация
	               |			ИЛИ ТаблицаДанных.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ИЛИ ТаблицаДанных.Организация = НЕОПРЕДЕЛЕНО)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Настройки.Организация,
	               |	Настройки.Настройка,
	               |	МАКСИМУМ(Настройки.Период) КАК Период
	               |ПОМЕСТИТЬ ТаблицаДат
	               |ИЗ
	               |	Настройки КАК Настройки
	               |ГДЕ
	               |	Настройки.Период <= &ТекущаяДата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Настройки.Организация,
	               |	Настройки.Настройка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДат.Период,
	               |	ТаблицаДат.Организация,
	               |	ТаблицаДат.Настройка КАК Настройка,
	               |	Настройки.ЗначениеНастройки,
	               |	ВЫБОР
	               |		КОГДА Настройки.Организация = НЕОПРЕДЕЛЕНО
	               |				ИЛИ Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ТОГДА 2
	               |		КОГДА Настройки.Организация ССЫЛКА Справочник.Организации
	               |			ТОГДА 1
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Приоритет
	               |ИЗ
	               |	ТаблицаДат КАК ТаблицаДат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Настройки КАК Настройки
	               |		ПО ТаблицаДат.Организация = Настройки.Организация
	               |			И ТаблицаДат.Настройка = Настройки.Настройка
	               |			И ТаблицаДат.Период = Настройки.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет
	               |ИТОГИ ПО
	               |	Настройка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Настройки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаДат";
				   
	Запрос.УстановитьПараметр("ТаблицаДанных"           ,ТаблицаДанных);
	Запрос.УстановитьПараметр("ТекущаяДата"             ,ТекущаяДата);
	Запрос.УстановитьПараметр("Организация"             ,Организация);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаНастройка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНастройка.Следующий() Цикл
	
		Выборка = ВыборкаНастройка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
		    РезСоответствие.Вставить(Выборка.Настройка,Выборка.ЗначениеНастройки);
			Прервать;
		
		КонецЦикла; 
	
	КонецЦикла;
	
	Возврат РезСоответствие;
	
КонецФункции // ПолучитьУчетнуюПолитику()

// Функция получает счет нераспределенной прибыли для организации.
// 
// Параметры:
//  Организация        - СправочникСсылка.Организации.
//  ДатаСведений       - Дата.
//  ТекУчетнаяПолитика - ТаблицаЗначений, по умолчанию неопределено.
// 
// Возвращаемое значение:
//  СчетНРП - ПланСчетовСсылка.бит_Дополнительный_2.
// 
Функция ПолучитьСчетНРП(Организация, ДатаСведений, ТекУчетнаяПолитика = Неопределено) Экспорт 
	
	СчетНРП = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если ТекУчетнаяПолитика = Неопределено Тогда
			ТекУчетнаяПолитика = ПолучитьУчетнуюПолитику(ДатаСведений, Новый Структура("Организация", Организация));
		КонецЕсли; 
		
		ПВХСчетНРП = ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.СчетНераспределеннойПрибыли;
		СчетНРП	   = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ТекУчетнаяПолитика, ПВХСчетНРП);
		
	КонецЕсли;
	
	Возврат СчетНРП;
	
КонецФункции // ПолучитьСчетНРП()

// Функция получает валюту международного учета для организации.
// 
// Параметры:
//  Организация  	   - СправочникСсылка.Организации.
//  ТекУчетнаяПолитика - ТаблицаЗначений.
//  ВыводитьСообщения  - Булево.
// 
// Возвращаемое значение:
//   СправочникСсылка.Валюты.
// 
Функция ПолучитьВалютуМеждународногоУчета(Организация, ТекУчетнаяПолитика = Неопределено, ВыводитьСообщения = Истина) Экспорт
	
	ВалютаМУ = Справочники.Валюты.ПустаяСсылка();
	
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() И ЗначениеЗаполнено(Организация) Тогда
		
		Если ТекУчетнаяПолитика = Неопределено Тогда
		
		     ТекУчетнаяПолитика = ПолучитьУчетнуюПолитику(ТекущаяДата(), Новый Структура("Организация", Организация));
		
		КонецЕсли; 
		
		ВалютаМУ = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ТекУчетнаяПолитика, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.ВалютаМеждународногоУчета);
		
		Если ВыводитьСообщения 
			И НЕ ЗначениеЗаполнено(ВалютаМУ) Тогда
			
			ТекстСообщения = "Не заполнено значение валюты Международного учета для организации """+Организация+"""!";
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.ОченьВажное);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ВалютаМУ;
	
КонецФункции // ПолучитьВалютуМеждународногоУчета()

// Функция получает способ расчета эффективной ставки процента для всех 
// финансовых инструментов или для кредитов и займов полученных  из учетной политики.
// 
// Параметры:
//  Организация        - СправочникСсылка.Организации.
//  ТекУчетнаяПолитика - ТаблицаЗначений.
//  ВидНастройки       - Строка - "КредитыЗаймы", "Общая".
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.бит_му_СпособыРасчетаЭСП.
// 
Функция ПолучитьСпособРасчетаЭСП(Организация, ТекУчетнаяПолитика = Неопределено, ВидНастройки = "Общая") Экспорт
	
	// Хранит способ расчета эффективной процентной ставки.
	Перем СпособРасчета;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если ТекУчетнаяПолитика = Неопределено Тогда			
			ТекУчетнаяПолитика = ПолучитьУчетнуюПолитику(ТекущаяДата(), Новый Структура("Организация", Организация));			
		КонецЕсли; 
		
		Если ВРег(ВидНастройки) = ВРег("КредитыЗаймы") Тогда
			СпособРасчета = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ТекУчетнаяПолитика, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.СпособРасчетаЭСПКредитыИЗаймы);
		Иначе	
			СпособРасчета = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ТекУчетнаяПолитика, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.СпособРасчетаЭСП);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(СпособРасчета) Тогда		
		СпособРасчета = Перечисления.бит_му_СпособыРасчетаЭСП.ПоМесяцам;		
	КонецЕсли; 
	
	Возврат СпособРасчета;
	
КонецФункции // ПолучитьСпособРасчетаЭСП()

// Функция определяет способ получения номинальной процентной 
// ставки из учетной политики.
// 
// Параметры:
//  Организация        - СправочникСсылка.Организации.
//  ТабУчетнаяПолитика - ТаблицаЗначений.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.бит_му_СпособыРасчетаЭСП.
// 
Функция СпособПолученияНоминальнойСтавки(Организация, ТабУчетнаяПолитика = Неопределено) Экспорт
	
	// Хранит способ получения номинальной ставки.
	Перем СпособПолучения;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если ТабУчетнаяПолитика = Неопределено Тогда
			
			ТабУчетнаяПолитика = ПолучитьУчетнуюПолитику(ТекущаяДата(), Новый Структура("Организация", Организация));
			
		КонецЕсли; 
		
		СпособПолучения = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ТабУчетнаяПолитика, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.СпособПолученияНоминальнойСтавки);
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СпособПолучения) Тогда
		
		СпособПолучения = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ;
		
	КонецЕсли; 
	
	Возврат СпособПолучения;
	
КонецФункции // СпособПолученияНоминальнойСтавки()

// Процедура устанавливает субконто на счете. Если такое субконто на счете отсутствует, 
// то ничего не делается. 
// 
// Параметры:
// 	Счет - Счет, к которому относится субконто.
//  Субконто          - набор субконто.
// 	ИмяСубконто       - Номер или имя установливаемого субконто.
//  Значение субконто - значение устанавливаемого субконто.
// 
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "", ВидыСубконтоСчета = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
    //Если ВидыСубконтоСчета = Неопределено Тогда
    //     ВидыСубконтоСчета = Счет.ВидыСубконто;
    //КонецЕсли; 
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		//Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
        Если ИмяСубконто > СвСч.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		//ВидСубк = ВидыСубконтоСчета[ИмяСубконто - 1].ВидСубконто;
        ВидСубк = СвСч["ВидСубконто" + ИмяСубконто];

	Иначе

        Если ВидыСубконтоСчета = Неопределено Тогда
	        ВидыСубконтоСчета = Счет.ВидыСубконто;
	    КонецЕсли;
		ВидСубк = ПланыВидовХарактеристик[Счет.Метаданные().ВидыСубконто.Имя][ИмяСубконто];

		Если ВидыСубконтоСчета.Найти(ВидСубк) = Неопределено Тогда
			Если Сообщать тогда
				бит_ОбщегоНазначения.СообщитьОбОшибке("Вид субконто <" + ВидСубк + "> для счета """+СвСч.Код +" ("+СвСч.Наименование+")"" не определен.",, Заголовок );
			КонецЕсли;
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубк, ЗначениеСубконто);
	ИначеЕсли Сообщать тогда
		бит_ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубк + ">",, Заголовок);
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Функция получает курсы валют необходимые при пересчетах для формирования движений.
// 
// Параметры:
//  ДокументОбъект  - ДокументОбъект.
// 
// Возвращаемое значение:
//   СтруктураКурсыВалют   - Структура.
//   ДатаКурсов - Дата.
//   ВидыКурсов - Структура.
// 
Функция ПолучитьСтруктуруКурсовВалют(ДокументОбъект,ДатаКурсов,ВидыКурсов = Неопределено)   Экспорт

 СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ДокументОбъект,ДатаКурсов,ВидыКурсов);
 
 Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("МУ") Тогда
 
 	 МетаданныеДокумента = ДокументОбъект.Метаданные();
	 
	 Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеДокумента) Тогда
	 
		 Валюта   = ПолучитьВалютуМеждународногоУчета(ДокументОбъект.Организация,,Ложь);
		 СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта,ДатаКурсов);
		 СтрКурса.Вставить("Валюта",Валюта);
		 СтруктураКурсыВалют.Вставить("МУ",СтрКурса);
	 
	 КонецЕсли; 
 
 КонецЕсли; 
 
 Возврат СтруктураКурсыВалют;

КонецФункции // ПолучитьСтруктуруКурсовВалют()

// Функция готовит структуру параметров трансляции для выполнения подбора счетов по правилам трансляции.
// 
// Параметры:
//  Организация  - СправочникСсылка.Организация.
//  ДатаПравил   - Дата.
// 
// Возвращаемое значение:
//   СтруктураПараметров   - Структура.
// 
Функция ПодготовитьСтруктуруПараметровДляПодбораСчетовМУ(Организация,ДатаПравил)  Экспорт

	РегистрИсточник = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.Хозрасчетный);	
	РегистрПриемник = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2);
	
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить(Перечисления.бит_НазначенияПравилТрансляции.ПодборСчетов);
	МассивНазначений.Добавить(Перечисления.бит_НазначенияПравилТрансляции.ТрансляцияИПодборСчетов);
	
	
	МассивПравил    = бит_МеханизмТрансляции.ПолучитьПравилаТрансляцииДляПодбораСчетов(Организация
	                                                                                   ,ДатаПравил
	                                                                                   ,МассивНазначений
																					   ,РегистрИсточник
																					   ,РегистрПриемник);
	
	СтруктураПараметров = бит_МеханизмТрансляции.КонструкторСтруктурыПараметровТрансляции();														
														
	СтруктураПараметров.ОбязательныеПоля  = Новый Структура;
	СтруктураПараметров.ПравилоЗаполнения = Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.ПустаяСсылка();
	СтруктураПараметров.ПравилаТрансляции = МассивПравил;
	СтруктураПараметров.СтруктураШапкиДокумента = Новый Структура;
	СтруктураПараметров.ПользовательскиеФункции = Новый Соответствие;
	СтруктураПараметров.ДополнительныеАналитики = Новый Соответствие;
	СтруктураПараметров.ПризнакиУчета           = бит_МеханизмТрансляции.ЗаполнитьПризнакиУчета(РегистрПриемник);
	СтруктураПараметров.ВидыРегистров           = бит_МеханизмТрансляции.КонструкторСтруктурыВидыРегистров(Истина,Ложь,Истина,Ложь);
	СтруктураПараметров.МетаданныеИсточника     = Метаданные.РегистрыБухгалтерии.Хозрасчетный;
	СтруктураПараметров.МетаданныеПриемника     = Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2;
	СтруктураПараметров.ЗаписыватьДвижения      = Ложь;
	
	Возврат СтруктураПараметров;

КонецФункции // ПодготовитьСтруктуруПараметровДляПодбораСчетов()

// Процедура вызывает процедуру по валютным пересчетам и записывает СуммуМУ.
// 
// Параметры:
//  СтрокаТаблицы       - СтрокаТаблицыЗначений.
//  Запись				- РегистрБухгалтерииЗапись.бит_Дополнительный_2.
//  СтруктураКурсыВалют - Структура.
// 
Процедура ВыполнитьВалютныеПересчетыЗаписи(СтрокаТаблицы, Запись, СтруктураКурсыВалют) Экспорт
	
	// Сформируем массив имен источника.
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("СуммаВзаиморасчеты");
	
	// Выполним расчет сумм "Регламентного и управленческого учета".
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтрокаТаблицы
												   ,Запись
												   ,МассивИмен
												   ,СтруктураКурсыВалют
												   ,СтруктураКурсыВалют.Документ
												   ,МассивИсключений);
	
КонецПроцедуры // ВыполнитьВалютныеПересчетыЗаписи()

// Функция возвращает возможные счета учета расчетов с контрагентом.
// 
// Параметры:
//  Организация - по которой выполняется поиск.
//  Контрагент  - по которому выполняется поиск.
//  Договор     - по которому выполняется поиск.
// 
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов.
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Знач Организация, Знач Контрагент, Знач Договор) Экспорт

	Результат = Новый Структура("СчетДолгосрочныхОбязательств, 
	                            |СчетКраткосрочныхОбязательств,
								|СчетКредиторскойЗадолженностиДолгосрочной,
								|СчетКредиторскойЗадолженностиКраткосрочной,
	                            |СчетДолгосрочныхПроцентов, 
	                            |СчетКраткосрочныхПроцентов, 
	                            |СчетРаспределяемыхПлатежей,
	                            |СчетРезерва,
	                            |СпособОтраженияРасходовПоАмортизации");

	// ++БП
	Если ТипЗнч(Договор) = Тип("ПеречислениеСсылка.ВидыРасчетовПоДоговорам") Тогда
		ВидРасчетовПоДоговору = Договор;
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе							
		ВидРасчетовПоДоговору = бит_БухгалтерияСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(Договор);
	КонецЕсли;
    // --БП

	СписокГруппКонтрагентов = бит_ОбщегоНазначения.ПолучитьСписокВышеСтоящихГрупп(Контрагент);
	
	СписокГруппДоговоров = бит_ОбщегоНазначения.ПолучитьСписокВышеСтоящихГрупп(Договор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	// ++БП
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	// --БП
	
	Индекс = 1;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	" + Индекс + " КАК Приоритет,
	|	СчетДолгосрочныхОбязательств,
	|	СчетКраткосрочныхОбязательств,
	|	СчетКредиторскойЗадолженностиДолгосрочной,
	|	СчетКредиторскойЗадолженностиКраткосрочной,
	|	СчетДолгосрочныхПроцентов,
	|	СчетКраткосрочныхПроцентов,
	|	СчетРаспределяемыхПлатежей,
	|	СчетРезерва,
	|	СпособОтраженияРасходовПоАмортизации
	|
	|ИЗ
	|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетДолгосрочныхОбязательств,
		|	СчетКраткосрочныхОбязательств,
		|	СчетКредиторскойЗадолженностиДолгосрочной,
		|	СчетКредиторскойЗадолженностиКраткосрочной,
		|	СчетДолгосрочныхПроцентов,
		|	СчетКраткосрочныхПроцентов,
		|	СчетРаспределяемыхПлатежей,
		|	СчетРезерва,
		|	СпособОтраженияРасходовПоАмортизации
		|
		|ИЗ
		|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетДолгосрочныхОбязательств,
	|	СчетКраткосрочныхОбязательств,
	|	СчетКредиторскойЗадолженностиДолгосрочной,
	|	СчетКредиторскойЗадолженностиКраткосрочной,
	|	СчетДолгосрочныхПроцентов,
	|	СчетКраткосрочныхПроцентов,
	|	СчетРаспределяемыхПлатежей,
	|	СчетРезерва,
	|	СпособОтраженияРасходовПоАмортизации
	|
	|ИЗ
	|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетДолгосрочныхОбязательств,
		|	СчетКраткосрочныхОбязательств,
		|	СчетКредиторскойЗадолженностиДолгосрочной,
		|	СчетКредиторскойЗадолженностиКраткосрочной,
		|	СчетДолгосрочныхПроцентов,
		|	СчетКраткосрочныхПроцентов,
		|	СчетРаспределяемыхПлатежей,
		|	СчетРезерва,
		|	СпособОтраженияРасходовПоАмортизации
		|
		|ИЗ
		|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетДолгосрочныхОбязательств,
	|	СчетКраткосрочныхОбязательств,
	|	СчетКредиторскойЗадолженностиДолгосрочной,
	|	СчетКредиторскойЗадолженностиКраткосрочной,
	|	СчетДолгосрочныхПроцентов,
	|	СчетКраткосрочныхПроцентов,
	|	СчетРаспределяемыхПлатежей,
	|	СчетРезерва,
	|	СпособОтраженияРасходовПоАмортизации
	|
	|ИЗ
	|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетДолгосрочныхОбязательств,
		|	СчетКраткосрочныхОбязательств,
		|	СчетКредиторскойЗадолженностиДолгосрочной,
		|	СчетКредиторскойЗадолженностиКраткосрочной,
		|	СчетДолгосрочныхПроцентов,
		|	СчетКраткосрочныхПроцентов,
		|	СчетРаспределяемыхПлатежей,
		|	СчетРезерва,
		|	СпособОтраженияРасходовПоАмортизации
		|
		|ИЗ
		|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетДолгосрочныхОбязательств,
	|	СчетКраткосрочныхОбязательств,
	|	СчетКредиторскойЗадолженностиДолгосрочной,
	|	СчетКредиторскойЗадолженностиКраткосрочной,
	|	СчетДолгосрочныхПроцентов,
	|	СчетКраткосрочныхПроцентов,
	|	СчетРаспределяемыхПлатежей,
	|	СчетРезерва,
	|	СпособОтраженияРасходовПоАмортизации
	|
	|ИЗ
	|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетДолгосрочныхОбязательств,
		|	СчетКраткосрочныхОбязательств,
		|	СчетКредиторскойЗадолженностиДолгосрочной,
		|	СчетКредиторскойЗадолженностиКраткосрочной,
		|	СчетДолгосрочныхПроцентов,
		|	СчетКраткосрочныхПроцентов,
		|	СчетРаспределяемыхПлатежей,
		|	СчетРезерва,
		|	СпособОтраженияРасходовПоАмортизации
		|
		|ИЗ
		|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетДолгосрочныхОбязательств,
	|	СчетКраткосрочныхОбязательств,
	|	СчетКредиторскойЗадолженностиДолгосрочной,
	|	СчетКредиторскойЗадолженностиКраткосрочной,
	|	СчетДолгосрочныхПроцентов,
	|	СчетКраткосрочныхПроцентов,
	|	СчетРаспределяемыхПлатежей,
	|	СчетРезерва,
	|	СпособОтраженияРасходовПоАмортизации
	|
	|ИЗ
	|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &Контрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетДолгосрочныхОбязательств,
	|	СчетКраткосрочныхОбязательств,
	|	СчетКредиторскойЗадолженностиДолгосрочной,
	|	СчетКредиторскойЗадолженностиКраткосрочной,
	|	СчетДолгосрочныхПроцентов,
	|	СчетКраткосрочныхПроцентов,
	|	СчетРаспределяемыхПлатежей,
	|	СчетРезерва,
	|	СпособОтраженияРасходовПоАмортизации
	|
	|ИЗ
	|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетДолгосрочныхОбязательств,
	|	СчетКраткосрочныхОбязательств,
	|	СчетКредиторскойЗадолженностиДолгосрочной,
	|	СчетКредиторскойЗадолженностиКраткосрочной,
	|	СчетДолгосрочныхПроцентов,
	|	СчетКраткосрочныхПроцентов,
	|	СчетРаспределяемыхПлатежей,
	|	СчетРезерва,
	|	СпособОтраженияРасходовПоАмортизации
	|
	|ИЗ
	|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетДолгосрочныхОбязательств,
	|	СчетКраткосрочныхОбязательств,
	|	СчетКредиторскойЗадолженностиДолгосрочной,
	|	СчетКредиторскойЗадолженностиКраткосрочной,
	|	СчетДолгосрочныхПроцентов,
	|	СчетКраткосрочныхПроцентов,
	|	СчетРаспределяемыхПлатежей,
	|	СчетРезерва,
	|	СпособОтраженияРасходовПоАмортизации
	|
	|ИЗ
	|	РегистрСведений.бит_му_СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетДолгосрочныхОбязательств  			 = Выборка.СчетДолгосрочныхОбязательств;
		Результат.СчетКраткосрочныхОбязательств 			 = Выборка.СчетКраткосрочныхОбязательств;
		Результат.СчетКредиторскойЗадолженностиДолгосрочной  = Выборка.СчетКредиторскойЗадолженностиДолгосрочной;
		Результат.СчетКредиторскойЗадолженностиКраткосрочной = Выборка.СчетКредиторскойЗадолженностиКраткосрочной;
		Результат.СчетДолгосрочныхПроцентов    				 = Выборка.СчетДолгосрочныхПроцентов;
		Результат.СчетКраткосрочныхПроцентов    			 = Выборка.СчетКраткосрочныхПроцентов;
		Результат.СчетРаспределяемыхПлатежей  				 = Выборка.СчетРаспределяемыхПлатежей;
		Результат.СчетРезерва   							 = Выборка.СчетРезерва;
		Результат.СпособОтраженияРасходовПоАмортизации		 = Выборка.СпособОтраженияРасходовПоАмортизации;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Функция проверяет доступность роли бит_му_ПолныеПрава.
//  
// Возвращаемое значение:
//   Булево
// 
Функция ДоступнаРольМуПолныеПрава() Экспорт

	Возврат Метаданные.Роли.Найти("бит_му_ПолныеПрава") <> Неопределено И РольДоступна(Метаданные.Роли.бит_му_ПолныеПрава);
	
КонецФункции // ДоступнаРольМуПолныеПрава()

// Функция проверяет относится ли объект к МСФО.
//  
// Параметры:
// 	 ИмяТекОбъекта - Строка
// 
// Возвращаемое значение:
//   Булево
// 
Функция ЭтоМеждународныйПланСчетовИлиРегистр(ИмяТекОбъекта) Экспорт

	Возврат Не бит_ОбщегоНазначения.ЭтоУТ() И ИмяТекОбъекта = "бит_Дополнительный_2";
	
КонецФункции // ЭтоМеждународныйПланСчетовИлиРегистр()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает график платежей по таблице значений.
// 
// Параметры:
//  ФинансовыйГрафик 	- Таблица значений.
//  СтруктураПараметров - Структура.
// 
// Возвращаемое значение:
//   Результат   - Результат.
// 
Функция ПолучитьГрафикПлатежейПоТаблицеЗначений(ФинансовыйГрафик, ДоговорКонтрагента, Объект, ДатаПринятия,СтруктураПараметров)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ФинансовыйГрафик.СуммаПлатежаВзаиморасчеты КАК СуммаПлатежаВзаиморасчеты,
	               |	ФинансовыйГрафик.СуммаПлатежаРегл КАК СуммаПлатежаРегл,
	               |	ФинансовыйГрафик.Период
	               |ПОМЕСТИТЬ ФинансовыйГрафик
	               |ИЗ
	               |	&ФинансовыйГрафик КАК ФинансовыйГрафик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ФинансовыйГрафик.СуммаПлатежаВзаиморасчеты) КАК СуммаПлатежаВзаиморасчеты,
	               |	СУММА(ФинансовыйГрафик.СуммаПлатежаРегл) КАК СуммаПлатежаРегл,
	               |	НАЧАЛОПЕРИОДА(ФинансовыйГрафик.Период, МЕСЯЦ) КАК Период
	               |ИЗ
	               |	ФинансовыйГрафик КАК ФинансовыйГрафик
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ФинансовыйГрафик.Период, МЕСЯЦ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |ИТОГИ
	               |	СУММА(СуммаПлатежаВзаиморасчеты),
	               |	СУММА(СуммаПлатежаРегл)
	               |ПО
	               |	Период ПЕРИОДАМИ(МЕСЯЦ, , )
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ФинансовыйГрафик";
				   
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") 
		И СтруктураПараметров.Свойство("Периодичность") 
		И ВРег(СтруктураПараметров.Периодичность) = ВРег("День") Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"МЕСЯЦ","ДЕНЬ");
	
	КонецЕсли; 			   
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ФинансовыйГрафик", ФинансовыйГрафик);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьГрафикПлатежейПоТаблицеЗначений()

// Функция получает график платежей по регистру.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
// Возвращаемое значение:
//   Результат   - Результат.
// 
Функция ПолучитьГрафикПлатежейПоРегистру(ДоговорКонтрагента,Объект,ДатаПринятия = Неопределено,СтруктураПараметров = Неопределено)
	
	Построитель = Новый ПостроительЗапроса;
	
	Построитель.Текст = "ВЫБРАТЬ
	                    |	ВложенныйЗапрос.Период КАК Период,
	                    |	СУММА(ВложенныйЗапрос.СуммаПлатежаРегл) КАК СуммаПлатежаРегл,
	                    |	СУММА(ВложенныйЗапрос.СуммаПлатажаВзаиморасчеты) КАК СуммаПлатежаВзаиморасчеты
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		НАЧАЛОПЕРИОДА(ФинансовыеГрафики.Период, МЕСЯЦ) КАК Период,
	                    |		ЕстьNull(ФинансовыеГрафики.СуммаПлатежаРеглОборот,0) КАК СуммаПлатежаРегл,
	                    |		ЕстьNull(ФинансовыеГрафики.СуммаПлатежаВзаиморасчетыОборот,0) КАК СуммаПлатажаВзаиморасчеты
	                    |	ИЗ
	                    |		РегистрНакопления.бит_му_ФинансовыеГрафики.Обороты({(&НачалоПериода)}, {(&КонецПериода)}, МЕСЯЦ, {(ДоговорКонтрагента), (Контрагент), (Объект), (Организация)}) КАК ФинансовыеГрафики
	                    |	
	                    |	ОБЪЕДИНИТЬ
	                    |	
	                    |	ВЫБРАТЬ
	                    |		НАЧАЛОПЕРИОДА(&ДатаПринятия, МЕСЯЦ),
	                    |		0,
	                    |		0
	                    |	ГДЕ
	                    |		&ДобавлятьПервыйПериод = ИСТИНА) КАК ВложенныйЗапрос
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ВложенныйЗапрос.Период
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	Период
	                    |ИТОГИ
	                    |	СУММА(СуммаПлатежаРегл),
	                    |	СУММА(СуммаПлатежаВзаиморасчеты)
	                    |ПО
	                    |	Период ПЕРИОДАМИ(МЕСЯЦ, , )
	                    |{ИТОГИ ПО
	                    |	Период}";
	
						
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") 
		И СтруктураПараметров.Свойство("Периодичность") 
		И ВРег(СтруктураПараметров.Периодичность) = ВРег("День") Тогда
		
		Построитель.Текст = СтрЗаменить(Построитель.Текст,"МЕСЯЦ","ДЕНЬ");
	    НачалоПериода = ДатаПринятия;
	Иначе
		НачалоПериода = НачалоМесяца(ДатаПринятия);
	КонецЕсли; 			   
						
	Если ЗначениеЗаполнено(ДатаПринятия) Тогда
		
		Построитель.Параметры.Вставить("ДобавлятьПервыйПериод",Истина);
		Построитель.Параметры.Вставить("ДатаПринятия"         ,НачалоДня(ДатаПринятия));
		бит_ОбщегоНазначения.ДобавитьОтборПостроителя(Построитель
														  ,"НачалоПериода"
														  ,НачалоПериода
														  ,ВидСравнения.Равно);
		
		
	Иначе
		
		Построитель.Параметры.Вставить("ДобавлятьПервыйПериод",Ложь);
		Построитель.Параметры.Вставить("ДатаПринятия"         ,Дата('00010101'));
		
		
	КонецЕсли; 
	
	 бит_ОбщегоНазначения.ДобавитьОтборПостроителя(Построитель
													,"ДоговорКонтрагента"
													,ДоговорКонтрагента
													,ВидСравнения.Равно);



	 бит_ОбщегоНазначения.ДобавитьОтборПостроителя(Построитель
													,"Объект"
													,Объект
													,ВидСравнения.Равно);
	
													
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		
		Если СтруктураПараметров.Свойство("Организация") Тогда
			
			бит_ОбщегоНазначения.ДобавитьОтборПостроителяПоСтруктуре(Построитель
																	,СтруктураПараметров
																	,"Организация"
																	,ВидСравнения.Равно);
			
		КонецЕсли; 	
		
		Если СтруктураПараметров.Свойство("Контрагент") Тогда
			
			бит_ОбщегоНазначения.ДобавитьОтборПостроителяПоСтруктуре(Построитель
																	,СтруктураПараметров
																	,"Контрагент"
																	,ВидСравнения.Равно);
			
		КонецЕсли; 	
		
		
	КонецЕсли; 												
	
	Построитель.Выполнить();
	
	Результат = Построитель.Результат;
	
	Возврат Результат;
	
КонецФункции // ПолучитьГрафикПлатежейПоРегистру()

// Процедура получает номинальную ставку по периоду.
// 
// Параметры:
//  Дата  			  - Дата.
//  НоминальныеСтавки - Соответсвие (Дата, Ставка).
//  Ставка 			  - Число.
// 
// Возвращаемое значение:
//   Число.
// 
Функция ПолучитьНоминальнуюСтавку(Дата, НоминальныеСтавки, ПредыдущаяСтавка)

	Ставка = НоминальныеСтавки.Получить(Дата);
	
	// Необходимо чтобы первая номинальная ставка совпала по периоду с первой датой в цикле.
	Если Ставка = Неопределено Тогда

		Ставка = ПредыдущаяСтавка;
	
	КонецЕсли;
	
	Возврат Ставка;
	
КонецФункции // ПолучитьНоминальнуюСтавку()

// Инициализирует структуру данных, используемую при выполнении финансовых начислений.
// 
// Параметры:
//   СуммаОбязательства - Число
// 
// Возвращаемое значение:
//  РезСтруктура - Структура.ДанныеФинНачисления.
// 
Функция КонструкторДанныеФинНачисления(СуммаОбязательства)

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("ИмяКласса"                      , "ДанныеФинНачисления");
	РезСтруктура.Вставить("СуммаОбязательства"             , СуммаОбязательства); 
	РезСтруктура.Вставить("ОстатокПроценты"                , 0);
	РезСтруктура.Вставить("НачисленныеПроценты"            , 0);
	РезСтруктура.Вставить("ПогашенныеПроценты"             , 0);
	РезСтруктура.Вставить("ИтСуммаПогашенногоОбязательства", 0);

	Возврат РезСтруктура;
	
КонецФункции // КонструкторДанныеФинНачисления()

// Процедура начисляет проценты авансом. 
// 
// Параметры:
//  СуммаПлатежа - Число.
//  Данные - Структура.ДанныеФинНачисления.
//  ПарамРасчета - Структура.
// 
Процедура НачислитьАванс(СуммаПлатежа, Данные, ПарамРасчета)
	
	Если СуммаПлатежа <> 0 Тогда
		
		Данные.ПогашенныеПроценты  = Мин(Данные.ОстатокПроценты, СуммаПлатежа);
		Данные.ОстатокПроценты     = Данные.ОстатокПроценты - Данные.ПогашенныеПроценты;				 
		
	Иначе
		
		Данные.ПогашенныеПроценты = 0;
		
	КонецЕсли;
	
	Если ПарамРасчета.РасчетПоДням Тогда
		Данные.НачисленныеПроценты = НачислитьПроценты(Данные.СуммаОбязательства, ПарамРасчета.Ставка, ПарамРасчета.ПарамРасчетаСтавки);
	Иначе	
		Данные.НачисленныеПроценты = НачислитьПроценты(Данные.СуммаОбязательства - СуммаПлатежа, ПарамРасчета.Ставка, ПарамРасчета.ПарамРасчетаСтавки);
	КонецЕсли; 
	Данные.ОстатокПроценты     = Данные.ОстатокПроценты+Данные.НачисленныеПроценты;			
	
	Если ПарамРасчета.ПоследнийПериод Тогда
		
		// В последнем периоде необходимо погасить все проценты.
		Данные.ПогашенныеПроценты = Данные.ПогашенныеПроценты+Данные.НачисленныеПроценты;
		Данные.ОстатокПроценты = Данные.ОстатокПроценты - Данные.НачисленныеПроценты;
		
	КонецЕсли; 
	
КонецПроцедуры // НачислитьАванс()

// Процедура начисляет проценты после оплаты.
// 
// Параметры:
//  СуммаПлатежа - Число.
//  Данные - Структура.ДанныеФинНачисления.
//  ПарамРасчета - Структура.
// 
Процедура НачислитьПостоплату(СуммаПлатежа, Данные, ПарамРасчета)
	
	Если ПарамРасчета.РасчетПоДням Тогда
		Данные.НачисленныеПроценты = НачислитьПроценты(Данные.СуммаОбязательства, ПарамРасчета.Ставка, ПарамРасчета.ПарамРасчетаСтавки);
	Иначе	
		Данные.НачисленныеПроценты = НачислитьПроценты(Данные.СуммаОбязательства - СуммаПлатежа, ПарамРасчета.Ставка, ПарамРасчета.ПарамРасчетаСтавки);
	КонецЕсли; 
	
	Данные.ОстатокПроценты     = Данные.ОстатокПроценты+Данные.НачисленныеПроценты;
	Если СуммаПлатежа <> 0 Тогда
		
		Данные.ПогашенныеПроценты  = Мин(Данные.ОстатокПроценты, СуммаПлатежа);
		Данные.ОстатокПроценты     = Данные.ОстатокПроценты-Данные.ПогашенныеПроценты;
		
	Иначе
		
		Данные.ПогашенныеПроценты = 0;
		
	КонецЕсли; 
	
КонецПроцедуры // НачислитьПостоплата()

// Процедура заполняет данные в строку движений по финансовым начислениям из данных начислений.
// 
// Параметры:
//  СтрокаНачислений - СтрокаТаблицыЗначений.
//  Данные - Структура.ДанныеФинНачисления.
//  Постфикс - Строка.
//  ОбнулитьПроценты - Булево.
// 
Процедура СформироватьСтрокуФинНачислений(СтрокаНачислений, Данные, Постфикс, ОбнулитьПроценты)
	
	Если ОбнулитьПроценты Тогда
		
		Данные.НачисленныеПроценты = 0;
		Данные.ПогашенныеПроценты  = 0;
		Данные.ОстатокПроценты     = 0;
		
	КонецЕсли; 
	
	СуммаПогашенногоОбязательства = СтрокаНачислений["СуммаПлатежа"+Постфикс]-Данные.НачисленныеПроценты;
	Данные.СуммаОбязательства     = Данные.СуммаОбязательства-СуммаПогашенногоОбязательства;
	
	СтрокаНачислений["НачисленнаяСуммаФинансовыхПроцентов"+Постфикс] = Данные.НачисленныеПроценты;
	СтрокаНачислений["ПогашеннаяСуммаФинансовыхПроцентов"+Постфикс]  = Данные.ПогашенныеПроценты;
	СтрокаНачислений["Сумма"+Постфикс]                               = СуммаПогашенногоОбязательства;
	
	Данные.ИтСуммаПогашенногоОбязательства = Данные.ИтСуммаПогашенногоОбязательства + СуммаПогашенногоОбязательства;
	
КонецПроцедуры	

#КонецОбласти
