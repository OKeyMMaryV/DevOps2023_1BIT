////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры/функции подсистемы Бюджетирования доступные на клиенте и на сервере.
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область РасчетыВДеревеФормыВвода

// Функция получает зависимости ячеек табличного документа, 
// т.е какие ячейки следует пересчитать при изменении данной ячейки.
// 
// Параметры:
//  ТабДокДанные - ТабличныйДокумент - таблица.
// 
// Возвращаемое значение:
//  ЗависимостиЯчеек - Структура.
// 
Функция ПолучитьЗависимостиЯчеек(ТабДокДанные) Экспорт
	
	ЗависимостиЯчеек = Новый Структура;
	Для каждого Обл Из ТабДокДанные.Области Цикл
		
		Если Обл.Расшифровка <> Неопределено Тогда
			
			Если Обл.Расшифровка.Вид = "Формула" ИЛИ Обл.Расшифровка.Вид = "Значение" Тогда
				
				Для каждого ИмяАргумента Из Обл.Расшифровка.Аргументы Цикл
					
					Если НЕ ЗависимостиЯчеек.Свойство(ИмяАргумента) Тогда
						
						МассивИмен = Новый Массив;
						МассивИмен.Добавить(Обл.Имя);
						ЗависимостиЯчеек.Вставить(ИмяАргумента, МассивИмен); 
						
					Иначе	
						
						ЗависимостиЯчеек[ИмяАргумента].Добавить(Обл.Имя);
						
					КонецЕсли; 
					
				КонецЦикла; // Обл.Расшифровка.Аргументы
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; // ТабДокДанные.Области
	
	Возврат ЗависимостиЯчеек;
	
КонецФункции // ПолучитьЗависимостиЯчеек()

// Процедура восстанавливает в табличном документе формулы, введенные пользователем. 
// 
// Параметры:
//  ТабДокДанные     - ТабличныйДокумент
//  ТаблицаФормулы   - ТабличнаяЧасть
//  ЗависимостиЯчеек - Структура
//  Цвет_Формула - Цвет
//  ЗащищатьФормулы - Булево.
// 
Процедура ВосстановитьПользовательскиеФормулы(ТабДокДанные, ТаблицаФормулы, ЗависимостиЯчеек, Цвет_Формула, ЗащищатьФормулы)  Экспорт

	МассивУдаления = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаФормулы Цикл
		
		Обл = ТабДокДанные.Области.Найти(СтрокаТаблицы.ИмяЯчейки);
		
		Если ЭтоПрямоугольнаяОбласть(Обл) 
			 И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка, "РасшифровкаЯчейкиФормыВвода")  Тогда
			
			МассивАргументы = бит_СтрокиКлиентСервер.РазобратьФормулу(СтрокаТаблицы.Формула);
			Обл.Расшифровка.Аргументы = МассивАргументы;
			Обл.Расшифровка.Формула   = СтрокаТаблицы.Формула;
			Обл.ЦветФона              = Цвет_Формула;
			Если ЗащищатьФормулы Тогда
			
				Обл.Защита = Истина;
			
			КонецЕсли; 
			
			Для каждого ИмяАргумента Из МассивАргументы Цикл
			
				Если ЗависимостиЯчеек.Свойство(ИмяАргумента) Тогда
					
					ЗависимостиЯчеек[ИмяАргумента].Добавить(Обл.Имя);
					
				Иначе	
					
					МассивИмен = Новый Массив;
					МассивИмен.Добавить(Обл.Имя);
					ЗависимостиЯчеек.Вставить(ИмяАргумента, МассивИмен); 
					
				КонецЕсли; 
			
			КонецЦикла; 
			
		Иначе
			
			МассивУдаления.Добавить(СтрокаТаблицы);
			
		КонецЕсли; 
	
	КонецЦикла; 

	Для каждого СтрокаУдаления Из МассивУдаления Цикл
	
		ТаблицаФормулы.Удалить(СтрокаУдаления);
	
	КонецЦикла; 
	
КонецПроцедуры // ВосстановитьПользовательскиеФормулы()

// Процедура выполняет вычисления ячеек, зависящей от данной ячейки.
// 
// Параметры:
//  ТабДокДанные - ТабличныйДокумент.
//  ЗависимостиЯчеек - Структура
//  ИмяЯчейки - Строка.
// 
Функция ВычислитьЗависимыеФормулы(ТабДокДанные, ЗависимостиЯчеек, ИмяЯчейки, ОбработанныеОбласти = Неопределено, УровеньРекурсии = 0) Экспорт
	
	Результат = Новый Структура("Статус, ИзмененныеОбласти","ОК", Новый Массив);		
	
	Если ОбработанныеОбласти = Неопределено Тогда
	
		ОбработанныеОбласти = Новый Массив;
	
	КонецЕсли; 
	
	ОбработанныеОбласти.Добавить(ИмяЯчейки);
	
	Если УровеньРекурсии > 1000 Тогда
	
		ТекстСообщения = НСтр("ru = 'Превышен уровень рекурсии. Возможно наличие перекрестных ссылок в формулах. Проверьте формулы в ячейках: %1%.'");
		ОбработанныеОбласти = бит_РаботаСКоллекциямиКлиентСервер.УдалитьПовторяющиесяЭлементыМассива(ОбработанныеОбласти);
		
		СтрЯчейки = "";
		Для каждого Имя Из ОбработанныеОбласти Цикл
			
			Обл = ТабДокДанные.Области.Найти(Имя);
			Если ЭтоПрямоугольнаяОбласть(Обл) 
				И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка,"РасшифровкаЯчейкиФормыВвода") 
				И Обл.Расшифровка.Вид = "Значение" Тогда
								
				ПредставлениеЯчейки = ПользовательскоеПредставлениеОбласти(Обл);
			    СтрЯчейки = СтрЯчейки +?(ПустаяСтрока(СтрЯчейки),"",Символы.ПС) + ПредставлениеЯчейки;	
				
			КонецЕсли; 
			
		КонецЦикла; 
		
        Обл = ТабДокДанные.Области.Найти(ИмяЯчейки);
		Если НЕ Обл = Неопределено Тогда
			
			ПредставлениеЯчейки = ПользовательскоеПредставлениеОбласти(Обл);
			
		Иначе	
			
			ПредставлениеЯчейки = ИмяЯчейки;
			
		КонецЕсли; 
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрЯчейки);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Результат.Статус = "Ошибка";
		Возврат Результат;
	
	КонецЕсли; 
	
	УровеньРекурсии = УровеньРекурсии + 1;
	
	Если ЗависимостиЯчеек.Свойство(ИмяЯчейки) Тогда
		
		Для каждого ИмяЯчейкиФормула Из ЗависимостиЯчеек[ИмяЯчейки] Цикл
						
			Обл = ТабДокДанные.Области.Найти(ИмяЯчейкиФормула);
			расш   = Обл.Расшифровка;
			Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(расш,"РасшифровкаЯчейкиФормыВвода") 
				 И ( расш.Вид = "Формула" ИЛИ расш.Вид = "Значение" ) Тогда
			
				ВычислитьФормулу(ТабДокДанные, Обл);
				Если расш.Вид = "Значение" Тогда
				
					Результат.ИзмененныеОбласти.Добавить(Обл);
				
				КонецЕсли; 				
				РезультатВложенный = ВычислитьЗависимыеФормулы(ТабДокДанные, ЗависимостиЯчеек, ИмяЯчейкиФормула, ОбработанныеОбласти, УровеньРекурсии);
				
				Для каждого ТекОбл Из РезультатВложенный.ИзмененныеОбласти Цикл
				
					Результат.ИзмененныеОбласти.Добавить(ТекОбл);
				
				КонецЦикла; 
				
				Если РезультатВложенный.Статус = "Ошибка" Тогда
				
					Результат.Статус = "Ошибка";
					Прервать;
				
				КонецЕсли; 
				
				
			КонецЕсли; 
		
		КонецЦикла;  // По именам зависимых формул
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ВычислитьЗависимыеФормулы()

// Функция выполняет вычисление формулы в дереве.
// 
// Параметры:
//  ТабДокДанные - ТабличныйДокумент
//  Обл - ТабличныйДокумент - Область, для которой производятся вычисления по формулам.
// 
// Возвращаемое значение:
//  Рез - Число.
// 
Функция ВычислитьФормулу(ТабДокДанные, Обл) Экспорт
	
	Рез = 0;
	
	СтрФормула = Обл.Расшифровка.Формула;
	
	Если НЕ ПустаяСтрока(СтрФормула) Тогда
		
		Арг = Новый Структура;
		
		Для каждого ИмяАрг Из Обл.Расшифровка.Аргументы Цикл
			
			ОблАрг = ТабДокДанные.Область(ИмяАрг);
			Если ОблАрг.Расшифровка.Вид = "Значение"  Тогда
				ЗнАрг = ОблАрг.Значение;
			ИначеЕсли ОблАрг.Расшифровка.Вид = "Формула" Тогда
				ЗнАрг = ВычислитьФормулу(ТабДокДанные, ОблАрг);
			Иначе
				ЗнАрг = 0;
			КонецЕсли; 
			
			СтрФормула = СтрЗаменить(СтрФормула, "["+ИмяАрг+"]", Формат(ЗнАрг,"ЧРД=.; ЧН=0; ЧГ="));
			
		КонецЦикла;
		
		Попытка
			Рез = Вычислить(СтрФормула);
		Исключение
			Рез = 0;	 
		КонецПопытки;
		Обл.Значение = Рез;
	КонецЕсли; 
	
	Возврат Рез;
	
КонецФункции // ВычислитьФормулу()

// Функция формирует пользовательское представление области.
// 
// Параметры:
//   Обл - ТабличныйДокумент
// 
// Возвращаемое значение:
//  Представление - Строка.
// 
Функция ПользовательскоеПредставлениеОбласти(Обл) Экспорт
	
	Представление = "R"+Обл.Верх+"C"+Обл.Лево;	
	
	Возврат Представление;
	
КонецФункции // ПользовательскоеПредставлениеОбласти()

// Процедура сбрасывает выделение аргуметов формулы.
// 
// Параметры:
//  ТабДокДанные - ТабличныйДокумент
//  ВыделенныеОбласти - СписокЗначений.
// 
Процедура ОчиститьВыделениеАргументов(ТабДокДанные, ВыделенныеОбласти) Экспорт

	Для каждого Эл Из ВыделенныеОбласти Цикл
		ОблАрг = ТабДокДанные.Области.Найти(Эл.Значение);
		Если ЭтоПрямоугольнаяОбласть(ОблАрг) Тогда
			ОблАрг.Узор = ТипУзораТабличногоДокумента.БезУзора;
			ЛинияВыделения = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1,0);
			#Если НЕ ВебКлиент Тогда
				ОблАрг.Обвести(ЛинияВыделения,ЛинияВыделения,ЛинияВыделения,ЛинияВыделения);
			#КонецЕсли
			ОблАрг.ЦветРамки = WebЦвета.Черный; 
		КонецЕсли;	   
	КонецЦикла; 
	ВыделенныеОбласти.Очистить();
	
КонецПроцедуры
 
#КонецОбласти

#Область Нормы

// Функция выполняет расчет суммы по норме и количеству.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти
//  ИспользоватьНормы - Булево.
// 
Процедура РассчитатьПоНорме(ТекущаяСтрока, ИспользоватьНормы) Экспорт
	
	Если ИспользоватьНормы И НЕ ТекущаяСтрока = Неопределено И НЕ ТекущаяСтрока.Норма = 0 Тогда
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество*ТекущаяСтрока.Норма;
		
	КонецЕсли; 	
	
КонецПроцедуры // РассчитатьПоНорме()

// Функция определяет необходимо ли выполнять заполнение нормы при изменении данного поля.
//
// Параметры:
//  ПараметрНорм		 - ПланВидовХарактеристик.бит_ВидыПроизвольныхПараметров - параметры норм.
//  ИменаПараметра		 - Структура - имена параметров.
//  ИмяПоля				 - Строка - имя.
//  ИспользоватьНормы	 - Булево - использовать.
// 
// Возвращаемое значение:
//  флВыполнять - Булево.
//
Функция ВыполнятьЗаполнениеНормы(ПараметрНорм, ИменаПараметра, ИмяПоля, ИспользоватьНормы) Экспорт
	
	флВыполнять = Ложь;
	
	Если ИспользоватьНормы 
		   И ЗначениеЗаполнено(ПараметрНорм) 
		   И ( ИмяПоля = "Период" ИЛИ ИменаПараметра.БП.Свойство(ИмяПоля)) Тогда
		
		флВыполнять = Истина;	
		
	КонецЕсли; 
	
	Возврат флВыполнять;
	
КонецФункции // ВыполнятьЗаполнениеНормы()

#КонецОбласти

#Область ОбщиеМетодыФормыВводаИАктуализации

// Функция определяет, является ли данная область прямоугольной областью ячеек.
// 
// Параметры:
//  Обл - ТабличныйДокумент
// 
// Возвращаемое значение:
//  флОК - Булево.
// 
Функция ЭтоПрямоугольнаяОбласть(Обл) Экспорт
	
	флОК = ЛОжь;
	Если Обл <> Неопределено 
		И ТипЗнч(Обл) = Тип("ОбластьЯчеекТабличногоДокумента") 
		И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		
		флОК = Истина;
		
	КонецЕсли;
	
	Возврат флОК;
	
КонецФункции // ЭтоПрямоугольнаяОбласть()

// Формирует отбор строк по расшифровке ячейки.
// 
// Параметры:
//   Расшифровка - Структура
// 
// Возвращаемое значение:
//  СтрОтбор - Структура.
// 
Функция СформироватьОтборСтрок(Расшифровка) Экспорт
	
	// Устанавливаем отбор по периоду и комбинации измерений.
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("Период", Расшифровка.Период);
	Для каждого КиЗ Из Расшифровка.Измерения Цикл
		
		СтрОтбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
		
	КонецЦикла; 
	
	Возврат СтрОтбор;
	
КонецФункции // СформироватьОтборСтрок()

// Функция определяет префикс второго, связанного со строкой ресурса.
// 
// Параметры:
//  вхПрефикс - Строка
// 
// Возвращаемое значение:
//  Префикс - Строка.
// 
Функция ПрефиксВторогоРесурса(вхПрефикс) Экспорт

	Если вхПрефикс = "К" Тогда
	
		Префикс = "С";
		
	Иначе
		
		Префикс = "К";
	
	КонецЕсли;

	Возврат Префикс;
	
КонецФункции // ПрефиксВторогоРесурса()

// Функция выводит сообщение о несоответствии статьи оборотов разворачиваемым измерениям.
// 
// Параметры:
//  СтатьяОборотов - СправочникСсылка.бит_СтатьиОборотов.
// 
Процедура ВывестиСообщениеОНесоответствииСтатьи(СтатьяОборотов) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Данные не могут быть введены, т.к. настройка аналитик по статье ""%1%"" не соответствует разворачиваемым измерениям.'");
	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтатьяОборотов);
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры // ВывестиСообщениеОНесоответствииСтатьи()

// Выполняет проверку допустимости внесения полей 
// в строке табличной части в зависимости от статьи оборотов. 
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.
//  НастройкиСтатей - Соответствие
//  Измерения - Структура.
// 
Функция ПроверитьПоляВСтроке(ТекущаяСтрока, НастройкиСтатей, Измерения = Неопределено, ИзмеренияРазворачивать = Неопределено) Экспорт

	флОчищеноКлючевоеПоле = Ложь;
	Если ТекущаяСтрока = Неопределено Тогда
		
		Возврат флОчищеноКлючевоеПоле;
		
	КонецЕсли;

	ТекущаяСтатьяОборотов = ТекущаяСтрока.СтатьяОборотов;
	
	Если ЗначениеЗаполнено(ТекущаяСтатьяОборотов) Тогда
		
		Настройка = НастройкиСтатей[ТекущаяСтатьяОборотов];
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Настройка, "НастройкаСтатьиОборотов") Тогда
			
			Если НЕ Настройка.Учет_Количество Тогда
				
				ТекущаяСтрока.Количество = 0;
				
			КонецЕсли;
			
			Если НЕ Настройка.Учет_Сумма Тогда
				
				ТекущаяСтрока.Сумма = 0;
				
			КонецЕсли; 
			
			Если ТипЗнч(Измерения) = Тип("Структура") Тогда
				
				Исключения = Новый Структура;
				Исключения.Вставить("Сценарий");
				Исключения.Вставить("СтатьяОборотов");
				// Сброс измерений, которые не должны быть установлены для данной статьи.
				Для каждого КлючИЗначение Из Измерения Цикл
					
					ИмяИзмерения     = КлючИЗначение.Ключ;
					
					Если Исключения.Свойство(ИмяИзмерения) Тогда
					
						Продолжить;
					
					КонецЕсли; 
					
					ИмяРеквизитаИмяТипа = "ИмяТипаПоУмолчанию_"+КлючИЗначение.Ключ;
					ИмяРеквизитаУчет = "Учет_"+КлючИЗначение.Ключ;
					
					
					Если Настройка.Свойство(ИмяРеквизитаИмяТипа) 
						 И ТипЗнч(Настройка[ИмяРеквизитаИмяТипа]) = Тип("ОписаниеТипов") 
						 И Настройка[ИмяРеквизитаУчет] Тогда
						 
						 Если ИзмеренияРазворачивать.Найти(ИмяИзмерения) = Неопределено Тогда

						    ТекущаяСтрока[ИмяИзмерения] = Настройка[ИмяРеквизитаИмяТипа].ПривестиЗначение(ТекущаяСтрока[ИмяИзмерения]);
						 
						 КонецЕсли;
					
					КонецЕсли; 
					
					Если ЗначениеЗаполнено(ТекущаяСтрока[ИмяИзмерения]) И НЕ Настройка[ИмяРеквизитаУчет] Тогда
						
						Если НЕ ИзмеренияРазворачивать.Найти(ИмяИзмерения) = Неопределено Тогда
						
							 флОчищеноКлючевоеПоле = Истина;
						
						КонецЕсли; 
						ТекущаяСтрока[ИмяИзмерения] = Неопределено;
						
					КонецЕсли; 
					
				КонецЦикла; // Измерения
				
			КонецЕсли; 
			
		КонецЕсли; // Есть настройка
		
	КонецЕсли; 	// Заполнена статья
	
	Возврат флОчищеноКлючевоеПоле;
	
КонецФункции // ПроверитьПоляВСтроке()

// Заполняет новую строку табличной части БДДС. 
// 
// Параметры:
//  ИдСтроки - Число.
//  Период - Дата.
//  Измерения - Структура.
//  ИзменятьИД - Булево.
// 
Процедура ЗаполнитьНовуюСтрокуБюджета(ДанныеШапки, ТекущаяСтрока, Период, Измерения, НастройкиЗаполненияИзмерений) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока.Период = Период;
	// Заполнение измерений из дерева.
	Для каждого КиЗ Из Измерения Цикл
		ТекущаяСтрока[КиЗ.Ключ] = КиЗ.Значение;
	КонецЦикла;
	
	// Заполнение измерений по-умолчанию.
	Для каждого КиЗ Из НастройкиЗаполненияИзмерений Цикл
		
		Если КиЗ.Ключ = "Сценарий" Тогда
			Продолжить;
		КонецЕсли; 
		
		ТекОписание = КиЗ.Значение;
		Если НЕ ТекОписание.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать") 
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока[ТекОписание.Имя]) Тогда
			   
			ТекущаяСтрока[ТекОписание.Имя] = ДанныеШапки[ТекОписание.Имя];
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.СтатьяОборотов) Тогда
		НастройкиУчетаАналитик = бит_БюджетированиеПовтИспВызовСервера.НастройкиУчетаАналитикСтатьиОборотов(ТекущаяСтрока.СтатьяОборотов);
		Для каждого НастройкаУч Из НастройкиУчетаАналитик Цикл
			Если НастройкаУч.Значение = Ложь Тогда
				ТекущаяСтрока[НастройкаУч.Ключ] = Неопределено;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшийФункционал

// Устарела. Следует использовать бит_Бюджетирование.ВыполнитьРасчеты().
//
Процедура ВыполнитьРасчеты(ТабДокДанные) Экспорт

	// Удалить в 3.1.45.
	
КонецПроцедуры

// Устарела. Не используется. 
//
Процедура ВыполнитьРасчетыПоЗависимостям(ТабДокДанные, ЗависимостиЯчеек) Экспорт

	// Удалить в 3.1.45.

КонецПроцедуры

// Устарела. Следует использовать бит_БюджетированиеКлиент.ПользовательскоеПредставлениеФормулы().
//
Функция ПользовательскоеПредставлениеФормулы(ТабДокДанные, Формула) Экспорт

	// Удалить в 3.1.45.
	Возврат Неопределено;
	
КонецФункции

// Устарела. Следует использовать бит_БюджетированиеКлиент.ВыделитьАргументыФормулы().
// 
Процедура ВыделитьАргументыФормулы(ТабДокДанные, Формула, ВыделенныеОбласти, вхЦветАргументов = Неопределено) Экспорт
	
	// Удалить в 3.1.45.
	
КонецПроцедуры

// Устарела. Следует использовать бит_БюджетированиеКлиент.РавномерныйПрофиль().
//
Процедура РавномерныйПрофиль(ТаблицаПрофиль) Экспорт

	// Удалить в 3.1.45.
	
КонецПроцедуры

// Устарела. Следует использовать бит_БюджетированиеКлиент.ВеделитьОбласть().
//
Процедура ВеделитьОбласть(ДокументРезультат, Области) Экспорт

	// Удалить в 3.1.45.	

КонецПроцедуры

// Устарела. Следует использовать бит_БюджетированиеКлиент.ИмяВторойЯчейки().
// 
Функция ИмяВторойЯчейки(вхИмя) Экспорт
	
	// Удалить в 3.1.45.
	
КонецФункции

// Устарела.
// 
Процедура УстановитьИД(ТекущаяСтрока) Экспорт

	// Удалить в 3.1.45.
	
КонецПроцедуры

// Устарела. Следует использовать бит_БюджетированиеКлиент.ПолучитьФормулуИзПредставления().
//
Функция ПолучитьФормулуИзПредставления(ТабДокДанные, вхПредставлениеФормулы) Экспорт
	
	// Удалить в 3.1.45.
	
КонецФункции

#КонецОбласти 

#КонецОбласти
