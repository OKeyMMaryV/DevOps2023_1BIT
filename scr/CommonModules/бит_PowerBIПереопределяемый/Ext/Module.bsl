
#Область ПрограммныйИнтерфейс

// Возвращает специально подготовленную строку JSON с информацией о банковских счетах.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьБанковскиеСчета(HTTPЗапрос = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ВТБанковскиеСчетаОставить
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			БанковскийСчет В
	|				(ВЫБРАТЬ
	|					БанковскиеСчета.Ссылка
	|				ИЗ
	|					Справочник.БанковскиеСчета КАК БанковскиеСчета)) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БанковскийСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Код КАК Код,
	|	БанковскиеСчета.Наименование КАК Наименование
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБанковскиеСчетаОставить КАК ВТБанковскиеСчетаОставить
	|		ПО БанковскиеСчета.Ссылка = ВТБанковскиеСчетаОставить.БанковскийСчет
	|ГДЕ
	|	НЕ(БанковскиеСчета.ПометкаУдаления
	|				И ВТБанковскиеСчетаОставить.БанковскийСчет ЕСТЬ NULL)";
	
	Реквизиты = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",			"Ref_Key", Истина);
	Поля.Добавить("Код",			"Код");
	Поля.Добавить("Наименование",	"Банковский счет");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией о валютах.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьВалюты(HTTPЗапрос = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТВалютыОставить
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					Валюты.Ссылка
	|				ИЗ
	|					Справочник.Валюты КАК Валюты)) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка,
	|	Валюты.Код КАК Код,
	|	Валюты.Наименование КАК Наименование,
	|	Валюты.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВалютыОставить КАК ВТВалютыОставить
	|		ПО Валюты.Ссылка = ВТВалютыОставить.Валюта
	|ГДЕ
	|	НЕ(Валюты.ПометкаУдаления
	|				И ВТВалютыОставить.Валюта ЕСТЬ NULL)";
	
	Реквизиты = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",			"Ref_Key", Истина);
	Поля.Добавить("Код",			"Код");
	Поля.Добавить("Наименование",	"Валюта");
	Поля.Добавить("Наименование",	"Полное наименование");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос); 
	
КонецФункции
 
// Возвращает специально подготовленную строку JSON с информацией о видах ЦФО.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьВидыЦФО(HTTPЗапрос = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.ЦФО КАК ЦФО
	|ПОМЕСТИТЬ ВТЦФООставить
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			ЦФО В
	|				(ВЫБРАТЬ
	|					Подразделения.Ссылка
	|				ИЗ
	|					Справочник.Подразделения КАК Подразделения)) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЦФО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Подразделения.ВидЦФО КАК ВидЦФО
	|ПОМЕСТИТЬ ВТВидЦФООставить
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦФООставить КАК ВТЦФООставить
	|		ПО Подразделения.Ссылка = ВТЦФООставить.ЦФО
	|ГДЕ
	|	НЕ(Подразделения.ПометкаУдаления
	|				И ВТЦФООставить.ЦФО ЕСТЬ NULL)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦФО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЦФО.Ссылка КАК Ссылка,
	|	ВидыЦФО.Код КАК Код,
	|	ВидыЦФО.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыЦФО КАК ВидыЦФО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидЦФООставить КАК ВТВидЦФООставить
	|		ПО ВидыЦФО.Ссылка = ВТВидЦФООставить.ВидЦФО
	|ГДЕ
	|	НЕ(ВидыЦФО.ПометкаУдаления
	|				И ВТВидЦФООставить.ВидЦФО ЕСТЬ NULL)";
	
	Реквизиты = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",			"Ref_Key", Истина);
	Поля.Добавить("Код",			"Код");
	Поля.Добавить("Наименование",	"Вид ЦФО");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией о договорах контрагентов.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьДоговорыКонтрагентов(HTTPЗапрос = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТДоговорыКонтрагентовОставить
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					ДоговорыКонтрагентов.Ссылка
	|				ИЗ
	|					Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов)) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.Код КАК Код,
	|	ДоговорыКонтрагентов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыКонтрагентовОставить КАК ВТДоговорыКонтрагентовОставить
	|		ПО ДоговорыКонтрагентов.Ссылка = ВТДоговорыКонтрагентовОставить.ДоговорКонтрагента
	|ГДЕ
	|	НЕ(ДоговорыКонтрагентов.ПометкаУдаления
	|				И ВТДоговорыКонтрагентовОставить.ДоговорКонтрагента ЕСТЬ NULL)";
	
	Реквизиты = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",			"Ref_Key", Истина);
	Поля.Добавить("Код",			"Код");
	Поля.Добавить("Наименование",	"Договор контрагента");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией о контрагентах.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьКонтрагентов(HTTPЗапрос = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТКонтрагентыОставить
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			Контрагент В
	|				(ВЫБРАТЬ
	|					Контрагенты.Ссылка
	|				ИЗ
	|					Справочник.Контрагенты КАК Контрагенты)) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Код КАК Код,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКонтрагентыОставить КАК ВТКонтрагентыОставить
	|		ПО Контрагенты.Ссылка = ВТКонтрагентыОставить.Контрагент
	|ГДЕ
	|	НЕ(Контрагенты.ПометкаУдаления
	|				И ВТКонтрагентыОставить.Контрагент ЕСТЬ NULL)";
	
	Реквизиты = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",			"Ref_Key", Истина);
	Поля.Добавить("Код",			"Код");
	Поля.Добавить("Наименование",	"Контрагент");
	Поля.Добавить("Наименование",	"Полное наименование");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией о номенклатурных группах.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьНоменклатурынеГруппы(HTTPЗапрос = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ВТНоменклатурныеГруппыОставить
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			НоменклатурнаяГруппа В
	|				(ВЫБРАТЬ
	|					НоменклатурныеГруппы.Ссылка
	|				ИЗ
	|					Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы)) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка КАК Ссылка,
	|	НоменклатурныеГруппы.Код КАК Код,
	|	НоменклатурныеГруппы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНоменклатурныеГруппыОставить КАК ВТНоменклатурныеГруппыОставить
	|		ПО НоменклатурныеГруппы.Ссылка = ВТНоменклатурныеГруппыОставить.НоменклатурнаяГруппа
	|ГДЕ
	|	НЕ(НоменклатурныеГруппы.ПометкаУдаления
	|				И ВТНоменклатурныеГруппыОставить.НоменклатурнаяГруппа ЕСТЬ NULL)";
	
	Реквизиты = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",			"Ref_Key", Истина);
	Поля.Добавить("Код",			"Код");
	Поля.Добавить("Наименование",	"Номенклатурная группа");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией об оборотах по бюджету.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьОборотыПоБюджетам(HTTPЗапрос = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_НазначениеДополнительныхИзмерений.ИмяИзмерения КАК ИмяИзмерения,
	|	бит_НазначениеДополнительныхИзмерений.Синоним КАК Синоним
	|ИЗ
	|	РегистрСведений.бит_НазначениеДополнительныхИзмерений КАК бит_НазначениеДополнительныхИзмерений";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Поля = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		Поля.Добавить(Выборка.ИмяИзмерения, Выборка.Синоним);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.Период КАК Период,
	|	бит_ОборотыПоБюджетамОбороты.Сценарий КАК Сценарий,
	|	бит_ОборотыПоБюджетамОбороты.ЦФО КАК ЦФО,
	|	бит_ОборотыПоБюджетамОбороты.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_ОборотыПоБюджетамОбороты.Валюта КАК Валюта,
	|	бит_ОборотыПоБюджетамОбороты.Контрагент КАК Контрагент,
	|	бит_ОборотыПоБюджетамОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	бит_ОборотыПоБюджетамОбороты.Проект КАК Проект,
	|	бит_ОборотыПоБюджетамОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	бит_ОборотыПоБюджетамОбороты.БанковскийСчет КАК БанковскийСчет,
	|	бит_ОборотыПоБюджетамОбороты.КоличествоОборот КАК КоличествоОборот,
	|	бит_ОборотыПоБюджетамОбороты.СуммаОборот КАК СуммаОборот,
	|	бит_ОборотыПоБюджетамОбороты.СуммаРеглОборот КАК СуммаРеглОборот,
	|	бит_ОборотыПоБюджетамОбороты.СуммаУпрОборот КАК СуммаУпрОборот,
	|	бит_ОборотыПоБюджетамОбороты.СуммаСценарийОборот КАК СуммаСценарийОборот,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_ОборотыПоБюджетамОбороты.Аналитика_1) КАК Аналитика_1,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_ОборотыПоБюджетамОбороты.Аналитика_2) КАК Аналитика_2,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_ОборотыПоБюджетамОбороты.Аналитика_3) КАК Аналитика_3,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_ОборотыПоБюджетамОбороты.Аналитика_4) КАК Аналитика_4,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_ОборотыПоБюджетамОбороты.Аналитика_5) КАК Аналитика_5,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_ОборотыПоБюджетамОбороты.Аналитика_6) КАК Аналитика_6,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_ОборотыПоБюджетамОбороты.Аналитика_7) КАК Аналитика_7
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(&НачалоПериода, &КонецПериода, День, ) КАК бит_ОборотыПоБюджетамОбороты";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	СтруктураНастроек = бит_PowerBIСлужебный.ПолучитьНастройикPowerBI();
	Если ЗначениеЗаполнено(СтруктураНастроек.ДатаНачала) Тогда
		Запрос.УстановитьПараметр("НачалоПериода", СтруктураНастроек.ДатаНачала);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", Дата(2000, 01, 01));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураНастроек.ДатаОкончания) Тогда
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураНастроек.ДатаОкончания));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", Дата(2036, 12, 31));
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Реквизиты = Запрос.Выполнить();
	
	Поля.Добавить("Период",					"Период");
	Поля.Добавить("Сценарий",				"Сценарий_Key",				Истина);
	Поля.Добавить("ЦФО",					"ЦФО_Key",					Истина);
	Поля.Добавить("СтатьяОборотов",			"СтатьяОборотов_Key",		Истина);
	Поля.Добавить("Валюта",					"Валюта_Key",				Истина);
	Поля.Добавить("Контрагент",				"Контрагент_Key",			Истина);
	Поля.Добавить("ДоговорКонтрагента",		"ДоговорКонтрагента_Key",	Истина);
	Поля.Добавить("Проект",					"Проект_Key",				Истина);
	Поля.Добавить("НоменклатурнаяГруппа",	"НоменклатурнаяГруппа_Key",	Истина);
	Поля.Добавить("БанковскийСчет",			"БанковскийСчет_Key",		Истина);
	Поля.Добавить("КоличествоОборот",		"Количество");
	Поля.Добавить("СуммаОборот",			"Сумма");
	Поля.Добавить("СуммаРеглОборот",		"Сумма регл.");
	Поля.Добавить("СуммаУпрОборот",			"Сумма упр.");
	Поля.Добавить("СуммаСценарийОборот",	"Сумма сценария");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос); 
	
КонецФункции 

// Возвращает специально подготовленную строку JSON с информацией о проектах.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьПроекты(HTTPЗапрос = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.Проект КАК Проект
	|ПОМЕСТИТЬ ВТПроектыОставить
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			Проект В
	|				(ВЫБРАТЬ
	|					Проекты.Ссылка
	|				ИЗ
	|					Справочник.Проекты КАК Проекты)) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проекты.Ссылка КАК Ссылка,
	|	Проекты.Код КАК Код,
	|	Проекты.Наименование КАК Наименование,
	|	Проекты.Кодификатор КАК Кодификатор
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроектыОставить КАК ВТПроектыОставить
	|		ПО Проекты.Ссылка = ВТПроектыОставить.Проект
	|ГДЕ
	|	НЕ(Проекты.ПометкаУдаления
	|				И ВТПроектыОставить.Проект ЕСТЬ NULL)";
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	ПоляДопРеквизитов = УправлениеСвойствами.СвойстваОбъекта(Справочники.Проекты.ПустаяСсылка());
	ДопРеквизиты = УправлениеСвойствами.ЗначенияСвойств(ПакетЗапросов[0].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ДопРеквизиты.Индексы.Добавить("ВладелецСвойств, Свойство");
	
	Реквизиты = ПакетЗапросов[2];
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",			"Ref_Key", Истина);
	Поля.Добавить("Код",			"Код");
	Поля.Добавить("Наименование",	"Проект");
	Поля.Добавить("Кодификатор",	"Кодификатор проекта");
	
	ПоляДопРеквизитов = Неопределено;
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос, ПоляДопРеквизитов, ДопРеквизиты); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией о статьях оборотов.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьСтатьиОборотов(HTTPЗапрос = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_СтатьиОборотов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.СтатьяОборотов КАК СтатьяОборотов
	|ПОМЕСТИТЬ ВТСтатьиОборотовОставить
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			СтатьяОборотов В
	|				(ВЫБРАТЬ
	|					бит_СтатьиОборотов.Ссылка
	|				ИЗ
	|					Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов)) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяОборотов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_СтатьиОборотов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА бит_СтатьиОборотов.Родитель = ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	|			ТОГДА бит_СтатьиОборотов.Ссылка
	|		ИНАЧЕ бит_СтатьиОборотов.Родитель
	|	КОНЕЦ КАК Родитель,
	|	бит_СтатьиОборотов.Код КАК Код,
	|	бит_СтатьиОборотов.Наименование КАК Наименование,
	|	бит_СтатьиОборотов.Кодификатор КАК Кодификатор,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_СтатьиОборотов.РасходДоход) КАК РасходДоход,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_СтатьиОборотов.ВидСтатьи) КАК ВидСтатьи,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_СтатьиОборотов.ТипСтатьи) КАК ТипСтатьи,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(бит_СтатьиОборотов.СтавкаНДС) КАК СтавкаНДС,
	|	бит_СтатьиОборотов.Учет_Количество КАК Учет_Количество,
	|	бит_СтатьиОборотов.Учет_Сумма КАК Учет_Сумма,
	|	бит_СтатьиОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Наименование, """") КАК Единица
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО бит_СтатьиОборотов.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиОборотовОставить КАК ВТСтатьиОборотовОставить
	|		ПО бит_СтатьиОборотов.Ссылка = ВТСтатьиОборотовОставить.СтатьяОборотов
	|ГДЕ
	|	НЕ(бит_СтатьиОборотов.ПометкаУдаления
	|				И ВТСтатьиОборотовОставить.СтатьяОборотов ЕСТЬ NULL)";
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	ПоляДопРеквизитов = УправлениеСвойствами.СвойстваОбъекта(Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	ДопРеквизиты = УправлениеСвойствами.ЗначенияСвойств(ПакетЗапросов[0].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ДопРеквизиты.Индексы.Добавить("ВладелецСвойств, Свойство");
	
	Реквизиты = ПакетЗапросов[2];
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",			"Ref_Key"		, Истина);
	Поля.Добавить("Родитель",		"Parent_Key"	, Истина);
	Поля.Добавить("Код",			"Код");
	Поля.Добавить("Наименование",	"Статья оборотов");
	Поля.Добавить("Кодификатор",	"Кодификатор статьи");
	Поля.Добавить("РасходДоход",	"Направление (Поступление / Расходование)");
	Поля.Добавить("ВидСтатьи",		"Вид статьи");
	Поля.Добавить("ТипСтатьи",		"Тип статьи");
	Поля.Добавить("СтавкаНДС",		"% НДС");
	Поля.Добавить("Учет_Количество","Учет по количеству");
	Поля.Добавить("Учет_Сумма",		"Учет по сумме");
	Поля.Добавить("ЭтоКоэффициент",	"Это коэффициент");
	Поля.Добавить("Единица",		"Единица");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос, ПоляДопРеквизитов, ДопРеквизиты); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией о сценариях бюджетирования.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьСценарииБюджетирования(HTTPЗапрос = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.Сценарий КАК Сценарий
	|ПОМЕСТИТЬ ВТСценарийОставить
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			Сценарий В
	|				(ВЫБРАТЬ
	|					СценарииПланирования.Ссылка
	|				ИЗ
	|					Справочник.СценарииПланирования КАК СценарииПланирования)) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СценарииПланирования.Ссылка КАК Ссылка,
	|	СценарииПланирования.Код КАК Код,
	|	СценарииПланирования.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СценарииПланирования КАК СценарииПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСценарийОставить КАК ВТСценарийОставить
	|		ПО СценарииПланирования.Ссылка = ВТСценарийОставить.Сценарий
	|ГДЕ
	|	НЕ(СценарииПланирования.ПометкаУдаления
	|				И ВТСценарийОставить.Сценарий ЕСТЬ NULL)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",			"Ref_Key", Истина);
	Поля.Добавить("Код",			"Код");
	Поля.Добавить("Наименование",	"Сценарий бюджетирования");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, РезультатЗапроса, HTTPЗапрос); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией о ЦФО.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьЦФО(HTTPЗапрос = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.ЦФО КАК ЦФО
	|ПОМЕСТИТЬ ВТЦФООставить
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			ЦФО В
	|				(ВЫБРАТЬ
	|					Подразделения.Ссылка
	|				ИЗ
	|					Справочник.Подразделения КАК Подразделения)) КАК бит_ОборотыПоБюджетамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЦФО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Ссылка,
	|	Подразделения.Код КАК Код,
	|	Подразделения.Наименование КАК Наименование,
	|	Подразделения.Кодификатор КАК Кодификатор,
	|	Подразделения.ЯвляетсяЮрЛицом КАК ЯвляетсяЮрЛицом,
	|	Подразделения.ПризнакАктуальности КАК ПризнакАктуальности,
	|	Подразделения.ВидЦФО КАК ВидЦФО,
	|	Подразделения.Руководитель КАК Руководитель
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦФООставить КАК ВТЦФООставить
	|		ПО Подразделения.Ссылка = ВТЦФООставить.ЦФО
	|ГДЕ
	|	НЕ(Подразделения.ПометкаУдаления
	|				И ВТЦФООставить.ЦФО ЕСТЬ NULL)";
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	ПоляДопРеквизитов = УправлениеСвойствами.СвойстваОбъекта(Справочники.Подразделения.ПустаяСсылка());
	ДопРеквизиты = УправлениеСвойствами.ЗначенияСвойств(ПакетЗапросов[0].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ДопРеквизиты.Индексы.Добавить("ВладелецСвойств, Свойство");
	
	Реквизиты = ПакетЗапросов[2];
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",				"Ref_Key",					Истина);
	Поля.Добавить("Код",				"Код");
	Поля.Добавить("Наименование",		"ЦФО");
	Поля.Добавить("Кодификатор",		"Кодификатор ЦФО");
	Поля.Добавить("ЯвляетсяЮрЛицом",	"Является юридическим лицом");
	Поля.Добавить("ПризнакАктуальности","Признак актуальности");
	Поля.Добавить("ВидЦФО",				"ВидЦФО_Key",				Истина);
	Поля.Добавить("Руководитель",		"Руководитель_Key",			Истина);
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос, ПоляДопРеквизитов, ДопРеквизиты); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией о движения по кассе, расчетным и валютным счетам.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьОстаткиДС(HTTPЗапрос = Неопределено) Экспорт
	
	СчетаРасчетовСПодотчетнымиЛицами = Новый Массив();
	СчетаРасчетовСПодотчетнымиЛицами.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	СчетаРасчетовСПодотчетнымиЛицами.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаРасчетовСПодотчетнымиЛицами.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("ДатаОстатков", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СчетаРасчетовСПодотчетнымиЛицами", СчетаРасчетовСПодотчетнымиЛицами);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ХозрасчетныйОстатки.Счет) КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ХозрасчетныйОстатки.Субконто1) КАК БанковскийСчет,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегламентированногоУчета)) КАК Валюта,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаРасчетовСПодотчетнымиЛицами), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета), ) КАК ХозрасчетныйОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Счет",					"Счет");
	Поля.Добавить("Субконто1",				"БанковскийСчет_Key", Истина);
	Поля.Добавить("БанковскийСчет",			"Банковский счет");
	Поля.Добавить("Валюта",					"Валюта");
	Поля.Добавить("СуммаОстаток",			"Остаток ДС");
	Поля.Добавить("ВалютнаяСуммаОстаток",	"Остаток ДС вал.");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, РезультатЗапроса, HTTPЗапрос); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией о дебиторской и кредиторской задолженности.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьЗадолженностьДТ(HTTPЗапрос = Неопределено) Экспорт 
	
	СтруктураНастроек = бит_PowerBIСлужебный.ПолучитьНастройикPowerBI();
	Если ЗначениеЗаполнено(СтруктураНастроек.ДатаОкончания) Тогда
		Период = КонецДня(СтруктураНастроек.ДатаОкончания);
	Иначе
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Отчеты.ЗадолженностьПокупателейПоСрокамДолга.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	НастройкиКомпоновкиДТ = ПолучитьОбщийМакет("бит_PowerBIНастройкиКомпоновкиДТ");
	
	НовыеНастройки = ПолучитьСтрокуИзДвоичныхДанных(НастройкиКомпоновкиДТ, КодировкаТекста.UTF8);
	НастройкаКомпоновки = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеНастройки);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	ПериодОтчета = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня); 
	
	ПараметрыОтчета = Отчеты.ЗадолженностьПокупателейПоСрокамДолга.ПустыеПараметрыКомпоновкиОтчета();
	ПараметрыОтчета.Вставить("Период", Период);
	
	// Интервалы.
	Интервалы = Новый ТаблицаЗначений();
	Интервалы.Колонки.Добавить("Значение",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	Интервалы.Колонки.Добавить("Представление",	ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ПараметрыОтчета.Вставить("ДополнительныеПоля",	Новый ТаблицаЗначений());
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 7;
	НоваяСтрока.Представление = "До 7 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 15;
	НоваяСтрока.Представление = "От 8 до 15 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 30;
	НоваяСтрока.Представление = "От 16 до 30 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 60;
	НоваяСтрока.Представление = "От 31 до 60 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 90;
	НоваяСтрока.Представление = "От 61 до 90 дней";
	
	ПараметрыОтчета.Вставить("Интервалы", Интервалы);
	
	СчетаУчетаРасчетов = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПокупателей();
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаСДокументомРасчетов", СчетаУчетаРасчетов.СчетаСДокументомРасчетов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаБезДокументаРасчетов", СчетаУчетаРасчетов.СчетаБезДокументаРасчетов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыДоговоров", БухгалтерскиеОтчеты.ВидыДоговоровПокупателей());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(ПараметрыОтчета.Период) + 1);
	
	КоличествоИнтервалов = Интервалы.Количество();
	
	// Доработка схемы под заданные интервалы
	СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНабор.Запрос = Отчеты.ЗадолженностьПокупателейПоСрокамДолга.ПолучитьТекстЗапроса(КоличествоИнтервалов);
	Отчеты.ЗадолженностьПокупателейПоСрокамДолга.УстановитьПараметры(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
	Отчеты.ЗадолженностьПокупателейПоСрокамДолга.ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ВнешниеНаборыДанных = Отчеты.ЗадолженностьПокупателейПоСрокамДолга.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновкиДанных);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных = Неопределено Тогда
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,, Истина);
	Иначе
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных,, Истина);
	КонецЕсли;	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаДТ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаДТ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ТаблицаДТ.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаДТ.Добавить();	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДТ", ТаблицаДТ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаДТ.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаДТ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(ТаблицаДТ.ОстатокДолга, 0) КАК ОстатокДолга,
	|	ЕСТЬNULL(ТаблицаДТ.ПросроченнаяЗадолженность, 0) КАК ПросроченнаяЗадолженность,
	|	ЕСТЬNULL(ТаблицаДТ.ОстатокПериода1, 0) КАК ОстатокПериода1,
	|	ЕСТЬNULL(ТаблицаДТ.ОстатокПериода2, 0) КАК ОстатокПериода2,
	|	ЕСТЬNULL(ТаблицаДТ.ОстатокПериода3, 0) КАК ОстатокПериода3,
	|	ЕСТЬNULL(ТаблицаДТ.ОстатокПериода4, 0) КАК ОстатокПериода4,
	|	ЕСТЬNULL(ТаблицаДТ.ОстатокПериода5, 0) КАК ОстатокПериода5,
	|	ЕСТЬNULL(ТаблицаДТ.ОстатокПериода6, 0) КАК ОстатокПериода6
	|ПОМЕСТИТЬ ВТТаблицаДТ
	|ИЗ
	|	&ТаблицаДТ КАК ТаблицаДТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаДТ.Контрагент КАК Контрагент_Key,
	|	Контрагенты.Наименование КАК Контрагент,
	|	ВТТаблицаДТ.Организация КАК Организация_Key,
	|	Организации.Наименование КАК Организация,
	|	ВТТаблицаДТ.ОстатокДолга КАК ОстатокДолга,
	|	ВТТаблицаДТ.ПросроченнаяЗадолженность КАК ПросроченнаяЗадолженность,
	|	ВТТаблицаДТ.ОстатокПериода1 КАК ОстатокПериода1,
	|	ВТТаблицаДТ.ОстатокПериода2 КАК ОстатокПериода2,
	|	ВТТаблицаДТ.ОстатокПериода3 КАК ОстатокПериода3,
	|	ВТТаблицаДТ.ОстатокПериода4 КАК ОстатокПериода4,
	|	ВТТаблицаДТ.ОстатокПериода5 КАК ОстатокПериода5,
	|	ВТТаблицаДТ.ОстатокПериода6 КАК ОстатокПериода6
	|ИЗ
	|	ВТТаблицаДТ КАК ВТТаблицаДТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТТаблицаДТ.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВТТаблицаДТ.Организация = Организации.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Контрагент_Key",				"Контрагент_Key",	Истина);
	Поля.Добавить("Контрагент",					"Контрагент");
	Поля.Добавить("Организация_Key",			"Организация_Key",	Истина);
	Поля.Добавить("Организация",				"Организация");
	Поля.Добавить("ОстатокДолга",				"Остаток долга");
	Поля.Добавить("ПросроченнаяЗадолженность",	"Просроченная задолженность");
	Поля.Добавить("ОстатокПериода1",			"До 7 дней");
	Поля.Добавить("ОстатокПериода2",			"От 8 до 15 дней");
	Поля.Добавить("ОстатокПериода3",			"От 16 до 30 дней");
	Поля.Добавить("ОстатокПериода4",			"От 31 до 60 дней");
	Поля.Добавить("ОстатокПериода5",			"От 61 до 90 дней");
	Поля.Добавить("ОстатокПериода6",			"Свыше 90 дней");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, РезультатЗапроса, HTTPЗапрос);
	
КонецФункции 

// Возвращает специально подготовленную строку JSON с информацией о дебиторской и кредиторской задолженности.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьЗадолженностьКТ(HTTPЗапрос = Неопределено) Экспорт 
	
	СтруктураНастроек = бит_PowerBIСлужебный.ПолучитьНастройикPowerBI();
	Если ЗначениеЗаполнено(СтруктураНастроек.ДатаОкончания) Тогда
		Период = КонецДня(СтруктураНастроек.ДатаОкончания);
	Иначе
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	НастройкиКомпоновкиКТ = ПолучитьОбщийМакет("бит_PowerBIНастройкиКомпоновкиКТ");
	
	НовыеНастройки = ПолучитьСтрокуИзДвоичныхДанных(НастройкиКомпоновкиКТ, КодировкаТекста.UTF8);
	НастройкаКомпоновки = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеНастройки);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	ПараметрыОтчета = Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.ПустыеПараметрыКомпоновкиОтчета();
	ПараметрыОтчета.Вставить("Период", Период);
	
	// Интервалы.
	Интервалы = Новый ТаблицаЗначений();
	Интервалы.Колонки.Добавить("Значение",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	Интервалы.Колонки.Добавить("Представление",	ОбщегоНазначения.ОписаниеТипаСтрока(20));
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 7;
	НоваяСтрока.Представление = "До 7 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 15;
	НоваяСтрока.Представление = "От 8 до 15 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 30;
	НоваяСтрока.Представление = "От 16 до 30 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 60;
	НоваяСтрока.Представление = "От 31 до 60 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 90;
	НоваяСтрока.Представление = "От 61 до 90 дней";
	
	ПараметрыОтчета.Вставить("Интервалы", Интервалы);
	
	СчетаУчетаРасчетов = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПоставщиков();
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаСДокументомРасчетов", СчетаУчетаРасчетов.СчетаСДокументомРасчетов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаБезДокументаРасчетов", СчетаУчетаРасчетов.СчетаБезДокументаРасчетов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыДоговоров", БухгалтерскиеОтчеты.ВидыДоговоровПоставщиков());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(ПараметрыОтчета.Период) + 1);
	
	КоличествоИнтервалов = Интервалы.Количество();
	
	// Доработка схемы под заданные интервалы
	СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНабор.Запрос = Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.ПолучитьТекстЗапроса(КоличествоИнтервалов);
	Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.УстановитьПараметры(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
	Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ВнешниеНаборыДанных = Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновкиДанных);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных = Неопределено Тогда
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,, Истина);
	Иначе
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных,, Истина);
	КонецЕсли;	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаКТ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаКТ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ТаблицаКТ.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаКТ.Добавить();	
	КонецЕсли;
	 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКТ", ТаблицаКТ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаКТ.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаКТ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(ТаблицаКТ.ОстатокДолга, 0) КАК ОстатокДолга,
	|	ЕСТЬNULL(ТаблицаКТ.ПросроченнаяЗадолженность, 0) КАК ПросроченнаяЗадолженность,
	|	ЕСТЬNULL(ТаблицаКТ.ОстатокПериода1, 0) КАК ОстатокПериода1,
	|	ЕСТЬNULL(ТаблицаКТ.ОстатокПериода2, 0) КАК ОстатокПериода2,
	|	ЕСТЬNULL(ТаблицаКТ.ОстатокПериода3, 0) КАК ОстатокПериода3,
	|	ЕСТЬNULL(ТаблицаКТ.ОстатокПериода4, 0) КАК ОстатокПериода4,
	|	ЕСТЬNULL(ТаблицаКТ.ОстатокПериода5, 0) КАК ОстатокПериода5,
	|	ЕСТЬNULL(ТаблицаКТ.ОстатокПериода6, 0) КАК ОстатокПериода6
	|ПОМЕСТИТЬ ВТТаблицаКТ
	|ИЗ
	|	&ТаблицаКТ КАК ТаблицаКТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаКТ.Контрагент КАК Контрагент_Key,
	|	Контрагенты.Наименование КАК Контрагент,
	|	ВТТаблицаКТ.Организация КАК Организация_Key,
	|	Организации.Наименование КАК Организация,
	|	ВТТаблицаКТ.ОстатокДолга КАК ОстатокДолга,
	|	ВТТаблицаКТ.ПросроченнаяЗадолженность КАК ПросроченнаяЗадолженность,
	|	ВТТаблицаКТ.ОстатокПериода1 КАК ОстатокПериода1,
	|	ВТТаблицаКТ.ОстатокПериода2 КАК ОстатокПериода2,
	|	ВТТаблицаКТ.ОстатокПериода3 КАК ОстатокПериода3,
	|	ВТТаблицаКТ.ОстатокПериода4 КАК ОстатокПериода4,
	|	ВТТаблицаКТ.ОстатокПериода5 КАК ОстатокПериода5,
	|	ВТТаблицаКТ.ОстатокПериода6 КАК ОстатокПериода6
	|ИЗ
	|	ВТТаблицаКТ КАК ВТТаблицаКТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТТаблицаКТ.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВТТаблицаКТ.Организация = Организации.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Контрагент_Key",				"Контрагент_Key",	Истина);
	Поля.Добавить("Контрагент",					"Контрагент");
	Поля.Добавить("Организация_Key",			"Организация_Key",	Истина);
	Поля.Добавить("Организация",				"Организация");
	Поля.Добавить("ОстатокДолга",				"Остаток долга");
	Поля.Добавить("ПросроченнаяЗадолженность",	"Просроченная задолженность");
	Поля.Добавить("ОстатокПериода1",			"До 7 дней");
	Поля.Добавить("ОстатокПериода2",			"От 8 до 15 дней");
	Поля.Добавить("ОстатокПериода3",			"От 16 до 30 дней");
	Поля.Добавить("ОстатокПериода4",			"От 31 до 60 дней");
	Поля.Добавить("ОстатокПериода5",			"От 61 до 90 дней");
	Поля.Добавить("ОстатокПериода6",			"Свыше 90 дней");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, РезультатЗапроса, HTTPЗапрос);
	
КонецФункции 

// Возвращает специально подготовленную строку JSON с информацией об организациях.
//
// Параметры:
//  HTTPЗапрос	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON,
//  Неопределено - Если отсутствует лицензия для Power BI.
//
Функция ПолучитьОрганизации(HTTPЗапрос = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Код КАК Код,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Реквизиты = Запрос.Выполнить();
	
	Поля = Новый СписокЗначений();
	Поля.Добавить("Ссылка",			"Ref_Key", Истина);
	Поля.Добавить("Код",			"Код");
	Поля.Добавить("Наименование",	"Организация");
	
	Возврат бит_PowerBIСлужебный.ПолучитьСтрокуJSON(Поля, Реквизиты, HTTPЗапрос); 
	
КонецФункции

// Возвращает специально подготовленную строку JSON с информацией о валютах учета (регламентированного/управленческого).
//
// Параметры:
//  HTTPЗапро	 - HTTPЗапрос	 - Содержит параметры запроса, в случае вызова из метода HTTP-сервиса бит_PowerBIAPI.
// 
// Возвращаемое значение:
//  Строка - Строка JSON.
//
Функция ПолучитьВалютыУчета(HTTPЗапро = Неопределено) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ", Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("Учет");
	ЗаписьJSON.ЗаписатьЗначение("Регл.");
	ЗаписьJSON.ЗаписатьИмяСвойства("Валюта");
	ЗаписьJSON.ЗаписатьЗначение(Строка(ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("Учет");
	ЗаписьJSON.ЗаписатьЗначение("Упр.");
	ЗаписьJSON.ЗаписатьИмяСвойства("Валюта");
	ЗаписьJSON.ЗаписатьЗначение(Строка(Константы.бит_ВалютаУправленческогоУчета.Получить()));
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	СтрJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрJSON;
	
КонецФункции

#КонецОбласти
