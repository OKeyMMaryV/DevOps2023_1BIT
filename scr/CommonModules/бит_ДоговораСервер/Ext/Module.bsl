
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыПоЗатратам

// Функция формирует таблицу с остатками по заявке.
// 
// Параметры:
//  Заявка  - ДокументСсылка.бит_ЗаявкаНаЗатраты - заявка.
//  РасходнаяПозиция  - ДокументСсылка.бит_РасходнаяПозиция - расходная позиция.
// 
// Возвращаемое значение:
//   ТаблицаОстатков   - ТаблицаЗначений.
// 
Функция ПолучитьОстаткиПоЗаявке(Заявка,РасходнаяПозиция) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_РасходнаяПозиция.ДокументОснование,
	|	СУММА(бит_РасходнаяПозиция.Сумма) КАК Сумма
	|ПОМЕСТИТЬ СуммыРП
	|ИЗ
	|	Документ.бит_РасходнаяПозиция КАК бит_РасходнаяПозиция
	|ГДЕ
	|	бит_РасходнаяПозиция.ДокументОснование = &Заявка
	|	И бит_РасходнаяПозиция.Ссылка <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_РасходнаяПозиция.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ЗаявкаНаЗатраты.Ссылка,
	|	бит_ЗаявкаНаЗатраты.ЦФО,
	|	бит_ЗаявкаНаЗатраты.СтатьяОборотов,
	|	бит_ЗаявкаНаЗатраты.Проект,
	|	бит_ЗаявкаНаЗатраты.НоменклатурнаяГруппа,
	|	бит_ЗаявкаНаЗатраты.ДоговорКонтрагента,
	|	бит_ЗаявкаНаЗатраты.Сумма КАК СуммаЗаявки,
	|	ЕСТЬNULL(СуммыРП.Сумма, 0) КАК СуммаРП,
	|	ЕСТЬNULL(бит_ЗаявкаНаЗатраты.Сумма, 0) - ЕСТЬNULL(СуммыРП.Сумма, 0) КАК Сумма,
	|	бит_ЗаявкаНаЗатраты.СтавкаНДС
	|ИЗ
	|	Документ.бит_ЗаявкаНаЗатраты КАК бит_ЗаявкаНаЗатраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыРП КАК СуммыРП
	|		ПО бит_ЗаявкаНаЗатраты.Ссылка = СуммыРП.ДокументОснование
	|ГДЕ
	|	бит_ЗаявкаНаЗатраты.Ссылка = &Заявка
	|	И ЕСТЬNULL(бит_ЗаявкаНаЗатраты.Сумма, 0) - ЕСТЬNULL(СуммыРП.Сумма, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СуммыРП";
	
	Запрос.УстановитьПараметр("Заявка",Заявка);
	Запрос.УстановитьПараметр("Ссылка",РасходнаяПозиция);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();

    Возврат ТаблицаОстатков;
	
КонецФункции // ПолучитьОстаткиПоЗаявке()

// Функция получает плановую и фактическую сумму затрат по заявке.
// 
// Параметры:
//  Заявка			  - ДокументСсылка.бит_ЗаявкаНаЗатраты, Массив.
//  РасходныйДокумент - Расходный документ ссылка. По умолчанию Неопределено.
// 
// Возвращаемое значение:
//   РезСтруктура - 1. Структура 	- Заявка - ДокументСсылка.бит_ЗаявкаНаЗатраты
//                  2. Соответствие - Заявка - Массив.
// 
Функция ПолучитьЗатратыПоЗаявке(Заявка, РасходныйДокумент = Неопределено) Экспорт

	УказанМассивЗаявок = ?(ТипЗнч(Заявка) = Тип("Массив"), Истина, Ложь);
	
	Если УказанМассивЗаявок Тогда
		МассивЗаявок = Заявка;
	Иначе
		
		МассивЗаявок = Новый Массив;
		МассивЗаявок.Добавить(Заявка);
		
	КонецЕсли;
	
	// Сформируем текст запроса по получению оплаты.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	План.Заявка,
	|	ЕСТЬNULL(План.СуммаКЗатратам, 0) КАК СуммаДокументаКЗатратам,
	|	ЕСТЬNULL(Затраты.СуммаЗатраты, 0) КАК СуммаДокументаЗатраты,
	|	ЕСТЬNULL(Закрытие.СуммаЗакрыта, 0) КАК СуммаДокументаЗакрыта,
	|	ЕСТЬNULL(План.СуммаКЗатратам, 0) - ЕСТЬNULL(Затраты.СуммаЗатраты, 0) - ЕСТЬNULL(Закрытие.СуммаЗакрыта, 0) КАК СуммаДокументаРазность,
	|	ЕСТЬNULL(План.СуммаВзаиморасчетыКЗатратам, 0) КАК СуммаВзаиморасчетыКЗатратам,
	|	ЕСТЬNULL(Затраты.СуммаВзаиморасчетыЗатраты, 0) КАК СуммаВзаиморасчетыЗатраты,
	|	ЕСТЬNULL(Закрытие.СуммаВзаиморасчетыЗакрыта, 0) КАК СуммаВзаиморасчетыЗакрыта,
	|	ЕСТЬNULL(План.СуммаВзаиморасчетыКЗатратам, 0) - ЕСТЬNULL(Затраты.СуммаВзаиморасчетыЗатраты, 0) - ЕСТЬNULL(Закрытие.СуммаВзаиморасчетыЗакрыта, 0) КАК СуммаВзаиморасчетыРазность
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Заявка КАК Заявка,
	|		МАКСИМУМ(ВложенныйЗапрос.СуммаКЗатратам) КАК СуммаКЗатратам,
	|		МАКСИМУМ(ВложенныйЗапрос.СуммаВзаиморасчетыКЗатратам) КАК СуммаВзаиморасчетыКЗатратам
	|	ИЗ
	|		(ВЫБРАТЬ
	|			бит_ПланируемыеЗатратыПозиции.ДокументПланирования.ДокументОснование КАК Заявка,
	|			бит_ПланируемыеЗатратыПозиции.СуммаПриход КАК СуммаКЗатратам,
	|			бит_ПланируемыеЗатратыПозиции.СуммаВзаиморасчетыПриход КАК СуммаВзаиморасчетыКЗатратам
	|		ИЗ
	|			РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(
	|					,
	|					,
	|					,
	|					ДокументПланирования В
	|						(ВЫБРАТЬ
	|							бит_РасходнаяПозиция.Ссылка
	|						ИЗ
	|							Документ.бит_РасходнаяПозиция КАК бит_РасходнаяПозиция
	|						ГДЕ
	|							бит_РасходнаяПозиция.ДокументОснование В (&МассивЗаявок))) КАК бит_ПланируемыеЗатратыПозиции
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			бит_ПланируемыеЗатратыОбороты.ДокументПланирования,
	|			бит_ПланируемыеЗатратыОбороты.СуммаПриход,
	|			бит_ПланируемыеЗатратыОбороты.СуммаВзаиморасчетыПриход
	|		ИЗ
	|			РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(, , , ДокументПланирования В (&МассивЗаявок)) КАК бит_ПланируемыеЗатратыОбороты) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Заявка) КАК План
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бит_ПланируемыеЗатратыОбороты.ДокументПланирования.ДокументОснование КАК Заявка,
	|			СУММА(бит_ПланируемыеЗатратыОбороты.СуммаРасход) КАК СуммаЗатраты,
	|			СУММА(бит_ПланируемыеЗатратыОбороты.СуммаВзаиморасчетыРасход) КАК СуммаВзаиморасчетыЗатраты
	|		ИЗ
	|			РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(
	|					,
	|					,
	|					Регистратор,
	|					ДокументПланирования В
	|						(ВЫБРАТЬ
	|							бит_РасходнаяПозиция.Ссылка
	|						ИЗ
	|							Документ.бит_РасходнаяПозиция КАК бит_РасходнаяПозиция
	|						ГДЕ
	|							бит_РасходнаяПозиция.ДокументОснование В (&МассивЗаявок))) КАК бит_ПланируемыеЗатратыОбороты
	|		ГДЕ
	|			(бит_ПланируемыеЗатратыОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
	|					ИЛИ бит_ПланируемыеЗатратыОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|					ИЛИ бит_ПланируемыеЗатратыОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			бит_ПланируемыеЗатратыОбороты.ДокументПланирования.ДокументОснование) КАК Затраты
	|		ПО План.Заявка = Затраты.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бит_ПланируемыеЗатратыОбороты.ДокументПланирования.ДокументОснование КАК Заявка,
	|			СУММА(бит_ПланируемыеЗатратыОбороты.СуммаРасход) КАК СуммаЗакрыта,
	|			СУММА(бит_ПланируемыеЗатратыОбороты.СуммаВзаиморасчетыРасход) КАК СуммаВзаиморасчетыЗакрыта
	|		ИЗ
	|			РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(
	|					,
	|					,
	|					Регистратор,
	|					ДокументПланирования В
	|						(ВЫБРАТЬ
	|							бит_РасходнаяПозиция.Ссылка
	|						ИЗ
	|							Документ.бит_РасходнаяПозиция КАК бит_РасходнаяПозиция
	|						ГДЕ
	|							бит_РасходнаяПозиция.ДокументОснование В (&МассивЗаявок))) КАК бит_ПланируемыеЗатратыОбороты
	|		ГДЕ
	|			бит_ПланируемыеЗатратыОбороты.Регистратор ССЫЛКА Документ.бит_ЗакрытиеЗаявок
	|		
	|		СГРУППИРОВАТЬ ПО
	|			бит_ПланируемыеЗатратыОбороты.ДокументПланирования.ДокументОснование) КАК Закрытие
	|		ПО План.Заявка = Закрытие.Заявка";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	
	Запрос.Текст 	 = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	РезСтруктураШаблон = Новый Структура;
	РезСтруктураШаблон.Вставить("СуммаПлан"				, 0);
	РезСтруктураШаблон.Вставить("СуммаЗатраты"			, 0);
	РезСтруктураШаблон.Вставить("СуммаЗакрыта"			, 0);
	РезСтруктураШаблон.Вставить("Разность"				, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаПлан"	, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаЗатраты"	, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаЗакрыта"	, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаРазность", 0);
	
	СоотОплатыПоЗаявкам = Новый Соответствие;
	
	Если РезультатЗапроса.Пустой() Тогда
		РезСтруктура = РезСтруктураШаблон;
	Иначе
		
		ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл
			
			РезСтруктура = Новый Структура;
			
			РезСтруктура.Вставить("СуммаПлан"   , Окр(ВыборкаИзЗапроса.СуммаДокументаКЗатратам, 2));
			РезСтруктура.Вставить("СуммаЗатраты", Окр(ВыборкаИзЗапроса.СуммаДокументаЗатраты , 2));
			РезСтруктура.Вставить("СуммаЗакрыта", Окр(ВыборкаИзЗапроса.СуммаДокументаЗакрыта, 2));
			
			РазностьТекСумм = РезСтруктура.СуммаПлан - РезСтруктура.СуммаЗатраты - РезСтруктура.СуммаЗакрыта;
			РезСтруктура.Вставить("Разность"    , РазностьТекСумм);
			
			РезСтруктура.Вставить("СуммаДокументаПлан"    , Окр(ВыборкаИзЗапроса.СуммаДокументаКЗатратам, 2));
			РезСтруктура.Вставить("СуммаДокументаЗатраты" , Окр(ВыборкаИзЗапроса.СуммаДокументаЗатраты , 2));
			РезСтруктура.Вставить("СуммаДокументаЗакрыта" , Окр(ВыборкаИзЗапроса.СуммаДокументаЗакрыта, 2));
			
			РазностьТекСумм = РезСтруктура.СуммаДокументаПлан - РезСтруктура.СуммаДокументаЗатраты - РезСтруктура.СуммаДокументаЗакрыта;
			РезСтруктура.Вставить("СуммаДокументаРазность", РазностьТекСумм);
			
			Если УказанМассивЗаявок Тогда
				СоотОплатыПоЗаявкам.Вставить(ВыборкаИзЗапроса.Заявка, РезСтруктура);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Если РезультатЗапроса.Пустой() Тогда
	
	Если УказанМассивЗаявок Тогда
		ЗатратыПоЗаявке = СоотОплатыПоЗаявкам;
	Иначе
		ЗатратыПоЗаявке = РезСтруктура;
	КонецЕсли;
	
	Возврат ЗатратыПоЗаявке;
	
КонецФункции // ПолучитьЗатратыПоЗаявке()

// Функция получает плановую и фактическую сумму затрат по расходной позиции.
// 
// Параметры:
//  РасходнаяПозиция  - ДокументСсылка.бит_РасходнаяПозиция, Массив.
//  РасходныйДокумент - Расходный документ ссылка. По умолчанию Неопределено.
// 
// Возвращаемое значение:
//   РезСтруктура - 1. Структура 	- РасходнаяПозиция - ДокументСсылка.бит_РасходнаяПозиция
//                  2. Соответствие - Заявка - Массив.
// 
Функция ПолучитьЗатратыПоРасходнойПозиции(РасходнаяПозиция, РасходныйДокумент = Неопределено) Экспорт

	УказанМассивПозиций = ?(ТипЗнч(РасходнаяПозиция) = Тип("Массив"), Истина, Ложь);
	
	Если УказанМассивПозиций Тогда
		МассивПозиций = РасходнаяПозиция;
	Иначе
		
		МассивПозиций = Новый Массив;
		МассивПозиций.Добавить(РасходнаяПозиция);
		
	КонецЕсли;
	
	// Сформируем текст запроса по получению оплаты.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	План.Позиция,
	|	ЕСТЬNULL(План.СуммаКЗатратам, 0) КАК СуммаДокументаКЗатратам,
	|	ЕСТЬNULL(Затраты.СуммаЗатраты, 0) КАК СуммаДокументаЗатраты,
	|	ЕСТЬNULL(Закрытие.СуммаЗакрыта, 0) КАК СуммаДокументаЗакрыта,
	|	ЕСТЬNULL(План.СуммаКЗатратам, 0) - ЕСТЬNULL(Затраты.СуммаЗатраты, 0) - ЕСТЬNULL(Закрытие.СуммаЗакрыта, 0) КАК СуммаДокументаРазность,
	|	ЕСТЬNULL(План.СуммаВзаиморасчетыКЗатратам, 0) КАК СуммаВзаиморасчетыКЗатратам,
	|	ЕСТЬNULL(Затраты.СуммаВзаиморасчетыЗатраты, 0) КАК СуммаВзаиморасчетыЗатраты,
	|	ЕСТЬNULL(Закрытие.СуммаВзаиморасчетыЗакрыта, 0) КАК СуммаВзаиморасчетыЗакрыта,
	|	ЕСТЬNULL(План.СуммаВзаиморасчетыКЗатратам, 0) - ЕСТЬNULL(Затраты.СуммаВзаиморасчетыЗатраты, 0) - ЕСТЬNULL(Закрытие.СуммаВзаиморасчетыЗакрыта, 0) КАК СуммаВзаиморасчетыРазность
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Позиция КАК Позиция,
	|		МАКСИМУМ(ВложенныйЗапрос.СуммаКЗатратам) КАК СуммаКЗатратам,
	|		МАКСИМУМ(ВложенныйЗапрос.СуммаВзаиморасчетыКЗатратам) КАК СуммаВзаиморасчетыКЗатратам
	|	ИЗ
	|		(ВЫБРАТЬ
	|			бит_ПланируемыеЗатратыПозиции.ДокументПланирования КАК Позиция,
	|			бит_ПланируемыеЗатратыПозиции.СуммаПриход КАК СуммаКЗатратам,
	|			бит_ПланируемыеЗатратыПозиции.СуммаВзаиморасчетыПриход КАК СуммаВзаиморасчетыКЗатратам
	|		ИЗ
	|			РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(
	|					,
	|					,
	|					,
	|					ДокументПланирования В (&МассивПозиций)) КАК бит_ПланируемыеЗатратыПозиции) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Позиция) КАК План
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бит_ПланируемыеЗатратыОбороты.ДокументПланирования КАК Позиция,
	|			СУММА(бит_ПланируемыеЗатратыОбороты.СуммаРасход) КАК СуммаЗатраты,
	|			СУММА(бит_ПланируемыеЗатратыОбороты.СуммаВзаиморасчетыРасход) КАК СуммаВзаиморасчетыЗатраты
	|		ИЗ
	|			РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(
	|					,
	|					,
	|					Регистратор,
	|					ДокументПланирования В (&МассивПозиций)) КАК бит_ПланируемыеЗатратыОбороты
	|		ГДЕ
	|			(бит_ПланируемыеЗатратыОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
	|					ИЛИ бит_ПланируемыеЗатратыОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|					ИЛИ бит_ПланируемыеЗатратыОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			бит_ПланируемыеЗатратыОбороты.ДокументПланирования) КАК Затраты
	|		ПО План.Позиция = Затраты.Позиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бит_ПланируемыеЗатратыОбороты.ДокументПланирования КАК Позиция,
	|			СУММА(бит_ПланируемыеЗатратыОбороты.СуммаРасход) КАК СуммаЗакрыта,
	|			СУММА(бит_ПланируемыеЗатратыОбороты.СуммаВзаиморасчетыРасход) КАК СуммаВзаиморасчетыЗакрыта
	|		ИЗ
	|			РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(
	|					,
	|					,
	|					Регистратор,
	|					ДокументПланирования В (&МассивПозиций)) КАК бит_ПланируемыеЗатратыОбороты
	|		ГДЕ
	|			бит_ПланируемыеЗатратыОбороты.Регистратор ССЫЛКА Документ.бит_ЗакрытиеЗаявок
	|		
	|		СГРУППИРОВАТЬ ПО
	|			бит_ПланируемыеЗатратыОбороты.ДокументПланирования) КАК Закрытие
	|		ПО План.Позиция = Закрытие.Позиция";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПозиций", МассивПозиций);
	
	Запрос.Текст 	 = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	РезСтруктураШаблон = Новый Структура;
	РезСтруктураШаблон.Вставить("СуммаПлан"				, 0);
	РезСтруктураШаблон.Вставить("СуммаЗатраты"			, 0);
	РезСтруктураШаблон.Вставить("СуммаЗакрыта"			, 0);
	РезСтруктураШаблон.Вставить("Разность"				, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаПлан"	, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаЗатраты"	, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаЗакрыта"	, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаРазность", 0);
	
	СоотЗатратПоПозициям = Новый Соответствие;
	
	Если РезультатЗапроса.Пустой() Тогда
		РезСтруктура = РезСтруктураШаблон;
	Иначе
		
		ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл
			
			РезСтруктура = Новый Структура;
			
			РезСтруктура.Вставить("СуммаПлан"   , Окр(ВыборкаИзЗапроса.СуммаДокументаКЗатратам, 2));
			РезСтруктура.Вставить("СуммаЗатраты", Окр(ВыборкаИзЗапроса.СуммаДокументаЗатраты , 2));
			РезСтруктура.Вставить("СуммаЗакрыта", Окр(ВыборкаИзЗапроса.СуммаДокументаЗакрыта, 2));
			
			РазностьТекСумм = РезСтруктура.СуммаПлан - РезСтруктура.СуммаЗатраты - РезСтруктура.СуммаЗакрыта;
			РезСтруктура.Вставить("Разность"    , РазностьТекСумм);
			
			РезСтруктура.Вставить("СуммаДокументаПлан"    , Окр(ВыборкаИзЗапроса.СуммаДокументаКЗатратам, 2));
			РезСтруктура.Вставить("СуммаДокументаЗатраты" , Окр(ВыборкаИзЗапроса.СуммаДокументаЗатраты , 2));
			РезСтруктура.Вставить("СуммаДокументаЗакрыта" , Окр(ВыборкаИзЗапроса.СуммаДокументаЗакрыта, 2));
			
			РазностьТекСумм = РезСтруктура.СуммаДокументаПлан - РезСтруктура.СуммаДокументаЗатраты - РезСтруктура.СуммаДокументаЗакрыта;
			РезСтруктура.Вставить("СуммаДокументаРазность", РазностьТекСумм);
			
			Если УказанМассивПозиций Тогда
				СоотЗатратПоПозициям.Вставить(ВыборкаИзЗапроса.Позиция, РезСтруктура);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Если РезультатЗапроса.Пустой() Тогда
	
	Если УказанМассивПозиций Тогда
		ЗатратыПоПозициям = СоотЗатратПоПозициям;
	Иначе
		ЗатратыПоПозициям = РезСтруктура;
	КонецЕсли;
	
	Возврат ЗатратыПоПозициям;
	
КонецФункции // ПолучитьЗатратыПоПозициям()

// Функция определяет состояние затрат по заявке.
// 
// Параметры:
//  ЗатратыСтруктура  - Структура - получена с помощью функции ПолучитьЗатратыПоЗаявке.
// 
// Возвращаемое значение:
//   РезСостояние   - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция ОпределитьСостояниеЗатрат(ЗатратыСтруктура) Экспорт
	
	РезСостояние = Справочники.бит_СтатусыОбъектов.ПустаяСсылка();
	
	ПараметрКоридор = 1.01;
	
	СуммаЗатрат = ЗатратыСтруктура.СуммаЗатраты + ЗатратыСтруктура.СуммаЗакрыта;
	
	Если СуммаЗатрат > 0 Тогда
		
		Если СуммаЗатрат >= ЗатратыСтруктура.СуммаПлан 
			И СуммаЗатрат <= ПараметрКоридор * ЗатратыСтруктура.СуммаПлан Тогда
			
			РезСостояние = Справочники.бит_СтатусыОбъектов.Оплата;
		ИначеЕсли СуммаЗатрат < ЗатратыСтруктура.СуммаПлан Тогда
			РезСостояние = Справочники.бит_СтатусыОбъектов.ЧастичнаяОплата;
		ИначеЕсли СуммаЗатрат >ПараметрКоридор*ЗатратыСтруктура.СуммаПлан Тогда
			РезСостояние = Справочники.бит_СтатусыОбъектов.Переплата;
		КонецЕсли;
		
	Иначе	
		РезСостояние = Справочники.бит_СтатусыОбъектов.ПустаяСсылка();
	КонецЕсли; 
	
	
	Возврат РезСостояние;
	
КонецФункции // ОпределитьСостояниеЗатрат()

// Функция формирует таблицу данных для проведения по регистру бит_ПланируемыеЗатраты 
// Данные собираются из расходного документа и регистра сведений бит_ДополнительныеАналитики.
// 
// Параметры:
//  ДокументЗатрат  - ДокументСсылка.АвансовыйОтчет
//                       ,ДокументСсылка.ПоступлениеТоваровУслуг (ДокументСсылка.ПоступлениеТоваров),
//                       ,ДокументСсылка.ПоступлениеДопРасходов - затратные документы.
// 
// Возвращаемое значение:
//   ТаблицаРезультат   - ТаблицаЗначений.
// 
Функция СформироватьТаблицуПоЗатратам(ДокументЗатрат) Экспорт
	
	МетаданныеДокумента = ДокументЗатрат.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	
	// Получаем имя справочника ЦФО, Проекты в зависимости от текущего решения.
	ИмяСправочникаЦФО 	  = бит_ОбщегоНазначения.ПолучитьИмяСправочникаЦФО();
	ИмяСправочникаПроекты = бит_ОбщегоНазначения.ПолучитьИмяСправочникаПроекты();
	ИмяСправочникаНоменклатурныеГруппы = бит_ОбщегоНазначения.ПолучитьИмяСправочникаНоменклатурныеГруппы();
	    
	Запрос = Новый Запрос;
	// *** ВНИМАНИЕ: в тексте запроса есть комментарии ***
	//
	// Первый запрос - выбираем доп. аналитики.
	// Второй к доп аналитикам добавляем данные документа и курсов валют.
	// Третий - выполняем необходимые валютный пересчеты.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ДополнительныеАналитики.Объект,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.Контрагент)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОНЕЦ) КАК Контрагент,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ДоговорКонтрагента)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ) КАК ДоговорКонтрагента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ЦФО)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ЦФОПустаяСсылка
	|		КОНЕЦ) КАК ЦФО,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.Проект)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПроектПустаяСсылка
	|		КОНЕЦ) КАК Проект,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.СтатьяОборотов)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	|		КОНЕЦ) КАК СтатьяОборотов,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.НоменклатурнаяГруппа)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник." + ИмяСправочникаНоменклатурныеГруппы + ".ПустаяСсылка)
	|		КОНЕЦ) КАК НоменклатурнаяГруппа,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_1
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_1
	|		КОНЕЦ) КАК Аналитика_1,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_2
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_2
	|		КОНЕЦ) КАК Аналитика_2,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_3
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_3
	|		КОНЕЦ) КАК Аналитика_3,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_4
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_4
	|		КОНЕЦ) КАК Аналитика_4,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_5
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_5
	|		КОНЕЦ) КАК Аналитика_5,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_6
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_6
	|		КОНЕЦ) КАК Аналитика_6,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_7
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_7
	|		КОНЕЦ) КАК Аналитика_7,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.РасходнаяПозиция)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.бит_РасходнаяПозиция.ПустаяСсылка)
	|		КОНЕЦ) КАК РасходнаяПозиция
	|ПОМЕСТИТЬ Аналитики
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|ГДЕ
	|	бит_ДополнительныеАналитики.Объект = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ДополнительныеАналитики.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Организация,
	|   // %ПолеКонтрагент% КАК Контрагент,
	|   // %ПолеДоговорКонтрагента% КАК ДоговорКонтрагента,
	|	// %ПолеФизЛицо% КАК ФизЛицо,
	|	&СуммаДокумента КАК СуммаДокумента,
	|	Документ.ВалютаДокумента КАК ВалютаДокумента,
	|	// %АналитикаЦФО% КАК ЦФО,
	|	Аналитики.СтатьяОборотов,
	|	// %АналитикаПроект% КАК Проект,
	|	Аналитики.НоменклатурнаяГруппа,
	|	Аналитики.РасходнаяПозиция,
	|	Аналитики.Аналитика_1,
	|	Аналитики.Аналитика_2,
	|	Аналитики.Аналитика_3,
	|	Аналитики.Аналитика_4,
	|	Аналитики.Аналитика_5,
	|	Аналитики.Аналитика_6,
	|	Аналитики.Аналитика_7,
	|	РасходнаяПоз.ДокументОснование КАК Заявка,
	|	РасходнаяПоз.ВалютаДокумента КАК Валюта,
	|	ВЫБОР 
	|		КОГДА // %ПолеРасчетыВУЕ% 
	|			ТОГДА КурсВалютыРегл.Валюта 
	|		ИНАЧЕ КурсВалютыВзаиморасчетов.Валюта 
	|	КОНЕЦ КАК ВалютаВзаиморасчетовПозиции,
	|	КурсВалютыРегл.Валюта КАК ВалютаРегл,
	|	КурсВалютыУпр.Валюта КАК ВалютаУпр,
	|	РасходнаяПоз.КурсДокумента КАК КурсРасходнойПозиции,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасходнаяПоз.КратностьДокумента, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ РасходнаяПоз.КратностьДокумента
	|	КОНЕЦ КАК КратностьРасходнойПозиции,
	|	ВЫБОР
	|		КОГДА Документ.ВалютаДокумента = РасходнаяПоз.ВалютаДокумента
	|			ТОГДА &СуммаДокумента
	// Если в док-е есть договор, а валюта документа отличается от валюты договора
	// , то считается, что договор.РасчетыВУЕ=Истина
	// 	и тогда валюта документа = руб., а КурсВзаиморасчетов 
	// - это курс валюты договора, но нам тогда нужен курс валюты регл.
	|		КОГДА // %ЕстьДоговор%
	|				И НЕ Документ.ВалютаДокумента = // %ПолеДоговорКонтрагента%.ВалютаВзаиморасчетов
	|			ТОГДА (&СуммаДокумента * РасходнаяПоз.КратностьДокумента * КурсВалютыРеглДокЗатрат.Курс) / (ЕстьNULL(КурсВалютыРеглДокЗатрат.Кратность, 1) * ЕстьNULL(РасходнаяПоз.КурсДокумента, 1))
	|		ИНАЧЕ (&СуммаДокумента * РасходнаяПоз.КратностьДокумента * // %ДокументКурсВзаиморасчетов%) / (// %ДокументКратностьВзаиморасчетов% * ЕстьNULL(РасходнаяПоз.КурсДокумента, 1))
	|	КОНЕЦ КАК СуммаВВалютеЗаявки,
	|	// %ДокументКурсВзаиморасчетов% КАК КурсВзаиморасчетовДок,
	|	// %ДокументКратностьВзаиморасчетов% КАК КратностьВзаиморасчетовДок,
	|ВЫБОР
	|	КОГДА // %ПолеРасчетыВУЕ%
	|		ТОГДА КурсВалютыРегл.Курс
	|	КОГДА ЕСТЬNULL(КурсВалютыВзаиморасчетов.Курс, 0) = 0
	|		ТОГДА 1
	|	ИНАЧЕ КурсВалютыВзаиморасчетов.Курс
	|КОНЕЦ КАК КурсВзаиморасчетовПозиции,
	|
	|ВЫБОР
	|	КОГДА // %ПолеРасчетыВУЕ%
	|		ТОГДА КурсВалютыРегл.Кратность
	|	ИНАЧЕ КурсВалютыВзаиморасчетов.Кратность
	|КОНЕЦ КАК КратностьВзаиморасчетовПозиции,
	|
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсВалютыРегл.Курс, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсВалютыРегл.Курс
	|	КОНЕЦ КАК КурсРеглПозиции,
	|
	|	КурсВалютыРегл.Кратность КАК КратностьРеглПозиции,
	|
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсВалютыУпр.Курс, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсВалютыУпр.Курс
	|	КОНЕЦ КАК КурсУпрПозиции,
	|
	|	КурсВалютыУпр.Кратность КАК КратностьУпрПозиции
	|
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Аналитики КАК Аналитики
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_РасходнаяПозиция КАК РасходнаяПоз
	|			ПО Аналитики.РасходнаяПозиция = РасходнаяПоз.Ссылка
	|		ПО (Аналитики.Объект = Документ.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасходнойПозиции, Валюта = &ВалютаУпр) КАК КурсВалютыУпр
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасходнойПозиции, Валюта = &ВалютаРегл) КАК КурсВалютыРегл
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокументаЗатрат, Валюта = &ВалютаРегл) КАК КурсВалютыРеглДокЗатрат
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасходнойПозиции, ) КАК КурсВалютыВзаиморасчетов
	|		// %УсловиеПоВалютеВзаиморасчетов%
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Заявка,
	|	Данные.Организация,
	|	Данные.Валюта,
	|	Данные.РасходнаяПозиция КАК ДокументПланирования,
	|	Данные.ЦФО,
	|	Данные.СтатьяОборотов,
	|	Данные.Проект,
	|	Данные.НоменклатурнаяГруппа,
	|	Данные.Контрагент,
	|	Данные.ДоговорКонтрагента,
	|	Данные.Аналитика_1,
	|	Данные.Аналитика_2,
	|	Данные.Аналитика_3,
	|	Данные.Аналитика_4,
	|	Данные.Аналитика_5,
	|	Данные.Аналитика_6,
	|	Данные.Аналитика_7,
	|	Данные.СуммаВВалютеЗаявки КАК Сумма,
	|	ВЫБОР
	|		КОГДА Данные.ВалютаДокумента = Данные.ВалютаРегл
	|			ТОГДА Данные.СуммаДокумента
	|		ИНАЧЕ (Данные.СуммаВВалютеЗаявки * Данные.КурсРасходнойПозиции * Данные.КратностьРеглПозиции) / (Данные.КурсРеглПозиции * Данные.КратностьРасходнойПозиции) 
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Данные.ВалютаДокумента = Данные.ВалютаУпр
	|			ТОГДА Данные.СуммаДокумента
	|		ИНАЧЕ (Данные.СуммаВВалютеЗаявки * Данные.КурсРасходнойПозиции * Данные.КратностьУпрПозиции) / (Данные.КурсУпрПозиции * Данные.КратностьРасходнойПозиции) 
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА Данные.ВалютаДокумента = Данные.ВалютаВзаиморасчетовПозиции
	|			ТОГДА Данные.СуммаДокумента
	|		КОГДА Данные.Валюта = Данные.ВалютаВзаиморасчетовПозиции 
	|			ТОГДА Данные.СуммаВВалютеЗаявки
	|		ИНАЧЕ (Данные.СуммаВВалютеЗаявки * Данные.КурсРасходнойПозиции * Данные.КратностьВзаиморасчетовПозиции) / (Данные.КурсВзаиморасчетовПозиции * Данные.КратностьРасходнойПозиции) 
	|	КОНЕЦ КАК СуммаВзаиморасчеты,
	// Поля добавлены специально для проведения по регистру бит_НезапланированныеРасходы.
	|	Данные.ВалютаДокумента КАК ВалютаДокументаБУ,
	|	Данные.СуммаДокумента КАК СуммаДокументаБУ,
	|	Данные.КурсВзаиморасчетовДок КАК КурсВзаиморасчетовДокументаБУ,
	|	Данные.КратностьВзаиморасчетовДок КАК КратностьВзаиморасчетовДокументаБУ
	|ИЗ
	|	Данные КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Аналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Данные";
	
	ЕстьДоговор = бит_РаботаСМетаданными.ЕстьРеквизит("ДоговорКонтрагента", МетаданныеДокумента);
	ЕстьФизЛицо = бит_РаботаСМетаданными.ЕстьРеквизит("ФизЛицо"			 , МетаданныеДокумента);
	ЕстьКурсВзаиморасчетов 		= бит_РаботаСМетаданными.ЕстьРеквизит("КурсВзаиморасчетов"		, МетаданныеДокумента);
	ЕстьКратностьВзаиморасчетов = бит_РаботаСМетаданными.ЕстьРеквизит("КратностьВзаиморасчетов"	, МетаданныеДокумента);
	ЕстьКурсДокумента 	   		= бит_РаботаСМетаданными.ЕстьРеквизит("КурсДокумента"			, МетаданныеДокумента);
	ЕстьКратностьДокумента 		= бит_РаботаСМетаданными.ЕстьРеквизит("КратностьДокумента"		, МетаданныеДокумента);

	АналитикаРасходнаяПозиция = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.РасходнаяПозиция;
	
	РасходнаяПозиция = бит_ОбщегоНазначения.ПолучитьЗначениеАналитики(ДокументЗатрат, АналитикаРасходнаяПозиция);
	
	Если РасходнаяПозиция = Неопределено Тогда
		РасходнаяПозиция = АналитикаРасходнаяПозиция.ТипЗначения.ПривестиЗначение();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВалютаУпр"           , Константы.бит_ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегл"			, Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДатаРасходнойПозиции", РасходнаяПозиция.Дата);
	Запрос.УстановитьПараметр("Ссылка"				, ДокументЗатрат);
	Запрос.УстановитьПараметр("ДатаДокументаЗатрат"	, ДокументЗатрат.Дата);
	Запрос.УстановитьПараметр("ЦФОПустаяСсылка"		, Справочники[ИмяСправочникаЦФО].ПустаяСсылка());
	Запрос.УстановитьПараметр("ПроектПустаяСсылка"	, Справочники[ИмяСправочникаПроекты].ПустаяСсылка());
	
	Если бит_ОбщегоНазначения.ЭтоСемействоУПП() Тогда 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %АналитикаЦФО%"	, "Аналитики.ЦФО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %АналитикаПроект%"	, "Аналитики.Проект");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %АналитикаЦФО%"	, "Аналитики.ЦФО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %АналитикаПроект%"	, "Аналитики.Проект");
	КонецЕсли;
	
	// Если в документе нет договора(АвансовыйОтчет), то возьмем его из заявки, 
	// 	т.к. там он может быть заполнен и тогда суммы в регистре надо закрывать с учетом договора.
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		ПолеКонтрагент 	= ?(ЕстьДоговор, "Документ.ДоговорКонтрагента.Владелец"	 , "РасходнаяПоз.ДокументОснование.ДоговорКонтрагента.Владелец");
	Иначе
		ПолеКонтрагент 	= ?(ЕстьДоговор, "Документ.ДоговорКонтрагента.Контрагент", "РасходнаяПоз.ДокументОснование.ДоговорКонтрагента.Контрагент");
	КонецЕсли;
	ПолеДоговор		= ?(ЕстьДоговор, "Документ.ДоговорКонтрагента"			, "РасходнаяПоз.ДокументОснование.ДоговорКонтрагента");
	ПолеФизЛицо		= ?(ЕстьФизЛицо, "Документ.ФизЛицо"						, "Неопределено");
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		ПолеРасчетыВУЕ	= ?(ЕстьДоговор, "Документ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах", "РасходнаяПоз.ДокументОснование.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	Иначе	
		ПолеРасчетыВУЕ	= ?(ЕстьДоговор
						, "Документ.ДоговорКонтрагента.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте)"
						, "РасходнаяПоз.ДокументОснование.ДоговорКонтрагента.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте)");
	КонецЕсли;					
	ПолеЕстьДоговор = ?(ЕстьДоговор, "ИСТИНА", "ЛОЖЬ");
	
	Если ЕстьКурсВзаиморасчетов Тогда
		ПолеДокументКурсВзаиморасчетов = "ЕстьNULL(Документ.КурсВзаиморасчетов, 0)";
	ИначеЕсли ЕстьКурсДокумента Тогда
		ПолеДокументКурсВзаиморасчетов = "ЕстьNULL(Документ.КурсДокумента, 0)";
	Иначе
		ПолеДокументКурсВзаиморасчетов = "1";
	КонецЕсли;
	
	Если ЕстьКратностьВзаиморасчетов Тогда
		ПолеДокументКратностьВзаиморасчетов = "ЕстьNULL(Документ.КратностьВзаиморасчетов, 0)";
	ИначеЕсли ЕстьКратностьДокумента Тогда
		ПолеДокументКратностьВзаиморасчетов = "ЕстьNULL(Документ.КратностьДокумента, 0)";
	Иначе
		ПолеДокументКратностьВзаиморасчетов = "1";
	КонецЕсли;
	
	УсловиеПоВалютеВзаиморасчетов = ?(ЕстьДоговор, "ПО Документ.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсВалютыВзаиморасчетов.Валюта",
													"ПО РасходнаяПоз.ВалютаДокумента = КурсВалютыВзаиморасчетов.Валюта");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %ПолеКонтрагент%"					, ПолеКонтрагент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %ПолеДоговорКонтрагента%"			, ПолеДоговор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %ПолеФизЛицо%"						, ПолеФизЛицо);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %УсловиеПоВалютеВзаиморасчетов%"	, УсловиеПоВалютеВзаиморасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %ДокументКурсВзаиморасчетов%"		, ПолеДокументКурсВзаиморасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %ДокументКратностьВзаиморасчетов%"	, ПолеДокументКратностьВзаиморасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %ПолеРасчетыВУЕ%"					, ПолеРасчетыВУЕ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %ЕстьДоговор%"						, ПолеЕстьДоговор);
	
	// Заполним параметры доп. аналитик
	ИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Ном = 1;
	
	Для каждого КлючИЗначение Из ИзмеренияДоп Цикл
	
		ИмяИзмерения 	 = КлючИЗначение.Ключ;
		ТекущаяНастройка = НастройкиИзмерений[ИмяИзмерения];
		
		Если ТекущаяНастройка = Неопределено Тогда
			
			ТекущаяАналитика = Неопределено;
			ПустоеЗначение   = Неопределено;
			
		Иначе	
			
			ТекущаяАналитика = ТекущаяНастройка.Аналитика;
			ПустоеЗначение   = ТекущаяНастройка.ЗначениеПоУмолчанию;

		КонецЕсли; // Если ТекущаяНастройка = Неопределено Тогда.
		
		Запрос.УстановитьПараметр("Аналитика_"+Ном				, ТекущаяАналитика);
		Запрос.УстановитьПараметр("ПустоеЗначениеАналитика_"+Ном, ПустоеЗначение);
		
		Ном = Ном+1;
		
	КонецЦикла; 
	
	// Пересчет сумм в табличных частях документа.
	СуммаДокумента = ПересчетСуммТабличныхЧастейДокумента(ДокументЗатрат, МетаданныеДокумента);
	Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
	
	Запрос.Текст = ТекстЗапроса;
	Результат 	 = Запрос.Выполнить();
	
	ТаблицаРезультат = Результат.Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции // СформироватьТаблицуПоЗатратам()

// Функция выполняет поиск объекта по значению аналитики.
// 
// Параметры:
//  ЗначениеАналитики  - произвольный - значение аналитики.
// 	МассивИсключений - Неопределено, Массив - массив объектов для которых значение аналитики не ищется.
// 
// Возвращаемое значение:
// ОбъектВладелецАналитики - ДокументСсылка, массив, Неопределено.
// 
Функция НайтиОбъектПоЗначениюАналитики(ЗначениеАналитики, ВозвращатьМассив=Ложь, МассивИсключений=Неопределено) Экспорт

	Если ВозвращатьМассив Тогда
		ОбъектВладелецАналитики = Новый Массив;
	Иначе
		ОбъектВладелецАналитики = Неопределено;
	КонецЕсли;
	
	Если НЕ ТипЗнч(МассивИсключений) = Тип("Массив") Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_ДополнительныеАналитики.Объект КАК Объект
	               |ИЗ
	               |	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	               |ГДЕ
	               |	бит_ДополнительныеАналитики.ЗначениеАналитики = &ЗначениеАналитики
	               |	И НЕ бит_ДополнительныеАналитики.Объект В(&МассивИсключений)";
				   
	Запрос.УстановитьПараметр("ЗначениеАналитики", ЗначениеАналитики);			   
	Запрос.УстановитьПараметр("МассивИсключений" , МассивИсключений);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если ВозвращатьМассив Тогда
		
		Пока Выборка.Следующий() Цикл
			ОбъектВладелецАналитики.Добавить(Выборка.Объект);
		КонецЦикла;
		
	Иначе
		
		Если Выборка.Следующий() Тогда
			
			ОбъектВладелецАналитики = Выборка.Объект;
			
		КонецЕсли; 
		
	КонецЕсли;
	
    Возврат ОбъектВладелецАналитики;
	
КонецФункции // НайтиОбъектПоЗначениюАналитики()

// Функция производит поиск графика начислений, у которого в документах планирования указана
// переданная ссылка.
// 
// Параметры:
//  ДокументПланирования - ссылка на документ, для которого надо найти подчиненный документ.
// 	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено.
// 
Функция НайтиДокументГрафикаНачислений(Знач ДокументПланирования) Экспорт

	Если Не ЗначениеЗаполнено(ДокументПланирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументПланирования", ДокументПланирования);

	Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
    |   ГрафикНачислений.Ссылка КАК ГрафикНачислений
    |ИЗ
    |   Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикНачислений КАК ГрафикНачислений
    |ГДЕ
    |   ГрафикНачислений.ДокументПланирования = &ДокументПланирования";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если Не РезультатЗапроса.Пустой() Тогда
        
        ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
        
        Если ВыборкаИзЗапроса.Следующий() Тогда
            НайденныйДокумент = ВыборкаИзЗапроса.ГрафикНачислений;
        КонецЕсли;
        
    КонецЕсли;
        
	Возврат НайденныйДокумент;

КонецФункции // НайтиДокументГрафикаНачислений()

// Процедура проверяет возможность записи документа планирования. 
// Отслеживается изменение пометки на удаление.
// 
// Параметры:
//  ДокументОбъект - объект документа.
//  Отказ          - Булево, флаг отказа выполнения действия, выставляется в Истину
//                   когда документ используется в графике начислений.
// 
Процедура ПроверитьВозможностьЗаписиДокументаПланирования(ДокументОбъект, Отказ) Экспорт
    
    ПометкаНаУдалениеДокумента = ДокументОбъект.ПометкаУдаления;
    
    // Если это не пометка удаления или снятие пометки тогда.
    Если ПометкаНаУдалениеДокумента = ДокументОбъект.Ссылка.ПометкаУдаления Тогда
        Возврат;
    КонецЕсли;
    
    // Попытаемся найти график начислений.
	ГрафикНачислений = НайтиДокументГрафикаНачислений(ДокументОбъект.Ссылка);
    
    Если ЗначениеЗаполнено(ГрафикНачислений) Тогда
        Заголовок = "Установка пометки на удаление у документа «" + Строка(ДокументОбъект.Ссылка) + "»: ";
        бит_ОбщегоНазначения.СообщитьОбОшибке("Помечать документ на удаление возможно только из графика начислений!", Отказ, Заголовок);
    КонецЕсли;
    
КонецПроцедуры // ПроверитьВозможностьЗаписиДокументаПланирования()

// Процедура выполняет синхронизацию пометки на удаление документа "Дополнительные условия по договору"
// и документов планирования указанных в графике начислений.
// 
// Параметры:
//  ДокументОбъект - объект документа, ДокументОбъект.бит_ДополнительныеУсловияПоДоговору. 
// 
Процедура СинхронизацияПометкиНаУдалениеУДокументовПланирования(ДокументОбъект, Отказ = Ложь) Экспорт

    ПометкаНаУдалениеДокумента = ДокументОбъект.ПометкаУдаления;
    
    Если ПометкаНаУдалениеДокумента <> ДокументОбъект.Ссылка.ПометкаУдаления Тогда
        
        Заголовок = ?(ПометкаНаУдалениеДокумента, "Установка", "Снятие") 
                    + " пометки на удаление у документа «" + Строка(ДокументОбъект.Ссылка) + "»:";
        
        // Получаем документы поступления.
        Запрос = Новый Запрос;
        Запрос.УстановитьПараметр("ГрафикНачислений", ДокументОбъект.Ссылка);
        
        Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |   ГрафикНачислений.ДокументПланирования
        |ИЗ
        |   Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикНачислений КАК ГрафикНачислений
        |ГДЕ
        |   ГрафикНачислений.Ссылка = &ГрафикНачислений
        |   И (НЕ ГрафикНачислений.ДокументПланирования = НЕОПРЕДЕЛЕНО)";
        
        РезультатЗапроса = Запрос.Выполнить();
        
        Если РезультатЗапроса.Пустой() Тогда
            Возврат;
        КонецЕсли;
        
        ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаИзЗапроса.Следующий() Цикл
            
            Если ЗначениеЗаполнено(ВыборкаИзЗапроса.ДокументПланирования) Тогда
                
                Установлена = бит_ОбщегоНазначения.ИзменитьПометкуНаУдалениеУОбъекта(ВыборкаИзЗапроса.ДокументПланирования, ПометкаНаУдалениеДокумента, 
                                                                                     Заголовок,, Новый Структура("ЭтоПометкаИзГрафикаНачислений"));
                Если Не Отказ И Не Установлена Тогда
                    Отказ = Истина;
					Прервать;
                КонецЕсли;
                
            КонецЕсли;

        КонецЦикла;
            
    КонецЕсли;
        
КонецПроцедуры // СинхронизацияПометкиНаУдалениеУДокументовПланирования()

#КонецОбласти

#Область ПроцедурыИФункцииПоСозданиюИЗаполнениюДокументовПоЗатратам

// Процедура заполняет дополнительные аналитики из расходной позиции.
// 
// Параметры:
//  ДокСсылка		   - ДокументСсылка.*
//  РасходнаяПозиция   - ДокументСсылка.бит_РасходнаяПозиция
//  НастройкиИзмерений - Структура (По умолчанию = Неопределено)
//  РежимСообщений 	   - Строка (По умолчанию = "Нет").
// 
Процедура ЗаполнитьДополнительныеАналитикиПоРасходнойПозиции(НаборЗаписейАналитики, ДокСсылка, РасходнаяПозиция, НастройкиИзмерений = Неопределено, РежимСообщений = "Нет") Экспорт

	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли;
		
	// Очистим набор записей от значений заполненных по умолчанию.
	НаборЗаписейАналитики.Очистить();
	
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "РасходнаяПозиция"    , РасходнаяПозиция);
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "Проект"              , РасходнаяПозиция.ДокументОснование.Проект);
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "СтатьяОборотов"      , РасходнаяПозиция.ДокументОснование.СтатьяОборотов);
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "ЦФО"                 , РасходнаяПозиция.ДокументОснование.ЦФО);
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "НоменклатурнаяГруппа", РасходнаяПозиция.ДокументОснование.НоменклатурнаяГруппа);				
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "Контрагент"          , РасходнаяПозиция.ДокументОснование.Контрагент);
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "ДоговорКонтрагента"  , РасходнаяПозиция.ДокументОснование.ДоговорКонтрагента);
	
	ДокОснование        = РасходнаяПозиция.ДокументОснование;
	МетаданныеДокумента = ДокОснование.Метаданные();
	
	Для Каждого ТекущаяНастройка ИЗ НастройкиИзмерений Цикл
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ТекущаяНастройка.Ключ, МетаданныеДокумента)
			И ЗначениеЗаполнено(ДокОснование[ТекущаяНастройка.Ключ]) Тогда
			
			бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики
														, ДокСсылка
														, ТекущаяНастройка.Значение.Аналитика
														, ДокОснование[ТекущаяНастройка.Ключ]);
														
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДополнительныеАналитикиПоРасходнойПозиции()

// Процедура выполняет создание затратного документа по данным расходной позиции.
// 
// Параметры:
//  РасходнаяПозиция    - ДокументСсылка.бит_РасходнаяПозиция
//  РежимЗаписи         - РежимЗаписиДокумента - ОтменаПроведения не выполняется
//  СтруктураПараметров - Структура-Ключи:"ДатаРасхода","СуммаКЗатратам","ВалютаЗатрат","НастройкиИзмерений". 
// 						  Не обязательны для заполнения. Служит для принудительной установки параметров.
//  РежимСообщений      - Строка-"Нет","Все","Ошибки".
//  
Функция СоздатьДокументЗатрат(РасходнаяПозиция,РежимЗаписи=Неопределено,СтруктураПараметров=Неопределено,РежимСообщений="Нет") Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	Если РежимЗаписи = Неопределено Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	НастройкиИзмерений = Неопределено;
	СтруктураПараметров.Свойство("НастройкиИзмерений", НастройкиИзмерений);
	
	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли;
	
	Результат = Неопределено;
	
	ВыводитьОшибки     = РежимСообщений = "Все" ИЛИ РежимСообщений = "Ошибки";
	ВыводитьИнформацию = РежимСообщений = "Все";
	
	ТекстСообщения = НСтр("ru = 'Создание документа затрат на основании расходной позиции ""%1""...'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, РасходнаяПозиция);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	// Перед созданием выполним проверки
	Если НЕ РасходнаяПозиция.Проведен Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя создать документ затрат на основании НЕ проведенной расходной позиции.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		Возврат Результат;
	КонецЕсли; 
	
	РезСтруктура  = бит_Визирование.ПолучитьСтатусОбъекта(РасходнаяПозиция);
	ТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	СтатусПозицияЗакрыта = Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Закрыта;
	
	Если ТекущийСтатус = СтатусПозицияЗакрыта Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Расходная позиция находится в статусе ""%1"". Создание документов затрат запрещено.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтатусПозицияЗакрыта);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	НайденныйДокумент = бит_Казначейство.НайтиПлатежныйДокументПоПлатежнойПозиции(РасходнаяПозиция);
	Если НайденныйДокумент <> Неопределено Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'На основании расходной позиции ""%1"" уже создан документ затрат ""%2"".'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РасходнаяПозиция, НайденныйДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, НайденныйДокумент);
		КонецЕсли; 
		Возврат Результат;
	КонецЕсли; 
	
	РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(РасходнаяПозиция.ДокументОснование);
	СтатусЗаявки   = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	
	Статус_ЗаявкаУтверждена = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Утверждена;
	
	Если НЕ СтатусЗаявки = Статус_ЗаявкаУтверждена Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Создание документов затрат возможно только на основании заявки на затраты в статусе ""%1""."
										+ " Текущий статус заявки ""%2"": <%3>'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Статус_ЗаявкаУтверждена,
										ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РасходнаяПозиция, "ДокументОснование"), СтатусЗаявки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		Возврат Результат;
	КонецЕсли;
	
	ВидСоздаваемогоДокумента = бит_ОбщегоНазначения.ПолучитьЗначениеРеквизитаОбъекта(РасходнаяПозиция,"ВидРасходногоДокумента");
	
	Если НЕ ЗначениеЗаполнено(ВидСоздаваемогоДокумента) Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Для расходной позиции ""%1"" не указан вид создаваемого документа затрат для отражения в бух.учете.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РасходнаяПозиция);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		Возврат Результат;
	КонецЕсли;
	
	// Чтобы не возникало ошибок, проверим, достаточно ли у текущего пользователя прав на создание документа.
	ИмяДокумента = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ВидыРасходныхДокументов, ВидСоздаваемогоДокумента); 
	МетаРасходныйДокумент = Метаданные.Документы[ИмяДокумента];
	
	Если НЕ ПравоДоступа("Добавление", МетаРасходныйДокумент) Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'У текущего пользователя нет прав на создание документа <%1>.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ВидСоздаваемогоДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		Возврат Результат;
	КонецЕсли;
	
	// Создадим документ затрат.
	
	ВыполнениеВТранзакции = Ложь;
	
	Если ВидСоздаваемогоДокумента = Перечисления.бит_ВидыРасходныхДокументов.АвансовыйОтчет Тогда
		ДокЗатрат = Документы.АвансовыйОтчет.СоздатьДокумент();
		
	ИначеЕсли ВидСоздаваемогоДокумента = Перечисления.бит_ВидыРасходныхДокументов.ПоступлениеДопРасходов Тогда	
		ДокЗатрат = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
		
	ИначеЕсли ВидСоздаваемогоДокумента = Перечисления.бит_ВидыРасходныхДокументов.ПоступлениеТоваровУслуг Тогда	
		ДокЗатрат = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		
	КонецЕсли;
	
	// Заполним документ затрат.
	ЗаполнитьДокументЗатрат(ДокЗатрат, РасходнаяПозиция, СтруктураПараметров);
	
	ДокЗатрат.ДополнительныеСвойства.Вставить("бит_НеЗаполнятьАналитикиПоУмолчанию", Истина);
	// Запишем документ затрат.
	Попытка
		ДокЗатрат.Записать(РежимЗаписиДокумента.Запись);
		Результат = ДокЗатрат.Ссылка;
		Если ВыводитьИнформацию Тогда
			ТекстСообщения = НСтр("ru = 'Записан документ затрат ""%1"".'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ДокЗатрат.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокЗатрат.Ссылка);
		КонецЕсли; 
	Исключение
		Результат = Неопределено;
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось записать документ затрат. %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
	КонецПопытки;
	
	Если Результат = Неопределено Тогда
		Если ВыполнениеВТранзакции Тогда			
			// Отменим транзакцию.
			ОтменитьТранзакцию(); 			
		КонецЕсли;		
		Возврат Результат;
	КонецЕсли;
	
	Если ВыполнениеВТранзакции Тогда
		// Зафиксируем транзакцию.
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	// Заполнение дополнительных аналитик шапки
	Отбор = Новый Структура("Объект", ДокЗатрат.Ссылка);
	НаборЗаписейАналитики = бит_ОбщегоНазначения.ПрочитатьНаборАналитики(Отбор);
	ЗаполнитьДополнительныеАналитикиПоРасходнойПозиции(НаборЗаписейАналитики, ДокЗатрат.Ссылка, РасходнаяПозиция, НастройкиИзмерений, РежимСообщений);
	бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписейАналитики, РежимСообщений);
	
	// При необходимости попытаемся провести.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Попытка
			ДокЗатрат.Записать(РежимЗаписиДокумента.Проведение);
			Результат = ДокЗатрат.Ссылка;
			Если ВыводитьИнформацию Тогда
				ТекстСообщения = НСтр("ru = 'Проведен документ затрат ""%1"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ДокЗатрат.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;  
		Исключение
			Результат = Неопределено;
			Если ВыводитьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось провести документ затрат ""%1"". %2'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ДокЗатрат.Ссылка, ОписаниеОшибки());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
		КонецПопытки;
		
	КонецЕсли; 
	
	// Изменение кода. Начало. 03.12.2013{{
	// Установка запрета на автоматическое перезаполнение аналитик.
	СтруктураПараметров = Новый Структура("ЗапретитьПерезаполнениеАналитик", Истина);
	бит_МеханизмДопИзмерений.ЗаписатьДополнительныеПараметрыОбъекта(Результат, СтруктураПараметров);
	// Изменение кода. Конец. 03.12.2013}}
	
	Возврат Результат;
	
КонецФункции // СоздатьДокументЗатрат()

// Процедура осуществляет заполнение документа затрат по расходной позиции.
// 
// Параметры:
//  ДокЗатрат           - ДокументОбъект.ПоступлениеТоваровУслуг
// 						  , ДокументОбъект.АвансовыйОтчет
// 						  , ДокументОбъект.ПоступлениеДопРасходов.
//  РасходнаяПозиция    - ДокументСсылка.бит_РасходнаяПозиция.
//  СтруктураПараметров - Структура-Ключи:"ДатаРасхода", "СуммаКЗатратам", "ВалютаЗатрат".
// 						  Не обязательны для заполнения. Служит для принудительной установки параметров.
// 
Процедура ЗаполнитьДокументЗатрат(ДокЗатрат,РасходнаяПозиция,СтруктураПараметров) Экспорт

	Если ДокЗатрат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим данные, необходимые для заполнения документа затрат.
	
	Заявка = РасходнаяПозиция.ДокументОснование;
	
	ДатаРасхода     = ?(СтруктураПараметров.Свойство("ДатаРасхода"),СтруктураПараметров.ДатаРасхода,ТекущаяДата());
	СуммаКЗатратам  = ?(СтруктураПараметров.Свойство("СуммаКЗатратам"),СтруктураПараметров.СуммаКЗатратам,РасходнаяПозиция.Сумма);
	ВалютаЗатрат    = ?(СтруктураПараметров.Свойство("ВалютаЗатрат"),СтруктураПараметров.ВалютаЗатрат,Неопределено);
	
	МетаданныеЗатрат   = ДокЗатрат.Метаданные();
	ИмяДокументаЗатрат = МетаданныеЗатрат.Имя;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Заполним шапку документа
	
	ДокЗатрат.Организация = РасходнаяПозиция.Организация;
	ДокЗатрат.Дата        = ДатаРасхода;
	ДокЗатрат.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("ВидОперации", МетаданныеЗатрат) Тогда
		ДокЗатрат.ВидОперации = РасходнаяПозиция.ВидОперации;
	КонецЕсли;
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Контрагент",МетаданныеЗатрат) Тогда
		ДокЗатрат.Контрагент = Заявка.Контрагент;
	КонецЕсли;
	Если бит_РаботаСМетаданными.ЕстьРеквизит("ДоговорКонтрагента",МетаданныеЗатрат) Тогда
		ДокЗатрат.ДоговорКонтрагента = Заявка.ДоговорКонтрагента;
	КонецЕсли;
	Если бит_РаботаСМетаданными.ЕстьРеквизит("ФизЛицо",МетаданныеЗатрат) Тогда
		ДокЗатрат.ФизЛицо = Заявка.ФизическоеЛицо;
	КонецЕсли;
	Если бит_РаботаСМетаданными.ЕстьРеквизит("НазначениеАванса",МетаданныеЗатрат) Тогда
		ДокЗатрат.НазначениеАванса = РасходнаяПозиция.СодержаниеЗатрат;
	КонецЕсли; 
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Содержание",МетаданныеЗатрат) Тогда
		ДокЗатрат.Содержание = РасходнаяПозиция.СодержаниеЗатрат;
	КонецЕсли;
	Если бит_РаботаСМетаданными.ЕстьРеквизит("УчитыватьНДС",МетаданныеЗатрат) Тогда
		ДокЗатрат.УчитыватьНДС = Истина;
	КонецЕсли;
	Если бит_РаботаСМетаданными.ЕстьРеквизит("СуммаВключаетНДС",МетаданныеЗатрат) Тогда
		ДокЗатрат.СуммаВключаетНДС = РасходнаяПозиция.СуммаВключаетНДС;
	КонецЕсли;
	Если бит_РаботаСМетаданными.ЕстьРеквизит("СтавкаНДС",МетаданныеЗатрат) Тогда
		ДокЗатрат.СтавкаНДС = РасходнаяПозиция.СтавкаНДС;
	КонецЕсли;
	
	// Если это "Бухгалтерия предприятия"
	Если бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия() Тогда
		
		ДокЗатрат.бит_РасходнаяПозиция = РасходнаяПозиция;
		
		// Для поступления товаров и услуг 
		Если ИмяДокументаЗатрат = "ПоступлениеТоваровУслуг" Тогда
			// Заполним счета учета
			Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ДокЗатрат);
			
			Если бит_РаботаСМетаданными.ЕстьРеквизит("СпособЗачетаАвансов",МетаданныеЗатрат) Тогда
				ДокЗатрат.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли;	
			
		ИначеЕсли ИмяДокументаЗатрат = "ПоступлениеДопРасходов" Тогда	
			// Заполним счета учета
			СчетаУчета = бит_БухгалтерияСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДокЗатрат.Организация, ДокЗатрат.Контрагент, ДокЗатрат.ДоговорКонтрагента);
			
			ДокЗатрат.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
			
			Если бит_РаботаСМетаданными.ЕстьРеквизит("СпособЗачетаАвансов",МетаданныеЗатрат) Тогда
				Если (Заявка.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СКомитентом) Тогда
					ДокЗатрат.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				Иначе
					ДокЗатрат.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
				КонецЕсли;
				
				Если ДокЗатрат.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически
					ИЛИ ДокЗатрат.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
					
					ДокЗатрат.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
		
	ДокЗатрат.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	// Определим валюту платежа
	Если ЗначениеЗаполнено(ВалютаЗатрат) Тогда  // Валюта затрат указана явно
		ВалютаДокЗатрат = ВалютаЗатрат;
	Иначе
		Если РасходнаяПозиция.ВалютаДокумента = ВалютаРегл Тогда
			ВалютаДокЗатрат = ВалютаРегл;	
		Иначе
			// Если Заявка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			// 	ВалютаДокЗатрат = ВалютаРегл;
			// Иначе
				ВалютаДокЗатрат = РасходнаяПозиция.ВалютаДокумента;
			// КонецЕсли;	
		КонецЕсли; 			
	КонецЕсли; 
	
	ДокЗатрат.ВалютаДокумента    = ВалютаДокЗатрат;
	
	Если ДокЗатрат.ВалютаДокумента = ВалютаРегл Тогда
		КурсДокЗатрат 		= 1;
		КратностьДокЗатрат 	= 1;
	Иначе
		СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ДокЗатрат.ВалютаДокумента,ДокЗатрат.Дата);
		КурсДокЗатрат 		= СтрКурса.Курс;
		КратностьДокЗатрат 	= СтрКурса.Кратность;
	КонецЕсли; 
	
	// Для авансового отчета
	Если бит_РаботаСМетаданными.ЕстьРеквизит("КурсДокумента", МетаданныеЗатрат) Тогда
		ДокЗатрат.КурсДокумента = КурсДокЗатрат;
	КонецЕсли;
	Если бит_РаботаСМетаданными.ЕстьРеквизит("КратностьДокумента", МетаданныеЗатрат) Тогда
		ДокЗатрат.КратностьДокумента = КратностьДокЗатрат;
	КонецЕсли;
	// Для поступления товаров и услуг, поступление доп.расходов.
	Если бит_РаботаСМетаданными.ЕстьРеквизит("КурсВзаиморасчетов", МетаданныеЗатрат) Тогда
		ДокЗатрат.КурсВзаиморасчетов = КурсДокЗатрат;
	КонецЕсли;
	Если бит_РаботаСМетаданными.ЕстьРеквизит("КратностьВзаиморасчетов", МетаданныеЗатрат) Тогда
		ДокЗатрат.КратностьВзаиморасчетов = КратностьДокЗатрат;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументЗатрат()

// Функция формирует соответствие видов расходных документов и документа затрат.
// 
// Параметры:
//  ИмяДокумента - Строка - "ПоступлениеТоваровУслуг", "ПоступлениеДопРасходов", "АвансовыйОтчет".
// 
// Возвращаемое значение:
//   РезСоответствие - Соответствие.
// 
Функция СформироватьСоответствияВидовРасходныхДокументовЗаявки(ИмяДокумента) Экспорт

	РезСоответствие = Новый Соответствие;
	
	Если ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		
		РезСоответствие.Вставить(Перечисления.бит_ВидыРасходныхДокументов.ПоступлениеТоваровУслуг
								,Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		
	ИначеЕсли ИмяДокумента = "АвансовыйОтчет" Тогда
		
		// Для авансового отчета виды операций в поддерживаемых конфигурация отсутствуют.
		
	КонецЕсли; 
	
	Возврат РезСоответствие;
	
КонецФункции // СформироватьСоответствияВидовРасходныхДокументовЗаявки()

// Функция заполняет РасходнуюПозицию определенными полями из объекта источника.
// 
// Параметры:
// 	РасходнаяПозиция - ДокументСсылка.бит_РасходнаяПозиция - документ.
// 	Источник - произвольный - объект, на основании которого будет заполнена РасходнаяПозиция.
// 	СтруктураПолей - структура - соответствие заполняемых полей
// 						ключ - поле для заполнения в РасходнойПозиции
// 						значение - поле-источник данных из объекта Источника.
//  Заголовок      - Строка
//  РежимСообщений - Строка: "Нет","Все","Ошибки" - режимы сообщений.
// 
// Возвращаемое значение:
// 	ДействиеВыполнено   - Булево.
// 
Функция ЗаполнитьРасходнуюПозициюПоИсточнику(РасходнаяПозиция, Источник, СтруктураПолей, Заголовок="", РежимСообщений="Все") Экспорт
	
	ДействиеВыполнено = Ложь;
	
	Если НЕ ТипЗнч(СтруктураПолей) = Тип("Структура") Тогда
		СтруктураПолей = Новый Структура;
	КонецЕсли;
	
	Если СтруктураПолей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	РасходнаяПозицияОбъект = РасходнаяПозиция.ПолучитьОбъект();
	
	Если НЕ бит_ОбщегоНазначения.ЗаблокироватьОбъект(РасходнаяПозицияОбъект,Строка(РасходнаяПозиция),,РежимСообщений) Тогда
		
		Возврат ДействиеВыполнено;
		
	КонецЕсли;	
		
	Для Каждого ТекущееПоле Из СтруктураПолей Цикл
		
		РасходнаяПозицияОбъект[ТекущееПоле.Ключ] = Источник[ТекущееПоле.Значение];
		
	КонецЦикла;
	
	РежимЗаписи = ?(РасходнаяПозицияОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);
	ДействиеВыполнено =  бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(РасходнаяПозицияОбъект,РежимЗаписи,,РежимСообщений);
	
	Возврат ДействиеВыполнено;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботыСДоговорами

// Функция находит договор контрагента созданный на основании проекта договора.
// 
// Параметры:
// 	ПроектДоговора   - ДокументСсылка.бит_ПроектДоговора - проект для которого надо найти договор.
// 	ВозвращатьМассив - Булево - Истина - будет возвращен массив, возможно несколько элементов в массиве
// 								Ложь   - будет возвращена ссылка на договор или Неопределено.
// 
// Возвращаемое значение:
// 	Массив, Неопределено, СправочникСсылка.ДоговорыКонтрагентов.
// 
Функция НайтиДоговорКонтрагентаПоПроектуДоговора(ПроектДоговора, ВозвращатьМассив = Ложь) Экспорт

	МассивДоговоров = ?(ВозвращатьМассив, Новый Массив, Неопределено);
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроектДоговора", ПроектДоговора);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.бит_ПроектДоговора = &ПроектДоговора";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(); 	
	Если ВозвращатьМассив Тогда
		
		Пока Выборка.Следующий() Цикл   			
			МассивДоговоров.Добавить(Выборка.Ссылка);  			
		КонецЦикла;  
		
	Иначе
		
		Если Выборка.Следующий() Тогда
			МассивДоговоров = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
    Возврат МассивДоговоров;
	
КонецФункции

// Процедура обновляет договор контрагента по всем документам.
// Доп.условия по договору созданных на основании переданного проекта договора.
// 
// Параметры:
// 	Договор 	   - СправочникСсылка.ДоговорыКонтрагентов 
// 					(договор для подстановки в документы Доп.условия по договору)
// 	ПроектДоговора - ДокументСсылка.бит_ПроектДоговора 
// 					(проект для которого происходит поиск подчиненных документов Доп.условия по договору)
// 	РежимСообщений - строка ["Все", "Ошибки"] 
// 					(регулятор, информацию о каких событиях надо предоставлять пользователю).
// 
Процедура ОбновитьДоговорВДокументахДопУсловияПоДоговору(Договор, ПроектДоговора, РежимСообщений="Нет") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПроектДоговора) Тогда
		Возврат;
	КонецЕсли;
	
	ВыводитьОшибки     = ?(РежимСообщений="Все" ИЛИ РежимСообщений="Ошибки",Истина,Ложь);
	ВыводитьИнформацию = ?(РежимСообщений="Все",Истина,Ложь);
	
	Заголовок = НСтр("ru = 'Обновление договора контрагента в документах ""Дополнительные условия по договору"".'");
	Заголовок = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Заголовок, ПроектДоговора);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ДополнительныеУсловияПоДоговору.Ссылка,
	|	бит_ДополнительныеУсловияПоДоговору.Проведен
	|ИЗ
	|	Документ.бит_ДополнительныеУсловияПоДоговору КАК бит_ДополнительныеУсловияПоДоговору
	|ГДЕ
	|	бит_ДополнительныеУсловияПоДоговору.ПроектДоговора = &ПроектДоговора";
	
	Запрос.УстановитьПараметр("ПроектДоговора", ПроектДоговора);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если НЕ Выборка.Количество() = 0 Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(Заголовок);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДействиеВыполнено = бит_ОбщегоНазначения.ЗаблокироватьОбъект(ДокументОбъект,Строка(Выборка.Ссылка),,ВыводитьОшибки);
		Если НЕ ДействиеВыполнено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДокументОбъект.ДоговорКонтрагента = Договор;
		
		Если Выборка.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокументОбъект, РежимЗаписи, , РежимСообщений);                    
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет договор контрагента на основании проекта договора.
// 
// Параметры:
// 	Договор - СправочникОбъект.ДоговорыКонтрагентов - заполняемый договор
// 	ПроектДоговора - ДокументСсылка.бит_ПроектДоговора - проект на основании которого надо заполнить договор.
// 
Процедура ЗаполнитьДоговорКонтрагентаПоПроекту(Договор, ПроектДоговора) Экспорт
	
	Если Договор = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьДоговорКонтрагентаПоПроектуОсновные(Договор, ПроектДоговора);
	ЗаполнитьДоговорКонтрагентаПоПроектуДополнительные(Договор, ПроектДоговора);
	
КонецПроцедуры

Процедура ЗаполнитьДоговорКонтрагентаПоПроектуОсновные(Договор, ПроектДоговора) Экспорт
	
	Перем ОсновнаяОрганизация;
	
	Договор.Наименование 							= ПроектДоговора.Наименование;
	Договор.Владелец 								= ПроектДоговора.Контрагент;
	Договор.СпособЗаполненияСтавкиНДС				= Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоУмолчанию(Договор.Владелец);	
	Договор.Организация 							= ПроектДоговора.Организация;
	Договор.ВалютаВзаиморасчетов        			= ПроектДоговора.ВалютаВзаиморасчетов;
	Договор.РасчетыВУсловныхЕдиницах				= ПроектДоговора.РасчетыВУсловныхЕдиницах;
	Договор.ВидДоговора 							= ПроектДоговора.ВидДоговора;
	Договор.Дата 									= ПроектДоговора.ДатаДоговора;
	Договор.Номер 									= ПроектДоговора.НомерДоговора;
	Договор.СрокДействия 							= ПроектДоговора.СрокДействия;
	
	Если бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия()
		ИЛИ бит_ОбщегоНазначения.ЭтоКОРП() Тогда
		
		Если ЗначениеЗаполнено(Договор.Организация) Тогда
			Договор.Организация = бит_ОбщегоНазначения.ГоловнаяОрганизация(Договор.Организация);
		Иначе
			ОсновнаяОрганизация = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ОсновнаяОрганизация");
			Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
				Договор.Организация = бит_ОбщегоНазначения.ГоловнаяОрганизация(ОсновнаяОрганизация);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДоговорКонтрагентаПоПроектуДополнительные(Договор, ПроектДоговора) Экспорт
	
	Договор.бит_ДержательДоговора 					= ПроектДоговора.ДержательДоговора;
	Договор.бит_НачалоПлановое 						= ПроектДоговора.НачалоПлановое;
	Договор.бит_ОкончаниеПлановое 					= ПроектДоговора.ОкончаниеПлановое;
	Договор.бит_ФактическоеНачало 					= ПроектДоговора.ФактическоеНачало;
	Договор.бит_ФактическоеОкончание 				= ПроектДоговора.ФактическоеОкончание;
	Договор.бит_СостояниеДоговора 					= ПроектДоговора.СостояниеДоговора;
	Договор.бит_СтадияДоговора 						= ПроектДоговора.СтадияДоговора;
	Договор.бит_ШтрафнойПроцентОтСуммыЗаПериод 		= ПроектДоговора.ШтрафнойПроцентОтСуммыЗаПериод;
	Договор.бит_ШтрафнаяСуммаЗаПериод 				= ПроектДоговора.ШтрафнаяСуммаЗаПериод;
	Договор.бит_БазовыйПериодИсчисленияПериода 		= ПроектДоговора.БазовыйПериодИсчисленияПериода;
	Договор.бит_ПредметДоговора 					= ПроектДоговора.ПредметДоговора;
	Договор.бит_ОписаниеРабот 						= ПроектДоговора.ОписаниеРабот;
	Договор.бит_ОсновнаяСтатьяОборотов 				= ПроектДоговора.ОсновнаяСтатьяОборотов;
	Договор.бит_ЦФО 								= ПроектДоговора.ЦФО;
	Договор.бит_Проект 								= ПроектДоговора.Проект;
	Договор.бит_СуммаДоговора 						= ПроектДоговора.СуммаВзаиморасчеты;
	Договор.бит_ТипДоговора 						= ПроектДоговора.ТипДоговора;
	Договор.бит_ПроектДоговора 						= ПроектДоговора;
	Договор.бит_НаправлениеДоговора 				= ПроектДоговора.НаправлениеДоговора;
	Договор.бит_ПодразделениеОрганизации 			= ПроектДоговора.ПодразделениеОрганизации;
	Договор.бит_ВключатьВРеестрДоговоров 			= ПроектДоговора.ВключатьВРеестрДоговоров;
	Договор.бит_КураторДоговора 					= ПроектДоговора.КураторДоговора;
	Договор.бит_КураторДоговораСоСтороныКонтрагента = ПроектДоговора.КураторДоговораСоСтороныКонтрагента;
	Договор.бит_СпособРасчетаФинПлатежей			= ПроектДоговора.СпособРасчетаФинПлатежей;
	Договор.бит_Ответственный                       = ПроектДоговора.Ответственный;
	Договор.СрокДействия                       		= ПроектДоговора.СрокДействия;
	
	Договор.бит_СтатьиОборотов.Загрузить(ПроектДоговора.СтатьиОборотов.Выгрузить());

КонецПроцедуры

// Функция создает договор контрагента на основании проекта договора.
// 
// Параметры:
// 	ПроектДоговора - ДокументСсылка.бит_ПроектыДоговора - проект для которого надо создать договор.
// 	РежимСообщений - строка - "Все", "Ошибки" - регулятор, информацию о каких событиях надо предоставлять пользователю.
// 
// Возвращаемое значение:
// 	Результат - СправочникСсылка.ДоговорКонтрагента, Неопределено.
// 
Функция СоздатьДоговорНаОснованииПроекта(ПроектДоговора, РежимСообщений="Нет") Экспорт
	
	Результат = Неопределено;
	
	ВыводитьОшибки     = ?(РежимСообщений="Все" ИЛИ РежимСообщений="Ошибки",Истина,Ложь);
	ВыводитьИнформацию = ?(РежимСообщений="Все",Истина,Ложь);
	
	Заголовок = НСтр("ru = 'Создание договора контрагента на основании проекта договора ""%1%"".'");
	Заголовок = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Заголовок, ПроектДоговора);
	
	// Перед созданием выполним проверки
	Если НЕ ПроектДоговора.Проведен Тогда
		
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Перед вводом договора документ надо провести.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		
		Возврат Результат;
		
	КонецЕсли; 
	                    
	НайденныйДоговор = НайтиДоговорКонтрагентаПоПроектуДоговора(ПроектДоговора);
	
	Если НЕ НайденныйДоговор = Неопределено Тогда
		Если ВыводитьОшибки Тогда			
			ТекстСообщения = НСтр("ru = 'На основании проекта договора ""%1"" уже создан договор контрагента ""%2"".'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ПроектДоговора, НайденныйДоговор);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, НайденныйДоговор);
		КонецЕсли; 
		
		Возврат Результат;
		
	КонецЕсли; 
	
	РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(ПроектДоговора);
	СтатусПроекта  = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	
	Статус_ПроектУтвержден = Справочники.бит_СтатусыОбъектов.ПроектДоговора_Утвержден;
	
	Если НЕ СтатусПроекта = Статус_ПроектУтвержден Тогда
		
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Запрещено создавать договор контрагента до утверждения проекта.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Чтобы не возникало ошибок, проверим, достаточно ли у текущего пользователя прав на создание элемента.
	МетаДоговор = Метаданные.Справочники.ДоговорыКонтрагентов;
	
	Если НЕ ПравоДоступа("Добавление", МетаДоговор) Тогда
		
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'У текущего пользователя нет прав на добавление нового договора контрагента.'");
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,Заголовок,СтатусСообщения.Важное);
		КонецЕсли; 
		
		Возврат Результат;
		
	КонецЕсли;
	
	ВыполнениеВТранзакции = Ложь;
	
	Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	// Заполним договор.
	ЗаполнитьДоговорКонтрагентаПоПроекту(Договор, ПроектДоговора);
	Договор.ДополнительныеСвойства.Вставить("бит_мдм_РазрешеноИзменение", Истина);
	
	// Запишем договор.
	Попытка
		Договор.Записать();
		Результат = Договор.Ссылка;
		Если ВыводитьИнформацию Тогда
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(Заголовок);
			
			ТекстСообщения = НСтр("ru = 'Записан договор контрагента ""%1%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Результат);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			 			 
		КонецЕсли; 
	Исключение
		Результат = Неопределено;
		Если ВыводитьОшибки Тогда
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(Заголовок);
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать документ затрат. %1%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли; 
	КонецПопытки;
	
	ЗаполнитьЗначенияПараметровФинансовогоДоговора(Договор.Ссылка, ПроектДоговора);
	ЗаполнитьНоминальныеСтавкиДоговораИзПроекта(Договор.Ссылка, ПроектДоговора);
	
	Если Результат = Неопределено Тогда
		
		Если ВыполнениеВТранзакции Тогда
			
			// Отменим транзакцию.
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если ВыполнениеВТранзакции Тогда
		// Зафиксируем транзакцию.
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботыСПараметрамиСоставляющихПлатежаФиндоговоров

// Функция формирует дерево параметров финансового договора.
// 
// Параметры:
// 	ИсточникЗаполнения - СправочникСсылка.ДоговорыКонтрагентов, 
// 						ДокументСсылка.бит_ПроектДоговора, 
// 						СправочникСсылка.бит_СпособыРасчетовГрафиковПлатежейПоФинДоговорам.
// 
Функция ПолучитьДеревоПараметровФинДоговоров(ИсточникЗаполнения) Экспорт
	
    Если ТипЗнч(ИсточникЗаполнения) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
        ИЛИ ТипЗнч(ИсточникЗаполнения) = Тип("ДокументСсылка.бит_ПроектДоговора") Тогда		
		РежимЗаполнения = "ПоДоговору";
	ИначеЕсли ТипЗнч(ИсточникЗаполнения) = Тип("СправочникСсылка.бит_СпособыРасчетовГрафиковПлатежейПоФинДоговорам") Тогда
		РежимЗаполнения = "ПоСпособуРасчета";
	Иначе
		РежимЗаполнения = "";
	КонецЕсли;
	                                                                 
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.Параметр КАК Параметр,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра КАК Значение,
	|	ВЫБОР
	|		КОГДА бит_ЗначенияПараметровФинансовыхДоговоров.СоставляющаяПлатежа = ЗНАЧЕНИЕ(Справочник.бит_СоставляющиеПлатежейПоФинДоговорам.ПустаяСсылка)
	|			ТОГДА ""Общие параметры""
	|		ИНАЧЕ бит_ЗначенияПараметровФинансовыхДоговоров.СоставляющаяПлатежа
	|	КОНЕЦ КАК СоставляющаяПлатежа
	|ПОМЕСТИТЬ ПараметрыСпособаРасчетаПоДоговору
	|ИЗ
	|	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
	|ГДЕ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента = &ИсточникЗаполнения
	|	И ВЫБОР
	|			КОГДА &РежимЗаполнения = ""ПоДоговору""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	СоставляющиеПлатежа.Параметр,
	|	СоставляющиеПлатежа.ЗначениеПоУмолчанию,
	|	ВЫБОР
	|		КОГДА СоставляющиеПлатежа.СоставляющаяПлатежа = ЗНАЧЕНИЕ(Справочник.бит_СоставляющиеПлатежейПоФинДоговорам.ПустаяСсылка)
	|			ТОГДА ""Общие параметры""
	|		ИНАЧЕ СоставляющиеПлатежа.СоставляющаяПлатежа
	|	КОНЕЦ
	|ИЗ
	|	Справочник.бит_СпособыРасчетовГрафиковПлатежейПоФинДоговорам.СоставляющиеПлатежа КАК СоставляющиеПлатежа
	|ГДЕ
	|	СоставляющиеПлатежа.Ссылка = &ИсточникЗаполнения
	|	И ВЫБОР
	|			КОГДА &РежимЗаполнения = ""ПоСпособуРасчета""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыСпособаРасчетаПоДоговору.Параметр,
	|	ПараметрыСпособаРасчетаПоДоговору.Значение,
	|	ПараметрыСпособаРасчетаПоДоговору.СоставляющаяПлатежа КАК СоставляющаяПлатежа,
	|	ПараметрыСпособаРасчетаПоДоговору.СоставляющаяПлатежа.ТипПлатежаПоФинДоговору КАК ТипПлатежа,
	|	ПараметрыСпособаРасчетаПоДоговору.Параметр.Обязательный КАК Обязательный
	|ИЗ
	|	ПараметрыСпособаРасчетаПоДоговору КАК ПараметрыСпособаРасчетаПоДоговору
	|ИТОГИ ПО
	|	СоставляющаяПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыСпособаРасчетаПоДоговору";
				   
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ИсточникЗаполнения"	, ИсточникЗаполнения);
	Запрос.УстановитьПараметр("РежимЗаполнения"		, РежимЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоПараметров = Новый ДеревоЗначений;
	
	МассивТиповЗначенийПараметров = Метаданные.ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.Тип.Типы();
	
	МассивТиповГруппировка = Новый Массив;
	МассивТиповГруппировка.Добавить(Тип("СправочникСсылка.бит_СоставляющиеПлатежейПоФинДоговорам"));
	МассивТиповГруппировка.Добавить(Тип("ПланВидовХарактеристикСсылка.бит_ВидыПараметровФинансовыхДоговоров"));
	МассивТиповГруппировка.Добавить(Тип("Строка"));
	
	ДеревоПараметров.Колонки.Добавить("Группировка"			, Новый ОписаниеТипов(МассивТиповГруппировка));
	ДеревоПараметров.Колонки.Добавить("СоставляющаяПлатежа"	, Новый ОписаниеТипов("СправочникСсылка.бит_СоставляющиеПлатежейПоФинДоговорам"));
	ДеревоПараметров.Колонки.Добавить("Параметр"			, Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.бит_ВидыПараметровФинансовыхДоговоров"));
	ДеревоПараметров.Колонки.Добавить("Значение"			, Новый ОписаниеТипов(МассивТиповЗначенийПараметров));
	ДеревоПараметров.Колонки.Добавить("ТипПлатежа"			, Новый ОписаниеТипов("ПеречислениеСсылка.бит_ТипыПлатежейПоФинансовымДоговорам"));
	ДеревоПараметров.Колонки.Добавить("Обязательный"		, Новый ОписаниеТипов("Булево"));
	                                                                              
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		// Добавим в дерево составляющую платежа
		СтрокаДереваПараметров = ДеревоПараметров.Строки.Добавить();
		СтрокаДереваПараметров.Группировка		   = Выборка.СоставляющаяПлатежа;
		СтрокаДереваПараметров.СоставляющаяПлатежа = Выборка.СоставляющаяПлатежа;
		Если НЕ ТипЗнч(Выборка.СоставляющаяПлатежа) = Тип("Строка") Тогда
			СтрокаДереваПараметров.ТипПлатежа = Выборка.СоставляющаяПлатежа.ТипПлатежаПоФинДоговору;
		КонецЕсли;
		
		ВыборкаПараметров = Выборка.Выбрать();
		
		// Заполним параметры составляющей платежа
		Пока ВыборкаПараметров.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПараметров.Параметр) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПараметра = СтрокаДереваПараметров.Строки.Добавить();
			
			СтрокаПараметра.Группировка			= ВыборкаПараметров.Параметр;
			СтрокаПараметра.СоставляющаяПлатежа = ВыборкаПараметров.СоставляющаяПлатежа;
			СтрокаПараметра.Параметр			= ВыборкаПараметров.Параметр;
			СтрокаПараметра.ТипПлатежа			= ВыборкаПараметров.ТипПлатежа;
			СтрокаПараметра.Обязательный		= ВыборкаПараметров.Обязательный;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПараметров.Значение) Тогда
				СтрокаПараметра.Значение = СтрокаПараметра.Параметр.ТипЗначения.ПривестиЗначение();
			Иначе
				СтрокаПараметра.Значение = ВыборкаПараметров.Значение;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
	Возврат ДеревоПараметров;
	
КонецФункции

// Процедура записывает параметры финансового договора в регистр.
// 
// Параметры:
// 	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов,
// 						 ДокументСсылка.бит_ПроектДоговора.
// 	ДеревоПараметров - ДеревоЗначений.
// 
Функция ЗаписатьПараметрыФинансовогоДоговора(ДоговорКонтрагента, ДеревоПараметров) Экспорт
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.бит_ЗначенияПараметровФинансовыхДоговоров) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.бит_ЗначенияПараметровФинансовыхДоговоров.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(ДоговорКонтрагента, Истина);
	
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	
	Организация = ДоговорКонтрагента.Организация;
	
	Если ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Контрагент	= ДоговорКонтрагента.Владелец;
	ИначеЕсли ТипЗнч(ДоговорКонтрагента) = Тип("ДокументСсылка.бит_ПроектДоговора") Тогда
		Контрагент	= ДоговорКонтрагента.Контрагент;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ДеревоПараметров.Строки Цикл
		
		Для Каждого СтрокаПараметра Из ТекущаяСтрока.Строки Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Организация		    = Организация;
			НоваяЗапись.Контрагент		    = Контрагент;
			НоваяЗапись.ДоговорКонтрагента  = ДоговорКонтрагента;
			НоваяЗапись.СоставляющаяПлатежа = СтрокаПараметра.СоставляющаяПлатежа;
			НоваяЗапись.Параметр 			= СтрокаПараметра.Параметр;
			НоваяЗапись.ЗначениеПараметра 	= СтрокаПараметра.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей);
	
	Возврат ДействиеВыполнено;
	
КонецФункции 

#КонецОбласти

#Область ПроцедурыОбработчикиПодписокНаСобытия

// Процедура - обработчик подписки на события "бит_ОбработкаПроведенияЗатраты".
// 
Процедура бит_ОбработкаПроведенияЗатратыОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 			
	
	// Движения по документам, откорректировнным вручную не формируем.
	Если бит_ОбщегоНазначения.РучнаяКорректировка(Источник) Тогда
	
		 Возврат;
	
	КонецЕсли; 

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗатраты = СформироватьТаблицуПоЗатратам(Источник.Ссылка);
	
	// По регистру бит_ПланируемыеЗатраты
	НаборЗаписей = Источник.Движения.бит_ПланируемыеЗатраты;
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// По регистру бит_НезапланированныеРасходы
	НаборЗаписейНезапланированныеРасходы = Источник.Движения.бит_НезапланированныеРасходы;
	
	ТаблицаДвиженийНезапланированныеРасходы = НаборЗаписейНезапланированныеРасходы.Выгрузить();
	ТаблицаДвиженийНезапланированныеРасходы.Очистить();
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Сумма");
	
	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(Источник.Ссылка,Источник.Ссылка.Дата,Новый Структура("Документ,Упр,Регл,Взаиморасчеты"));
	
	СтруктураКурсыВалют.Вставить("Документ", Новый Структура("Валюта, Курс, Кратность", Неопределено, 0,0));
	
	Для каждого СтрокаТаблицы Из ТаблицаЗатраты Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования) Тогда
			// По регистру бит_ПланируемыеЗатраты
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы);
			
		Иначе
			// По регистру бит_НезапланированныеРасходы
			СтрокаДвижений = ТаблицаДвиженийНезапланированныеРасходы.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы);
			
			СтрокаДвижений.Активность = Истина;
			СтрокаДвижений.Период 	  = Источник.Ссылка.Дата;
			СтрокаДвижений.Валюта 	  = СтрокаТаблицы.ВалютаДокументаБУ;
			СтрокаДвижений.Сумма 	  = СтрокаТаблицы.СуммаДокументаБУ;
			
			КурсыДокумента = СтруктураКурсыВалют.Документ;
			КурсыДокумента.Валюта 	 = СтрокаТаблицы.ВалютаДокументаБУ;
			КурсыДокумента.Курс	  	 = СтрокаТаблицы.КурсВзаиморасчетовДокументаБУ;
			КурсыДокумента.Кратность = СтрокаТаблицы.КратностьВзаиморасчетовДокументаБУ;
			
			// Заполним суммы
			бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвижений,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	// По регистру бит_ПланируемыеЗатраты
	НаборЗаписей.мПериод          = Источник.Дата;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	
	НаборЗаписей.ВыполнитьРасход();
	НаборЗаписей.Записать();
	
	// По регистру бит_НезапланированныеРасходы
	НаборЗаписейНезапланированныеРасходы.мПериод          = Источник.Дата;
	НаборЗаписейНезапланированныеРасходы.мТаблицаДвижений = ТаблицаДвиженийНезапланированныеРасходы;
	
	НаборЗаписейНезапланированныеРасходы.ВыполнитьДвижения();
	НаборЗаписейНезапланированныеРасходы.Записать();
	
	// Установим статус заявки и расходной позиции.
	
	ТаблицаЗатраты.Свернуть("Заявка, ДокументПланирования","Сумма");
	
	Для каждого СтрокаТаблицы Из ТаблицаЗатраты Цикл
		
		// Изменим статус заявки
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заявка) Тогда
			
			ЗатратыСтруктура = ПолучитьЗатратыПоЗаявке(СтрокаТаблицы.Заявка, Источник.Ссылка);
			
			СтруктураСтатус = бит_Визирование.ПолучитьСтатусОбъекта(СтрокаТаблицы.Заявка);
			
			ВсеВизыПолучены = бит_Визирование.ВизыПолучены(СтрокаТаблицы.Заявка);
			
			ОбъектЗаявка = СтрокаТаблицы.Заявка.ПолучитьОбъект();
			ОбъектЗаявка.УстановитьСтатус(РежимЗаписиДокумента.Проведение,ЗатратыСтруктура,Ложь);
			
			
			НовоеСостояниеЗатрат = ОпределитьСостояниеЗатрат(ЗатратыСтруктура);
			
			
			Если НовоеСостояниеЗатрат <> СтруктураСтатус.ОплатаСтатус Тогда
				
				бит_Визирование.УстановитьСтатусОбъекта(СтрокаТаблицы.Заявка
														,Перечисления.бит_ВидыСтатусовОбъектов.СостояниеОплаты
														,НовоеСостояниеЗатрат
														,СтруктураСтатус.ОплатаСтатус
														,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
														,ТекущаяДата());
				
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		
	КонецЦикла; // По таблице затрат
	
	// Обрабатываем ситуацию удаления расходной позиции	из дополнительных аналитик.
	Если Источник.ДополнительныеСвойства.Свойство("бит_РасходнаяПозицияУдаленная") Тогда
		
		ТекущаяЗаявка = Источник.ДополнительныеСвойства.бит_РасходнаяПозицияУдаленная.ДокументОснование;
		
		ЗатратыСтруктура = ПолучитьЗатратыПоЗаявке(ТекущаяЗаявка, Источник.Ссылка);
		
		СтруктураСтатус = бит_Визирование.ПолучитьСтатусОбъекта(ТекущаяЗаявка);
		
		ВсеВизыПолучены = бит_Визирование.ВизыПолучены(ТекущаяЗаявка);
		
		ОбъектЗаявка = ТекущаяЗаявка.ПолучитьОбъект();
		ОбъектЗаявка.УстановитьСтатус(РежимЗаписиДокумента.Проведение,ЗатратыСтруктура,Ложь);
		
		НовоеСостояниеЗатрат = ОпределитьСостояниеЗатрат(ЗатратыСтруктура);
		
		
		Если НовоеСостояниеЗатрат <> СтруктураСтатус.ОплатаСтатус Тогда
			
			бит_Визирование.УстановитьСтатусОбъекта(ТекущаяЗаявка
													,Перечисления.бит_ВидыСтатусовОбъектов.СостояниеОплаты
													,НовоеСостояниеЗатрат
													,СтруктураСтатус.ОплатаСтатус
													,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
													,ТекущаяДата());
			
			
		КонецЕсли; 
		
		// Изменим статус расходной позиции
		ОбъектПозиция = Источник.ДополнительныеСвойства.бит_РасходнаяПозицияУдаленная.ПолучитьОбъект();
		ОбъектПозиция.УстановитьСтатус();
			
	КонецЕсли; // Удаление расходной позиции
	
	Для каждого СтрокаТаблицы Из ТаблицаЗатраты Цикл
		
		// Изменим статус расходной позиции
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заявка) Тогда
			ОбъектПозиция = СтрокаТаблицы.ДокументПланирования.ПолучитьОбъект();
			ОбъектПозиция.УстановитьСтатус();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик подписки на события "бит_ОбработкаУдаленияПроведенияЗатраты".
// 
Процедура бит_ОбработкаУдаленияПроведенияЗатратыОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 			
	
	Если НЕ Отказ Тогда
	
		ТаблицаЗатраты = СформироватьТаблицуПоЗатратам(Источник.Ссылка);
		ТаблицаЗатраты.Свернуть("Заявка, ДокументПланирования","Сумма");
		
		
		Для каждого СтрокаТаблицы Из ТаблицаЗатраты Цикл
			// Изменим статус заявки
			Если ЗначениеЗаполнено(СтрокаТаблицы.Заявка) Тогда
				
				ЗатратыСтруктура = ПолучитьЗатратыПоЗаявке(СтрокаТаблицы.Заявка);
				
				СтруктураСтатус = бит_Визирование.ПолучитьСтатусОбъекта(СтрокаТаблицы.Заявка);
				
	            ВсеВизыПолучены = бит_Визирование.ВизыПолучены(СтрокаТаблицы.Заявка);
				
				
				ОбъектЗаявка = СтрокаТаблицы.Заявка.ПолучитьОбъект();
				ОбъектЗаявка.УстановитьСтатус(РежимЗаписиДокумента.Проведение,ЗатратыСтруктура,Ложь);
				
																		 
				НовоеСостояниеЗатрат = ОпределитьСостояниеЗатрат(ЗатратыСтруктура);
																		 
				
				
				Если НовоеСостояниеЗатрат <> СтруктураСтатус.ОплатаСтатус Тогда
					
		                бит_Визирование.УстановитьСтатусОбъекта(СтрокаТаблицы.Заявка
																 ,Перечисления.бит_ВидыСтатусовОбъектов.СостояниеОплаты
																 ,НовоеСостояниеЗатрат
																 ,СтруктураСтатус.ОплатаСтатус
																 ,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																 ,ТекущаяДата());
					
				
				КонецЕсли; 
				
				
			КонецЕсли; 
			
		КонецЦикла; // По таблице затрат
		
		// Обрабатываем ситуацию удаления расходной позиции	из дополнительных аналитик.
		Если Источник.ДополнительныеСвойства.Свойство("бит_РасходнаяПозицияУдаленная") Тогда
			
			ТекущаяЗаявка = Источник.ДополнительныеСвойства.бит_РасходнаяПозицияУдаленная.ДокументОснование;
			
			ЗатратыСтруктура = ПолучитьЗатратыПоЗаявке(ТекущаяЗаявка);
			
			СтруктураСтатус = бит_Визирование.ПолучитьСтатусОбъекта(ТекущаяЗаявка);
			
			ВсеВизыПолучены = бит_Визирование.ВизыПолучены(ТекущаяЗаявка);
			
			ОбъектЗаявка = ТекущаяЗаявка.ПолучитьОбъект();
			ОбъектЗаявка.УстановитьСтатус(РежимЗаписиДокумента.Проведение,ЗатратыСтруктура,Ложь);
			
			НовоеСостояниеЗатрат = ОпределитьСостояниеЗатрат(ЗатратыСтруктура);
			
			Если НовоеСостояниеЗатрат <> СтруктураСтатус.ОплатаСтатус Тогда
				
				бит_Визирование.УстановитьСтатусОбъекта(ТекущаяЗаявка
														,Перечисления.бит_ВидыСтатусовОбъектов.СостояниеОплаты
														,НовоеСостояниеЗатрат
														,СтруктураСтатус.ОплатаСтатус
														,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
														,ТекущаяДата());
				
				
			КонецЕсли; 
			
			// Изменим статус расходной позиции
			ОбъектПозиция = Источник.ДополнительныеСвойства.бит_РасходнаяПозицияУдаленная.ПолучитьОбъект();
			ОбъектПозиция.УстановитьСтатус();
			
		КонецЕсли; // Удаление расходной позиции
		
		Для каждого СтрокаТаблицы Из ТаблицаЗатраты Цикл
			
			// Изменим статус расходной позиции
			Если ЗначениеЗаполнено(СтрокаТаблицы.Заявка) Тогда
				ОбъектПозиция = СтрокаТаблицы.ДокументПланирования.ПолучитьОбъект();
				ОбъектПозиция.УстановитьСтатус();
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли; // Не отказ
	
КонецПроцедуры

// Процедура обработчик подписки "бит_ПередЗаписьюСправочникаДоговорыКонтрагентов" 
// на событие "ПередЗаписью".
// Выполняется синхронизация пометки на удаления у файлов и проверка заполненности дополнительных реквизитов.
// 
// Параметры:
//  Источник - СправочникОбъект.ДоговорыКонтрагентов.
//  Отказ 	 - Булево.
// 
Процедура бит_ПередЗаписьюСправочникаДоговорыКонтрагентовПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли; 			
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(Источник);
	
	Если Не Источник.ЭтоНовый() И Не Источник.ПометкаУдаления = Источник.Ссылка.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
		
	// Заголовок для сообщений об ошибках записи.
	Заголовок = "Запись договора контрагента """ + СокрЛП(Источник) + """: ";
	
	// Выполним контроль типовых реквизитов влияющих на выбор реквизитов БИТ.
	Если НЕ Источник.бит_СтатьиОборотов.Количество() = 0
		И НЕ Источник.Ссылка.Пустая()
		И НЕ Источник.ДополнительныеСвойства.Свойство("мПрограммнаяЗапись") Тогда
		
		Если НЕ Источник.ВидДоговора = Источник.Ссылка.ВидДоговора Тогда
			
			ТекстСообщения = НСтр("ru='Изменился вид договора контрагента. Список статей оборотов в дополнительных реквизитах БИТ будет очищен'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник);
			
			Источник.бит_СтатьиОборотов.Очистить();
			Источник.бит_ОсновнаяСтатьяОборотов	   = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			Источник.бит_ОсновнаяСтатьяОборотовБДР = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			
		ИначеЕсли НЕ Источник.Организация = Источник.Ссылка.Организация Тогда
			
			ТекстСообщения = НСтр("ru='Изменилась организация договора контрагента. Список статей оборотов в дополнительных реквизитах БИТ будет очищен'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник);
			
			Источник.бит_СтатьиОборотов.Очистить();
			Источник.бит_ОсновнаяСтатьяОборотов	   = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			Источник.бит_ОсновнаяСтатьяОборотовБДР = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	// Статьи по-умолчанию могут устанавливаться "групповым изменением". 
	// Реквизит будет содержать значение, если оно не противоречит логике выше.
	Если ЗначениеЗаполнено(Источник.бит_ОсновнаяСтатьяОборотов) Тогда
		НайденныеСтроки = Источник.бит_СтатьиОборотов.НайтиСтроки(Новый Структура("СтатьяОборотов", Источник.бит_ОсновнаяСтатьяОборотов));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Источник.бит_СтатьиОборотов.Добавить();
			НоваяСтрока.СтатьяОборотов = Источник.бит_ОсновнаяСтатьяОборотов;
			НоваяСтрока.РасходДоход = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.бит_ОсновнаяСтатьяОборотов, "РасходДоход")
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Источник.бит_ОсновнаяСтатьяОборотовБДР) Тогда
		НайденныеСтроки = Источник.бит_СтатьиОборотов.НайтиСтроки(Новый Структура("СтатьяОборотов", Источник.бит_ОсновнаяСтатьяОборотовБДР));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Источник.бит_СтатьиОборотов.Добавить();
			НоваяСтрока.СтатьяОборотов = Источник.бит_ОсновнаяСтатьяОборотовБДР;
			НоваяСтрока.РасходДоход = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.бит_ОсновнаяСтатьяОборотовБДР, "РасходДоход")
		КонецЕсли; 
	КонецЕсли; 
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	СтруктураОбязательныхПолей.Вставить("СтатьяОборотов");
	
	// Теперь вызовем общую процедуру проверки.
	бит_РаботаСМетаданными.ПроверитьЗаполнениеТабличнойЧасти(Источник, "бит_СтатьиОборотов", 
		СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	Если НЕ Источник.бит_СтатьиОборотов.Количество() = 0 
		И (НЕ ЗначениеЗаполнено(Источник.бит_ОсновнаяСтатьяОборотов) 
		ИЛИ НЕ ЗначениеЗаполнено(Источник.бит_ОсновнаяСтатьяОборотовБДР))Тогда
		
		// Если основные статьи не заполнены, заполним их сами случайными значениями из табличной части.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТабСтатьиОборотов", Источник.бит_СтатьиОборотов.Выгрузить());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабСтатьиОборотов.НомерСтроки КАК НомерСтроки,
		|	ТабСтатьиОборотов.СтатьяОборотов КАК СтатьяОборотов
		|ПОМЕСТИТЬ СтатьиОборотов
		|ИЗ
		|	&ТабСтатьиОборотов КАК ТабСтатьиОборотов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатьиОборотов.НомерСтроки КАК НомерСтроки,
		|	СтатьиОборотов.СтатьяОборотов КАК СтатьяОборотов
		|ИЗ
		|	СтатьиОборотов КАК СтатьиОборотов
		|ГДЕ
		|	СтатьиОборотов.СтатьяОборотов.ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДДС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатьиОборотов.НомерСтроки КАК НомерСтроки,
		|	СтатьиОборотов.СтатьяОборотов КАК СтатьяОборотов
		|ИЗ
		|	СтатьиОборотов КАК СтатьиОборотов
		|ГДЕ
		|	СтатьиОборотов.СтатьяОборотов.ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДР)";
		
		Пакет = Запрос.ВыполнитьПакет();
		ВыборкаБДДС = Пакет[1].Выбрать();
		ВыборкаБДР = Пакет[2].Выбрать();
		
		Если ВыборкаБДДС.Следующий() И НЕ ЗначениеЗаполнено(Источник.бит_ОсновнаяСтатьяОборотов) Тогда
			Источник.бит_ОсновнаяСтатьяОборотов = ВыборкаБДДС.СтатьяОборотов;
		КонецЕсли; 
		
		Если ВыборкаБДР.Следующий() И НЕ ЗначениеЗаполнено(Источник.бит_ОсновнаяСтатьяОборотовБДР) Тогда
			Источник.бит_ОсновнаяСтатьяОборотовБДР = ВыборкаБДР.СтатьяОборотов;
		КонецЕсли; 
	КонецЕсли;
			
КонецПроцедуры // бит_ПередЗаписьюСправочникаДоговорыКонтрагентовПередЗаписью()

// Процедура - обработчик подписки на события "бит_ПриКопированииСправочникаДоговорыКонтрагентов".
// 
Процедура бит_ПриКопированииСправочникаДоговорыКонтрагентовПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 			
	
	Если ОбъектКопирования.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Источник.бит_ПроектДоговора 		  = Неопределено;
	Источник.бит_СпособРасчетаФинПлатежей = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииКонтроляСуммИСроковПоДоговорам

// Процедура осуществляет проверку по дате при проведении заявки.
// 
// Параметры:
//  Заявка - ДокументыСсылка.
//  Отказ - Булево.
// 
Процедура ПровестиКонтрольДатыРасходаПоЗаявкам(Заявка, Отказ) Экспорт

	СтруктураПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(Заявка.Организация) Тогда
        СтруктураПараметров.Вставить("Организация", Заявка.Организация);
	КонецЕсли;
	
    Если ЗначениеЗаполнено(Заявка.ЦФО) Тогда
		СтруктураПараметров.Вставить("ЦФО", Заявка.ЦФО);
    КонецЕсли;

    НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Заявка.Дата,,СтруктураПараметров,"Ошибки");

	Если ТипЗнч(Заявка) = Тип("ДокументОбъект.бит_ЗаявкаНаЗатраты") Тогда
		ВариантКонтроля = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтрольДатыРасходаЗаявкиНаЗатраты);
	Иначе
		ВариантКонтроля = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтрольДатыРасходаЗаявкиНаРасходованиеДС);	
	КонецЕсли;
	
	Если ВариантКонтроля <> Перечисления.бит_ВидыКонтроляПоДоговорам.НеКонтролировать И ЗначениеЗаполнено(ВариантКонтроля) Тогда 
		
		ВыполнитьПроверкуДаты(ВариантКонтроля, Заявка.ДоговорКонтрагента, Заявка.ДатаРасхода, Заявка, Отказ);

	КонецЕсли;	

КонецПроцедуры // ПровестиКонтрольДатыПоЗаявкам()

// Функция вычисляет контрольную сумму по проектам договоров.
// 
// Параметры:
//  ПроектДоговора - СправочникСсылка.
//  ДатаПроведения - Дата.
// 
Функция ВычислитьКонтрольныеДатыПоПроектам(ПроектДоговора) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Проект = ПроектДоговора;
	
	МинДата = ?(ЗначениеЗаполнено(ПроектДоговора.ДатаДоговора), ПроектДоговора.ДатаДоговора, Дата(1,1,1));
	МаксДата = ?(ЗначениеЗаполнено(ПроектДоговора.СрокДействия), ПроектДоговора.СрокДействия, Дата(3999,1,1));

	Переход = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ПроектДоговора.Ссылка,
		|	бит_ПроектДоговора.ДатаДоговора КАК ДатаОт,
		|	бит_ПроектДоговора.СрокДействия КАК ДатаДо
		|ИЗ
		|	Документ.бит_ПроектДоговора КАК бит_ПроектДоговора
		|ГДЕ
		|	бит_ПроектДоговора.ОсновнойДоговор = &ПроектДоговора
		|	И бит_ПроектДоговора.ДополняютсяУсловияОсновногоДоговора = ИСТИНА";

		
	ОсновнойПроектДоговора = Документы.бит_ПроектДоговора.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ПроектДоговора.ОсновнойДоговор) Тогда
				
		Запрос.УстановитьПараметр("ПроектДоговора", ПроектДоговора);
		
	ИначеЕсли ЗначениеЗаполнено(ПроектДоговора.ОсновнойДоговор) И ПроектДоговора.ДополняютсяУсловияОсновногоДоговора Тогда
		
		Запрос.УстановитьПараметр("ПроектДоговора", ПроектДоговора.ОсновнойДоговор);
		
		Проект = ПроектДоговора.ОсновнойДоговор;

		МинДата = ?(ЗначениеЗаполнено(ПроектДоговора.ДатаДоговора), ПроектДоговора.ОсновнойДоговор.ДатаДоговора, Дата(1,1,1));
	    МаксДата = ?(ЗначениеЗаполнено(ПроектДоговора.СрокДействия), ПроектДоговора.ОсновнойДоговор.СрокДействия, Дата(3999,1,1));

	ИначеЕсли ЗначениеЗаполнено(ПроектДоговора.ОсновнойДоговор) И Не ПроектДоговора.ДополняютсяУсловияОсновногоДоговора Тогда
				
		Переход = Истина;
		
	КонецЕсли;
	
	Если Не Переход Тогда
		
		РезультатЗапроса = Запрос.Выполнить();

		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл
				
				МинДата = ?(Выборка.ДатаОт < МинДата, Выборка.ДатаОт, МинДата);
				МаксДата = ?(Выборка.ДатаДо > МаксДата, Выборка.ДатаДо, МаксДата);
				
			КонецЦикла;

		КонецЕсли;	
		
	КонецЕсли;
	
	Результат.Вставить("ДатаОт", МинДата);
	Результат.Вставить("ДатаДо", МаксДата);
    Результат.Вставить("ПроектДоговора", Проект);
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;
	
КонецФункции // ВычислитьКонтрольнуюСуммуПоПроектам() 

// Функция вычисляет контрольную сумму по проектам договоров.
// 
// Параметры:
//  ПроектДоговора - СправочникСсылка.
//  ДатаПроведения - Дата.
// 
Функция ВычислитьКонтрольнуюСуммуПоПроектам(ПроектДоговора, ДатаПроведения, ОсновнойПроектДоговора) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	КонтрольнаяСумма = 0;
	
	Переход = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ПроектДоговора.Ссылка,
		|	бит_ПроектДоговора.СуммаВзаиморасчеты КАК Сумма,
		|	бит_ПроектДоговора.ВалютаВзаиморасчетов КАК Валюта
		|ИЗ
		|	Документ.бит_ПроектДоговора КАК бит_ПроектДоговора
		|ГДЕ
		|	бит_ПроектДоговора.ОсновнойДоговор = &ПроектДоговора
		|	И бит_ПроектДоговора.ДополняютсяУсловияОсновногоДоговора = ИСТИНА";

		
	ОсновнойПроектДоговора = Документы.бит_ПроектДоговора.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ПроектДоговора.ОсновнойДоговор) Тогда
				
		Запрос.УстановитьПараметр("ПроектДоговора", ПроектДоговора);
		
		ОсновнойПроектДоговора = ПроектДоговора;
		
	ИначеЕсли ЗначениеЗаполнено(ПроектДоговора.ОсновнойДоговор) И ПроектДоговора.ДополняютсяУсловияОсновногоДоговора Тогда
		
		Запрос.УстановитьПараметр("ПроектДоговора", ПроектДоговора.ОсновнойДоговор);
		
		ОсновнойПроектДоговора = ПроектДоговора.ОсновнойДоговор;
		
	ИначеЕсли ЗначениеЗаполнено(ПроектДоговора.ОсновнойДоговор) И Не ПроектДоговора.ДополняютсяУсловияОсновногоДоговора Тогда
		
		ОсновнойПроектДоговора = ПроектДоговора;

		Переход = Истина;
		
	КонецЕсли;
	
	// Изменение кода. Начало. 19.04.2017{{
	СтруктураДанных   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнойПроектДоговора, "КурсВзаиморасчетов, КратностьВзаиморасчетов, СуммаВзаиморасчеты"); 
	КонтрольнаяСумма  = СтруктураДанных.СуммаВзаиморасчеты * СтруктураДанных.КурсВзаиморасчетов / СтруктураДанных.КратностьВзаиморасчетов;
    // Изменение кода. Конец. 19.04.2017}}
	
	Если Не Переход Тогда
		
		РезультатЗапроса = Запрос.Выполнить();

		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл
				
				КурсВалютыВыборка = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаПроведения, Новый Структура("Валюта", Выборка.Валюта)).Курс;
				
				КонтрольнаяСумма = КонтрольнаяСумма + Выборка.Сумма * КурсВалютыВыборка;
				
			КонецЦикла;

		КонецЕсли;	
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат КонтрольнаяСумма;
	
КонецФункции // ВычислитьКонтрольнуюСуммуПоПроектам() 

// Функция вычисляет контролируемую сумму по проектам договоров.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
Функция ВычислитьКонтролируемуюСуммуПоПроектам(ПроектДоговора, ДоговорКонтрагента, ОсновнойПроектДоговора, СписокДоговоров) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Результат = Новый Структура;
	Результат.Вставить("СуммаБДДС",0);
	Результат.Вставить("СуммаБДР",0);
  
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыборкаДанных.СуммаБДДС КАК СуммаБДДС,
		|	ВыборкаДанных.СуммаБДР КАК СуммаБДР
		|ИЗ
		|	(ВЫБРАТЬ
		|		бит_ГрафикиДоговоровОбороты.СуммаРеглОборот КАК СуммаБДДС,
		|		0 КАК СуммаБДР
		|	ИЗ
		|		РегистрНакопления.бит_ГрафикиДоговоров.Обороты КАК бит_ГрафикиДоговоровОбороты
		|	ГДЕ
		|		бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента = &ПроектДоговора
		|		И бит_ГрафикиДоговоровОбороты.ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДДС)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		бит_ГрафикиДоговоровОбороты.СуммаРеглОборот
		|	ИЗ
		|		РегистрНакопления.бит_ГрафикиДоговоров.Обороты КАК бит_ГрафикиДоговоровОбороты
		|	ГДЕ
		|		бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента = &ПроектДоговора
		|		И бит_ГрафикиДоговоровОбороты.ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДР)) КАК ВыборкаДанных";
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И Не ЗначениеЗаполнено(СписокДоговоров) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		                            "бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента = &ПроектДоговора",
									"(бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента = &ПроектДоговора
		                            |    ИЛИ бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента = &ДоговорКонтрагента)");
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		
	ИначеЕсли ЗначениеЗаполнено(СписокДоговоров) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		                            "бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента = &ПроектДоговора",
									"(бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента = &ПроектДоговора
		                            |    ИЛИ бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента В (&СписокДоговоров))");
		Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнойПроектДоговора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		                            "бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента = &ПроектДоговора",
									"(ВЫБОР
	                                | КОГДА бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента ССЫЛКА Документ.бит_ПроектДоговора
		                            |     ТОГДА бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента.ОсновнойДоговор = &ОсновнойПроектДоговора
                                    | КОНЕЦ
		                            |    ИЛИ бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента = &ОсновнойПроектДоговора)");
		Запрос.УстановитьПараметр("ОсновнойПроектДоговора", ОсновнойПроектДоговора);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПроектДоговора", ПроектДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.СуммаБДДС = Выборка.СуммаБДДС;
		Результат.СуммаБДР = Выборка.СуммаБДР;
	КонецЦикла;
		
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;
	
КонецФункции // ВычислитьКонтролируемуюСуммуПоПроектам()

// Процедура проводит контроль сумм по договору.
// 
// Параметры:
//  Объект - ДокументОбъект.
//  Отказ - Булево.
// 
Процедура ПровестиКонтрольСумм(Объект, Отказ) Экспорт

	СтруктураПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
        СтруктураПараметров.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
    Если ЗначениеЗаполнено(Объект.ЦФО) Тогда
		СтруктураПараметров.Вставить("ЦФО", Объект.ЦФО);
    КонецЕсли;

    НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Объект.Дата,,СтруктураПараметров,"Ошибки");

	ВариантКонтроля = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтрольПревышенияСуммыПоДоговору);	

	Если ВариантКонтроля <> Перечисления.бит_ВидыКонтроляПоДоговорам.НеКонтролировать И ЗначениеЗаполнено(ВариантКонтроля) Тогда 
		
		ОсновнойПроектДоговора = Неопределено;
		
		Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
			
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			
				КурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов)).Курс;
				КонтрольнаяСумма = Объект.ДоговорКонтрагента.бит_СуммаДоговора * КурсВалюты;
				
				ДоговорКонтрагента = Объект.ДоговорКонтрагента;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Объект.ПроектДоговора) Тогда
    			КонтрольнаяСумма = ВычислитьКонтрольнуюСуммуПоПроектам(Объект.ПроектДоговора, Объект.Дата, ОсновнойПроектДоговора);
    			
    			ДоговорКонтрагента = НайтиДоговорКонтрагентаПоПроектуДоговора(Объект.ПроектДоговора);
    			
    		ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорКонтрагента.бит_ПроектДоговора) Тогда
    			КонтрольнаяСумма = ВычислитьКонтрольнуюСуммуПоПроектам(Объект.ДоговорКонтрагента.бит_ПроектДоговора, Объект.Дата, ОсновнойПроектДоговора);
    			
    			ДоговорКонтрагента = Объект.ДоговорКонтрагента;
    			
    		ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
    			
    			КурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов)).Курс;
    			КонтрольнаяСумма = Объект.ДоговорКонтрагента.бит_СуммаДоговора * КурсВалюты;
    			
    			ДоговорКонтрагента = Объект.ДоговорКонтрагента;
    			
    		Иначе
    			
    			Возврат;
    			
            КонецЕсли;
            
        КонецЕсли;
		
		СписокДоговоров        = Неопределено;
		
		Если ЗначениеЗаполнено(ОсновнойПроектДоговора) Тогда
			// ОсновнойПроектДоговора = Объект.ПроектДоговора.ОсновнойДоговор;
			СписокДоговоров = НайтиВсеДоговораКонтрагентов(ОсновнойПроектДоговора);
		КонецЕсли;
		
		// Вычисление контролиерумых сумм по графику платежей (бддс) и графику начислений (бдр).
		СтруктураКонтролируемыхСумм = ВычислитьКонтролируемуюСуммуПоПроектам(Объект.ПроектДоговора, ДоговорКонтрагента, ОсновнойПроектДоговора, СписокДоговоров);
		СуммаБДДС = СтруктураКонтролируемыхСумм.СуммаБДДС;
		СуммаБДР  = СтруктураКонтролируемыхСумм.СуммаБДР;
		
		КонтрольнаяСумма = Окр(КонтрольнаяСумма, 2);
		
		// Проверим превышение по сумме БДДС.
		ПроверкаПоКонтрольнойСумме(КонтрольнаяСумма, СуммаБДДС, Объект.Ссылка, ВариантКонтроля, НСтр("ru = 'графику платежей'"), Отказ);
		
		// Проверим превышение по сумме БДР.
		ПроверкаПоКонтрольнойСумме(КонтрольнаяСумма, СуммаБДР, Объект.Ссылка, ВариантКонтроля, НСтр("ru = 'графику начислений'"), Отказ);

	КонецЕсли;	
	
КонецПроцедуры // ПровестиКонтрольСумм()

// Процедура осуществляет проверку суммы при проведении заявки.
// 
// Параметры:
//  Заявка - ДокументыСсылка.
//  Отказ - Булево.
// 
Процедура ПровестиКонтрольСуммПоЗаявкам(Заявка, Отказ) Экспорт

	СтруктураПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(Заявка.Организация) Тогда
        СтруктураПараметров.Вставить("Организация", Заявка.Организация);
	КонецЕсли;
	
    Если ЗначениеЗаполнено(Заявка.ЦФО) Тогда
		СтруктураПараметров.Вставить("ЦФО", Заявка.ЦФО);
    КонецЕсли;

    НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Заявка.Дата,,СтруктураПараметров,"Ошибки");

	Если ТипЗнч(Заявка) = Тип("ДокументОбъект.бит_ЗаявкаНаЗатраты") Тогда
		ВариантКонтроляСумма = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтрольПревышенияСуммыПоДоговоруДляЗаявокНаЗатраты);
		ВариантКонтроляДата  = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтрольДатыРасходаЗаявкиНаЗатраты);
		
	Иначе
		ВариантКонтроляСумма = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтрольПревышенияСуммыПоДоговоруДляЗаявок);
		ВариантКонтроляДата  = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтрольДатыРасходаЗаявкиНаРасходованиеДС);

	КонецЕсли;
	
	// контроль превышения суммы по договору
	Если ЗначениеЗаполнено(ВариантКонтроляСумма) И ВариантКонтроляСумма <> Перечисления.бит_ВидыКонтроляПоДоговорам.НеКонтролировать Тогда 
		
		Если ТипЗнч(Заявка) = Тип("ДокументОбъект.бит_ЗаявкаНаЗатраты") Тогда
			
			ВыполнитьПроверкуСуммыПоЗатратам(ВариантКонтроляСумма, Заявка.ДоговорКонтрагента, Заявка.Дата, Отказ);
			
		Иначе	
			
			Если Заявка.Распределение.Количество() > 1 Тогда
				
				Для Каждого Элем Из Заявка.Распределение Цикл
					
					ВыполнитьПроверкуПоДоговору(ВариантКонтроляСумма, Элем.ДоговорКонтрагента, Заявка.Дата, Отказ);
					
				КонецЦикла;
				
			Иначе
								
				ВыполнитьПроверкуПоДоговору(ВариантКонтроляСумма, Заявка.ДоговорКонтрагента, Заявка.Дата, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	

	// Контроль создания заявки вне дат действия договора
	Если ЗначениеЗаполнено(ВариантКонтроляДата) И ВариантКонтроляДата <> Перечисления.бит_ВидыКонтроляПоДоговорам.НеКонтролировать Тогда 
		
		Если ТипЗнч(Заявка) = Тип("ДокументОбъект.бит_ЗаявкаНаЗатраты") Тогда
						
			ВыполнитьПроверкуДаты(ВариантКонтроляДата, Заявка.ДоговорКонтрагента, Заявка.ДатаРасхода, Заявка, Отказ);

		Иначе	
			
			Если Заявка.Распределение.Количество() > 1 Тогда
				
				Для Каждого Элем Из Заявка.Распределение Цикл
					
					ВыполнитьПроверкуДаты(ВариантКонтроляДата, Элем.ДоговорКонтрагента, Заявка.ДатаРасхода, Заявка, Отказ);
					
				КонецЦикла;
				
			Иначе
				
				ВыполнитьПроверкуДаты(ВариантКонтроляДата, Заявка.ДоговорКонтрагента, Заявка.ДатаРасхода, Заявка, Отказ);
								
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ПровестиКонтрольСуммПоЗаявкам()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Процедура добавляет в список вид договора с указанным именем, при условии, 
// что в системе существует значение перечисления ВидыДоговоров с данным именем. Данная проверка актуальна, 
// т.к. в УПП/КА и БП состав значений перечисления ВидыДоговоров различный. 
// 
// Параметры:
//  СписокВидыДоговоров - СписокЗначений.
//  ИмяВидаДоговора - Строка.
// 
Процедура ДобавитьВидДоговора(СписокВидыДоговоров, ИмяВидаДоговора) Экспорт
	
	Если НЕ Метаданные.Перечисления.ВидыДоговоровКонтрагентов.ЗначенияПеречисления.Найти(ИмяВидаДоговора) = Неопределено Тогда
		
		СписокВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов[ИмяВидаДоговора]);
		
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьВидДоговора()

// Выполняется проверка принадлежности вида договора к определенному значению.
// 
Функция ЭтоВидДоговораСКомиссионеромНаЗакупку(ВидДоговора) Экспорт
	
	ИмяЗначения = бит_РаботаСМетаданными.ПолучитьИмяЗначенияПеречисления(Перечисления.ВидыДоговоровКонтрагентов, ВидДоговора);
	Результат = ?(ИмяЗначения = "СКомиссионеромНаЗакупку", Истина,  Ложь);
	
	Возврат Результат;
	
КонецФункции

// Выполняется проверка принадлежности вида договора к определенному значению.
// 
Функция ЭтоВидДоговораСКомитентомНаЗакупку(ВидДоговора) Экспорт
	
	ИмяЗначения = бит_РаботаСМетаданными.ПолучитьИмяЗначенияПеречисления(Перечисления.ВидыДоговоровКонтрагентов, ВидДоговора);
	Результат = ?(ИмяЗначения = "СКомитентомНаЗакупку", Истина,  Ложь);	
	
	Возврат Результат;
	
КонецФункции

// Процедура добавляет в переданный список виды договоров на закупку.
// 
Процедура ДобавитьВидыДоговоровНаЗакупку(СписокВидов, СКомиссионером=Истина, СКомитентом=Истина) Экспорт
	
	Если СКомиссионером Тогда
		ДобавитьВидДоговора(СписокВидов, "СКомиссионеромНаЗакупку");
	КонецЕсли;
	
	Если СКомитентом Тогда
		ДобавитьВидДоговора(СписокВидов, "СКомитентомНаЗакупку");		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик подписки бит_ОбработкаЗаполненияДоговорКонтрагента.
// Выполняет заполнение реквизита "Ответственный" элемента справочника "ДоговорыКонтрагентов".
// 
Процедура бит_ОбработкаЗаполненияДоговорКонтрагентаОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	КонецЕсли; 		

	Если НЕ Источник.ЭтоГруппа Тогда
		
		РеквизитыДог = Источник.Метаданные().Реквизиты;
		
		Если РеквизитыДог.Найти("бит_ВысокийПриоритетПриЗаполненииАналитик") <> Неопределено Тогда
			СтруктураПараметров = Новый Структура("Организация", Источник.Организация);
			НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ТекущаяДата() , , СтруктураПараметров, "Ошибки");
			
			Если бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, "УстанавливатьВДоговорахВысокийПриоритетЗаполненияАналитик") Тогда			
				Источник.бит_ВысокийПриоритетПриЗаполненииАналитик = Истина;			
			КонецЕсли;
		КонецЕсли;

		Если РеквизитыДог.Найти("бит_Ответственный") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Источник.бит_Ответственный) Тогда
				ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
				Источник.бит_Ответственный = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновнойОтветственный", ТекПользователь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // бит_ОбработкаЗаполненияДоговорКонтрагентаОбработкаЗаполнения()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция пересчитывает сумму документа по табличным частям.
// 
Функция ПересчетСуммТабличныхЧастейДокумента(ДокументЗатрат, МетаданныеДокумента)

	БДРПланируетсяСНДС = бит_ОбщегоНазначенияПовтИсп.ЗначениеПеременной("бит_БДРПланируетсяСНДС");
	
	СуммаДокумента = 0;
	
	Для каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		Если ТабЧасть.Реквизиты.Найти("Сумма") <> Неопределено Тогда
		
			ИмяТабЧасти = ТабЧасть.Имя;
			
			ДокТЧ = ДокументЗатрат[ИмяТабЧасти].Выгрузить();
			
			Сумма = ДокТЧ.Итог("Сумма");
			
			Если ТабЧасть.Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда
			
				СуммаНДС = ДокТЧ.Итог("СуммаНДС");
				
			Иначе 	
				СуммаНДС = 0;
			КонецЕсли; 
			
			Если БДРПланируетсяСНДС 
				И ДокументЗатрат.СуммаВключаетНДС Тогда
			
				СуммаДокумента = СуммаДокумента + Сумма;
				
			ИначеЕсли БДРПланируетсяСНДС 
				И НЕ ДокументЗатрат.СуммаВключаетНДС Тогда
				
				СуммаДокумента = СуммаДокумента + Сумма + СуммаНДС;
				
			ИначеЕсли НЕ БДРПланируетсяСНДС 
				И ДокументЗатрат.СуммаВключаетНДС Тогда
				
				СуммаДокумента = СуммаДокумента + Сумма - СуммаНДС;
				
			ИначеЕсли НЕ БДРПланируетсяСНДС 
				И НЕ ДокументЗатрат.СуммаВключаетНДС Тогда
				
				СуммаДокумента = СуммаДокумента + Сумма;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Для документа Поступление доп расходов к сумме по табличной части добавляем сумму документа.
	Если МетаданныеДокумента.Имя = "ПоступлениеДопРасходов" Тогда
	
		Если БДРПланируетсяСНДС 
			И ДокументЗатрат.СуммаВключаетНДС Тогда
		
			СуммаДокумента = СуммаДокумента + ДокументЗатрат.Сумма;
			
		ИначеЕсли БДРПланируетсяСНДС 
			И НЕ ДокументЗатрат.СуммаВключаетНДС Тогда
			
			СуммаДокумента = СуммаДокумента + ДокументЗатрат.Сумма + ДокументЗатрат.СуммаНДС;
			
		ИначеЕсли НЕ БДРПланируетсяСНДС 
			И ДокументЗатрат.СуммаВключаетНДС Тогда
			
			СуммаДокумента = СуммаДокумента + ДокументЗатрат.Сумма - ДокументЗатрат.СуммаНДС;
			
		ИначеЕсли НЕ БДРПланируетсяСНДС 
			И НЕ ДокументЗатрат.СуммаВключаетНДС Тогда
			
			СуммаДокумента = СуммаДокумента + ДокументЗатрат.Сумма;
			
		КонецЕсли; 
			
	КонецЕсли; 
	
	Возврат СуммаДокумента;
	
КонецФункции // ПересчетСуммТабличныхЧастейДокумента()

// Процедура заполняет параметры финансового договора в соответствии с параметрами проекта договора.
// 
// Параметры:
// 	Договор - СправочникСсылка.ДоговорКонтрагента
// 	ПроектДоговора - ДокументСсылка.бит_ПроектДоговора.
// 
Процедура ЗаполнитьЗначенияПараметровФинансовогоДоговора(Договор, ПроектДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.СоставляющаяПлатежа,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.Параметр,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
	|ГДЕ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента = &ПроектДоговора";
	
	Запрос.УстановитьПараметр("ПроектДоговора", ПроектДоговора);
	
	Результат = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.бит_ЗначенияПараметровФинансовыхДоговоров.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(Договор, Истина);
	
	НаборЗаписей.Прочитать();
	
	ТаблицаДляЗагрузки = Результат.Выгрузить();
	ТаблицаДляЗагрузки.ЗаполнитьЗначения(Договор, "ДоговорКонтрагента");
	
	НаборЗаписей.Загрузить(ТаблицаДляЗагрузки);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры	

Процедура ЗаполнитьНоминальныеСтавкиДоговораИзПроекта(Договор, ПроектДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_му_НоминальныеСтавки.Период,
	|	бит_му_НоминальныеСтавки.ДоговорКонтрагента,
	|	бит_му_НоминальныеСтавки.Ставка,
	|	бит_му_НоминальныеСтавки.ДополнительнаяСоставляющая
	|ИЗ
	|	РегистрСведений.бит_му_НоминальныеСтавки КАК бит_му_НоминальныеСтавки
	|ГДЕ
	|	бит_му_НоминальныеСтавки.ДоговорКонтрагента = &ПроектДоговора";
	
	Запрос.УстановитьПараметр("ПроектДоговора", ПроектДоговора);
	
	Результат = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.бит_му_НоминальныеСтавки.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(Договор, Истина);
	
	НаборЗаписей.Прочитать();
	
	ТаблицаДляЗагрузки = Результат.Выгрузить();
	ТаблицаДляЗагрузки.ЗаполнитьЗначения(Договор, "ДоговорКонтрагента");
	
	НаборЗаписей.Загрузить(ТаблицаДляЗагрузки);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Процедура выполняет проверкупревышения контрольной суммы по договору.
// 
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.
//  ДатаПроведения - Дата.
//  Отказ - Булево.
// 
Процедура ВыполнитьПроверкуДаты(ВариантКонтроля, ДоговорКонтрагента, ДатаРасхода, Ссылка, Отказ)

	ОсновнойПроектДоговора = Неопределено;
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента.бит_ПроектДоговора) Тогда
		
		ПериодДействия = ВычислитьКонтрольныеДатыПоПроектам(ДоговорКонтрагента.бит_ПроектДоговора);
		
		ДатаОт = ПериодДействия.ДатаОт;
		ДатаДо = ПериодДействия.ДатаДо;

	Иначе
		
		ДатаОт = ?(ЗначениеЗаполнено(ДоговорКонтрагента.Дата), ДоговорКонтрагента.Дата, Дата(1,1,1));
		ДатаДо = ?(ЗначениеЗаполнено(ДоговорКонтрагента.СрокДействия), ДоговорКонтрагента.СрокДействия, Дата(3999, 1,1));
		
	КонецЕсли; 
		
	Если ДатаОт > ДатаРасхода ИЛИ ДатаДо < ДатаРасхода  Тогда 
		
		ВыводДатаОт = Формат(ДатаОт, "ДФ=dd.MM.yyyy");
		ВыводДатаДо = Формат(ДатаДо, "ДФ=dd.MM.yyyy");
		
		ТекстПредупреждения = НСтр("ru = 'Дата расхода выходит за рамки действия договора ""%3%"". Период действия договора (%1% - %2%).'");
		ТекстПредупреждения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстПредупреждения, ВыводДатаОт, ВыводДатаДо, ДоговорКонтрагента);
		ТекстСообщения 		= ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,"Корректность","Дата расхода",,,ТекстПредупреждения); 

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "ДатаРасхода"); 
		Если ВариантКонтроля = Перечисления.бит_ВидыКонтроляПоДоговорам.Контролировать Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ВыполнитьПроверкуДаты()

Процедура ПроверкаПоКонтрольнойСумме(КонтрольнаяСумма, КонтролируемаяяСумма, ОбъектСсылка, ВариантКонтроля, График, Отказ)

	СуммаПревышения = 0;
	Если КонтрольнаяСумма < КонтролируемаяяСумма Тогда
		СуммаПревышения = КонтролируемаяяСумма - КонтрольнаяСумма;
	КонецЕсли;
	
	Если СуммаПревышения > 0 Тогда 
		
		ТекстПредупреждения = НСтр("ru = 'Сумма по %1 превышает контрольную сумму на %2 руб. 
		                                 |Размер контрольной суммы составляет %3 руб.'");
	    ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, График, СуммаПревышения, КонтрольнаяСумма);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, ОбъектСсылка);
		
		Если ВариантКонтроля = Перечисления.бит_ВидыКонтроляПоДоговорам.Контролировать Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроверкаПоКонтрольнойСумме()
 
// Функция находит все договора по основному проекту договора.
// 
// Параметры:
//  ОсновнойПроектДоговора - ДокументОбъект.ПроектДоговора.
// 
// Возвращаемое значение:
//  Результат - СписокЗначений.
// 
Функция НайтиВсеДоговораКонтрагентов(ОсновнойПроектДоговора)

	Результат = Неопределено;
	
	СписокДоговоров = Новый СписокЗначений;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ПроектДоговора.Ссылка КАК ПроектДоговора
		|ИЗ
		|	Документ.бит_ПроектДоговора КАК бит_ПроектДоговора
		|ГДЕ
		|	(бит_ПроектДоговора.Ссылка = &ОсновнойПроектДоговора
		|			ИЛИ бит_ПроектДоговора.ОсновнойДоговор = &ОсновнойПроектДоговора
		|				И бит_ПроектДоговора.ДополняютсяУсловияОсновногоДоговора = ИСТИНА)";
	
	Запрос.УстановитьПараметр("ОсновнойПроектДоговора", ОсновнойПроектДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДоговорКонтрагента = НайтиДоговорКонтрагентаПоПроектуДоговора(Выборка.ПроектДоговора);
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда				
				СписокДоговоров.Добавить(ДоговорКонтрагента);
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = СписокДоговоров;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НайтиВсеДоговораКонтрагентов()

// Процедура выполняет проверкупревышения контрольной суммы по договору.
// 
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.
//  ДатаПроведения - Дата.
//  Отказ - Булево.
// 
Процедура ВыполнитьПроверкуПоДоговору(ВариантКонтроля, ДоговорКонтрагента, ДатаПроведения, Отказ)

	ОсновнойПроектДоговора = Неопределено;
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента.бит_ПроектДоговора) Тогда
		
		КонтрольнаяСумма = ВычислитьКонтрольнуюСуммуПоПроектам(ДоговорКонтрагента.бит_ПроектДоговора, ДатаПроведения, ОсновнойПроектДоговора);
				
	Иначе
			
		КурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаПроведения, Новый Структура("Валюта", ДоговорКонтрагента.ВалютаВзаиморасчетов)).Курс;
		КонтрольнаяСумма = ДоговорКонтрагента.бит_СуммаДоговора * КурсВалюты;
		
	КонецЕсли; 
	
	СписокДоговоров = Неопределено;
	
	Если ЗначениеЗаполнено(ОсновнойПроектДоговора) Тогда
		СписокДоговоров = НайтиВсеДоговораКонтрагентов(ОсновнойПроектДоговора);
	КонецЕсли;
	
	// Вычислим контролируемую сумму по договору.
	КонтролируемаяСумма = ВычислитьКонтролируемуюСуммуПоЗаявкам(ДоговорКонтрагента, СписокДоговоров);

	СуммаПревышения = 0;
	Если КонтрольнаяСумма < КонтролируемаяСумма Тогда
		СуммаПревышения = КонтролируемаяСумма - КонтрольнаяСумма;
	КонецЕсли;
	
	Если СуммаПревышения > 0 Тогда 
		
		ТекстПредупреждения = НСтр("ru = 'Сумма по договору ""%1%"" превышает контрольную сумму на %2% руб. Размер контрольной суммы составляет %3% руб.'");
		ТекстПредупреждения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстПредупреждения, ДоговорКонтрагента, СуммаПревышения, КонтрольнаяСумма);

		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстПредупреждения);
		
		Если ВариантКонтроля = Перечисления.бит_ВидыКонтроляПоДоговорам.Контролировать Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ВыполнитьПроверкуПоДоговору()

// Функция вычисляет контролируемую сумму по заявкам. 
// 
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.
//  СписокДоговоров - Список значение.
// 
Функция ВычислитьКонтролируемуюСуммуПоЗаявкам(ДоговорКонтрагента, СписокДоговоров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(бит_ПланируемыйРасходДенежныхСредствОбороты.СуммаРеглПриход, 0)) КАК СуммаПриход
		|ПОМЕСТИТЬ ОбщиеДанные
		|ИЗ
		|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(, , Регистратор, ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредств) КАК бит_ПланируемыйРасходДенежныхСредствОбороты
		|ГДЕ
		|	бит_ПланируемыйРасходДенежныхСредствОбороты.Регистратор ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредств
		|	И &Условие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(бит_ПланируемыйРасходДенежныхСредствОбороты.СуммаРеглРасход, 0)) КАК СуммаРасход
		|ПОМЕСТИТЬ ДанныеПоДокументамЗакрытия
		|ИЗ
		|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредств
		|				ИЛИ ДокументПланирования ССЫЛКА Документ.бит_ПлатежнаяПозиция) КАК бит_ПланируемыйРасходДенежныхСредствОбороты
		|ГДЕ
		|	бит_ПланируемыйРасходДенежныхСредствОбороты.Регистратор ССЫЛКА Документ.бит_ЗакрытиеЗаявок
		|	И &Условие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбщиеДанные.СуммаПриход - ВЫБОР
		|		КОГДА ДанныеПоДокументамЗакрытия.СуммаРасход ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ ДанныеПоДокументамЗакрытия.СуммаРасход
		|	КОНЕЦ КАК СуммаРезультат
		|ИЗ
		|	ОбщиеДанные КАК ОбщиеДанные,
		|	ДанныеПоДокументамЗакрытия КАК ДанныеПоДокументамЗакрытия";
	
	Если ЗначениеЗаполнено(СписокДоговоров) Тогда
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		                            "&Условие",
									"бит_ПланируемыйРасходДенежныхСредствОбороты.ДоговорКонтрагента В (&СписокДоговоров)");
		Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		                            "&Условие",
									"бит_ПланируемыйРасходДенежныхСредствОбороты.ДоговорКонтрагента = &ДоговорКонтрагента");
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	КонецЕсли;

	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.СуммаРезультат) Тогда
			Результат = Выборка.СуммаРезультат;
		КонецЕсли;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции // ВычислитьКонтролируемуюСуммуПоЗаявкам()

// Процедура выполняет контроль суммы по договору.
// 
// Параметры:
//  Заявка - ДокументСсылка.бит_ЗаявкаНаЗатраты.
// 
Процедура ВыполнитьПроверкуСуммыПоЗатратам(ВариантКонтроля, ДоговорКонтрагента, ДатаПроведения, Отказ)

	 ОсновнойПроектДоговора = Неопределено;
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента.бит_ПроектДоговора) Тогда
		
		КонтрольнаяСумма = ВычислитьКонтрольнуюСуммуПоПроектам(ДоговорКонтрагента.бит_ПроектДоговора, ДатаПроведения, ОсновнойПроектДоговора);
				
	Иначе
			
		КурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаПроведения, Новый Структура("Валюта", ДоговорКонтрагента.ВалютаВзаиморасчетов)).Курс;
		КонтрольнаяСумма = ДоговорКонтрагента.бит_СуммаДоговора * КурсВалюты;
		
	КонецЕсли; 
	
	СписокДоговоров = Неопределено;
	
	Если ЗначениеЗаполнено(ОсновнойПроектДоговора) Тогда
		СписокДоговоров = НайтиВсеДоговораКонтрагентов(ОсновнойПроектДоговора);
	КонецЕсли;
	
	// Вычислим контролируемую сумму по договору.
	КонтролируемаяСумма = ВычислитьКонтролируемуюСуммуПоЗаявкамНаЗатраты(ДоговорКонтрагента, СписокДоговоров);

	СуммаПревышения = 0;
	Если КонтрольнаяСумма < КонтролируемаяСумма Тогда
		СуммаПревышения = КонтролируемаяСумма - КонтрольнаяСумма;
	КонецЕсли;
	
	Если СуммаПревышения > 0 Тогда 
		
		ТекстПредупреждения = НСтр("ru = 'Сумма по договору ""%1%"" превышает контрольную сумму на %2% руб. Размер контрольной суммы составляет %3% руб.'");
		ТекстПредупреждения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстПредупреждения, ДоговорКонтрагента, СуммаПревышения, КонтрольнаяСумма);

		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстПредупреждения);
		
		Если ВариантКонтроля = Перечисления.бит_ВидыКонтроляПоДоговорам.Контролировать Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВыполнитьПроверкуСуммыПоЗатратам()

// Функция вычисляет контролируемую сумму по заявкам на затраты.
// 
// Параметры:
//  ДоговорКонтрагента - Строка.
// 
Функция ВычислитьКонтролируемуюСуммуПоЗаявкамНаЗатраты(ДоговорКонтрагента, СписокДоговоров)

	УстановитьПривилегированныйРежим(Истина);
	
	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(бит_ПланируемыеЗатратыОбороты.СуммаРеглПриход, 0)) КАК СуммаПриход
		|ПОМЕСТИТЬ ОбщиеДанные
		|ИЗ
		|	РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(, , Регистратор, ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаЗатраты) КАК бит_ПланируемыеЗатратыОбороты
		|ГДЕ
		|	бит_ПланируемыеЗатратыОбороты.Регистратор ССЫЛКА Документ.бит_ЗаявкаНаЗатраты
		|	И &Условие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(бит_ПланируемыеЗатратыОбороты.СуммаРеглРасход, 0)) КАК СуммаРасход
		|ПОМЕСТИТЬ ДанныеПоДокументамЗакрытия
		|ИЗ
		|	РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаЗатраты
		|				ИЛИ ДокументПланирования ССЫЛКА Документ.бит_РасходнаяПозиция) КАК бит_ПланируемыеЗатратыОбороты
		|ГДЕ
		|	бит_ПланируемыеЗатратыОбороты.Регистратор ССЫЛКА Документ.бит_ЗакрытиеЗаявок
		|	И &Условие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбщиеДанные.СуммаПриход - ВЫБОР
		|		КОГДА ДанныеПоДокументамЗакрытия.СуммаРасход ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ ДанныеПоДокументамЗакрытия.СуммаРасход
		|	КОНЕЦ КАК СуммаРезультат
		|ИЗ
		|	ОбщиеДанные КАК ОбщиеДанные,
		|	ДанныеПоДокументамЗакрытия КАК ДанныеПоДокументамЗакрытия";
	
	Если ЗначениеЗаполнено(СписокДоговоров) Тогда
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		                            "&Условие",
									"бит_ПланируемыеЗатратыОбороты.ДоговорКонтрагента В (&СписокДоговоров)");
		Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		                            "&Условие",
									"бит_ПланируемыеЗатратыОбороты.ДоговорКонтрагента = &ДоговорКонтрагента");
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	КонецЕсли;

	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.СуммаРезультат) Тогда
			Результат = Выборка.СуммаРезультат;
		КонецЕсли;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции // ВычислитьКонтролируемуюСуммуПоЗаявкамНаЗатраты()

#КонецОбласти
