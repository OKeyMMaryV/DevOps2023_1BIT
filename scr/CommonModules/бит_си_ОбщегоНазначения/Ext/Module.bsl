////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

// Преобразует переданное число в 16-ричную форму.
// 
// Параметры 
// 	ПарамDec          	 -	Число - Число для преобразования.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка - Строковое представление числа в 16-ричной форме.
// 
Функция Dec2HEX(ПарамDec) Экспорт
	Если НЕ ТипЗнч(ПарамDec) = Тип("Число") Тогда
		Возврат "";
	КонецЕсли;
	
	ВремHEX = "";
	ВремDec = ПарамDec;
	
	Пока ВремDec > 0 Цикл
		ВремДелитель = 1;
		Пока  ВремДелитель * 16 < ВремDec Цикл
			ВремДелитель = ВремДелитель * 16
		КонецЦикла;
		ВремHEX = ВремHEX + ?(Цел(ВремDec / ВремДелитель) > 9, Символ(87 + Цел(ВремDec / ВремДелитель)), Формат(Цел(ВремDec / ВремДелитель), "ЧРГ=' '; ЧГ=0"));
		ВремDec = ВремDec % ВремДелитель;
	КонецЦикла;
	
	Возврат ВремHEX;
	
КонецФункции // Dec2HEX()

// Преобразует переданное строковое представление 16-ричного числа в десятичное число.
// 
// Параметры 
// 	ПарамHEX          	 -	Строка - Строковое представление 16-ричного числа для преобразования.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	Число - Десятичное число.
// 
Функция HEX2Dec(ПарамHEX) Экспорт
	Если НЕ ТипЗнч(ПарамHEX) = Тип("Строка") Тогда
		Возврат 0;
	КонецЕсли;
	Для й = 1 По СтрДлина(ПарамHEX) Цикл
		Если Найти("0123456789abcdef", НРег(Сред(ПарамHEX, й, 1))) = 0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	ВремDec = 0;
	Для й = 1 По СтрДлина(Формат(ПарамHEX, "ЧРГ=' '; ЧГ=0")) Цикл
		ТекЦифра = Сред(ПарамHEX, й, 1);
		ВремDec = ВремDec + Pow(16, СтрДлина(Формат(ПарамHEX, "ЧРГ=' '; ЧГ=0")) - й) * ?(Найти("abcdef", НРег(ТекЦифра)) = 0, Число(ТекЦифра), КодСимвола(НРег(ТекЦифра)) - 87);
	КонецЦикла;
	
	Возврат ВремDec;
	
КонецФункции // HEX2Dec()

#Если НЕ ВебКлиент Тогда
// Возвращает массив каталогов шаблонов конфигураций исходя из настроек 1С.
// 
// Параметры 
// 	КаталогиШаблонов   	 -	Массив                 	 Массив путей к каталогам расположения шаблонов конфигураций.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Массив каталогов получен;
// 													 Ложь - не удалось получить массив каталогов.
// 
Функция ПолучитьКаталогиШаблоновКонфигураций(КаталогиШаблонов) Экспорт
	ФСО = Новый COMОбъект("Scripting.FileSystemObject");
	Попытка
		Версия = Лев(ФСО.GetFileVersion(КаталогПрограммы()+"1cv8.exe"), 3);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Шел = Новый COMОбъект("Shell.Application");
	Попытка
		СлужебныйКаталог1С = Шел.NameSpace(26).ParseName("1C");
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	Если СлужебныйКаталог1С = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	КаталогиШаблонов = Новый Массив();
	Если Версия = "8.1" Тогда
		СлужебныйКаталог1С = СлужебныйКаталог1С.GetFolder.ParseName("1Cv81");
		Если СлужебныйКаталог1С = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ФСО.FileExists(СлужебныйКаталог1С.Path + "\v8cscadr.lst") Тогда
			Поток = ФСО.OpenTextFile(СлужебныйКаталог1С.Path + "\v8cscadr.lst", 1, Ложь, -2);
			Пока НЕ Поток.AtEndOfStream Цикл
				ВремПуть = Поток.ReadLine();
				КаталогиШаблонов.Добавить(СтрЗаменить(ВремПуть, "file:// ", ""));
			КонецЦикла;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли Версия = "8.2" Тогда
		СлужебныйКаталог1С = СлужебныйКаталог1С.GetFolder.ParseName("1CEStart");
		Если СлужебныйКаталог1С = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ФСО.FileExists(СлужебныйКаталог1С.Path + "\1CEstart.cfg") Тогда
			Поток = ФСО.OpenTextFile(СлужебныйКаталог1С.Path + "\1CEstart.cfg", 1, Ложь, -2);
			Пока НЕ Поток.AtEndOfStream Цикл
				ВремПуть = Поток.ReadLine();
				Если Лев(ВремПуть, СтрДлина("ConfigurationTemplatesLocation=")) = "ConfigurationTemplatesLocation=" Тогда
					КаталогиШаблонов.Добавить(СтрЗаменить(ВремПуть, "ConfigurationTemplatesLocation=", ""));
				КонецЕсли;
			КонецЦикла;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПолучитьКаталогиШаблоновКонфигураций()
#КонецЕсли

// Преобразует строку в массив подстрок, используя заданный разделитель.
// 
// Параметры 
// 	ПарамСтрока        	 -	Строка                 	 Строка для преобразования.
// 	Разделитель        	 -	Строка                 	 Разделитель.
// Возвращаемое значение:
// 	Возврат ...        	 -	Массив                 	 Массив подстрок.
// 
Функция СтрокаСРазделителямиВМассив(ПарамСтрока,Разделитель) Экспорт
	Стр = ПарамСтрока;
	МассивСтрок = Новый Массив();
	Пока 1=1 Цикл
		Поз = Найти(Стр,Разделитель);
		Если Поз=0 Тогда
			Если НЕ ПустаяСтрока(Стр) Тогда
				МассивСтрок.Добавить(СокрЛП(Стр));
			КонецЕсли;
			Возврат МассивСтрок;
		КонецЕсли;
		Если НЕ ПустаяСтрока(Лев(Стр,Поз-1)) Тогда
			МассивСтрок.Добавить(СокрЛП(Лев(Стр,Поз-1)));
		КонецЕсли;
		Стр = Сред(Стр,Поз+СтрДлина(Разделитель));
	КонецЦикла;
КонецФункции // СтрокаСРазделителямиВМассив()

// Преобразует относительный путь к файлу в полный.
// 
// Параметры 
// 	ОтносительныйПуть  	 -	Строка                 	 Относительный путь к файлу.
// 	ПутьКФайлу		  	 -	Строка                 	 Полный путь к файлу, относительно которого задан относительный путь.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 Полученный полный путь к файлу.
// 
Функция ПолучитьПолныйПутьИзОтносительного(ОтносительныйПуть, ПутьКФайлу) Экспорт
	Если Найти(ПутьКФайлу, ":") = 0 И НЕ Лев(ПутьКФайлу, 2) = "\\" Тогда
		Возврат ОтносительныйПуть;
	КонецЕсли;
	МассивПолный = бит_си_ОбщегоНазначения.СтрокаСРазделителямиВМассив(СтрЗаменить(ПутьКФайлу, "/", "\"),"\");
	МассивОтносительный = бит_си_ОбщегоНазначения.СтрокаСРазделителямиВМассив(СтрЗаменить(ОтносительныйПуть, "/", "\"),"\");
	
	ВремФайл = Новый Файл(ПутьКФайлу);
	Если ВремФайл.ЭтоФайл() Тогда
		МассивПолный.Удалить(МассивПолный.Количество()-1);
	КонецЕсли;
	
	Попытка
		Пока МассивОтносительный[0] = "." Цикл
			МассивОтносительный.Удалить(0);
		КонецЦикла;
		Пока МассивОтносительный[0] = ".." Цикл
			МассивПолный.Удалить(МассивПолный.Количество()-1);
			МассивОтносительный.Удалить(0);
		КонецЦикла;
	Исключение
		Возврат ОтносительныйПуть;
	КонецПопытки;
	
	ВремПуть = "";
	Для Каждого ТекПапка Из МассивПолный Цикл
		ВремПуть = ВремПуть + ?(ВремПуть = "", "", "\") + ТекПапка;
	КонецЦикла;
	Для Каждого ТекПапка Из МассивОтносительный Цикл
		ВремПуть = ВремПуть + ?(ВремПуть = "", "", "\") + ТекПапка;
	КонецЦикла;
	Возврат ?(Лев(ПутьКФайлу, 2) = "\\", "\\", "") + ВремПуть;
КонецФункции // ПолучитьПолныйПутьИзОтносительного()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ВЫЗОВА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбщиеПроцедурыИФункцииВызоваСправочнойИнформации


#Если ТолстыйКлиентОбычноеПриложение Тогда
// Обработчи события "Нажатие" на кнопку вызова справочной информации в любой форме.
// Отрывает окно "СправочнаяИнформация" и передает в качестве параметра имя кнопки.
// 
Процедура ОткрытьСИ(Кнопка) Экспорт
	
	Форма = Обработки.бит_си_СправочнаяИнформация.ПолучитьФорму();
	Форма.ПараметрОткрытия = Сред(Кнопка.Имя, 4);
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьСИ()
#КонецЕсли

#Если ТолстыйКлиентОбычноеПриложение Тогда
// Определяет положение стандартной кнопки вызова справки (F1) в переданной командной панели.
// 
// Параметры 
// 	КоманднаяПанель    	 -	ЭлементФормы           	 Командная панель в которой выполняется поиск.
// Возвращаемое значение:
// 	Возврат ...        	 -	Число                  	 Индекс найденной кнопки.
// 
Функция ИндексКнопкиСправка(КоманднаяПанель)
	// Поиск кнпоки "Справка".
	ИндексКнопкиСправка = Неопределено;
	
	Для Каждого Кнопка Из КоманднаяПанель.Кнопки Цикл
		
		Если Кнопка.Имя       = "Справка" 
		 ИЛИ Кнопка.Текст     = "Справка" 
		 ИЛИ Кнопка.Подсказка = "Открыть справку" Тогда
		 
		 	ИндексКнопкиСправка = КоманднаяПанель.Кнопки.Индекс(Кнопка);
			Прервать;
			   
		КонецЕсли;
		
	КонецЦикла;
	Возврат ИндексКнопкиСправка;
	
КонецФункции // ИндексКнопкиСправка()
#КонецЕсли

#Если ТолстыйКлиентОбычноеПриложение Тогда
// Ищет командную панель в форме, в которую будет добавлена кнопка вызова справочной информации.
// Поиск выполняется перебором всех командных панелей формы, панель выбирается исходя из вида.
// Для панелей одинакового вида возвращается первая по порядку обхода элементов.
// 
// Параметры 
// 	Контейнер          	 -	Форма, ЭлементыФормы,  	 Где выполняем поиск
// 	                   	  	КоманднаяПанель.                                         
// Возвращаемое значение:
// 	Возврат ...        	 -	ЭлементФормы           	 Найденный элемент формы.
// 
Функция ОпределитьПанельДобавленияСИ(Контейнер)
	КоманднаяПанель = Неопределено;
	
	ВремКонтейнер = Контейнер;
	Если ТипЗнч(Контейнер) = Тип("Форма") Тогда
		ВремКонтейнер = Контейнер.ЭлементыФормы;
	КонецЕсли;
	
	Если ТипЗнч(ВремКонтейнер) = Тип("ЭлементыФормы") Тогда
		МассивКП = Новый Массив();
		МассивКПН = Новый Массив();
		МассивКПФ = Новый Массив();
		МассивКПДФ = Новый Массив();
		МассивКП0 = Новый Массив();
		МассивКПС = Новый Массив();
		Для Каждого Элемент Из ВремКонтейнер Цикл
			Если НЕ ТипЗнч(Элемент) = Тип("КоманднаяПанель") Тогда
				Продолжить;
			КонецЕсли;
			МассивКП.Добавить(Элемент);
			Если Элемент.ИсточникДействий = Неопределено Тогда
				МассивКПН.Добавить(Элемент);
			КонецЕсли;
			Если ТипЗнч(Элемент.ИсточникДействий) = Тип("Форма") Тогда
				МассивКПФ.Добавить(Элемент);
			КонецЕсли;
			Если Элемент.Имя = "ДействияФормы" Тогда
				МассивКПДФ.Добавить(Элемент);
			КонецЕсли;
			Если Элемент.Верх =0 И Элемент.Лево = 0 Тогда
				МассивКП0.Добавить(Элемент);
			КонецЕсли;
			Если НЕ ИндексКнопкиСправка(Элемент) = Неопределено Тогда
				МассивКПС.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		Если МассивКП.Количество() = 1 Тогда
			КоманднаяПанель = МассивКП[0];
		ИначеЕсли МассивКПС.Количество() = 1 Тогда
			КоманднаяПанель = МассивКПС[0];
		ИначеЕсли МассивКПДФ.Количество() = 1 Тогда
			КоманднаяПанель = МассивКПДФ[0];
		ИначеЕсли МассивКПФ.Количество() = 1 Тогда
			КоманднаяПанель = МассивКПФ[0];
		ИначеЕсли МассивКПН.Количество() = 1 Тогда
			КоманднаяПанель = МассивКПН[0];
		ИначеЕсли МассивКП0.Количество() = 1 Тогда
			КоманднаяПанель = МассивКП0[0];
		ИначеЕсли НЕ МассивКПС.Количество() = 0 Тогда
			КоманднаяПанель = МассивКПС[0];
		ИначеЕсли НЕ МассивКПДФ.Количество() = 0 Тогда
			КоманднаяПанель = МассивКПДФ[0];
		ИначеЕсли НЕ МассивКПФ.Количество() = 0 Тогда
			КоманднаяПанель = МассивКПФ[0];
		ИначеЕсли НЕ МассивКПН.Количество() = 0 Тогда
			КоманднаяПанель = МассивКПН[0];
		ИначеЕсли НЕ МассивКП0.Количество() = 0 Тогда
			КоманднаяПанель = МассивКП0[0];
		ИначеЕсли НЕ МассивКП.Количество() = 0 Тогда
			КоманднаяПанель = МассивКП[0];
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВремКонтейнер) = Тип("КоманднаяПанель") Тогда
		КоманднаяПанель = Контейнер;
	КонецЕсли;
	Возврат КоманднаяПанель;
КонецФункции // ОпределитьПанельДобавленияСИ()
#КонецЕсли

#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
// Определяет параметр отбора, передаваемый в форму справочной информации
// исходя из основного реквизита формы.
// 
// Параметры 
// 	Форма              	 -	Форма                  	 Форма для определения.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 Параметр отбора.
// 
Функция ОпределитьПараметрОтбора(Форма) Экспорт
	ТабОсновныхФорм = Новый ТаблицаЗначений();
	
	ТабОсновныхФорм.Колонки.Добавить("Реквизит",Новый ОписаниеТипов("Строка"));
	ТабОсновныхФорм.Колонки.Добавить("ОсновнаяФорма",Новый ОписаниеТипов("Строка"));
	
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "СправочникСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "СправочникОбъект";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаОбъекта";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ДокументСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ДокументОбъект";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаОбъекта";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ЖурналДокументовСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФорма";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "БизнесПроцессСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "БизнесПроцессОбъект";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаОбъекта";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ЗадачаСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ЗадачаОбъект";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаОбъекта";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ОтчетОбъект";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФорма";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ОбработкаОбъект";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФорма";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ПеречислениеСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ПланВидовРасчетаСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ПланВидовРасчетаОбъект";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаОбъекта";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ПланВидовХарактеристикСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ПланВидовХарактеристикОбъект";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаОбъекта";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ПланОбменаСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ПланОбменаОбъект";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаОбъекта";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ПланСчетовСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "ПланСчетовОбъект";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаОбъекта";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "РегистрСведенийСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "РегистрБухгалтерииСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "РегистрНакопленияСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	СтрокаОФ = ТабОсновныхФорм.Добавить();
	СтрокаОФ.Реквизит = "РегистрРасчетаСписок";
	СтрокаОФ.ОсновнаяФорма = "ОсновнаяФормаСписка";
	
	Попытка
		ТипОРФ = ТипЗнч(Форма.ЭтотОбъект);
	Исключение
		ТипОРФ = Неопределено;
	КонецПопытки;
	
	Если ТипОРФ = Неопределено Тогда
		Для Каждого СтрокаОФ Из ТабОсновныхФорм Цикл
			Попытка
				ТипОРФ = ТипЗнч(Форма[СтрокаОФ.Реквизит]);
				Прервать;
			Исключение
				ТипОРФ = Неопределено;
			КонецПопытки;
		КонецЦикла;
		Если ТипОРФ = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		МетаОбъект = Метаданные.НайтиПоТипу(ТипОРФ);
	Иначе
		МетаОбъект = Метаданные.НайтиПоТипу(ТипОРФ);
		Если МетаОбъект = Неопределено Тогда
			Возврат "";
		КонецЕсли; 
		СтрокаОФ = ТабОсновныхФорм.Найти(Лев(МетаОбъект.ПолноеИмя(),Найти(МетаОбъект.ПолноеИмя(),".")-1)+"Объект","Реквизит");
	КонецЕсли;
	
	ПараметрОтбора = "";
	Попытка
		ПараметрОтбора = МетаОбъект.ПолноеИмя()+"."+МетаОбъект[СтрокаОФ.ОсновнаяФорма].Имя;
	Исключение
		ПараметрОтбора = МетаОбъект.ПолноеИмя();
	КонецПопытки;
	Если ПараметрОтбора = "" Тогда
		ПараметрОтбора = МетаОбъект.ПолноеИмя();
	КонецЕсли;
	Возврат ПараметрОтбора;
КонецФункции // ОпределитьПараметрОтбора()
#КонецЕсли

#Если ТолстыйКлиентОбычноеПриложение Тогда
// Добавляет кнопку "СправочнаяИнформация" в переданной форме или командной панели.
// 
// Параметры 
// 	Контейнер          	 -	Форма, ЭлементыФормы,  	 Куда вставлять кнопку
// 	                   	  	КоманднаяПанель.
// 	ПеремПараметрОтбора	 -	Форма, Строка          	 Форма для определения параметра отбора или сам параметр отбора в 
// 	                   	  	                       	 виде строки.
// 
Процедура УстановитьПодменюСИ(Контейнер, ПеремПараметрОтбора = "ВсеСтатьи",
							  ЗаголовокКнопки = "", ПарамКартинкаКнопки = Неопределено) Экспорт
								  
	КартинкаКнопки = ?(ПарамКартинкаКнопки = Неопределено, БиблиотекаКартинок.бит_си_Как, ПарамКартинкаКнопки);
	
	КоманднаяПанель = ОпределитьПанельДобавленияСИ(Контейнер);
	Если КоманднаяПанель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПеремПараметрОтбора) = Тип("Форма") Тогда
		// Для внешних обработок и отчетов не открываем справку.
		ЭтоВнешняяФорма = Ложь;
		Попытка
			ЭтоВнешняяФорма = НЕ ПустаяСтрока(Контейнер.ИспользуемоеИмяФайла);
		Исключение
		КонецПопытки;
		
		Если ЭтоВнешняяФорма Тогда
			Возврат;
		КонецЕсли; 
		
		ПараметрОтбора = ОпределитьПараметрОтбора(ПеремПараметрОтбора);
		Если ПараметрОтбора = "" Тогда
			ПараметрОтбора = "ВсеСтатьи";
		КонецЕсли;
	Иначе
		ПараметрОтбора = ПеремПараметрОтбора;
	КонецЕсли;
	ИмяКнопки = "СИ:" + СокрЛП(ПараметрОтбора);
	
	Если НЕ (КоманднаяПанель.Кнопки.Найти(ИмяКнопки) = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск кнпоки "Справка".
	ИндексКнопкиСправка = ИндексКнопкиСправка(КоманднаяПанель);
	
	
	// Добавление кнопки "Советы".
	Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
		
		Если ИндексКнопкиСправка = Неопределено Тогда  // Кнопка "Справка" не найдена.
			КоманднаяПанель.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			КнопкаСоветы = КоманднаяПанель.Кнопки.Вставить(0,
														   ИмяКнопки,
														   ТипКнопкиКоманднойПанели.Действие,
														   ЗаголовокКнопки,
														   Новый Действие("бит_си_ДействияФормыОткрытьСИ"));
		Иначе
			КнопкаСоветы = КоманднаяПанель.Кнопки.Вставить(ИндексКнопкиСправка,
														   ИмяКнопки,
														   ТипКнопкиКоманднойПанели.Действие,
														   ЗаголовокКнопки,
														   Новый Действие("бит_си_ДействияФормыОткрытьСИ"));
		КонецЕсли;
		
	Иначе
		
		Если ИндексКнопкиСправка = Неопределено Тогда  // Кнопка "Справка" не найдена.
			КоманднаяПанель.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			КнопкаСоветы = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки,
														   ТипКнопкиКоманднойПанели.Действие,
														   ЗаголовокКнопки,
														   Новый Действие("бит_си_ДействияФормыОткрытьСИ"));
		Иначе
			КнопкаСоветы = КоманднаяПанель.Кнопки.Вставить(ИндексКнопкиСправка,
														   ИмяКнопки,
														   ТипКнопкиКоманднойПанели.Действие,
														   ЗаголовокКнопки,
														   Новый Действие("бит_си_ДействияФормыОткрытьСИ"));
		КонецЕсли;
		
	КонецЕсли;
	
	КнопкаСоветы.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	КнопкаСоветы.Картинка    = КартинкаКнопки;
	КнопкаСоветы.Подсказка   = "Справочная информация";
	
КонецПроцедуры // УстановитьПодменюСИ()
#КонецЕсли

#Если ТолстыйКлиентОбычноеПриложение Тогда
// Создает меню выбора источника справочной информации и открывает окно справочной информации
// с активной закладкой выбранного источника.
// 
Процедура ВыборСправочнойИнформации() Экспорт
	
	Неиспользуется = Истина;
	
КонецПроцедуры // ВыборСправочнойИнформации()
#КонецЕсли

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОЧНИКАМИ СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ПроцедурыИФункцииРаботыСИсточникамиСправочнойИнформации

#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
// Регистрирует переданную обработку в качестве источника справочной информации
// Обработка может передаваться по имени в конфигурации или по пути к файлу
// внешней обработки.
// 
// Параметры 
// 	ПарамОбработка     	 -	Строка                 	 Имя обработки в конфигурации или путь к файлу внешней обработки.
// 	ВидимостьПоУмолчанию -	Булево                 	 Установить флаг видимости закладки источника по умолчанию.
// 	Регистрировать		 -	Булево,                	 Флаг прверки наличия ранее зарегистрированных обработок:
// 	Повторно				Неопределено			 Неопределено - по умолчанию, повторно регистрируются обработки
// 													 имеющие параметры; Истина - регистрировать повторно;
// 													 Ложь - не регистрировать повторно.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	СправочникСсылка.бит_си	 Зарегистрированный источник справочной информации 
// 	                   	  	_Источники.
// 
Функция ЗарегистрироватьОбработкуИсточника(ПарамОбработка, ВидимостьПоУмолчанию = Истина,
										   РегистрироватьПовторно = Неопределено) Экспорт
	Если НЕ Метаданные.Обработки.Найти(ПарамОбработка) = Неопределено Тогда
		ВремОбработкаОбъект = Обработки[ПарамОбработка].Создать();
		ВнешняяОбработка = Ложь;
	Иначе
		Попытка
			ВремОбработкаОбъект = ВнешниеОбработки.Создать(ПарамОбработка);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		ВнешняяОбработка = Истина;
	КонецЕсли;
	Попытка
		Если НЕ (ВремОбработкаОбъект.ЭтоОбработкаИсточникаСИ() ИЛИ ВремОбработкаОбъект.ЭтоОбработкаИсточникаСИУпр()) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ВремРегистрироватьПовторно = РегистрироватьПовторно;
	Если ВремРегистрироватьПовторно = Неопределено Тогда
		Попытка
			ВремРегистрироватьПовторно = ВремОбработкаОбъект.ЕстьНастройки();
		Исключение
			ВремРегистрироватьПовторно = Ложь;
		КонецПопытки;
	КонецЕсли;
	Если НЕ ВремРегистрироватьПовторно Тогда
		Выборка = Справочники.бит_си_Источники.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекОбработка = Выборка.Обработка.Получить();
			Если ТекОбработка = ПарамОбработка Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ИсточникОбъект = Справочники.бит_си_Источники.СоздатьЭлемент();
	Если ВнешняяОбработка Тогда
		ИсточникОбъект.Обработка			= Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПарамОбработка));
	Иначе
		ИсточникОбъект.Обработка			= Новый ХранилищеЗначения(ПарамОбработка);
	КонецЕсли;
	ИсточникОбъект.Наименование 			= ВремОбработкаОбъект.Метаданные().Синоним;
	ВремМакет = ВремОбработкаОбъект.Метаданные().Макеты.Найти("Заголовок");
	Если НЕ ВремМакет = Неопределено И СокрЛП(ВремМакет.ТипМакета) = "ТекстовыйДокумент" Тогда
		ИсточникОбъект.Заголовок	= ВремОбработкаОбъект.ПолучитьМакет("Заголовок").ПолучитьТекст();
	Иначе
		ИсточникОбъект.Заголовок				= ВремОбработкаОбъект.Метаданные().Синоним;
	КонецЕсли;
	ВремМакет = ВремОбработкаОбъект.Метаданные().Макеты.Найти("Картинка");
	Если НЕ ВремМакет = Неопределено И СокрЛП(ВремМакет.ТипМакета) = "ДвоичныеДанные" Тогда
		ИсточникОбъект.КартинкаЗаголовкаСИ	=
				Новый ХранилищеЗначения(Новый Картинка(ВремОбработкаОбъект.ПолучитьМакет("Картинка")));
	Иначе
		ИсточникОбъект.КартинкаЗаголовкаСИ	= Новый ХранилищеЗначения(Новый Картинка());
	КонецЕсли;
	ИсточникОбъект.ВидимостьПоУмолчанию = ВидимостьПоУмолчанию;
	ИсточникОбъект.НастройкаПоУмолчанию =
			Новый ХранилищеЗначения(бит_си_ОбщегоНазначения.ПолучитьСтруктуруНастроекИзОбработкиИсточника(ВремОбработкаОбъект));
	ИсточникОбъект.ПолучениеТекущегоОбъектаНастройки =
			бит_си_ОбщегоНазначения.ПолучитьНастройкуОпределенияОбъектаНастройки();
	ИсточникОбъект.Записать();
	Возврат ИсточникОбъект.Ссылка;
КонецФункции // ЗарегистрироватьОбработкуИсточника()
#КонецЕсли

#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
// Создает обработку из хранилища или по имени в конфигурации, сохраненному
// в справочнике источников.
// 
// Параметры 
// 	ИсточникСИ         	 -	СправочникСсылка.бит_си	 Источник справочной информации из справочника источников
// 	                   	  	_Источники.         
// Возвращаемое значение:
// 	Возврат ...        	 -	ОбработкаОбъект        	 Обработка источника.
// 
Функция ПолучитьОбработкуИсточника(ИсточникСИ,
								   АдресОбработки = "") Экспорт
	Если ТипЗнч(ИсточникСИ) = Тип("СправочникСсылка.бит_си_Источники")
	 ИЛИ ТипЗнч(ИсточникСИ) = Тип("СправочникОбъект.бит_си_Источники") Тогда
		ОбработкаИсточника = ИсточникСИ.Обработка.Получить();
	ИначеЕсли ЗначениеЗаполнено(АдресОбработки) Тогда 
		ОбработкаИсточника = ПолучитьИзВременногоХранилища(АдресОбработки);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ТипЗнч(ОбработкаИсточника) = Тип("Строка") Тогда
		Попытка	
			ОбработкаИсточникаОбъект = Обработки[ОбработкаИсточника].Создать();
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	ИначеЕсли ТипЗнч(ОбработкаИсточника) = Тип("ДвоичныеДанные") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла("epf");
		Попытка
			ОбработкаИсточника.Записать(ВремФайл);
			ОбработкаИсточникаОбъект = ВнешниеОбработки.Создать(ВремФайл);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	#ИначеЕсли Сервер ИЛИ ВнешнееСоединение Тогда
	Если ТипЗнч(ОбработкаИсточника) = Тип("Строка") Тогда
		Попытка
			ОбработкаИсточникаОбъект = Обработки[ОбработкаИсточника].Создать();
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	ИначеЕсли ТипЗнч(ОбработкаИсточника) <> Тип("ДвоичныеДанные") Тогда
		ОбработкаИсточникаОбъект = ОбработкаИсточника;
	Иначе 	
		Возврат Неопределено;
	КонецЕсли;
	#КонецЕсли
	Возврат ОбработкаИсточникаОбъект;
	
КонецФункции // ПолучитьОбработкуИсточника()
#КонецЕсли

#Если ТолстыйКлиентОбычноеПриложение Тогда
// Получает форму вызова обработки источника справочной информации (основную форму обработки).
// 
// Параметры 
// 	ИсточникСИ         	 -	СправочникСсылка.бит_си	 Источник справочной информации                                   
// 	                   	  	_Источники             	                                                                  
// Возвращаемое значение:
// 	Возврат ...        	 -	Форма                  	 Форма вызова обработки источника справочной информации (основная 
// 	                   	  	                       	 форму обработки).
// 
Функция ПолучитьФормуВызоваОбработкиИсточника(ИсточникСИ) Экспорт
	ОбработкаИсточника = ИсточникСИ.Обработка.Получить();
	
	Если ТипЗнч(ОбработкаИсточника) = Тип("Строка") Тогда
		ОбработкаИсточникаОбъект = Обработки[ОбработкаИсточника].Создать();
	ИначеЕсли ТипЗнч(ОбработкаИсточника) = Тип("ДвоичныеДанные") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла("epf");
		ОбработкаИсточника.Записать(ВремФайл);
		ОбработкаИсточникаОбъект = ВнешниеОбработки.Создать(ВремФайл);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Форма = ОбработкаИсточникаОбъект.ПолучитьФорму("Форма");
	
	Если ТипЗнч(ОбработкаИсточника) = Тип("ДвоичныеДанные") Тогда
		Попытка
			УдалитьФайлы(ВремФайл);
		Исключение
			// Сообщить("!");
		КонецПопытки;
		Возврат Форма;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВызоваОбработкиИсточника()
#КонецЕсли

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ИСТОЧНИКОВ СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ПроцедурыИФункцииНастройкиИсточниковСправочнойИнформации

// Возвращает описание способа получения текущего объекта настройки для текущей конфигурации.
// 
// Параметры 
// 	Хранилище			 -	Булево                   Истина - возвращать результат в виде хранилища значения;
// 													 Ложь - возвращать результат в виде структуры;
// Возвращаемое значение:
// 	Возврат ...        	 -	Структура, Хранилище   	 Структура настроек источника справочной информации
//                          Значения.
// 


#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
Функция ПолучитьНастройкуОпределенияОбъектаНастройки(Хранилище = Истина) Экспорт
	Попытка
		ВремСписок = бит_си_ПолныеПрава.ПолучитьСписокНастроекПолученияОбъектаНастройки();
		ТекНастройка = ВремСписок.Найти(Метаданные.Имя,"Имя");
		Если ТекНастройка = Неопределено Тогда
			ТекНастройка = ВремСписок.Найти("ПользовательИБИмя","Имя");
		КонецЕсли;
		ТекНастройка = Новый Структура("Имя, Представление, Код",
									   ТекНастройка.Имя,
									   ТекНастройка.Представление,
									   ТекНастройка.Код);
	Исключение
	КонецПопытки;
	Возврат ?(Хранилище, Новый ХранилищеЗначения(ТекНастройка),ТекНастройка);
	
КонецФункции // ПолучитьНастройкуОпределенияОбъектаНастройки()
#КонецЕсли

// Получает структуру настроек для переданной обработки источника справочной информации.
// 
// Параметры 
// 	ОбработкаИсточникаО	 -	ОбработкаОбъект        	 Обработка источника справочной информации.
// 	                        
// Возвращаемое значение:
// 	Возврат ...        	 -	Структура              	 Структура настроек источника справочной информации.
// 
Функция ПолучитьСтруктуруНастроекИзОбработкиИсточника(ОбработкаИсточникаОбъект) Экспорт
	ВремНастройки = Новый Структура();
	Для Каждого ВремРеквизит Из ОбработкаИсточникаОбъект.Метаданные().Реквизиты Цикл
		Если НЕ Лев(ВремРеквизит.Имя,10)="Настройка_" Тогда
			Продолжить;
		КонецЕсли;
		ВремНастройки.Вставить(Сред(ВремРеквизит.Имя,11),ОбработкаИсточникаОбъект[ВремРеквизит.Имя]);
	КонецЦикла;
	Возврат ВремНастройки;
КонецФункции // ПолучитьСтруктуруНастроекИзОбработкиИсточника()

// Получает текст с описанием сохраненных настроек источника справочной информации.
// 
// Параметры 
// 	НастройкиСтруктура 	 -	Структура              	 Структура настроек источника справочной информации.
// 	ОтображатьНеЗаполне	 -	Булево                 	 Истина - выводить незаполненные настройки; Ложь - не выводить;   
// 	нные               	  	                       	 Значение по умолчанию - Ложь.
// 	ОтображатьСкрытые  	 -	Булево                 	 Истина - отображать настройки помеченные в обработке как скрытые;
// 	                   	  	                       	 Ложь - не отображать; по умолчанию - Ложь.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 Текст настроек.
// 
Функция ПолучитьНастройкиОбработкиИсточникаТекстом(НастройкиСтруктура, 
												   ИсточникСИ = Неопределено, 
												   ОтображатьНеЗаполненные = ложь, 
												   ОтображатьСкрытые = ложь,
												   АдресОбработки = "",
												   СписокРеквизитов = Неопределено) Экспорт
	ВремЗначение = "";
	Если НЕ ТипЗнч(НастройкиСтруктура) = Тип("Структура") Тогда
		Возврат "<параметры не установлены>";
	ИначеЕсли НастройкиСтруктура.Количество()=0 Тогда
		Возврат "<параметры не требуются>";
	КонецЕсли;
	Для Каждого ВремПараметр Из НастройкиСтруктура Цикл
		Если НЕ ЗначениеЗаполнено(ВремПараметр.Значение) И НЕ ОтображатьНеЗаполненные Тогда
			Продолжить;
		КонецЕсли;
		Если СписокРеквизитов = Неопределено Тогда 
			ОбработкаИсточника = Неопределено;
			#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
			ОбработкаИсточника = бит_си_ОбщегоНазначения.ПолучитьОбработкуИсточника(ИсточникСИ,
																					АдресОбработки);
			#КонецЕсли
			ТекЗаголовок = ?(Прав(ВремПараметр.Ключ,7) = "_Скрыть",
							 Лев(ВремПараметр.Ключ, СтрДлина(ВремПараметр.Ключ)-7), ВремПараметр.Ключ);
			Если НЕ ОбработкаИсточника = Неопределено Тогда
				ВремРеквизит = ОбработкаИсточника.Метаданные().Реквизиты.Найти("Настройка_" + ВремПараметр.Ключ);
				Если НЕ ВремРеквизит = Неопределено Тогда
					ТекЗаголовок = ВремРеквизит.Представление();
				КонецЕсли;
				Если ТекЗаголовок = "Настройка_" + ВремПараметр.Ключ Тогда
					ТекЗаголовок = ?(Прав(ВремПараметр.Ключ,7) = "_Скрыть",
									 Лев(ВремПараметр.Ключ, СтрДлина(ВремПараметр.Ключ)-7), ВремПараметр.Ключ);
				КонецЕсли;
			КонецЕсли;
		Иначе 
			ВремРеквизит = СписокРеквизитов.НайтиПоЗначению("Настройка_" + ВремПараметр.Ключ);
			Если НЕ ВремРеквизит = Неопределено Тогда
				ТекЗаголовок = ВремРеквизит.Представление;
			КонецЕсли;
			Если ТекЗаголовок = "Настройка_" + ВремПараметр.Ключ Тогда
				ТекЗаголовок = ?(Прав(ВремПараметр.Ключ,7) = "_Скрыть",
								 Лев(ВремПараметр.Ключ, СтрДлина(ВремПараметр.Ключ)-7), ВремПараметр.Ключ);
			КонецЕсли;
		КонецЕсли;
		ВремЗначение = ВремЗначение
					 + ТекЗаголовок
					 + Символы.Таб + ": " + Символы.Таб
					 + ?((Прав(ВремПараметр.Ключ,7) = "_Скрыть" И НЕ ОтображатьСкрытые),
						  "<*>", ВремПараметр.Значение)
					 + Символы.ПС;
	КонецЦикла;
	Возврат ВремЗначение;
КонецФункции // ПолучитьНастройкиОбработкиИсточникаТекстом()

#Если ТолстыйКлиентОбычноеПриложение Тогда
// Получает форму для заполнения настроек из сохраненного источника справочной информации.
// 
// Параметры: 
// 	ИсточникСИ         	 -	СправочникСсылка.бит_си	 Источник справочной информации                                   
// 	                   	  	_Источники             	                                                                  
// 	Настройки          	 -	Структура,             	 Настройки для передачи в форму                                   
// 	                   	  	ХранилищеЗначения      	                                                                  
// 	Элемент            	 -	ЭлементФормы           	 Элемент владелец формы настроек                                  
// 	Заголовок          	 -	Строка                 	 Заголовок формы настроек.  
//
// Возвращаемое значение:
// 	Возврат         	 -	Форма                  	 Форма настроек источника справочной информации.                  
// 
Функция ПолучитьФормуНастройкиОбработкиИсточника(ИсточникСИ, Настройки, Элемент, Заголовок = "") Экспорт
	ОбработкаИсточника = ИсточникСИ.Обработка.Получить();
	НастройкиПоУмолчаниюСтруктура = ИсточникСИ.НастройкаПоУмолчанию.Получить();
	Если ТипЗнч(Настройки) = Тип("ХранилищеЗначения") Тогда
		НастройкиСтруктура = Настройки.Получить();
	ИначеЕсли ТипЗнч(Настройки) = Тип("Структура") Тогда
		НастройкиСтруктура = Настройки;
	Иначе
		НастройкиСтруктура = НастройкиПоУмолчаниюСтруктура;
	КонецЕсли;
	
	
	Если ТипЗнч(ОбработкаИсточника) = Тип("Строка") Тогда
		ОбработкаИсточникаОбъект = Обработки[ОбработкаИсточника].Создать();
	ИначеЕсли ТипЗнч(ОбработкаИсточника) = Тип("ДвоичныеДанные") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла("epf");
		ОбработкаИсточника.Записать(ВремФайл);
		ОбработкаИсточникаОбъект = ВнешниеОбработки.Создать(ВремФайл);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ОбработкаИсточникаОбъект.Заголовок = Заголовок;
	Исключение
	КонецПопытки;
	
	// Заполним значения по умолчанию
	Если ТипЗнч(НастройкиПоУмолчаниюСтруктура) = Тип("Структура") Тогда
		Для Каждого ВремРеквизит Из ОбработкаИсточникаОбъект.Метаданные().Реквизиты Цикл
			Если НЕ Лев(ВремРеквизит.Имя,10)="Настройка_" Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ НастройкиПоУмолчаниюСтруктура.Свойство(Сред(ВремРеквизит.Имя,11)) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НастройкиПоУмолчаниюСтруктура[Сред(ВремРеквизит.Имя,11)]) Тогда
				Продолжить;
			КонецЕсли;
			НастройкиПоУмолчаниюСтруктура.Свойство(Сред(ВремРеквизит.Имя,11),ОбработкаИсточникаОбъект[ВремРеквизит.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	// А теперь по сохраненной настройке
	Если ТипЗнч(НастройкиСтруктура) = Тип("Структура") Тогда
		Для Каждого ВремРеквизит Из ОбработкаИсточникаОбъект.Метаданные().Реквизиты Цикл
			Если НЕ Лев(ВремРеквизит.Имя,10)="Настройка_" Тогда
				Продолжить;
			КонецЕсли;
			НастройкиСтруктура.Свойство(Сред(ВремРеквизит.Имя,11),ОбработкаИсточникаОбъект[ВремРеквизит.Имя]);
		КонецЦикла;
	КонецЕсли;
	Форма = ОбработкаИсточникаОбъект.ПолучитьФорму("ФормаНастройки",Элемент);
	Форма.РежимВыбора = Истина;
	Попытка
		Форма.Источник = ИсточникСИ;
	Исключение
	КонецПопытки;
	
	Если ТипЗнч(ОбработкаИсточника) = Тип("ДвоичныеДанные") Тогда
		Попытка
			УдалитьФайлы(ВремФайл);
		Исключение
			// Сообщить("!");
		КонецПопытки;
		Возврат Форма;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуНастройкиОбработкиИсточника()
#КонецЕсли

#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
// Получает форму для заполнения настроек из сохраненного источника справочной информации.
// 
// Параметры: 
// 	ИмяФормы         	 -	Строка 					 Имя формы настройки в управляемом режиме.
// 	Настройки          	 -	Структура             	 Настройки для передачи в форму.
// 	Элемент            	 -	ЭлементФормы           	 Элемент владелец формы настроек.
// 	Заголовок          	 -	Строка                 	 Заголовок формы настроек.
// 	НастройкиПоУмолчаниюСтруктура -	Структура      	 Настройки по умолчанию.
//
// Возвращаемое значение:
// 	Возврат         	 -	Форма                  	 Форма настроек источника справочной информации.
// 
Функция ПолучитьФормуНастройкиОбработкиИсточникаУправляемыйРежим(ИмяФормы, 
																 Настройки, 
																 Элемент, 
																 Заголовок = "",
																 НастройкиПоУмолчаниюСтруктура = Неопределено,
																 МассивРеквизитов = Неопределено,
																 АдресНастроек = "") Экспорт
	ФормаНастройки = ПолучитьФорму(ИмяФормы,
								   Новый Структура("ЗакрыватьПриВыборе,ЗакрыватьПриЗакрытииВладельца,АдресНастроекВоВременномХранилище",
								   				   Истина,
												   Истина,
												   АдресНастроек),
								   Элемент);
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		НастройкиСтруктура = Настройки;
	Иначе
		НастройкиСтруктура = НастройкиПоУмолчаниюСтруктура;
	КонецЕсли;
	Если ТипЗнч(МассивРеквизитов) <> Тип("Массив") Тогда
		МассивРеквизитов = Новый Массив;
	КонецЕсли;

	Попытка
		ФормаНастройки.Заголовок = Заголовок;
	Исключение
	КонецПопытки;
	
	// Заполним значения по умолчанию
	// остановка здесь 13_04_11
	Если ТипЗнч(НастройкиПоУмолчаниюСтруктура) = Тип("Структура") Тогда
		Для Каждого ВремРеквизит Из МассивРеквизитов Цикл
			Если НЕ Лев(ВремРеквизит,10)="Настройка_" Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ НастройкиПоУмолчаниюСтруктура.Свойство(Сред(ВремРеквизит,11)) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НастройкиПоУмолчаниюСтруктура[Сред(ВремРеквизит,11)]) Тогда
				Продолжить;
			КонецЕсли;
			НастройкиПоУмолчаниюСтруктура.Свойство(Сред(ВремРеквизит,11),ФормаНастройки.Объект[ВремРеквизит]);
		КонецЦикла;
	КонецЕсли;
	// 
	// А теперь по сохраненной настройке
	Если ТипЗнч(НастройкиСтруктура) = Тип("Структура") Тогда
		Для Каждого ВремРеквизит Из МассивРеквизитов Цикл
			Если НЕ Лев(ВремРеквизит,10)="Настройка_" Тогда
				Продолжить;
			КонецЕсли;
			НастройкиСтруктура.Свойство(Сред(ВремРеквизит,11),ФормаНастройки.Объект[ВремРеквизит]);
		КонецЦикла;
	КонецЕсли;
	// 
	
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройкиОбработкиИсточника()
#КонецЕсли

#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
// Получает структуру настроек для переданной обработки источника справочной информации.
// 
// Параметры 
// 	ОбработкаИсточникаО	 -	ДанныеФормыСтруктура   	 Обработка источника справочной информации.
//                                
// 	МассивРеквизитов	 -	Массив				   	 Массив имен реквизитов обработки.
// Возвращаемое значение:
// 	Возврат ...        	 -	Структура              	 Структура настроек источника справочной информации.
// 
Функция ПолучитьСтруктуруНастроекИзОбработкиИсточникаУправляемыйРежим(ОбработкаИсточникаОбъект, МассивРеквизитов) 
	Экспорт
	ВремНастройки = Новый Структура();
	Для Каждого ВремРеквизит Из МассивРеквизитов Цикл
		Если НЕ Лев(ВремРеквизит,10)="Настройка_" Тогда
			Продолжить;
		КонецЕсли;
		ВремНастройки.Вставить(Сред(ВремРеквизит,11),ОбработкаИсточникаОбъект[ВремРеквизит]);
	КонецЦикла;
	Возврат ВремНастройки;
КонецФункции // ПолучитьСтруктуруНастроекИзОбработкиИсточника()
#КонецЕсли

#КонецОбласти
