
Процедура ЗаполнитьКодыКлассификаторовВПредметахКонтролируемыхСделок(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыКонтролируемыхСделок.УдалитьКодПоТНВЭД КАК Код
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоТНВЭД = КлассификаторТНВЭД.Код
	|ГДЕ
	|	КлассификаторТНВЭД.Код ЕСТЬ NULL
	|	И ПредметыКонтролируемыхСделок.УдалитьКодПоТНВЭД <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемаяСделка.УдалитьКодТНВЭД
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО КонтролируемаяСделка.УдалитьКодТНВЭД = КлассификаторТНВЭД.Код
	|ГДЕ
	|	КлассификаторТНВЭД.Код ЕСТЬ NULL
	|	И КонтролируемаяСделка.УдалитьКодТНВЭД <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыКонтролируемыхСделок.УдалитьКодПоОКП КАК Код
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКП = ОбщероссийскийКлассификаторПродукции.Код
	|ГДЕ
	|	ОбщероссийскийКлассификаторПродукции.Код ЕСТЬ NULL
	|	И ПредметыКонтролируемыхСделок.УдалитьКодПоОКП <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемаяСделка.УдалитьКодОКП
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
	|		ПО КонтролируемаяСделка.УдалитьКодОКП = ОбщероссийскийКлассификаторПродукции.Код
	|ГДЕ
	|	ОбщероссийскийКлассификаторПродукции.Код ЕСТЬ NULL
	|	И КонтролируемаяСделка.УдалитьКодОКП <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД КАК Код
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|ГДЕ
	|	КлассификаторВидовЭкономическойДеятельности.Код ЕСТЬ NULL
	|	И ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемаяСделка.УдалитьКодОКВЭД
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО КонтролируемаяСделка.УдалитьКодОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|ГДЕ
	|	КлассификаторВидовЭкономическойДеятельности.Код ЕСТЬ NULL
	|	И КонтролируемаяСделка.УдалитьКодОКВЭД <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 КАК Код
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	КлассификаторОКВЭД2.Код ЕСТЬ NULL
	|	И ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемаяСделка.УдалитьКодОКВЭД2
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО КонтролируемаяСделка.УдалитьКодОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	КлассификаторОКВЭД2.Код ЕСТЬ NULL
	|	И КонтролируемаяСделка.УдалитьКодОКВЭД2 <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыКонтролируемыхСделок.УдалитьКодПоОКПД2 КАК Код
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКПД2 = КлассификаторОКПД2.Код
	|ГДЕ
	|	КлассификаторОКПД2.Код ЕСТЬ NULL
	|	И ПредметыКонтролируемыхСделок.УдалитьКодПоОКПД2 <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемаяСделка.УдалитьКодОКПД2
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
	|		ПО КонтролируемаяСделка.УдалитьКодОКПД2 = КлассификаторОКПД2.Код
	|ГДЕ
	|	КлассификаторОКПД2.Код ЕСТЬ NULL
	|	И КонтролируемаяСделка.УдалитьКодОКПД2 <> """"";
	
	РезультатПакетногоЗапроса = Запрос.ВыполнитьПакет();
	
	// Таблица с кодами, которые нужно создать.
	ТаблицаНовыхКодов = Новый ТаблицаЗначений;
	ТаблицаНовыхКодов.Колонки.Добавить("ИмяСправочника");
	ТаблицаНовыхКодов.Колонки.Добавить("ТаблицаКодов");
	ТаблицаНовыхКодов.Колонки.Добавить("МаксимальнаяДлинаКода");
	
	// ТНВЭД
	СтрокаТНВЭД					 = ТаблицаНовыхКодов.Добавить();
	СтрокаТНВЭД.ИмяСправочника	 = "КлассификаторТНВЭД";
	СтрокаТНВЭД.ТаблицаКодов	 = РезультатПакетногоЗапроса[0].Выгрузить();
	СтрокаТНВЭД.МаксимальнаяДлинаКода = 10;
	// ОКП
	СтрокаОКП					 = ТаблицаНовыхКодов.Добавить();
	СтрокаОКП.ИмяСправочника	 = "ОбщероссийскийКлассификаторПродукции";
	СтрокаОКП.ТаблицаКодов		 = РезультатПакетногоЗапроса[1].Выгрузить();
	СтрокаОКП.МаксимальнаяДлинаКода = 10;
	// ОКВЭД
	СтрокаОКВЭД					 = ТаблицаНовыхКодов.Добавить();
	СтрокаОКВЭД.ИмяСправочника	 = "КлассификаторВидовЭкономическойДеятельности";
	СтрокаОКВЭД.ТаблицаКодов	 = РезультатПакетногоЗапроса[2].Выгрузить();
	СтрокаОКВЭД.МаксимальнаяДлинаКода = 8;
	
	// ОКВЭД2
	СтрокаОКВЭД					 = ТаблицаНовыхКодов.Добавить();
	СтрокаОКВЭД.ИмяСправочника	 = "КлассификаторОКВЭД2";
	СтрокаОКВЭД.ТаблицаКодов	 = РезультатПакетногоЗапроса[3].Выгрузить();
	СтрокаОКВЭД.МаксимальнаяДлинаКода = 8;
	
	// ОКПД2
	СтрокаОКВЭД					 = ТаблицаНовыхКодов.Добавить();
	СтрокаОКВЭД.ИмяСправочника	 = "КлассификаторОКПД2";
	СтрокаОКВЭД.ТаблицаКодов	 = РезультатПакетногоЗапроса[3].Выгрузить();
	СтрокаОКВЭД.МаксимальнаяДлинаКода = 12;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНовыхКодов Цикл
		
		ТаблицаКодов = СтрокаТаблицы.ТаблицаКодов;
		
		Если ТаблицаКодов.Количество() > 0 Тогда
			
			ИмяСправочника = СтрокаТаблицы.ИмяСправочника;
			// Заполним таблицу из макетов, в которых хранятся классификаторы
			Если ИмяСправочника = "КлассификаторТНВЭД" Тогда
				ТаблицаИзМакета = Справочники.КлассификаторТНВЭД.ТаблицаКлассификатораТНВЭД();
			ИначеЕсли ИмяСправочника = "ОбщероссийскийКлассификаторПродукции" Тогда
				КлассификаторXML = Справочники.ОбщероссийскийКлассификаторПродукции.ПолучитьМакет("ОбщероссийскийКлассификаторПродукции").ПолучитьТекст();
				ТаблицаИзМакета = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
			ИначеЕсли ИмяСправочника = "КлассификаторВидовЭкономическойДеятельности" Тогда
				
				ПараметрыКлассификатора = ИнтерфейсыВзаимодействияБРО.ПолучитьРасположениеКлассификатораСтатистики(ИмяСправочника);
				
				ОбластьИсточникДанных 	= ПараметрыКлассификатора.ОбластьИсточникДанных; 
				ОтчетИсточникДанных 	= ПараметрыКлассификатора.ОтчетИсточникДанных; 
				СписокВерсий 			= ИнтерфейсыВзаимодействияБРО.ПолучитьВерсииСписковОтчета(ОтчетИсточникДанных);
				Заголовок 				= Метаданные.Справочники[ИмяСправочника].Синоним;
				
				ИмяМакетаСписков = СписокВерсий[СписокВерсий.Количество() - 1].Значение;
				
				ТаблицаИзМакета = ИнтерфейсыВзаимодействияБРО.ПолучитьЗначенияИзСпискаВыбораОтчета(
					ОтчетИсточникДанных, 
					ИмяМакетаСписков, 
					ОбластьИсточникДанных,
					Ложь,
					8);
			ИначеЕсли ИмяСправочника = "КлассификаторОКВЭД2" Тогда
				ТаблицаИзМакета = Справочники.Организации.КлассификаторОКВЭД2();
			ИначеЕсли ИмяСправочника = "КлассификаторОКПД2" Тогда
				ТаблицаПоиска = Справочники.КлассификаторОКПД2.ТаблицаКлассификатора();
			КонецЕсли;
			
			ТаблицаИзМакета.Индексы.Добавить("Код");
			
			// Создаем новые элементы справочников
			Для Каждого СтрокаНовыхКодов Из ТаблицаКодов Цикл
				Код = СтрокаНовыхКодов.Код;
				
				Если СтрДлина(Код) > СтрокаТаблицы.МаксимальнаяДлинаКода Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Невозможно создать элемент классификатора %1 с кодом %2 по причине:
							|длина кода превышает максимальное значение %3.
							|Необходимо создать элемент с верным кодом и указать его в элементах справочников'"), 
							ИмяСправочника, Код, СтрокаТаблицы.МаксимальнаяДлинаКода);
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокаИзМакета = ТаблицаИзМакета.Найти(Код, "Код");
				// Если элемент не найден в таблице, то используем вместо наименования код.
				Если СтрокаИзМакета = Неопределено Тогда
					Наименование = СтрокаНовыхКодов.Код;
				Иначе
					Наименование = СтрокаИзМакета.Наименование;
				КонецЕсли;
				ЭлементКлассификатора = Справочники[ИмяСправочника].СоздатьЭлемент();
				ЭлементКлассификатора.Код = Код;
				ЭлементКлассификатора.Наименование = Наименование;
				ЭлементКлассификатора.НаименованиеПолное = Наименование;
				ЭлементКлассификатора.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	// Получим элементы в которых необходимо заполнить коды классификаторов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Номенклатура.Ссылка КАК ПредметСделки,
	|	КлассификаторТНВЭД.Ссылка КАК КодТНВЭД,
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка КАК КодОКВЭД,
	|	ОбщероссийскийКлассификаторПродукции.Ссылка КАК КодОКП,
	|	КлассификаторОКВЭД2.Ссылка КАК КодОКВЭД2,
	|	КлассификаторОКПД2.Ссылка КАК КодОКПД2
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ПредметыКонтролируемыхСделок.ПредметСделки = Номенклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоТНВЭД = КлассификаторТНВЭД.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКП = ОбщероссийскийКлассификаторПродукции.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКПД2 = КлассификаторОКПД2.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	Номенклатура.КодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	И Номенклатура.КодОКВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
	|	И Номенклатура.КодОКП = ЗНАЧЕНИЕ(Справочник.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка)
	|	И Номенклатура.КодОКПД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКПД2.ПустаяСсылка)
	|	И Номенклатура.КодОКВЭД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКВЭД2.ПустаяСсылка)
	|	И (КлассификаторТНВЭД.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторВидовЭкономическойДеятельности.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ОбщероссийскийКлассификаторПродукции.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКВЭД2.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКПД2.Ссылка ЕСТЬ НЕ NULL )";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредметСделки = Выборка.ПредметСделки;
		Попытка
			
			ОбъектПредметСделки			 = ПредметСделки.ПолучитьОбъект();
			ОбъектПредметСделки.КодОКВЭД = Выборка.КодОКВЭД;
			ОбъектПредметСделки.КодОКП	 = Выборка.КодОКП;
			ОбъектПредметСделки.КодТНВЭД = Выборка.КодТНВЭД;
			ОбъектПредметСделки.КодОКПД2 = Выборка.КодОКПД2;
			ОбъектПредметСделки.КодОКВЭД2 = Выборка.КодОКВЭД2;
			
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектПредметСделки);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
			
			// Если не удалось обработать какую-нибудь номенклатуру, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить коды в номенклатуре ""%1"" по причине:
					|%2'"), 
					ПредметСделки,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Регистратор, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ОсновныеСредства.Ссылка КАК ПредметСделки,
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка КАК КодОКВЭД,
	|	КлассификаторОКВЭД2.Ссылка КАК КодОКВЭД2
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ПО ПредметыКонтролируемыхСделок.ПредметСделки = ОсновныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	ОсновныеСредства.КодОКВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
	|	И ОсновныеСредства.КодОКВЭД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКВЭД2.ПустаяСсылка)
	|	И (КлассификаторВидовЭкономическойДеятельности.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКВЭД2.Ссылка ЕСТЬ НЕ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	ОбъектыСтроительства.Ссылка,
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка,
	|	КлассификаторОКВЭД2.Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|		ПО ПредметыКонтролируемыхСделок.ПредметСделки = ОбъектыСтроительства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	ОбъектыСтроительства.КодОКВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
	|	И ОбъектыСтроительства.КодОКВЭД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКВЭД2.ПустаяСсылка)
	|	И (КлассификаторВидовЭкономическойДеятельности.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКВЭД2.Ссылка ЕСТЬ НЕ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	НематериальныеАктивы.Ссылка,
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка,
	|	КлассификаторОКВЭД2.Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ПО ПредметыКонтролируемыхСделок.ПредметСделки = НематериальныеАктивы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	НематериальныеАктивы.КодОКВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
	|	И НематериальныеАктивы.КодОКВЭД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКВЭД2.ПустаяСсылка)
	|	И (КлассификаторВидовЭкономическойДеятельности.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКВЭД2.Ссылка ЕСТЬ НЕ NULL )";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредметСделки = Выборка.ПредметСделки;
		
		Попытка
			
			ОбъектПредметСделки = ПредметСделки.ПолучитьОбъект();
			ОбъектПредметСделки.КодОКВЭД = Выборка.КодОКВЭД;
			ОбъектПредметСделки.КодОКВЭД2 = Выборка.КодОКВЭД2;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектПредметСделки);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить коды в предмете сделки ""%1"" по причине:
					|%2'"), 
					ПредметСделки,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Регистратор, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	// Получим документы в которых необходимо заполнить коды классификаторов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КонтролируемаяСделка.Ссылка КАК КонтролируемаяСделка,
	|	КлассификаторТНВЭД.Ссылка КАК КодТНВЭД,
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка КАК КодОКВЭД,
	|	ОбщероссийскийКлассификаторПродукции.Ссылка КАК КодОКП,
	|	КлассификаторОКВЭД2.Ссылка КАК КодОКВЭД2,
	|	КлассификаторОКПД2.Ссылка КАК КодОКПД2
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО КонтролируемаяСделка.УдалитьКодТНВЭД = КлассификаторТНВЭД.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
	|		ПО КонтролируемаяСделка.УдалитьКодОКП = ОбщероссийскийКлассификаторПродукции.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО КонтролируемаяСделка.УдалитьКодОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО КонтролируемаяСделка.УдалитьКодОКВЭД2 = КлассификаторОКВЭД2.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
	|		ПО КонтролируемаяСделка.УдалитьКодОКПД2 = КлассификаторОКПД2.Код
	|ГДЕ
	|	КонтролируемаяСделка.КодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	И КонтролируемаяСделка.КодОКВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
	|	И КонтролируемаяСделка.КодОКП = ЗНАЧЕНИЕ(Справочник.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка)
	|	И КонтролируемаяСделка.КодОКВЭД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКВЭД2.ПустаяСсылка)
	|	И КонтролируемаяСделка.КодОКПД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКПД2.ПустаяСсылка)
	|	И (КлассификаторТНВЭД.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторВидовЭкономическойДеятельности.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ОбщероссийскийКлассификаторПродукции.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКВЭД2.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКПД2.Ссылка ЕСТЬ НЕ NULL )";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ОбъектСделка = Выборка.КонтролируемаяСделка.ПолучитьОбъект();
			ОбъектСделка.КодОКВЭД = Выборка.КодОКВЭД;
			ОбъектСделка.КодОКВЭД2 = Выборка.КодОКВЭД2;
			ОбъектСделка.КодОКП = Выборка.КодОКП;
			ОбъектСделка.КодОКПД2 = Выборка.КодОКПД2;
			ОбъектСделка.КодТНВЭД = Выборка.КодТНВЭД;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектСделка);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить коды в контролируемой сделке ""%1"" по причине:
					|%2'"), 
					Выборка.КонтролируемаяСделка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.КонтролируемаяСделка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процедуре УчетОбособленныхПодразделений.ЗаполнитьКодыКлассификаторовВПредметахКонтролируемыхСделок
						|не удалось заполнить классификаторы в %1 элементах.'"), ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процедура УчетОбособленныхПодразделений.ЗаполнитьКодыКлассификаторовВПредметахКонтролируемыхСделок
						|обработала очередную порцию записей в справочниках: %1 элементов'"), 
						ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПрограммныйИнтерфейс

#Область ВключениеОтключениеОбособленныхПодразделений

Процедура ПриВключенииВестиУчетПоПодразделениям() Экспорт
	
	СнятьОпциюРасчетаЗарплатыПоПодразделениямДляНебольшихОрганизаций();
	ЗаполнитьПодразделенияОСПоДаннымМестонахождения();
	ЗаполнитьДанныеПоСубконтоРегистрацияВНалоговомОргане();
	
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьТипДокументаОбособленныхПодразделений(СписокТипов, ТипДокумента) Экспорт
	
	СписокТипов.Добавить(Тип("ДокументСсылка."+ТипДокумента));
	
КонецПроцедуры

Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеОбъекта = ТаблицаОписания.Добавить();
	ОписаниеОбъекта.ТипОбъекта = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках");
	ОписаниеОбъекта.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеОбъекта.ГруппаВДереве = "Налоговая отчетность";
	ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеОбъекта.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеОбъекта.ЯвляетсяАктуальным = Истина;
	ОписаниеОбъекта.ИмяОсновногоМакетаДляПечати = "";
	
КонецПроцедуры

Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.АвизоМПЗВходящее);
	СписокОбъектов.Добавить(Документы.АвизоМПЗИсходящее);
	СписокОбъектов.Добавить(Документы.АвизоОСВходящее);
	СписокОбъектов.Добавить(Документы.АвизоОСИсходящее);
	СписокОбъектов.Добавить(Документы.АвизоПрочееВходящее);
	СписокОбъектов.Добавить(Документы.АвизоПрочееИсходящее);
	СписокОбъектов.Добавить(Документы.АвизоРасчетыВходящее);
	СписокОбъектов.Добавить(Документы.АвизоРасчетыИсходящее);
	СписокОбъектов.Добавить(Документы.КонтролируемаяСделка);
	СписокОбъектов.Добавить(Документы.ПрочиеКонтролируемыеСделки);
	
КонецПроцедуры

Процедура ПриПолученииСпискаРегламентированныхОтчетов(СписокРегламентированныхОтчетов) Экспорт
	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетОперацииСДенежнымиСредствамиНФО");
	
КонецПроцедуры

Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт

	Библиотека = Метаданные.Имя;
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.59.29",
		"Подсистема.КонтролируемыеСделки",
		"Подсистема.БухгалтерияПредприятияПодсистемы.Подсистема.КонтролируемыеСделки",
		Библиотека);
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.59.29",
		"Подсистема.ОбменДаннымиКОРП",
		"Подсистема.БухгалтерияПредприятияПодсистемы.Подсистема.ОбменДаннымиКОРП",
		Библиотека);
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.59.29",
		"Подсистема.ОбособленныеПодразделения",
		"Подсистема.БухгалтерияПредприятияПодсистемы.Подсистема.ОбособленныеПодразделения",
		Библиотека);

КонецПроцедуры

#Область УправлениеДоступом

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(Знач ИсточникиДанных) Экспорт
	
	// Данные(Таблица, ПолеДаты, Раздел, ПолеОбъекта)
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоМПЗВходящее"                                                , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоМПЗИсходящее"                                               , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоОСВходящее"                                                 , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоОСИсходящее"                                                , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоПрочееВходящее"                                             , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоПрочееИсходящее"                                            , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоРасчетыВходящее"                                            , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоРасчетыИсходящее"                                           , "Дата" , "БухгалтерскийУчет", "Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СтруктураСтоимостиЗапасов"                                , "Период", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.НастройкиУчетаНалогаНаПрибыльГруппОбособленныхПодразделений", "Период", "БухгалтерскийУчет", "Организация");
	
КонецПроцедуры

// Вызывается из процедуры УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.АвизоМПЗВходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоМПЗИсходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоОСВходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоОСИсходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоПрочееВходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоПрочееИсходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоРасчетыВходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоРасчетыИсходящее, Истина);
	
	Списки.Вставить(Метаданные.Документы.КонтролируемаяСделка, Истина);
	Списки.Вставить(Метаданные.Документы.ПрочиеКонтролируемыеСделки, Истина);
	Списки.Вставить(Метаданные.Документы.УведомлениеОКонтролируемыхСделках, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ВзаимозависимыеЛица, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СведенияОбОрганизацииДляКонтролируемыхСделок, Истина);
	
	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиОбменаБанкРоссии, Истина);
	
	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиУчетаНалогаНаПрибыльГруппОбособленныхПодразделений, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РасчетСтавкиНалогаНаПрибыльЗаМесяц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтруктураСтоимостиЗапасов, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.КонтролируемыеСделкиОрганизаций, Истина);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

Процедура ДополнитьМассивИменамиДокументовАвизо(ИмяМассива, Входящие = Истина) Экспорт
	
	Если Входящие Тогда
		Суффикс = "Входящее";
	Иначе
		Суффикс = "Исходящее";
	КонецЕсли;
	
	ИмяМассива.Добавить("АвизоМПЗ" + Суффикс);
	ИмяМассива.Добавить("АвизоОС" + Суффикс);
	ИмяМассива.Добавить("АвизоПрочее" + Суффикс);
	ИмяМассива.Добавить("АвизоРасчеты" + Суффикс);
	
КонецПроцедуры

Процедура ЗаполнитьГраницыКонтролируемости() Экспорт
	
	РегистрыСведений.ГраницыКонтролируемостиСделок.ЗаполнитьГраницыКонтролируемости();
	
КонецПроцедуры

Процедура УстановитьТекстЗапросаЗаполнитьСтрануРегистрацииВКонтрагентах(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	ЕстьNULL(УчастникиКонтролируемыхСделок.УдалитьСтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтранаРегистрации,
	|	ЕстьNULL(УчастникиКонтролируемыхСделок.УдалитьРегистрационныйНомерВСтранеРегистрации, """") КАК РегистрационныйНомерВСтранеРегистрации,
	|	ЕстьNULL(УчастникиКонтролируемыхСделок.УдалитьКодНалогоплательщикаВСтранеРегистрации, """") КАК КодНалогоплательщикаВСтранеРегистрации
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиКонтролируемыхСделок КАК УчастникиКонтролируемыхСделок
	|		ПО Контрагенты.Ссылка = УчастникиКонтролируемыхСделок.Контрагент
	|ГДЕ
	|	Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)";
	
КонецПроцедуры

Процедура ЗаполнитьСтрануРегистрацииКонтрагента(КонтрагентОбъект, Выборка) Экспорт

	КонтрагентОбъект.СтранаРегистрации    = Выборка.СтранаРегистрации;
	КонтрагентОбъект.РегистрационныйНомер = Выборка.РегистрационныйНомерВСтранеРегистрации;
	Если КонтрагентОбъект.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.ИНН) Тогда
			КонтрагентОбъект.ИНН = Выборка.КодНалогоплательщикаВСтранеРегистрации;
		ИначеЕсли СокрЛП(КонтрагентОбъект.ИНН) <> СокрЛП(Выборка.КодНалогоплательщикаВСтранеРегистрации) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно заполнить налоговый номер контрагента %1 по данным уведомления о контролируемых сделках:
				|налоговый номер в справочнике контрагенты (%2) уже установлен и отличается от налогового номера по данным уведомления о контролируемых сделках (%3)'"),
				КонтрагентОбъект.Наименование, КонтрагентОбъект.ИНН, Выборка.КодНалогоплательщикаВСтранеРегистрации);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение, , 
				Выборка.Контрагент, 
				ТекстСообщения);
		КонецЕсли;
		Если СокрЛП(Выборка.КПП) <> "" Тогда
			КонтрагентОбъект.КПП = "";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У контрагента %1 очищен КПП (%2), так как для контрагентов, зарегистрированных за пределами РФ, КПП не указывается'"),
				Выборка.Контрагент, Выборка.КПП);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение, ,
				Выборка.Контрагент, 
				ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВерсиюУведомленияОКонтролируемыхСделках2019() Экспорт
	
	Документы.УведомлениеОКонтролируемыхСделках.УстановитьВерсиюУведомленияОКонтролируемыхСделках2019();
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсии

Процедура ПодготовитьИнформационнуюБазу() Экспорт
	
	// При переходе с ПРОФ на КОРП флажки учета по подразделениям будут установлены,
	// т.к. они установлены в плане счетов. Но мы не хотим, чтобы учет по подразделениям
	// после перехода с ПРОФ включился. Для этого приведем план счетов в соответствии с опцией.
	ВестиУчетПоПодразделениям = Константы.ВестиУчетПоПодразделениям.Получить();
	ПланыСчетов.Хозрасчетный.НастроитьПланСчетовДляОбособленныхПодразделений(ВестиУчетПоПодразделениям);
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	//Тут размещаются обработчики обновления специфичные для КОРП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.1";
	Обработчик.Процедура           = "УчетОбособленныхПодразделений.ЗаполнитьКодыКлассификаторовВПредметахКонтролируемыхСделок";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет коды классификаторов элементов справочника Номенклатура, ОсновныеСредства, НематериальныеАктивы, ОбъектыСтроительства 
			| из регистра сведений ПредметыКонтролируемыхСделок.");
	Обработчик.РежимВыполнения = "Отложенно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.45.2";
	Обработчик.Процедура           = "Справочники.РегистрацииВНалоговомОргане.ЗаполнитьКодыРегионовИСлужебныеНаименования";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.РежимВыполнения 	   = "Отложенно";
	Обработчик.Идентификатор 	   = Новый УникальныйИдентификатор("2cd56a7a-d2ce-4a88-9268-af7703959fcb");
	Обработчик.Комментарий 		   = НСтр("ru = 'Заполняет значения новых реквизитов ""Регион"" и ""Наименование служебное"" справочника ""Регистрации в налоговых органах"".
										|Настройка налоговых органов подачи декларации по налогу на прибыль пока невозможна.'");
	
КонецПроцедуры

Процедура ПолучитьВидОтправляемогоДокументаПоСсылке(ВидОтправляемогоДокумента, ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках") Тогда
		ВидОтправляемогоДокумента = Справочники.ВидыОтправляемыхДокументов.УведомлениеОКонтролируемыхСделках;
	КонецЕсли;
	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсуствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсуствует 
//			- ВариантОтчета - Строка(3) - Корректировочный номер (0 - Первичный)
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	МассивУведомлений = Новый Массив();
	Для Каждого СвойстваОбъекта ИЗ СвойстваОбъектов Цикл
		Если ТипЗнч(СвойстваОбъекта.Ссылка) = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках") Тогда
			МассивУведомлений.Добавить(СвойстваОбъекта.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУведомлений.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("МассивУведомлений", МассивУведомлений);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УведомлениеОКонтролируемыхСделках.Ссылка,
		|	УведомлениеОКонтролируемыхСделках.Дата КАК ДатаСоздания,
		|	УведомлениеОКонтролируемыхСделках.Организация КАК Организация,
		|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ОтчетныйГод,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(УведомлениеОКонтролируемыхСделках.ОтчетныйГод, ГОД) КАК ДатаОкончания,
		|	УведомлениеОКонтролируемыхСделках.ПометкаУдаления,
		|	ЕСТЬNULL(УведомлениеОКонтролируемыхСделках.Организация.РегистрацияВНалоговомОргане.Код, """") КАК КодКонтролирующегоОргана
		|ИЗ
		|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
		|ГДЕ
		|	УведомлениеОКонтролируемыхСделках.Ссылка В(&МассивУведомлений)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокиОбъектов = СвойстваОбъектов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
			Для Каждого СтрокаОбъекта ИЗ СтрокиОбъектов Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Выборка);
				СтрокаОбъекта.Наименование = НСтр("ru = 'Уведомление о контролируемых сделках'");
				СтрокаОбъекта.ВариантОтчета = Формат(Выборка.НомерКорректировки, "ЧЦ=3; ЧГ=0");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВерсиюУведомленияОКонтролируемыхСделках() Экспорт
	
	Документы.УведомлениеОКонтролируемыхСделках.УстановитьВерсиюУведомленияОКонтролируемыхСделках();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПодразделенияОСПоДаннымМестонахождения()
	
	СписокСчетов = ПланыСчетов.Хозрасчетный.СчетаОСДляЗаполненияПодразделенияПоДаннымМестонахождения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Рег1.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Рег2.Период) ЕСТЬ NULL 
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Рег2.Период), СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	Рег1.ОсновноеСредство КАК ОсновноеСредство,
	|	Рег1.Организация КАК Организация,
	|	Рег1.Местонахождение КАК Местонахождение
	|ПОМЕСТИТЬ ВТ_МестонахождениеОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК Рег1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК Рег2
	|		ПО Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	|			И Рег1.Период < Рег2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Рег1.Период,
	|	Рег1.ОсновноеСредство,
	|	Рег1.Организация,
	|	Рег1.Местонахождение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Рег1.Период,
	|	Рег1.ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.СчетДт В (&СписокСчетов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Дт,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.СчетКт В (&СписокСчетов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Кт,
	|	ЕСТЬNULL(ХозрасчетныйСубконтоДт.Значение, ХозрасчетныйСубконтоКт.Значение) КАК ОС,
	|	Хозрасчетный.Организация,
	|	Хозрасчетный.Период
	|ПОМЕСТИТЬ ВТ_ПроводкиПоОС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоДт
	|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконтоДт.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконтоДт.НомерСтроки
	|			И (ХозрасчетныйСубконтоДт.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))
	|			И (ХозрасчетныйСубконтоДт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоКт
	|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконтоКт.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконтоКт.НомерСтроки
	|			И (ХозрасчетныйСубконтоКт.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))
	|			И (ХозрасчетныйСубконтоКт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|ГДЕ
	|	(Хозрасчетный.СчетДт В (&СписокСчетов)
	|			ИЛИ Хозрасчетный.СчетКт В (&СписокСчетов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПроводкиПоОС.Регистратор КАК Регистратор,
	|	ВТ_ПроводкиПоОС.НомерСтроки КАК НомерСтроки,
	|	ВТ_МестонахождениеОСБухгалтерскийУчет.Местонахождение,
	|	ВТ_ПроводкиПоОС.Дт,
	|	ВТ_ПроводкиПоОС.Кт
	|ИЗ
	|	ВТ_ПроводкиПоОС КАК ВТ_ПроводкиПоОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестонахождениеОСБухгалтерскийУчет КАК ВТ_МестонахождениеОСБухгалтерскийУчет
	|		ПО ВТ_ПроводкиПоОС.Организация = ВТ_МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ВТ_ПроводкиПоОС.ОС = ВТ_МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|			И (ВТ_ПроводкиПоОС.Период МЕЖДУ ВТ_МестонахождениеОСБухгалтерскийУчет.ДатаНачала И ВТ_МестонахождениеОСБухгалтерскийУчет.ДатаОкончания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Попытка
			ТекущийРегистратор = Неопределено;
			НаборЗаписей = Неопределено;
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Регистратор <> ТекущийРегистратор Тогда
					Если НаборЗаписей <> Неопределено Тогда
						НаборЗаписей.Записать();
					КонецЕсли;
					
					ТекущийРегистратор = Выборка.Регистратор;
					НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
					НаборЗаписей.Прочитать();
				КонецЕсли;
				
				Запись = НаборЗаписей[Выборка.НомерСтроки - 1];
				Если Выборка.Дт Тогда
					Запись["ПодразделениеДт"] = Выборка.Местонахождение;
				КонецЕсли;
				Если Выборка.Кт Тогда
					Запись["ПодразделениеКт"] = Выборка.Местонахождение;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписей <> Неопределено Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации(
				ОбщегоНазначенияБП.СобытиеЖурналаРегистрацииПараметрыУчета(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыБухгалтерии.Хозрасчетный,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоСубконтоРегистрацияВНалоговомОргане()
	
	////////////////////////////////////////////////////
	// Обновление проводок по налогам и сборам
	
	Запрос = Новый Запрос;
	
	РасчетЗарплатыПоПодразделениям = Константы.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций.Получить();
	СписокСчетов = ПланыСчетов.Хозрасчетный.СчетаДляУстановкиСубконтоРегистрацияВНалоговомОргане().ВыгрузитьКолонку("Счет");
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("РасчетЗарплатыПоПодразделениям",    РасчетЗарплатыПоПодразделениям);
	Запрос.УстановитьПараметр("ПустаяРегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТ_регистрацииВНалоговомОргане
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.СчетДт В (&СписокСчетов) КАК Дт,
	|	Хозрасчетный.СчетКт В (&СписокСчетов) КАК Кт,
	|	Хозрасчетный.Организация,
	|	ВЫБОР
	|		КОГДА &РасчетЗарплатыПоПодразделениям
	|				И Хозрасчетный.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ)
	|			ТОГДА ВЫРАЗИТЬ(Хозрасчетный.Регистратор КАК Документ.СписаниеСРасчетногоСчета).РегистрацияВНалоговомОргане
	|		ИНАЧЕ &ПустаяРегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТ_Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.СчетДт В (&СписокСчетов)
	|			ИЛИ Хозрасчетный.СчетКт В (&СписокСчетов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Проводки.Регистратор КАК Регистратор,
	|	ВТ_Проводки.НомерСтроки КАК НомерСтроки,
	|	ВТ_Проводки.Дт,
	|	ВТ_Проводки.Кт,
	|	ВЫБОР
	|		КОГДА ВТ_Проводки.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ВТ_регистрацииВНалоговомОргане.РегистрацияВНалоговомОргане
	|		ИНАЧЕ ВТ_Проводки.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТ_Проводки КАК ВТ_Проводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_регистрацииВНалоговомОргане КАК ВТ_регистрацииВНалоговомОргане
	|		ПО ВТ_Проводки.Организация = ВТ_регистрацииВНалоговомОргане.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Попытка
			ТекущийРегистратор = Неопределено;
			НаборЗаписей = Неопределено;
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Регистратор <> ТекущийРегистратор Тогда
					Если НаборЗаписей <> Неопределено Тогда
						НаборЗаписей.Записать();
					КонецЕсли;
					
					ТекущийРегистратор = Выборка.Регистратор;
					НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
					НаборЗаписей.Прочитать();
				КонецЕсли;
				
				Запись = НаборЗаписей[Выборка.НомерСтроки - 1];
				
				Если Выборка.Дт Тогда
					Запись["СубконтоДт"].РегистрацияВНалоговомОргане = Выборка.РегистрацияВНалоговомОргане;
				КонецЕсли;
				Если Выборка.Кт Тогда
					Запись["СубконтоКт"].РегистрацияВНалоговомОргане = Выборка.РегистрацияВНалоговомОргане;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписей <> Неопределено Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации(
				ОбщегоНазначенияБП.СобытиеЖурналаРегистрацииПараметрыУчета(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыБухгалтерии.Хозрасчетный,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;

	////////////////////////////////////////////////////
	// Обновление документов по налогам и сборам
	
	Запрос.УстановитьПараметр("РасчетЗарплатыПоПодразделениям",    РасчетЗарплатыПоПодразделениям);
	Запрос.УстановитьПараметр("ПустаяРегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТ_регистрацииВНалоговомОргане
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &РасчетЗарплатыПоПодразделениям
	|				И СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ)
	|				И СписаниеСРасчетногоСчета.РегистрацияВНалоговомОргане <> &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА СписаниеСРасчетногоСчета.РегистрацияВНалоговомОргане
	|		ИНАЧЕ ВТ_регистрацииВНалоговомОргане.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	СписаниеСРасчетногоСчета.Ссылка КАК Регистратор,
	|	""СубконтоДт"" КАК ИмяРеквизита,
	|	NULL КАК НомерСтроки,
	|	СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	NULL КАК ИмяТЧ
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_регистрацииВНалоговомОргане КАК ВТ_регистрацииВНалоговомОргане
	|		ПО СписаниеСРасчетногоСчета.Организация = ВТ_регистрацииВНалоговомОргане.Организация
	|ГДЕ
	|	СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом В(&СписокСчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_регистрацииВНалоговомОргане.РегистрацияВНалоговомОргане,
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.Ссылка,
	|	""СубконтоДт"",
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.НомерСтроки,
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.СчетДт,
	|	""ОтражениеВУчете""
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВУчетеОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_регистрацииВНалоговомОргане КАК ВТ_регистрацииВНалоговомОргане
	|		ПО ОтражениеЗарплатыВУчетеОтражениеВУчете.Ссылка.Организация = ВТ_регистрацииВНалоговомОргане.Организация
	|ГДЕ
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.СчетДт В(&СписокСчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_регистрацииВНалоговомОргане.РегистрацияВНалоговомОргане,
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.Ссылка,
	|	""СубконтоКт"",
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.НомерСтроки,
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.СчетКт,
	|	""ОтражениеВУчете""
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВУчетеОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_регистрацииВНалоговомОргане КАК ВТ_регистрацииВНалоговомОргане
	|		ПО ОтражениеЗарплатыВУчетеОтражениеВУчете.Ссылка.Организация = ВТ_регистрацииВНалоговомОргане.Организация
	|ГДЕ
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.СчетКт В(&СписокСчетов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	СчетРасчетыСБюджетом = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	
	Если Не Результат.Пустой() Тогда
		
		Попытка
			ТекущийРегистратор = Неопределено;
			РегистраторОбъект = Неопределено;
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Регистратор <> ТекущийРегистратор Тогда
					
					Если РегистраторОбъект <> Неопределено Тогда
						РегистраторОбъект.Записать();
					КонецЕсли;
					
					ТекущийРегистратор = Выборка.Регистратор;
					РегистраторОбъект = ТекущийРегистратор.ПолучитьОбъект();
					
				КонецЕсли;
				
				Если Выборка.СчетУчета = СчетРасчетыСБюджетом Тогда
					НомерСубконто = 3;
				Иначе
					НомерСубконто = 2;
				КонецЕсли;
				
				Если Выборка.ИмяТЧ = Null Тогда // документ без ТЧ
					
					РегистраторОбъект[Выборка.ИмяРеквизита + НомерСубконто] = Выборка.РегистрацияВНалоговомОргане;
					Если ТипЗнч(ТекущийРегистратор) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
						РегистраторОбъект.РегистрацияВНалоговомОргане = Неопределено;
					КонецЕсли;
					
				Иначе // документ с ТЧ
					
					РегистраторОбъект[Выборка.ИмяТЧ][Выборка.НомерСтроки-1][Выборка.ИмяРеквизита + НомерСубконто] = Выборка.РегистрацияВНалоговомОргане;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если РегистраторОбъект <> Неопределено Тогда
				РегистраторОбъект.Записать();
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияБП.СобытиеЖурналаРегистрацииПараметрыУчета(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьОпциюРасчетаЗарплатыПоПодразделениямДляНебольшихОрганизаций()
	
	Если Константы.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций.Получить() Тогда
		Константы.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти