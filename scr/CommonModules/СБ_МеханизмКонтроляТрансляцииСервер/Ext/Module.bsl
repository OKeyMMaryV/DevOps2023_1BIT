
Процедура СБ_МеханизмКонтроляТрансляцииПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-06-13 (#2843)
	Если Источник.ДополнительныеСвойства.Свойство("ДополнительныеАналитики") Тогда
		ДополнительныеАналитики = Источник.ДополнительныеСвойства.ДополнительныеАналитики;
	Иначе	
		ДополнительныеАналитики = бит_МеханизмТрансляции.ПолучитьАналитикиОбъекта(Источник.Ссылка);
		Источник.ДополнительныеСвойства.Вставить("ДополнительныеАналитики",	ДополнительныеАналитики);	
	КонецЕсли;
	
	ОтразитьВЗакрытомПериоде = ДополнительныеАналитики.Получить("ОтразитьВЗакрытомПериоде");
	Если НЕ ЗначениеЗаполнено(ОтразитьВЗакрытомПериоде) Тогда 
				
		ОтразитьВЗакрытомПериоде = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Источник.Ссылка,
									  	   ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ОтразитьВЗакрытомПериоде, Ложь);
		
		Источник.ДополнительныеСвойства.ДополнительныеАналитики.Вставить("ОтразитьВЗакрытомПериоде",	ОтразитьВЗакрытомПериоде);		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-06-13 (#2843)
	
	ТипОбъекта = ТипЗнч(Источник);
	
	Если Источник.ДополнительныеСвойства.Свойство("СформироватьКорректировочныеПроводки") 
		И ТипОбъекта = Тип("ДокументОбъект.РегламентнаяОперация") Тогда
		Возврат;	
	КонецЕсли; 	
	
	Если Источник.Движения.Найти("СБ_КорректировкаРСБУ") = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДокументыДелающиеДвиженияПриЗаписи = Новый Массив;
	ДокументыДелающиеДвиженияПриЗаписи.Добавить(Тип("ДокументОбъект.ОперацияБух"));
	ДокументыДелающиеДвиженияПриЗаписи.Добавить(Тип("ДокументОбъект.РегламентнаяОперация"));
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись 
		И ДокументыДелающиеДвиженияПриЗаписи.Найти(ТипОбъекта) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка 		= Источник.Ссылка;
	МетаданныеОбъекта 	= Источник.Метаданные();	
	ДатаДокумента		= Источник.Дата;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеОбъекта) Тогда
		Организация = Источник.Организация;
	Иначе
		Организация = Неопределено;
	КонецЕсли; 
	
	РБ_МУ = СБ_МеханизмКонтроляТрансляцииПовтИсп.ОбъектМетаданных_РБ_МУ();
	
	ДатыОткрытогоПериода = бит_КонтрольЗакрытогоПериода.ПолучитьДатыОткрытогоПериода(Организация, РБ_МУ);
	
	ДатаОткрытогоПериодаМСФО = ДатыОткрытогоПериода[РБ_МУ];
	Если ДатаОткрытогоПериодаМСФО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Дата >= ДатаОткрытогоПериодаМСФО Тогда
		Возврат;
	КонецЕсли; 
	
	
	НаборЗаписейКорректировкиРСБУ 	= РегистрыБухгалтерии.СБ_КорректировкаРСБУ.СоздатьНаборЗаписей();
	
	ТаблицаКорректировкиРСБУ 		= НаборЗаписейКорректировкиРСБУ.Выгрузить();
	ТаблицаКорректировкиРСБУ.Колонки.Удалить("Регистратор");
	ТаблицаКорректировкиРСБУ.Колонки.Удалить("МоментВремени");
	ТаблицаКорректировкиРСБУ.Колонки.Удалить("НомерСтроки");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-06-13 (#2843)
	Если НЕ ОтразитьВЗакрытомПериоде Тогда
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-06-13 (#2843)	
		Источник.ДополнительныеСвойства.Вставить("СформироватьКорректировочныеПроводки", 	Истина);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-06-13 (#2843)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-06-13 (#2843)
	Источник.ДополнительныеСвойства.Вставить("КорректировочныеПроводкиЗаписаны", 		Ложь);
	Источник.ДополнительныеСвойства.Вставить("ТаблицаКорректировкиРСБУ", 				ТаблицаКорректировкиРСБУ);
	Источник.ДополнительныеСвойства.Вставить("ДатаОткрытогоПериодаМСФО",				ДатаОткрытогоПериодаМСФО);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-06-13 (#2843)
	Если ОтразитьВЗакрытомПериоде Тогда		
		Возврат;
	КонецЕсли;
    //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-06-13 (#2843)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СБ_КорректировкаРСБУДвиженияССубконто.Период,
	|	СБ_КорректировкаРСБУДвиженияССубконто.СчетДт,
	|	СБ_КорректировкаРСБУДвиженияССубконто.СубконтоДт1,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ВидСубконтоДт1,
	|	СБ_КорректировкаРСБУДвиженияССубконто.СубконтоДт2,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ВидСубконтоДт2,
	|	СБ_КорректировкаРСБУДвиженияССубконто.СубконтоДт3,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ВидСубконтоДт3,
	|	СБ_КорректировкаРСБУДвиженияССубконто.СчетКт,
	|	СБ_КорректировкаРСБУДвиженияССубконто.СубконтоКт1,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ВидСубконтоКт1,
	|	СБ_КорректировкаРСБУДвиженияССубконто.СубконтоКт2,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ВидСубконтоКт2,
	|	СБ_КорректировкаРСБУДвиженияССубконто.СубконтоКт3,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ВидСубконтоКт3,
	|	СБ_КорректировкаРСБУДвиженияССубконто.Организация,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ВалютаДт,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ВалютаКт,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ПодразделениеДт,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ПодразделениеКт,
	|	СБ_КорректировкаРСБУДвиженияССубконто.Сумма,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ВалютнаяСуммаДт,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ВалютнаяСуммаКт,
	|	СБ_КорректировкаРСБУДвиженияССубконто.КоличествоДт,
	|	СБ_КорректировкаРСБУДвиженияССубконто.КоличествоКт,
	|	СБ_КорректировкаРСБУДвиженияССубконто.Содержание,
	|	СБ_КорректировкаРСБУДвиженияССубконто.НеКорректироватьСтоимостьАвтоматически,
	|	СБ_КорректировкаРСБУДвиженияССубконто.Фиксировать,
	|	СБ_КорректировкаРСБУДвиженияССубконто.ПериодКорректировки,
	|	СБ_КорректировкаРСБУДвиженияССубконто.Активность
	|ИЗ
	|	РегистрБухгалтерии.СБ_КорректировкаРСБУ.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Регистратор
	|				И Активность,
	|			,
	|			) КАК СБ_КорректировкаРСБУДвиженияССубконто";
	Запрос.УстановитьПараметр("Регистратор",          ДокументСсылка);
	Запрос.УстановитьПараметр("ПериодКорректировки",  ДатаОткрытогоПериодаМСФО);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		//Это первое проведение в закрытом периоде
		//Сохраним и отсторнируем записанные проводки РСБУ в ИБ
		
		Проводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		Проводки.Отбор.Регистратор.Установить(Источник.Ссылка);
		Проводки.Прочитать();
		
		ТЗПроводки = Проводки.Выгрузить();
		
		Для каждого Проводка Из ТЗПроводки Цикл
			
			Если Проводка.Сумма = 0 Тогда
				//Нас интересует только проводка по БУ
				Продолжить;
			КонецЕсли;
			
			Если НЕ Проводка.Активность Тогда
				Продолжить;	
			КонецЕсли; 
			
			Если Проводка.Период >= ДатаОткрытогоПериодаМСФО Тогда
				Продолжить;
			КонецЕсли; 
		
			//Проводка датой документа
			ДобавитьСтрокуПроводки(ТаблицаКорректировкиРСБУ
				, Проводка
				, ДатаДокумента //Проводка.Период
				, ДатаОткрытогоПериодаМСФО
				, Ложь
				);
			
			//Сторно проводки датой открытого периода
			ДобавитьСтрокуПроводки(ТаблицаКорректировкиРСБУ
				, Проводка
				, ДатаОткрытогоПериодаМСФО
				, ДатаОткрытогоПериодаМСФО
				, Истина
				);

		КонецЦикла;
			
		ТЗПроводки.Колонки.Удалить("Регистратор");
		ТЗПроводки.Колонки.Удалить("МоментВремени");
		ТЗПроводки.Колонки.Удалить("НомерСтроки");
		
		ТЗПроводки.Колонки.Удалить("СуммаВРДт");
		ТЗПроводки.Колонки.Удалить("СуммаВРКт");
		ТЗПроводки.Колонки.Удалить("СуммаНУДт");
		ТЗПроводки.Колонки.Удалить("СуммаНУКт");
		ТЗПроводки.Колонки.Удалить("СуммаПРДт");
		ТЗПроводки.Колонки.Удалить("СуммаПРКт");
		
		Источник.ДополнительныеСвойства.Вставить("ПроводкиРСБУ", ТЗПроводки);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НЕ (Выборка.ПериодКорректировки < ДатаОткрытогоПериодаМСФО 
					ИЛИ (Выборка.ПериодКорректировки = ДатаОткрытогоПериодаМСФО 
						И Выборка.Фиксировать)) Тогда
				Продолжить;				
			КонецЕсли; 
			
			ДобавитьСтрокуПроводки(ТаблицаКорректировкиРСБУ
				 , Выборка
				 , Выборка.Период
				 , ДатаОткрытогоПериодаМСФО
				 , Ложь
				 , ?(Выборка.ПериодКорректировки < ДатаОткрытогоПериодаМСФО, Истина, Выборка.Фиксировать)
				 , Выборка.ПериодКорректировки
				);
				
			Если Выборка.ПериодКорректировки < ДатаОткрытогоПериодаМСФО 
					И НЕ Выборка.Фиксировать Тогда
					
				//сделаем дополнительные проводки сторнирующие прошую корректировку
				ДобавитьСтрокуПроводки(ТаблицаКорректировкиРСБУ
					 , Выборка
					 , ?(Выборка.Период = Выборка.ПериодКорректировки, ДатаОткрытогоПериодаМСФО, Выборка.Период)
					 , ДатаОткрытогоПериодаМСФО
					 , Истина
				 	 , ?(Выборка.ПериодКорректировки < ДатаОткрытогоПериодаМСФО, Истина, Выборка.Фиксировать)
					 //, Выборка.ПериодКорректировки
					);
					
			КонецЕсли; 
				
		КонецЦикла;  
		
	КонецЕсли; 
	
	Если ТаблицаКорректировкиРСБУ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ТаблицаКорректировкиРСБУ", 				ТаблицаКорректировкиРСБУ);
	
КонецПроцедуры

Процедура СБ_МеханизмКонтроляТрансляцииОбработкаПроведенияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("СформироватьКорректировочныеПроводки") Тогда
		Возврат;	
	КонецЕсли; 	
	
	ДатаОткрытогоПериодаМСФО = Источник.ДополнительныеСвойства.ДатаОткрытогоПериодаМСФО;
	ТаблицаКорректировкиРСБУ = Источник.ДополнительныеСвойства.ТаблицаКорректировкиРСБУ;
	ДатаДокумента			 = Источник.Дата;
	
	Проводки 	= Источник.Движения.Хозрасчетный;
	
	ТЗПроводки 	= Проводки.Выгрузить();
	
	ПрежниеПроводки = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ПроводкиРСБУ",ПрежниеПроводки) Тогда
			
		ТЗПроводки.Колонки.Удалить("Регистратор");
		ТЗПроводки.Колонки.Удалить("МоментВремени");
		ТЗПроводки.Колонки.Удалить("НомерСтроки");
		
		ТЗПроводки.Колонки.Удалить("СуммаВРДт");
		ТЗПроводки.Колонки.Удалить("СуммаВРКт");
		ТЗПроводки.Колонки.Удалить("СуммаНУДт");
		ТЗПроводки.Колонки.Удалить("СуммаНУКт");
		ТЗПроводки.Колонки.Удалить("СуммаПРДт");
		ТЗПроводки.Колонки.Удалить("СуммаПРКт");
		//
		//ПрежниеПроводки.Колонки.Удалить("СуммаВРДт");
		//ПрежниеПроводки.Колонки.Удалить("СуммаВРКт");
		//ПрежниеПроводки.Колонки.Удалить("СуммаНУДт");
		//ПрежниеПроводки.Колонки.Удалить("СуммаНУКт");
		//ПрежниеПроводки.Колонки.Удалить("СуммаПРДт");
		//ПрежниеПроводки.Колонки.Удалить("СуммаПРКт");
		
		ДозаполнитьПустыеСубконто(ПрежниеПроводки);
		ДозаполнитьПустыеСубконто(ТЗПроводки);
		
		Если бит_КонтрольЗакрытогоПериода.СравнитьТаблицы(ПрежниеПроводки, ТЗПроводки, СтрЗаменить(бит_КонтрольЗакрытогоПериода.СформироватьСтрокуДляСортировки("Хозрасчетный"), ",СуммаНУДт,СуммаНУКт,СуммаПРДт,СуммаПРКт,СуммаВРДт,СуммаВРКт", "")) Тогда
			Возврат;	
		КонецЕсли; 
		
	КонецЕсли; 
		
	Для каждого Проводка Из ТЗПроводки Цикл
		
		Если Проводка.Сумма = 0 Тогда
			//Нас интересует только проводка по БУ
			Продолжить;
		КонецЕсли;
		
		Если НЕ Проводка.Активность Тогда
			Продолжить;	
		КонецЕсли; 
		
		//Сторно актуальной проводки датой документа
		ДобавитьСтрокуПроводки(ТаблицаКорректировкиРСБУ
			, Проводка
			, ДатаДокумента //Проводка.Период
			, ДатаОткрытогоПериодаМСФО
			, Истина
			, Ложь
			);
			
		//Проводка датой октрытого периода
		ДобавитьСтрокуПроводки(ТаблицаКорректировкиРСБУ
			, Проводка
			, ДатаОткрытогоПериодаМСФО
			, ДатаОткрытогоПериодаМСФО
			, Ложь
			, Ложь
			);
		
	КонецЦикла;
		
	Источник.Движения.СБ_КорректировкаРСБУ.Загрузить(ТаблицаКорректировкиРСБУ);
	Источник.Движения.СБ_КорректировкаРСБУ.Записывать = Истина;
	
КонецПроцедуры

Процедура ДобавитьСтрокуПроводки(ТаблицаПроводок, ЭталоннаяПроводка, Период, ДатаОткрытогоПериодаМСФО, Сторно, Фиксировать = Истина, ПериодКорректировки = Неопределено)
	
	НоваяПроводка = ТаблицаПроводок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяПроводка, ЭталоннаяПроводка);
	
	НоваяПроводка.Период 				= Период;
	НоваяПроводка.ПериодКорректировки 	= ?(ПериодКорректировки = Неопределено, ДатаОткрытогоПериодаМСФО, ПериодКорректировки);
	НоваяПроводка.Фиксировать 			= Фиксировать;
	НоваяПроводка.Активность 			= Истина;
	
	//Для Сч = 1 По 2 Цикл
	//	
	//	ДтКт = ?(Сч = 1, "Дт", "Кт");
	//	
	//	Для НомерСубконто = 1 По 3 Цикл
	//		
	//		ЗначениеСубконто = ЭталоннаяПроводка["Субконто" + ДтКт + НомерСубконто];
	//		Если Не ЗначениеЗаполнено(ЗначениеСубконто) Тогда
	//			Продолжить;	
	//		КонецЕсли; 
	//		
	//		НоваяПроводка["Субконто" + ДтКт][ЭталоннаяПроводка["ВидСубконто" + ДтКт + НомерСубконто]] = ЗначениеСубконто;
	//		
	//	КонецЦикла; 
	//	
	//КонецЦикла; 
	
	НоваяПроводка.Сумма 				= НоваяПроводка.Сумма * ?(Сторно, -1, 1);
	
	НоваяПроводка.КоличествоКт 			= НоваяПроводка.КоличествоКт * ?(Сторно, -1, 1);
	НоваяПроводка.КоличествоДт 			= НоваяПроводка.КоличествоДт * ?(Сторно, -1, 1);
	
	НоваяПроводка.ВалютнаяСуммаКт 		= НоваяПроводка.ВалютнаяСуммаКт * ?(Сторно, -1, 1);
	НоваяПроводка.ВалютнаяСуммаДт 		= НоваяПроводка.ВалютнаяСуммаДт * ?(Сторно, -1, 1);
	
КонецПроцедуры

Процедура ДозаполнитьПустыеСубконто(ТаблицаПроводок)
	
	Для каждого СтрокаПроводки Из ТаблицаПроводок Цикл
		ПривестиПустыеСубконто(СтрокаПроводки, 3);  
	КонецЦикла; 
	
КонецПроцедуры
 
//бит_MZyubin Процедура приводит пустые субконто в строке таблицы движений к пустому ссылочному значению.
// Необходимо для выполнения коректного сравнения таблиц.
//
// Параметры:
//  СтрокаТаблицы      – СтрокаТаблицыЗначений
//  КоличествоСубконто - Число
//
Процедура ПривестиПустыеСубконто(СтрокаТаблицы,КоличествоСубконто)

	Для й = 1 По 2 Цикл
		
		ДтКт = ?(й = 1,"Дт","Кт");
		
		Для н = 1 По КоличествоСубконто Цикл
			
			ИмяКолонкиСубконто    = "Субконто"+ДтКт+н;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиСубконто]) Тогда
				
				СтрокаТаблицы[ИмяКолонкиСубконто] = Справочники.Контрагенты.ПустаяСсылка();
				
			КонецЕсли; 
			
		КонецЦикла; // по числу субконто	
		
	КонецЦикла; // по ДтКт

КонецПроцедуры //ПривестиПустыеСубконто()

Процедура СБ_МеханизмКонтроляТрансляцииОбработкаУдаленияПроведенияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("СформироватьКорректировочныеПроводки") Тогда
		Возврат;	
	КонецЕсли; 	
	
	ДатаОткрытогоПериодаМСФО = Источник.ДополнительныеСвойства.ДатаОткрытогоПериодаМСФО;
	ТаблицаКорректировкиРСБУ = Источник.ДополнительныеСвойства.ТаблицаКорректировкиРСБУ;
	
	Если Источник.ДополнительныеСвойства.Свойство("Трансляция") Тогда
		
		Проводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		Проводки.Отбор.Регистратор.Установить(Источник.Ссылка);
		Проводки.Прочитать();
		
		ТЗПроводки = Проводки.Выгрузить();
		
		Для каждого Проводка Из ТЗПроводки Цикл
			
			Если Проводка.Сумма = 0 Тогда
				//Нас интересует только проводка по БУ
				Продолжить;
			КонецЕсли;
			
			Если НЕ Проводка.Активность Тогда
				Продолжить;	
			КонецЕсли; 
			
			//Сторно актуальной проводки датой документа
			ДобавитьСтрокуПроводки(ТаблицаКорректировкиРСБУ
				, Проводка
				, Проводка.Период
				, ДатаОткрытогоПериодаМСФО
				, Истина
				, Ложь
				);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	НаборЗаписей = РегистрыБухгалтерии.СБ_КорректировкаРСБУ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
	НаборЗаписей.Загрузить(ТаблицаКорректировкиРСБУ);
	НаборЗаписей.Записать();
	
КонецПроцедуры


Процедура СБ_МеханизмКонтроляТрансляцииПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-08-09 (#2836)
	Если ОК_ПодпискиНаСобытия.ЭтоИзменениеРеквизитовОбъектаБезПроведения(Источник) Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-08-09 (#2836)
	
	Если Не Источник.ДополнительныеСвойства.Свойство("СформироватьКорректировочныеПроводки") Тогда
		Возврат;	
	КонецЕсли; 	
	
	ДатаОткрытогоПериодаМСФО = Источник.ДополнительныеСвойства.ДатаОткрытогоПериодаМСФО;
	ТаблицаКорректировкиРСБУ = Источник.ДополнительныеСвойства.ТаблицаКорректировкиРСБУ.Скопировать();
	ДатаДокумента			 = Источник.Дата;
	
	Если Источник.ДополнительныеСвойства.Свойство("Трансляция") Тогда
		
		Проводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		Проводки.Отбор.Регистратор.Установить(Источник.Ссылка);
		Проводки.Прочитать();
		
	Иначе
		Проводки = Источник.Движения.Хозрасчетный;		
	КонецЕсли; 
	
	ТЗПроводки = Проводки.Выгрузить();
	
	ПрежниеПроводки = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ПроводкиРСБУ",ПрежниеПроводки) Тогда
			
		ТЗПроводки.Колонки.Удалить("Регистратор");
		ТЗПроводки.Колонки.Удалить("МоментВремени");
		ТЗПроводки.Колонки.Удалить("НомерСтроки");
		
		ТЗПроводки.Колонки.Удалить("СуммаВРДт");
		ТЗПроводки.Колонки.Удалить("СуммаВРКт");
		ТЗПроводки.Колонки.Удалить("СуммаНУДт");
		ТЗПроводки.Колонки.Удалить("СуммаНУКт");
		ТЗПроводки.Колонки.Удалить("СуммаПРДт");
		ТЗПроводки.Колонки.Удалить("СуммаПРКт");
		
		ДозаполнитьПустыеСубконто(ПрежниеПроводки);
		ДозаполнитьПустыеСубконто(ТЗПроводки);
		
		Если бит_КонтрольЗакрытогоПериода.СравнитьТаблицы(ПрежниеПроводки, ТЗПроводки, СтрЗаменить(бит_КонтрольЗакрытогоПериода.СформироватьСтрокуДляСортировки("Хозрасчетный"), ",СуммаНУДт,СуммаНУКт,СуммаПРДт,СуммаПРКт,СуммаВРДт,СуммаВРКт", "")) Тогда
			Возврат;	
		КонецЕсли; 
		
	КонецЕсли; 
		
	Для каждого Проводка Из ТЗПроводки Цикл
		
		Если Проводка.Сумма = 0 Тогда
			//Нас интересует только проводка по БУ
			Продолжить;
		КонецЕсли;
		
		Если НЕ Проводка.Активность Тогда
			Продолжить;	
		КонецЕсли; 
		
		//Сторно актуальной проводки датой документа
		ДобавитьСтрокуПроводки(ТаблицаКорректировкиРСБУ
			, Проводка
			, ДатаДокумента //Проводка.Период
			, ДатаОткрытогоПериодаМСФО
			, Истина
			, Ложь
			);
			
		//Проводка датой октрытого периода
		ДобавитьСтрокуПроводки(ТаблицаКорректировкиРСБУ
			, Проводка
			, ДатаОткрытогоПериодаМСФО
			, ДатаОткрытогоПериодаМСФО
			, Ложь
			, Ложь
			);
		
	КонецЦикла;
		
	НаборЗаписей = РегистрыБухгалтерии.СБ_КорректировкаРСБУ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
	НаборЗаписей.Загрузить(ТаблицаКорректировкиРСБУ);
	НаборЗаписей.Записать();
	
	Источник.Движения.СБ_КорректировкаРСБУ.Загрузить(ТаблицаКорректировкиРСБУ);
	
	Источник.ДополнительныеСвойства.Вставить("КорректировочныеПроводкиЗаписаны", Истина);
	
КонецПроцедуры

Процедура ДополнитьЗаголовокОтчета(ПараметрыОтчета, Результат) Экспорт
	
	ИсточникДанных = ПараметрыОтчета.ИсточникДанных;
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	
	ПредставлениеИсточникаДанных = "";
	Если ИсточникДанных = 0 Тогда
		ПредставлениеИсточникаДанных = "РСБУ с корректировкой";	
	ИначеЕсли ИсточникДанных = 1 Тогда
		ПредставлениеИсточникаДанных = "Корректировка РСБУ";	
	ИначеЕсли ИсточникДанных = 2 Тогда
		ПредставлениеИсточникаДанных = "РСБУ";	
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ПредставлениеИсточникаДанных) Тогда
		
		ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета 		= "Источник данных:";
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета 	= ПредставлениеИсточникаДанных;
		
		Результат.Вывести(ОбластьОписаниеНастроек);
		
	КонецЕсли; 
	
КонецПроцедуры

//izhtc alena Процедура в 3.0 не используется(
Процедура ЗаполнитьДанныеОтчета(ОтчетОбъект) Экспорт
	
	//ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	//
	////Данные отчета
	//Если ОтчетОбъект.ДанныеОтчета = Неопределено Тогда
	//	ОтчетОбъект.ДанныеОтчета = Новый Структура;
	//КонецЕсли;
	//
	//// Показатели отчета
	//Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
	//	ОтчетОбъект.ПолучитьСтруктуруПоказателейОтчета();
	//КонецЕсли;
	//	
	//// Дополнительные поля
	//Если Не ОтчетОбъект.ДанныеОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
	//	ОтчетОбъект.ДанныеОтчета.Вставить("РазмещениеДополнительныхПолей", 0);
	//КонецЕсли;
	//
	//Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СБ_ОборотноСальдоваяВедомость"
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СБ_ОборотноСальдоваяВедомостьПоСчету"
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СБ_АнализСчета"
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость"
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
	//	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
	//		ДополнительныеПоля = Новый ТаблицаЗначений;
	//		ДополнительныеПоля.Колонки.Добавить("Использование");
	//		ДополнительныеПоля.Колонки.Добавить("Представление");
	//		ДополнительныеПоля.Колонки.Добавить("Поле");
	//		ДополнительныеПоля.Колонки.Добавить("Положение");
	//		ОтчетОбъект.ДанныеОтчета.Вставить("ДополнительныеПоля", ДополнительныеПоля);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//
	//// Группировка по счету
	//Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СБ_АнализСчета" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СБ_ОборотноСальдоваяВедомостьПоСчету" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
	//	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("Группировка") Тогда
	//		Группировка = Новый ТаблицаЗначений;
	//		Группировка.Колонки.Добавить("Использование");
	//		Группировка.Колонки.Добавить("Представление");
	//		Группировка.Колонки.Добавить("Поле");
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов"));
	//		Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
	//		ОтчетОбъект.ДанныеОтчета.Вставить("Группировка", Группировка);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//
	//// Группировка по кор. счетам
	//Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета"
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СБ_АнализСчета" Тогда
	//	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ГруппировкаКор") Тогда
	//		ГруппировкаКор = Новый ТаблицаЗначений;
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("Булево"));
	//		ГруппировкаКор.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
	//		ГруппировкаКор.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
	//		ГруппировкаКор.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
	//		ГруппировкаКор.Колонки.Добавить("Представление", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(200));
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("СписокЗначений"));
	//		ГруппировкаКор.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
	//		
	//		ОтчетОбъект.ДанныеОтчета.Вставить("ГруппировкаКор", ГруппировкаКор);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Группировка
	//Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СБ_ОборотноСальдоваяВедомость" Тогда
	//	
	//	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("Группировка") Тогда
	//		Группировка = Новый ТаблицаЗначений;
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("Булево"));
	//		Группировка.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
	//		Группировка.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
	//		Группировка.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
	//		Группировка.Колонки.Добавить("Представление", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(200));
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("СписокЗначений"));
	//		Группировка.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
	//		
	//		ОтчетОбъект.ДанныеОтчета.Вставить("Группировка", Группировка);
	//	КонецЕсли;
	//	
	//	// РазвернутоеСальдо 
	//	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("РазвернутоеСальдо") Тогда
	//		РазвернутоеСальдо = Новый ТаблицаЗначений;
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("Булево"));
	//		РазвернутоеСальдо.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
	//		РазвернутоеСальдо.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
	//		РазвернутоеСальдо.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
	//		РазвернутоеСальдо.Колонки.Добавить("Представление", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(200));
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("СписокЗначений"));
	//		РазвернутоеСальдо.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
	//		ОтчетОбъект.ДанныеОтчета.Вставить("РазвернутоеСальдо", РазвернутоеСальдо);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Настройки диаграммы	
	//Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СБ_ОборотноСальдоваяВедомостьПоСчету" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СБ_АнализСчета" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" 
	//	ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
	//	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПоказательДиаграммы") Тогда
	//		ОтчетОбъект.ДанныеОтчета.Вставить("ПоказательДиаграммы", 0);
	//	КонецЕсли;
	//	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ВидПодписиДиаграммы") Тогда
	//		ОтчетОбъект.ДанныеОтчета.Вставить("ВидПодписиДиаграммы", 0010);
	//	КонецЕсли;
	//	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПредставлениеДиаграммы") Тогда
	//		ОтчетОбъект.ДанныеОтчета.Вставить("ПредставлениеДиаграммы", 0);
	//	КонецЕсли;
	//КонецЕсли;
	//
	////Настройки формы
	//Если ОтчетОбъект.НастройкиФормы = Неопределено Тогда
	//	ОтчетОбъект.НастройкиФормы = Новый Структура;
	//КонецЕсли;
	
КонецПроцедуры
//izhtc alena Процедура в 3.0 не используется)

Функция ПолучитьПараметрыРасшифровкиОтчета(Адрес, ИдентификаторОбъекта, Расшифровка) Экспорт
	
	ПараметрыРасшифровки = Новый Структура;
	
	ПараметрыИсполненияОтчета = Отчеты[ИдентификаторОбъекта].ПолучитьПараметрыИсполненияОтчета();
	Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьРасширенныеПараметрыРасшифровки") 
		И ПараметрыИсполненияОтчета.ИспользоватьРасширенныеПараметрыРасшифровки Тогда
		Отчеты[ИдентификаторОбъекта].ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки);
		
		Возврат ПараметрыРасшифровки;
	КонецЕсли;
	
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда 
		ОтчетОбъект       = ДанныеОбъекта;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	Иначе 		
		ОтчетОбъект       = ДанныеОбъекта.Объект;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "АнализСубконто"
		ИЛИ ИдентификаторОбъекта = "АнализСчета"
		ИЛИ ИдентификаторОбъекта = "СБ_АнализСчета"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомость"
		ИЛИ ИдентификаторОбъекта = "СБ_ОборотноСальдоваяВедомость"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "СБ_ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОборотыМеждуСубконто"
		ИЛИ ИдентификаторОбъекта = "ОборотыСчета"
		ИЛИ ИдентификаторОбъекта = "СводныеПроводки" 
		ИЛИ ИдентификаторОбъекта = "ГлавнаяКнига"
		ИЛИ ИдентификаторОбъекта = "ШахматнаяВедомость" Тогда
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		Счет            = Неопределено;
		ПервыйЭлемент   = Неопределено;
		
		Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
			Если ТипЗнч(Расшифровка) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение"       , Расшифровка);
			Иначе 
				МассивПолей = Расшифровка;
				
				ЕстьПоказатель = Истина;
				ПервыйЭлемент = Истина;
				Для Каждого ЭлементСписка Из Расшифровка Цикл
					Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
						Если ЭлементСоответствия.Ключ = "КорСчет" Тогда
							ЕстьКорЗначение = Истина;
						КонецЕсли;
						Если ЭлементСоответствия.Ключ = "Счет" Тогда
							Счет = ЭлементСоответствия.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
			
			МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
			
			Для Каждого Элемент Из МассивПолей Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
					Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
						ПервыйЭлемент = Элемент;
					КонецЕсли;
					Если Элемент.Поле = "Показатель" Тогда
						ЕстьПоказатель = Истина;
					КонецЕсли;
					Если Найти(Элемент.Поле, "Кор") = 1 Тогда
						ЕстьКорЗначение = Истина;
					КонецЕсли;
					Если Элемент.Поле = "Счет" Тогда
						Счет = Элемент.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		формироватьОборотыСчета          = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		
		ПредставлениеДляОСВПоСчету            = НСтр("ru = 'ОСВ по счету %Счет%'");
		ПредставлениеДляКарточкиСчета         = НСтр("ru = 'Карточка счета %Счет%'");
		ПредставлениеДляАнализаСчета          = НСтр("ru = 'Анализ счета %Счет%'");
		ПредставлениеДляОборотыСчета          = НСтр("ru = 'Обороты счета %Счет%'");
		ПредставлениеДляОборотыСчетаПоМесяцам = НСтр("ru = 'Обороты счета %Счет% по месяцам'");
		ПредставлениеДляОборотыСчетаПоДням    = НСтр("ru = 'Обороты счета %Счет% по дням'");
		ПредставлениеДляКарточкиСубконто      = НСтр("ru = 'Карточка субконто'");
		ПредставлениеДляОтчетаПоПроводкам     = НСтр("ru = 'Отчет по проводкам'");
		ПредставлениеОткрытьОбъект 			  = НСтр("ru = 'Открыть ""%Значение%""'");
		
		ПредставлениеДляОСВПоСчету            = СтрЗаменить(ПредставлениеДляОСВПоСчету           , "%Счет%", Счет);
		ПредставлениеДляКарточкиСчета         = СтрЗаменить(ПредставлениеДляКарточкиСчета        , "%Счет%", Счет);
		ПредставлениеДляАнализаСчета          = СтрЗаменить(ПредставлениеДляАнализаСчета         , "%Счет%", Счет);
		ПредставлениеДляОборотыСчета          = СтрЗаменить(ПредставлениеДляОборотыСчета         , "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоМесяцам = СтрЗаменить(ПредставлениеДляОборотыСчетаПоМесяцам, "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоДням    = СтрЗаменить(ПредставлениеДляОборотыСчетаПоДням   , "%Счет%", Счет);
		
		Если ЕстьПоказатель Тогда
			УстановитьВсеПоказатели = Ложь;
		Иначе
			УстановитьВсеПоказатели = Истина;
		КонецЕсли;
		СписокПунктовМеню = Новый СписокЗначений;
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" 
				ИЛИ ИдентификаторОбъекта = "СБ_ОборотноСальдоваяВедомость" Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не БухгалтерскиеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Представление = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
				КонецЕсли;
				//СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчету", ПредставлениеДляОСВПоСчету);
				//СписокПунктовМеню.Добавить("КарточкаСчета"                    , ПредставлениеДляКарточкиСчета);
				//СписокПунктовМеню.Добавить("АнализСчета"                      , ПредставлениеДляАнализаСчета);
				СписокПунктовМеню.Добавить("СБ_ОборотноСальдоваяВедомостьПоСчету", ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("СБ_КарточкаСчета"                    , ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить("СБ_АнализСчета"                      , ПредставлениеДляАнализаСчета);
				//СписокПунктовМеню.Добавить("ОборотыСчетаПоМесяцам"            , ПредставлениеДляОборотыСчетаПоМесяцам);
				//СписокПунктовМеню.Добавить("ОборотыСчетаПоДням"               , ПредставлениеДляОборотыСчетаПоДням);
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "АнализСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							//СписокПунктовМеню.Добавить("КарточкаСчета");
							СписокПунктовМеню.Добавить("СБ_КарточкаСчета");							
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСубконто");	
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "АнализСчета"
						ИЛИ ИдентификаторОбъекта = "СБ_АнализСчета" Тогда 
						Если ЕстьКорЗначение Тогда
							//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Начало (#3525)
							Если ИдентификаторОбъекта = "СБ_АнализСчета" Тогда
								СписокПунктовМеню.Добавить("СБ_ОтчетПоПроводкам");	
							Иначе
							//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Конец (#3525)
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
							//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Начало (#3525)
							КонецЕсли;
							//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Конец (#3525)
						Иначе
							//СписокПунктовМеню.Добавить("КарточкаСчета");		
							СписокПунктовМеню.Добавить("СБ_КарточкаСчета");		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" 
						ИЛИ ИдентификаторОбъекта = "СБ_ОборотноСальдоваяВедомостьПоСчету" Тогда
						//СписокПунктовМеню.Добавить("КарточкаСчета");
						СписокПунктовМеню.Добавить("СБ_КарточкаСчета");		
					ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "СводныеПроводки" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
						СписокПунктовМеню.Добавить("ОборотыСчета", ПредставлениеДляОборотыСчета);
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли;						
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "СводныеПроводки"
						ИЛИ ИдентификаторОбъекта = "ШахматнаяВедомость" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						УстановитьВсеПоказатели = Истина;
					Иначе 
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не БухгалтерскиеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
							Представление = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", ПервыйЭлемент.Значение);
							СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
						КонецЕсли;
						Если ИдентификаторОбъекта = "АнализСубконто" Тогда
							Если Счет <> Неопределено Тогда 
								//СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
								СписокПунктовМеню.Добавить("СБ_КарточкаСчета", ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСубконто", ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "АнализСчета" 
							ИЛИ ИдентификаторОбъекта = "СБ_АнализСчета" Тогда
							Если ЕстьКорЗначение Тогда 
								//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Начало (#3525)
								Если ИдентификаторОбъекта = "СБ_АнализСчета" Тогда
									СписокПунктовМеню.Добавить("СБ_ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
								Иначе
								//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Конец (#3525)
								СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
								//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Начало (#3525)
								КонецЕсли;
								//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Конец (#3525)
							Иначе
								//СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
								СписокПунктовМеню.Добавить("СБ_КарточкаСчета", ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" 
							ИЛИ ИдентификаторОбъекта = "СБ_ОборотноСальдоваяВедомостьПоСчету" Тогда
							//СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							СписокПунктовМеню.Добавить("СБ_КарточкаСчета", ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоляРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
		Если ПоляРасшифровки.Количество() > 0 Тогда
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
			ПараметрыРасшифровки.Вставить("Значение", ПоляРасшифровки[0].Значение);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;   
	Если СписокПунктовМеню <> Неопределено Тогда
		Для Каждого ПунктМеню Из СписокПунктовМеню Цикл
			Если ТипЗнч(ПунктМеню.Значение) = Тип("Строка") Тогда
				НастройкиРасшифровки.Вставить(ПунктМеню.Значение, ПолучитьНастройкиДляРасшифровки(ПунктМеню.Значение, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	КонецЕсли;
	
	Возврат ПараметрыРасшифровки;
	
КонецФункции

Функция ПолучитьНастройкиДляРасшифровки(ИДРасшифровки, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели)
	
	ЕстьПоказатель  = Ложь;
	ЕстьКорЗначение = Ложь;
	ЕстьСчет        = Истина;
	ПервыйЭлемент   = Неопределено;
	Счет            = Неопределено;
	КорСчет         = Неопределено;
	Период          = Неопределено;
	БухТипРесурса   = Неопределено;
	Периодичность   = Неопределено;
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		УстановитьВсеПоказатели = Ложь;
		Показатель = "БУ";
		Для Каждого ЭлементСписка Из МассивПолей Цикл
			Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
				Если ЭлементСоответствия.Ключ = "Счет" Тогда
					Счет = ЭлементСоответствия.Значение;
					ЕстьСчет = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "КорСчет" Тогда
					КорСчет = ЭлементСоответствия.Значение;
					ЕстьКорЗначение = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "Отбор" Тогда
					Для Каждого ЭлементОтбора Из ЭлементСоответствия.Значение Цикл
						Если ЭлементОтбора.Ключ = "Период" Тогда
							Период = ЭлементОтбора.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "БухТипРесурса" Тогда
					БухТипРесурса = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ДобавитьОтборПоВидСубконто    = Истина;
	ДобавитьОтборПоВидКорСубконто = Истина;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Передадим параметры заголовка и подвала
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Ложь);
	ДополнительныеСвойства.Вставить("ВыводитьЕдиницуИзмерения", Ложь);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал", Ложь);
	ДополнительныеСвойства.Вставить("ИсточникДанных", ОтчетОбъект.ИсточникДанных);
	ЗаполнитьЗначенияСвойств(ДополнительныеСвойства, ОтчетОбъект);
	
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ИДРасшифровки = "КарточкаСубконто" Тогда
		ДополнительныеСвойства.Вставить("СписокВидовСубконто", ОтчетОбъект.СписокВидовСубконто.Скопировать());
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоДням" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 6);
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 9);
	КонецЕсли;
	
	Если ИДРасшифровки = "КарточкаСубконто"
		//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Начало (#3525)
		Или ИДРасшифровки = "СБ_ОтчетПоПроводкам"
		//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Конец (#3525)
		Или ИДРасшифровки = "ОтчетПоПроводкам" Тогда
		ЕстьСчет = Ложь;
	Иначе
		ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		ДополнительныеСвойства.Вставить("Организация", ОтчетОбъект.Организация);
		Если ИДРасшифровки = "ОборотыСчета" Тогда
			ДополнительныеСвойства.Вставить("Счет", Счет);
			Если ЕстьКорЗначение Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
			КонецЕсли;
		ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам" Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетДт", Счет, ВидСравненияКомпоновкиДанных.ВИерархии);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетКт", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
	Иначе 
		СписокПолейОтборов = Новый Массив;
		Для каждого Отбор из МассивПолей Цикл
			Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
				
				ЗначениеОтбора 	= Отбор.Значение;
				
				Если ЗначениеОтбора = NULL тогда
					Продолжить;
				КонецЕсли;

				ПолеОтбора 		= Отбор.Поле;
				Если Отбор.Поле = "БухТипРесурса" Тогда  // БухТипРесурса не обрабатываем и не переносим в расшифровывающий отчет
					
					Продолжить;
					
				ИначеЕсли ПолеОтбора = "Счет" И (ИдентификаторОбъекта = "АнализСчета" ИЛИ ИдентификаторОбъекта = "СБ_АнализСчета" Или ИдентификаторОбъекта = "ОборотыСчета") Тогда
					ЗначениеСчет = ?(Счет.Уровень() > ОтчетОбъект.Счет.Уровень(), Счет, ОтчетОбъект.Счет); 
					ДополнительныеСвойства.Вставить("Счет", ЗначениеСчет);
					Если ЕстьСчет И ЗначениеЗаполнено(БухТипРесурса) ИЛИ Не ЕстьСчет Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
					КонецЕсли;
				ИначеЕсли Отбор.Поле = "Счет" И ЕстьСчет Тогда	// Счет задан в дополнительных свойствах, в отбор его добавлять не нужно
					
					Продолжить;
	
				ИначеЕсли Найти(ПолеОтбора, "Субконто") = 1 И (ИдентификаторОбъекта = "АнализСчета"  ИЛИ ИдентификаторОбъекта = "СБ_АнализСчета" ИЛИ ИдентификаторОбъекта = "ОборотыСчета") Тогда
					
					// Субконто нужно преобразовать в СубконтоДт или СубконтоКт
					ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто", "Субконто" + БухТипРесурса);
					
					// Отбором может быть не только само субконто но и его реквизиты
					// Определим ВидСравнения
					Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
						//Для строки подходит только Содержит 
						ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
					Иначе
						// Для иерархии берем ВИерархии, в остальных случаях Равно
						ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
					КонецЕсли;
					
					// Устанавливаем отбор
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
					
				ИначеЕсли ПолеОтбора = "Подразделение" И (ИдентификаторОбъекта = "АнализСчета"  ИЛИ ИдентификаторОбъекта = "СБ_АнализСчета" ИЛИ ИдентификаторОбъекта = "ОборотыСчета") Тогда
					ПолеПодразделение = "Подразделение" + БухТипРесурса;
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеПодразделение, ЗначениеОтбора, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));						
				ИначеЕсли (ПолеОтбора = "Счет" Или ПолеОтбора = "КорСчет") И Не ЕстьСчет Тогда
					Если ПолеОтбора = "КорСчет" И Не ПустаяСтрока(БухТипРесурса) Тогда      
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет" + ?(БухТипРесурса = "Дт", "Кт", "Дт"), ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);	
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);		
					КонецЕсли;
				ИначеЕсли Найти(ПолеОтбора, "Субконто") = 1 Тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							// Порядок субконто в отчете и у счета может быть разным
							// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим
							// Определим текущий номер субконто
							ИндексСубконто = Сред(ПолеОтбора, 9, 1);
							
							// Если у счета есть нужное субконто то добавим отбор
							СтрокаСубконтоСчета = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
							Если СтрокаСубконтоСчета <> Неопределено Тогда
								
								// Определим номер этого субконто у счета
								ИндексСубконтоОтчет = СтрокаСубконтоСчета.НомерСтроки;
								
								// Составим новое имя поля
								ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет);
								
								// Отбором может быть не только само субконто но и его реквизиты
								// Определим ВидСравнения
								Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
									//Для строки подходит только Содержит 
									ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
								Иначе
									// Для иерархии берем ВИерархии, в остальных случаях Равно
									ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
								КонецЕсли;
								
								// Добавляем отбор
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
							КонецЕсли;
							
						Иначе
							
							// Если счет не задан то устанавливаем отбор по субконто как есть и дополнительно устанавливаем отбор по виду субконто
							
							// Отбором может быть не только само субконто но и его реквизиты
							// Определим ВидСравнения
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								//Для строки подходит только Содержит 
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Устанавливаем отбор по Субконто или его реквизиту
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
							
							// Определим текущий номер субконто
							ИндексСубконто = Число(Сред(ПолеОтбора, 9));
							
							// Составим имя поля отбора по виду субконто
							ПолеВидСубконто = "ВидСубконто" + ИндексСубконто;
							
							// Устанавливаем отбор по виду субконто
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеВидСубконто, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
							
						КонецЕсли;
						ДобавитьОтборПоВидСубконто = Ложь;
						
					ИначеЕсли ИдентификаторОбъекта = "АнализСубконто" И (ИДРасшифровки = "КарточкаСчета" ИЛИ ИДРасшифровки = "СБ_КарточкаСчета") Тогда
						
						// Порядок субконто в отчете и у счета может быть разным
						// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим
						// Определим текущий номер субконто
						ИндексСубконто = Сред(ПолеОтбора, 9, 1); 
						
						// Если у счета есть нужное субконто то добавим отбор
						СтрокаСубконтоСчета = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если СтрокаСубконтоСчета <> Неопределено Тогда
							
							// Определим номер этого субконто у счета
							ИндексСубконтоОтчет = СтрокаСубконтоСчета.НомерСтроки;
							
							// Составим новое имя поля
							ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет);
							
							// Отбором может быть не только само субконто но и его реквизиты
							// Определим ВидСравнения
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								//Для строки подходит только Содержит 
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Добавляем отбор
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
							
						КонецЕсли;
						
					Иначе
						ВидСравненияОтбора = Неопределено;
						ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
						// Если это строка то нужно поставить условие "Содержит"
						Если ТипЗначенияОтбора = Тип("Строка") Тогда  
						 	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							
						// Если это группа справочника то нужно поставить условие "ВГруппе"
						ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбора) И ОбъектЯвляетсяГруппой(ЗначениеОтбора) Тогда
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;	
						КонецЕсли;
						// Устанавливаем отбор
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
					КонецЕсли;
					СписокПолейОтборов.Добавить(ПолеОтбора);
				ИначеЕсли Найти(ПолеОтбора, "КорСубконто") = 1 тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						Если КорСчет <> Неопределено Тогда
							// Порядок КорСубконто, как и субконто, в отчете и у счета может быть разным
							// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим
							
							// Определим текущий номер КорСубконто
							ИндексКорСубконто = Сред(ПолеОтбора, 12, 1);
							
							ПозицияКорСубконто = Найти(ПолеОтбора, "КорСубконто");
							
							// Если у КорСчета есть нужное субконто то добавим отбор
							СтрокаСубконтоКорСчета = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто");
							Если СтрокаСубконтоКорСчета <> Неопределено Тогда
								
								// Определим номер этого субконто у КорСчета
								ИндексСубконтоКорСчета = СтрокаСубконтоКорСчета.НомерСтроки;
								
								// Составим новое имя поля
								ПолеКорСубконто = СтрЗаменить(ПолеОтбора, "КорСубконто" + ИндексКорСубконто, "КорСубконто" + ИндексСубконтоКорСчета);
								
								// Отбором может быть не только само КорСубконто но и его реквизиты
								// Определим ВидСравнения
								Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
									//Для строки подходит только Содержит 
									ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
								Иначе
									// Для иерархии берем ВИерархии, в остальных случаях Равно
									ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
								КонецЕсли;
								
								// Устанавливаем отбор
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеКорСубконто, ЗначениеОтбора, ВидСравненияОтбора);	
							КонецЕсли;
							
						Иначе
							
							// Если КорСчет не задан то устанавливаем отбор по КорСубконто как есть и дополнительно устанавливаем отбор по виду КорСубконто
							
							// Отбором может быть не только само КорСубконто но и его реквизиты
							// Определим ВидСравнения
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								//Для строки подходит только Содержит 
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Устанавливаем отбор по КорСубконто или его реквизиту
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
							
							// Определим текущий номер КорСубконто
							ИндексКорСубконто = Число(Сред(ПолеОтбора, 12));
							
							// Составим имя поля отбора по виду субконто
							ПолеВидСубконто = "ВидКорСубконто" + ИндексКорСубконто;
							
							// Устанавливаем отбор по виду субконто
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеВидСубконто, ОтчетОбъект.СписокВидовСубконто[ИндексКорСубконто - 1].Значение);
							
						КонецЕсли;
						
						ДобавитьОтборПоВидКорСубконто = Ложь;
						
					//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Начало (#3525)
					//ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам" Тогда
					ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам" Или ИДРасшифровки = "СБ_ОтчетПоПроводкам" Тогда
					//ОКЕЙ Цветков А. (СофтЛаб) 2019-11-22 Конец (#3525)
						
						// Определим ВидСравнения
						Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
							//Для строки подходит только Содержит
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
						Иначе
							// Для иерархии берем ВИерархии, в остальных случаях Равно
							ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
						КонецЕсли;
						
						// Добавляем отбор
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
					КонецЕсли;
				ИначеЕсли ПолеОтбора = "Подразделение" тогда
					
					Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
						ДополнительныеСвойства.Вставить("Подразделение", ЗначениеОтбора);
					КонецЕсли;
					
					Если Отбор.Иерархия Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора);
					КонецЕсли;
					
				ИначеЕсли ПолеОтбора = "Организация" Тогда
					ДополнительныеСвойства.Вставить("Организация", ЗначениеОтбора);
				ИначеЕсли ПолеОтбора = "Показатель" Тогда 
					Показатель = ЗначениеОтбора;
				ИначеЕсли ПолеОтбора = "Период" Или ПолеОтбора = "Регистратор" Тогда 
				Иначе
					Если Отбор.Иерархия Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора);
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
					Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
						Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
							ДополнительныеСвойства.Вставить("Организация"                      , ЭлементОтбора.ПравоеЗначение);
							ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Отбор.Представление = "###Контроль###" Тогда
				КонецЕсли;
			ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				
				ПолеОтбора 		= Отбор.ЛевоеЗначение;
				ЗначениеОтбора 	= Отбор.ПравоеЗначение;
				
				Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
					Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "АнализСубконто" И (ИДРасшифровки = "КарточкаСчета" ИЛИ ИДРасшифровки = "СБ_КарточкаСчета") Тогда
						ИндексСубконто = Сред(ПолеОтбора, 9, 1); 
						ПозицияСубконто = Найти(ПолеОтбора, "Субконто");
						НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если НайденнаяСтрока <> Неопределено Тогда
							ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(ПолеОтбора), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), ЗначениеОтбора, Отбор.ВидСравнения);
						КонецЕсли;
					ИначеЕсли Отбор.Представление = "###ОтборПоОрганизации###" Тогда
						ДополнительныеСвойства.Вставить("Организация"                      , ЗначениеОтбора);
						ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь);
					ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("Подразделение") 
						И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ДополнительныеСвойства.Вставить("Подразделение", ЗначениеОтбора);
					ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("Счет")
						И (ИДРасшифровки = "КарточкаСубконто" 
							ИЛИ ИДРасшифровки = "АнализСубконто" 
							ИЛИ ИДРасшифровки = "ОборотыМеждуСубконто") Тогда
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, Отбор.ВидСравнения);
					КонецЕсли;
					
					// Транслируем отбор в расшифровочный отчет, только при определенных условиях
					Если Отбор.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный		// Это не недоступный отбор
						И Найти(Отбор.Представление, "###ОтборПоОрганизации###") = 0									// Это не отбор по организации
						И НЕ (Найти("АнализСубконто, ОборотыМеждуСубконто, КарточкаСубконто", ИдентификаторОбъекта) > 0	// Это не отбор по реквизитам счета или счету в Анализе, Карточке или оборотах между субконто
							И Найти(ПолеОтбора, "Счет") > 0)
					Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, Отбор.ВидСравнения);
					КонецЕсли;
				КонецЕсли;
				//СБ Ванюков К. + //Исправление ошибки при расшифровке Анализа счета с отбором по Объекту из расшифровки субконто 
				Если ИдентификаторОбъекта = "СБ_АнализСчета" тогда
					Для каждого ЭлементыОтбора ИЗ ПользовательскиеНастройки.Элементы Цикл 
						Для Каждого СтрокаОтбора ИЗ ЭлементыОтбора.Элементы Цикл 
							Для Инд = 1 По 3 Цикл
								Если СтрокаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто" + Инд + ".Объект") и СтрокаОтбора.Использование тогда
									НовСтр						= ПользовательскиеОтборы.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
									ЗаполнитьЗначенияСвойств(НовСтр,СтрокаОтбора);
									НовСтр.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("Субконто" + БухТипРесурса + Инд + ".Объект");
									СтрокаОтбора.Использование	= Ложь;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				//СБ Ванюков К. -	
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
			Если ДобавитьОтборПоВидСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ДобавитьОтборПоВидКорСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Период <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", Период);
		ДополнительныеСвойства.Вставить("КонецПериода" , БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, ?(Периодичность = Неопределено, ОтчетОбъект.Периодичность, Периодичность)));
	Иначе
		ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода" , ОтчетОбъект.КонецПериода);
	КонецЕсли;
	
	// Настройка показателей
	Если УстановитьВсеПоказатели Тогда
		Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
			ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОтчетОбъект["Показатель" + ИмяПоказателя]);
		КонецЦикла;
		Если ОтчетОбъект.НаборПоказателей.Найти("Количество") = Неопределено Тогда
			Если ЕстьСчет И ЗначениеЗаполнено(Счет) И Счет.Количественный Тогда
				ДополнительныеСвойства.Вставить("ПоказательКоличество", Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Показатель = "Контроль" Тогда
			ВЦелевомОтчетеНетПоказателяКонтроль = Ложь;
			Если ИДРасшифровки = "КарточкаСчета" ИЛИ ИДРасшифровки = "СБ_КарточкаСчета" ИЛИ ИДРасшифровки = "ОтчетПоПроводкам" ИЛИ ИДРасшифровки = "КарточкаСубконто" Тогда
				ВЦелевомОтчетеНетПоказателяКонтроль = Истина;
			КонецЕсли;
			
			ДополнительныеСвойства.Вставить("ПоказательБУ", ОтчетОбъект.ПоказательБУ ИЛИ ВЦелевомОтчетеНетПоказателяКонтроль);
			ДополнительныеСвойства.Вставить("ПоказательНУ", ОтчетОбъект.ПоказательНУ ИЛИ ВЦелевомОтчетеНетПоказателяКонтроль);
			ДополнительныеСвойства.Вставить("ПоказательПР", ОтчетОбъект.ПоказательПР ИЛИ ВЦелевомОтчетеНетПоказателяКонтроль);
			ДополнительныеСвойства.Вставить("ПоказательВР", ОтчетОбъект.ПоказательВР ИЛИ ВЦелевомОтчетеНетПоказателяКонтроль);
			ДополнительныеСвойства.Вставить("ПоказательКонтроль", ОтчетОбъект.ПоказательКонтроль);
			
		Иначе
			ДополнительныеСвойства.Вставить("Показатель" + Показатель , Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" ИЛИ ИдентификаторОбъекта = "СБ_ОборотноСальдоваяВедомость" Тогда
		ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	КонецЕсли;
		
	Возврат ПользовательскиеНастройки;
	
КонецФункции


// Проверяет является ли объект группой элементов.
//
// Параметры:
//  Объект       - Объект, Ссылка, Неопределено, ДанныеФормыСтруктура по типу Объект.
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбъектЯвляетсяГруппой(Объект)
	
	Если Объект <> Неопределено Тогда 
		
		Результат = ОбщегоНазначения.ОбъектЯвляетсяГруппой(Объект);
		
		Если ТипЗнч(Результат) = Тип("Булево") Тогда
			
			Возврат Результат;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции