///////////////////////////////////////////////////////////////////////////////
// Обновление с предыдущей редакции
// Модуль содержит процедуры и функции обработки данных
// при обновлении с ред. 2.0
//
//
///////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьПереходНаНовуюРедакцию() Экспорт

	Если НЕ ЭтоПереходСРедакции20() Тогда
		Возврат;	
	КонецЕсли; 
	
	УстановитьКонстанту_бит_рлсБФ();
	КонвертацииИзмеренияНоменклатура();
	
	КонвертироватьНастройкиФормВводаБюджета();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Общие настройки/Первый запуск БИТ.ФИНАНС", "", Истина);
	
КонецПроцедуры
 
Функция ЭтоПереходСРедакции20() Экспорт

	Возврат СтрНачинаетсяС(Константы.бит_НомерРелиза.Получить(),"2.8");

КонецФункции

// Процедура проверяет настройки компоновщика для вывода формы ввода. 
// 
Процедура ПроверитьКомпоновщикФормыВвода(Компоновщик) Экспорт

	Для каждого эо Из Компоновщик.Настройки.Отбор.Элементы Цикл
	
		Если ТипЗнч(эо) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
			 СтрПуть = Строка(эо.ЛевоеЗначение);
			 ПозицияТочка = Найти(СтрПуть, ".");
			 
			 Если ПозицияТочка > 0 Тогда
				 СтрПоле = Лев(СтрПуть, ПозицияТочка-1);
			 Иначе	  
				 СтрПоле = СтрПуть;
			 КонецЕсли; 
			 
			 флЕсть = Ложь;
			 Для каждого ДоступноеПоле Из Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора.Элементы Цикл
				 Если Строка(ДоступноеПоле.Поле) = СтрПоле Тогда
				 	флЕсть = Истина;
					Продолжить;
				 КонецЕсли; 
			 КонецЦикла; 
			 
			 Если НЕ флЕсть Тогда
				 Если СтрПоле = "Ссылка" Тогда
					 СтрПуть = СтрЗаменить(СтрПуть,"Ссылка", "Измерение");
					 эо.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрПуть);
				 Иначе	
					 эо.Использование = Ложь;
				 КонецЕсли; 
			 КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;  // Компоновщик.Настройки.Отбор.Элементы

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьКонстанту_бит_рлсБФ()

	Константы.бит_рлсБФ.Установить(бит_ОбщегоНазначения.ЭтоСемействоБП() Или бит_ОбщегоНазначения.ЭтоУТ());	
	
КонецПроцедуры

// Процедура выполняет конвертации, необходимые в связи с изменением измерения Номенклатура на Аналитика_5. 
// 
// 
Процедура КонвертацииИзмеренияНоменклатура()

    флИспользуетсяНоменклатура = ИспользуетсяИзмерениеНоменклатура();
	НазначитьИзмерениеНоменклатура(флИспользуетсяНоменклатура);
	
	КонвертироватьНоменклатуруНастройкиРаспределения();
	КонвертироватьНоменклатуруНастройкиФормы(флИспользуетсяНоменклатура);
	КонвертироватьФормыВводаРазворотНоменклатура(флИспользуетсяНоменклатура);
	
КонецПроцедуры

// Процедура конвертирует настройки форм ввода бюджета. 
// 
Процедура КонвертироватьНастройкиФормВводаБюджета()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_НастройкиФормВводаБюджета.Ссылка
	|ИЗ
	|	Справочник.бит_НастройкиФормВводаБюджета КАК бит_НастройкиФормВводаБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_НастройкиФормВводаБюджета.Измерения КАК бит_НастройкиФормВводаБюджетаИзмерения
	|		ПО бит_НастройкиФормВводаБюджета.Ссылка = бит_НастройкиФормВводаБюджетаИзмерения.Ссылка
	|ГДЕ
	|	бит_НастройкиФормВводаБюджетаИзмерения.СпособЗаполнения ЕСТЬ NULL 
	|	И НЕ бит_НастройкиФормВводаБюджета.ЭтоГруппа";				 
	Результат = Запрос.Выполнить();

	ИзмеренияБюдж = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все", "тип", "Структура");
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл

		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		МетаОб = СпрОб.Метаданные();	

		// Конвертация настроек измерений
		СпрОб.ЗаполнитьИзмеренияПоУмолчанию();

		Для каждого КиЗ Из ИзмеренияБюдж Цикл

			Имя 		= КиЗ.Ключ;
			ИмяСпособ 	= "Удалить_" + Имя;
			ИмяЗначение = "Удалить_Значение_" + Имя;

			Если НЕ бит_РаботаСМетаданными.ЕстьРеквизит(ИмяСпособ, МетаОб) 
				ИЛИ НЕ бит_РаботаСМетаданными.ЕстьРеквизит(ИмяЗначение, МетаОб)  Тогда
				Продолжить;
			КонецЕсли; 

			СтрОтбор = Новый Структура("Имя", Имя);
			Строки = СпрОб.Измерения.НайтиСтроки(СтрОтбор);

			Для каждого ТекСтрока Из Строки Цикл
				Если ЗначениеЗаполнено(СпрОб[ИмяСпособ]) Тогда
					ТекСтрока.СпособЗаполнения = СпрОб[ИмяСпособ];
				КонецЕсли; 
				ТекСтрока.ЗначениеПоУмолчанию = СпрОб[ИмяЗначение];
			КонецЦикла; 

		КонецЦикла; // ИзмеренияБюдж

		// Отдельная конвертация для номенклатуры.
		СтрОтбор = Новый Структура("Имя", "Аналитика_5");
		Строки = СпрОб.Измерения.НайтиСтроки(СтрОтбор);
		Для каждого ТекСтрока Из Строки Цикл
			Если ЗначениеЗаполнено(СпрОб["Удалить_Номенклатура"]) Тогда
				ТекСтрока.СпособЗаполнения = СпрОб["Удалить_Номенклатура"];
			КонецЕсли; 
			ТекСтрока.ЗначениеПоУмолчанию = СпрОб["Удалить_Значение_Номенклатура"];
		КонецЦикла; 

		// Конвертация отборов.
		СпрОб.СформироватьТекстЗапроса();			 
		СохраненнаяНастройка = СпрОб.ПолучитьНастройкиПостроителя();

		Если НЕ СохраненнаяНастройка.Свойство("НастройкиКомпоновщика") Тогда

			// Отбор по бюджету установим в реквизит.
			Если НЕ ЗначениеЗаполнено(СпрОб.Бюджет) 
				И СохраненнаяНастройка.Свойство("Отбор") 
				И ТипЗнч(СохраненнаяНастройка.Отбор) = Тип("Отбор") Тогда

				Для каждого эо Из СохраненнаяНастройка.Отбор Цикл
					Если эо.Имя = "Бюджет" 
					   И эо.Использование 
					   И эо.ВидСравнения = ВидСравнения.Равно Тогда			   
						  СпрОб.Бюджет = эо.Значение; 
						  СпрОб.ТекстЗапроса = СпрОб.СформироватьТекстЗапроса();					  
						  Продолжить;
					КонецЕсли; 
				КонецЦикла; 

			КонецЕсли; 

			НастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Выборка.Ссылка);
			Если НастройкиФормы.ИмяРазворачивать = "СтатьяОборотов" И Найти(СпрОб.ТекстЗапроса, "Измерение") = 0  Тогда
				СпрОб.ТекстЗапроса = СпрОб.СформироватьТекстЗапроса();
			КонецЕсли; 

			СпрОб.ТекстЗапроса = бит_МеханизмПолученияДанных.АдаптироватьТекстПостроителяДляКомпоновки(СпрОб.ТекстЗапроса);

			// Необходимо выполнить конвертацию.
			Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
			Справочники.бит_НастройкиФормВводаБюджета.ИнициализироватьКомпоновщик(СпрОб.ТекстЗапроса, Компоновщик, Новый УникальныйИдентификатор);
			бит_МеханизмПолученияДанных.КонвертацияОтборПостроителяОтборКомпоновщика(СохраненнаяНастройка, Компоновщик, СпрОб.ТекстЗапроса);
			ПроверитьКомпоновщикФормыВвода(Компоновщик);

			СтруктураНастройки = Новый Структура;
			СтруктураНастройки.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
			СпрОб.СохранитьНастройкиПостроителя(СтруктураНастройки);

		КонецЕсли; 

		бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОб, , "Ошибки", Истина);

	КонецЦикла; // Выборка.

	//ТекстСообщения =  НСтр("ru = 'Выполнена конвертация справочника ""Настройки форм ввода бюджета"".'");
	//ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
  
КонецПроцедуры // КонвертироватьНастройкиФормВводаБюджета()

// Функция определяет, используется ли измерение номенклатура в системе.
// 
// Возвращаемое значение:
//  флИспользуется - Булево.
// 
Функция ИспользуетсяИзмерениеНоменклатура()

	флИспользуется = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка()); 
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_ОборотыПоБюджетам.Аналитика_5
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	|ГДЕ
	|	НЕ бит_ОборотыПоБюджетам.Аналитика_5 ЕСТЬ NULL 
	|	И бит_ОборотыПоБюджетам.Аналитика_5 <> НЕОПРЕДЕЛЕНО
	|	И бит_ОборотыПоБюджетам.Аналитика_5 <> &ПустаяНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_ПланируемыйРасходДенежныхСредств.Аналитика_5
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств КАК бит_ПланируемыйРасходДенежныхСредств
	|ГДЕ
	|	НЕ бит_ПланируемыйРасходДенежныхСредств.Аналитика_5 ЕСТЬ NULL 
	|	И бит_ПланируемыйРасходДенежныхСредств.Аналитика_5 <> НЕОПРЕДЕЛЕНО
	|	И бит_ПланируемыйРасходДенежныхСредств.Аналитика_5 <> &ПустаяНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_ГрафикиДоговоров.Аналитика_5
	|ИЗ
	|	РегистрНакопления.бит_ГрафикиДоговоров КАК бит_ГрафикиДоговоров
	|ГДЕ
	|	НЕ бит_ГрафикиДоговоров.Аналитика_5 ЕСТЬ NULL 
	|	И бит_ГрафикиДоговоров.Аналитика_5 <> НЕОПРЕДЕЛЕНО
	|	И бит_ГрафикиДоговоров.Аналитика_5 <> &ПустаяНоменклатура";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Аналитика_5) Тогда
			 флИспользуется = Истина;
			 Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат флИспользуется;
	
КонецФункции // ИспользуетсяИзмерениеНоменклатура()

// Процедура назначает дополнительное измерение Аналитика_5, 
// которое до релиза 3.0.3 было Номенклатурой.
// 
Процедура НазначитьИзмерениеНоменклатура(ИспользуетсяНоменклатура)
	
	Если ИспользуетсяНоменклатура Тогда
		НаборЗаписей = РегистрыСведений.бит_НазначениеДополнительныхИзмерений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИмяИзмерения.Установить("Аналитика_5");
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ИмяИзмерения = "Аналитика_5";
		НоваяЗапись.Аналитика    = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.Номенклатура;
		НоваяЗапись.Синоним      = "Номенклатура";
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняет конвертацию измерения номенклатура в 
// Аналитика_5 в настройках формы ввода бюджета.
// 
Процедура КонвертироватьНоменклатуруНастройкиФормы(ИспользуетсяНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	бит_НастройкиФормВводаБюджетаИзмерения.Ссылка
	|ИЗ
	|	Справочник.бит_НастройкиФормВводаБюджета.Измерения КАК бит_НастройкиФормВводаБюджетаИзмерения
	|ГДЕ
	|	бит_НастройкиФормВводаБюджетаИзмерения.Имя = ""Номенклатура""";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СтрОтбор = Новый Структура("Имя", "Номенклатура");
		Строки   = СпрОб.Измерения.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из Строки Цикл
			Если ИспользуетсяНоменклатура Тогда
				СтрокаТаблицы.Имя = "Аналитика_5";
			Иначе	
				СпрОб.Измерения.Удалить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		СпрОб.СформироватьТекстЗапроса();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	КонецЦикла; 
	
КонецПроцедуры

// Процедура выполняет конвертацию измерения Номенклатура 
// в Аналитика_5 в настройках распределения бюджета.
// 
Процедура КонвертироватьНоменклатуруНастройкиРаспределения()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_НастройкиРаспределенияБюджетаУсловияРаспределения.Ссылка
	|ИЗ
	|	Справочник.бит_НастройкиРаспределенияБюджета.УсловияРаспределения КАК бит_НастройкиРаспределенияБюджетаУсловияРаспределения
	|ГДЕ
	|	бит_НастройкиРаспределенияБюджетаУсловияРаспределения.ПолеДанных = ""Номенклатура""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_НастройкиРаспределенияБюджетаПравилаЗаполнения.Ссылка
	|ИЗ
	|	Справочник.бит_НастройкиРаспределенияБюджета.ПравилаЗаполнения КАК бит_НастройкиРаспределенияБюджетаПравилаЗаполнения
	|ГДЕ
	|	бит_НастройкиРаспределенияБюджетаПравилаЗаполнения.ИмяПоля = ""Номенклатура""";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаТаблицы Из СпрОб.УсловияРаспределения Цикл
			СтрокаТаблицы.ПолеБазы   = СтрЗаменить(СтрокаТаблицы.ПолеБазы  , "Номенклатура", "Аналитика_5");
			СтрокаТаблицы.ПолеДанных = СтрЗаменить(СтрокаТаблицы.ПолеДанных, "Номенклатура", "Аналитика_5");
		КонецЦикла; // УсловияРаспределения 
		
		Для каждого СтрокаТаблицы Из СпрОб.ПравилаЗаполнения Цикл
			СтрокаТаблицы.ИмяПоля           = СтрЗаменить(СтрокаТаблицы.ИмяПоля, "Номенклатура", "Аналитика_5");
			СтрокаТаблицы.ПравилоЗаполнения = СтрЗаменить(СтрокаТаблицы.ПравилоЗаполнения, "Номенклатура", "Аналитика_5");
		КонецЦикла; // ПравилаЗаполнения
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	КонецЦикла; 
	
КонецПроцедуры

// Процедура конвертирует формы ввода, в которых был установлен разворот по номенклатуре. 
// 
Процедура КонвертироватьФормыВводаРазворотНоменклатура(ИспользуетсяНоменклатура)

	Если НЕ ИспользуетсяНоменклатура Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиДополнительныхИзмерений();
	СвойствоАналитики = НастройкаИзмерений.Получить("Аналитика_5");
	Если НЕ СвойствоАналитики = Неопределено Тогда
		Возврат;		
	КонецЕсли; 
	
	Если НЕ СвойствоАналитики.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
		Возврат;
	КонецЕсли; 
	
	// Выбираем настройки, в которых разворот по номенклатуре, т.е. Аналитике_5.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_НастройкиФормВводаБюджетаИзмерения.Ссылка
	|ИЗ
	|	Справочник.бит_НастройкиФормВводаБюджета.Измерения КАК бит_НастройкиФормВводаБюджетаИзмерения
	|ГДЕ
	|	бит_НастройкиФормВводаБюджетаИзмерения.Имя = ""Аналитика_5""";
	
	Результат = Запрос.Выполнить();			   
	МассивНастроек = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");			   
	
	// В формах ввода выполняем восстановление по данным.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНастроек", МассивНастроек);		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ФормаВводаБюджета.Ссылка,
	|	бит_ФормаВводаБюджета.НастройкаФормы,
	|	бит_ФормаВводаБюджета.НастройкаФормы.ТекстЗапроса КАК ТекстЗапроса
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	|ГДЕ
	|	бит_ФормаВводаБюджета.НастройкаФормы В(&МассивНастроек)";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		// Восстанавливаем дерево по данным
		Компоновщик     = Новый КомпоновщикНастроекКомпоновкиДанных;
		АдресКомпоновки = Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(Выборка.ТекстЗапроса, Компоновщик, Новый УникальныйИдентификатор);
		СохрНастройка   = ДокОб.ПолучитьНастройкиПостроителя();
		Если СохрНастройка.Свойство("НастройкиКомпоновщика") Тогда
			НастройкиКомпоновщика = СохрНастройка.НастройкиКомпоновщика;
		Иначе	
			НастройкиКомпоновщика = Компоновщик.ПолучитьНастройки();
		КонецЕсли; 
		
		ТабДок = Новый ТабличныйДокумент;
		АдресХранилищаДанных = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		ИдентификаторФормы   = Новый УникальныйИдентификатор;
		
		ПараметрыВосстановленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
		ПараметрыВосстановленияДерева.АдресКомпоновки		= АдресКомпоновки;
		ПараметрыВосстановленияДерева.НастройкиКомпоновщика = НастройкиКомпоновщика;
		
		ДокОб.ВосстановитьДеревоПоДанным(АдресХранилищаДанных, ИдентификаторФормы, ТабДок, Выборка.НастройкаФормы, Выборка.ТекстЗапроса, ПараметрыВосстановленияДерева);  
		
		// Сохраняем дерево в хранилище
		ДокОб.СохранитьДерево(ТабДок);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокОб);
	КонецЦикла; // Выборка

КонецПроцедуры

#КонецОбласти 