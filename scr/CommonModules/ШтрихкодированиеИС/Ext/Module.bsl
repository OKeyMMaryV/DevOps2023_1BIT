#Область ПрограммныйИнтерфейс

// См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
Функция ПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования();
	ШтрихкодированиеИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляОбувнойПродукции(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции);
	ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

// Выполняет обработку штрихкода и возвращает результат этой обработки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ДанныеШтрихкода - Структура - Исходные данные, включающие только значение штрихкода и количество,
//                                либо уже полноценные заполненные данные штрихкода, которые нуждаются в обработке.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
//  ПараметрыСканирования - Структура - Параметры сканирования См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
// Возвращаемое значение:
//  (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВводШтрихкода(Форма, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		Если КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Количество() > 0 Тогда
			ДанныеШтрихкода.Штрихкод = КэшМаркируемойПродукции.ОтложенныеКодыМаркировки[0];
			КэшМаркируемойПродукции.ОтложенныеКодыМаркировки = Новый Массив;
			ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		Иначе
			ДанныеШтрихкода.Штрихкод = НормализованныйШтрихкод(ДанныеШтрихкода.Штрихкод, ПараметрыСканирования);
		КонецЕсли;
		
	Иначе
		
		ДанныеШтрихкода.Штрихкод = НормализованныйШтрихкод(ДанныеШтрихкода.Штрихкод, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода, ПараметрыСканирования)
		И ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Возврат РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	ПодготовитьДанныеДокумента(Форма, ПараметрыСканирования);
	
	Штрихкоды = Новый Массив;
	Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
	
	РезультатыПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(Штрихкоды, ПараметрыСканирования);
	Если РезультатыПроверок.Количество() > 0 Тогда
		Возврат РезультатыПроверок[ДанныеШтрихкода.Штрихкод];
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	ЕстьОшибки         = ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	РезультатОбработки = ОбработатьДанныеПоШтрихкодам(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеШтрихкода, ЕстьОшибки);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары». 
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок». 
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
// 
// Параметры:
//  Упаковки - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Массив упаковок, по которому формируются вложенные штрихкоды.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив - Массив штрихкодов, которые необходимо сопоставить с номенклатурой.
//   * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции.
//   * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке:
//   * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ВложенныеШтрихкодыУпаковок(Упаковки, ПараметрыСканирования = Неопределено) Экспорт
	
	Если Упаковки.Количество() = 0 Тогда
		
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		Возврат ВложенныеШтрихкоды;
		
	КонецЕсли;
	
	ВидыПродукции = Неопределено;
	Если ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	ВложенныеШтрихкоды = ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(Упаковки, ВидыПродукции);
	ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
		И ПрисутствуетАлкогольнаяПродукция(ВложенныеШтрихкоды.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		И ПрисутствуетТабачнаяПродукция(ВложенныеШтрихкоды.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкоды, ПараметрыСканирования);
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаОбувнаяПродукция(ПараметрыСканирования)
		И ПрисутствуетОбувнаяПродукция(ВложенныеШтрихкоды.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Получает из справочника «Штрихкоды упаковок» данные по массиву значений штрихкодов.
//
// Параметры:
// 	ЗначенияШтрихкодов - Массив из Строка, ТаблицаЗначений - Массив штрихкодов.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Штрихкод - Строка - Штрихкод.
//   * Ссылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника.
//   * ХешСумма - Строка - Хэш сумма упаковки.
Функция ШтрихкодыУпаковок(ЗначенияШтрихкодов) Экспорт
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("Штрихкод",     Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	ТаблицаШтрихкодов.Колонки.Добавить("ХэшШтрихкода", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	Для Каждого Штрихкод Из ЗначенияШтрихкодов Цикл
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.Штрихкод     = Штрихкод;
		НоваяСтрока.ХэшШтрихкода = ИнтеграцияИС.ХешированиеДанныхSHA256(Штрихкод);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод     КАК Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода КАК ХэшШтрихкода
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка                    КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода         КАК Штрихкод,
	|	ШтрихкодыУпаковокТоваров.ХешСумма                  КАК ХешСумма,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки              КАК ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода              КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода КАК ХэшШтрихкода,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода = """"
	|			Тогда Ложь
	|		ИНАЧЕ Истина
	|	КОНЕЦ                                              КАК СвязьПоХэшу,
	|	ШтрихкодыУпаковокТоваров.Номенклатура              КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика            КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия                     КАК Серия
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В
	|		(ВЫБРАТЬ
	|			ТаблицаШтрихкодов.Штрихкод
	|		ИЗ
	|			ТаблицаШтрихкодов КАК ТаблицаШтрихкодов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Ссылка         КАК Ссылка,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Штрихкод       КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ХешСумма       КАК ХешСумма,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ДатаУпаковки   КАК ДатаУпаковки,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ТипШтрихкода   КАК ТипШтрихкода,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ХэшШтрихкода   КАК ХэшШтрихкода,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.СвязьПоХэшу    КАК СвязьПоХэшу,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Номенклатура   КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Характеристика КАК Характеристика,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Серия          КАК Серия
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам КАК ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ПО ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Штрихкод = ТаблицаШтрихкодов.Штрихкод
	|		И ВЫБОР
	|			КОГДА ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.СвязьПоХэшу
	|				ТОГДА ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ХэшШтрихкода = ТаблицаШтрихкодов.ХэшШтрихкода
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Штрихкод               КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода           КАК ХэшШтрихкода,
	|	МАКСИМУМ(ДанныеШтрихкодовУпаковок.ДатаУпаковки) КАК ДатаУпаковки
	|ПОМЕСТИТЬ МаксимальныеДаты
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Ссылка         КАК Ссылка,
	|	ДанныеШтрихкодовУпаковок.Штрихкод       КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХешСумма       КАК ХешСумма,
	|	ДанныеШтрихкодовУпаковок.ДатаУпаковки   КАК ДатаУпаковки,
	|	ДанныеШтрихкодовУпаковок.ТипШтрихкода   КАК ТипШтрихкода,
	|	ДанныеШтрихкодовУпаковок.Номенклатура   КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика КАК Характеристика,
	|	ДанныеШтрихкодовУпаковок.Серия          КАК Серия
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДаты КАК МаксимальныеДаты
	|		ПО ДанныеШтрихкодовУпаковок.Штрихкод = МаксимальныеДаты.Штрихкод
	|		И ДанныеШтрихкодовУпаковок.ДатаУпаковки = МаксимальныеДаты.ДатаУпаковки
	|		И ДанныеШтрихкодовУпаковок.ХэшШтрихкода = МаксимальныеДаты.ХэшШтрихкода";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("Штрихкод, ХешСумма");
	
	Возврат Результат;
	
КонецФункции

// Производит анализ дерева упаковок на продукцию, которая в наличии.
//
// Параметры:
//  ДеревоМаркируемойПродукции - ДеревоЗначений - Иерархия хранения маркируемой продукции с упаковками.
//  ЗначенияШтрихкодов - Массив - Массив, который будет дополнен штрихкодами, которые в наличии.
// * Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Массив - Штрихкоды, которые имеют статус "В Наличии" и содержатся в дереве упаковок.
Функция ЗначенияШтрихкодовВНаличииИзДереваМаркируемойПродукции(ДеревоМаркируемойПродукции, ЗначенияШтрихкодов = Неопределено) Экспорт
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркируемойПродукции.Строки Цикл
		
		Если СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии
			Или ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
			
			ЗначенияШтрихкодовВНаличииИзДереваМаркируемойПродукции(СтрокаДерева, Результат);
			
			Если Не ПустаяСтрока(СтрокаДерева.Штрихкод) Тогда
				Результат.Добавить(СтрокаДерева.Штрихкод);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет тип штрихкода по его значению.
//
// Параметры:
//  Штрихкод - Строка - Штрихкод.
//  ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
// Возвращаемое значение:
//  Неопределено, ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
Функция ОпределитьТипШтрихкода(Штрихкод, ТипУпаковки) Экспорт
	
	ВидПродукции = ВидПродукцииИСПоШтрихкодуМаркировки(Штрихкод, Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") И ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		Возврат МодульШтрихкодированиеЕГАИС.ТипШтрихкода(Штрихкод, ТипУпаковки);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		Возврат МодульШтрихкодированиеМОТП.ТипШтрихкода(Штрихкод);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		Возврат МодульШтрихкодированиеИСМПСлужебный.ТипШтрихкода(Штрихкод);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары» по ссылке на документ.
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок». 
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому необходимо осуществить
//  отбор формирования вложенных штрихкодов.
//  Детализация - Неопределено, ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП - Детализация,
//  с которой необходимо сформировать вложенные штрихкоды.
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив - Массив штрихкодов, которые необходимо сопоставить с номенклатурой.
//   * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции.
//   * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке:
//   * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ВидПродукции = Неопределено, Детализация = Неопределено) Экспорт
	
	ПараметрыСканирования = ПараметрыСканирования(ДокументСсылка,,ВидПродукции);
	
	ВложенныеШтрихкоды = Неопределено;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		ВложенныеШтрихкоды = МодульШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
	ИначеЕсли ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		ВложенныеШтрихкоды = МодульШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ДокументСсылка, Детализация, ПараметрыСканирования);
	ИначеЕсли ДопустимаОбувнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		ВложенныеШтрихкоды = МодульШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ДокументСсылка, Детализация, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Обновляет информацию, находяющуюся во временном хранилище, адрес которого, как правило,
// хранится в реквизите формы «КэшМаркируемойПродукции». 
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обновить кэш маркируемой продукции.
Процедура ОбновитьКэшМаркируемойПродукции(Форма) Экспорт
	
	ПараметрыСканирования = ПараметрыСканирования(Форма);
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	Если ОбработанныеКодыМаркировки.Количество() = 0 Тогда
		ПодготовитьДанныеДокумента(Форма, ПараметрыСканирования);
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	КонецЕсли;
	
	УпаковкиОбъекта = УпаковкиОбъекта(Форма, ПараметрыСканирования);
	
	ЗначенияВложенныхШтрихкодовМарок = ЗначенияВложенныхШтрихкодовУпаковок(УпаковкиОбъекта);
	
	НовыйОбработанныеКодыМаркировки = Новый Соответствие;
	Для Каждого Штрихкод Из ЗначенияВложенныхШтрихкодовМарок Цикл
		НовыйОбработанныеКодыМаркировки.Вставить(Штрихкод, ОбработанныеКодыМаркировки.Получить(Штрихкод));
	КонецЦикла;
	
	КэшМаркируемойПродукции.ОбработанныеКодыМаркировки = НовыйОбработанныеКодыМаркировки;
	ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
	
КонецПроцедуры

// Формирует кэш маркируемой продукции по данными формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо сформировать кэш маркируемой продукции.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СформироватьКэшМаркируемойПродукции(Форма, ПараметрыСканирования = Неопределено) Экспорт
	
	ПараметрыСканированияИнициализированыЛокально = Ложь;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
		ПараметрыСканированияИнициализированыЛокально = Истина;
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	КэшМаркируемойПродукции = ИнициализацияКэшаМаркируемойПродукции();
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	КоллекцияВсехШтрихкодовДерева(ШтрихкодыУпаковок.ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	Иначе
		
		КэшМаркируемойПродукции = ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, Форма.УникальныйИдентификатор);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшМаркируемойПродукции") Тогда
			Форма.КэшМаркируемойПродукции = КэшМаркируемойПродукции;
		КонецЕсли;
		
		Если Не ПараметрыСканированияИнициализированыЛокально Тогда
			ПараметрыСканирования.КэшМаркируемойПродукции = КэшМаркируемойПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает штрихкод GS1 в формате со скобками к передаче в компоненту печати штрихкодов.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод
//  ТипКода - Число - Тип кода (см. документацию по компоненте печати штрихкодов)
// Возвращаемое значение:
//  Строка - Штрихкод для передачи в компоненту печати
Функция КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, ТипКода) Экспорт
	
	ЗначениеШтрихкодаДляКомпоненты = СокрЛП(ЗначениеШтрихкода);
	
	Если (ТипКода = 2 Или ТипКода = 17 Или ТипКода = 24) Тогда
		ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкодаДляКомпоненты);
		Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
			Если ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
				Или ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
				ЗначениеШтрихкодаДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
					ЧтениеШтрихкода.Результат, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеШтрихкодаДляКомпоненты;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Данные, заполняемые в процессе обработки штрихкодов.
// 
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ЕстьОшибкиВДеревеУпаковок - Булево - признак, указывающий на то, что в дереве упаковок имеются ошибки.
//   * ВидыПродукции - Массив - коллекция видов продукции, которые были идентифицированы при обработке штрихкодов.
//   * ШтрихкодыПродукцииДляСопоставления - Неопределено, Массив - Коллекция штрихкодов EAN, требующих сопоставление пользователя.
//   * ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
//   * НеобработанныеШтрихкоды - Соответствие - штрихкоды, которые не удалось обработать.
//   * ОбработанныеШтрихкоды - Соответствие - штрихкоды, которые удалось обработать.
//   * ШтрихкодыНеизвестныхУпаковок - Массив - коллекция штрихкодов упаковок, отсутствующие в базе.
//   * ШтрихкодыИзвестныхУпаковок - Массив - коллекция штрихкодов упаковок, которые известны.
//   * МаркируемаяПродукция - Массив - вся продукция, подлежащая маркировке.
Функция ИнициализацияДанныхПоШтрихкодам() Экспорт
	
	ДанныеПоШтрихкодам = Новый Структура;
	
	ДанныеПоШтрихкодам.Вставить("ВсеШтрихкоды",                       Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ВидыПродукции",                      Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ДанныеКодовМаркировок",              ИнициализацияТаблицыДанныеКодовМаркировок());
	ДанныеПоШтрихкодам.Вставить("ВложенныеШтрихкоды",                 Неопределено);
	ДанныеПоШтрихкодам.Вставить("ДеревоПоДаннымСервиса",              Неопределено);
	
	//Ошибки
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибкиВДеревеУпаковок",          Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибки",                         Ложь);
	ДанныеПоШтрихкодам.Вставить("ТребуетсяОбновлениеКлючаСессии",     Ложь);
	ДанныеПоШтрихкодам.Вставить("ОшибкаДопустимостиВидовПродукции",   Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьКодыМаркировкиВводаОстатков",    Ложь);
	ДанныеПоШтрихкодам.Вставить("ТекстОшибки",                        "");
	
	ДанныеПоШтрихкодам.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ОбработанныеШтрихкоды",              Новый Соответствие);
	ДанныеПоШтрихкодам.Вставить("НеобработанныеШтрихкоды",            Новый Соответствие);
	
	//Не будет использоваться
	ДанныеПоШтрихкодам.Вставить("МаркируемаяПродукция",               Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ШтрихкодыИзвестныхУпаковок",         Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ШтрихкодыНеизвестныхУпаковок",       Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ИнформацияПоШтрихкодамEAN",          Новый ТаблицаЗначений);
	ДанныеПоШтрихкодам.Вставить("ЗначенияШтрихкодовПоВидуПродукции",  Новый Соответствие);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Описание
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * КодМаркировки - Строка - Штрихкод.
// * GTIN - Строка - Штрихкод формата GTIN 14 знаков.
// * EAN - Строка - Штрихкод формата EAN.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// * ЭтоКодВводаОстатков - Булево - Истина, если код маркировки является кодов ввода остатков, GTIN которого начинается с 029.
// * МаркируемаяПродукция - Булево - Истина, если продукция имеет марку. (Для упаковки - Ложь).
// * ЭтоУпаковка - Булево - Истина, если код маркировки является кодом упаковки.
// * ИзвестнаяУпаковка - Булево - Истина, если данные по упаковки хранятся в базе.
// * ТребуетсяСопоставление - Булево - Истина, если штрихкод EAN кода маркировки не сопоставлен номенклатуре.
Функция ИнициализацияТаблицыДанныеКодовМаркировок()
	
	ДанныеКодовМаркировок = Новый ТаблицаЗначений;
	
	ДанныеКодовМаркировок.Колонки.Добавить("КодМаркировки",          Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировок.Колонки.Добавить("GTIN",                   Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировок.Колонки.Добавить("EAN",                    Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировок.Колонки.Добавить("Номенклатура",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеКодовМаркировок.Колонки.Добавить("Характеристика",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеКодовМаркировок.Колонки.Добавить("Серия",                  Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеКодовМаркировок.Колонки.Добавить("ВидПродукции",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеКодовМаркировок.Колонки.Добавить("ЭтоКодВводаОстатков",    Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировок.Колонки.Добавить("МаркируемаяПродукция",   Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировок.Колонки.Добавить("ЭтоУпаковка",            Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировок.Колонки.Добавить("ИзвестнаяУпаковка",      Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировок.Колонки.Добавить("ТребуетсяСопоставление", Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировок.Колонки.Добавить("ВидыПродукцииКодаМаркировки", Новый ОписаниеТипов("Массив"));
	
	Возврат ДанныеКодовМаркировок;
	
КонецФункции

// Выполняет поиск акцизных марок в дереве упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
//  ЗначенияШтрихкодов - Массив - Массив найденных штрихкодов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные штрихкоды.
Функция ЗначенияШтрихкодовДереваУпаковок(ДеревоУпаковок, ЗначенияШтрихкодов = Неопределено) Экспорт 
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ЗначенияШтрихкодовДереваУпаковок(СтрокаДерева, Результат);
		
		Если Не ПустаяСтрока(СтрокаДерева.Штрихкод) Тогда
			Результат.Добавить(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует структура параметров, необходимую для выполнения действия и заполняет ее.
// (См. ШтрихкодированиеИС.ВыполнитьДействие).
//
// Параметры:
//  РезультатВыбора - Произвольный - Результат уточнения информации у пользователя.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// Возвращаемое значение:
//  Структура - Описание - Заполняет структуру параметров значениями.
Функция ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РезультатВыбора",             РезультатВыбора);
	ПараметрыВыбора.Вставить("РезультатОбработкиШтрихкода", РезультатОбработкиШтрихкода);
	ПараметрыВыбора.Вставить("КэшированныеЗначения",        КэшированныеЗначения);
	
	Возврат ПараметрыВыбора;

КонецФункции

// Выполняет действие после уточнения информации у пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкоды.
//  Действие - Строка - Идентификатор необходимого действия.
//  Параметры - (См. ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора).
// Возвращаемое значение:
//  Структура, Неопределено - Результат выполнения действия.
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт
	
	Если Действие = "ОбработатьУточнениеДанных" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьУточнениеДанных(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	ВидыПродукции = Параметры.РезультатОбработкиШтрихкода.ВидыПродукции;
	Если ЕстьАлкогольнаяПродукцияВКоллекции(ВидыПродукции) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		РезультатВыполнения = МодульШтрихкодированиеЕГАИС.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Если ЕстьТабачнаяПродукцияВКоллекции(ВидыПродукции) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатВыполнения = МодульШтрихкодированиеМОТП.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Если ЕстьОбувнаяПродукцияВКоллекции(ВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		РезультатВыполнения = МодульШтрихкодированиеИСМПСлужебный.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Структура, описывающая результат обработки штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеШтрихкода - Неопределено, Структура - Результат анализа штрихкода, все данные, которые удалось по нему собрать.
// Возвращаемое значение:
//  Структура - Описание:
//   * ВидыПродукции - Массив - Массив видов продукции ИС.
//   * ИзмененныеСтроки - Массив - Строки документа, которые были изменены в процессе обработки штрихкодов.
//   * ДобавленныеСтроки - Массив - Строки документа, которые были добавлены в процессе обработки штрихкодов.
//   * ОшибкаШтрихкодУжеДобавлен - Булево - Признак, указывающий, что обрабатываемый штрихкод был добавлен в документ ранее.
//   * ОшибкаВидаПродукции - Булево - Признак, указывающий, что штрихкод относится к виду продукции, который не поддерживается.
//   * ДополнительныеПараметры - Неопределено -
//   * ЕстьОшибкиВДеревеУпаковок - Булево - Признак, указывающий, что где-то в дереве упаковок присутствует ошибка.
//   * АдресДереваУпаковок - Строка - Адрес временного хранилища, где хранится дерево упаковок.
//   * ТекстОшибки - Строка - Текст ошибки, на которую стоит обратить внимание.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * Штрихкод - Строка - Значение штрихкода.
//   * ЕстьОшибки - Булево - Признак, указывающий, что есть ошибки в данных штрихкода.
//   * ШтрихкодыПродукцииДляСопоставления - Неопределено, Массив - Массив неизвестных штрихкодов EAN, которые необходимо сопоставить перед обработкой.
//   * ТребуетсяСопоставлениеНоменклатуры - Булево - Признак, указывающий на то, что перед обработкой необходимо сопоставить номенклатуру штрихкодам EAN.
//   * ИсходныеДанные - Произвольный - Данные, которые поступили на вход для обработки.
//   * ТребуетсяОбработкаШтрихкода - Булево - Признак, указывающий, что данные штрихкода не удалось обработать по стандартному алгоритму.
//   * ТребуетсяВыборНоменклатуры - Булево - Признак, указывающий на необходимость выбора номенклатуры.
//   * ПараметрыВыбораНоменклатуры - Структура - Параметры, участвующие в отборе при выборе номенклатуры в диалоговом окне.
//   * АдресДанныхШтрихкода - Строка - Адрес временного хранилища, где хранится данные штрихкода.
Функция ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования = Неопределено, ДанныеШтрихкода = Неопределено) Экспорт
	
	ВидыПродукции = Неопределено;
	
	Если ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.ВидыПродукции.Количество() > 0 Тогда
		ВидыПродукции = ДанныеШтрихкода.ВидыПродукции;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = Новый Структура;
	
	// Для выбора значений на клиенте.
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяСопоставлениеНоменклатуры", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборНоменклатуры",         Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборСерии",                Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеДанных",           Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОткрытьФормуВводаКодаМаркировки",    Ложь);
	РезультатОбработкиШтрихкода.Вставить("АдресДанныхШтрихкода",               "");
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораНоменклатуры",        Новый Структура);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные",                     Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыУточненияДанных",           Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ИспользоватьОбработкуНаКлиенте",     Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбработкаШтрихкодаБезМарки",         Ложь);
	
	// Для вывода сообщения об ошибке.
	РезультатОбработкиШтрихкода.Вставить("Штрихкод",     "");
	РезультатОбработкиШтрихкода.Вставить("ТипШтрихкода", Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТипУпаковки",  Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТекстОшибки",  "");
	
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибки",                       Ложь);
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибкиВДеревеУпаковок",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбщаяОшибка",                      Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаШтрихкодУжеДобавлен",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаДопустимостиВидовПродукции", Ложь);
	
	РезультатОбработкиШтрихкода.Вставить("АдресДереваУпаковок",     "");
	РезультатОбработкиШтрихкода.Вставить("ДополнительныеПараметры", Неопределено);
	
	// Для обработки строк табличной части.
	РезультатОбработкиШтрихкода.Вставить("ДобавленныеСтроки",  Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ИзмененныеСтроки",   Новый Массив);
	
	РезультатОбработкиШтрихкода.Вставить("ВидыПродукции",      Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("МаркировкаОстатков", Ложь);
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат РезультатОбработкиШтрихкода;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено Тогда
		РезультатОбработкиШтрихкода.ТипУпаковки = ДанныеШтрихкода.ТипУпаковки;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ВидыПродукции = ВидыПродукции;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") И ЕстьАлкогольнаяПродукцияВКоллекции(ВидыПродукции)Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ЕстьТабачнаяПродукцияВКоллекции(ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);

	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ЕстьОбувнаяПродукцияВКоллекции(ВидыПродукции) Тогда

		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Инициализирует структуру, которая будет содержать в себе всю собранную и проанализированную информацию 
// по значению штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Информация по штрихкоду:
//   * МаркируемаяПродукция - Булево - Истина, если номенклатура данных штрихкода является маркируемой.
//   * ВидыПродукции - Массив - Коллекция элементов перечисления видов продукции ИС, которые были идентифицированы по
// данным штрихкода.
//   * ДополнительныеПараметры - Произвольный.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника.
//   * Штрихкод - Строка - Значение штрихкода.
//   * Упаковка - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника верхнего уровня.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода маркированного товара.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки маркированного товара.
//   * ТекстОшибки - Строка - описание ошибки.
//   * МаркированныеТовары - Массив - коллекция товаров, подлежащих маркировке.
//   * Количество - Число - количество единиц маркируемой продукции.
//   * ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
//   * ПредставлениеНоменклатуры - Строка - Строковое представление номенклатуры.
//   * Серия - ОпределяемыеТипы.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - ОпределяемыеТипы.ХарактеристикаНоменклатуры - Характеристика.
//   * Номенклатура - ОпределяемыеТипы.Номенклатура - Номенклатура.
Функция ИнициализироватьДанныеШтрихкода(ПараметрыСканирования = Неопределено) Экспорт
	
	ДанныеШтрихкода = Новый Структура;
	
	ДанныеШтрихкода.Вставить("Номенклатура",            Неопределено);
	ДанныеШтрихкода.Вставить("Характеристика",          Неопределено);
	ДанныеШтрихкода.Вставить("Серия",                   Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеНоменклатуры", "");
	ДанныеШтрихкода.Вставить("ВложенныеШтрихкоды",      Новый Соответствие);
	ДанныеШтрихкода.Вставить("Количество",              0);
	ДанныеШтрихкода.Вставить("МаркированныеТовары",     Новый Массив);
	ДанныеШтрихкода.Вставить("ТекстОшибки",             Неопределено);
	ДанныеШтрихкода.Вставить("ТипУпаковки",             Неопределено);
	ДанныеШтрихкода.Вставить("ТипШтрихкода",            Неопределено);
	ДанныеШтрихкода.Вставить("Упаковка",                Неопределено);
	ДанныеШтрихкода.Вставить("Штрихкод",                Неопределено);
	ДанныеШтрихкода.Вставить("ШтрихкодУпаковки",        Неопределено);
	ДанныеШтрихкода.Вставить("ДополнительныеПараметры", Неопределено);
	ДанныеШтрихкода.Вставить("ВидыПродукции",           Новый Массив);
	ДанныеШтрихкода.Вставить("МаркируемаяПродукция",    Неопределено);
	ДанныеШтрихкода.Вставить("ОбработатьБезМаркировки", Ложь);
	ДанныеШтрихкода.Вставить("ЭтоШтрихкодНоменклатуры", Ложь);
	ДанныеШтрихкода.Вставить("АдресДереваУпаковок",     Неопределено);
	ДанныеШтрихкода.Вставить("ТребуетсяВыборСерии",     Ложь);
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода);
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода);
	КонецЕсли;

	Если ДопустимаОбувнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода);
	КонецЕсли;
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Формирует структуру обязательных колонок для таблицы - Маркированные товары, путем добавления к структуре общих
// колонок. (См. ШтрихкодированиеИС.ОбщиеКолонкиКоллекцийВложенныхШтрихкодов).
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
Функция КолонкиТаблицыМаркированныеТовары() Экспорт
	
	КоллекцияОбязательныхКолонок = ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	КоллекцияОбязательныхКолонок.Вставить("СтрокаДерева");
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

// Формирует структуру обязательных колонок для дерева значений - Дерево упаковок, путем добавления к структуре общих
// колонок. (См. ШтрихкодированиеИС.ОбщиеКолонкиКоллекцийВложенныхШтрихкодов).
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ТекстОшибки - Строка - текст ошибки в строке дерева.
//   * ЕстьОшибки - Булево - Истина, если есть ошибки в строке дерева.
//   * ХешСумма - Неопределено - Хэш сумма упаковки.
//   * ТипУпаковки - Неопределено - Тип упаковки.
Функция КолонкиДереваУпаковок() Экспорт
	
	КоллекцияОбязательныхКолонок = ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	
	КоллекцияОбязательныхКолонок.Вставить("ТипУпаковки",  Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ХешСумма",     Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ЕстьОшибки",   Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ТекстОшибки",  ОбщегоНазначения.ОписаниеТипаСтрока(300));
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

// Инициализирует таблицу значений - Маркированные товары.
//
// Параметры:
// Возвращаемое значение:
//  ТаблицаЗначений - Состав колонок таблицы определен в процедуре ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары.
Функция ИнициализироватьТаблицуМаркированныеТовары() Экспорт
	
	КолонкиТаблицы = КолонкиТаблицыМаркированныеТовары();
	
	МаркированныеТовары = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из КолонкиТаблицы Цикл
		
		МаркированныеТовары.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	Возврат МаркированныеТовары;
	
КонецФункции

// Инициализирует дерево значений - Дерево упаковок.
//
// Параметры:
// Возвращаемое значение:
//  ДеревоЗначений - состав колонок определяется в ШтрихкодированиеИС.КолонкиДереваУпаковок.
Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	КолонкиДереваУпаковок = КолонкиДереваУпаковок();
	ДеревоУпаковок = Новый ДеревоЗначений;
	
	Для Каждого КлючЗначение Из КолонкиДереваУпаковок Цикл
		
		ДеревоУпаковок.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение)
		
	КонецЦикла;
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Выполняет обработку данных штрихкода для единицы маркируемой продукции. Обработка происходит в модуле соответствующей
// виду продукции подсистеме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  ДанныеШтрихкода - Структура - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Неопределено, Структура - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") И ЕстьАлкогольнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		РезультатДобавления = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ЕстьТабачнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма);

	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ЕстьОбувнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда

		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		РезультатДобавления = МодульШтрихкодированиеИСМПСлужебный.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма);

	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

// Формирует таблицу значений данных по штрихкодам EAN.
//
// Параметры:
//  ШтрихкодыEAN - Массив - Штрихкоды EAN.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Номенклатура - ОпределяемыеТипы.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыеТипы.ХарактеристикаНоменклатуры - Характеристика.
//   * ЗначениеШтрихкодаEAN - Строка - Штрихкод.
//   * ПредставлениеНоменклатуры - Строка - Представление номенклатуры.
//   * ВидПродукции -ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//   * МаркируемаяПродукция - Булево - Истина, если продукция является маркируемая.
Функция ДанныеПоШтрихкодамEAN(ШтрихкодыEAN) Экспорт
	
	ДанныеПоШтрихкодамEAN = Новый ТаблицаЗначений;
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Номенклатура",              Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Характеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ШтрихкодEAN",               Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидПродукции",              Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("МаркируемаяПродукция",      Новый ОписаниеТипов("Булево"));
	
	ПолучатьИнформациюПоШтрихкодам = Ложь;
	Для Каждого ШтрихкодEAN Из ШтрихкодыEAN Цикл
		
		НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
		НоваяСтрока.ШтрихкодEAN = ШтрихкодEAN;
		ПолучатьИнформациюПоШтрихкодам = Истина;
		
	КонецЦикла;
	
	Если ПолучатьИнформациюПоШтрихкодам Тогда
		
		ШтрихкодированиеИСПереопределяемый.ПриЗаполненииИнформацииПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN);
		
		ИндексСтроки = ДанныеПоШтрихкодамEAN.Количество()-1;
		Пока ИндексСтроки >= 0 Цикл
		
			ДанныеСтроки = ДанныеПоШтрихкодамEAN[ИндексСтроки];
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
				ДанныеПоШтрихкодамEAN.Удалить(ДанныеСтроки);
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеПоШтрихкодамEAN;
	
КонецФункции

// Выполняет полную проверку на ошибки данных штрихкодов с учетом индивидуальных проверок по видам продукции ИС.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если есть ошибки в данных.
Функция ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	ПроверитьНаУжеДобавленныеДанныеВДокумент(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаДублиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаСоответствиеДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ШтрихкодированиеИСПереопределяемый.ПриПроверкеДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	Если Не ЕстьОшибки Тогда
		
		Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
			МодульШтрихкодированиеЕГАИС.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
		Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
		Если ПрисутствуетОбувнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			МодульШтрихкодированиеИСМПСлужебный.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;

	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Получение информации по коллекции штрихкодов.
// 
// Параметры:
//  Штрихкоды - Массив - коллекция штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  КэшированныеЗначения - Структура - Содержит закэшированные значения.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
Функция ДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения = Неопределено) Экспорт
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	ИдентифицироватьЗначенияШтрихкодов(Штрихкоды, ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если Не ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Или ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли; 
	
	Если Не ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ЗаполнитьДанныеНеобработанныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДаныеПоШтрихкодамПоДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Проверяет значения массива ВидыПродукции на вхождение допустимых видов продукции параметров сканирования.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если каждый элемент массива ВидыПродукции присутствует в допустимых видах продукции.
Функция ВидыПродукцииПоддерживаются(ВидыПродукции, ПараметрыСканирования) Экспорт
	
	ВидыПродукцииПоддерживаются = Истина;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		
		Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
			ВидыПродукцииПоддерживаются = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидыПродукцииПоддерживаются;
	
КонецФункции

// Дополняет данные штрихкодов специфичными данными, характерными для каждого вида продукции ИС.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт

	Если ДанныеПоШтрихкодам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	
	Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
		
	Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;

	Если ПрисутствуетОбувнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;

КонецПроцедуры

// Кэширует данные обработанных штрихкодов путем помещения их в хранилище значений.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой требуется закэшировать обработанные штрихкоды.
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  РезультатДобавления - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Процедура ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатДобавления, ДеревоУпаковок = Неопределено) Экспорт
	
	Если РезультатДобавления = Неопределено
		Или Не ПараметрыСканирования.КонтрольУникальностиКодовМаркировки
		Или Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) 
		Или ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		Если РезультатДобавления.ЕстьОшибкиВДеревеУпаковок Тогда
			Возврат;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
		
		ПоместитьДанныеСтрокДереваВСоответствие(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	Иначе
		
		Если ЗначениеЗаполнено(РезультатДобавления.ТекстОшибки) Или ДанныеШтрихкода.Штрихкод = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
		
		ОбработанныеКодыМаркировки.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;

КонецПроцедуры

// Получает данные документа основания из временного хранилища. В случае отсутствия данных в хранилище - формирует их.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - Описание:
//   * Номенклатура - ОпределяемыеТипы.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыеТипы.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыеТипы.СерияНоменклатуры - Серия номенклатуры.
//   * Количество - Число - количество единиц.
Функция ДанныеДокументаОснования(ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
			
			СформироватьДанныеДокументаОснования(ПараметрыСканирования);
			
		КонецЕсли;
		
		Возврат ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Формирует данные документа основания и помещает их во временное хранилище.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - Описание:
//   * Номенклатура - ОпределяемыеТипы.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыеТипы.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыеТипы.СерияНоменклатуры - Серия номенклатуры.
//   * Количество - Число - количество единиц.
Процедура СформироватьДанныеДокументаОснования(ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)
		И Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		
		ТаблицаДанныхДокументаОснования = ИнициализицияТаблицыДанныхДокумента();
		
		ШтрихкодированиеИСПереопределяемый.СформироватьДанныеДокументаОснования(
			ПараметрыСканирования, ТаблицаДанныхДокументаОснования);
		
		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура");
		
		ПараметрыСканирования.АдресДанныхДокументаОснования = ПоместитьВоВременноеХранилище(
			ТаблицаДанныхДокументаОснования,
			ПараметрыСканирования.ИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск в массиве ВидыПродукции алкогольной продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена алкогольная продукция.
Функция ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено;

КонецФункции

// Выполняет поиск в массиве ВидыПродукции табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена табачная продукция.
Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табачная) <> Неопределено;

КонецФункции

// Выполняет поиск в массиве ВидыПродукции обувной продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена обувная продукция.
Функция ПрисутствуетОбувнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Обувная) <> Неопределено;

КонецФункции

// Помещает настройки выбора маркируемой продукции в хранилище настроек данных формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой необходимо сохранить настройки.
//  Ссылка - Любая ссылка - Ссылка на объект.
Процедура СохранитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	СохраняемыеНастройки = Новый Структура;
	СохраняемыеНастройки.Вставить("СохраненВыборПоМаркируемойПродукции", Форма.СохраненВыборПоМаркируемойПродукции);
	СохраняемыеНастройки.Вставить("ДанныеВыбораПоМаркируемойПродукции",  Форма.ДанныеВыбораПоМаркируемойПродукции);
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(Ссылка, "ДанныеВыбораМаркируемойПродукции", СохраняемыеНастройки);
	
КонецПроцедуры

// Восстанавливает сохраненные настройки выбора маркируемой продукции и помещает их в данные формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой необходимо сохранить настройки.
//  Ссылка - Любая ссылка - Ссылка на объект.
Процедура ВосстановитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	НастройкиВыбораМаркируемойПродукции = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Ссылка, "ДанныеВыбораМаркируемойПродукции");
	Если ЗначениеЗаполнено(Ссылка) И НастройкиВыбораМаркируемойПродукции <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, НастройкиВыбораМаркируемойПродукции);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки по штрихкодам до формирования данных по ним.
//
// Параметры:
//  СписокШтрихкодов - Массив - Коллекция штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - Ключ - Штрихкод, значение результат его проверки.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования) Экспорт
	
	РезультатПроверок = Новый Соответствие;
	
	Для Каждого Штрихкод Из СписокШтрихкодов Цикл
		
		РезультатПроверки = КонтрольНаДопустимыеВидыПродукции(Штрихкод, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ПроверкаШтрихкодаНаУжеДобавленный(Штрихкод, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатПроверок.Количество() > 0 Тогда
		Возврат РезультатПроверок;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		И ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП") Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатПроверки = МодульШтрихкодированиеМОТП.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(Штрихкод, РезультатПроверки);
			
			Возврат РезультатПроверок;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопустимаОбувнаяПродукция(ПараметрыСканирования)
		И ПолучитьФункциональнуюОпцию("ВестиУчетОбувнойПродукцииИСМП") Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		РезультатПроверки = МодульШтрихкодированиеИСМПСлужебный.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(Штрихкод, РезультатПроверки);
			
			Возврат РезультатПроверок;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверок;
	
КонецФункции

// Получает массив элементов справочника Штрихкоды упаковок документа по его ссылке.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ.
//  ПараметрыСканирования - Структура - Параметры сканирования штрихкодов с заполненным свойством ДопустимыеВидыПродукции
// Возвращаемое значение:
//  Массив - коллекция элементов справочника Штрихкоды упаковок.
Функция ШтрихкодыУпаковокДокумента(Документ, ПараметрыСканирования) Экспорт
	
	ШтрихкодыУпаковокДокумента = Новый Массив;
	ШтрихкодыУпаковок          = Новый Массив;
	
	ШтрихкодированиеИСПереопределяемый.ЗаполнитьШтрихкодыУпаковокДокумента(Документ, ШтрихкодыУпаковокДокумента);
	
	ПодсистемаИСМПСуществует = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП");
	
	Если ПодсистемаИСМПСуществует Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеИСМПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		
		ДопустимыеВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
		
		Для Каждого ПроверяемыйШтрихкод Из ШтрихкодыУпаковокДокумента Цикл
			
			Для Каждого ВидПродукции Из ДопустимыеВидыПродукции Цикл
				
				Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
					
					Если МодульШтрихкодированиеМОТП.ЭтоКодМаркировкиБлока(ПроверяемыйШтрихкод) Тогда
						ШтрихкодыУпаковок.Добавить(ШтрихкодированиеИСКлиентСервер.ШтрихкодВФорматеGS1(ПроверяемыйШтрихкод));
					ИначеЕсли МодульШтрихкодированиеМОТП.ЭтоКодМаркировкиТабачнойПачки(ПроверяемыйШтрихкод) Тогда
						ШтрихкодыУпаковок.Добавить(ПроверяемыйШтрихкод);
					ИначеЕсли МодульШтрихкодированиеМОТПКлиентСервер.ЭтоКодЛогистическойУпаковки(ПроверяемыйШтрихкод) Тогда
						ШтрихкодыУпаковок.Добавить(ШтрихкодированиеИСКлиентСервер.ШтрихкодВФорматеGS1(ПроверяемыйШтрихкод));
					КонецЕсли;
					
				ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда

					Если МодульШтрихкодированиеИСМПКлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(ПроверяемыйШтрихкод) Тогда
						ШтрихкодыУпаковок.Добавить(ПроверяемыйШтрихкод);
					ИначеЕсли МодульШтрихкодированиеИСМПКлиентСервер.ЭтоКодЛогистическойУпаковки(ПроверяемыйШтрихкод) Тогда
						ШтрихкодыУпаковок.Добавить(ШтрихкодированиеИСКлиентСервер.ШтрихкодВФорматеGS1(ПроверяемыйШтрихкод));
					КонецЕсли;

				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Выполняет инициализацию структуры Вложенные штрихкоды.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив - коллекция штрихкодов, которым требуется сопоставить номенклатуру.
//   * ВидыПродукции - Массив - Коллекция видов продукции ИС, которые присутствуют в дереве упаковок.
//   * МаркированныеТовары - (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары).
//   * ДеревоУпаковок - (См. ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок);
Функция ИнициализацияВложенныхШтрихкодов() Экспорт
	
	ВложенныеШтрихкоды = Новый Структура;
	
	ВложенныеШтрихкоды.Вставить("ДеревоУпаковок",                     ИнициализироватьДеревоУпаковок());
	ВложенныеШтрихкоды.Вставить("МаркированныеТовары",                ИнициализироватьТаблицуМаркированныеТовары());
	ВложенныеШтрихкоды.Вставить("ВидыПродукции",                      Новый Массив);
	ВложенныеШтрихкоды.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
//  GTIN - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(Знач GTIN) Экспорт
	
	// Пытаемся получить штрихкод EAN8 или EAN13 из GTIN.
	Пока Лев(GTIN, 1) = "0" И СтрДлина(GTIN) > 8 Цикл
		GTIN = Сред(GTIN, 2);
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

// Формирует структуру Вложенные штрихкоды для упаковок на основании существующих данных в ИБ.
//
// Параметры:
//  МассивУпаковок - Массив - Коллекция элементов справочника Штрихкоды упаковок.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыИзвестныхУпаковок(МассивУпаковок, ВидыПродукцииИС = Неопределено) Экспорт
	
	ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	
	Если МассивУпаковок.Количество() = 0 Тогда
		Возврат ВложенныеШтрихкоды;
	КонецЕсли;
	
	ВложенныеШтрихкоды = ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ВидыПродукцииИС);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Формирует результат обработки штрихкодов для случая, когда требуется сопоставление номенклатуры штрихкодам.
//
// Параметры:
//  НеизвестныеШтрихкодыEAN - Массив - Коллекция штрихкодов EAN, информация по которым отсутствует.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(НеизвестныеШтрихкодыEAN, ШтрихкодИКоличество, ПараметрыСканирования) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Добавить(ШтрихкодИКоличество.Штрихкод);
		
		ДанныеДляСопоставленияНоменклатуры = Новый Структура;
		ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные", ШтрихкодИКоличество);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", Новый Массив);
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "СопоставлениеНоменклатуры";
		
		Для Каждого Штрихкод Из НеизвестныеШтрихкодыEAN Цикл
			ДанныеДляСопоставленияНоменклатуры.ШтрихкодыКСопоставлению.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, 1));
		КонецЦикла;
		
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные = ДанныеДляСопоставленияНоменклатуры;
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	НеизвестныеШтрихкодыEANДляОбработки = Новый Массив;
	
	Для Каждого Элемент Из НеизвестныеШтрихкодыEAN Цикл
		
		РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
		НеизвестныеШтрихкодыEANДляОбработки.Добавить(Новый Структура("Штрихкод, Количество", Элемент, 1));
		
	КонецЦикла;
	
	РезультатОбработки.ШтрихкодыПродукцииДляСопоставления = НеизвестныеШтрихкодыEANДляОбработки;
	РезультатОбработки.Штрихкод = Штрихкод;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для случая, когда требуется обработать неизвестный код маркировки ввода остатков.
//
// Параметры:
//  НеизвестныеШтрихкодыEAN - Массив - Коллекция штрихкодов EAN, информация по которым отсутствует.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		Если Не СтрокаДанных.ЭтоКодВводаОстатков Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатОбработки.Штрихкод = СтрокаДанных.КодМаркировки;
		РезультатОбработки.ТребуетсяВыборНоменклатуры = Истина;
		
		// Расчитываем, так как в таблице штрихкод ввода остатков заменен на штрихкод номенклатуры.
		GTINВводаОстатков = ШтрихкодированиеИСКлиентСервер.GTINПоКодуМаркировки(СтрокаДанных.КодМаркировки);
		
		ПараметрыВыбора = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
		ПараметрыВыбора.КодМаркировки          = СтрокаДанных.КодМаркировки;
		ПараметрыВыбора.ПараметрыУказанияСерий = ОбщегоНазначения.СкопироватьРекурсивно(
			ПараметрыСканирования.ПараметрыУказанияСерий, Ложь);
		ПараметрыВыбора.Склад                  = ПараметрыСканирования.Склад;
		ПараметрыВыбора.ПараметрыСканирования  = ПараметрыСканирования;
		ПараметрыВыбора.ШтрихкодEAN            = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTINВводаОстатков);
		РезультатОбработки.ПараметрыУточненияДанных = ПараметрыВыбора;
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды.Получить(РезультатОбработки.Штрихкод);
		Если ДанныеШтрихкода <> Неопределено Тогда
			РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, ПараметрыСканирования.ИдентификаторФормы);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Передает управление обработки данных штрихкодов в модуль менеджера объекта или модуль общей формы.
// Выполняет кэширование данных штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ДанныеШтрихкода
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		РезультатОбработки = Неопределено;
		ШтрихкодированиеИСПереопределяемый.ОбработатьДанныеШтрихкодаДляОбщейФормы(
			Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды, РезультатОбработки);
	Иначе
		МодульДляОбработки = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
		РезультатОбработки = МодульДляОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	КонецЕсли;
	
	ДеревоУпаковок = Неопределено;
	Если ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	КонецЕсли;
	
	ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок);
	Форма.Модифицированность = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращает модуль, в котором требуется выполнить обработку штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
// Возвращаемое значение:
//  Модуль - Модуль, в котором требуется выполнить обработку штрихкодов.
Функция МодульДляОбработки(Форма) Экспорт

	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		МодульДляОбработки = Форма;
	Иначе
		МодульДляОбработки = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Возврат МодульДляОбработки;
	
КонецФункции

// Выполняет инициализацию кэша для формы объекта, необходимого для обработки маркируемой продукции.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма объекта.
Процедура ИнициализироватьКэшМаркируемойПродукции(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшМаркируемойПродукции") Тогда
		
		КэшМаркируемойПродукции = ИнициализацияКэшаМаркируемойПродукции();
		Форма.КэшМаркируемойПродукции = ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает элемент справочника штрихкоды упаковок на основании данных штрихкода.
//
// Параметры:
//  ДанныеШтрихкода - (См. ИнициализироватьДанныеШтрихкода)
// Возвращаемое значение:
//  СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на созданный элемент справочника.
Функция СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода) Экспорт
	
	ВидПродукцииПоШтрихкоду = ВидПродукцииИСПоШтрихкодуМаркировки(ДанныеШтрихкода.Штрихкод);
	Если ДанныеШтрихкода.ВидыПродукции.Найти(ВидПродукцииПоШтрихкоду) = Неопределено
		Или Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
	ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, ДанныеШтрихкода);
	
	ДанныеНовойУпаковки.Штрихкод    = ДанныеШтрихкода.Штрихкод;
	ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	ДанныеНовойУпаковки.Количество  = 1;
	
	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

// Возвращает массив штрихкодов EAN, которые хранятся в регистре сведений штрихкоды.
//
// Параметры:
//  ШтрихкодыEAN - Массив - Коллекция штрихкодов EAN.
// Возвращаемое значение:
//  Массив - Коллекция штрихкодов EAN по данным ИБ.
Функция СуществующиеВРегистреШтрихкодыEAN(ШтрихкодыEAN) Экспорт

	ДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);

	Возврат ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ШтрихкодEAN");

КонецФункции

// Дополняет коллекции Дерево упаковок и таблицу значений маркируемая продукция в данных по штрихкодам значениями
// вложенных штрихкодов.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Процедура ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, ВложенныеШтрихкоды) Экспорт
	
	Если ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ОбработанныеШтрихкоды.Количество() = 0 Тогда
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
		
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
		Возврат;
	КонецЕсли;
	
	ДеревоИзвестныхУпаковок       = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
	ДеревоУпаковокПоДаннымСервиса = ВложенныеШтрихкоды.ДеревоУпаковок;
	СоответствиеСтарыхИНовыхСтрокДерева = Новый Соответствие;
	СкопироватьСтрокиДерева(ДеревоИзвестныхУпаковок, ДеревоУпаковокПоДаннымСервиса, СоответствиеСтарыхИНовыхСтрокДерева);
	
	МаркированныеТоварыИзвестныхУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
	МаркированныеТоварыПоДаннымСервиса   = ВложенныеШтрихкоды.МаркированныеТовары;
	Для Каждого СтрокаПоДаннымСервиса Из МаркированныеТоварыПоДаннымСервиса Цикл
		
		НоваяСтрока = МаркированныеТоварыИзвестныхУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоДаннымСервиса);
		НоваяСтрока.СтрокаДерева = СоответствиеСтарыхИНовыхСтрокДерева.Получить(СтрокаПоДаннымСервиса.СтрокаДерева);
		НоваяСтрока.УпаковкаВерхнегоУровня = СоответствиеСтарыхИНовыхСтрокДерева.Получить(СтрокаПоДаннымСервиса.УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает виды продукции ИС по значению штрихкода логистической упаковки.
//
// Параметры:
//  КодЛогистическойУпаковки - Строка - Штрихкод
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции, которые присутствуют в упаковке.
Функция ВидыПродукцииЛогистическойУпаковки(КодЛогистическойУпаковки) Экспорт
	
	ВидыПродукции = Новый Массив;
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Добавить(КодЛогистическойУпаковки);
	
	НайденныеУпаковки = НайтиУпаковкиПоШтрихкодам(ДанныеПоШтрихкодам);
	
	Если НайденныеУпаковки.Количество() > 0 Тогда
		
		ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок(НайденныеУпаковки);
		ВидыПродукции = ВложенныеШтрихкоды.ВидыПродукции;
		
	КонецЕсли;
	
	Возврат ВидыПродукции;
	
КонецФункции

//Возвращает штрихкод нормализованный по стандартам подсистемы
//
// Параметры:
//  Штрихкод - Строка - Штрихкод.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Строка - Штрихкод приведенный к требуемому виду.
Функция НормализованныйШтрихкод(Знач Штрихкод, ПараметрыСканирования) Экспорт
	
	Штрихкод = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(Штрихкод);
	Если НайтиНедопустимыеСимволыXML(Штрихкод) > 0 Тогда
		Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВФорматеGS1(Штрихкод);
	КонецЕсли;
	
	ШтрихкодНормализован = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП") И ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
			МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
			НормализованныйШтрихкод = МодульШтрихкодированиеМОТПКлиентСервер.НормализоватьКодМаркировки(Штрихкод);
			ШтрихкодНормализован = НормализованныйШтрихкод <> Штрихкод;
		КонецЕсли;
		
		Если Не ШтрихкодНормализован И ПолучитьФункциональнуюОпцию("ВестиУчетОбувнойПродукцииИСМП") 
			И ДопустимаОбувнаяПродукция(ПараметрыСканирования) Тогда
			МодульШтрихкодированиеИСМПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
			НормализованныйШтрихкод = МодульШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(Штрихкод);
			ШтрихкодНормализован = НормализованныйШтрихкод <> Штрихкод;
		КонецЕсли;
		
	КонецЕсли;
	
	// Только в форме проверки для табачной и обувной продукции
	Если Не ШтрихкодНормализован Тогда
		ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
		Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
			Если ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
				НормализованныйШтрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Истина);
				ШтрихкодНормализован = НормализованныйШтрихкод <> Штрихкод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ШтрихкодНормализован Тогда
		
		Возврат НормализованныйШтрихкод;
		
	Иначе
		
		ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Штрихкод);
		Если ЭтоGTIN И СтрДлина(Штрихкод) = 14 Тогда
			Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(Штрихкод);
		КонецЕсли;
		
		Возврат Штрихкод;
		
	КонецЕсли;
	
КонецФункции

// Определяет текст запроса получения информации по номенклатуре такой как: "МаркируемаяПродукция" и "ВидПродукции" и
// помещает во временную таблицу "СвойстваМаркируемойПродукции".
// 
// Параметры:
// Возвращаемое значение:
// 	Строка - Фрагмент запроса, выборкой которого являются поля: Номенклатура, МаркируемаяПродукция, ВидПродукции.
Функция ОпределитьТекстЗапросаСвойстваМаркируемойПродукции() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура               КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика             КАК Характеристика,
	|	МАКСИМУМ(ЛОЖЬ)                                      КАК МаркируемаяПродукция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка) КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ШтрихкодированиеИСПереопределяемый.ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Выполняет сравнение двух деревьев значений: Дерево по данным информационной базы, сформированнное на базе справочника
//   "Штрихкоды упаковоко товаров" и дерева, полученного из сервиса Государственной ИС.
// 
// Параметры:
//  ДеревоУпаковок - (См. ИнициализироватьДеревоУпаковок).
//  ДеревоУпаковокПоДаннымСервиса - ДеревоЗначений - Дерево, полученное из сервиса Гос. ИС.
//  ЕстьРасхождения - Булево - Истина, если выявлено расхождение при сравнении.
Процедура ВыявитьРасхожденияВСоставахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса, ЕстьРасхождения) Экспорт
	
	КэшПроверенныхСтрок = Новый Соответствие;
	ТекстОшибки = НСтр("ru='Отсутствует по данным сервиса ИС МП.'");
	ВыявитьРасхожденияВСтрокахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса, КэшПроверенныхСтрок, ЕстьРасхождения, ТекстОшибки, Истина);
	
	ТекстОшибки = НСтр("ru='Отсутствует по данным ИБ.'");
	ВыявитьРасхожденияВСтрокахДеревьев(ДеревоУпаковокПоДаннымСервиса, ДеревоУпаковок, КэшПроверенныхСтрок, ЕстьРасхождения, ТекстОшибки, Ложь);
	
КонецПроцедуры

// Выполняет контроль заполнения серии с учетом сохраненного ранее выбора пользователя.
// 
// Параметры:
//  ПравилаПроверкиНаОшибки - Структура:
//   * КонтрольСерий - Массив строк дерева упаковок или данных штрихкода, где требуется указание серии.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
Процедура ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(ПравилаПроверкиНаОшибки, ПараметрыСканирования) Экспорт
	
	ДанныеУточнения = Новый Соответствие;
	Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеУточнения") Тогда
		ДанныеУточнения = ПараметрыСканирования.ДополнительныеПараметры.ДанныеУточнения;
	КонецЕсли;
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий")
		И ПравилаПроверкиНаОшибки.КонтрольСерий.Количество() > 0 Тогда
		
		Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольСерий Цикл
			
			КодМаркировки   = КлючЗначение.Ключ;
			ДанныеШтрихкода = КлючЗначение.Значение;
			ДанныеШтрихкода.ТребуетсяВыборСерии = Истина;
			
			ДанныеУточненияКодаМаркировки = ДанныеУточнения.Получить(КодМаркировки);
			
			Если ДанныеУточненияКодаМаркировки <> Неопределено
				Или (ДанныеСохраненногоВыбора <> Неопределено
				И ДанныеШтрихкода.Номенклатура = ДанныеСохраненногоВыбора.Номенклатура
				И ДанныеШтрихкода.Характеристика = ДанныеСохраненногоВыбора.Характеристика
				И ДанныеШтрихкода.Серия = ДанныеСохраненногоВыбора.Серия) Тогда
				
				ДанныеШтрихкода.ТребуетсяВыборСерии = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет на соответствие табличной части "Товары" списку штрихкодов упаковок.
// 
// Параметры:
//  ТаблицаТовары - ТабличнаяЧасть - Табличная часть, где хранится список товаров маркируемой продукции.
//  СписокУпаковок - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - список связанных штрихкодов упаковок.
// Возвращаемое значение:
//  Структура - 
Функция ТаблицаТоварыСоответствуетСпискуУпаковокМаркируемойПродукции(ТаблицаТовары, СписокУпаковок) Экспорт
	
	РезультатПроверки = Новый Структура("ДанныеСоответствуют, СтрокиСРасхождением", Истина, Новый Массив);
	
	ВложенныеШтрихкоды  = ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(СписокУпаковок);
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	
	ДанныеДляПроверки = Новый ТаблицаЗначений;
	ДанныеДляПроверки.Колонки.Добавить("Номенклатура");
	ДанныеДляПроверки.Колонки.Добавить("Характеристика");
	ДанныеДляПроверки.Колонки.Добавить("Серия");
	ДанныеДляПроверки.Колонки.Добавить("Количество");
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		НоваяСтрокаТовары = ДанныеДляПроверки.Добавить();
		НоваяСтрокаТовары.Номенклатура   = Строка.Номенклатура;
		НоваяСтрокаТовары.Характеристика = Строка.Характеристика;
		НоваяСтрокаТовары.Серия          = Строка.Серия;
		НоваяСтрокаТовары.Количество     = Строка.КоличествоУпаковок;
		
	КонецЦикла;
	
	Для Каждого Строка Из МаркированныеТовары Цикл
		
		НоваяСтрокаТовары = ДанныеДляПроверки.Добавить();
		НоваяСтрокаТовары.Номенклатура   = Строка.Номенклатура;
		НоваяСтрокаТовары.Характеристика = Строка.Характеристика;
		НоваяСтрокаТовары.Серия          = Строка.Серия;
		НоваяСтрокаТовары.Количество     = - 1;
		
	КонецЦикла;
	
	ДанныеДляПроверки.Свернуть("Номенклатура, Характеристика, Серия" , "Количество");
	
	Для Каждого СтрокаДанных Из ДанныеДляПроверки Цикл
		
		Если СтрокаДанных.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки.ДанныеСоответствуют = Ложь;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
		НайденныеСтроки = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаСРасхождением = Новый Структура("СтрокаТовары, Необходимо, Указано",
				НайденныеСтроки[0], НайденныеСтроки[0].КоличествоУпаковок, НайденныеСтроки[0].КоличествоУпаковок - СтрокаДанных.Количество);
			РезультатПроверки.СтрокиСРасхождением.Добавить(СтрокаСРасхождением);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Формирует вложенные штрихкоды без учета специфики маркируемой продукции.
//
// Параметры:
//  МассивУпаковок - Массив - Коллекция элементов справочника Штрихкоды упаковок.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ВидыПродукцииИС = Неопределено) Экспорт
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	
	Запрос       = Новый Запрос();
	Запрос.Текст = ТекстЗапросаСоставаУпаковокВИерархии();
	
	КоллекцияУпаковок = ОбщегоНазначения.СкопироватьРекурсивно(МассивУпаковок, Ложь);
	
	ПродолжатьПоиск    = Истина;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок", КоллекцияУпаковок);
		Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						
						ВидПродукции = Выборка["УпаковкаУровень"+ТекущийУровень+"ВидПродукции"];
						Если ЗначениеЗаполнено(ВидПродукции)
							И ВидыПродукцииИС <> Неопределено
							И ВидыПродукцииИС.Найти(ВидПродукции) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ВидПродукции) Тогда
							ВложенныеШтрихкоды.ВидыПродукции.Добавить(ВидПродукции);
						КонецЕсли;
						РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
						ЗаполнитьСтрокуДереваУпаковокПоВыборке(РодительскиеДанные, Выборка, ТекущийУровень);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
						
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					КоллекцияУпаковок.Добавить(Выборка["УпаковкаУровень"+ТекущийУровень]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	КэшУпаковокВерхнегоУровня = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
		
		Если КлючЗначение.Значение.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗначение.Значение);
			НоваяСтрока.СтрокаДерева = КлючЗначение.Значение;
			НоваяСтрока.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(КлючЗначение.Значение, КэшУпаковокВерхнегоУровня);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВложенныеШтрихкоды.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВложенныеШтрихкоды.ВидыПродукции);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Вычисляет штрихкод EAN по коду маркировки.
//
// Параметры:
//  КодМаркировки - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Неопределено, Строка - Неопределено, если вычислить штрихкод EAN не удалось.
Функция EANПоКодуМаркировки(Знач КодМаркировки) Экспорт
	
	ШтрихкодGTIN = ШтрихкодированиеИСКлиентСервер.GTINПоКодуМаркировки(КодМаркировки);
	
	Возврат ШтрихкодEANИзGTIN(ШтрихкодGTIN);
	
КонецФункции

// Определяет допустимость обработки обувной продукции по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если допустима.
Функция ДопустимаОбувнаяПродукция(ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидПродукцииОбувная = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная");
	
	Возврат ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииОбувная) <> Неопределено;
	
КонецФункции

// Выполняется инициализация структуры кэширования данных маркируемой продукции.
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ОтложенныеКодыМаркировки - Массив - Коды маркировки, по которым требуется выполнить постобработку.
// * ОбработанныеКодыМаркировки - Соответствие - Ключ - код маркировки, значение - информация по коду маркировки.
Функция ИнициализацияКэшаМаркируемойПродукции() Экспорт
	
	КэшМаркируемойПродукции = Новый Структура;
	КэшМаркируемойПродукции.Вставить("ОбработанныеКодыМаркировки",             Новый Соответствие);
	КэшМаркируемойПродукции.Вставить("ОтложенныеКодыМаркировки",               Новый Массив);
	КэшМаркируемойПродукции.Вставить("ДанныеДляУточненияСведенийПользователя", Новый Структура("Операция, Данные"));
	
	Возврат КэшМаркируемойПродукции;
	
КонецФункции

Процедура ОбработатьУточнениеДанныхДляФормыПроверкиИПодбора(РезультатВыбора, РезультатОбработки, ПараметрыСканирования, КэшированныеЗначения) Экспорт
	
	Если ЭтоАдресВременногоХранилища(РезультатОбработки.АдресДанныхШтрихкода) Тогда
		ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДанныхШтрихкода);
	Иначе
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
	КонецЕсли;
	
	Номенклатура   = РезультатВыбора.ДанныеВыбора.Номенклатура;
	Характеристика = РезультатВыбора.ДанныеВыбора.Характеристика;
	Серия = РезультатВыбора.ДанныеВыбора.Серия;
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеШтрихкода.Номенклатура   = Номенклатура;
	ДанныеШтрихкода.Характеристика = Характеристика;
	ДанныеШтрихкода.Серия          = Серия;
	
	Если ДанныеШтрихкода.ВидыПродукции.Количество() = 0 Тогда
		ВидПродукции = ИнтеграцияИСМП.ВидПродукцииПоНоменклатуре(Номенклатура);
		ДанныеШтрихкода.ВидыПродукции.Добавить(ВидПродукции);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда
		ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
			Блокировка.Заблокировать();
			
			ШтрихкодУпаковкиОбъект = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
			ШтрихкодУпаковкиОбъект.Номенклатура   = Номенклатура;
			ШтрихкодУпаковкиОбъект.Характеристика = Характеристика;
			ШтрихкодУпаковкиОбъект.Серия          = Серия;
			ШтрихкодУпаковкиОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'ГосИС: Обработка результата уточнения данных';
												|en = 'ГосИС: Обработка результата уточнения данных'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода);
		
	КонецЕсли;
	
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, ПараметрыСканирования.ИдентификаторФормы);
	
	ТипУпаковки = РезультатОбработки.ТипУпаковки;
	
КонецПроцедуры

#Область ЗагрузкаДанныхТСД

//При необходимости изменяет данные поступившие из ТСД по правилам: вложение упаковки всегда должно 
//   быть в массиве после строки самой упаковки; если строки с штрихкодом упаковки нет - она добавляется.
//
//Параметры:
//   ДанныеТСД - Массив - данные поступившие с ТСД (изменяемый параметр)
//
//Возвращаемое значение:
//   Булево - в данных ТСД есть иерархия
//
Функция ДополнитьУпорядочитьДанныеТСД(ДанныеТСД) Экспорт
	
	// 1. Дополнить данные поступившие из ТСД / внешних источников (в формате ТСД)
	ВсеШтрихкоды = Новый Массив;
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		ВсеШтрихкоды.Добавить(ЭлементМассива.Штрихкод);
	КонецЦикла;
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		ШтрихкодУпаковки = "";
		Если Не ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли ВсеШтрихкоды.Найти(ШтрихкодУпаковки) = Неопределено Тогда
			ВсеШтрихкоды.Добавить(ШтрихкодУпаковки);
			НовыйЭлемент = ОбщегоНазначения.СкопироватьРекурсивно(ЭлементМассива, Ложь);
			Для Каждого КлючИЗначение Из НовыйЭлемент Цикл
				НовыйЭлемент[КлючИЗначение.Ключ] = Неопределено;
			КонецЦикла;
			НовыйЭлемент.Штрихкод = ШтрихкодУпаковки;
			НовыйЭлемент.ШтрихкодУпаковки = "";
			ДанныеТСД.Добавить(НовыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	// 2. Сортировать данные
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("ШтрихкодУпаковки");
	ТаблицаСоответствия.Колонки.Добавить("Штрихкод");
	ТаблицаСоответствия.Колонки.Добавить("Уровень");
	ТаблицаСоответствия.Колонки.Добавить("Элемент");
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		ШтрихкодУпаковки = "";
		ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки);
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ШтрихкодУпаковки = ШтрихкодУпаковки;
		НоваяСтрока.Штрихкод         = ЭлементМассива.Штрихкод;
		НоваяСтрока.Уровень          = 0;
		НоваяСтрока.Элемент          = ЭлементМассива;
		
	КонецЦикла;
	
	ТаблицаСоответствия.Индексы.Добавить("Уровень");
	ТаблицаСоответствия.Индексы.Добавить("Уровень, Штрихкод");
	
	Уровень = 0;
	СчитатьИерархию = Истина;
	СтрокТаблицы    = ТаблицаСоответствия.Количество();
	Пока СчитатьИерархию И Уровень <= СтрокТаблицы Цикл
		СчитатьИерархию = Ложь;
		Для Каждого СтрокаТЧ Из ТаблицаСоответствия.НайтиСтроки(Новый Структура("Уровень", Уровень)) Цикл
			Если СтрокаТЧ.ШтрихкодУпаковки = "" Тогда
				Продолжить;
			КонецЕсли;
			Упаковки = ТаблицаСоответствия.НайтиСтроки(Новый Структура("Уровень, Штрихкод", Уровень, СтрокаТЧ.ШтрихкодУпаковки));
			Если Упаковки.Количество() Тогда
				СчитатьИерархию = Истина;
				СтрокаТЧ.Уровень = Уровень + 1;
			КонецЕсли;
		КонецЦикла;
		Уровень = Уровень + 1;
	КонецЦикла;
	
	Если Уровень = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (Уровень > СтрокТаблицы) Тогда
		ДанныеТСД = Новый Массив;
		ВызватьИсключение НСтр("ru = 'Получены некорректные данные из ТСД или внешнего файла: обнаружено зацикливание упаковок'");
	КонецЕсли;
	
	ТаблицаСоответствия.Сортировать("Уровень");
	
	СортированныйМассив = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблицаСоответствия Цикл
		СортированныйМассив.Добавить(СтрокаТЧ.Элемент);
	КонецЦикла;
	ДанныеТСД = СортированныйМассив;
	
	Возврат Истина;
	
КонецФункции
	
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает список элементов штрихкодов упаковок, находящихся на форме объекта.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Список элементов штрихкодов формы объекта.
Функция УпаковкиОбъекта(Форма, ПараметрыСканирования)
	
	ТабличнаяЧастьШтрихкодыУпаковок = Форма.Объект[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок];
	
	ИменаКолонокШтрихкодовУпаковок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки, ",", Истина);
	
	УпаковкиОбъекта = Новый Массив;
	
	Для Каждого ИмяКолонки Из ИменаКолонокШтрихкодовУпаковок Цикл
		
		УпаковкиТабЧасти = ТабличнаяЧастьШтрихкодыУпаковок.Выгрузить(,ИмяКолонки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УпаковкиОбъекта, УпаковкиТабЧасти, Истина);
		
	КонецЦикла;
	
	Возврат УпаковкиОбъекта;
	
КонецФункции

// Проверят Дерево значений 1 на соотствие Дерева значений 2. Фиксирует расхождения.
// 
// Параметры:
//  ДеревоЗначений1 - ДеревоЗначений - 
//  ДеревоЗначений2 - ДеревоЗначений - Описание
//  КэшПроверенныхСтрок - Соответствие - Описание
//  ЕстьРасхождения - Булево - Описание
//  ТекстОшибки - Строка - Описание
//  ПерваяИтерация - Булево - Описание
Процедура ВыявитьРасхожденияВСтрокахДеревьев(ДеревоЗначений1, ДеревоЗначений2, КэшПроверенныхСтрок, ЕстьРасхождения,
	ТекстОшибки, ПерваяИтерация)
	
	Для Каждого СтрокаДерева1 Из ДеревоЗначений1.Строки Цикл
		
		СоответствующаяСтрокаДерева2 = КэшПроверенныхСтрок.Получить(СтрокаДерева1);
		Если СоответствующаяСтрокаДерева2 <> Неопределено Тогда
			ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, СоответствующаяСтрокаДерева2, КэшПроверенныхСтрок, ЕстьРасхождения, ТекстОшибки, ПерваяИтерация);
			Продолжить;
		КонецЕсли;
		
		Если ПерваяИтерация Тогда
			
			НайденнаяСтрокаДерева2 = ДеревоЗначений2.Строки.Найти(СтрокаДерева1.Штрихкод, "Штрихкод");
			Если НайденнаяСтрокаДерева2 = Неопределено Тогда
				СтрокаДерева1.ТекстОшибки = ТекстОшибки;
				СтрокаДерева1.ЕстьОшибки  = Истина;
				ЕстьРасхождения = Истина;
			Иначе
				КэшПроверенныхСтрок.Вставить(НайденнаяСтрокаДерева2, СтрокаДерева1);
				ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, НайденнаяСтрокаДерева2, КэшПроверенныхСтрок, ЕстьРасхождения,
					ТекстОшибки, ПерваяИтерация);
			КонецЕсли;
			
		Иначе
			
			НоваяСтрокаДерева2 = ДеревоЗначений2.Строки.Добавить();
			НоваяСтрокаДерева2.Штрихкод    = СтрокаДерева1.Штрихкод;
			НоваяСтрокаДерева2.ТекстОшибки = ТекстОшибки;
			НоваяСтрокаДерева2.ЕстьОшибки  = Истина;
			ЕстьРасхождения = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Включает поддержку алкогольной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		МодульШтрихкодированиеЕГАИСКлиентСервер.ЗаполнитьПараметрыСканирования(
			ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная")
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку обувной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканированияДляОбувнойПродукции(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная")
			Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ФормаВыбора, ВидПродукции, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает вид продукции ИС по штрихкоду EAN
// 
// Параметры:
//  Штрихкод - Строка - Штрихкода EAN
// Возвращаемое значение:
//  Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС
Функция ВидПродукцииИСПоШтрихкодуНоменклатуры(Штрихкод)
	
	ШтрихкодыEAN = Новый Массив;
	ШтрихкодыEAN.Добавить(Штрихкод);
	
	ДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
	Если ДанныеПоШтрихкодамEAN.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеПоШтрихкодамEAN[0].ВидПродукции;
	
КонецФункции

// Формирует соответствие, ключ которого - строка дерева, значение - структура, свойства и значения которой равны
// строке дерева.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  Соответствие - Соответствие - Ключ - строка дерева, значение - структура значений строки дерева.
Процедура ПоместитьДанныеСтрокДереваВСоответствие(СтрокиДерева, Соответствие)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДерева);
		Соответствие.Вставить(СтрокаДерева.Штрихкод, ДанныеШтрихкода);
		ПоместитьДанныеСтрокДереваВСоответствие(СтрокаДерева.Строки, Соответствие);
		
	КонецЦикла;
	
КонецПроцедуры

// Распознавание коллекции Штрихкоды и заполнение коллекции ДанныеПоШтрихкодам
// 
// Параметры:
//  Штрихкоды - Массив - Коллекция штрихкодов.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ИдентифицироватьЗначенияШтрихкодов(Штрихкоды, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДанныеПоШтрихкодам.ВсеШтрихкоды  = Штрихкоды;
	ОбрабатыватьМаркируемуюПродукцию = ИнтеграцияИСПовтИсп.ВедетсяУчетМаркируемойПродукции();
	
	Если ОбрабатыватьМаркируемуюПродукцию Тогда
		
		Для Каждого КодМаркировки Из Штрихкоды Цикл
			НоваяСтрока = ДанныеПоШтрихкодам.ДанныеКодовМаркировок.Добавить();
			НоваяСтрока.КодМаркировки = КодМаркировки;
		КонецЦикла;
		
		ОпределитьИнформациюПоGTINКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ОпределитьМаркируемуюПродукциюПоКодамМаркировок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ОпределитьЛогистическиеУпаковкиШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ОпределитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ОпределитьНеобработанныеШтрихкоды(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ОпределитьШтрихкодыВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ДанныеПоШтрихкодам.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоШтрихкодам.ВидыПродукции);
		
	Иначе
		
		Для Каждого Штрихкод Из Штрихкоды Цикл
			ДанныеПоШтрихкодам.НеобработанныеШтрихкоды.Вставить(Штрихкод);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет информацию по EAN кодов маркировки по данным ИБ. Информация помещается в
//  ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ОпределитьИнформациюПоGTINКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыEAN = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		ШтрихкодEAN = EANИзКодаМаркировки(СтрокаДанных.КодМаркировки);
		Если ШтрихкодEAN <> Неопределено Тогда
			ШтрихкодыEAN.Добавить(ШтрихкодEAN);
			СтрокаДанных.EAN  = ШтрихкодEAN;
			СтрокаДанных.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN);
		Иначе
			ШтрихкодыEAN.Добавить(СтрокаДанных.КодМаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
	
КонецПроцедуры

// Определяет необработанные штрихкоды. На основании анализа заполняет "ДанныеПоШтрихкодам".
//
// Параметры:
// 	ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// 	Штрихкоды - Массив из Строка - Список штрихкодов.
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ОпределитьНеобработанныеШтрихкоды(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Штрихкоды = ДанныеПоШтрихкодам.ВсеШтрихкоды;
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Для Каждого Штрихкод Из Штрихкоды Цикл
		
		Если ДанныеПоШтрихкодам.МаркируемаяПродукция.Найти(Штрихкод) <> Неопределено
			Или ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Найти(Штрихкод) <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НеизвестныеШтрихкоды.Добавить(Штрихкод);
		
	КонецЦикла;
	
	ДаныеПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(НеизвестныеШтрихкоды);
	
	Для Каждого Штрихкод Из НеизвестныеШтрихкоды Цикл
		
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		ДанныеШтрихкода.Количество              = 1;
		ДанныеШтрихкода.Штрихкод                = Штрихкод;
		ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры = Истина;
		
		ИскомаяСтрока = ДаныеПоШтрихкодамEAN.Найти(Штрихкод, "ШтрихкодEAN");
		Если ИскомаяСтрока <> Неопределено Тогда
			
			ДанныеШтрихкода.Номенклатура         = ИскомаяСтрока.Номенклатура;
			ДанныеШтрихкода.Характеристика       = ИскомаяСтрока.Характеристика;
			ДанныеШтрихкода.МаркируемаяПродукция = ИскомаяСтрока.МаркируемаяПродукция;
			
			Если ЗначениеЗаполнено(ИскомаяСтрока.ВидПродукции) Тогда
				ДанныеШтрихкода.ВидыПродукции.Добавить(ИскомаяСтрока.ВидПродукции);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеПоШтрихкодам.НеобработанныеШтрихкоды.Вставить(Штрихкод, ДанныеШтрихкода);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьШтрихкодыВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДанныеУточнения = Неопределено;
	Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеУточнения") Тогда //Для вызова из формы ввода кода маркировки.
		ДанныеУточнения = ПараметрыСканирования.ДополнительныеПараметры.ДанныеУточнения;
	КонецЕсли;
	
	ШтрихкодыВводаОстатков = Новый Массив;
	КодыМаркировки         = Новый Массив();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		КодыМаркировки.Добавить(СтрокаДанных.КодМаркировки);
	КонецЦикла;
	
	ДанныеПулаПоКодамМаркировки = РегистрыСведений.ПулКодовМаркировкиСУЗ.ДанныеКодовМаркировки(КодыМаркировки);
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
	
		ДанныеПулаПоКоду = ДанныеПулаПоКодамМаркировки.Получить(СтрокаДанных.КодМаркировки);
		Если ДанныеПулаПоКоду <> Неопределено Тогда
			
			СтрокаДанных.ЭтоКодВводаОстатков = ДанныеПулаПоКоду.МаркировкаОстатков;
			СтрокаДанных.Номенклатура        = ДанныеПулаПоКоду.Номенклатура;
			СтрокаДанных.Характеристика      = ДанныеПулаПоКоду.Характеристика;
			
			Если СтрокаДанных.ЭтоКодВводаОстатков Тогда
				ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков = Истина;
				ШтрихкодыВводаОстатков.Добавить(СтрокаДанных.EAN);
			КонецЕсли;
			
		ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДанных.EAN) Тогда
			
			Если ДанныеУточнения <> Неопределено Тогда
				СтрокаДанных.Номенклатура   = ДанныеУточнения.Номенклатура;
				СтрокаДанных.Характеристика = ДанныеУточнения.Характеристика;
			КонецЕсли;
			
			СтрокаДанных.ЭтоКодВводаОстатков = Истина;
			ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков = Истина;
			ШтрихкодыВводаОстатков.Добавить(СтрокаДанных.EAN);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления, ШтрихкодыВводаОстатков);
	
КонецПроцедуры

// Определяет по штрихкодам логистических упаковок необходимость в сопоставлении их с номенклатурой.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  Штрихкоды - Массив из Строка - Список штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьШтрихкодыДляСопоставленияЛогистическихУпаковок(ДанныеПоШтрихкодам, Штрихкоды, ПараметрыСканирования)
	
	//Определение логистических упаковок
	ШтрихкодыEAN = Новый Массив;
	СоответствиеШтрихкодовEAN = Новый Соответствие;
	Для Каждого ЗначениеШтрихкода Из Штрихкоды Цикл
		
		Если ЭтоШтрихкодGS1(ЗначениеШтрихкода) Тогда
			
			ШтрихкодEAN = EANПоКодуМаркировки(ЗначениеШтрихкода);
			
			Если ШтрихкодEAN <> Неопределено Тогда
				
				ШтрихкодыEAN.Добавить(ШтрихкодEAN);
				СоответствиеШтрихкодовEAN.Вставить(ЗначениеШтрихкода, ШтрихкодEAN);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДаныеПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
	
	Для Каждого ЗначениеШтрихкода Из Штрихкоды Цикл
		
		ШтрихкодEAN = СоответствиеШтрихкодовEAN[ЗначениеШтрихкода];
		Если ШтрихкодEAN = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ДаныеПоШтрихкодамEAN.Найти(ШтрихкодEAN, "ШтрихкодEAN");
		
		Если НайденнаяСтрока = Неопределено Тогда
			ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Добавить(ШтрихкодEAN);
		Иначе
			
			ПараметрыОтбора = Новый Структура("EAN", ШтрихкодEAN);
			НайденныеСтроки = ДанныеПоШтрихкодам.ДанныеКодовМаркировок.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				СтрокаТаблицы.Номенклатура   = НайденнаяСтрока.Номенклатура;
				СтрокаТаблицы.Характеристика = НайденнаяСтрока.Характеристика;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет код маркировки на соответствие шаблону штрихкодов GS1-128
// 
// Параметры:
//  КодМаркировки
// Возвращаемое значение:
//  Булево - Истина, если код соответствует GS1-128.
Функция ЭтоШтрихкодGS1(Штрихкод)
	
	// Штрихкод GS1 должен быть преобразован в формат GS1 со скобками
	Если СтрНайти(Штрихкод, "(") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(Штрихкод);
	
	Возврат РезультатРазбора.Разобран;
	
КонецФункции

// Определяет по штрихкодам необходимость в сопоставлении их с номенклатурой.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  Штрихкоды - Массив из Строка - Список штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ОпределитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Штрихкоды = ДанныеПоШтрихкодам.ВсеШтрихкоды;
	
	ЗаполнитьШтрихкодыДляСопоставленияЛогистическихУпаковок(ДанныеПоШтрихкодам, Штрихкоды, ПараметрыСканирования);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
	
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам);
	
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам);
	
	КонецЕсли;
	
	ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления);
	
КонецПроцедуры

// Определят по переданному массиву штрихкодов логистические упаковки. По результатам анализа заполняет
// "ДанныеПоШтрихкодам".
//
// Параметры:
// 	ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// 	Штрихкоды - Массив из Строка - Список штрихкодов.
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ОпределитьЛогистическиеУпаковкиШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		ВидыПродукцииКодаМаркировки = Новый Массив;
		Если ЭтоКодУпаковки(СтрокаДанных.КодМаркировки, ПараметрыСканирования, ВидыПродукцииКодаМаркировки) Тогда
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Добавить(СтрокаДанных.КодМаркировки);
			СтрокаДанных.ЭтоУпаковка = Истина;
			СтрокаДанных.ВидыПродукцииКодаМаркировки = ВидыПродукцииКодаМаркировки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определят по переданному массиву штрихкодов маркируемую продукцию. По результатам анализа заполняет
// "ДанныеПоШтрихкодам".
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  КодыМаркировок - Массив из Строка - Список штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ОпределитьМаркируемуюПродукциюПоКодамМаркировок(ДанныеПоШтрихкодам, ПараметрыСканирования)
		
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		ВидПродукцииИСПоШтрихкоду = ВидПродукцииИСПоШтрихкодуМаркировки(СтрокаДанных.КодМаркировки);
		
		Если ВидПродукцииИСПоШтрихкоду <> Неопределено Тогда
			
			ДанныеПоШтрихкодам.МаркируемаяПродукция.Добавить(СтрокаДанных.КодМаркировки);
			ДанныеПоШтрихкодам.ВидыПродукции.Добавить(ВидПродукцииИСПоШтрихкоду);
			ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции.Вставить(СтрокаДанных.КодМаркировки, ВидПродукцииИСПоШтрихкоду);
			СтрокаДанных.ВидПродукции = ВидПродукцииИСПоШтрихкоду;
			СтрокаДанных.МаркируемаяПродукция = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку является ли значение штрихкода штрихкодом логистической упаковки.
//
// Параметры:
//  Штрихкод - Строка - Штрихкод.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если штрихкод является штрихкодом логистической упаковки.
Функция ЭтоКодУпаковки(Штрихкод, ПараметрыСканирования, ВидыПродукцииКодаМаркировки)
	
	ЭтоКодУпаковки = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции")
		И ПрисутствуетАлкогольнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		ЭтоКодУпаковки = МодульШтрихкодированиеЕГАИСКлиентСервер.ЭтоШтрихкодЛогистическойУпаковки(Штрихкод);
		
		Если ЭтоКодУпаковки Тогда
			ВидыПродукцииКодаМаркировки.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрольПоВидуПродукции = Истина;
	Если ПараметрыСканирования.Свойство("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП")
		И ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП Тогда
		КонтрольПоВидуПродукции = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП")
		И ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		ЭтоКодУпаковки = МодульШтрихкодированиеМОТП.ЭтоКодУпаковки(Штрихкод, КонтрольПоВидуПродукции);
		
		Если ЭтоКодУпаковки Тогда
			ВидыПродукцииКодаМаркировки.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ПолучитьФункциональнуюОпцию("ВестиУчетОбувнойПродукцииИСМП")
		И ПрисутствуетОбувнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		ЭтоКодУпаковки = МодульШтрихкодированиеИСМП.ЭтоКодУпаковки(Штрихкод, КонтрольПоВидуПродукции);
		
		Если ЭтоКодУпаковки Тогда
			ВидыПродукцииКодаМаркировки.Добавить(Перечисления.ВидыПродукцииИС.Обувная);
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет вид продукции ИС по значению штрихкода.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод.
//  УчитыватьЛогистическуюУпаковку - Булево - Истина, если включать проверку для логистической упаковки.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции ИС, определенный по значению штрихкода.
Функция ВидПродукцииИСПоШтрихкодуМаркировки(Штрихкод, УчитыватьЛогистическуюУпаковку = Ложь)
	
	ВидПродукцииИС = Неопределено;
	
	ПодсистемаЕГАИССуществует = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС");
	ПодсистемаИСМПСуществует  = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП");
	
	Если ПодсистемаЕГАИССуществует Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
	КонецЕсли;
	
	Если ПодсистемаИСМПСуществует Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМП");
	КонецЕсли;
	
	Если ПодсистемаЕГАИССуществует
		И ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции")
		И МодульШтрихкодированиеЕГАИС.ЭтоШтрихкодАлкогольнойПродукции(Штрихкод, УчитыватьЛогистическуюУпаковку) Тогда
		
		ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Алкогольная;
		
	ИначеЕсли ПодсистемаИСМПСуществует
		И ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП")
		И МодульШтрихкодированиеМОТП.ЭтоШтрихкодТабачнойПродукции(Штрихкод, УчитыватьЛогистическуюУпаковку) Тогда
		
		ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табачная;
		
	ИначеЕсли ПодсистемаИСМПСуществует
		И ПолучитьФункциональнуюОпцию("ВестиУчетОбувнойПродукцииИСМП")
		И МодульШтрихкодированиеИСМП.ЭтоШтрихкодОбувнойПродукции(Штрихкод, УчитыватьЛогистическуюУпаковку) Тогда
		
		ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувная;
		
	КонецЕсли;
	
	Возврат ВидПродукцииИС;
	
КонецФункции

// Возвращает состав колонок, который является общим для дерева упаковок и таблицы значений маркированные товары.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ТипШтрихкода - Неопределено, ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
//   * УпаковкаВерхнегоУровня - Неопределено -
//   * ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции кода маркировки.
//   * Серия - Неопределено, ОпределяемыеТипы.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - Неопределено, ОпределяемыеТипы.ХарактеристикаНоменклатуры - Характеристика.
//   * Номенклатура - Неопределено, ОпределяемыеТипы.Номенклатура - Номенклатура.
//   * ЗначениеШтрихкода - Неопределено, Строка - Штрихкод.
//   * ШтрихкодУпаковки - Неопределено, СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника.
//   * ИдентификаторСтроки - Неопределено, Строка - Идентификатор.
Функция ОбщиеКолонкиКоллекцийВложенныхШтрихкодов()
	
	КоллекцияОбязательныхКолонок = Новый Структура;
	
	КоллекцияОбязательныхКолонок.Вставить("ИдентификаторСтроки",    Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ШтрихкодУпаковки",       Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Штрихкод",               Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Номенклатура",           Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Характеристика",         Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Серия",                  Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ВидПродукции",           Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("УпаковкаВерхнегоУровня", Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ТипШтрихкода",           Неопределено);
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

// Ищет в массиве табачную продукцию.
//
// Параметры:
//  Коллекция - Массив - коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в коллекции найдена табачная продукция.
Функция ЕстьТабачнаяПродукцияВКоллекции(Коллекция)
	
	ТабачнаяПродукция = Перечисления.ВидыПродукцииИС.Табачная;
	
	Возврат Коллекция.Найти(ТабачнаяПродукция) <> Неопределено;
	
КонецФункции

// Ищет в массиве алкогольную продукцию.
//
// Параметры:
//  Коллекция - Массив - коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в коллекции найдена алкогольная продукция.
Функция ЕстьАлкогольнаяПродукцияВКоллекции(Коллекция)
	
	АлкогольнаяПродукция = Перечисления.ВидыПродукцииИС.Алкогольная;
	
	Возврат Коллекция.Найти(АлкогольнаяПродукция) <> Неопределено;
	
КонецФункции

// Ищет в массиве обувную продукцию.
//
// Параметры:
//  Коллекция - Массив - коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в коллекции найдена обувная продукция.
Функция ЕстьОбувнаяПродукцияВКоллекции(Коллекция)

	ОбувнаяПродукция = Перечисления.ВидыПродукцииИС.Обувная;

	Возврат Коллекция.Найти(ОбувнаяПродукция) <> Неопределено;

КонецФункции

#Область ПроверкаНаОшибки

// Выполняет контроль на соответствие маркируемой продукции по документу основания.
//
// Параметры:
//  ДанныеПоШтрихкодам - (см. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаСоответствиеДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокументаОснования = ДанныеДокументаОснования(ПараметрыСканирования);
	ТекстОшибки = НСтр("ru = 'Не соответствует документу-основанию'");
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
			
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл 
			ДанныеШтрихкода = КлючЗначение.Значение;
			
			Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			Если ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				ПараметрыПоиска.Вставить("Серия", ДанныеШтрихкода.Серия);
			КонецЕсли;
			
			НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЦикла;
			
	Иначе
		
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		Для Каждого СтрокаМаркированныеТовары Из МаркированныеТовары Цикл
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   СтрокаМаркированныеТовары.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", СтрокаМаркированныеТовары.Характеристика);
			ПараметрыПоиска.Вставить("Серия",          СтрокаМаркированныеТовары.Серия);
			
			НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаМаркированныеТовары.СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаМаркированныеТовары.СтрокаДерева.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку на соответствие вида продукции номенклатуры виду продукции, вычисленному по значению кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ВидыПродукцииНоменклатуры = КлючЗначение.Значение.ВидыПродукции;
		ВидПродукцииПоШтрихкоду   = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции[КлючЗначение.Ключ];
		
		Если ВидПродукцииПоШтрихкоду <> Неопределено
			И ВидыПродукцииНоменклатуры.Найти(ВидПродукцииПоШтрихкоду) = Неопределено Тогда			
			
			ЕстьОшибки = Истина;
			
			Если ВидыПродукцииНоменклатуры.Количество() = 0 Тогда
				ШаблонОшибки =  НСтр("ru = 'Не задан вид продукции номенклатуры %1'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, КлючЗначение.Значение.Номенклатура);
			Иначе
				ШаблонОшибки = НСтр("ru = 'Значение штрихкода соответствует виду %1'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ВидПродукцииПоШтрихкоду);
			КонецЕсли;
			
			КлючЗначение.Значение.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Для Каждого СтрокаТовары Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТовары.ВидПродукции) Тогда
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаТовары.СтрокаДерева.ЕстьОшибки         = Истина;
				СтрокаТовары.СтрокаДерева.ТекстОшибки        = НСтр("ru = 'Вид продукции не определен'");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку на повторное сканирование кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаУжеДобавленныеДанныеВДокумент(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли; 
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	//Проверка для упаковок
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ПроверитьСтрокиДереваНаУжеДобавленные(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
	Иначе
		ОбработанныеШтрихкоды = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды;
		ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(ОбработанныеШтрихкоды, ОбработанныеКодыМаркировки, ЕстьОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку видов продукции данных по штрихкодам на вхождение в массив допустимых видов продукции, который
// задан в параметрах сканирования.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Истина;
	ДанныеПоШтрихкодам.ОшибкаДопустимостиВидовПродукции = Истина;
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		НайтиСтрокиДереваСНедопустимымВидомПродукции(ДеревоУпаковок.Строки, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Обходит строки дерева и выполняет поиск вида продукции строки дерева в массиве допустимых видов продукции, которые
// заданы в параметрах сканирования.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура НайтиСтрокиДереваСНедопустимымВидомПродукции(СтрокиДерева, ПараметрыСканирования)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(СтрокаДерева.ВидПродукции) = Неопределено Тогда
			
			СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru='Вид продукции: %1'"), СтрокаДерева.ВидПродукции);
			СтрокаДерева.ЕстьОшибки  = Истина;
			
		КонецЕсли;
		
		НайтиСтрокиДереваСНедопустимымВидомПродукции(СтрокаДерева.Строки, ПараметрыСканирования);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет коллекцию обработанные штрихкоды на повторный ввод.
//
// Параметры:
//  ОбработанныеШтрихкоды - Соответствие - штрихкоды, которые удалось обработать.
//  МаркируемаяПродукцияДокумента - Соответствие - закэшированные данные.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(ОбработанныеШтрихкоды, МаркируемаяПродукцияДокумента, ЕстьОшибки)
	
	Если ОбработанныеШтрихкоды = Неопределено Или МаркируемаяПродукцияДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ОбработанныеШтрихкоды Цикл 
		
		Если МаркируемаяПродукцияДокумента[КлючЗначение.Ключ] <> Неопределено Тогда
			КлючЗначение.Значение.ТекстОшибки = ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет штрихкоды строк дерева упаковок на попытку повторного ввода.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  МаркируемаяПродукцияДокумента - Соответствие - закэшированные данные.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьСтрокиДереваНаУжеДобавленные(СтрокиДерева, МаркируемаяПродукцияДокумента, ЕстьОшибки)
	
	Если МаркируемаяПродукцияДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если МаркируемаяПродукцияДокумента[СтрокаДерева.Штрихкод] <> Неопределено Тогда
			
			СтрокаДерева.ЕстьОшибки = Истина;
			СтрокаДерева.ТекстОшибки = ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
		ПроверитьСтрокиДереваНаУжеДобавленные(СтрокаДерева.Строки, МаркируемаяПродукцияДокумента, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку на допустимость обработки вида продукции ИС. Допустимые виды продукции задаются в параметрах
// сканирования.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция КонтрольНаДопустимыеВидыПродукции(Штрихкод, ПараметрыСканирования)
	
	РезультатОбработки = Неопределено;
	
	ВидПродукцииИС = ВидПродукцииИСПоШтрихкодуМаркировки(Штрихкод);
	
	Если ВидПродукцииИС = Неопределено Тогда
		ВидПродукцииИС = ВидПродукцииИСПоШтрихкодуНоменклатуры(Штрихкод);
	КонецЕсли;
	
	Если ВидПродукцииИС = Неопределено Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПустаяСсылка()
		И ПараметрыСканирования.ТолькоМаркируемаяПродукция Тогда
		
		ПредставлениеШтрихкода = Новый ФорматированнаяСтрока(
			ШтрихкодированиеИСКлиентСервер.ПредставлениеШтрихкода(Штрихкод),
			Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылкиГосИС,,"СкопироватьШтриховойКодВБуферОбмена");
		
		ШаблонОшибки = НСтр("ru = 'Штрихкод %1 не соответствует допустимому виду продукции.
		                          |Допустимые виды продукции: %2'");
		
		РезультатОбработки          = ИнициализироватьРезультатОбработкиШтрихкода();
		ПредставлениеВидовПродукции = ПредставлениеВидовПродукции(ПараметрыСканирования.ДопустимыеВидыПродукции);
		РезультатОбработки.ТекстОшибки = СтрШаблон(ШаблонОшибки, ПредставлениеШтрихкода, ПредставлениеВидовПродукции);
		РезультатОбработки.ЕстьОшибки  = Истина;
		РезультатОбработки.ОбщаяОшибка = Истина;
		
		Возврат РезультатОбработки;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПродукцииИС) Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ДопустимВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
	Если Не ДопустимВидПродукции Тогда
		
		РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
		РезультатОбработки.Штрихкод    = Штрихкод;
		РезультатОбработки.ЕстьОшибки  = Истина;
		РезультатОбработки.ОбщаяОшибка = Истина;
		РезультатОбработки.ТекстОшибки = ТекстОшибкиНеПоддерживаетсяВидПродукции(
			Штрихкод,
			ПараметрыСканирования.ДопустимыеВидыПродукции,
			ВидПродукцииИС);
		
		РезультатОбработки.ОшибкаДопустимостиВидовПродукции = Истина;
		РезультатОбработки.ВидыПродукции.Добавить(ВидПродукцииИС);
		
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода();
		ДанныеШтрихкода.Штрихкод   = Штрихкод;
		ДанныеШтрихкода.Количество = 1;
		ДанныеШтрихкода.ВидыПродукции.Добавить(ВидПродукцииИС);
		ДанныеШтрихкода.ТекстОшибки = СтрШаблон(НСтр("ru='Вид продукции: %1'"), ВидПродукцииИС);
		
		Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
		Если Идентификатор = Неопределено Тогда
			Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, Идентификатор);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет проверку кода маркировки на уже обработанный, путем поиска в кэше обработанных кодов маркировки.
// 
// Параметры:
//  Штрихкод - Строка- Код маркировки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ПроверкаШтрихкодаНаУжеДобавленный(Штрихкод, ПараметрыСканирования)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;

	ДанныеШтрихкода = ОбработанныеКодыМаркировки.Получить(Штрихкод);
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеШтрихкода.ТекстОшибки             = ТекстОшибкиУжеДобавленаВДокумент();
	РезультатОбработки                      = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, ПараметрыСканирования.ИдентификаторФормы);
	РезультатОбработки.ЕстьОшибки           = Истина;
	РезультатОбработки.ОбщаяОшибка          = Истина;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращает текст ошибки, что вид продукции не поддерживается.
//
// Параметры:
//  Штрихкод - Строка - Значение обрабатываемого штрихкода.
//  ПоддерживаемыеВидыПродукции - Массив - Список допустимых видов продукции.
//  ВидПродукцииШтрихкода - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции штрихкода.
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиНеПоддерживаетсяВидПродукции(Штрихкод, ПоддерживаемыеВидыПродукции, ВидПродукцииШтрихкода)
	
	ПредставлениеВидаПродукции = Неопределено;
	Если ВидПродукцииШтрихкода = Перечисления.ВидыПродукцииИС.Обувная Тогда
		ПредставлениеВидаПродукции = НСтр("ru = 'обувной продукции'");
	ИначеЕсли ВидПродукцииШтрихкода = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		ПредставлениеВидаПродукции = НСтр("ru = 'алкогольной продукции'");
	ИначеЕсли ВидПродукцииШтрихкода = Перечисления.ВидыПродукцииИС.Табачная Тогда
		ПредставлениеВидаПродукции = НСтр("ru = 'табачной продукции'");
	Иначе
		ПредставлениеВидаПродукции = НСтр("ru = '<нет данных>'");
	КонецЕсли;
	
	Если ПоддерживаемыеВидыПродукции.Количество() = 0 Тогда
		ПоддерживаемыеВидыПродукцииСтрокой = "Не определены";
	Иначе
		ПоддерживаемыеВидыПродукцииСтрокой = СтрСоединить(ПоддерживаемыеВидыПродукции, " ,");
	КонецЕсли;
	
	ПредставлениеШтрихкода             = ШтрихкодированиеИСКлиентСервер.ПредставлениеШтрихкода(Штрихкод);
	Фрагмент1 = НСтр("ru = 'Считанный код'");
	Фрагмент2 = Новый ФорматированнаяСтрока(
		ПредставлениеШтрихкода, Новый Шрифт(,,,,Истина),
		ЦветаСтиля.ЦветГиперссылкиГосИС,,
		"СкопироватьШтриховойКодВБуферОбмена");
	Фрагмент3 = СтрШаблон(НСтр("ru='принадлежит %1.'"), НРег(ПредставлениеВидаПродукции));
	Фрагмент4 = СтрШаблон(НСтр("ru='Ожидаемые виды продукции: %1.'"), ПоддерживаемыеВидыПродукцииСтрокой);
	
	ТекстОшибки = Новый ФорматированнаяСтрока(Фрагмент1, " ", Фрагмент2, " ", Фрагмент3, Символы.ПС, Фрагмент4);
	
	Возврат ТекстОшибки;
	
КонецФункции

// Возвращает строковое представление массива видов продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция элементов справочника Штрихкоды упаковок.
// Возвращаемое значение:
//  Строка - Представление коллекции элементов.
Функция ПредставлениеВидовПродукции(ВидыПродукции)
	
	Представление = "";
	Разделитель   = "";
	
	Для Каждого Элемент Из ВидыПродукции Цикл
		
		Представление = Представление + Разделитель + Элемент;
		Разделитель = ", ";
		
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#Область ФормированиеИОбработкаРезультатаДобавления

// Формирует результат обработки штрихкодов для кодов маркировки, данные которых не удалось сформировать в связи с их
// отсутствием.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(Форма, ДанныеПоШтрихкодам, ШтрихкодИКоличество, ПараметрыСканирования)

	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ИсходныеДанные = ШтрихкодИКоличество;
	ДанныеШтрихкода = ДанныеПоШтрихкодам.НеобработанныеШтрихкоды.Получить(ШтрихкодИКоличество.Штрихкод);
	
	Если ДанныеШтрихкода = Неопределено Тогда
		
		РезультатОбработки.ТребуетсяОбработкаШтрихкода = Истина;
		
	ИначеЕсли ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки Тогда
		
		ДанныеШтрихкода.ОбработатьБезМаркировки = Истина;
		ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры = Истина;
		РезультатОбработки = РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ДанныеШтрихкода.МаркируемаяПродукция = Истина Тогда
		
		РезультатОбработки.ОткрытьФормуВводаКодаМаркировки = Истина;
		РезультатОбработки.ВидыПродукции = ДанныеШтрихкода.ВидыПродукции;
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыВводаКодаМаркировки();
		ПараметрыОткрытияФормы.ВидПродукции = ДанныеШтрихкода.ВидыПродукции[0];
		ПараметрыОткрытияФормы.МаркируемаяПродукция   = Истина;
		ПараметрыОткрытияФормы.ПараметрыСканирования  = ПараметрыСканирования;
		ПараметрыОткрытияФормы.Номенклатура           = ДанныеШтрихкода.Номенклатура;
		ПараметрыОткрытияФормы.Характеристика         = ДанныеШтрихкода.Характеристика;
		ПараметрыОткрытияФормы.ДанныеШтрихкода        = ШтрихкодИКоличество;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
			ПараметрыОткрытияФормы.Документ = Форма.Объект.Ссылка;
		КонецЕсли;
		
		ДанныеКэша = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ДанныеКэша.ДанныеДляУточненияСведенийПользователя.Операция = "ОткрытьФормуВводаКодаМаркировки";
		ДанныеКэша.ДанныеДляУточненияСведенийПользователя.Данные   = ПараметрыОткрытияФормы;
		
		РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, Форма.УникальныйИдентификатор);
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		
		ДанныеДляСопоставленияНоменклатуры = Новый Структура;
		ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные", ШтрихкодИКоличество);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", Новый Массив);
		ДанныеДляСопоставленияНоменклатуры.ШтрихкодыКСопоставлению.Добавить(ШтрихкодИКоличество);
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "СопоставлениеНоменклатуры";
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные   = ДанныеДляСопоставленияНоменклатуры;
		
		РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
		РезультатОбработки.ШтрихкодыПродукцииДляСопоставления.Добавить(ШтрихкодИКоличество);
		
	Иначе
		
		РезультатОбработки.ТребуетсяОбработкаШтрихкода = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для кодов маркировки, в данных которых выявлены ошибки.
//
// Параметры:
//  ДанныеШтрихкодов - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  УникальныйИдентификатор - УникальныйИдентификатор - идентификатор, по которому помещается дерево упаковок во временное
//                                                      хранилище.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиШтрихкодаПриОшибках(ДанныеШтрихкодов, ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор)
	
	Если ДанныеШтрихкодов.ЕстьОшибки Тогда
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
		РезультатДобавления.ТекстОшибки = ДанныеШтрихкодов.ТекстОшибки;
		РезультатДобавления.ЕстьОшибки  = ДанныеШтрихкодов.ЕстьОшибки;
		РезультатДобавления.ОбщаяОшибка = Истина;
		
		Возврат РезультатДобавления;
	КонецЕсли;
	
	//Условие для дерева.
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		РезультатДобавления.Штрихкод                  = ДанныеШтрихкода.Штрихкод;
		РезультатДобавления.ТипШтрихкода              = ДанныеШтрихкода.ТипШтрихкода;
		РезультатДобавления.АдресДереваУпаковок       = ПоместитьВоВременноеХранилище(ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок, УникальныйИдентификатор);
		РезультатДобавления.ЕстьОшибкиВДеревеУпаковок = ДанныеШтрихкодов.ЕстьОшибкиВДеревеУпаковок;
		
		Если Не ВидыПродукцииПоддерживаются(ДанныеШтрихкодов.ВидыПродукции, ПараметрыСканирования) Тогда
			РезультатДобавления.ОбщаяОшибка = Истина;
		КонецЕсли;
		
	Иначе
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") И ЕстьАлкогольнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
			РезультатДобавления = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаМаркируемойПродукцииПриОшибках(ДанныеШтрихкода);
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ЕстьТабачнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено);
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ЕстьОбувнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			РезультатДобавления = МодульШтрихкодированиеИСМПСлужебный.РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования);
		Иначе
			РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
			РезультатДобавления.ТекстОшибки = ДанныеШтрихкода.ТекстОшибки;
			РезультатДобавления.ЕстьОшибки  = Истина;
			РезультатДобавления.ОбщаяОшибка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

// Формирует результат обработки для уточнения номенклатуры у пользователя, в случае когда 1 штрихкод сопоставлен
//   2 номенклатурным позициям в ИБ.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма объекта.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеНоменклатуры(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	КодМаркировки   = ДанныеПоШтрихкодам.ВсеШтрихкоды[0];
	ДанныеШтрихкода = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды[КодМаркировки];
	
	РезультатОбработкиШтрихкода = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных = Истина;
	РезультатОбработкиШтрихкода.АдресДанныхШтрихкода = 
		ПоместитьВоВременноеХранилище(ДанныеШтрихкода, ПараметрыСканирования.ИдентификаторФормы);
	
	ПараметрыВыбора = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	
	Номенклатура = ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.ВыгрузитьКолонку("Номенклатура");
	Если Номенклатура.Количество() = 1 Тогда
		Номенклатура = Номенклатура[0];
	КонецЕсли;
	
	Характеристика = ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.ВыгрузитьКолонку("Характеристика");
	Если Характеристика.Количество() = 1 Тогда
		Характеристика = Характеристика[0];
	КонецЕсли;
	
	ПараметрыВыбора.Номенклатура           = Номенклатура;
	ПараметрыВыбора.Характеристика         = Характеристика;
	ПараметрыВыбора.КодМаркировки          = КодМаркировки;
	ПараметрыВыбора.ШтрихкодEAN            = ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN[0].ШтрихкодEAN;
	ПараметрыВыбора.ПараметрыУказанияСерий = ОбщегоНазначения.СкопироватьРекурсивно(
		ПараметрыСканирования.ПараметрыУказанияСерий, Ложь);
	ПараметрыВыбора.Склад                  = ПараметрыСканирования.Склад;
	ПараметрыВыбора.ПараметрыСканирования  = ПараметрыСканирования;
	РезультатОбработкиШтрихкода.ПараметрыУточненияДанных = ПараметрыВыбора;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

#КонецОбласти

#Область ЗапросыИТекстыЗапросов

// Возвращает  запрос получения состава упаковок в иерархии.
//
// Параметры:
// Возвращаемое значение:
//  МассивУпаковок - СправочникСсылка.ШтрихкодыУпаковокТоваров.
Функция ТекстЗапросаСоставаУпаковокВИерархии()
	
	ТекстЗапросаИсходныеДанные = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка                            КАК ШтрихкодУпаковки,
	|	ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка) КАК ШтрихкодРодительскойУпаковки,
	|	""""                                                       КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ 
	|	ШтрихкодыУпаковокТоваров.Ссылка В (&МассивУпаковок)
	|;
	|";
	
	ТекстЗапросаСоставаУпаковок = ТекстЗапросаИсходныеДанные + ТекстЗапросаВложенныхШтрихкодов(Неопределено);
	
	Возврат ТекстЗапросаСоставаУпаковок;
	
КонецФункции

// Возвращает текст запроса для формирования структуры "Вложенные штрихкоды" на основании исходных данных.
//
// Параметры:
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы, где сформированы исходные данные.
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки                  КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодУпаковки                     КАК УпаковкаУровень0,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.ИдентификаторСтроки
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|ИЗ
	|	ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ИЗ
	|	ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодРодительскойУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень2
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень1 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень2 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ИсходныеДанные.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ИсходныеДанные.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ИсходныеДанные.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ИсходныеДанные.УпаковкаУровень3             КАК УпаковкаУровень3,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень3  КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень3 КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень3
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень3
	|ГДЕ
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень0 ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура   КАК Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковокДляГриппировки
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеДляГриппировки.Номенклатура,
	|	ДанныеДляГриппировки.Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ДанныеШтрихкодовУпаковокДляГриппировки КАК ДанныеДляГриппировки
	|ГДЕ ДанныеДляГриппировки.Номенклатура <> &НоменклатураПустаяСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляГриппировки.Номенклатура,
	|	ДанныеДляГриппировки.Характеристика
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|%ТекстЗапросаСвойстваМаркируемойПродукции%
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0                   КАК УпаковкаУровень0,
	|	ДанныеУпаковок.ИдентификаторСтроки                КАК УпаковкаУровень0ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипШтрихкода      КАК УпаковкаУровень0ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипУпаковки       КАК УпаковкаУровень0ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень0.ЗначениеШтрихкода КАК УпаковкаУровень0Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура      КАК УпаковкаУровень0Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика    КАК УпаковкаУровень0Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень0.Серия             КАК УпаковкаУровень0Серия,
	|	ДанныеУпаковок.УпаковкаУровень0.ХешСумма          КАК УпаковкаУровень0ХешСумма,
	|	СвойстваПродукцииУровень0.ВидПродукции            КАК УпаковкаУровень0ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень1                   КАК УпаковкаУровень1,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень1        КАК УпаковкаУровень1ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипШтрихкода      КАК УпаковкаУровень1ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипУпаковки       КАК УпаковкаУровень1ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень1.ЗначениеШтрихкода КАК УпаковкаУровень1Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура      КАК УпаковкаУровень1Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика    КАК УпаковкаУровень1Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень1.Серия             КАК УпаковкаУровень1Серия,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСумма          КАК УпаковкаУровень1ХешСумма,
	|	СвойстваПродукцииУровень1.ВидПродукции            КАК УпаковкаУровень1ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень2                   КАК УпаковкаУровень2,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень2        КАК УпаковкаУровень2ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипШтрихкода      КАК УпаковкаУровень2ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипУпаковки       КАК УпаковкаУровень2ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень2.ЗначениеШтрихкода КАК УпаковкаУровень2Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура      КАК УпаковкаУровень2Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика    КАК УпаковкаУровень2Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень2.Серия             КАК УпаковкаУровень2Серия,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСумма          КАК УпаковкаУровень2ХешСумма,
	|	СвойстваПродукцииУровень2.ВидПродукции            КАК УпаковкаУровень2ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень3                   КАК УпаковкаУровень3,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень3        КАК УпаковкаУровень3ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипШтрихкода      КАК УпаковкаУровень3ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипУпаковки       КАК УпаковкаУровень3ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень3.ЗначениеШтрихкода КАК УпаковкаУровень3Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура      КАК УпаковкаУровень3Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика    КАК УпаковкаУровень3Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень3.Серия             КАК УпаковкаУровень3Серия,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСумма          КАК УпаковкаУровень3ХешСумма,
	|	СвойстваПродукцииУровень3.ВидПродукции            КАК УпаковкаУровень3ВидПродукции
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень0
	|	ПО ДанныеУпаковок.УпаковкаУровень0.Номенклатура = СвойстваПродукцииУровень0.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень1
	|	ПО ДанныеУпаковок.УпаковкаУровень1.Номенклатура = СвойстваПродукцииУровень1.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень2
	|	ПО ДанныеУпаковок.УпаковкаУровень2.Номенклатура = СвойстваПродукцииУровень2.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень3
	|	ПО ДанныеУпаковок.УпаковкаУровень3.Номенклатура = СвойстваПродукцииУровень3.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеШтрихкодовУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СвойстваМаркируемойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУпаковок
	|";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"%ТекстЗапросаСвойстваМаркируемойПродукции%",
		ОпределитьТекстЗапросаСвойстваМаркируемойПродукции());
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПоОтсканированномуШК

// Собирает данные по маркируемой продукции, которые хранятся в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыМаркируемойПродукции = ДанныеПоШтрихкодам.МаркируемаяПродукция;
	Если ШтрихкодыМаркируемойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзвестнойПродукции = ДанныеИзвестнойМаркируемойПродукцииПоШтрихкодам(
		ШтрихкодыМаркируемойПродукции, ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции, ДанныеПоШтрихкодам.ДанныеКодовМаркировок);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ДанныеИзвестнойПродукции);
	
КонецПроцедуры

// Формирует данные по маркируемой продукции, информации о которой нет в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыМаркируемойПродукции = ДанныеПоШтрихкодам.МаркируемаяПродукция;
	Если ШтрихкодыМаркируемойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработанныеШтрихкоды = Новый Массив;
	ШтрихкодыКОбработке   = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		ОбработанныеШтрихкоды.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ШтрихкодыКОбработке = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ДанныеПоШтрихкодам.МаркируемаяПродукция, ОбработанныеШтрихкоды);
	
	ДанныеНеизвестнойПродукции = ДанныеНеизвестнойМаркируемойПродукцииПоШтрихкодам(
		ШтрихкодыКОбработке, ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииДаннымиПула(ДанныеНеизвестнойПродукции, ДанныеПоШтрихкодам.ДанныеКодовМаркировок);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ДанныеНеизвестнойПродукции);
	
	Если Не ПустаяСтрока(ДанныеПоШтрихкодам.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

ПРоцедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииДаннымиПула(ДанныеНеизвестнойПродукции, ДанныеКодовМаркировок)
	
	Для Каждого КлючЗначение Из ДанныеНеизвестнойПродукции Цикл
		
		КодМаркировки        = КлючЗначение.Ключ;
		ДанныеКодаМаркировки = КлючЗначение.Значение;
		
		НайденнаяСтрока = ДанныеКодовМаркировок.Найти(КодМаркировки, "КодМаркировки");
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКодаМаркировки.Номенклатура)
			И НайденнаяСтрока.ЭтоКодВводаОстатков Тогда
			
			ДанныеКодаМаркировки.Номенклатура   = НайденнаяСтрока.Номенклатура;
			ДанныеКодаМаркировки.Характеристика = НайденнаяСтрока.Характеристика;
			ДанныеКодаМаркировки.Серия          = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
			
			ДанныеКодаМаркировки.ШтрихкодУпаковки = ШтрихкодированиеИС.СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеКодаМаркировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет попытку сформировать данные по неизвестному штрихкоду. По некоторым видам продукции выполняет обращение в
// сервис Государственной учетной системы для получения данных.
//
// Параметры:
//  ШтрихкодыКОбработке - Массив - коллекция неизвестных штрихкодов.
//  СоответствиеШтрихкодаВидуПродукции - Соответствие - Ключ - штрихкод, значение - вид продукции ИС.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ТекстОшибки - Строка - Описание ошибки.
// Возвращаемое значение:
//  Соответствие - Ключ - значение кода маркировки, значение - сформированные данные кода маркировки.
Функция ДанныеНеизвестнойМаркируемойПродукцииПоШтрихкодам(ШтрихкодыКОбработке, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	СоответствиеШтрихкодаВидуПродукции          = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции;
	ДанныеНеизвестнойПродукции                  = Новый Соответствие;
	НеобработанныеШтрихкодыАлкогольнойПродукции = Новый Массив;
	НеобработанныеШтрихкодыТабачнойПродукции    = Новый Массив;
	НеобработанныеШтрихкодыОбувнойПродукции     = Новый Массив;

	Для Каждого Штрихкод Из ШтрихкодыКОбработке Цикл
		
		Если СоответствиеШтрихкодаВидуПродукции[Штрихкод] = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			НеобработанныеШтрихкодыАлкогольнойПродукции.Добавить(Штрихкод);
		ИначеЕсли (СоответствиеШтрихкодаВидуПродукции[Штрихкод] = Перечисления.ВидыПродукцииИС.Табачная) Тогда 
			НеобработанныеШтрихкодыТабачнойПродукции.Добавить(Штрихкод);
		ИначеЕсли СоответствиеШтрихкодаВидуПродукции[Штрихкод] = Перечисления.ВидыПродукцииИС.Обувная Тогда
			НеобработанныеШтрихкодыОбувнойПродукции.Добавить(Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И ПрисутствуетАлкогольнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		ДанныеНеизвестнойАлкогольнойПродукции = МодульШтрихкодированиеЕГАИС.ДанныеНеизвестнойМаркируемойПродукции(
			НеобработанныеШтрихкодыАлкогольнойПродукции, ПараметрыСканирования);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойАлкогольнойПродукции);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			ДанныеНеизвестнойТабачнойПродукции = МодульШтрихкодированиеМОТП.ДанныеНеизвестнойМаркируемойПродукции(
				НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки);
		
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойТабачнойПродукции);
			
		КонецЕсли;
		
		Если ПрисутствуетОбувнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			ДанныеНеизвестнойОбувнойПродукции = МодульШтрихкодированиеИСМПСлужебный.ДанныеНеизвестнойМаркируемойПродукции(
				НеобработанныеШтрихкодыОбувнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойОбувнойПродукции);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеНеизвестнойПродукции;
	
КонецФункции

// Получает данные по штрихкодам(кодам маркировок), информация о которых есть в ИБ.
//
// Параметры:
//  ШтрихкодыКОбработке - Массив -  коллекция известных штрихкодов.
//  СоответствиеШтрихкодаВидуПродукции - Соответствие - Ключ - штрихкод, значение - вид продукции ИС.
// Возвращаемое значение:
//  Соответствие - значение кода маркировки, значение - сформированные данные кода маркировки.
Функция ДанныеИзвестнойМаркируемойПродукцииПоШтрихкодам(ШтрихкодыКОбработке, СоответствиеШтрихкодаВидуПродукции, ДанныеКодовМаркировок)
	
	ДанныеМаркируемойПродукции = Новый Соответствие;
	
	ТипыУпаковок = Новый Массив;
	ТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	ТаблицаШтрихкодовУпаковок = ДанныеШтрихкодовУпаковок(ШтрихкодыКОбработке, ТипыУпаковок);
	
	ОбработанныеШтрихкоды = Новый Массив;
	Для Каждого Строка Из ТаблицаШтрихкодовУпаковок Цикл
		
		СтрокаДанных = ДанныеКодовМаркировок.Найти(Строка.Штрихкод, "КодМаркировки");
		СтрокаДанных.Номенклатура   = Строка.Номенклатура;
		СтрокаДанных.Характеристика = Строка.Характеристика;
		СтрокаДанных.Серия          = Строка.Серия;
		
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода();
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, Строка);
		ДанныеШтрихкода.Штрихкод = Строка.Штрихкод;
		
		Если ЗначениеЗаполнено(Строка.ВидПродукции) Тогда
			ВидПродукции = Строка.ВидПродукции;
		Иначе
			ВидПродукции = СоответствиеШтрихкодаВидуПродукции.Получить(Строка.Штрихкод);
		КонецЕсли;
		
		ДанныеШтрихкода.ВидыПродукции.Добавить(ВидПродукции);
		ДанныеМаркируемойПродукции.Вставить(Строка.Штрихкод, ДанныеШтрихкода);
		ОбработанныеШтрихкоды.Добавить(Строка.Штрихкод);
	КонецЦикла;
	
	Возврат ДанныеМаркируемойПродукции;
	
КонецФункции

// Формирует данные штрихкодов упаковок.
//
// Параметры:
//  СписокЗначенийШтрихкодов - Массив Из Строка - Массив значений штрихкодов
//  ТипыУпаковок - Массив ПеречислениеСсылка.ТипыУпаковок - Коллекция типов упаковок, по которым будет установлено 
//                                                          условие для формирования запроса.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Данные штрихкодов упаковок.
//   * Штрихкод - Строка - Значение штрихкода.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   * ДатаУпаковки - Дата - Дата формирования упаковки.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Упаковка - ОпределяемыйТип.Упаковка - Единица измерения.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
//   * МаркируемаяПродукция - Булево - Истина, если продкция подлежит маркированию.
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции номенклатуры.
Функция ДанныеШтрихкодовУпаковок(СписокЗначенийШтрихкодов, ТипыУпаковок = Неопределено)
	
	ШтрихкодыУпаковок = ШтрихкодыУпаковок(СписокЗначенийШтрихкодов).ВыгрузитьКолонку("Ссылка");
	СписокЗапросов = Новый СписокЗначений;

	ТекстЗапросаДанныеШтрихкодовУпаковок =
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Ссылка            КАК Ссылка,
		|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки,
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Штрихкод,
		|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
		|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
		|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковокТоваров.Упаковка          КАК Упаковка,
		|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия
		|ПОМЕСТИТЬ ШтрихкодыУпаковокТоваров
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Ссылка В(&ШтрихкодыУпаковок)
		|	И &УсловиеПоТипамУпаковок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.ДатаУпаковки) КАК ДатаУпаковки,
		|	ШтрихкодыУпаковокТоваров.Штрихкод               КАК Штрихкод
		|ПОМЕСТИТЬ МаксимальныеДатыУпаковки
		|ИЗ
		|	ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Ссылка В(&ШтрихкодыУпаковок)
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтрихкодыУпаковокТоваров.Штрихкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Штрихкод          КАК Штрихкод,
		|	ШтрихкодыУпаковокТоваров.Ссылка            КАК ШтрихкодУпаковки,
		|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки,
		|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
		|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
		|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковокТоваров.Упаковка          КАК Упаковка,
		|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДатыУпаковки КАК МаксимальныеДатыУпаковки
		|		ПО ШтрихкодыУпаковокТоваров.Штрихкод = МаксимальныеДатыУпаковки.Штрихкод
		|			И ШтрихкодыУпаковокТоваров.ДатаУпаковки = МаксимальныеДатыУпаковки.ДатаУпаковки
		|";

	Если ЗначениеЗаполнено(ТипыУпаковок) Тогда
		ТекстЗапросаДанныеШтрихкодовУпаковок = СтрЗаменить(
			ТекстЗапросаДанныеШтрихкодовУпаковок,
			"&УсловиеПоТипамУпаковок",
			"ШтрихкодыУпаковокТоваров.ТипУпаковки В(&ТипыУпаковок)");
	КонецЕсли;
	
	СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);
	
	СписокЗапросов.Добавить(ОпределитьТекстЗапросаСвойстваМаркируемойПродукции());

	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Штрихкод                 КАК Штрихкод,
		|	ДанныеШтрихкодовУпаковок.ШтрихкодУпаковки         КАК ШтрихкодУпаковки,
		|	ДанныеШтрихкодовУпаковок.ДатаУпаковки             КАК ДатаУпаковки,
		|	ДанныеШтрихкодовУпаковок.ТипУпаковки              КАК ТипУпаковки,
		|	ДанныеШтрихкодовУпаковок.ТипШтрихкода             КАК ТипШтрихкода,
		|	ДанныеШтрихкодовУпаковок.Номенклатура             КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика           КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Упаковка                 КАК Упаковка,
		|	ДанныеШтрихкодовУпаковок.Серия                    КАК Серия,
		|	СвойстваМаркируемойПродукции.МаркируемаяПродукция КАК МаркируемаяПродукция,
		|	СвойстваМаркируемойПродукции.ВидПродукции         КАК ВидПродукции
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура",
		"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ТипыУпаковок) Тогда
		Запрос.УстановитьПараметр("ТипыУпаковок", ТипыУпаковок);
	Иначе
		Запрос.УстановитьПараметр("УсловиеПоТипамУпаковок", Истина);
	КонецЕсли;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Результат = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);
	
	Возврат Результат["ШтрихкодыУпаковок"];
	
КонецФункции

// Формирует коллекцию обработанных штрихкодов по структуре "Вложенные штрихкоды". Коллекция формируется по строкам дерева
// упаковок верхнего уровня.
//
// Параметры:
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
// Возвращаемое значение:
//  Соответствие - Описание
Функция СформироватьОбработанныеШтрихкодыПоВложенным(ВложенныеШтрихкоды)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	
	ОбработанныеШтрихкоды = Новый Соответствие;
	
	Для Каждого СтрокаВерхнегоУровня Из ДеревоУпаковок.Строки Цикл
		
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода();
		ДанныеШтрихкода.Штрихкод         = СтрокаВерхнегоУровня.Штрихкод;
		ДанныеШтрихкода.ШтрихкодУпаковки = СтрокаВерхнегоУровня.ШтрихкодУпаковки;
		ДанныеШтрихкода.ТипШтрихкода     = СтрокаВерхнегоУровня.ТипШтрихкода;
		ДанныеШтрихкода.ТипУпаковки      = СтрокаВерхнегоУровня.ТипУпаковки;
		ДанныеШтрихкода.Номенклатура     = СтрокаВерхнегоУровня.Номенклатура;
		ДанныеШтрихкода.Характеристика   = СтрокаВерхнегоУровня.Характеристика;
		ДанныеШтрихкода.Серия            = СтрокаВерхнегоУровня.Серия;
		ДанныеШтрихкода.ВидыПродукции    = ВложенныеШтрихкоды.ВидыПродукции;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("УпаковкаВерхнегоУровня", СтрокаВерхнегоУровня);
		НайденныеСтроки = МаркированныеТовары.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаМаркированныеТовары Из НайденныеСтроки Цикл
			
			ДанныеМаркированногоТовара = Новый Структура;
			Для Каждого Колонка Из МаркированныеТовары.Колонки Цикл
				Если ТипЗнч(СтрокаМаркированныеТовары[Колонка.Имя]) <> Тип("СтрокаДереваЗначений") Тогда
					ДанныеМаркированногоТовара.Вставить(Колонка.Имя, СтрокаМаркированныеТовары[Колонка.Имя]);
				КонецЕсли;
			КонецЦикла;
			
			ДанныеШтрихкода.МаркированныеТовары.Добавить(ДанныеМаркированногоТовара);
			
		КонецЦикла;
		
		ОбработанныеШтрихкоды.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
		
	КонецЦикла;
	
	Возврат ОбработанныеШтрихкоды;
	
КонецФункции

// Заполняет строку дерева упаковок по выборке запроса с учетом уровня.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка результата запроса.
//  Уровень - Число - Уровень строки дерева.
Процедура ЗаполнитьСтрокуДереваУпаковокПоВыборке(СтрокаДерева, Выборка, Уровень)
	
	СтрокаДерева.ШтрихкодУпаковки    = Выборка["УпаковкаУровень" + Уровень];
	СтрокаДерева.ИдентификаторСтроки = Выборка["УпаковкаУровень" + Уровень + "ИдентификаторСтроки"];
	СтрокаДерева.ТипУпаковки         = Выборка["УпаковкаУровень" + Уровень + "ТипУпаковки"];
	СтрокаДерева.ТипШтрихкода        = Выборка["УпаковкаУровень" + Уровень + "ТипШтрихкода"];
	СтрокаДерева.Штрихкод            = Выборка["УпаковкаУровень" + Уровень + "Штрихкод"];
	СтрокаДерева.Номенклатура        = Выборка["УпаковкаУровень" + Уровень + "Номенклатура"];
	СтрокаДерева.Характеристика      = Выборка["УпаковкаУровень" + Уровень + "Характеристика"];
	СтрокаДерева.ХешСумма            = Выборка["УпаковкаУровень" + Уровень + "ХешСумма"];
	СтрокаДерева.Серия               = Выборка["УпаковкаУровень" + Уровень + "Серия"];
	СтрокаДерева.ВидПродукции        = Выборка["УпаковкаУровень" + Уровень + "ВидПродукции"];
	
КонецПроцедуры

// Выполняет поиск по значениям штрихкодов в справочнике штрихкоды упаковок. Если элемент справочника найден - добавляет
// штрихкод в ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок и удаляет из ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Массив - Коллекция элементов справочника Штрихкоды упаковок.
Функция НайтиУпаковкиПоШтрихкодам(ДанныеПоШтрихкодам)
	
	ТипыУпаковокДляКоробок = ИнтеграцияИСКлиентСервер.ТипыУпаковокДляКоробок();
	ТаблицаШтрихкодовУпаковок = ДанныеШтрихкодовУпаковок(
		ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок,
		ТипыУпаковокДляКоробок);
	
	НайденныеУпаковки = ТаблицаШтрихкодовУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок   = ТаблицаШтрихкодовУпаковок.ВыгрузитьКолонку("Штрихкод");
	ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок,
		ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок);
	
	Возврат НайденныеУпаковки;
	
КонецФункции

// Дополняет структуру "Данные по штрихкодам" информацией по известным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеУпаковки = НайтиУпаковкиПоШтрихкодам(ДанныеПоШтрихкодам);
	
	Если НайденныеУпаковки.Количество() > 0 Тогда
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок(НайденныеУпаковки);
		ОбработанныеШтрихкоды = СформироватьОбработанныеШтрихкодыПоВложенным(ДанныеПоШтрихкодам.ВложенныеШтрихкоды);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ОбработанныеШтрихкоды);
		ВидыПродукцииДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ВидыПродукции;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ВидыПродукции, ВидыПродукцииДерева, Истина);
		
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировок, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок);
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет строки таблицы "ДанныеКодовМаркировок" данными строк дерева упаковок.
// 
// Параметры:
//  ДанныеКодовМаркировок - ТаблицаЗначений - (См. ИнициализацияТаблицыДанныеКодовМаркировок).
//  ДеревоУпаковок - ДеревоЗначний - Иерархния кодов маркировок.
Процедура ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(ДанныеКодовМаркировок, ДеревоУпаковок)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(ДанныеКодовМаркировок, СтрокаДерева);
		
		НайденнаяСтрока = ДанныеКодовМаркировок.Найти(СтрокаДерева.Штрихкод, "КодМаркировки");
		Если НайденнаяСтрока <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеКодовМаркировок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока.КодМаркировки = СтрокаДерева.Штрихкод;
		НоваяСтрока.EAN                 = EANИзКодаМаркировки(НоваяСтрока.КодМаркировки);
		НоваяСтрока.GTIN                = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(НоваяСтрока.EAN);
		НоваяСтрока.ЭтоКодВводаОстатков = ЭтоШтрихкодВводаОстатков(НоваяСтрока.EAN);
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда 
			НоваяСтрока.МаркируемаяПродукция = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет структуру "Данные по штрихкодам" информацией по неизвестным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ОбработатьШтрихкодыНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаОбувнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ОбработатьШтрихкодыНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует стоки дерева источника в строки дерева приемника.
//
// Параметры:
//  СтрокаДереваПриемник - КоллекцияСтрокДереваЗначений - Строки дерева приемника.
//  СтрокаДереваИсточник - КоллекцияСтрокДереваЗначений - Строки дерева источника.
//  СоответствиеСтарыхИНовыхСтрокДерева - Соответствие - Ключ - строка источника, значение - новая строка приемника.
Процедура СкопироватьСтрокиДерева(СтрокаДереваПриемник, СтрокаДереваИсточник, СоответствиеСтарыхИНовыхСтрокДерева)
	
	Для Каждого СтрокаИсточника Из СтрокаДереваИсточник.Строки Цикл
		
		НоваяСтрока = СтрокаДереваПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		СоответствиеСтарыхИНовыхСтрокДерева.Вставить(СтрокаИсточника, НоваяСтрока);
		СкопироватьСтрокиДерева(НоваяСтрока, СтрокаИсточника, СоответствиеСтарыхИНовыхСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыФункции

// Возвращает строку верхнего уровня для строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
//  КэшУпаковокВерхнегоУровня - Соответствие - ключ - Строка дерева, значение - элемент справочника Штрихкоды упаковок.
// Возвращаемое значение:
//  СтрокаДереваЗначений - строка верхнего уровня дерева.
Функция СтрокаДереваВерхнегоУровня(СтрокаДерева, КэшУпаковокВерхнегоУровня)
	
	УпаковкаВерхнегоУровня = КэшУпаковокВерхнегоУровня.Получить(СтрокаДерева);
	Если УпаковкаВерхнегоУровня <> Неопределено Тогда
		Возврат УпаковкаВерхнегоУровня;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева.Родитель, КэшУпаковокВерхнегоУровня);
		
		КэшУпаковокВерхнегоУровня.Вставить(СтрокаДерева, УпаковкаВерхнегоУровня);
		
		Возврат УпаковкаВерхнегоУровня;
		
	Иначе
		
		Возврат СтрокаДерева;
		
	КонецЕсли;
	
КонецФункции

// Возвращает шаблон ошибки уже добавлена в документ.
//
// Параметры:
// Возвращаемое значение:
//  Строка - Шаблон ошибки.
Функция ТекстОшибкиУжеДобавленаВДокумент()
	
	Возврат НСтр("ru='Уже добавлена в документ'");
	
КонецФункции

#КонецОбласти

#Область ПолучениеТекущихДанныхДокумента

// Формирует данные кодов маркировок на основании данных формы и помещает их во временное хранилище.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ПодготовитьДанныеДокумента(Форма, ПараметрыСканирования)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции)
		Или ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	Если ОбработанныеКодыМаркировки.Количество() = 0 Тогда
		
		ШтрихкодыУпаковок = ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
		КоллекцияВсехШтрихкодовДерева(ШтрихкодыУпаковок.ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);
		
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;
	
	СформироватьДанныеТабличнойЧастиТовары(Форма, ПараметрыСканирования);
	
КонецПроцедуры

// Заполняет коллекцию "МаркируемаяПродукцияДокумента" данными строк дерева.
//
// Параметры:
//  ДеревоУпаковок - Дерево значений - иерархия маркируемой продукции.
//  КэшМаркируемойПродукции - Соответствие - Ключ - Значение штрихкода, Значение - Данные штрихкода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура КоллекцияВсехШтрихкодовДерева(СтрокиДереваУпаковок, КэшМаркируемойПродукции, ПараметрыСканирования)
	
	Для Каждого СтрокаДерева Из СтрокиДереваУпаковок Цикл
		
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, СтрокаДерева);
		ДанныеШтрихкода.Штрихкод = СтрокаДерева.Штрихкод;
		
		КэшМаркируемойПродукции.Вставить(СтрокаДерева.Штрихкод, ДанныеШтрихкода);
		
		КоллекцияВсехШтрихкодовДерева(СтрокаДерева.Строки, КэшМаркируемойПродукции, ПараметрыСканирования);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует вложенные штрихкоды по данным табличной части Товары и табличной части элементами штрихкодов упаковок.
//
// Параметры:
//  ДанныеТовары - ТабличнаяЧасть - табличная часть с товарами.
//  ДанныеМаркируемаяПродукция - ТабличнаяЧасть - табличная часть с элементами штрихкодов упаковок.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	ИсточникДанных = Форма;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ИсточникДанных = Форма.Объект;
	КонецЕсли;
	ТабличнаяЧастьШтрихкоды = ИсточникДанных[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок];
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	
	ИспользоватьИдентификаторСтроки = Ложь;
	Для Каждого СтрокаТЧ Из ТабличнаяЧастьШтрихкоды Цикл
		МассивИменКолонокШтрихкодовУпаковки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки, ",", Истина);
		
		Для Каждого ИмяКолонки Из МассивИменКолонокШтрихкодовУпаковки Цикл
			ИмяКолонки = СокрЛП(ИмяКолонки);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ШтрихкодУпаковки") Тогда
				ИмяКолонкиШтрихкодРодительскойУпаковки = "ШтрихкодУпаковки";
			Иначе
				ИмяКолонкиШтрихкодРодительскойУпаковки = ИмяКолонки;
			КонецЕсли;
					
			НоваяСтрока = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока.ШтрихкодУпаковки             = СтрокаТЧ[ИмяКолонки];
			НоваяСтрока.ШтрихкодРодительскойУпаковки = СтрокаТЧ[ИмяКолонкиШтрихкодРодительскойУпаковки];
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ИдентификаторСтроки") Тогда
				ИспользоватьИдентификаторСтроки = Истина;
				ИдентификаторСтроки             = СтрокаТЧ.ИдентификаторСтроки;
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
		|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные");
	
	ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = ИспользоватьИдентификаторСтроки;
	ТекстЗапроса = ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы);
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВложенныеШтрихкоды");
	
	МенеджерВременнойТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	Запрос.УстановитьПараметр("ИсходныеДанные",           ТаблицаШтрихкодов);
	Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ШтрихкодыУпаковок = ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременнойТаблицы);
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Формирует вложенные штрихкоды по данным временной таблицы.
//
// Параметры:
//  ВыборкаПерваяИтерация - РезультатЗапроса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(ВыборкаПерваяИтерация, МенеджерВременныхТаблиц) 
	
	ВложенныеШтрихкоды  = ИнициализацияВложенныхШтрихкодов();
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УпаковкиВерхнегоУровня", Новый Соответствие);
	
	ПродолжатьПоиск    = Истина;
	НомерИтерации      = 1;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Если НомерИтерации = 1 Тогда
			
			Выборка = ВыборкаПерваяИтерация;
			
		Иначе
			
			ИмяВременнойТаблицы = "ВТВложенныеШтрихкодыИсходныеДанные";
			
			ТекстыЗапроса = Новый СписокЗначений;
			ТекстыЗапроса.Добавить(
				СтрШаблон(
					"ВЫБРАТЬ
					|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
					|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
					|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
					|ПОМЕСТИТЬ %1
					|ИЗ
					|	&ИсходныеДанные КАК ИсходныеДанные", ИмяВременнойТаблицы));
			
			ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
			ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
			ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
			ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы             = ИмяВременнойТаблицы;
			ТекстЗапроса = ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы);
			ТекстыЗапроса.Добавить(ТекстЗапроса,"ВложенныеШтрихкоды");
			
			Если НомерИтерации > 1 Тогда
				ТекстыЗапроса.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы));
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
			Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
			РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
			Выборка = РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать();
			
		КонецЕсли;
		
		ТаблицаШтрихкодов.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
						ЗаполнитьСтрокуДереваУпаковокПоВыборке(РодительскиеДанные, Выборка, ТекущийУровень);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					
					НоваяСтрока = ТаблицаШтрихкодов.Добавить();
					НоваяСтрока.ШтрихкодУпаковки     = Выборка.УпаковкаУровень3;
					НоваяСтрока.ИдентификаторСтроки  = Выборка.УпаковкаУровень3ИдентификаторСтроки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		НомерИтерации   = НомерИтерации + 1;
		ПродолжатьПоиск = ТаблицаШтрихкодов.Количество() > 0;
		
	КонецЦикла;
	
	КэшУпаковокВерхнегоУровня = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
		
		Если КлючЗначение.Ключ.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗначение.Значение);
			НоваяСтрока.СтрокаДерева = КлючЗначение.Значение;
			НоваяСтрока.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(КлючЗначение.Значение, КэшУпаковокВерхнегоУровня);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

#КонецОбласти

// Заполняет данные штрихкодов необработаными кодами маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеобработанныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыНеизвестныхУпаковок = ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок;
	
	НеобработанныеШтрихкоды = Новый Соответствие;
	Для Каждого Штрихкод Из ШтрихкодыНеизвестныхУпаковок Цикл
		
		Если ДанныеПоШтрихкодам.ОбработанныеШтрихкоды.Получить(Штрихкод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НеобработанныеШтрихкоды[Штрихкод] <> Неопределено Тогда
			НеобработанныеШтрихкоды[Штрихкод].Количество = НеобработанныеШтрихкоды[Штрихкод].Количество + 1;
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		ДанныеШтрихкода.Штрихкод   = Штрихкод;
		ДанныеШтрихкода.Количество = 1;
		
		СведенияПоШтрихкоду = ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.Найти(Штрихкод, "ШтрихкодEAN");
		Если СведенияПоШтрихкоду <> Неопределено Тогда
			ДанныеШтрихкода.Номенклатура   = СведенияПоШтрихкоду.Номенклатура;
			ДанныеШтрихкода.Характеристика = СведенияПоШтрихкоду.Характеристика;
		КонецЕсли;
		
		НеобработанныеШтрихкоды.Вставить(Штрихкод, ДанныеШтрихкода); 
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		ДанныеПоШтрихкодам.НеобработанныеШтрихкоды, НеобработанныеШтрихкоды, Истина);
	
КонецПроцедуры

// Определяет по контексту возможность работы с алкоголем.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка, ПеречислениеСсылка.ВидыПродукцииИС -
//  контекст, по которому будет определяться возможность работы с алкогольной продукцией.
// Возвращаемое значение:
//  Булево - Истина, если для контекста разрешена работа с алкогольной продукцией.
Функция ДопустимаАлкогольнаяПродукция(Контекст)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Алкогольная;
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Алкогольная);
	
КонецФункции

//Определяет по контексту возможность работы с табаком.
//
//Параметры:
//   Контекст - Структура, ПеречислениеСсылка.ВидыПродукцииИС -
//     контекст (параметры сканирования или вид продукции), по которому будет определяться возможность работы с табачной продукцией.
//Возвращаемое значение:
//   Булево - Истина, если для контекста разрешена работа с табачной продукцией.
//
Функция ДопустимаТабачнаяПродукция(Контекст)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Табачная;
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Табачная);
	
КонецФункции

// Возвращает структуру параметров, заполненных по умолчанию, которые необходимы для формирования текста запроса
// вложенных штрихкодов.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ИмяВременнойТаблицы - Строка - Имя временной таблица, где будут лежать исходные данные, необходимые для формирования
//                                    дерева упаковок и таблицы маркированных товаров(вложенные штрихкоды).
//   * ИспользоватьИдентификаторСтроки - Булево - если табличная часть товары и табличная часть с штрихкодами упаковок
//                                                связана через идентификатор строки.
//   * ДокументСсылка - Неопределено - Ссылка на документ.
Функция ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументСсылка",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ИспользоватьИдентификаторСтроки", Ложь);
	ВозвращаемоеЗначение.Вставить("ИмяВременнойТаблицы",             "ВТВложенныеШтрихкодыИсходныеДанные");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает все вложенные значения штрихкодов по массиву элементов справочника штрихкоды упаковок.
//
// Параметры:
//  АкцизныеМарки - Массив - коллекция элементов справочники Штрихкоды упаковок.
// Возвращаемое значение:
//  Массив - Значения штрихкодов.
Функция ЗначенияВложенныхШтрихкодовУпаковок(КоллекцияУпаковок)
	
	ВложенныеЗначенияШтрихкодов = Новый Массив;
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ДеревоУпаковок = ИнициализироватьДеревоУпаковок();
	
	Запрос       = Новый Запрос();
	Запрос.Текст = ТекстЗапросаСоставаУпаковокВИерархии();
	
	ПродолжатьПоиск    = Истина;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок", КоллекцияУпаковок);
		Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						
						ВложенныеЗначенияШтрихкодов.Добавить(Выборка["УпаковкаУровень" + ТекущийУровень + "Штрихкод"]);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
						
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					КоллекцияУпаковок.Добавить(Выборка["УпаковкаУровень"+ТекущийУровень]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	Возврат ВложенныеЗначенияШтрихкодов;
	
КонецФункции

// Выполняет проверку Данных штрихкода на то, что уже данные обработаны.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если данные штрихкода не требует повторной обработки.
Функция ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода, ПараметрыСканирования)
	
	ДанныеШтрихкодаСоответствуютФормату = Истина;
	
	ДанныеШтрихкодаЭталон = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
	Для Каждого КлючЗначение Из ДанныеШтрихкодаЭталон Цикл
		
		Если Не ДанныеШтрихкода.Свойство(КлючЗначение.Ключ) Тогда
			ДанныеШтрихкодаСоответствуютФормату = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеШтрихкодаСоответствуютФормату;
	
КонецФункции

// Выполняет обработку данных по штрихкодам.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма объекта.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ШтрихкодИКоличество - Структура - Описание:
//   * Штрихкод - Строка - Значение штрихкода.
//   * Количество - Число - количество штрихкодов с одним значением.
//  ЕстьОшибки - Булево - Истина, если есть ошибки в данных по штрихкодам.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьДанныеПоШтрихкодам(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования, ШтрихкодИКоличество, ЕстьОшибки)
	
	ДанныеШтрихкода    = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды[ШтрихкодИКоличество.Штрихкод];
	ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	
	РезультатОбработки = Неопределено;
	
	Если ЕстьОшибки Тогда
		
		РезультатОбработки = РезультатОбработкиШтрихкодаПриОшибках(
			ДанныеПоШтрихкодам, ДанныеШтрихкода, ПараметрыСканирования, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		
		РезультатОбработки = РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(
			ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления, ШтрихкодИКоличество, ПараметрыСканирования);
		
	ИначеЕсли ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков И (ДанныеШтрихкода = Неопределено Или Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)) Тогда
		
		РезультатОбработки = РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	ИначеЕсли ДанныеШтрихкода = Неопределено Тогда
		
		РезультатОбработки = РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(
			Форма, ДанныеПоШтрихкодам, ШтрихкодИКоличество, ПараметрыСканирования);
		
	ИначеЕсли ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
			И ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.Количество() > 0 Тогда
			
			РезультатОбработки = РезультатТребуетсяУточнениеНоменклатуры(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		Иначе
			
			РезультатОбработки = РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
	
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		РезультатОбработки = ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Вычисляет штрихкод формата EAN по коду маркировки.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//  Строка, Неопределено - Если штрихкод EAN удалось вычислить - возвращается штрихкод EAN, если нет - Неопределено.
Функция EANИзКодаМаркировки(КодМаркировки)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
	СоставКодаМаркировкиМОТП = МодульШтрихкодированиеМОТПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
	
	МодульШтрихкодированиеИСМПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
	СоставКодаМаркировкиИСМП = МодульШтрихкодированиеИСМПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
	
	Если СоставКодаМаркировкиМОТП <> Неопределено Тогда
		GTIN = СоставКодаМаркировкиМОТП.GTIN;
	ИначеЕсли СоставКодаМаркировкиИСМП <> Неопределено Тогда
		GTIN = СоставКодаМаркировкиИСМП.GTIN;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ШтрихкодEAN = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
	Если ЗначениеЗаполнено(ШтрихкодEAN) Тогда
		Возврат ШтрихкодEAN;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Приводит данные по штрихкодам в соответствие данным ранее указанными пользователем.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	
	Если Не ЗначениеЗаполнено(ДанныеСохраненногоВыбора.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбработанныеШтрихкодыКлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ДанныеШтрихкода = ОбработанныеШтрихкодыКлючЗначение.Значение;
		
		Если ДанныеСохраненногоВыбора.Номенклатура = ДанныеШтрихкода.Номенклатура
			И ДанныеСохраненногоВыбора.Характеристика = ДанныеШтрихкода.Характеристика Тогда
			
			ИзмененныеСвойства = Новый Массив;
			ЗаполнитьДанныеСохраненнымВыбором(ДанныеШтрихкода, ДанныеСохраненногоВыбора, ИзмененныеСвойства);
			ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства);
			
		ИначеЕсли ДанныеСохраненногоВыбора.ЭтоКодВводаОстатков Тогда
			
			GTINКодаМаркировки = ШтрихкодированиеИСКлиентСервер.GTINПоКодуМаркировки(ДанныеШтрихкода.Штрихкод);
			Если GTINКодаМаркировки = ДанныеСохраненногоВыбора.GTIN Тогда
				ИзмененныеСвойства  = Новый Массив;
				ЗаполнитьДанныеСохраненнымВыбором(ДанныеШтрихкода, ДанныеСохраненногоВыбора, ИзмененныеСвойства);
				ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(ДанныеШтрихкода, ИзмененныеСвойства);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			
			ИзмененныеСвойства = Новый Массив;
			ЗаполнитьДанныеСохраненнымВыбором(СтрокаТаблицы, ДанныеСохраненногоВыбора, ИзмененныеСвойства);
			ЗаполнитьДанныеСохраненнымВыбором(СтрокаТаблицы.СтрокаДерева, ДанныеСохраненногоВыбора, ИзмененныеСвойства);
			ИзмененныеСвойства = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИзмененныеСвойства);
			ОбновитьЭлементШтрихкодовУпаковок(СтрокаТаблицы.ШтрихкодУпаковки, ИзмененныеСвойства);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(ДанныеШтрихкода, ИзмененныеСвойства)
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства);
	Иначе
		ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

// Актуализирует данные элемента справочника штрихкоды упаковок.
// 
// Параметры:
//  ЭлементСсылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Элемент справочника.
//  СохраненныйВыбор - Структура - Данные, которые были сохранены пользователем для дальнейшего заполнения.
Процедура ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства)
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
		Или ИзмененныеСвойства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Метаданные.Справочники.ШтрихкодыУпаковокТоваров.Реквизиты;
	
	ТребуетсяЗаписьОбъекта = Ложь;
	Для Каждого Свойство Из ИзмененныеСвойства Цикл
		Если Реквизиты.Найти(Свойство) <> Неопределено Тогда
			ТребуетсяЗаписьОбъекта = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТребуетсяЗаписьОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектШтрихкодУпаковки = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
	ОбъектШтрихкодУпаковки.Заблокировать();
	ЗаполнитьЗначенияСвойств(ОбъектШтрихкодУпаковки, ДанныеШтрихкода,,"Владелец");
	ОбъектШтрихкодУпаковки.Записать();
	
КонецПроцедуры

// Заполняет данные коллекции или структуру данными сохраненного выбора пользователя в процессе обработки кодов маркировки.
// 
// Параметры:
//  Данные - Произвольный - Структура ДанныеШтрихкода, строка таблицы значений МаркированныеТовары
//      или строка Дерева упаковок.
//  СохраненныйВыбор - Структура - Данные, сохраненные ранее пользователем в процессе обработки кодов маркировки.
//  ИзмененныеСвойства - Массив из Строка - Имена свойств, значения которых послужили данными заполнения.
Процедура ЗаполнитьДанныеСохраненнымВыбором(Данные, СохраненныйВыбор, ИзмененныеСвойства)
	
	Если Не (Данные.Номенклатура = СохраненныйВыбор.Номенклатура
		И Данные.Характеристика = СохраненныйВыбор.Характеристика)
		И Не СохраненныйВыбор.ЭтоКодВводаОстатков Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СохраненныйВыбор Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, КлючЗначение.Ключ)
		 И Не ЗначениеЗаполнено(Данные[КлючЗначение.Ключ]) И ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Данные[КлючЗначение.Ключ] = КлючЗначение.Значение;
			ИзмененныеСвойства.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Помещает дерево упаковок во временное хранилище. Адрес дерева упаковок помещает в каждые данные обработанных штрихкодов.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ПараметрыСканирования).
Процедура ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, Идентификатор);
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ДанныеШтрихкода = КлючЗначение.Значение;

		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода.АдресДереваУпаковок = АдресДереваУпаковок;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные штрихкода по документу основанию.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ПараметрыСканирования).
Процедура ЗаполнитьДаныеПоШтрихкодамПоДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	СформироватьДанныеДокументаОснования(ПараметрыСканирования);
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ДанныеШтрихкода = КлючЗначение.Значение;
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",
			ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.Характеристика);
		
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки <> Неопределено
			И НайденныеСтроки.Количество() = 1
			И ЗначениеЗаполнено(НайденныеСтроки[0].Серия)
			И ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
			
			ДанныеШтрихкода.Серия = НайденныеСтроки[0].Серия;
			
			УстановитьПривилегированныйРежим(Истина);
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
				Блокировка.Заблокировать();
				
				ШтрихкодУпаковкиОбъект = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
				ШтрихкодУпаковкиОбъект.Серия = ДанныеШтрихкода.Серия;
				ШтрихкодУпаковкиОбъект.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
				
				ВызватьИсключение ПодробноеПредставлениеОшибки;
				
			КонецПопытки;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверят на дубли коды маркировки в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаДублиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки Или Не ПараметрыСканирования.ПроверятьДублиКодовМаркировки Тогда
		Возврат;
	КонецЕсли;
	
	КэшДобавляемыхКодовМаркировки = Новый Соответствие;
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, ДеревоУпаковок.Строки, ПараметрыСканирования, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		КодМаркировки   = КлючЗначение.Ключ; 
		ДанныеШтрихкода = КлючЗначение.Значение;
		Если ДанныеШтрихкода.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		Если КэшДобавляемыхКодовМаркировки.Получить(КодМаркировки) = Неопределено Тогда
			КэшДобавляемыхКодовМаркировки.Вставить(КодМаркировки, Истина);
		Иначе
			ДанныеШтрихкода.ТекстОшибки = НСтр("ru='Обрабатывается повторно'");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Выполняет проверку по строкам дерева на дубли, которые лежат в кэше. В случе нахождения - добавляет описание ошибки,
//    в противном случае - добавляет в кэш проверенных кодов маркировки.
// 
// Параметры:
//  КэшДобавляемыхКодовМаркировки - Соответствие - Кэш проверяемых кодов.
//  СтрокиДерева - СтрокиДерваЗначений - Строки дерева для обхода.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, СтрокиДерева, ПараметрыСканирования, ЕстьОшибки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, СтрокаДерева.Строки, ПараметрыСканирования, ЕстьОшибки);
		
		Если КэшДобавляемыхКодовМаркировки.Получить(СтрокаДерева.Штрихкод) = Неопределено Тогда
			КэшДобавляемыхКодовМаркировки.Вставить(СтрокаДерева.Штрихкод, Истина);
		Иначе
			СтрокаДерева.ТекстОшибки = НСтр("ru='Обрабатывается повторно'");
			СтрокаДерева.ЕстьОшибки  = Истина;
			ЕстьОшибки = Истина;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку данных, которые уточнил пользователь в диалоговом окне.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкод.
//  РезультатВыбора - Структура, ОпределяемыйТип.СерияНоменклатуры - результат выбора серии пользователем.
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - кэшированные значения формы.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьУточнениеДанных(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Форма);
	
	Если ЭтоАдресВременногоХранилища(РезультатОбработки.АдресДанныхШтрихкода) Тогда
		ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДанныхШтрихкода);
	Иначе
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
	КонецЕсли;
	
	Номенклатура   = РезультатВыбора.ДанныеВыбора.Номенклатура;
	Характеристика = РезультатВыбора.ДанныеВыбора.Характеристика;
	Серия = РезультатВыбора.ДанныеВыбора.Серия;
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеШтрихкода.Номенклатура   = Номенклатура;
	ДанныеШтрихкода.Характеристика = Характеристика;
	ДанныеШтрихкода.Серия          = Серия;
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ШтрихкодированиеИСМПКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	Если ДанныеШтрихкода.ВидыПродукции.Количество() = 0 Тогда
		ВидПродукции = ИнтеграцияИСМП.ВидПродукцииПоНоменклатуре(Номенклатура);
		ДанныеШтрихкода.ВидыПродукции.Добавить(ВидПродукции);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда
		ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
			Блокировка.Заблокировать();
			
			ШтрихкодУпаковкиОбъект = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
			ШтрихкодУпаковкиОбъект.Номенклатура   = Номенклатура;
			ШтрихкодУпаковкиОбъект.Характеристика = Характеристика;
			ШтрихкодУпаковкиОбъект.Серия          = Серия;
			ШтрихкодУпаковкиОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		
		ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода);
		
	КонецЕсли;
	
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, Форма.УникальныйИдентификатор);
	
	ТипУпаковки = РезультатОбработки.ТипУпаковки;
	
	ВложенныеШтрихкоды = Неопределено;
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТипУпаковки) Тогда
		ВложенныеШтрихкоды = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	ДанныеПоШтрихкодам.ОбработанныеШтрихкоды.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
	
	ЕстьОшибки = ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	РезультатОбработки = ОбработатьДанныеПоШтрихкодам(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеШтрихкода, ЕстьОшибки);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Определяет является ли штрихкод кодом ввода остатков.
// 
// Параметры:
//  Штрихкод - Строка - штрихкод в формате EAN, GTIN или код маркировки.
// Возвращаемое значение:
//  Булево - Истина, если штрихкод является штрихкодов ввода остатков.
Функция ЭтоШтрихкодВводаОстатков(Штрихкод) Экспорт
	
	Возврат ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(Штрихкод);
	
КонецФункции

// Формирует данные по табличной части "Товары" и помещает данные во временное хранилище.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа, обработки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СформироватьДанныеТабличнойЧастиТовары(Форма, ПараметрыСканирования)
	
	Если Не ИнтеграцияИС.СерииИспользуются() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТаблицыТовары = ИнициализицияТаблицыДанныхДокумента();
	
	СтандартнаяОбработка = Истина;
	ШтрихкодированиеИСПереопределяемый.ПриФормированииДанныхТабличнойЧастиТовары(Форма, ДанныеТаблицыТовары, ПараметрыСканирования, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
			ТабличнаяЧастьТовары = Форма.Объект.Товары;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Товары") Тогда
			ТабличнаяЧастьТовары = Форма.Товары;
		Иначе
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТовары Из ТабличнаяЧастьТовары Цикл
			НоваяСтрока = ДанныеТаблицыТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыСканирования.ДанныеТаблицыТовары = ПоместитьВоВременноеХранилище(
		ДанныеТаблицыТовары, ПараметрыСканирования.ИдентификаторФормы);
	
КонецПроцедуры

// Инициализирует таблицу значений для заполнения данных документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * Номенклатура - ОписаниеТипа.Номенклатура - Номенклатура.
// * Характеристика - ОписаниеТипа.ХарактеристикаНоменклатуры - Характеристика.
// * Серия - ОписаниеТипа.СерияНоменклатуры - Серия.
// * Количество - Число - Количество товара.
Функция ИнициализицияТаблицыДанныхДокумента()
	
	ТаблицаДанныхДокумента = Новый ТаблицаЗначений;
	ТаблицаДанныхДокумента.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Количество",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	Возврат ТаблицаДанныхДокумента;
	
КонецФункции

#КонецОбласти