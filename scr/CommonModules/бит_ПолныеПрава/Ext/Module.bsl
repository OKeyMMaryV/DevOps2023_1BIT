
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыИФункцииСтруктурыПодчиненности

// Функция получает список подчиненных документов.
// 
// Параметры:
//  ДокументОснование 			- ДокументСсылка.
//  мКэшПраваДоступаКМетаданным - Соответствие.
// 
// Возвращаемое значение:
//  ТаблицаДокументов - ТаблицаЗначений.
// 
Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование, мКэшПраваДоступаКМетаданным, ИмяКритерия = "бит_СтруктураПодчиненности") Экспорт
		
	ТекстЗапроса = "";
	
	ТаблицаДокументов 	 = Новый ТаблицаЗначений;
	ТипДокументОснование = ТипЗнч(ДокументОснование);
	СоставКритерия		 = Метаданные.КритерииОтбора[ИмяКритерия].Состав;
	
	Для Каждого ЭлементСостава ИЗ СоставКритерия Цикл
		
		Если Не ЭлементСостава.Тип.СодержитТип(ТипДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = бит_ОбщегоНазначения.РазобратьПутьКОбъектуМетаданных(ПутьКДанным
																				   ,мКэшПраваДоступаКМетаданным);
		Если Не СтруктураПутьКДанным.ЕстьДоступКМетаданным Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + СтруктураПутьКДанным.ВидОбъекта + "." 
						   + СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ 		 = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".") -1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".") -1);
		
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-10-11 (#3101)
		ТекстСоединения = "";
		//Если СтруктураПутьКДанным.ИмяТаблЧасти = "ок_СтруктураПодчиненностиБК" Тогда
		//	ТекстСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК СтруктураПодчиненияДляБК
		//	| ПО СтруктураПодчиненияДляБК.ИнвестиционнаяФВБ И СтруктураПодчиненияДляБК.Ссылка = " + СтруктураПутьКДанным.ВидОбъекта + ".Ссылка";
		//	
		//	ТекущаяСтрокаГДЕ = ТекущаяСтрокаГДЕ + "
		//	| И (" + СтруктураПутьКДанным.ВидОбъекта + ".ИнвестиционнаяФВБ
		//	|		ИЛИ СтруктураПодчиненияДляБК.Ссылка ЕСТЬ NULL)";
		//КонецЕсли;	
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-10-11 (#3101)
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ОБЪЕДИНИТЬ
					   |ВЫБРАТЬ") + "
					   |" + СтруктураПутьКДанным.ВидОбъекта   + ".Ссылка ИЗ " + ИмяОбъекта 						+ "."
					      + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " 	  + СтруктураПутьКДанным.ВидОбъекта + "
					   //ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-10-11 (#3101)
					   |" + ТекстСоединения + "
					   //ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-10-11 (#3101)  
					   |" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
					   |";
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
		
		//+Сундукова 29.03.2016
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") тогда
			ТекстЗапроса = ТекстЗапроса+ "ОБЪЕДИНИТЬ
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	рс_ДокументыПоID.Документ как ссылка
			|ИЗ
			|	РегистрСведений.рс_ДокументыПоID КАК рс_ДокументыПоID
			|ГДЕ
			|	рс_ДокументыПоID.ID = &ID";
			
			Запрос.УстановитьПараметр("ID",ДокументОснование.ID);	
		КонецЕсли;	
		//-Сундукова 29.03.2016
		//+Сундукова 13.04.2016
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-10-11 (#3101)
		//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") тогда
		//	ТекстЗапроса = ТекстЗапроса+ "ОБЪЕДИНИТЬ
		//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//	|	бит_ДополнительныеДанныеПоОперациямАксапты.Документ как ссылка
		//	|ИЗ
		//	|	РегистрСведений.бит_ДополнительныеДанныеПоОперациямАксапты КАК бит_ДополнительныеДанныеПоОперациямАксапты
		//	|ГДЕ
		//	|	бит_ДополнительныеДанныеПоОперациямАксапты.НомерЗаявки = &Ссылка";
		//	
		//	Запрос.УстановитьПараметр("ссылка",ДокументОснование);	
		//КонецЕсли;
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-10-11 (#3101)
		//-Сундукова 13.04.2016
		
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаДокументов = РезультатЗапроса.Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДокументов;
	
КонецФункции // ПолучитьСписокПодчиненныхДокументов()

// Функция проверяет возможность старта системы с текущим набором ролей.
// 
// Параметры:
//  Отказ - Булево.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ПроверитьВозможностьСтартаСистемы(Отказ) Экспорт
	
	Протокол =  НСтр("ru = 'Недостаточно прав доступа'");
	
	// Если это "Бухгалтерия предприятия", тогда.
	Если бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия() Тогда
		
		РольПолныеПрава		   			= Метаданные.Роли.ПолныеПрава;
		// РольБухгалтер		   			= Метаданные.Роли.Бухгалтер;
		РольБазовыеПрава                = Метаданные.Роли.БазовыеПраваБСП;
		РольБухгалтерДоп	   			= Метаданные.Роли.бит_БухгалтерДополнение;
		РольИсполнитель		   			= Метаданные.Роли.бит_рлс_ИсполнительКазначейства;
		РольИсполнительЗаявкиНаЗатраты 	= Метаданные.Роли.бит_рлс_ИсполнительЗаявкиНаЗатраты;
		РольОгрПользовательПорталаВГО	= Метаданные.Роли.бит_рлс_вго_ПользовательПорталаВГО;
		РольПользовательПорталаВГО		= Метаданные.Роли.бит_вго_ПользовательПорталаВГО;
		РольПользовательФинанс 			= Метаданные.Роли.бит_ФинансПользователь;
		РольИсполнительЗаявкиНаПотребность 	= Метаданные.Роли.бит_мто_ИсполнительПоЗаявкамНаПотребность;
		
		//бит_БК_Михайлова_Начало_12.12.11 - добавляем список ролей пользователей БК
        РольГлавныйБюджетныйКонтролер = Метаданные.Роли.бит_БК_ГлавныйБК;
		//бит_БК_Михайлова_Конец_12.12.11	

		//ОК Начало Калинин М.10.07.12  задача по настройке ролей для подсистемы бюджетного контроля
        РольБюджетныйКонтрольПросмотр = Метаданные.Роли.ОК_БК_Просмотр;
		//ОК Конец  Калинин М.10.07.12 
		
		// Проверим основные роли
		Если НЕ РольДоступна(РольПолныеПрава) 
			 И НЕ РольДоступна(РольБазовыеПрава) 
			 И НЕ РольДоступна(РольИсполнитель)
			//бит_БК_Михайлова_Начало_12.12.11 - добавляем в список основных ролей пользователей БК
             И НЕ РольДоступна(РольГлавныйБюджетныйКонтролер)
			//бит_БК_Михайлова_Конец_12.12.11

			//ОК Начало Калинин М.10.07.12 задача по настройке ролей для подсистемы бюджетного контроля
      		 И НЕ РольДоступна(РольБюджетныйКонтрольПросмотр)
			//ОК Конец  Калинин М.10.07.12			 
			 И НЕ РольДоступна(РольИсполнительЗаявкиНаЗатраты)
			 И НЕ РольДоступна(РольОгрПользовательПорталаВГО) 
			 И НЕ РольДоступна(РольПользовательПорталаВГО)
			 И НЕ РольДоступна(РольИсполнительЗаявкиНаПотребность) Тогда
			 
			Отказ = Истина;
			
			Если Отказ Тогда
				
				ТекстСообщения =  НСтр("ru = 'У текущего пользователя нет доступных ролей, для запуска информационной базы.'")
				                 + Символы.ПС
								 + НСтр("ru = 'Для работы пользователю необходимо установить какую-либо из поставляемых профилей.'")
								 + Символы.ПС
								 + НСтр("ru = 'Обратитесь к Администратору.'");
								 
				Протокол = Протокол + Символы.ПС+ ТекстСообщения;				 
								 
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Проверим необходимость добавления вспомогательных ролей.
		Если НЕ Отказ Тогда
			
			ТекстСообщения =  НСтр("ru = 'Для работы текущему пользователю должны быть добавлены роли:'");
			РолиПользователя    = ПользователиИнформационнойБазы.ТекущийПользователь().Роли;
			
			Если бит_ОбщегоНазначения.НеобходимоУстановитьРольПользовательФинанс(РолиПользователя) Тогда
				Отказ = Истина;
				ТекстСообщения = ТекстСообщения + Символы.ПС + "-" + Метаданные.Роли.бит_ФинансПользователь.Синоним
			КонецЕсли; 
			
			Если бит_ОбщегоНазначения.НеобходимоУстановитьРольБухгалтерДополнение(РолиПользователя) Тогда
				Отказ = Истина;
				ТекстСообщения = ТекстСообщения + Символы.ПС + "-" + Метаданные.Роли.бит_БухгалтерДополнение.Синоним
			КонецЕсли; 
			
			Если Отказ  Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Обратитесь к Администратору.'");
				Протокол = Протокол + Символы.ПС + ТекстСообщения;				 
			КонецЕсли; 
			
		КонецЕсли; 	
		
	КонецЕсли; // Проверка решения.
	
	Если Метаданные.РегистрыСведений.Найти("бит_ДоступныеИнтерфейсы") <> Неопределено Тогда
		// Проверка настроек доступности русского интерефейса.
		ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");		
		РегистрыСведений.бит_ДоступныеИнтерфейсы.ПроверитьУстановитьДоступностьРусскогоИнтерфейса(ТекПользователь);
	КонецЕсли;	
	
	Возврат Протокол;
	
КонецФункции // ПроверитьВозможностьСтартаСистемы()

// Функция выполняет действия перед стартом системы.
// 
// Возвращаемое значение:
//  РезСтр - Структура.
// 
Функция ДействияПередСтартомСистемы() Экспорт

	РезСтр = Новый Структура("ТекстСообщения, Отказ, ЭтоИнтПоставка", "", Ложь, Ложь);
	
	РезСтр.ЭтоИнтПоставка = бит_ОбщегоНазначения.ЭтоИнтернационаяПоставка();
	
	Отказ = Ложь;
	
	ТекстСообщения = ПроверитьВозможностьСтартаСистемы(Отказ);
	
	Если НЕ Отказ И РезСтр.ЭтоИнтПоставка Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("ПервыйЗапросПараметров"                 , Ложь);
		Параметры.Вставить("ПараметрЗапуска"                        , ""); // ПараметрЗапуска
		Параметры.Вставить("СтрокаСоединенияИнформационнойБазы"     , СтрокаСоединенияИнформационнойБазы());
		Параметры.Вставить("ПолученныеПараметрыКлиента"             , Неопределено);
		Параметры.Вставить("СкрытьРабочийСтолПриНачалеРаботыСистемы", Истина);		
		
		// Установка даты клиента непосредственно перед вызовом, чтобы уменьшить погрешность.
		Параметры.Вставить("ТекущаяДатаНаКлиенте", ТекущаяДата()); // Для расчета ПоправкаКВремениСеанса.
		Параметры.Вставить("ТекущаяУниверсальнаяДатаВМиллисекундахНаКлиенте",
		ТекущаяУниверсальнаяДатаВМиллисекундах());
		
		ПарамКлиента = СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
		
		Если ПарамКлиента.Свойство("НеобходимоОбновлениеИнформационнойБазы") 
			  И ПарамКлиента.НеобходимоОбновлениеИнформационнойБазы Тогда
			  
			Если Метаданные.РегистрыСведений.Найти("бит_ДоступныеИнтерфейсы") <> Неопределено Тогда
				  
			 	ТекПользователь   = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь");
			 	флДоступенРусский = РегистрыСведений.бит_ДоступныеИнтерфейсы.ОпределитьДоступностьРусскогоИнтерфейса(ТекПользователь);
			 
				Если НЕ флДоступенРусский Тогда
				 
					Отказ = Истина;
					 ТекстСообщения =  НСтр("ru = 'Необходимо выполнить обновление информационной базы. 
					|Обновление может быть выполнено только пользователем с русским интерфейсом.'; 
					|en = 'Update of the information base have to be done. 
					|In the current version updates can be performed in the Russian interface only.'");

				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	РезСтр.ТекстСообщения = ТекстСообщения;
	РезСтр.Отказ = Отказ;

	Если Отказ Тогда		
		ЗаписьЖурналаРегистрации("Запуск программы", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);		
	КонецЕсли; 
	
	Возврат РезСтр;
	
КонецФункции // ДействияПередСтартомСистемы()

// Функция выполняет поиск пользователя по имени.
//
// Параметры:
//  ИмяПользователя - Строка.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи.
//
Функция НайтиПользователя(ИмяПользователя) Экспорт

    НайденныйПользователь = Справочники.Пользователи.ПустаяСсылка();

    Если Метаданные.ОбщиеМодули.Найти("Пользователи") <> Неопределено Тогда
        НайденныйПользователь = Пользователи.НайтиПоИмени(ИмяПользователя);
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(НайденныйПользователь) Тогда
        НайденныйПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя);
    КонецЕсли; 

    Если НЕ ЗначениеЗаполнено(НайденныйПользователь) Тогда

        ПользовательИБ =  ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);

        Если ПользовательИБ <> Неопределено Тогда

            НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ"
                                                                              , ПользовательИБ.УникальныйИдентификатор);

        КонецЕсли; 

    КонецЕсли; 

    Возврат НайденныйПользователь;

КонецФункции // НайтиПользователя()

// Процедура устанавливает параметры сеанса, необходимы при работе подсистем БИТ.
// 
// Параметры:
//  ИмяПараметра - Строка.
//  УстановленныеПараметры.
//
Процедура ЗаполнитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	бит_рлс_Основной.ЗаполнитьПараметрыСеансаRLS();
	
	// Ид сеанса, необходим для установки функциональных опций системы лицензирования.
	ПараметрыСеанса.бит_ИдентификаторСеанса = Новый  УникальныйИдентификатор;
	
	// Параметры сеанса, используемы в МДМ.
	ПараметрыСеанса.бит_мдм_ПризнакРедактирования = Ложь;  //  признак того, что элемент редактируется в форме заявки.
	
КонецПроцедуры // ЗаполнитьПараметрыСеанса()

// Функция проверяет является ли данный узел чужим подчиненным.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоЧужойПодчиненныйУзел() Экспорт
	
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	Если ГлавныйУзел = Неопределено Тогда
		ЭтоЧужой = Ложь;		
	Иначе
		ЭтоЧужой = СтрСравнить(ГлавныйУзел.Метаданные().Имя, "ПоОрганизации") = 0; 
	КонецЕсли; 
	
	Возврат ЭтоЧужой;
	
КонецФункции

// Получает перечень параметров, определяющих действия, необходимые при старте системы. 
// 
// Параметры:
//  ТочкаВызова - Строка
// 
Функция ПолучитьПараметрыДляСтартаСистемы(ТочкаВызова = "")  Экспорт
	
	// ВАЖНО!!! Уникальный для БП и КОРП.
	
	ПараметрыСтарта = НовыеПараметрыДляСтартаСистемы();
	ТекПользователь = Пользователи.ТекущийПользователь();
    	
	ПараметрыСтарта.ЭтоЧужойПодчиненныйУзел = ЭтоЧужойПодчиненныйУзел();           
	
	Если ПараметрыСтарта.ЭтоЧужойПодчиненныйУзел Тогда
		Возврат ПараметрыСтарта;	
	КонецЕсли; 
	
	Если Метаданные.РегистрыСведений.Найти("бит_ДоступныеИнтерфейсы") <> Неопределено Тогда
		ПараметрыСтарта.РусскийПользователь = РегистрыСведений.бит_ДоступныеИнтерфейсы.ОпределитьДоступностьРусскогоИнтерфейса(ТекПользователь);	
	Иначе
		ПараметрыСтарта.РусскийПользователь = Истина;
	КонецЕсли;	

	// При обновлении ИБ значение данной настройки устанавливается в "Истина", нет необходимости в дополнительных проверках.
	// См. бит_ОбновлениеИнформационнойБазыБФ.ЗаписатьНастройкуПоказыватьДополнительнуюИнформациюБит().
	ОткрытьДополнительнуюИнформацию = бит_УправлениеПользователямиСервер.ПолучитьНастройкуПользователя(
		"ПоказыватьДополнительнуюИнформациюБит", ТекПользователь) И ПараметрыСтарта.РусскийПользователь;
	ПараметрыСтарта.ОткрытьДополнительнуюИнформациюБИТ = ОткрытьДополнительнуюИнформацию; 
		
	// Открытие рабочего места визирования.
	ОткрытьРабочееМестоВизирования = ПравоДоступа("Использование", Метаданные.Обработки.бит_РабочееМестоВизирования) 
		И бит_УправлениеПользователямиСервер.ПолучитьНастройкуПользователя("НапоминатьОНеобходимостиУстановкиВизПриЗапуске",ТекПользователь);
	ПараметрыСтарта.ОткрытьРабочееМестоВизирования = ОткрытьРабочееМестоВизирования; 							  				 
	
	Интервал = бит_УправлениеПользователямиСервер.ПолучитьНастройкуПользователя("ИнтервалУведомленияУстановкиВиз",ТекПользователь);
	Интервал = ?(ПравоДоступа("Использование", Метаданные.Обработки.бит_РабочееМестоВизирования), Интервал, 0);
	ПараметрыСтарта.ИнтервалУведомленияУстановкиВиз = Интервал;
	
	Если ТочкаВызова = "ДействияПриНачалеРаботыСистемы" Тогда
		ПараметрыСтарта.ВыполнятьСборСтатистики = бит_ук_СлужебныйСервер.ОпределитьНеобходимостьСбораСведенийОСистеме();
	КонецЕсли; 
	
	Возврат ПараметрыСтарта;
	
КонецФункции
 
// Функция получает код языка используемый в текущем сеансе.
// 
// Возвращаемое значение:
//  КодЯзыка - Строка.
// 
Функция ПолучитьКодЯзыка() Экспорт

	КодЯзыка = "ru";
	
	ТекЯзык = ТекущийЯзык();
	
	Если ТипЗнч(ТекЯзык) = Тип("ОбъектМетаданных") Тогда
		
		КодЯзыка = ТекЯзык.КодЯзыка;
	
	Иначе	
		
		КодЯзыка = ТекЯзык;
		
	КонецЕсли; 
	
	Возврат КодЯзыка;
	
КонецФункции // ПолучитьКодЯзыка()

// Функция определяет доступность общих настроек пользователю.
//
// Возвращаемое значение:
//  Булево.
//
Функция ДоступностьОбщихНастроек() Экспорт

	флДоступность = (Метаданные.Роли.Найти("бит_сл_Администратор") <> Неопределено И РольДоступна("бит_сл_Администратор")) ИЛИ
	                  (Метаданные.Роли.Найти("ПолныеПрава") <> Неопределено И РольДоступна("ПолныеПрава")) ИЛИ
					  (Метаданные.Роли.Найти("бит_ПолныеПрава") <> Неопределено И РольДоступна("бит_ПолныеПрава")) ИЛИ
					  ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "";;
	
	

	Возврат флДоступность;
	
КонецФункции // ДоступностьОбщихНастроек()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыеПараметрыДляСтартаСистемы()

	// ++ БП 
	Параметры = Новый Структура; 	
	Параметры.Вставить("ЭтоЧужойПодчиненныйУзел", Ложь);
	Параметры.Вставить("РусскийПользователь", Истина);
	Параметры.Вставить("ОткрытьДополнительнуюИнформациюБИТ", Ложь);
	Параметры.Вставить("ОткрытьРабочееМестоВизирования", Ложь);
	Параметры.Вставить("ИнтервалУведомленияУстановкиВиз", 0);
	Параметры.Вставить("ВыполнятьСборСтатистики", Новый Структура("Клюиент, Сервер", Ложь, Ложь));
	
	Возврат Параметры;
	// -- БП 
	
КонецФункции

#КонецОбласти
