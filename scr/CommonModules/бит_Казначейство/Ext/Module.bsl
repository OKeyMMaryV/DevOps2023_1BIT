
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыИФункцииПоАвтоматическомуСозданиюИЗаполнениюДокументовПланируемогоПоступления

// Процедура осуществляет заполнение планируемого поступления по платежной позиции
// 	Вызывается один раз при создании планируемого поступления.
// 
// Параметры:
//  ПланируемоеПоступление 	- ДокументОбъект.бит_ПланируемоеПоступлениеДенежныхСредств.
//  ПлатежнаяПозиция  		- ДокументСсылка.бит_ПлатежнаяПозиция.
// 	СтруктураПараметров		- Структура - первоначально формируется в процедуре 
// 								ПолучитьСтруктуруПараметровДляПланируемогоПоступления
// 								, может быть дополнена.
// 
Процедура ЗаполнитьПланируемоеПоступлениеПоПлатежнойПозиции(ПланируемоеПоступление, ПлатежнаяПозиция, РеквизитыШапки, МассивРаспределение) Экспорт
	
	Если МассивРаспределение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним планируемое поступление
	
	ПланируемоеПоступление.ДокументОснование = ПлатежнаяПозиция;
	
	// Устанавливаем значения реквизитов шапки обязательные к заполнению.
	ПланируемоеПоступление.Организация  = РеквизитыШапки.Организация;
	ПланируемоеПоступление.ТипЗаявки 	= РеквизитыШапки.ТипЗаявки;
	ПланируемоеПоступление.ФормаОплаты 	= РеквизитыШапки.ФормаОплаты;
	
	ПланируемоеПоступление.ВалютаДокумента 		= РеквизитыШапки.ВалютаДокумента;
	ПланируемоеПоступление.КурсДокумента 		= РеквизитыШапки.КурсДокумента;
	ПланируемоеПоступление.КратностьДокумента	= РеквизитыШапки.КратностьДокумента;
	
	// Необязательные реквизиты шапки
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	ПланируемоеПоступление.Исполнитель	 = РеквизитыШапки.Исполнитель;
	ПланируемоеПоступление.Ответственный = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновнойОтветственный", ТекПользователь);
	
	// Заполним таб.часть Распределение
	Для Каждого СтрокаРаспределения Из МассивРаспределение Цикл 
		НоваяСтрока = ПланируемоеПоступление.Распределение.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
	КонецЦикла;
	
	// Синхронизируем одинаковые реквизиты шапки и строки.
	СтрокаРаспределение = ПланируемоеПоступление.Распределение[0];
	
	МассивИсключений = Новый Массив;
	
	ПланируемоеПоступление.СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Шапка",МассивИсключений);
	
	// Инициализация доп. измерений
	мИзмеренияДоп 		= ПланируемоеПоступление.мИзмеренияДоп;
	мНастройкиИзмерений = ПланируемоеПоступление.мНастройкиИзмерений;
	
	Если ПланируемоеПоступление.Распределение.Количество() > 1 Тогда
		Для Каждого Строка Из ПланируемоеПоступление.Распределение Цикл
			бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(Строка,мИзмеренияДоп,мНастройкиИзмерений);
		КонецЦикла;
	Иначе 
		бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ПланируемоеПоступление,мИзмеренияДоп,мНастройкиИзмерений);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПоСозданиюИЗаполнениюДокументовОплатыПоНовойСхеме
 
// Альтернативное заполнение дополнительных аналитик для документа "Списание с расчетного счета".
//
// Параметры:
//  ПлатежныйДокумент	 - ДокументОбъект	 - документ, свойства, которого заполняются.
//
Процедура АльтернативноеЗаполнениеДополнительныхАналитик(ПлатежныйДокумент) Экспорт 
	
	ПлатежныйДокумент.ДополнительныеСвойства.Вставить("бит_НеЗаполнятьАналитикиПоУмолчанию", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныеПозиции.ПлатежнаяПозиция КАК ПлатежнаяПозиция
	|ИЗ
	|	Документ.ПлатежноеПоручение.бит_ПлатежныеПозиции КАК ПлатежныеПозиции
	|ГДЕ
	|	ПлатежныеПозиции.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПлатежныйДокумент.ДокументОснование);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Если НЕ Результат.Пустой() Тогда
		
		МассивПозиций = Новый Массив(); 
		Пока Выборка.Следующий() Цикл
			МассивПозиций.Добавить(Выборка.ПлатежнаяПозиция);
		КонецЦикла;
		
		РеквизитыПозиций       = Документы.бит_ПлатежнаяПозиция.РеквизитыДокумента(МассивПозиций);
		ТаблицаОбщихРеквизитов = ОбщиеРеквизитыПлатежныхПозиций(РеквизитыПозиций);
		ОбщиеРеквизиты		   = ТаблицаОбщихРеквизитов[0];
		РеквизитыШапки 		   = РеквизитыПозиций[0];
		
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
		НаборЗаписей 	   = бит_ОбщегоНазначения.ПрочитатьНаборАналитики(Новый Структура("Объект", ПлатежныйДокумент.Ссылка));
		НаборЗаписей.Очистить();
		
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписей,ПлатежныйДокумент.Ссылка,"ПлатежнаяПозиция"    ,РеквизитыШапки.Ссылка);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписей,ПлатежныйДокумент.Ссылка,"Проект"              ,РеквизитыШапки.Проект);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписей,ПлатежныйДокумент.Ссылка,"СтатьяОборотов"      ,РеквизитыШапки.СтатьяОборотов);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписей,ПлатежныйДокумент.Ссылка,"ЦФО"                 ,РеквизитыШапки.ЦФО);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписей,ПлатежныйДокумент.Ссылка,"НоменклатурнаяГруппа",РеквизитыШапки.НоменклатурнаяГруппа);				
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписей,ПлатежныйДокумент.Ссылка,"Контрагент"          ,РеквизитыШапки.Контрагент);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписей,ПлатежныйДокумент.Ссылка,"ДоговорКонтрагента"  ,РеквизитыШапки.ДоговорКонтрагента);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписей,ПлатежныйДокумент.Ссылка,"БанковскийСчет"      ,РеквизитыШапки.БанковскийСчетОрганизация);
		
		ИспользованныеВиды = Новый Массив(); 
		ИспользованныеВиды.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция);
		ИспользованныеВиды.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.Проект);
		ИспользованныеВиды.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.СтатьяОборотов);
		ИспользованныеВиды.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ЦФО);
		ИспользованныеВиды.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НоменклатурнаяГруппа);
		ИспользованныеВиды.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.Контрагент);
		ИспользованныеВиды.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ДоговорКонтрагента);
		ИспользованныеВиды.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.БанковскийСчет);																		
		
		ДокОснование = РеквизитыШапки.ДокументОснование;
		
		Для Каждого ТекущаяНастройка ИЗ НастройкиИзмерений Цикл
			Если ИспользованныеВиды.Найти(ТекущаяНастройка.Значение.Аналитика) = Неопределено Тогда
				Если бит_РаботаСМетаданными.ЕстьРеквизит(ТекущаяНастройка.Ключ, ДокОснование.Метаданные())
					И ЗначениеЗаполнено(ДокОснование[ТекущаяНастройка.Ключ]) Тогда
					бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписей,ПлатежныйДокумент.Ссылка,
							ТекущаяНастройка.Значение.Аналитика, ДокОснование[ТекущаяНастройка.Ключ]);
					ИспользованныеВиды.Добавить(ТекущаяНастройка.Значение.Аналитика);		
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
		
		НаборЗаписей.Записать();

	КонецЕсли; 
	
	// Для нового "списания...", введенного на основании "платежного поручения"
	// запрет устанавливается принудительно.
	ПараметрыОбъекты = Новый Структура("ЗапретитьПерезаполнениеАналитик", Истина);
	бит_МеханизмДопИзмерений.ЗаписатьДополнительныеПараметрыОбъекта(ПлатежныйДокумент.Ссылка, ПараметрыОбъекты);

КонецПроцедуры

// Уточняет возможность перезаполнения аналитик.
//
// Параметры:
//  Объект	 - ДокументОбъект	 - документ, свойства, которого заполняются.
// 
// Возвращаемое значение:
//  Булево
//
Функция ТребуетсяАльтернативноеЗаполнениеАналитик(Объект) Экспорт 
	
	Требуется = Ложь; 
	ЭтоНовый  = Ложь;
	
	Если Объект.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
	     ЭтоНовый = Объект.ДополнительныеСвойства.ЭтоНовый;
	КонецЕсли; 
	 
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() И ЭтоНовый Тогда
		
		НеЗаполнять = ?(Объект.ДополнительныеСвойства.Свойство("бит_НеЗаполнятьАналитикиПоУмолчанию"),
						Объект.ДополнительныеСвойства.бит_НеЗаполнятьАналитикиПоУмолчанию, Ложь);
		Если НеЗаполнять = Ложь Тогда 
			
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
				
				ДокументОснование = Объект.ДокументОСнование;
				ПлатежныеПозиции  = Новый Массив();
				Если ЗначениеЗаполнено(ДокументОснование) Тогда
					
					Запрос = Новый Запрос;
					ТекстЗапроса = 
					"ВЫБРАТЬ
					|	Таблица.ПлатежнаяПозиция КАК ПлатежнаяПозиция
					|ИЗ
					|	Документ.ПлатежноеПоручение.бит_ПлатежныеПозиции КАК Таблица
					|ГДЕ
					|	Таблица.Ссылка = &ПлатежноеПоручение";
					
					Запрос.Текст = ТекстЗапроса;
					Запрос.УстановитьПараметр("ПлатежноеПоручение", ДокументОснование);
					
					Результат = Запрос.Выполнить();
					Выборка   = Результат.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						ПлатежныеПозиции.Добавить(Выборка.ПлатежнаяПозиция);
					КонецЦикла;
					
					
				КонецЕсли;
				
				Требуется = (ПлатежныеПозиции.Количество() <> 0);
				Объект.ДополнительныеСвойства.Вставить("бит_НеЗаполнятьАналитикиПоУмолчанию", НЕ Требуется);
			КонецЕсли; 
		Иначе
			Требуется = Ложь;
		КонецЕсли; 
	КонецЕсли;

	Возврат Требуется;
	
КонецФункции
 
#КонецОбласти

#Область ПодпискиНаСобытия

// Обработчик подписки "бит_ПриКопированииДокументСКурсомВзаиморасчета" на событие "ПриКопировании".
// 
Процедура бит_ПриКопированииДокументСКурсомВзаиморасчетаПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если ЗначениеЗаполнено(Источник.ВалютаДокумента) Тогда 
	
		СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Источник.ВалютаДокумента,Источник.Дата);
		
		Для каждого Строка Из Источник.РасшифровкаПлатежа Цикл
		
			Строка.КурсВзаиморасчетов      = СтрКурса.Курс;
			Строка.КратностьВзаиморасчетов = СтрКурса.Кратность;
		
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры
	
// Расширение обработчика события "Обработка заполнения" документа 
// "Списание с расчетноно счета".
//
//  См. Синтакс-помощник: ДокументОбъект.ОбработкаЗаполнения().
//
Процедура ОбработкаЗаполненияСписаниеСРасчетногоСчета(Источник, ДанныеЗаполнения) Экспорт 

	Если бит_ПолныеПрава.ЭтоЧужойПодчиненныйУзел() Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НЕ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПлатежныеПозиции.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ПлатежноеПоручение.бит_ПлатежныеПозиции КАК ПлатежныеПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО ПлатежныеПозиции.Ссылка = ПлатежноеПоручение.Ссылка
	|ГДЕ
	|	ПлатежныеПозиции.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;	
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	
	ОсталосьЗаплатить = 0;
	ПлатежныеПозиции = Новый Массив(); 
	Пока Выборка.Следующий() Цикл
		ПлатежныеПозиции.Добавить(Выборка.ПлатежнаяПозиция);
		ОсталосьЗаплатить = Выборка.СуммаДокумента;
	КонецЦикла;
	
	РеквизитыПозиций   	 = Документы.бит_ПлатежнаяПозиция.РеквизитыДокумента(ПлатежныеПозиции);
	ПараметрыРасшифровкиПлатежа = Документы.бит_ПлатежнаяПозиция.ПараметрыРасшифровкиПлатежа(ПлатежныеПозиции);

	ТаблицаОбщихРеквизитов = ОбщиеРеквизитыПлатежныхПозиций(РеквизитыПозиций);
	ОбщиеРеквизиты		   = ТаблицаОбщихРеквизитов[0];
	РеквизитыШапки 		   = РеквизитыПозиций[0];		 
	
	ПараметрыФормирования = НовыеПараметрыФормированияПлатежныхДокументов();
	Для Каждого Колонка Из ТаблицаОбщихРеквизитов.Колонки Цикл
		ПараметрыФормирования.Вставить(Колонка.Имя, ОбщиеРеквизиты[Колонка.Имя]);
	КонецЦикла;

	ПараметрыФормирования.НеФормироватьДокументыОплаты = Ложь;
	ПараметрыФормирования.ПроводитьДокументыОплаты 	   = Ложь;
	ПараметрыФормирования.СуммаПлатежныхПозиций 	   = ОсталосьЗаплатить;
	ПараметрыФормирования.СуммаКоплате 				   = ОсталосьЗаплатить;
	ПараметрыФормирования.СуммаВВалютеПлатежа 		   = Истина;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если Источник.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Источник.ВалютаДокумента, Источник.Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить("КурсДокумента",КурсДокумента);
	Источник.ДополнительныеСвойства.Вставить("КратностьДокумента",КратностьДокумента);

	Источник.РасшифровкаПлатежа.Очистить();
	Источник.бит_РаспределениеБюджета.Очистить();
	
	// NB. ТУТ НИЧЕГО СВЯЗАННОГО С ЗАПОЛНЕНИЕМ БОЛЬШЕ НЕ ПИСАТЬ. 
	// ВСЕ В "ЗаполнитьРасшифровкуПлатежа" ИЛИ "ЗаполнитьПлатежныйДокумент. 
	ЗаполнитьРасшифровкуПлатежа(Источник, ПараметрыРасшифровкиПлатежа, ДанныеЗаполнения, ПараметрыФормирования);
	
КонецПроцедуры

// Расширение обработчика события "При копировании" документа
// "Платежное поручение".
//
//  См. Синтакс-помощник: ДокументОбъект.ПриКопировании().
//
Процедура ПриКопированииПлатежноеПоручение(Источник, ОбъектКопирования) Экспорт
	
	Источник.бит_ПлатежныеПозиции.Очистить();

КонецПроцедуры

// Расширение обработчика события "Обработка заполнения" документа
// "Платежное поручение".
//
//  См. Синтакс-помощник: ДокументОбъект.ОбработкаЗаполнения().
//
Процедура ОбработкаЗаполненияПлатежноеПоручение(Источник, ДанныеЗаполнения) Экспорт

	Если бит_ПолныеПрава.ЭтоЧужойПодчиненныйУзел() Тогда
		Возврат;	
	КонецЕсли; 

	Если НЕ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Аналитика", 				ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция);
	Запрос.УстановитьПараметр("ПустаяПлатежнаяПозиция", Документы.бит_ПлатежнаяПозиция.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка", 				ДанныеЗаполнения);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаспределениеБюджета.ДокументПланирования КАК ПлатежнаяПозиция
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.бит_РаспределениеБюджета КАК РаспределениеБюджета
	|ГДЕ
	|	РаспределениеБюджета.Ссылка = &Ссылка
	|	И РаспределениеБюджета.ДокументПланирования <> &ПустаяПлатежнаяПозиция
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДополнительныеАналитики.ЗначениеАналитики
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК ДополнительныеАналитики
	|ГДЕ
	|	ДополнительныеАналитики.Объект = &Ссылка
	|	И ДополнительныеАналитики.Аналитика = &Аналитика
	|	И ДополнительныеАналитики.ЗначениеАналитики <> &ПустаяПлатежнаяПозиция";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка 		 = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Источник.бит_ПлатежныеПозиции.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры
 
// Обработчик подписки "бит_ОбработкаПроведенияРасходДС" на событие "ОбработкаПроведения".
// 
// Параметры:
// Источник - ДокументОбъект
// Отказ - Булево
// РежимПроведения - РежимЗаписиДокумента.
// 
Процедура бит_ОбработкаПроведенияРасходДСОбработкаПроведения(Источник, Отказ, РежимПроведения, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли; 			
	
	// Так как типовой документ Списание с расчетного счета с видом операции 
	// Снятие наличных не делает никаких движений,
	// нам тоже не надо делать эти движения.
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
		И Источник.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных
		И НЕ ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Источник.Организация, Источник.Дата) Тогда
	
		Возврат;
	КонецЕсли; 
	
	ИсточникМета = Источник.Метаданные();
	
	// Проверим возможность выполнения платежа
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Источник.Организация);
	
	НастройкиПрограммы        = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Источник.Дата, , СтруктураПараметров, "Ошибки");	
	ЗапретитьПлатежиБезЗаявки = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, 
									ПланыВидовХарактеристик.бит_НастройкиПрограммы.ЗапретитьПлатежиБезЗаявки);
		
	Если ЗапретитьПлатежиБезЗаявки Тогда 		
		РазрешеныПлатежиБезЗаявки = РазрешеныПлатежиБезЗаявки(Источник);
		Если Не РазрешеныПлатежиБезЗаявки Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по документам, откорректировнным вручную не формируем.
	Если бит_ОбщегоНазначения.РучнаяКорректировка(Источник) Тогда   		
		// Изменим статус заявки
		ТаблицаРасход = ПодготовитьТаблицуДвижениеДенежныхСредств(Источник.Ссылка);
		ТаблицаРасход.Свернуть("Заявка","Сумма");  		
		// Необходимо записать, т.к. в регистре записи не активны и неверно определяется состояние оплаты.
		// 
		// BF-2629. При интерактивном проведении документа происходит чтение движений документа.
		// В случае, когда проведение происходит программно, в частности при выполнении обработки
		// групповой записи и проведения документов, чтение движений не производится, и в результате
		// очищаются движения регистра при записи пустого набора.
		//Источник.Движения.бит_ПланируемыйРасходДенежныхСредств.Записать(); 		
		ИзменитьСтатусЗаявкиПриПроведенииПлатежногоДокумента(ТаблицаРасход, Источник);  		
		Возврат;		
	КонецЕсли;   	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Период: Дата или дата оплаты.
	НайденнаяДатаОплаты = ИсточникМета.Реквизиты.Найти("ДатаОплаты");
	Если НайденнаяДатаОплаты <> Неопределено И Источник.Оплачено Тогда
		ЗаписываемыйПериод = ?(НайденнаяДатаОплаты.Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, 
									КонецДня(Источник.ДатаОплаты), Источник.ДатаОплаты);
	Иначе	
		ЗаписываемыйПериод = Источник.Дата;
	КонецЕсли;
	
	Если ЗаписыватьДвижения = Неопределено Тогда
		ЗаписыватьДвижения = Ложь;
	Иначе
		СоответствиеОтбора = Новый Соответствие();
		СоответствиеОтбора.Вставить("Регистратор", Источник.Ссылка);
	КонецЕсли;
		
	ТаблицаРасход = ПодготовитьТаблицуДвижениеДенежныхСредств(Источник.Ссылка);
	
	// Для вида операции КомиссияБанка, документа СписаниеСРасчетногоСчета
	// было решено заполнить реквзит Контрагент для движений из шапки документа.
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда 
		Если Источник.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
			Для Каждого Строка из ТаблицаРасход Цикл
				Строка.Контрагент = Источник.Контрагент;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// По регистру бит_ПланируемыйРасходДенежныхСредств.
	Если ЗаписыватьДвижения Тогда
	   	НаборЗаписей = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыНакопления.бит_ПланируемыйРасходДенежныхСредств, СоответствиеОтбора);
	Иначе
		НаборЗаписей = Источник.Движения.бит_ПланируемыйРасходДенежныхСредств;
	КонецЕсли; 
	НаборЗаписей.Записывать = Истина;	
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();    		
	
	Для каждого СтрокаТаблицы Из ТаблицаРасход Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПлатежнаяПозиция) Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижений,СтрокаТаблицы);
			СтрокаДвижений.ДокументПланирования = СтрокаТаблицы.ПлатежнаяПозиция;
			Если СтрокаТаблицы.ВидДенежныхСредств = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда  					
				СтрокаДвижений.БанковскийСчет = СтрокаТаблицы.Касса;  					
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	НаборЗаписей.мПериод          = ЗаписываемыйПериод;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ВыполнитьРасход();
	НаборЗаписей.Записать();
	
	// По регистру бит_ДвиженияДенежныхСредств
	Если ЗаписыватьДвижения Тогда
	   	НаборЗаписей = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыНакопления.бит_ДвиженияДенежныхСредств, СоответствиеОтбора);
	Иначе
		НаборЗаписей = Источник.Движения.бит_ДвиженияДенежныхСредств;
	КонецЕсли; 
	НаборЗаписей.Записывать = Истина;
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	СформироватьДвиженияДвиженияДенежныхСредств(Источник, ТаблицаДвижений, ТаблицаРасход, Перечисления.бит_РасходДоход.Расходование);
	
	НаборЗаписей.мПериод          = ЗаписываемыйПериод;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ДобавитьДвижение();
	
	ТаблицаРасход.Свернуть("Заявка","Сумма");
	
	ИзменитьСтатусЗаявкиПриПроведенииПлатежногоДокумента(ТаблицаРасход, Источник);
	
	Если ЗаписыватьДвижения Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки "бит_ОбработкаПроведенияПоступлениеДС" на событие  "ОбработкаПроведения".
// 
// Параметры:
// Источник - ДокументОбъект
// Отказ - Булево
// РежимПроведения - РежимЗаписиДокумента.
// 
Процедура бит_ОбработкаПроведенияПоступлениеДСОбработкаПроведения(Источник, Отказ, РежимПроведения, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли; 			
	
	// Движения по документам, откорректировнным вручную не формируем.
	Если бит_ОбщегоНазначения.РучнаяКорректировка(Источник) Тогда	
		Возврат;	
	КонецЕсли;
	
	ИсточникМета = Источник.Метаданные();
	
	// Настройки программы.
	СтруктураПараметров = Новый Структура;
	Если ИсточникМета.Реквизиты.Найти("Организация") <> Неопределено Тогда
	 	СтруктураПараметров.Вставить("Организация", Источник.Организация);
	КонецЕсли;    	
	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Источник.Дата, ,СтруктураПараметров, "Ошибки");
	
	// Так как типовой документ Поступение денежных средств с видом операции 
	// Перевод с другого счета не делает никаких движений, а их делает списание,
	// нам тоже не надо делать эти движения.
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет")
		И (Источник.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными)
		И НЕ ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Источник.Организация, Источник.Дата) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ТаблицаРасход = ПодготовитьТаблицуДвижениеДенежныхСредств(Источник.Ссылка);
	
	НаборЗаписей = Источник.Движения.бит_ДвиженияДенежныхСредств;
	НаборЗаписей.Записывать = Истина;
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	СформироватьДвиженияДвиженияДенежныхСредств(Источник, ТаблицаДвижений, ТаблицаРасход, 
			Перечисления.бит_РасходДоход.Поступление);
	
	НайденнаяДатаОплаты = Источник.Метаданные().Реквизиты.Найти("ДатаОплаты");
	Если НайденнаяДатаОплаты <> Неопределено И Источник.Оплачено Тогда
		НаборЗаписей.мПериод = ?(НайденнаяДатаОплаты.Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, 
									КонецДня(Источник.ДатаОплаты), Источник.ДатаОплаты);
	Иначе	
		НаборЗаписей.мПериод = Источник.Дата;
	КонецЕсли;
	
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ДобавитьДвижение();
	
	Если ЗаписыватьДвижения = Истина Тогда
		 НаборЗаписей.Записать();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик подписки "бит_ОбработкаУдаленияПроведенияРасходДС" на событие  "ОбработкаУдаленияПроведения".
// 
// Параметры:
// Источник - ДокументОбъект
// Отказ - Булево.
// 
Процедура бит_ОбработкаУдаленияПроведенияРасходДСОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли; 			
	
	ТаблицаРасход = ПодготовитьТаблицуДвижениеДенежныхСредств(Источник.Ссылка);
	ТаблицаРасход.Свернуть("Заявка","Сумма");
	
	ИзменитьСтатусЗаявкиПриПроведенииПлатежногоДокумента(ТаблицаРасход, Источник);
	
КонецПроцедуры

// Обработчик подписки "бит_ПриЗаписиПлатежногоДокументаБП".
// См.  Синтакс-помощник: ДокументОбъект.ПриЗаписи().
//
Процедура бит_ПриЗаписиПлатежногоДокументаБП(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли; 		
		
	ИсточникМета = Источник.Метаданные();
	ИмяДокумента = ИсточникМета.Имя;
	
	Если НЕ бит_РаботаСМетаданными.ЕстьТабЧасть("бит_РаспределениеБюджета",ИсточникМета) Тогда
		Возврат;	
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаспределениеБюджета.ДокументПланирования КАК ПлатежнаяПозиция,
	|	РаспределениеБюджета.Ссылка КАК ДокументОплаты
	|ИЗ
	|	#РаспределениеБюджета КАК РаспределениеБюджета
	|ГДЕ
	|	РаспределениеБюджета.Ссылка = &Ссылка
	|	И НЕ РаспределениеБюджета.ДокументПланирования = ЗНАЧЕНИЕ(Документ.бит_ПлатежнаяПозиция.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеБюджета.ДокументПланирования,
	|	РаспределениеБюджета.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспределениеБюджета", ИсточникМета.ПолноеИмя() 
		+ ".бит_РаспределениеБюджета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	НаборЗаписей = РегистрыСведений.бит_ДокументыМножественнойОплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОплаты.Установить(Источник.Ссылка);	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
	КонецЦикла; 
	
	Если НЕ бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки "бит_ОбработкаПроверкиЗаполненияПлатежногоДокументаБП".
// См.  Синтакс-помощник: ДокументОбъект.ОбработкаПроверкиЗаполнения().
//
Процедура бит_ОбработкаПроверкиЗаполненияПлатежногоДокументаБП(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли; 			
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Источник.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет 
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу 
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	Если Источник.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником		
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
	
		ПорядковыйНомер = ПроверяемыеРеквизиты.Найти(ЭлементМассива);
		Если ПорядковыйНомер <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПорядковыйНомер);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Обработчик подписки "бит_ПередЗаписьюПлатежногоДокументаБП".
// См.  Синтакс-помощник: ДокументОбъект.ПередЗаписью().
//
Процедура бит_ПередЗаписьюПлатежногоДокументаБП(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// ++ Обновление, см. Документация БСП - Блокировка необработанных данных в пользовательском интерфейсе.
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Источник);
	// -- Обновление
		
	ЭтоНовый = Ложь;
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый) Тогда
		ЭтоНовый = Источник.ЭтоНовый;
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	КонецЕсли; 
	
	ЕстьРасшифровкаПлатежа = бит_ОбщегоНазначенияПереопределяемый.ЕстьРасшифровкаПлатежа(Источник.Ссылка, 
							 Источник.ВидОперации);
	РасшифровкаПлатежа     = Источник.РасшифровкаПлатежа.Выгрузить();
	РаспределениеБюджета   = Источник.бит_РаспределениеБюджета.Выгрузить();
	
	РасшифровкаПлатежа.Колонки.Добавить("бит_НоваяСтрока", Новый ОписаниеТипов("Булево"));
	
	РасшифровкаПлатежаПоСсылке = РасшифровкаПлатежа.СкопироватьКолонки();
	
	Если НЕ ЭтоНовый Тогда		
	
		ИмяТаблицы = Источник.Метаданные().ПолноеИмя();
		Если ЕстьРасшифровкаПлатежа Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РасшифровкаПлатежа.СуммаПлатежа,
			|	РасшифровкаПлатежа.бит_КлючСтроки,
			|	РасшифровкаПлатежа.СуммаНДС,
			|	РасшифровкаПлатежа.СуммаВзаиморасчетов
			|ИЗ
			|	#РасшифровкаПлатежа КАК РасшифровкаПлатежа
			|ГДЕ
			|	РасшифровкаПлатежа.Ссылка = &Ссылка";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РасшифровкаПлатежа", ИмяТаблицы + ".РасшифровкаПлатежа");
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СуммаДокумента КАК СуммаПлатежа,
			|	"""" КАК бит_КлючСтроки,
			|	0 КАК СуммаНДС,
			|	0 КАК СуммаВзаиморасчетов
			|ИЗ
			|	#Реквизиты КАК Реквизиты
			|ГДЕ
			|	Реквизиты.Ссылка = &Ссылка";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Реквизиты", ИмяТаблицы);
		КонецЕсли; 
	
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);

		РезультатЗапроса 	 		 = Запрос.Выполнить();
		РасшифровкаПлатежаПоСсылке 	 = РезультатЗапроса.Выгрузить();
	КонецЕсли; 
		
	Если НЕ ЕстьРасшифровкаПлатежа Тогда
		// Имитация ТЧ "Расшифровка платежа".
		СтрокаТаблицы = РасшифровкаПлатежа.Добавить();
		СтрокаТаблицы.СуммаПлатежа = Источник.СуммаДокумента;
	Иначе
		// Заполнение ключа строки в строках "расшифровки".
		Для каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.бит_КлючСтроки) Тогда
				СтрокаТаблицы.бит_КлючСтроки = Новый УникальныйИдентификатор();
			Иначе
				НайденнаяСтрока = РасшифровкаПлатежаПоСсылке.Найти(СтрокаТаблицы.бит_КлючСтроки, "бит_КлючСтроки");
				Если НайденнаяСтрока = Неопределено Тогда
					СтрокаТаблицы.бит_НоваяСтрока = Истина;
				КонецЕсли; 
			КонецЕсли; 		
		КонецЦикла; 
	КонецЕсли; 
	
	РаспределениеБюджетаПустая = РаспределениеБюджета.Количество() = 0;
	СформироватьРаспределениеБюджетаПередЗаписью(РасшифровкаПлатежа, РаспределениеБюджета, Источник);
	
	Если ЕстьРасшифровкаПлатежа Тогда
		Источник.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);
	КонецЕсли; 
	Источник.бит_РаспределениеБюджета.Загрузить(РаспределениеБюджета);

	РежимЗаполнения = Константы.бит_РежимАвтоЗаполненияАналитик.Получить();
	Режимы = Перечисления.бит_РежимыАвтоЗаполненияАналитик;
	Заполнять = НЕ (РежимЗаполнения = Режимы.НеЗаполнять);
	
	Если ЭтоНовый Тогда
		Если РежимЗаполнения <> Режимы.НеЗаполнять Тогда
			// Источик может быть получен "при формировании платежных документов" из обработок
			// или при интерактивном вводе (копирование в т.ч.).
			// В первом случае заполнение доп. аналитик ТЧ выполняется предварительно и делать ничего не нужно.
			// Во втором случае ТЧ пустая.		
			// Что бы не заполнять повторно, сравниваем размер полученной таблицы с ее исходным размером.
			// Если в "РасшифровкаПлатежа" одна строка, ее заполнять не нужно, аналитик идут из "шапки".
			Если Источник.РасшифровкаПлатежа.Количество() > 1 Тогда
				Если РаспределениеБюджетаПустая <> (РаспределениеБюджета.Количество() = 0) Тогда
					бит_МеханизмДопИзмерений.ЗаполнитьДополнительныеАналитикиПоУмолчанию(
						Источник, Неопределено, Ложь, Истина);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗапретитьПерезаполнение = бит_МеханизмДопИзмерений.ПолучитьЗначениеДополнительногоПарамераОбъекта(
			Источник.Ссылка, "ЗапретитьПерезаполнениеАналитик");
		
		Если НЕ ЗапретитьПерезаполнение И РежимЗаполнения = Режимы.ЗаполнятьВсегда Тогда
			// Заполнение аналитик в строках "распределения", связанных с новыми строками "Расшифровки".
			НоваяРасшифровка = РасшифровкаПлатежа.Скопировать(Новый Структура("бит_НоваяСтрока", Истина));
			
			Если НоваяРасшифровка.Количество() <> 0 Тогда
				бит_МеханизмДопИзмерений.ЗаполнитьДополнительныеАналитикиПоУмолчанию(
					Источник, Неопределено, Ложь, Истина);
			КонецЕсли; 
		КонецЕсли; 	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик подписки "бит_ОбработкаПроведенияПлатежногоДокумента".
// См.  Синтакс-помощник: ДокументОбъект.ОбработкаПроведения().
//
Процедура бит_ОбработкаПроведенияПлатежногоДокумента(Источник, Отказ, РежимПроведения, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли; 			
	
	// Движения по документам, откорректировнным вручную не формируем.
	Если бит_ОбщегоНазначения.РучнаяКорректировка(Источник) Тогда	
		Возврат;	
	КонецЕсли;
	
	Если НЕ НужноОтразитьДвижениеДенежныхСредствПоФакту(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// Настройки программы
	СтруктураПараметров = Новый Структура;
	ЕстьОрганизация 	= ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Источник.Метаданные());
	Если ЕстьОрганизация Тогда
	 	СтруктураПараметров.Вставить("Организация", Источник.Организация);
	КонецЕсли;  
	
	ОписаниеНастроек   = ПланыВидовХарактеристик.бит_НастройкиПрограммы;
	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Источник.Дата, ,СтруктураПараметров, "Ошибки");	
	
	// Проверим необходимость формирования факта.
	ФормироватьФактАвтоматически = НЕ бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, 
		ОписаниеНастроек.НеФормироватьДвиженияПоФактуАвтоматически);
					
	Если НЕ ФормироватьФактАвтоматически Тогда
		Возврат;	
	КонецЕсли; 	
	
	ТаблицаДДС = ПодготовитьТаблицуДвижениеДенежныхСредствПоФакту(Источник.Ссылка);	
	
	// Для вида операции КомиссияБанка, документа СписаниеСРасчетногоСчета
	// было решено заполнить реквзит Контрагент для движений из шапки документа.
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда 
		Если Источник.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
			Для Каждого Строка из ТаблицаДДС Цикл
				Строка.Контрагент = Источник.Контрагент;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьДвиженияДвиженияДенежныхСредствПоФакту(Источник, ТаблицаДДС, ЗаписыватьДвижения);
	
КонецПроцедуры

// Обработчик подписки "бит_ПриКопированииПлатежногоДокументаБП".
// См.  Синтакс-помощник: ДокументОбъект.ПриКопировании().
//
Процедура бит_ПриКопированииПлатежногоДокументаБП(Источник, ОбъектКопирования) Экспорт

	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// При копировании очищаем таблицу распределения по бюджету. 
	// Заполнение таблицы распределения организовано "при записи". 
	// См. бит_Казначейство.бит_ПередЗаписьюПлатежногоДокументаБП().
	
	// Начиная с 44.6 НЕ очищаем.
	// Источник.бит_РаспределениеБюджета.Очистить();

КонецПроцедуры
 
#КонецОбласти 

#Область ПроцедурыИФункцииПоСозданиюИЗаполнениюСводныхДокументовОплаты

// Конструктор параметров метода "СоздатьДокументыОплатыВФоне".
// 
// Возвращаемое значение:
//  Параметры - структура.
//
Функция НовыеПараметрыФормированияПлатежныхДокументов() Экспорт

	Параметры = Новый Структура; 
	Параметры.Вставить("ДеревоДокументов",Неопределено);
	Параметры.Вставить("НеФормироватьПлатежныеПоручения",Ложь);
	Параметры.Вставить("НеФормироватьДокументыОплаты", Ложь);
	Параметры.Вставить("ПроводитьДокументыОплаты", Ложь);
	Параметры.Вставить("ПроводитьПлатежныеПоручения", Ложь);
	Параметры.Вставить("ПлатежныеПозиции", Новый Массив());
	Параметры.Вставить("СуммаКОплате", 0);
	Параметры.Вставить("СуммаПлатежныхПозиций", 0);
	Параметры.Вставить("ВалютаПлатежа", Справочники.Валюты.ПустаяСсылка());
	Параметры.Вставить("СуммаВВалютеПлатежа", Ложь);
	Параметры.Вставить("ОбъединятьНазначенияПлатежей", Ложь);
	Параметры.Вставить("ДатаОплаты", ТекущаяДатаСеанса());
	Параметры.Вставить("РежимСообщений", "Ошибки");
	Параметры.Вставить("РежимЗаписи", "Запись");
	Параметры.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	
	Возврат Параметры;
	
КонецФункции
 
// Процедура выполняет создание сводного платежного документа по данным платежных позиций.
// 
// Параметры:
//  ПлатежныеПозиции    - Массив - содержит значения типа ДокументСсылка.бит_ПлатежнаяПозиция.
//  ПараметрыФормирования - см. бит_Казначейство.НовыеПараметрыФормированияПлатежныхДокументов(). 
//  
Функция СформироватьДокументыОплаты(ПлатежныеПозиции, ПараметрыФормирования) Экспорт
	РеквизитыПозиций 			= Документы.бит_ПлатежнаяПозиция.РеквизитыДокумента(ПлатежныеПозиции);
	ПараметрыРасшифровкиПлатежа = Документы.бит_ПлатежнаяПозиция.ПараметрыРасшифровкиПлатежа(ПлатежныеПозиции);
	
	НастройкиИзмерений = Неопределено;
	ПараметрыФормирования.Свойство("НастройкиИзмерений", НастройкиИзмерений);
	
	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли;
		
	Результат = Новый Массив;
	РежимСообщений 	   = ПараметрыФормирования.РежимСообщений;
	ВыводитьОшибки     = РежимСообщений = "Все" ИЛИ РежимСообщений = "Ошибки";
	ВыводитьИнформацию = РежимСообщений = "Все";
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Перед созданием выполним проверки
	ЕстьОшибки = Ложь;
			
	// Выполним необходимые проверки и заполним таблицу с данными по платежным позициям.
	Для Каждого ПлатежнаяПозиция Из РеквизитыПозиций Цикл
		Если НЕ ПлатежнаяПозиция.Проведен Тогда
			Если ВыводитьОшибки Тогда
				ТекстСообщения = НСтр("en='You can not create a payment document on the basis of failure to payment position: %1';ru='Нельзя создать платежный документ на основании непроведенной платежной позиции: %1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ПлатежнаяПозиция.Представление); 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПлатежнаяПозиция.Ссылка,,,ЕстьОшибки); 	
			КонецЕсли; 
		КонецЕсли;
		
		// +СБ. Широков Николай. 2015-01-29. Консультация #1244
		//НайденныйДокумент = НайтиПлатежныйДокументПоПлатежнойПозиции(ПлатежнаяПозиция.Ссылка);
		//Если НайденныйДокумент <> Неопределено Тогда
		//	Если ВыводитьОшибки Тогда
		//		ТекстСообщения = Нстр("ru = 'На основании платежной позиции %1 уже создан платежный документ: %2'");
		//		ТекстСообщения = СтрШаблон(ТекстСообщения, ПлатежнаяПозиция.Представление, НайденныйДокумент); 
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, НайденныйДокумент,,,ЕстьОшибки);
		//	КонецЕсли; 
		//КонецЕсли;
		// -СБ. Широков Николай		
		
		Если ЕстьОшибки Тогда
			Продолжить;		
		КонецЕсли; 
	КонецЦикла;	
		
	ТаблицаОбщихРеквизитов = ОбщиеРеквизитыПлатежныхПозиций(РеквизитыПозиций);
	
	// Если значения ключевых реквизитов в платежных позициях различаются, значит нельзя создать сводный платежный документ.
	Если НЕ ТаблицаОбщихРеквизитов.Количество() = 1 Тогда
		ТекстСообщения = НСтр("en = 'Различаются ключевые реквизиты платежных позиций.
							 |Выбранные платежные позиции не могут быть оплачены сводным платежным документом.';
							 |ru = 'Различаются ключевые реквизиты платежных позиций.
							 |Выбранные платежные позиции не могут быть оплачены сводным платежным документом.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,ЕстьОшибки); 
	КонецЕсли;	
	
	Если ЕстьОшибки Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбщиеРеквизиты 		 = ТаблицаОбщихРеквизитов[0];
	ФормаОплатыОснование = ОбщиеРеквизиты.ФормаОплаты;
	
	// Дополнить структуру параметров передачи данными шапок документов.
	Для Каждого Колонка Из ТаблицаОбщихРеквизитов.Колонки Цикл
		ПараметрыФормирования.Вставить(Колонка.Имя, ОбщиеРеквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ПлатежноеПоручение = Неопределено;	
	ДокПлатежка		   = Неопределено;
	
	Если ФормаОплатыОснование = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда

		// Создадим и заполним платежное поручение.
		Если НЕ ОбщиеРеквизиты.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.СнятиеНаличных Тогда
			Попытка
				ПлатежноеПоручение = СформироватьПлатежноеПоручение(РеквизитыПозиций, 
					ПараметрыРасшифровкиПлатежа, ПараметрыФормирования);
			Исключение
				ПлатежноеПоручение = Неопределено;
				НеФормироватьПлатежныеПоручения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормирования, 
													"НеФормироватьПлатежныеПоручения", Ложь);
				Если НеФормироватьПлатежныеПоручения Тогда
					ТекстСообщения = СтрШаблон(НСтр("en='Not able to prepare data for filling the payment document for a reason:%1';ru='Не удалось подготовить данные для заполнения платежного документа по причине: %1'"),
										КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Иначе	
					ТекстСообщения = СтрШаблон(НСтр("en='It failed to create a payment order for a reason:%1';ru='Не удалось сформировать платежное поручение по причине: %1'") ,
										КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли; 
				ВызватьИсключение ТекстСообщения; 
			КонецПопытки; 
		КонецЕсли; 
		
		Если ПараметрыФормирования.НеФормироватьДокументыОплаты = Ложь 
		 ИЛИ ПараметрыФормирования.ПроводитьДокументыОплаты Тогда
			ДокПлатежка = Документы.СписаниеСРасчетногоСчета.СоздатьДокумент();
		КонецЕсли; 
		
	ИначеЕсли ФормаОплатыОснование = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда	
		
		Если ПараметрыФормирования.НеФормироватьДокументыОплаты = Ложь 
		 ИЛИ ПараметрыФормирования.ПроводитьДокументыОплаты Тогда
			Если РеквизитыПозиций.Количество() = 1 Тогда
				ДокПлатежка = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			Иначе
				
				ТекстСообщения = НСтр("en = 'Для формы оплаты ""Наличные"" создание сводного документа оплаты не предусмотрено.';
								 	 |ru = 'Для формы оплаты ""Наличные"" создание сводного документа оплаты не предусмотрено.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДокПлатежка = Неопределено Тогда
		ЗаполнитьПлатежныйДокумент(ДокПлатежка, РеквизитыПозиций, ПараметрыРасшифровкиПлатежа, ПлатежноеПоручение, ПараметрыФормирования);
		ДокПлатежка.ДополнительныеСвойства.Вставить("бит_НеЗаполнятьАналитикиПоУмолчанию", Истина);
		
		ДокПлатежка.Записать(РежимЗаписиДокумента.Запись);
		Если ВыводитьИнформацию Тогда
			ТекстСообщения = НСтр("en = 'Записан документ %1.';
							 	 |ru = 'Записан документ %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ДокПлатежка.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокПлатежка.Ссылка);
		КонецЕсли;  
		
		// Запишем регистр сведений бит_ДополнительныеАналитики	.
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",ДокПлатежка.Ссылка);
		// +СБ. Широков Николай. 2015-01-23. Консультация #1244
		//ДополнительныеАналитики = бит_ОбщегоНазначения.ПрочитатьНаборАналитики(Отбор);
		ДополнительныеАналитики = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьНаборЗаписей();
		ДополнительныеАналитики.Отбор.Объект.Установить(ДокПлатежка.Ссылка);
		// -СБ. Широков Николай
		
		// Дополнительнче аналитики заполняются всегда, не зависимо от режима "Константы.бит_РежимАвтоЗаполненияАналитик".
		ДополнительныеАналитики.Очистить();
		РеквизитыШапки = РеквизитыПозиций[0];
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(ДополнительныеАналитики, ДокПлатежка.Ссылка,"ПлатежнаяПозиция"    ,РеквизитыШапки.Ссылка);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(ДополнительныеАналитики, ДокПлатежка.Ссылка,"Проект"              ,РеквизитыШапки.Проект);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(ДополнительныеАналитики, ДокПлатежка.Ссылка,"СтатьяОборотов"      ,РеквизитыШапки.СтатьяОборотов);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(ДополнительныеАналитики, ДокПлатежка.Ссылка,"ЦФО"                 ,РеквизитыШапки.ЦФО);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(ДополнительныеАналитики, ДокПлатежка.Ссылка,"НоменклатурнаяГруппа",РеквизитыШапки.НоменклатурнаяГруппа);				
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(ДополнительныеАналитики, ДокПлатежка.Ссылка,"Контрагент"          ,РеквизитыШапки.Контрагент);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(ДополнительныеАналитики, ДокПлатежка.Ссылка,"ДоговорКонтрагента"  ,РеквизитыШапки.ДоговорКонтрагента);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(ДополнительныеАналитики, ДокПлатежка.Ссылка,"БанковскийСчет"      ,РеквизитыШапки.БанковскийСчетОрганизация);
		// +СБ. Широков Николай. 2014-09-25. ТЗ "Казначейство" 2.2.7.2. !!!Временное решение переделать в ходе оптимизации!!!
		//ДопРеквизит_ПрофильРазноски = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ДопРеквизит_ПрофильРазноски");
		//ДопРеквизит_Инициатор 		= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ДопРеквизит_Инициатор");
		ДопРеквизит_Инициатор 		= ПараметрыФормирования.ДопРеквизит_Инициатор;
		//бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики,ДокПлатежка.Ссылка, ДопРеквизит_ПрофильРазноски	,ПлатежнаяПозиция.ДокументОснование.СБ_ПрофильРазноски);
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(ДополнительныеАналитики,ДокПлатежка.Ссылка, ДопРеквизит_Инициатор			,ПлатежнаяПозиция.ДокументОснование.СБ_Инициатор);
		// -СБ. Широков Николай
		
		ДокОснование = РеквизитыШапки.ДокументОснование;
		
		Для Каждого ТекущаяНастройка ИЗ НастройкиИзмерений Цикл
			Если бит_РаботаСМетаданными.ЕстьРеквизит(ТекущаяНастройка.Ключ, ДокОснование.Метаданные())
				И ЗначениеЗаполнено(ДокОснование[ТекущаяНастройка.Ключ]) Тогда
				бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(ДополнительныеАналитики, ДокПлатежка.Ссылка,
				ТекущаяНастройка.Значение.Аналитика, ДокОснование[ТекущаяНастройка.Ключ]);
			КонецЕсли;
		КонецЦикла;		
		ДополнительныеАналитики.Записать();

		ДополнительныеПараметры = Новый Структура("ЗапретитьПерезаполнениеАналитик", Истина);
		бит_МеханизмДопИзмерений.ЗаписатьДополнительныеПараметрыОбъекта(ДокПлатежка.Ссылка, 
			ДополнительныеПараметры);

		// При необходимости попытаемся провести.
		Если ПараметрыФормирования.ПроводитьДокументыОплаты Тогда
			Если ДокПлатежка.ПроверитьЗаполнение() Тогда
				Попытка
					ДокПлатежка.Записать(РежимЗаписиДокумента.Проведение);
					Если ВыводитьИнформацию Тогда
						ТекстСообщения = НСтр("en = 'Проведен документ %1.';
										 	 |ru = 'Проведен документ %1.'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, ДокПлатежка.Ссылка);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокПлатежка.Ссылка);
					КонецЕсли;  
				Исключение
					ТекстСообщения = НСтр("en = 'Ошибка при проведении документа %1 по причине: %2';
									 	 |ru = 'Ошибка при проведении документа %1 по причине: %2'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ДокПлатежка.Ссылка, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));  
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокПлатежка.Ссылка);
				КонецПопытки;
			Иначе	
				ТекстСообщения = НСтр("en = 'Ошибка при проверке заполнения документа %1.';
								 	 |ru = 'Ошибка при проверке заполнения документа %1.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ДокПлатежка.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокПлатежка.Ссылка);
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТипЗнч(ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Результат.Добавить(ПлатежноеПоручение);	
	КонецЕсли; 
	Если ДокПлатежка <> Неопределено Тогда
		Результат.Добавить(ДокПлатежка.Ссылка);	
	КонецЕсли; 
	
	// +СБ. Широков Николай. 2014-09-25. ТЗ "Казначейство" 2.2.7.2. !!!Временное решение, переделать в ходе оптимизации!!!
	СБ_КазначействоСервер.УстановитьЗначениеСвойстваОбъекта(Результат
		//, СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Свойство_СрокИсполнения")
		, ПараметрыФормирования.Свойство_СрокИсполнения
		, ПлатежнаяПозиция.ДокументОснование.СБ_СрокИсполнения
		);
	// -СБ. Широков Николай	
	
	Возврат Результат;
	
КонецФункции

// Метод фонового задания по созданию документов оплаты.
//
// Параметры:
//  ПараметрыФормирования	 - Струкруктура	- см. "НовыеПараметрыФормированияПлатежныхДокументов".
//  АдресВХранилище			 - Строка - адрес во временном хранилище, полученная методом ПоместитьВоВременноеХранилище(<Данные>, <Адрес>). 
//
Процедура СоздатьДокументыОплатыВФоне(ПараметрыФормирования, АдресВХранилище) Экспорт
	
	ПлатежныеПозиции = ПараметрыФормирования.ПлатежныеПозиции;							
	НовыеДокументы = Новый СписокЗначений; 
	ДобавленоДокументов = 0;
	Если НЕ ПлатежныеПозиции.Количество() = 0 Тогда
		Для каждого ПлатежнаяПозиция Из ПлатежныеПозиции Цикл
			ПараметрыФормирования.СуммаКОплате = 0;
			ПлатежныеДокументы = СформироватьДокументыОплаты(ПлатежнаяПозиция, ПараметрыФормирования);
			Для каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
				НовыеДокументы.Добавить(ПлатежныйДокумент);
			КонецЦикла; 
		КонецЦикла; 		
			
		ДобавленоДокументов = НовыеДокументы.Количество();
	КонецЕсли;	
	
	Результат = Новый Структура; 
	Результат.Вставить("Сообщения", 	ПолучитьСообщенияПользователю(Истина));
	Результат.Вставить("Выполнено", 	ДобавленоДокументов <> 0);
	Результат.Вставить("НовыеДокументы",НовыеДокументы);
	
	ПоместитьВоВременноеХранилище(Результат, АдресВХранилище); 
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляЗаполненияДокументовПоОснованию

// Функция проверяет возможность заполнения текущего документа по основанию.
// 
// Параметры:
//  Объект	   				- ДокументОбъект.
//  Основание  				- Документ, на основании которого производится заполнение.
//  ИмяДокументаДляПроверки - Строка.
// 
// Возвращаемое значение:
//   Разрешено   - Булево.
// 
Функция ПроверитьВозможностьЗаполненияДокументаПоОснованию(Объект, Основание, ИмяДокументаДляПроверки) Экспорт

	Разрешено = Истина;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-17 (#3423)
	Если Объект.ДополнительныеСвойства.Свойство("СозданоОбработкой_ФормированиеЗнРДС")
		И Объект.ДополнительныеСвойства.СозданоОбработкой_ФормированиеЗнРДС = Истина Тогда
	
		Возврат Разрешено;
	
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-17 (#3423)
	
	// Проверка типа документа основания
	Если (Основание = Неопределено) ИЛИ Не Объект.Метаданные().Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		ВызватьИсключение НСтр("en='Putting on the basis of not supported.';ru='Ввод на основании не поддерживается.'");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьВозможностьЗаполненияДокументаПоОснованию()

// Функция записывает дополнительные аналитики в таблицу.
// 
// Параметры:
// 	 Объект 		     - ДокументОбъект.
//   ДокументОснование   - ДокументСсылка.
//   мНастройкиИзмерений - Соответствие.
// 	 ИмяТабЧасти         - Строка.
// 
// Возвращаемое значение:
//   ТаблицаАналитик   - ТаблицаЗначений
// 						Колонки: Имя, Значение .
// 
Функция ЗаполнитьТаблицуАналитик(Объект, ДокументОснование, мНастройкиИзмерений, ИмяТабЧасти = Неопределено) Экспорт

	МетаданныеДокумента = Объект.Метаданные();
	
	ТаблицаАналитик = Новый ТаблицаЗначений;
	ТаблицаАналитик.Колонки.Добавить("Имя");
	ТаблицаАналитик.Колонки.Добавить("Значение");
   		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ДокументОснование); 
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_ДополнительныеАналитики.Аналитика,
	|	бит_ДополнительныеАналитики.ЗначениеАналитики
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|ГДЕ
	|	бит_ДополнительныеАналитики.Объект = &Объект
	|";
    ВыборкаАн = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаАн.Следующий() Цикл

		Если ЗначениеЗаполнено(ВыборкаАн.ЗначениеАналитики) Тогда
			
			Имя = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПолучитьИмяПредопределенного(ВыборкаАн.Аналитика);
			
			// Заполнение основных аналитик
			Если ИмяТабЧасти = Неопределено Тогда
				ЕстьРеквизит = бит_РаботаСМетаданными.ЕстьРеквизит(Имя, МетаданныеДокумента);
			Иначе	
				ЕстьРеквизит = бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(Имя, МетаданныеДокумента, ИмяТабЧасти);
			КонецЕсли;
			
			Если Не ПустаяСтрока(Имя) И ЕстьРеквизит Тогда
				НоваяСтрокаАналитик  			= ТаблицаАналитик.Добавить();
				НоваяСтрокаАналитик.Имя 		= Имя;
				НоваяСтрокаАналитик.Значение 	= ВыборкаАн.ЗначениеАналитики;
			КонецЕсли;	
			
			// Заполнение реквизитов: Аналитика_1, Аналитика_2, Аналитика_3, Аналитика_4.
			Для каждого Настройка Из мНастройкиИзмерений Цикл
	    		Если Настройка.Значение.Аналитика = ВыборкаАн.Аналитика Тогда
					НоваяСтрокаАналитик  			= ТаблицаАналитик.Добавить();
					НоваяСтрокаАналитик.Имя 		= Настройка.Ключ;
					НоваяСтрокаАналитик.Значение 	= ВыборкаАн.ЗначениеАналитики;
				КонецЕсли; 
     		КонецЦикла; 

		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ТаблицаАналитик;
	
КонецФункции // ЗаполнитьТаблицуАналитик()

// Функция формирует текст запроса для получения сумм, сумм НДС, ставки НДС документа основания.
// 
// Параметры:
//  Основание  - ДокументСсылка.
// 
// Возвращаемое значение:
//   Результат запроса.
// 
Функция ПолучитьРезультатЗапросаПоСуммам(Основание) Экспорт
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
		ИЛИ ТипОснования = Тип("ДокументОбъект.РеализацияОтгруженныхТоваров") Тогда
		ДокументЗаполнения = Основание.ДокументОтгрузки;
	Иначе
		ДокументЗаполнения = Основание.Ссылка;
	КонецЕсли;
	
	МетаЗаполнения = ДокументЗаполнения.Метаданные();
	ИмяДокумента   = МетаЗаполнения.Имя;
	НДССверху      = (МетаЗаполнения.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено)
						И (НЕ ДокументЗаполнения.СуммаВключаетНДС);
	
	// Получим ставку НДС для всего документа
	Если МетаЗаполнения.Реквизиты.Найти("СтавкаНДС") <> Неопределено Тогда
		ШапкаСтавкаНДС = ДокументЗаполнения.СтавкаНДС;
	ИначеЕсли МетаЗаполнения.Реквизиты.Найти("СтавкаНДСВознаграждения") <> Неопределено Тогда	
	    ШапкаСтавкаНДС = ДокументЗаполнения.СтавкаНДСВознаграждения;
	Иначе
		ШапкаСтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
	ТЧИсточникиЗаполнения = Новый СписокЗначений;
	ТЧИсточникиЗаполнения.Добавить("Товары");
	ТЧИсточникиЗаполнения.Добавить("Услуги");
	ТЧИсточникиЗаполнения.Добавить("АгентскиеУслуги");
	ТЧИсточникиЗаполнения.Добавить("Оборудование");
	ТЧИсточникиЗаполнения.Добавить("ОсновныеСредства");
	ТЧИсточникиЗаполнения.Добавить("ОбъектыСтроительства");	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-23 (#3842)
	ТЧИсточникиЗаполнения.Добавить("РасшифровкаПлатежа");	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-23 (#3842)
	
	ТекстЗапроса = "";
	Для каждого ТЧДокумента Из МетаЗаполнения.ТабличныеЧасти Цикл
		
		ИмяТЧ = ТЧДокумента.Имя;
		Если ТЧИсточникиЗаполнения.НайтиПоЗначению(ИмяТЧ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыТЧ = ТЧДокумента.Реквизиты;
		
		ТекстЗапросаТЧ =
		"ВЫБРАТЬ
		|	&ПолеСуммаВключаяНДС КАК Сумма,
		|	&ПолеСтавкаНДС КАК СтавкаНДС,
		|	&ПолеСуммаНДС  КАК СуммаНДС
		|ИЗ
		|	&ТабличнаяЧастьИсточник КАК ТабличнаяЧастьИсточник
		|ГДЕ
		|	ТабличнаяЧастьИсточник.Ссылка = &ДокументЗаполнения";
		
		ТекстЗапросаТЧ = СтрЗаменить(ТекстЗапросаТЧ, "&ТабличнаяЧастьИсточник", "Документ." + ИмяДокумента + "." + ИмяТЧ);
		
		ТекстПоляСумма = "ТабличнаяЧастьИсточник.Сумма";
		Если НДССверху Тогда
			ТекстПоляСумма = ТекстПоляСумма + " + ТабличнаяЧастьИсточник.СуммаНДС";
		КонецЕсли;
		Если РеквизитыТЧ.Найти("СуммаСкидки") <> Неопределено Тогда
			ТекстПоляСумма = ТекстПоляСумма + " - ТабличнаяЧастьИсточник.СуммаСкидки";
		КонецЕсли;
		ТекстЗапросаТЧ = СтрЗаменить(ТекстЗапросаТЧ, "&ПолеСуммаВключаяНДС", ТекстПоляСумма); 
		
		Если РеквизитыТЧ.Найти("СтавкаНДС") = Неопределено Тогда
			ТекстЗапросаТЧ = СтрЗаменить(ТекстЗапросаТЧ, "&ПолеСтавкаНДС", "&ШапкаСтавкаНДС");
		Иначе
			ТекстЗапросаТЧ = СтрЗаменить(ТекстЗапросаТЧ, "&ПолеСтавкаНДС", "ТабличнаяЧастьИсточник.СтавкаНДС");
		КонецЕсли;
		
		Если РеквизитыТЧ.Найти("СуммаНДС") = Неопределено Тогда
			ТекстЗапросаТЧ = СтрЗаменить(ТекстЗапросаТЧ, "&ПолеСуммаНДС", "0");
		Иначе
			ТекстЗапросаТЧ = СтрЗаменить(ТекстЗапросаТЧ, "&ПолеСуммаНДС", "ТабличнаяЧастьИсточник.СуммаНДС");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаТЧ;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
    |ПО
	|	СтавкаНДС";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументЗаполнения", ДокументЗаполнения);
	Запрос.УстановитьПараметр("ШапкаСтавкаНДС", ШапкаСтавкаНДС);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСПеречнемДокументовНаОплату

// Функция инициализирует схему компановки данных для перечня документов на оплату
// (используется для документа бит_РеестрПлатежей и обработки бит_ФормированиеПлатежныхДокументов).
// 
// Параметры:
//  Компоновщик - КомпоновщикНастроекКомпоновкиДанных.
// 
// Возращаемое значение:
//  Строка - адрес СКД.
// 
Функция ПолучитьДляПеречняДокументовАдресСКД(Компоновщик) Экспорт
   	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("бит_ПереченьДокументовНаОплату");

	бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СхемаКомпоновкиДанных, 
		"ПереченьДокументов", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));

	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции // ПолучитьДляПеречняДокументовАдресСКД()

// Функция получает запрос схемы компановки данных для перечня документов на оплату.
// 
// Параметры:
//  АдресСКД      - Строка
//  Компоновщик   - КомпоновщикНастроекКомпоновкиДанных
//  ПериодРасхода - СтандартныйПериод - период.
// 
// Возращаемое значение:
//  Запрос.
// 
Функция ПолучитьДляПеречняДокументовЗапросСКД(АдресСКД, Компоновщик, ПериодРасхода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);

	// Выполняем компановку макета МакетСКД
	// (настройки берутся из схемы компановки данных и из пользовательских настроек).
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки());
	
	// Заполняем параметры макета компановки данных.
	МакетСКД.ЗначенияПараметров.ДатаНачала.Значение    = ПериодРасхода.ДатаНачала;
	МакетСКД.ЗначенияПараметров.ДатаОкончания.Значение = ПериодРасхода.ДатаОкончания;
	МакетСКД.ЗначенияПараметров.ПустаяДата.Значение    = Дата('00010101');           
	
	// Получаем запрос макета компановки данных
	Запрос = Новый Запрос(МакетСКД.НаборыДанных.ПереченьДокументов.Запрос);
	
	// Устанавливаем параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Запрос;
	
КонецФункции // ПолучитьДляПеречняДокументовЗапросСКД()

// Функция получает массив статей согласно настройкам установленных для ЦФО.
// в регистре сведений "бит_ПринадлежностьСтатейОборотов".
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
Функция ПолучитьСписокСтатейПоПринадлежности(СтруктураПараметров) Экспорт
	
	// Дата для проверки фильтрации статей оборотов , Тип - Дата.
    Перем Дата;
	// Дата для проверки фильтрации статей оборотов , Тип - СправочникСсылка.Подразделения.
    Перем ЦФО;
	// Дата для проверки фильтрации статей оборотов , Тип - СправочникСсылка.Организации.
    Перем Организация;
	
	СписокСтатейОборотов = Неопределено;
	
    // Проверим наличие обязательных параметров 
    // Для выполнения отбора.
    Если СтруктураПараметров.Свойство("Дата")
        И СтруктураПараметров.Свойство("ЦФО") Тогда
        
        // Заполним значения переменных из структуры отбора.
        СтруктураПараметров.Свойство("Дата"       , Дата);
        СтруктураПараметров.Свойство("ЦФО"        , ЦФО);
        СтруктураПараметров.Свойство("Организация", Организация);
        
        // Если фильтровать, тогда
        Если ФильтрацияСтатейОборотовПоПринадлежностиВключена(Дата, Организация,ЦФО) Тогда
            
            СписокСтатейОборотов = Новый СписокЗначений;
            
            // Получаем статьи оборотов для которых установлено текущее ЦФО.
            Запрос = Новый Запрос;
            Запрос.УстановитьПараметр("ЦФО", ЦФО);
            
            Запрос.Текст = 
            "ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |   ПринадлежностьСтатейОборотов.СтатьяОборотов
            |ИЗ
            |   РегистрСведений.бит_ПринадлежностьСтатейОборотов КАК ПринадлежностьСтатейОборотов
            |ГДЕ
            |   ПринадлежностьСтатейОборотов.ЦФО = &ЦФО
            |   // %ОтборПоРасходДоход%
            |   // %ОтборПоТипуСтатьи%";
            
            Если СтруктураПараметров.Свойство("РасходДоход") Тогда
                Запрос.УстановитьПараметр("РасходДоход", СтруктураПараметров.РасходДоход);
                Запрос.Текст = СтрЗаменить(Запрос.Текст, "// %ОтборПоРасходДоход%", "И ПринадлежностьСтатейОборотов.СтатьяОборотов.РасходДоход = &РасходДоход");
            КонецЕсли;
            
            Если СтруктураПараметров.Свойство("ТипСтатьи") Тогда
                Запрос.УстановитьПараметр("ТипСтатьи", СтруктураПараметров.ТипСтатьи);
                Запрос.Текст = СтрЗаменить(Запрос.Текст, "// %ОтборПоТипуСтатьи%", "И ПринадлежностьСтатейОборотов.СтатьяОборотов.ТипСтатьи = &ТипСтатьи");
            КонецЕсли;
            
            РезультатЗапроса = Запрос.Выполнить();
            
            Если Не РезультатЗапроса.Пустой() Тогда
                
                ВыборкаЗапроса = РезультатЗапроса.Выбрать();
                Пока ВыборкаЗапроса.Следующий() Цикл
                    СписокСтатейОборотов.Добавить(ВыборкаЗапроса.СтатьяОборотов);
                КонецЦикла;
                
			Иначе
				
				Если СтруктураПараметров.Свойство("ВыводитьСообщения") И СтруктураПараметров.ВыводитьСообщения Тогда
					
					ТекстСообщения = "";
					// Иначе список пуст, поясним пользователю причину.
					Если Не ЗначениеЗаполнено(ЦФО) Тогда
						ТекстСообщения = ТекстСообщения 
										+ НСтр("en = 'Не заполнено значение реквизита ""ЦФО"".';
											   |ru = 'Не заполнено значение реквизита ""ЦФО"".'") + Символы.ПС;
					КонецЕсли;
					ТекстСообщения = ТекстСообщения 
								   + СтрШаблон(НСтр("en = 'Для ЦФО ""%1"" не установлены статьи оборотов в регистре сведений ""Принадлежность статей оборотов"".';
							  	   				   |ru = 'Для ЦФО ""%1"" не установлены статьи оборотов в регистре сведений ""Принадлежность статей оборотов"".'"), ЦФО);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
				КонецЕсли; 
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
	
	Возврат СписокСтатейОборотов;
	
КонецФункции

// Функция проверяет наличие включенной настройки программы "ФильтрацияСтатейОборотовПоПринадлежности".
// 
// Параметры:
//  Дата                     - Дата - на которую необходимо получить настройку.
//  СтруктурноеПодразделение - СправочникСсылка.Организации - подразделение.
//  ЦФО                      - СправочникСсылка.бит_ЦФО - ЦФО.
// 
// Возвращаемое значение:
//  Включена - Булево.
// 
Функция ФильтрацияСтатейОборотовПоПринадлежностиВключена(Дата, СтруктурноеПодразделение = Неопределено,ЦФО = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",СтруктурноеПодразделение);
	СтруктураПараметров.Вставить("ЦФО",ЦФО);
	
    НастройкиПрограммыБИТ = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Дата,, СтруктураПараметров, "Ошибки");	
    ПолучаемаяНастройка   = ПланыВидовХарактеристик.бит_НастройкиПрограммы.ФильтроватьСтатьиОборотовПоПринадлежности;
    
    // Получим значение настройки.
    Включена = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммыБИТ, ПолучаемаяНастройка);
    
    Возврат Включена;
    
КонецФункции // ФильтрацияСтатейОборотовПоПринадлежностиВключена()

// Функция проверяет допустимость использования статьи оборотов 
// исходя из ТипаСтатьи и направления РасходДоход.
// 
// Параметры:
//  СтруктураПараметров  - Структура
//                           СтатьяОборотов - СправочникСсылка.СтатьиОборотов - Обязательный ключ.
//                           РасходДоход    - ПеречислениеСсылка.бит_РасходДоход.
//                           ТипСтатьи      - ПеречислениеСсылка.бит_ТипыСтатейОборотов.
//                           ВыводитьСообщения - Булево.
// 
// Возвращаемое значение:
//   флСтатьяКорректна   - Булево.
// 
Функция СтатьяОборотовКорректна(СтруктураПараметров)  Экспорт

	флСтатьяКорректна = Истина;	
	ТекстСообщения    = "";
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СтатьяОборотов) Тогда
	
		Если СтруктураПараметров.Свойство("РасходДоход") Тогда
		
			Если НЕ СтруктураПараметров.СтатьяОборотов.РасходДоход = СтруктураПараметров.РасходДоход Тогда
				ТекстСообщения = ТекстСообщения
							   + СтрШаблон(НСтр("en = 'Направление ""%1"" недопустимо в данном контексте.';
				  	 			 				|ru = 'Направление ""%1"" недопустимо в данном контексте.'"), СтруктураПараметров.РасходДоход) 
							   + Символы.ПС;
	
				флСтатьяКорректна = Ложь;
			КонецЕсли; // 
		КонецЕсли; // Проверяем РасходДоход
		
		Если СтруктураПараметров.Свойство("ТипСтатьи") Тогда
		
			Если НЕ СтруктураПараметров.СтатьяОборотов.ТипСтатьи = СтруктураПараметров.ТипСтатьи Тогда
				
				ТекстСообщения = ТекстСообщения
							  + СтрШаблон(НСтр("en = 'Тип статьи ""%1"" недопустим в данном контексте.';
								 			   |ru = 'Тип статьи ""%1"" недопустим в данном контексте.'"), СтруктураПараметров.ТипСтатьи);
				флСтатьяКорректна = Ложь;
			КонецЕсли; 
		КонецЕсли; // Проверяем  ТипСтатьи
		
		Если СтруктураПараметров.Свойство("ВыводитьСообщения") И СтруктураПараметров.ВыводитьСообщения Тогда
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			    ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.СтатьяОборотов"); 
			КонецЕсли; 
		КонецЕсли; // Нужно вывести сообщения пользователю
	КонецЕсли; // Заполнена СтатьяОборотов

	Возврат флСтатьяКорректна;
	
КонецФункции // СтатьяОборотовКорректна()

#КонецОбласти

#Область УстановкаПодменюВыбораВидыОперацииЗаявки

// Процедура Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции 
// объектов метаданных, соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одна команда.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа.
// 
// Параметры:
//  УправляемаяФорма			  - УправляемаяФорма.
//  ГруппаФормыПодменю			  - ГруппаФормы - Подменю, которое надо заполнить.
//  ОбъектЗаполнения 			  - Коллекция для заполнения пунктов подменю. 
//  ОбъектОбработкиВыбораОперации - Действие, которое надо выполнить при выборе любого пункта подменю.
//  Исключения                    - Соответстие, ключ: имя подменю, 
// 												 значение: массив исключений для данного пункта подменю.
// 
Процедура УстановитьПодменюВыбораВидаОперацииЗаявкиУправляемоеПриложение(УправляемаяФорма
																		,ГруппаФормыПодменю
																		,ОбъектЗаполнения
																		,ОбъектОбработкиВыбораОперации
																		,Исключения = Неопределено) Экспорт
	
	Если Не ТипЗнч(Исключения) = Тип("Соответствие") Тогда
		Исключения = Новый Соответствие;
	КонецЕсли;
	
	// Получим имя документа по списанию денежных средств со счета.
	ИмяДокументаПоСписаниюДС = бит_ОбщегоНазначения.ПолучитьИмяДокументаПоСписаниюДС();
	
	СоответствиеКонтроль = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл(ИмяДокументаПоСписаниюДС);								
	ЗаполнитьПодменюВЗаявкеУправляемоеПриложение(УправляемаяФорма
												,ГруппаФормыПодменю
												,"Безналичные"
												,НСтр("en='Cash-In-Bank';ru='Безналичные'")
												,СоответствиеКонтроль
												,ОбъектЗаполнения
												,ОбъектОбработкиВыбораОперации
												,Исключения);
	
	СоответствиеКонтроль = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл("РасходныйКассовыйОрдер");
	ЗаполнитьПодменюВЗаявкеУправляемоеПриложение(УправляемаяФорма
												,ГруппаФормыПодменю
												,"Наличные"
												,НСтр("en='Cash-On-Hand';ru='Наличные'")
												,СоответствиеКонтроль
												,ОбъектЗаполнения
												,ОбъектОбработкиВыбораОперации
												,Исключения);

КонецПроцедуры // УстановитьПодменюВыбораВидаОперацииЗаявкиУправляемоеПриложение()

#КонецОбласти

#Область РегламентныеЗадания

Процедура бит_АктуализироватьКурсыЗаявок() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ЗаявкаНаРасходованиеСредств.Ссылка
	               |ИЗ
	               |	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	               |ГДЕ
	               |	бит_ЗаявкаНаРасходованиеСредств.АвтоматическиАктуализироватьКурсы = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка
	               |ИЗ
	               |	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая КАК бит_ЗаявкаНаРасходованиеСредствОбщая
	               |ГДЕ
	               |	бит_ЗаявкаНаРасходованиеСредствОбщая.АвтоматическиАктуализироватьКурсы = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.АктуализироватьПоКурсам("Ошибки");
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Считывает таб. часть РасшифровкаПлатежа документа.
// 
// Параметры:
//  Объект		 				  - ОбработкаОбъект.
//  ОбъектСсылка 				  - ДокументСсылка.
//  РежимГрупповогоРедактирования - Булево.
// 
Процедура ПрочитатьРасшифровкуПлатежа(Объект, ОбъектСсылка, РежимГрупповогоРедактирования = Ложь) Экспорт

	Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Возврат;	
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда	
		Возврат;	
	КонецЕсли;
	
	Если НЕ РежимГрупповогоРедактирования Тогда
		Объект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;

	ДокументыСРасшифровкой = бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ДокументыСРасшифровкой();
	ЕстьРасшифровкаПлатежа = Ложь;
	Если ДокументыСРасшифровкой.Найти(ТипЗнч(ОбъектСсылка)) <> Неопределено Тогда
		ВидОперации 		   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВидОперации");
		ЕстьРасшифровкаПлатежа = бит_ОбщегоНазначенияПереопределяемый.ЕстьРасшифровкаПлатежа(ОбъектСсылка, ВидОперации);	
	КонецЕсли; 
	
	Если НЕ ЕстьРасшифровкаПлатежа Тогда
		Возврат;	
	КонецЕсли; 
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.НомерСтроки КАК ИДСтроки,
	|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтрокиДокумента,
	|	РасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасшифровкаПлатежа.Сделка КАК Сделка,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежа.бит_КлючСтроки КАК бит_КлючСтроки,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-21 (#3066)
	|	//ок_СтатьяОборотовБДР
	|	//СтатьяДвиженияДенежныхСредств
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-21 (#3066)	
	|	РасшифровкаПлатежа.Ссылка КАК Документ,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	НЕОПРЕДЕЛЕНО КАК СчетНаОплату,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	#РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &ТекущийОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";
	
	МетаданныеСсылки = ОбъектСсылка.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа;
	ЕстьСчетНаОплату = ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетНаОплату", МетаданныеСсылки);
	Если ЕстьСчетНаОплату Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НЕОПРЕДЕЛЕНО КАК СчетНаОплату",
			"СчетНаОплату КАК СчетНаОплату");
	КонецЕсли; 
	
	Путь = ОбъектСсылка.Метаданные().ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РасшифровкаПлатежа", Путь + ".РасшифровкаПлатежа");			   
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийОбъект", ОбъектСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-21 (#3066)
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ок_СтатьяОборотовБДР", ?(бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти("ок_СтатьяОборотовБДР", ОбъектСсылка.Метаданные(), "РасшифровкаПлатежа"),
																		"РасшифровкаПлатежа.ок_СтатьяОборотовБДР,", ""));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"//СтатьяДвиженияДенежныхСредств", ?(бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти("СтатьяДвиженияДенежныхСредств", ОбъектСсылка.Метаданные(), "РасшифровкаПлатежа"),
																		"РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,", ""));
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-21 (#3066)
	
	Результат 	 = Запрос.Выполнить();
	Выборка   	 = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа.Добавить(),
			Выборка);	
	КонецЦикла;
	
КонецПроцедуры

Функция ПустоеЗначениеЗаявкаНаРасходованиеСредств() Экспорт

	Возврат Документы.бит_ЗаявкаНаРасходованиеСредств.ПустаяСсылка();	

КонецФункции
 
// Функция - Выполняет проверку на корректность ввода даты расхода в заявке и общей заявке.
// 
// Параметры:
//  ДатаРасхода  - Дата
//  СтруктураПараметров  - Структура
//  ВыводитьСообщения    - Булево - выводить ли.
// 
// Возвращаемое значение:
//  ДатаКорректна - Булево.
// 
Функция ДатаРасходаКорректна(СтруктураПараметров,ВыводитьСообщения=Ложь)  Экспорт

	ДатаКорректна = Истина;
	ТекстСообщения = "";
	
	Если СтруктураПараметров.Свойство("ДатаДокумента") Тогда
		Если СтруктураПараметров.ДатаРасхода < НачалоДня(СтруктураПараметров.ДатаДокумента) Тогда
			ТекстСообщения = НСтр("en = 'Дата расхода не может быть ранее даты документа.';
							 	 |ru = 'Дата расхода не может быть ранее даты документа.'");
			ДатаКорректна  = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ДатаКорректна И ВыводитьСообщения Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
	
	Возврат ДатаКорректна;

КонецФункции

// Функция выполняет проверку крайней даты платежа 
// на превышение даты расхода в заявке или  даты прихода в документе "ПланируемоеПоступлениеДенежныхСредств".
// 
//  Параметры:
//      СтруктураПараметров  - Структура
//      ВыводитьСообщения    - Булево - выводить ли.
// 
// Возвращаемое значение:
//   Позже   - Булево.
// 
Функция ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров,ВыводитьСообщения=Ложь)  Экспорт

	Позже = Ложь;
	ТекстСообщения = "";
		
	Если СтруктураПараметров.Дата > СтруктураПараметров.ДатаПлатежаКрайняя Тогда
		ТекстСообщения = НСтр("en = 'Крайняя дата %1 не может быть ранее даты %2.';
						 	 |ru = 'Крайняя дата %1 не может быть ранее даты %2.'");
		Если СтруктураПараметров.ВидДаты = "Дата поступления" Тогда
			ТекстСообщения = СтрШаблон(ТекстСообщения,"", НСтр("en = 'поступления';|ru = 'поступления'"));
		Иначе
			ТекстСообщения = СтрШаблон(ТекстСообщения,НСтр("en = 'платежа';|ru = 'платежа'"),
									НСтр("en = 'расхода';|ru = 'расхода'"));
		КонецЕсли; 
		Позже = Истина;
	 КонецЕсли; 
	  
	Если Позже И ВыводитьСообщения Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
	
	Возврат Позже;
	
КонецФункции

// Функция выполняет проверку на корректность ввода даты поступления 
// Документе "бит_ПланируемоеПоступлениеДенежныхСредств".
// 
// Параметры:
//  ДатаРасхода  - Дата
//  СтруктураПараметров  - Структура
//  ВыводитьСообщения    - Булево - выводить.
// 
// Возвращаемое значение:
//  ДатаКорректна - Булево.
// 
Функция ДатаПоступленияКорректна(СтруктураПараметров,ВыводитьСообщения=Ложь)  Экспорт

	ДатаКорректна = Истина;
	ТекстСообщения = "";
	
	Если СтруктураПараметров.Свойство("ДатаДокумента") Тогда
		Если СтруктураПараметров.ДатаПоступления < НачалоДня(СтруктураПараметров.ДатаДокумента) Тогда
			ТекстСообщения = НСтр("en = 'Дата поступления не может быть ранее даты документа.';
							 	 |ru = 'Дата поступления не может быть ранее даты документа.'") ;
			ДатаКорректна  = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ДатаКорректна И ВыводитьСообщения Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
	
	Возврат ДатаКорректна;

КонецФункции // ДатаПоступленияКорректна()

// Функция - Формирует текст, содержащий информацию о расчетном счете.
// 
// Параметры:
//  РасчетныйСчет  - СправочниСсылка.БанковскиеСчета - счет.
// 
// Возвращаемое значение:
//   ТекстИфн   - строка.
// 
Функция СформироватьИнформациюОРасчетномСчете(РасчетныйСчет) Экспорт
	ТекстИнф = "";
	Если  ЗначениеЗаполнено(РасчетныйСчет) Тогда
		ТекстИнф = "р/с: "+РасчетныйСчет.НомерСчета+Символы.ПС+Символы.ПС
		         + "Банк: "+Строка(РасчетныйСчет.Банк)+Символы.ПС;
		Если  ЗначениеЗаполнено(РасчетныйСчет.Банк) Тогда
			ТекстИнф = ТекстИнф+"к/с: "+Строка(РасчетныйСчет.Банк.КоррСчет)+Символы.ПС
			+"БИК: "+РасчетныйСчет.Банк.Код;
		КонецЕсли; 
	КонецЕсли;
	Возврат ТекстИнф;	
КонецФункции // СформироватьИнформациюОРС()

// Функция формирует таблицу с остатками по строкам табличной части заявки.
// 
// Параметры:
//  Заявка  - ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств
//  ПлатежнаяПозиция  - ДокументСсылка.бит_ПлатежнаяПозиция - позиции.
// 
// Возвращаемое значение:
//   ТаблицаОстатков   - ТаблицаЗначений.
// 
Функция ПолучитьОстаткиПоСтрокамРаспределения(Заявка,ПлатежнаяПозиция) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ПлатежнаяПозицияРаспределение.ИД КАК ИД,
	|	СУММА(бит_ПлатежнаяПозицияРаспределение.Сумма) КАК Сумма
	|ПОМЕСТИТЬ СуммыПП
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
	|ГДЕ
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДокументОснование = &Заявка
	|	И бит_ПлатежнаяПозицияРаспределение.Ссылка <> &Ссылка
	|	И бит_ПлатежнаяПозицияРаспределение.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ПлатежнаяПозицияРаспределение.ИД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ИД КАК ИД,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НомерСтроки КАК НомерСтроки,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ЦФО КАК ЦФО,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Проект КАК Проект,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Сумма КАК СуммаЗаявки,
	|	ЕСТЬNULL(СуммыПП.Сумма, 0) КАК СуммаПП,
	|	ЕСТЬNULL(бит_ЗаявкаНаРасходованиеСредствРаспределение.Сумма, 0) - ЕСТЬNULL(СуммыПП.Сумма, 0) КАК Сумма,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтавкаНДС КАК СтавкаНДС
    //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-20 (#3446)
    |	,бит_ЗаявкаНаРасходованиеСредствРаспределение.НДС
    //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-20 (#3446)	
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыПП КАК СуммыПП
	|		ПО бит_ЗаявкаНаРасходованиеСредствРаспределение.ИД = СуммыПП.ИД
	|ГДЕ
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка = &Заявка
	|	И ЕСТЬNULL(бит_ЗаявкаНаРасходованиеСредствРаспределение.Сумма, 0) - ЕСТЬNULL(СуммыПП.Сумма, 0) > 0";
	
	Запрос.УстановитьПараметр("Заявка",Заявка);
	Запрос.УстановитьПараметр("Ссылка",ПлатежнаяПозиция);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОстатков;
	
КонецФункции

// Функция определяет очередность платежа по виду операции заявки на расходование средств.
// 
// Параметры:
//  ВидОперации - ПеречислениеСсылка.бит_ВидыОперацийЗаявкаНаРасходование - виды операций.
// 
// Возвращаемое значение:
//   ОчередностьПлатежа  - Число
//   ДатаРасхода - Дата.
// 
Функция ОпределитьОчередностьПлатежа(ВидОперации, ДатаРасхода) Экспорт
	
	Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалога Тогда
		Если ДатаРасхода >= '20131214' Тогда
			ОчередностьПлатежа = 5;
		Иначе	
			ОчередностьПлатежа = 4;
		КонецЕсли;		
	ИначеЕсли ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП Тогда
		ОчередностьПлатежа = 3;
	Иначе
		Если ДатаРасхода >= '20131214' Тогда
			ОчередностьПлатежа = 5;
		Иначе	
			ОчередностьПлатежа = 6;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ОчередностьПлатежа;
	
КонецФункции // ОпределитьОчередностьПлатежа()

// Функция проверяет возможность использования банковского счета  в платежной позиции.
// 
// Параметры:
//  БанковскийСчет  - СправочникСсылка.БанковскиеСчета
//  ВалютаДокумента - СправочникСсылка.Валюта
//  РасчетыВУЕ      - Булево
//  Владелец		- СправочникСсылка.БанковскиеСчета/СправочникСсылка.Организации/
//  				/СправочникСсылка.ФизическиеЛица - владельцы.
// 
// Возвращаемое значение:
//   РезСчет   - СправочникСсылка.БанковскиеСчета.
// 
Функция ПроверитьБанковскийСчетПоУмолчанию(БанковскийСчет,ВалютаДокумента,РасчетыВУЕ, Владелец=Неопределено) Экспорт

	РезСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();												
		
		
		Если ВалютаДокумента = ВалютаРегл Тогда
			ВалютаОтбора = ВалютаРегл;
		Иначе	
			Если РасчетыВУЕ Тогда
				ВалютаОтбора = ВалютаРегл;
			Иначе	
				ВалютаОтбора = ВалютаДокумента;
			КонецЕсли;
		КонецЕсли; 
		
		Если БанковскийСчет.ВалютаДенежныхСредств = ВалютаОтбора Тогда
			
			РезСчет = БанковскийСчет;
			
		КонецЕсли; 
		
	// Изменение кода. Начало. 27.07.2016{{
	// Если заполнен только один счет в списке, но не определен как основной.
	ИначеЕсли ЗначениеЗаполнено(Владелец) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	БанковскиеСчета.Ссылка КАК БанковскийСчет
		               |ИЗ
		               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		               |ГДЕ
		               |	БанковскиеСчета.Владелец = &Владелец
		               |	И БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаДенежныхСредств";
		
		Запрос.УстановитьПараметр("ВалютаДенежныхСредств"	, ВалютаДокумента);
		Запрос.УстановитьПараметр("Владелец"				, Владелец);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество()=1 Тогда
		
			РезСчет = Результат[0].БанковскийСчет;
		
		КонецЕсли; 
			
	КонецЕсли; 
	// Изменение кода. Конец. 27.07.2016}}
	
	Возврат РезСчет;

КонецФункции // ПроверитьБанковскийСчетПоУмолчанию()

// Функция определяет валюту платежа в зависимости от валюты и признака РасчетыВУЕ.
// 
// Параметры:
//  Валюта      - СправочникСсылка.Валюты
//  РасчетыВУЕ  - Булево
//  ВалютаРегл  - СправочникСсылка.Валюты - валюта регл.
// 
// Возвращаемое значение:
//   ВалютаПлатежа   - СправочникСсылка.Валюты.
// 
Функция ОпределитьВалютуПлатежа(ВалютаДокумента,РасчетыВУЕ,ВалютаРегл)  Экспорт

	Если ВалютаДокумента = ВалютаРегл Тогда
		ВалютаПлатежа = ВалютаРегл;
	Иначе	
		Если РасчетыВУЕ Тогда
			ВалютаПлатежа = ВалютаРегл;
		Иначе	
			ВалютаПлатежа = ВалютаДокумента;
		КонецЕсли;
	КонецЕсли; 

   Возврат ВалютаПлатежа;
КонецФункции // ОпределитьВалютуПлатежа()

// Функция проверяет вхождение вида операции заявки в переданном массиве видов типовых операций.
// 
// Параметры:
//  ВидОперации			- ПеречислениеСсылка.бит_ВидыОперацийЗаявкаНаРасходование.
//  МассивВидовОпераций	- Массив.
//  ФормаОплаты 		- ПеречислениеСсылка.бит_ВидыДенежныхСредств.
// 
// Возвращаемое значение:
//  ОперацияВходитВМассив - Булево.
// 
Функция ОперацияЗаявкиВходитВМассивВидовТиповыхОпераций(ВидОперации
													   ,МассивВидовОпераций
													   ,ФормаОплаты) Экспорт
	
	// Получим имя документа для получения соответствия типовой операции - операции заявки.
	Если ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда
		ИмяДокумента = "РасходныйКассовыйОрдер";
	Иначе
		
		// Получим имя документа по списанию денежных средств со счета.
		ИмяДокумента = бит_ОбщегоНазначения.ПолучитьИмяДокументаПоСписаниюДС();
		
	КонецЕсли;
	
	// Получим соответствие видов операции.
	СоответствиеДляПоиска = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл(ИмяДокумента);
	ТиповойВидОперации	  = СоответствиеДляПоиска.Получить(ВидОперации);
	
	ОперацияВходитВМассив = ?(МассивВидовОпераций.Найти(ТиповойВидОперации) = Неопределено, Ложь, Истина);
		
	Возврат ОперацияВходитВМассив;
	
КонецФункции // ОперацияЗаявкиВходитВМассивВидовТиповыхОпераций()

// Процедура заполняет дополнительные аналитики из платежной позиции.
// 
// Параметры:
//  ДокСсылка  		   - ДокументСсылка.*
//  ПлатежнаяПозиция   - ДокументСсылка.бит_ПлатежнаяПозиция
//  НастройкиИзмерений - Структура (По умолчанию = Неопределено)
//  РежимСообщений 	   - Строка (По умолчанию = "Нет").
// 
Процедура ЗаполнитьДополнительныеАналитиикПоПланируемомуПоступлению(НаборЗаписейАналитики
																	, ДокСсылка
																	, ПланируемоеПоступление
																	, НастройкиИзмерений = Неопределено
																	, РежимСообщений = "Нет") Экспорт

	Если НастройкиИзмерений = Неопределено Тогда
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	КонецЕсли;
	
	// Очистим набор записей от значений заполненных по умолчанию.
	НаборЗаписейАналитики.Очистить();
	
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "ПланируемоеПоступлениеДенежныхСредств", ПланируемоеПоступление);
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "ЦФО"                 , ПланируемоеПоступление.ЦФО);
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "СтатьяОборотов"      , ПланируемоеПоступление.СтатьяОборотов);
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "Проект"              , ПланируемоеПоступление.Проект);		
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "НоменклатурнаяГруппа", ПланируемоеПоступление.НоменклатурнаяГруппа);				
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "Контрагент"          , ПланируемоеПоступление.Контрагент);
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "ДоговорКонтрагента"  , ПланируемоеПоступление.ДоговорКонтрагента);
	бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, "БанковскийСчет"      , ПланируемоеПоступление.БанковскийСчет);
	
	МетаданныеДокумента = ПланируемоеПоступление.Метаданные();
	
	Для Каждого ТекущаяНастройка ИЗ НастройкиИзмерений Цикл
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ТекущаяНастройка.Ключ, МетаданныеДокумента)
			И ЗначениеЗаполнено(ПланируемоеПоступление[ТекущаяНастройка.Ключ]) Тогда
			
			бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики
														, ДокСсылка
														, ТекущаяНастройка.Значение.Аналитика
														, ПланируемоеПоступление[ТекущаяНастройка.Ключ]);
														
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДополнительныеАналитиикПоПланируемомуПоступлению()

// Процедура заполняет структуру дополнительных аналитик из платежной позиции.
// 
// Параметры:
//  ПлатежныйДокумент  - ДокументСсылка.*
//  ПлатежнаяПозиция   - ДокументСсылка.бит_ПлатежнаяПозиция
//  НастройкиИзмерений - Структура (По умолчанию = Неопределено)
//  РежимСообщений 	   - Строка (По умолчанию = "Нет") - режимы.
// 
// ВозвращаемоеЗначение - Соответствие.
//
Функция ПолучитьДополнительныеАналитикиШапкиПоПлатежнойПозиции(ПлатежныйДокумент, ПлатежнаяПозиция, 
			НастройкиИзмерений = Неопределено, РежимСообщений = "Нет") Экспорт

	АналитикиШапки = Новый Соответствие;														
															
	МетаданныеПлатежногоДок = ПлатежныйДокумент.Метаданные();
	МассивРеквизитов = Новый Массив;
    Если МетаданныеПлатежногоДок.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
        Для каждого Реквизит Из МетаданныеПлатежногоДок.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты Цикл   		
		    МассивРеквизитов.Добавить(Реквизит.Имя);	
	    КонецЦикла;    
    КонецЕсли;	
    Если МетаданныеПлатежногоДок.ТабличныеЧасти.Найти("бит_РаспределениеБюджета") <> Неопределено Тогда
        Для каждого Реквизит Из МетаданныеПлатежногоДок.ТабличныеЧасти.бит_РаспределениеБюджета.Реквизиты Цикл   		
		    МассивРеквизитов.Добавить(Реквизит.Имя);	
	    КонецЦикла;    
    КонецЕсли;	
	
	Контрагент 		   = Неопределено;
	ДоговорКонтрагента = Неопределено;
	
	// Если заявка списком, тогда в шапке не заполняем аналитики, которые есть в строках табличной части заявки.
	ЗаявкаСписком = ПлатежнаяПозиция.ДокументОснование.Распределение.Количество() > 1;
	//ЗаявкаСписком = ПлатежнаяПозиция.ДокументОснованиеРаспределение.Количество() > 1;
	
	АналитикиШапки.Вставить("ПлатежнаяПозиция", ПлатежнаяПозиция.Ссылка);
	
	Если ПлатежнаяПозиция.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПрочееСписаниеБезналичныхДенежныхСредств
		И ЗначениеЗаполнено(ПлатежнаяПозиция.СчетУчетаБУ) Тогда

		Для Сч = 1 По 3 Цикл
			ЗначСубконто = ПлатежнаяПозиция["Субконто" + Сч];
			Если ЗначениеЗаполнено(ЗначСубконто) Тогда
				Если ТипЗнч(ЗначСубконто) = Тип("СправочникСсылка.Контрагенты") Тогда
					Контрагент = ЗначСубконто;
				КонецЕсли; 
				
				Если ТипЗнч(ЗначСубконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					ДоговорКонтрагента = ЗначСубконто;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		АналитикиШапки.Вставить("Контрагент", Контрагент);
	Иначе
		АналитикиШапки.Вставить("Контрагент", ПлатежнаяПозиция.Контрагент);
	КонецЕсли; 
		
	Если ЗаявкаСписком Тогда
		// ++ NB ???????
		Если МассивРеквизитов.Найти("бит_Проект") = Неопределено Тогда		
			АналитикиШапки.Вставить("Проект", ПлатежнаяПозиция.Проект);
		КонецЕсли; 
		Если МассивРеквизитов.Найти("бит_СтатьяОборотов") = Неопределено Тогда
			АналитикиШапки.Вставить("СтатьяОборотов", ПлатежнаяПозиция.СтатьяОборотов);
		КонецЕсли; 
		Если МассивРеквизитов.Найти("бит_ЦФО") = Неопределено Тогда
			АналитикиШапки.Вставить("ЦФО", ПлатежнаяПозиция.ЦФО);
		КонецЕсли; 
		Если МассивРеквизитов.Найти("бит_НоменклатурнаяГруппа") = Неопределено Тогда
			АналитикиШапки.Вставить("НоменклатурнаяГруппа", ПлатежнаяПозиция.НоменклатурнаяГруппа);
		КонецЕсли; 
		Если МассивРеквизитов.Найти("ДоговорКонтрагента") = Неопределено Тогда
			АналитикиШапки.Вставить("ДоговорКонтрагента", ПлатежнаяПозиция.ДоговорКонтрагента);
		КонецЕсли; 
	Иначе	
		АналитикиШапки.Вставить("Проект", 				ПлатежнаяПозиция.Проект);
		АналитикиШапки.Вставить("СтатьяОборотов", 		ПлатежнаяПозиция.СтатьяОборотов);
		АналитикиШапки.Вставить("ЦФО", 					ПлатежнаяПозиция.ЦФО);
		АналитикиШапки.Вставить("НоменклатурнаяГруппа", ПлатежнаяПозиция.НоменклатурнаяГруппа);
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			АналитикиШапки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		Иначе
			АналитикиШапки.Вставить("ДоговорКонтрагента", ПлатежнаяПозиция.ДокументОснование.ДоговорКонтрагента);
		КонецЕсли; 
	КонецЕсли; 
		
	АналитикиШапки.Вставить("БанковскийСчет", ПлатежнаяПозиция.БанковскийСчетОрганизация);
		
	ДокОснование 		= ПлатежнаяПозиция.ДокументОснование;
	МетаданныеДокумента = ДокОснование.Метаданные();
	
	Если НЕ ЗаявкаСписком Тогда
		Если НастройкиИзмерений = Неопределено Тогда
			НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
		КонецЕсли;

		Для Каждого ТекущаяНастройка ИЗ НастройкиИзмерений Цикл
			Если бит_РаботаСМетаданными.ЕстьРеквизит(ТекущаяНастройка.Ключ, МетаданныеДокумента)
				И ЗначениеЗаполнено(ДокОснование[ТекущаяНастройка.Ключ]) Тогда  				
				АналитикиШапки.Вставить(ТекущаяНастройка.Значение.Аналитика, ДокОснование[ТекущаяНастройка.Ключ]);																		
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат АналитикиШапки;
	
КонецФункции

// Процедура заполняет дополнительные аналитики из платежной позиции.
// 
// Параметры:
//  НаборЗаписейАналитики - НаборЗаписей
//  ДокСсылка          	  - ДокументСсылка.*
//  АналитикиШапки  	  - Соответствие.
// 
Процедура ЗаполнитьДополнительныеАналитикиПоПлатежнойПозиции(НаборЗаписейАналитики
															, ДокСсылка
															, АналитикиШапки) Экспорт

	// Очистим набор записей от значений заполненных по умолчанию
	НаборЗаписейАналитики.Очистить();
	
	Для каждого КлЗнч Из АналитикиШапки Цикл
		бит_ОбщегоНазначения.ДобавитьЗаписьАналитик(НаборЗаписейАналитики, ДокСсылка, КлЗнч.Ключ, КлЗнч.Значение);
	КонецЦикла; 
		
КонецПроцедуры // ЗаполнитьДополнительныеАналитикиПоПлатежнойПозиции()

// Функция выполняет валютные пересчеты из валюты ПлатежнойПозиции в валюту платежа. 
// Пересчеты выполняются с учетом условий расчета курсов в ПлатежнойПозиции. 
// Используется в процедуре заполнения платежного документа.
// 
// Параметры:
//  СуммаКОплате  - Сумма.
//  ПлатежнаяПозиция  - ДокументСсылка.бит_ПлатежнаяПозиция.
//  ДокПлатежка       - ДокументОбъект.ПлатежноеПоручениеИсходящее,ДокументОбъект.РасходныйКассовыйОрдер.
// 
// Возвращаемое значение:
//  СуммаПлатежа  - Число.
// 
Функция ПересчитатьСуммуПлатежаПоВалюте(СуммаКОплате,ПлатежнаяПозиция,СтруктураПараметров)  Экспорт

	СуммаПлатежа = СуммаКОплате;
	
	Если ПлатежнаяПозиция.ВалютаДокумента = СтруктураПараметров.ВалютаДокумента Тогда
	
		Если ПлатежнаяПозиция.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.ЦБпроц Тогда
			СуммаПлатежа  = СуммаКОплате*(100+ПлатежнаяПозиция.Процент)/100;
		Иначе	
			СуммаПлатежа  = СуммаКОплате;
		КонецЕсли; 
		
	Иначе // Нужен пересчет
		
		СтрКурсаПлатежка     = бит_КурсыВалют.ПолучитьКурсВалюты(СтруктураПараметров.ВалютаДокумента,СтруктураПараметров.Дата);
		СтрКурсаПозиция      = бит_КурсыВалют.ПолучитьКурсВалюты(ПлатежнаяПозиция.ВалютаДокумента,СтруктураПараметров.Дата);
		
		
		Если ПлатежнаяПозиция.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.ЦБ Тогда
			
			СуммаПлатежа = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаКОплате
																			,ПлатежнаяПозиция.ВалютаДокумента
																			,СтруктураПараметров.ВалютаДокумента
																			,СтрКурсаПозиция.Курс
																			,СтрКурсаПлатежка.Курс
																			,СтрКурсаПозиция.Кратность
																			,СтрКурсаПлатежка.Кратность);
			
			
		ИначеЕсли ПлатежнаяПозиция.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.ЦБпроц Тогда
			
			СуммаПлатежа = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаКОплате
																			,ПлатежнаяПозиция.ВалютаДокумента
																			,СтруктураПараметров.ВалютаДокумента
																			,СтрКурсаПозиция.Курс
																			,СтрКурсаПлатежка.Курс
																			,СтрКурсаПозиция.Кратность
																			,СтрКурсаПлатежка.Кратность);
			СуммаПлатежа = СуммаПлатежа*(100+ПлатежнаяПозиция.Процент)/100;																	
			
		ИначеЕсли ПлатежнаяПозиция.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.Оператор Тогда
			
			СуммаПлатежа  = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаКОплате
																			,ПлатежнаяПозиция.ВалютаДокумента
																			,СтруктураПараметров.ВалютаДокумента
																			,ПлатежнаяПозиция.КурсДокумента
																			,СтрКурсаПлатежка.Курс
																			,ПлатежнаяПозиция.КратностьДокумента
																			,СтрКурсаПлатежка.Кратность);
			
		КонецЕсли;	
		
	КонецЕсли; 
	
    Возврат СуммаПлатежа;
КонецФункции // ПересчитатьСуммуПлатежаПоВалюте()

// Функция выполняет поиск платежного(затратного) документа по платежной(расходной) позиции.
// 
// Параметры:
//  ПлатежнаяПозиция  - бит_ПлатежнаяПозиция, бит_РасходнаяПозиция.
// 
// Возвращаемое значение:
// ПлатежныйДокумент   - ДокументСсылка.ПлатежноеПоручениеИсходящее, ДокументСсылка.РасходныйКассовыйОрдер,Неопределено.
// 						ДокументСсылка.ПоступлениеТоваровУслуг, ДокументСсылка.ПоступлениеДопРасходов, ДокументСсылка.АвансовыйОтчет.
// 
Функция НайтиПлатежныйДокументПоПлатежнойПозиции(ПлатежнаяПозиция) Экспорт

	ПлатежныйДокумент = Неопределено;
	
	// Для новой платежной позиции искать документ бессмысленно.
	Если НЕ ЗначениеЗаполнено(ПлатежнаяПозиция) Тогда
		Возврат ПлатежныйДокумент;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ДополнительныеАналитики.Объект КАК Объект,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|ГДЕ
	|	бит_ДополнительныеАналитики.ЗначениеАналитики = &ПлатежнаяПозиция
	|	И ВЫБОР ТИПЗНАЧЕНИЯ(бит_ДополнительныеАналитики.Объект)
	|			КОГДА ТИП(Документ.РасходныйКассовыйОрдер)
	|				ТОГДА НЕ ВЫРАЗИТЬ(бит_ДополнительныеАналитики.Объект КАК Документ.РасходныйКассовыйОрдер).ПометкаУдаления
	|			КОГДА ТИП(Документ.СписаниеСРасчетногоСчета)
	|				ТОГДА НЕ ВЫРАЗИТЬ(бит_ДополнительныеАналитики.Объект КАК Документ.СписаниеСРасчетногоСчета).ПометкаУдаления
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ДокументыМножественнойОплаты.ДокументОплаты,
	|	2
	|ИЗ
	|	РегистрСведений.бит_ДокументыМножественнойОплаты КАК бит_ДокументыМножественнойОплаты
	|ГДЕ
	|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция = &ПлатежнаяПозиция
	|	И ВЫБОР ТИПЗНАЧЕНИЯ(бит_ДокументыМножественнойОплаты.ДокументОплаты)
	|			КОГДА ТИП(Документ.РасходныйКассовыйОрдер)
	|				ТОГДА НЕ ВЫРАЗИТЬ(бит_ДокументыМножественнойОплаты.ДокументОплаты КАК Документ.РасходныйКассовыйОрдер).ПометкаУдаления
	|			КОГДА ТИП(Документ.СписаниеСРасчетногоСчета)
	|				ТОГДА НЕ ВЫРАЗИТЬ(бит_ДокументыМножественнойОплаты.ДокументОплаты КАК Документ.СписаниеСРасчетногоСчета).ПометкаУдаления
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПозицииПоручения.Ссылка,
	|	3
	|ИЗ
	|	Документ.ПлатежноеПоручение.бит_ПлатежныеПозиции КАК ПозицииПоручения
	|ГДЕ
	|	ПозицииПоручения.ПлатежнаяПозиция = &ПлатежнаяПозиция
	|	И НЕ ПозицииПоручения.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
				   
	Запрос.УстановитьПараметр("ПлатежнаяПозиция",ПлатежнаяПозиция);			   
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ПлатежныйДокумент = Выборка.Объект;
	
	КонецЕсли; 
	
    Возврат ПлатежныйДокумент;
КонецФункции // НайтиПлДокументПоПлПозиции()

// Функция получает все платежные позиции по платежному документу
// 	как из дополнительных аналитик, так и из табличной части.
// 
Функция ПолучитьПлатежныеПозицииДокументаОплаты(ДокументОплаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПлатежныйДокумент", ДокументОплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ДополнительныеАналитики.ЗначениеАналитики КАК ПлатежнаяПозиция
	|ПОМЕСТИТЬ ПлатежныеПозиции
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|ГДЕ
	|	бит_ДополнительныеАналитики.Объект = &ПлатежныйДокумент
	|	И бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция
	|ИЗ
	|	РегистрСведений.бит_ДокументыМножественнойОплаты КАК бит_ДокументыМножественнойОплаты
	|ГДЕ
	|	бит_ДокументыМножественнойОплаты.ДокументОплаты = &ПлатежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныеПозиции.ПлатежнаяПозиция
	|ИЗ
	|	ПлатежныеПозиции КАК ПлатежныеПозиции
	|ГДЕ
	|	НЕ ПлатежныеПозиции.ПлатежнаяПозиция = ЗНАЧЕНИЕ(Документ.бит_ПлатежнаяПозиция.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныеПозиции.ПлатежнаяПозиция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПлатежныеПозиции";
	
	Результат = Запрос.Выполнить();
	
	МассивПозиций = Результат.Выгрузить().ВыгрузитьКолонку("ПлатежнаяПозиция");
	
	Возврат МассивПозиций;
	
КонецФункции

// Функция получает статью оборотов из регистра соответствия статей.
// 
// Параметры:
// 	СтатьяОборотов - СправочникСсылка.бит_СтатьиОборотов - статья.
// 
// Возвращаемое значение:
// 	СтатьяРезультат - СправочникСсылка.бит_СтатьиОборотов.
// 
Функция ПолучитьСтатьюСПротивоположнымНаправлением(СтатьяОборотов) Экспорт
	
	СтатьяРезультат = Неопределено;
	
	Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
		
		Направление = СтатьяОборотов.РасходДоход;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СтатьяОборотов"	, СтатьяОборотов);
		Запрос.УстановитьПараметр("Направление"		, Направление); 	
		Запрос.Текст = " 
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяПоступления,
		|	бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяРасходования
		|ИЗ
		|	РегистрСведений.бит_СоответствиеСтатейПоступленияИРасходованияДС КАК бит_СоответствиеСтатейПоступленияИРасходованияДС
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Направление = ЗНАЧЕНИЕ(Перечисление.бит_РасходДоход.Расходование)
		|				ТОГДА бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяРасходования = &СтатьяОборотов
		|			ИНАЧЕ бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяПоступления = &СтатьяОборотов
		|		КОНЕЦ
		|";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
			
		Если Выборка.Следующий() Тогда
			Если Направление = Перечисления.бит_РасходДоход.Поступление Тогда
				СтатьяРезультат = Выборка.СтатьяРасходования;
			Иначе
				СтатьяРезультат = Выборка.СтатьяПоступления;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат СтатьяРезультат;
	
КонецФункции // ПолучитьСтатьюСПротивоположнымНаправлением()

// Функция получает остатки по общей заявке в валюте заявки, регл. учета и упр. учета.
// 
// Параметры:
//  ДокументПланирования  - ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая
//  Момент  - МоментВремени,Дата - момент времени.
// 
// Возвращаемое значение:
//   РезСтруктура   - Структура - Ключи:"Сумма","СуммаРегл","СуммаУпр","СуммаВзаиморасчеты".
// 
Функция ПолучитьОстатокПоДокументуПланирования(ДокументПланирования,Момент=Неопределено) Экспорт

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("Сумма",0);
	РезСтруктура.Вставить("СуммаРегл",0);
	РезСтруктура.Вставить("СуммаУпр",0);
	РезСтруктура.Вставить("СуммаВзаиморасчеты",0);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕстьNull(бит_ПланируемыйРасходДенежныхСредств.СуммаОстаток,0) КАК СуммаОстаток,
	               |	ЕстьNull(бит_ПланируемыйРасходДенежныхСредств.СуммаРеглОстаток,0) КАК СуммаРеглОстаток,
	               |	ЕстьNull(бит_ПланируемыйРасходДенежныхСредств.СуммаУпрОстаток,0) КАК СуммаУпрОстаток,
	               |	ЕстьNull(бит_ПланируемыйРасходДенежныхСредств.СуммаВзаиморасчетыОстаток,0) КАК СуммаВзаиморасчетыОстаток				   
	               |ИЗ
	               |	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Остатки(%УсловиеМомент%, ДокументПланирования = &ДокументПланирования) КАК бит_ПланируемыйРасходДенежныхСредств";
	
	Если ЗначениеЗаполнено(Момент) Тогда
		Запрос.УстановитьПараметр("Момент",Момент);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%УсловиеМомент%","&Момент");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%УсловиеМомент%","");
	КонецЕсли; 	
	
	Запрос.УстановитьПараметр("ДокументПланирования",ДокументПланирования);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		РезСтруктура.Сумма               = Выборка.СуммаОстаток;
		РезСтруктура.СуммаРегл           = Выборка.СуммаРеглОстаток;
		РезСтруктура.СуммаУпр            = Выборка.СуммаУпрОстаток;
		РезСтруктура.СуммаВзаиморасчеты  = Выборка.СуммаВзаиморасчетыОстаток;		
		
	КонецЕсли; 
	
	Возврат РезСтруктура;
 
КонецФункции // ПолучитьОстатокПоОбщейЗаявке()

// Функция формирует список доступных для выбора валют в зависимости от валюты договора. 
// Используется в ЗаявкеНаРасходованиеСредств и ПланируемомПоступленииДенежныхСредств.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект.
// 
// Возвращаемое значение:
//   СписокВалют   - СписокЗначений.
// 
Функция СформироватьСписокДоступныхВалют(ТекущийОбъект) Экспорт

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();	
	СписокВалют = Новый СписокЗначений;	
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ДоговорКонтрагента) Тогда
		
		Валюта = бит_КурсыВалют.ПолучитьВалютуДоговораКонтрагента(ТекущийОбъект.ДоговорКонтрагента);
		Если НЕ Валюта = ТекущийОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			
			СписокВалют.Добавить(ТекущийОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
			
		КонецЕсли; 
		
		СписокВалют.Добавить(Валюта);
		
	Иначе
		
		ВыборкаВалюты = Справочники.Валюты.Выбрать();
		
		Пока ВыборкаВалюты.Следующий() Цикл
			
			СписокВалют.Добавить(ВыборкаВалюты.Ссылка);
			
		КонецЦикла; 
		
	КонецЕсли; 	
	
	Возврат СписокВалют;

КонецФункции // СформироватьСписокДоступныхВалют()

// проверяет доступность установку валюты отличной от руб.
// 
// Параметры:   
//   СтруктураПараметров - Структура
//   ТекущийОбъект 		 - ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств.
// 
Функция ДоступнаТолькоВалютаРеглУчета(СтруктураПараметров = Неопределено, ТекущийОбъект = Неопределено) Экспорт
	// ++ NB Возможно, устарела. см. 
	Если ТекущийОбъект = Неопределено Тогда
		
		Результат = СтруктураПараметров.ЭтоЗарплата 
			Или СтруктураПараметров.ЭтоВыплатаЗПРаботнику 
			Или СтруктураПараметров.ЭтоВыплатаДепонентов 
			Или СтруктураПараметров.ЭтоВыдачаЗаймаРаботнику;
			
	Иначе
		
		ВидОперации = ТекущийОбъект.ВидОперации;		
		Результат = 
			    (ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП)
			Или (ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаЗаработнойПлатыРаботнику)
			Или (ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаДепонентов)
			Или (ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаРаботнику);;
			
	КонецЕсли;              		

	Возврат Результат;
	
КонецФункции // ДоступнаТолькоВалютаРеглУчета()

// Функция формирует структуру параметров, необходимых для управления видимостью доступностью 
// элементов управлени формы заявки и платежной позиции.
// 
// Параметры:
//  ТекущийОбъект  - ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств, ДокументСсылка.бит_ПлатежнаяПозиция - объект.
// 
// Возвращаемое значение:
//   СтруктураПараметров   - Структура.
// 
Функция ПолучитьПараметрыДляУправленияВидимостью(ТекущийОбъект) Экспорт

	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ТекущийОбъект)) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект.Ссылка,
								"ВидОперации, ФормаОплаты, КонтрагентЮрФизЛицо");
	Иначе	
		РеквизитыОбъекта = ТекущийОбъект;
	КонецЕсли; 
	
	ВидОперации 		= РеквизитыОбъекта.ВидОперации;
	ФормаОплаты 		= РеквизитыОбъекта.ФормаОплаты;
	КонтрагентЮрФизЛицо = РеквизитыОбъекта.КонтрагентЮрФизЛицо;
	
	Параметры = Новый Структура(
	"ЭтоБезнал, 
	|ЭтоОплата, ЭтоНалоги, ЭтоПрочее,
	|ЭтоВозвратПокупателю, ЭтоЗарплата, ЭтоПодотчет, ЭтоПодряд, ЭтоПеревод, ЭтоСнятиеНаличных,
	|ЭтоИнкассация, ЭтоРасчетыПоКредитам, ЭтоРасчетыКонтраПрочие,
	|ЭтоВзнос, ЭтоВыплатаДепонентов, ЭтоВыплатаЗПРаботнику, ЭтоВыдачаЗаймаРаботнику, 
	|КонтрагентНеобходим, КонтрагентОбязателен,
	|ДоговорНеобходим, ДоговорОбязателен,
	|ФизическоеЛицоНеобходим, ФизическоеЛицоОбязателен, 
	|ПроверятьПоБюджету,
	|ДоступнаТолькоВалютаРеглУчета, НалогЗаТретьихЛиц, ТретьеЛицоНеобходимо, Дивиденды");
	
	Параметры.ЭтоБезнал = ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
	
	Параметры.ЭтоОплата 				= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику;
	Параметры.ЭтоВозвратПокупателю		= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю;
	Параметры.ЭтоНалоги 				= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалога;
	Параметры.ЭтоВзнос  				= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВзносНаличнымиВБанк;
	Параметры.ЭтоПеревод  				= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПереводНаДругойСчет;
	Параметры.ЭтоПодотчет 				= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику;
	Параметры.ЭтоПодряд 				= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеСотрудникуПоДоговоруПодряда;
	Параметры.ЭтоЗарплата 				= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП;
	Параметры.ЭтоВыплатаЗПРаботнику 	= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаЗаработнойПлатыРаботнику;
	Параметры.ЭтоВыплатаДепонентов 		= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаДепонентов;
	Параметры.ЭтоВыдачаЗаймаРаботнику	= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаРаботнику;
	Параметры.ЭтоСнятиеНаличных  		= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.СнятиеНаличных;
	Параметры.НалогЗаТретьихЛиц  		= ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц;
	
	Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратЗайма
		ИЛИ ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратКредита
		ИЛИ ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаКонтрагенту Тогда
		
		Параметры.ЭтоРасчетыПоКредитам 	= Истина; 
	Иначе
		Параметры.ЭтоРасчетыПоКредитам 	= Ложь;
	КонецЕсли;
	
	ОперацииСФизЛицом = Новый Массив(); 
	ОперацииСФизЛицом.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаЗаработнойПлатыРаботнику);
	ОперацииСФизЛицом.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаДепонентов);
	ОперацииСФизЛицом.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаРаботнику);
	ОперацииСФизЛицом.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику);
	ОперацииСФизЛицом.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеСотрудникуПоДоговоруПодряда);

	ЭтоОперацииСФизЛицом = ОперацииСФизЛицом.Найти(ВидОперации) <> Неопределено;
	
	Параметры.ЭтоРасчетыКонтраПрочие  = ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПрочиеРасчетыСКонтрагентами;
	Параметры.ЭтоИнкассация   		  = ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ИнкассацияДенежныхСредств;
	Параметры.ЭтоПрочее 			  = ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПрочееСписаниеБезналичныхДенежныхСредств;
	Параметры.Дивиденды 			  = ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДивидендов;
	
	// Контрагент
	Параметры.КонтрагентОбязателен =
								Параметры.ЭтоОплата
							ИЛИ Параметры.ЭтоВозвратПокупателю
							ИЛИ Параметры.ЭтоНалоги
							ИЛИ Параметры.ЭтоРасчетыПоКредитам
							ИЛИ Параметры.ЭтоРасчетыКонтраПрочие
							ИЛИ Параметры.НалогЗаТретьихЛиц
							ИЛИ (Параметры.Дивиденды И КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
							
	Параметры.КонтрагентНеобходим =
							Параметры.КонтрагентОбязателен
							ИЛИ Параметры.ЭтоБезнал И (Параметры.ЭтоЗарплата ИЛИ Параметры.ЭтоПрочее);
		
	// Договор контрагента
	Параметры.ДоговорНеобходим =
								Параметры.ЭтоОплата
							ИЛИ Параметры.ЭтоВозвратПокупателю
							ИЛИ Параметры.ЭтоРасчетыПоКредитам
							ИЛИ Параметры.ЭтоРасчетыКонтраПрочие
							ИЛИ Параметры.НалогЗаТретьихЛиц;
	Параметры.ДоговорОбязателен = Параметры.ДоговорНеобходим;
							
	// Физическое лицо
	Параметры.ФизическоеЛицоОбязателен =
						Параметры.ЭтоПодотчет 
						ИЛИ Параметры.ЭтоПодряд 
						ИЛИ Параметры.ЭтоВыплатаЗПРаботнику
						ИЛИ (Параметры.ЭтоВыплатаДепонентов И Параметры.ЭтоБезнал)
						ИЛИ Параметры.ЭтоВыдачаЗаймаРаботнику
						ИЛИ (Параметры.Дивиденды И КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	Параметры.ФизическоеЛицоНеобходим =
							Параметры.ФизическоеЛицоОбязателен;
											
	// Проверять по бюджету
	Параметры.ПроверятьПоБюджету = 
						  НЕ Параметры.ЭтоВзнос 
	                    И НЕ Параметры.ЭтоПеревод 
	                    И НЕ Параметры.ЭтоСнятиеНаличных 
						И НЕ Параметры.ЭтоИнкассация;
						
						
	Параметры.ДоступнаТолькоВалютаРеглУчета = ДоступнаТолькоВалютаРеглУчета(Параметры);
	
	Параметры.ТретьеЛицоНеобходимо = Параметры.НалогЗаТретьихЛиц;
	
	Возврат Параметры;
	
КонецФункции // ПолучитьПараметрыДляУправленияВидимостью()

// Функция получает остатки денежных средств по кассе и по банку и планируемое поступление. 
// На основании результата заполняется табло счетов.
// 
// Параметры:
//  ДатаЗапроса  		- Дата
//  СтруктураОтбор  	- Структура
// 	СтруктураПараметров - Структура
//  ЕстьСправочникКассы - Булево - есть ли такой справочник.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ПолучитьДанныеДляТаблоСчетовКасса(ДатаЗапроса, СтруктураОтбор = Неопределено, СтруктураПараметров = Неопределено, ЕстьСправочникКассы) Экспорт
	
	ИсточникДанныхТабло 				  = Неопределено;
	ПоказыватьСуммуПланируемыхПоступлений = Ложь;
	
	Если СтруктураПараметров = Неопределено Тогда
		ИсточникДанныхТабло = Перечисления.бит_РежимПолученияДанныхТаблоСчетов.ДанныеБухгалтерскогоУчета;
	Иначе
		СтруктураПараметров.Свойство("ИсточникДанныхТабло", ИсточникДанныхТабло);
		СтруктураПараметров.Свойство("ПоказыватьСуммуПланируемыхПоступлений", ПоказыватьСуммуПланируемыхПоступлений);
	КонецЕсли;
	
	Если ИсточникДанныхТабло = Перечисления.бит_РежимПолученияДанныхТаблоСчетов.СведенияОДвиженииДенежныхСредств Тогда
		// Сведения о движении денежных средств
		ТекстЗапроса = ПолучитьТекстЗапросаДляТаблоСчетовПоСведениямОДвиженииДенежныхСредств(ЕстьСправочникКассы);
	Иначе
		// Бухгалтерский учет
		ТекстЗапроса = ПолучитьТекстЗапросаДляТаблоСчетовПоДаннымБухгалтерскогоУчета(ЕстьСправочникКассы, ПоказыватьСуммуПланируемыхПоступлений);
	КонецЕсли;
		
    ПостроительЗапроса = Новый ПостроительЗапроса;
    ПостроительЗапроса.Текст = ТекстЗапроса;
    
    ПостроительЗапроса.Параметры.Вставить("НачалоПериода", 	 НачалоДня(ДатаЗапроса));
	ПостроительЗапроса.Параметры.Вставить("КонецПериода", 	 КонецДня(ДатаЗапроса));
	ПостроительЗапроса.Параметры.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	 
    МассивСчетовБанк = БанковскиеСчетаХозрасчетный();
    ПостроительЗапроса.Параметры.Вставить("МассивСчетовБанк", МассивСчетовБанк);
    
    МассивСчетовКасса = Новый Массив;
    МассивСчетовКасса.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); 		// 50.01
    МассивСчетовКасса.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);		// 50.02
    МассивСчетовКасса.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал); 	// 50.21
    ПостроительЗапроса.Параметры.Вставить("МассивСчетовКасса", МассивСчетовКасса);
	
	// +СБ. Широков Николай. 2014-10-23. Доработка #1091
	ПостроительЗапроса.Параметры.Вставить("РеестрДата", 	СтруктураПараметров.РеестрДата);
	ПостроительЗапроса.Параметры.Вставить("НачалоДня", 		НачалоДня(СтруктураПараметров.РеестрДата));
	ПостроительЗапроса.Параметры.Вставить("РеестрСсылка", 	СтруктураПараметров.РеестрСсылка);
	ПостроительЗапроса.Параметры.Вставить("ДатаЗапроса", 	СтруктураПараметров.РеестрДата);
	// -СБ. Широков Николай	
	
    // Заполним отборы
	Если СтруктураОтбор <> Неопределено Тогда
		бит_ОбщегоНазначения.ДобавитьОтборПостроителяПоСтруктуре(ПостроительЗапроса, СтруктураОтбор, "Организация"		 , ВидСравнения.ВСписке);
		бит_ОбщегоНазначения.ДобавитьОтборПостроителяПоСтруктуре(ПостроительЗапроса, СтруктураОтбор, "Субконто1"		 , ВидСравнения.ВСписке);
		бит_ОбщегоНазначения.ДобавитьОтборПостроителяПоСтруктуре(ПостроительЗапроса, СтруктураОтбор, "ВидДенежныхСредств", ВидСравнения.ВСписке);
		
		Если ЕстьСправочникКассы И ИсточникДанныхТабло = Перечисления.бит_РежимПолученияДанныхТаблоСчетов.СведенияОДвиженииДенежныхСредств Тогда
			бит_ОбщегоНазначения.ДобавитьОтборПостроителяПоСтруктуре(ПостроительЗапроса, СтруктураОтбор, "Кассы" , ВидСравнения.ВСписке);
		Иначе
			бит_ОбщегоНазначения.ДобавитьОтборПостроителяПоСтруктуре(ПостроительЗапроса, СтруктураОтбор, "Валюта", ВидСравнения.ВСписке);
		КонецЕсли; 
	КонецЕсли; 
    
    ПостроительЗапроса.Выполнить();    
    Результат = ПостроительЗапроса.Результат;
	
    Возврат Результат;
    
КонецФункции
 
// Функция получает данные для табло счетов с учетом настроек.
// 
// Параметры:
//  ТаблицаЗаявки  				 		  - ТаблицаЗначений
//  ОтменитьФильтрПоСчетамВТабло 		  - Булево
//  ПоказыватьСуммуПланируемыхПоступлений - Булево
//  ИсточникДанныхТабло 		 		  - ПеречислениеСсылка.бит_РежимПолученияДанныхТаблоСчетов - Источники данных.
//  
// Возвращаемое значение:
//   Результат выполнения запроса.
// 

// +СБ. Широков Николай. 2014-10-23. Доработка #1091
//Функция ПолучитьДанныеДляЗаполненияТаблоСчетов(ТаблицаЗаявки, ОтменитьФильтрПоСчетамВТабло, ПоказыватьСуммуПланируемыхПоступлений, ИсточникДанныхТабло) Экспорт
Функция ПолучитьДанныеДляЗаполненияТаблоСчетов(ТаблицаЗаявки, ОтменитьФильтрПоСчетамВТабло, ПоказыватьСуммуПланируемыхПоступлений, ИсточникДанныхТабло, ДополнительныеПараметры = Неопределено) Экспорт
// -СБ. Широков Николай
	ЕстьСправочникКассы = Метаданные.Справочники.Найти("Кассы") <> Неопределено;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗаявки", ТаблицаЗаявки);
	Запрос.Текст =  
    "ВЫБРАТЬ
    |   ТаблицаЗаявки.Оплачено,
    |   ТаблицаЗаявки.ФормаОплаты,
    |   ТаблицаЗаявки.Организация,
	|	ТаблицаЗаявки.БанковскийСчетОрганизация КАК СчетКасса,
	|   ТаблицаЗаявки.Валюта
    |ПОМЕСТИТЬ ТаблицаЗаявки
    |ИЗ
    |   &ТаблицаЗаявки КАК ТаблицаЗаявки
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |   ТаблицаЗаявки.ФормаОплаты КАК Значение,
    |   ""ВидДенежныхСредств""    КАК ИмяЗначения
    |ИЗ
    |   ТаблицаЗаявки КАК ТаблицаЗаявки
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   ТаблицаЗаявки.Организация,
    |   ""Организация""
    |ИЗ
    |   ТаблицаЗаявки КАК ТаблицаЗаявки
    |
    |ОБЪЕДИНИТЬ ВСЕ
   	|ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   ТаблицаЗаявки.СчетКасса,
    |   ""Субконто1""
    |ИЗ
    |   ТаблицаЗаявки КАК ТаблицаЗаявки
    |ГДЕ
    |   ТаблицаЗаявки.ФормаОплаты = ЗНАЧЕНИЕ (Перечисление.бит_ВидыДенежныхСредств.Безналичные)
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка),
	|   ""Субконто1""
	|
	|ОБЪЕДИНИТЬ ВСЕ		
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|   ТаблицаЗаявки.Валюта,
	|   ""Валюта""
	|ИЗ
	|   ТаблицаЗаявки КАК ТаблицаЗаявки
	|ГДЕ
	|   ТаблицаЗаявки.ФормаОплаты = ЗНАЧЕНИЕ (Перечисление.бит_ВидыДенежныхСредств.Наличные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
	|   ""Валюта""
	|
	|
	|ИТОГИ ПО
    |   ИмяЗначения
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ТаблицаЗаявки";
	
	Если ЕстьСправочникКассы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИТОГИ", "
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|   ТаблицаЗаявки.СчетКасса,
			|   ""Кассы""
			|ИЗ
			|   ТаблицаЗаявки КАК ТаблицаЗаявки
			|ГДЕ
			|   ТаблицаЗаявки.ФормаОплаты = ЗНАЧЕНИЕ (Перечисление.бит_ВидыДенежныхСредств.Наличные)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка),
			|   ""Кассы""
			|
			|ИТОГИ");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();	
	
	Если НЕ Результат.Пустой() Тогда
		СтруктураОтбор = Новый Структура;
	КонецЕсли; 
	
	// Сформируем структуру для выполнения отборов.
	ВыборкаВерх = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВерх.Следующий() Цикл
		
		// В некоторых случаях необходимо увидеть все счета.
		Если ОтменитьФильтрПоСчетамВТабло 
			И (ВыборкаВерх.ИмяЗначения = "Субконто1" 
			ИЛИ  ВыборкаВерх.ИмяЗначения = "Кассы"
			ИЛИ  ВыборкаВерх.ИмяЗначения = "Валюта"
			) Тогда
			 Продолжить;
		КонецЕсли; 
		
		СписокОтбор = Новый СписокЗначений;
		
		Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Если Выборка.Значение <> Неопределено Тогда
				СписокОтбор.Добавить(Выборка.Значение);
			КонецЕсли; 
		КонецЦикла; 
		
		Если СписокОтбор.Количество() > 0 Тогда
			СтруктураОтбор.Вставить(ВыборкаВерх.ИмяЗначения,СписокОтбор);
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Структура параметров
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникДанныхТабло"					, ИсточникДанныхТабло);
	СтруктураПараметров.Вставить("ПоказыватьСуммуПланируемыхПоступлений", ПоказыватьСуммуПланируемыхПоступлений);
	
	// +СБ. Широков Николай. 2014-10-23. Доработка #1091
	Если ДополнительныеПараметры <> Неопределено Тогда
		Для каждого ЭлементСтруктуры Из ДополнительныеПараметры Цикл
			СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	// -СБ. Широков Николай
	
	// Заполним табло счетов
	РезультатТС = бит_Казначейство.ПолучитьДанныеДляТаблоСчетовКасса(ТекущаяДата(), СтруктураОтбор, СтруктураПараметров, ЕстьСправочникКассы);

	Возврат РезультатТС;
	
КонецФункции

// Процедура заполняет описание в дереве ТаблоСчетов. Рекурсивный вызов.
// 
// Параметры:
//  СтрокаВерх  - СтрокаДереваЗначений.
// 
Процедура ЗаполнитьОписаниеВДереве(СтрокаВерх)  Экспорт

	Для каждого СтрокаДерева Из СтрокаВерх.Строки Цикл
		
		Если СтрокаДерева.Уровень() = 0 Тогда
			СтрокаДерева.Описание = Строка(СтрокаДерева.Организация);
		ИначеЕсли СтрокаДерева.Уровень() = 1 Тогда 	
			СтрокаДерева.Описание = Строка(СтрокаДерева.ВидДенежныхСредств);
		Иначе	
			Если СтрокаДерева.ВидДенежныхСредств = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда
				Если бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия() Тогда
					СтрокаДерева.Описание = "Касса ("+Строка(СтрокаДерева.Валюта)+")";
				Иначе
				    СтрокаДерева.Описание = Строка(СтрокаДерева.БанковскийСчет) + "(" + Строка(СтрокаДерева.Валюта) + ")";
				КонецЕсли; 
			Иначе	
				Если ТипЗнч(СтрокаДерева.БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
					Если ЗначениеЗаполнено(СтрокаДерева.БанковскийСчет) Тогда
						СтрокаДерева.Описание = Строка(СтрокаДерева.БанковскийСчет)
												+ " № " + СтрокаДерева.БанковскийСчет.НомерСчета + " (" + Строка(СтрокаДерева.Валюта) + ")";
					Иначе
						СтрокаДерева.Описание = "(" + Строка(СтрокаДерева.Валюта) + ")";							
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли; 
			
			// Безопасное заполнение Контрльной суммы сделано через структуру
			// потому что, наличие поля "КонтрольнаяСумма" не гарантированно.
			КонтрольнаяСумма = Новый Структура("КонтрольнаяСумма", 
			КонтрольнаяСтрокиСуммаДереваСчетов(СтрокаДерева.Валюта, СтрокаДерева.БанковскийСчет, СтрокаДерева.Организация));
			ЗаполнитьЗначенияСвойств(СтрокаДерева, КонтрольнаяСумма);				
			
		КонецЕсли; 
				
		ЗаполнитьОписаниеВДереве(СтрокаДерева);
	КонецЦикла; 

КонецПроцедуры

Функция КонтрольнаяСтрокиСуммаДереваСчетов(Валюта, БанковскийСчет, Организация) Экспорт
	
	Данные = Новый Массив(); 
	Данные.Добавить(Валюта);
	Данные.Добавить(БанковскийСчет);
	Данные.Добавить(Организация);
	
	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Данные);
		
КонецФункции

// Процедура выполняет разбиение платежной позиции на две. 
// Сумма первой равна сумме оплаты. 
// Сумма второй равна не оплаченному остатку.
// 
// Параметры:
//  ПлатежнаяПозиция  - ДокументОбъект,СправочникОбъект
//  СуммаКОплате      - Число
//  СуммаКОплатеНач   - Число
//  Заголовок      - Строка
//  РежимСообщений - Строка: "Нет","Все","Ошибки" - режимы.
// 
// Возвращаемое значение:
//   ДействиеВыполнено   - Булево.
// 
Функция РазбитьПлатежнуюПозицию(ПлатежнаяПозиция,СуммаКОплате,СуммаКОплатеНач,РежимСообщений="Все") Экспорт

	ДействиеВыполнено = Ложь;
	Если СуммаКОплате > СуммаКОплатеНач Тогда
		Возврат ДействиеВыполнено;
	КонецЕсли; 
		
	ОбъектПлатежнаяПозиция = ПлатежнаяПозиция.ПолучитьОбъект();
	Если бит_ОбщегоНазначения.ЗаблокироватьОбъект(ОбъектПлатежнаяПозиция,Строка(ПлатежнаяПозиция),,РежимСообщений) Тогда
		
		ОбъектПлатежнаяПозиция.Сумма = СуммаКОплате;
		ОбъектПлатежнаяПозиция.РассчитатьСуммуНДС(ОбъектПлатежнаяПозиция);
		
		ЗаполнитьТабличнуюЧастьРаспределение(ОбъектПлатежнаяПозиция);
		ОбъектПлатежнаяПозиция.НазначениеПлатежа = Документы.бит_ПлатежнаяПозиция.ПолучитьНазначениеПлатежа(ОбъектПлатежнаяПозиция, Истина); 
		
		РежимЗаписи = ?(ОбъектПлатежнаяПозиция.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);
		ДействиеВыполнено =  бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ОбъектПлатежнаяПозиция,РежимЗаписи,,РежимСообщений) 
	Иначе
		ДействиеВыполнено = Ложь;
	КонецЕсли; 
	
	// Создаем новую платежную позицию на разность сумм.
	Если ДействиеВыполнено Тогда
		
		ОбъектПлатежнаяПозиция = ПлатежнаяПозиция.Скопировать();
		ОбъектПлатежнаяПозиция.Дата = ТекущаяДата();
		ОбъектПлатежнаяПозиция.Сумма = СуммаКОплатеНач - СуммаКОплате;			 
		ОбъектПлатежнаяПозиция.РассчитатьСуммуНДС(ОбъектПлатежнаяПозиция);
		
		ЗаполнитьТабличнуюЧастьРаспределение(ОбъектПлатежнаяПозиция);
		ОбъектПлатежнаяПозиция.НазначениеПлатежа = Документы.бит_ПлатежнаяПозиция.ПолучитьНазначениеПлатежа(ОбъектПлатежнаяПозиция, Истина);
		
		ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ОбъектПлатежнаяПозиция,РежимЗаписиДокумента.Проведение,,РежимСообщений); 
	КонецЕсли; 
	
	Возврат ДействиеВыполнено;
	
КонецФункции // РазбитьПлатежнуюПозицию() 
 
// Функция обрабатывает ситуацию превышения суммы к оплате над суммой план.
// 
// Параметры:
//  ПлатежнаяПозиция  - ДокументСсылка.ПлатежнаяПозиция.
// 	СуммаКОплате - число - новая сумма к оплате.
// 	СуммаКОплатеНач - число - первоначальная сумма к оплате по платежной позиции.
//  Отказ             - Булево, флаг превышения суммы к оплате над суммой план.
// 	пСтруктураПараметров - структура - дополнительные параметры.
// 
// Возвращаемое значение:
// 	ДействиеВыполнено - истина - сумма платежной позиции скорректирована.
// 
Функция СкорректироватьСуммуПлатежнойПозиции(ПлатежнаяПозиция, СуммаКОплате, СуммаКОплатеНач, Отказ=Ложь, пСтруктураПараметров=Неопределено) Экспорт
	
	Если пСтруктураПараметров = Неопределено Тогда
		пСтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	ТекстНачальногоСообщения = ?(пСтруктураПараметров.Свойство("ТекстНачалоСообщения"), пСтруктураПараметров.ТекстНачалоСообщения, "");
	ТекущаяДата 			 = ?(пСтруктураПараметров.Свойство("ТекущаяДата"), пСтруктураПараметров.ТекущаяДата, ТекущаяДата());
	
	ДействиеВыполнено = Ложь;
	
	// Новая сумма не превышает первоначальную сумму по платежной позиции.
	Если СуммаКОплате = СуммаКОплатеНач Тогда
		Возврат ДействиеВыполнено;
	КонецЕсли;
	
	// Новая сумма не должна превышать первоначальную более чем на заранее определенный процент.
	
	// Получим таблицу остатков по заявке
	ТаблицаОстатки = ПолучитьОстаткиПоСтрокамРаспределения(ПлатежнаяПозиция.ДокументОснование, ПлатежнаяПозиция);
	
	// Получим таблицу сумм по платежной позиции.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ПлатежнаяПозицияРаспределение.ИД,
	|	бит_ПлатежнаяПозицияРаспределение.Сумма КАК СуммаНач,
	|	0 КАК Сумма,
	|	бит_ПлатежнаяПозицияРаспределение.НомерСтроки КАК НомерСтроки,
	|	бит_ПлатежнаяПозицияРаспределение.Сумма / ОбщаяСуммаПоПлатежнойПозиции.ОбщаяСумма КАК Коэффициент
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение,
	|	(ВЫБРАТЬ
	|		СУММА(бит_ПлатежнаяПозицияРаспределение.Сумма) КАК ОбщаяСумма
	|	ИЗ
	|		Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
	|	ГДЕ
	|		бит_ПлатежнаяПозицияРаспределение.Ссылка = &ПлатежнаяПозиция) КАК ОбщаяСуммаПоПлатежнойПозиции
	|ГДЕ
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка = &ПлатежнаяПозиция
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПлатежнаяПозиция", ПлатежнаяПозиция);
	
	Результат = Запрос.Выполнить();
	ТаблицаСуммПоПозиции = Результат.Выгрузить();
	
	ОбщаяСуммаПлатежнойПозиции = ТаблицаСуммПоПозиции.Итог("СуммаНач");
	
	// Получим коэффициент в соответствии с которым должны скорректироваться суммы в платежной позиции.
	Коэффициент = СуммаКОплате / СуммаКОплатеНач;
	
	// Рассчитаем новую общую сумму по всей платежной позиции.
	СуммаКРаспределению = ОбщаяСуммаПлатежнойПозиции * Коэффициент;
	
	МассивКоэффициентов = ТаблицаСуммПоПозиции.ВыгрузитьКолонку("Коэффициент");
	
	// Распределим новую сумму по строкам платежной позиции.
	МассивРаспределение = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
							СуммаКРаспределению,МассивКоэффициентов,2);
	
	ТаблицаСуммПоПозиции.ЗагрузитьКолонку(МассивРаспределение, "Сумма");
	
	ЕстьОшибки = Ложь;
	
	Для Каждого ТекущаяСтрока Из ТаблицаСуммПоПозиции Цикл
		
		// Выполним контроль
		СтрокаОстатки = ТаблицаОстатки.Найти(ТекущаяСтрока.ИД,"ИД");
		
		Если СтрокаОстатки = Неопределено Тогда
			// Сумма по строке уже распределена
			ПредельнаяСумма = 0;
			СуммаКонтроль   = ТекущаяСтрока.Сумма;
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Организация",ПлатежнаяПозиция.Организация);
			СтруктураПараметров.Вставить("ЦФО"		  ,СтрокаОстатки.ЦФО);
			
			// Для каждой строки может быть определено свое ЦФО.
			НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ТекущаяДата,,СтруктураПараметров,"Ошибки");
			
			ПроцентПревышения = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы,ПланыВидовХарактеристик.бит_НастройкиПрограммы.ДопустимыйПроцентПревышенияСуммыЗаявки);

			ПредельнаяСумма = СтрокаОстатки.СуммаЗаявки*(100+ПроцентПревышения)/100;
			
			СуммаКонтроль = СтрокаОстатки.СуммаПП + ТекущаяСтрока.Сумма;
		КонецЕсли;
		
		Если ПредельнаяСумма = 0
			И СуммаКонтроль > ПредельнаяСумма Тогда
			
			ТекстСообщения = ТекстНачальногоСообщения 
							+ НСтр("en = 'Сумма заявки распределена полностью. Сумма к оплате по платежной позиции будет скорректирована.';
							  	 |ru = 'Сумма заявки распределена полностью. Сумма к оплате по платежной позиции будет скорректирована.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ); 
			ЕстьОшибки  = Истина;
		ИначеЕсли СуммаКонтроль > ПредельнаяСумма  Тогда
			
			Если ТаблицаСуммПоПозиции.Количество()>1 Тогда
				ТекстПоСтроке  = " (по строке № "+СтрокаОстатки.НомерСтроки+" заявки) ";
				ТекстПоСтроке2 = " (по строке № "+СтрокаОстатки.НомерСтроки+") ";			
			Иначе
				ТекстПоСтроке  = "";
				ТекстПоСтроке2 = "";			
			КонецЕсли; 
			
			ТекстСообщения = ТекстНачальногоСообщения
							+"Сумма платежных позиций "
							+ТекстПоСтроке
							+бит_ОбщегоНазначения.ФорматСумм(СуммаКонтроль, ПлатежнаяПозиция.ВалютаДокумента)
							+" превысила сумму заявки "
							+ТекстПоСтроке2
							+бит_ОбщегоНазначения.ФорматСумм(СтрокаОстатки.СуммаЗаявки, ПлатежнаяПозиция.ВалютаДокумента);
							
			Если ПроцентПревышения<>0 Тогда
				
				ТекстСообщения = ТекстСообщения	
								+" более чем на "
								+ПроцентПревышения
								+"%";
			КонецЕсли; 				  
			
			ТекстСообщения = ТекстСообщения+". Сумма к оплате по платежной позиции будет скорректирована.";
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Отказ 		= Истина;
			ЕстьОшибки  = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если ЕстьОшибки Тогда
		СуммаКОплате = СуммаКОплатеНач;
		
		Возврат ДействиеВыполнено;
	КонецЕсли;
	
	// Скорректируем суммы в платежной позиции
	ПозицияОбъект = ПлатежнаяПозиция.ПолучитьОбъект();
	
	ОбъектЗаблокирован = бит_ОбщегоНазначения.ЗаблокироватьОбъект(ПозицияОбъект,Строка(ПлатежнаяПозиция),,"Ошибки");
	
	Если НЕ ОбъектЗаблокирован Тогда
		СуммаКОплате = СуммаКОплатеНач;
		
		Возврат ДействиеВыполнено;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ПозицияОбъект.Распределение Цикл
		
		СтрокаСумм = ТаблицаСуммПоПозиции.Найти(СтрокаТаблицы.ИД, "ИД");
		
		Если СтрокаСумм = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Сумма = СтрокаСумм.Сумма;
		ПозицияОбъект.РассчитатьСуммуНДС(СтрокаТаблицы);
		
	КонецЦикла;
	
	РежимЗаписиПозиция = ?(ПозицияОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись); 
	ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПозицияОбъект,РежимЗаписиПозиция,,"Все");
	
	Возврат ДействиеВыполнено;
	
КонецФункции

// Функция получает плановую и фактическую сумму оплат по заявке.
// 
// Параметры:
//  Заявка			  - ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств, Массив.
//  ПлатежныйДокумент - Платежный документ ссылка. По умолчанию Неопределено.
// 
// Возвращаемое значение:
//   РезСтруктура - 1. Структура 	- Заявка - ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств.
//                  2. Соответствие - Заявка - Массив.
// 
Функция ПолучитьОплатыПоЗаявке(Заявка, ПлатежныйДокумент = Неопределено) Экспорт

	УказанМассивЗаявок = ?(ТипЗнч(Заявка) = Тип("Массив"), Истина, Ложь);
	
	Если УказанМассивЗаявок Тогда
		МассивЗаявок = Заявка;
	Иначе
		
		МассивЗаявок = Новый Массив;
		МассивЗаявок.Добавить(Заявка);
		
	КонецЕсли;
	
	// Получим имя документа по списанию денежных средств со счета.
	ИмяДокументаПоСписаниюДС = бит_ОбщегоНазначения.ПолучитьИмяДокументаПоСписаниюДС();
	
	// Сформируем текст запроса по получению оплаты.
	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_ПлатежнаяПозиция.Ссылка
	               |ПОМЕСТИТЬ ПлатежныеПозиции
	               |ИЗ
	               |	Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	               |ГДЕ
	               |	бит_ПлатежнаяПозиция.ДокументОснование В(&МассивЗаявок)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	бит_ПлатежнаяПозиция.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ПланируемыйРасходПозиции.ДокументПланирования.ДокументОснование КАК Заявка,
	               |	МАКСИМУМ(бит_ПланируемыйРасходПозиции.СуммаПриход) КАК СуммаКОплате,
	               |	МАКСИМУМ(бит_ПланируемыйРасходПозиции.СуммаВзаиморасчетыПриход) КАК СуммаВзаиморасчетыКОплате
	               |ПОМЕСТИТЬ План
	               |ИЗ
	               |	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(
	               |			,
	               |			,
	               |			,
	               |			ДокументПланирования В
	               |				(ВЫБРАТЬ
	               |					ПлатежныеПозиции.Ссылка
	               |				ИЗ
	               |					ПлатежныеПозиции КАК ПлатежныеПозиции)) КАК бит_ПланируемыйРасходПозиции
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_ПланируемыйРасходПозиции.ДокументПланирования.ДокументОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	бит_ПланируемыйРасходДенежныхСредствОбороты.ДокументПланирования,
	               |	бит_ПланируемыйРасходДенежныхСредствОбороты.СуммаПриход,
	               |	бит_ПланируемыйРасходДенежныхСредствОбороты.СуммаВзаиморасчетыПриход
	               |ИЗ
	               |	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(, , , ДокументПланирования В (&МассивЗаявок)) КАК бит_ПланируемыйРасходДенежныхСредствОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ПланируемыйРасходДенежныхСредствОбороты.ДокументПланирования.ДокументОснование КАК Заявка,
	               |	СУММА(бит_ПланируемыйРасходДенежныхСредствОбороты.СуммаРасход) КАК СуммаОплата,
	               |	СУММА(бит_ПланируемыйРасходДенежныхСредствОбороты.СуммаВзаиморасчетыРасход) КАК СуммаВзаиморасчетыОплата
	               |ПОМЕСТИТЬ Оплата
	               |ИЗ
	               |	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(
	               |			,
	               |			,
	               |			Регистратор,
	               |			ДокументПланирования В
	               |				(ВЫБРАТЬ
	               |					ПлатежныеПозиции.Ссылка
	               |				ИЗ
	               |					ПлатежныеПозиции КАК ПлатежныеПозиции)) КАК бит_ПланируемыйРасходДенежныхСредствОбороты
	               |ГДЕ
	               |	(бит_ПланируемыйРасходДенежныхСредствОбороты.Регистратор ССЫЛКА Документ." + ИмяДокументаПоСписаниюДС + "
	               |			ИЛИ бит_ПланируемыйРасходДенежныхСредствОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_ПланируемыйРасходДенежныхСредствОбороты.ДокументПланирования.ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ПланируемыйРасходДенежныхСредствОбороты.ДокументПланирования.ДокументОснование КАК Заявка,
	               |	СУММА(бит_ПланируемыйРасходДенежныхСредствОбороты.СуммаРасход) КАК СуммаЗакрыта,
	               |	СУММА(бит_ПланируемыйРасходДенежныхСредствОбороты.СуммаВзаиморасчетыРасход) КАК СуммаВзаиморасчетыЗакрыта
	               |ПОМЕСТИТЬ Закрытие
	               |ИЗ
	               |	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(
	               |			,
	               |			,
	               |			Регистратор,
	               |			ДокументПланирования В
	               |				(ВЫБРАТЬ
	               |					ПлатежныеПозиции.Ссылка
	               |				ИЗ
	               |					ПлатежныеПозиции КАК ПлатежныеПозиции)) КАК бит_ПланируемыйРасходДенежныхСредствОбороты
	               |ГДЕ
	               |	бит_ПланируемыйРасходДенежныхСредствОбороты.Регистратор ССЫЛКА Документ.бит_ЗакрытиеЗаявок
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_ПланируемыйРасходДенежныхСредствОбороты.ДокументПланирования.ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	План.Заявка,
	               |	ЕСТЬNULL(План.СуммаКОплате, 0) КАК СуммаДокументаКОплате,
	               |	ЕСТЬNULL(Оплата.СуммаОплата, 0) КАК СуммаДокументаОплата,
	               |	ЕСТЬNULL(Закрытие.СуммаЗакрыта, 0) КАК СуммаДокументаЗакрыта,
	               |	ЕСТЬNULL(План.СуммаКОплате, 0) - ЕСТЬNULL(Оплата.СуммаОплата, 0) - ЕСТЬNULL(Закрытие.СуммаЗакрыта, 0) КАК СуммаДокументаРазность,
	               |	ЕСТЬNULL(План.СуммаВзаиморасчетыКОплате, 0) КАК СуммаВзаиморасчетыКОплате,
	               |	ЕСТЬNULL(Оплата.СуммаВзаиморасчетыОплата, 0) КАК СуммаВзаиморасчетыОплата,
	               |	ЕСТЬNULL(Закрытие.СуммаВзаиморасчетыЗакрыта, 0) КАК СуммаВзаиморасчетыЗакрыта,
	               |	ЕСТЬNULL(План.СуммаВзаиморасчетыКОплате, 0) - ЕСТЬNULL(Оплата.СуммаВзаиморасчетыОплата, 0) - ЕСТЬNULL(Закрытие.СуммаВзаиморасчетыЗакрыта, 0) КАК СуммаВзаиморасчетыРазность
	               |ИЗ
	               |	План КАК План
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Оплата КАК Оплата
	               |		ПО План.Заявка = Оплата.Заявка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Закрытие КАК Закрытие
	               |		ПО План.Заявка = Закрытие.Заявка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПлатежныеПозиции
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ План
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Оплата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Закрытие";
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	
	Запрос.Текст 	 = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	РезСтруктураШаблон = Новый Структура;
	РезСтруктураШаблон.Вставить("СуммаПлан"				, 0);
	РезСтруктураШаблон.Вставить("СуммаОплата"			, 0);
	РезСтруктураШаблон.Вставить("СуммаЗакрыта"			, 0);
	РезСтруктураШаблон.Вставить("Разность"				, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаПлан"	, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаОплата"	, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаЗакрыта"	, 0);
	РезСтруктураШаблон.Вставить("СуммаДокументаРазность", 0);
	
	СоотОплатыПоЗаявкам = Новый Соответствие;
	
	Если РезультатЗапроса.Пустой() Тогда
		РезСтруктура = РезСтруктураШаблон;
	Иначе
		
		ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл
			
			РезСтруктура = Новый Структура;
			
			РезСтруктура.Вставить("СуммаПлан"   , Окр(ВыборкаИзЗапроса.СуммаДокументаКОплате, 2));
			РезСтруктура.Вставить("СуммаОплата" , Окр(ВыборкаИзЗапроса.СуммаДокументаОплата , 2));
			РезСтруктура.Вставить("СуммаЗакрыта", Окр(ВыборкаИзЗапроса.СуммаДокументаЗакрыта, 2));
			
			РазностьТекСумм = РезСтруктура.СуммаПлан - РезСтруктура.СуммаОплата - РезСтруктура.СуммаЗакрыта;
			РезСтруктура.Вставить("Разность"    , РазностьТекСумм);
			
			РезСтруктура.Вставить("СуммаДокументаПлан"    , Окр(ВыборкаИзЗапроса.СуммаДокументаКОплате, 2));
			РезСтруктура.Вставить("СуммаДокументаОплата"  , Окр(ВыборкаИзЗапроса.СуммаДокументаОплата , 2));
			РезСтруктура.Вставить("СуммаДокументаЗакрыта" , Окр(ВыборкаИзЗапроса.СуммаДокументаЗакрыта, 2));
			
			РазностьТекСумм = РезСтруктура.СуммаДокументаПлан - РезСтруктура.СуммаДокументаОплата - РезСтруктура.СуммаДокументаЗакрыта;
			РезСтруктура.Вставить("СуммаДокументаРазность", РазностьТекСумм);
			
			Если УказанМассивЗаявок Тогда
				СоотОплатыПоЗаявкам.Вставить(ВыборкаИзЗапроса.Заявка, РезСтруктура);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Если РезультатЗапроса.Пустой() Тогда
	
	Если УказанМассивЗаявок Тогда
		ОплатыПоЗаявке = СоотОплатыПоЗаявкам;
	Иначе
		ОплатыПоЗаявке = РезСтруктура;
	КонецЕсли;
	
	Возврат ОплатыПоЗаявке;
	
КонецФункции // ПолучитьОплатыПоЗаявке()

// Функция производит поиск графика платежей, у которого в документах планирования указана
// переданная ссылка.
// 
// Параметры:
//  ДокументПланирования - ссылка на документ, для которого надо найти подчиненный документ.
// 	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено.
// 
Функция НайтиДокументГрафикаПлатежей(Знач ДокументПланирования) Экспорт

	Если Не ЗначениеЗаполнено(ДокументПланирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументПланирования", ДокументПланирования);

	Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
    |   ГрафикПлатежей.Ссылка КАК ГрафикПлатежей
    |ИЗ
    |   Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикПлатежей КАК ГрафикПлатежей
    |ГДЕ
    |   ГрафикПлатежей.ДокументПланирования = &ДокументПланирования";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если Не РезультатЗапроса.Пустой() Тогда
        
        ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
        
        Если ВыборкаИзЗапроса.Следующий() Тогда
            НайденныйДокумент = ВыборкаИзЗапроса.ГрафикПлатежей;
        КонецЕсли;
        
    КонецЕсли;
        
	Возврат НайденныйДокумент;

КонецФункции // НайтиДокументГрафикаПлатежей()

// Процедура проверяет возможность записи документа планирования. 
// Отслеживается изменение пометки на удаление.
// 
// Параметры:
//  ДокументОбъект - объект документа.
//  Отказ          - Булево, флаг отказа выполнения действия, выставляется в Истину
//                   когда документ используется в графике платежей.
// 
Процедура ПроверитьВозможностьЗаписиДокументаПланирования(ДокументОбъект, Отказ) Экспорт
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		Возврат;	
	КонецЕсли; 
	
	ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "ПометкаУдаления");
    
    Если ДокументОбъект.ПометкаУдаления = ПометкаУдаления Тогда
        Возврат;
    КонецЕсли;
    
    // Попытаемся найти график платежей.
	ГрафикПлатежей = бит_Казначейство.НайтиДокументГрафикаПлатежей(ДокументОбъект.Ссылка);
    
    Если ЗначениеЗаполнено(ГрафикПлатежей) Тогда
		ТекстСообщения = НСтр("ru = 'Установка пометки удаления %1.
					  |Помечать документ на удаление возможно только из графика платежей.';
				 	  |en = 'Установка пометки удаления %1.
					  |Помечать документ на удаление возможно только из графика платежей.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ДокументОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъект, , ,Отказ); 
    КонецЕсли;
    
КонецПроцедуры // ПроверитьВозможностьЗаписиДокументаПланирования()

// Процедура выполняет синхронизацию пометки на удаление документа "Дополнительные условия по договору"
// и документов планирования указанных в графике платежей.
// 
// Параметры:
//  ДокументОбъект - объект документа, ДокументОбъект.бит_ДополнительныеУсловияПоДоговору. 
// 
Процедура СинхронизацияПометкиНаУдалениеУДокументовПланирования(ДокументОбъект, Отказ = Ложь) Экспорт

    ПометкаНаУдалениеДокумента = ДокументОбъект.ПометкаУдаления;
    
    Если ПометкаНаУдалениеДокумента <> ДокументОбъект.Ссылка.ПометкаУдаления Тогда
        
		Если ПометкаНаУдалениеДокумента Тогда
			Операция = НСтр("en = 'Установка'; ru = 'Установка'"); 
		Иначе	
			Операция = НСтр("en = 'Снятие'; ru = 'Снятие'"); 
		КонецЕсли; 			
        Заголовок = НСтр("en = '%1 пометки удаления. %2'; ru = '%1 пометки удаления. %2'");
		Заголовок = СтрШаблон(Заголовок, Операция, ДокументОбъект);
        
        // Получаем документы поступления.
        Запрос = Новый Запрос;
        Запрос.УстановитьПараметр("ГрафикПлатежей", ДокументОбъект.Ссылка);
        
        Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |   ГрафикПлатежей.ДокументПланирования
        |ИЗ
        |   Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикПлатежей КАК ГрафикПлатежей
        |ГДЕ
        |   ГрафикПлатежей.Ссылка = &ГрафикПлатежей
        |   И (НЕ ГрафикПлатежей.ДокументПланирования = НЕОПРЕДЕЛЕНО)";
        
        РезультатЗапроса = Запрос.Выполнить();
        
        Если РезультатЗапроса.Пустой() Тогда
            Возврат;
        КонецЕсли;
        
        ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаИзЗапроса.Следующий() Цикл
            Если ЗначениеЗаполнено(ВыборкаИзЗапроса.ДокументПланирования) Тогда
                Установлена = бит_ОбщегоНазначения.ИзменитьПометкуНаУдалениеУОбъекта(ВыборкаИзЗапроса.ДокументПланирования, ПометкаНаУдалениеДокумента, 
                                                                                     Заголовок,, Новый Структура("ЭтоПометкаИзГрафикаПлатажей"));
                Если Не Отказ И Не Установлена Тогда
                    Отказ = Истина;
					Прервать;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
        
КонецПроцедуры // СинхронизацияПометкиНаУдалениеУДокументовПланирования()

// Функция определяет включена ли заявка в какой ли бо реестр платежей или нет.
// 
// Параметры:
//  Заявка - ДокументСсылка.бит_ЗаявкаНаРасходованиеДС - заявки.
// 
// Возвращаемое значение:
//  флВключена - Булево.
// 
Функция ЗаявкаВключенаВРеестр(Заявка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка",Заявка.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_РеестрыПлатежей.РеестрПлатежей
	               |ИЗ
	               |	РегистрСведений.бит_РеестрыПлатежей КАК бит_РеестрыПлатежей
	               |ГДЕ
	               |	бит_РеестрыПлатежей.Заявка = &Заявка
	               |	И (НЕ бит_РеестрыПлатежей.РеестрПлатежей ЕСТЬ NULL )
	               |			И бит_РеестрыПлатежей.РеестрПлатежей <> ЗНАЧЕНИЕ(Документ.бит_РеестрПлатежей.ПустаяСсылка)";
				   
	Результат = Запрос.Выполнить();
	
	флВключена = НЕ Результат.Пустой();
	

	Возврат флВключена;
	
КонецФункции // ЗаявкаВключенаВРеестр()

// Функция проверяет наличие документов КорректировкаКонтрольныхЗначений 
// 	созданных на основании заявки.
// 
// Параметры:
// 	ДокСсылка - ДокументСсылка
// 
// Возвращаемое значение:
// 	ЕстьКорректировка - булево.
// 
Функция ЕстьКорректировкаКонтрольныхЗначений(ДокСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_КорректировкаКонтрольныхЗначений.Ссылка
	|ИЗ
	|	Документ.бит_КорректировкаКонтрольныхЗначений КАК бит_КорректировкаКонтрольныхЗначений
	|ГДЕ
	|	бит_КорректировкаКонтрольныхЗначений.ДокументОснование = &ДокСсылка";
	
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	
	Результат = Запрос.Выполнить();
	
	ЕстьКорректировка = НЕ Результат.Пустой();
	
	Возврат ЕстьКорректировка;
	
КонецФункции

// Процедура создает планируемое поступление ДС.
//
Процедура СоздатьПланируемоеПоступлениеДС(СтатусЗаявки
											, БанковскийСчетПриемник
											, ЗаявкаНаРасходование) Экспорт 

	Если СтатусЗаявки = Справочники.бит_СтатусыОбъектов.Заявка_Утверждена
		И ЗаявкаНаРасходование.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПереводНаДругойСчет Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_ПлатежнаяПозиция.Ссылка КАК Ссылка,
		               |	бит_ПлатежнаяПозиция.БанковскийСчетОрганизацияПриемник КАК СчетПриемник,
		               |	бит_ПлатежнаяПозиция.ДатаРасхода КАК ДатаРасхода,
		               |	бит_ПлатежнаяПозиция.Сумма КАК Сумма
		               |ПОМЕСТИТЬ врем
		               |ИЗ
		               |	Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
		               |ГДЕ
		               |	бит_ПлатежнаяПозиция.ДокументОснование = &ДокументОснование
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	врем.Ссылка КАК ПлатежнаяПозиция,
		               |	врем.СчетПриемник КАК СчетПриемник,
		               |	бит_ПланируемоеПоступлениеДС.Ссылка КАК ПланируемоеПоступление,
		               |	врем.ДатаРасхода КАК ДатаРасхода,
		               |	врем.Сумма КАК Сумма
		               |ИЗ
		               |	врем КАК врем
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПланируемоеПоступлениеДенежныхСредств КАК бит_ПланируемоеПоступлениеДС
		               |		ПО врем.Ссылка = бит_ПланируемоеПоступлениеДС.ДокументОснование
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СоответствиеСтатей.СтатьяПоступления КАК СтатьяПоступления,
		               |	СоответствиеСтатей.СтатьяРасходования КАК СтатьяРасходования
		               |ИЗ
		               |	РегистрСведений.бит_СоответствиеСтатейПоступленияИРасходованияДС КАК СоответствиеСтатей
		               |ГДЕ
		               |	СоответствиеСтатей.ВидОперации = &ВидОперации
		               |	И СоответствиеСтатей.СтатьяРасходования = &СтатьяРасходования";
		
		Запрос.УстановитьПараметр("ДокументОснование", ЗаявкаНаРасходование);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПереводНаДругойСчет);
		Запрос.УстановитьПараметр("СтатьяРасходования", ЗаявкаНаРасходование.СтатьяОборотов);
		
		Результат = Запрос.ВыполнитьПакет();
		Выборка = Результат[1].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПланируемоеПоступление) Тогда
				Продолжить;
			КонецЕсли; 
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Организация", ЗаявкаНаРасходование.Организация);
			НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ЗаявкаНаРасходование.Дата , , СтруктураПараметров, "Ошибки");
			
			Если бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, "СоздаватьПланируемыеПоступленияДСПриПереводе") Тогда
			
				ПоступлениеДС = Документы.бит_ПланируемоеПоступлениеДенежныхСредств.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ПоступлениеДС, Выборка.ПлатежнаяПозиция);
				
				ПоступлениеДС.УстановитьНовыйНомер();
				ПоступлениеДС.Дата 				= ТекущаяДатаСеанса();
				ПоступлениеДС.ДатаПоступления 	= Выборка.ДатаРасхода;
				ПоступлениеДС.ДокументОснование = Выборка.ПлатежнаяПозиция;
				ПоступлениеДС.ТипЗаявки 		= Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
				ПоступлениеДС.ФормаОплаты 		= ЗаявкаНаРасходование.ФормаОплаты;
				ПоступлениеДС.Исполнитель 		= ЗаявкаНаРасходование.Исполнитель;
				
				Если НЕ ЗначениеЗаполнено(БанковскийСчетПриемник) Тогда
				
					ПоступлениеДС.БанковскийСчет = Выборка.СчетПриемник;
				Иначе	
					ПоступлениеДС.БанковскийСчет = БанковскийСчетПриемник;
				КонецЕсли; 
				
				РезПакета = Результат[2].Выгрузить();
				
				Если РезПакета.Количество()>0 Тогда
				
					ПоступлениеДС.СтатьяОборотов = РезПакета[0].СтатьяПоступления;
					бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПоступлениеДС, РежимЗаписиДокумента.Проведение,, "Ошибки");
					
				Иначе	
					ПоступлениеДС.СтатьяОборотов = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
					бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПоступлениеДС, РежимЗаписиДокумента.Запись,, "Ошибки");
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры // СоздатьПланируемоеПоступлениеДС()

// См. СписаниеСРасчетногоСчетаФормы.ПриСозданииНаСервере(),
//     ПоступлениеНаРасчетныйСчетФормы.ПриСозданииНаСервере(),
//	   ПриходныйКассовыйОрдерФормы.ПриСозданииНаСервере(),
// 	   РасходныйКассовыйОрдерФормы.ПриСозданииНаСервере().
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	
	// ++ Обновление, см. Документация БСП - Блокировка необработанных данных в пользовательском интерфейсе.
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Форма.Объект, Форма);
	// -- Обновление
		
КонецПроцедуры

// См. СписаниеСРасчетногоСчетаФормы.ПодготовитьФормуНаСервере(),
//	   ПриходныйКассовыйОрдерФормы.ПодготовитьФормуНаСервере(),
//	   ПоступлениеНаРасчетныйСчет.ПодготовитьФормуНаСервере(),
// 	   РасходныйКассовыйОрдерФормы.ПодготовитьФормуНаСервере().
//
Процедура ПодготовитьФормуНаСервере(Форма) Экспорт

	// ВАЖНО!!!
	// При интерактивном копировании строки "расшифровки" таблица формы не переходит в режим редактирования
	// из-за вызова процедуры, устанавливающей итоги в подвалах колонок.
	// Что этого не было, добавдяем рекихиты и пути к данным подвала.
	// Это мероприятие позволяет форме инициировать событие "ПриНачалеРедактирования".
	
	Элементы = Форма.Элементы;
	
	ДобавляемыеРеквизиты = Новый Массив(); 
	ТекущиеРеквизиты 	 = Форма.ПолучитьРеквизиты();
	Кандидаты 			 = Новый Структура; 
	
	Если СтрНайти(Форма.ИмяФормы, "ФормаДокумента") = 0 И Элементы.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		// Добавляет реквизиты в таблицу значений формы редактирования расшифровки платежа,
		// когда используются однострочные документы. 
		// См. Адиминистрирование - Интерфейс - редактировать реквизиты платежа списком.
		ТекущиеРеквизитыРасшифровки = Форма.ПолучитьРеквизиты("РасшифровкаПлатежа");

		РеквизитФормы = Новый РеквизитФормы("бит_КлючСтроки", 
			ОбщегоНазначения.ОписаниеТипаСтрока(36), "РасшифровкаПлатежа");
		Добавлять = Истина;	
		Для каждого Элемент Из ТекущиеРеквизитыРасшифровки Цикл
			Если Элемент.Имя = "бит_КлючСтроки" Тогда
				Добавлять = Ложь;
				Прервать;			
			КонецЕсли; 
		КонецЦикла; 	
		Если Добавлять Тогда
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		КонецЕсли; 	
	КонецЕсли;
	
	РеквизитФормы = Новый РеквизитФормы("бит_ИтогоСуммаПлатежа", 
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Кандидаты.Вставить("бит_ИтогоСуммаПлатежа", РеквизитФормы);
	
	РеквизитФормы = Новый РеквизитФормы("бит_ИтогоВсегоНДС", 
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Кандидаты.Вставить("бит_ИтогоВсегоНДС", РеквизитФормы);
	
	РеквизитФормы = Новый РеквизитФормы("РасшифровкаПлатежабит_КлючСтроки", 
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
	Кандидаты.Вставить("РасшифровкаПлатежабит_КлючСтроки", РеквизитФормы);
	
	Для каждого Реквизит Из ТекущиеРеквизиты Цикл
		Если Кандидаты.Количество() = 0 Тогда
			Прервать;		
		КонецЕсли; 
		Если Кандидаты.Свойство(Реквизит.Имя) Тогда
			Кандидаты.Удалить(Реквизит.Имя);
		КонецЕсли; 
	КонецЦикла; 
	
	Если Кандидаты.Количество() <> 0 Тогда
		Для каждого КлючЗначение Из Кандидаты Цикл
			ДобавляемыеРеквизиты.Добавить(КлючЗначение.Значение);
		КонецЦикла; 
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Если Элементы.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		Элементы.РасшифровкаПлатежаСуммаПлатежа.ПутьКДаннымПодвала = "бит_ИтогоСуммаПлатежа";
		Элементы.РасшифровкаПлатежаСуммаНДС.ПутьКДаннымПодвала 	   = "бит_ИтогоВсегоНДС";
		
		Если Элементы.Найти("РасшифровкаВыручкиСуммаПлатежа") <> Неопределено Тогда
			Элементы.РасшифровкаВыручкиСуммаПлатежа.ПутьКДаннымПодвала = "бит_ИтогоСуммаПлатежа";
		КонецЕсли; 
		Если Элементы.Найти("РасшифровкаВыручкиСуммаНДС") <> Неопределено Тогда
			Элементы.РасшифровкаВыручкиСуммаНДС.ПутьКДаннымПодвала = "бит_ИтогоВсегоНДС";
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Функция ЗаполнятьНазначениеПлатежаВЗаявкеНаРасходованиеДС(Организация, Дата) Экспорт

	Параметры = Новый Структура("Организация", Организация);
	Настройки = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Дата, , Параметры, "Ошибки");	
	Результат = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(Настройки, 
					"ЗаполнятьНазначениеПлатежаВЗаявкеНаРасходованиеДС");
		
	Возврат Результат;
	
КонецФункции

Функция СинхронизироватьДатуПлатежаИДатуНеПозднее(Организация, ЦФО) Экспорт 

	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Организация);
	Параметры.Вставить("ЦФО", ЦФО);
	Настройки = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(НачалоДня(ТекущаяДата()), , Параметры, "Ошибки");
	
	Результат = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(Настройки, 
					"СинхронизироватьДатуПлатежаИДатуНеПозднее");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтражениеДвиженийДенежныхСредствПоФакту
	
Функция ЭтоДокументПоступленияДС(ТипДокумента)
	
	ДокументыПоступления = бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ДокументыПоступленияДенежныхСредств();
	ЭтоПоступление 		 = ДокументыПоступления.Найти(ТипДокумента) <> Неопределено;
	
	Возврат ЭтоПоступление;
	
КонецФункции
                              
Функция ЭтоДокументСписанияДС(ТипДокумента)
	
	ДокументыСписания = бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ДокументыСписанияДенежныхСредств();
	ЭтоСписание 	  = ДокументыСписания.Найти(ТипДокумента) <> Неопределено;
	
	Возврат ЭтоСписание;
	
КонецФункции

Функция НужноОтразитьДвижениеДенежныхСредствПоФакту(Источник)
	
	НужноОтразить = Истина;
	
	// Так как типовой документ Списание с расчетного счета с видом операции 
	// Снятие наличных не делает никаких движений,
	// нам тоже не надо делать эти движения.
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
		И Источник.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных
		И НЕ ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Источник.Организация, Источник.Дата) Тогда
		
		НужноОтразить = Ложь;
	КонецЕсли; 
	
	// Так как типовой документ Поступение денежных средств с видом операции 
	// Перевод с другого счета не делает никаких движений, а их делает списание,
	// нам тоже не надо делать эти движения.
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет")
		И (Источник.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными)
		И НЕ ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Источник.Организация, Источник.Дата) Тогда
		
		НужноОтразить = Ложь;
	КонецЕсли;

	Возврат НужноОтразить;
	
КонецФункции
	
// Функция формирует таблицу данных для отражения факта по регистру бит_ОборотыБюджетов. 
// Данные собираются из табличной части РасшифровкаПлатежа документа ДДС 
// и регистра сведений бит_ДополнительныеАналитики.
// 
// Параметры:
//  ПлатежныйДокумент  - ДокументСсылка - Документ должен содержать табличную часть РасшифровкаПлатежа.
// 
// Возвращаемое значение:
//   ТаблицаДДС   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуДвижениеДенежныхСредствПоФакту(ДокументДДС)
	
	ДокументыСРасшифровкой = бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ДокументыСРасшифровкой();
	ТипДокументаСсылка = ТипЗнч(ДокументДДС.Ссылка);
	
	Если ДокументыСРасшифровкой.Найти(ТипДокументаСсылка) = Неопределено Тогда
		Возврат Новый ТаблицаЗначений(); 
	КонецЕсли;
	
	МетаданныеДокумента = ДокументДДС.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	
	// Получаем имена справочников в зависимости от текущего решения.
	ИмяСправочникаЦФО 	   = бит_ОбщегоНазначения.ПолучитьИмяСправочникаЦФО();
	ИмяСправочникаПроекты  = бит_ОбщегоНазначения.ПолучитьИмяСправочникаПроекты();
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	
	ПараметрыНастройкиПрограммы = Новый Структура;	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаданныеДокумента) Тогда
		ПараметрыНастройкиПрограммы.Вставить("Организация", ДокументДДС.Организация);
	КонецЕсли; 
	
	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ДокументДДС.Дата,,
		ПараметрыНастройкиПрограммы, "Ошибки");	
	
	СценарийФАКТ = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, 
		ПланыВидовХарактеристик.бит_НастройкиПрограммы.СценарийОтраженияФактаБДДС);	
	
	Если НЕ ЗначениеЗаполнено(СценарийФАКТ) Тогда
		СценарийФАКТ = Справочники[ИмяСправочникаСценарии].ФАКТ;
	КонецЕсли; 
	
	СценарийФАКТРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СценарийФАКТ, "ИспользоватьКурсыСценария, Валюта");
	ВалютаСценария 		  = ?(ЗначениеЗаполнено(СценарийФАКТРеквизиты.Валюта), СценарийФАКТРеквизиты.Валюта, 
								Константы.ВалютаРегламентированногоУчета.Получить());	
	
	МассивОперацийВВалюте = бит_ОбщегоНазначения.СформироватьМассивВидовОперацийВВалютеДокумента();									
	Если МассивОперацийВВалюте.Найти(ДокументДДС.ВидОперации) <> Неопределено Тогда
		СуммыВВалютеДокумента = Истина;									
	Иначе
		СуммыВВалютеДокумента = Ложь;
	КонецЕсли; 									
	
	СтрКурсаДокумент = бит_КурсыВалют.ПолучитьКурсВалюты(ДокументДДС.ВалютаДокумента,ДокументДДС.Дата);
	
	// Для некоторых видов операций не надо заполнять банковский счет в движениях.
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк);
	Если бит_ОбщегоНазначения.СхемаДвиженияДокументовПоПлатежамИзменена() Тогда
		МассивОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке);
	КонецЕсли;
	
	Если МассивОпераций.Найти(ДокументДДС.ВидОперации) = Неопределено Тогда
		ИспользоватьБанковскийСчетОрганизации = Истина;
	Иначе
		ИспользоватьБанковскийСчетОрганизации = Ложь;
	КонецЕсли;
	
	// Чтобы не испортить алгоритм расчета суммы упр,
	// для операции Приобретение иностранной валюты вводим флаг.
	ПриобретениеИностраннойВалюты = ?(ДокументДДС.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		И Константы.бит_ВалютаУправленческогоУчета.Получить() = Константы.ВалютаРегламентированногоУчета.Получить()
		, Истина, Ложь);
		
	ЕстьРасшифровкаПлатежа = бит_ОбщегоНазначенияПереопределяемый.ЕстьРасшифровкаПлатежа(
								ДокументДДС.Ссылка, ДокументДДС.ВидОперации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",	  Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтатьяОборотов", Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойБанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЦФО", Справочники[ИмяСправочникаЦФО].ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПроект", Справочники[ИмяСправочникаПроекты].ПустаяСсылка());
	Запрос.УстановитьПараметр("СценарийФАКТ", СценарийФАКТ);
	Запрос.УстановитьПараметр("ВалютаСценария" ,ВалютаСценария);
	Запрос.УстановитьПараметр("ВалютаДокумента",ДокументДДС.ВалютаДокумента);	
	Запрос.УстановитьПараметр("ВалютаУпр", Константы.бит_ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("Момент",	ДокументДДС.Дата);
	Запрос.УстановитьПараметр("Ссылка", ДокументДДС);
	Запрос.УстановитьПараметр("СуммыВВалютеДокумента", СуммыВВалютеДокумента);
	Запрос.УстановитьПараметр("КурсДокумент", СтрКурсаДокумент.Курс);
	Запрос.УстановитьПараметр("КратностьДокумент", ?(СтрКурсаДокумент.Кратность=0,1,СтрКурсаДокумент.Кратность));
	Запрос.УстановитьПараметр("ИспользоватьБанковскийСчетОрганизации", ИспользоватьБанковскийСчетОрганизации);
	Запрос.УстановитьПараметр("ПриобретениеИностраннойВалюты", ПриобретениеИностраннойВалюты);
	Запрос.УстановитьПараметр("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	Запрос.УстановитьПараметр("ЕстьРасшифровкаПлатежа", ЕстьРасшифровкаПлатежа);
	
	МетаданныеРаспределения    = МетаданныеДокумента.ТабличныеЧасти.бит_РаспределениеБюджета;
	ТипДокументаПланирования   = МетаданныеРаспределения.Реквизиты.ДокументПланирования.Тип;
	ПустойДокументПланирования = ТипДокументаПланирования.ПривестиЗначение();
	Запрос.УстановитьПараметр("ПустойДокументПланирования", ПустойДокументПланирования);
	
	ВидыОперацийПрочее = Новый Массив; 
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийРКО.ПрочийРасход);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийПКО.ПрочийПриход);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	
	// И д.р. виды операций где нет договора.
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийРКО.УплатаНалога);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаДивидендов);
	
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка);
	
	Если ВидыОперацийПрочее.Найти(ДокументДДС.ВидОперации) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПрочийРасход", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПрочийРасход", Ложь);
	КонецЕсли; 
	
	// Заполним параметры доп. аналитик.
	ИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Индекс = 1;
	Для каждого КлючИЗначение Из ИзмеренияДоп Цикл
	
		ИмяИзмерения 	 = КлючИЗначение.Ключ;
		ТекущаяНастройка = НастройкиИзмерений[ИмяИзмерения];
		Если ТекущаяНастройка = Неопределено Тогда
			ПустоеЗначение   = Неопределено;
			ТекущаяАналитика = Неопределено;
		Иначе	
			ТекущаяАналитика = ТекущаяНастройка.Аналитика;
			ТипыАналитики  = ТекущаяАналитика.ТипЗначения.Типы();
			Для Каждого ТекущийТип Из ТипыАналитики Цикл
				МассивДляОписания = Новый Массив;
				МассивДляОписания.Добавить(ТекущийТип);
			КонецЦикла;		
			ТекущееОписание  = Новый ОписаниеТипов(ТипыАналитики);
			ПустоеЗначение   = ТекущееОписание.ПривестиЗначение();
		КонецЕсли;
		
		Запрос.Параметры.Вставить("Аналитика_" + Индекс, ТекущаяАналитика);
		Запрос.Параметры.Вставить("ПустоеЗначениеАналитика_" + Индекс, ПустоеЗначение);
		
		Индекс = Индекс + 1;
	КонецЦикла; 

	ТекстЗапроса = "";
	ТекстЗапросаДвижениеДенежныхСредствПоФактуАналитики(ТекстЗапроса);
	ТекстЗапросаДвижениеДенежныхСредствПоФактуКурсыВалют(СценарийФАКТРеквизиты, ТекстЗапроса);
	ТекстЗапросаДвижениеДенежныхСредствПоФактуДанные(ИмяДокумента, ТекстЗапроса);
	ТекстЗапросаДвижениеДенежныхСредствПоФактуВыбор(ТекстЗапроса);
	
	Запрос.Текст = ТекстЗапроса;
	Результат 	 = Запрос.Выполнить();
	ТаблицаДДС   = Результат.Выгрузить();
	
	Если НЕ ТаблицаДДС.Колонки.Найти("Сумма") = Неопределено Тогда
		// Необходимо изменить тип колонки. Т.к. из запроса приходит ограничение на отрицательные числа.
		ТаблицаДДС.Колонки.Сумма.Имя = "СуммаВрем";
		ТаблицаДДС.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		МассивВрем = ТаблицаДДС.ВыгрузитьКолонку("СуммаВрем");
		ТаблицаДДС.ЗагрузитьКолонку(МассивВрем, "Сумма");
	КонецЕсли; 
	
	ЭтоПоступление = ЭтоДокументПоступленияДС(ТипДокументаСсылка);
	ЭтоСписание    = ЭтоДокументСписанияДС(ТипДокументаСсылка);
	
	Ресурсы = Новый Массив;
	Ресурсы.Добавить("Количество");		
	Ресурсы.Добавить("Сумма");
	Ресурсы.Добавить("СуммаРегл");    
	Ресурсы.Добавить("СуммаУпр");
	Ресурсы.Добавить("СуммаСценарий");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДДС Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяОборотов) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПоступление И СтрокаТаблицы.СтатьяОборотовРасходДоход = Перечисления.бит_РасходДоход.Расходование
			ИЛИ ЭтоСписание И СтрокаТаблицы.СтатьяОборотовРасходДоход = Перечисления.бит_РасходДоход.Поступление Тогда
			
			// Выполняем возврат
			Для Каждого Ресурс Из Ресурсы Цикл
				СтрокаТаблицы[Ресурс] = -1 * СтрокаТаблицы[Ресурс];
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	ПодготовитьПараметрыПеремещенияДенежныхСредств(ДокументДДС, ТаблицаДДС);
	
	Возврат ТаблицаДДС;

КонецФункции

Процедура ТекстЗапросаДвижениеДенежныхСредствПоФактуАналитики(ТекстЗапроса)
		
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ДополнительныеАналитики.Объект,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.Контрагент)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОНЕЦ) КАК Контрагент,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ДоговорКонтрагента)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ) КАК ДоговорКонтрагента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ЦФО)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустойЦФО
	|		КОНЕЦ) КАК ЦФО,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.Проект)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустойПроект
	|		КОНЕЦ) КАК Проект,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.СтатьяОборотов)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	|		КОНЕЦ) КАК СтатьяОборотов,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.БанковскийСчет)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|		КОНЕЦ) КАК БанковскийСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.НоменклатурнаяГруппа)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|		КОНЕЦ) КАК НоменклатурнаяГруппа,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_1
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_1
	|		КОНЕЦ) КАК Аналитика_1,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_2
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_2
	|		КОНЕЦ) КАК Аналитика_2,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_3
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_3
	|		КОНЕЦ) КАК Аналитика_3,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_4
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_4
	|		КОНЕЦ) КАК Аналитика_4,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_5
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_5
	|		КОНЕЦ) КАК Аналитика_5,	
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_6
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_6
	|		КОНЕЦ) КАК Аналитика_6,	
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_7
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_7
	|		КОНЕЦ) КАК Аналитика_7,		
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.НеОтражатьВФакте)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеОтражатьВФакте,	
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ДатаПроведенияПоБюджету)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ДАТАВРЕМЯ(1,1,1,0,0,0)
	|		КОНЕЦ) КАК ДатаПроведенияПоБюджету,	
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция)
	|				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустойДокументПланирования
	|		КОНЕЦ) КАК ПлатежнаяПозиция
	|ПОМЕСТИТЬ Аналитики
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|ГДЕ
	|	бит_ДополнительныеАналитики.Объект = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ДополнительныеАналитики.Объект";

	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецПроцедуры

Процедура ТекстЗапросаДвижениеДенежныхСредствПоФактуКурсыВалют(СценарийФАКТ, ТекстЗапроса)
	
	Если СценарийФАКТ.ИспользоватьКурсыСценария Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КурсыВалютУпр.Курс, 1) КАК КурсУпр,
		|	ЕСТЬNULL(КурсыВалютУпр.Кратность, 1) КАК КратностьУпр,
		|	ЕСТЬNULL(КурсыВалютСценарий.Курс, 1) КАК КурсСценарий,
		|	ЕСТЬNULL(КурсыВалютСценарий.Кратность, 1) КАК КратностьСценарий,
		|	ВалютаРегламентированногоУчета.Значение КАК ВалютаРеглУчета
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_КурсыСценариевПланирования.СрезПоследних(
		|				&Момент,
		|				Сценарий = &СценарийФАКТ
		|					И Валюта = &ВалютаСценария) КАК КурсыВалютСценарий
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_КурсыСценариевПланирования.СрезПоследних(
		|				&Момент,
		|				Сценарий = &СценарийФАКТ
		|					И Валюта = &ВалютаУпр) КАК КурсыВалютУпр
		|		ПО (ИСТИНА)";
	Иначе
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КурсыВалютУпр.Курс, 1) КАК КурсУпр,
		|	ЕСТЬNULL(КурсыВалютУпр.Кратность, 1) КАК КратностьУпр,
		|	ЕСТЬNULL(КурсыВалютСценарий.Курс, 1) КАК КурсСценарий,
		|	ЕСТЬNULL(КурсыВалютСценарий.Кратность, 1) КАК КратностьСценарий,
		|	ВалютаРегламентированногоУчета.Значение КАК ВалютаРеглУчета
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент, Валюта = &ВалютаУпр) КАК КурсыВалютУпр
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент, Валюта = &ВалютаСценария) КАК КурсыВалютСценарий
		|		ПО (ИСТИНА)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецПроцедуры

Процедура ТекстЗапросаДвижениеДенежныхСредствПоФактуДанные(ИмяДокумента, ТекстЗапроса)
	
	МетаданныеДокумента  = Метаданные.Документы[ИмяДокумента];
	ЕстьСчетОрганизации  = ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокумента);
		
	ТекстЗапроса = ТекстЗапроса +							
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	&СценарийФАКТ КАК Сценарий,
	|	&СчетОрганизации КАК БанковскийСчет,
	|	ВЫБОР КОГДА &ПрочийРасход ТОГДА &ПустойКонтрагент ИНАЧЕ Реквизиты.Контрагент КОНЕЦ КАК Контрагент,
	|	ВЫБОР КОГДА &ПрочийРасход ТОГДА &ПустойДоговор ИНАЧЕ Реквизиты.ДоговорКонтрагента КОНЕЦ КАК ДоговорКонтрагента,
	|	РаспределениеБюджета.ЦФО КАК ЦФО,
	|	РаспределениеБюджета.СтатьяОборотов КАК СтатьяОборотов,
	|	РаспределениеБюджета.Проект КАК Проект,
	|	РаспределениеБюджета.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	&БезНДС КАК СтавкаНДС,
	|	РаспределениеБюджета.СуммаПлатежа КАК СуммаПлатеж,
	|	РаспределениеБюджета.СуммаПлатежа - РаспределениеБюджета.СуммаНДС КАК СуммаБезНДСПлатеж,
	|	0 КАК НДС,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА РаспределениеБюджета.СуммаВзаиморасчетов = 0
	|			ТОГДА РаспределениеБюджета.СуммаПлатежа
	|		ИНАЧЕ РаспределениеБюджета.СуммаВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	РаспределениеБюджета.Аналитика_1 КАК Аналитика_1,
	|	РаспределениеБюджета.Аналитика_2 КАК Аналитика_2,
	|	РаспределениеБюджета.Аналитика_3 КАК Аналитика_3,
	|	РаспределениеБюджета.Аналитика_4 КАК Аналитика_4,
	|	РаспределениеБюджета.Аналитика_5 КАК Аналитика_5,
	|	РаспределениеБюджета.Аналитика_6 КАК Аналитика_6,
	|	РаспределениеБюджета.Аналитика_7 КАК Аналитика_7,
	|	РаспределениеБюджета.ДокументПланирования КАК ПлатежнаяПозиция,
	|	РаспределениеБюджета.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	#Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РаспределениеБюджета КАК РаспределениеБюджета
	|		ПО (РаспределениеБюджета.Ссылка = Реквизиты.Ссылка)
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|	И НЕ &ЕстьРасшифровкаПлатежа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация,
	|	&СценарийФАКТ,
	|	&СчетОрганизации,
	|	ВЫБОР
	|		КОГДА Таблица.ДоговорКонтрагента = &ПустойДоговор
	|			ТОГДА &ПустойКонтрагент
	|		ИНАЧЕ Таблица.ДоговорКонтрагента.Владелец
	|	КОНЕЦ,
	|	Таблица.ДоговорКонтрагента,
	|	РаспределениеБюджета.ЦФО,
	|	РаспределениеБюджета.СтатьяОборотов,
	|	РаспределениеБюджета.Проект,
	|	РаспределениеБюджета.НоменклатурнаяГруппа,
	|	Таблица.СтавкаНДС,
	|	РаспределениеБюджета.СуммаПлатежа,
	|	РаспределениеБюджета.СуммаПлатежа - РаспределениеБюджета.СуммаНДС,
	|	Таблица.СуммаНДС,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.Дата,
	|	ВЫБОР
	|		КОГДА РаспределениеБюджета.СуммаВзаиморасчетов = 0
	|			ТОГДА РаспределениеБюджета.СуммаПлатежа
	|		ИНАЧЕ РаспределениеБюджета.СуммаВзаиморасчетов
	|	КОНЕЦ,
	|	Реквизиты.ВалютаДокумента,
	|	РаспределениеБюджета.Аналитика_1,
	|	РаспределениеБюджета.Аналитика_2,
	|	РаспределениеБюджета.Аналитика_3,
	|	РаспределениеБюджета.Аналитика_4,
	|	РаспределениеБюджета.Аналитика_5,
	|	РаспределениеБюджета.Аналитика_6,
	|	РаспределениеБюджета.Аналитика_7,
	|	РаспределениеБюджета.ДокументПланирования,
	|	Таблица.Ссылка
	|ИЗ
	|	#РасшифровкаПлатежа КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РаспределениеБюджета КАК РаспределениеБюджета
	|		ПО (РаспределениеБюджета.Ссылка = Таблица.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ #Реквизиты КАК Реквизиты
	|		ПО Таблица.Ссылка = Реквизиты.Ссылка
	|			И Таблица.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И &ЕстьРасшифровкаПлатежа
	|	И Таблица.бит_КлючСтроки = РаспределениеБюджета.бит_КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Сценарий КАК Сценарий,
	|	РасшифровкаПлатежа.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ИспользоватьБанковскийСчетОрганизации
	|			ТОГДА ВЫБОР
	|					КОГДА РасшифровкаПлатежа.БанковскийСчет = &ПустойБанковскийСчет
	|						ТОГДА ЕСТЬNULL(Аналитики.БанковскийСчет, &ПустойБанковскийСчет)
	|					ИНАЧЕ РасшифровкаПлатежа.БанковскийСчет
	|				КОНЕЦ
	|		ИНАЧЕ Аналитики.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Контрагент = &ПустойКонтрагент
	|			ТОГДА ЕСТЬNULL(Аналитики.Контрагент, &ПустойКонтрагент)
	|		ИНАЧЕ РасшифровкаПлатежа.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДоговорКонтрагента = &ПустойДоговор
	|			ТОГДА ЕСТЬNULL(Аналитики.ДоговорКонтрагента, &ПустойДоговор)
	|		ИНАЧЕ РасшифровкаПлатежа.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ЦФО = &ПустойЦФО
	|			ТОГДА ЕСТЬNULL(Аналитики.ЦФО, &ПустойЦФО)
	|		ИНАЧЕ РасшифровкаПлатежа.ЦФО
	|	КОНЕЦ КАК ЦФО,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.СтатьяОборотов = &ПустаяСтатьяОборотов
	|			ТОГДА ЕСТЬNULL(Аналитики.СтатьяОборотов, &ПустаяСтатьяОборотов)
	|		ИНАЧЕ РасшифровкаПлатежа.СтатьяОборотов
	|	КОНЕЦ КАК СтатьяОборотов,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Проект = &ПустойПроект
	|			ТОГДА ЕСТЬNULL(Аналитики.Проект, &ПустойПроект)
	|		ИНАЧЕ РасшифровкаПлатежа.Проект
	|	КОНЕЦ КАК Проект,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.НоменклатурнаяГруппа = &ПустаяНоменклатурнаяГруппа
	|			ТОГДА ЕСТЬNULL(Аналитики.НоменклатурнаяГруппа, &ПустаяНоменклатурнаяГруппа)
	|		ИНАЧЕ РасшифровкаПлатежа.НоменклатурнаяГруппа
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(Аналитики.НеОтражатьВФакте, ЛОЖЬ) КАК НеОтражатьВФакте,
	|	ЕСТЬNULL(Аналитики.ДатаПроведенияПоБюджету, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПроведенияПоБюджету,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаПлатеж КАК СуммаПлатеж,
	|	РасшифровкаПлатежа.СуммаБезНДСПлатеж КАК СуммаБезНДСПлатеж,
	|	РасшифровкаПлатежа.НДС КАК НДС,
	|	РасшифровкаПлатежа.Валюта КАК Валюта,
	|	РасшифровкаПлатежа.Период КАК Период,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&КурсДокумент КАК КурсВзаиморасчетов,
	|	&КратностьДокумент КАК КратностьВзаиморасчетов,
	|	КурсыВалют.КурсСценарий КАК КурсСценарий,
	|	КурсыВалют.КратностьСценарий КАК КратностьСценарий,
	|	КурсыВалют.КурсУпр КАК КурсУпр,
	|	КурсыВалют.КратностьУпр КАК КратностьУпр,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПлатежнаяПозиция = &ПустойДокументПланирования
	|			ТОГДА ЕСТЬNULL(Аналитики.ПлатежнаяПозиция, &ПустойДокументПланирования)
	|		ИНАЧЕ РасшифровкаПлатежа.ПлатежнаяПозиция
	|	КОНЕЦ КАК ПлатежнаяПозиция,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_1, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_1
	|	КОНЕЦ КАК Аналитика_1,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_2, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_2
	|	КОНЕЦ КАК Аналитика_2,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_3 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_3, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_3
	|	КОНЕЦ КАК Аналитика_3,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_4 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_4, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_4
	|	КОНЕЦ КАК Аналитика_4,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_5 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_5, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_5
	|	КОНЕЦ КАК Аналитика_5,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_6 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_6, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_6
	|	КОНЕЦ КАК Аналитика_6,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_7 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_7, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_7
	|	КОНЕЦ КАК Аналитика_7
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Аналитики КАК Аналитики
	|		ПО РасшифровкаПлатежа.Ссылка = Аналитики.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЕСТЬNULL(Аналитики.НеОтражатьВФакте, ЛОЖЬ) = ЛОЖЬ";
	
	// Поле выбора "БанковскийСчет".
	ЧтоЗаменить = "&СчетОрганизации";	
	Если ЕстьСчетОрганизации Тогда		
		НаЧтоЗаменить = 
		"
		|	Реквизиты.СчетОрганизации";
	Иначе
		НаЧтоЗаменить =  
		"
		|	&ПустойБанковскийСчет";
	КонецЕсли; 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
	
	// Установка основной таблицы.
	ЧтоЗаменить   = "#Реквизиты";
	НаЧтоЗаменить = "Документ." + ИмяДокумента;
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
	
	ЧтоЗаменить   = "#РасшифровкаПлатежа";
	НаЧтоЗаменить = "Документ." + ИмяДокумента + ".РасшифровкаПлатежа";
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);

	// Установка таблицы распределения.
	ЧтоЗаменить   = "#РаспределениеБюджета";
	НаЧтоЗаменить = "Документ." + ИмяДокумента + ".бит_РаспределениеБюджета";
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
		
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецПроцедуры

Процедура ТекстЗапросаДвижениеДенежныхСредствПоФактуВыбор(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Данные.ДатаПроведенияПоБюджету = ДАТАВРЕМЯ(1,1,1,0,0,0)
	|			ТОГДА Данные.Период
	|		ИНАЧЕ Данные.ДатаПроведенияПоБюджету
	|	КОНЕЦ КАК Период,
	|	Данные.Сценарий,
	|	Данные.Организация,
	|	Данные.БанковскийСчет,
	|	Данные.Валюта,
	|	Данные.Контрагент,
	|	Данные.ДоговорКонтрагента,
	|	Данные.ЦФО,
	|	Данные.СтатьяОборотов,
	|	Данные.СтатьяОборотов.РасходДоход КАК СтатьяОборотовРасходДоход,
	|	Данные.Проект,
	|	Данные.НоменклатурнаяГруппа,
	|	Данные.ПлатежнаяПозиция,
	|	Данные.Аналитика_1,
	|	Данные.Аналитика_2,
	|	Данные.Аналитика_3,
	|	Данные.Аналитика_4,
	|	Данные.Аналитика_5,	
	|	Данные.Аналитика_6,	
	|	Данные.Аналитика_7,		
	|	Данные.СтавкаНДС,
	|	Данные.КратностьУпр,
	|	Данные.КурсУпр,
	|	Данные.КратностьВзаиморасчетов,
	|	Данные.КурсВзаиморасчетов,
	|	Данные.ВалютаВзаиморасчетов,
	|   0 КАК Количество,
	|   Данные.НДС КАК НДС,
	|   Данные.СуммаПлатеж КАК Сумма,
	|	ВЫБОР
	|		КОГДА Данные.Валюта = Данные.ВалютаВзаиморасчетов
	|			ТОГДА (Данные.СуммаПлатеж * Данные.КурсВзаиморасчетов) / Данные.КратностьВзаиморасчетов
	|		ИНАЧЕ Данные.СуммаПлатеж
	|	КОНЕЦ КАК СуммаРегл,
	| ВЫБОР
	|	КОГДА &ПриобретениеИностраннойВалюты
	|		ТОГДА (Данные.СуммаПлатеж * Данные.КурсВзаиморасчетов) / Данные.КратностьВзаиморасчетов
	|   КОГДА Данные.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаУпр И НЕ Данные.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|   	ТОГДА Данные.СуммаВзаиморасчетов
	|	КОГДА Данные.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА
	|		ТОГДА (Данные.СуммаПлатеж * Данные.КратностьУпр) / Данные.КурсУпр
	|   КОГДА Данные.Валюта = &ВалютаУпр 
	|         ТОГДА Данные.СуммаПлатеж    
	|	КОГДА Данные.Валюта = Данные.ВалютаВзаиморасчетов
	|		ТОГДА (Данные.КурсВзаиморасчетов*Данные.КратностьУпр )*Данные.СуммаПлатеж /(Данные.КратностьВзаиморасчетов*Данные.КурсУпр)
	|	ИНАЧЕ (Данные.СуммаПлатеж * Данные.КратностьУпр) / Данные.КурсУпр
	| КОНЕЦ КАК СуммаУпр,
	| ВЫБОР 
	|   КОГДА Данные.Валюта = &ВалютаСценария 
	|         ТОГДА Данные.СуммаПлатеж
	|	КОГДА Данные.Валюта = Данные.ВалютаВзаиморасчетов
	|			ТОГДА (Данные.КурсВзаиморасчетов * Данные.КратностьСценарий) * Данные.СуммаПлатеж / (Данные.КратностьВзаиморасчетов*Данные.КурсСценарий)
	|	ИНАЧЕ (Данные.СуммаПлатеж * Данные.КратностьСценарий) / Данные.КурсСценарий
	|  КОНЕЦ КАК СуммаСценарий
	|ИЗ
	|	Данные КАК Данные";

КонецПроцедуры

// Процедура дополняет таблицу по ДДС для определенных видов операций, в которых отражается
// 	перемещение денежных средств.
// 
// Параметры:
// 	ДвиженияДенежныхСредств - ТаблицаЗначений.
// 	ДокументДДС - ДокументСсылка.
// 	МетаДокумент - Метаданные документа.
// 	Ресурсы - Массив.
// 
Процедура ПодготовитьПараметрыПеремещенияДенежныхСредств(Регистратор, ДвиженияДенежныхСредств)
	
	// Выполним проверки, дополнять таблицу имеет смысл только для конкретных видов операций.
	Отказ 		   = Истина;	
	БанковскийСчет = Неопределено;
	
	Ресурсы = Новый Массив;
	Ресурсы.Добавить("Количество");		
	Ресурсы.Добавить("Сумма");
	Ресурсы.Добавить("СуммаРегл");    
	Ресурсы.Добавить("СуммаУпр");
	Ресурсы.Добавить("СуммаСценарий");

	МетаданныеДокумента = Регистратор.Метаданные();
	
	// СписаниеСРасчетногоСчета
	Если Регистратор.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		И НЕ ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Регистратор.Организация, Регистратор.Дата) Тогда
		
		Отказ = Ложь;
		ЕстьСчетКонтрагента = ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетКонтрагента", МетаданныеДокумента);  			
		Если ЕстьСчетКонтрагента Тогда
			БанковскийСчет = Регистратор.СчетКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	// ПриходныйКассовыйОрдер
	Если Регистратор.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке
		И НЕ ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Регистратор.Организация, Регистратор.Дата) Тогда
		
		Отказ = Ложь;
		БанковскийСчет = Регистратор.Контрагент;
	КонецЕсли;
	
	// РасходныйКассовыйОрдер
	Если Регистратор.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И НЕ ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Регистратор.Организация, Регистратор.Дата) Тогда
		
		Отказ = Ложь;
		ЕстьСчетОрганизации = бит_РаботаСМетаданнымиСервер.ЕстьРеквизит("СчетОрганизации", МетаданныеДокумента);		
		Если ЕстьСчетОрганизации Тогда
			БанковскийСчет = Регистратор.СчетОрганизации;
		КонецЕсли;
	КонецЕсли;             	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТабПеремещений = ДвиженияДенежныхСредств.Скопировать();
	
	Для Каждого ТекСтрока Из ТабПеремещений Цикл
		
		СтатьяОборотов = бит_Казначейство.ПолучитьСтатьюСПротивоположнымНаправлением(ТекСтрока.СтатьяОборотов);
		
		Если БанковскийСчет <> Неопределено Тогда
			ТекСтрока.БанковскийСчет = БанковскийСчет;
		КонецЕсли;
		
		Если СтатьяОборотов = Неопределено Тогда
			// Соответствие для статьи не найдено - делаем движение по той же статье с минусом.
			Для Каждого ТекРесурс Из Ресурсы Цикл
				ТекСтрока[ТекРесурс] = -1*ТекСтрока[ТекРесурс];
			КонецЦикла;
		Иначе
			ТекСтрока.СтатьяОборотов = СтатьяОборотов;
		КонецЕсли;
		
		// Добавим строку
		НоваяСтрока = ДвиженияДенежныхСредств.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияДвиженияДенежныхСредствПоФакту(Регистратор, ДвиженияДенежныхСредств, ЗаписыватьДвижения)
		
	Если ДвиженияДенежныхСредств.Количество() = 0 Тогда
		Возврат; 
	КонецЕсли;

	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним");
	
	Если ЗаписыватьДвижения = Неопределено Тогда
		ЗаписыватьДвижения = Ложь;
	Иначе
		СоответствиеОтбора = Новый Соответствие();
		СоответствиеОтбора.Вставить("Регистратор", Регистратор.Ссылка);
	КонецЕсли; 
	
	// Настройки программы
	СтруктураПараметров = Новый Структура;
	ЕстьОрганизация 	= ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Регистратор.Метаданные());
	Если ЕстьОрганизация Тогда
	 	СтруктураПараметров.Вставить("Организация", Регистратор.Организация);
	КонецЕсли;  

	ОписаниеНастроек   = ПланыВидовХарактеристик.бит_НастройкиПрограммы;
	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Регистратор.Дата, ,
							СтруктураПараметров, "Ошибки");	

	ФормироватьЗависимыеОбороты  = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, 
		ОписаниеНастроек.ФормироватьЗависимыеОборотыПриАвтоматическомСбореФакта);
	ФормироватьПроводкиБюджетирования  = Не бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы,
		ОписаниеНастроек.НеФормироватьПроводкиБюджетированияПриАвтоматическомСбореФакта);
							
	// Движения по регистру обороты по бюджетам.
	Если ЗаписыватьДвижения Тогда
		НаборЗаписей = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыНакопления.бит_ОборотыПоБюджетам, СоответствиеОтбора);
	Иначе	
		НаборЗаписей = Регистратор.Движения.бит_ОборотыПоБюджетам;
	КонецЕсли;
	НаборЗаписей.Записывать = Истина;
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Движения по регистру соотвествие записей трансляции.
	Если ЗаписыватьДвижения Тогда
		СоответствиеЗаписей = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыСведений.бит_СоответствиеЗаписейТрансляции, СоответствиеОтбора);
	Иначе	
		СоответствиеЗаписей = Регистратор.Движения.бит_СоответствиеЗаписейТрансляции;
	КонецЕсли;
	СоответствиеЗаписей.Записывать = Истина;
	СоответствиеЗаписей.Очистить();
	
	Для каждого СтрокаТаблицы Из ДвиженияДенежныхСредств Цикл
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений,СтрокаТаблицы);
		Если Не ЗначениеЗаполнено(СтрокаДвижений.Период) Тогда
			НайденнаяДатаОплаты = Регистратор.Метаданные().Реквизиты.Найти("ДатаОплаты");
			Если НайденнаяДатаОплаты <> Неопределено И Регистратор.Оплачено Тогда
				СтрокаДвижений.Период = ?(НайденнаяДатаОплаты.Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, 
				КонецДня(Регистратор.ДатаОплаты), Регистратор.ДатаОплаты);
			Иначе	
				СтрокаДвижений.Период = Регистратор.Дата;
			КонецЕсли;
		КонецЕсли;                                			
		
		// Проверка допустимости ввода аналитик
		Для каждого КлючИЗначение Из Измерения Цикл
			
			ИмяИзмерения     = КлючИЗначение.Ключ;
			ИмяРеквизитаУчет = "Учет_" + КлючИЗначение.Ключ;
			Если НЕ СтрокаДвижений.СтатьяОборотов[ИмяРеквизитаУчет] Тогда					
				СтрокаДвижений[ИмяИзмерения] = Неопределено;					
			КонецЕсли; 
		КонецЦикла; // Измерения
	КонецЦикла; 
	
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ДобавитьДвижение();
	
	Если ФормироватьЗависимыеОбороты Тогда		
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоНаборуЗаписей(Регистратор, НаборЗаписей);		
	КонецЕсли; 
	
	ТабЗаписейОбороты = НаборЗаписей.Выгрузить();
	
	// Регистру бухгалтерии бюджетирование
	Если ФормироватьПроводкиБюджетирования Тогда
		Если ЗаписыватьДвижения Тогда
			ДвиженияБюджетирование = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыБухгалтерии.бит_Бюджетирование, СоответствиеОтбора);
			бит_Бюджетирование.СформироватьПроводкиБюджетирования(ТабЗаписейОбороты, ДвиженияБюджетирование);
			ДвиженияБюджетирование.Записать();
		Иначе
			бит_Бюджетирование.СформироватьПроводкиБюджетирования(ТабЗаписейОбороты, Регистратор.Движения.бит_Бюджетирование);		
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	СоответствиеЗаписей.Записать();

КонецПроцедуры

#КонецОбласти 

#Область ОтражениеДвиженийДенежныхСредств

Функция ПодготовитьТаблицуДвижениеДенежныхСредств(ПлатежныйДокумент)
	
	МетаданныеДокумента = ПлатежныйДокумент.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	
	ОперациВВалюте = бит_ОбщегоНазначения.СформироватьМассивВидовОперацийВВалютеДокумента();									
	Если ОперациВВалюте.Найти(ПлатежныйДокумент.ВидОперации) <> Неопределено Тогда
		СуммыВВалютеДокумента = Истина;									
	Иначе
		СуммыВВалютеДокумента = Ложь;
	КонецЕсли; 									
	
	// Определим ВидДенежныхСредств
	Если МетаданныеДокумента = Метаданные.Документы.РасходныйКассовыйОрдер
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ПриходныйКассовыйОрдер Тогда
		ВидДенежныхСредств = Перечисления.бит_ВидыДенежныхСредств.Наличные;
	Иначе	
		ВидДенежныхСредств = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
	КонецЕсли; 
	
	ВалютаУпрУчета 				  = Константы.бит_ВалютаУправленческогоУчета.Получить();
	КурсыВалютыУпрУчета 		  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпрУчета, ПлатежныйДокумент.Дата);  
	КурсыВалютыУпрУчета.Курс 	  = ?(КурсыВалютыУпрУчета.Курс = 0, 1, КурсыВалютыУпрУчета.Курс);
	КурсыВалютыУпрУчета.Кратность = ?(КурсыВалютыУпрУчета.Кратность = 0, 1, КурсыВалютыУпрУчета.Кратность);
	
	КурсыВалютыДокумента 		   = бит_КурсыВалют.ПолучитьКурсВалюты(ПлатежныйДокумент.ВалютаДокумента,ПлатежныйДокумент.Дата);
	КурсыВалютыДокумента.Курс 	   = ?(КурсыВалютыДокумента.Курс = 0, 1, КурсыВалютыДокумента.Курс);
	КурсыВалютыДокумента.Кратность = ?(КурсыВалютыДокумента.Кратность = 0, 1, КурсыВалютыДокумента.Кратность);
	
	ЕстьРасшифровкаПлатежа = бит_ОбщегоНазначенияПереопределяемый.ЕстьРасшифровкаПлатежа(ПлатежныйДокумент.Ссылка, 
								ПлатежныйДокумент.ВидОперации);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойКонтрагент",   	Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",   		Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойБанковскийСчет",   Справочники.БанковскиеСчета.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтатьяОборотов",	Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЦФО",    			Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПроект", 			Справочники.Проекты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаУпр", 				Константы.бит_ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("Момент", 				ПлатежныйДокумент.Дата);
	Запрос.УстановитьПараметр("Ссылка", 				ПлатежныйДокумент);
	Запрос.УстановитьПараметр("ВидДенежныхСредств", 	ВидДенежныхСредств);
	Запрос.УстановитьПараметр("СуммыВВалютеДокумента", 	СуммыВВалютеДокумента);
	Запрос.УстановитьПараметр("КурсДокумент", 			КурсыВалютыДокумента.Курс);
	Запрос.УстановитьПараметр("КратностьДокумент", 		КурсыВалютыДокумента.Кратность);
	Запрос.УстановитьПараметр("КурсУпр", 				КурсыВалютыУпрУчета.Курс);
	Запрос.УстановитьПараметр("КратностьУпр", 			КурсыВалютыУпрУчета.Кратность);
	Запрос.УстановитьПараметр("ЕстьРасшифровкаПлатежа", ЕстьРасшифровкаПлатежа);
	
	ВидыОперацийПрочее = Новый Массив; 
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийРКО.ПрочийРасход);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийПКО.ПрочийПриход);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	
	// И д.р. виды операций где нет договора.
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийРКО.УплатаНалога);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаДивидендов);
	
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов);
	ВидыОперацийПрочее.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка);

	Если ВидыОперацийПрочее.Найти(ПлатежныйДокумент.ВидОперации) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПрочийРасход", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПрочийРасход", Ложь);
	КонецЕсли; 

	// Чтобы не испортить алгоритм расчета суммы упр,
	// Для операции Приобретение иностранной валюты вводим флаг.
	ПриобретениеИностраннойВалюты = ?(ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты 
										И Константы.бит_ВалютаУправленческогоУчета.Получить() = Константы.ВалютаРегламентированногоУчета.Получить()
										, Истина, Ложь);
	Запрос.УстановитьПараметр("ПриобретениеИностраннойВалюты", ПриобретениеИностраннойВалюты);

	// Заполним параметры доп. аналитик.
	ИзмеренияПроизв	   = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним");
	ИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Индекс = 1;
	Для каждого КлючИЗначение Из ИзмеренияДоп Цикл
	
		ИмяИзмерения 	 = КлючИЗначение.Ключ;
		ТекущаяНастройка = НастройкиИзмерений[ИмяИзмерения];
		Если ТекущаяНастройка = Неопределено Тогда
			ПустоеЗначение   = Неопределено;
			ТекущаяАналитика = Неопределено;
		Иначе	
			ТекущаяАналитика = ТекущаяНастройка.Аналитика;
			ТипыАналитики  = ТекущаяАналитика.ТипЗначения.Типы();
			Для Каждого ТекущийТип Из ТипыАналитики Цикл
				МассивДляОписания = Новый Массив;
				МассивДляОписания.Добавить(ТекущийТип);
			КонецЦикла;		
			ТекущееОписание  = Новый ОписаниеТипов(ТипыАналитики);
			ПустоеЗначение   = ТекущееОписание.ПривестиЗначение();
		КонецЕсли;
		
		Запрос.Параметры.Вставить("Аналитика_" + Индекс, ТекущаяАналитика);
		Запрос.Параметры.Вставить("ПустоеЗначениеАналитика_" + Индекс, ПустоеЗначение);
		
		Индекс = Индекс + 1;
	КонецЦикла; 

	// Первый запрос - выбираем доп. аналитики
	// второй к доп аналитикам добавляем данные документа и курсов валют
	// третий - выполняем необходимые валютный пересчеты.
	ТекстЗапроса = "";
	ТекстЗапросаДвижениеДенежныхСредствАналитики(ТекстЗапроса);
	ТекстЗапросаДвижениеДенежныхСредствРасшифровкаПлатежа(ПлатежныйДокумент, ТекстЗапроса);
	ТекстЗапросаДвижениеДенежныхСредствДанные(ТекстЗапроса);
	ТекстЗапросаДвижениеДенежныхСредствВыбор(ТекстЗапроса);
			
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат 	 = Запрос.Выполнить();
	
	ТаблицаРезультат = Результат.Выгрузить();
	
	// Заполним валюту исходя из валют документов планирования платежа.
	Если ТаблицаРезультат.Количество() > 0 Тогда
		ТекущаяСтрока = ТаблицаРезультат[0];
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПлатежнаяПозиция) Тогда
			ТаблицаРезультат.ЗаполнитьЗначения(ТекущаяСтрока.ВалютаПлатежнойПозиции,"Валюта");
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ПланируемоеПоступлениеДенежныхСредств) Тогда	
			ТаблицаРезультат.ЗаполнитьЗначения(ТекущаяСтрока.ВалютаПланируемогоПоступления,"Валюта");			
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ТекстЗапросаДвижениеДенежныхСредствАналитики(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеАналитики.Объект КАК Объект,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.Контрагент)
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОНЕЦ) КАК Контрагент,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ДоговорКонтрагента)
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ) КАК ДоговорКонтрагента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ЦФО)
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустойЦФО
	|		КОНЕЦ) КАК ЦФО,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.Проект)
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустойПроект
	|		КОНЕЦ) КАК Проект,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.СтатьяОборотов)
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	|		КОНЕЦ) КАК СтатьяОборотов,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.БанковскийСчет)
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|		КОНЕЦ) КАК БанковскийСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.НоменклатурнаяГруппа)
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|		КОНЕЦ) КАК НоменклатурнаяГруппа,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = &Аналитика_1
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_1
	|		КОНЕЦ) КАК Аналитика_1,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = &Аналитика_2
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_2
	|		КОНЕЦ) КАК Аналитика_2,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = &Аналитика_3
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_3
	|		КОНЕЦ) КАК Аналитика_3,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = &Аналитика_4
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_4
	|		КОНЕЦ) КАК Аналитика_4,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = &Аналитика_5
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_5
	|		КОНЕЦ) КАК Аналитика_5,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = &Аналитика_6
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_6
	|		КОНЕЦ) КАК Аналитика_6,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = &Аналитика_7
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ &ПустоеЗначениеАналитика_7
	|		КОНЕЦ) КАК Аналитика_7,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПланируемоеПоступлениеДенежныхСредств)
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.бит_ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка)
	|		КОНЕЦ) КАК ПланируемоеПоступлениеДенежныхСредств,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция)
	|				ТОГДА ДополнительныеАналитики.ЗначениеАналитики
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.бит_ПлатежнаяПозиция.ПустаяСсылка)
	|		КОНЕЦ) КАК ПлатежнаяПозиция
	|ПОМЕСТИТЬ Аналитики
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК ДополнительныеАналитики
	|ГДЕ
	|	ДополнительныеАналитики.Объект = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДополнительныеАналитики.Объект";

	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецПроцедуры

Процедура ТекстЗапросаДвижениеДенежныхСредствРасшифровкаПлатежа(ПлатежныйДокумент, ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Реквизиты.Организация КАК Организация,
	|	&СчетОрганизации КАК БанковскийСчет,
	|	&ПолеСчетКонтрагента КАК СчетКонтрагента,
	|	&ВидДенежныхСредств КАК ВидДенежныхСредств,
	|	&ПустойБанковскийСчет КАК Касса,
	|	ВЫБОР КОГДА &ПрочийРасход ТОГДА &ПустойКонтрагент ИНАЧЕ Реквизиты.Контрагент КОНЕЦ КАК Контрагент,
	|	ВЫБОР КОГДА &ПрочийРасход ТОГДА &ПустойДоговор ИНАЧЕ Реквизиты.ДоговорКонтрагента КОНЕЦ КАК ДоговорКонтрагента,
	|	РаспределениеБюджета.ЦФО КАК ЦФО,
	|	РаспределениеБюджета.СтатьяОборотов КАК СтатьяОборотов,
	|	РаспределениеБюджета.Проект КАК Проект,
	|	РаспределениеБюджета.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РаспределениеБюджета.СуммаПлатежа КАК СуммаПлатеж,
	|	ВЫБОР
	|		КОГДА РаспределениеБюджета.СуммаВзаиморасчетов = 0
	|			ТОГДА РаспределениеБюджета.СуммаПлатежа
	|		ИНАЧЕ РаспределениеБюджета.СуммаВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	РаспределениеБюджета.Аналитика_1 КАК Аналитика_1,
	|	РаспределениеБюджета.Аналитика_2 КАК Аналитика_2,
	|	РаспределениеБюджета.Аналитика_3 КАК Аналитика_3,
	|	РаспределениеБюджета.Аналитика_4 КАК Аналитика_4,
	|	РаспределениеБюджета.Аналитика_5 КАК Аналитика_5,
	|	РаспределениеБюджета.Аналитика_6 КАК Аналитика_6,
	|	РаспределениеБюджета.Аналитика_7 КАК Аналитика_7,
	|	РаспределениеБюджета.ДокументПланирования КАК ПлатежнаяПозиция,
	|	Реквизиты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	#РаспределениеБюджета КАК РаспределениеБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ #Реквизиты КАК Реквизиты
	|		ПО РаспределениеБюджета.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|	И НЕ &ЕстьРасшифровкаПлатежа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Организация,
	|	&СчетОрганизации,
	|	&ПолеСчетКонтрагента,
	|	&ВидДенежныхСредств,
	|	&ПустойБанковскийСчет,
	|	ВЫБОР
	|		КОГДА Таблица.ДоговорКонтрагента = &ПустойДоговор
	|			ТОГДА &ПустойКонтрагент
	|		ИНАЧЕ Таблица.ДоговорКонтрагента.Владелец
	|	КОНЕЦ,
	|	Таблица.ДоговорКонтрагента,
	|	РаспределениеБюджета.ЦФО,
	|	РаспределениеБюджета.СтатьяОборотов,
	|	РаспределениеБюджета.Проект,
	|	РаспределениеБюджета.НоменклатурнаяГруппа,
	|	РаспределениеБюджета.СуммаПлатежа,
	|	ВЫБОР
	|		КОГДА РаспределениеБюджета.СуммаВзаиморасчетов = 0
	|			ТОГДА РаспределениеБюджета.СуммаПлатежа
	|		ИНАЧЕ РаспределениеБюджета.СуммаВзаиморасчетов
	|	КОНЕЦ,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВалютаДокумента,
	|	РаспределениеБюджета.Аналитика_1,
	|	РаспределениеБюджета.Аналитика_2,
	|	РаспределениеБюджета.Аналитика_3,
	|	РаспределениеБюджета.Аналитика_4,
	|	РаспределениеБюджета.Аналитика_5,
	|	РаспределениеБюджета.Аналитика_6,
	|	РаспределениеБюджета.Аналитика_7,
	|	РаспределениеБюджета.ДокументПланирования,
	|	Таблица.Ссылка
	|ИЗ
	|	#РасшифровкаПлатежа КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РаспределениеБюджета КАК РаспределениеБюджета
	|		ПО Таблица.Ссылка = РаспределениеБюджета.Ссылка
	|			И Таблица.бит_КлючСтроки = РаспределениеБюджета.бит_КлючСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ #Реквизиты КАК Реквизиты
	|		ПО Таблица.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|	И &ЕстьРасшифровкаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасшифровкаПлатежа.Организация КАК Организация,
	|	РасшифровкаПлатежа.БанковскийСчет КАК БанковскийСчет,
	|	РасшифровкаПлатежа.СчетКонтрагента КАК СчетКонтрагента,
	|	РасшифровкаПлатежа.Касса КАК Касса,
	|	РасшифровкаПлатежа.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Контрагент = &ПустойКонтрагент
	|			ТОГДА ЕСТЬNULL(Аналитики.Контрагент, &ПустойКонтрагент)
	|		ИНАЧЕ РасшифровкаПлатежа.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДоговорКонтрагента = &ПустойДоговор
	|			ТОГДА ЕСТЬNULL(Аналитики.ДоговорКонтрагента, &ПустойДоговор)
	|		ИНАЧЕ РасшифровкаПлатежа.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	Аналитики.ПланируемоеПоступлениеДенежныхСредств КАК ПланируемоеПоступлениеДенежныхСредств,
	|	Аналитики.ПланируемоеПоступлениеДенежныхСредств.ВалютаДокумента КАК ВалютаПланируемогоПоступления,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ЦФО = &ПустойЦФО
	|			ТОГДА ЕСТЬNULL(Аналитики.ЦФО, &ПустойЦФО)
	|		ИНАЧЕ РасшифровкаПлатежа.ЦФО
	|	КОНЕЦ КАК ЦФО,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.СтатьяОборотов = &ПустаяСтатьяОборотов
	|			ТОГДА ЕСТЬNULL(Аналитики.СтатьяОборотов, &ПустаяСтатьяОборотов)
	|		ИНАЧЕ РасшифровкаПлатежа.СтатьяОборотов
	|	КОНЕЦ КАК СтатьяОборотов,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Проект = &ПустойПроект
	|			ТОГДА ЕСТЬNULL(Аналитики.Проект, &ПустойПроект)
	|		ИНАЧЕ РасшифровкаПлатежа.Проект
	|	КОНЕЦ КАК Проект,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.НоменклатурнаяГруппа = &ПустаяНоменклатурнаяГруппа
	|			ТОГДА Аналитики.НоменклатурнаяГруппа
	|		ИНАЧЕ РасшифровкаПлатежа.НоменклатурнаяГруппа
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	РасшифровкаПлатежа.СуммаПлатеж КАК СуммаПлатеж,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.Валюта КАК Валюта,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&КурсДокумент КАК КурсВзаиморасчетов,
	|	&КратностьДокумент КАК КратностьВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПлатежнаяПозиция = ЗНАЧЕНИЕ(Документ.бит_ПлатежнаяПозиция.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(Аналитики.ПлатежнаяПозиция, ЗНАЧЕНИЕ(Документ.бит_ПлатежнаяПозиция.ПустаяСсылка))
	|		ИНАЧЕ РасшифровкаПлатежа.ПлатежнаяПозиция
	|	КОНЕЦ КАК ПлатежнаяПозиция,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_1, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_1
	|	КОНЕЦ КАК Аналитика_1,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_2, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_2
	|	КОНЕЦ КАК Аналитика_2,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_3 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_3, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_3
	|	КОНЕЦ КАК Аналитика_3,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_4 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_4, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_4
	|	КОНЕЦ КАК Аналитика_4,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_5 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_5, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_5
	|	КОНЕЦ КАК Аналитика_5,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_6 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_6, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_6
	|	КОНЕЦ КАК Аналитика_6,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Аналитика_7 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(Аналитики.Аналитика_7, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ РасшифровкаПлатежа.Аналитика_7
	|	КОНЕЦ КАК Аналитика_7
	|ПОМЕСТИТЬ РасшифровкаПлатежаСАналитиками
	|ИЗ
	|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Аналитики КАК Аналитики
	|		ПО РасшифровкаПлатежа.Ссылка = Аналитики.Объект";
	
	МетаданныеДокумента = ПлатежныйДокумент.Метаданные();
	ИмяДокумента 		= МетаданныеДокумента.Имя;							

	// Поле выбора "БанковскийСчет".
	ЧтоЗаменить = "&СчетОрганизации";	
	ЕстьСчетОрганизации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокумента);
	Если ЕстьСчетОрганизации Тогда		
		НаЧтоЗаменить = 
		"
		|	Реквизиты.СчетОрганизации";
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ПриходныйКассовыйОрдер 
		И ТипЗнч(ПлатежныйДокумент.Контрагент) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		НаЧтоЗаменить = 
		"
		|	Реквизиты.Контрагент";
	Иначе
		НаЧтоЗаменить =  
		"
		|	&ПустойБанковскийСчет";
	КонецЕсли; 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
	
	// Поле выбора "СчетКонтрагента".
	ЧтоЗаменить = "&ПолеСчетКонтрагента";
	ЕстьСчетКонтрагента = ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетКонтрагента", МетаданныеДокумента);
	Если ЕстьСчетКонтрагента Тогда
		НаЧтоЗаменить = 
		"
		|	Реквизиты.СчетКонтрагента";
	Иначе	
		НаЧтоЗаменить =  
		"
		|	&ПустойБанковскийСчет";
	КонецЕсли; 		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);

	// Установка основной таблицы.
	ЧтоЗаменить   = "#Реквизиты";
	НаЧтоЗаменить = "Документ." + ИмяДокумента;
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
	
	ЧтоЗаменить   = "#РасшифровкаПлатежа";
	НаЧтоЗаменить = "Документ." + ИмяДокумента + ".РасшифровкаПлатежа";
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);

	// Установка таблицы распределения.
	ЧтоЗаменить   = "#РаспределениеБюджета";
	НаЧтоЗаменить = "Документ." + ИмяДокумента + ".бит_РаспределениеБюджета";
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
		
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецПроцедуры

Процедура ТекстЗапросаДвижениеДенежныхСредствДанные(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.Организация КАК Организация,
	|	РасшифровкаПлатежа.БанковскийСчет КАК БанковскийСчет,
	|	РасшифровкаПлатежа.СчетКонтрагента КАК СчетКонтрагента,
	|	РасшифровкаПлатежа.Касса КАК Касса,
	|	РасшифровкаПлатежа.ПлатежнаяПозиция.ВалютаДокумента КАК ВалютаПлатежнойПозиции,
	|	РасшифровкаПлатежа.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|	РасшифровкаПлатежа.Контрагент КАК Контрагент,
	|	РасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасшифровкаПлатежа.ПлатежнаяПозиция.ДокументОснование КАК Заявка,
	|	РасшифровкаПлатежа.Аналитика_1 КАК Аналитика_1,
	|	РасшифровкаПлатежа.Аналитика_2 КАК Аналитика_2,
	|	РасшифровкаПлатежа.Аналитика_3 КАК Аналитика_3,
	|	РасшифровкаПлатежа.Аналитика_4 КАК Аналитика_4,
	|	РасшифровкаПлатежа.Аналитика_5 КАК Аналитика_5,
	|	РасшифровкаПлатежа.Аналитика_6 КАК Аналитика_6,
	|	РасшифровкаПлатежа.Аналитика_7 КАК Аналитика_7,
	|	РасшифровкаПлатежа.ПланируемоеПоступлениеДенежныхСредств КАК ПланируемоеПоступлениеДенежныхСредств,
	|	РасшифровкаПлатежа.ВалютаПланируемогоПоступления КАК ВалютаПланируемогоПоступления,
	|	РасшифровкаПлатежа.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
	|	РасшифровкаПлатежа.ЦФО КАК ЦФО,
	|	РасшифровкаПлатежа.СтатьяОборотов КАК СтатьяОборотов,
	|	РасшифровкаПлатежа.Проект КАК Проект,
	|	РасшифровкаПлатежа.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РасшифровкаПлатежа.СуммаПлатеж КАК СуммаПлатеж,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.Валюта КАК Валюта,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	РасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	&КурсУпр КАК КурсУпр,
	|	&КратностьУпр КАК КратностьУпр,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалютЗаявка.Курс, 0) <> 0
	|			ТОГДА КурсыВалютЗаявка.Курс
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсЗаявка,
	|	ЕСТЬNULL(КурсыВалютЗаявка.Кратность, 1) КАК КратностьЗаявка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыПлПоступления.Курс, 0) <> 0
	|			ТОГДА КурсыПлПоступления.Курс
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсПлПоступления,
	|	ЕСТЬNULL(КурсыПлПоступления.Кратность, 1) КАК КратностьПлПоступления
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	РасшифровкаПлатежаСАналитиками КАК РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент, ) КАК КурсыВалютЗаявка
	|		ПО РасшифровкаПлатежа.ПлатежнаяПозиция.ВалютаДокумента = КурсыВалютЗаявка.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент, ) КАК КурсыПлПоступления
	|		ПО РасшифровкаПлатежа.ВалютаПланируемогоПоступления = КурсыПлПоступления.Валюта";

	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецПроцедуры

Процедура ТекстЗапросаДвижениеДенежныхСредствВыбор(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Данные.Заявка КАК Заявка,
	|	Данные.Организация КАК Организация,
	|	Данные.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|	Данные.БанковскийСчет КАК БанковскийСчет,
	|	Данные.Касса КАК Касса,
	|	Данные.СчетКонтрагента КАК СчетКонтрагента,
	|	Данные.Валюта КАК Валюта,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Данные.ЦФО КАК ЦФО,
	|	Данные.СтатьяОборотов КАК СтатьяОборотов,
	|	Данные.Проект КАК Проект,
	|	Данные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Данные.Аналитика_1 КАК Аналитика_1,
	|	Данные.Аналитика_2 КАК Аналитика_2,
	|	Данные.Аналитика_3 КАК Аналитика_3,
	|	Данные.Аналитика_4 КАК Аналитика_4,
	|	Данные.Аналитика_5 КАК Аналитика_5,
	|	Данные.Аналитика_6 КАК Аналитика_6,
	|	Данные.Аналитика_7 КАК Аналитика_7,
	|	Данные.ПланируемоеПоступлениеДенежныхСредств КАК ПланируемоеПоступлениеДенежныхСредств,
	|	Данные.ВалютаПланируемогоПоступления КАК ВалютаПланируемогоПоступления,
	|	Данные.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
	|	Данные.ВалютаПлатежнойПозиции КАК ВалютаПлатежнойПозиции,
	|	Данные.СуммаПлатеж КАК СуммаВзаиморасчеты,
	|	Данные.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА Данные.Валюта = Данные.ВалютаВзаиморасчетов
	|			ТОГДА Данные.СуммаПлатеж * Данные.КурсВзаиморасчетов / Данные.КратностьВзаиморасчетов
	|		ИНАЧЕ Данные.СуммаПлатеж
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА &ПриобретениеИностраннойВалюты
	|			ТОГДА Данные.СуммаПлатеж * Данные.КурсВзаиморасчетов / Данные.КратностьВзаиморасчетов
	|		КОГДА Данные.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаУпр И НЕ Данные.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА Данные.СуммаВзаиморасчетов
	|		КОГДА Данные.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА
	|			ТОГДА Данные.СуммаПлатеж * Данные.КратностьУпр / Данные.КурсУпр
	|		КОГДА Данные.Валюта = &ВалютаУпр
	|			ТОГДА Данные.СуммаПлатеж
	|		КОГДА Данные.Валюта = Данные.ВалютаВзаиморасчетов
	|			ТОГДА Данные.КурсВзаиморасчетов * Данные.КратностьУпр * Данные.СуммаПлатеж / (Данные.КратностьВзаиморасчетов * Данные.КурсУпр)
	|		ИНАЧЕ Данные.СуммаПлатеж * Данные.КратностьУпр / Данные.КурсУпр
	|	КОНЕЦ КАК СуммаУпр,
	// Если к платежным документам привязаны документы планирования платежа,
	// вычислим суммы в валюте документа планирования платежа, чтобы регистры закрылись, 
	// и в отчетах можно было сопоставить суммы по плану и факту.
	|	ВЫБОР
	|		КОГДА Данные.ВалютаПланируемогоПоступления = Данные.Валюта
	|			ТОГДА Данные.СуммаПлатеж
	|		КОГДА Данные.ВалютаПланируемогоПоступления = Данные.ВалютаВзаиморасчетов
	|			ТОГДА Данные.СуммаВзаиморасчетов
	|		КОГДА НЕ Данные.ПланируемоеПоступлениеДенежныхСредств ЕСТЬ NULL
	|				И Данные.ПланируемоеПоступлениеДенежныхСредств <> ЗНАЧЕНИЕ(Документ.бит_ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка)
	|			ТОГДА Данные.КурсВзаиморасчетов * Данные.КратностьПлПоступления * Данные.СуммаПлатеж / (Данные.КратностьВзаиморасчетов * Данные.КурсПлПоступления)
	|		ИНАЧЕ Данные.СуммаПлатеж
	|	КОНЕЦ КАК СуммаПоступления,
	|	ВЫБОР
	|		КОГДА Данные.ВалютаПлатежнойПозиции = Данные.Валюта
	|			ТОГДА Данные.СуммаПлатеж
	|		КОГДА Данные.ВалютаПлатежнойПозиции = Данные.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Данные.СуммаВзаиморасчетов
	|		КОГДА НЕ Данные.Заявка ЕСТЬ NULL
	|				И Данные.Заявка <> ЗНАЧЕНИЕ(Документ.бит_ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
	|			ТОГДА Данные.КурсВзаиморасчетов * Данные.КратностьЗаявка * Данные.СуммаПлатеж / (Данные.КратностьВзаиморасчетов * Данные.КурсЗаявка)
	|		ИНАЧЕ Данные.СуммаПлатеж
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Данные КАК Данные";

КонецПроцедуры

Процедура СформироватьДвиженияДвиженияДенежныхСредств(Регистратор, ТаблицаДвижений, ДвиженияДенежныхСредств, Направление)
	
	Для каждого СтрокаТаблицы Из ДвиженияДенежныхСредств Цикл
		
		СуммаДвижения        = СтрокаТаблицы.Сумма;
		ДокументПланирования = СтрокаТаблицы.ПлатежнаяПозиция;
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений,СтрокаТаблицы);
		СтрокаДвижений.ДокументПланирования   = ДокументПланирования;				
		СтрокаДвижений.РасходДоход            = Направление;
		СтрокаДвижений.Сумма                  = СуммаДвижения;
		Если СтрокаТаблицы.ВидДенежныхСредств = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда
			
			СтрокаДвижений.БанковскийСчет = СтрокаТаблицы.Касса;
			
		КонецЕсли; 
		
		СтатьяОборотов = ПолучитьСтатьюСПротивоположнымНаправлением(СтрокаДвижений.СтатьяОборотов);
		Если СтатьяОборотов = Неопределено Тогда
			СтатьяОборотов = СтрокаТаблицы.СтатьяОборотов;
		КонецЕсли;
		
		// СписаниеСРасчетногоСчета
		Если Регистратор.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
			И НЕ ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Регистратор.Организация, Регистратор.Дата) Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижений,СтрокаТаблицы);
			СтрокаДвижений.СтатьяОборотов		= СтатьяОборотов;
			СтрокаДвижений.ДокументПланирования = СтрокаТаблицы.ПланируемоеПоступлениеДенежныхСредств;				
			СтрокаДвижений.РасходДоход          = Перечисления.бит_РасходДоход.Поступление;
			СтрокаДвижений.БанковскийСчет		= СтрокаТаблицы.СчетКонтрагента;
			СтрокаДвижений.Сумма                = СуммаДвижения;
		КонецЕсли;
		
		// Изменение кода. Начало. 06.04.2018{{
		Если ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Регистратор.Организация, Регистратор.Дата) Тогда
			Если Регистратор.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
				
				ТаблицаДвижений.Очистить();
				ЗаполнитьТаблицуДвиженийПереводыВПути(ТаблицаДвижений, СтрокаТаблицы, СтрокаТаблицы.СтатьяОборотов, 
					ДокументПланирования, СуммаДвижения, Перечисления.бит_РасходДоход.Расходование);
					
			ИначеЕсли Регистратор.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда		
				
				ТаблицаДвижений.Очистить();
				ЗаполнитьТаблицуДвиженийПереводыВПути(ТаблицаДвижений, СтрокаТаблицы, СтрокаТаблицы.СтатьяОборотов, 
					ДокументПланирования, СуммаДвижения, Перечисления.бит_РасходДоход.Расходование,
					Перечисления.бит_ВидыДенежныхСредств.Наличные);
					
			ИначеЕсли Регистратор.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда 
				
				ТаблицаДвижений.Очистить();
				ЗаполнитьТаблицуДвиженийПереводыВПути(ТаблицаДвижений, СтрокаТаблицы, СтрокаТаблицы.СтатьяОборотов, 
					ДокументПланирования, СуммаДвижения, Перечисления.бит_РасходДоход.Поступление,
					Перечисления.бит_ВидыДенежныхСредств.Наличные);
					
			ИначеЕсли Регистратор.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда 
				
				ТаблицаДвижений.Очистить();
				ЗаполнитьТаблицуДвиженийПереводыВПути(ТаблицаДвижений, СтрокаТаблицы, СтрокаТаблицы.СтатьяОборотов, 
					ДокументПланирования, СуммаДвижения, Перечисления.бит_РасходДоход.Поступление);
					
			КонецЕсли; 
		Иначе
			Если Регистратор.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
				
				ТаблицаДвижений.Очистить();
				ЗаполнитьТаблицуДвиженийПереводыВПути(ТаблицаДвижений, СтрокаТаблицы, СтрокаТаблицы.СтатьяОборотов, 
					ДокументПланирования, СуммаДвижения, Перечисления.бит_РасходДоход.Расходование,
					Перечисления.бит_ВидыДенежныхСредств.Наличные);
				ЗаполнитьТаблицуДвиженийПереводыВПути(ТаблицаДвижений, СтрокаТаблицы, СтатьяОборотов, 
					ДокументПланирования, СуммаДвижения, Перечисления.бит_РасходДоход.Поступление);
					
			ИначеЕсли Регистратор.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда 
				
				ТаблицаДвижений.Очистить();
				ЗаполнитьТаблицуДвиженийПереводыВПути(ТаблицаДвижений, СтрокаТаблицы, СтатьяОборотов, 
					ДокументПланирования, СуммаДвижения, Перечисления.бит_РасходДоход.Расходование);
				ЗаполнитьТаблицуДвиженийПереводыВПути(ТаблицаДвижений, СтрокаТаблицы, СтрокаТаблицы.СтатьяОборотов, 
					ДокументПланирования, СуммаДвижения, Перечисления.бит_РасходДоход.Поступление,
					Перечисления.бит_ВидыДенежныхСредств.Наличные);
					
			КонецЕсли;	
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область ФормированиеПлатежныхДокументов

Процедура ПодготовитьСтрокуРасшифровкиПлатежа(ПлатежныйДокумент, СтрокаРасшифровки, ПодборкаСтатейДДС)
	
	// В БП 3.0 курс, кратность документа платежа передается через доп.свойства объекта.
	ПлатежныйДокументКурс = ?(ПлатежныйДокумент.ДополнительныеСвойства.Свойство("КурсДокумента"),
							ПлатежныйДокумент.ДополнительныеСвойства.КурсДокумента,
							ПлатежныйДокумент.КурсДокумента);
							
	ПлатежныйДокументКратность = ?(ПлатежныйДокумент.ДополнительныеСвойства.Свойство("КратностьДокумента"),
							ПлатежныйДокумент.ДополнительныеСвойства.КратностьДокумента,
							ПлатежныйДокумент.КратностьДокумента);						
							

	// Установим сумму взаиморасчетов в строке платежки
	ВалютаДоговора = СтрокаРасшифровки.ВалютаВзаиморасчетов;
	Если ЗначениеЗаполнено(ВалютаДоговора) Тогда
		Если СтрокаРасшифровки.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.Оператор Тогда
			ПараметрыКурса = Новый Структура;
			ПараметрыКурса.Вставить("Курс"     ,СтрокаРасшифровки.КурсДокумента);
			ПараметрыКурса.Вставить("Кратность",СтрокаРасшифровки.КратностьДокумента);
		Иначе	
			ПараметрыКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДоговора,ПлатежныйДокумент.Дата);
			Если СтрокаРасшифровки.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.ЦБпроц Тогда
				 ПараметрыКурса.Курс = ПараметрыКурса.Курс * (100 + СтрокаРасшифровки.Процент)/100;
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаРасшифровки.КурсВзаиморасчетов      = ПараметрыКурса.Курс;
		СтрокаРасшифровки.КратностьВзаиморасчетов = ПараметрыКурса.Кратность;
	Иначе
		СтрокаРасшифровки.КурсВзаиморасчетов      = ПлатежныйДокументКурс;
		СтрокаРасшифровки.КратностьВзаиморасчетов = ПлатежныйДокументКратность;
	КонецЕсли; 

	СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = ПодборкаСтатейДДС.Получить(СтрокаРасшифровки.СтатьяОборотов);
	
КонецПроцедуры

Функция ПодборкаСтатейДвиженияДенежныхСредств(Знач СтатьиОборотов, ВидОперации, ЕстьРасшифровкаПлатежа)
	
	// Порядок поиска:
	// 1. В реквизитах статьи оборотов.
	// 2. В регистре сведений "бит_СтатьиОборотов_СтатьиРегл".
	// 3. По виду операции регл. документа средствами конфигурации поставщика.
	
	// Для видов операции, которые не поддерживают многострочную расшифровку платежа,
	// нужно заполнить одну статью ДДС во всех позициях подборки. 
	// Это обеспечит группировку данных платежных позиций.
	ОсновнаяСтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтатьиОборотов);
	
	ПодборкаСтатейДДС = Новый Соответствие; 
	Для каждого СтатьяОборотов Из СтатьиОборотов Цикл
		
		Если НЕ ЕстьРасшифровкаПлатежа И ЗначениеЗаполнено(ОсновнаяСтатьяДДС) Тогда
			// Нашлась основная статья.
			Прервать;
		КонецЕсли;
		
		СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
			СтатьяДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяОборотов, 
							"ОсновнаяСтатьяДДС");
			Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
				Кандидаты = бит_Бюджетирование.СвязанныеСтатьиОборотовИСтатьиРегл(
								СтатьяОборотов, "СправочникСсылка.СтатьиДвиженияДенежныхСредств");
				Если Кандидаты.Количество() <> 0 Тогда
					СтатьяДДС = Кандидаты[0];
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
			СтатьяДДС = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ВидОперации);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
			// Нормализация данных.
			СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		КонецЕсли;
		ПодборкаСтатейДДС.Вставить(СтатьяОборотов, СтатьяДДС);
		
		Если НЕ ЕстьРасшифровкаПлатежа И ЗначениеЗаполнено(СтатьяДДС) Тогда
			// Поиск основной статьи завершен.
			ОсновнаяСтатьяДДС = СтатьяДДС;	
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ ЕстьРасшифровкаПлатежа Тогда
		Для каждого СтатьяОборотов Из СтатьиОборотов Цикл
			ПодборкаСтатейДДС.Вставить(СтатьяОборотов, ОсновнаяСтатьяДДС);
		КонецЦикла;
	КонецЕсли; 
	
	Возврат ПодборкаСтатейДДС;
	
КонецФункции

Процедура ЗаполнитьПлатежныйДокумент(ПлатежныйДокумент, ПлатежныеПозиции, ПараметрыРасшифровкиПлатежа, 
			ПлатежноеПоручение, ПараметрыФормирования)
										
	ПлатежнаяПозиция = ПлатежныеПозиции[0];
	
	// Получим значения для заполнения платежного поручения.
	ДатаОплаты 					 = ПараметрыФормирования.ДатаОплаты;
	//1С-ИжТиСи, Кондратьев, 16.03.2020, Обновление, исправленный код без комментариев (
	//ВалютаПлатежа 				 = ПараметрыФормирования.ВалютаПлатежа;
	ВалютаПлатежа = ?(ПараметрыФормирования.Свойство("ВалютаПлатежа"), ПараметрыФормирования.ВалютаПлатежа, Константы.ВалютаРегламентированногоУчета.Получить());
	//1С-ИжТиСи, Кондратьев, 16.03.2020, Обновление, исправленный код без комментариев )

	ОбъединятьНазначенияПлатежей = ПараметрыФормирования.ОбъединятьНазначенияПлатежей;

	Заявка 	   			   = ПлатежнаяПозиция.ДокументОснование;
	ТекущийПользователь    = Пользователи.ТекущийПользователь();
	МетаданныеПлатежка     = ПлатежныйДокумент.Метаданные();
	ИмяДокументаПлатежа    = МетаданныеПлатежка.Имя;
	
	ЕстьПлатежноеПоручение 		  = ?(ЗначениеЗаполнено(ПлатежноеПоручение), Истина, Ложь);
	ЕстьРеквизитНазначениеПлатежа = ОбщегоНазначения.ЕстьРеквизитОбъекта("НазначениеПлатежа", МетаданныеПлатежка);
	КоличествоСубконтоБУ  		  = 3;
	
	// +СБ. Широков Николай. 2015-01-29. Консультация #1244 
	//ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаРегл = ПараметрыФормирования.ВалютаРегл;
	// -СБ. Широков Николай
	
	// Заполним документ.
	Если ЕстьПлатежноеПоручение Тогда
		ПлатежныйДокумент.ДокументОснование = ПлатежноеПоручение;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаВходящегоДокумента", МетаданныеПлатежка) Тогда
			ПлатежныйДокумент.ДатаВходящегоДокумента = ПлатежноеПоручение.Дата;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеПлатежка) Тогда
			ПлатежныйДокумент.НомерВходящегоДокумента = бит_ОбщегоНазначенияКлиентСервер.ПолучитьНомерНаПечать(ПлатежноеПоручение);
		КонецЕсли;
	КонецЕсли;
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-07-27 (#ТП_БП05_ФР09)
	Если ПараметрыФормирования.НеФормироватьПлатежныеПоручения Тогда
		ПлатежныйДокумент.ДокументОснование = ПлатежнаяПозиция.Ссылка;
	КонецЕсли;
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-07-27 (#ТП_БП05_ФР09)
	
	// +СБ. Широков Николай. 2015-02-18. Доработка #1346
	//ПлатежныйДокумент.УстановитьНовыйНомер();
	//
	//Номер = СокрЛП(ПлатежныйДокумент.Номер);
	//
	//Если Прав(Номер, 3) = "000" Тогда
	//	ПлатежныйДокумент.Номер = Лев(Номер, СтрДлина(Номер) - 1) + "1";
	//КонецЕсли;
	//ОК
	// -СБ. Широков Николай	
	
	// Определим вид операции.
	СоответствиеВидовОпераций 	  = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл(ИмяДокументаПлатежа);
	ПлатежныйДокумент.ВидОперации = СоответствиеВидовОпераций[ПараметрыФормирования.ВидОперации];
	
	ПлатежныйДокумент.Дата = ?(ЗначениеЗаполнено(ДатаОплаты), ДатаОплаты, ТекущаяДата());
	ПлатежныйДокумент.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	
	ПлатежныйДокумент.Организация 		= ПараметрыФормирования.Организация;
	ПлатежныйДокумент.Контрагент		= ПараметрыФормирования.Контрагент;
	ПлатежныйДокумент.СчетОрганизации 	= ПараметрыФормирования.БанковскийСчетОрганизация;
	ПлатежныйДокумент.Ответственный 	= ТекущийПользователь;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетКонтрагента", МетаданныеПлатежка) Тогда
		ПлатежныйДокумент.СчетКонтрагента = ПараметрыФормирования.БанковскийСчетКонтрагент;
	КонецЕсли;
	
	Если ЕстьРеквизитНазначениеПлатежа Тогда
		Если ЕстьПлатежноеПоручение Тогда
			ПлатежныйДокумент.НазначениеПлатежа = ПлатежноеПоручение.НазначениеПлатежа;
		Иначе                                                                                
			Если ОбъединятьНазначенияПлатежей Тогда
				ПлатежныйДокумент.НазначениеПлатежа = НазначениеПлатежаПоПлатежнымПозициям(ПлатежныеПозиции);
			Иначе
				ПлатежныйДокумент.НазначениеПлатежа = ПлатежнаяПозиция.НазначениеПлатежа;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизЛицо", МетаданныеПлатежка) Тогда
		ПлатежныйДокумент.ФизЛицо = ПлатежнаяПозиция.ФизическоеЛицо;
	КонецЕсли;
	
	Если ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		Или ПлатежнаяПозиция.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаРаботнику
		Или ПлатежнаяПозиция.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		ПлатежныйДокумент.Контрагент = ПлатежнаяПозиция.ФизическоеЛицо;
	ИначеЕсли ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		ПлатежныйДокумент.Контрагент = ПлатежнаяПозиция.ФизическоеЛицо;
		// Заполнение данных на закладке "Печать" РКО.
		ДанныеФизЛица = бит_БухгалтерияСервер.ДанныеФизЛица(ПлатежнаяПозиция.Организация, ПлатежнаяПозиция.ФизическоеЛицо, ПлатежнаяПозиция.Дата, Ложь);
		// Заполнение данных на закладке "Печать" РКО.
		ПлатежныйДокумент.Выдать		= ?(ДанныеФизЛица.Свойство("Представление"),ДанныеФизЛица.Представление,Неопределено);				
		ПлатежныйДокумент.ПоДокументу = ?(ДанныеФизЛица.Свойство("ПредставлениеДокумента"),ДанныеФизЛица.ПредставлениеДокумента,Неопределено);
	ИначеЕсли ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
		ИЛИ ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику 
		ИЛИ ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов 
		ИЛИ ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-03-24 (#ТП_БП05_ФР09)
		//ПлатежныйДокумент.Контрагент = ПлатежнаяПозиция.ФизическоеЛицо;
		Если ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
			ПлатежныйДокумент.Контрагент = Неопределено;
		Иначе
			ПлатежныйДокумент.Контрагент = ПлатежнаяПозиция.ФизическоеЛицо;
		КонецЕсли;
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-03-24 (#ТП_БП05_ФР09)
		
	ИначеЕсли ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда 
		
		ПлатежныйДокумент.Налог = ПлатежнаяПозиция.Налог;
		
		Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ПлатежныйДокумент.Налог.ВидНалога) Тогда
			ПлатежныйДокумент.НалоговыйПериод = НачалоГода(ПлатежнаяПозиция.ДатаРасхода);
		Иначе
			ПлатежныйДокумент.НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(ПлатежнаяПозиция.ДатаРасхода, -1));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПлатежнаяПозиция.ВидНалоговогоОбязательства) Тогда
		
			ПлатежныйДокумент.ВидНалоговогоОбязательства = ПлатежнаяПозиция.ВидНалоговогоОбязательства;
		
		КонецЕсли; 
		
		ЗаполнитьНазначениеПлатежаИзНалога(ПлатежныйДокумент, ПлатежнаяПозиция.ДатаРасхода, ПлатежнаяПозиция.НазначениеПлатежа);
		
	ИначеЕсли ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		ПлатежныйДокумент.Контрагент 		= бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяПозиция.ДокументОснование, "Получатель");
		ПлатежныйДокумент.Налогоплательщик 	= ПлатежнаяПозиция.Контрагент;
	ИначеЕсли ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов
		ИЛИ ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов Тогда 
		Если ЗначениеЗаполнено(ПараметрыФормирования.Контрагент) Тогда
			ПлатежныйДокумент.Контрагент = ПараметрыФормирования.Контрагент;
		Иначе	
			ПлатежныйДокумент.Контрагент = ПлатежнаяПозиция.ФизическоеЛицо;
		КонецЕсли; 
	КонецЕсли;
	
	Если ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		
		ПлатежныйДокумент.ПлатежнаяВедомость = ПлатежнаяПозиция.ПлатежнаяВедомость;
		
	ИначеЕсли ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		ПлатежныйДокумент.ВыплатаЗаработнойПлаты.Загрузить(ПлатежнаяПозиция.ПеречислениеЗаработнойПлаты);
		
	ИначеЕсли ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда 
		
		ПлатежныйДокумент.ПеречислениеЗаработнойПлаты.Загрузить(ПлатежнаяПозиция.ПеречислениеЗаработнойПлаты);
	
	ИначеЕсли ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		ПлатежныйДокумент.ВыплатаДепонентов.Загрузить(ПлатежнаяПозиция.ПеречислениеДепонентов);
		
	ИначеЕсли ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		
		ПлатежныйДокумент.ПеречислениеДепонентов.Загрузить(ПлатежнаяПозиция.ПеречислениеДепонентов);
		
	КонецЕсли; 		
	
	ПлатежныйДокумент.ВалютаДокумента = ПараметрыФормирования.ВалютаПлатежныхПозиций;
	
	// Заполним курс и кратность валюты документа.
	Если ПлатежныйДокумент.ВалютаДокумента = ВалютаРегл Тогда
		ПлатежныйДокумент.ДополнительныеСвойства.Вставить("КурсДокумента",1);
		ПлатежныйДокумент.ДополнительныеСвойства.Вставить("КратностьДокумента",1);
	Иначе
		СтрКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПлатежныйДокумент.ВалютаДокумента, ПлатежныйДокумент.Дата);
		ПлатежныйДокумент.ДополнительныеСвойства.Вставить("КурсДокумента",СтрКурса.Курс);
		ПлатежныйДокумент.ДополнительныеСвойства.Вставить("КратностьДокумента",СтрКурса.Кратность);
	КонецЕсли; 
	
	РезСтруктура = ОпределитьСчетБанкКасса(ПлатежныйДокумент.ВалютаДокумента, ИмяДокументаПлатежа, ВалютаРегл);
	
	ПлатежныйДокумент[РезСтруктура.ИмяРеквизита] = РезСтруктура.Счет;
	
	Если ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		ПлатежныйДокумент.СчетОрганизации = ПлатежнаяПозиция.БанковскийСчетОрганизацияПриемник;
		
		// Заполним счет учета расчетов с контрагентом.
		РезСтруктура = ОпределитьСчетБанкКасса(ПлатежныйДокумент.ВалютаДокумента, "СписаниеСРасчетногоСчета", ВалютаРегл);
		ПлатежныйДокумент.СчетУчетаРасчетовСКонтрагентом = РезСтруктура.Счет;
		
	//1С-ИжТиСи, Кондратьев, 16.03.2020, Обновление, исправленный код без комментариев (	
	//ИначеЕсли ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
	//	
	//	ПлатежныйДокумент.СчетКонтрагента 			   = ПлатежнаяПозиция.БанковскийСчетОрганизацияПриемник;
	//	ПлатежныйДокумент.СчетУчетаРасчетовСКонтрагентом = РезСтруктура.Счет;
	//1С-ИжТиСи, Кондратьев, 16.03.2020, Обновление, исправленный код без комментариев )
	КонецЕсли; 
	
	// Заполним субконто и счета учета расчетов.
	//ОК Аверьянова 31.01.2018  - исправление ошибки обновления
	//Если ЗначениеЗаполнено(ПлатежнаяПозиция.СчетУчетаБУ) Тогда
	//	
	//	ПлатежныйДокумент.СчетУчетаРасчетовСКонтрагентом = ПлатежнаяПозиция.СчетУчетаБУ;
	//	
	//	Для Ном = 1 По КоличествоСубконтоБУ Цикл
	//		ПлатежныйДокумент["СубконтоДт" + Ном] = ПлатежнаяПозиция["Субконто" + Ном];
	//	КонецЦикла;
	//	
	//	// +СБ. Широков Николай. 2014-09-25. ТЗ "Казначейство" 2.2.7.2. !!!Временное решение, переделать в ходе оптимизации!!!
	//Иначе
	//	
	//	СчетУчетаРасчетовСКонтрагентом = СБ_КазначействоСервер.СчетРСБУПоПрофилюРазноски(Заявка.СБ_ПрофильРазноски);
	//	
	//	ПлатежныйДокумент.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
	//	
	//	Способ_НеПогашать = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать");
	//	
	//	Для каждого СтрокаПлатеж Из ПлатежныйДокумент.РасшифровкаПлатежа Цикл
	//		
	//		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;	
	//		
	//		Если СтрокаПлатеж.СпособПогашенияЗадолженности = Способ_НеПогашать Тогда
	//			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовСКонтрагентом;
	//		КонецЕсли;
	//		
	//	КонецЦикла; 
	//	
	//	// -СБ. Широков Николай 
	//	
	//КонецЕсли; 
	//ОК-
	
	// +СБ. Широков Николай. 2014-10-22. Доработка #1092 
	ПлатежныйДокумент.СБ_ПрофильРазноски = Заявка.СБ_ПрофильРазноски;
	// +СБ. Широков Николай. 2015-05-26. Доработка #1577
	СБ_КазначействоСервер.ОбновитьПодразделениеПоПрофилюРазноски(ПлатежныйДокумент.ПодразделениеОрганизации, ПлатежныйДокумент.Организация, ПлатежныйДокумент.СБ_ПрофильРазноски);
	// -СБ. Широков Николай 
	
	Если ПлатежнаяПозиция.ДокументОснование.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.СнятиеНаличных Тогда
		ПлатежныйДокумент.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	КонецЕсли; 
	
	ЗаполнитьРасшифровкуПлатежа(ПлатежныйДокумент, ПараметрыРасшифровкиПлатежа, ПлатежноеПоручение, ПараметрыФормирования);
	//ОК Аверьянова 31.01.2018  - кусок кода передвинула со стр. 5403
	
	Если ЗначениеЗаполнено(ПлатежнаяПозиция.СчетУчетаБУ) Тогда
		
		ПлатежныйДокумент.СчетУчетаРасчетовСКонтрагентом = ПлатежнаяПозиция.СчетУчетаБУ;
		
		Для Ном = 1 По КоличествоСубконтоБУ Цикл
			ПлатежныйДокумент["СубконтоДт" + Ном] = ПлатежнаяПозиция["Субконто" + Ном];
		КонецЦикла;
		
	// +СБ. Широков Николай. 2014-09-25. ТЗ "Казначейство" 2.2.7.2. !!!Временное решение, переделать в ходе оптимизации!!!
	Иначе
		
		СчетУчетаРасчетовСКонтрагентом = СБ_КазначействоСервер.СчетРСБУПоПрофилюРазноски(Заявка.СБ_ПрофильРазноски);
		
		ПлатежныйДокумент.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		
		Способ_НеПогашать = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать");
		
		Для каждого СтрокаПлатеж Из ПлатежныйДокумент.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;	
			
			Если СтрокаПлатеж.СпособПогашенияЗадолженности = Способ_НеПогашать Тогда
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			
		КонецЦикла; 
	// -СБ. Широков Николай 		
	КонецЕсли; 

	//1С-ИжТиСи, Кондратьев, 16.03.2020, Обновление, исправленный код без комментариев (
	//Если ПлатежнаяПозиция.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.СнятиеНаличных Тогда
	//	ПлатежныйДокумент.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	//КонецЕсли; 
	//
	//ЗаполнитьРасшифровкуПлатежа(ПлатежныйДокумент, ПараметрыРасшифровкиПлатежа, ПлатежноеПоручение, ПараметрыФормирования);
	//1С-ИжТиСи, Кондратьев, 16.03.2020, Обновление, исправленный код без комментариев )
		
	Если ЕстьРеквизитНазначениеПлатежа Тогда
		ПлатежныйДокумент.НазначениеПлатежа = СтрЗаменить(ПлатежныйДокумент.НазначениеПлатежа, Символы.ПС, " ");
	КонецЕсли;	
	
	Если ИмяДокументаПлатежа = "РасходныйКассовыйОрдер" И ЗначениеЗаполнено(ПлатежнаяПозиция.НазначениеПлатежа) Тогда
		ПлатежныйДокумент.Основание = ПлатежнаяПозиция.НазначениеПлатежа;
	КонецЕсли;
	
	ОснованиеЗаявки = ПлатежнаяПозиция.ЗаявкаДокументОснование;
	Если ЗначениеЗаполнено(ОснованиеЗаявки)
		И ТипЗнч(ОснованиеЗаявки) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		И бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти("СчетНаОплату", МетаданныеПлатежка, "РасшифровкаПлатежа") Тогда 
		
		Для каждого СтрРасш Из ПлатежныйДокумент.РасшифровкаПлатежа Цикл
		
			СтрРасш.СчетНаОплату = ОснованиеЗаявки;
		
		КонецЦикла; 
	КонецЕсли; 
	
	// Валюта платежа не совпадает с валютой планирования.
	Если ПлатежныйДокумент.ВалютаДокумента <> ПлатежнаяПозиция.ВалютаДокумента  Тогда
		Если ТипЗнч(ПлатежныйДокумент) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
			ПлатежныйДокумент.НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(ПлатежныйДокумент, Истина);
		КонецЕсли; 
	КонецЕсли; 
	
	// +СБ. Широков Николай. 2015-02-19. Ошибка (функц.) #1347
	Если Заявка.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПереводНаДругойСчет Тогда
		ПлатежныйДокумент.СчетКонтрагента = ПлатежнаяПозиция.БанковскийСчетОрганизацияПриемник;
	КонецЕсли;
	// -СБ. Широков Николай	
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-03-24 (#ТП_БП05_ФР09)
	Если ТипЗнч(ПлатежныйДокумент) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		Если ПараметрыФормирования.Свойство("ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			ПлатежныйДокумент.ПодотчетныеЛица.Очистить();
			Для Каждого Строка Из ПараметрыФормирования.ЗаявкаНаРасходованиеДенежныхСредств.Распределение Цикл
				СтрокаПодотчетноеЛицо			=	ПлатежныйДокумент.ПодотчетныеЛица.Добавить();
				СтрокаПодотчетноеЛицо.ФизЛицо	=	Строка.Аналитика_5;
				СтрокаПодотчетноеЛицо.Сумма		=	Строка.Сумма;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-03-24 (#ТП_БП05_ФР09)
	
КонецПроцедуры

Функция НазначениеПлатежаПоПлатежнымПозициям(ПлатежныеПозиции)
	
	ОбщееНазначениеПлатежа = Новый Массив; 
	Для каждого СтрокаТаблицы Из ПлатежныеПозиции Цикл
		
		НазначениеПлатежа = СтрокаТаблицы.НазначениеПлатежа;
		Если ПустаяСтрока(НазначениеПлатежа) Тогда
			Продолжить;	
		КонецЕсли; 
		// Методология очистки назначения платежа от суммы см. 
		// Документы.ПлатежноеПоручение.НазначениеПлатежаИзмененоВручную().
		ПозицияСумма = СтрНайти(НазначениеПлатежа, "Сумма");
		
		Если ПозицияСумма = 0 Тогда // для совместимости, при редактировании старых платежек
			ПозицияСумма = СтрНайти(НазначениеПлатежа, "В т.ч. НДС");
			Если ПозицияСумма = 0 Тогда
				ПозицияСумма = СтрНайти(НазначениеПлатежа, "Без налога (НДС)");
			КонецЕсли;
			Если ПозицияСумма = 0 Тогда
				ПозицияСумма = СтрНайти(НазначениеПлатежа, "НДС не облагается");
			КонецЕсли;
		КонецЕсли;
		
		ТекстНазначение = ?(ПозицияСумма = 0, НазначениеПлатежа, Лев(НазначениеПлатежа, ПозицияСумма - 1));
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
		ОбщееНазначениеПлатежа.Добавить(ТекстНазначение);
	КонецЦикла; 
	
	Возврат СтрСоединить(ОбщееНазначениеПлатежа, "," + Символы.ПС);
	
КонецФункции

// Функция заполняет назначение платежа для перечисления в бюджет. 
//
Функция ЗаполнитьНазначениеПлатежаИзНалога(Объект, ДатаПП, НазначениеПлатежнойПозиции)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		Объект.НазначениеПлатежа = НазначениеПлатежнойПозиции;
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		
		Если НЕ ЗначениеЗаполнено(НазначениеПлатежнойПозиции) Тогда
		
			Если ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(Объект.Налог.КодБК) Тогда
				
				ПоказателиНалоговогоПериода = ПлатежиВБюджетПереопределяемый.ПоказателиНалоговогоПериода(Объект.Организация, Объект.Налог.ВидНалога, ДатаПП);
				
				ТекстНазначение = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
					Объект.Налог,
					Объект.ВидНалоговогоОбязательства,
					Объект.Организация,
					ДатаПП,
					ПоказателиНалоговогоПериода.ПредставлениеНалоговогоПериода);
			Иначе
				ТекстНазначение = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
					Объект.Налог,
					Объект.ВидНалоговогоОбязательства,
					Объект.Организация,
					ДатаПП);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
			
				Объект.НазначениеПлатежа = ТекстНазначение;
			
			КонецЕсли; 
			
		Иначе
			
			Объект.НазначениеПлатежа = НазначениеПлатежнойПозиции;
			
		КонецЕсли; 
		
	КонецЕсли;

КонецФункции

Функция НовыеГруппировкиПараметровРасшифровкиПлатежа()
	
	Группировки = "ДоговорКонтрагента, СпособПогашенияЗадолженности, Сделка, СтавкаНДС, ЗаявкаДокументОснование,"
				+ "СтатьяДвиженияДенежныхСредств, КурсВзаиморасчетов, КратностьВзаиморасчетов,"
				+ "ВидПлатежаПоКредитамЗаймам, ВалютаВзаиморасчетов, КурсДокумента, КратностьДокумента, ВалютаДокумента,"
				+ "УсловиеПоКурсу, Процент, РасчетыВУсловныхЕдиницах";
				
	Возврат Группировки;
	
КонецФункции
 
Процедура ЗаполнитьРасшифровкуПлатежа(ПлатежныйДокумент, ПараметрыРасшифровкиПлатежа, ПлатежноеПоручение, ПараметрыЗаполнения)

	СуммаКОплате  	   = ПараметрыЗаполнения.СуммаКОплате;
	МетаданныеПлатежка = ПлатежныйДокумент.Метаданные();
	ЕстьСчетНаоплату   = бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти("СчетНаОплату", МетаданныеПлатежка, "РасшифровкаПлатежа");
	
	ЕстьРасшифровкаПлатежа = бит_ОбщегоНазначенияПереопределяемый.ЕстьРасшифровкаПлатежа(ПлатежныйДокумент.Ссылка, 
								ПлатежныйДокумент.ВидОперации);

	РасшифровкаПлатежа = ПодготовленнаяРасшифровкаПлатежа(ПлатежныйДокумент, ПараметрыРасшифровкиПлатежа, 
							ПлатежноеПоручение, ПараметрыЗаполнения);
							
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = 0;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-06 (#3899)
	КолонкаСчетУчетаБУЕсть = Ложь;
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений")
		И РасшифровкаПлатежа.Колонки.Найти("СчетУчетаБУ") <> Неопределено Тогда
		КолонкаСчетУчетаБУЕсть = Истина;
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-06 (#3899)
	
	Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл 
				
		// Добавление и формирование строк "Расшифровки" и "Распределения".
		Если ЕстьРасшифровкаПлатежа Тогда
			СтрокаПлатеж = ПлатежныйДокумент.РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.бит_КлючСтроки = Новый УникальныйИдентификатор();
		Иначе
			СтрокаПлатеж = Новый Структура; 
			Для каждого Колонка Из МетаданныеПлатежка.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты Цикл
				СтрокаПлатеж.Вставить(Колонка.Имя,);
			КонецЦикла;	
		КонецЕсли; 
				
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СтрокаРасшифровки);
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-06 (#3899)
		Если КолонкаСчетУчетаБУЕсть
			И ЗначениеЗаполнено(СтрокаРасшифровки.СчетУчетаБУ) Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СтрокаРасшифровки.СчетУчетаБУ; 
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-06 (#3899)
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-12 (#3908) // перенос из старого релиза задача #3417
		Если СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу Тогда
			Если ЗначениеЗаполнено(СтрокаРасшифровки.ЗаявкаДокументОснование)
				И СтрокаПлатеж.Сделка <> СтрокаРасшифровки.ЗаявкаДокументОснование Тогда
				СтрокаПлатеж.Сделка = СтрокаРасшифровки.ЗаявкаДокументОснование;
			КонецЕсли;
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-12 (#3908)
		
		ОснованиеЗаявки = СтрокаРасшифровки.ЗаявкаДокументОснование;
		Если ЗначениеЗаполнено(ОснованиеЗаявки)
			И ТипЗнч(ОснованиеЗаявки) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
			И ЕстьСчетНаоплату Тогда 
			
			СтрокаПлатеж.СчетНаОплату = ОснованиеЗаявки;
		КонецЕсли; 		

		Фильтр = Новый Структура(НовыеГруппировкиПараметровРасшифровкиПлатежа());
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
		Если НЕ ПараметрыРасшифровкиПлатежа.Колонки.Найти("ок_СтатьяОборотовБДР") = Неопределено Тогда
			Фильтр.Вставить("ок_СтатьяОборотовБДР");
		КонецЕсли;	
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )
		Если СтрокаРасшифровки.ВалютаДокумента = СтрокаРасшифровки.ВалютаВзаиморасчетов Тогда
			Фильтр.Удалить("ВалютаВзаиморасчетов");
			Фильтр.Удалить("КурсВзаиморасчетов");
			Фильтр.Удалить("КратностьВзаиморасчетов");
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(Фильтр, СтрокаРасшифровки);

		РаспределениеПлатежа = ПараметрыРасшифровкиПлатежа.Скопировать(Фильтр);
		
		// Распределим сумму строки расшифровки по распределению, что бы сошлись итоги.
		// Распределять будем по колонке "СуммаПлатежа".
		Ресурсы = Новый Массив(); 
		Ресурсы.Добавить("СуммаПлатежа");
		Ресурсы.Добавить("СуммаНДС");
		Ресурсы.Добавить("СуммаВзаиморасчетов");		
		
		Коэффициенты = РаспределениеПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
		Для каждого Ресурс Из Ресурсы Цикл
		
			Сумма 	   = СтрокаРасшифровки[Ресурс];
			Результаты = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
							Сумма, Коэффициенты, 2);
				
			Если Результаты = Неопределено Тогда
				// Ошибка распределения. См. ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам.
				// Забиваем сумму платежа 0.
				Результаты = ОбщегоНазначения.СкопироватьРекурсивно(Коэффициенты);
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-07 (#3900)
				Если ТипЗнч(Результаты) = Тип("Массив") Тогда
					Для ИндМассива = 0 По Результаты.Количество() - 1 Цикл
						Результаты[ИндМассива] = 0;
					КонецЦикла;
				Иначе
					Для каждого Элемент Из Результаты Цикл
						Элемент = 0;					
					КонецЦикла;
				КонецЕсли; 
				//Для каждого Элемент Из Результаты Цикл
				//	Элемент = 0;					
				//КонецЦикла;  	
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-07 (#3900)
			КонецЕсли; 
			РаспределениеПлатежа.ЗагрузитьКолонку(Результаты, Ресурс);
		КонецЦикла; 
		
		Для каждого СтрокаРаспределение Из РаспределениеПлатежа Цикл
			СтрокаТаблицы = ПлатежныйДокумент.бит_РаспределениеБюджета.Добавить();
			СтрокаТаблицы.бит_КлючСтроки = СтрокаПлатеж.бит_КлючСтроки;
			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
			//Если РасшифровкаПлатежа.Количество() = 1 И РаспределениеПлатежа.Количество() = 1 Тогда
			//	// Если строк = 1, то заполняются только суммы.
			//	// Аналитики при проведении получаются из шапки.
			//	// ДокументПланирования - исключение, для работы "структуры подчиненности".
			//	КопируемыеСвойства = "СуммаПлатежа, СуммаНДС, СуммаВзаиморасчетов, ДокументПланирования";
			//	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаРаспределение, КопируемыеСвойства);
			//Иначе
			//	// Все доп. аналитики принимаются из заявки + позиции, см. ПараметрыРасшифровкиПлатежа. 
			//	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаРаспределение);
			//КонецЕсли; 
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаРаспределение);
			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )
		КонецЦикла; 
		СуммаДокумента = СуммаДокумента + СтрокаПлатеж.СуммаПлатежа;
	КонецЦикла;
	
	ПлатежныйДокумент.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	
	Если ЕстьРасшифровкаПлатежа Тогда
		ПлатежныйДокумент.ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;
	Иначе	
		ПлатежныйДокумент.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли; 	

	ПлатежныйДокумент.СуммаДокумента = СуммаДокумента;

	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ПлатежныйДокумент);
	
КонецПроцедуры

Функция ПодготовленнаяРасшифровкаПлатежа(ПлатежныйДокумент, ПараметрыРасшифровкиПлатежа, ПлатежноеПоручение, ПараметрыЗаполнения)

	ДатаОплаты    = ?(ПараметрыЗаполнения.Свойство("ДатаОплаты"), ПараметрыЗаполнения.ДатаОплаты, ПлатежныйДокумент.Дата);
	ВалютаПлатежа = ПлатежныйДокумент.ВалютаДокумента;
	СуммаКОплате  = ПараметрыЗаполнения.СуммаКОплате;
	
	ЕстьРасшифровкаПлатежа = бит_ОбщегоНазначенияПереопределяемый.ЕстьРасшифровкаПлатежа(ПлатежныйДокумент.Ссылка, 
								ПлатежныйДокумент.ВидОперации);
	
	Если СуммаКОплате <> 0 Тогда
		// Случай, когда сумма оплаты определена пользовтелем.
		// Распределить сумму по платежным позициям.
		Если ПараметрыЗаполнения.СуммаВВалютеПлатежа Тогда
			Если ПараметрыРасшифровкиПлатежа.Итог("СуммаПлатежа") <> СуммаКОплате Тогда
				Суммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКОплате, 
							ПараметрыРасшифровкиПлатежа.ВыгрузитьКолонку("СуммаПлатежа"), 2);
				ПараметрыРасшифровкиПлатежа.ЗагрузитьКолонку(Суммы, "СуммаПлатежа");
			КонецЕсли;	
			ПрямойПересчетПоКурсу = Ложь;
		Иначе	
			Если ПараметрыРасшифровкиПлатежа.Итог("СуммаВзаиморасчетов") <> СуммаКОплате Тогда
				Суммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКОплате, 
							ПараметрыРасшифровкиПлатежа.ВыгрузитьКолонку("СуммаВзаиморасчетов"), 2);
				ПараметрыРасшифровкиПлатежа.ЗагрузитьКолонку(Суммы, "СуммаВзаиморасчетов");
			КонецЕсли;
			ПрямойПересчетПоКурсу = Истина;
		КонецЕсли;
	Иначе
		ПрямойПересчетПоКурсу = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение") И ЗначениеЗаполнено(ПлатежноеПоручение) Тогда
		// Если вводится на основании "Платежного поручения" (ПП), статью ДДС взять из ПП.
		СтатьяДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежноеПоручение, 
											"СтатьяДвиженияДенежныхСредств");
		ПодборкаСтатейДДС = Новый Соответствие;
		Для каждого СтрокаТаблицы Из ПараметрыРасшифровкиПлатежа Цикл
			ПодборкаСтатейДДС.Вставить(СтрокаТаблицы.СтатьяОборотов, СтатьяДДС);
		КонецЦикла; 
	Иначе
		СтатьиОборотов = ПараметрыРасшифровкиПлатежа.ВыгрузитьКолонку("СтатьяОборотов");
		ПодборкаСтатейДДС = ПодборкаСтатейДвиженияДенежныхСредств(СтатьиОборотов, 
								ПлатежныйДокумент.ВидОперации, ЕстьРасшифровкаПлатежа);
	КонецЕсли; 

	Для каждого СтрокаТаблицы Из ПараметрыРасшифровкиПлатежа Цикл
		ПодготовитьСтрокуРасшифровкиПлатежа(ПлатежныйДокумент, СтрокаТаблицы, ПодборкаСтатейДДС);
	КонецЦикла; 
	
	// Группировка заявок по полям таблицы "Расшифровка платежа".
	// Нужно при групповой оплате.
	КолонкиРасшифровки = НовыеГруппировкиПараметровРасшифровкиПлатежа();
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
	Если НЕ ПараметрыРасшифровкиПлатежа.Колонки.Найти("ок_СтатьяОборотовБДР") = Неопределено Тогда
		КолонкиРасшифровки = КолонкиРасшифровки + ",ок_СтатьяОборотовБДР";
	КонецЕсли;	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-06 (#3899)
	Если НЕ ПараметрыРасшифровкиПлатежа.Колонки.Найти("СчетУчетаБУ") = Неопределено Тогда
		КолонкиРасшифровки = КолонкиРасшифровки + ",СчетУчетаБУ";
	КонецЕсли;	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-06 (#3899)
	РесурсыРасшифровки = "СуммаПлатежа, СуммаНДС, СуммаВзаиморасчетов";
	
	РасшифровкаПлатежа = ПараметрыРасшифровкиПлатежа.Скопировать( , КолонкиРасшифровки + ", " + РесурсыРасшифровки);
	РасшифровкаПлатежа.Свернуть(КолонкиРасшифровки, РесурсыРасшифровки);

	Если НЕ ЕстьРасшифровкаПлатежа И РасшифровкаПлатежа.Количество() > 1 Тогда
	
		НачалоСообщения = НСтр("en='Payment following dokumet impossible: %1.'; 
								|ru='Оплата следующих докуметов невозможна: %1.'") ;
		
		ЗавершениеСообщения = НСтр("en='Unable to group the data for payment of the document with a view of the operation without decrypting payment.';
								|ru='Не удалось сгруппировать данные для оплаты документом с видом операции без расшифровки платежа.'") ;
		
		СписокДокументов = ПараметрыРасшифровкиПлатежа.ВыгрузитьКолонку("ДокументПланированияПредставление"); 
		СписокДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокДокументов);
		СписокДокументов = СтрСоединить(СписокДокументов, "," + Символы.ПС);
		ТекстСообщения 	 = СтрШаблон(НачалоСообщения, СписокДокументов) + " " + ЗавершениеСообщения;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
		
		// Очистим таблицу, как ошибочную.
		РасшифровкаПлатежа.Очистить();
		Возврат РасшифровкаПлатежа;
		
	КонецЕсли; 
	
	Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл 
				
		Если ВалютаПлатежа <> СтрокаРасшифровки.ВалютаДокумента Тогда	
			// Это расчеты в у.е:
			// Сумму платежа посчитать обратно от суммы взаиморасчетов, 
			// которая сейчас = СтрокаРасшифровки.СуммаПлатежа. Именно эту сумму планировали в Заявке.
			Если СтрокаРасшифровки.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.Оператор Тогда
				КурсВзаиморасчетов 	  	= СтрокаРасшифровки.КурсДокумента;
				КратностьВзаиморасчетов = СтрокаРасшифровки.КратностьДокумента;
			Иначе	
				КурсыВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаРасшифровки.ВалютаДокумента, ДатаОплаты);
				Если СтрокаРасшифровки.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.ЦБпроц Тогда
					КурсыВзаиморасчетов.Курс = КурсыВзаиморасчетов.Курс 
												* (100 + СтрокаРасшифровки.Процент) / 100;
				КонецЕсли; 
				КурсВзаиморасчетов 	    = КурсыВзаиморасчетов.Курс;
				КратностьВзаиморасчетов = КурсыВзаиморасчетов.Кратность;
			КонецЕсли;
			
			КурсыДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаПлатежа, ДатаОплаты);
			
			ПараметрыТекущегоКурса = Новый Структура; 
			ПараметрыТекущегоКурса.Вставить("Валюта",   СтрокаРасшифровки.ВалютаДокумента);
			ПараметрыТекущегоКурса.Вставить("Курс", 	КурсВзаиморасчетов);
			ПараметрыТекущегоКурса.Вставить("Кратность",КратностьВзаиморасчетов);
			
			Если ПрямойПересчетПоКурсу Тогда
				
				СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
								СтрокаРасшифровки.СуммаПлатежа, ПараметрыТекущегоКурса, КурсыДокумента);
				
				СтрокаРасшифровки.ВалютаВзаиморасчетов    = СтрокаРасшифровки.ВалютаВзаиморасчетов;
				СтрокаРасшифровки.КурсВзаиморасчетов      = КурсВзаиморасчетов;
				СтрокаРасшифровки.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
				
				СтрокаРасшифровки.СуммаПлатежа = СуммаПлатежа;
				СтрокаРасшифровки.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												СтрокаРасшифровки.СуммаПлатежа, Истина, 
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС));
				
			Иначе
				СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
										СтрокаРасшифровки.СуммаПлатежа, КурсыДокумента, ПараметрыТекущегоКурса);
				
				// Если СтрокаРасшифровки.РасчетыВУсловныхЕдиницах Тогда
				СтрокаРасшифровки.ВалютаВзаиморасчетов    = СтрокаРасшифровки.ВалютаВзаиморасчетов;
				СтрокаРасшифровки.КурсВзаиморасчетов      = ОКР(СтрокаРасшифровки.СуммаПлатежа / СтрокаРасшифровки.СуммаВзаиморасчетов, 2);
				СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
				
				СтрокаРасшифровки.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												СтрокаРасшифровки.СуммаПлатежа, Истина, 
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС));
			КонецЕсли;
		Иначе
			СтрокаРасшифровки.ВалютаВзаиморасчетов    = ВалютаПлатежа;
			СтрокаРасшифровки.КурсВзаиморасчетов      = 1;
			СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
			СтрокаРасшифровки.СуммаВзаиморасчетов     = СтрокаРасшифровки.СуммаПлатежа;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат РасшифровкаПлатежа;
	
КонецФункции

Функция СформироватьПлатежноеПоручение(ПлатежныеПозиции, ПараметрыРасшифровкиПлатежа, ПараметрыФормирования)
										   
	// Нужна структура для заполнения Списание срасчетного счета
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Дата", '0001-01-01');
	ДанныеЗаполнения.Вставить("Номер", "");
	
	МетаданныеДокумента = Метаданные.Документы.ПлатежноеПоручение;
	Для каждого РеквизитМД Из МетаданныеДокумента.Реквизиты Цикл
		Если РеквизитМД.Тип.Типы().Количество() > 1 Тогда
			ДанныеЗаполнения.Вставить(РеквизитМД.Имя, Неопределено);
		Иначе	
			ДанныеЗаполнения.Вставить(РеквизитМД.Имя, РеквизитМД.Тип.ПривестиЗначение());
		КонецЕсли; 
	КонецЦикла; 
	
	ТЧ = Новый ТаблицаЗначений(); 
	ТЧ.Колонки.Добавить("ПлатежнаяПозиция");
	ДанныеЗаполнения.Вставить("бит_ПлатежныеПозиции",ТЧ);	
	
	// Получим значения для заполнения платежного поручения.
	ДатаОплаты    = ПараметрыФормирования.ДатаОплаты;
	СуммаКОплате  = ПараметрыФормирования.СуммаКОплате;
	ВалютаПлатежа = ПараметрыФормирования.ВалютаПлатежа;
	
	ДанныеЗаполнения.Вставить("ДатаОплаты", ДатаОплаты);
	
	ОбъединятьНазначенияПлатежей = ПараметрыФормирования.ОбъединятьНазначенияПлатежей;
										
	ПлатежнаяПозиция 	   = ПлатежныеПозиции[0];
	ПеречислениеВБюджет    = ПлатежнаяПозиция.ПеречислениеВБюджет;
	ТекущийПользователь    = Пользователи.ТекущийПользователь();
	ТЧРаспределениеПлатежа = ПлатежнаяПозиция.Распределение;
	
	// +СБ. Широков Николай. 2015-01-29. Консультация #1244
	//ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаРегл = ПараметрыФормирования.ВалютаРегл;
	// -СБ. Широков Николай
	
	// Определим вид операции.
	ИмяДокументаПлатежа       = МетаданныеДокумента.Имя;
	СоответствиеВидовОпераций = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл(ИмяДокументаПлатежа);
	ДанныеЗаполнения.ВидОперации   = СоответствиеВидовОпераций[ПараметрыФормирования.ВидОперации];
	
	// Заполним документ.
	ДанныеЗаполнения.Дата = ?(ЗначениеЗаполнено(ДатаОплаты), ДатаОплаты, ОбщегоНазначения.ТекущаяДатаПользователя());
	
	ДанныеЗаполнения.Организация = ПараметрыФормирования.Организация;
	ДанныеЗаполнения.Контрагент	 = ПараметрыФормирования.Контрагент;
	
	ДанныеЗаполнения.СчетОрганизации 	    = ПараметрыФормирования.БанковскийСчетОрганизация;
	ДанныеЗаполнения.СчетКонтрагента 	    = ПараметрыФормирования.БанковскийСчетКонтрагент;
	ДанныеЗаполнения.ОчередностьПлатежа 	= ПлатежнаяПозиция.ОчередностьПлатежа;
	ДанныеЗаполнения.ПеречислениеВБюджет    = ПеречислениеВБюджет;
	ДанныеЗаполнения.ВидПеречисленияВБюджет = ПлатежнаяПозиция.ВидПеречисленияВБюджет;
	ДанныеЗаполнения.Ответственный 		    = ТекущийПользователь;

	Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
	 ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику 
	 ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов 
	 ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
	 ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
	
		ДанныеЗаполнения.Контрагент = ПлатежнаяПозиция.ФизическоеЛицо;
		ДанныеЗаполнения.ПлатежнаяВедомость = ПлатежнаяПозиция.ПлатежнаяВедомость;

	ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда 	
		
		ДанныеЗаполнения.Контрагент 		= бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяПозиция.ДокументОснование, "Получатель");
		ДанныеЗаполнения.Налогоплательщик 	= ПараметрыФормирования.Контрагент;
	Иначе	
		ДанныеЗаполнения.Контрагент = ПараметрыФормирования.Контрагент;
	КонецЕсли; 
	
	Если Не ПеречислениеВБюджет Тогда
		ДанныеЗаполнения.ДоговорКонтрагента = ПараметрыФормирования.ДоговорКонтрагента;
	КонецЕсли;
	
	// "Штучный ввод" - формирование документов без участия "групповой оплаты".
	// При групповой оплате "ПараметрыФормирования" содержат общие (повторяющие) значенияч реквизитов.

	// Штучный ввод начало
	Если ПлатежныеПозиции.Количество() = 1 Тогда
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			
			ДанныеЗаполнения.СчетКонтрагента = ПлатежнаяПозиция.БанковскийСчетОрганизацияПриемник;
			
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
			ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
			ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
			ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда 
			ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда	
			
			Если ПлатежнаяПозиция.ПереключательСчетаФизЛица Тогда
				
				ДанныеЗаполнения.СчетКонтрагента = ПлатежнаяПозиция.БанковскийСчетФизЛица;
				
			Иначе	
				ДанныеЗаполнения.Банк 			= ПлатежнаяПозиция.Контрагент;
				ДанныеЗаполнения.СчетКонтрагента = ПлатежнаяПозиция.БанковскийСчетКонтрагент;
			КонецЕсли; 
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
			// Всегда по одной позиции.
			Если ПлатежнаяПозиция.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ДанныеЗаполнения.СчетКонтрагента = ПлатежнаяПозиция.БанковскийСчетФизЛица;
				ДанныеЗаполнения.Контрагент 	 = ПлатежнаяПозиция.ФизическоеЛицо;
			Иначе	
				ДанныеЗаполнения.СчетКонтрагента = ПлатежнаяПозиция.БанковскийСчетКонтрагент;
				ДанныеЗаполнения.Контрагент 	 = ПлатежнаяПозиция.Контрагент;
			КонецЕсли;		
		Иначе	
			ДанныеЗаполнения.СчетКонтрагента  = ПлатежнаяПозиция.БанковскийСчетКонтрагент;
		КонецЕсли; 
	КонецЕсли;
	// Штучный ввод конец
	
	Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ДанныеЗаполнения.Налог = ПлатежнаяПозиция.Налог;
		
		Если ЗначениеЗаполнено(ПлатежнаяПозиция.ВидНалоговогоОбязательства) Тогда
			ДанныеЗаполнения.ВидНалоговогоОбязательства = ПлатежнаяПозиция.ВидНалоговогоОбязательства;
		КонецЕсли; 
		
		ЗаполнитьНазначениеПлатежаИзНалога(ДанныеЗаполнения, ПлатежнаяПозиция.ДатаРасхода, ПлатежнаяПозиция.НазначениеПлатежа);
	КонецЕсли;	

	// Если это перечисление в бюджет, тогда
	// заполним налоговые реквизиты.
	Если ПеречислениеВБюджет Тогда
		
		//ОК+ Аверьянова 08.12.14 – исправление ошибки заполнения даты
		//ДанныеЗаполнения.ПоказательДаты      = ПлатежнаяПозиция.ПоказательДаты;
		ДанныеЗаполнения.ПоказательДаты      = ?(ЗначениеЗаполнено(ПлатежнаяПозиция.ПоказательДаты),ПлатежнаяПозиция.ПоказательДаты,0);
		//ОК- Аверьянова 08.12.14		
		
		ДанныеЗаполнения.ПоказательОснования = ПлатежнаяПозиция.ПоказательОснования;
		ДанныеЗаполнения.ПоказательПериода   = ПлатежнаяПозиция.ПоказательПериода;
		ДанныеЗаполнения.ПоказательТипа      = ПлатежнаяПозиция.ПоказательТипа;
		ДанныеЗаполнения.КодБК               = ПлатежнаяПозиция.КодБК;
		ДанныеЗаполнения.КодОКАТО            = ПлатежнаяПозиция.КодОКАТО;
		ДанныеЗаполнения.СтатусСоставителя   = ПлатежнаяПозиция.СтатусСоставителя;
		
		Если ЗначениеЗаполнено(ПлатежнаяПозиция.ПоказательДаты) Тогда
			ДанныеЗаполнения.ПоказательДаты 	 = ПлатежнаяПозиция.ПоказательДаты;
			ДанныеЗаполнения.ПоказательНомера = ПлатежнаяПозиция.ПоказательНомера;
		Иначе	
			ДанныеЗаполнения.ПоказательДаты   = "0";
			ДанныеЗаполнения.ПоказательНомера = "0";
		КонецЕсли; 

	КонецЕсли;
	
	Если ВРег(ПлатежнаяПозиция.ВидПлатежа) = ВРег("Электронно") 
	   И ДанныеЗаполнения.Дата >= Дата('20120709') Тогда
		ДанныеЗаполнения.ВидПлатежа = "";
	Иначе
		ДанныеЗаполнения.ВидПлатежа = ПлатежнаяПозиция.ВидПлатежа;
	КонецЕсли; 

	ДанныеЗаполнения.ОчередностьПлатежа 	= ПлатежнаяПозиция.ОчередностьПлатежа;
	ДанныеЗаполнения.ПеречислениеВБюджет    = ПеречислениеВБюджет;
	ДанныеЗаполнения.ВидПеречисленияВБюджет = ПлатежнаяПозиция.ВидПеречисленияВБюджет;
	ДанныеЗаполнения.Ответственный 		    = ТекущийПользователь;

	// Определим валюту документа.
	Если ЗначениеЗаполнено(ВалютаПлатежа) Тогда
		// Валюта платежа указана явно.
		ВалютаДокПлатежка = ВалютаПлатежа;
	Иначе
		Если ПлатежнаяПозиция.ВалютаДокумента = ВалютаРегл Тогда
			ВалютаДокПлатежка = ВалютаРегл;	
		Иначе
			Если ПараметрыФормирования.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
				ВалютаДокПлатежка = ВалютаРегл;
			Иначе
				ВалютаДокПлатежка = ПлатежнаяПозиция.ВалютаДокумента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	ДанныеЗаполнения.ВалютаДокумента = ВалютаДокПлатежка;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-17 (#3795)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ок_КодНазначенияПлатежа") Тогда
		
		Если ТипЗнч(ПлатежнаяПозиция) = Тип("СтрокаТаблицыЗначений") Тогда
			
			ПлатежнаяПозиция_Владелец = ПлатежнаяПозиция.Владелец();
			Если ТипЗнч(ПлатежнаяПозиция_Владелец) = Тип("ТаблицаЗначений")
				И ПлатежнаяПозиция.Владелец().Колонки.Найти("ок_КодНазначенияПлатежа") <> Неопределено Тогда
				
				ДанныеЗаполнения.ок_КодНазначенияПлатежа = ПлатежнаяПозиция.ок_КодНазначенияПлатежа;
				
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПлатежнаяПозиция) = Тип("Структура")
			И ПлатежнаяПозиция.Свойство("ок_КодНазначенияПлатежа") Тогда
			
			ДанныеЗаполнения.ок_КодНазначенияПлатежа = ПлатежнаяПозиция.ок_КодНазначенияПлатежа;
			
		КонецЕсли; 
		
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-17 (#3795)
	
	АвтоЗначенияРеквизитов = бит_ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
								ДанныеЗаполнения.Организация, ДанныеЗаполнения.СчетОрганизации, ДанныеЗаполнения.Контрагент,
								ДанныеЗаполнения.СчетКонтрагента,, ДанныеЗаполнения.ПеречислениеВБюджет);
	
	ДанныеЗаполнения.ТекстПлательщика = АвтоЗначенияРеквизитов.ТекстПлательщика;
	
	ДанныеЗаполнения.ТекстПолучателя  = АвтоЗначенияРеквизитов.ТекстПолучателя;
	ДанныеЗаполнения.ИННПолучателя    = АвтоЗначенияРеквизитов.ИННПолучателя;
	ДанныеЗаполнения.КПППолучателя    = АвтоЗначенияРеквизитов.КПППолучателя;
	
	Если ПеречислениеВБюджет Тогда 
		Если ПараметрыФормирования.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Налогоплательщик) Тогда
				РеквизыНалогоплательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Налогоплательщик, "КПП, ИНН");
			Иначе
				РеквизыНалогоплательщика = Новый Структура("КПП, ИНН","",""); 
			КонецЕсли; 
			
			ДанныеЗаполнения.ИННПлательщика = РеквизыНалогоплательщика.ИНН;
			
			Если ЗначениеЗаполнено(ПлатежнаяПозиция.КПППлательщика) Тогда
				ДанныеЗаполнения.КПППлательщика = ПлатежнаяПозиция.КПППлательщика;
			Иначе	
				ДанныеЗаполнения.КПППлательщика = РеквизыНалогоплательщика.КПП; 
			КонецЕсли; 
		Иначе
			ДанныеЗаполнения.ИННПлательщика = АвтоЗначенияРеквизитов.ИННПлательщика;
			ДанныеЗаполнения.КПППлательщика = ПлатежнаяПозиция.КПППлательщика;
		КонецЕсли; 
	Иначе
		ДанныеЗаполнения.ИННПлательщика   = АвтоЗначенияРеквизитов.ИННПлательщика;
		ДанныеЗаполнения.КПППлательщика   = АвтоЗначенияРеквизитов.КПППлательщика;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПлатежнаяПозиция.ИдентификаторПлатежа) Тогда
		ДанныеЗаполнения.ИдентификаторПлатежа = ПлатежнаяПозиция.ИдентификаторПлатежа;
	ИначеЕсли ЗначениеЗаполнено(ПлатежнаяПозиция.УИН) Тогда
		ДанныеЗаполнения.ИдентификаторПлатежа = ПлатежнаяПозиция.УИН;
	КонецЕсли; 
	
	// Формирование расшифровки платежа, как для "списания",
	// что бы сошлись суммы в документах при валютных расчетах.
	КурсыВалют = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеЗаполнения.ВалютаДокумента, 
					ДанныеЗаполнения.Дата);
			
	ДополнительныеСвойства = Новый Структура; 
	ДополнительныеСвойства.Вставить("КурсДокумента",	 КурсыВалют.Курс);
	ДополнительныеСвойства.Вставить("КратностьДокумента",КурсыВалют.Кратность);
	
	// ПлатежныйДокумент - Модель "Списание с расчетного счета".
	ПлатежныйДокумент = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеЗаполнения);
	ПлатежныйДокумент.Вставить("Ссылка", Документы.СписаниеСРасчетногоСчета.ПустаяСсылка());
	ПлатежныйДокумент.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);

	ПодготовленнаяРасшифровкаПлатежа = ПодготовленнаяРасшифровкаПлатежа(ПлатежныйДокумент, 
		ПараметрыРасшифровкиПлатежа, ДанныеЗаполнения, ПараметрыФормирования);
		
	Если ПодготовленнаяРасшифровкаПлатежа.Количество() = 0 Тогда
		Сообщения = ПолучитьСообщенияПользователю(Истина);
		Ошибки = Новый Массив(); 
		Для каждого Сообщение Из Сообщения Цикл
			Ошибки.Добавить(Сообщение.Текст);			
		КонецЦикла; 
		
		ВызватьИсключение СтрСоединить(Ошибки, ", ");
	КонецЕсли;
	
	СтавкиНДСТаблицы = ПараметрыРасшифровкиПлатежа.ВыгрузитьКолонку("СтавкаНДС");
	СтавкиНДСТаблицы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтавкиНДСТаблицы); 
	Если СтавкиНДСТаблицы.Количество() = 1 Тогда	
		ДанныеЗаполнения.СтавкаНДС = СтавкиНДСТаблицы[0];	
	КонецЕсли; 
	
	ДокументыПланирования = ПараметрыРасшифровкиПлатежа.Скопировать(, "ДокументПланирования");
	ДокументыПланирования.Свернуть("ДокументПланирования");
	Для каждого СтрокаТаблицы Из ДокументыПланирования Цикл
		НоваяСтрока = ДанныеЗаполнения.бит_ПлатежныеПозиции.Добавить();
		НоваяСтрока.ПлатежнаяПозиция = СтрокаТаблицы.ДокументПланирования;
	КонецЦикла; 
	
	ДанныеЗаполнения.СуммаДокумента 			   = ПодготовленнаяРасшифровкаПлатежа.Итог("СуммаПлатежа");
	ДанныеЗаполнения.СуммаНДС 					   = ПодготовленнаяРасшифровкаПлатежа.Итог("СуммаНДС");
	ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств = ПодготовленнаяРасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
								
	// ВАЖНО.
	// 1. Если валюта документа не совпадает с валютой платежной позиции, 
	// 	  тогда текст про суммы формировать обязательно.
	// 2. Если АвтоНазначениеПлатежа <> ИСТИНА, 
	// 	  тогда текст про суммы формировать обязательно.  
	ТолькоСумму = НЕ ЗаполнятьНазначениеПлатежаВЗаявкеНаРасходованиеДС(ДанныеЗаполнения.Организация, 
								ДанныеЗаполнения.Дата);

	// Пример параметров СформироватьНазначениеПлатежа:
	// 1. Подставляет ТОЛЬКО суммы
	//	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ДанныеЗаполнения, 
	//			Новый Структура("ТекстНазначенияПлатежа", ДанныеЗаполнения.НазначениеПлатежа), Ложь, Истина);
	
	// 2. Заполняет полностью по шаблону.
	//	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ДанныеЗаполнения, 
	//			Новый Структура("ТекстНазначенияПлатежа", ""), Ложь, Ложь);

	// +СБ. Широков Николай. 2014-12-05.
	//Если ДокументыПланирования.Количество() = 1 Тогда
	//	ДанныеЗаполнения.НазначениеПлатежа = ПлатежнаяПозиция.НазначениеПлатежа;
	//	Если ПустаяСтрока(ДанныеЗаполнения.НазначениеПлатежа) Тогда
	//		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ДанныеЗаполнения, 
	//			Новый Структура("ТекстНазначенияПлатежа", ДанныеЗаполнения.НазначениеПлатежа), Ложь);
	//	Иначе
	//		Если ДанныеЗаполнения.ВалютаДокумента <> ПлатежнаяПозиция.ВалютаДокумента ИЛИ ТолькоСумму Тогда
	//			// Так изменяется назначение платежа в 1С в части суммы.
	//			Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ДанныеЗаполнения, 
	//				Новый Структура("ТекстНазначенияПлатежа", ДанныеЗаполнения.НазначениеПлатежа), Ложь, 
	//				НЕ ПустаяСтрока(ДанныеЗаполнения.НазначениеПлатежа));
	//		КонецЕсли; 	
	//	КонецЕсли; 
	//Иначе
	//	Если НЕ ОбъединятьНазначенияПлатежей Тогда
	//		// Так формируется назначение платежа в 1С.
	//		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ДанныеЗаполнения, 
	//			Новый Структура("ТекстНазначенияПлатежа", ""), Ложь);
	//	Иначе
	//		// Объединить назначение платежа. 
	//		ОбъединенноеНазначениеПлатежа  = НазначениеПлатежаПоПлатежнымПозициям(ПлатежныеПозиции);
	//		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ДанныеЗаполнения, 
	//			Новый Структура("ТекстНазначенияПлатежа", ""), Ложь, НЕ ПустаяСтрока(ОбъединенноеНазначениеПлатежа));
	//		ДанныеЗаполнения.НазначениеПлатежа = ОбъединенноеНазначениеПлатежа + ДанныеЗаполнения.НазначениеПлатежа; 
	//	КонецЕсли;
	//КонецЕсли;
	ДанныеЗаполнения.НазначениеПлатежа = ПлатежнаяПозиция.НазначениеПлатежа;
	// -СБ. Широков Николай
	
	РежимСообщений 	   = ПараметрыФормирования.РежимСообщений;
	ВыводитьОшибки     = РежимСообщений = "Все" ИЛИ РежимСообщений = "Ошибки";
	ВыводитьИнформацию = РежимСообщений = "Все";

	НеФормироватьПлатежныеПоручения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормирования, 
										"НеФормироватьПлатежныеПоручения", Ложь);
	ПроводитьПлатежныеПоручения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормирования, 
										"ПроводитьПлатежныеПоручения", Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.ПлатежноеПоручение;
	
	Если НеФормироватьПлатежныеПоручения = Ложь ИЛИ ПроводитьПлатежныеПоручения Тогда
		
		Документ = Документы.ПлатежноеПоручение.СоздатьДокумент();
		Документ.Заполнить(ДанныеЗаполнения);
		// Типовой функционал не учитывает особенности операции "ПеречислениеНалогаЗаТретьихЛиц"
		// и изменяет реквизиты. Надо вернуть:
		Если ПараметрыФормирования.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ИННПлательщика) Тогда
				Документ.ИННПлательщика = ДанныеЗаполнения.ИННПлательщика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.КПППлательщика) Тогда
				Документ.КПППлательщика = ДанныеЗаполнения.КПППлательщика;
			КонецЕсли;
		КонецЕсли; 
		
		Документ.бит_ПлатежныеПозиции.Загрузить(ДанныеЗаполнения.бит_ПлатежныеПозиции);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-10 (#3156)
		Документ.УстановитьНовыйНомер();
		Номер = СокрЛП(Документ.Номер);
		Если Прав(Номер, 3) = "000" Тогда
			Документ.Номер = Лев(Номер, СтрДлина(Номер) - 1) + "1";
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-10 (#3156)
		
		Если ПроводитьПлатежныеПоручения Тогда
			Если Документ.ПроверитьЗаполнение() Тогда
				Попытка
					Документ.Записать(РежимЗаписиДокумента.Проведение);
					//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-10 (#3156)
					//// +СБ. Широков Николай. 2015-02-18. Доработка #1346 
					//Номер = СокрЛП(Документ.Номер);
					//Если Прав(Номер, 3) = "000" Тогда
					//	Документ.Номер = Лев(Номер, СтрДлина(Номер) - 1) + "1";	
					//КонецЕсли; 
					//Документ.Записать(РежимЗаписиДокумента.Проведение);
					//// -СБ. Широков Николай
					//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-10 (#3156)					
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-04 (#3816)
					Если ВыводитьИнформацию Тогда
						ТекстСообщения = "Проведен документ %1.";
						ТекстСообщения = СтрШаблон(ТекстСообщения, Документ.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ.Ссылка);
					КонецЕсли;
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-04 (#3816)
				Исключение
					ТекстСообщения = "Не удалось провести %1 по причине: %2. Только записан.";
					ТекстСообщения = СтрШаблон(ТекстСообщения, Документ.Ссылка, КраткоеПредставлениеОшибки(ОписаниеОшибки()));  
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ); 
					Документ.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
			Иначе	
				ТекстСообщения = "Ошибка при проверке заполнения документа %1.";
				ТекстСообщения = СтрШаблон(ТекстСообщения, Документ.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ.Ссылка);
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-10 (#3156)
				//// +СБ. Широков Николай. 2015-02-18. Доработка #1346 
				//Номер = СокрЛП(Документ.Номер);
				//Если Прав(Номер, 3) = "000" Тогда
				//	Документ.Номер = Лев(Номер, СтрДлина(Номер) - 1) + "1";	
				//КонецЕсли; 
				//// -СБ. Широков Николай
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-10 (#3156)
				
				Документ.Записать(РежимЗаписиДокумента.Запись); 
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-04 (#3816) 
				Если ВыводитьИнформацию Тогда
					ТекстСообщения = "Записан документ %1.";
					ТекстСообщения = СтрШаблон(ТекстСообщения, Документ.Ссылка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ.Ссылка);
				КонецЕсли;
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-04 (#3816)
			КонецЕсли; 		
		Иначе
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-10 (#3156)
			//// +СБ. Широков Николай. 2015-02-18. Доработка #1346 
			//Номер = СокрЛП(Документ.Номер);
			//Если Прав(Номер, 3) = "000" Тогда
			//	Документ.Номер = Лев(Номер, СтрДлина(Номер) - 1) + "1";	
			//КонецЕсли; 
			//// -СБ. Широков Николай
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-10 (#3156)			
			Документ.Записать(РежимЗаписиДокумента.Запись); 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-04 (#3816) 
			Если ВыводитьИнформацию Тогда
				ТекстСообщения = "Записан документ %1.";
				ТекстСообщения = СтрШаблон(ТекстСообщения, Документ.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ.Ссылка);
			КонецЕсли;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-04 (#3816)
		КонецЕсли;
		
		ДанныеЗаполнения = Документ.Ссылка;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции
	
#КонецОбласти

// Функция осуществляет проверку наличия в учетной политике Организации признака
//  использовать 57 счет.
// 
// Параметры:
//  Организация     - СправочникСсылка.Организации.
//  Период   		- Дата.
// 
Функция ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Организация, Период) 
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств", 
		Новый Структура("Организация,Период", Организация, НачалоМесяца(Период)));
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьРаспределениеБюджетаПередЗаписью(РасшифровкаПлатежа, РаспределениеБюджета, ДокументОбъект)

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	ЭтоНовый = ДокументОбъект.ДополнительныеСвойства.ЭтоНовый;

	Если НЕ ЭтоНовый Тогда
		// Удаление строк, связанных с отсутствующими строками "Расшифровки".
		Индекс = РаспределениеБюджета.Количество() - 1;
		Пока Индекс >= 0 Цикл
			СтрокаТаблицы = РаспределениеБюджета.Получить(Индекс);
			НайденнаяСтрока = РасшифровкаПлатежа.Найти(СтрокаТаблицы.бит_КлючСтроки, 
								"бит_КлючСтроки"); 
			Если НайденнаяСтрока = Неопределено Тогда
				РаспределениеБюджета.Удалить(СтрокаТаблицы);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла; 
	КонецЕсли; 
	
	// Формирование и модификация "распределения бюджета".
	Для каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("СуммаПлатежа", 		СтрокаТаблицы.СуммаПлатежа);
		Ресурсы.Вставить("СуммаНДС", 			СтрокаТаблицы.СуммаНДС);
		Ресурсы.Вставить("СуммаВзаиморасчетов", СтрокаТаблицы.СуммаВзаиморасчетов);

		СтрокиРаспределения = РаспределениеБюджета.НайтиСтроки(Новый Структура("бит_КлючСтроки", 
								СтрокаТаблицы.бит_КлючСтроки));

		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокаРаспределения = РаспределениеБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаТаблицы, "бит_КлючСтроки, СуммаПлатежа");
			
			СтрокиРаспределения = Новый Массив(); 
			СтрокиРаспределения.Добавить(СтрокаРаспределения);
		КонецЕсли; 
		
		Коэффициенты = Новый Массив(); 
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			Коэффициенты.Добавить(СтрокаРаспределения.СуммаПлатежа);
			// Незаполненные реквизиты составного типа установим в НЕОПРЕДЕЛЕНО.
			Для Индекс = 1 По 7 Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаРаспределения["Аналитика_" + Индекс]) Тогда
					СтрокаРаспределения["Аналитика_" + Индекс] = Неопределено;				
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
		
		// Распределяем данные строки "расшифровки платежа" по сумме платежа в "распределении".
		// Это нужно делать и для "СуммаПлатежа", потому что могла измениться сумма документа,
		// а этот факт нужно отразить в распределении.
		Для каждого Ресурс Из Ресурсы Цикл
			
			Поле  = Ресурс.Ключ;
			Сумма = Ресурс.Значение;
			
			Если СтрокиРаспределения.Количество() = 1 Тогда
				СтрокиРаспределения[0][Поле] = Сумма;
			Иначе
				
				Результаты = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
					СтрокаТаблицы[Поле], Коэффициенты, 2);
					
				Если Результаты = Неопределено Тогда
					// Ошибка распределения. См. ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам.
					// Забиваем сумму платежа 0.
					Результаты = ОбщегоНазначения.СкопироватьРекурсивно(Коэффициенты);
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-07 (#3900)
					Если ТипЗнч(Результаты) = Тип("Массив") Тогда
						Для ИндМассива = 0 По Результаты.Количество() - 1 Цикл
							Результаты[ИндМассива] = 0;
						КонецЦикла;
					Иначе
						Для каждого Элемент Из Результаты Цикл
							Элемент = 0;					
						КонецЦикла; 
					КонецЕсли; 
					//Для каждого Элемент Из Коэффициенты Цикл
					//	Элемент = 0;					
					//КонецЦикла; 
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-07 (#3900) 
				КонецЕсли; 	
				Индекс = 0;
				Пока Индекс <= Коэффициенты.ВГраница() Цикл
					СтрокиРаспределения[Индекс][Поле] = Результаты[Индекс];
					Индекс = Индекс + 1;
				КонецЦикла; 
			КонецЕсли; 					
		КонецЦикла;  
	КонецЦикла; 

КонецПроцедуры

// Функция определяет Счет банка/кассы в зависимости от валюты платежного документа 
// и вида платежного документа.Используется в процедуре заполнения платежного документа.
// 
// Параметры:
//  Валюта               - СправочникСсылка.Валюты.
//  ИмяДокументаПлатежа  - Строка.
//  ВалютаРегламентированногоУчета -СправочникСсылка.Валюты.
// 
// Возвращаемое значение:
//   РезСтруктура   - Структура - Ключи: "ИмяРеквизита","Счет".
// 
Функция ОпределитьСчетБанкКасса(Валюта,ИмяДокументаПлатежа,ВалютаРегламентированногоУчета)
	
    РезСтруктура = Новый Структура("ИмяРеквизита,Счет");
	
	Если ИмяДокументаПлатежа = "ПлатежноеПоручениеИсходящее" Тогда
		
		РезСтруктура.ИмяРеквизита = "СчетБанк";
		
		Если Валюта = ВалютаРегламентированногоУчета Тогда
			РезСтруктура.Счет = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Иначе // В валюте
			РезСтруктура.Счет = ПланыСчетов.Хозрасчетный.ВалютныеСчета;	
		КонецЕсли;
		
	ИначеЕсли ИмяДокументаПлатежа = "СписаниеСРасчетногоСчета" Тогда
		
		РезСтруктура.ИмяРеквизита = "СчетБанк";
		
		Если Валюта = ВалютаРегламентированногоУчета Тогда
			РезСтруктура.Счет = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Иначе // В валюте
			РезСтруктура.Счет = ПланыСчетов.Хозрасчетный.ВалютныеСчета;	
		КонецЕсли; 
		
	ИначеЕсли ИмяДокументаПлатежа = "РасходныйКассовыйОрдер" Тогда
		
		РезСтруктура.ИмяРеквизита = "СчетКасса";		
		
		Если Валюта = ВалютаРегламентированногоУчета Тогда
			РезСтруктура.Счет = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		Иначе // В валюте
			РезСтруктура.Счет = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;	
		КонецЕсли;
		
	КонецЕсли; 

	Возврат РезСтруктура;
	
КонецФункции // ОпределитьСчетБанкКасса()

Процедура ЗаполнитьТаблицуДвиженийПереводыВПути(ТаблицаДвижений, 
												СтрокаТаблицы, 
												СтатьяОборотов, 
												ДокументПланирования, 
												СуммаДвижения,
												РасходДоход,
												ВидДенежныхСредств = Неопределено)
												
	Если ВидДенежныхСредств = Неопределено Тогда
		ВидДенежныхСредств = Перечисления.бит_ВидыДенежныхСредств.Безналичные;											
	КонецЕсли; 											
												
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.БанковскийСчет		= СтрокаТаблицы.Касса;
	ЗаполнитьЗначенияСвойств(СтрокаДвижений,СтрокаТаблицы);
	СтрокаДвижений.СтатьяОборотов		= СтатьяОборотов;
	СтрокаДвижений.ДокументПланирования = ДокументПланирования;				
	СтрокаДвижений.ВидДенежныхСредств	= ВидДенежныхСредств;
	СтрокаДвижений.РасходДоход          = РасходДоход;
	СтрокаДвижений.Сумма                = СуммаДвижения;
	
КонецПроцедуры

Функция РазрешеныПлатежиБезЗаявки(Документ)

	Отказ = Ложь;
	
	ТаблицаДляПроверки = ТаблицаДляПроверкиРазрешеныПлатежиБезЗаявки(Документ.Ссылка); 
	
	Уточнение = НСтр("en='. Prohibited registration document without payment applications.';ru='. Запрещено оформление документа оплаты без заявки.'");

	Для каждого СтрокаТаблицы Из ТаблицаДляПроверки Цикл
		Префикс = "бит_РаспределениеБюджета[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
		
		Если НЕ СтрокаТаблицы.ЕстьПозиция И НЕ СтрокаТаблицы.РазрешитьПроведениеБезЗаявки Тогда
			Поле = Префикс + "ДокументПланирования";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"КОЛОНКА", "Заполнение", НСтр("en='Planning Document';ru='Документ планирования'"), СтрокаТаблицы.НомерСтроки,
				НСтр("en='distribution of the fact';ru='Распределение факта'")) + Уточнение;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ.Ссылка, Поле,,Отказ);	
		КонецЕсли; 
	КонецЦикла;

	Возврат НЕ Отказ;
	
КонецФункции

Функция ТаблицаДляПроверкиРазрешеныПлатежиБезЗаявки(ДокументСсылка)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ПлатежныйДокумент КАК Ссылка
	|ПОМЕСТИТЬ ПлатежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныйДокумент.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДокументПланированияШаблон.ЗначениеАналитики, &ПустойДокумент) КАК ПлатежнаяПозиция,
	|	ЕСТЬNULL(СтатьяОборотовШаблон.ЗначениеАналитики, &ПустаяСтатья) КАК СтатьяОборотов
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	ПлатежныйДокумент КАК ПлатежныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеАналитики КАК ДокументПланированияШаблон
	|		ПО ПлатежныйДокумент.Ссылка = ДокументПланированияШаблон.Объект
	|			И (ДокументПланированияШаблон.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеАналитики КАК СтатьяОборотовШаблон
	|		ПО ПлатежныйДокумент.Ссылка = СтатьяОборотовШаблон.Объект
	|			И (СтатьяОборотовШаблон.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.СтатьяОборотов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеБюджета.Ссылка КАК Ссылка,
	|	РаспределениеБюджета.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаспределениеБюджета.СтатьяОборотов = &ПустаяСтатья
	|				И Реквизиты.СтатьяОборотов = &ПустаяСтатья
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ РаспределениеБюджета.СтатьяОборотов = &ПустаяСтатья
	|			ТОГДА РаспределениеБюджета.СтатьяОборотов.РазрешитьПроводитьБезЗаявки
	|		ИНАЧЕ Реквизиты.СтатьяОборотов.РазрешитьПроводитьБезЗаявки
	|	КОНЕЦ КАК РазрешитьПроведениеБезЗаявки,
	|	ВЫБОР
	|		КОГДА РаспределениеБюджета.СтатьяОборотов = &ПустаяСтатья
	|				И Реквизиты.СтатьяОборотов = &ПустаяСтатья
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ РаспределениеБюджета.СтатьяОборотов = &ПустаяСтатья
	|			ТОГДА РаспределениеБюджета.СтатьяОборотов
	|		ИНАЧЕ Реквизиты.СтатьяОборотов
	|	КОНЕЦ КАК СтатьяОборотов,
	|	ВЫБОР
	|		КОГДА НЕ РаспределениеБюджета.ДокументПланирования = &ПустойДокумент
	|				ИЛИ НЕ Реквизиты.ПлатежнаяПозиция = &ПустойДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПозиция,
	|	ВЫБОР
	|		КОГДА НЕ РаспределениеБюджета.ДокументПланирования = &ПустойДокумент
	|			ТОГДА РаспределениеБюджета.ДокументПланирования
	|		КОГДА НЕ Реквизиты.ПлатежнаяПозиция = &ПустойДокумент
	|			ТОГДА Реквизиты.ПлатежнаяПозиция
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПланирования
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РаспределениеБюджета КАК РаспределениеБюджета
	|		ПО Реквизиты.Ссылка = РаспределениеБюджета.Ссылка";
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ИмяДокумента  = МетаданныеДокумента.Имя;
	ЧтоЗаменить   = "#РаспределениеБюджета";
	НаЧтоЗаменить = "Документ." + ИмяДокумента + ".бит_РаспределениеБюджета";
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
	
	Если МетаданныеДокумента = Метаданные.Документы.СписаниеСРасчетногоСчета
		ИЛИ МетаданныеДокумента = Метаданные.Документы.РасходныйКассовыйОрдер Тогда
		ПустойДокумент = Документы.бит_ПлатежнаяПозиция.ПустаяСсылка();
	Иначе	
		ПустойДокумент = Документы.бит_ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПлатежныйДокумент", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустаяСтатья", 	   Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДокумент",    ПустойДокумент);

	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции

// Процедура устанавливает статус заявки при проведении/отмене проведения платежного документа.
// 
// Параметры:
// 	ТаблицаРасход - ТаблицаЗначений 
// 	Источник - ДокументОбъект.
// 
Процедура ИзменитьСтатусЗаявкиПриПроведенииПлатежногоДокумента(ТаблицаРасход, Источник)
	
	Для каждого СтрокаТаблицы Из ТаблицаРасход Цикл
		
		// Изменим статус заявки
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заявка) Тогда
			
			СтруктураОплат = ПолучитьОплатыПоЗаявке(СтрокаТаблицы.Заявка);
			
			СтруктураСтатус = бит_Визирование.ПолучитьСтатусОбъекта(СтрокаТаблицы.Заявка);
			
			ВсеВизыПолучены = бит_Визирование.ВизыПолучены(СтрокаТаблицы.Заявка);
			
			
			ОбъектЗаявка = СтрокаТаблицы.Заявка.ПолучитьОбъект();
			ОбъектЗаявка.УстановитьСтатус(РежимЗаписиДокумента.Проведение,СтруктураОплат,Ложь);
			
			
			НовоеСостояниеОплаты = бит_Визирование.ОпределитьСостояниеОплаты(СтруктураОплат);
			
			
			
			Если НовоеСостояниеОплаты <> СтруктураСтатус.ОплатаСтатус Тогда
				
				бит_Визирование.УстановитьСтатусОбъекта(СтрокаТаблицы.Заявка
														,Перечисления.бит_ВидыСтатусовОбъектов.СостояниеОплаты
														,НовоеСостояниеОплаты
														,СтруктураСтатус.ОплатаСтатус
														,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
														,ТекущаяДата());
				
				
			КонецЕсли; 
			
			
		КонецЕсли; 
		
	КонецЦикла; // По таблице расход
	
	// Обрабатываем ситуацию удаления платежной позиции	из дополнительных аналитик.
	Если Источник.ДополнительныеСвойства.Свойство("бит_ПлатежнаяПозицияУдаленная") Тогда
		
		бит_ПлатежнаяПозицияУдаленная = Источник.ДополнительныеСвойства.бит_ПлатежнаяПозицияУдаленная;
		
		МассивЗаявок = Новый Массив;
		
		// Если в документе позицию можно указать в таб.части, то передается массив.
		Если ТипЗнч(бит_ПлатежнаяПозицияУдаленная) = Тип("Массив") Тогда
			Для Каждого ТекущаяПозиция Из бит_ПлатежнаяПозицияУдаленная Цикл
				Если НЕ ЗначениеЗаполнено(ТекущаяПозиция) Тогда
					Продолжить;
				КонецЕсли;
				
				ОснованиеПозиции = ТекущаяПозиция.ДокументОснование;
				
				НайденныйЭлемент = МассивЗаявок.Найти(ОснованиеПозиции);
				
				Если НайденныйЭлемент = Неопределено Тогда
					МассивЗаявок.Добавить(ОснованиеПозиции);
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивЗаявок.Добавить(бит_ПлатежнаяПозицияУдаленная.ДокументОснование);
		КонецЕсли;
		
		Для Каждого ТекущаяЗаявка Из МассивЗаявок Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекущаяЗаявка) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОплат = ПолучитьОплатыПоЗаявке(ТекущаяЗаявка);
			
			СтруктураСтатус = бит_Визирование.ПолучитьСтатусОбъекта(ТекущаяЗаявка);
			
			ВсеВизыПолучены = бит_Визирование.ВизыПолучены(ТекущаяЗаявка);
			
			ОбъектЗаявка = ТекущаяЗаявка.ПолучитьОбъект();
			ОбъектЗаявка.УстановитьСтатус(РежимЗаписиДокумента.Проведение,СтруктураОплат,Ложь);
			
			НовоеСостояниеОплаты = бит_Визирование.ОпределитьСостояниеОплаты(СтруктураОплат);
			
			Если НовоеСостояниеОплаты <> СтруктураСтатус.ОплатаСтатус Тогда
				
				бит_Визирование.УстановитьСтатусОбъекта(ТекущаяЗаявка
														,Перечисления.бит_ВидыСтатусовОбъектов.СостояниеОплаты
														,НовоеСостояниеОплаты
														,СтруктураСтатус.ОплатаСтатус
														,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
														,ТекущаяДата());
				
				
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; // Удаление платежной позиции
	
КонецПроцедуры
                      
// Функция получает текст запроса для табло счетов по данным бухгалтерского учета.
// 
// Параметры:
//  ЕстьСправочникКассы 				  - Булево - есть ли.
//  ПоказыватьСуммуПланируемыхПоступлений - Булево - показывать сумму.
// 
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьТекстЗапросаДляТаблоСчетовПоДаннымБухгалтерскогоУчета(ЕстьСправочникКассы, ПоказыватьСуммуПланируемыхПоступлений)
				
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Владелец КАК Организация,
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные) КАК ВидДенежныхСредств
	|ПОМЕСТИТЬ БанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|{ГДЕ
	|	БанковскиеСчета.Ссылка.* КАК Субконто1,
	|	БанковскиеСчета.Владелец.* КАК Организация,
	|	(ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные)).* КАК ВидДенежныхСредств}
	|;	
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК Касса,
	|	Валюты.Ссылка КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные) КАК ВидДенежныхСредств
	|ПОМЕСТИТЬ Кассы
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО (ИСТИНА)
	|{ГДЕ
	|	Организации.Ссылка.* КАК Организация,
	|	Валюты.Ссылка.* КАК Валюта,
	|	(ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные)).* КАК ВидДенежныхСредств}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Кассы.Организация КАК Организация,
	|	Кассы.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|	Кассы.Касса КАК БанковскийСчет,
	|	Кассы.Валюта КАК Валюта,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт
	|		КОНЕЦ, 0) КАК СуммаНачОстаток,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|		КОНЕЦ, 0) КАК СуммаПриход,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|		КОНЕЦ, 0) КАК СуммаРасход,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
	|		КОНЕЦ, 0) КАК СуммаКонОстаток
	|ПОМЕСТИТЬ ДанныеСчетовКасс
	|ИЗ
	|	Кассы КАК Кассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, , Счет В (&МассивСчетовКасса), , {(Организация)}) КАК ХозрасчетныйОстаткиИОбороты
	|		ПО Кассы.Организация = ХозрасчетныйОстаткиИОбороты.Организация
	|			И (ВЫБОР
	|				КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|					ТОГДА Кассы.Валюта = ХозрасчетныйОстаткиИОбороты.Валюта
	|				ИНАЧЕ Кассы.Валюта = &ВалютаРеглУчета
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Организация,
	|	БанковскиеСчета.ВидДенежныхСредств,
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Валюта,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт
	|		КОНЕЦ, 0),
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|		КОНЕЦ, 0),
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|		КОНЕЦ, 0),
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
	|		КОНЕЦ, 0)
	|ИЗ
	|	БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				День,
	|				,
	|				Счет В (&МассивСчетовБанк),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета),
	|				Субконто1 В
	|					(ВЫБРАТЬ
	|						БанковскиеСчета.Ссылка
	|					ИЗ
	|						БанковскиеСчета КАК БанковскиеСчета) {(Организация)}) КАК ХозрасчетныйОстаткиИОбороты
	|		ПО БанковскиеСчета.Ссылка = ХозрасчетныйОстаткиИОбороты.Субконто1
	|			И БанковскиеСчета.Организация = ХозрасчетныйОстаткиИОбороты.Организация
	|			И (ВЫБОР
	|				КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|					ТОГДА БанковскиеСчета.Валюта = ХозрасчетныйОстаткиИОбороты.Валюта
	|				ИНАЧЕ БанковскиеСчета.Валюта = &ВалютаРеглУчета
	|			КОНЕЦ)";
	
	Если ПоказыватьСуммуПланируемыхПоступлений Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ПланируемоеПоступление.Организация,
		|	ПланируемоеПоступление.ВидДенежныхСредств,
		|	ПланируемоеПоступление.БанковскийСчет,
		|	ПланируемоеПоступление.Валюта,
		|	0,
		|	ПланируемоеПоступление.СуммаОборот,
		|	0,
		|	0
		|ИЗ
		|	РегистрНакопления.бит_ПланируемоеПоступлениеДенежныхСредств.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные)
		|				И БанковскийСчет В
		|					(ВЫБРАТЬ
		|						БанковскиеСчета.Ссылка
		|					ИЗ
		|						БанковскиеСчета КАК БанковскиеСчета) {(Организация)}) КАК ПланируемоеПоступление
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПланируемоеПоступление.Организация,
		|	ПланируемоеПоступление.ВидДенежныхСредств,
		|	&ПолеБанковскийСчет,
		|	ПланируемоеПоступление.Валюта,
		|	0,
		|	ПланируемоеПоступление.СуммаОборот,
		|	0,
		|	0
		|ИЗ
		|	РегистрНакопления.бит_ПланируемоеПоступлениеДенежныхСредств.Обороты(&НачалоПериода, &КонецПериода, , ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные) {(Организация), (Валюта)}) КАК ПланируемоеПоступление";
		
		ЧтоЗаменить = "&ПолеБанковскийСчет";
		Если ЕстьСправочникКассы Тогда
			НаЧтоЗаменить = "ПланируемоеПоступление.БанковскийСчет";
		Иначе
			НаЧтоЗаменить = "ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)";
		КонецЕсли; 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ДанныеСчетовКасс.Организация КАК Организация,
	|	ДанныеСчетовКасс.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|	ДанныеСчетовКасс.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеСчетовКасс.Валюта КАК Валюта,
	|	СУММА(ДанныеСчетовКасс.СуммаНачОстаток) КАК СуммаНачОстаток,
	|	СУММА(ДанныеСчетовКасс.СуммаПриход) КАК СуммаПриход,
	|	СУММА(ДанныеСчетовКасс.СуммаРасход) КАК СуммаРасход,
	|	СУММА(ДанныеСчетовКасс.СуммаКонОстаток) КАК СуммаКонОстаток
	|ИЗ
	|	ДанныеСчетовКасс КАК ДанныеСчетовКасс
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСчетовКасс.Организация,
	|	ДанныеСчетовКасс.ВидДенежныхСредств,
	|	ДанныеСчетовКасс.БанковскийСчет,
	|	ДанныеСчетовКасс.Валюта
	|ИТОГИ
	|	0 КАК СуммаНачОстаток,
	|	0 КАК СуммаПриход,
	|	0 КАК СуммаРасход,
	|	0 КАК СуммаКонОстаток
	|ПО
	|	Организация,
	|	ВидДенежныхСредств";
	
	// +СБ. Широков Николай. 2014-10-23. Доработка #1091 
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Владелец КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные) КАК ВидДенежныхСредств,
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК Валюта
	|ПОМЕСТИТЬ ТабСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|{ГДЕ
	|	БанковскиеСчета.Ссылка.* КАК Субконто1,
	|	БанковскиеСчета.Владелец.* КАК Организация,
	|	(ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные)) КАК ВидДенежныхСредств}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидДенежныхСредств,
	|	Ссылка,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_РеестрПлатежей.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ УтвержденныеРеестры
	|ИЗ
	|	РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_РеестрПлатежей КАК бит_РеестрПлатежей
	|		ПО бит_СтатусыОбъектов.Объект = бит_РеестрПлатежей.Ссылка
	|			И (бит_СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	|ГДЕ
	|	бит_РеестрПлатежей.Ссылка <> &РеестрСсылка
	|	И бит_РеестрПлатежей.Дата < &РеестрДата
	|	И бит_РеестрПлатежей.Дата >= &НачалоДня
	|	И бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.БанковскийСчет КАК БанковскийСчет,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Валюта КАК Валюта,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаНач КАК СуммаНач,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаПриход КАК СуммаПриход,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаРасход КАК СуммаРасход,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаКон КАК СуммаКон,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ОстаткиПоСчетам
	|ИЗ
	|	РегистрСведений.бит_СведенияОбОстаткахДенежныхСредств.СрезПоследних(
	|			&ДатаЗапроса,
	|			(Организация, ВидДенежныхСредств, БанковскийСчет, Валюта) В
	|				(ВЫБРАТЬ
	|					ТабСчета.Организация,
	|					ТабСчета.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|					ТабСчета.Ссылка,
	|					ТабСчета.Валюта
	|				ИЗ
	|					ТабСчета КАК ТабСчета) {(ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные)) КАК ВидДенежныхСредств}) КАК бит_СведенияОбОстаткахДенежныхСредствСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БанковскийСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Валюта КАК Валюта,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаНач КАК СуммаНач,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаПриход КАК СуммаПриход,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаРасход КАК СуммаРасход,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаКон КАК СуммаКон,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ОстаткиВКассе
	|ИЗ
	|	РегистрСведений.бит_СведенияОбОстаткахДенежныхСредств.СрезПоследних(&ДатаЗапроса, ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные) {(Организация), (ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные)).* КАК ВидДенежныхСредств, (Валюта).* КАК Валюта}) КАК бит_СведенияОбОстаткахДенежныхСредствСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные) КАК ВидДенежныхСредств,
	|	""Касса"" КАК БанковскийСчет,
	|	ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Валюта, ВалютаРегламентированногоУчета.Значение) КАК Валюта,
	|	ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаНач, 0) КАК СуммаНачОстаток,
	|	ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаПриход, 0) КАК СуммаПриход,
	|	ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаРасход, 0) КАК СуммаРасход,
	|	ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаКон, 0) КАК СуммаКонОстаток,
	|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|		ПОЛНОЕ СОЕДИНЕНИЕ ОстаткиВКассе КАК бит_СведенияОбОстаткахДенежныхСредствСрезПоследних
	|		ПО (ИСТИНА)
	|{ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные)).* КАК ВидДенежныхСредств,
	|	(ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Валюта, ВалютаРегламентированногоУчета.Значение)).* КАК Валюта}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные),
	|	БанковскиеСчета.Ссылка,
	|	ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Валюта, БанковскиеСчета.Валюта),
	|	ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаНач, 0),
	|	ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаПриход, 0),
	|	ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаРасход, 0),
	|	ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаКон, 0),
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-21 (#3923)
	//|	бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Организация
	|	БанковскиеСчета.Организация
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-21 (#3923)
	|ИЗ
	|	ТабСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоСчетам КАК бит_СведенияОбОстаткахДенежныхСредствСрезПоследних
	|		ПО БанковскиеСчета.Ссылка = бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.БанковскийСчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_РеестрПлатежейЗаявки.ФормаОплаты,
	|	бит_РеестрПлатежейЗаявки.БанковскийСчетОрганизация,
	|	бит_РеестрПлатежейЗаявки.Валюта,
	|	-бит_РеестрПлатежейЗаявки.СуммаКОплате,
	|	0,
	|	0,
	|	-бит_РеестрПлатежейЗаявки.СуммаКОплате,
	|	ТабСчета.Организация
	|ИЗ
	|	УтвержденныеРеестры КАК УтвержденныеРеестры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_РеестрПлатежей.Заявки КАК бит_РеестрПлатежейЗаявки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСчета КАК ТабСчета
	|			ПО (ТабСчета.Ссылка = бит_РеестрПлатежейЗаявки.БанковскийСчетОрганизация)
	|		ПО УтвержденныеРеестры.Ссылка = бит_РеестрПлатежейЗаявки.Ссылка
	|ГДЕ
	|	бит_РеестрПлатежейЗаявки.Оплачено
	|{ГДЕ
	|	бит_РеестрПлатежейЗаявки.ФормаОплаты.* КАК ВидДенежныхСредств,
	|	бит_РеестрПлатежейЗаявки.БанковскийСчетОрганизация.* КАК Субконто1,
	|	бит_РеестрПлатежейЗаявки.Организация.*}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|	Данные.БанковскийСчет КАК БанковскийСчет,
	|	Данные.Валюта КАК Валюта,
	|	СУММА(Данные.СуммаНачОстаток) КАК СуммаНачОстаток,
	|	СУММА(Данные.СуммаПриход) КАК СуммаПриход,
	|	СУММА(Данные.СуммаРасход) КАК СуммаРасход,
	|	СУММА(Данные.СуммаКонОстаток) КАК СуммаКонОстаток,
	|	Данные.Организация КАК Организация
	|ИЗ
	|	Данные КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.БанковскийСчет,
	|	Данные.ВидДенежныхСредств,
	|	Данные.Валюта,
	|	Данные.Организация
	|ИТОГИ
	|	0 КАК СуммаНачОстаток,
	|	0 КАК СуммаПриход,
	|	0 КАК СуммаРасход,
	|	0 КАК СуммаКонОстаток
	|ПО
	|	Организация,
	|	ВидДенежныхСредств";
	// -СБ. Широков Николай 
	
    Возврат ТекстЗапроса;
    
КонецФункции

// Функция получает текст запроса для табло счетов по сведениям о движении денежных средств.
// 
// Параметры:
//   ЕстьСправочникКассы - Булево - есть ли.
// 
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьТекстЗапросаДляТаблоСчетовПоСведениямОДвиженииДенежныхСредств(ЕстьСправочникКассы)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные) КАК ВидДенежныхСредств,
	|	Валюты.Ссылка КАК Валюта,
	|	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК БанковскийСчет
	|ПОМЕСТИТЬ Кассы
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (ИСТИНА)
	|{ГДЕ
	|	Организации.Ссылка.* КАК Организация,
	|	Валюты.Ссылка.* КАК Валюта,
	|	(ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные)).* КАК ВидДенежныхСредств}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Кассы.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|	Кассы.Организация КАК Организация,
	|	Кассы.БанковскийСчет КАК БанковскийСчет,
	|	Кассы.Валюта КАК Валюта,
	|	СУММА(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаКонРегл) КАК СуммаРегл,
	|	СУММА(ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаНач, 0)) КАК СуммаНачОстаток,
	|	СУММА(ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаПриход, 0)) КАК СуммаПриход,
	|	СУММА(ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаРасход, 0)) КАК СуммаРасход,
	|	СУММА(ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаКон, 0)) КАК СуммаКонОстаток
	|ПОМЕСТИТЬ ТекущиеСведения
	|ИЗ
	|	Кассы КАК Кассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СведенияОбОстаткахДенежныхСредств.СрезПоследних(
	|				&КонецПериода,
	|				(Организация, Валюта, ВидДенежныхСредств) В
	|					(ВЫБРАТЬ
	|						Кассы.Организация КАК Организация,
	|						Кассы.Валюта КАК Валюта,
	|						Кассы.ВидДенежныхСредств КАК ВидДенежныхСредств
	|					ИЗ
	|						Кассы КАК Кассы)) КАК бит_СведенияОбОстаткахДенежныхСредствСрезПоследних
	|		ПО Кассы.Организация = бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Организация
	|			И Кассы.ВидДенежныхСредств = бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.ВидДенежныхСредств
	|			И Кассы.Валюта = бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	Кассы.ВидДенежныхСредств,
	|	Кассы.БанковскийСчет,
	|	Кассы.Организация,
	|	Кассы.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные),
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.ВалютаДенежныхСредств,
	|	СУММА(ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаКонРегл, 0)),
	|	СУММА(ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаНач, 0)),
	|	СУММА(ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаПриход, 0)),
	|	СУММА(ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаРасход, 0)),
	|	СУММА(ЕСТЬNULL(бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.СуммаКон, 0))
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СведенияОбОстаткахДенежныхСредств.СрезПоследних(&КонецПериода, ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные)) КАК бит_СведенияОбОстаткахДенежныхСредствСрезПоследних
	|		ПО БанковскиеСчета.Ссылка = бит_СведенияОбОстаткахДенежныхСредствСрезПоследних.БанковскийСчет
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) = ТИП(Справочник.Организации)
	|{ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные)).* КАК ВидДенежныхСредств,
	|	БанковскиеСчета.Владелец.* КАК Организация,
	|	БанковскиеСчета.Ссылка.* КАК Субконто1}
	|
	|СГРУППИРОВАТЬ ПО
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.ВалютаДенежныхСредств,
	|	БанковскиеСчета.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеСведения.Организация КАК Организация,
	|	ТекущиеСведения.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|	ТекущиеСведения.БанковскийСчет КАК БанковскийСчет,
	|	ТекущиеСведения.Валюта КАК Валюта,
	|	СУММА(ТекущиеСведения.СуммаРегл) КАК СуммаРегл,
	|	СУММА(ТекущиеСведения.СуммаНачОстаток) КАК СуммаНачОстаток,
	|	СУММА(ТекущиеСведения.СуммаПриход) КАК СуммаПриход,
	|	СУММА(ТекущиеСведения.СуммаРасход) КАК СуммаРасход,
	|	СУММА(ТекущиеСведения.СуммаКонОстаток) КАК СуммаКонОстаток
	|ИЗ
	|	ТекущиеСведения КАК ТекущиеСведения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеСведения.ВидДенежныхСредств,
	|	ТекущиеСведения.БанковскийСчет,
	|	ТекущиеСведения.Валюта,
	|	ТекущиеСведения.Организация
	|ИТОГИ
	|	0 КАК СуммаНачОстаток,
	|	0 КАК СуммаПриход,
	|	0 КАК СуммаРасход,
	|	0 КАК СуммаКонОстаток
	|ПО
	|	Организация,
	|	ВидДенежныхСредств";
	
    Возврат ТекстЗапроса;
    
КонецФункции

Функция БанковскиеСчетаХозрасчетный()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");	

КонецФункции

Процедура ЗаполнитьТабличнуюЧастьРаспределение(ПлатежнаяПозиция)

	МассивСтарыхСумм = ПлатежнаяПозиция.Распределение.ВыгрузитьКолонку("Сумма");
	МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ПлатежнаяПозиция.Сумма, МассивСтарыхСумм);
	
	Для каждого Строка Из ПлатежнаяПозиция.Распределение Цикл
		Если МассивНовыхСумм = Неопределено Тогда
			Строка.Сумма = 0;
		Иначе	
			Строка.Сумма = МассивНовыхСумм[ПлатежнаяПозиция.Распределение.Индекс(Строка)];
		КонецЕсли; 
		ПлатежнаяПозиция.РассчитатьСуммуНДС(Строка);
	КонецЦикла; 

КонецПроцедуры

Функция ОбщиеРеквизитыПлатежныхПозиций(РеквизитыПозиций)

	// Укажем реквизиты которые должны совпадать у платежных позиций в сводном документе оплаты.	
	Группировки = ""
				+ "ФормаОплаты,"
				+ "ВидОперации,"
				+ "Организация,"
				+ "Контрагент,"
				+ "БанковскийСчетОрганизация,"
				+ "БанковскийСчетКонтрагент,"
				+ "ВалютаПлатежныхПозиций,"
				+ "ДоговорКонтрагента";
	
	Ресурсы = "СуммаПлатежныхПозиций";
	
	ТаблицаОбщихРеквизитов = РеквизитыПозиций.Скопировать(,Группировки + "," + Ресурсы);

	// Если банковские счета контрагента в платежных позициях различаются,
	// то сводный документ создать можно, но счет заполнен не будет.
	БанковскиеСчетаКонтрагентов = РеквизитыПозиций.ВыгрузитьКолонку("БанковскийСчетКонтрагент");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(БанковскиеСчетаКонтрагентов);
	
	ДоговораКонтрагентов = РеквизитыПозиций.ВыгрузитьКолонку("ДоговорКонтрагента");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДоговораКонтрагентов);

	Если НЕ БанковскиеСчетаКонтрагентов.Количество() = 1 Тогда
		ТаблицаОбщихРеквизитов.ЗаполнитьЗначения(Неопределено, "БанковскийСчетКонтрагент");
	КонецЕсли;
	
	Если НЕ ДоговораКонтрагентов.Количество() = 1 Тогда
		ТаблицаОбщихРеквизитов.ЗаполнитьЗначения(РеквизитыПозиций[0].ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;
	
	ТаблицаОбщихРеквизитов.Свернуть(Группировки, Ресурсы);

	Возврат ТаблицаОбщихРеквизитов;
	
КонецФункции

// Процедура заполняет подменю в выборе вида операции.
// 
// Параметры:
//  УправляемаяФорма 	  		  - УправляемаяФорма.
//  ГруппаФормыПодменю	  		  - ГруппаФормы - Подменю, которое надо заполнить.
//  ИмяПодменю 			  		  - Строка
//  ПредставлениеПодменю  		  - Строка
//  СооответствиеКонтроль 		  - Соответствие
//  ОбъектЗаполнения	  		  - Коллекция для заполнения пунктов подменю.
//  ОбъектОбработкиВыбораОперации - Действие, которое надо выполнить при выборе любого пункта подменю.
//  Исключения			  		  - Соответстие, ключ: имя подменю, 
// 										 		 значение: массив исключений для данного пункта подменю.
// 
Функция ЗаполнитьПодменюВЗаявкеУправляемоеПриложение(УправляемаяФорма
													  ,ГруппаФормыПодменю
													  ,ИмяПодменю
													  ,ПредставлениеПодменю
													  ,СоответствиеКонтроль
													  ,ОбъектЗаполнения
													  ,ОбъектОбработкиВыбораОперации
													  ,Исключения)
	
    МассивИсключений = Исключения[ИмяПодменю];
	
	Если Не ТипЗнч(МассивИсключений) = Тип("Массив") Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли; 
	
	// Создаем группу подменю.
	ГруппаПодменю = УправляемаяФорма.Элементы.Добавить(ИмяПодменю, Тип("ГруппаФормы"), ГруппаФормыПодменю); 
	ГруппаПодменю.Вид 		= ВидГруппыФормы.Подменю;
	ГруппаПодменю.Заголовок = ПредставлениеПодменю;
	
	// Заполняем виды операций для группы подменю.
	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_ВидыОперацийЗаявкаНаРасходование[ИмяЗначенияПеречисления];
		
		Если Не СоответствиеКонтроль[ЗначениеПеречисления] = Неопределено Тогда
			
			ИмяКнопки = ИмяПодменю + "_" + ИмяЗначенияПеречисления;
			
			Если МассивИсключений.Найти(ИмяЗначенияПеречисления) = Неопределено Тогда
				
				ИмяКоманды = "Команда_" + ИмяКнопки;
				
				// Добавляем новую команду обработки выбора вида операции.
				КомандаУстановитьОперацию = УправляемаяФорма.Команды.Добавить(ИмяКоманды);
				КомандаУстановитьОперацию.Действие = ОбъектОбработкиВыбораОперации;
				
				КнопкаГруппыПодменю = УправляемаяФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаПодменю);
				КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
				КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
				КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ГруппаПодменю;
	
КонецФункции // ЗаполнитьПодменюВЗаявкеУправляемоеПриложение()

#Область УстаревшийФункционал

// Устарела. Следует использовать бит_КазначействоКлиентСервер.ВидыОперацийРеглУчетаЗаявки(). 
Функция СформироватьСоответствияВидовОперацииЗаявки(ИмяДокумента) Экспорт
	
	Возврат бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл(ИмяДокумента);
	
КонецФункции

//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
// Функция находит документы оплаты по переданному массиву платежных позиций.
// 
// Параметры:
// 	ПлатежныеПозиции - Массив - элементы ДокументСсылка.бит_ПлатежнаяПозиция.
// 
// Возвращаемое значение:
// 	СоответствиеДокументов - Соответствие - ключ - ДокументСсылка.бит_ПлатежнаяПозиция
// 											значение - произвольная ссылка на документ оплаты.
// 
Функция ПолучитьСоответствиеПлатежныхПозицийИДокументовОплаты(ПлатежныеПозиции) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПлатежныеПозиции", ПлатежныеПозиции);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(бит_ДополнительныеАналитики.ЗначениеАналитики КАК Документ.бит_ПлатежнаяПозиция) КАК ПлатежнаяПозиция,
	|	бит_ДополнительныеАналитики.Объект КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ДокументыОплаты
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|ГДЕ
	|	бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция)
	|	И бит_ДополнительныеАналитики.ЗначениеАналитики В(&ПлатежныеПозиции)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция,
	|	бит_ДокументыМножественнойОплаты.ДокументОплаты
	|ИЗ
	|	РегистрСведений.бит_ДокументыМножественнойОплаты КАК бит_ДокументыМножественнойОплаты
	|ГДЕ
	|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция В(&ПлатежныеПозиции)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплаты.ПлатежнаяПозиция,
	|	ДокументыОплаты.ПлатежныйДокумент
	|ИЗ
	|	ДокументыОплаты КАК ДокументыОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплаты.ПлатежнаяПозиция,
	|	ДокументыОплаты.ПлатежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыОплаты";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	СоответствиеДокументов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		СоответствиеДокументов.Вставить(Выборка.ПлатежнаяПозиция, Выборка.ПлатежныйДокумент);
		
	КонецЦикла;
	
	Возврат СоответствиеДокументов;
	
КонецФункции
//1С-ИжТиСи, Кондратьев, 03.2020, обновление )

#КонецОбласти 

#КонецОбласти
