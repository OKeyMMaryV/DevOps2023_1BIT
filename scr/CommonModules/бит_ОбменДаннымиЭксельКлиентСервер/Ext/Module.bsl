////////////////////////////////////////////////////////////////////////////////
// Выгрузка данных в файлы и загрузка данных из файлов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбъектExcel

Функция СоздатьПриложениеExcelСохранивНастройки(Отказ = Ложь) Экспорт
        
	Попытка
        
        // Создание объекта Microsoft Excel.
		ExcelApplication = Новый COMОбъект("Excel.Application");
		СохрНастройкиExcel = СохранитьНастройкиОбъектаExcel(ExcelApplication);
        
		ExcelApplication.Visible = Ложь;
		ExcelApplication.AskToUpdateLinks   = Ложь;
		ExcelApplication.DisplayAlerts      = Ложь;
		ExcelApplication.AutomationSecurity = 3;
        
        СтруктураРез = Новый Структура;
        СтруктураРез.Вставить("ExcelApplication"  , ExcelApplication);
        СтруктураРез.Вставить("СохрНастройкиExcel", СохрНастройкиExcel);
        
	Исключение
        
        ТекстСообщения = НСтр("ru = 'Не удалось создать объект Excel.'");
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
        
        Отказ = Истина;
        
        СтруктураРез = Неопределено;
		
	КонецПопытки;
	
	Возврат СтруктураРез;
		
КонецФункции // СоздатьПриложениеExcelСохранивНастройки()

Функция ЗакрытьПриложениеExcelССохраненнымиНастройками(ExcelApplication, СохрНастройкиExcel, ЗакрытьКниги = Ложь, СохранитьИзменения = Ложь) Экспорт
	
	Попытка
		
		Если ЗакрытьКниги Тогда
			
			Для каждого Workbook Из ExcelApplication.Workbooks Цикл
				Workbook.Close(СохранитьИзменения);
			EndDo;
			
		КонецЕсли;
		
		ExcelApplication.AskToUpdateLinks	= СохрНастройкиExcel.AskToUpdateLinks;
		ExcelApplication.DisplayAlerts		= СохрНастройкиExcel.DisplayAlerts;
		ExcelApplication.AutomationSecurity = СохрНастройкиExcel.AutomationSecurity;
		
		ExcelApplication.Quit();			
			
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ЗакрытьПриложениеExcelССохраненнымиНастройками()

#КонецОбласти

#Область ФайлExcel

// Функция открывает Excel файл.
// 
// Параметры:
//  Excel	   - ComObject("Excel.Application").
//  ПутьКФайлу - Строка, полный путь где лежит файл.
//  Отказ 	   - Булево, по умолчанию Ложь.
// 
// Возвращаемое значение:
//   ExcelФайл - ComObject, в случае неудачи Неопределено.
// 
Функция ОткрытьФайлExcel(ExcelApplication, ПутьКФайлу, Отказ = Ложь) Экспорт
	
	Попытка
        
        // Открытие файла Microsoft Excel
        #Если Клиент Тогда
        Состояние("Открытие файла Microsoft Excel...");
        #КонецЕсли
        ExcelФайл = ExcelApplication.WorkBooks.Open(ПутьКФайлу);
        
	Исключение
        
        ТекстСообщения = Нстр("ru = 'Ошибка при открытии файла Excel: '") + ПутьКФайлу + ".";
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
        Возврат Неопределено;
        
    КонецПопытки;
	
	Возврат ExcelФайл;
	
КонецФункции // ОткрытьФайлExcel()

// Функция закрывает открытый файл Excel.
// 
// Параметры:
//  ExcelФайл - ComObject.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЗакрытьФайлExcel(ExcelФайл) Экспорт
	
	ФайлЗакрыт = Истина;
	
	Попытка 
        
        ExcelФайл.Close();
        
    Исключение                 
        
        ФайлЗакрыт = Ложь;
        ТекстСообщения = Нстр("ru = 'Не удалось закрыть файл Excel.'");
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
        
    КонецПопытки;
	
	Возврат ФайлЗакрыт;
	
КонецФункции // ЗакрытьФайлExcel()

// Функция возвращает список листов в файле Excel.
// 
// Параметры:
//  ExcelФайл - ComObject.
//  Отказ 	  - Булево, по умолчанию Ложь.
// 
//  СообщатьОбОшибке - Булево, по умолчанию Истина.
//  ДопСообщение     - Строка, текст дополнительного сообщения для вывода в случае неудачи,
// 					   по умолчанию "".
// 
// Возвращаемое значение:
//   МассивЛистов - Массив, в случае неудачи Неопределено.
// 
Функция ПолучитьМассивЛистовExcel(ExcelФайл, СообщатьОбОшибке = Истина, ДопСообщение = "") Экспорт
							 
	Попытка
        
        // Открытие листа файла Microsoft Excel.
        #Если Клиент Тогда
        Состояние("Получение списка листов файла Microsoft Excel...");
        #КонецЕсли
        
        МассивЛистов = Новый Массив();
        Для Каждого ТекЛист Из ExcelФайл.Sheets Цикл
			МассивЛистов.Добавить(ТекЛист.Name);
        КонецЦикла;
        
	Исключение
		
		Если СообщатьОбОшибке Тогда
            
            ТекстСообщения = Нстр("ru = 'Ошибка получения списка листов книги MS Excel.'");// + ОписаниеОшибки();
            Если НЕ ПустаяСтрока(ДопСообщение) Тогда
                ТекстСообщения = ТекстСообщения + "	" + ДопСообщение;
            КонецЕсли;
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);	
						
		КонецЕсли;
		
        МассивЛистов = Неопределено;
        
    КонецПопытки;
	
	Возврат МассивЛистов;
	
КонецФункции // ПолучитьМассивЛистовExcel()

#КонецОбласти 

#Область ЗагрузкаВыгрузкаExcel

// --------------------------------------------------
// Загрузка

// Процедура осуществляет работу с файлом Excel по загрузке данных Списка справочника.
// 
// Параметры:
//  ПолноеИмяФайла   - Строка.
//  СтруктураОбъекта - Структура.
//  СтруктураПолей   - Структура.
//  Отказ            - Булево.
//
Процедура ЗагрузитьДанныеСправочникаИзExcelКлиент(ПолноеИмяФайла, СтруктураОбъекта, СтруктураПолей, Отказ) Экспорт

	ExcelФайл = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ); 		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ExcelКнига = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(ExcelФайл, ПолноеИмяФайла, Отказ); 		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ExcelЛист = бит_ОбменДаннымиЭксельКлиентСервер.GetExcelSheet(ExcelКнига, 1, Отказ);  		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 		
			
	КоличествоСтолбцов = СтруктураПолей.Количество();
	
	ИмяЛистаИсточник = бит_ПроформыКлиентСервер.ListSourceSheetName();
	Попытка
		ЛистИсточникСписков = ExcelФайл.Sheets(ИмяЛистаИсточник);
		//ЕстьСписки = Истина;
		// Чтение источников выпадающих списков.
		СпискиИсточники = бит_ПроформыКлиентСервер.ПрочитатьСпискиИсточники(ExcelКнига);
	Исключение
		//ЕстьСписки = Ложь;
		СпискиИсточники = Новый Соответствие;
	КонецПопытки;
	
	// (ExcelЛист, Данные, Номер1Колонки, Номер1Строки, МассивНеРазрешимыхСимволов, БыстроеСчитываниеДанных, НомерКонечнойСтроки).
	СтруктураДанных = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьТаблицуДанных(ExcelЛист, Неопределено, 1, 1, Новый Массив, Ложь, 0);
	 		
	МассивСтрокExcel = СтруктураДанных.ТаблицаДанных;
	
	// Загрузка данных из Excel
	бит_ОбменДаннымиЭксельСервер.ЗагрузитьДанныеСправочникаИзExcelСервер(СтруктураОбъекта, МассивСтрокExcel, СтруктураПолей, СтруктураДанных, СпискиИсточники);
		  		
	// Закрытие Excel
	бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelКнига, Ложь);
	бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(ExcelФайл);
        
КонецПроцедуры // ЗагрузитьДанныеСправочникаИзExcelКлиент()

// Процедура осуществляет работу с файлом Excel по загрузке данных табличной части.
// 
// Параметры:
//  ПолноеИмяФайла   - Строка.
//  СтруктураОбъекта - Структура.
//  АдресДанных      - Адрес во временном хранилище.
//  СтруктураПолей   - Структура.
//  Отказ            - Булево.
//
Процедура ЗагрузитьДанныеТчИзExcelКлиент(ПолноеИмяФайла, СтруктураОбъекта, АдресДанных, СтруктураПолей, Отказ) Экспорт

	ExcelФайл = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ); 		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ExcelКнига = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(ExcelФайл, ПолноеИмяФайла, Отказ); 		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ExcelЛист = бит_ОбменДаннымиЭксельКлиентСервер.GetExcelSheet(ExcelКнига, 1, Отказ);  		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 		
			
	КоличествоСтолбцов = СтруктураПолей.Количество();
	
	ИмяЛистаИсточник = бит_ПроформыКлиентСервер.ListSourceSheetName();
	Попытка
		ЛистИсточникСписков = ExcelФайл.Sheets(ИмяЛистаИсточник);
		//ЕстьСписки = Истина;
		// Чтение источников выпадающих списков.
		СпискиИсточники = бит_ПроформыКлиентСервер.ПрочитатьСпискиИсточники(ExcelКнига);
	Исключение
		//ЕстьСписки = Ложь;
		СпискиИсточники = Новый Соответствие;
	КонецПопытки;
	
	// (ExcelЛист, Данные, Номер1Колонки, Номер1Строки, МассивНеРазрешимыхСимволов, БыстроеСчитываниеДанных, НомерКонечнойСтроки).
	СтруктураДанных = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьТаблицуДанных(ExcelЛист, Неопределено, 1, 1, Новый Массив, Ложь, 0);
	 		
	МассивСтрокExcel = СтруктураДанных.ТаблицаДанных;
	
	// Загрузка данных из Excel
	бит_ОбменДаннымиЭксельСервер.ЗагрузитьДанныеТчИзExcelСервер(СтруктураОбъекта, АдресДанных, МассивСтрокExcel, СтруктураПолей, СтруктураДанных, СпискиИсточники);
		  		
	// Закрытие Excel
	бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelКнига, Ложь);
	бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(ExcelФайл);
	 
КонецПроцедуры

// --------------------------------------------------
// Выгрузка

// Функция выгружает на отдельный лист данные для установки выпадающих списков. 
// 
// Параметры:
//  Wb                - ComObject.
//  XlEnums           - Структура.
//  ДанныеДляВыгрузки - Структура.
// 
Функция ВыгрузитьСписки(Wb, XlEnums, ДанныеДляВыгрузки) Экспорт
	
	LoadedLists = new Map;	
	
	// Создание и установка параметров для листа, являющегося источником выпадающих списков.
	ExcelSheet = Wb.Worksheets.Add(, Wb.Worksheets(Wb.Worksheets.Count));
	ExcelSheet.Name = бит_ПроформыКлиентСервер.ListSourceSheetName();
	ExcelSheet.StandardWidth           = 25;
	ExcelSheet.Cells.WrapText          = Истина;
	ExcelSheet.Cells.VerticalAlignment = XlEnums.xlConsts.xlCenter;
	ExcelSheet.Cells.NumberFormat      = "@";
	
	StartRow    = 2;
	StartColumn = 1;
    
	Сч = 0;
	For each kvp In ДанныеДляВыгрузки.СпискиВыгрузки Do
		
		CurColumn = StartColumn+Сч;			
		
		TypeStr = kvp.key;
        
		// Заголовок списка.
		Cell       = ExcelSheet.Cells(StartRow - 1, CurColumn);
		Cell.Value = TypeStr;
		
		// Выгрузка списка, со смещением на одну колонку выводятся ссылки на объекты в БД.
		List = kvp.Value;
		Счk = 0;
		For each item in List DO
			
			CurRow = StartRow+Счk;
			Cell = ExcelSheet.Cells(CurRow, CurColumn);
			Cell.Value = item.Presentation;
			//Cell = ExcelSheet.Cells(CurRow, CurColumn + 1);
			//Cell.Value = item.Value;
			
			Счk = Счk + 1;
            
		EndDo;	
		
		// Установка имени для области содержащей значения списка выбора для текущего типа.
		ListName = "List." + TypeStr;
		
		PosStart  = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(StartRow, CurColumn);
		PosEnd    = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(CurRow, CurColumn);			
		Selection = ExcelSheet.Range(ExcelSheet.Cells(PosStart.Row, PosStart.Column),ExcelSheet.Cells(PosEnd.Row, PosEnd.Column));
		
		Selection.Name = ListName;
		
		LoadedLists.Insert(kvp.Key, ListName);
		
		//Сч = Сч + 2; // Для выгрузки ссылок нужен сдвиг 2.
		Сч = Сч + 1;
		
	EndDo; 
	
	Возврат LoadedLists;
	
КонецФункции // ВыгрузитьСписки()

// Процедура осуществляет работу с файлом Excel по выгрузке шаблона и данных.
// 
// Параметры:
//  ВыгружатьДанные - Булево.
//  СтруктураПолей  - Структура.
//  ИсточникДанных  - ДанныеФормыКоллекция, ДанныеФормыДерево.
// 
&НаКлиенте
Процедура ВыгрузитьВExcelКлиент(ВыгружатьДанные, СтруктураПолей, ИсточникДанных) Экспорт
	
	ТекстСостояния =  НСтр("ru = 'Выгрузка шаблона Excel...'");
	Состояние(ТекстСостояния);
	
	Отказ = Ложь;
	
	ExcelФайл = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Истина, Отказ);	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	XlEnums = бит_ОбменДаннымиЭксельКлиентСервер.InitExcelEnums(); 	
	
	СтруктураНастроекКолонок = Новый Структура("СтруктураПолей", СтруктураПолей);
	ДанныеДляВыгрузки = бит_ОбменДаннымиЭксельСервер.ПодготовитьДанныеДляВыгрузкиШаблона(СтруктураНастроекКолонок);		
	// Загрузка данных для выпадающих списков.
	ExcelКнига = ExcelФайл.Application.WorkBooks.Add(1);
	// Лист "Источники данных".
	LoadedLists = бит_ПроформыКлиентСервер.UnloadLists(ExcelКнига, XlEnums, ДанныеДляВыгрузки);
	
	// Определим разделитель согласно региональным настройкам и подготовим форматы.
	Разделитель = ExcelФайл.International(XlEnums.XlApplicationInternational.xlDecimalSeparator);
	ФорматСумма = "# ##0" + Разделитель + "00";
	ФорматКоличество = "# ##0" + Разделитель + "000";
	
	// Лист для данных табличной части
	ExcelЛист = ExcelКнига.Worksheets.Add(ExcelКнига.Worksheets(ExcelКнига.Worksheets.Count));
	ExcelЛист.Name =  НСтр("ru = 'Данные'");
	ExcelЛист.StandardWidth = 15;
	ExcelЛист.Cells.NumberFormat = "@";
    ExcelЛист.Cells.Font.Size    = 8;
    ExcelЛист.Cells.WrapText     = True;
		              	
	ЦветШапки = 12971252; // Цвет шапки обычный.
	ЦветЧисло = 16760510; // Число.
    ЦветСостн = 11389944; // Составной тип.
    ЦветОбзтн = 15519231; // Обязательный реквизит.
    
    ЦветШрифтЧисло = 6299648; // Число.
	ЦветШрифтСостн = 801923;  // Составной тип.
	
	НомерКолонки = 1;
	НомерПервойСтрокиСДанными = 2;
	
	// Вывод шапки.
    SelectionШапка = ExcelЛист.Range(ExcelЛист.Cells(1, НомерКолонки), ExcelЛист.Cells(1, СтруктураПолей.Количество()));
    SelectionШапка.Font.Bold      = Истина;    // Жирный шрифт.
    SelectionШапка.Interior.Color = ЦветШапки; // Цвет фона.
	Для каждого КлЗнчПоля Из СтруктураПолей Цикл
		
		ИмяПоля = КлЗнчПоля.Ключ;		
				
		СтруктураПоля = КлЗнчПоля.Значение;
		Синоним 	  = СтруктураПоля.Синоним;
		
		Cell = ExcelЛист.Cells(1, НомерКолонки);				
		
		PosStart = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(НомерПервойСтрокиСДанными, НомерКолонки);
		Selection = ExcelЛист.Range(ExcelЛист.Cells(PosStart.Row, PosStart.Column)
										, ExcelЛист.Cells(PosStart.Row, PosStart.Column).End(XlEnums.XlDirection.xlDown));
										
		// Установка формата полей и цвета шапки
		Если СтруктураПоля.ПримитивныйТип Тогда
											
			Если Найти(СтруктураПоля.СтрТип, "Дата") <> 0 Тогда
				  				
				// Принудительно ставим формат даты.
			 	Selection.NumberFormat = "ДД.ММ.ГГГГ";
				
			ИначеЕсли Найти(СтруктураПоля.СтрТип, "Число") <> 0 Тогда
				
				// Принудительно ставим формат числовой.
				ЧисловойФормат = "0" + ?(СтруктураПоля.Точность > 0, ",", "");
            	для щ = 1 по СтруктураПоля.Точность Цикл
                	ЧисловойФормат = ЧисловойФормат + "0";
				КонецЦикла;
				Selection.NumberFormat = ЧисловойФормат;
				// Цвет фона
                Cell.Interior.Color = ЦветЧисло; // цвет фона
                ExcelЛист.Columns(НомерКолонки).Font.Color = ЦветШрифтЧисло; // цвет шрифта
				
			КонецЕсли;
			
		ИначеЕсли СтруктураПоля.СоставнойТип Тогда
			
			// Цвет фона для полей составного типа
            Cell.Interior.Color = ЦветСостн; // цвет фона
            ExcelЛист.Columns(НомерКолонки).Font.Color = ЦветШрифтСостн; // цвет шрифта	
			
        КонецЕсли;
        
        Если СтруктураПоля.Обязательный Тогда
            ExcelЛист.Columns(НомерКолонки).Interior.Color = ЦветОбзтн; // цвет фона
        КонецЕсли;
		                   		
		// Изменение кода. Начало. 20.12.2016{{ BF-369
		Cell.Value = Синоним;
		Cell.Name  = "CellName." + ИмяПоля;
		// Изменение кода. Конец. 20.12.2016}}
		
		// Установка списков
		ListName = бит_ПроформыКлиентСервер.FindList(LoadedLists, СтруктураПоля, ДанныеДляВыгрузки.ВидыПредставлений);		
		If NOT ListName = Undefined Then  		
			PosStart = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(НомерПервойСтрокиСДанными, НомерКолонки);				
			бит_ОбменДаннымиЭксельКлиентСервер.SetList(Selection, ListName, XlEnums); 			
		EndIf;
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла; 
	
	// Закрепим шапку.
	Selection = ExcelЛист.Range(ExcelЛист.Cells(2, 1), ExcelЛист.Cells(2, 1)).Select();
	ExcelФайл.Application.ActiveWindow.FreezePanes = True;
	
	// Выгрузка данных в Excel
	Если ВыгружатьДанные Тогда
		
		Если ТипЗнч(ИсточникДанных) = Тип("ДанныеФормыКоллекция") ИЛИ ТипЗнч(ИсточникДанных) = Тип("Массив") Тогда
		
			ВыгрузитьПлоскиеДанныеВExcel(ИсточникДанных, СтруктураПолей, ExcelЛист);		
		
		ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ДанныеФормыДерево") Тогда
			
			ВыгрузитьДанныеДереваВExcel(ИсточникДанных, СтруктураПолей, ExcelЛист);
			
        КонецЕсли;
			
	КонецЕсли;
			
	// Установка сетки.
	НомПервойСтроки = 1;
	КолСтрок        = 1;
	КолКолонок      = СтруктураПолей.Количество();
	posStart = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(НомПервойСтроки, 1);
	PosEnd   = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(КолСтрок, КолКолонок);
	бит_ОбменДаннымиЭксельКлиентСервер.SetBorderLines(ExcelЛист, XlEnums, posStart, PosEnd); 
	
	ExcelФайл.Visible = Истина;
	
	// Лист "по-умолчанию" удаляем.
	ExcelКнига.Worksheets(1).Delete();		
	
	ТекстСостояния =  НСтр("ru = 'Выгрузка шаблона Excel завершена.'");
	Состояние(ТекстСостояния);
	
КонецПроцедуры // ВыгрузитьВExcelКлиент()

// Процедура осуществляет работу с файлом Excel по выгрузке шаблона и данных.
// 
// Параметры:
//  ВыгружатьДанные 		 - Булево.
//  СтруктураНастроекКолонок - Структура.
//  ВыгружатьОформление  	 - Булево.
// 
&НаКлиенте
Процедура ВыгрузитьСохранитьШаблонВExcelКлиент(ПутьКФайлу, СтруктураНастроекКолонок, ВыгружатьОформление = Истина) Экспорт
	
	СтруктураПолей = СтруктураНастроекКолонок.СтруктураПолей;
	
	ТекстСостояния =  НСтр("ru = 'Выгрузка в Excel...'");
	Состояние(ТекстСостояния);
	
	Отказ = Ложь;
	
	ExcelФайл = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ);	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	XlEnums = бит_ОбменДаннымиЭксельКлиентСервер.InitExcelEnums(); 	
        
	ДанныеДляВыгрузки = бит_ОбменДаннымиЭксельСервер.ПодготовитьДанныеДляВыгрузкиШаблона(СтруктураНастроекКолонок);	
	// Загрузка данных для выпадающих списков.
    ExcelКнига = ExcelФайл.WorkBooks.Open(ПутьКФайлу);
	// Лист "Источники данных".
	LoadedLists = ВыгрузитьСписки(ExcelКнига, XlEnums, ДанныеДляВыгрузки);
	
	// Определим разделитель согласно региональным настройкам и подготовим форматы.
	Разделитель = ExcelФайл.International(XlEnums.XlApplicationInternational.xlDecimalSeparator);
	ФорматСумма = "# ##0" + Разделитель + "00";
	ФорматКоличество = "# ##0" + Разделитель + "000";
    
    // Скрытие листа "Источники списков". 
	// Нужно, чтобы отработало закрепление шапки "Selection = ExcelЛист.Range(".
	ExcelЛистСписков = ExcelКнига.WorkSheets(2);
	ExcelЛистСписков.Visible = 0;
    
    // Лист для данных табличной части
    ExcelЛист = ExcelКнига.WorkSheets(1);    
    ExcelЛист.Name =  НСтр("ru = 'Данные'");
    ExcelЛист.StandardWidth = 15;
    ExcelЛист.Cells.NumberFormat = "@";
    ExcelЛист.Cells.Font.Size    = 8;
    ExcelЛист.Cells.WrapText     = True;
    	              	
    ЦветШапки = 12971252; // Цвет шапки обычный.
    ЦветЧисло = 16760510; // Число.
    ЦветСостн = 11389944; // Составной тип.
    ЦветОбзтн = 15519231; // Обязательный реквизит.
    
    ЦветШрифтЧисло = 6299648; // Число.
    ЦветШрифтСостн = 801923;  // Составной тип.
    
    НомерКолонки = 1;
    НомерПервойСтрокиСДанными = 2;
    
    // Вывод шапки.
	КолКолонок = СтруктураПолей.Количество();
	SelectionШапка = ExcelЛист.Range(ExcelЛист.Cells(1, НомерКолонки), ExcelЛист.Cells(1, КолКолонок));
    Если ВыгружатьОформление Тогда    
        SelectionШапка.Font.Bold      = Истина;    // Жирный шрифт.
        SelectionШапка.Interior.Color = ЦветШапки; // Цвет фона.   
    КонецЕсли;
    
    Для каждого КлЗнчПоля Из СтруктураПолей Цикл
    	
    	ИмяПоля = КлЗнчПоля.Ключ;		
				
    	СтруктураПоля = КлЗнчПоля.Значение;
    	Синоним 	  = СтруктураПоля.Синоним;
    	
    	Cell = ExcelЛист.Cells(1, НомерКолонки);				
    	
    	PosStart = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(НомерПервойСтрокиСДанными, НомерКолонки);
		//Selection = ExcelЛист.Range(ExcelЛист.Cells(PosStart.Row, PosStart.Column),
		//							ExcelЛист.Cells(PosStart.Row, PosStart.Column).End(XlEnums.XlDirection.xlDown));
		Selection = ExcelЛист.Range(ExcelЛист.Cells(PosStart.Row, PosStart.Column),
									ExcelЛист.Cells(1048576, PosStart.Column));
    									
    	// Установка формата полей и цвета шапки
    	Если СтруктураПоля.ПримитивныйТип Тогда
    										
    		Если Найти(СтруктураПоля.СтрТип, "Дата") <> 0 Тогда
    			  				
    			// Принудительно ставим формат даты.
    		 	Selection.NumberFormat = "ДД.ММ.ГГГГ";
    			
    		ИначеЕсли Найти(СтруктураПоля.СтрТип, "Число") <> 0 Тогда
    			
    			// Принудительно ставим формат числовой.
    			ЧисловойФормат = "0" + ?(СтруктураПоля.Точность > 0, ",", "");
            	для щ = 1 по СтруктураПоля.Точность Цикл
                	ЧисловойФормат = ЧисловойФормат + "0";
    			КонецЦикла;
    			Selection.NumberFormat = ЧисловойФормат;
                Если ВыгружатьОформление Тогда  
        			// Цвет фона
                    Cell.Interior.Color = ЦветЧисло; // цвет фона
                    ExcelЛист.Columns(НомерКолонки).Font.Color = ЦветШрифтЧисло; // цвет шрифта
                КонецЕсли;
            
    		КонецЕсли;
    		
        ИначеЕсли СтруктураПоля.СоставнойТип Тогда
            
            Если ВыгружатьОформление Тогда
                // Цвет фона для полей составного типа
                Cell.Interior.Color = ЦветСостн; // цвет фона
                ExcelЛист.Columns(НомерКолонки).Font.Color = ЦветШрифтСостн; // цвет шрифта	
            КонецЕсли;
        
        КонецЕсли;
        
        Если ВыгружатьОформление Тогда
            Если СтруктураПоля.Обязательный Тогда
                ExcelЛист.Columns(НомерКолонки).Interior.Color = ЦветОбзтн; // цвет фона
            КонецЕсли;
        КонецЕсли;
        
    	Cell.Value = Синоним;
    	Cell.Name  = "CellName." + ИмяПоля;
    	    	
        // Установка списков
        ListName = бит_ПроформыКлиентСервер.FindList(LoadedLists, СтруктураПоля, ДанныеДляВыгрузки.ВидыПредставлений);		
        If NOT ListName = Undefined Then  		
        	PosStart = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(НомерПервойСтрокиСДанными, НомерКолонки);				
        	бит_ОбменДаннымиЭксельКлиентСервер.SetList(Selection, ListName, XlEnums); 			
        EndIf;
    	
    	НомерКолонки = НомерКолонки + 1;
    	
    КонецЦикла; 
    
	// Закрепим шапку.
	Selection = ExcelЛист.Range(ExcelЛист.Cells(2, 1), ExcelЛист.Cells(2, 1)).Select();
	ExcelФайл.Application.ActiveWindow.FreezePanes = True;
    		
    // Установка сетки.
    НомПервойСтроки = 1;
    КолСтрок        = 1;
	//КолКолонок      = СтруктураПолей.Количество();
    posStart = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(НомПервойСтроки, 1);
    PosEnd   = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(КолСтрок, КолКолонок);
    бит_ОбменДаннымиЭксельКлиентСервер.SetBorderLines(ExcelЛист, XlEnums, posStart, PosEnd); 

	// Возврат видимости листа "Источники списков".
	ExcelЛистСписков = ExcelКнига.WorkSheets(2);
	ExcelЛистСписков.Visible = -1;
	
    Расширение = ".xlsx";
    Если Прав(ПутьКФайлу, 5) = Расширение Тогда
        ExcelКнига.SaveAs(ПутьКФайлу);
    Иначе	
        ExcelКнига.SaveAs(ПутьКФайлу + Расширение);
    КонецЕсли;
    
    бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(ExcelФайл);
    
	ТекстСостояния =  НСтр("ru = 'Выгрузка в Excel завершена.'");
	Состояние(ТекстСостояния);
	
КонецПроцедуры // ВыгрузитьСохранитьШаблонВExcelКлиент()

// --------------------------------------------------
// Общие процедуры

// Функция определяет имя дополнительного поля для сохранения информации об уровне строки в дереве.
// 
// Возвращаемое значение::
//  Строка
//
Функция ПолучитьИмяДопПоля_Уровень() Экспорт

	Возврат "Доп_Уровень";	

КонецФункции // ПолучитьИмяДопПоля_Уровень()

#КонецОбласти

#Область РаботаСExcel

// Функция создает объект Эксель.
// 
// Возвращаемое значение:
//  Excel - ComObject.
// 
Function InitExcel(DisplayAlerts = False, Fail = False) Export
	
	Excel = Undefined;
	
	Try
		
		// Создание объекта Microsoft Excel.
		Excel = new COMОбъект("Excel.Application");
		Excel.DisplayAlerts = DisplayAlerts;
	
	Except
		
		Fail = True;
		
		ТекстСообщения = НСтр("ru = 'Не удалось создать объект Excel по причине: %1%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(ОписаниеОшибки()));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	EndTry;
	
	Return Excel;
	
EndFunction // InitExcel()

// Процедура закрывает Эксель.
// 
// Параметры:
//  ExcelApp - ComObject.
// 
Procedure QuitExcel(ExcelApp) Export
	
	If NOT ExcelApp = Undefined Then
		
		ExcelApp.Quit();
		ExcelApp = Undefined;
		
	EndIf;
	
EndProcedure  // QuitExcel() 

// Функция открывает Excel файл.
// 
// Параметры:
//  Excel	   - ComObject("Excel.Application").
//  Path - Строка, полный путь где лежит файл.
//  Fail 	   - Булево, по умолчанию Ложь.
// 
// Возвращаемое значение:
//   ExcelFile - ComObject, в случае неудачи Неопределено.
// 
Function OpenExcelFile(Excel, Path, Fail = False) Export
	
	ExcelFile = Undefined;		
	
	If NOT Excel = Undefined Then
		
		Try
			
			ExcelFile = Excel.WorkBooks.Open(Path);
			
		Except
			
			Fail = True;
			
			ТекстСообщения = НСтр("ru = 'Не удалось открыть Excel файл.'");			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		EndTry;
		
	EndIf;
	
	Return ExcelFile;
	
EndFunction // ОткрытьExcelФайл()

// Процедура закрывает книгу эксель.
// 
// Параметры:
//  ExcelWorkbook	   - ComObject.
//  SaveChanges 	   - Булево, по умолчанию Ложь.
// 
Procedure CloseExcelFile(ExcelWorkbook, SaveChanges) Export
	
	If NOT ExcelWorkbook = Undefined Then
		
		ExcelWorkbook.Close(SaveChanges);
		ExcelWorkbook = Undefined;
		
	EndIf;
	
EndProcedure

// Функция получает лист Excel.
// 
// Параметры:
//  ExcelWorkbook - ComObject.
//  SheetName     - Имя листа.
//  Fail 	      - Булево, по умолчанию Ложь.
// 
// Возвращаемое значение:
//   ComObject, в случае неудачи Неопределено.
// 
Function GetExcelSheet(ExcelWorkbook, SheetName, Fail = False) Export
	
	ExcelSheet = Undefined;
    
    ИмяSheet = ?(ТипЗнч(SheetName) = Тип("Строка"), СокрЛП(SheetName), SheetName);
	
	If NOT ExcelWorkbook = Undefined Then
		
		Try
			
			ExcelSheet = ExcelWorkbook.Sheets(ИмяSheet);
			
		Except
			
			Fail = True;
			
			ТекстСообщения = НСтр("ru = 'Не удалось открыть лист Excel ""%1"".'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяSheet);
			#Если Сервер Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			#Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			#КонецЕсли
						
		EndTry;
		
	EndIf;
	
	Return ExcelSheet;
	
EndFunction	// GetExcelSheet()

// Функция получает массив имен листов Excel.
// 
// Параметры:
//  ExcelWorkbook - ComObject.
//  Fail 	   - Булево, по умолчанию Ложь.
// 
// Возвращаемое значение:
//   SheetsNameArray - Массив.
// 
Function GetExcelSheetsList(ExcelWorkbook, Fail = False) Export
	
	SheetsNameArray = new Array;
	
	If NOT ExcelWorkbook = Undefined Then
		
		Try
			
			For each sheet in ExcelWorkbook.Sheets DO
				
				SheetsNameArray.Add(sheet.Name);
				
			EndDo;
			
		Except
			
			Fail = True;
			
			ТекстСообщения = НСтр("ru = 'Не удалось получить список листов Excel по причине: %1%'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(ОписаниеОшибки()));
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		EndTry;
		
	EndIf;
	
	Return SheetsNameArray;
	
EndFunction	

// Функция инициализирует некоторые перечисления, необходимые для работы с Эксель.
// 
// Возвращаемое значение:
//  Insert - Структура.
// 
Function InitExcelEnums() Export
	
	// Общие константы
	xlConsts = new Structure;
	xlConsts.Insert("xlCenter" ,-4108);
	xlConsts.Insert("xlNone"   ,-4142);
	xlConsts.Insert("xlContext",-5002);
	xlConsts.Insert("xlGeneral",1);
	
	// Направления
	XlDirection = new Structure;
	XlDirection.Insert("xlDown",-4121);
	XlDirection.Insert("xlToLeft",-4159);
	XlDirection.Insert("xlToRight",-4161);
	XlDirection.Insert("xlUp",-4162);
	
	// Виды границ
	XlBordersIndex = new Structure;
	XlBordersIndex.Insert("xlDiagonalDown",5);
	XlBordersIndex.Insert("xlDiagonalUp",6);
	XlBordersIndex.Insert("xlInsideHorizontal",11);
	XlBordersIndex.Insert("xlInsideVertical",12);
	
	// Данные значения указаны в MSDN, однако при установке из 1С устанавливаются не те границы.
	// Нормальной работы удалось добится со значениями, которые приведены ниже.
	
	// XlBordersIndex.Insert("xlEdgeBottom",7);
	// XlBordersIndex.Insert("xlEdgeLeft",8);
	// XlBordersIndex.Insert("xlEdgeRight",9);
	// XlBordersIndex.Insert("xlEdgeTop",10);
	
	XlBordersIndex.Insert("xlEdgeLeft",1);		
	XlBordersIndex.Insert("xlEdgeRight",2);		
	XlBordersIndex.Insert("xlEdgeTop",3);		
	XlBordersIndex.Insert("xlEdgeBottom",4);			
	
	// Стили линий
	XlLineStyle = new Structure;
	XlLineStyle.Insert("xlContinuous",1);
	
	// Толщина линий
	XlBorderWeight = new Structure;
	XlBorderWeight.Insert("xlHairline",1);
	XlBorderWeight.Insert("xlMedium",-4138);
	XlBorderWeight.Insert("xlThick",4);
	XlBorderWeight.Insert("xlThin",2);
	
	// Перечисления, используемые при установки проверки данных.
	
	XlDVAlertStyle = new Structure;
    XlDVAlertStyle.Insert("xlValidAlertStop",1);	
    XlDVAlertStyle.Insert("xlValidAlertWarning",2);	
    XlDVAlertStyle.Insert("xlValidAlertInformation",3);	
	
	XlDVType = new Structure;
	XlDVType.Insert("xlValidateCustom",7);
	XlDVType.Insert("xlValidateDate",4);
	XlDVType.Insert("xlValidateDecimal",2);
	XlDVType.Insert("xlValidateInputOnly",0);
	XlDVType.Insert("xlValidateList",3);
	XlDVType.Insert("xlValidateTextLength",6);
	XlDVType.Insert("xlValidateTime",5);
	XlDVType.Insert("xlValidateWholeNumber",1);
	
    XlFormatConditionOperator = new Structure;	
	XlFormatConditionOperator.Insert("xlBetween",1);
	XlFormatConditionOperator.Insert("xlEqual",3);
	XlFormatConditionOperator.Insert("xlGreater",5);
	XlFormatConditionOperator.Insert("xlGreaterEqual",7);
	XlFormatConditionOperator.Insert("xlLess",6);
	XlFormatConditionOperator.Insert("xlLessEqual",8);
	XlFormatConditionOperator.Insert("xlNotBetween",2);
	XlFormatConditionOperator.Insert("xlNotEqual",4);
	
	// Интернациональные настройки
	XlApplicationInternational = new Structure;
	XlApplicationInternational.Insert("xlDecimalSeparator",3);
	
	// Коллекция перечислений
	XlEnums = new Structure;
	XlEnums.Insert("xlConsts",xlConsts);
	XlEnums.Insert("XlBordersIndex",XlBordersIndex);
	XlEnums.Insert("XlLineStyle",XlLineStyle);
	XlEnums.Insert("XlBorderWeight",XlBorderWeight);
	XlEnums.Insert("XlDVAlertStyle",XlDVAlertStyle);
	XlEnums.Insert("XlDVType",XlDVType);
	XlEnums.Insert("XlFormatConditionOperator",XlFormatConditionOperator);
	XlEnums.Insert("XlDirection",XlDirection);
    XlEnums.Insert("XlApplicationInternational",XlApplicationInternational);	
	
	Return XlEnums;
	
EndFunction // InitExcelEnums()

// Функция инициализирует структуру, описывающую положение ячейки.
// 
// Возвращаемое значение:
//  StructPos - Структура.
// 
Function CellPosition(Row, Column) Export
	
	StructPos = new Structure;
	StructPos.Insert("Row",Row);
	StructPos.Insert("Column",Column);
	
	return StructPos;
	
EndFunction // CellPosition

// Процедура устанавливает список выбора для области.
// 
// Параметры:
//  Selection - ComObject
//  ListName - Строка
// 
Procedure SetList(Selection, ListName, XlEnums) Export
	
	Selection.Validation.Add(XlEnums.XlDVType.xlValidateList
								,XlEnums.XlDVAlertStyle.xlValidAlertStop
								,XlEnums.XlFormatConditionOperator.xlBetween
								,"="+ListName);
	
EndProcedure	

// Процедура устанавливает границы ячеек для указанной области. 
// 
// Параметры:
//  Sheet       - ComObject
//  XlEnums    - Структура
//  PositionStart - Структура
//  PositionEnd   - Структура
// 
Procedure SetBorderLines(Sheet, XlEnums, PositionStart, PositionEnd) Export
	
	Selection = Sheet.Range(Sheet.Cells(PositionStart.Row, PositionStart.Column),Sheet.Cells(PositionEnd.Row, PositionEnd.Column));
	
	XlBordersIndex = XlEnums.XlBordersIndex;
	XlLineStyle    = XlEnums.XlLineStyle;
	XlBorderWeight = XlEnums.XlBorderWeight;
	
	For each kvp in XlBordersIndex Do
		
		Border = Selection.Borders(kvp.value);
		
		If Find(kvp.key,"Edge") > 0 Then
			
			Border.LineStyle = XlLineStyle.xlContinuous;
			Border.Weight = XlBorderWeight.xlThin;
			
		EndIf;	
		
	EndDo;	
	
EndProcedure // SetBorderLines 	

// Процедура группирует строки листа Excel.
// 
// Параметры:
//  Excel 			  - ComObject("Excel.Application").
//  GroupBegin - Число, номер строки начала группировки.
//  GroupEnd  - Число, номер строки окончания группировки.
// 
Procedure GroupRows(Excel, GroupBegin, GroupEnd) Export
	
	Try
		Excel.Rows("" + GroupBegin + ":" + GroupEnd).Select();
		Excel.Selection.Rows.Group();
	Except
	EndTry;
	
EndProcedure // GroupRows()

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыПодсистемыБит_импортизexcel

// Функция получает соответствие представлений видов объектов.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СоотвПредстОбъектов - Массив.
// 
Функция ПолучитьСоответствиеПредставленийВидовОбъектов() Экспорт
	
	// Формируем соответствие представлений для видов объектов.
	СоотвПредстОбъектов = Новый Соответствие;
	СоотвПредстОбъектов.Вставить(ВРег("Справочник")     , "справочника");
	СоотвПредстОбъектов.Вставить(ВРег("Документ")       , "документа");
	СоотвПредстОбъектов.Вставить(ВРег("РегистрСведений"), "регистра сведений");
	
	Возврат СоотвПредстОбъектов;
	
КонецФункции // ПолучитьСоответствиеПредставленийВидовОбъектов()

// Функция получает массив неразрешимых символов в именах.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  МассивНеРазрешимыхСимволов - Массив.
// 
Функция ПолучитьМассивНеРазрешимыхСимволов() Экспорт
	
	// Формируем массив неразрешимых символов.
	МассивНеРазрешимыхСимволов = Новый Массив;
	МассивНеРазрешимыхСимволов.Добавить(",");
	МассивНеРазрешимыхСимволов.Добавить(".");
	МассивНеРазрешимыхСимволов.Добавить("-");
	МассивНеРазрешимыхСимволов.Добавить(":");
	МассивНеРазрешимыхСимволов.Добавить(" ");
	МассивНеРазрешимыхСимволов.Добавить("\");
	МассивНеРазрешимыхСимволов.Добавить("/");
	
	Возврат МассивНеРазрешимыхСимволов;
	
КонецФункции // ПолучитьМассивНеРазрешимыхСимволов()

// Процедура чтения данных из EXCEL файла через COMSafeArray,
// потерпели не удачу - построчно.
// 
// Параметры:
//  ExcelЛист - ComObject.
//  Данные 	  - Структура, Неопределено - Неопределено, если чтение выполняется на клиенте.
// 
// Возвращаемое значение:
//  ТаблицаДанных - ТаблицаЗначений.
// 
Функция ПолучитьТаблицуДанных(ExcelЛист, Данные, НомерНачальнойКолонки, НомерНачальнойСтроки, 
							  МассивНеРазрешимыхСимволов, БыстроеСчитываниеДанных, НомерКонечнойСтроки) Экспорт



	#Если Сервер Тогда
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("НомерСтрокиВФайле", Новый ОписаниеТипов("Число"));
		ТаблицаДанных.Колонки.Добавить("СтрокаОбработана" , Новый ОписаниеТипов("Булево"));
		// Добавим служебные колонки.
		ТаблицаДанных.Колонки.Добавить("Загружено",      Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));
    	ТаблицаДанных.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()));
	#Иначе
		ТаблицаДанных = Новый Массив;
		// Для клиента добавление обязательных колонок происходит в процедуре ЗагрузитьДанныеИзExcelВТаблицыДанных.
	#КонецЕсли
	
	// Загрузим данные.
	СтруктураДоп = ЗагрузитьДанныеИзExcelВТаблицыДанных(ExcelЛист, ТаблицаДанных, НомерНачальнойКолонки, НомерНачальнойСтроки, 
										 МассивНеРазрешимыхСимволов, БыстроеСчитываниеДанных, НомерКонечнойСтроки);
	
										 
	СтруктураДоп.Вставить("ТаблицаДанных", ТаблицаДанных);
	
	Возврат СтруктураДоп;
	
КонецФункции // ПолучитьТаблицуДанных()

// функция добавляет колонку в таблицу данных.
// 
// Параметры
//  ТаблицаДанных - ТаблицаЗначений, в которую необходимо добавить колонку.
//  ИмяКолонки    - Строка.
// 
//  МассивНеРазрешимыхСимволов - Массив.
// 
// Возвращаемое значение:
//  КолонкаДобавлена - Булево.
// 
Функция ДобавитьКолонкуВТаблицуДанных(ТаблицаДанных, ИмяКолонки, МассивНеРазрешимыхСимволов = Неопределено) Экспорт
	
	Если МассивНеРазрешимыхСимволов = Неопределено Тогда
		МассивНеРазрешимыхСимволов = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьМассивНеРазрешимыхСимволов();
	КонецЕсли;
	
    КолонкаДобавлена = Ложь;
	
	// Удалим неразрешимые символы из имени колонки.
	УдалитьИзСтрокиМассивСимволов(ИмяКолонки, МассивНеРазрешимыхСимволов);
	
    ИмяКолонки = ВРег(ИмяКолонки);
    
    // Если имя колонки не заполнено, тогда
    Если НЕ ЗначениеЗаполнено(ИмяКолонки)  Тогда
        Возврат КолонкаДобавлена;
    КонецЕсли;
    
    Попытка
		
		#Если Сервер Тогда
			Если ТаблицаДанных.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				ТаблицаДанных.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));
			КонецЕсли;
		#Иначе
			Если ТаблицаДанных.Количество() = 0 Тогда
				СтрПроверка = Новый Структура(ИмяКолонки);
			Иначе	
				СтруктураСтроки = ТаблицаДанных[0];
				ЕстьКолонка = СтруктураСтроки.Свойство(ИмяКолонки);
				Если ЕстьКолонка Тогда
					ТекстСообщения = НСтр("ru='Не удалось добавить колонку %1%. Дублирование имени колонки! Загрузка может произойти некорректно!'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,ИмяКолонки);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
		#КонецЕсли
		
    Исключение
		ТекстСообщения = НСтр("ru='Не удалось добавить колонку %1%'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,ИмяКолонки);
		
		#Если Сервер Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		#КонецЕсли
        Возврат КолонкаДобавлена;
    КонецПопытки;
    
    КолонкаДобавлена = Истина;
    
    Возврат КолонкаДобавлена;
    
КонецФункции // ДобавитьКолонкуВТаблицуДанных()

// Процедура удаляет из строки массив указанных символов.
// 
// Параметры:
//  ИсходнаяСтрока - Строка.
//  МассивСимволов - Массив.
// 
Процедура УдалитьИзСтрокиМассивСимволов(ИсходнаяСтрока, МассивСимволов) Экспорт
	
	// Удалим неразрешимые символы.
	Для Каждого ТекСимвол Из МассивСимволов Цикл
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, ТекСимвол, "");
	КонецЦикла;
	
КонецПроцедуры // УдалитьИзСтрокиМассивСимволов()

// Процедура устанавливает ширину колонок для текущего листа Excel.
// 
// Параметры:
//  ExcelЛист 	  - ComObject.
//  ШиринаКолонок - Число.
// 
Процедура УстановитьШиринуКолонокДляЛиста(ExcelЛист, ШиринаКолонок) Экспорт
	
	// Устанавливаем ширину колонок.
	ExcelЛист.StandardWidth = ШиринаКолонок;
	
КонецПроцедуры // УстановитьШиринуКолонокДляЛиста()

// Процедура устанавливает границы для ячейки.
// 
// Параметры:
//  ExcelЯчейка - ComObject, Ячейка страницы Excel.
// 
//  Левую	- Бюлево, по умолчанию Истина;
//  Правую	- Бюлево, по умолчанию Истина;
//  Нижную	- Бюлево, по умолчанию Истина;
//  Верхную - Бюлево, по умолчанию Истина;
// 
Процедура УстановитьГраницыДляЯчейки(ExcelЯчейка, 
									 Левую   = Истина, 
									 Правую  = Истина, 
									 Нижную  = Истина, 
									 Верхную = Истина) Экспорт
	
	Если Левую Тогда
		// Устанавливаем левую границу.
		ExcelЯчейка.Borders(7).LineStyle  = 1.5;
	КонецЕсли;
	
	Если Правую Тогда
		// Устанавливаем правую границу.
		ExcelЯчейка.Borders(10).LineStyle = 1.5;
	КонецЕсли;
	
	Если Нижную Тогда
		// Устанавливаем нижнюю границу.
		ExcelЯчейка.Borders(9).LineStyle  = 1.5;
	КонецЕсли;
	
	Если Верхную Тогда
		// Устанавливаем верхнюю границу.
		ExcelЯчейка.Borders(8).LineStyle  = 1.5;
	КонецЕсли;

КонецПроцедуры // УстановитьГраницыДляЯчейки()

// Функция проверяет формулу на соответствие требованиям эксель.
// 
// Параметры:
//   СтрФормула - Строка
// 
// Возвращаемое значение:
//  флСоответствует - Булево.
// 
Функция ФормулаСоответствуетТребованиям(СтрФормула) Экспорт

	МаксДлинаФормулыЭксель = 8192;
	флСоответствует = ?(СтрДлина(СтрФормула)> МаксДлинаФормулыЭксель, Ложь, Истина);	

	Возврат флСоответствует;
	
КонецФункции // ФормулаСоответствуетТребованиям()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СохранитьНастройкиОбъектаExcel(ExcelApplication)

    СохрНастройкиExcel = Новый Структура;
    СохрНастройкиExcel.Вставить("AskToUpdateLinks",   ExcelApplication.AskToUpdateLinks);
    СохрНастройкиExcel.Вставить("DisplayAlerts",      ExcelApplication.DisplayAlerts);
    СохрНастройкиExcel.Вставить("AutomationSecurity", ExcelApplication.AutomationSecurity);	

    Возврат СохрНастройкиExcel;
    
КонецФункции // СохранитьНастройкиОбъектаExcel()

// Процедура выгружает данные дерева на форме в Excel.
// 
// Параметры:
//  ИсточникДанных - ДанныеФормыДерево.
//  СтруктураПолей - Структура.
//  ExcelЛист      - COMОбъект.
//  НомерСтроки    - Число.
//  НомерУровня    - Число (По умолчанию = 1).
// 
Процедура ВыгрузитьДанныеСтрокиВExcel(СтрДанных, СтруктураПолей, ExcelЛист, Нс, НомерУровня = 1)
              	
	Нк = 1;

	Для каждого КлЗнчПоля Из СтруктураПолей Цикл
		       		
		ИмяПоля = КлЗнчПоля.Ключ;		
		
		Если ИмяПоля = ПолучитьИмяДопПоля_Уровень() Тогда
		
			// Информация об уровне в дереве
            Cell = ExcelЛист.Cells(Нс, Нк);
		    Cell.Value = НомерУровня;
			
		Иначе			          
			
            Если СтрДанных.Свойство(ИмяПоля) Тогда
                
                // Значение их источника даннных
                ЗначениеПоля = СтрДанных[ИмяПоля];
    			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда 				 
                    // NumberFormat съедает много времени.
                    //Если Cell.NumberFormat = "@" Тогда
                    //	Cell.Value = СокрЛП(Строка(ЗначениеПоля));  			
                    //Иначе
                    //	Cell.Value = ЗначениеПоля;
                    //КонецЕсли;
                    Cell = ExcelЛист.Cells(Нс, Нк);
                    Если ТипЗнч(ЗначениеПоля) = Тип("Дата") ИЛИ ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
                        Cell.Value = ЗначениеПоля;
                    Иначе	
                        Cell.Value = СокрЛП(Строка(ЗначениеПоля));
                    КонецЕсли;
    			КонецЕсли;      	
            
            КонецЕсли;			  
			
		КонецЕсли; 				
				
		Нк = Нк + 1;
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьДанныеСтрокиВExcel()

// Процедура выгружает данные таблицы на форме в Excel.
// 
// Параметры:
//  ИсточникДанных - ДанныеФормыКоллекция.
//  СтруктураПолей - Структура.
//  ExcelЛист      - COMОбъект.
// 
Процедура ВыгрузитьПлоскиеДанныеВExcel(ИсточникДанных, СтруктураПолей, ExcelЛист)

	НомерСтроки = 2;
		
	Для каждого СтрДанных Из ИсточникДанных Цикл  	 	                            	
		
		ВыгрузитьДанныеСтрокиВExcel(СтрДанных, СтруктураПолей, ExcelЛист, НомерСтроки);
				
		НомерСтроки = НомерСтроки + 1;   
		
	КонецЦикла;	

КонецПроцедуры // ВыгрузитьПлоскиеДанныеВExcel()

// Процедура выгружает данные дерева на форме в Excel.
// 
// Параметры:
//  ИсточникДанных - ДанныеФормыДерево.
//  СтруктураПолей - Структура.
//  ExcelЛист      - COMОбъект.
//  НомерСтроки    - Число (По умолчанию = 2).
//  НомерУровня    - Число (По умолчанию = 1).
// 
Процедура ВыгрузитьДанныеДереваВExcel(ИсточникДанных, СтруктураПолей, ExcelЛист, НомерСтроки = 2, НомерУровня = 1)

	КореньДерева = ИсточникДанных.ПолучитьЭлементы();
	
	Для каждого СтрДанных Из КореньДерева Цикл  	 	                            	
		
		ВыгрузитьДанныеСтрокиВExcel(СтрДанных, СтруктураПолей, ExcelЛист, НомерСтроки, НомерУровня);
		
		НомерСтроки = НомерСтроки + 1;
		
		// Обход строк дерева по иерархии
		НомерУровня = НомерУровня + 1;
		ВыгрузитьДанныеДереваВExcel(СтрДанных, СтруктураПолей, ExcelЛист, НомерСтроки, НомерУровня);
		НомерУровня = НомерУровня - 1;

	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьДанныеДереваВExcel() 

// Процедура выполняет загрузку данных из Excel в таблицу данных.
// 
// Параметры:
//  ExcelЛист	  - ComObject.
//  ТаблицаДанных - ТаблицаЗначений.
// 
Функция ЗагрузитьДанныеИзExcelВТаблицыДанных(ExcelЛист, ТаблицаДанных, НомерНачальнойКолонки, НомерНачальнойСтроки, 
											   МассивНеРазрешимыхСимволов, БыстроеСчитываниеДанных, НомерКонечнойСтроки)
	
	// Получим количество колонок.
    КоличествоКолонок = ExcelЛист.Cells(1,1).SpecialCells(11).Column;
    
    // Получим количество колонок с учетом номера стартовой колонки.
    КоличествоКолонок = КоличествоКолонок - НомерНачальнойКолонки + 1;
	
	// Получим количество строк.
	Если НомерКонечнойСтроки = 0 Тогда
		КоличествоСтрок = ExcelЛист.Cells(1,1).SpecialCells(11).Row;
	Иначе
		КоличествоСтрок = НомерКонечнойСтроки;
	КонецЕсли;
    
    // Получим количество строк с учетом номера стартовой строки.
    КоличествоСтрок = КоличествоСтрок - НомерНачальнойСтроки;
    
    // Получаем позицию для старта чтения.
    НомерСтрокиДляСтарта  = ?(НомерНачальнойСтроки = 0, 1, НомерНачальнойСтроки);
    НомерКолонкиДляСтарта = НомерНачальнойКолонки;
    
    // Заполним номера строк в файле.
	Для НомСтр = 1 По КоличествоСтрок Цикл
		#Если Сервер Тогда
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.НомерСтрокиВФайле = НомерСтрокиДляСтарта + НомСтр;
		#Иначе
		    СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("НомерСтрокиВФайле", НомерСтрокиДляСтарта + НомСтр);
			СтруктураСтроки.Вставить("СтрокаОбработана" , Ложь);
			СтруктураСтроки.Вставить("Загружено"		, Ложь);
			СтруктураСтроки.Вставить("ОписаниеОшибки"	, Ложь);
			
			ТаблицаДанных.Добавить(СтруктураСтроки);
		#КонецЕсли
	КонецЦикла;
	
	// Если БыстроеСчитываниеДанных Тогда
	// 	
	// 	Попытка
	// 		//  Попыткаемся получить данные быстрым способом.
	// 		ПолучитьДанныеБыстрымСпособом(ExcelЛист, ТаблицаДанных, КоличествоКолонок, МассивНеРазрешимыхСимволов);
	// 	
	// 	Исключение
	// 		//  Если не удалось получить данные быстрым способом,
	// 		//  произведем получение данных перебором строк.
	// 		ПолучитьДанныеПереборомСтрок(ExcelЛист, ТаблицаДанных, НомерНачальнойКолонки, НомерНачальнойСтроки, 
	// 								 	 КоличествоКолонок, КоличествоСтрок, НомерСтрокиДляСтарта, МассивНеРазрешимыхСимволов);
	// 		
	// 	КонецПопытки;
	// 	
	// Иначе
		// Произведем получение данных перебором строк.
		СтруктураДоп = ПолучитьДанныеПереборомСтрок(ExcelЛист, ТаблицаДанных, НомерНачальнойКолонки, НомерНачальнойСтроки, 
									 КоличествоКолонок, КоличествоСтрок, НомерСтрокиДляСтарта, МассивНеРазрешимыхСимволов);
	// КонецЕсли;
	
	Возврат СтруктураДоп;
	
КонецФункции // ЗагрузитьДанныеИзExcelВТаблицыДанных()

// Процедура получает данные методом перебора строк Excel.
// 
// Параметры
//  ExcelЛист	  		  - ComObject.
//  ТаблицаДанных 		  - ТаблицаЗначений.
//  НомерНачальнойКолонки - Число.
//  НомерНачальнойСтроки  - Число.
//  КоличествоКолонок     - Число.
//  КоличествоСтрок 	  - Число.
//  НомерСтрокиДляСтарта  - Число.
// 
//  МассивНеРазрешимыхСимволов - Массив.
// 
Функция ПолучитьДанныеПереборомСтрок(ExcelЛист, ТаблицаДанных, НомерНачальнойКолонки, НомерНачальнойСтроки, 
									   КоличествоКолонок, КоличествоСтрок, НомерСтрокиДляСтарта, МассивНеРазрешимыхСимволов)
									   
	// Любая дополнительная информация считанная из Excel.
	СтруктураДоп = Новый Структура;
	
	// Информация по колонкам
	НастройкиКолонок = Новый Структура;
	
	// Перебираем колонки таблицы Excel.
	Для НомКолонки = НомерНачальнойКолонки По КоличествоКолонок + 1 Цикл
		
		НастройкаКолонки = Новый Структура;
		
		// Получаем имя колонки.
		Ячейка = ExcelЛист.Cells(НомерНачальнойСтроки, НомКолонки);
		Попытка
			ИмяЯчейки = Ячейка.Name.Name;
		Исключение
			ИмяЯчейки = "";
		КонецПопытки;
		
		Если Найти(ИмяЯчейки, "CellName.") = 0 Тогда
			// В старом формате файлов шаблонов имя колонки хранилось как значение ячейки.
			ИмяКолонки = СокрЛП(Ячейка.Value);
		Иначе
			// В новом формате файлов шаблонов в ячейках указывается синоним реквизита, и его имя помещаем в имя ячейки.
			ИмяКолонки = СтрЗаменить(ИмяЯчейки, "CellName.", "");
		КонецЕсли;
		
		ПредставлениеКолонки = ИмяКолонки;
		
		// Добавим колонку в таблицу данных.
		КолонкаДобавлена = ДобавитьКолонкуВТаблицуДанных(ТаблицаДанных, ИмяКолонки, МассивНеРазрешимыхСимволов);
		Если Не КолонкаДобавлена Тогда
			// Колонку не удалось добавить.
			Продолжить;
		КонецЕсли;
		
		// Создаем массив, для записи
		// данных текущей колонки.
		МассивДанных = Новый Массив;
		
		// Перебираем строки таблицы Excel.
		Для НомСтроки = 1 По КоличествоСтрок Цикл
			
			// Записываем текущее значение.
			МассивДанных.Добавить(СокрЛП(ExcelЛист.Cells(НомерСтрокиДляСтарта + НомСтроки, НомКолонки).Value));
			
			// ТекстСообщения = НСтр("ru='Чтение значений колонки ""%1%"": строка %2% из %3%'");
			// ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(
			// ТекстСообщения,ПредставлениеКолонки,НомСтроки,КоличествоСтрок);							 
			// #Если Сервер Тогда
			// 	бит_ОбменДанными_Excel.ВывестиСостояниеПользователю(ТекстСообщения);
			// #Иначе
			// 	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			// #КонецЕсли
			
		КонецЦикла; // Для НомСтроки = НомерСтрокиДляСтарта По КоличествоСтрок Цикл.
		
		// Если данных есть, тогда
		Если МассивДанных.Количество() <> 0 Тогда
			// Загружаем значения текущей колонки.
			#Если Сервер Тогда
				ТаблицаДанных.ЗагрузитьКолонку(МассивДанных, ИмяКолонки);
			#Иначе
				КолСтрок = Мин(ТаблицаДанных.Количество(), МассивДанных.Количество());
				Для Ном=0 по КолСтрок-1 Цикл
					ТаблицаДанных[Ном].Вставить(ИмяКолонки, МассивДанных[Ном]);
				КонецЦикла;
			#КонецЕсли
		КонецЕсли;
		
		Попытка
			ИмяСписка = ExcelЛист.Cells(НомерСтрокиДляСтарта+1, НомКолонки).Validation.Formula1;
			ИмяСписка = СтрЗаменить(ИмяСписка, "=List.", "");
		Исключение
			ИмяСписка = "";
		КонецПопытки;
		
		НастройкаКолонки.Вставить("ИмяСписка", ИмяСписка);
		
		НастройкиКолонок.Вставить(ИмяКолонки, НастройкаКолонки);
		
	КонецЦикла; // Для НомКолонки = НомерКолонкиДляСтарта По КоличествоКолонок Цикл.
	
	СтруктураДоп.Вставить("НастройкиКолонок", НастройкиКолонок);
	
	Возврат СтруктураДоп;
	
КонецФункции // ПолучитьДанныеПереборомСтрок()

#КонецОбласти
