Функция ПолучитьНастройкуЭкономическогоУчета(Показатель, Период = Неопределено,ЗначениеВСлучаеОтсутствия = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	рс_НастройкиЭкономическогоУчетаСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.рс_НастройкиЭкономическогоУчета.СрезПоследних(&Период, Показатель = &Показатель) КАК рс_НастройкиЭкономическогоУчетаСрезПоследних";
	Запрос.УстановитьПараметр("Показатель", Показатель);
	Запрос.УстановитьПараметр("Период", Период);
	ТаблицаЗапрос = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапрос.Количество() > 0 Тогда 
		Возврат ТаблицаЗапрос[0].Значение;
	Иначе
		Сообщить("Не заполнена настройка экономического учета """ + Показатель + """!");
		Возврат ЗначениеВСлучаеОтсутствия;
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "", ВидыСубконтоСчета = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

	Если ВидыСубконтоСчета = Неопределено Тогда
	     ВидыСубконтоСчета = Счет.ВидыСубконто;
	КонецЕсли; 
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
			Возврат;
		КонецЕсли;

		ВидСубк = ВидыСубконтоСчета[ИмяСубконто - 1].ВидСубконто;

	Иначе

		ВидСубк = ПланыВидовХарактеристик[Счет.Метаданные().ВидыСубконто.Имя].НайтиПоКоду(ИмяСубконто);

		Если ВидыСубконтоСчета.Найти(ВидСубк) = Неопределено Тогда
			Если Сообщать тогда
				бит_ОбщегоНазначения.СообщитьОбОшибке("Вид субконто <" + ВидСубк + "> для счета """ + Счет.Код + " (" + Счет.Наименование + ")"" не определен.", , Заголовок);
			КонецЕсли;
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубк, ЗначениеСубконто);

	ИначеЕсли Сообщать тогда
		бит_ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубк + ">",, Заголовок);

	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулях форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ТекПользователь                - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ПараметрОбъектКопирования 	   - указывает что документ создан копированием
//  ПараметрОснование 			   - ссылка на документ основание
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, МетаданныеДокумента, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, ТипОперации = "",ПараметрОбъектКопирования = неопределено, ПараметрОснование = неопределено) Экспорт

	Перем ТипЦен;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете =ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
		Иначе
			//По умолчанию все документы требуют отражения в бухгалтерском учете
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Истина
		КонецЕсли;;

	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	  И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница) 
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		ДокументОбъект.СтруктурнаяЕдиница = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
	  ДокументОбъект.Ответственный = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный", ТекПользователь);
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Склад)) Тогда
		ДокументОбъект.Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад", ТекПользователь);
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СкладОрдер) Тогда
		ДокументОбъект.СкладОрдер = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад", ТекПользователь);
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СтавкаНДС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС)) Тогда
		ДокументОбъект.СтавкаНДС = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС", ТекПользователь);
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
		ДокументОбъект.БанковскийСчет = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации) Тогда
		ДокументОбъект.СчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		ДокументОбъект.ВалютаДокумента = ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств;
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)) Тогда
	   
	   Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
			И ЗначениеЗаполнено(ДокументОбъект.Склад) 
			И ДокументОбъект.Склад.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			ПодразделениеОрганизации = ДокументОбъект.Склад.ПодразделениеОрганизации;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента)
			И ЗначениеЗаполнено(ДокументОбъект.СкладОрдер)
			И ДокументОбъект.СкладОрдер.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			ПодразделениеОрганизации = ДокументОбъект.СкладОрдер.ПодразделениеОрганизации;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
			И ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
			И ДокументОбъект.СчетОрганизации.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			ПодразделениеОрганизации = ДокументОбъект.СчетОрганизации.ПодразделениеОрганизации;
		Иначе
			ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации", ТекПользователь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ПодразделенияОрганизаций.Владелец КАК ОрганизацияВладелец
			               |ИЗ
			               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			               |ГДЕ
			               |	ПодразделенияОрганизаций.Ссылка = &Ссылка
			               |	И ПодразделенияОрганизаций.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Ссылка", ПодразделениеОрганизации);
			Запрос.УстановитьПараметр("Владелец", ДокументОбъект.Организация);
			Если НЕ Запрос.Выполнить().Пустой() Тогда
				ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("МестонахождениеОС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.МестонахождениеОС)) Тогда
	   
	   Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
			И ЗначениеЗаполнено(ДокументОбъект.Склад) 
			И ДокументОбъект.Склад.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			МестонахождениеОС = ДокументОбъект.Склад.ПодразделениеОрганизации;
		Иначе
			МестонахождениеОС = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации", ТекПользователь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МестонахождениеОС) Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ПодразделенияОрганизаций.Владелец КАК ОрганизацияВладелец
			               |ИЗ
			               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			               |ГДЕ
			               |	ПодразделенияОрганизаций.Ссылка = &Ссылка
			               |	И ПодразделенияОрганизаций.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Ссылка", МестонахождениеОС);
			Запрос.УстановитьПараметр("Владелец", ДокументОбъект.Организация);
			Если НЕ Запрос.Выполнить().Пустой() Тогда
				ДокументОбъект.МестонахождениеОС = МестонахождениеОС;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Местонахождение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Местонахождение)) Тогда
	   
	   Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
			И ЗначениеЗаполнено(ДокументОбъект.Склад) 
			И ДокументОбъект.Склад.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			Местонахождение = ДокументОбъект.Склад.ПодразделениеОрганизации;
		Иначе
			Местонахождение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации", ТекПользователь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Местонахождение) Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ПодразделенияОрганизаций.Владелец КАК ОрганизацияВладелец
			               |ИЗ
			               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			               |ГДЕ
			               |	ПодразделенияОрганизаций.Ссылка = &Ссылка
			               |	И ПодразделенияОрганизаций.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Ссылка", Местонахождение);
			Запрос.УстановитьПараметр("Владелец", ДокументОбъект.Организация);
			Если НЕ Запрос.Выполнить().Пустой() Тогда
				ДокументОбъект.Местонахождение = Местонахождение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)) Тогда
	    СтруктураКурсаДокумента      = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;

	// Если тип цен оказался не заполненным, то берем его из установок пользователя
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
		И (НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен)) Тогда
	   
		Если ТипОперации = "Продажа" Тогда
			ДокументОбъект.ТипЦен = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойТипЦенПродажи", ТекПользователь);
		ИначеЕсли ТипОперации = "Покупка" Тогда
			ДокументОбъект.ТипЦен = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойТипЦенПокупки", ТекПользователь);
		КонецЕсли;
		
	КонецЕсли;

	Если (ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента))
	   И (ЗначениеЗаполнено(ДокументОбъект.ТипЦен)) Тогда

		// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
		// то флаги включения налогов надо брать из базовой цены
		ТипЦен = ДокументОбъект.ТипЦен;

		// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
		   И (Не ДокументОбъект.УчитыватьНДС) Тогда

			ДокументОбъект.УчитыватьНДС     = Истина;
			ДокументОбъект.СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;

		КонецЕсли; 
		
	Иначе

		// Заполним значениями по умолчанию (нет, либо не заполнен ТипЦен).
		// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
		   И (Не ДокументОбъект.УчитыватьНДС) Тогда

			ДокументОбъект.УчитыватьНДС     = Истина;
			ДокументОбъект.СуммаВключаетНДС = Истина;
		КонецЕсли; 
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ЗанимаемыхСтавок", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ЗанимаемыхСтавок)) Тогда
		ДокументОбъект.ЗанимаемыхСтавок = 1;
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДатаС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаС)) Тогда
		ДокументОбъект.ДатаС = ДокументОбъект.Дата;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("НДСВключенВСтоимость", МетаданныеДокумента) И
		ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		Если УчетнаяПолитика.ПрименяетсяУСН(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
			ДокументОбъект.НДСВключенВСтоимость = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПериодРегистрации)) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СпособЗачетаАвансов", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СпособЗачетаАвансов)) Тогда
		ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьШапкуДокумента()

Функция ПолучитьСтатьюОборотовПоСчетуМСФО(СчетМСФО) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_СоответствияАналитик.ПраваяАналитика_1 КАК СтатьяОборотов
	|ИЗ
	|	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|ГДЕ
	|	бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СчетМСФО_СтатьяОборотов)
	|	И бит_СоответствияАналитик.ЛеваяАналитика_1 = &Счет";
	Запрос.УстановитьПараметр("Счет", СчетМСФО);
	
	ТаблицаЗапрос = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапрос.Количество() > 0 Тогда
		Возврат ТаблицаЗапрос[0].СтатьяОборотов;
	Иначе
		Если ЗначениеЗаполнено(СчетМСФО) Тогда
			Сообщить("Для счета МСФО <" + СчетМСФО + "> не установлено соответствие со статьей оборотов!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСчетМСФОПоСтатьеОборотов(СтатьяОборотов) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Счет
	|ИЗ
	|	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|ГДЕ
	|	бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СчетМСФО_СтатьяОборотов)
	|	И бит_СоответствияАналитик.ПраваяАналитика_1 = &СтатьяОборотов";
	Запрос.УстановитьПараметр("СтатьяОборотов", СтатьяОборотов);
	
	ТаблицаЗапрос = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапрос.Количество() > 0 Тогда
		Возврат ТаблицаЗапрос[0].Счет;
	Иначе
		Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
			Сообщить("Для статьи оборотов <" + СтатьяОборотов + "> не установлено соответствие со счетом МСФО!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМесяцНачисленияПоДате(Дата) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	рс_МесяцыНачисления.Ссылка
	|ИЗ
	|	Справочник.рс_МесяцыНачисления КАК рс_МесяцыНачисления
	|ГДЕ
	|	рс_МесяцыНачисления.Дата = &Дата";
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(Дата));
	
	ТаблицаЗапрос = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапрос.Количество() > 0 Тогда
		Возврат ТаблицаЗапрос[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура рс_ПриЗаписиОбработкаID(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-08-09 (#2836)
	Если ОК_ПодпискиНаСобытия.ЭтоИзменениеРеквизитовОбъектаБезПроведения(Источник) Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-08-09 (#2836)
	
	Записывать = Ложь;
	
	НаборДвижений = Источник.Движения.рс_ДокументыПоID;
	
	НаборДвижений.Прочитать();
	
	Если НаборДвижений.Количество() > 0 Тогда
		НаборДвижений.Очистить();
		Записывать = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") И Источник.ОК_ID_ВТЧ Тогда
		
		Для Каждого СтрокаТЧ Из Источник.Услуги Цикл
			
			ID = ОбработатьID(СтрокаТЧ.ОК_ID_Разноска);
			Если ID <> Неопределено Тогда
				Движение = НаборДвижений.Добавить();
				
				Движение.Документ 	= Источник.Ссылка;
				Движение.Строка		= СтрокаТЧ.НомерСтроки;
				Движение.ID 		= ID;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ID = ОбработатьID(Источник.ОК_ID_Разноска);
		Если ID <> Неопределено Тогда
			Движение = НаборДвижений.Добавить();
			
			Движение.Документ 	= Источник.Ссылка;
			Движение.ID 		= ID;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Записывать ИЛИ НаборДвижений.Количество() > 0 Тогда
		// Rarus-spb byse {
		НаборДвижений.Записывать = Истина;
		Для Каждого СтрокаТЧ Из НаборДвижений Цикл 
			СтрокаТч.Регистратор = Источник.Ссылка;
		КонецЦикла;	
		НаборДвижений.Записать(Истина);
		//НаборДвижений.Записать();
		// Rarus-spb byse }
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьID(Знач ИсходныйID) Экспорт
	
	ИсходныйID = СокрЛП(ИсходныйID);
	
	Если ПустаяСтрока(ИсходныйID) ИЛИ ИсходныйID = "-" ИЛИ ИсходныйID = "0" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрДлина(ИсходныйID) = 8 Тогда
		ID = Лев(ИсходныйID, 4) + "-" + Прав(ИсходныйID, 4);
	Иначе
		ID = ИсходныйID;
	КонецЕсли;
	
	Возврат ID;
	
КонецФункции

Функция рс_ТекстПоСтруктуреПодчиненности (Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТЧ.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтруктураПодчиненности.Ссылка
	|	ИЗ
	|		КритерийОтбора.СвязанныеДокументы(&Документ) КАК СтруктураПодчиненности) КАК ТЧ
	|ГДЕ
	|	ТЧ.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧ.Ссылка.МоментВремени";
	Запрос.УстановитьПараметр("Документ",Ссылка);
	РЗ = Запрос.Выполнить();
	
	Текст = "";
	
	Если РЗ.Пустой() Тогда
		Возврат Текст;
	КонецЕсли;	
	
	Выборка = РЗ.Выбрать();
	Пока Выборка.Следующий() Цикл
		Текст = Текст + ?(ПустаяСтрока(Текст),"",",
		|") + Выборка.Ссылка;
	КонецЦикла;	
	
	Текст = "
	|На основании данного документа уже введены документы:
	|" + Текст;
	
	Возврат Текст;
КонецФункции	

Процедура рс_ПриЗаписиСообщениеПоСтруктуреПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Ссылка = Источник.Ссылка;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Текст = рс_ТекстПоСтруктуреПодчиненности(Ссылка);
	
	Заголовок = "";
	
	Если Не Ссылка.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Заголовок = "Проведение";
	ИначеЕсли Ссылка.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Заголовок = "Перепроведение";
	ИначеЕсли Ссылка.Проведен И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Заголовок = "Отмена проведения";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Или  РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Заголовок = "Запись";
	КонецЕсли;	
	
	Заголовок = Заголовок + " документа " + Ссылка;
	
	Если Текст <> "" Тогда
		Сообщить(Заголовок + Текст,СтатусСообщения.Информация);
	КонецЕсли;	
КонецПроцедуры

Процедура рс_ОбработкаПроведенияОбработкаIDОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	рс_ПриЗаписиОбработкаID(Источник,Отказ);
КонецПроцедуры
