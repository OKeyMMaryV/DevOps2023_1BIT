////////////////////////////////////////////////////////////////////////////////
// Модуль содержит реализацию методов работы с данными в различных валютах:
// извлечение курсов валют из базы и различные валютные пересчеты.
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс
	
// Возвращает курс валюты на дату
// 
// Параметры:
//   Валюта    (СправочникСсылка.Валюты) Валюта, для которой получается курс
//   ДатаКурса (Дата) Дата, на которую получается курс
//   ИмяРегистра   - Строка (По умолчанию = "КурсыВалют").
// 
// Возвращаемое значение: 
//   (Структура) 
//       |- Валюта    (СправочникСсылка.Валюты).
//       |- Курс      (Число).
//       |- Кратность (Число).
//       |- ДатаКурса (Дата).
// 
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса, ИмяРегистра = "КурсыВалют", Сценарий = Неопределено) Экспорт
	
	СтруктураОтбора = Новый Структура("Валюта", Валюта);

	Если ИмяРегистра = "бит_КурсыСценариевПланирования" И ЗначениеЗаполнено(Сценарий) Тогда
		СтруктураОтбора.Вставить("Сценарий", Сценарий);
	КонецЕсли;
	
	Результат = РегистрыСведений[ИмяРегистра].ПолучитьПоследнее(ДатаКурса, СтруктураОтбора);
	
	Результат.Вставить("Валюта",    Валюта);
	Результат.Вставить("ДатаКурса", ДатаКурса);
	
	Возврат Результат;
	
КонецФункции // ПолучитьКурсВалюты()

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
// 
// Параметры:
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета.
// 
// Возвращаемое значение:
//  Число - курс документа.
// 
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	Результат = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		
	Возврат Результат;
	
КонецФункции

// Определяет кратность документа
// , которая равна либо кратности документа (если в документе она существует)
// , либо кратности взаиморасчетов
// , либо 1.
// 
// Параметры:
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета.
// 
// Возвращаемое значение:
//  Число - кратность валюты в документе.
// 
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	Результат = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		
	Возврат Результат;
	
КонецФункции

// Функция получает средний курс валюты по массиву дат.
// 
// Параметры:
//  Валюта  	  - СправочникСсылка.Валюты
//  НачалоПериода - Дата
//  КонецПериода  - Дата
//  МассивДат     - Массив.
//  
// Возвращаемое значение:
//   Структура (Курс, Кратность).
// 
Функция ПолучитьСреднийКурсВалюты(Валюта, НачалоПериода, КонецПериода, МассивДат = Неопределено) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Валюта"		 , Валюта);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , КонецПериода);
	
	УсловиеПериода = ?(МассивДат = Неопределено
						, "КурсыВалют.Период МЕЖДУ &НачалоПериода И &КонецПериода"
						, "КурсВалют.Период В(&МассивДат)");
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсыВалют.Период,
	|	КурсыВалют.Курс КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность,
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	" + УсловиеПериода + "
	|	И КурсыВалют.Валюта = &Валюта
	|	И КурсыВалют.Курс <> 0
	|	И КурсыВалют.Кратность <> 0
	|ИТОГИ
	|	СУММА(Курс),
	|	СУММА(Кратность),
	|	СУММА(Количество)
	|ПО
	|	ОБЩИЕ
	|";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, НачалоПериода);
		
	Иначе
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Выборка.Следующий();
		
		СтруктураКурса = Новый Структура;		
		СтруктураКурса.Вставить("Курс"	   , Выборка.Курс / Выборка.Количество);
		СтруктураКурса.Вставить("Кратность", Выборка.Кратность / Выборка.Количество);
	
	КонецЕсли;
	
	СтруктураКурса.Вставить("Валюта"   , Валюта);
	
	Возврат СтруктураКурса;
	
КонецФункции // ПолучитьСреднийКурсВалюты()

// Функция получает средний курс валюты по массиву дат.
// 
// Параметры:
//  ИмяРегистра   - Строка (По умолчанию = "КурсыВалют")
//  МассивВалют   - Массив
//  НачалоПериода - Дата
//  КонецПериода  - Дата
//  МассивДат     - Массив.
//  
// Возвращаемое значение:
//   Соответствие (Валюта, Структура курса(курс, кратность)).
// 
Функция ПолучитьСоответствиеСреднихКурсовВалют(ИмяРегистра = "КурсыВалют", МассивВалют, НачалоПериода, КонецПериода, МассивДат = Неопределено) Экспорт
	
	СоответствиеРезультат = Новый Соответствие;
	
	Если ТипЗнч(НачалоПериода) = Тип("Граница") Тогда
		НачалоПериода = НачалоПериода.Значение;	
	КонецЕсли;
	Если ТипЗнч(КонецПериода) = Тип("Граница") Тогда
		КонецПериода = КонецПериода.Значение;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВалют"  , МассивВалют);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , КонецПериода);
	
	УсловиеПериода = ?(МассивДат = Неопределено
						, "КурсыВалют.Период МЕЖДУ &НачалоПериода И &КонецПериода"
						, "КурсВалют.Период В(&МассивДат)");
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Период,
	|	КурсыВалют.Курс КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность,
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК КурсыВалют
	|ГДЕ
	|	" + УсловиеПериода + "
	|	И КурсыВалют.Валюта В(&МассивВалют)
	|	И КурсыВалют.Курс <> 0
	|	И КурсыВалют.Кратность <> 0
	|ИТОГИ
	|	СУММА(Курс),
	|	СУММА(Кратность),
	|	СУММА(Количество)
	|ПО
	|	Валюта
	|";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Для каждого ТекВалюта Из МассивВалют Цикл
			СоответствиеРезультат.Вставить(ТекВалюта, ПолучитьКурсВалюты(ТекВалюта, НачалоПериода, ИмяРегистра));
		КонецЦикла;
		
	Иначе
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Выборка.Следующий() Цикл	
			СтруктураКурса = Новый Структура;
			СтруктураКурса.Вставить("Валюта"   , Выборка.Валюта);
			СтруктураКурса.Вставить("Курс"	   , Выборка.Курс / Выборка.Количество);
			СтруктураКурса.Вставить("Кратность", Выборка.Кратность / Выборка.Количество);
			СоответствиеРезультат.Вставить(Выборка.Валюта, СтруктураКурса);
		КонецЦикла;  		
		
		Для каждого ТекВалюта Из МассивВалют Цикл
			Если СоответствиеРезультат.Получить(ТекВалюта) = Неопределено Тогда
				СоответствиеРезультат.Вставить(ТекВалюта, ПолучитьКурсВалюты(ТекВалюта, НачалоПериода, ИмяРегистра));			
			КонецЕсли;                                                                               			
		КонецЦикла;
	
	КонецЕсли;  	
	
	Возврат СоответствиеРезультат;
	
КонецФункции // ПолучитьСоответствиеСреднихКурсовВалют()

// Функция получает средний курс валюты по массиву дат.
// 
// Параметры:
//  ИмяРегистра - Строка
//  МассивВалют - Массив
//  ДатаКурса   - Дата
//  
// Возвращаемое значение:
//   Соответствие (Валюта, Структура курса(курс, кратность)).
// 
Функция ПолучитьСоответствиеКурсовВалютНаДату(ИмяРегистра, МассивВалют, Знач ДатаКурса) Экспорт
	
	Если ТипЗнч(ДатаКурса) = Тип("Граница") Тогда
		ДатаКурса = ДатаКурса.Значение;	
	КонецЕсли;
	
	СоответствиеРезультат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВалют", МассивВалют);
	Запрос.УстановитьПараметр("ДатаКурса"  , ДатаКурса);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Курс      КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + ".СрезПоследних(&ДатаКурса) КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Валюта В(&МассивВалют)
	|	И КурсыВалют.Курс <> 0
	|	И КурсыВалют.Кратность <> 0
	|";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Для каждого ТекВалюта Из МассивВалют Цикл
			ТекстСообщения = Нстр("ru = 'Обнаружен нулевой курс для валюты %1%'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекВалюта);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);				 
			СоответствиеРезультат.Вставить(ТекВалюта, Неопределено);
		КонецЦикла;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл	
			СтруктураКурса = Новый Структура;
			СтруктураКурса.Вставить("Валюта"   , Выборка.Валюта);
			СтруктураКурса.Вставить("Курс"	   , Выборка.Курс);
			СтруктураКурса.Вставить("Кратность", Выборка.Кратность);
			СоответствиеРезультат.Вставить(Выборка.Валюта, СтруктураКурса);
		КонецЦикла;  		
		
		Для каждого ТекВалюта Из МассивВалют Цикл
			Если СоответствиеРезультат.Получить(ТекВалюта) = Неопределено Тогда
				ТекстСообщения = Нстр("ru = 'Обнаружен нулевой курс для валюты %1%'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекВалюта);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);				 
				СоответствиеРезультат.Вставить(ТекВалюта, Неопределено);			
			КонецЕсли;                                                                               			
		КонецЦикла;
	
	КонецЕсли;  	
	
	Возврат СоответствиеРезультат;
	
КонецФункции // ПолучитьСоответствиеСреднихКурсовВалют()

// Функция получает валюты необходимые при пересчетах.
// 
// Параметры:
//  ДокументОбъект  - ДокументОбъект
//  ВидыКурсов      - Структура.
// 
// Возвращаемое значение:
//   СтруктураВалют   - Структура.
// 
Функция ПолучитьСтруктуруВалют(ДокументОбъект, ВидыКурсов = Неопределено) Экспорт

	СтруктураВалют = Новый Структура;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Курс документа
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Документ") Тогда
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит("ВалютаДокумента",МетаданныеДокумента) Тогда
			СтруктураВалют.Вставить("Документ", ДокументОбъект.ВалютаДокумента);   			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Курс упр. учета
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Упр") Тогда	
		
		СтруктураВалют.Вставить("Упр", Константы.бит_ВалютаУправленческогоУчета.Получить());
		
	КонецЕсли;
	
	// Курс сценария
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Сценарий") Тогда
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит("Сценарий", МетаданныеДокумента) 
			И ЗначениеЗаполнено(ДокументОбъект.Сценарий) Тогда 
			
			СтруктураВалют.Вставить("Сценарий", ДокументОбъект.Сценарий.Валюта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Валюта регламентированного учета
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Регл") Тогда
		
		СтруктураВалют.Вставить("Регл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	КонецЕсли;
	
	// Валюта МСФО
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("МУ") Тогда
 
 		Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаданныеДокумента) Тогда
	 
			СтруктураВалют.Вставить("МУ", бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(ДокументОбъект.Организация, , Ложь));
	 
	 	КонецЕсли; 
 
 	КонецЕсли; 

		
    Возврат СтруктураВалют;
	
КонецФункции // ПолучитьСтруктуруВалют()

// Функция получает курсы валют необходимые при пересчетах для формирования движений 
// по регистру бит_ОборотыПоБюджетам.
// 
// Параметры:
//  ДокументОбъект  - ДокументОбъект
//  ДатаКурсов		- Дата
//  ВидыКурсов		- Структура.
// 
// Возвращаемое значение:
//   СтруктураКурсыВалют   - Структура
//   ДатаКурсов - Дата 
//   ВидыКурсов - Структура.
// 
Функция ПолучитьСтруктуруКурсовВалют(ДокументОбъект, ДатаКурсов, ВидыКурсов = Неопределено) Экспорт

	СтруктураКурсыВалют = Новый Структура;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Курс документа
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Документ") Тогда
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит("ВалютаДокумента",МетаданныеДокумента) 
			И бит_РаботаСМетаданными.ЕстьРеквизит("КурсДокумента",МетаданныеДокумента)
			И бит_РаботаСМетаданными.ЕстьРеквизит("КратностьДокумента",МетаданныеДокумента) Тогда
			
			СтрКурса = Новый Структура;
			СтрКурса.Вставить("Курс"     ,ДокументОбъект.КурсДокумента);
			СтрКурса.Вставить("Кратность",ДокументОбъект.КратностьДокумента);
			СтрКурса.Вставить("Валюта"   ,ДокументОбъект.ВалютаДокумента);
			СтруктураКурсыВалют.Вставить("Документ",СтрКурса);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Курс упр. учета
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Упр") Тогда	
		
		Валюта = Константы.бит_ВалютаУправленческогоУчета.Получить();
		СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта,ДатаКурсов);
		СтрКурса.Вставить("Валюта",Валюта);
		СтруктураКурсыВалют.Вставить("Упр",СтрКурса);
		
	КонецЕсли;
	
	// Курс сценария
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Сценарий") Тогда
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит("Сценарий",МетаданныеДокумента) Тогда 
			
			Валюта = ДокументОбъект.Сценарий.Валюта;
			СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта,ДатаКурсов);
			СтрКурса.Вставить("Валюта",Валюта);
			СтруктураКурсыВалют.Вставить("Сценарий",СтрКурса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Валюта регламентированного учета
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Регл") Тогда
		
		СтрКурса = Новый Структура;
		СтрКурса.Вставить("Курс",1);
		СтрКурса.Вставить("Кратность",1);
		СтрКурса.Вставить("Валюта",Константы.ВалютаРегламентированногоУчета.Получить());
		СтруктураКурсыВалют.Вставить("Регл",СтрКурса);
	
	КонецЕсли;
	
	// Курс взаиморасчетов
	
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Взаиморасчеты") Тогда
			СтрКурса = ПолучитьКурсВзаиморасчетовПоДокументу(ДокументОбъект,МетаданныеДокумента,ДатаКурсов);
			СтруктураКурсыВалют.Вставить("Взаиморасчеты",СтрКурса);
	КонецЕсли; // Свойство("Взаиморасчеты"); 
	
    Возврат СтруктураКурсыВалют;
	
КонецФункции // ПолучитьСтруктуруКурсовВалют()

// Функция получает курс взаиморасчетов по документу
// 
// Параметры:
//  ДокументОбъект       - ДокуменОбъект
//  МетаданныеДокумента  - ОбъектМетаданных
//  ДатаКурсов           - Дата.
// 
// Возвращаемое значение:
//   СтрКурса   - Структура.
// 
Функция ПолучитьКурсВзаиморасчетовПоДокументу(ДокументОбъект,МетаданныеДокумента,ДатаКурсов) Экспорт
	
	СтрКурса = Новый Структура;
	СтрКурса.Вставить("Курс",1);
	СтрКурса.Вставить("Кратность",1);
	СтрКурса.Вставить("Валюта",Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("ДоговорКонтрагента",МетаданныеДокумента) Тогда 
		
		Валюта = бит_КурсыВалют.ПолучитьВалютуДоговораКонтрагента(ДокументОбъект.ДоговорКонтрагента);
		
		Если ЗначениеЗаполнено(Валюта) Тогда
			СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта,ДатаКурсов);
			СтрКурса.Вставить("Валюта",Валюта);
		Иначе
			
			Если бит_РаботаСМетаданными.ЕстьРеквизит("ВалютаДокумента",МетаданныеДокумента) 
				И бит_РаботаСМетаданными.ЕстьРеквизит("КурсДокумента",МетаданныеДокумента)
				И бит_РаботаСМетаданными.ЕстьРеквизит("КратностьДокумента",МетаданныеДокумента) Тогда
				
				СтрКурса = Новый Структура;
				СтрКурса.Вставить("Курс"     ,ДокументОбъект.КурсДокумента);
				СтрКурса.Вставить("Кратность",ДокументОбъект.КратностьДокумента);
				СтрКурса.Вставить("Валюта"   ,ДокументОбъект.ВалютаДокумента);
			КонецЕсли; 
		КонецЕсли; // Договор заполнен
		
	КонецЕсли; // Есть реквизит договор
	
	Возврат СтрКурса;	
	
КонецФункции // ПолучитьКурсВзаиморасчетовПоДокументу()

// Функция формирует текст запроса на выборку периода, 
// 	на который в дальнейшем будем получать курс/кратность.
// 
// Параметры:
// 	ИмяТаблицы - строка - имя временной таблицы, куда следует поместить результат запроса.
// 	ИмяРегистраКурсы - строка - имя регистра из которого берем период.
// 	ИмяПараметраВалюта - строка - имя параметра, в который передается ссылка на валюту по которой получаем период.
// 
Функция ПолучитьШаблонЗапросаНаВыборкуПериодаКурса(ИмяТаблицы, ИмяРегистраКурсы, ИмяПараметраВалюта) Экспорт
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ПериодКурса
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	Периоды КАК Периоды
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений."+ИмяРегистраКурсы+" КАК КурсыВалют
	|		ПО Периоды.Период >= КурсыВалют.Период
	|ГДЕ
	|	КурсыВалют.Валюта = &"+ИмяПараметраВалюта+"
	|   %УсловиеСценарий%
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьШаблонЗапросаНаВыборкуПериодаКурса()

// Функция формирует текст запроса на выборку курса и кратности валюты.
// 
// Параметры:
// 	ИмяТаблицы 			- строка - имя временной таблицы, куда следует поместить результат запроса.
// 	ИмяТаблицыПериоды 	- строка - имя таблицы, из которой следует взять периоды для получения курса/кратности.
// 	ИмяРегистраКурсы 	- строка - имя регистра из которого берутся курс и кратность.
// 	ИмяПараметраВалюта 	- строка - имя параметра, в который передается ссылка на валюту,
//    								по которой получаем курс/кратность.
// 
Функция ПолучитьШаблонЗапросаНаВыборкуКурсаНаПериод(ИмяТаблицы, ИмяТаблицыПериоды, ИмяРегистраКурсы, ИмяПараметраВалюта) Экспорт
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	"+ИмяТаблицыПериоды+".Период,
	|	"+ИмяТаблицыПериоды+".ПериодКурса,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ПОМЕСТИТЬ "+ИмяТаблицы+"
	|ИЗ
	|	"+ИмяТаблицыПериоды+" КАК "+ИмяТаблицыПериоды+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+ИмяРегистраКурсы+" КАК КурсыВалют
	|		ПО "+ИмяТаблицыПериоды+".ПериодКурса = КурсыВалют.Период
	|ГДЕ
	|	КурсыВалют.Валюта = &"+ИмяПараметраВалюта+"
	|   %УсловиеСценарий%	
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьШаблонЗапросаНаВыборкуКурсаНаПериод()

// Функция получает курсы валют по таблице периодов.
// 
// Параметры:
//  ТаблицаПериодов  - ТаблицаЗначений - Обязательно наличие колонки период.
//  Сценарий  - СправочникСсылка.СценарииПланирования.
//  СтруктураПараметров - Структура - Ключ Строка, Значение: Структура.
// 
// Возвращаемое значение:
//   Курсы   - Соответсвие - Ключ: Строка, Значение: СтруктураКурсовВалют.
// 
Функция ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов,Сценарий=Неопределено,СтруктураПараметров)  Экспорт
	
	ИспользоватьКурсыСценария = Ложь;	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		Если Сценарий.ИспользоватьКурсыСценария Тогда
			
			ИспользоватьКурсыСценария = Истина;
			
		КонецЕсли; 
		
	КонецЕсли; 	
	
	ИмяРегистраКурсы = ?(ИспользоватьКурсыСценария,"бит_КурсыСценариевПланирования","КурсыВалют");
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПериодов.Период
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|;";
	
	ТекстЗапросаНаВыборкуПериодаКурса	= "";
	ТекстЗапросаНаВыборкуКурсаНаПериод	= "";
	ТекстЗапросаКурсовПоПериодамНачало 	= "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Периоды.Период";
	ТекстЗапросаКурсовПоПериодамКонец  	= "
		|ИЗ
		|	Периоды КАК Периоды";
	ТекстЗапросаУничтожить 				= "
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Периоды
		|;";

	Для Каждого ТекПараметр Из СтруктураПараметров Цикл
		
		СтруктураЗначенийПараметра = ТекПараметр.Значение;
		
		Если СтруктураЗначенийПараметра.Свойство("Валюта") Тогда
			
			ИмяПараметраВалюта   = "Валюта" + ТекПараметр.Ключ;
			ИмяВремТаблицыПериод = "Периоды" + ТекПараметр.Ключ;
			ИмяВремТаблицыКурсы  = "Курсы" + ТекПараметр.Ключ;
			ИмяПоляКурс 		 = "Курс" + ТекПараметр.Ключ;
			ИмяПоляКратность 	 = "Кратность" + ТекПараметр.Ключ;
			
			// Получим периоды курсов
			ТекстДопЗапроса = бит_КурсыВалют.ПолучитьШаблонЗапросаНаВыборкуПериодаКурса(ИмяВремТаблицыПериод, ИмяРегистраКурсы, ИмяПараметраВалюта);
			
			ТекстЗапросаНаВыборкуПериодаКурса = ТекстЗапросаНаВыборкуПериодаКурса + ТекстДопЗапроса;
			
			// Получим курсы валют
			ТекстДопЗапроса = ПолучитьШаблонЗапросаНаВыборкуКурсаНаПериод(ИмяВремТаблицыКурсы, ИмяВремТаблицыПериод, ИмяРегистраКурсы, ИмяПараметраВалюта);
			
			ТекстЗапросаНаВыборкуКурсаНаПериод = ТекстЗапросаНаВыборкуКурсаНаПериод + ТекстДопЗапроса;
			
			// 
			ТекстЗапросаКурсовПоПериодамНачало = ТекстЗапросаКурсовПоПериодамНачало + ",
			|	ЕСТЬNULL("+ИмяВремТаблицыКурсы+".Курс, 0) КАК "+ИмяПоляКурс+",
			|	ЕСТЬNULL("+ИмяВремТаблицыКурсы+".Кратность, 1) КАК "+ИмяПоляКратность;
			
			ТекстЗапросаКурсовПоПериодамКонец = ТекстЗапросаКурсовПоПериодамКонец + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ "+ИмяВремТаблицыКурсы+" КАК "+ИмяВремТаблицыКурсы+ "
			|		ПО Периоды.Период = "+ИмяВремТаблицыКурсы+ ".Период";
			
			// Получим текст запроса уничтожить
			ТекстЗапросаУничтожить = ТекстЗапросаУничтожить + "
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ "+ИмяВремТаблицыПериод+"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ "+ИмяВремТаблицыКурсы+"
			|;";
			
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапросаКурсовПоПериодамКонец = ТекстЗапросаКурсовПоПериодамКонец + ";";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаНаВыборкуПериодаКурса;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаНаВыборкуКурсаНаПериод;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаКурсовПоПериодамНачало + ТекстЗапросаКурсовПоПериодамКонец; 
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаУничтожить;
	
	Запрос.Текст = ТекстЗапроса;
	
	Если НЕ ИспользоватьКурсыСценария Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%УсловиеСценарий%","");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%УсловиеСценарий%"," И КурсыВалют.Сценарий = &Сценарий");
		
	КонецЕсли; 				
	
	Запрос.УстановитьПараметр("ТаблицаПериодов",ТаблицаПериодов);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	
	Для каждого КлючИЗначение Из СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр("Валюта"+КлючИЗначение.Ключ,КлючИЗначение.Значение.Валюта);
		
	КонецЦикла; 
	
	Курсы = Новый Соответствие;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураКурсыВалют = Новый Структура;
		
		Для каждого КлючИЗначение Из СтруктураПараметров Цикл
			
			Ключ = КлючИЗначение.Ключ; 
			Параметры = КлючИЗначение.Значение;
			ИмяКурс = "Курс"+Ключ;
			ИмяКратность = "Кратность"+Ключ;
			
			
			СтрКурса = Новый Структура;
			СтрКурса.Вставить("Курс",Выборка[ИмяКурс]);
			СтрКурса.Вставить("Кратность",Выборка[ИмяКратность]);
			СтрКурса.Вставить("Валюта",Параметры.Валюта);
			СтруктураКурсыВалют.Вставить(КлючИЗначение.Ключ,СтрКурса);
			
		КонецЦикла; 
		
		
		
		Курсы.Вставить(Выборка.Период,СтруктураКурсыВалют);
		
	КонецЦикла; 
	
	Возврат Курсы;
	
КонецФункции // ПолучитьТаблицуКурсовВалют()

// Процедура выполняет пересчеты из валюты документа в различные валюты для объекта 
// либо для строки таблицы значений.
// Валюты в которые выполняем пересчеты определяются по записям структуры.
// 
// Параметры:
//  ТекущийОбъект  - СправочникОбъект,ДокументОбъект,СтрокаТаблицыЗначений.
//  ИменаРеквизитов - Массив.
//  СтруктураКурсыВалют    - Структура- значениями являются структуры с ключами "Валюта","Курс","Кратность".
//  СтруктураКурсыДокумент - Структура.
// 
Процедура ВыполнитьПересчетыДляОбъекта(ТекущийОбъект,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыДокумент) Экспорт

	СтруктураКурсыДокумент = СтруктураКурсыВалют["Документ"];
	
		
		Для каждого КлючИЗначение Из СтруктураКурсыВалют Цикл
			
			Постфикс = КлючИЗначение.Ключ;
			
			Если Постфикс = "Документ" Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			// Курсы в которые нужно пересчитать
			СтруктураКурсы = КлючИЗначение.Значение;	   
			
			Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
				
				ИмяРесурса   = ИмяРеквизита+Постфикс;
				
				ТекущийОбъект[ИмяРесурса] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущийОбъект[ИмяРеквизита]
																	  ,СтруктураКурсыДокумент.Валюта
																	  ,СтруктураКурсы.Валюта
																	  ,СтруктураКурсыДокумент.Курс
																	  ,СтруктураКурсы.Курс
																	  ,СтруктураКурсыДокумент.Кратность
																	  ,СтруктураКурсы.Кратность);
				
				
			КонецЦикла; // По именам реквизитов
			
			
			
		КонецЦикла; // По структурам курсов для пересчета
		
	
КонецПроцедуры // ВыполнитьПересчетыДляОбъекта()

// Процедура выполняет пересчеты из валюты документа в различные валюты для объекта 
// либо для строки таблицы значений.
// Валюты в которые выполняем пересчеты определяются по записям структуры.
// 
// Параметры:
//  КонтейнерИсточник  - СправочникОбъект,ДокументОбъект,СтрокаТаблицыЗначений.
//  КонтейнерПриемник  - СправочникОбъект,ДокументОбъект,СтрокаТаблицыЗначений.
//  ИменаРеквизитов - Массив.
//  СтруктураКурсыВалют    - Структура- значениями являются структуры с ключами "Валюта","Курс","Кратность".
//  СтруктураКурсыДокумент - Структура.
// 
Процедура ВыполнитьВалютныеПересчеты(КонтейнерИсточник
	                                  ,КонтейнерПриемник
									  ,ИменаРеквизитов
									  ,СтруктураКурсыВалют
									  ,СтруктураКурсыДокумент
									  ,Знач МассивИсключений = Неопределено) Экспорт

		Если СтруктураКурсыДокумент = Неопределено Тогда
		
	         СтруктураКурсыДокумент = СтруктураКурсыВалют["Документ"];
		
		КонецЕсли; 							  
		
		Если МассивИсключений = Неопределено Тогда
		
			МассивИсключений = Новый Массив;
		
		КонецЕсли; 
		
		Для каждого КлючИЗначение Из СтруктураКурсыВалют Цикл
			
			Постфикс = КлючИЗначение.Ключ;
			
			Если Постфикс = "Документ" Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			// Курсы в которые нужно пересчитать
			СтруктураКурсы = КлючИЗначение.Значение;	   
			
			Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
				
				ИмяРесурса   = ИмяРеквизита+Постфикс;
				
				Если НЕ МассивИсключений.Найти(ИмяРесурса) = Неопределено Тогда
				
					 Продолжить;
				
				КонецЕсли; 
				
				КонтейнерПриемник[ИмяРесурса] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(КонтейнерИсточник[ИмяРеквизита]
																		  ,СтруктураКурсыДокумент.Валюта
																		  ,СтруктураКурсы.Валюта
																		  ,СтруктураКурсыДокумент.Курс
																		  ,СтруктураКурсы.Курс
																		  ,СтруктураКурсыДокумент.Кратность
																		  ,СтруктураКурсы.Кратность);
				
				
			КонецЦикла; // По именам реквизитов
			
			
		КонецЦикла; // По структурам курсов для пересчета
		
	
КонецПроцедуры // ВыполнитьВалютныеПересчеты()

// Функция выполняет пересчет из валюты документа в валюту взаиморасчетов.
// 
// Параметры:
//  СуммаВх              - Число
//  СтруктураКурсыВалют  - Структура.
// 
// Возвращаемое значение:
//   СуммаРез   - Число.
// 
Функция ПересчитатьДокВзаиморасчеты(СуммаВх,СтруктураКурсыВалют)  Экспорт

	СуммаРез = СуммаВх;
	
	
	Если СтруктураКурсыВалют.Свойство("Документ") И СтруктураКурсыВалют.Свойство("Взаиморасчеты") Тогда
	
		
			СтрДок   = СтруктураКурсыВалют.Документ;
			СтрВз    = СтруктураКурсыВалют.Взаиморасчеты;
			СуммаРез = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаВх
			                                                              ,СтрДок.Валюта
																		  ,СтрВз.Валюта
																		  ,СтрДок.Курс
																		  ,СтрВз.Курс
																		  ,СтрДок.Кратность
																		  ,СтрВз.Кратность);
	
	КонецЕсли; 
	

	Возврат СуммаРез;
	
КонецФункции // ПересчитатьДокВзаиморасчеты()

// Функция выполняет пересчет из валюты документа в валюту взаиморасчетов.
// 
// Параметры:
//  СуммаВх              - Число
//  СтруктураКурсыВалют  - Структура.
// 
// Возвращаемое значение:
//   СуммаРез   - Число.
// 
Функция ПересчитатьДокРегл(СуммаВх,СтруктураКурсыВалют)  Экспорт

	СуммаРез = СуммаВх;
	
	
	Если СтруктураКурсыВалют.Свойство("Документ") И СтруктураКурсыВалют.Свойство("Регл") Тогда
	
		
			СтрДок   = СтруктураКурсыВалют.Документ;
			СтрРегл  = СтруктураКурсыВалют.Регл;
			СуммаРез = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаВх
			                                                              ,СтрДок.Валюта
																		  ,СтрРегл.Валюта
																		  ,СтрДок.Курс
																		  ,СтрРегл.Курс
																		  ,СтрДок.Кратность
																		  ,СтрРегл.Кратность);
	
	КонецЕсли; 
	

	Возврат СуммаРез;
	
КонецФункции // ПересчитатьДокВзаиморасчеты()

// Функция пересчитывает сумму из указанной валюты в валюту документа.
// 
// Параметры:
//  СуммаВх 				- Число.
//  ИмяВалюты 				- Строка.
//  СтруктураКурсыВалют 	- Структура.
// 
// Возвращаемое значение:
//  СуммаРез - Число.
// 
Функция ПересчитатьВалютаДокумента(СуммаВх, ИмяВалюты, СтруктураКурсыВалют) Экспорт

	СуммаРез = СуммаВх;
	
	Если СтруктураКурсыВалют.Свойство("Документ") И СтруктураКурсыВалют.Свойство(ИмяВалюты) Тогда
		
		СтрДок   = СтруктураКурсыВалют.Документ;
		СтрВал   = СтруктураКурсыВалют[ИмяВалюты];
			
		
		СуммаРез = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаВх,
																	СтрВал.Валюта   , СтрДок.Валюта,
																	СтрВал.Курс     , СтрДок.Курс,
																	СтрВал.Кратность, СтрДок.Кратность);
																
	КонецЕсли;
															
	Возврат СуммаРез;
	
КонецФункции // ПересчитатьВалютаДокумента()

// Удалить.
Процедура ВыполнитьВалютныеПересчетыВНА(МассивИменДляПересчета, ПараметрыВНА, СтруктураКурсыВалют, ЭтоПринятиеКУчетуОС=Ложь)  Экспорт
	
	СтруктураКурсыДокумент = СтруктураКурсыВалют["Документ"];
	СтруктураКурсыМУ 	   = СтруктураКурсыВалют["МУ"];
	
	Если ТипЗнч(ПараметрыВНА) = Тип("Соответствие") Тогда
		Для каждого КлючИЗначение Из ПараметрыВНА Цикл
			
			ВНА = КлючИЗначение.Значение;
			
			Для каждого Имя Из МассивИменДляПересчета Цикл
				
				ВНА[Имя] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Окр(ВНА[Имя],2)
																				,СтруктураКурсыМУ.Валюта
																				,СтруктураКурсыДокумент.Валюта
																				,СтруктураКурсыМУ.Курс
																				,СтруктураКурсыДокумент.Курс
																				,СтруктураКурсыМУ.Кратность
																				,СтруктураКурсыДокумент.Кратность);
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	Иначе
		
		// При принятии к учету ОС запишем суммовые параметры ОС в валюте МСФО.
		Если ЭтоПринятиеКУчетуОС Тогда
			
			Для каждого Имя Из МассивИменДляПересчета Цикл
			
				ПараметрыВНА[Имя] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Окр(ПараметрыВНА[Имя],2)
																			,СтруктураКурсыДокумент.Валюта
																			,СтруктураКурсыМУ.Валюта
																			,СтруктураКурсыДокумент.Курс
																			,СтруктураКурсыМУ.Курс
																			,СтруктураКурсыДокумент.Кратность
																			,СтруктураКурсыМУ.Кратность);
			
			КонецЦикла; 

		
		Иначе
			
			Для каждого Имя Из МассивИменДляПересчета Цикл
			
				ПараметрыВНА[Имя] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Окр(ПараметрыВНА[Имя],2)
																			,СтруктураКурсыМУ.Валюта
																			,СтруктураКурсыДокумент.Валюта
																			,СтруктураКурсыМУ.Курс
																			,СтруктураКурсыДокумент.Курс
																			,СтруктураКурсыМУ.Кратность
																			,СтруктураКурсыДокумент.Кратность);
			
			КонецЦикла; 
		
		КонецЕсли; 
	КонецЕсли; 
	
	
КонецПроцедуры
 
// Функция получает валюту для договоров контрагента.
// 
// Параметры:
// 		Договор - СправочникСсылка.ДоговорыКонтрагентов.
// 
// 
// Возвращаемое значение:
//  Валюта - СправочникСсылка.Валюты.
// 
Функция ПолучитьВалютуДоговораКонтрагента(Договор) Экспорт 

	Если бит_РаботаСМетаданными.ЕстьРеквизит("РасчетыВУсловныхЕдиницах", Договор.метаданные()) Тогда
	
		Если Договор.РасчетыВУсловныхЕдиницах Тогда
			Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Иначе	
			Валюта = Договор.ВалютаВзаиморасчетов;
		КонецЕсли; 
		
	Иначе
		
		Если бит_ОбщегоНазначения.ЭтоВалютаРегл(Договор.ПорядокОплаты) Тогда
			Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Иначе
			Валюта = Договор.ВалютаВзаиморасчетов;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Валюта;
	
КонецФункции // ПолучитьВалютуДоговораКонтрагента()

// Функция возвращает таблицу значений - валюты, зависящие от переданной
// в качестве параметра.
// Возвращаемое значение
// ТаблицаЗначений.
// колонка "Ссылка" - СправочникСсылка.Валюты.
// колонка "Наценка" - число.
// 
Функция ПолучитьСписокЗависимыхВалют(ВалютаБазовая, ДополнительныеСвойства = Неопределено) Экспорт
	
	Кэшировать = (ТипЗнч(ДополнительныеСвойства) = Тип("Структура"));
	
	Если Кэшировать Тогда
		ЗависимыеВалюты = ДополнительныеСвойства.ЗависимыеВалюты.Получить(ВалютаБазовая);
		Если ТипЗнч(ЗависимыеВалюты) = Тип("ТаблицаЗначений") Тогда
			Возврат ЗависимыеВалюты;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	СпрВалюты.Ссылка,
	|	СпрВалюты.Наценка
	|ИЗ
	|	Справочник.Валюты КАК СпрВалюты
	|ГДЕ
	|	СпрВалюты.ОсновнаяВалюта = &ВалютаБазовая
	|";
	
	Запрос.УстановитьПараметр("ВалютаБазовая", ВалютаБазовая);
	ЗависимыеВалюты = Запрос.Выполнить().Выгрузить();
	
	Если Кэшировать Тогда
		ДополнительныеСвойства.ЗависимыеВалюты.Вставить(ВалютаБазовая, ЗависимыеВалюты);
	КонецЕсли;
	
	Возврат ЗависимыеВалюты;
	
КонецФункции // ПолучитьСписокЗависимыхВалют()

#КонецОбласти
