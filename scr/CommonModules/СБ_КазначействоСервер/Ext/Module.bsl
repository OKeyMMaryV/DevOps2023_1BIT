////////////////////////////////////////////////////////////////////////////////
// Подсистема "Казначейство".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура УстановитьЗначениеКонстанты(Идентификатор, Значение, ПоместитьВХранилище =  Ложь) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СБ_НастройкиКазначейства.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Идентификатор = Идентификатор;
	
	Если ПоместитьВХранилище Тогда
		
		МенеджерЗаписи.ЗначениеВХранилище = Истина;
		МенеджерЗаписи.ХранилищеЗначения = Новый ХранилищеЗначения(Значение);
		
	Иначе
		МенеджерЗаписи.Значение = Значение;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ПроставитьСогласующееРешениеПоВизамЗаявки(ЗаявкаСсылка, ДатаУстановки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_УстановленныеВизы.Объект,
	|	бит_УстановленныеВизы.Виза,
	|	бит_УстановленныеВизы.ИД,
	|	бит_УстановленныеВизы.Пользователь,
	|	бит_УстановленныеВизы.ФизическоеЛицо,
	|	бит_УстановленныеВизы.ДобавленаВручную,
	|	бит_УстановленныеВизы.ДатаУстановки,
	|	бит_УстановленныеВизы.КодСортировки,
	|	бит_УстановленныеВизы.Должность,
	|	бит_УстановленныеВизы.Комментарий,
	|	бит_УстановленныеВизы.Статус,
	|	бит_УстановленныеВизы.Решение,
	|	бит_УстановленныеВизы.Маршрут,
	|	бит_УстановленныеВизы.Алгоритм,
	|	бит_УстановленныеВизы.ТочкаАлгоритма,
	|	бит_УстановленныеВизы.ДатаКрайняя,
	|	бит_УстановленныеВизы.ВремяНаУстановку
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	бит_УстановленныеВизы.Объект = &Объект
	|	И бит_УстановленныеВизы.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка)";
    Запрос.УстановитьПараметр("Объект", ЗаявкаСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	                              	
	КонецЕсли; 
	
	Решение_Согласование = Справочники.бит_ВидыРешенийСогласования.Согласовано;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		
		МенеджерЗаписи.Решение 			= Решение_Согласование;
		МенеджерЗаписи.ДатаУстановки 	= ДатаУстановки;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
 
Функция ВсеПрофилиРазноски() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КодыАналитикиAXAPTA.Аналитика КАК Аналитика
	|ИЗ
	|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК КодыАналитикиAXAPTA
	|ГДЕ
	|	КодыАналитикиAXAPTA.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Аналитика";

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Аналитика");
	
КонецФункции

Функция НайтиПрофильРазноски(ВведенныйТекст, Организация = Неопределено) Экспорт

	ПредопределенныеОрганизации = ПредопределенныеОрганизации();
	
	Если Организация = Неопределено Тогда
		ВидАналитикиОтбор = Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход;
	ИначеЕсли Организация = ПредопределенныеОрганизации["Организация ОКЕЙ"] Тогда
		ВидАналитикиОтбор = Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_AXAPTA;
	ИначеЕсли Организация = ПредопределенныеОрганизации["Организация Лоджистикс"] Тогда
		ВидАналитикиОтбор = Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_AXAPTA;
	Иначе
		ВидАналитикиОтбор = Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_1С;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КодыАналитикиAXAPTA.Аналитика КАК Аналитика
	|ИЗ
	|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК КодыАналитикиAXAPTA
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК Отбор
	|		ПО КодыАналитикиAXAPTA.Аналитика = Отбор.Аналитика
	|			И (Отбор.ВидАналитики = &ВидАналитикиОтбор)
	|			И (Отбор.ЗначениеАналитики = ИСТИНА)
	|ГДЕ
	|	КодыАналитикиAXAPTA.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход)
	|	И ВЫРАЗИТЬ(КодыАналитикиAXAPTA.Аналитика КАК СТРОКА(50)) ПОДОБНО &ШаблонПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	Аналитика";

	Запрос.УстановитьПараметр("ШаблонПоиска", "%" + ВведенныйТекст + "%");
	Запрос.УстановитьПараметр("ВидАналитикиОтбор", ВидАналитикиОтбор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Аналитика");

КонецФункции // ()

Функция СчетРСБУПоПрофилюРазноски(ПрофильРазноски) Экспорт 

	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	Если ПустаяСтрока(ПрофильРазноски) Тогда
		Возврат ПустойСчет;	                                  	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сопоставление.ЗначениеАналитики
	|ИЗ
	|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК Сопоставление
	|ГДЕ
	|	Сопоставление.ВидАналитики = &ВидАналитики
	|	И Сопоставление.Аналитика = &Аналитика";

	Запрос.УстановитьПараметр("ВидАналитики", 	Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.СчетРСБУ);
	Запрос.УстановитьПараметр("Аналитика", 		ПрофильРазноски);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПустойСчет;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЗначениеАналитики;
	
КонецФункции // ()

Функция ЭтоСобственныйКонтрагент(Организация, Контрагент) Экспорт

	Если НЕ (ЗначениеЗаполнено(Организация) 
			И ЗначениеЗаполнено(Контрагент)) Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты
	|ГДЕ
	|	бит_СобственныеКонтрагенты.Контрагент = &Контрагент
	|	И бит_СобственныеКонтрагенты.ВидСвязи = &ВидСвязи
	|	И бит_СобственныеКонтрагенты.Объект = &Организация";
	
	Запрос.УстановитьПараметр("Контрагент", 	Контрагент);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ВидСвязи", 		Перечисления.бит_ВидыСобственныхКонтрагентов.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;	
	КонецЕсли; 

КонецФункции // ()

Функция ЭтоЗаявкаПоВнутригрупповомуПереводу(ЗаявкаСсылка) Экспорт 

	Если Не ЗначениеЗаполнено(ЗаявкаСсылка) Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты
	|		ПО бит_ЗаявкаНаРасходованиеСредств.Контрагент = бит_СобственныеКонтрагенты.Контрагент
	|ГДЕ
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;	
	КонецЕсли; 

КонецФункции // ()
 
Функция НаДатуУжеВведенОсновнойРеестрПлатежей(Знач Дата, Знач Организация, Знач ТекущийРеестр) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_РеестрПлатежей.Ссылка
	|ИЗ
	|	Документ.бит_РеестрПлатежей КАК бит_РеестрПлатежей
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(бит_РеестрПлатежей.Дата, ДЕНЬ) = &Дата
	|	И бит_РеестрПлатежей.Организация = &Организация
	|	И бит_РеестрПлатежей.Ссылка <> &Ссылка
	|	И бит_РеестрПлатежей.СБ_ВидДокумента = ЗНАЧЕНИЕ(Перечисление.СБ_ВидыРеестраПлатежа.Основной)";
	Запрос.УстановитьПараметр("Дата", 			НачалоДня(Дата));
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Ссылка", 		ТекущийРеестр);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;		
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // ()
 
Процедура ДозаполнитьСводноеПлатежноеПоручение(ПлатежноеПоручениеОбъект, МассивПозиций) Экспорт
	
	Если МассивПозиций.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПлатежнаяПозиция = МассивПозиций[0];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Заявка.ДоговорКонтрагента,
	|	Заявка.СтатьяОборотов,
	|	спрСтатьиОборотов.ВидСтатьи,
	|	ДоговорыКонтрагентов.Наименование КАК ДоговорКонтрагентаНаименование,
	|	ДоговорыКонтрагентов.Дата КАК ДоговорКонтрагентаДата
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК Заявка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_СтатьиОборотов КАК спрСтатьиОборотов
	|			ПО Заявка.СтатьяОборотов = спрСтатьиОборотов.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ПО Заявка.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|		ПО бит_ПлатежнаяПозиция.ДокументОснование = Заявка.Ссылка
	|ГДЕ
	|	бит_ПлатежнаяПозиция.Ссылка = &ПлатежнаяПозиция";
	Запрос.УстановитьПараметр("ПлатежнаяПозиция", ПлатежнаяПозиция);
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли; 	
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Предмет", 		ПредметОплаты(Выборка.СтатьяОборотов, Выборка.ВидСтатьи));
	СтруктураПараметров.Вставить("ВидДокумента", 	"договору");
	СтруктураПараметров.Вставить("НомерДокумента",	Выборка.ДоговорКонтрагентаНаименование);
	СтруктураПараметров.Вставить("ДатаДокумента",	Выборка.ДоговорКонтрагентаДата);
	СтруктураПараметров.Вставить("СуммаНДС",		ПлатежноеПоручениеОбъект.СуммаНДС);
	СтруктураПараметров.Вставить("БезНДС",			(ПлатежноеПоручениеОбъект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС));	
	
	ПлатежноеПоручениеОбъект.НазначениеПлатежа = ТекстНазначенияПлатежа(СтруктураПараметров);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьЗначениеСвойстваОбъекта(ОбъектСсылка, Свойство, Значение, Замещать = Ложь) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-08 (#3899)
	Если ТипЗнч(ОбъектСсылка) = Тип("Массив") Тогда
		
		Для каждого ТекущийОбъектСсылка Из ОбъектСсылка Цикл
		
			НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	
			НаборЗаписей.Отбор.Объект.Установить(ТекущийОбъектСсылка);
			НаборЗаписей.Отбор.Свойство.Установить(Свойство);
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.Объект 	= ТекущийОбъектСсылка;
			Запись.Свойство = Свойство;
			Запись.Значение = Значение;
			
			Если НЕ Замещать Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("НеВыполнятьДополнительныеДействия");
			КонецЕсли; 
			
			Попытка
			    НаборЗаписей.Записать(Замещать);
			Исключение
			    Сообщить(ОписаниеОшибки());
			КонецПопытки;
		
		КонецЦикла; 
			
	Иначе
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-08 (#3899)	
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.Объект 	= ОбъектСсылка;
	Запись.Свойство = Свойство;
	Запись.Значение = Значение;
	
	Если НЕ Замещать Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("НеВыполнятьДополнительныеДействия");
	КонецЕсли; 
	
	Попытка
	    НаборЗаписей.Записать(Замещать);
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-08 (#3899)
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-08 (#3899)
	
КонецПроцедуры

Функция ПрофильРазноскиСоответствуетВидуОперации(ПрофильРазноски, ВидОперации) Экспорт

	Если ПустаяСтрока(ПрофильРазноски) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК АналитикаСоответствует
	|ИЗ
	|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA
	|ГДЕ
	|	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход)
	|	И СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.Аналитика = &ПрофильРазноски
	|	И СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ЗначениеАналитики = &ВидОперации";
	Запрос.УстановитьПараметр("ПрофильРазноски", 	ПрофильРазноски);
	Запрос.УстановитьПараметр("ВидОперации",		ВидОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции // ()
 
Процедура ВыгрузитьПлатежныеПорученияВФоновомЗадании(РеестрПлатежейСсылка) Экспорт 

	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(РеестрПлатежейСсылка);
	
	ФоновыеЗадания.Выполнить("СБ_ЗагрузкаПД_AXAPTA.ВыгрузитьПлатежныеПорученияВAXAPTA"
		, ПараметрыЗадания
		, XMLСтрока(РеестрПлатежейСсылка)
		, "Выгрузка номеров платежных поручений"
		);

КонецПроцедуры
 
Функция ВидПереводовПоСтатьеДДС(СтатьяДДС) Экспорт

	Если Не ЗначениеЗаполнено(СтатьяДДС) Тогда
		Возврат Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПустаяСсылка();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ЗначениеАналитики
	|ИЗ
	|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA
	|ГДЕ
	|	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ВидАналитики = &ВидАналитики
	|	И СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.Аналитика = &Аналитика";
	Запрос.УстановитьПараметр("ВидАналитики", 	Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидПереводов);
	Запрос.УстановитьПараметр("Аналитика",		СтатьяДДС);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПустаяСсылка();
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЗначениеАналитики;

КонецФункции // ()

Функция ВидОперацииПоступленияДСПоПрофилюРазноски(ПрофильРазноски) Экспорт

	Если ПустаяСтрока(ПрофильРазноски) Тогда
		Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ЗначениеАналитики КАК ВидОперации
	|ИЗ
	|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA
	|ГДЕ
	|	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииПоступлениеДС)
	|	И СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.Аналитика = &ПрофильРазноски";
	Запрос.УстановитьПараметр("ПрофильРазноски", 	ПрофильРазноски);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ВидОперации;

КонецФункции

Функция ВидОперацииСписанияДСПоПрофилюРазноски(ПрофильРазноски) Экспорт

	Если ПустаяСтрока(ПрофильРазноски) Тогда
		Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ЗначениеАналитики КАК ВидОперации
	|ИЗ
	|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA
	|ГДЕ
	|	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход)
	|	И СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.Аналитика = &ПрофильРазноски";
	Запрос.УстановитьПараметр("ПрофильРазноски", 	ПрофильРазноски);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ВидыОперацийСписанияПоОперацииЗаявки = бит_Казначейство.СформироватьСоответствияВидовОперацииЗаявки("СписаниеСРасчетногоСчета");
	
	Возврат ВидыОперацийСписанияПоОперацииЗаявки[Выборка.ВидОперации];

КонецФункции

// +СБ. Широков Николай. 2015-01-29. Консультация #1244
//Процедура взята из модуля формы документа "Реестр платежей"
Процедура СоздатьПлатежныеДокументы(РеестрСсылка, ДополнительныеПараметры, ФормаОплаты = Неопределено) Экспорт
	
	РежимЗаписи 					= ДополнительныеПараметры.РежимЗаписи;
	РежимСообщений 					= ДополнительныеПараметры.РежимСообщений;
	ДатаОплаты 						= ДополнительныеПараметры.ДатаОплаты;
	НеФормироватьПлатежныеПоручения = ДополнительныеПараметры.НеФормироватьПлатежныеПоручения;
	
// +СБ. Широков Николай. 2015-01-23. Консультация #1244
	Свойство_СрокИсполнения 	= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Свойство_СрокИсполнения");
	ДопРеквизит_Инициатор 		= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ДопРеквизит_Инициатор");
	ВалютаРегл 					= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ_Заявки.ПлатежнаяПозиция КАК ПлатежнаяПозиция
	|ПОМЕСТИТЬ ПлатежныеПозиции
	|ИЗ
	|	Документ.бит_РеестрПлатежей.Заявки КАК ТЧ_Заявки
	|ГДЕ
	|	ТЧ_Заявки.Ссылка = &Ссылка
	|	И ТЧ_Заявки.Оплачено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлатежнаяПозиция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(бит_ДополнительныеАналитики.ЗначениеАналитики КАК Документ.бит_ПлатежнаяПозиция) КАК ПлатежнаяПозиция,
	|	бит_ДополнительныеАналитики.Объект КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ПлатежныеДокументы
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеПозиции КАК ПлатежныеПозиции
	|		ПО бит_ДополнительныеАналитики.ЗначениеАналитики = ПлатежныеПозиции.ПлатежнаяПозиция
	|ГДЕ
	|	бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция,
	|	бит_ДокументыМножественнойОплаты.ДокументОплаты
	|ИЗ
	|	РегистрСведений.бит_ДокументыМножественнойОплаты КАК бит_ДокументыМножественнойОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеПозиции КАК ПлатежныеПозиции
	|		ПО бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция = ПлатежныеПозиции.ПлатежнаяПозиция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлатежнаяПозиция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ_Заявки.НомерСтроки,
	|	ТЧ_Заявки.Оплачено,
	|	ТЧ_Заявки.ФормаОплаты,
	|	ТЧ_Заявки.БанковскийСчетОрганизация,
	|	ТЧ_Заявки.ПлатежнаяПозиция,
	|	ТЧ_Заявки.Сумма,
	|	ТЧ_Заявки.Валюта,
	|	ТЧ_Заявки.СуммаКОплатеНач,
	|	ТЧ_Заявки.СуммаКОплате,
	|	СтатусыПП.Статус КАК ПлатежнаяПозиция_Статус,
	|	бит_ЗаявкаНаРасходованиеСредств.ДоговорКонтрагента.ВалютаВзаиморасчетов  КАК ВалютаДоговора
	|ИЗ
	|	Документ.бит_РеестрПлатежей.Заявки КАК ТЧ_Заявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СтатусыПП
	|		ПО ТЧ_Заявки.ПлатежнаяПозиция = СтатусыПП.Объект
	|			И (СтатусыПП.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	|		ПО ТЧ_Заявки.ПлатежнаяПозиция = бит_ПлатежнаяПозиция.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СтатусыЗаявок
	|		ПО ТЧ_Заявки.Заявка = СтатусыЗаявок.Объект
	|			И (СтатусыЗаявок.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлатежныеДокументы КАК ПлатежныеДокументы
	|		ПО ТЧ_Заявки.ПлатежнаяПозиция = ПлатежныеДокументы.ПлатежнаяПозиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	|		ПО ТЧ_Заявки.Заявка = бит_ЗаявкаНаРасходованиеСредств.Ссылка
	|ГДЕ
	|	ТЧ_Заявки.Ссылка = &Ссылка
	|	И ТЧ_Заявки.Оплачено
	|	И ВЫБОР
	|			КОГДА бит_ПлатежнаяПозиция.Проведен
	|					И СтатусыЗаявок.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Утверждена)
	|					И ПлатежныеДокументы.ПлатежныйДокумент ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Ссылка", РеестрСсылка);
	СтрокаТаблицы = Запрос.Выполнить().Выбрать();
	
	ВыполнениеВТранзации = Ложь;
	//Если РежимЗаписи <> "Проведение" Тогда
	//	НачатьТранзакцию();
	//	ВыполнениеВТранзации = Истина;
	//КонецЕсли; 
	
// -СБ. Широков Николай	
	
// +СБ. Широков Николай. 2015-01-28. Консультация #1244 
//	Для каждого СтрокаТаблицы Из Заявки Цикл
	Пока СтрокаТаблицы.Следующий() Цикл
// -СБ. Широков Николай 
		
		флЕстьОшибки = Ложь;
		
		Если ЗначениеЗаполнено(ФормаОплаты) И ФормаОплаты <> СтрокаТаблицы.ФормаОплаты Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаТаблицы.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетОрганизация) Тогда
			
			Если РежимСообщений = "Все" ИЛИ РежимСообщений = "Ошибки" Тогда
				ТекстСообщения = "В строке номер """ + СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                         """ табличной части ""Заявки"": Не заполнено значение реквизита ""Банковский счет""! Ввод платежного документа невозможен."; 
				бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
			КонецЕсли; 
			
			флЕстьОшибки = Истина;
			
		ИначеЕсли Не бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия() И 
			СтрокаТаблицы.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетОрганизация) Тогда
			
			Если РежимСообщений = "Все" ИЛИ РежимСообщений = "Ошибки" Тогда
				ТекстСообщения = "В строке номер """ + СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                         """ табличной части ""Заявки"": Не заполнено значение реквизита ""Касса""! Ввод платежного документа невозможен."; 
				бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
			КонецЕсли; 
			
			флЕстьОшибки = Истина;
			
		КонецЕсли;
		
		// проверим статус платежной позиции
// +СБ. Широков Николай. 2015-01-28. Консультация #1244 
//		СтрСтатус = бит_Визирование.ПолучитьСтатусОбъекта(СтрокаТаблицы.ПлатежнаяПозиция,Перечисления.бит_ВидыСтатусовОбъектов.Статус);
//		Если СтрСтатус.Статус = Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта Тогда
		Если СтрокаТаблицы.ПлатежнаяПозиция_Статус = Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта Тогда
// -СБ. Широков Николай 		
			
			ТекстСообщения = НСтр("ru = 'В строке номер ""%1%"" табличной части ""Заявки"" указана закрытая платежная позиция! Ввод платежного документа невозможен.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтрокаТаблицы.НомерСтроки);
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
			
			флЕстьОшибки = Истина;
		
		КонецЕсли; 
		
		Если флЕстьОшибки Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		СтруктураПараметров = Новый Структура;		
		Если ЗначениеЗаполнено(ДатаОплаты) Тогда
			СтруктураПараметров.Вставить("ДатаОплаты", ДатаОплаты);
		КонецЕсли;
		
		// Была отредактирована сумма платежа - указываем явно
		Если СтрокаТаблицы.СуммаКОплате <> СтрокаТаблицы.СуммаКОплатеНач Тогда
			СтруктураПараметров.Вставить("СуммаКОплате",СтрокаТаблицы.СуммаКОплате);
			СтруктураПараметров.Вставить("ВалютаПлатежа",СтрокаТаблицы.Валюта);
		КонецЕсли; 
		
		СтруктураПараметров.Вставить("НеФормироватьПлатежныеПоручения", НеФормироватьПлатежныеПоручения);
		
		// Если оплачиваем не всю сумму - разобъем платежную позицию
		Если СтрокаТаблицы.СуммаКОплате<СтрокаТаблицы.СуммаКОплатеНач Тогда
			
			ДействиеВыполнено = бит_Казначейство.РазбитьПлатежнуюПозицию(СтрокаТаблицы.ПлатежнаяПозиция,
																		 СтрокаТаблицы.Сумма,
																		 СтрокаТаблицы.СуммаКОплате,
																		 СтрокаТаблицы.СуммаКОплатеНач,
																		 ,
																		 РежимСообщений);
			Если НЕ ДействиеВыполнено Тогда												 
				Продолжить;
			КонецЕсли; 
			
		КонецЕсли; 
		
// +СБ. Широков Николай. 2015-01-23. Консультация #1244 
		СтруктураПараметров.Вставить("Свойство_СрокИсполнения", Свойство_СрокИсполнения);
		СтруктураПараметров.Вставить("ДопРеквизит_Инициатор", 	ДопРеквизит_Инициатор);
		СтруктураПараметров.Вставить("ВалютаРегл", 				ВалютаРегл);
		СтруктураПараметров.Вставить("ВалютаДоговора",			СтрокаТаблицы.ВалютаДоговора);
// -СБ. Широков Николай 
		
		РежимЗаписиПлатежныхДокументов = ?(РежимЗаписи = "Проведение", РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
// +СБ. Широков Николай. 2015-01-28. Консультация #1244 
		бит_Казначейство.СформироватьДокументыОплаты(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТаблицы.ПлатежнаяПозиция), РежимЗаписиПлатежныхДокументов, СтруктураПараметров, РежимСообщений);
//		бит_Казначейство.СоздатьПлатежныйДокумент(СтрокаТаблицы, РежимЗаписиПлатежныхДокументов, СтруктураПараметров, РежимСообщений);
// -СБ. Широков Николай 
		
	КонецЦикла; 
	
// +СБ. Широков Николай. 2015-01-23. Консультация #1244 
	Если ВыполнениеВТранзации Тогда
		ЗафиксироватьТранзакцию();	
	КонецЕсли; 
// -СБ. Широков Николай 

// +СБ. Широков Николай. 2014-11-25. ТЗ 2.2.11.3 
	СБ_КазначействоСервер.ВыгрузитьПлатежныеПорученияВФоновомЗадании(РеестрСсылка);
// -СБ. Широков Николай 	

КонецПроцедуры // СоздатьПлатежныеДокументы() // -СБ. Широков Николай 
//1c-izhtc А.В. Пушин (Перенесена из общего модуля СБ_КазначействоКлиент в связи с вызовом серверного контекста
Процедура КлиентБанкПриОткрытии(ДоступнаВыгрузка, ДоступнаЗагрузка) Экспорт
	
// +СБ. Широков Николай. 2014-10-13. Доработка #1035 
	ДоступнаВыгрузка = 	РольДоступна("ПолныеПрава")
							ИЛИ РольДоступна("СБ_ЭкспортВКлиентБанк");
						
	ДоступнаЗагрузка = 	РольДоступна("ПолныеПрава")
							ИЛИ РольДоступна("СБ_ИмпортИзКлиентБанка");
							
// -СБ. Широков Николай 	
	
КонецПроцедуры

Процедура ПереопределитьДоступностьРедактированияЗаявки(Форма, ЗаблокироватьЭлементы, ДоступноИзменениеЭлемента) Экспорт

	ДоступноИзменениеЭлемента.Вставить("СтатьяОборотов", Истина);
	
	Если НЕ ЗаблокироватьЭлементы Тогда
		Возврат;	
	КонецЕсли; 
	
	ДоступенПрофильРазноски = НЕ ЗаблокироватьЭлементы;
	ДоступенСтатьяОборотов	= НЕ ЗаблокироватьЭлементы;
	
	Если Форма.Статус = Справочники.бит_СтатусыОбъектов.Заявка_Рабочая Тогда
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		СписокДоступныхВиз 	= бит_Визирование.ПолучитьВизыПользователя(ТекущийПользователь, Форма.Объект);
		
		Если СписокДоступныхВиз.НайтиПоЗначению(Справочники.бит_ГруппыВиз.ВсеВизы) <> Неопределено Тогда
			//Доступны все визы
			ЗаблокироватьЭлементы = Ложь;
		ИначеЕсли СписокДоступныхВиз.НайтиПоЗначению(СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Виза_БухгалтерБК")) <> Неопределено Тогда	
			//Бухгалтер (банк.группа)
			ЗаблокироватьЭлементы = Ложь;
		ИначеЕсли СписокДоступныхВиз.НайтиПоЗначению(СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Виза_БухгалтерОС")) <> Неопределено Тогда
			ДоступенПрофильРазноски = Истина;	
		ИначеЕсли СписокДоступныхВиз.НайтиПоЗначению(СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Виза_Казначей")) <> Неопределено Тогда
			ДоступенСтатьяОборотов 	= Истина;	
		КонецЕсли; 
		
	КонецЕсли; 
	
	ДоступноИзменениеЭлемента.Вставить("СтатьяОборотов", ДоступенСтатьяОборотов);
	
    ЭлементыФормы = Форма.Элементы;
	
	ЭлементыФормы.СБ_ПрофильРазноски.ТолькоПросмотр = ЗаблокироватьЭлементы И Не ДоступенПрофильРазноски;
	ЭлементыФормы.СБ_СрокИсполнения.ТолькоПросмотр 	= ЗаблокироватьЭлементы;
	ЭлементыФормы.СБ_Инициатор.ТолькоПросмотр 		= ЗаблокироватьЭлементы;
	
КонецПроцедуры

// +СБ. Широков Николай. 2014-09-11. ТЗ "Казначейство" 2.2.3.1. 
Функция ДанныеЗаявокИзСтрокКоллекции(КоллекцияСтрок) Экспорт 

	ДанныеЗаявок = Новый Соответствие;
	МассивЗаявок = Новый Массив;
	
	Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		
		ЗаявкаСсылка = СтрокаКоллекции.Ячейки.Заявка.Значение;
		Если Не ЗначениеЗаполнено(ЗаявкаСсылка) Тогда
			Продолжить;
		КонецЕсли; 
		
		МассивЗаявок.Добавить(ЗаявкаСсылка);
		
	КонецЦикла; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка,
	|	бит_СтатьиОборотов.ВидСтатьи,
	|	ПРЕДСТАВЛЕНИЕ(бит_СтатьиОборотов.ВидСтатьи)
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|		ПО бит_ЗаявкаНаРасходованиеСредств.СтатьяОборотов = бит_СтатьиОборотов.Ссылка
	|ГДЕ
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка В(&МассивЗаявок)";
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеЗаявок;	
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеЗаявки = Новый Структура(
		"ВидСтатьи,
		|ВидСтатьиПредставление");
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаявки, Выборка);
		
		ДанныеЗаявок.Вставить(Выборка.Ссылка, ДанныеЗаявки);
		
	КонецЦикла; 
	
	Возврат ДанныеЗаявок;
	
КонецФункции // -СБ. Широков Николай         

// +СБ. Широков Николай. 2014-09-11. ТЗ "Казначейство" 2.2.3.1. 
Функция ДанныеПлатежныхПозицийИзСтрокКоллекции(КоллекцияСтрок) Экспорт 

	ДанныеПлатежныхПозиций = Новый Соответствие;
	МассивПлатежныхПозиций = Новый Массив;
	
	Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		
		ПлатежнаяПозицияСсылка = СтрокаКоллекции.Ячейки.ПлатежнаяПозиция.Значение;
		Если Не ЗначениеЗаполнено(ПлатежнаяПозицияСсылка) Тогда
			Продолжить;
		КонецЕсли; 
		
		МассивПлатежныхПозиций.Добавить(ПлатежнаяПозицияСсылка);
		
	КонецЦикла; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(бит_ДополнительныеАналитики.ЗначениеАналитики КАК Документ.бит_ПлатежнаяПозиция) КАК ПлатежнаяПозиция,
	|	ВЫБОР
	|		КОГДА бит_ДополнительныеАналитики.Объект ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ТОГДА ВЫРАЗИТЬ(бит_ДополнительныеАналитики.Объект КАК Документ.СписаниеСРасчетногоСчета)
	//|		КОГДА бит_ДополнительныеАналитики.Объект ССЫЛКА Документ.РасходныйКассовыйОрдер
	//|			ТОГДА ВЫРАЗИТЬ(бит_ДополнительныеАналитики.Объект КАК Документ.РасходныйКассовыйОрдер)
	|	КОНЕЦ КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ПлатежныеДокументы
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|ГДЕ
	|	бит_ДополнительныеАналитики.ЗначениеАналитики В(&МассивСсылок)
	|	И бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция,
	|	бит_ДокументыМножественнойОплаты.ДокументОплаты
	|ИЗ
	|	РегистрСведений.бит_ДокументыМножественнойОплаты КАК бит_ДокументыМножественнойОплаты
	|ГДЕ
	|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ПлатежнаяПозиция.Ссылка КАК ПлатежнаяПозиция_Ссылка,
	|	бит_СтатьиОборотов.ВидСтатьи,
	|	ПРЕДСТАВЛЕНИЕ(бит_СтатьиОборотов.ВидСтатьи),
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка КАК Заявка_Ссылка,
	|	бит_ПлатежнаяПозиция.Проведен КАК ПлатежнаяПозиция_Проведен,
	|	бит_ПлатежнаяПозиция.Важность КАК ПлатежнаяПозиция_Важность,
	|	ПРЕДСТАВЛЕНИЕ(бит_ПлатежнаяПозиция.Важность) КАК ПлатежнаяПозиция_ВажностьПредставление,
	|	бит_ПлатежнаяПозиция.Номер КАК ПлатежнаяПозиция_Номер,
	|	бит_ПлатежнаяПозиция.Дата КАК ПлатежнаяПозиция_Дата,
	|	бит_ПлатежнаяПозиция.НомерВходящегоДокумента КАК ПлатежнаяПозиция_НомерВходящегоДокумента,
	|	бит_ПлатежнаяПозиция.ДатаВходящегоДокумента КАК ПлатежнаяПозиция_ДатаВходящегоДокумента,
	|	бит_ПлатежнаяПозиция.НазначениеПлатежа КАК ПлатежнаяПозиция_НазначениеПлатежа,
	|	бит_ПлатежнаяПозиция.СтавкаНДС КАК ПлатежнаяПозиция_СтавкаНДС,
	|	ПРЕДСТАВЛЕНИЕ(бит_ПлатежнаяПозиция.СтавкаНДС) КАК ПлатежнаяПозиция_СтавкаНДСПредставление,
	|	бит_ПлатежнаяПозиция.НДС КАК ПлатежнаяПозиция_НДС,
	|	бит_ПлатежнаяПозиция.ДатаРасхода КАК ПлатежнаяПозиция_ДатаРасхода,
	|	бит_ПлатежнаяПозиция.ДатаПлатежаКрайняя КАК ПлатежнаяПозиция_ДатаПлатежаКрайняя,
	|	бит_ЗаявкаНаРасходованиеСредств.Номер КАК Заявка_Номер,
	|	бит_ЗаявкаНаРасходованиеСредств.Дата КАК Заявка_Дата,
	|	бит_ЗаявкаНаРасходованиеСредств.Контрагент КАК Заявка_Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(бит_ЗаявкаНаРасходованиеСредств.Контрагент) КАК Заявка_КонтрагентПредставление,
	|	бит_ЗаявкаНаРасходованиеСредств.ДоговорКонтрагента КАК Заявка_ДоговорКонтрагента,
	|	ПРЕДСТАВЛЕНИЕ(бит_ЗаявкаНаРасходованиеСредств.ДоговорКонтрагента) КАК Заявка_ДоговорКонтрагентаПредставление,
	|	бит_ЗаявкаНаРасходованиеСредств.ЦФО КАК Заявка_ЦФО,
	|	ПРЕДСТАВЛЕНИЕ(бит_ЗаявкаНаРасходованиеСредств.ЦФО) КАК Заявка_ЦФОПредставление,
	|	бит_ЗаявкаНаРасходованиеСредств.Проект КАК Заявка_Проект,
	|	ПРЕДСТАВЛЕНИЕ(бит_ЗаявкаНаРасходованиеСредств.Проект) КАК Заявка_ПроектПредставление,
	|	бит_ЗаявкаНаРасходованиеСредств.ТипПлатежа КАК Заявка_ТипПлатежа,
	|	ПРЕДСТАВЛЕНИЕ(бит_ЗаявкаНаРасходованиеСредств.ТипПлатежа) КАК Заявка_ТипПлатежаПредставление,
	|	бит_СтатьиОборотов.Наименование КАК Заявка_СтатьяОборотовПредставление,
	|	бит_СтатусыОбъектов.Статус КАК Заявка_Статус,
	|	ПРЕДСТАВЛЕНИЕ(бит_СтатусыОбъектов.Статус) КАК Заявка_СтатусПредставление,
	|	СписаниеСРасчетногоСчета.Дата КАК ПлатежныйДокумент_Дата,
	|	СписаниеСРасчетногоСчета.Представление КАК ПлатежныйДокумент_Представление,
	|	СписаниеСРасчетногоСчета.Ссылка КАК ПлатежныйДокумент_Ссылка,
	|	ВЫБОР
	|		КОГДА бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Утверждена)
	|				И СписаниеСРасчетногоСчета.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФлажокДоступен
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|			ПО бит_ЗаявкаНаРасходованиеСредств.СтатьяОборотов = бит_СтатьиОборотов.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	|			ПО бит_ЗаявкаНаРасходованиеСредств.Ссылка = бит_СтатусыОбъектов.Объект
	|				И (бит_СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	|		ПО бит_ПлатежнаяПозиция.ДокументОснование = бит_ЗаявкаНаРасходованиеСредств.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлатежныеДокументы КАК ПлатежныеДокументы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|			ПО ПлатежныеДокументы.ПлатежныйДокумент = СписаниеСРасчетногоСчета.Ссылка
	|		ПО (ПлатежныеДокументы.ПлатежнаяПозиция = бит_ПлатежнаяПозиция.Ссылка)
	|ГДЕ
	|	бит_ПлатежнаяПозиция.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивПлатежныхПозиций);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеПлатежныхПозиций;	
	КонецЕсли; 
	
	СтрокаПоляДанных = "";
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтрокаПоляДанных = СтрокаПоляДанных + ?(ПустаяСтрока(СтрокаПоляДанных), "", ", ") + Колонка.Имя;
	КонецЦикла; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеПлатежнойПозиции = Новый Структура(СтрокаПоляДанных);
		
		ЗаполнитьЗначенияСвойств(ДанныеПлатежнойПозиции, Выборка);
		
		ДанныеПлатежныхПозиций.Вставить(Выборка.ПлатежнаяПозиция_Ссылка, ДанныеПлатежнойПозиции);
		
	КонецЦикла; 
	
	Возврат ДанныеПлатежныхПозиций;
	
КонецФункции // -СБ. Широков Николай         

Процедура УстановитьДоступностьРедактированияРеестраПлатежей(Форма, ТекущийСтатус) Экспорт
	
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	ЗаблокироватьЭлементы = (ТекущийСтатус = Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден);
	
	РеквизитыШапки = Новый Массив;
	РеквизитыШапки.Добавить("Дата");
	РеквизитыШапки.Добавить("Организация");
	РеквизитыШапки.Добавить("ЦФО");
	РеквизитыШапки.Добавить("СтатьяОборотов");
	РеквизитыШапки.Добавить("Проект");
	РеквизитыШапки.Добавить("СБ_ВидДокумента");
	РеквизитыШапки.Добавить("Ответственный");
	РеквизитыШапки.Добавить("Комментарий");
	
	Для каждого ИмяРеквизита Из РеквизитыШапки Цикл
		ЭлементыФормы[ИмяРеквизита].ТолькоПросмотр = ЗаблокироватьЭлементы;
	КонецЦикла; 
	
	КоллекцияКнопок = ЭлементыФормы.КоманднаяПанельЗаявки.Кнопки;
	КоллекцияКнопок.Подбор.Доступность 		= НЕ ЗаблокироватьЭлементы;
	
	Для каждого Кнопка Из КоллекцияКнопок.СБ_Действия.Кнопки Цикл
		Кнопка.Доступность = НЕ ЗаблокироватьЭлементы;
	КонецЦикла; 
	
	ЭлементыФормы.Заявки.ИзменятьСоставСтрок 	= НЕ ЗаблокироватьЭлементы;
	ЭлементыФормы.Заявки.ИзменятьПорядокСтрок 	= НЕ ЗаблокироватьЭлементы;
	
	КоллекцияКолонок = ЭлементыФормы.Заявки.Колонки;
	КоллекцияКолонок.БанковскийСчетОрганизация.ТолькоПросмотр 	= ЗаблокироватьЭлементы;
	КоллекцияКолонок.СуммаКОплате.ТолькоПросмотр				= ЗаблокироватьЭлементы;
	
КонецПроцедуры
//1c-izhtc А.В. Пушин )

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПредметОплаты(СтатьяОборотов, ВидСтатьи)

	ЗначениеПоУмолчанию = "";
	
	Если Не ЗначениеЗаполнено(СтатьяОборотов) Тогда
		Возврат ЗначениеПоУмолчанию;	
	КонецЕсли; 
	
	ОперативнаяДеятельность 	= Справочники.бит_ВидыСтатейОборотов.Выручка;
	ИнвестиционнаяДеятельность 	= Справочники.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность;
	
	Если ВидСтатьи = ОперативнаяДеятельность Тогда
		Возврат "услуги";
	ИначеЕсли СтатьяОборотов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗданий") Тогда	
	    Возврат "здания";
	ИначеЕсли СтатьяОборотов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗемли") Тогда	
	    Возврат "землю";
	ИначеЕсли СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокСтатейОборотов_ПриобритениеОборудования").НайтиПоЗначению(СтатьяОборотов) <> Неопределено Тогда	
	    Возврат "оборудование";
	ИначеЕсли ВидСтатьи = ИнвестиционнаяДеятельность Тогда
		Возврат "услуги";
	Иначе 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли; 

КонецФункции // ()
 
Функция ТекстНазначенияПлатежа(Параметры)
	
	//Шаблон = "Оплата за %1 по %2 № %3 от %4, в т.ч. НДС %5.";
	Шаблон = "Оплата за %1 по %2 № %3 от %4";
	
	Результат = СтрЗаменить(Шаблон, 	"%1", Параметры.Предмет);
	Результат = СтрЗаменить(Результат, 	"%2", Параметры.ВидДокумента);
	Результат = СтрЗаменить(Результат, 	"%3", Параметры.НомерДокумента);
	Результат = СтрЗаменить(Результат, 	"%4", Формат(Параметры.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	Результат = СтрЗаменить(Результат, 	"%5", Формат(Параметры.СуммаНДС, "ЧДЦ=2"));
	
	БезНДС = Ложь;
	
	Если Параметры.Свойство("БезНДС", БезНДС) И БезНДС Тогда
		Результат = Результат + ". Без НДС.";
	Иначе
		Результат = Результат + СтрЗаменить(", в т.ч. НДС %5.", "%5", Формат(Параметры.СуммаНДС, "ЧДЦ=2; ЧГ="));
	КонецЕсли; 
	
	Возврат Результат;	

КонецФункции // ()

Функция ПредопределенныеОрганизации() Экспорт

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-15 (#3101)
	//ПредопределенныеОрганизации = Новый Соответствие;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки,
	//|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение
	//|ИЗ
	//|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	//|ГДЕ
	//|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа";
	//Запрос.УстановитьПараметр("Группа", "Организации");

	//РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат ПредопределенныеОрганизации;
	//КонецЕсли; 
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ПредопределенныеОрганизации.Вставить(Выборка.ИмяНастройки, Выборка.Значение);
	//КонецЦикла; 
	//
	//Возврат ПредопределенныеОрганизации;
	//Заменено на:
	//Перенес в модуль повторного использования
	Возврат СБ_КазначействоПовтИсп.ПредопределенныеОрганизации();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-15 (#3101)
	
КонецФункции // ()

Функция ТаблицаПрофилейРазноски(Организация = Неопределено) Экспорт

	ПредопределенныеОрганизации = ПредопределенныеОрганизации();
	
	Если Организация = Неопределено Тогда
		ВидАналитикиОтбор = Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход;
	//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-06-11 (#НТП_МП_07)
	//ИначеЕсли Организация = ПредопределенныеОрганизации["Организация ОКЕЙ"] Тогда
	//	ВидАналитикиОтбор = Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_AXAPTA;
	//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец 2021-06-11 (#НТП_МП_07)
	ИначеЕсли Организация = ПредопределенныеОрганизации["Организация Лоджистикс"] Тогда
		ВидАналитикиОтбор = Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_AXAPTA;
	Иначе
		ВидАналитикиОтбор = Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_1С;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КодыАналитикиAXAPTA.Аналитика КАК Код,
	|	КодыАналитикиAXAPTA.НаименованиеАналитики КАК Наименование
	|ИЗ
	|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК КодыАналитикиAXAPTA
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК Отбор
	|		ПО КодыАналитикиAXAPTA.Аналитика = Отбор.Аналитика
	|			И (Отбор.ВидАналитики = &ВидАналитикиОтбор)
	|			И (Отбор.ЗначениеАналитики = ИСТИНА)
	|ГДЕ
	|	КодыАналитикиAXAPTA.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодыАналитикиAXAPTA.Аналитика";
	Запрос.УстановитьПараметр("ВидАналитикиОтбор", ВидАналитикиОтбор);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции // ()

Процедура ПоступлениеНаРасчетныйСчетФормаДокументаПриОткрытии(Форма) Экспорт
	
	ЭлементыФормы 		= Форма.Элементы;

// +СБ. Широков Николай. 2014-11-25. ТЗ "Казначейство" 2.2.10.2

	ПолеВвода = ЭлементыФормы.Добавить("СБ_ПрофильРазноски", Тип("ПолеФормы"), ЭлементыФормы.ГруппаШапкаЛевая);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = "Объект.СБ_ПрофильРазноски";
	ПолеВвода.Заголовок = "Профиль разноски";
	ПолеВвода.КнопкаВыбора = Истина;
	
	ПолеВвода.УстановитьДействие("НачалоВыбора", 			"СБ_ПрофильРазноскиНачалоВыбора");
	ПолеВвода.УстановитьДействие("АвтоПодбор", 		"СБ_ПрофильРазноскиАвтоПодборТекста");
	ПолеВвода.УстановитьДействие("ОкончаниеВводаТекста", 	"СБ_ПрофильРазноскиОкончаниеВводаТекста");
	
	ЭлементыФормы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного 					= Истина;
	ЭлементыФормы.РасшифровкаПлатежаИнкассацияСтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного 		= Истина;
	ЭлементыФормы.РасшифровкаПлатежаПокупкаВалютыСтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного 	= Истина;
	ЭлементыФормы.РасшифровкаПлатежаПродажаВалютыСтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного 			= Истина;
	ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочие.АвтоОтметкаНезаполненного 		= Истина;
	ЭлементыФормы.РасшифровкаПлатежаПлатежныеКартыСтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного 			= Истина;
	//ЭлементыФормы.СтатьяДвиженияДенежныхСредствВозвратЗаймаРаботником.АвтоОтметкаНезаполненного 			= Истина;
	//ЭлементыФормы.СтатьяДвиженияДенежныхСредствЛичныеСредства.АвтоОтметкаНезаполненного 			= Истина;
	
	//ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочие.УстановитьДействие("ПриИзменении", "СБ_СтатьяДДСПриИзменении");
	//ЭлементыФормы.РасшифровкаПлатежаИнкассацияСтатьяДвиженияДенежныхСредств.УстановитьДействие("ПриИзменении", "СБ_СтатьяДДСПриИзменении");
	
	//ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом1.ТолькоПросмотр				= Истина;
	//ЭлементыФормы.СчетБанк.ТолькоПросмотр										= Истина;
	ЭлементыФормы.РасшифровкаПлатежаПлатежныеКартыСчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр	= Истина;
	ЭлементыФормы.РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр	= Истина;
	ЭлементыФормы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр					= Истина;
	ЭлементыФормы.СчетУчетаУслугиБанка.ТолькоПросмотр	= Истина;
	ЭлементыФормы.СчетУчетаПрочие.ТолькоПросмотр	= Истина;
	ЭлементыФормы.РасшифровкаПлатежаСчетНаОплату.ТолькоПросмотр					= Истина;
	ЭлементыФормы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.ТолькоПросмотр	= Истина;
	ЭлементыФормы.РасшифровкаПлатежаОтражениеАвансаСчетУчета.ТолькоПросмотр	= Истина;
	
// -СБ. Широков Николай 	

КонецПроцедуры

Функция ПоОрганизацииРазрешенВводЗаявок(Организация)

	Если Организация.Пустая() Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	СписокРазрешенныхОрганизаций = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_ФормироватьЗаявкиНаОплату");
	Если СписокРазрешенныхОрганизаций.НайтиПоЗначению(Организация) = Неопределено Тогда
		Возврат Ложь;	
	Иначе
		Возврат Истина;
	КонецЕсли; 
		
КонецФункции // ()

// +СБ. Широков Николай. 2014-09-04. Доработка #1094	
Процедура ОрганизацияНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, КромеРазрешенных = Ложь) Экспорт
	
	//1c-izhtc spawn 28.08.15
	ВызватьИсключение "Необходимо использовать процедуру ОрганизацияНачалоВыбора из общего модуля СБ_КазначействоКлиент!";
	
КонецПроцедуры // -СБ. Широков Николай

Процедура ПлатежноеПоручениеФормаДокументаПриОткрытии(Форма, ЭтоНовый) Экспорт
	
	ЭлементыФормы 		= Форма.Элементы;

// +СБ. Широков Николай. 2014-10-22. Доработка #1094
	Если ЭтоНовый Тогда
		
		Если ПоОрганизацииРазрешенВводЗаявок(Форма.Объект.Организация) Тогда
			Форма.Объект.Организация = Справочники.Организации.ПустаяСсылка();	
		КонецЕсли; 
		
	КонецЕсли;
	
	ЭлементыФормы.Организация.УстановитьДействие("НачалоВыбора", 			"СБ_ОрганизацияНачалоВыбора");
// +СБ. Широков Николай. 2015-02-25. Консультация #1356 
	
	ПолеВвода = ЭлементыФормы.Добавить("СБ_ВыгруженВКлиентБанка", Тип("ПолеФормы"), ЭлементыФормы.ГруппаПодвал);
	ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеВвода.ПутьКДанным = "Объект.СБ_ВыгруженВКлиентБанка";
	ПолеВвода.Заголовок = "Выгружен";

// -СБ. Широков Николай 	

КонецПроцедуры

Процедура СписаниеСРасчетногоСчетаФормаДокументаПриОткрытии(Форма) Экспорт
	
	ЭлементыФормы 		= Форма.Элементы;

// +СБ. Широков Николай. 2014-10-22. Доработка #1092

	ПолеВвода = ЭлементыФормы.Добавить("СБ_ПрофильРазноски", Тип("ПолеФормы"), ЭлементыФормы.ГруппаШапкаЛевая);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = "Объект.СБ_ПрофильРазноски";
	ПолеВвода.Заголовок = "Профиль разноски:";
	ПолеВвода.КнопкаВыбора = Истина;
	
	ПолеВвода.УстановитьДействие("НачалоВыбора", 			"СБ_ПрофильРазноскиНачалоВыбора");
	ПолеВвода.УстановитьДействие("АвтоПодбор", 		"СБ_ПрофильРазноскиАвтоПодборТекста");
	ПолеВвода.УстановитьДействие("ОкончаниеВводаТекста", 	"СБ_ПрофильРазноскиОкончаниеВводаТекста");
// -СБ. Широков Николай 	
	
// +СБ. Широков Николай. 2014-12-22. Доработка #1192 
	ЭлементыФормы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного 					= Истина;
	ЭлементыФормы.СтатьяДвиженияДенежныхСредствЗарплатаПоВедомостям.АвтоОтметкаНезаполненного 	= Истина;
	ЭлементыФормы.СтатьяДвиженияДенежныхСредствЗарплатаРаботнику.АвтоОтметкаНезаполненного 			= Истина;
	//ЭлементыФормы.СтатьяДвиженияДенежныхСредствЗарплатаПоВедомостямСводно.АвтоОтметкаНезаполненного 		= Истина;
	ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочие.АвтоОтметкаНезаполненного 			= Истина;
	//ЭлементыФормы.СтатьяДвиженияДенежныхСредствДепонентыПустая.АвтоОтметкаНезаполненного 			= Истина;
	ЭлементыФормы.СтатьяДвиженияДенежныхСредствДепонентыВедомость.АвтоОтметкаНезаполненного 			= Истина;
	
	ЭлементыФормы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр	= Истина;
	ЭлементыФормы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.ТолькоПросмотр					= Истина;
	
// -СБ. Широков Николай 	

КонецПроцедуры

Процедура ПриИзмененииСтатьиДДСВПоступленииДС(СчетУчетаРасчетовСКонтрагентом, СубконтоКт1, СтатьяДвиженияДенежныхСредств) Экспорт
	Счет_5701 = ПланыСчетов.Хозрасчетный.ПереводыВПути;
	Счет_5721 = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал;
	
	Если СчетУчетаРасчетовСКонтрагентом = Счет_5701 
		ИЛИ СчетУчетаРасчетовСКонтрагентом = Счет_5721
		Тогда
		
		СубконтоКт1 = СБ_КазначействоСервер.ВидПереводовПоСтатьеДДС(СтатьяДвиженияДенежныхСредств);
		
	КонецЕсли; 
КонецПроцедуры

//+Сундукова 04.04.2016 - почему-то перенесли в другой общий модуль - возвращаю
Процедура ОбновитьПодразделениеПоПрофилюРазноски(Подразделение, Организация, ПрофильРазноски) Экспорт

	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-06-04 (#НТП_МП_ФР07)
	#Область СтарыйКод	  
	//СписокОрганизаций_НеПогашатьЗадолженность = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_НеПогашатьЗадолженность");
	//Если СписокОрганизаций_НеПогашатьЗадолженность <> Неопределено 
	//И СписокОрганизаций_НеПогашатьЗадолженность.НайтиПоЗначению(Организация) <> Неопределено Тогда
	//Подразделение = СБ_КазначействоПовтИсп.ПодразделениеПоПрофилюРазноски(Организация, ПрофильРазноски);
	
	//КонецЕсли; 
	#КонецОбласти
	Подразделение = СБ_КазначействоПовтИсп.ПодразделениеПоПрофилюРазноски(Организация, ПрофильРазноски);
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-06-04 (#НТП_МП_ФР07)

КонецПроцедуры
//-Сундукова 04.04.2016 - почему-то перенесли в другой общий модуль - возвращаю

// +СБ. Полякова Ирина. 2016-11-13. Redmine 2704 
Процедура ПроведениеМодернизацияОСВРазрезеСтатейЗатратПропорционально(Источник, Отказ, РежимПроведения) Экспорт
	
#Область КонтрольКорректностиЗаполненияТЧАналитика

	Для Каждого СтрокаТЧ из Источник.Аналитика Цикл 
		Если СтрокаТЧ.СуммаБУ <> СтрокаТЧ.СуммаНУ + СтрокаТЧ.СуммаПР + СтрокаТЧ.СуммаВР Тогда
			ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,"Доп. Аналитика, Строка " + СтрокаТЧ.НомерСтроки + ": Сумма БУ не равна сумме НУ + ПР + ВР");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ШаблонСообщения = НСтр("ru = 'Итог по колонке ""%1"" отличается от значения поля ""%2""!'");
	МетаданныеИсточника = Источник.Метаданные();
	Если Источник.Аналитика.Итог("СуммаБУ") <> Источник.СтоимостьБУ Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			МетаданныеИсточника.ТабличныеЧасти.Аналитика.Реквизиты.СуммаБУ.Представление(),
			МетаданныеИсточника.Реквизиты.СтоимостьБУ.Представление());
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("СПИСОК", "КОРРЕКТНОСТЬ", , ,
			МетаданныеИсточника.ТабличныеЧасти.Аналитика.Представление(), ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, "Доп.аналитика", , Отказ);
	КонецЕсли;
	Если Источник.Аналитика.Итог("СуммаНУ") <> Источник.СтоимостьНУ Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			МетаданныеИсточника.ТабличныеЧасти.Аналитика.Реквизиты.СуммаНУ.Представление(),
			МетаданныеИсточника.Реквизиты.СтоимостьНУ.Представление());
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("СПИСОК", "КОРРЕКТНОСТЬ", , ,
			МетаданныеИсточника.ТабличныеЧасти.Аналитика.Представление(), ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, "Доп.аналитика", , Отказ);
	КонецЕсли;
#КонецОбласти

	Если Отказ тогда 
		Возврат;
	КонецЕсли;

#Область ФормированиеДвижений

	СчетЗамены = Источник.СчетУчетаВнеоборотногоАктива;
	
	//Формирование движений	
	ТаблицаДвиженияБУ = Источник.Движения.Хозрасчетный.Выгрузить();
	
	строкиЗамены = ТаблицаДвиженияБУ.НайтиСтроки(Новый Структура("СчетКт", Источник.СчетУчетаВнеоборотногоАктива));	
	Если  строкиЗамены.Количество() > 0 тогда       			
		
		Для Каждого СтрокаТЧ из Источник.Аналитика Цикл 
			
			ТаблицаНовыеСтроки = ТаблицаДвиженияБУ.СкопироватьКолонки();
			Для Каждого СтрокаЗамены Из строкиЗамены Цикл
				
				НоваяСтрока			= ТаблицаНовыеСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗамены);
				НоваяСтрока.Сумма		= ?(Источник.СтоимостьБУ = 0, 0, СтрокаТЧ.СуммаБУ * СтрокаЗамены.Сумма/Источник.СтоимостьБУ);
				
				НоваяСтрока.СуммаВРДт	= ?(Источник.СтоимостьВР = 0, 0, СтрокаТЧ.СуммаВР * СтрокаЗамены.СуммаВРДт/Источник.СтоимостьВР);
				НоваяСтрока.СуммаВРКт	= ?(Источник.СтоимостьВР = 0, 0, СтрокаТЧ.СуммаВР * СтрокаЗамены.СуммаВРКт/Источник.СтоимостьВР);
				
				НоваяСтрока.СуммаПРДт	= ?(Источник.СтоимостьПР = 0, 0, СтрокаТЧ.СуммаПР * СтрокаЗамены.СуммаПРДт/Источник.СтоимостьПР);
				НоваяСтрока.СуммаПРКт	= ?(Источник.СтоимостьПР = 0, 0, СтрокаТЧ.СуммаПР * СтрокаЗамены.СуммаПРКт/Источник.СтоимостьПР);

				НоваяСтрока.СуммаНУДт	= ?(Источник.СтоимостьНУ = 0, 0, СтрокаТЧ.СуммаНУ * СтрокаЗамены.СуммаНУДт/Источник.СтоимостьНУ);
				НоваяСтрока.СуммаНУКт	= ?(Источник.СтоимостьНУ = 0, 0, СтрокаТЧ.СуммаНУ * СтрокаЗамены.СуммаНУКт/Источник.СтоимостьНУ);
				
				НоваяСтрока.ВидСубконтоКт2	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
				НоваяСтрока.СубконтоКт2		= СтрокаТЧ.СтатьяЗатрат;
				НоваяСтрока.ПодразделениеКт	= СтрокаТЧ.Подразделение;
						
			КонецЦикла;
			
			//Добавка потерь при округлении  в первую строку
			ТаблицаНовыеСтроки[0].Сумма = ТаблицаНовыеСтроки[0].Сумма - ТаблицаНовыеСтроки.Итог("Сумма") + СтрокаТЧ.СуммаБУ;
  			ТаблицаНовыеСтроки[0].СуммаВРДт = ТаблицаНовыеСтроки[0].СуммаВРДт - ТаблицаНовыеСтроки.Итог("СуммаВРДт") + СтрокаТЧ.СуммаВР;
			ТаблицаНовыеСтроки[0].СуммаВРКт = ТаблицаНовыеСтроки[0].СуммаВРКт - ТаблицаНовыеСтроки.Итог("СуммаВРКт") + СтрокаТЧ.СуммаВР;
			ТаблицаНовыеСтроки[0].СуммаПРДт = ТаблицаНовыеСтроки[0].СуммаПРДт - ТаблицаНовыеСтроки.Итог("СуммаПРДт") + СтрокаТЧ.СуммаПР;
			ТаблицаНовыеСтроки[0].СуммаПРКт = ТаблицаНовыеСтроки[0].СуммаПРКт - ТаблицаНовыеСтроки.Итог("СуммаПРКт") + СтрокаТЧ.СуммаПР;
			ТаблицаНовыеСтроки[0].СуммаНУДт = ТаблицаНовыеСтроки[0].СуммаНУДт - ТаблицаНовыеСтроки.Итог("СуммаНУДт") + СтрокаТЧ.СуммаНУ;
			ТаблицаНовыеСтроки[0].СуммаНУКт = ТаблицаНовыеСтроки[0].СуммаНУКт - ТаблицаНовыеСтроки.Итог("СуммаНУКт") + СтрокаТЧ.СуммаНУ;


			//добавим новые строки			
			для каждого НоваяСтрока из ТаблицаНовыеСтроки цикл
				Движение = ТаблицаДвиженияБУ.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,НоваяСтрока);
			конеццикла;
		    
		Конеццикла;
		
		Для каждого СтрокаЗамены из строкиЗамены
		Цикл
			ТаблицаДвиженияБУ.Удалить(СтрокаЗамены);
		КонецЦикла;
		
		Источник.Движения.Хозрасчетный.Загрузить(ТаблицаДвиженияБУ);
		
	КонецЕсли;
#КонецОбласти

КонецПроцедуры // -СБ. Полякова Ирина

//ОКЕЙ Рычаков А.C. (СофтЛаб) Начало 2019-12-08 (#3437)
&НаСервере
Процедура УстановитьЗначениеКонстантыNEW(Идентификатор, Значение, ПоместитьВХранилище =  Ложь) Экспорт 
		
	НаборСБ_НастройкиКазначейства = РегистрыСведений.СБ_НастройкиКазначейства.СоздатьНаборЗаписей();
	НаборСБ_НастройкиКазначейства.Отбор.Идентификатор.Установить(Идентификатор);
	НаборСБ_НастройкиКазначейства.Прочитать();
	
	Если ПоместитьВХранилище Тогда
		
		Для Каждого ЗаписьНабора из НаборСБ_НастройкиКазначейства Цикл
			ЗаписьНабора.ЗначениеВХранилище = Истина;
			ЗаписьНабора.ХранилищеЗначения = Новый ХранилищеЗначения(Значение);
		КонецЦикла;
		
	Иначе
		Для Каждого ЗаписьНабора из НаборСБ_НастройкиКазначейства Цикл
			ЗаписьНабора.Значение = Значение;
		КонецЦикла;
	КонецЕсли;
	
	НаборСБ_НастройкиКазначейства.Записать();

КонецПроцедуры
//ОКЕЙ Рычаков А.C. (СофтЛаб) Конец  2019-12-08 (#3437)
