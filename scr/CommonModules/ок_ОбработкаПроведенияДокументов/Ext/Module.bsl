/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Общий модуль выполняет обработку события "ОбработкаПроведения" 
// Для объектов включенных в подписку "ок_ОбработкаПроведенияДокументов"
//
// Для расширения функциональности, необходимо:
// 1. Включить "ДокументОбъект" в подписку "ок_ОбработкаПроведенияДокументов"
// 2. В процедуре "ок_обработкаПроведенияДокументовОбработкаПроведения" добавить ветку условия с проверкой на тип источника
// 3. Создать область по шаблону "Документ_ИмяДокумента"
// 4. Создать процедуру внутри области по шаблону "ОбработкаПроведенияДокумента_ИмяДокумента"
// 5. Вызвать созданную процедуру из ветки условия в процедуре "ок_обработкаПроведенияДокументовОбработкаПроведения"
// 6. Необходимые служебные процедуры и функции размещать в области модуля "СлужебныеПроцедурыИФункции"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//Процедура вызываемая подпиской на событие "ок_ОбработкаПроведенияДокументов"
// Параметры:
// Источник - Документ, Тип - ДокументОбъект
// Отказ - Флаг отказа, Тип - Булево
// РежимПроведения - РежимПроведенияДокумента, Тип - РежимПроведения
Процедура ок_обработкаПроведенияДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-11-04 (#4297) 
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_му_ПринятиеКУчетуОС") Тогда 
		
		ОбработкаПроведения_бит_му_ПринятиеКУчетуОС(Источник, Отказ, РежимПроведения);
		
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-11-06 (#4407)
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		ОбработкаПроведения_ПоступлениеТоваровИУслуг(Источник, Отказ, РежимПроведения);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		
		ОбработкаПроведения_КорректировкаПоступления(Источник, Отказ, РежимПроведения);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-11-06 (#4407)
		
	КонецЕсли;
	// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-11-04 (#4297) 
	
КонецПроцедуры

#КонецОбласти

// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-11-04 (#4297) 
#Область Документ_бит_му_ПринятиеКУчетуОС

Процедура ОбработкаПроведения_бит_му_ПринятиеКУчетуОС(Источник, Отказ, РежимПроведения)
	
	УстановитьПризнакиПараллельногоУчетаМСФОВОСИсточника(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти
// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-11-04 (#4297) 

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-11-06 (#4407)
#Область Документ_ПоступлениеТоваровИУслуг

Процедура ОбработкаПроведения_ПоступлениеТоваровИУслуг(Источник, Отказ, РежимПроведения)
	
	СформироватьАрендныеОборотыПоБюджетамДляПТУ(Источник, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура СформироватьАрендныеОборотыПоБюджетамДляПТУ(Источник, Отказ, РежимПроведения)
	
	Если Источник.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.бит_му_Настройки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Группа.Установить("Аренда_ФСБУ25");
	НаборЗаписей.Отбор.ИмяНастройки.Установить("Счета учета (Арендные обязательства)");
	НаборЗаписей.Прочитать();
	
	СчетаУчета = Новый Массив;
	
	Для каждого Настройка Из НаборЗаписей Цикл
		СчетаУчета.Добавить(Настройка.Значение);
	КонецЦикла;
	
	Если СчетаУчета.Найти(Источник.Услуги[0].СчетЗатрат) = Неопределено Тогда // Если в первой строке нет счета указанного в настройках, тогда движения не формируем
		Возврат;
	КонецЕсли;
	
	Сценарий = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Справочники.бит_ВидыСоответствийАналитик.ок_Валюта_СценарийПланирования,
																																Источник.ВалютаДокумента);
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось сформировать движения по регистру ""Обороты по бюджетам (БИТ)"", не найден сценарий планирования для валюты %1'"), Источник.ВалютаДокумента);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		ЗаписьЖурналаРегистрации("Данные.Проведение", УровеньЖурналаРегистрации.Ошибка, Источник.Метаданные(), Источник.Ссылка, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ВалютаУправленческогоУчета		= ок_ОбщегоНазначенияСерверПовтИсп.ПолучитьЗначениеКонстантыВПривилегированномРежиме("бит_ВалютаУправленческогоУчета");
	
	Для каждого Строка Из Источник.Услуги Цикл
		
		Движение = Источник.Движения.бит_ОборотыПоБюджетам.Добавить();
		Движение.Период 			= Источник.Дата;
		Движение.Сценарий			= Сценарий;
		Движение.ЦФО				= Строка.ок_ЦФО;
		Движение.СтатьяОборотов		= Строка.ок_СтатьяОборотов;
		Движение.Аналитика_2		= Строка.ок_Аналитика_2;
		Движение.Контрагент			= Источник.Контрагент;
		Движение.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		Движение.Валюта				= Источник.ВалютаДокумента;
		Движение.Аналитика_4		= Источник.ОК_ID_Разноска;
		Движение.Количество 		= Строка.Количество;
		Движение.Сумма 				= Строка.Сумма - ?(Источник.СуммаВключаетНДС, Строка.СуммаНДС, 0);
		
		Движение.СуммаРегл 			= бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Движение.Сумма,
																			Источник.ВалютаДокумента,
																			ВалютаРегламентированногоУчета,
																			Источник.КурсВзаиморасчетов,
																			1,
																			Источник.КратностьВзаиморасчетов,
																			1);
		Движение.СуммаУпр 			= бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Движение.Сумма,
																			Источник.ВалютаДокумента,
																			ВалютаУправленческогоУчета,
																			Источник.КурсВзаиморасчетов,
																			1,
																			Источник.КратностьВзаиморасчетов,
																			1);
		Движение.СуммаСценарий		= Движение.Сумма;
		Движение.СуммаСНДС 			= Строка.Сумма + ?(Источник.СуммаВключаетНДС, 0, Строка.СуммаНДС);
		
		Движение.СуммаСНДСРегл 		= бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Движение.СуммаСНДС,
																			Источник.ВалютаДокумента,
																			ВалютаРегламентированногоУчета,
																			Источник.КурсВзаиморасчетов,
																			1,
																			Источник.КратностьВзаиморасчетов,
																			1);
		Движение.СуммаСНДСУпр		= бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Движение.СуммаСНДС,
																			Источник.ВалютаДокумента,
																			ВалютаУправленческогоУчета,
																			Источник.КурсВзаиморасчетов,
																			1,
																			Источник.КратностьВзаиморасчетов,
																			1);
		Движение.СуммаСНДССценарий	= Движение.СуммаСНДС;
		Движение.СтавкаНДС			= Строка.СтавкаНДС;
		Движение.Комментарий		= Источник.Комментарий;
		Движение.бит_БК_Организация = Источник.Организация;
		
	КонецЦикла;
	
	Источник.Движения.бит_ОборотыПоБюджетам.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Документ_КорректировкаПоступления

Процедура ОбработкаПроведения_КорректировкаПоступления(Источник, Отказ, РежимПроведения)
	
	СформироватьАрендныеОборотыПоБюджетамДляКорректировкиПТУ(Источник, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура СформироватьАрендныеОборотыПоБюджетамДляКорректировкиПТУ(Источник, Отказ, РежимПроведения)
	
	Если ТипЗнч(Источник.ДокументПоступления) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ДокументПоступления, "ВидОперации");
	
	Если ВидОперацииПТУ <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.бит_му_Настройки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Группа.Установить("Аренда_ФСБУ25");
	НаборЗаписей.Отбор.ИмяНастройки.Установить("Счета учета (Арендные обязательства)");
	НаборЗаписей.Прочитать();
	
	СчетаУчета = Новый Массив;
	
	Для каждого Настройка Из НаборЗаписей Цикл
		СчетаУчета.Добавить(Настройка.Значение);
	КонецЦикла;
	
	Если СчетаУчета.Найти(Источник.Услуги[0].СчетЗатрат) = Неопределено Тогда // Если в первой строке нет счета указанного в настройках, тогда движения не формируем
		Возврат;
	КонецЕсли;
	
	Сценарий = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Справочники.бит_ВидыСоответствийАналитик.ок_Валюта_СценарийПланирования,
																																Источник.ВалютаДокумента);
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось сформировать движения по регистру ""Обороты по бюджетам (БИТ)"", не найден сценарий планирования для валюты %1'"), Источник.ВалютаДокумента);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		ЗаписьЖурналаРегистрации("Данные.Проведение", УровеньЖурналаРегистрации.Ошибка, Источник.Метаданные(), Источник.Ссылка, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ВалютаУправленческогоУчета		= ок_ОбщегоНазначенияСерверПовтИсп.ПолучитьЗначениеКонстантыВПривилегированномРежиме("бит_ВалютаУправленческогоУчета");
	
	СтруктураКурсаВалют				= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Источник.ВалютаДокумента, 	Источник.Дата);
	
	Для каждого Строка Из Источник.Услуги Цикл
		
		Движение = Источник.Движения.бит_ОборотыПоБюджетам.Добавить();
		Движение.Период 			= Источник.Дата;
		Движение.Сценарий			= Сценарий;
		Движение.ЦФО				= Строка.ок_ЦФО;
		Движение.СтатьяОборотов		= Строка.ок_СтатьяОборотов;
		Движение.Аналитика_2		= Строка.ок_Аналитика_2;
		Движение.Контрагент			= Источник.Контрагент;
		Движение.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		Движение.Валюта				= Источник.ВалютаДокумента;
		Движение.Аналитика_4		= Источник.ОК_ID_Разноска;
		Движение.Количество 		= Строка.Количество;
		Движение.Сумма 				= Строка.Сумма - Строка.СуммаДоИзменения - ?(Источник.СуммаВключаетНДС, Строка.СуммаНДС - Строка.СуммаНДСДоИзменения, 0);
		
		Движение.СуммаРегл 			= бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Движение.Сумма,
																			Источник.ВалютаДокумента,
																			ВалютаРегламентированногоУчета,
																			СтруктураКурсаВалют.Курс,
																			1,
																			СтруктураКурсаВалют.Кратность,
																			1);
		Движение.СуммаУпр 			= бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Движение.Сумма,
																			Источник.ВалютаДокумента,
																			ВалютаУправленческогоУчета,
																			СтруктураКурсаВалют.Курс,
																			1,
																			СтруктураКурсаВалют.Кратность,
																			1);
		Движение.СуммаСценарий		= Движение.Сумма;
		
		Если Источник.СуммаВключаетНДС Тогда
			Движение.СуммаСНДС		= Строка.Сумма - Строка.СуммаДоИзменения;
		Иначе
			Движение.СуммаСНДС 		= Строка.Сумма + Строка.СуммаНДС - Строка.СуммаДоИзменения - Строка.СуммаНДСДоИзменения;
		КонецЕсли;
		
		Движение.СуммаСНДСРегл 		= бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Движение.СуммаСНДС,
																			Источник.ВалютаДокумента,
																			ВалютаРегламентированногоУчета,
																			СтруктураКурсаВалют.Курс,
																			1,
																			СтруктураКурсаВалют.Кратность,
																			1);
		Движение.СуммаСНДСУпр		= бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Движение.СуммаСНДС,
																			Источник.ВалютаДокумента,
																			ВалютаУправленческогоУчета,
																			СтруктураКурсаВалют.Курс,
																			1,
																			СтруктураКурсаВалют.Кратность,
																			1);
		Движение.СуммаСНДССценарий	= Движение.СуммаСНДС;
		Движение.СтавкаНДС			= Строка.СтавкаНДС;
		Движение.Комментарий		= Источник.Комментарий;
		Движение.бит_БК_Организация = Источник.Организация;
		
	КонецЦикла;
	
	Источник.Движения.бит_ОборотыПоБюджетам.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-11-06 (#4407)

#Область СлужебныеПроцедурыИФункции

// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-11-04 (#4297) 
Процедура УстановитьПризнакиПараллельногоУчетаМСФОВОСИсточника(Источник, Отказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ОсновныеСредства.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_му_ПринятиеКУчетуОС.ОсновныеСредства КАК бит_му_ПринятиеКУчетуОСОсновныеСредства
	                      |		ПО ОсновныеСредства.Ссылка = бит_му_ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство
	                      |			И (бит_му_ПринятиеКУчетуОСОсновныеСредства.Ссылка = &ДокументПринятияКУчету)
	                      |			И (НЕ ОсновныеСредства.ОК_ПараллельныйМСФО)
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_му_КлассыОсновныхСредств КАК бит_му_КлассыОсновныхСредств
	                      |		ПО ОсновныеСредства.БИТ_ГруппаОСУУ = бит_му_КлассыОсновныхСредств.Ссылка
	                      |			И (бит_му_КлассыОсновныхСредств.ок_АвтоматическийПараллельныйУчет)");
	
	Запрос.УстановитьПараметр("ДокументПринятияКУчету", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОС = Выборка.Ссылка.ПолучитьОбъект();
		ОС.ОК_ПараллельныйМСФО = Истина;
		
		Попытка
			
			ОС.Записать();
			
		Исключение
			
			ОписаниеОшибки	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстОшибки		= СтрШаблон("Ошибка установки признака ""Параллельный учет в МСФО"" для основного средства ""%1"": %2",
										ОС,
										ОписаниеОшибки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
			
		КонецПопытки;
				
	КонецЦикла;
	
КонецПроцедуры
// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-11-04 (#4297) 

#КонецОбласти