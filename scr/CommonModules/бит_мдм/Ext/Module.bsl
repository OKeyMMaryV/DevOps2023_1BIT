
#Область СлужебныйПрограммныйИнтерфейс

#Область Подписки

 // Процедура обработчик подписки "бит_мдм_ОбъектТекущейБазыОбработкаЗаполнения".
 // 
 // Параметры:
 // Источник - СправочникОбъект
 // Отказ - Булево.
 // 
 Процедура бит_мдм_ОбъектТекущейБазыОбработкаЗаполненияОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	 
	ИспользоватьМДМ = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_мдм_Использовать");
	
	Если НЕ ИспользоватьМДМ  Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		флЗаполнениеФормыЗаявки = ?(ДанныеЗаполнения.Свойство("бит_мдм_ЗаполнениеЗаявки") И  ДанныеЗаполнения.бит_мдм_ЗаполнениеЗаявки = Истина, Истина, Ложь);
	Иначе	
		флЗаполнениеФормыЗаявки = Ложь;
	КонецЕсли; 
	
	Если флЗаполнениеФормыЗаявки Тогда
	
		 ИсточникМета = Источник.Метаданные();
		 МодельОбъекта = ДанныеЗаполнения.МодельОбъекта;
		 
		 Для каждого МетаРеквизит Из ИсточникМета.СтандартныеРеквизиты Цикл
		 
		 	Если МодельОбъекта.СтандартныеРеквизиты.Свойство(МетаРеквизит.Имя) Тогда
				
				 Если МетаРеквизит.Имя = "Код" ИЛИ МетаРеквизит.Имя = "ЭтоГруппа" Тогда
				 
				 	  Продолжить;
				 
				 КонецЕсли; 
				
				 Источник[МетаРеквизит.Имя] = МодельОбъекта.СтандартныеРеквизиты[МетаРеквизит.Имя];
			
			КонецЕсли; 
		 
		 КонецЦикла; 
		 
		 Для каждого МетаРеквизит Из ИсточникМета.Реквизиты Цикл
		 
		 	Если МодельОбъекта.Реквизиты.Свойство(МетаРеквизит.Имя) Тогда
			
				 Источник[МетаРеквизит.Имя] = МодельОбъекта.Реквизиты[МетаРеквизит.Имя];
			
			КонецЕсли; 
		 
		 КонецЦикла; 
		 
		 Для каждого МетаТабЧасть Из ИсточникМета.ТабличныеЧасти Цикл
		 
		 	Если МодельОбъекта.ТабличныеЧасти.Свойство(МетаТабЧасть.Имя) Тогда
			
				 Источник[МетаТабЧасть.Имя].Очистить();
				 
				 Для каждого МодельСтроки Из МодельОбъекта.ТабличныеЧасти[МетаТабЧасть.Имя] Цикл
				 
				 	НоваяСтрока = Источник[МетаТабЧасть.Имя].Добавить();
					Для каждого МетаРеквизит Из МетаТабЧасть.Реквизиты Цикл
					
						  Если МодельСтроки.Свойство(МетаРеквизит.Имя) Тогда
						  
						  	    НоваяСтрока[МетаРеквизит.Имя] = МодельСтроки[МетаРеквизит.Имя];
						  
						  КонецЕсли; 
					
					КонецЦикла;
				 
				 КонецЦикла; 
			
			КонецЕсли; 
		 
		 КонецЦикла; 
		 
		 
	КонецЕсли; 
	
 КонецПроцедуры

 // Процедура обработчик подписки "бит_мдм_ОбъектОбменаПередЗаписью".
 // 
 // Параметры:
 // Источник - СправочникОбъект.
 // Отказ - Булево.
 // 
 Процедура бит_мдм_ОбъектОбменаПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	 
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	ИспользоватьМДМ = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_мдм_Использовать");
	
	Если НЕ ИспользоватьМДМ ИЛИ Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 	 
	 
	 Источник.ДополнительныеСвойства.Вставить("бит_мдм_ЭтоНовый", Источник.ЭтоНовый());
	 
	// Получим настройки регистрации
	МетаИсточник = Источник.Метаданные();
	
	Если Найти(МетаИсточник.Имя,"бит_мдм_") > 0 Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ИмяПолное    = МетаИсточник.ПолноеИмя();
	ВидОбъекта   = ОпределитьВидОбъекта(ИмяПолное);	
	ОписаниеОбъекта = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза, ВидОбъекта, МетаИсточник.Имя);
	Настройки       = РегистрыСведений.бит_мдм_ПравилаРегистрацииИзменений.ПолучитьНастройкиВнутреннейМиграции(ОписаниеОбъекта);
	
	Если НЕ Настройки.Выполнять Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если Настройки.РежимИзменения = Перечисления.бит_мдм_РежимыИзменения.ПоЗаявке  Тогда
		
		флРазрешеноИзменение = ?(Источник.ДополнительныеСвойства.Свойство("бит_мдм_РазрешеноИзменение") 
		                          И Источник.ДополнительныеСвойства.бит_мдм_РазрешеноИзменение = Истина, Истина, Ложь );
		
		  Если НЕ флРазрешеноИзменение Тогда
			  
			  
			  ТекстСообщения =  НСтр("ru = 'Изменения данного справочника возможны только после согласования документа ""Заявка на изменение НСИ"".'");
			  Если НЕ Источник.ЭтоНовый() Тогда
				  бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			  Иначе	
				  Если ПараметрыСеанса.бит_мдм_ПризнакРедактирования = Ложь Тогда
					  
					  бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
					  
				  КонецЕсли; 
			  КонецЕсли; 
		  КонецЕсли; 
	
	КонецЕсли; 
	 
 КонецПроцедуры
 
 // Процедура обработчик подписки "бит_мдм_ОбъектТекущейБазыПриЗаписи".
 // 
 // Параметры:
 // Источник - СправочникОбъект
 // Отказ - Булево.
 // 
Процедура бит_мдм_ОбъектТекущейБазыПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	ИспользоватьМДМ = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_мдм_Использовать");
	
	Если НЕ ИспользоватьМДМ ИЛИ Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	// Получим настройки регистрации
	МетаИсточник = Источник.Метаданные();
	
	Если Найти(МетаИсточник.Имя,"бит_мдм_") > 0 Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ИмяПолное    = МетаИсточник.ПолноеИмя();
	ВидОбъекта   = ОпределитьВидОбъекта(ИмяПолное);	
	ОписаниеОбъекта = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза, ВидОбъекта, МетаИсточник.Имя);
	Настройки = РегистрыСведений.бит_мдм_ПравилаРегистрацииИзменений.ПолучитьНастройкиВнутреннейМиграции(ОписаниеОбъекта);
	
	Если НЕ Настройки.Выполнять Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	
	РежимОбработки = Неопределено;
	РежимИзменения = Неопределено;
	Для каждого ТекНастройка Из Настройки.Элементы Цикл
		
		РежимОбработки = ТекНастройка.РежимОбработки;
		РежимИзменения = ТекНастройка.РежимИзменения;
		
	КонецЦикла; 	
	
	Если РежимИзменения = Перечисления.бит_мдм_РежимыИзменения.ПоЗаявке Тогда
		
		флРазрешеноИзменение = ?(Источник.ДополнительныеСвойства.Свойство("бит_мдм_РазрешеноИзменение") 
		                          И Источник.ДополнительныеСвойства.бит_мдм_РазрешеноИзменение = Истина, Истина, Ложь );
		флЭтоНовый = ?(Источник.ДополнительныеСвойства.Свойство("бит_мдм_ЭтоНовый") 
		               И Источник.ДополнительныеСвойства.бит_мдм_ЭтоНовый = Истина, Истина, Ложь);						  
		
	   Если НЕ флРазрешеноИзменение И флЭтоНовый И ПараметрыСеанса.бит_мдм_ПризнакРедактирования = Истина Тогда
		   
		   УстановитьПривилегированныйРежим(Истина);
		   Модель = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьРеальныйОбъект(Источник, МетаИсточник);
		   ПараметрыСеанса.бит_мдм_Буфер = Новый ХранилищеЗначения(Модель);
		   Источник.Удалить();
		   ПараметрыСеанса.бит_мдм_ПризнакРедактирования = Ложь;
		   Возврат;	
		   УстановитьПривилегированныйРежим(Ложь);
		   
	   КонецЕсли; 
		
	КонецЕсли; 
	
	
	Если РежимОбработки = Перечисления.бит_мдм_РежимыОбработки.Фоновый Тогда
		
		// Создаем фоновое задание для выполнения обмена.
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Источник.Ссылка);
		МассивПараметров.Добавить(Настройки);
		
		ТекФоновоеЗадание = ФоновыеЗадания.Выполнить("бит_МодульРегламентныхЗаданий.бит_мдм_ФоновыйОбмен"
														,МассивПараметров
														,
														,"Фоновые обмен (БИТ.МДМ)");
		
	Иначе	
		
		КэшОбработанных = Новый Соответствие;
		КэшОбработки = Новый Соответствие;
		ВыполнитьРегистрациюИзмененийЭлементаСправочника(Источник, Настройки, КэшОбработанных, КэшОбработки, Истина);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура бит_мдм_РегистрСведенийТекущейБазыПередЗаписьюПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	ИспользоватьМДМ = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_мдм_Использовать");
	
	Если НЕ ИспользоватьМДМ ИЛИ Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 

	// Получим настройки регистрации
	МетаИсточник = Источник.Метаданные();
	
	Если Найти(МетаИсточник.Имя,"бит_мдм_") > 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяПолное    = МетаИсточник.ПолноеИмя();
	ВидОбъекта   = ОпределитьВидОбъекта(ИмяПолное);	
	ОписаниеОбъекта = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза, ВидОбъекта, МетаИсточник.Имя);
	Настройки = РегистрыСведений.бит_мдм_ПравилаРегистрацииИзменений.ПолучитьНастройкиВнутреннейМиграции(ОписаниеОбъекта);
	
	Если НЕ Настройки.Выполнять Тогда
		
		Возврат;
		
	КонецЕсли; 

	
	Если Источник.Количество() = 0 И Источник.Отбор.Количество() > 0 Тогда
		
		// Удаление
		Хеш = ХешОтбора(Источник.Отбор);
		ВыполнитьРегистрациюУдаленияЗаписиРегистра(МетаИсточник, Настройки, Хеш);
		
		
	Иначе	
		
		// Запись
		МассивХешей = Новый Массив;
		МетаИсточник = Источник.Метаданные();
		
		Для каждого ЗаписьИсточник Из Источник Цикл
			
			Хеш = ХешЗаписиРегистра(ЗаписьИсточник, МетаИсточник);
			МассивХешей.Добавить(Хеш);
			
		КонецЦикла; 
		
		Источник.ДополнительныеСвойства.Вставить("бит_ХешЗаписей", МассивХешей);
		
	КонецЕсли; 
	
	
	
КонецПроцедуры

// Процедура обработчик подписки "бит_мдм_ОбъектТекущейБазыПриЗаписи".
 // 
 // Параметры:
 // Источник - СправочникОбъект.
 // Отказ - Булево.
 // 
Процедура бит_мдм_РегистрСведенийТекущейБазыПриЗаписиПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	ИспользоватьМДМ = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_мдм_Использовать");
	
	Если НЕ ИспользоватьМДМ ИЛИ Отказ ИЛИ Источник.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	// Получим настройки регистрации
	МетаИсточник = Источник.Метаданные();

	Если Найти(МетаИсточник.Имя,"бит_мдм_") > 0 Тогда
	
		Возврат;
	
	КонецЕсли;

	ИмяПолное    = МетаИсточник.ПолноеИмя();
	ВидОбъекта   = ОпределитьВидОбъекта(ИмяПолное);	
	ОписаниеОбъекта = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза, ВидОбъекта, МетаИсточник.Имя);
	Настройки = РегистрыСведений.бит_мдм_ПравилаРегистрацииИзменений.ПолучитьНастройкиВнутреннейМиграции(ОписаниеОбъекта);
	
	Если НЕ Настройки.Выполнять Тогда
		
		Возврат;
		
	КонецЕсли; 

	Сч = 0;
	Для каждого ЗаписьИсточник Из Источник Цикл
		
		Хеш = Источник.ДополнительныеСвойства.бит_ХешЗаписей[Сч];
		
		ВыполнитьРегистрациюИзмененийЗаписиРегистра(ЗаписьИсточник, МетаИсточник, Настройки, Хеш);
		
		Сч = Сч + 1;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСтруктуры

// Функция возвращает структуру полей, которые не следует записывать в элементы справочника 
// ОписаниеРеквизитовОбъектовОбмена.
// 
// Возвращаемое значение:
//  Исключения - Структура.
// 
Функция ИсключаемыеПоляКонструктор()

	Исключения = Новый Структура;
	
	Исключения.Вставить("Ref_Key");
	Исключения.Вставить("LineNumber");
	//Исключения.Вставить("Parent_Key");	
	Исключения.Вставить("DataVersion");
	//Исключения.Вставить("DeletionMark");
	//Исключения.Вставить("IsFolder");	
	Исключения.Вставить("Ссылка");
	//Исключения.Вставить("ПометкаУдаления");
	Исключения.Вставить("ТабличныеЧасти");
	

	Возврат Исключения;
	
КонецФункции // ИсключаемыеПоляКонструктор()

// Процедура обновляет или создает описание реквизита обмена по метаданным текущей конфигурации. 
// 
// Параметры:
//  МетаРеквизит - ОбъектМетаданных.
//  Вид - ПеречислениеСсылка.бит_мпд_ВидыРеквизитов.
//  ОписаниеОбъекта - СправочникСсылка.бит_мпд_ОписанияОбъектовОбмена.
// 
Процедура ЗаполнитьОписаниеРеквизита(МетаРеквизит, МетаТабЧасть = Неопределено, Вид, ОписаниеОбъекта)
	
	ТекРеквизит = Справочники.бит_мдм_ОписанияРеквизитовОбъектовОбмена.НайтиЭлемент(ОписаниеОбъекта, МетаРеквизит.Имя);
	Если ЗначениеЗаполнено(ТекРеквизит) Тогда
		
		ТекРеквизитОб = ТекРеквизит.ПолучитьОбъект();
		
	Иначе	
		
		ТекРеквизитОб = Справочники.бит_мдм_ОписанияРеквизитовОбъектовОбмена.СоздатьЭлемент();
		ТекРеквизитОб.Владелец = ОписаниеОбъекта;		
		ТекРеквизитОб.УстановитьНовыйКод();
		
	КонецЕсли; 
	
	ТекРеквизитОб.Наименование = ?(ЗначениеЗаполнено(МетаРеквизит.Синоним), МетаРеквизит.Синоним, МетаРеквизит.Имя);
	ТекРеквизитОб.Вид = Вид;
	ТекРеквизитОб.Имя = МетаРеквизит.Имя;
	Если НЕ МетаТабЧасть = Неопределено Тогда
		
		ТекРеквизитОб.ИмяТабличнойЧасти = МетаТабЧасть.Имя;
		
	Иначе	
		
		Если Вид = Перечисления.бит_мдм_ВидыРеквизитов.СтандартныйРеквизит Тогда
			
			ТекРеквизитОб.ИмяТабличнойЧасти = "$СтандартныеРеквизиты";			
			
		ИначеЕсли Вид = Перечисления.бит_мдм_ВидыРеквизитов.Реквизит Тогда	
			
			ТекРеквизитОб.ИмяТабличнойЧасти = "$Реквизиты";			
			
	    ИначеЕсли Вид = Перечисления.бит_мдм_ВидыРеквизитов.Ресурс Тогда
			
			ТекРеквизитОб.ИмяТабличнойЧасти = "$Ресурсы";			
			
		ИначеЕсли Вид = Перечисления.бит_мдм_ВидыРеквизитов.Измерение Тогда
			
			ТекРеквизитОб.ИмяТабличнойЧасти = "$Измерения";			

		ИначеЕсли Вид = Перечисления.бит_мдм_ВидыРеквизитов.ПризнакУчета Тогда	
			
			ТекРеквизитОб.ИмяТабличнойЧасти = "$ПризнакиУчета";			
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	МассивТипов = МетаРеквизит.Тип.Типы();
	
	ИмяТипаСтр  = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(МетаРеквизит.Тип);
	
	// Тип в "родной" базе
	ТекРеквизитОб.ТипЗнчБазыСтр = ИмяТипаСтр;
	
	// Тип для подсистемы "МДМ"
	ТекРеквизитОб.ТипЗнчСтр = "Строка";	
	Если МассивТипов.Количество() = 1 Тогда
		
		МетаОб = Метаданные.НайтиПоТипу(МассивТипов[0]);		
		
		Если НЕ МетаОб = Неопределено Тогда
			
			ТекРеквизитОб.ИмяОбъекта = МетаОб.Имя;
			
			Если бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("Справочники", МетаОб.Имя) Тогда
				
				ТекРеквизитОб.ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник;
				Если  бит_РаботаСМетаданными.ЭтоИерархияЭлементов(МетаОб) Тогда
					
					ТекРеквизитОб.ТипЗнчСтр = "СправочникСсылка.бит_мдм_ОбъектыОбменаИерархияЭлементов";
					
				Иначе
					
					ТекРеквизитОб.ТипЗнчСтр = "СправочникСсылка.бит_мдм_ОбъектыОбмена";
					
				КонецЕсли;	
				
				
			ИначеЕсли бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("ПланыВидовХарактеристик", МетаОб.Имя) Тогда	
				
				ТекРеквизитОб.ТипЗнчСтр = "СправочникСсылка.бит_мдм_ПланыВидовХарактеристикОбмена";
				ТекРеквизитОб.ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик;
				
			ИначеЕсли бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("ПланыСчетов", МетаОб.Имя) Тогда	
				
				ТекРеквизитОб.ТипЗнчСтр = "СправочникСсылка.бит_мдм_СчетаОбмена";
				ТекРеквизитОб.ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет;				
				
			ИначеЕсли бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("Перечисления",МетаОб.Имя) Тогда
				
				ТекРеквизитОб.ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Перечисление;
				ТекРеквизитОб.ТипЗнчСтр = "СправочникСсылка.бит_мдм_ЗначенияПеречислений";
				
			Иначе
				
				// Примитивный тип
				ТекРеквизитОб.ТипЗнчСтр = ИмяТипаСтр;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе
		
		// Составной тип
		
		ТекРеквизитОб.ИмяОбъекта = "";
		ТекРеквизитОб.ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПустаяСсылка();
		ТекРеквизитОб.Составной  = Истина;
		
		Если Найти(ИмяТипаСтр, "Ссылка") > 0 Тогда
			ТекРеквизитОб.ТипЗнчСтр = "Строка";
		Иначе
			// Составно, но без ссылок
			ТекРеквизитОб.ТипЗнчСтр = ИмяТипаСтр;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ТекРеквизитОб.Обязательный = ?(МетаРеквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
	
	флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ТекРеквизитОб, "", "Ошибки");
	
КонецПроцедуры // ЗаполнитьОписаниеРеквизита()

// Функция обновляет или создает описание реквизита объекта обмена по данным полученным из 
// внешней базы через HTTP. 
// 
// Параметры:
//  ОписаниеОбъекта - СправочникСсылка.бит_мпд_ОписанияОбъектовОбмена.
//  ОписаниеРеквизитаВрем - Структура.
// 
// ВозвращаемоеЗначение:
//  ТекРеквизит - СправочникСсылка.бит_мдм_ОписанияРеквизитовОбъектовОбмена.
// 
Функция ЗаполнитьОписаниеРеквизитаHTTP(ОписаниеОбъекта, ОписаниеРеквизитаВрем, ИмяТабЧасти = "", КлючевыеПоля = Неопределено)

	ИмяПоляАнгл = ОписаниеРеквизитаВрем.Имя;
	ИмяПоляАнгл = СтрЗаменить(ИмяПоляАнгл,"_Key", "");
	ИмяПоля = бит_мпд_ВнешниеИсточникиСервер.ПеревестиИмяПоля(ИмяПоляАнгл);
	
	ТекРеквизит = Справочники.бит_мдм_ОписанияРеквизитовОбъектовОбмена.НайтиЭлемент(ОписаниеОбъекта, ИмяПоля);
	Если ЗначениеЗаполнено(ТекРеквизит) Тогда
		
		ТекРеквизитОб = ТекРеквизит.ПолучитьОбъект();
		
	Иначе	
		
		ТекРеквизитОб = Справочники.бит_мдм_ОписанияРеквизитовОбъектовОбмена.СоздатьЭлемент();
		ТекРеквизитОб.Владелец = ОписаниеОбъекта;		
		ТекРеквизитОб.УстановитьНовыйКод();
		
	КонецЕсли; 

	СтандартныеИмена = СтандартныеРеквизитыКонструктор(ОписаниеОбъекта.Вид);
	ВидыРеквизитов = Перечисления.бит_мдм_ВидыРеквизитов;
	
	ТекРеквизитОб.Наименование = ИмяПоля;
	Если ЗначениеЗаполнено(ИмяТабЧасти) Тогда
		ТекРеквизитОб.Вид = Перечисления.бит_мдм_ВидыРеквизитов.РеквизитТабличнойЧасти;
		ТекРеквизитОб.ИмяТабличнойЧасти = ИмяТабЧасти;		
	Иначе	
		
		Если ТипЗнч(КлючевыеПоля) = Тип("Структура") И КлючевыеПоля.Свойство(ИмяПоляАнгл) Тогда
		    ТекРеквизитОб.Вид = ВидыРеквизитов.Измерение;
			ТекРеквизитОб.ИмяТабличнойЧасти = "$Измерения";
		ИначеЕсли СтандартныеИмена.Свойство(ИмяПоля) Тогда
			ТекРеквизитОб.Вид =  ВидыРеквизитов.СтандартныйРеквизит;
			ТекРеквизитОб.ИмяТабличнойЧасти = "$СтандартныеРеквизиты";
		Иначе	
			ТекРеквизитОб.Вид =  ВидыРеквизитов.Реквизит;
			ТекРеквизитОб.ИмяТабличнойЧасти = "$Реквизиты";
		КонецЕсли; 
		 		
	КонецЕсли; 
	ТекРеквизитОб.Имя = ИмяПоля;
	
	
	РезДанные = ПреобразоватьТипыOData(ОписаниеРеквизитаВрем.Тип);
	ТекРеквизитОб.ТипЗнчБазыСтр = РезДанные.Тип;
	ТекРеквизитОб.ВидОбъекта = РезДанные.Вид;
	ТекРеквизитОб.ИмяОбъекта = РезДанные.Имя;
	
	// Тип в подсистеме МДМ
	ТекРеквизитОб.ТипЗнчСтр  = РезДанные.Тип;	
	Если Найти(РезДанные.Тип, "Ссылка") > 0 Тогда
		ОписаниеОбъектаРеквизит = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(ОписаниеОбъекта.Владелец, РезДанные.Вид, РезДанные.Имя);
		
		Если ЗначениеЗаполнено(ОписаниеОбъектаРеквизит) Тогда
		
			 ИмяТаблицыХранения = ИмяОбъектаХранения(ОписаниеОбъектаРеквизит);
			 ТекРеквизитОб.ТипЗнчСтр = "СправочникСсылка."+ИмяТаблицыХранения;
		
		КонецЕсли; 
		
	Иначе	
		ТекРеквизитОб.ТипЗнчСтр  = РезДанные.Тип;
	КонецЕсли; 
	
	ТекРеквизитОб.Обязательный = ?(ОписаниеРеквизитаВрем.РазрешеноПусто = "false", Истина, Ложь);
	ТекРеквизитОб.Составной = ОписаниеРеквизитаВрем.ЭтоСоставной;
	
	флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ТекРеквизитОб, "", "Ошибки");
	
	Если флВыполнено Тогда
	
		ТекРеквизит = ТекРеквизитОб.Ссылка;
	
	КонецЕсли; 
	
	Возврат ТекРеквизит;
	
КонецФункции // ЗаполнитьОписаниеРеквизитаHTTP()

// Функция обновляет или создает описание объекта обмена. 
// 
// Параметры:
//  ВидИБ - СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//  ОписаниеОбъекта - Структура.
//  ВидИерархии - ПеречислениеСсылка.бит_мдм_ВидыИерархии.
// 
Функция ЗаполнитьОписаниеОбъекта(ВидИБ, ОписаниеОбъекта, ВидИерархии = Неопределено)
	
	ТекЭл = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(ВидИБ, ОписаниеОбъекта.Вид, ОписаниеОбъекта.Имя);
	Если ЗначениеЗаполнено(ТекЭл) Тогда
		
		ТекОб = ТекЭл.ПолучитьОбъект();
		
	Иначе
		
		ТекОб = Справочники.бит_мдм_ОписанияОбъектовОбмена.СоздатьЭлемент();
		ТекОб.Владелец = ВидИБ;		
		ТекОб.УстановитьНовыйКод();
		
	КонецЕсли; 
	
	ТекОб.Вид = ОписаниеОбъекта.Вид;
	ТекОб.Наименование = ОписаниеОбъекта.Синоним;
	ТекОб.Имя = ОписаниеОбъекта.Имя;
	
	Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник Тогда
		
		ТекОб.ВидИерархии = ВидИерархии;	
		ТекОб.ПервичныйСпособПоиска = Перечисления.бит_мдм_СпособыПоиска.Наименование;
		
		// Настройки для специфических справочников
		СинхронизируемыеПоКодам = Новый Структура;
		СинхронизируемыеПоКодам.Вставить("Валюты");
		СинхронизируемыеПоКодам.Вставить("Банки");		
		СинхронизируемыеПоКодам.Вставить("КлассификаторЕдиницИзмерения");
		СинхронизируемыеПоКодам.Вставить("СтраныМира");
		
		Если СинхронизируемыеПоКодам.Свойство(ОписаниеОбъекта.Имя) Тогда
		
			ТекОб.ОтправлятьКод = Истина;
			ТекОб.ПервичныйСпособПоиска = Перечисления.бит_мдм_СпособыПоиска.Код;
		
		КонецЕсли; 
		
	ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда	
		
		ТекОб.Наименование =  НСтр("ru = 'ПВХ'")+"."+ТекОб.Наименование;
		ТекОб.ВидИерархии = ВидИерархии;			
		ТекОб.ПервичныйСпособПоиска = Перечисления.бит_мдм_СпособыПоиска.Наименование;		
		
		// Настройки для специфических справочников
		СинхронизируемыеПоКодам = Новый Структура;
		СинхронизируемыеПоКодам.Вставить("бит_ВидыДополнительныхАналитик");
		СинхронизируемыеПоКодам.Вставить("бит_ВидыОбъектовАдресацииЗадач");		
		СинхронизируемыеПоКодам.Вставить("бит_ВидыПараметровФинансовыхДоговоров");
		СинхронизируемыеПоКодам.Вставить("бит_ВидыСубконтоБюджетирования");
		СинхронизируемыеПоКодам.Вставить("бит_ВидыСубконтоДополнительные_1");
		СинхронизируемыеПоКодам.Вставить("бит_ВидыСубконтоДополнительные_2");
		СинхронизируемыеПоКодам.Вставить("бит_ВидыСубконтоДополнительные_3");
		СинхронизируемыеПоКодам.Вставить("бит_ВидыСубконтоДополнительные_4");
		СинхронизируемыеПоКодам.Вставить("бит_ВидыСубконтоДополнительные_5");
		
		Если СинхронизируемыеПоКодам.Свойство(ОписаниеОбъекта.Имя) Тогда
		
			ТекОб.ОтправлятьКод = Истина;
			ТекОб.ПервичныйСпособПоиска = Перечисления.бит_мдм_СпособыПоиска.Код;
		
		КонецЕсли; 
		
	ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда	
		
		ТекОб.Наименование =  НСтр("ru = 'ПС'")+"."+ТекОб.Наименование;		
		ТекОб.ПервичныйСпособПоиска = Перечисления.бит_мдм_СпособыПоиска.Код;	
		ТекОб.ВидыСубконто = ОписаниеОбъекта.ВидыСубконто;
		ТекОб.ВидИерархии  = ВидИерархии;
		ТекОб.ОтправлятьКод = Истина;
		ТекОб.ПервичныйСпособПоиска = Перечисления.бит_мдм_СпособыПоиска.Код;
		
	Иначе	
		
		ТекОб.ПервичныйСпособПоиска = Перечисления.бит_мдм_СпособыПоиска.Наименование;
		
	КонецЕсли; 
	
	флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ТекОб, "", "Ошибки");
	Если флВыполнено Тогда
		
		ТекЭл = ТекОб.Ссылка;	
		
	КонецЕсли; 
	
	Возврат ТекЭл;		
	
КонецФункции // ЗаполнитьОписаниеОбъекта()

// Функция обновляет или создает значение перечисления. 
// 
// Параметры:
//  ВидИБ - СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//  ОписаниеОбъекта - Структура.
// 
// Возвращаемое значение:
//  ТекЭл - Строка.
// 
Функция ЗаполнитьЗначениеПеречисления(ВидИБ, ОписаниеОбъекта, ЭтоГруппа, Родитель = Неопределено) 

	ТекЭл = Справочники.бит_мдм_ЗначенияПеречислений.НайтиЭлемент(ВидИБ,ОписаниеОбъекта.Имя, ЭтоГруппа);;
	
	Если ЗначениеЗаполнено(ТекЭл) Тогда
		
		ТекОб = ТекЭл.ПолучитьОбъект();
		
	Иначе	
		
		Если ЭтоГруппа Тогда
			
			ТекОб = Справочники.бит_мдм_ЗначенияПеречислений.СоздатьГруппу();
			
		Иначе	
			
			ТекОб = Справочники.бит_мдм_ЗначенияПеречислений.СоздатьЭлемент();
			
		КонецЕсли; 
	    ТекОб.Владелец = ВидИБ;
		ТекОб.УстановитьНовыйКод();
		
	КонецЕсли; 
	
	ТекОб.Родитель = Родитель;
	ТекОб.Имя = ОписаниеОбъекта.Имя;
	ТекОб.Наименование = ОписаниеОбъекта.Синоним;
	флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ТекОб, "", "Ошибки");
	Если флВыполнено Тогда
		
		ТекЭл = ТекОб.Ссылка;	
		
	КонецЕсли; 

	Возврат ТекЭл;
	
КонецФункции // ЗаполнитьЗначениеПеречисления()

// Функция определяет вид иерахии по метаданных.
// 
// Возвращаемое значение:
//  ВидИерархии - ПеречислениеСсылка.бит_мдм_ВидыИерархии.
// 
Функция ОпределитьВидИерархииТекущаяБаза(ОписаниеОбъекта, МетаОб)
	
	// Определение вида иерархии
	ВидИерархии = Неопределено;
	Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник  Тогда
		
		Если МетаОб.Иерархический Тогда
			
			Если МетаОб.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
				
				ВидИерархии = Перечисления.бит_мдм_ВидыИерархии.ИерархияЭлементов;
				
			ИначеЕсли МетаОб.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда	
				
				ВидИерархии = Перечисления.бит_мдм_ВидыИерархии.ИерахрияГруппИЭлементов;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда	
		
		Если МетаОб.Иерархический Тогда
			
			ВидИерархии = Перечисления.бит_мдм_ВидыИерархии.ИерахрияГруппИЭлементов;
			
		КонецЕсли; 
		
	ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда	
		
		ВидИерархии = Перечисления.бит_мдм_ВидыИерархии.ИерархияЭлементов;
		
	КонецЕсли; 
	
	Возврат ВидИерархии;
	
КонецФункции // ОпределитьВидИерархииТекущаяБаза()

// Процедура заполняет информацию об объектах и реквизитах обмена для текущей базы. 
// 
// Параметры:
//  ДанныеВыбора - Структура.
// 
Процедура ЗаполнитьОбъектыОбменаТекущаяБаза(ДанныеВыбора)
	
	Для каждого ОписаниеОбъекта Из ДанныеВыбора.ВыбранныеОбъекты Цикл
		
		Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник Тогда
			
			Коллекция = Метаданные.Справочники;
			
		ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.РегистрСведений Тогда
			
			Коллекция = Метаданные.РегистрыСведений;
			
		ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Перечисление Тогда	
			
			Коллекция = Метаданные.Перечисления;
			
		ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
			
			Коллекция = Метаданные.ПланыВидовХарактеристик;
			
		ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда
			
			Коллекция = Метаданные.ПланыСчетов;
			
		Иначе
			
			Коллекция = Неопределено;
			
		КонецЕсли; 
		
		Если Коллекция = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		МетаОб = Коллекция.Найти(ОписаниеОбъекта.Имя);
		
		Если МетаОб = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		// Определяем ВидИерархии
		ВидИерархии = ОпределитьВидИерархииТекущаяБаза(ОписаниеОбъекта, МетаОб);
		
		Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Перечисление Тогда
			
			// Перечисления заполняются в отдельный справочник.
			ТекЭл = ЗаполнитьЗначениеПеречисления(ДанныеВыбора.ВидИнформационнойБазы, ОписаниеОбъекта, Истина);
			
			Если ЗначениеЗаполнено(ТекЭл) Тогда
			
				 Для каждого МетаЗначение Из МетаОб.ЗначенияПеречисления Цикл
				 
				 	  ОписаниеЗначения = Новый Структура("Имя,Синоним", МетаЗначение.Имя, МетаЗначение.Синоним);
					  ЗаполнитьЗначениеПеречисления(ДанныеВыбора.ВидИнформационнойБазы, ОписаниеЗначения, Ложь, ТекЭл);
				 
				 КонецЦикла; 
			
			КонецЕсли; 
			
		
		ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.РегистрСведений Тогда
		
			
			ТекЭл = ЗаполнитьОписаниеОбъекта(ДанныеВыбора.ВидИнформационнойБазы, ОписаниеОбъекта, ВидИерархии);
			
			Если ЗначениеЗаполнено(ТекЭл) Тогда
			
				Для каждого МетаРеквизит Из МетаОб.СтандартныеРеквизиты Цикл
					
					ЗаполнитьОписаниеРеквизита(МетаРеквизит, , Перечисления.бит_мдм_ВидыРеквизитов.СтандартныйРеквизит, ТекЭл);
					
				КонецЦикла; // Стандартные реквизиты
				
				// Заполнение измерений
				Для каждого МетаРеквизит Из МетаОб.Измерения Цикл
					
					ЗаполнитьОписаниеРеквизита(МетаРеквизит, , Перечисления.бит_мдм_ВидыРеквизитов.Измерение, ТекЭл);
					
				КонецЦикла; 
				
				// Заполнение ресурсов
				Для каждого МетаРеквизит Из МетаОб.Ресурсы Цикл
					
					ЗаполнитьОписаниеРеквизита(МетаРеквизит, , Перечисления.бит_мдм_ВидыРеквизитов.Ресурс, ТекЭл);
					
				КонецЦикла; 
				
				// Заполнение реквизитов
				Для каждого МетаРеквизит Из МетаОб.Реквизиты Цикл
					
					ЗаполнитьОписаниеРеквизита(МетаРеквизит, , Перечисления.бит_мдм_ВидыРеквизитов.Реквизит, ТекЭл);
					
				КонецЦикла; 
				
			КонецЕсли; 
		
			
		Иначе	
			
			Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда
			
				ИмяВидовСубконто   = МетаОб.ВидыСубконто.Имя;
	            ВидыСубконтоСсылка = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(ДанныеВыбора.ВидИнформационнойБазы
				                                                                              , Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик
																							  , ИмяВидовСубконто);
				
				ОписаниеОбъекта.Вставить("ВидыСубконто", ВидыСубконтоСсылка);
				ТипВидыСубконто = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка."+ИмяВидовСубконто);
				
			КонецЕсли; 
			
			ТекЭл = ЗаполнитьОписаниеОбъекта(ДанныеВыбора.ВидИнформационнойБазы, ОписаниеОбъекта, ВидИерархии);
			
			Если ЗначениеЗаполнено(ТекЭл) Тогда
				
				Исключения = Новый Структура;
				Исключения.Вставить("Ссылка");
				Исключения.Вставить("ИмяПредопределенныхДанных");
				Исключения.Вставить("Предопределенный");
				
				// Заполнение стандартных реквизитов
				Для каждого МетаРеквизит Из МетаОб.СтандартныеРеквизиты Цикл
					
					Если Исключения.Свойство(МетаРеквизит.Имя) Тогда
						
						Продолжить;
						
					КонецЕсли; 
					
					ЗаполнитьОписаниеРеквизита(МетаРеквизит, , Перечисления.бит_мдм_ВидыРеквизитов.СтандартныйРеквизит, ТекЭл);
					
				КонецЦикла; 
				
				Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда
				
					// Признаки учета
					Для каждого МетаРеквизит Из МетаОб.ПризнакиУчета Цикл
					
					    ЗаполнитьОписаниеРеквизита(МетаРеквизит, , Перечисления.бит_мдм_ВидыРеквизитов.ПризнакУчета, ТекЭл);
						
					КонецЦикла; 
					
					// Виды субконто
					МодельМетаТЧ   = Новый Структура("Имя", "$ВидыСубконто");	
					ОписаниеБулево = Новый ОписаниеТипов("Булево");
					
					МодельРеквизита = Новый Структура("Имя, Синоним, Тип, ПроверкаЗаполнения", "ВидСубконто", "Вид субконто", ТипВидыСубконто, Ложь);
					ЗаполнитьОписаниеРеквизита(МодельРеквизита, МодельМетаТЧ, Перечисления.бит_мдм_ВидыРеквизитов.ДанныеВидаСубконто, ТекЭл);
					
					МодельРеквизита = Новый Структура("Имя, Синоним, Тип, ПроверкаЗаполнения", "Предопределенное", "Предопределенное", ОписаниеБулево, Ложь);
					ЗаполнитьОписаниеРеквизита(МодельРеквизита, МодельМетаТЧ, Перечисления.бит_мдм_ВидыРеквизитов.ДанныеВидаСубконто, ТекЭл);
					
					МодельРеквизита = Новый Структура("Имя, Синоним, Тип, ПроверкаЗаполнения", "ТолькоОбороты", "Только обороты", ОписаниеБулево, Ложь);
					ЗаполнитьОписаниеРеквизита(МодельРеквизита, МодельМетаТЧ, Перечисления.бит_мдм_ВидыРеквизитов.ДанныеВидаСубконто, ТекЭл);
					
					Для каждого МетаРеквизит Из МетаОб.ПризнакиУчетаСубконто Цикл
						
						ЗаполнитьОписаниеРеквизита(МетаРеквизит, МодельМетаТЧ, Перечисления.бит_мдм_ВидыРеквизитов.ДанныеВидаСубконто, ТекЭл);
						
					КонецЦикла; 
					
				КонецЕсли; 
				
				// Заполнение реквизитов
				Для каждого МетаРеквизит Из МетаОб.Реквизиты Цикл
					
					ЗаполнитьОписаниеРеквизита(МетаРеквизит, , Перечисления.бит_мдм_ВидыРеквизитов.Реквизит, ТекЭл);
					
				КонецЦикла; 
				
				// Сведения о реквизитах табличных частей
				Для каждого МетаТабЧасть Из МетаОб.ТабличныеЧасти Цикл
					
					Для каждого МетаРеквизит Из МетаТабЧасть.Реквизиты Цикл
						
					     ЗаполнитьОписаниеРеквизита(МетаРеквизит, МетаТабЧасть, Перечисления.бит_мдм_ВидыРеквизитов.РеквизитТабличнойЧасти, ТекЭл);
						
					КонецЦикла; 
					
				КонецЦикла; 
				
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьОбъектыОбменаТекущаяБаза()

// Процедура заполняет информацию об объектах и реквизитах обмена для удаленной базы через HTTP. 
// 
// Параметры:
//  ДанныеВыбора - Структура.
// 
Процедура ЗаполнитьОбъектыОбменаHTTP(ДанныеВыбора)
	
	НастройкаПодключения = ДанныеВыбора.ВидИнформационнойБазы.НастройкаПодключенияПоУмолчанию;
	
	Ответ = бит_мпд_ПовтИсп.ПолучитьМетаданныеHTTP(НастройкаПодключения, Истина);
	
	Для каждого ОписаниеОбъекта Из ДанныеВыбора.ВыбранныеОбъекты Цикл
		
		ИмяАнгл = "";
		ВидОбъектаАнгл = "";
		Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник Тогда
			
			ВидОбъектаАнгл = "Catalog";
			ИмяАнгл = ВидОбъектаАнгл+"_"+ОписаниеОбъекта.Имя;
			
		ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
			
			ВидОбъектаАнгл = "ChartOfCharacteristicTypes";
			ИмяАнгл = ВидОбъектаАнгл+"_"+ОписаниеОбъекта.Имя;
			
		ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда
			
			ВидОбъектаАнгл = "ChartOfAccounts";
			ИмяАнгл = ВидОбъектаАнгл+"_"+ОписаниеОбъекта.Имя;			
			
		ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Перечисление Тогда
			
			ВидОбъектаАнгл = "EnumType";
			ИмяАнгл = ВидОбъектаАнгл+"_"+ОписаниеОбъекта.Имя;
			
		ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.РегистрСведений Тогда
			
			ВидОбъектаАнгл = "InformationRegister";			
			ИмяАнгл = ВидОбъектаАнгл+"_"+ОписаниеОбъекта.Имя;
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ИмяАнгл) Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Если Ответ.КодСостояния = 200 Тогда
			
			МодельОбъекта = Новый Структура;
			МодельОбъекта.Вставить("ТабличныеЧасти", Новый Соответствие);
			Ассоциации = Новый Структура;
			ЗначенияПеречислений = Новый Массив;
			КлючевыеПоля = Новый Структура;
			флУстанавливатьСвойства = Ложь;
			
			СтрОтвет = Ответ.ПолучитьТелоКакСтроку();
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(СтрОтвет);
			
			Пока Чтение.Прочитать() Цикл
				
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					
					Если Чтение.Имя = "EntityType" Тогда
						
						Если ИмяАнгл = Чтение.ПолучитьАтрибут("Name") Тогда
							
							// Начали читать метаданные текущего объекта.
							флУстанавливатьСвойства = Истина;
							
						Иначе
							
							// Не тот объект
							Чтение.Пропустить();
							
						КонецЕсли;
												
					ИначеЕсли Чтение.Имя = "Association" Тогда
						
						ИмяАссоциации = Чтение.ПолучитьАтрибут("Name"); 
						Если Ассоциации.Свойство(ИмяАссоциации) Тогда
							
							// Начали читать метаданные текущей ассоциации.
							флУстанавливатьСвойства = Истина;
							
						Иначе	
							
							// Не та ассоциация
							Чтение.Пропустить();
							
						КонецЕсли; 
						
					ИначеЕсли Чтение.Имя = "ComplexType" Тогда
						
						ИмяТипаТабЧасти = Чтение.ПолучитьАтрибут("Name");
						Если НЕ МодельОбъекта.ТабличныеЧасти[ИмяТипаТабЧасти] = Неопределено Тогда
							
							// Начали читать метаданные табличной части
							флУстанавливатьСвойства = Истина;
							
						Иначе	
							
							Чтение.Пропустить();
							
						КонецЕсли; 
						
					ИначеЕсли Чтение.Имя = "EnumType" Тогда	
						
						ИмяПеречисления = Чтение.ПолучитьАтрибут("Name");
						
						Если ИмяПеречисления = ОписаниеОбъекта.Имя Тогда
						
							флУстанавливатьСвойства = Истина;
							ОписаниеЗначения = Новый Структура;
							ОписаниеЗначения.Вставить("Имя", ИмяПеречисления);
							ОписаниеЗначения.Вставить("Синоним", ИмяПеречисления);
							ОписаниеЗначения.Вставить("ЭтоГруппа", Истина);
							
							ЗначенияПеречислений.Добавить(ОписаниеЗначения);
							 
							 
						 Иначе
							 
							 Чтение.Пропустить();
						
						КонецЕсли; 
						
					КонецЕсли; 
					 
					
				КонецЕсли;

				// Чтение свойств
				Если флУстанавливатьСвойства 
					 И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента 
					 И Чтение.Имя = "Property" Тогда
					 
					 ИмяСвойства = Чтение.ПолучитьАтрибут("Name");
					 ИмяТипа     = Чтение.ПолучитьАтрибут("Type");
					 Если МодельОбъекта.ТабличныеЧасти[ИмяТипаТабЧасти] = Неопределено Тогда
						 КоллекцияПриемник = МодельОбъекта;						 
					 Иначе	 
						 КоллекцияПриемник = МодельОбъекта.ТабличныеЧасти[ИмяТипаТабЧасти].Реквизиты;
					 КонецЕсли; 
					 
					 Если Найти(ИмяСвойства,"_Key") > 0 Тогда
						 
						// Это ссылочное поле - нужно будет извлечь его тип.
						ИмяАссоциации = ИмяАнгл+"_"+СтрЗаменить(ИмяСвойства,"_Key",""); 
					 	Ассоциации.Вставить(ИмяАссоциации);
					 
					 КонецЕсли; 
					 
					 Если Найти(ИмяТипа, "Collection(")>0 Тогда
					 
					 	 // Это табличная часть
						 СоздатьОписаниеТабЧастиВнеш(МодельОбъекта.ТабличныеЧасти, ИмяСвойства, ИмяТипа);
					 
					 ИначеЕсли ВРег(Прав(ИмяСвойства,5)) = ВРег("_Type") Тогда
						 
						 // Это не самостоятельное поле, а поле для описания типа поля составного типа.
						 ИмяСвязанногоСвойства = СтрЗаменить(ИмяСвойства,"_Type","");
						 
						 							 
						 Если КоллекцияПриемник.Свойство(ИмяСвязанногоСвойства) Тогда
							 
							 КоллекцияПриемник[ИмяСвязанногоСвойства].ЭтоСоставной = Истина;
							 
						 КонецЕсли; 
							 
						 
						 
					 Иначе	
						 
						// Обычное поле 
						 ОписаниеСвойства = Новый Структура("Имя,Тип,РазрешеноПусто, ЭтоСоставной"
						                                      , ИмяСвойства
															  , Чтение.ПолучитьАтрибут("Type")
															  , Чтение.ПолучитьАтрибут("Nullable")
															  , Ложь);
															  
															  
						 

						 КоллекцияПриемник.Вставить(ИмяСвойства, ОписаниеСвойства);
							  
						 
					 КонецЕсли; 
					 
				
				КонецЕсли; // Чтение свойств
				
				// Чтение типа ссылочного поля 
				Если флУстанавливатьСвойства 
					 И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента 
					 И Чтение.Имя = "End" 
					 И Чтение.ПолучитьАтрибут("Role") = "End" Тогда
				
					  ИмяТипа = Чтение.ПолучитьАтрибут("Type");
					  ИмяТипа = СтрЗаменить(ИмяТипа, "StandardODATA.", "");
					  Ассоциации.Вставить(ИмяАссоциации, ИмяТипа);
				
				КонецЕсли; // Чтение типа ссылочного поля
				
				// Чтение значения перечисления
				Если флУстанавливатьСвойства 
					 И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента 
					 И Чтение.Имя = "Member" Тогда
					 
					 ИмяЗначения = Чтение.ПолучитьАтрибут("Name");
					 ОписаниеЗначения = Новый Структура;
					 ОписаниеЗначения.Вставить("Имя", ИмяЗначения);
					 ОписаниеЗначения.Вставить("Синоним", ИмяЗначения);
					 ОписаниеЗначения.Вставить("ЭтоГруппа", Ложь);
					 
					 ЗначенияПеречислений.Добавить(ОписаниеЗначения);
				
				КонецЕсли; 
				
				// Чтение ключевых полей регистра сведений
				Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.РегистрСведений 
					 И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента 
					 И Чтение.Имя = "PropertyRef" Тогда
					 
					 ИмяЗначения = Чтение.ПолучитьАтрибут("Name");
					 ИмяЗначения = СтрЗаменить(ИмяЗначения, "_Key", "");
					 КлючевыеПоля.Вставить(ИмяЗначения);
				
				КонецЕсли; 
				
				// Закончили читать метаданные текущего объекта.
				Если флУстанавливатьСвойства 
					 И Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента 
					 И Чтение.Имя = "EntityType" Тогда
					 
					 флУстанавливатьСвойства = Ложь;
				
				КонецЕсли; 
				
				// Закончили читать текущую ассоциацию
				Если флУстанавливатьСвойства 
					 И Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента 
					 И Чтение.Имя = "Association" Тогда
				
					 флУстанавливатьСвойства = Ложь;
				
				КонецЕсли; // Закончили читать текущую ассоциацию
				
				// Закончили читать перечисление
				Если флУстанавливатьСвойства 
					 И Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента 
					 И Чтение.Имя = "EnumType" Тогда
				
					 флУстанавливатьСвойства = Ложь;
				
				КонецЕсли; 
				
				// Закончили читать метаданные табличной части.
				Если флУстанавливатьСвойства 
					 И Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента 
					 И Чтение.Имя = "ComplexType" Тогда
				
					 флУстанавливатьСвойства = Ложь;
					 ИмяТипаТабЧасти = "";
				
				КонецЕсли; 
				
			КонецЦикла;	// Чтение
			
		
			
			Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Перечисление Тогда
				
				 ТекПеречисление = Неопределено;
				 Для каждого ОписаниеЗначения Из ЗначенияПеречислений Цикл
				 
				 	 Если ОписаниеЗначения.ЭтоГруппа Тогда
					 
					 	ТекПеречисление = ЗаполнитьЗначениеПеречисления(ДанныеВыбора.ВидИнформационнойБазы, ОписаниеЗначения, Истина);
						
					ИначеЕсли ЗначениеЗаполнено(ТекПеречисление) Тогда
						
						ЗаполнитьЗначениеПеречисления(ДанныеВыбора.ВидИнформационнойБазы, ОписаниеЗначения, Ложь, ТекПеречисление);
					 
					 КонецЕсли; 
				 
				 КонецЦикла; 
				
			Иначе	
				
				ВидИерархии = Неопределено;
				Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник Тогда
					
					Если МодельОбъекта.Свойство("Parent_Key") Тогда  // Справочник иерархический
						
						Если МодельОбъекта.Свойство("IsFolder") Тогда
							
							ВидИерархии = Перечисления.бит_мдм_ВидыИерархии.ИерахрияГруппИЭлементов;
							
						Иначе	
							
							ВидИерархии = Перечисления.бит_мдм_ВидыИерархии.ИерархияЭлементов;
							
						КонецЕсли; 
						
					КонецЕсли; 
					
				ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
					
					Если МодельОбъекта.Свойство("Parent_Key") Тогда
						
						ВидИерархии = Перечисления.бит_мдм_ВидыИерархии.ИерахрияГруппИЭлементов;
						
					КонецЕсли; 
					
				ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда	
					
						ВидИерархии = Перечисления.бит_мдм_ВидыИерархии.ИерархияЭлементов;	
						
						// По результату HTTP запроса нет возможности определить какой ПВХ используется для данного ПС в качестве субконто
						// предполагаем, что такой же ПС есть в центральной базе - попробуем определить по метаданным центра.
						
						МетаОбТекущаяБаза = Метаданные.ПланыСчетов.Найти(ОписаниеОбъекта.Имя);
						Если НЕ МетаОбТекущаяБаза = Неопределено Тогда
							
							ИмяВидовСубконто   = МетаОбТекущаяБаза.ВидыСубконто.Имя;
							ВидыСубконтоСсылка = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(ДанныеВыбора.ВидИнформационнойБазы
																											, Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик
																											, ИмяВидовСубконто);
							
							ОписаниеОбъекта.Вставить("ВидыСубконто", ВидыСубконтоСсылка);
							
						Иначе
							
							ОписаниеОбъекта.Вставить("ВидыСубконто", Неопределено); // Нет возможности определить по результату HTTP запроса.
							
						КонецЕсли; 
					
				КонецЕсли; 				
				
				// Записываем/обновляем описание объекта
				ТекЭл = ЗаполнитьОписаниеОбъекта(ДанныеВыбора.ВидИнформационнойБазы, ОписаниеОбъекта, ВидИерархии);
				
				// Записываем/обновляем значения реквизитов
				Если ЗначениеЗаполнено(ТекЭл) Тогда
					
					Исключения = ИсключаемыеПоляКонструктор();
					
					Для каждого КиЗ Из МодельОбъекта Цикл
						
						ИмяПоляАнгл = КиЗ.Ключ;
						Описание = КиЗ.Значение;
						
						Если Исключения.Свойство(ИмяПоляАнгл) Тогда
							
							Продолжить;
							
						КонецЕсли; 
						
						Если Найти(Описание.Тип, "Collection(") > 0 Тогда
							
							// Таб. части пока не обрабатываем
							Продолжить;
							
						КонецЕсли; 
						
						// Для составных подставляем тип из ассоциации.
						Если Найти(Описание.Имя, "_Key") > 0 Тогда
							
							ИмяАссоциации = ИмяАнгл+"_"+СтрЗаменить(Описание.Имя, "_Key", "");
							ИмяТипа = "";
							Ассоциации.Свойство(ИмяАссоциации, ИмяТипа);
							Если ЗначениеЗаполнено(ИмяТипа) Тогда
								
								Описание.Тип = ИмяТипа; 
								
							КонецЕсли; 
							
						КонецЕсли; 
						
						ЗаполнитьОписаниеРеквизитаHTTP(ТекЭл, Описание, , КлючевыеПоля);
						
						
					КонецЦикла; // По полям
					
					Для каждого КиЗ Из МодельОбъекта.ТабличныеЧасти Цикл
						
						ОписаниеТабличнойЧасти = КиЗ.Значение;
						Если ОписаниеТабличнойЧасти.Имя = "ExtDimensionTypes" Тогда
							ОписаниеТабличнойЧасти.Имя = "$ВидыСубконто";
							
							Если ОписаниеТабличнойЧасти.Реквизиты.Свойство("ExtDimensionType_Key") 
								 И НЕ МетаОбТекущаяБаза = Неопределено Тогда
							
								ОписаниеТабличнойЧасти.Реквизиты.ExtDimensionType_Key.Тип = "ChartOfCharacteristicTypes_"+ИмяВидовСубконто;
							
							КонецЕсли; 
							
						КонецЕсли; 
						Для каждого КиЗР Из ОписаниеТабличнойЧасти.Реквизиты Цикл
							
							Описание = КиЗР.Значение;
							
							Если Исключения.Свойство(Описание.Имя) Тогда
								
								Продолжить;
								
							КонецЕсли; 
							
							// Для составных подставляем тип из ассоциации.
							Если Найти(Описание.Имя, "_Key") > 0 Тогда
								
								ИмяАссоциации = ИмяАнгл+"_"+СтрЗаменить(Описание.Имя, "_Key", "");
								ИмяТипа = "";
								Ассоциации.Свойство(ИмяАссоциации, ИмяТипа);
								Если ЗначениеЗаполнено(ИмяТипа) Тогда
									
									Описание.Тип = ИмяТипа; 
									
								КонецЕсли; 
								
							КонецЕсли; 
							
							
							ЗаполнитьОписаниеРеквизитаHTTP(ТекЭл, Описание, ОписаниеТабличнойЧасти.Имя);
							
						КонецЦикла; 
						
					КонецЦикла; // По реквизитам табличной части
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; // По ОписаниюОбъектов
	
КонецПроцедуры // ЗаполнитьОбъектыОбменаHTTP()

#КонецОбласти

// Процедура создает описание внешней табличной части.
// 
// Параметры:
//  ТабличныеЧасти - Структура.
//  ИмяСвойства - Строка.
//  ИмяТипа - Строка.
// 
Процедура СоздатьОписаниеТабЧастиВнеш(ТабличныеЧасти, ИмяСвойства, ИмяТипа) Экспорт
	
	ИмяТипаТабЧасти = СтрЗаменить(ИмяТипа, "Collection(StandardODATA.", "");
	ИмяТипаТабЧасти = СтрЗаменить(ИмяТипаТабЧасти, ")", "");						 
	
	ОписаниеТабЧасти = Новый Структура;
	ОписаниеТабЧасти.Вставить("Имя"      , ИмяСвойства);
	ОписаниеТабЧасти.Вставить("ИмяТипа"  , ИмяТипаТабЧасти);
	ОписаниеТабЧасти.Вставить("Реквизиты", Новый Структура);
	
	ТабличныеЧасти.Вставить(ИмяТипаТабЧасти, ОписаниеТабЧасти); 
	
КонецПроцедуры // СоздатьОписаниеТабЧастиВнеш()

// Процедура заполняет объекты и реквизиты объектов обмена по метаданным. 
// 
// Параметры:
//  ДанныеВыбора - Структура.
// 
Процедура ЗаполнитьОбъектыОбмена(ДанныеВыбора) Экспорт
	
	Если ДанныеВыбора.ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза Тогда
		
		ЗаполнитьОбъектыОбменаТекущаяБаза(ДанныеВыбора);
		
	Иначе	
		
		Если ЗначениеЗаполнено(ДанныеВыбора.ВидИнформационнойБазы.НастройкаПодключенияПоУмолчанию) 
			И ДанныеВыбора.ВидИнформационнойБазы.НастройкаПодключенияПоУмолчанию.РасположениеБазы = Перечисления.бит_мпд_ВидыРасположенияИнформационныхБаз.RestСервис Тогда
			
			ЗаполнитьОбъектыОбменаHTTP(ДанныеВыбора);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьОбъектыОбмена()

// Процедура выполняет регистрацию изменений элемента справочника, 
// т.е. создает/обновляет ОбъектОбмена, соответствующий элементу справочника.  
// 
// Параметры:
//  Источник - СправочникОбъект.
//  Настройки - Структура.
// 
Функция ВыполнитьРегистрациюИзмененийЭлементаСправочника(Источник, вхНастройки = Неопределено, КэшОбработанных, КэшОбработки, РегистрироватьИзменения = Ложь) Экспорт

	Если Источник = Неопределено ИЛИ Источник = Null ИЛИ НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	ОбработаннаяСсылка = КэшОбработанных[Источник.Ссылка];
	Если ЗначениеЗаполнено(ОбработаннаяСсылка) Тогда
		
		Если ОбработаннаяСсылка = "Выход" Тогда
			Возврат Неопределено;
		Иначе	
			Возврат ОбработаннаяСсылка;
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если КэшОбработки[Источник.Ссылка] = Истина Тогда
	
		 Возврат Неопределено;
	
	КонецЕсли; 
	 
	КэшОбработки.Вставить(Источник.Ссылка, Истина); 
	
	МетаИсточник = Источник.Метаданные();
	
	Если НЕ вхНастройки = Неопределено Тогда
		
		Настройки = вхНастройки;
		
	Иначе	
		
	    // Получим настройки регистрации		
		ИмяПолное  = МетаИсточник.ПолноеИмя();
		ВидОбъекта = ОпределитьВидОбъекта(ИмяПолное);
		ОписаниеОбъекта = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза, ВидОбъекта, МетаИсточник.Имя);
		Настройки = РегистрыСведений.бит_мдм_ПравилаРегистрацииИзменений.ПолучитьНастройкиВнутреннейМиграции(ОписаниеОбъекта);
		
	КонецЕсли; 
	
	Если НЕ Настройки.Выполнять Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	СсылкаХранения = НайтиОбъектОбмена(Источник, Настройки);
	
	ИмяПриемника = ИмяОбъектаХранения(Настройки.ОписаниеОбъекта);
	
	Если НЕ ЗначениеЗаполнено(СсылкаХранения) Тогда
		
		Если Настройки.ПсевдоМета.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда
			ОбъектХранения = Справочники[ИмяПриемника].СоздатьЭлемент();
		Иначе	
			Если Источник.ЭтоГруппа Тогда
				ОбъектХранения = Справочники[ИмяПриемника].СоздатьГруппу();
			Иначе	
				ОбъектХранения = Справочники[ИмяПриемника].СоздатьЭлемент();
			КонецЕсли; 
		КонецЕсли; 
				
	Иначе	
		
		Если РегистрироватьИзменения Тогда
			// Нужно зарегистрировать изменения для отправки.
			ОбъектХранения = СсылкаХранения.ПолучитьОбъект();
		Иначе	
			// Нужна только ссылка для отправки реквизитов.
		    КэшОбработанных.Вставить(Источник.Ссылка, СсылкаХранения);			
			Возврат СсылкаХранения;
		КонецЕсли; 
	
	КонецЕсли; 

	ОбъектХранения.ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
	ОбъектХранения.ОписаниеОбъекта = Настройки.ОписаниеОбъекта;
	ОбъектХранения.ИД = Строка(Источник.Ссылка.УникальныйИдентификатор());
	ОбъектХранения.УстановитьНовыйКод();
	
	Если ЗначениеЗаполнено(Настройки.ОписаниеОбъекта.ВидИерархии) И ЗначениеЗаполнено(Источник.Родитель) Тогда
	
		ОбъектХранения.Родитель = ВыполнитьРегистрациюИзмененийЭлементаСправочника(Источник.Родитель, Настройки, КэшОбработанных, КэшОбработки);
	
	КонецЕсли; 
	
	Если бит_РаботаСМетаданными.ЕстьСтандартныйРеквизит("Владелец", МетаИсточник) И ЗначениеЗаполнено(Источник.Владелец) Тогда
	
		ОбъектХранения.ВладелецОбъекта = ВыполнитьРегистрациюИзмененийЭлементаСправочника(Источник.Владелец,, КэшОбработанных, КэшОбработки);
	
	КонецЕсли; 
	
	Если Настройки.ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
	
		ОбъектХранения.ТипЗначения = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(Источник.ТипЗначения);
	
	КонецЕсли; 
	
	ОбъектХранения.Данные.Очистить();
	ОбъектХранения.ДанныеТабличныхЧастей.Очистить();
	
	Для каждого МетаРеквизит Из МетаИсточник.СтандартныеРеквизиты Цикл
		
		ИмяРеквизита = МетаРеквизит.Имя;
		ТекЗначение  = Источник[ИмяРеквизита];
		ПсевдоМетаРеквизит = Неопределено;
		Настройки.ПсевдоМета.Реквизиты.Свойство(ИмяРеквизита, ПсевдоМетаРеквизит);
		
		ЗаполнитьДанныеРеквизитаРегистрацияИзменений(ОбъектХранения, ТекЗначение, ПсевдоМетаРеквизит, ИмяРеквизита,,,КэшОбработанных, КэшОбработки);
		
	КонецЦикла; 
	
	Если Настройки.ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда
		
		// Коллекции, характерные для счетов
		Для каждого МетаРеквизит Из МетаИсточник.ПризнакиУчета Цикл
			
			ИмяРеквизита = МетаРеквизит.Имя;
			ТекЗначение  = Источник[ИмяРеквизита];
			ПсевдоМетаРеквизит = Неопределено;
			Настройки.ПсевдоМета.Реквизиты.Свойство(ИмяРеквизита, ПсевдоМетаРеквизит);
			
			ЗаполнитьДанныеРеквизитаРегистрацияИзменений(ОбъектХранения, ТекЗначение, ПсевдоМетаРеквизит, ИмяРеквизита,,,КэшОбработанных, КэшОбработки);
			
		КонецЦикла; 
		
		// Виды субконто
		ИмяТабЧасти  = "ВидыСубконто";
		ПсевдоМетаТабЧасть = Настройки.ПсевдоМета.ТабличныеЧасти[ИмяТабЧасти];
		НомерСубконто = 1;
		Для каждого СтрокаВидыСубконто Из Источник.ВидыСубконто Цикл
		
			 Для каждого КиЗ Из ПсевдоМетаТабЧасть.Реквизиты Цикл
				 
				ИмяРеквизита       = КиЗ.Ключ; 
			 	ПсевдоМетаРеквизит = КиЗ.Значение;
				ТекЗначение        = СтрокаВидыСубконто[ИмяРеквизита];
				ЗаполнитьДанныеРеквизитаРегистрацияИзменений(ОбъектХранения
				                                              , ТекЗначение
															  , ПсевдоМетаРеквизит
															  , ИмяРеквизита
															  , ИмяТабЧасти
															  , НомерСубконто
															  , КэшОбработанных
															  , КэшОбработки);
				
			 
			 КонецЦикла; 
		НомерСубконто = НомерСубконто + 1;
		КонецЦикла; 
		
	КонецЕсли; 
	
	Для каждого МетаРеквизит Из МетаИсточник.Реквизиты Цикл
		
		ИмяРеквизита = МетаРеквизит.Имя;
		ТекЗначение  = Источник[ИмяРеквизита];
		
		Если ТекЗначение = Источник.Ссылка Тогда
			
			 // Защита от ссылок на самого себя
			 Продолжить;
		
		КонецЕсли; 
		
		ПсевдоМетаРеквизит = Неопределено;
		Настройки.ПсевдоМета.Реквизиты.Свойство(ИмяРеквизита, ПсевдоМетаРеквизит);
		
		ЗаполнитьДанныеРеквизитаРегистрацияИзменений(ОбъектХранения, ТекЗначение, ПсевдоМетаРеквизит, ИмяРеквизита,,,КэшОбработанных, КэшОбработки);
		
	КонецЦикла; 
	
	Для каждого МетаТабЧасть Из МетаИсточник.ТабличныеЧасти Цикл
		
		ИмяТабЧасти = МетаТабЧасть.Имя;
		ПсевдоМетаТабЧасть = Неопределено;
		Настройки.ПсевдоМета.ТабличныеЧасти.Свойство(ИмяТабЧасти, ПсевдоМетаТабЧасть);
		
		Если ЗначениеЗаполнено(ПсевдоМетаТабЧасть) Тогда
			
			Для каждого СтрокаТаблицы Из Источник[ИмяТабЧасти] Цикл
				
				Для каждого МетаРеквизит Из МетаТабЧасть.Реквизиты Цикл
					
					ИмяРеквизита = МетаРеквизит.Имя;	
					ТекЗначение  = СтрокаТаблицы[ИмяРеквизита];		
					ПсевдоМетаРеквизит = Неопределено;
					ПсевдоМетаТабЧасть.Реквизиты.Свойство(ИмяРеквизита, ПсевдоМетаРеквизит);
					ЗаполнитьДанныеРеквизитаРегистрацияИзменений(ОбъектХранения, ТекЗначение, ПсевдоМетаРеквизит, ИмяРеквизита,ИмяТабЧасти, СтрокаТаблицы.НомерСтроки, КэшОбработанных, КэшОбработки);
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ОбъектХранения, "", "Ошибки");
	
	Если флВыполнено Тогда
		
		СсылкаХранения = ОбъектХранения.Ссылка;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СсылкаХранения) Тогда
		
		КэшОбработанных.Вставить(Источник.Ссылка, СсылкаХранения);
		
	Иначе	
		
		КэшОбработанных.Вставить(Источник.Ссылка, "Выход");
		
	КонецЕсли; 
	Возврат СсылкаХранения;
	
КонецФункции // ВыполнитьРегистрациюИзмененийЭлементаСправочника()

// Функция выполняет регистрацию.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Результат - Строка.
//
Функция ВыполнитьРегистрациюИзмененийЗаписиРегистра(Источник, МетаИсточник, вхНастройки = Неопределено, вхХеш ) Экспорт
	
	Если Источник = Неопределено ИЛИ Источник = Null  Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	
	Если НЕ вхНастройки = Неопределено Тогда
		
		Настройки = вхНастройки;
		
	Иначе	
		
	    // Получим настройки регистрации		
		ИмяПолное  = МетаИсточник.ПолноеИмя();
		ВидОбъекта = ОпределитьВидОбъекта(ИмяПолное);
		ОписаниеОбъекта = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза, ВидОбъекта, МетаИсточник.Имя);
		Настройки = РегистрыСведений.бит_мдм_ПравилаРегистрацииИзменений.ПолучитьНастройкиВнутреннейМиграции(ОписаниеОбъекта);
		
	КонецЕсли; 
	
	Если НЕ Настройки.Выполнять Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	КэшОбработанных = Новый Соответствие;
	КэшОбработки = Новый Соответствие;
	
	Хеш = ХешЗаписиРегистра(Источник, МетаИсточник);
	
	Если вхХеш = Хеш Тогда
		СсылкаХранения = НайтиСведенияОбмена(вхХеш, Настройки);
	Иначе	
		СсылкаХранения = НайтиСведенияОбмена(Хеш, Настройки);
		
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СсылкаХранения) Тогда
		
		ОбъектХранения = Справочники.бит_мдм_СведенияОбмена.СоздатьЭлемент();
		
	Иначе	
		
	 	ОбъектХранения = СсылкаХранения.ПолучитьОбъект();
		
	КонецЕсли; 
	
	
	ОбъектХранения.ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
	ОбъектХранения.ОписаниеОбъекта = Настройки.ОписаниеОбъекта;
	ОбъектХранения.ИД = Хеш;
	ОбъектХранения.Наименование = ПредставлениеЗаписиРегистра(Источник, МетаИсточник);
	ОбъектХранения.УстановитьНовыйКод();

	ОбъектХранения.Данные.Очистить();
	Для каждого МетаРеквизит Из МетаИсточник.Измерения Цикл
		
		ИмяРеквизита = МетаРеквизит.Имя;
		ТекЗначение  = Источник[ИмяРеквизита];
				
		ПсевдоМетаРеквизит = Неопределено;
		Настройки.ПсевдоМета.Измерения.Свойство(ИмяРеквизита, ПсевдоМетаРеквизит);
		
		ЗаполнитьДанныеРеквизитаРегистрацияИзменений(ОбъектХранения, ТекЗначение, ПсевдоМетаРеквизит, ИмяРеквизита,,,КэшОбработанных, КэшОбработки);
		
	КонецЦикла; 
	
	Для каждого МетаРеквизит Из МетаИсточник.СтандартныеРеквизиты Цикл
		
		ИмяРеквизита = МетаРеквизит.Имя;
		ТекЗначение  = Источник[ИмяРеквизита];
				
		ПсевдоМетаРеквизит = Неопределено;
		Настройки.ПсевдоМета.СтандартныеРеквизиты.Свойство(ИмяРеквизита, ПсевдоМетаРеквизит);
		
		ЗаполнитьДанныеРеквизитаРегистрацияИзменений(ОбъектХранения, ТекЗначение, ПсевдоМетаРеквизит, ИмяРеквизита,,,КэшОбработанных, КэшОбработки);
		
	КонецЦикла; 
	
	Для каждого МетаРеквизит Из МетаИсточник.Ресурсы Цикл
		
		ИмяРеквизита = МетаРеквизит.Имя;
		ТекЗначение  = Источник[ИмяРеквизита];
				
		ПсевдоМетаРеквизит = Неопределено;
		Настройки.ПсевдоМета.Ресурсы.Свойство(ИмяРеквизита, ПсевдоМетаРеквизит);
		
		ЗаполнитьДанныеРеквизитаРегистрацияИзменений(ОбъектХранения, ТекЗначение, ПсевдоМетаРеквизит, ИмяРеквизита,,,КэшОбработанных, КэшОбработки);
		
	КонецЦикла; 
	
	Для каждого МетаРеквизит Из МетаИсточник.Реквизиты Цикл
		
		ИмяРеквизита = МетаРеквизит.Имя;
		ТекЗначение  = Источник[ИмяРеквизита];
				
		ПсевдоМетаРеквизит = Неопределено;
		Настройки.ПсевдоМета.Реквизиты.Свойство(ИмяРеквизита, ПсевдоМетаРеквизит);
		
		ЗаполнитьДанныеРеквизитаРегистрацияИзменений(ОбъектХранения, ТекЗначение, ПсевдоМетаРеквизит, ИмяРеквизита,,,КэшОбработанных, КэшОбработки);
		
	КонецЦикла; 

	
	флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ОбъектХранения, "", "Ошибки",Истина);

	Если флВыполнено Тогда
	
		СсылкаХранения = ОбъектХранения.Ссылка;
		РегистрыСведений.бит_мдм_СостоянияОбъектов.Зарегистрировать(СсылкаХранения, Перечисления.бит_мдм_СостоянияОбъектов.Изменен);
		РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(СсылкаХранения, Перечисления.бит_мдм_События.РегистрацияИзменений);
	
	КонецЕсли; 
	
	Возврат СсылкаХранения;
	
КонецФункции // ВыполнитьРегистрациюИзмененийЗаписиРегистра()

// Функция анализирует изменения реквизитов объекта обмена.
//
// Параметры:
//  ОбъектОбмена - СправочникОбъект.
//
// Возвращаемое значение:
//  ТаблицаИзменений - ТаблицаЗначений.
//
Функция АнализИзмененийРеквизитов(ОбъектОбмена) Экспорт

	// Выполнение анализа изменения реквизитов
    ПсевдоМета = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданные(ОбъектОбмена.ОписаниеОбъекта);
	ТабДанные = ОбъектОбмена.Данные.Выгрузить();
	ТабДанныеТабличныхЧастей = ОбъектОбмена.ДанныеТабличныхЧастей.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОбъектОбмена.Ссылка);
	Запрос.УстановитьПараметр("ТабДанные", ТабДанные);
	Запрос.УстановитьПараметр("ТабДанныеТабличныхЧастей", ТабДанныеТабличныхЧастей);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабДанные.ОписаниеРеквизита КАК ОписаниеРеквизита,
	|	ТабДанные.ИмяРеквизита КАК ИмяРеквизита,
	|	ТабДанные.Значение КАК Значение
	|ПОМЕСТИТЬ ТабДанные
	|ИЗ
	|	&ТабДанные КАК ТабДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДанныеТабличныхЧастей.ОписаниеРеквизита КАК ОписаниеРеквизита,
	|	ТабДанныеТабличныхЧастей.ИмяРеквизита КАК ИмяРеквизита,
	|	ТабДанныеТабличныхЧастей.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ТабДанныеТабличныхЧастей.Значение КАК Значение,
	|	ТабДанныеТабличныхЧастей.НомерСтрокиТабличнойЧасти КАК НомерСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ ТабДанныеТабличныхЧастей
	|ИЗ
	|	&ТабДанныеТабличныхЧастей КАК ТабДанныеТабличныхЧастей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДанныеПред.ОписаниеРеквизита КАК ОписаниеРеквизита,
	|	ТабДанныеПред.ИмяРеквизита КАК ИмяРеквизита,
	|	ТабДанныеПред.Значение КАК Значение
	|ПОМЕСТИТЬ ТабДанныеПред
	|ИЗ
	|	Справочник.бит_мдм_ОбъектыОбмена.Данные КАК ТабДанныеПред
	|ГДЕ
	|	ТабДанныеПред.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДанныеТабличныхЧастейПред.ОписаниеРеквизита КАК ОписаниеРеквизита,
	|	ТабДанныеТабличныхЧастейПред.ИмяРеквизита КАК ИмяРеквизита,
	|	ТабДанныеТабличныхЧастейПред.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ТабДанныеТабличныхЧастейПред.Значение КАК Значение,
	|	ТабДанныеТабличныхЧастейПред.НомерСтрокиТабличнойЧасти КАК НомерСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ ТабДанныеТабличныхЧастейПред
	|ИЗ
	|	Справочник.бит_мдм_ОбъектыОбмена.ДанныеТабличныхЧастей КАК ТабДанныеТабличныхЧастейПред
	|ГДЕ
	|	ТабДанныеТабличныхЧастейПред.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтрокиТабличнойЧасти,
	|	""$Реквизиты"" КАК ИмяТабличнойЧасти,
	|	ТабДанные.ИмяРеквизита КАК ИмяРеквизита,
	|	ТабДанные.ОписаниеРеквизита КАК ОписаниеРеквизита,
	|	ЕСТЬNULL(ТабДанныеПред.Значение, НЕОПРЕДЕЛЕНО) КАК ЗначениеПред,
	|	ТабДанные.Значение КАК Значение
	|ИЗ
	|	ТабДанные КАК ТабДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабДанныеПред КАК ТабДанныеПред
	|		ПО ТабДанные.ОписаниеРеквизита = ТабДанныеПред.ОписаниеРеквизита
	|ГДЕ
	|	ТабДанные.Значение <> ЕСТЬNULL(ТабДанныеПред.Значение, НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	""$Реквизиты"",
	|	ТабДанныеПред.ИмяРеквизита,
	|	ТабДанныеПред.ОписаниеРеквизита,
	|	ТабДанныеПред.Значение,
	|	ЕСТЬNULL(ТабДанные.Значение, НЕОПРЕДЕЛЕНО)
	|ИЗ
	|	ТабДанныеПред КАК ТабДанныеПред
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабДанные КАК ТабДанные
	|		ПО ТабДанныеПред.ОписаниеРеквизита = ТабДанные.ОписаниеРеквизита
	|ГДЕ
	|	ТабДанныеПред.Значение <> ЕСТЬNULL(ТабДанные.Значение, НЕОПРЕДЕЛЕНО)
	|	И ТабДанные.ОписаниеРеквизита ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабДанныеТабличныхЧастей.НомерСтрокиТабличнойЧасти,
	|	ТабДанныеТабличныхЧастей.ИмяТабличнойЧасти,
	|	ТабДанныеТабличныхЧастей.ИмяРеквизита,
	|	ТабДанныеТабличныхЧастей.ОписаниеРеквизита,
	|	ЕСТЬNULL(ТабДанныеТабличныхЧастейПред.Значение, НЕОПРЕДЕЛЕНО),
	|	ТабДанныеТабличныхЧастей.Значение
	|ИЗ
	|	ТабДанныеТабличныхЧастей КАК ТабДанныеТабличныхЧастей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабДанныеТабличныхЧастейПред КАК ТабДанныеТабличныхЧастейПред
	|		ПО ТабДанныеТабличныхЧастей.ОписаниеРеквизита = ТабДанныеТабличныхЧастейПред.ОписаниеРеквизита
	|			И ТабДанныеТабличныхЧастей.НомерСтрокиТабличнойЧасти = ТабДанныеТабличныхЧастейПред.НомерСтрокиТабличнойЧасти
	|ГДЕ
	|	ТабДанныеТабличныхЧастей.Значение <> ЕСТЬNULL(ТабДанныеТабличныхЧастейПред.Значение, НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабДанныеТабличныхЧастейПред.НомерСтрокиТабличнойЧасти,
	|	ТабДанныеТабличныхЧастейПред.ИмяТабличнойЧасти,
	|	ТабДанныеТабличныхЧастейПред.ИмяРеквизита,
	|	ТабДанныеТабличныхЧастейПред.ОписаниеРеквизита,
	|	ТабДанныеТабличныхЧастейПред.Значение,
	|	ЕСТЬNULL(ТабДанныеТабличныхЧастей.Значение, НЕОПРЕДЕЛЕНО)
	|ИЗ
	|	ТабДанныеТабличныхЧастейПред КАК ТабДанныеТабличныхЧастейПред
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабДанныеТабличныхЧастей КАК ТабДанныеТабличныхЧастей
	|		ПО ТабДанныеТабличныхЧастейПред.ОписаниеРеквизита = ТабДанныеТабличныхЧастей.ОписаниеРеквизита
	|			И ТабДанныеТабличныхЧастейПред.НомерСтрокиТабличнойЧасти = ТабДанныеТабличныхЧастей.НомерСтрокиТабличнойЧасти
	|ГДЕ
	|	ТабДанныеТабличныхЧастейПред.Значение <> ЕСТЬNULL(ТабДанныеТабличныхЧастей.Значение, НЕОПРЕДЕЛЕНО)
	|	И ТабДанныеТабличныхЧастей.ОписаниеРеквизита ЕСТЬ NULL";
	
	// С помощью схемы запроса заменяем таблицы в запросах по извлечению данных 
	// из табличных частей Данные и ДанныеТабличныхЧастей.			   
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ИмяТаблицыЗапроса = "Справочник."+ПсевдоМета.ИмяТаблицыХранения;
	// Поиск удается выполнить только по таблице объекта.
	ТаблицаСправочникСхемыЗапроса = СхемаЗапроса.ПакетЗапросов[2].ДоступныеТаблицы.Найти(ИмяТаблицыЗапроса);
	// Таблицы соответствующие таб. частям приходится искать перебором коллекции Поля.
	ТаблицаДанныеСхемыЗапроса = Неопределено;
	ТаблицаДанныеТабличныхЧастейСхемыЗапроса = Неопределено;
	Для каждого ТекЭл Из ТаблицаСправочникСхемыЗапроса.Поля Цикл
		 Если ТекЭл.Имя = "Данные" Тогда
		 	  ТаблицаДанныеСхемыЗапроса = ТекЭл;
		 ИначеЕсли ТекЭл.Имя = "ДанныеТабличныхЧастей" Тогда	  
			  ТаблицаДанныеТабличныхЧастейСхемыЗапроса = ТекЭл;
		 КонецЕсли; 
	КонецЦикла; 
	
	СхемаЗапроса.ПакетЗапросов[2].Операторы[0].Источники.Заменить(0, ТаблицаДанныеСхемыЗапроса); 
	СхемаЗапроса.ПакетЗапросов[3].Операторы[0].Источники.Заменить(0, ТаблицаДанныеТабличныхЧастейСхемыЗапроса); 
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	ТаблицаИзменений = Результат.Выгрузить();

	// Анализ изменений стандартных реквизитов
	Для каждого КиЗ Из ПсевдоМета.СтандартныеРеквизиты Цикл
		флИзменен = Ложь;
		Если КиЗ.Ключ = "Код" Тогда
			флИзменен = ?(ОбъектОбмена.КодОбъекта <> ОбъектОбмена.Ссылка.КодОбъекта, Истина, Ложь);
		ИначеЕсли КиЗ.Ключ = "Владелец" Тогда	
			флИзменен = ?(ОбъектОбмена.ВладелецОбъекта <> ОбъектОбмена.Ссылка.ВладелецОбъекта, Истина, Ложь);
		Иначе	
			флИзменен = ?(ОбъектОбмена[КиЗ.Ключ] <> ОбъектОбмена.Ссылка[КиЗ.Ключ], Истина, Ложь);
		КонецЕсли; 
		
		Если флИзменен Тогда
			НоваяСтрока = ТаблицаИзменений.Добавить();
			НоваяСтрока.ОписаниеРеквизита = КиЗ.Значение.ОписаниеРеквизита;
			НоваяСтрока.ИмяРеквизита = КиЗ.Значение.ОписаниеРеквизита.Имя;
			НоваяСтрока.ИмяТабличнойЧасти = "$СтандартныеРеквизиты";
			НоваяСтрока.НомерСтрокиТабличнойЧасти = 0;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ТаблицаИзменений;
	
КонецФункции // АнализИзмененийРеквизитов()

// Процедура записывает измененные реквизиты объекта обмена в РС.бит_мдм_ИзмененныеРеквизиты. 
//
// Параметры:
//  ОбъектОбмена - СправочникОбъект.
//
Процедура ЗарегистироватьИзмененныеРеквизиты(ОбъектОбмена) Экспорт
	
	// Регистрация измененных реквизитов
	НаборИзмененныеРеквизиты = РегистрыСведений.бит_мдм_ИзмененныеРеквизиты.СоздатьНаборЗаписей();
	НаборИзмененныеРеквизиты.Отбор.ОбъектОбмена.Установить(ОбъектОбмена.Ссылка);
	НаборИзмененныеРеквизиты.Прочитать();
	
	ТекТабИзмененныеРеквизиты = НаборИзмененныеРеквизиты.Выгрузить();
	НаборИзмененныеРеквизиты.Очистить();
	
	Если ОбъектОбмена.ДополнительныеСвойства.Свойство("бит_ТабИзмененныеРеквизиты") Тогда
		ТабИзмененныеРеквизиты = ОбъектОбмена.ДополнительныеСвойства.бит_ТабИзмененныеРеквизиты;
	Иначе
		ТабИзмененныеРеквизиты = ТекТабИзмененныеРеквизиты.СкопироватьКолонки();
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТекТабИзмененныеРеквизиты Цикл
		
		НоваяСтрока = ТабИзмененныеРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла; 
	
	ТабИзмененныеРеквизиты.Свернуть("НомерСтрокиТабличнойЧасти, ОписаниеРеквизита, ИмяРеквизита, ИмяТабличнойЧасти"); 
	
	Для каждого СтрокаТаблицы Из ТабИзмененныеРеквизиты Цикл
		
		НоваяЗапись = НаборИзмененныеРеквизиты.Добавить();
		НоваяЗапись.ОбъектОбмена = ОбъектОбмена.Ссылка;
		НоваяЗапись.НомерСтрокиТабличнойЧасти = СтрокаТаблицы.НомерСтрокиТабличнойЧасти;
		НоваяЗапись.ОписаниеРеквизита = СтрокаТаблицы.ОписаниеРеквизита;
		
		НоваяЗапись.ИмяРеквизита      = СтрокаТаблицы.ИмяРеквизита;
		НоваяЗапись.ИмяТабличнойЧасти = СтрокаТаблицы.ИмяТабличнойЧасти;
		
	КонецЦикла; 
	
	НаборИзмененныеРеквизиты.Записать();
	
КонецПроцедуры // ЗарегистироватьИзмененныеРеквизиты()

// Процедура очищает измененные реквизиты объекта обмена в РС.бит_мдм_ИзмененныеРеквизиты. 
//
// Параметры:
//  ОбъектОбмена - СправочникОбъект.
//
Процедура ОчиститьИзмененныеРеквизиты(ОбъектОбмена) Экспорт
	
	// очистка измененных реквизитов
	НаборИзмененныеРеквизиты = РегистрыСведений.бит_мдм_ИзмененныеРеквизиты.СоздатьНаборЗаписей();
	НаборИзмененныеРеквизиты.Отбор.ОбъектОбмена.Установить(ОбъектОбмена.Ссылка);
	НаборИзмененныеРеквизиты.Прочитать();
	
	НаборИзмененныеРеквизиты.Очистить();
	
	НаборИзмененныеРеквизиты.Записать();
	
КонецПроцедуры // ОчиститьИзмененныеРеквизиты()

// Функция выполняет поиск объекта обмена при подготовке обмена.
// 
// Параметры:
//  СтрПар - Структура.
// 
// Возвращаемое значение:
//  Объект - СправочникСсылка.бит_мдм_ОбъектыОбмена, СправочникСсылка.бит_мдм_ОбъектыОбменаИерархияЭлементов.
// 
Функция НайтиОбъектОбменаВнешний(СтрПар) Экспорт
	
	Объект = Справочники[СтрПар.ИмяХранилища].ПустаяСсылка();
	РезСтр = Новый Структура("Объект, Состояние", Объект, Перечисления.бит_мдм_СостоянияОбъектов.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИнформационнаяБаза", СтрПар.ИнформационнаяБаза);
	Запрос.УстановитьПараметр("ОписаниеОбъекта", СтрПар.ОписаниеОбъекта);
	Запрос.УстановитьПараметр("ИД", СтрПар.ИД);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабСпр.Ссылка,
	               |	бит_мдм_СостоянияОбъектов.Состояние
	               |ИЗ
	               |	Справочник."+СтрПар.ИмяХранилища+" КАК ТабСпр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ПО ТабСпр.Ссылка = бит_мдм_СостоянияОбъектов.Объект
	               |ГДЕ
	               |	ТабСпр.ИнформационнаяБаза = &ИнформационнаяБаза
	               |	И ТабСпр.ОписаниеОбъекта = &ОписаниеОбъекта
	               |	И ТабСпр.ИД = &ИД";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		РезСтр.Объект    = Выборка.Ссылка;
		РезСтр.Состояние = Выборка.Состояние;
		
	КонецЕсли; 
	
	Возврат РезСтр;
	
КонецФункции // НайтиОбъектОбменаВнешний()

// Функция выполняет подготовку.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Результат - Строка.
//
Функция ВыполнитьПодготовкуОбменаЗаписиРегистра(вхИсточник, Настройки, вхСостояние = Неопределено, ПравилаМиграции) Экспорт

	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(вхИсточник) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 

    Если ЗначениеЗаполнено(вхСостояние) Тогда
		
		Состояние = вхСостояние;
		
	Иначе	
		
		Состояние = РегистрыСведений.бит_мдм_СостоянияОбъектов.СостояниеОбъекта(вхИсточник);
		
	КонецЕсли; 	
	
	КэшОбработанных = Новый Соответствие;
	КэшОбработки = Новый Соответствие;
	
	МетаИсточник = вхИсточник.Метаданные();
	ИмяХранилища = МетаИсточник.Имя;
	
	ОписаниеИсточник = вхИсточник.ОписаниеОбъекта;
	ОписаниеПриемник = Настройки.ОписаниеОбъекта;
	
	// Выполним поиск объекта обмена по идентификатору.
	ПарамПоиска = Новый Структура;
	ПарамПоиска.Вставить("ИмяХранилища", ИмяХранилища);
	ПарамПоиска.Вставить("ИнформационнаяБаза", Настройки.ИнформационнаяБаза);
	ПарамПоиска.Вставить("ИД", вхИсточник.ИД);
	ПарамПоиска.Вставить("ОписаниеОбъекта", Настройки.ОписаниеОбъекта);
	
	РезПоиска = НайтиОбъектОбменаВнешний(ПарамПоиска);
	СсылкаХранения = РезПоиска.Объект;

    Если НЕ Состояние = Перечисления.бит_мдм_СостоянияОбъектов.Обработан Тогда	
		
		// Преобразуем объекто обмена текущей информационной базы в объект обмена внешней базы.
		Если ЗначениеЗаполнено(СсылкаХранения) Тогда
			
			ОбъектХранения = СсылкаХранения.ПолучитьОбъект();
			
		Иначе	
			
			ОбъектХранения = Справочники[ИмяХранилища].СоздатьЭлемент();
			
		КонецЕсли; 
				
		ОбъектХранения.Наименование          = вхИсточник.Наименование;
		ОбъектХранения.ВидИнформационнойБазы = Настройки.ВидИнформационнойБазы;
		ОбъектХранения.ИнформационнаяБаза    = Настройки.ИнформационнаяБаза;
		ОбъектХранения.ОписаниеОбъекта       = Настройки.ОписаниеОбъекта;
		ОбъектХранения.ИД                    = вхИсточник.ИД;
		
		ОбъектХранения.ПометкаУдаления       = вхИсточник.ПометкаУдаления;
		
		Если НЕ ЗначениеЗаполнено(СсылкаХранения) Тогда
			
			ОбъектХранения.УстановитьНовыйКод();
			
		КонецЕсли; 
		ОбъектХранения.Данные.Очистить();
		
		ПсевдоМетаИсточник = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданные(ОписаниеИсточник, "Структура");		
		ПсевдоМетаПриемник = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданные(ОписаниеПриемник, "Структура");

		Если ЗначениеЗаполнено(Настройки.Правило) Тогда
			
			// Заполнение по правилам
			
		Иначе
			
			// Заполнение по-умолчанию. Синхронизация по именам реквизитов.
			Для каждого СтрокаДанные Из вхИсточник.Данные Цикл
				
				ИмяКоллекцииИсточник = СтрокаДанные.ОписаниеРеквизита.ИмяТабличнойЧасти;
				ИмяКоллекцииИсточник = СтрЗаменить(ИмяКоллекцииИсточник, "$", "");
				ПсевдоМетаРеквизитИсточник = ПсевдоМетаИсточник[ИмяКоллекцииИсточник][СтрокаДанные.ИмяРеквизита];
				ПсевдоМетаРеквизитПриемник = Неопределено;
				
				Если ПсевдоМетаПриемник.Реквизиты.Свойство(СтрокаДанные.ИмяРеквизита) Тогда
					
					ПсевдоМетаРеквизитПриемник = ПсевдоМетаПриемник.Реквизиты[СтрокаДанные.ОписаниеРеквизита.Имя];
					
				ИначеЕсли ПсевдоМетаПриемник.Измерения.Свойство(СтрокаДанные.ИмяРеквизита) Тогда	
					
					ПсевдоМетаРеквизитПриемник = ПсевдоМетаПриемник.Измерения[СтрокаДанные.ОписаниеРеквизита.Имя];
					
				КонецЕсли; 
				
				Если НЕ ПсевдоМетаРеквизитПриемник = Неопределено Тогда
				
					НоваяСтрока = ОбъектХранения.Данные.Добавить();
					НоваяСтрока.ОписаниеРеквизита = ПсевдоМетаРеквизитПриемник.ОписаниеРеквизита;
					НоваяСтрока.ИмяРеквизита = ПсевдоМетаРеквизитПриемник.Имя;
					
					ВидИбИсточник = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
					ВидИбПриемник = Настройки.ВидИнформационнойБазы;
					НоваяСтрока.Значение = КонвертироватьЗначениеРеквизитаПодготовкаОбмена(СтрокаДанные.Значение, 
					                                                                        ПсевдоМетаРеквизитИсточник, 
																							ПсевдоМетаРеквизитПриемник, 
																							ВидИбИсточник, 
																							ВидИбПриемник, 
																							ПравилаМиграции, 
																							КэшОбработанных, 
																							КэшОбработки);
				
				КонецЕсли; 
				
			КонецЦикла; 
			
			
		КонецЕсли;	
		
		Если НЕ Отказ Тогда
			
			флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ОбъектХранения, "", "Ошибки");
			
			Если флВыполнено Тогда
				
				СсылкаХранения = ОбъектХранения.Ссылка;
				РегистрыСведений.бит_мдм_СостоянияОбъектов.Зарегистрировать(вхИсточник.Ссылка, Перечисления.бит_мдм_СостоянияОбъектов.Обработан);
				РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(вхИсточник.Ссылка, Перечисления.бит_мдм_События.ПодготовкаОбмена);
				//ОчиститьИзмененныеРеквизиты(вхИсточник);
				
			КонецЕсли; 
			
		КонецЕсли; 

	
	КонецЕсли; 
	
	Возврат СсылкаХранения;
	
КонецФункции // ВыполнитьПодготовкуОбменаЗаписиРегистра()

// Функция выполняет подготовку к обмену элемента справочника.
// 
// Параметры:
//  вхИсточник - Выборка
//  Настройки - Структура.
// 
// Возвращаемое значение:
//  СсылкаХранения - СправочникСсылка.бит_мдм_ОбъектОбмена, СправочникСсылка.бит_мдм_ОбъектОбменаИерархияЭлементов.
// 
Функция ВыполнитьПодготовкуОбменаЭлементаСправочника(вхИсточник, Настройки, вхСостояние = Неопределено, ПравилаМиграции, КэшОбработанных, КэшОбработки) Экспорт
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(вхИсточник) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	ОбработаннаяСсылка = КэшОбработанных[вхИсточник];
	Если ЗначениеЗаполнено(ОбработаннаяСсылка) Тогда
		
		Если ОбработаннаяСсылка = "Выход" Тогда
			Возврат Неопределено;
		Иначе	
			Возврат ОбработаннаяСсылка;
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если КэшОбработки[вхИсточник] = Истина Тогда
	
		 Возврат Неопределено;
	
	КонецЕсли; 
	 
	КэшОбработки.Вставить(вхИсточник, Истина); 
	
	
	Если ЗначениеЗаполнено(вхСостояние) Тогда
		
		Состояние = вхСостояние;
		
	Иначе	
		
		Состояние = РегистрыСведений.бит_мдм_СостоянияОбъектов.СостояниеОбъекта(вхИсточник);
		
	КонецЕсли; 
	
	МетаИсточник = вхИсточник.Метаданные();
	ИмяХранилища = МетаИсточник.Имя;
	
	ОписаниеИсточник = вхИсточник.ОписаниеОбъекта;
	ОписаниеПриемник = Настройки.ОписаниеОбъекта;
	
	// Выполним поиск объекта обмена по идентификатору.
	ПарамПоиска = Новый Структура;
	ПарамПоиска.Вставить("ИмяХранилища", ИмяХранилища);
	ПарамПоиска.Вставить("ИнформационнаяБаза", Настройки.ИнформационнаяБаза);
	ПарамПоиска.Вставить("ИД", вхИсточник.ИД);
	ПарамПоиска.Вставить("ОписаниеОбъекта", Настройки.ОписаниеОбъекта);
	
	РезПоиска = НайтиОбъектОбменаВнешний(ПарамПоиска);
	СсылкаХранения = РезПоиска.Объект;
	
	Если НЕ Состояние = Перечисления.бит_мдм_СостоянияОбъектов.Обработан Тогда
		
		// Преобразуем объекто обмена текущей информационной базы в объект обмена внешней базы.
		Если ЗначениеЗаполнено(СсылкаХранения) Тогда
			
			ОбъектХранения = СсылкаХранения.ПолучитьОбъект();
			
		Иначе	
			
			Если вхИсточник.ЭтоГруппа Тогда
				ОбъектХранения = Справочники[ИмяХранилища].СоздатьГруппу();
			Иначе	
				ОбъектХранения = Справочники[ИмяХранилища].СоздатьЭлемент();
			КонецЕсли; 
			
		КонецЕсли; 
				
		ОбъектХранения.Наименование          = вхИсточник.Наименование;
		ОбъектХранения.ВидИнформационнойБазы = Настройки.ВидИнформационнойБазы;
		ОбъектХранения.ИнформационнаяБаза    = Настройки.ИнформационнаяБаза;
		ОбъектХранения.ОписаниеОбъекта       = Настройки.ОписаниеОбъекта;
		ОбъектХранения.ИД                    = вхИсточник.ИД;
		ОбъектХранения.ЭтоПредопределенный   = вхИсточник.ЭтоПредопределенный;
		ОбъектХранения.ИмяПредопределенного  = вхИсточник.ИмяПредопределенного;
		ОбъектХранения.КодОбъекта            = вхИсточник.КодОбъекта;
		Если Настройки.ОписаниеОбъекта.ОтправлятьКод Тогда
		
			ОбъектХранения.Код_Внешний = вхИсточник.КодОбъекта;
		
		КонецЕсли; 
		
		ОбъектХранения.ПометкаУдаления       = вхИсточник.ПометкаУдаления;
		
		Если ЗначениеЗаполнено(вхИсточник.Родитель) Тогда
			
			ОбъектХранения.Родитель              = ВыполнитьПодготовкуОбменаЭлементаСправочника(вхИсточник.Родитель, Настройки, , ПравилаМиграции, КэшОбработанных, КэшОбработки);
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(вхИсточник.ВладелецОбъекта) Тогда
			
			МассивНастроек = ПравилаМиграции[вхИсточник.ВладелецОбъекта.ОписаниеОбъекта];
			
			Если МассивНастроек.Количество() > 0 Тогда
				
				НастройкиВладелец = МассивНастроек[0];
				ОбъектХранения.ВладелецОбъекта       = ВыполнитьПодготовкуОбменаЭлементаСправочника(вхИсточник.ВладелецОбъекта, НастройкиВладелец, , ПравилаМиграции, КэшОбработанных, КэшОбработки);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если Настройки.ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
		
			ОбъектХранения.ТипЗначения = вхИсточник.ТипЗначения;
		
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СсылкаХранения) Тогда
			
			ОбъектХранения.УстановитьНовыйКод();
			
		КонецЕсли; 
		ОбъектХранения.Данные.Очистить();
		ОбъектХранения.ДанныеТабличныхЧастей.Очистить();
		
		ПсевдоМетаИсточник = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданные(ОписаниеИсточник, "Структура");		
		ПсевдоМетаПриемник = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданные(ОписаниеПриемник, "Структура");
		МодельОбъектаИсточник = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьОбъект(вхИсточник, ПсевдоМетаИсточник, "Плоский");
		МодельОбъектаПриемник = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьОбъект(ОбъектХранения.Ссылка, ПсевдоМетаПриемник, "Плоский");
		
		Если ЗначениеЗаполнено(Настройки.Правило) Тогда
			
			 // Подготовка обмена согласно правилам
			 ПарамПодготовки = Новый Структура;
			 ПарамПодготовки.Вставить("вхИсточник"     , вхИсточник);
			 ПарамПодготовки.Вставить("Настройки"      , Настройки);
			 ПарамПодготовки.Вставить("ИсточникМета"   , ПсевдоМетаИсточник);
			 ПарамПодготовки.Вставить("ПриемникМета"   , ПсевдоМетаПриемник);
			 ПарамПодготовки.Вставить("ПравилаМиграции", ПравилаМиграции);
			 ПарамПодготовки.Вставить("КэшОбработанных", КэшОбработанных);
			 ПарамПодготовки.Вставить("КэшОбработки"   , КэшОбработки);
			 
			 ВыполнитьПодготовкуОбменаПоПравилу(МодельОбъектаИсточник, МодельОбъектаПриемник, ПарамПодготовки, Отказ);
			 
			 // Запись данных из модели приемника в объектХранения.
			 Для каждого КиЗ Из ПсевдоМетаПриемник.СтандартныеРеквизиты Цикл
				 
				ИмяРеквизита = КиЗ.Ключ; 
				Если ЗначениеЗаполнено(МодельОбъектаПриемник[ИмяРеквизита]) 
					 И МодельОбъектаПриемник[ИмяРеквизита] <> ОбъектХранения[ИмяРеквизита] Тогда
				
					 Если ИмяРеквизита = "Код" Тогда
						 ОбъектХранения["КодОбъекта"] = МодельОбъектаПриемник[ИмяРеквизита];
					 Иначе	
						 ОбъектХранения[ИмяРеквизита] = МодельОбъектаПриемник[ИмяРеквизита];
					 КонецЕсли;  				
				 КонецЕсли; 
			 
			 КонецЦикла; // По стандартным реквизитам
			 
			 Для каждого КиЗ Из ПсевдоМетаПриемник.Реквизиты Цикл
				 
				 ИмяРеквизита = КиЗ.Ключ;
				 ПсевдоМетаРеквизит = КиЗ.Значение;
				 
				 НоваяСтрока = ОбъектХранения.Данные.Добавить();
				 НоваяСтрока.ОписаниеРеквизита = ПсевдоМетаРеквизит.ОписаниеРеквизита;
				 НоваяСтрока.ИмяРеквизита = ПсевдоМетаРеквизит.Имя;
				 НоваяСтрока.Значение = МодельОбъектаПриемник[ИмяРеквизита];
				 
			 КонецЦикла; // По реквизитам
			 
			 Для каждого КиЗ Из ПсевдоМетаПриемник.ТабличныеЧасти Цикл
			 
			 	ИмяТабЧасти = КиЗ.Ключ;
				
				Если НЕ МодельОбъектаПриемник.Свойство(ИмяТабЧасти) Тогда
				
					Продолжить;
				
				КонецЕсли; 
				
				ПсевдоМетаТЧ = ПсевдоМетаПриемник.ТабличныеЧасти[ИмяТабЧасти];
				
				нс = 1;				
				Для каждого МодельСтроки Из МодельОбъектаПриемник[ИмяТабЧасти] Цикл
				
					 
					 Для каждого КиЗР Из МодельСтроки Цикл
						 
						ИмяРеквизита = КиЗР.Ключ; 
						 
					 	НоваяСтрока = ОбъектХранения.ДанныеТабличныхЧастей.Добавить();
						НоваяСтрока.НомерСтрокиТабличнойЧасти = нс;
						НоваяСтрока.ИмяТабличнойЧасти         = ИмяТабЧасти;
						НоваяСтрока.ИмяРеквизита              = ИмяРеквизита;
						НоваяСтрока.ОписаниеРеквизита         = ПсевдоМетаТЧ.Реквизиты[ИмяРеквизита].ОписаниеРеквизита;
						НоваяСтрока.Значение                  = КиЗР.Значение;
					 
					 КонецЦикла; 
					 
					 нс = нс + 1;
					 
				КонецЦикла; 
			 
			 КонецЦикла; // По табличным частям
			 
		Иначе	
			
			// Заполнение по-умолчанию. Синхронизация по именам реквизитов.
			Для каждого СтрокаДанные Из вхИсточник.Данные Цикл
				
				Если ПсевдоМетаПриемник.Реквизиты.Свойство(СтрокаДанные.ИмяРеквизита) Тогда
					
					ПсевдоМетаРеквизитИсточник = ПсевдоМетаИсточник.Реквизиты[СтрокаДанные.ИмяРеквизита];
					ПсевдоМетаРеквизитПриемник = ПсевдоМетаПриемник.Реквизиты[СтрокаДанные.ОписаниеРеквизита.Имя];
					НоваяСтрока = ОбъектХранения.Данные.Добавить();
					НоваяСтрока.ОписаниеРеквизита = ПсевдоМетаРеквизитПриемник.ОписаниеРеквизита;
					НоваяСтрока.ИмяРеквизита = ПсевдоМетаРеквизитПриемник.Имя;
					
					ВидИбИсточник = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
					ВидИбПриемник = Настройки.ВидИнформационнойБазы;
					НоваяСтрока.Значение = КонвертироватьЗначениеРеквизитаПодготовкаОбмена(СтрокаДанные.Значение, ПсевдоМетаРеквизитИсточник, ПсевдоМетаРеквизитПриемник, ВидИбИсточник, ВидИбПриемник, ПравилаМиграции, КэшОбработанных, КэшОбработки);
					
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			Для каждого СтрокаДанные Из вхИсточник.ДанныеТабличныхЧастей Цикл
				
				Если ПсевдоМетаПриемник.ТабличныеЧасти.Свойство(СтрокаДанные.ИмяТабличнойЧасти) Тогда
					
					ПсевдоМетаТабЧасть = ПсевдоМетаПриемник.ТабличныеЧасти[СтрокаДанные.ИмяТабличнойЧасти];
					ПсевдоМетаТабЧастьИсточник = ПсевдоМетаИсточник.ТабличныеЧасти[СтрокаДанные.ИмяТабличнойЧасти];
					
					Если ПсевдоМетаТабЧасть.Реквизиты.Свойство(СтрокаДанные.ИмяРеквизита) Тогда
						
						ПсевдоМетаРеквизитИсточник = ПсевдоМетаТабЧастьИсточник.Реквизиты[СтрокаДанные.ИмяРеквизита];
						ПсевдоМетаРеквизитПриемник = ПсевдоМетаТабЧасть.Реквизиты[СтрокаДанные.ИмяРеквизита];
						
						НоваяСтрока = ОбъектХранения.ДанныеТабличныхЧастей.Добавить();
						НоваяСтрока.ОписаниеРеквизита = ПсевдоМетаРеквизитПриемник.ОписаниеРеквизита;
						НоваяСтрока.ИмяРеквизита = ПсевдоМетаРеквизитПриемник.Имя;
						НоваяСтрока.ИмяТабличнойЧасти = ПсевдоМетаТабЧасть.Имя;
						НоваяСтрока.НомерСтрокиТабличнойЧасти = СтрокаДанные.НомерСтрокиТабличнойЧасти;
						
						ВидИбИсточник = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
						ВидИбПриемник = Настройки.ВидИнформационнойБазы;
						НоваяСтрока.Значение = КонвертироватьЗначениеРеквизитаПодготовкаОбмена(СтрокаДанные.Значение, ПсевдоМетаРеквизитПриемник, ПсевдоМетаРеквизитПриемник, ВидИбИсточник, ВидИбПриемник, ПравилаМиграции, КэшОбработанных, КэшОбработки);
						
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			
		КонецЕсли; 
		
		Если НЕ Отказ Тогда
			
			флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ОбъектХранения, "", "Ошибки");
			
			Если флВыполнено Тогда
				
				СсылкаХранения = ОбъектХранения.Ссылка;
				РегистрыСведений.бит_мдм_СостоянияОбъектов.Зарегистрировать(вхИсточник.Ссылка, Перечисления.бит_мдм_СостоянияОбъектов.Обработан);
				РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(вхИсточник.Ссылка, Перечисления.бит_мдм_События.ПодготовкаОбмена);
				ОчиститьИзмененныеРеквизиты(вхИсточник);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СсылкаХранения) Тогда
		
		КэшОбработанных.Вставить(вхИсточник, СсылкаХранения);
		
	Иначе	
		
		КэшОбработанных.Вставить(вхИсточник, "Выход");
		
	КонецЕсли; 
	
	
	Возврат СсылкаХранения;
	
КонецФункции // ВыполнитьПодготовкуОбменаЭлементаСправочника()

// Процедура выполняет подготовку объектов к обмену.
// 
Процедура ВыполнитьПодготовкуОбмена() Экспорт
	
	РезДанные = РегистрыСведений.бит_мдм_ПравилаПодготовкиОбмена.ПолучитьПравила();
	Правила = РезДанные.Правила;
	МассивИсточников = РезДанные.МассивИсточников;
	
	// Получение объектов, подлежащих подготовке.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидИнформационнойБазы", Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза);
	Запрос.УстановитьПараметр("МассивИсточников", МассивИсточников);
	Запрос.УстановитьПараметр("СостояниеИзменено", Перечисления.бит_мдм_СостоянияОбъектов.Изменен);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	""бит_мдм_ОбъектыОбмена"" КАК ИмяХранилища,
	               |	бит_мдм_ОбъектыОбмена.Ссылка,
	               |	бит_мдм_ОбъектыОбмена.ОписаниеОбъекта,
	               |	бит_мдм_СостоянияОбъектов.Состояние
	               |ИЗ
	               |	Справочник.бит_мдм_ОбъектыОбмена КАК бит_мдм_ОбъектыОбмена
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ПО бит_мдм_ОбъектыОбмена.Ссылка = бит_мдм_СостоянияОбъектов.Объект
	               |ГДЕ
	               |	бит_мдм_ОбъектыОбмена.ВидИнформационнойБазы = &ВидИнформационнойБазы
	               |	И бит_мдм_ОбъектыОбмена.ОписаниеОбъекта В(&МассивИсточников)
	               |	И бит_мдм_СостоянияОбъектов.Состояние = &СостояниеИзменено
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""бит_мдм_ОбъектыОбменаИерархияЭлементов"",
	               |	бит_мдм_ОбъектыОбменаИерархияЭлементов.Ссылка,
	               |	бит_мдм_ОбъектыОбменаИерархияЭлементов.ОписаниеОбъекта,
	               |	бит_мдм_СостоянияОбъектов.Состояние
	               |ИЗ
	               |	Справочник.бит_мдм_ОбъектыОбменаИерархияЭлементов КАК бит_мдм_ОбъектыОбменаИерархияЭлементов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ПО бит_мдм_ОбъектыОбменаИерархияЭлементов.Ссылка = бит_мдм_СостоянияОбъектов.Объект
	               |ГДЕ
	               |	бит_мдм_ОбъектыОбменаИерархияЭлементов.ВидИнформационнойБазы = &ВидИнформационнойБазы
	               |	И бит_мдм_ОбъектыОбменаИерархияЭлементов.ОписаниеОбъекта В(&МассивИсточников)
	               |	И бит_мдм_СостоянияОбъектов.Состояние = &СостояниеИзменено
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""бит_мдм_ПланыВидовХарактеристикОбмена"",
	               |	ПВХОбмена.Ссылка,
	               |	ПВХОбмена.ОписаниеОбъекта,
	               |	бит_мдм_СостоянияОбъектов.Состояние
	               |ИЗ
	               |	Справочник.бит_мдм_ПланыВидовХарактеристикОбмена КАК ПВХОбмена
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ПО ПВХОбмена.Ссылка = бит_мдм_СостоянияОбъектов.Объект
	               |ГДЕ
	               |	ПВХОбмена.ВидИнформационнойБазы = &ВидИнформационнойБазы
	               |	И ПВХОбмена.ОписаниеОбъекта В(&МассивИсточников)
	               |	И бит_мдм_СостоянияОбъектов.Состояние = &СостояниеИзменено
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""бит_мдм_СчетаОбмена"",
	               |	бит_мдм_СчетаОбмена.Ссылка,
	               |	бит_мдм_СчетаОбмена.ОписаниеОбъекта,
	               |	бит_мдм_СостоянияОбъектов.Состояние
	               |ИЗ
	               |	РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_мдм_СчетаОбмена КАК бит_мдм_СчетаОбмена
	               |		ПО бит_мдм_СостоянияОбъектов.Объект = бит_мдм_СчетаОбмена.Ссылка
	               |ГДЕ
	               |	бит_мдм_СчетаОбмена.ВидИнформационнойБазы = &ВидИнформационнойБазы
	               |	И бит_мдм_СчетаОбмена.ОписаниеОбъекта В(&МассивИсточников)
	               |	И бит_мдм_СостоянияОбъектов.Состояние = &СостояниеИзменено
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""бит_мдм_СведенияОбмена"",
	               |	бит_мдм_СведенияОбмена.Ссылка,
	               |	бит_мдм_СведенияОбмена.ОписаниеОбъекта,
	               |	бит_мдм_СостоянияОбъектов.Состояние
	               |ИЗ
	               |	Справочник.бит_мдм_СведенияОбмена КАК бит_мдм_СведенияОбмена
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ПО бит_мдм_СведенияОбмена.Ссылка = бит_мдм_СостоянияОбъектов.Объект
	               |ГДЕ
	               |	бит_мдм_СостоянияОбъектов.Состояние = &СостояниеИзменено
	               |	И бит_мдм_СведенияОбмена.ВидИнформационнойБазы = &ВидИнформационнойБазы
	               |	И бит_мдм_СведенияОбмена.ОписаниеОбъекта В(&МассивИсточников)";
				   
	Результат = Запрос.Выполнить();			   
	
	// Выполнение подготовки к обмену
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		 МассивПравил = Правила[Выборка.ОписаниеОбъекта];
		 
		 Если НЕ МассивПравил = Неопределено Тогда
		 
		 	  Для каждого ТекПравило Из МассивПравил Цикл
				  
				  КэшОбработанных = Новый Соответствие;
				  КэшОбработки = Новый Соответствие;
				  Если Выборка.ИмяХранилища = "бит_мдм_СведенияОбмена" Тогда
					  ВыполнитьПодготовкуОбменаЗаписиРегистра(Выборка.Ссылка, ТекПравило, Выборка.Состояние, Правила); 
				  Иначе	
					  ВыполнитьПодготовкуОбменаЭлементаСправочника(Выборка.Ссылка, ТекПравило, Выборка.Состояние, Правила, КэшОбработанных, КэшОбработки);
				  КонецЕсли; 
			  
			  КонецЦикла;  // По правилам 
		 
		 КонецЕсли; 
	              
	КонецЦикла;  // По объектам
	
КонецПроцедуры // ВыполнитьПодготовкуОбмена()

// Функция регистрирует изменения по всем элементам данного справочника.
// 
// Параметры:
//    вхВидОбъекта - Строка
//    ИмяОбъекта - Строка
// 
// Возвращаемое значение:
//  КолВо - Число.
// 
Функция ЗарегистрироватьВсе(ИБ, вхВидОбъекта, ИмяОбъекта) Экспорт
	
	КолВо = 0;
	
	Если ТипЗнч(вхВидОбъекта) = Тип("ПеречислениеСсылка.бит_мдм_ВидыОбъектовОбмена") Тогда
		
		ВидОбъекта = вхВидОбъекта;
		
	Иначе	
		
		ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена[вхВидОбъекта];
		
	КонецЕсли; 
	
	флЭтоОбъектТекБазы = Ложь;	
	Если ТипЗнч(ИБ) = Тип("СправочникСсылка.бит_мпд_ВидыИнформационныхБаз") Тогда
		
		ВидИБ = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;	
		ОписаниеОбъекта = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(ВидИБ, ВидОбъекта, ИмяОбъекта);
		
		МетаОбъект = Неопределено;
		Если ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник Тогда
			
			МетаОбъект  = Метаданные.Справочники.Найти(ИмяОбъекта);
			
		ИначеЕсли ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
			
			МетаОбъект = Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта);
			
		ИначеЕсли ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда	
			
			МетаОбъект = Метаданные.ПланыСчетов.Найти(ИмяОбъекта);
			
		КонецЕсли; 
		
		флЭтоОбъектТекБазы = ?(МетаОбъект = Неопределено, Ложь, Истина);
		
		
	Иначе	
		
		ВидИБ = ИБ.ВидИнформационнойБазы;	
		ОписаниеОбъекта = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(ВидИБ, ВидОбъекта, ИмяОбъекта);
		
	КонецЕсли; 
	
	Если ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
		
		КлассОбъекта = "ПланВидовХарактеристик";
		
	ИначеЕсли ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда
		
		КлассОбъекта = "ПланСчетов";
		
	Иначе
		
		КлассОбъекта = "Справочник";
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОписаниеОбъекта) Тогда
		
		Если флЭтоОбъектТекБазы Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ТабСпр.Ссылка
			|ИЗ
			|	%КлассОбъекта%.%ИмяОбъекта% КАК ТабСпр
			|АВТОУПОРЯДОЧИВАНИЕ";			
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяОбъекта%"  , ИмяОбъекта);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%КлассОбъекта%", КлассОбъекта);			
			Результат = Запрос.Выполнить();
			
		Иначе	
			
			ИмяТаблицыХранения = ИмяОбъектаХранения(ОписаниеОбъекта);
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ВидИнформационнойБазы", ВидИБ);
			Запрос.УстановитьПараметр("ИнформационнаяБаза"   , ИБ);
			Запрос.УстановитьПараметр("ОписаниеОбъекта"      , ОписаниеОбъекта);
			
			Запрос.Текст = "ВЫБРАТЬ
			                |	ТабСпр.Ссылка
			                |ИЗ
			                |	%КлассОбъекта%.%ИмяОбъекта% КАК ТабСпр
			                |ГДЕ
			                |	ТабСпр.ВидИнформационнойБазы = &ВидИнформационнойБазы
			                |	И ТабСпр.ИнформационнаяБаза = &ИнформационнаяБаза
			                |	И ТабСпр.ОписаниеОбъекта = &ОписаниеОбъекта
			                |АВТОУПОРЯДОЧИВАНИЕ";			
							
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяОбъекта%"  , ИмяТаблицыХранения);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%КлассОбъекта%", КлассОбъекта);			
			
			Результат = Запрос.Выполнить();
			
		КонецЕсли; 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Об = Выборка.Ссылка.ПолучитьОбъект();
			флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(Об,,"Ошибки");
			
			Если флВыполнено Тогда
				
				КолВо = КолВо + 1;
				
			КонецЕсли; 
			
		КонецЦикла; 				
		
	КонецЕсли; 
	
	Возврат КолВо;
	
КонецФункции // ЗарегистрироватьВсе()

// Функция определяет является ли данный пользователь администратором МДМ.
// 
// Возвращаемое значение:
//  фЭтоАдмин - Булево.
// 
Функция ЭтоАдминистраторМДМ() Экспорт

	фЭтоАдмин = ?(РольДоступна("бит_мдм_Администратор") ИЛИ РольДоступна("ПолныеПрава"), Истина, Ложь);

	Возврат фЭтоАдмин;
	
КонецФункции // ЭтоАдминистраторМДМ()

// Функция выполняет преобразование типов 1С в типы OData.
// 
// Параметры:
//  ВхТип - Строка.
// 
// Возвращаемое значение:
//  ИмяТипа - Строка.
// 
Функция ПреобразоватьТипыОдинЭс(ВхТип) Экспорт
	
	ИмяТипа = "Edm.String";
	
	Словарь = Новый Соответствие;
	Словарь.Вставить("Строка", "Edm.String");
	Словарь.Вставить("Булево", "Edm.Boolean");
	Словарь.Вставить("Дата"  , "Edm.DateTime");	
	Словарь.Вставить("Число" , "Edm.Double");
	
	ИмяТипа = Словарь[ВхТип];
	
	Если ИмяТипа = Неопределено Тогда
		
		Если Найти(ВхТип,"Ссылка.") > 0 Тогда
			
			ИмяТипа = СтрЗаменить(ВхТип  , "СправочникСсылка", "CatalogRef");
			ИмяТипа = СтрЗаменить(ИмяТипа, "ПланВидовХарактеристикСсылка", "ChartOfCharacteristicTypesRef");
			ИмяТипа = СтрЗаменить(ИмяТипа, "ПланСчетовСсылка", "ChartOfAccountsRef");
			
		Иначе	
			
			ИмяТипа = "Edm.String";
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ИмяТипа;
	
КонецФункции // ПреобразоватьТипыОдинЭс()

// Функция возвращает имя объекта 1С, в котором хранятся данные этого объекта обмена.
// 
// Параметры:
//  ОписаниеОбъекта - СправочникСсылка.бит_мдм_ОписанияОбъектовОбмена.
// 
// Возвращаемое значение:
//  Имя - Строка.
// 
Функция ИмяОбъектаХранения(ОписаниеОбъекта) Экспорт

	Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник Тогда
		
		Имя = ?(ОписаниеОбъекта.ВидИерархии = Перечисления.бит_мдм_ВидыИерархии.ИерархияЭлементов, "бит_мдм_ОбъектыОбменаИерархияЭлементов", "бит_мдм_ОбъектыОбмена");
		
    ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.РегистрСведений Тогда
	
	    Имя = "бит_мдм_СведенияОбмена";
	
	ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
		
		Имя = "бит_мдм_ПланыВидовХарактеристикОбмена";
		
	ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда	
		
		Имя = "бит_мдм_СчетаОбмена";
		
	ИначеЕсли ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Перечисление Тогда	
		
		Имя = "бит_мдм_ЗначенияПеречислений";
		
		
	КонецЕсли; 

	Возврат Имя;
	
КонецФункции // ИмяОбъектаХранения()

// Функция получает имя объекта для обращения через REST сервис.
// 
// Параметры:
//   ВидОбъекта - ПеречислениеСсылка.бит_мдм_ВидыОбъектов.
// 
// Возвращаемое значение:
//  Имя - Строка.
// 
Функция ПолучитьИмяОбъектаСервиса(ВидОбъекта) Экспорт

	Имя = "";
	
	Если ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник  Тогда
		
		Имя = "Catalog";
		
	ИначеЕсли ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
		
		Имя = "ChartOfCharacteristicTypes";
		
	ИначеЕсли ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда	
		
		Имя = "ChartOfAccounts";
		
	ИначеЕсли ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.РегистрСведений Тогда	
		
		Имя = "InformationRegister";
		
	КонецЕсли; 

	Возврат Имя;
	
КонецФункции // ПолучитьИмяОбъектаСервиса()

// Функция определяет вид объекта по имени объекта.
// 
// Параметры:
//  ИмяОбъектаПолное - Строка.
// 
// Возвращаемое значение:
//  ВидОбъекта - ПеречислениеСсылка.бит_мдм_ВидыОбъектов.
// 
Функция ОпределитьВидОбъекта(ИмяОбъектаПолное) Экспорт
	
	Имена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ИмяОбъектаПолное);
	
	ВидыОбъектов = Новый Соответствие;
	ВидыОбъектов.Вставить("Справочник", Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник);
	ВидыОбъектов.Вставить("ПланВидовХарактеристик", Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик); 
	ВидыОбъектов.Вставить("РегистрСведений", Перечисления.бит_мдм_ВидыОбъектовОбмена.РегистрСведений);
	ВидыОбъектов.Вставить("ПланСчетов", Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет);
	
	ВидОбъекта = ВидыОбъектов[Имена.ИмяКласса];
	
	Возврат ВидОбъекта;
	
КонецФункции // ОпределитьВидОбъекта()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегистрацияИзменений

// Процедура заполняет данные реквизита при регистрации изменений. 
// 
Процедура ЗаполнитьДанныеРеквизитаРегистрацияИзменений(ОбъектХранения, вхЗначение, ПсевдоМетаРеквизит, ИмяРеквизита, ИмяТабЧасти = "", НомерСтрокиТабЧасти = 1, КэшОбработанных, КэшОбработки)
	
	Исключения = Новый Структура;
	Исключения.Вставить("Ссылка");
	
	ИменаХранениеОбъект = Новый Структура;
	ИменаХранениеОбъект.Вставить("Наименование"             , "Наименование");
	ИменаХранениеОбъект.Вставить("ПометкаУдаления"          , "ПометкаУдаления");
	ИменаХранениеОбъект.Вставить("Предопределенный"         , "ЭтоПредопределенный");
	ИменаХранениеОбъект.Вставить("ИмяПредопределенныхДанных", "ИмяПредопределенного");
	ИменаХранениеОбъект.Вставить("Код"                      , "КодОбъекта");
	
	Если Исключения.Свойство(ИмяРеквизита) Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если ИменаХранениеОбъект.Свойство(ИмяРеквизита) Тогда
		
		ИмяПриемник = ИменаХранениеОбъект[ИмяРеквизита];
		Если ОбъектХранения[ИмяПриемник] <> вхЗначение Тогда
			
			ОбъектХранения[ИмяПриемник] = вхЗначение;
			
		КонецЕсли; 
		
	ИначеЕсли НЕ ПсевдоМетаРеквизит = Неопределено Тогда	
		
		ОписаниеРеквизита = ПсевдоМетаРеквизит.ОписаниеРеквизита;
		
		Если ЗначениеЗаполнено(ОписаниеРеквизита) Тогда
			
			Если ЗначениеЗаполнено(ИмяТабЧасти) Тогда
				НоваяСтрока = ОбъектХранения.ДанныеТабличныхЧастей.Добавить();
				НоваяСтрока.ИмяТабличнойЧасти = ИмяТабЧасти;
				НоваяСтрока.НомерСтрокиТабличнойЧасти = НомерСтрокиТабЧасти;
			Иначе	
				НоваяСтрока = ОбъектХранения.Данные.Добавить();
			КонецЕсли; 
			
			НоваяСтрока.ОписаниеРеквизита = ОписаниеРеквизита;	
			НоваяСтрока.ИмяРеквизита = ПсевдоМетаРеквизит.Имя;
			ВидТекИБ = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
			
			Если ЗначениеЗаполнено(ПсевдоМетаРеквизит.ВидОбъекта) И ЗначениеЗаполнено(ПсевдоМетаРеквизит.ИмяОбъекта) Тогда
				
				Если ОписаниеРеквизита.ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник 
					 ИЛИ ОписаниеРеквизита.ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик 
					 ИЛИ ОписаниеРеквизита.ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда
					
					// Ссылочный тип
					ТекОписаниеОбъектаРеквизит = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(ВидТекИБ
					, ПсевдоМетаРеквизит.ВидОбъекта, ПсевдоМетаРеквизит.ИмяОбъекта);
					
					
					Если ЗначениеЗаполнено(ТекОписаниеОбъектаРеквизит) Тогда
						
						ТекОбъектОбменаРеквизит = ВыполнитьРегистрациюИзмененийЭлементаСправочника(вхЗначение,,КэшОбработанных, КэшОбработки);
						НоваяСтрока.Значение = ТекОбъектОбменаРеквизит;
						
					КонецЕсли; 							 
					
				ИначеЕсли ОписаниеРеквизита.ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Перечисление Тогда
					
					Если ЗначениеЗаполнено(вхЗначение) Тогда
						
						// Перечисление
						ИмяПеречисления = вхЗначение.Метаданные().Имя;
						ТекПеречисление = Перечисления[ИмяПеречисления];
						ИмяЗначения = бит_РаботаСМетаданными.ПолучитьИмяЗначенияПеречисления(ТекПеречисление, вхЗначение);
						
						ЗначениеСсылка = Справочники.бит_мдм_ЗначенияПеречислений.НайтиЭлемент(ВидТекИБ, ИмяЗначения, Ложь, ИмяПеречисления);
						
						НоваяСтрока.Значение = ?(ЗначениеЗаполнено(ЗначениеСсылка), ЗначениеСсылка, ИмяЗначения);
						
					КонецЕсли; 
					
					
				КонецЕсли; 
				
			ИначеЕсли ОписаниеРеквизита.Составной = Истина Тогда
				
				// Временно, до реализации получения сведения о составе составных типов через HTTP.
				НоваяСтрока.Значение = Неопределено;
				
			Иначе	
				
				// Примитивный тип
				
				ТекОписаниеТипов = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(ПсевдоМетаРеквизит.ТипЗнчСтр);
				НоваяСтрока.Значение = ТекОписаниеТипов.ПривестиЗначение(вхЗначение);
				
			КонецЕсли; 
			
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьДанныеРеквизитаРегистрацияИзменений()

// Функция считает Хэш CRC32 по измерениям регистра.
//
// Параметры:
//   ЗаписьИсточник - РегистрСведенийМенеджерЗаписи.
//   МетаИсточник - ОбъектМетаданных.
//
// Возвращаемое значение:
//  Хеш - Число.
//
Функция ХешЗаписиРегистра(ЗаписьИсточник, МетаИсточник)

	// считаем хэш измерений
	СтрКлюч = Новый Структура;
	СтрКлюч.Вставить("Период", ЗаписьИсточник.Период);
	Для каждого МетаОб  Из МетаИсточник.Измерения Цикл
	
		СтрКлюч.Вставить(МетаОб.Имя, ЗаписьИсточник[МетаОб.Имя]);
	
	КонецЦикла; 
	
	Хеш = ХешСтруктуры(СтрКлюч);

	Возврат Хеш;
	
КонецФункции // ХешЗаписиРегистра(ЗаписьИсточник, МетаИсточник)

// Функция считает Хэш CRC32 по элементам отбора.
//
// Параметры:
//   Отбор - Структура.
//
// Возвращаемое значение:
//  Хеш - Число.
//
Функция ХешОтбора(Отбор)

	// считаем хэш по элементам отбора
	СтрКлюч = Новый Структура;
	Для каждого ЭО Из Отбор Цикл
	
		Если ЭО.Использование Тогда
		
			СтрКлюч.Вставить(ЭО.Имя, ЭО.Значение);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Хеш = ХешСтруктуры(СтрКлюч);
	
	Возврат Хеш;
	
КонецФункции // ХешОтбора()

// Функция считает Хэш CRC32 Структуры.
//
// Параметры:
//   СтрКлюч - Структура
//
// Возвращаемое значение:
//  Хеш - Число.
//
Функция ХешСтруктуры(СтрКлюч)

	СтрПредст = ЗначениеВСтрокуВнутр(СтрКлюч);
	Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеширование.Добавить(СтрПредст);
	
	Хеш = Хеширование.ХешСумма;
	
	Возврат Хеш;
	
КонецФункции // ХешСтруктуры()

// Функция формируем представление записи регистра по значениям ключевых полей.
//
// Параметры:
//  ЗаписьИсточник - РегистрСведенийЗапись.
//  МетаИсточник - ОбъектМетаданных.
//
// Возвращаемое значение:
//  СтрПредст - Строка.
//
Функция ПредставлениеЗаписиРегистра(ЗаписьИсточник, МетаИсточник)

	СтрПредст = "";
	
	Если ЗначениеЗаполнено(ЗаписьИсточник.Период) Тогда
	
		 СтрПредст = СтрПредст + ?(ПустаяСтрока(СтрПредст), "", ", ")+"Период"+":"+Строка(ЗаписьИсточник.Период);	
	
	КонецЕсли; 
	
	Для каждого МетаОб  Из МетаИсточник.Измерения Цикл
		
		ТекЗнч = ЗаписьИсточник[МетаОб.Имя];
		
		Если ЗначениеЗаполнено(ТекЗнч) Тогда
		
		     СтрПредст = СтрПредст + ?(ПустаяСтрока(СтрПредст), "", ", ")+МетаОб.Имя+":"+Строка(ТекЗнч);	
		
		КонецЕсли; 
	
	КонецЦикла; 

	Возврат СтрПредст;
	
КонецФункции // ПредставлениеЗаписиРегистра

Функция ВыполнитьРегистрациюУдаленияЗаписиРегистра(МетаИсточник, вхНастройки = Неопределено, вхХеш)

	Если НЕ вхНастройки = Неопределено Тогда
		
		Настройки = вхНастройки;
		
	Иначе	
		
	    // Получим настройки регистрации		
		ИмяПолное  = МетаИсточник.ПолноеИмя();
		ВидОбъекта = ОпределитьВидОбъекта(ИмяПолное);
		ОписаниеОбъекта = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза, ВидОбъекта, МетаИсточник.Имя);
		Настройки = РегистрыСведений.бит_мдм_ПравилаРегистрацииИзменений.ПолучитьНастройкиВнутреннейМиграции(ОписаниеОбъекта);
		
	КонецЕсли; 

	флВыполнено = Ложь;
	
	Если ЗначениеЗаполнено(вхХеш) Тогда
		
		СсылкаДляУдаления = НайтиСведенияОбмена(вхХеш, Настройки);
		Если ЗначениеЗаполнено(СсылкаДляУдаления) Тогда
			
			ОбъектДляУдаления = СсылкаДляУдаления.ПолучитьОбъект();
			Попытка
				
				ОбъектДляУдаления.УстановитьПометкуУдаления(Истина);
				флВыполнено = Истина;
				
			Исключение
				
			КонецПопытки;
			
			Если флВыполнено Тогда
				
				РегистрыСведений.бит_мдм_СостоянияОбъектов.Зарегистрировать(СсылкаДляУдаления, Перечисления.бит_мдм_СостоянияОбъектов.Изменен);
				РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(СсылкаДляУдаления, Перечисления.бит_мдм_События.РегистрацияИзменений);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 

	Возврат флВыполнено;
	
КонецФункции // ВыполнитьРегистрациюУдаленияЗаписиРегистра()

#КонецОбласти

#Область ПодготовкаОбмена

Функция КонвертироватьЗначениеРеквизитаПодготовкаОбмена(вхЗначение
	                                                     , ПсевдоМетаРеквизитИсточник
														 , ПсевдоМетаРеквизитПриемник
														 , ВидИбИсточник
														 , ВидИбПриемник
														 , ПравилаМиграции
														 , КэшОбработанных
														 , КэшОбработки)
	
	РезЗначение = Неопределено;
	
	Если ЗначениеЗаполнено(ПсевдоМетаРеквизитПриемник.ВидОбъекта) И ЗначениеЗаполнено(ПсевдоМетаРеквизитПриемник.ИмяОбъекта) Тогда
		
		Если ПсевдоМетаРеквизитПриемник.ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.Перечисление Тогда
			
			Если ТипЗнч(вхЗначение) = Тип("СправочникСсылка.бит_мдм_ЗначенияПеречислений") Тогда
				
				ИмяЗначения = вхЗначение.Имя;
				
			Иначе	
				
				ИмяЗначения = вхЗначение;
				
			КонецЕсли; 
			
			ЗначениеСсылка = Справочники.бит_мдм_ЗначенияПеречислений.НайтиЭлемент(ВидИбПриемник, ИмяЗначения, Ложь, ПсевдоМетаРеквизитПриемник.ИмяОбъекта);
			резЗначение = ?(ЗначениеЗаполнено(ЗначениеСсылка), ЗначениеСсылка, ИмяЗначения);
			
		Иначе	
			
			// ссылочный тип
			ТекОписаниеОбъектаИсточникРеквизит = Справочники.бит_мдм_ОписанияОбъектовОбмена.НайтиЭлемент(ВидИбИсточник			
			, ПсевдоМетаРеквизитИсточник.ВидОбъекта
			, ПсевдоМетаРеквизитИсточник.ИмяОбъекта);
			
			
			МассивПравил = ПравилаМиграции[ТекОписаниеОбъектаИсточникРеквизит];
			
			Если ТипЗнч(МассивПравил) = Тип("Массив") Тогда
				
				Для каждого ТекПравило Из МассивПравил Цикл
					
					РеквизитСсылка =  ВыполнитьПодготовкуОбменаЭлементаСправочника(вхЗначение, ТекПравило, "", ПравилаМиграции, КэшОбработанных, КэшОбработки);
					Если ЗначениеЗаполнено(РеквизитСсылка) Тогда
						
						РезЗначение = РеквизитСсылка;
						Прервать;
						
					КонецЕсли; 
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе	
		
		// примитивный тип
		Если ТипЗнч(вхЗначение) = Тип("СправочникСсылка.бит_мдм_ЗначенияПеречислений") Тогда
			
			ИмяЗначения     = вхЗначение.Имя;
			ИмяПеречисления = вхЗначение.Родитель.Имя;
			ЗначениеСсылка  = Справочники.бит_мдм_ЗначенияПеречислений.НайтиЭлемент(ВидИбПриемник, ИмяЗначения, Ложь, ИмяПеречисления);
			РезЗначение = ?(ЗначениеЗаполнено(ЗначениеСсылка), ЗначениеСсылка, ИмяЗначения);
			
		Иначе
			
			ТекОписаниеТипов = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(ПсевдоМетаРеквизитПриемник.ТипЗнчСтр);
			РезЗначение = ТекОписаниеТипов.ПривестиЗначение(вхЗначение);
			
		КонецЕсли; 
		
		
	КонецЕсли; 	
	
	
	Возврат РезЗначение;
	
КонецФункции // КонвертироватьЗначениеРеквизитаПодготовкаОбмена()

// Процедура-обработчик события ПередВыполнениемПравила. 
// Вызывается при подготовке обмена перед выполнением правила обмена. 
// 
// Параметры:
//   Источник - Структура.
//   Приемник - Структура.
//   СтруктураПараметров - Структура.
//   КодОбработчика - Строка.
// 
Процедура ПодготовкаОбменаПередВыполнениемПравила(Источник, Приемник, СтруктураПараметров, Знач КодОбработчика)

		Попытка
			
			Выполнить(КодОбработчика);
			
		Исключение
			
			ТекстСообщения =  НСтр("ru = 'Не удалось выполнить код обработчика ПередВыполнениемПравила правила %1% при обработке объекта %2%. Описание ошибки: %3%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
			                                                                             , СтруктураПараметров.Правило
																						 , СтруктураПараметров.вхИсточник
																						 , ОписаниеОшибки());
																						 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																			 
			
		КонецПопытки;

КонецПроцедуры // ПодготовкаОбменаПередВыполнениемПравила()

// Процедура-обработчик события ПередВыполнениемПравила. 
// Вызывается при подготовке обмена перед выполнением правила обмена. 
// 
// Параметры:
//   Источник - Структура.
//   Приемник - Структура.
//   СтруктураПараметров - Структура.
//   КодОбработчика - Строка.
// 
Процедура ПодготовкаОбменаПослеВыполненияПравила(Источник, Приемник, СтруктураПараметров, Знач КодОбработчика)

		Попытка
			
			Выполнить(КодОбработчика);
			
		Исключение
			
			ТекстСообщения =  НСтр("ru = 'Не удалось выполнить код обработчика ПослеВыполненияПравила правила %1% при обработке объекта %2%. Описание ошибки: %3%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
			                                                                             , СтруктураПараметров.Правило
																						 , СтруктураПараметров.вхИсточник
																						 , ОписаниеОшибки());
																						 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																			 
			
		КонецПопытки;

КонецПроцедуры // ПодготовкаОбменаПослеВыполненияПравила()

// Функция-обработчик события ПередОбработкойРеквизита правил обмена.
// 
// Параметры:
//   ИмяРеквизитаИсточник - Строка
//   ИмяРеквизитаПриемник - Строка
//   Источник - Структура
//   Приемник - Структура
//   СтрокаИсточник - Структура
//   СтрокаПриемник - Структура
//   СтруктураПараметров - Структура
//   КодОбработчика - Строка.
// 
// Возвращаемое значение:
//  ЗначениеРеквизита - Произвольный.
// 
Функция ПодготовкаОбменаПередОбработкойРеквизита(ИмяРеквизитаИсточник
	                                               , ИмяРеквизитаПриемник
												   , Источник
												   , Приемник
												   , СтрокаИсточник
												   , СтрокаПриемник
												   , СтруктураПараметров
												   , Знач КодОбработчика)
	
	ЗначениеРеквизита = Неопределено;
	
	Попытка
		
		Выполнить(КодОбработчика);
		
	Исключение
		
		ТекстСообщения =  НСтр("ru = 'Не удалось выполнить код обработчика ПередОбработкойРеквизита реквизита %1% при обработке объекта %2%. Описание ошибки: %3%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																					, ИмяРеквизитаПриемник
																					, СтруктураПараметров.вхИсточник
																					, ОписаниеОшибки());
		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																			 
		
		
	КонецПопытки;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции // ПодготовкаОбменаПередОбработкойРеквизита()

// Функция-обработчик события ПослеОбработкиРеквизита правил обмена.
// 
// Параметры:
//   ИмяРеквизитаИсточник - Строка
//   ИмяРеквизитаПриемник - Строка
//   Источник - Структура
//   Приемник - Структура
//   СтрокаИсточник - Структура
//   СтрокаПриемник - Структура
//   КодОбработчика - Строка
//   СтруктураПараметров - Структура.
// 
// Возвращаемое значение:
//  ЗначениеРеквизита - Произвольный.
// 
Функция ПодготовкаОбменаПослеОбработкиРеквизита(ИмяРеквизитаИсточник
	                                               , ИмяРеквизитаПриемник
												   , Источник
												   , Приемник
												   , СтрокаИсточник
												   , СтрокаПриемник
												   , СтруктураПараметров
												   , Знач КодОбработчика)
	
	ЗначениеРеквизита = Неопределено;
	
	Попытка
		
		Выполнить(КодОбработчика);
		
	Исключение
		
		ТекстСообщения =  НСтр("ru = 'Не удалось выполнить код обработчика ПослеОбработкиРеквизита реквизита %1% при обработке объекта %2%. Описание ошибки: %3%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																					, ИмяРеквизитаПриемник
																					, СтруктураПараметров.вхИсточник
																					, ОписаниеОшибки());
		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																			 
		
		
	КонецПопытки;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции // ПодготовкаОбменаПослеОбработкиРеквизита()

// Процедура преобразует реквизит по правилу.
// 
Процедура ОбработатьРеквизитПоПравилу(ИмяРеквизитаИсточник
	                                  , ИмяРеквизитаПриемник
									  , Источник
									  , Приемник
									  , ПсевдоМетаРеквизитПриемник
									  , ПсевдоМетаРеквизитИсточник
									  , СтрокаПравила
									  , СтруктураПараметров
									  , ИмяКоллекции)

	
	Настройки    = СтруктураПараметров.Настройки;
	ИсточникМета = СтруктураПараметров.ИсточникМета;
	ПриемникМета = СтруктураПараметров.ПриемникМета;
	вхИсточник   = СтруктураПараметров.вхИсточник;
	ПравилаМиграции = СтруктураПараметров.ПравилаМиграции;
	КэшОбработанных = СтруктураПараметров.КэшОбработанных;
	КэшОбработки    = СтруктураПараметров.КэшОбработки;
	ВидИбИсточник = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
	ВидИбПриемник = Настройки.ВидИнформационнойБазы;
									  
			// Обработчик ПередОбработкойРеквизита
			Если ЗначениеЗаполнено(СтрокаПравила.КодПередОбработкойРеквизита) Тогда
			
				 РезЗначение = ПодготовкаОбменаПередОбработкойРеквизита(ИмяРеквизитаИсточник
				                                                          , ИмяРеквизитаПриемник
																		  , Источник
																		  , Приемник
																		  , Новый Структура
																		  , Новый Структура
																		  , Новый Структура("вхИсточник",вхИсточник)
																		  , СтрокаПравила.КодПередОбработкойРеквизита);
																		  
				Если Найти(СтрокаПравила.КодПередОбработкойРеквизита, "ЗначениеРеквизита") > 0 Тогда
				
					 Источник[ИмяРеквизитаИсточник] = РезЗначение;
				
				КонецЕсли; 														  
			
			КонецЕсли; 
			
			// Конвертация значения реквизита
			Если ЗначениеЗаполнено(СтрокаПравила.РеквизитИсточник) Тогда
			
			   ЗначениеРеквизитаИсточник = Источник[СтрокаПравила.РеквизитИсточникИмя];
			   Приемник[ИмяРеквизитаПриемник] = КонвертироватьЗначениеРеквизитаПодготовкаОбмена(ЗначениеРеквизитаИсточник
                                                                                                 , ПсевдоМетаРеквизитИсточник			   
			                                                                                     , ПсевдоМетаРеквизитПриемник
																								 , ВидИбИсточник
																								 , ВидИбПриемник
																								 , ПравилаМиграции
																								 , КэшОбработанных
																								 , КэшОбработки);
				
			
			КонецЕсли; 
			
			// Обработчик ПослеОбработкиРеквизита
			Если ЗначениеЗаполнено(СтрокаПравила.КодПослеОбработкиРеквизита) Тогда
				
				РезЗначение = ПодготовкаОбменаПослеОбработкиРеквизита(ИмяРеквизитаИсточник
																		, ИмяРеквизитаПриемник
																		, Источник
																		, Приемник
																		, Новый Структура
																		, Новый Структура
																		, Новый Структура("вхИсточник",вхИсточник)
																		, СтрокаПравила.КодПослеОбработкиРеквизита);
				
				Если Найти(СтрокаПравила.КодПослеОбработкиРеквизита, "ЗначениеРеквизита") > 0 Тогда
					
					Приемник[ИмяРеквизитаПриемник] = РезЗначение;
					
				КонецЕсли; 
				
			КонецЕсли; 
									  
									  
									  
КонецПроцедуры // ОбработатьРеквизитПоПравилу()

// Процедура преобразует объект обмена согласно правилам. 
// 
// Параметры:
//  Источник - Структура.
//  Приемник - Структура.
//  СтруктураПараметров - Структура.
//  Отказ - Булево.
// 
Процедура ВыполнитьПодготовкуОбменаПоПравилу(Источник, Приемник, СтруктураПараметров, Отказ)
	
	Настройки    = СтруктураПараметров.Настройки;
	ИсточникМета = СтруктураПараметров.ИсточникМета;
	ПриемникМета = СтруктураПараметров.ПриемникМета;
	вхИсточник   = СтруктураПараметров.вхИсточник;
	ПравилаМиграции = СтруктураПараметров.ПравилаМиграции;
	КэшОбработанных = СтруктураПараметров.КэшОбработанных;
	КэшОбработки    = СтруктураПараметров.КэшОбработки;
	
	ВидИбИсточник = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
	ВидИбПриемник = Настройки.ВидИнформационнойБазы;
	
	// Готовим правила
	ТабПравила = Новый ТаблицаЗначений;
	ТабПравила.Колонки.Добавить("РеквизитИсточник", Новый ОписаниеТипов("СправочникСсылка.бит_мдм_ОписанияРеквизитовОбъектовОбмена"));
	ТабПравила.Колонки.Добавить("РеквизитПриемник", Новый ОписаниеТипов("СправочникСсылка.бит_мдм_ОписанияРеквизитовОбъектовОбмена"));
	ТабПравила.Колонки.Добавить("ИмяТабличнойЧастиИсточник"  , Новый ОписаниеТипов("Строка"));
	ТабПравила.Колонки.Добавить("ИмяТабличнойЧастиПриемник"  , Новый ОписаниеТипов("Строка"));				
	ТабПравила.Колонки.Добавить("РеквизитИсточникИмя"        , Новый ОписаниеТипов("Строка"));
	ТабПравила.Колонки.Добавить("РеквизитПриемникИмя"        , Новый ОписаниеТипов("Строка"));			
	ТабПравила.Колонки.Добавить("КодПередОбработкойРеквизита", Новый ОписаниеТипов("Строка"));
	ТабПравила.Колонки.Добавить("КодПослеОбработкиРеквизита" , Новый ОписаниеТипов("Строка"));
	
	ТабПравила.Индексы.Добавить("РеквизитИсточник");
	
	Для каждого СтрокаПравила Из Настройки.Правило.Правила Цикл
		
		Если СтрокаПравила.Отключено Тогда
		
			Продолжить;
		
		КонецЕсли; 
	
		НоваяСтрокаПравила = ТабПравила.Добавить();
		НоваяСтрокаПравила.РеквизитИсточник            = СтрокаПравила.РеквизитИсточник;
		НоваяСтрокаПравила.РеквизитПриемник            = СтрокаПравила.РеквизитПриемник;
		НоваяСтрокаПравила.ИмяТабличнойЧастиИсточник   = СтрокаПравила.РеквизитИсточник.ИмяТабличнойЧасти;
		НоваяСтрокаПравила.ИмяТабличнойЧастиПриемник   = СтрокаПравила.РеквизитПриемник.ИмяТабличнойЧасти;		
		НоваяСтрокаПравила.РеквизитИсточникИмя         = СтрокаПравила.РеквизитИсточник.Имя;
		НоваяСтрокаПравила.РеквизитПриемникИмя         = СтрокаПравила.РеквизитПриемник.Имя;
		НоваяСтрокаПравила.КодПередОбработкойРеквизита = СтрокаПравила.КодПередОбработкойРеквизита;
		НоваяСтрокаПравила.КодПослеОбработкиРеквизита  = СтрокаПравила.КодПослеОбработкиРеквизита;
	
	КонецЦикла; 
	
	// Обработчик ПередВыполнениемПравила
	Если НЕ ПустаяСтрока(Настройки.Правило.КодПередВыполнениемПравила) Тогда
		
		ПодготовкаОбменаПередВыполнениемПравила(Источник
		                                          , Приемник
												  , Новый Структура("Правило, вхИсточник",Настройки.Правило, вхИсточник)
												  , Настройки.Правило.КодПередВыполнениемПравила); 
		
	КонецЕсли; 
	
	
	Для каждого КиЗ Из ПриемникМета.СтандартныеРеквизиты Цикл
		
		ИмяРеквизитаПриемник = КиЗ.Ключ;
		ПсевдоМетаРеквизитПриемник = КиЗ.Значение;
		
		Если НЕ Приемник.Свойство(ИмяРеквизитаПриемник) Тогда
		
			Приемник.Вставить(ИмяРеквизитаПриемник);
		
		КонецЕсли; 
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("РеквизитПриемник", ПсевдоМетаРеквизитПриемник.ОписаниеРеквизита);
		
		СтрокиПравила = ТабПравила.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаПравила Из СтрокиПравила Цикл
			
			ИмяРеквизитаИсточник = СтрокаПравила.РеквизитИсточникИмя;
			ПсевдоМетаРеквизитИсточник = ИсточникМета.СтандартныеРеквизиты[ИмяРеквизитаИсточник];
			
			ОбработатьРеквизитПоПравилу(ИмяРеквизитаИсточник
			                             , ИмяРеквизитаПриемник
										 , Источник
										 , Приемник
										 , ПсевдоМетаРеквизитПриемник
										 , ПсевдоМетаРеквизитИсточник
										 , СтрокаПравила
										 , СтруктураПараметров
										 , "СтандартныеРеквизиты");
			
		КонецЦикла; // Правила		
		
	КонецЦикла;	// Реквизиты
		
	
	// Заполнение по правилам реквизитов
	Для каждого КиЗ Из ПриемникМета.Реквизиты Цикл
		
		ИмяРеквизитаПриемник = КиЗ.Ключ;
		ПсевдоМетаРеквизитПриемник = КиЗ.Значение;
		
		Если НЕ Приемник.Свойство(ИмяРеквизитаПриемник) Тогда
		
			Приемник.Вставить(ИмяРеквизитаПриемник);
		
		КонецЕсли; 
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("РеквизитПриемник", ПсевдоМетаРеквизитПриемник.ОписаниеРеквизита);
		
		СтрокиПравила = ТабПравила.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаПравила Из СтрокиПравила Цикл
			
			ИмяРеквизитаИсточник = СтрокаПравила.РеквизитИсточникИмя;
		    ПсевдоМетаРеквизитИсточник = ИсточникМета.Реквизиты[ИмяРеквизитаИсточник];			
			
			ОбработатьРеквизитПоПравилу(ИмяРеквизитаИсточник
			                             , ИмяРеквизитаПриемник
										 , Источник
										 , Приемник
										 , ПсевдоМетаРеквизитПриемник
										 , ПсевдоМетаРеквизитИсточник 
										 , СтрокаПравила
										 , СтруктураПараметров
										 , "Реквизиты");
			
		КонецЦикла; // Правила
		
	КонецЦикла; // Реквизиты
			
	// Табличные части
	Для каждого КиЗ Из ИсточникМета.ТабличныеЧасти Цикл
	
		ИмяТЧ = КиЗ.Ключ;
		ПсевдоМетаТЧИсточник = КиЗ.Значение;
		
		Если НЕ Источник.Свойство(ИмяТЧ) Тогда
		
			 Продолжить;
		
		КонецЕсли; 
		
		МодельТЧ = Источник[ИмяТЧ]; 				
		
		// Найдем табличные части приемника в которые идет отображение.
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("ИмяТабличнойЧастиИсточник", ИмяТЧ);
		СтрокиПравила = ТабПравила.НайтиСтроки(СтрОтбор);
		
		
		ИменаПриемников = Новый Массив;
		Для каждого СтрокаПравила Из СтрокиПравила Цикл
		
			Если ИменаПриемников.Найти(СтрокаПравила.ИмяТабличнойЧастиПриемник) = Неопределено Тогда
			
				ИменаПриемников.Добавить(СтрокаПравила.ИмяТабличнойЧастиПриемник);
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		Для каждого ИмяТчПриемник Из ИменаПриемников Цикл
			
			МетаТчПриемник = ПриемникМета.ТабличныеЧасти[ИмяТчПриемник];
			
			Если НЕ Приемник.Свойство(ИмяТчПриемник) Тогда
			
				Приемник.Вставить(ИмяТчПриемник, Новый Массив);
				
			Иначе
				
				Приемник[ИмяТчПриемник] = Новый Массив;
				
			КонецЕсли; 
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ИмяТабличнойЧастиПриемник", ИмяТчПриемник);
			СтрОтбор.Вставить("РеквизитИсточник", Справочники.бит_мдм_ОписанияРеквизитовОбъектовОбмена.ПустаяСсылка());
			СтрокиПравилаБезИсточника = ТабПравила.НайтиСтроки(СтрОтбор);
			
			Для каждого МодельСтрокиИсточник Из МодельТЧ Цикл
				
				МодельСтрокиПриемник = Новый Структура;
				
				Для каждого КиЗР Из МодельСтрокиИсточник Цикл
					
					ИмяРеквизитаИсточник = КиЗР.Ключ;
					ЗначениеРеквизитаИсточник  = КиЗР.Значение;
					ПсевдоМетаРеквизитИсточник = ПсевдоМетаТЧИсточник.Реквизиты[ИмяРеквизитаИсточник];
					
					СтрОтбор = Новый Структура;
			        СтрОтбор.Вставить("ИмяТабличнойЧастиПриемник", ИмяТчПриемник);					
					СтрОтбор.Вставить("РеквизитИсточник", ПсевдоМетаРеквизитИсточник.ОписаниеРеквизита);
					
					СтрокиПравила = ТабПравила.НайтиСтроки(СтрОтбор);
					
					Для каждого СтрокаПравила Из СтрокиПравила Цикл
						
						    ИмяРеквизитаПриемник       = СтрокаПравила.РеквизитПриемникИмя;
							ПсевдоМетаРеквизитПриемник = МетаТчПриемник.Реквизиты[ИмяРеквизитаПриемник];
							МодельСтрокиПриемник.Вставить(ИмяРеквизитаПриемник, Неопределено);
							
							// Обработчик ПередОбработкойРеквизита
							Если ЗначениеЗаполнено(СтрокаПравила.КодПередОбработкойРеквизита) Тогда
							
								 РезЗначение = ПодготовкаОбменаПередОбработкойРеквизита(ИмяРеквизитаИсточник
								                                                          , ИмяРеквизитаПриемник
																						  , Источник
																						  , Приемник
																						  , МодельСтрокиИсточник
																						  , МодельСтрокиПриемник
																						  , Новый Структура("вхИсточник",вхИсточник)
																						  , СтрокаПравила.КодПередОбработкойРеквизита);
																						  
								Если Найти(СтрокаПравила.КодПередОбработкойРеквизита, "ЗначениеРеквизита") > 0 Тогда
								
									 МодельСтрокиИсточник[ИмяРеквизитаИсточник] = РезЗначение;
								
								КонецЕсли; 														  
							
							КонецЕсли; 
			
							// Конвертация значения реквизита
							Если ЗначениеЗаполнено(СтрокаПравила.РеквизитИсточник) Тогда
							
							   МодельСтрокиПриемник[ИмяРеквизитаПриемник] = КонвертироватьЗначениеРеквизитаПодготовкаОбмена(ЗначениеРеквизитаИсточник
							                                                                                                 , ПсевдоМетаРеквизитИсточник
										                                                                                     , ПсевдоМетаРеквизитПриемник
																															 , ВидИбИсточник
																															 , ВидИбПриемник
																															 , ПравилаМиграции
																															 , КэшОбработанных
																															 , КэшОбработки);
								
							
							КонецЕсли; 
			
							// Обработчик ПослеОбработкиРеквизита
							Если ЗначениеЗаполнено(СтрокаПравила.КодПослеОбработкиРеквизита) Тогда
								
								РезЗначение = ПодготовкаОбменаПослеОбработкиРеквизита(ИмяРеквизитаИсточник
																						, ИмяРеквизитаПриемник
																						, Источник
																						, Приемник
																						, МодельСтрокиИсточник
																						, МодельСтрокиПриемник
																						, Новый Структура("вхИсточник",вхИсточник)
																						, СтрокаПравила.КодПослеОбработкиРеквизита);
								
								Если Найти(СтрокаПравила.КодПослеОбработкиРеквизита, "ЗначениеРеквизита") > 0 Тогда
									
									МодельСтрокиПриемник[ИмяРеквизитаПриемник] = РезЗначение;
									
								КонецЕсли; 
								
							КонецЕсли; 

					КонецЦикла; 
					
				КонецЦикла; // По значениям строки
				
				// Правила без источника
				Для каждого СтрокаПравила Из СтрокиПравилаБезИсточника Цикл
					
					ИмяРеквизитаИсточник       = "";
					ИмяРеквизитаПриемник       = СтрокаПравила.РеквизитПриемникИмя;
					ПсевдоМетаРеквизитПриемник = МетаТчПриемник.Реквизиты[ИмяРеквизитаПриемник];
					МодельСтрокиПриемник.Вставить(ИмяРеквизитаПриемник, Неопределено);

					// Обработчик ПослеОбработкиРеквизита
					Если ЗначениеЗаполнено(СтрокаПравила.КодПослеОбработкиРеквизита) Тогда
						
						РезЗначение = ПодготовкаОбменаПослеОбработкиРеквизита(ИмяРеквизитаИсточник
																				, ИмяРеквизитаПриемник
																				, Источник
																				, Приемник
																				, МодельСтрокиИсточник
																				, МодельСтрокиПриемник
																				, Новый Структура("вхИсточник",вхИсточник)
																				, СтрокаПравила.КодПослеОбработкиРеквизита);
						
						Если Найти(СтрокаПравила.КодПослеОбработкиРеквизита, "ЗначениеРеквизита") > 0 Тогда
							
							МодельСтрокиПриемник[ИмяРеквизитаПриемник] = РезЗначение;
							
						КонецЕсли; 
						
					КонецЕсли;					
					
					
				КонецЦикла; 
				
				Приемник[ИмяТчПриемник].Добавить(МодельСтрокиПриемник);
				
			КонецЦикла; // По строкам
			
		КонецЦикла;  // По таб. частям приемникам
		
	КонецЦикла; // По табличным частям		
			

	// Обработчик ПослеВыполненияПравила
	Если НЕ ПустаяСтрока(Настройки.Правило.КодПослеВыполненияПравила) Тогда
		
		ПодготовкаОбменаПослеВыполненияПравила(Источник
		                                       , Приемник
											   , Новый Структура("Правило, вхИсточник", Настройки.Правило, вхИсточник)
											   , Настройки.Правило.КодПослеВыполненияПравила);
		
	КонецЕсли; 
			
КонецПроцедуры // ВыполнитьПодготовкуОбменаПоПравилу()

#КонецОбласти 

// Функция выполняет преобразование типов OData в типы 1C.
// 
// Параметры:
//   вхТип - Строка.
// 
// Возвращаемое значение:
//  РезТип - Строка.
// 
Функция ПреобразоватьТипыOData(вхТип)
	
	РезСтр = Новый Структура("Тип, Вид, Имя", "", Перечисления.бит_мдм_ВидыОбъектовОбмена.ПустаяСсылка(), "");
	
	Словарь = Новый Соответствие;
	Словарь.Вставить("Edm.String", "Строка");
	Словарь.Вставить("Edm.Boolean", "Булево");
	Словарь.Вставить("Edm.DateTime", "Дата");	
	Словарь.Вставить("Edm.Double", "Число");
	Словарь.Вставить("Edm.Int64", "Число");
	Словарь.Вставить("Edm.Int32", "Число");		
	Словарь.Вставить("Edm.Int16", "Число");	
	Словарь.Вставить("Edm.Guid", "Строка(36)");
	
	РезСтр.Тип = Словарь[вхТип];
	
	Если РезСтр.Тип = Неопределено Тогда
		
		Если Найти(вхТип, "Catalog_") > 0 Тогда
			
		  РезСтр.Имя = СтрЗаменить(вхТип, "Catalog_", "");
		  РезСтр.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Справочник;
		  РезСтр.Тип = СтрЗаменить(вхТип, "Catalog_", "СправочникСсылка.");
		  
		ИначеЕсли Найти(вхТип, "ChartOfCharacteristicTypes_") > 0 Тогда  
			
		  РезСтр.Имя = СтрЗаменить(вхТип, "ChartOfCharacteristicTypes_", "");
		  РезСтр.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик;
		  РезСтр.Тип = СтрЗаменить(вхТип, "ChartOfCharacteristicTypes_", "ПланВидовХарактеристикСсылка.");
		  
		ИначеЕсли Найти(вхТип, "ChartOfAccounts_") > 0 Тогда  
			
		  РезСтр.Имя = СтрЗаменить(вхТип, "ChartOfAccounts_", "");
		  РезСтр.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет;
		  РезСтр.Тип = СтрЗаменить(вхТип, "ChartOfAccounts_", "ПланСчетовСсылка.");
		  
		Иначе	
			
		  РезСтр.Тип = "Строка";			
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат РезСтр;
	
КонецФункции // ПреобразоватьТипыOData()

// Функция возвращает структу имен, которые являются стандартными реквизитами.
// 
// Возвращаемое значение:
//  СтРеквизиты - Структура.
// 
Функция СтандартныеРеквизитыКонструктор(ВидОбъекта)

	СтРеквизиты = Новый Структура;
	
	СтРеквизиты.Вставить("Код");
	СтРеквизиты.Вставить("Наименование");
	СтРеквизиты.Вставить("ПометкаУдаления");
	СтРеквизиты.Вставить("Предопределенный");
	СтРеквизиты.Вставить("ИмяПредопределенныхДанных");
	СтРеквизиты.Вставить("Родитель");
	СтРеквизиты.Вставить("Владелец");
	СтРеквизиты.Вставить("ЭтоГруппа");
	
	Если ВидОбъекта = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
		
		СтРеквизиты.Вставить("ТипЗначения");
		
	КонецЕсли; 

	Возврат СтРеквизиты;
	
КонецФункции // СтандартныеРеквизитыКонструктор()

Функция НайтиСведенияОбмена(Хеш, Настройки)

	СсылкаХранения = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Хеш", Хеш);
	Запрос.УстановитьПараметр("ОписаниеОбъекта", Настройки.ОписаниеОбъекта); 
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_мдм_СведенияОбмена.Ссылка
	               |ИЗ
	               |	Справочник.бит_мдм_СведенияОбмена КАК бит_мдм_СведенияОбмена
	               |ГДЕ
	               |	бит_мдм_СведенияОбмена.ИД = &Хеш
	               |	И бит_мдм_СведенияОбмена.ОписаниеОбъекта = &ОписаниеОбъекта";
				   
				   
	 Результат = Запрос.Выполнить();
	 
	 Выборка = Результат.Выбрать();
	 
	 МассивСведений = Новый Массив;
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	 СсылкаХранения = Выборка.Ссылка;
		 
		 МассивСведений.Добавить(СсылкаХранения);
	 
	 КонецЦикла; 

	 Если МассивСведений.Количество() > 0 Тогда
	 
	 	 // Вероятность совпадения хеша CRС32 мала, но все же есть. 
		 // В этом случае выберем нужные данные сравнив ключевые поля.
	 
	 КонецЕсли; 
	 
	Возврат СсылкаХранения;
	
КонецФункции // НайтиСведенияОбмена()

// Функция выполняет поиск объекта обмена.
// 
// Параметры:
//   Источник - СправочникОбъект
//   Настройки - Структура.
// 
// Возвращаемое значение:
//  ОбъектОбмена - СправочникСсылка.бит_мдм_ОбъектыОбмена, СправочникСсылка.бит_мдм_ОбъектыОбменаИерархияЭлементов.
// 
Функция НайтиОбъектОбмена(Источник, Настройки)

	ОбъектОбмена = Неопределено;	
	
	ИмяПриемника = ИмяОбъектаХранения(Настройки.ОписаниеОбъекта);
	
	Запрос = Новый Запрос;
	
	Попытка
	
		ИД =  Строка(Источник.Ссылка.УникальныйИдентификатор());
	
	Исключение
		
		ИД = "$unrealreference$";
		
	КонецПопытки;
	
	Запрос.УстановитьПараметр("ИД", ИД);
	Запрос.УстановитьПараметр("ОписаниеОбъекта", Настройки.ОписаниеОбъекта);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабСпр.Ссылка
	               |ИЗ
	               |	Справочник.%ИмяПриемника% КАК ТабСпр
	               |ГДЕ
	               |	ТабСпр.ОписаниеОбъекта = &ОписаниеОбъекта
	               |	И ТабСпр.ИД = &ИД";
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника%", ИмяПриемника);			   
				   
	Результат = Запрос.Выполнить();
	
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
	
		 ОбъектОбмена = Выборка.Ссылка;
	
	КонецЕсли; 

	Возврат ОбъектОбмена;
	
КонецФункции // НайтиОбъектОбменаПоИсточнику()

#КонецОбласти
