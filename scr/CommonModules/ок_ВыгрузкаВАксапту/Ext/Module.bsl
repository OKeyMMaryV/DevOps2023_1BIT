
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-11-24 (#МДМ)


//ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ

Процедура ок_ИнтеграцияАксапта_РегистрацияПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	ИмяПланаОбмена = "ок_ВыгрузкаВАксапту";
	Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСобытия");
	Модуль.МеханизмРегистрацииОбъектовПередЗаписью(ИмяПланаОбмена, Источник, Отказ);

КонецПроцедуры

Процедура ок_ИнтеграцияАксапта_РегистрацияПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	ИмяПланаОбмена = "ок_ВыгрузкаВАксапту";
	Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСобытия");
	Модуль.МеханизмРегистрацииОбъектовПередЗаписьюРегистра(ИмяПланаОбмена, Источник, Отказ, Замещение);
	
КонецПроцедуры

Процедура ок_ИнтеграцияАксапта_ПередЗаписьюДоговора(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"); 
	Если Источник.Организация = Организация_Окей Тогда
		
		Если НЕ ЗначениеЗаполнено(Источник.бит_НомерАХ) Тогда
		
			Если НЕ ЗначениеЗаполнено(Источник.Код) Тогда
				Источник.УстановитьНовыйКод();
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Источник.Код) Тогда
				Источник.бит_НомерАХ = Источник.Код;
			КонецЕсли; 
		
		КонецЕсли; 
		
		Если Источник.ок_ДоговорПоВторсырью <> Источник.Ссылка.ок_ДоговорПоВторсырью Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ок_ВыполнитьЗаписьКонтрагента", Истина);
			
		КонецЕсли; 
		
		УстановитьПризнакДоговорПоВторсырьюПоПользовательскомуУсловию(Источник);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ок_ИнтеграцияАксапта_ПриЗаписиДоговора(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли; 
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	
	// Установить новые номера для "НомДокИмпорт" и "НомДокИмпорт2"
	Если Источник.Организация = Организация_Окей 
		И ЗначениеЗаполнено(Источник.Владелец) Тогда
		
		СтруктураРеквизитовКонтрагента = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Источник.Владелец, "НомДокИмпорт, НомДокИмпорт2");
		НомДокИмпорт = "";
		НомДокИмпорт2 = "";
		
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовКонтрагента.НомДокИмпорт) Тогда
			НомДокИмпорт = Справочники.Контрагенты.ПолучитьОчереднойНомДокИмпорт(Источник.Владелец, Источник.Ссылка);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовКонтрагента.НомДокИмпорт2) Тогда
			НомДокИмпорт2 = Справочники.Контрагенты.ПолучитьОчереднойНомДокИмпорт2(Источник.Владелец, Источник.Ссылка);
		КонецЕсли; 
		
		Если НомДокИмпорт <> ""
			ИЛИ НомДокИмпорт2 <> "" 
			ИЛИ Источник.ДополнительныеСвойства.Свойство("ок_ВыполнитьЗаписьКонтрагента")
				И Источник.ДополнительныеСвойства.ок_ВыполнитьЗаписьКонтрагента = Истина Тогда
		
			КонтрагентОбъект = Источник.Владелец.ПолучитьОбъект();
			
			Если НомДокИмпорт <> "" Тогда
				КонтрагентОбъект.НомДокИмпорт = НомДокИмпорт;
			КонецЕсли; 
			
			Если НомДокИмпорт2 <> "" Тогда
				КонтрагентОбъект.НомДокИмпорт2 = НомДокИмпорт2;
			КонецЕсли; 
			
			КонтрагентОбъект.Записать();
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураРеквизитовКонтрагента.НомДокИмпорт)
			ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовКонтрагента.НомДокИмпорт2) Тогда 
			
			//Создать записи в РС "Сопоставление аналитики"
		 	СформироватьЗаписиСопоставлениеАналитики_Контрагент(Источник.Владелец);
		 
			//Создать записи в РС "Сопоставление аналитики12"
			СформироватьЗаписиСопоставлениеАналитики12_Контрагент(Источник.Владелец);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	//Создать записи в РС "Сопоставление аналитики"
	СформироватьЗаписиСопоставлениеАналитики_Договор(Источник);
 
	//Создать записи в РС "Сопоставление аналитики12"
	СформироватьЗаписиСопоставлениеАналитики12_Договор(Источник);
	
КонецПроцедуры

Процедура ок_ИнтеграцияАксапта_ПередЗаписьюКонтрагента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.НомДокИмпорт2)
		И Источник.бит_ГруппаКлиентов = ПредопределенноеЗначение("Перечисление.бит_ГруппаКлиентов.РОЗНИЦА")
		И НомДокИмпорт2НеУникален(Источник) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""НомДокИмпорт2"" - """ + Источник.НомДокИмпорт2 + """ не уникально, запись контрагента прервана.",,,,Отказ);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Источник.Ссылка.Пустая() Тогда
		
		НомДокИмпорт = "";
		НомДокИмпорт2 = "";
			
		Если НЕ ЗначениеЗаполнено(Источник.НомДокИмпорт) Тогда
			НомДокИмпорт = Справочники.Контрагенты.ПолучитьОчереднойНомДокИмпорт(Источник);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Источник.НомДокИмпорт2) Тогда
			НомДокИмпорт2 = Справочники.Контрагенты.ПолучитьОчереднойНомДокИмпорт2(Источник);
		КонецЕсли; 
			
		Если НомДокИмпорт <> ""
			ИЛИ НомДокИмпорт2 <> "" Тогда
		
			Если НомДокИмпорт <> "" Тогда
				Источник.НомДокИмпорт = НомДокИмпорт;
			КонецЕсли; 
			
			Если НомДокИмпорт2 <> "" Тогда
				Источник.НомДокИмпорт2 = НомДокИмпорт2;
			КонецЕсли; 
			
		КонецЕсли;
		
		Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"); 
	
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Организация", 			Организация_Окей);
		СтруктураПараметров.Вставить("ПометкаУдаления", 		Ложь);
		СтруктураПараметров.Вставить("ок_ДоговорПоВторсырью", 	Истина);
		
		ДоговорПоВторсырью = бит_Общий.КонтрагентИмеетДоговорПоПараметрам(Источник.Ссылка, СтруктураПараметров);
		Если Источник.ок_КонтрагентВторсырья <> ДоговорПоВторсырью Тогда
			Источник.ок_КонтрагентВторсырья = ДоговорПоВторсырью;
		КонецЕсли; 
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ок_ИнтеграцияАксапта_ПриЗаписиКонтрагента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
		
	ВыполнитьСнятиеПризнакаИнтеграцияСAX12 = Ложь;
	Если Источник.ДополнительныеСвойства.Свойство("ВыполнитьСнятиеПризнакаИнтеграцияСAX12") Тогда
		ВыполнитьСнятиеПризнакаИнтеграцияСAX12 = Источник.ДополнительныеСвойства.ВыполнитьСнятиеПризнакаИнтеграцияСAX12;
	КонецЕсли;
	УстановитьПризнакИнтеграцияСAX12ПоКонтрагенту(Источник, ВыполнитьСнятиеПризнакаИнтеграцияСAX12);
	
	ВыполнитьУстановкуСтатусаЗакрытВДоговорахОкей = Ложь;
	Если Источник.ДополнительныеСвойства.Свойство("ВыполнитьУстановкуСтатусаЗакрытВДоговорахОкей") Тогда
		ВыполнитьУстановкуСтатусаЗакрытВДоговорахОкей = Источник.ДополнительныеСвойства.ВыполнитьУстановкуСтатусаЗакрытВДоговорахОкей;
	КонецЕсли;
	УстановитьСтатусаЗакрытВДоговорахОкей(Источник, ВыполнитьУстановкуСтатусаЗакрытВДоговорахОкей);
	
	//Создать записи в РС "Сопоставление аналитики"
 	СформироватьЗаписиСопоставлениеАналитики_Контрагент(Источник);
 
	//Создать записи в РС "Сопоставление аналитики12"
	СформироватьЗаписиСопоставлениеАналитики12_Контрагент(Источник);
	
КонецПроцедуры

//ПРОГРАММНЫЕ МЕТОДЫ

Процедура ВыгрузкаДанныеВАксаптуДляУзлаПланаОбмена(УзелПланаОбмена) Экспорт
	
	МетаданныеРЗ 	= Метаданные.РегламентныеЗадания.ок_ВыгрузкаВАксапту;
	СинонимРЗ 		= МетаданныеРЗ.Синоним;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(МетаданныеРЗ);
	
	ЗаписьЖурналаРегистрации(СинонимРЗ+".НачалоВыгрузки", УровеньЖурналаРегистрации.Информация,,, "Начало выгрузки");   	
	
	КоличествоЗарегистрированныхОбъектов 	= ОбменДаннымиСервер.РассчитатьКоличествоЗарегистрированныхОбъектов(УзелПланаОбмена);
	ОбъектыДляВыгрузки 						= ПолучитьОбъектыДляВыгрузки(УзелПланаОбмена);
	НастройкиПодключения					= ПолучитьНастройкиПодключения(УзелПланаОбмена);
	НастройкиВыгрузкиобъектов 				= ПолучитьНастройкиВыгрузкиобъектов(УзелПланаОбмена);
	
	Попытка
	
		Если ОбъектыДляВыгрузки.Количество() > 0 Тогда
			
			СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
			СоединениеАДО.ConnectionTimeOut = 20; 
			СоединениеАДО.ConnectionTimeOut = 600; 
			СоединениеАДО.CommandTimeOut 	= 600; 
			СоединениеАДО.CursorLocation 	= 3;
			
			ЗапросАДО = Новый COMОбъект("ADODB.Command");
			
		Иначе
			
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Объектов для выгрузки не найдено"); 
			ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,,"Объектов для выгрузки не найдено");
			ЗаписьЖурналаРегистрации(СинонимРЗ+".ОкончаниеВыгрузки", УровеньЖурналаРегистрации.Информация,,,"Окончание выгрузки");
			Возврат;
			
		КонецЕсли;
		
		ПодключитьВнешнийИсточникДанных(НастройкиПодключения, СоединениеАДО);
		
	Исключение
		
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Подключение в БД произошло с ошибой: " + ОписаниеОшибки()); 
		ЗаписьЖурналаРегистрации(СинонимРЗ+".Ошибка", УровеньЖурналаРегистрации.Ошибка,,,"Подключение в БД произошло с ошибой: " + ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(СинонимРЗ+".ОкончаниеВыгрузки", УровеньЖурналаРегистрации.Информация,,,"Окончание выгрузки");
		Возврат;
		
	КонецПопытки; 
	
	ЗапросАДО.ActiveConnection = СоединениеАДО;	
	
	//Очистим ошибки возникшие в процессе предыдущей выгрузке.
	РегистрыСведений.РезультатыОбменаДанными.ОчиститьПроблемыПриОтправке(УзелПланаОбмена);
	
	Для каждого ОбъектДляВыгрузки Из ОбъектыДляВыгрузки Цикл
		
		ОбъектВыгружен = Ложь;
		
		Попытка
			
			ОбъектДляВыгрузки_Метаданные 	= ОбъектДляВыгрузки.Метаданные();
			ПолноеИмяОбъекта 				= ОбъектДляВыгрузки_Метаданные.ПолноеИмя();
			ОбъектыСистемы 					= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ПолноеИмяОбъекта);
		
			Если НЕ ЗначениеЗаполнено(ОбъектыСистемы) Тогда
				Если ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрСведений")
					ИЛИ ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрНакопления")
					ИЛИ ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрБухгалтерии") Тогда
					
					ТекстОшибки = "Не найден объект системы по имени: """ + ПолноеИмяОбъекта + """";
					ТекстСообщения = "Ошибка: Объект не выгружен """ + ОбъектДляВыгрузки.Отбор + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + "); " + ТекстОшибки;
					ЗаписьЖурналаРегистрации(СинонимРЗ + ".ОбъектНеВыгружен", УровеньЖурналаРегистрации.Ошибка, ОбъектДляВыгрузки_Метаданные,, ТекстСообщения);
					
				Иначе
					
					ТекстОшибки = "Не найден объект системы по имени: """ + ПолноеИмяОбъекта + """";
					ТекстСообщения = "Ошибка: Объект не выгружен """ + ОбъектДляВыгрузки.Ссылка + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + "); " + ТекстОшибки;
					ЗаписьЖурналаРегистрации(СинонимРЗ + ".ОбъектНеВыгружен", УровеньЖурналаРегистрации.Ошибка, ОбъектДляВыгрузки_Метаданные, ОбъектДляВыгрузки.Ссылка, ТекстСообщения);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			НастройкаВыгрузкиобъекта = НастройкиВыгрузкиобъектов.Найти(ОбъектыСистемы, "Объект");
			
			Если НастройкаВыгрузкиобъекта = Неопределено Тогда
				Если ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрСведений")
					ИЛИ ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрНакопления")
					ИЛИ ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрБухгалтерии") Тогда
					
					ТекстОшибки = "Не найдена настройка для выгрузки объекта системы: """ + ОбъектыСистемы + """";
					ТекстСообщения = "Ошибка: Объект не выгружен """ + ОбъектДляВыгрузки.Отбор + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + "); " + ТекстОшибки;
					ЗаписьЖурналаРегистрации(СинонимРЗ+".ОбъектНеВыгружен", УровеньЖурналаРегистрации.Ошибка, ОбъектДляВыгрузки_Метаданные,, ТекстСообщения);
					
				Иначе
					
					ТекстОшибки = "Не найдена настройка для выгрузки объекта системы: """ + ОбъектыСистемы + """";
					ТекстСообщения = "Ошибка: Объект не выгружен """ + ОбъектДляВыгрузки.Ссылка + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + "); " + ТекстОшибки;
					ЗаписьЖурналаРегистрации(СинонимРЗ+".ОбъектНеВыгружен", УровеньЖурналаРегистрации.Ошибка, ОбъектДляВыгрузки_Метаданные, ОбъектДляВыгрузки.Ссылка, ТекстСообщения);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			//Выполнить проверку данных для выгрузки
			Если НЕ ПроверкаДанныхОбъектаДляВыгрузки(ОбъектДляВыгрузки, НастройкаВыгрузкиобъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапросДляВыгрузкиОбъекта = СформироватьЗапросДляВыгрузкиОбъекта(НастройкаВыгрузкиобъекта, ОбъектДляВыгрузки);
			Если ЗапросДляВыгрузкиОбъекта.Ошибка Тогда
				
				Если ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрСведений")
					ИЛИ ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрНакопления")
					ИЛИ ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрБухгалтерии") Тогда
					
					ТекстСообщения = "Ошибка: Объект не выгружен """ + ОбъектДляВыгрузки.Отбор + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + "); " + ЗапросДляВыгрузкиОбъекта.ТекстОшибки;
					ЗаписьЖурналаРегистрации(СинонимРЗ+".ОбъектНеВыгружен", УровеньЖурналаРегистрации.Ошибка, ОбъектДляВыгрузки_Метаданные,, ТекстСообщения);
					
				Иначе
					
					ТекстСообщения = "Ошибка: Объект не выгружен """ + ОбъектДляВыгрузки.Ссылка + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + "); " + ЗапросДляВыгрузкиОбъекта.ТекстОшибки;
					ЗаписьЖурналаРегистрации(СинонимРЗ+".ОбъектНеВыгружен", УровеньЖурналаРегистрации.Ошибка, ОбъектДляВыгрузки_Метаданные, ОбъектДляВыгрузки.Ссылка, ТекстСообщения);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			ЗапросАДО.CommandText = ЗапросДляВыгрузкиОбъекта.ТекстЗапроса;
			
			РезультатЗагрузки = ЗапросАДО.Execute();
			ОбъектВыгружен = Истина;
			
			Если ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрСведений")
				ИЛИ ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрНакопления")
				ИЛИ ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрБухгалтерии") Тогда
				
				ТекстСообщения = "Выгружен успешно: Объект """ + ОбъектДляВыгрузки.Отбор + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + ");";
				ЗаписьЖурналаРегистрации(СинонимРЗ+".ОбъектВыгружен", УровеньЖурналаРегистрации.Информация, ОбъектДляВыгрузки_Метаданные,, ТекстСообщения);
				
			Иначе
				
				ТекстСообщения = "Выгружен успешно: Объект """ + ОбъектДляВыгрузки.Ссылка + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + ");";
				ЗаписьЖурналаРегистрации(СинонимРЗ+".ОбъектВыгружен", УровеньЖурналаРегистрации.Информация, ОбъектДляВыгрузки_Метаданные, ОбъектДляВыгрузки.Ссылка, ТекстСообщения);
				
			КонецЕсли;
			
		Исключение
			
			ОбъектВыгружен = Ложь;
			Если ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрСведений")
				ИЛИ ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрНакопления")
				ИЛИ ОбъектыСистемы.ВидОбъекта = ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрБухгалтерии") Тогда
				
				ТекстСообщения = "Ошибка: Объект не выгружен """ + ОбъектДляВыгрузки.Отбор + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + "); " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(СинонимРЗ+".ОбъектНеВыгружен", УровеньЖурналаРегистрации.Ошибка, ОбъектДляВыгрузки_Метаданные,, ТекстСообщения);
				
			Иначе
				
				ТекстСообщения = "Ошибка: Объект не выгружен """ + ОбъектДляВыгрузки.Ссылка + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + "); " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(СинонимРЗ+".ОбъектНеВыгружен", УровеньЖурналаРегистрации.Ошибка, ОбъектДляВыгрузки_Метаданные, ОбъектДляВыгрузки.Ссылка, ТекстСообщения);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецПопытки;
		
		Если ОбъектВыгружен Тогда 
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена, ОбъектДляВыгрузки);
		КонецЕсли;
		
	КонецЦикла;

	СоединениеАДО.Close();
		
	ЗаписьЖурналаРегистрации(СинонимРЗ+".ОкончаниеВыгрузки", УровеньЖурналаРегистрации.Информация,,,"Окончание выгрузки");
	
КонецПроцедуры

Функция ПолучитьОбъектыДляВыгрузки(УзелПланаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектыДляВыгрузки = Новый Массив;
	
	ФильтрВыборки = Неопределено;
	НомерСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелПланаОбмена, "НомерОтправленного");
	ВыборкаИзменений = ОбменДаннымиСервер.ВыбратьИзменения(УзелПланаОбмена, НомерСообщения, ФильтрВыборки);
	
	Пока ВыборкаИзменений.Следующий() Цикл
			
		ОбъектыДляВыгрузки.Добавить(ВыборкаИзменений.Получить());
		
	КонецЦикла;
	
	Возврат ОбъектыДляВыгрузки;
	
КонецФункции

Функция ПолучитьНастройкиПодключения(УзелПланаОбмена) Экспорт
	
	НастройкиПодключения = Новый Структура();
	НастройкиПодключения.Вставить("УзелПланаОбмена",	УзелПланаОбмена);
	НастройкиПодключения.Вставить("АдресСервера",		УзелПланаОбмена.АдресСервера);
	НастройкиПодключения.Вставить("БазаДанных",			УзелПланаОбмена.БазаДанных);
	НастройкиПодключения.Вставить("ИмяПользователя",	УзелПланаОбмена.ИмяПользователя);
	НастройкиПодключения.Вставить("Пароль",				УзелПланаОбмена.Пароль);
	НастройкиПодключения.Вставить("СтрокаСоединения",	"");
	
	НастройкиПодключения.СтрокаСоединения = "driver={SQL Server};server=" + НастройкиПодключения.АдресСервера 
																+ ";uid=" + НастройкиПодключения.ИмяПользователя 
																+ ";pwd=" + НастройкиПодключения.Пароль 
																+ ";Database=" + НастройкиПодключения.БазаДанных
																+ ";LANGUAGE=us_english";
																
	Возврат НастройкиПодключения;
	
КонецФункции

Функция ПолучитьНастройкиВыгрузкиобъектов(УзелПланаОбмена) Экспорт
	
	ПараметрыОтбора = Новый Структура("Выгружается", Истина);
	НастройкиВыгрузкиобъектов = УзелПланаОбмена.ОбъектыДляВыгрузки.Выгрузить(ПараметрыОтбора, "Объект, Выгружается, ИмяПравилВыгрузки, ИмяИнтеграционнойТаблицы, ПользовательскоеУсловие");
	
	НастройкиВыгрузкиобъектов.Колонки.Добавить("БазаДанных", Новый ОписаниеТипов("Строка"));
	НастройкиВыгрузкиобъектов.ЗаполнитьЗначения(УзелПланаОбмена.БазаДанных, "БазаДанных");
	
	НастройкиВыгрузкиобъектов.Колонки.Добавить("УзелПланаОбмена");
	НастройкиВыгрузкиобъектов.ЗаполнитьЗначения(УзелПланаОбмена, "УзелПланаОбмена");
	
	Возврат НастройкиВыгрузкиобъектов;
	
КонецФункции

Функция ПодключитьВнешнийИсточникДанных(НастройкиПодключения, СоединениеАДО) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкиПодключения.СтрокаСоединения) Тогда
		
		ТекстСообщения = НСтр("ru = 'Некорректные настройки для подключения к Акспата для узла %1. Не удалось определить строку соединения. Задание прервано.");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НастройкиПодключения.УзелПланаОбмена); 
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;	 
	
	СоединениеАДО.Open(НастройкиПодключения.СтрокаСоединения);

	Возврат Истина;
	
КонецФункции

Функция СформироватьЗапросДляВыгрузкиОбъекта(НастройкаВыгрузкиобъекта, ОбъектДляВыгрузки, ПоляИсключения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросДляВыгрузкиОбъекта = Новый Структура();
	ЗапросДляВыгрузкиОбъекта.Вставить("ТекстЗапроса", 	"");
	ЗапросДляВыгрузкиОбъекта.Вставить("Ошибка", 		Ложь);
	ЗапросДляВыгрузкиОбъекта.Вставить("ТекстОшибки", 	"");
	
	БазаДанных					= НастройкаВыгрузкиобъекта.БазаДанных;
	ИмяГруппыПравил 			= НастройкаВыгрузкиобъекта.ИмяПравилВыгрузки;
	ИмяИнтеграционнойТаблицы 	= НастройкаВыгрузкиобъекта.ИмяИнтеграционнойТаблицы;
	
	СтруктураПолейПоПравилам 	= ПолучитьСтруктуруПолейПоПравиламНаСервере(ИмяГруппыПравил, ОбъектДляВыгрузки);
	
	СтруктураВыгрузки = Новый Структура();
	СтруктураВыгрузки.Вставить("ЗаголовкиПолей", "");
	СтруктураВыгрузки.Вставить("ЗначенияПолей", "");
	
	Для каждого ЭлементСтруктуры Из СтруктураПолейПоПравилам Цикл
		
		Если ПоляИсключения <> Неопределено
			И ПоляИсключения.Найти(НРег(ЭлементСтруктуры.Ключ)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ЭлементСтруктуры_Ключ		= ЭлементСтруктуры.Ключ;
		ЭлементСтруктуры_Значение	= ЭлементСтруктуры.Значение;
		
		Если ТипЗнч(ЭлементСтруктуры_Значение) = Тип("Строка") Тогда
			ЭлементСтруктуры_Значение = "'" + СокрЛП(ЭлементСтруктуры_Значение) + "'";
		ИначеЕсли ТипЗнч(ЭлементСтруктуры_Значение) = Тип("Null") Тогда
			ЭлементСтруктуры_Значение = "''";
		ИначеЕсли ТипЗнч(ЭлементСтруктуры_Значение) = Тип("Булево") Тогда
			ЭлементСтруктуры_Значение = ?(ЭлементСтруктуры_Значение, 1, 0);
		КонецЕсли; 
		
		СтруктураВыгрузки.ЗаголовкиПолей = СтруктураВыгрузки.ЗаголовкиПолей + ?(СтруктураВыгрузки.ЗаголовкиПолей = "", "", ",") + "
										|[" + ЭлементСтруктуры_Ключ + "]";
		
		СтруктураВыгрузки.ЗначенияПолей = СтруктураВыгрузки.ЗначенияПолей + ?(СтруктураВыгрузки.ЗначенияПолей = "", "", ",") + "
										|" + ЭлементСтруктуры_Значение + "";
	КонецЦикла; 
	
	ЗапросSQLПоДоКонтрагентам = "Insert into [" + БазаДанных + "].[dbo].[" + ИмяИнтеграционнойТаблицы + "] ("
	+ СтруктураВыгрузки.ЗаголовкиПолей
	+ "
	|)
	|VALUES
	|("
	+ СтруктураВыгрузки.ЗначенияПолей
	+ "
	|)"
	;
	
	ЗапросДляВыгрузкиОбъекта.ТекстЗапроса = ЗапросSQLПоДоКонтрагентам;
	
	Возврат ЗапросДляВыгрузкиОбъекта;
		
КонецФункции

Функция ПолучитьСтруктуруПолейПоПравиламНаСервере(ИмяГруппыПравил, ОбъектДляВыгрузки) Экспорт
	
	СтруктураПолейПоПравилам = Новый Структура();
	ВспомогательныеДанные = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ок_ПравилаКонвертацииЗначений.ГруппаПравил КАК ГруппаПравил,
		|	ок_ПравилаКонвертацииЗначений.ИмяПравила КАК ИмяПравила,
		|	ок_ПравилаКонвертацииЗначений.ВспомогательныеДанные КАК ВспомогательныеДанные,
		|	ок_ПравилаКонвертацииЗначений.ИмяПоляПриемника КАК ИмяПоляПриемника,
		|	ок_ПравилаКонвертацииЗначений.Очередность КАК Очередность,
		|	ок_ПравилаКонвертацииЗначений.СписокДополнительныхПараметров КАК СписокДополнительныхПараметров,
		|	ок_ПравилаКонвертацииЗначений.Алгоритм КАК Алгоритм,
		|	ок_ПравилаКонвертацииЗначений.ПолучитьЗначениеИзВспомогательныхДанных КАК ПолучитьЗначениеИзВспомогательныхДанных
		|ИЗ
		|	РегистрСведений.ок_ПравилаКонвертацииЗначений КАК ок_ПравилаКонвертацииЗначений
		|ГДЕ
		|	ок_ПравилаКонвертацииЗначений.ГруппаПравил = &ГруппаПравил
		|	И ок_ПравилаКонвертацииЗначений.Используется
		|
		|УПОРЯДОЧИТЬ ПО
		|	Очередность";
	
	Запрос.УстановитьПараметр("ГруппаПравил", ИмяГруппыПравил);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПолучаемоеЗначение = Неопределено;
		
		Если ВыборкаДетальныеЗаписи.ПолучитьЗначениеИзВспомогательныхДанных Тогда
			ПолучаемоеЗначение = ПолучитьЗначениеИзВспомогательныхДанных(ВыборкаДетальныеЗаписи.Алгоритм, ВспомогательныеДанные);
		Иначе
			ПолучаемоеЗначение = ПолучитьЗначениеПоПользовательскойФункции(ВыборкаДетальныеЗаписи.Алгоритм, ОбъектДляВыгрузки, ВспомогательныеДанные, ВыборкаДетальныеЗаписи.СписокДополнительныхПараметров);
		КонецЕсли; 
		
		Если ВыборкаДетальныеЗаписи.ВспомогательныеДанные Тогда
			ВспомогательныеДанные.Вставить(ВыборкаДетальныеЗаписи.ИмяПоляПриемника, ПолучаемоеЗначение);
		Иначе
			СтруктураПолейПоПравилам.Вставить(ВыборкаДетальныеЗаписи.ИмяПоляПриемника, ПолучаемоеЗначение);
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат СтруктураПолейПоПравилам;
	
КонецФункции

Функция ПолучитьЗначениеИзВспомогательныхДанных(Алгоритм, ВспомогательныеДанные) Экспорт

	Если ТипЗнч(Алгоритм) <> Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МассивСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Алгоритм, ".");
	ПромежуточноеЗначение = Неопределено;
	Если МассивСтроки.Количество() > 1
		И ВспомогательныеДанные.Свойство(МассивСтроки[0],ПромежуточноеЗначение)
		И ПромежуточноеЗначение.Свойство(МассивСтроки[1]) Тогда
		
		ПромежуточноеЗначение.Свойство(МассивСтроки[1], ПромежуточноеЗначение);
		
		Возврат ПромежуточноеЗначение;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьЗначениеПоПользовательскойФункции(Алгоритм, ЗначениеСсылки, ВспомогательныеДанные, СписокДополнительныхПараметров) Экспорт

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("П1", ЗначениеСсылки);
	СтруктураПараметров.Вставить("П2", Неопределено);
	СтруктураПараметров.Вставить("П3", Неопределено);
	СтруктураПараметров.Вставить("П4", Неопределено);
	СтруктураПараметров.Вставить("П5", Неопределено);
	СтруктураПараметров.Вставить("П6", Неопределено);
	СтруктураПараметров.Вставить("П7", Неопределено);
	СтруктураПараметров.Вставить("П8", Неопределено);
	СтруктураПараметров.Вставить("П9", Неопределено);
	СтруктураПараметров.Вставить("П10", Неопределено);
	
	МассивСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокДополнительныхПараметров, ";");
	ПромежуточноеЗначение = Неопределено;
	Для Инд = 1 По МассивСтроки.Количество() Цикл
		
		МассивПодстрок = МассивСтроки[Инд - 1];
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МассивПодстрок, ".");
		
		Если МассивПодстрок.Количество() > 0
			И ВспомогательныеДанные.Свойство(МассивПодстрок[0], ПромежуточноеЗначение) Тогда
			
			Если МассивПодстрок.Количество() > 1
				И ПромежуточноеЗначение.Свойство(МассивПодстрок[1]) Тогда
				
				ПромежуточноеЗначение.Свойство(МассивПодстрок[1], ПромежуточноеЗначение);
				
			КонецЕсли;
			
			СтруктураПараметров.Вставить("П" + (Инд + 1), ПромежуточноеЗначение);
			
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункцию(Алгоритм, СтруктураПараметров.П1, СтруктураПараметров.П2, СтруктураПараметров.П3, СтруктураПараметров.П4, СтруктураПараметров.П5, СтруктураПараметров.П6, СтруктураПараметров.П7, СтруктураПараметров.П8, СтруктураПараметров.П9, СтруктураПараметров.П10);

КонецФункции

Функция ПроверкаДанныхОбъектаДляВыгрузки(ОбъектДляВыгрузки, НастройкаВыгрузкиобъекта)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(НастройкаВыгрузкиобъекта.ПользовательскоеУсловие) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	СтруктураКонтекст = Новый Структура;
	СтруктураКонтекст.Вставить("ТекущийОбъект", ОбъектДляВыгрузки);
	Результат = Справочники.бит_ПользовательскиеУсловия.ПроверитьПользовательскоеУсловие(НастройкаВыгрузкиобъекта.ПользовательскоеУсловие, СтруктураКонтекст);
	
	Если НЕ Результат Тогда
		
		МетаданныеРЗ 	= Метаданные.РегламентныеЗадания.ок_ВыгрузкаВАксапту;
		СинонимРЗ		= МетаданныеРЗ.Синоним;
	
		ОбъектДляВыгрузки_Метаданные 	= ОбъектДляВыгрузки.Метаданные();
		
		ТекстОшибки = "Не пройдена проверка условия """ + НастройкаВыгрузкиобъекта.ПользовательскоеУсловие + """ для выгрузки объекта";
		ТекстСообщения = "Предупреждение: Объект не выгружен """ + ОбъектДляВыгрузки.Ссылка + """(" + ОбъектДляВыгрузки_Метаданные.ПолноеИмя() + "); " + ТекстОшибки;
		ЗаписьЖурналаРегистрации(СинонимРЗ + ".ОбъектНеВыгружен", УровеньЖурналаРегистрации.Предупреждение, ОбъектДляВыгрузки_Метаданные, ОбъектДляВыгрузки.Ссылка, ТекстСообщения);
		
		РегистрыСведений.РезультатыОбменаДанными.ЗарегистрироватьОшибкуПроверкиОбъекта(ОбъектДляВыгрузки.Ссылка, НастройкаВыгрузкиобъекта.УзелПланаОбмена, ТекстСообщения, Перечисления.ТипыПроблемОбменаДанными.НезаполненныеРеквизиты);
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция НомДокИмпорт2НеУникален(Контрагент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.НомДокИмпорт2 = &НомДокИмпорт2
		|	И Контрагенты.Ссылка <> &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент.Ссылка);
	Запрос.УстановитьПараметр("НомДокИмпорт2", Контрагент.НомДокИмпорт2);
	
	РезультатЗапроса = Запрос.Выполнить();
	Результат = НЕ РезультатЗапроса.Пустой();
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПризнакИнтеграцияСAX12ПоКонтрагенту(Контрагент, ВыполнитьСнятиеПризнака = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательскоеУсловие_РазрешенныеКомбинацииДляПризнакаИнтеграцияСAX12 = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Выгрузка в AXAPTA", "РазрешенныеКомбинацииДляПризнакаИнтеграцияСAX12", Неопределено);
	Если ПользовательскоеУсловие_РазрешенныеКомбинацииДляПризнакаИнтеграцияСAX12 = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|	ДоговорыКонтрагентов.ок_ИнтеграцияСAX12 КАК ок_ИнтеграцияСAX12
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И &ВыполнитьСнятиеПризнака";
	
	Запрос.УстановитьПараметр("Организация", бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"));
	Запрос.УстановитьПараметр("Контрагент", Контрагент.Ссылка);
	Запрос.УстановитьПараметр("ВыполнитьСнятиеПризнака", Истина);
	
	Если НЕ ВыполнитьСнятиеПризнака Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И &ВыполнитьСнятиеПризнака", "	И &ВыполнитьСнятиеПризнака
																				|	И НЕ ДоговорыКонтрагентов.ок_ИнтеграцияСAX12");
	
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект", ВыборкаДетальныеЗаписи.Ссылка);
		
		РезультатПроверки = Справочники.бит_ПользовательскиеУсловия.ПроверитьПользовательскоеУсловие(ПользовательскоеУсловие_РазрешенныеКомбинацииДляПризнакаИнтеграцияСAX12, СтруктураКонтекст);
		
		Если ВыборкаДетальныеЗаписи.ок_ИнтеграцияСAX12 <> РезультатПроверки Тогда
			
			Если НЕ ВыполнитьСнятиеПризнака
				И ВыборкаДетальныеЗаписи.ок_ИнтеграцияСAX12 Тогда
				
				Продолжить;
				
			КонецЕсли;
		
			Попытка
				
				Если ВыборкаДетальныеЗаписи.ок_ИнтеграцияСAX12 Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У контрагента """ + Контрагент.Ссылка + """ найден договор """ + ВыборкаДетальныеЗаписи.Ссылка + """ с установленным признаком ""Интеграция с AX"". Договор не удовлетворяет условию выгрузки в AX12. Снятие признака на договоре выполняется вручную.", ВыборкаДетальныеЗаписи.Ссылка);
					
				Иначе
					
					ДоговорыКонтрагентовОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					//ДоговорыКонтрагентовОбъект.ОбменДанными.Загрузка 	= Истина;
					ДоговорыКонтрагентовОбъект.ок_ИнтеграцияСAX12 		= НЕ ДоговорыКонтрагентовОбъект.ок_ИнтеграцияСAX12;
					ДоговорыКонтрагентовОбъект.Записать();
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Установлен признак ""Интеграция с AX12"" в договоре:" + ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Ссылка);
					
				КонецЕсли; 
				
			Исключение
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ВыборкаДетальныеЗаписи.Ссылка + ОписаниеОшибки(), ВыборкаДетальныеЗаписи.Ссылка); 
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСтатусаЗакрытВДоговорахОкей(Контрагент, ВыполнитьУстановкуСтатуса = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ВыполнитьУстановкуСтатуса Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.бит_СтадияДоговора <> &бит_СтадияДоговора";
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	
	Запрос.УстановитьПараметр("бит_СтадияДоговора", ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Закрыт"));
	Запрос.УстановитьПараметр("Организация", 		Организация_Окей);
	Запрос.УстановитьПараметр("Владелец", 			Контрагент.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			
			ДоговорыКонтрагентовОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ДоговорыКонтрагентовОбъект.бит_СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Закрыт");
			
			НовыйСтатус = ДоговорыКонтрагентовОбъект.ок_ИсторияСтатусов.Добавить();
			
			НовыйСтатус.Период 			= ТекущаяДата();
			НовыйСтатус.Статус 			= ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Закрыт");
			НовыйСтатус.Ответственный 	= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			НовыйСтатус.Описание 		= "Контрагент изменил статус на «Блокированы все»";
			
			ДоговорыКонтрагентовОбъект.Записать();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Изменен статус на ""Закрыт"" в договоре:" + ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Ссылка); 
			
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ВыборкаДетальныеЗаписи.Ссылка + ОписаниеОшибки(), ВыборкаДетальныеЗаписи.Ссылка); 
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьВозможностьУстановкиПризнакаИнтеграцияСAX12ВДоговоре(Знач Договор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательскоеУсловие_РазрешенныеКомбинацииДляПризнакаИнтеграцияСAX12 = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Выгрузка в AXAPTA", "РазрешенныеКомбинацииДляПризнакаИнтеграцияСAX12", Неопределено);
	Если ПользовательскоеУсловие_РазрешенныеКомбинацииДляПризнакаИнтеграцияСAX12 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 

	РезультатПроверки = Ложь;
	
	Попытка
		
		Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
		
		Если ТипЗнч(Договор) = Тип("ДанныеФормыСтруктура")
			И Договор.Свойство("ДоговорКонтрагента") Тогда

			Если Договор.ДоговорКонтрагента.Организация <> Организация_Окей Тогда
				Возврат Ложь;
			КонецЕсли; 
			
			ОбъектДоговор = Договор.ДоговорКонтрагента.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ОбъектДоговор, Договор, , "бит_СтатьиОборотов, бит_му_Обеспечители, бит_му_ОсновныеСредстваВЗалоге, бит_му_ПрочиеАктивыВЗалоге, СБ_ДоговорыХеджирования, ок_БанковскиеСчета, ок_ИсторияСтатусов");
			
			ОбъектДоговор.бит_СтатьиОборотов.Загрузить(Договор.бит_СтатьиОборотов.Выгрузить());
			ОбъектДоговор.бит_му_Обеспечители.Загрузить(Договор.бит_му_Обеспечители.Выгрузить());
			ОбъектДоговор.бит_му_ОсновныеСредстваВЗалоге.Загрузить(Договор.бит_му_ОсновныеСредстваВЗалоге.Выгрузить());
			ОбъектДоговор.бит_му_ПрочиеАктивыВЗалоге.Загрузить(Договор.бит_му_ПрочиеАктивыВЗалоге.Выгрузить());
			ОбъектДоговор.СБ_ДоговорыХеджирования.Загрузить(Договор.СБ_ДоговорыХеджирования.Выгрузить());
			ОбъектДоговор.ок_БанковскиеСчета.Загрузить(Договор.ок_БанковскиеСчета.Выгрузить());
			ОбъектДоговор.ок_ИсторияСтатусов.Загрузить(Договор.ок_ИсторияСтатусов.Выгрузить());
			
			СтруктураКонтекст = Новый Структура;
			СтруктураКонтекст.Вставить("ТекущийОбъект", ОбъектДоговор);
			
		Иначе
			
			Если Договор.Организация <> Организация_Окей Тогда
				Возврат Ложь;
			КонецЕсли; 
			
			СтруктураКонтекст = Новый Структура;
			СтруктураКонтекст.Вставить("ТекущийОбъект", Договор);
			
		КонецЕсли; 
	
		РезультатПроверки = Справочники.бит_ПользовательскиеУсловия.ПроверитьПользовательскоеУсловие(ПользовательскоеУсловие_РазрешенныеКомбинацииДляПризнакаИнтеграцияСAX12, СтруктураКонтекст);
	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки; 
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьСозданиеДоговора(Объект, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	Если Объект.Организация <> Организация_Окей Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Объект.Владелец.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе") Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Статус контрагента «Блокированы все». Создание договоров по организации «О'КЕЙ» запрещено.",,,,Отказ);
	
	КонецЕсли; 
	
КонецФункции

Функция ПроверитьНеобходимостьИзмененияСтатусаДоговораПередЗаписьюКонтрагента(Объект, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.бит_Статус) 
		ИЛИ НЕ Объект.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыКонтрагентов.Организация КАК Организация
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.бит_СтадияДоговора <> &бит_СтадияДоговора";
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	
	Запрос.УстановитьПараметр("бит_СтадияДоговора", ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Закрыт"));
	Запрос.УстановитьПараметр("Владелец", 			Объект.Ссылка);
	
	ЕстьДоговорПоОкей = Ложь;
	СообщениеПоДругимОрганизация = "";
	
	РезультатЗапроса = Запрос.Выполнить();
	РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.Организация = Организация_Окей Тогда
			ЕстьДоговорПоОкей = Истина;
		Иначе
			СообщениеПоДругимОрганизация = СообщениеПоДругимОрганизация + " " + Строка(ВыборкаДетальныеЗаписи.Организация) + ";";
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ЕстьДоговорПоОкей Тогда
		
		Если СообщениеПоДругимОрганизация <> "" Тогда
		
			ТекстСообщения = НСтр("ru = 'У контрагента есть не закрытые договоры по организациям: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СообщениеПоДругимОрганизация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьПризнакДоговорПоВторсырьюПоПользовательскомуУсловию(Знач Договор) Экспорт
	
	ПользовательскоеУсловие_УсловиеДляУстановкиПризнакаДоговорПоВторсырью = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Выгрузка в AXAPTA", "УсловиеДляУстановкиПризнакаДоговорПоВторсырью", Неопределено);
	Если ПользовательскоеУсловие_УсловиеДляУстановкиПризнакаДоговорПоВторсырью = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Договор) = Тип("ДанныеФормыСтруктура")
		И Договор.Свойство("ДоговорКонтрагента") Тогда

		ОбъектДоговор = Договор.ДоговорКонтрагента.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОбъектДоговор, Договор, , "бит_СтатьиОборотов, бит_му_Обеспечители, бит_му_ОсновныеСредстваВЗалоге, бит_му_ПрочиеАктивыВЗалоге, СБ_ДоговорыХеджирования, ок_БанковскиеСчета, ок_ИсторияСтатусов");
		
		ОбъектДоговор.бит_СтатьиОборотов.Загрузить(Договор.бит_СтатьиОборотов.Выгрузить());
		ОбъектДоговор.бит_му_Обеспечители.Загрузить(Договор.бит_му_Обеспечители.Выгрузить());
		ОбъектДоговор.бит_му_ОсновныеСредстваВЗалоге.Загрузить(Договор.бит_му_ОсновныеСредстваВЗалоге.Выгрузить());
		ОбъектДоговор.бит_му_ПрочиеАктивыВЗалоге.Загрузить(Договор.бит_му_ПрочиеАктивыВЗалоге.Выгрузить());
		ОбъектДоговор.СБ_ДоговорыХеджирования.Загрузить(Договор.СБ_ДоговорыХеджирования.Выгрузить());
		ОбъектДоговор.ок_БанковскиеСчета.Загрузить(Договор.ок_БанковскиеСчета.Выгрузить());
		ОбъектДоговор.ок_ИсторияСтатусов.Загрузить(Договор.ок_ИсторияСтатусов.Выгрузить());
		
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект", ОбъектДоговор);
		
	Иначе
		
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект", Договор);
		
	КонецЕсли;
		
	РезультатПроверки = Справочники.бит_ПользовательскиеУсловия.ПроверитьПользовательскоеУсловие(ПользовательскоеУсловие_УсловиеДляУстановкиПризнакаДоговорПоВторсырью, СтруктураКонтекст);
		
	Если Договор.ок_ДоговорПоВторсырью <> РезультатПроверки Тогда
		Договор.ок_ДоговорПоВторсырью = РезультатПроверки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗаписиСопоставлениеАналитики_Договор(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"); 
	Если Источник.Организация = Организация_Окей
		И ЗначениеЗаполнено(Источник.Код) Тогда
		
		МассивСчетов = Новый Массив();
		Если Источник.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком") Тогда
			МассивСчетов.Добавить("60");
			МассивСчетов.Добавить("76");
		ИначеЕсли Источник.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда
			МассивСчетов.Добавить("62");
			МассивСчетов.Добавить("76");
		ИначеЕсли Источник.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее") Тогда
			МассивСчетов.Добавить("76");
		КонецЕсли; 
		
		Если МассивСчетов.Количество() > 0 Тогда
		
			НаборЗаписей = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Источник.Организация);
			НаборЗаписей.Отбор.КодАналитикиАксапты.Установить(СокрЛП(Источник.Код));
			НаборЗаписей.Прочитать();
			
			Для каждого ЭлементНабора Из НаборЗаписей Цикл
			
				Если МассивСчетов.Найти(ЭлементНабора.СчетАксапты) <> Неопределено Тогда
					МассивСчетов.Удалить(МассивСчетов.Найти(ЭлементНабора.СчетАксапты));
				КонецЕсли; 
			
			КонецЦикла; 
			
			Если МассивСчетов.Количество() > 0 Тогда
				
				Тип1С = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов");
				Если ЗначениеЗаполнено(Тип1С) Тогда
					
					Для каждого ТекущийСчет Из МассивСчетов Цикл

						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация 		= Источник.Организация;
						НоваяЗапись.КодАналитикиАксапты = СокрЛП(Источник.Код);
						НоваяЗапись.СчетАксапты 		= ТекущийСчет;
						НоваяЗапись.Аналитика1С 		= Источник.Ссылка;
						НоваяЗапись.Тип1С 				= Тип1С;
					
					КонецЦикла; 
					
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли; 
		
		//Выполнить проверку и очистку лишних записей в РС "Сопоставление аналитики Аксапты"
		ЗначениеНастройки_ВыполнятьОчисткуЛишнихЗаписей = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта", "Выполнить проверку и очистку лишних записей в РС Сопоставление аналитики Аксапты", Ложь); 
		
		Если ЗначениеНастройки_ВыполнятьОчисткуЛишнихЗаписей Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	бит_ок_СопоставлениеАналитики.СчетАксапты КАК СчетАксапты,
				|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты КАК КодАналитикиАксапты,
				|	бит_ок_СопоставлениеАналитики.Организация КАК Организация,
				|	бит_ок_СопоставлениеАналитики.Аналитика1С КАК Аналитика1С,
				|	бит_ок_СопоставлениеАналитики.Тип1С КАК Тип1С
				|ИЗ
				|	РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
				|ГДЕ
				|	бит_ок_СопоставлениеАналитики.Аналитика1С = &Аналитика1С
				|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
				|	И НЕ бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &КодАналитикиАксапты
				|	И НЕ бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &НомерАХ";
			
			Запрос.УстановитьПараметр("Аналитика1С", 		Источник.Ссылка);
			Запрос.УстановитьПараметр("Организация", 		Организация_Окей);
			Запрос.УстановитьПараметр("КодАналитикиАксапты",СокрЛП(Источник.Код));
			Запрос.УстановитьПараметр("НомерАХ",			Источник.бит_НомерАХ);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СчетАксапты.Установить(ВыборкаДетальныеЗаписи.СчетАксапты);
				НаборЗаписей.Отбор.КодАналитикиАксапты.Установить(ВыборкаДетальныеЗаписи.КодАналитикиАксапты);
				НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
				НаборЗаписей.Записать(Истина);
				
			КонецЦикла; 
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗаписиСопоставлениеАналитики12_Договор(Источник)
	
	УстановитьПривилегированныйРежим(Истина);

	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	Если Источник.Организация = Организация_Окей
		И Источник.ок_ИнтеграцияСAX12
		И ЗначениеЗаполнено(Источник.бит_НомерАХ) Тогда
		
		МассивСчетов = Новый Массив();
		Если Источник.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком") Тогда
			МассивСчетов.Добавить("60");
			МассивСчетов.Добавить("76");
		ИначеЕсли Источник.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда
			МассивСчетов.Добавить("62");
			МассивСчетов.Добавить("76");
		ИначеЕсли Источник.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее") Тогда
			МассивСчетов.Добавить("76");
		КонецЕсли; 
		
		Если МассивСчетов.Количество() > 0 Тогда
		
			НаборЗаписей = РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Источник.Организация);
			НаборЗаписей.Отбор.КодАналитикиАксапты.Установить(СокрЛП(Источник.бит_НомерАХ));
			НаборЗаписей.Прочитать();
			
			Для каждого ЭлементНабора Из НаборЗаписей Цикл
			
				Если МассивСчетов.Найти(ЭлементНабора.СчетАксапты) <> Неопределено Тогда
					МассивСчетов.Удалить(МассивСчетов.Найти(ЭлементНабора.СчетАксапты));
				КонецЕсли; 
			
			КонецЦикла; 
			
			Если МассивСчетов.Количество() > 0 Тогда
				
				Тип1С = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов");
				Если ЗначениеЗаполнено(Тип1С) Тогда
					
					Для каждого ТекущийСчет Из МассивСчетов Цикл

						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация 		= Источник.Организация;
						НоваяЗапись.КодАналитикиАксапты = СокрЛП(Источник.бит_НомерАХ);
						НоваяЗапись.СчетАксапты 		= ТекущийСчет;
						НоваяЗапись.Аналитика1С 		= Источник.Ссылка;
						НоваяЗапись.Тип1С 				= Тип1С;
					
					КонецЦикла; 
					
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли; 
		
		//Выполнить проверку и очистку лишних записей в РС "Сопоставление аналитики Аксапты"
		ЗначениеНастройки_ВыполнятьОчисткуЛишнихЗаписей = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта", "Выполнить проверку и очистку лишних записей в РС Сопоставление аналитики Аксапты", Ложь); 
		
		Если ЗначениеНастройки_ВыполнятьОчисткуЛишнихЗаписей Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	бит_ок_СопоставлениеАналитики.СчетАксапты КАК СчетАксапты,
				|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты КАК КодАналитикиАксапты,
				|	бит_ок_СопоставлениеАналитики.Организация КАК Организация,
				|	бит_ок_СопоставлениеАналитики.Аналитика1С КАК Аналитика1С,
				|	бит_ок_СопоставлениеАналитики.Тип1С КАК Тип1С
				|ИЗ
				|	РегистрСведений.бит_ок_СопоставлениеАналитикиАксапты12 КАК бит_ок_СопоставлениеАналитики
				|ГДЕ
				|	бит_ок_СопоставлениеАналитики.Аналитика1С = &Аналитика1С
				|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
				|	И НЕ бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &КодАналитикиАксапты
				|	И НЕ бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &НомерАХ";
			
			Запрос.УстановитьПараметр("Аналитика1С", 		Источник.Ссылка);
			Запрос.УстановитьПараметр("Организация", 		Организация_Окей);
			Запрос.УстановитьПараметр("КодАналитикиАксапты",СокрЛП(Источник.бит_НомерАХ));
			Запрос.УстановитьПараметр("НомерАХ",			Источник.бит_НомерАХ);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СчетАксапты.Установить(ВыборкаДетальныеЗаписи.СчетАксапты);
				НаборЗаписей.Отбор.КодАналитикиАксапты.Установить(ВыборкаДетальныеЗаписи.КодАналитикиАксапты);
				НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
				НаборЗаписей.Записать(Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗаписиСопоставлениеАналитики_Контрагент(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"); 
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", 	Организация_Окей);
	СтруктураПараметров.Вставить("ПометкаУдаления", Ложь);
	Если бит_Общий.КонтрагентИмеетДоговорПоПараметрам(Источник.Ссылка, СтруктураПараметров) Тогда
		
		//НомДокИмпорт
		Если ЗначениеЗаполнено(Источник.НомДокИмпорт) Тогда
		
			МассивСчетов_НомДокИмпорт = Новый Массив();
			МассивСчетов_НомДокИмпорт.Добавить("60");
			МассивСчетов_НомДокИмпорт.Добавить("62");
			МассивСчетов_НомДокИмпорт.Добавить("76");
			
			НаборЗаписей = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация_Окей);
			НаборЗаписей.Отбор.КодАналитикиАксапты.Установить(СокрЛП(Источник.НомДокИмпорт));
			НаборЗаписей.Прочитать();
			
			Для каждого ЭлементНабора Из НаборЗаписей Цикл
			
				Если МассивСчетов_НомДокИмпорт.Найти(ЭлементНабора.СчетАксапты) <> Неопределено Тогда
					МассивСчетов_НомДокИмпорт.Удалить(МассивСчетов_НомДокИмпорт.Найти(ЭлементНабора.СчетАксапты));
				КонецЕсли; 
			
			КонецЦикла; 
			
			Если МассивСчетов_НомДокИмпорт.Количество() > 0 Тогда
				
				Тип1С = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.Контрагенты");
				Если ЗначениеЗаполнено(Тип1С) Тогда
					
					Для каждого ТекущийСчет Из МассивСчетов_НомДокИмпорт Цикл

						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация 		= Организация_Окей;
						НоваяЗапись.КодАналитикиАксапты = СокрЛП(Источник.НомДокИмпорт);
						НоваяЗапись.СчетАксапты 		= ТекущийСчет;
						НоваяЗапись.Аналитика1С 		= Источник.Ссылка;
						НоваяЗапись.Тип1С 				= Тип1С;
					
					КонецЦикла; 
					
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли; 
		
		//НомДокИмпорт2
		Если ЗначениеЗаполнено(Источник.НомДокИмпорт2) Тогда
		
			МассивСчетов_НомДокИмпорт2 = Новый Массив();
			МассивСчетов_НомДокИмпорт2.Добавить("60");
			МассивСчетов_НомДокИмпорт2.Добавить("62");
			МассивСчетов_НомДокИмпорт2.Добавить("76");
			
			НаборЗаписей = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация_Окей);
			НаборЗаписей.Отбор.КодАналитикиАксапты.Установить(СокрЛП(Источник.НомДокИмпорт2));
			НаборЗаписей.Прочитать();
			
			Для каждого ЭлементНабора Из НаборЗаписей Цикл
			
				Если МассивСчетов_НомДокИмпорт2.Найти(ЭлементНабора.СчетАксапты) <> Неопределено Тогда
					МассивСчетов_НомДокИмпорт2.Удалить(МассивСчетов_НомДокИмпорт2.Найти(ЭлементНабора.СчетАксапты));
				КонецЕсли; 
			
			КонецЦикла; 
			
			Если МассивСчетов_НомДокИмпорт2.Количество() > 0 Тогда
				
				Тип1С = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.Контрагенты");
				Если ЗначениеЗаполнено(Тип1С) Тогда
					
					Для каждого ТекущийСчет Из МассивСчетов_НомДокИмпорт2 Цикл

						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация 		= Организация_Окей;
						НоваяЗапись.КодАналитикиАксапты = СокрЛП(Источник.НомДокИмпорт2);
						НоваяЗапись.СчетАксапты 		= ТекущийСчет;
						НоваяЗапись.Аналитика1С 		= Источник.Ссылка;
						НоваяЗапись.Тип1С 				= Тип1С;
					
					КонецЦикла; 
					
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли;
		
		//Выполнить проверку и очистку лишних записей в РС "Сопоставление аналитики Аксапты"
		ЗначениеНастройки_ВыполнятьОчисткуЛишнихЗаписей = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта", "Выполнить проверку и очистку лишних записей в РС Сопоставление аналитики Аксапты", Ложь); 
		
		Если ЗначениеНастройки_ВыполнятьОчисткуЛишнихЗаписей Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	бит_ок_СопоставлениеАналитики.СчетАксапты КАК СчетАксапты,
				|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты КАК КодАналитикиАксапты,
				|	бит_ок_СопоставлениеАналитики.Организация КАК Организация,
				|	бит_ок_СопоставлениеАналитики.Аналитика1С КАК Аналитика1С,
				|	бит_ок_СопоставлениеАналитики.Тип1С КАК Тип1С
				|ИЗ
				|	РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
				|ГДЕ
				|	бит_ок_СопоставлениеАналитики.Аналитика1С = &Аналитика1С
				|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
				|	И НЕ бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &НомДокИмпорт
				|	И НЕ бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &НомДокИмпорт2";
			
			Запрос.УстановитьПараметр("Аналитика1С", 	Источник.Ссылка);
			Запрос.УстановитьПараметр("Организация", 	Организация_Окей);
			Запрос.УстановитьПараметр("НомДокИмпорт", 	СокрЛП(Источник.НомДокИмпорт));
			Запрос.УстановитьПараметр("НомДокИмпорт2", 	СокрЛП(Источник.НомДокИмпорт2));
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СчетАксапты.Установить(ВыборкаДетальныеЗаписи.СчетАксапты);
				НаборЗаписей.Отбор.КодАналитикиАксапты.Установить(ВыборкаДетальныеЗаписи.КодАналитикиАксапты);
				НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
				НаборЗаписей.Записать(Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗаписиСопоставлениеАналитики12_Контрагент(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"); 
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", 		Организация_Окей);
	СтруктураПараметров.Вставить("ок_ИнтеграцияСAX12", 	Истина);
	СтруктураПараметров.Вставить("ПометкаУдаления", 	Ложь);
	
	Если бит_Общий.КонтрагентИмеетДоговорПоПараметрам(Источник.Ссылка, СтруктураПараметров) Тогда
	
		//НомДокИмпорт
		Если ЗначениеЗаполнено(Источник.НомДокИмпорт) Тогда
		
			МассивСчетов_НомДокИмпорт = Новый Массив();
			МассивСчетов_НомДокИмпорт.Добавить("60");
			МассивСчетов_НомДокИмпорт.Добавить("62");
			МассивСчетов_НомДокИмпорт.Добавить("76");
			МассивСчетов_НомДокИмпорт.Добавить("19");
			
			НаборЗаписей = РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация_Окей);
			НаборЗаписей.Отбор.КодАналитикиАксапты.Установить(СокрЛП(Источник.НомДокИмпорт));
			НаборЗаписей.Прочитать();
			
			Для каждого ЭлементНабора Из НаборЗаписей Цикл
			
				Если МассивСчетов_НомДокИмпорт.Найти(ЭлементНабора.СчетАксапты) <> Неопределено Тогда
					МассивСчетов_НомДокИмпорт.Удалить(МассивСчетов_НомДокИмпорт.Найти(ЭлементНабора.СчетАксапты));
				КонецЕсли; 
			
			КонецЦикла; 
			
			Если МассивСчетов_НомДокИмпорт.Количество() > 0 Тогда
				
				Тип1С = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.Контрагенты");
				Если ЗначениеЗаполнено(Тип1С) Тогда
					
					Для каждого ТекущийСчет Из МассивСчетов_НомДокИмпорт Цикл

						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация 		= Организация_Окей;
						НоваяЗапись.КодАналитикиАксапты = СокрЛП(Источник.НомДокИмпорт);
						НоваяЗапись.СчетАксапты 		= ТекущийСчет;
						НоваяЗапись.Аналитика1С 		= Источник.Ссылка;
						НоваяЗапись.Тип1С 				= Тип1С;
					
					КонецЦикла; 
					
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли; 
		
		//НомДокИмпорт2
		Если ЗначениеЗаполнено(Источник.НомДокИмпорт2) Тогда
		
			МассивСчетов_НомДокИмпорт2 = Новый Массив();
			МассивСчетов_НомДокИмпорт2.Добавить("60");
			МассивСчетов_НомДокИмпорт2.Добавить("62");
			МассивСчетов_НомДокИмпорт2.Добавить("76");
			МассивСчетов_НомДокИмпорт2.Добавить("19");
			
			НаборЗаписей = РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация_Окей);
			НаборЗаписей.Отбор.КодАналитикиАксапты.Установить(СокрЛП(Источник.НомДокИмпорт2));
			НаборЗаписей.Прочитать();
			
			Для каждого ЭлементНабора Из НаборЗаписей Цикл
			
				Если МассивСчетов_НомДокИмпорт2.Найти(ЭлементНабора.СчетАксапты) <> Неопределено Тогда
					МассивСчетов_НомДокИмпорт2.Удалить(МассивСчетов_НомДокИмпорт2.Найти(ЭлементНабора.СчетАксапты));
				КонецЕсли; 
			
			КонецЦикла; 
			
			Если МассивСчетов_НомДокИмпорт2.Количество() > 0 Тогда
				
				Тип1С = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.Контрагенты");
				Если ЗначениеЗаполнено(Тип1С) Тогда
					
					Для каждого ТекущийСчет Из МассивСчетов_НомДокИмпорт2 Цикл

						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация 		= Организация_Окей;
						НоваяЗапись.КодАналитикиАксапты = СокрЛП(Источник.НомДокИмпорт2);
						НоваяЗапись.СчетАксапты 		= ТекущийСчет;
						НоваяЗапись.Аналитика1С 		= Источник.Ссылка;
						НоваяЗапись.Тип1С 				= Тип1С;
					
					КонецЦикла; 
					
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли;
		
		//Выполнить проверку и очистку лишних записей в РС "Сопоставление аналитики Аксапты"
		ЗначениеНастройки_ВыполнятьОчисткуЛишнихЗаписей = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта", "Выполнить проверку и очистку лишних записей в РС Сопоставление аналитики Аксапты", Ложь); 
		
		Если ЗначениеНастройки_ВыполнятьОчисткуЛишнихЗаписей Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	бит_ок_СопоставлениеАналитики.СчетАксапты КАК СчетАксапты,
				|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты КАК КодАналитикиАксапты,
				|	бит_ок_СопоставлениеАналитики.Организация КАК Организация,
				|	бит_ок_СопоставлениеАналитики.Аналитика1С КАК Аналитика1С,
				|	бит_ок_СопоставлениеАналитики.Тип1С КАК Тип1С
				|ИЗ
				|	РегистрСведений.бит_ок_СопоставлениеАналитикиАксапты12 КАК бит_ок_СопоставлениеАналитики
				|ГДЕ
				|	бит_ок_СопоставлениеАналитики.Аналитика1С = &Аналитика1С
				|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
				|	И НЕ бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &НомДокИмпорт
				|	И НЕ бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &НомДокИмпорт2";
			
			Запрос.УстановитьПараметр("Аналитика1С", 	Источник.Ссылка);
			Запрос.УстановитьПараметр("Организация", 	Организация_Окей);
			Запрос.УстановитьПараметр("НомДокИмпорт", 	СокрЛП(Источник.НомДокИмпорт));
			Запрос.УстановитьПараметр("НомДокИмпорт2", 	СокрЛП(Источник.НомДокИмпорт2));
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СчетАксапты.Установить(ВыборкаДетальныеЗаписи.СчетАксапты);
				НаборЗаписей.Отбор.КодАналитикиАксапты.Установить(ВыборкаДетальныеЗаписи.КодАналитикиАксапты);
				НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
				НаборЗаписей.Записать(Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗаписьВРС_СписокОбъектовНеПрошедшихРегистрациюВПланеОбменаВыгрузкаВАксапту(УзелПланаОбмена, Объект, ТекстСообщения, ОчиститьЗаписи = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ок_ИсторияИзмененияТоварныхГруппДоговоров") 
		И Объект.Количество() > 0 Тогда
		
		Отбор_ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрСведений.ок_ИсторияИзмененияТоварныхГруппДоговоров");
		Отбор_Объект = Объект[0].ДоговорКонтрагента;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.ок_ИсторияИзмененияТоварныхГруппДоговоров") Тогда
		
		Отбор_ОбъектСистемы	= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрСведений.ок_ИсторияИзмененияТоварныхГруппДоговоров");
		Отбор_Объект = Объект.ДоговорКонтрагента;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ок_НастройкиЭУПД") 
		И Объект.Количество() > 0 Тогда
		
		Отбор_ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрСведений.ок_НастройкиЭУПД");
		Отбор_Объект = Объект[0].Контрагент;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.ок_НастройкиЭУПД") Тогда
		
		Отбор_ОбъектСистемы	= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрСведений.ок_НастройкиЭУПД");
		Отбор_Объект = Объект.Контрагент;
		
	Иначе
		
		ОбъектДляВыгрузки_Метаданные 	= Объект.Метаданные();
		ПолноеИмяОбъекта 				= ОбъектДляВыгрузки_Метаданные.ПолноеИмя();
		Отбор_ОбъектСистемы				= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ПолноеИмяОбъекта);
		Отбор_Объект 					= Объект.Ссылка;
		
		Если Отбор_Объект.Пустая() Тогда
			Отбор_Объект = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
		
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.ок_СписокОбъектовНеПрошедшихРегистрациюВПланеОбменаВыгрузкаВАксапту.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектСистемы.Установить(Отбор_ОбъектСистемы);
	НаборЗаписей.Отбор.Объект.Установить(Отбор_Объект);
	
	Если ОчиститьЗаписи Тогда
	
		НаборЗаписей.Записать();
		
	Иначе
		
		Если ТипЗнч(УзелПланаОбмена) = Тип("Строка") Тогда
			Отбор_УзелПланаОбмена = ПланыОбмена.ок_ВыгрузкаВАксапту.НайтиПоКоду(УзелПланаОбмена); 
		Иначе 
			Отбор_УзелПланаОбмена = УзелПланаОбмена;
		КонецЕсли;
		
		НаборЗаписей.Отбор.УзелПланаОбмена.Установить(Отбор_УзелПланаОбмена);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период			= ТекущаяДата();
		НоваяЗапись.УзелПланаОбмена = Отбор_УзелПланаОбмена;
		НоваяЗапись.ОбъектСистемы 	= Отбор_ОбъектСистемы;
		НоваяЗапись.Объект 			= Отбор_Объект;
		НоваяЗапись.Ошибка 			= ТекстСообщения;
		
		НаборЗаписей.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

Функция КоличествоЗаписей_СписокОбъектовНеПрошедшихРегистрациюВПланеОбменаВыгрузкаВАксапту(Объект, УзелПланаОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ок_ИсторияИзмененияТоварныхГруппДоговоров") 
		И Объект.Количество() > 0 Тогда
		
		Отбор_ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрСведений.ок_ИсторияИзмененияТоварныхГруппДоговоров");
		Отбор_Объект = Объект[0].ДоговорКонтрагента;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.ок_ИсторияИзмененияТоварныхГруппДоговоров") Тогда
		
		Отбор_ОбъектСистемы	= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрСведений.ок_ИсторияИзмененияТоварныхГруппДоговоров");
		Отбор_Объект = Объект.ДоговорКонтрагента;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ок_НастройкиЭУПД") 
		И Объект.Количество() > 0 Тогда
		
		Отбор_ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрСведений.ок_НастройкиЭУПД");
		Отбор_Объект = Объект[0].Контрагент;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийЗапись.ок_НастройкиЭУПД") Тогда
		
		Отбор_ОбъектСистемы	= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрСведений.ок_НастройкиЭУПД");
		Отбор_Объект = Объект.Контрагент;
		
	Иначе
		
		ОбъектДляВыгрузки_Метаданные 	= Объект.Метаданные();
		ПолноеИмяОбъекта 				= ОбъектДляВыгрузки_Метаданные.ПолноеИмя();
		Отбор_ОбъектСистемы				= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ПолноеИмяОбъекта);
		Отбор_Объект 					= Объект.Ссылка;
		
		Если Отбор_Объект.Пустая() Тогда
			Отбор_Объект = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
		
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.ок_СписокОбъектовНеПрошедшихРегистрациюВПланеОбменаВыгрузкаВАксапту.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектСистемы.Установить(Отбор_ОбъектСистемы);
	НаборЗаписей.Отбор.Объект.Установить(Отбор_Объект);
	Если УзелПланаОбмена <> Неопределено Тогда
		НаборЗаписей.Отбор.УзелПланаОбмена.Установить(УзелПланаОбмена);
	КонецЕсли;
	НаборЗаписей.Отбор.Объект.Установить(Отбор_Объект);
	НаборЗаписей.Прочитать();
	
	КоличествоЗаписей = НаборЗаписей.Количество(); 
	
	Возврат КоличествоЗаписей;
	
КонецФункции

Функция ДлительныеОперации_ВыполнитьПоискАссортимента(ДоговорКонтрагента, ТоварнаяГруппа, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "ок_ВыгрузкаВАксапту.ВыполнитьПоискАссортимента", ДоговорКонтрагента, ТоварнаяГруппа);
	  
КонецФункции

Функция ВыполнитьПоискАссортимента(ДоговорКонтрагента, ТоварнаяГруппа) Экспорт
	
	Алгоритм = Справочники.бит_ПользовательскиеФункции.НайтиПоНаименованию("ВыполнитьПоискАссортимента", Истина);
	
	Результат = Ложь;
	Если ЗначениеЗаполнено(Алгоритм) Тогда
		Результат = бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункцию(Алгоритм, ДоговорКонтрагента, ТоварнаяГруппа);
	Иначе
		ВызватьИсключение "Пользовательская функция с наименованием ""ВыполнитьПоискАссортимента"" не найдена.";
	КонецЕсли;
	
	Возврат Результат;
	  
КонецФункции

Функция ПолучитьКодАналитикиАксапты(СчетАксапты, Аналитика1С, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты КАК КодАналитикиАксапты
		|ИЗ
		|	РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
		|ГДЕ
		|	бит_ок_СопоставлениеАналитики.СчетАксапты = &СчетАксапты
		|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
		|	И бит_ок_СопоставлениеАналитики.Аналитика1С = &Аналитика1С";
	
	Запрос.УстановитьПараметр("СчетАксапты", СчетАксапты);
	Запрос.УстановитьПараметр("Аналитика1С", Аналитика1С);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = ВыборкаДетальныеЗаписи.КодАналитикиАксапты;
		
	КонецЕсли;
	
	Возврат Результат;
	  
КонецФункции

Функция ПолучитьАналитику1СПоКодуАксапты(СчетАксапты, КодАналитикиАксапты, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ок_СопоставлениеАналитики.Аналитика1С КАК Аналитика1С
		|ИЗ
		|	РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
		|ГДЕ
		|	бит_ок_СопоставлениеАналитики.СчетАксапты = &СчетАксапты
		|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
		|	И бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &КодАналитикиАксапты";
	
	Запрос.УстановитьПараметр("СчетАксапты", 			СчетАксапты);
	Запрос.УстановитьПараметр("КодАналитикиАксапты", 	КодАналитикиАксапты);
	Запрос.УстановитьПараметр("Организация", 			Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = ВыборкаДетальныеЗаписи.Аналитика1С;
		
	КонецЕсли;
	
	Возврат Результат;
	  
КонецФункции

// Проверка контрагента при изменении реквизита "СчетНа"
//
// Параметры:
//  <Контрагент1>  - <СправочникСсылка.Контрагенты> - <Ссылка на текущего контрагента>
//  <Контрагент2>  - <СправочникСсылка.Контрагенты> - <Ссылка на контрагента в поле СчетНа>
//  <ВыводитьСообщение>  - <Булево> - <При ошибке выводить сообщение и формировать запись в журнал регистрации>
//  <Отказ>  		- <Булево> - <При ошибке устанавливается значение в Истину>
//
// Возвращаемое значение:
//   <Булево>   - <Результат проверки Истина - проверка прошла успешно, Ложь - найдена ошибка>
//
Функция ПроверитьКонтрагентаПриИзмененииСчетНа(Контрагент1, Контрагент2, ВыводитьСообщение = Истина, Отказ = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Контрагент2)
		ИЛИ Контрагент2 = Контрагент1 Тогда
	
		Возврат Истина;
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	""Проверка текущего контрагента"" КАК ВидПроверки,
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.ок_СчетНа.Наименование КАК Наименование_1,
		|	Контрагенты.ок_СчетНа.Код КАК Код_1,
		|	Контрагенты.Наименование КАК Наименование_2,
		|	Контрагенты.Код КАК Код_2
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&Контрагент1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И Контрагенты.ок_СчетНа = &Контрагент1
		|	И Контрагенты.Ссылка <> &Контрагент1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Проверка Счет на"",
		|	Контрагенты.Ссылка,
		|	Контрагенты.Наименование,
		|	Контрагенты.Код,
		|	Контрагенты.ок_СчетНа.Наименование,
		|	Контрагенты.ок_СчетНа.Код
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент2
		|	И НЕ Контрагенты.ок_СчетНа = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И НЕ Контрагенты.ок_СчетНа = Контрагенты.Ссылка";
	
	Запрос.УстановитьПараметр("Контрагент1", Контрагент1);
	Запрос.УстановитьПараметр("Контрагент2", Контрагент2);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Истина;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Результат = Ложь;
		Отказ = Истина;
		
		Если ВыводитьСообщение Тогда
		
			Если ВыборкаДетальныеЗаписи.ВидПроверки = "Проверка текущего контрагента" Тогда
		                                     
				ТекстСообщения = НСтр("ru = 'Реквизит «Счет на» невозможно заполнить, т.к. ""%1"" (%2) уже заполнен у других контрагентов. ""%3"" (%4)'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
									ВыборкаДетальныеЗаписи.Наименование_1,
									ВыборкаДетальныеЗаписи.Код_1,
									ВыборкаДетальныеЗаписи.Наименование_2, 
									ВыборкаДетальныеЗаписи.Код_2);
									
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаДетальныеЗаписи.Ссылка);
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Контрагенты, Контрагент1, ТекстСообщения);
				
			ИначеЕсли ВыборкаДетальныеЗаписи.ВидПроверки = "Проверка Счет на" Тогда
			                                 
				ТекстСообщения = НСтр("ru = 'Реквизит «Счет на» невозможно заполнить, т.к. у ""%1"" (%2) реквизит заполнен другим контрагентом. ""%3"" (%4)'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
				                    ВыборкаДетальныеЗаписи.Наименование_1,
									ВыборкаДетальныеЗаписи.Код_1,
									ВыборкаДетальныеЗаписи.Наименование_2,
									ВыборкаДетальныеЗаписи.Код_2);
									
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаДетальныеЗаписи.Ссылка);
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Контрагенты, Контрагент1, ТекстСообщения);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ПроверитьКонтрагентаНаДоступностьСчетНа(Контрагент1) Экспорт

	Если ЗначениеЗаполнено(Контрагент1.ок_СчетНа) Тогда
	
		Возврат Истина;
	
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ок_СчетНа = &Контрагент1
		|	И Контрагенты.Ссылка <> &Контрагент1";
	
	Запрос.УстановитьПараметр("Контрагент1", Контрагент1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = Ложь;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПолучитьАналитику1СПоКодуАналитикиАксапты_Аксапта4(КодАналитикиАксапты, Организация = Неопределено, СчетАксапты = Неопределено, Тип1С = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ок_СопоставлениеАналитики.Аналитика1С КАК Аналитика1С
		|ИЗ
		|	РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
		|ГДЕ
		|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &КодАналитикиАксапты
		|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
		|	И бит_ок_СопоставлениеАналитики.СчетАксапты = &СчетАксапты
		|	И бит_ок_СопоставлениеАналитики.Тип1С = &Тип1С";
	
	Если Организация = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И бит_ок_СопоставлениеАналитики.Организация = &Организация", "");
	КонецЕсли;
	Если СчетАксапты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И бит_ок_СопоставлениеАналитики.СчетАксапты = &СчетАксапты", "");
	КонецЕсли;
	Если Тип1С = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И бит_ок_СопоставлениеАналитики.Тип1С = &Тип1С", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодАналитикиАксапты", 	КодАналитикиАксапты);
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Запрос.УстановитьПараметр("СчетАксапты", 			СчетАксапты);
	Запрос.УстановитьПараметр("Тип1С", 					Тип1С);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = ВыборкаДетальныеЗаписи.Аналитика1С;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКодАналитикиАксаптыПоАналитике1С_Аксапта4(Аналитика1С, Организация = Неопределено, СчетАксапты = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты КАК КодАналитикиАксапты
		|ИЗ
		|	РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
		|ГДЕ
		|	бит_ок_СопоставлениеАналитики.Аналитика1С = &Аналитика1С
		|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
		|	И бит_ок_СопоставлениеАналитики.СчетАксапты = &СчетАксапты";
	
	Если Организация = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И бит_ок_СопоставлениеАналитики.Организация = &Организация", "");
	КонецЕсли;
	Если СчетАксапты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И бит_ок_СопоставлениеАналитики.СчетАксапты = &СчетАксапты", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Аналитика1С",	Аналитика1С);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("СчетАксапты", 	СчетАксапты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = ВыборкаДетальныеЗаписи.КодАналитикиАксапты;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАналитику1СПоКодуАналитикиАксапты_Аксапта12(КодАналитикиАксапты, Организация = Неопределено, СчетАксапты = Неопределено, Тип1С = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ок_СопоставлениеАналитики.Аналитика1С КАК Аналитика1С
		|ИЗ
		|	РегистрСведений.бит_ок_СопоставлениеАналитикиАксапты12 КАК бит_ок_СопоставлениеАналитики
		|ГДЕ
		|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &КодАналитикиАксапты
		|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
		|	И бит_ок_СопоставлениеАналитики.СчетАксапты = &СчетАксапты
		|	И бит_ок_СопоставлениеАналитики.Тип1С = &Тип1С";
	
	Если Организация = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И бит_ок_СопоставлениеАналитики.Организация = &Организация", "");
	КонецЕсли;
	Если СчетАксапты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И бит_ок_СопоставлениеАналитики.СчетАксапты = &СчетАксапты", "");
	КонецЕсли;
	Если Тип1С = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И бит_ок_СопоставлениеАналитики.Тип1С = &Тип1С", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодАналитикиАксапты", 	КодАналитикиАксапты);
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Запрос.УстановитьПараметр("СчетАксапты", 			СчетАксапты);
	Запрос.УстановитьПараметр("Тип1С", 					Тип1С);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = ВыборкаДетальныеЗаписи.Аналитика1С;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКодАналитикиАксаптыПоАналитике1С_Аксапта12(Аналитика1С, Организация = Неопределено, СчетАксапты = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты КАК КодАналитикиАксапты
		|ИЗ
		|	РегистрСведений.бит_ок_СопоставлениеАналитикиАксапты12 КАК бит_ок_СопоставлениеАналитики
		|ГДЕ
		|	бит_ок_СопоставлениеАналитики.Аналитика1С = &Аналитика1С
		|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
		|	И бит_ок_СопоставлениеАналитики.СчетАксапты = &СчетАксапты";
	
	Если Организация = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И бит_ок_СопоставлениеАналитики.Организация = &Организация", "");
	КонецЕсли;
	Если СчетАксапты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И бит_ок_СопоставлениеАналитики.СчетАксапты = &СчетАксапты", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Аналитика1С",	Аналитика1С);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("СчетАксапты", 	СчетАксапты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = ВыборкаДетальныеЗаписи.КодАналитикиАксапты;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьПравилаРегистрацииДляОбъекта(Знач ОбъектДляРегистрации, РегистрацияСвязанныхОбъектов = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определяем массив узлов для регистрации объекта.
	ИмяПланаОбмена = "ок_ВыгрузкаВАксапту";
	ОбъектМетаданных = ОбъектДляРегистрации.ПолучитьОбъект();
	ОбъектМетаданных.ДополнительныеСвойства.Вставить("ВыполнятьПроверкуРегистрацииПланаОбмена_ВыгрузкаВАксапту", Ложь);
	Если РегистрацияСвязанныхОбъектов Тогда
		ОбъектМетаданных.ДополнительныеСвойства.Вставить("ВыполнятьРегистрациюСвязанныхОбъектовПланаОбмена_ВыгрузкаВАксапту", Истина);
	КонецЕсли; 
	
	ОбменДаннымиСобытия.ВыполнитьПравилаРегистрацииДляОбъекта(ОбъектМетаданных, ИмяПланаОбмена);
	
КонецПроцедуры

Функция ИнтеграцияКонтрагентовИДоговоровВключена_МДМ() Экспорт

	ЗначениеНастройки = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Интеграция", "Интеграция контрагентов и договоров 1С (проект 3.4.3 МДМ)", Истина);

	Если ТипЗнч(ЗначениеНастройки) <> Тип("Булево") Тогда
		ЗначениеНастройки = Истина;
	КонецЕсли; 
	
	Возврат ЗначениеНастройки;
	
КонецФункции

//РЕГЛАМЕНТНЫЕ ЗАДАНИЯ

Процедура ок_ВыгрузкаВАксапту(УзелПланаОбмена) Экспорт

	ВыгрузкаДанныеВАксаптуДляУзлаПланаОбмена(УзелПланаОбмена);
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-11-24 (#МДМ)