#Область СлужебныйПрограммныйИнтерфейс

#Область Обмен

Процедура ПостроитьОчередьСообщений(ПараметрыОбмена, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ПараметрыОбмена.ОчередьСообщений.Очистить();
	ПараметрыОбмена.ЗависимостиСообщений.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Очередь.ДатаСоздания       КАК ДатаСоздания,
	|	Очередь.Сообщение          КАК Сообщение,
	|	Очередь.СообщениеОснование КАК СообщениеОснование,
	|	
	|	Очередь.ВидПродукции              КАК ВидПродукции,
	|	Очередь.Операция                  КАК Операция,
	|	Очередь.Назначение                КАК Назначение,
	|	Очередь.СтанцияУправленияЗаказами КАК СтанцияУправленияЗаказами,
	|	
	|	Очередь.Организация       КАК Организация,
	|	Очередь.Документ          КАК Документ,
	|	Очередь.ДокументОснование КАК ДокументОснование,
	|	
	|	Очередь.РеквизитыИсходящегоСообщения      КАК РеквизитыИсходящегоСообщения,
	|	Очередь.ПротоколОбмена                    КАК ПротоколОбмена,
	|	Очередь.ДатаМодификацииУниверсальная      КАК ДатаМодификацииУниверсальная,
	|	Очередь.ЗагружатьПосле                    КАК ЗагружатьПосле,
	|	Очередь.ЗагружатьДо                       КАК ЗагружатьДо,
	|	Очередь.ИдентификаторЗаявки               КАК ИдентификаторЗаявки,
	|	Очередь.ИдентификаторПоследнегоБлокаКодов КАК ИдентификаторПоследнегоБлокаКодов
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК Очередь
	|ГДЕ
	|	&УсловиеПоОрганизациям
	|");
	
	Если ПараметрыОбмена.Организации <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизациям", "Очередь.Организация В(&Организации)");
		Запрос.УстановитьПараметр("Организации", ПараметрыОбмена.Организации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизациям", "ИСТИНА");
	КонецЕсли;
	
	Если СообщениеИлиДокумент <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС +
			"И (Очередь.Сообщение В(&СообщениеИлиДокумент) Или Очередь.Документ В(&СообщениеИлиДокумент))";
		
		Запрос.УстановитьПараметр("СообщениеИлиДокумент", СообщениеИлиДокумент);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитыИсходящегоСообщения = Выборка.РеквизитыИсходящегоСообщения.Получить();
		ПротоколОбмена               = Выборка.ПротоколОбмена.Получить();
		
		ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
		ЭлементОчереди.ДатаСоздания       = Выборка.ДатаСоздания;
		ЭлементОчереди.Сообщение          = Выборка.Сообщение;
		ЭлементОчереди.СообщениеОснование = Выборка.СообщениеОснование;
		
		ЭлементОчереди.ВидПродукции              = Выборка.ВидПродукции;
		ЭлементОчереди.Операция                  = Выборка.Операция;
		ЭлементОчереди.Назначение                = Выборка.Назначение;
		ЭлементОчереди.СтанцияУправленияЗаказами = Выборка.СтанцияУправленияЗаказами;
		
		ЭлементОчереди.Организация       = Выборка.Организация;
		ЭлементОчереди.Документ          = Выборка.Документ;
		ЭлементОчереди.ДокументОснование = Выборка.ДокументОснование;
		
		ЭлементОчереди.РеквизитыИсходящегоСообщения      = РеквизитыИсходящегоСообщения;
		ЭлементОчереди.ПротоколОбмена                    = ПротоколОбмена;
		ЭлементОчереди.ДатаМодификацииУниверсальная      = Выборка.ДатаМодификацииУниверсальная;
		ЭлементОчереди.ИдентификаторЗаявки               = Выборка.ИдентификаторЗаявки;
		ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов = Выборка.ИдентификаторПоследнегоБлокаКодов;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьПосле) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.Сообщение;
			НоваяЗависимость.Сообщение2 = Выборка.ЗагружатьПосле;
			НоваяЗависимость.Загрузка   = Ложь;
			НоваяЗависимость.Передача   = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьДо) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.ЗагружатьДо;
			НоваяЗависимость.Сообщение2 = Выборка.Сообщение;
			НоваяЗависимость.Загрузка   = Ложь;
			НоваяЗависимость.Передача   = Ложь;
		КонецЕсли;
		
		Если ПротоколОбмена <> Неопределено
			И ПротоколОбмена.Количество() > 0 Тогда
			
			ПоследняяЗаписьПротоколаОбмена = ПротоколОбмена[ПротоколОбмена.Количество() - 1];
			ЭлементОчереди.ТекущийСтатусОбработки = ПоследняяЗаписьПротоколаОбмена.СтатусОбработки;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					ПоследняяЗаписьПротоколаОбмена, "Статус") Тогда
				ЭлементОчереди.ТекущийСтатус = ПоследняяЗаписьПротоколаОбмена.Статус;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗависимостиКУдалению = Новый Соответствие();
	Для Каждого СтрокаТЧ Из ПараметрыОбмена.ЗависимостиСообщений Цикл
		Если ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение1, "Сообщение") = Неопределено
			Или ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение2, "Сообщение") = Неопределено Тогда
			ЗависимостиКУдалению.Вставить(СтрокаТЧ, Истина);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИЗначение Из ЗависимостиКУдалению Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыОбмена", ПараметрыОбмена);
	
	// Собрать JSON для передаваемых документов
	// Требуется подписание документа на клиенте? Если да, то документы требуется вернуть на клиент.
	// Нужен ли запрос авторизации? Если да, то документы нужно положить в очередь и вернуться на клиент для авторизации
	// После всего - выполнить передачу и дождаться результата - изменений.
	СообщенияJSON = Новый Массив;
	Для Каждого ПараметрыОбработкиДокумента Из ВходящиеДанные Цикл
		
		СообщенияДокументаJSON = СообщениеКПередачеJSON(
			ПараметрыОбработкиДокумента.Ссылка,
			ПараметрыОбработкиДокумента.ДальнейшееДействие,
			ДополнительныеПараметры);
		
		Для Каждого СообщениеJSON Из СообщенияДокументаJSON Цикл
			СообщенияJSON.Добавить(СообщениеJSON);
		КонецЦикла;
		
	КонецЦикла;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ЕстьОшибки = Ложь;
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено Тогда
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
	               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
	
	ТребуетсяПодписание = ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
	                  Или ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено;
	
	Если ТребуетсяОжидание И Не ТребуетсяПодписание Тогда
		
		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ИнтеграцияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		ДоступныеСертификаты = Неопределено;
		Если ТребуетсяПодписание Тогда
			
			ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
			
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию    = Неопределено;
		
		ВозвращаемоеЗначение.Ожидать                   = ВремяОжидания;
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбменаУниверсально(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ВыполнитьИтерацию = Истина;
	ВремяОжидания     = 0;
	Пока ВыполнитьИтерацию Цикл
		
		ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
		
		ЕстьОшибки = Ложь;
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
		               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
		
		ТребуетсяПодписание = ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
		                  Или ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено;
		
		Если ТребуетсяОжидание И Не ТребуетсяПодписание Тогда
			
			Если ДатаСледующейИтерации <> Неопределено Тогда
				ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
			Иначе
				ВремяОжидания = 0;
			КонецЕсли;
			
			Если ПараметрыОбмена.ОжидатьНаСервере Тогда
				ИнтеграцияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			ИначеЕсли ПараметрыОбмена.ОжидатьНаКлиенте Тогда
				ВыполнитьИтерацию = Ложь;
			КонецЕсли;
			
		Иначе
			
			ВыполнитьИтерацию = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТребуетсяПодписание = ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		ДоступныеСертификаты = Неопределено;
		Если ТребуетсяПодписание Тогда
			
			ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				Неопределено, ПараметрыОбмена);
			
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию    = Неопределено;
		
		ВозвращаемоеЗначение.Ожидать                   = ВремяОжидания;
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьОбменУниверсально(ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ЕстьОшибки = Ложь;
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено Тогда
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
	               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
	
	ТребуетсяПодписание = ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
	                  Или ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено;
	
	Если ТребуетсяОжидание И Не ТребуетсяПодписание Тогда
		
		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ИнтеграцияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(Неопределено, ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(Неопределено, ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		ДоступныеСертификаты = Неопределено;
		Если ТребуетсяПодписание Тогда
			
			ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				Неопределено, ПараметрыОбмена);
			
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию    = Неопределено;
		
		ВозвращаемоеЗначение.Ожидать                   = ВремяОжидания;
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВремяОжидания(НомерИтерации) Экспорт
	
	Если НомерИтерации <= 1 Тогда
		ВремяОжидания = 5;
	ИначеЕсли НомерИтерации < 15 Тогда
		ВремяОжидания = 5 * Pow(1.4, НомерИтерации - 1);
	Иначе
		ВремяОжидания = 120;
	КонецЕсли;
	
	Возврат ВремяОжидания;
	
КонецФункции

// Формирует пустую структуру сообщения XML
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстОшибки                 - Строка - Текст ошибки.
//   * Ошибки                      - Соответствие - Описание ошибок.
//   * Описание                    - Строка - Описание для отображения в форме подписания.
//   * ТекстСообщенияJSON          - Строка - Текст сообщения JSON.
//   * ТипЗапроса                  - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * Организация                 - ОпределяемыйТип.Организации - Организация.
//   * Операция                    - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции.
//   * Документ                    - ДокументСсылка - Документ.
//   * Версия                      - Строка - Версия сообщения.
//   * СообщениеОснование          - СправочникСсылка.ИСМППрисоединенныеФайлы - сообщение основание.
//   * ДанныеДляПолученияДокумента - Структура - Данные для получения документа.
//   * ДокументОснование           - ДокументСсылка - Документ основание.
Функция СтруктураСообщенияJSON() Экспорт
	
	СообщениеJSON = Новый Структура;
	
	СообщениеJSON.Вставить("ТекстОшибки", "");
	СообщениеJSON.Вставить("Ошибки", Новый Соответствие);
	СообщениеJSON.Вставить("ИдентификаторЗаявки");

	// Для отображения в форме подписания
	СообщениеJSON.Вставить("Описание", "");
	// Для управления очередностью
	СообщениеJSON.Вставить("Идентификатор");
	СообщениеJSON.Вставить("ЗагружатьДо");
	СообщениеJSON.Вставить("ЗагружатьПосле");
	
	// Для использования в механизмах электронной подписи
	СообщениеJSON.Вставить("ТекстСообщенияJSON");
	СообщениеJSON.Вставить("ТребуетсяПодписание");
	СообщениеJSON.Вставить("ТипСообщения");
	СообщениеJSON.Вставить("Версия", 0);
	
	// Для сохранения в Протокол обмена
	СообщениеJSON.Вставить("ВерсияГосИС");
	СообщениеJSON.Вставить("ВидПродукции");
	СообщениеJSON.Вставить("Операция");
	СообщениеJSON.Вставить("Назначение");
	СообщениеJSON.Вставить("ФорматОбмена");
	СообщениеJSON.Вставить("СтанцияУправленияЗаказами");
	
	// Используется при запросах квитанций
	СообщениеJSON.Вставить("СообщениеОснование");
	
	// Используется при получении кодов маркировки из СУЗ
	СообщениеJSON.Вставить("ПараметрыЗапроса");
	
	// Для обновления в формах
	СообщениеJSON.Вставить("Организация");
	СообщениеJSON.Вставить("Документ");
	СообщениеJSON.Вставить("ДокументОснование");
	
	Возврат СообщениеJSON;
	
КонецФункции

// Добавить запись в протокол обмена.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML.
//  Реквизиты - Структура - Значения реквизитов сообщения.
//  ПроверятьХешБезСсылки - Булево - Признак проверки хеша без ссылки.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовоеСообщение - Булево - Это новое сообщение.
//   * Ссылка - СправочникСсылка.ИСМППрисоединенныеФайлы - Ссылка на присоединенный файл.
//
Функция ДобавитьЗаписьВПротоколОбмена(ТекстСообщенияJSON, Реквизиты, ПроверятьХешБезСсылки = Ложь) Экспорт
	
	Реквизиты.Вставить("ВладелецФайлов", Реквизиты.Документ);
	Возврат ИнтеграцияИС.ДобавитьЗаписьВПротоколОбмена(
		Метаданные.Справочники.ИСМППрисоединенныеФайлы,
		ТекстСообщенияJSON,
		Реквизиты,
		ПроверятьХешБезСсылки);
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Процедура ПодготовитьКПередачеДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ВходящиеДанные    = ПараметрыФоновогоЗадания.ВходящиеДанные;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ВыполнитьОбменДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ВыполнитьОбменУниверсально(ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеОбменаДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПодписанныеСообщенияПоОрганизациям = ПараметрыФоновогоЗадания.ПодписанныеСообщенияПоОрганизациям;
	ПараметрыОбмена                    = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыСеансаИС                  = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ПродолжитьВыполнениеОбменаУниверсально(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьЗаполнениеШтрихкодовУпаковок(Объект, Отказ) Экспорт
	
	СписокУпаковок = Объект.ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	РезультатПроверки = ШтрихкодированиеИС.ТаблицаТоварыСоответствуетСпискуУпаковокМаркируемойПродукции(Объект.Товары, СписокУпаковок);
	
	Если РезультатПроверки.ДанныеСоответствуют Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru = 'В строке %1 для номенклатурной позиции %2 должно быть указано марок - %3, а указано - %4'");
	Для Каждого СтрокаСРасхождением Из РезультатПроверки.СтрокиСРасхождением Цикл
		ТекстОшибки = СтрШаблон(ШаблонОшибки, СтрокаСРасхождением.СтрокаТовары.НомерСтроки, СтрокаСРасхождением.СтрокаТовары.Номенклатура,
			СтрокаСРасхождением.Необходимо, СтрокаСРасхождением.Указано);
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаСРасхождением.СтрокаТовары.НомерСтроки, "КоличествоУпаковок");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки, Объект, ПутьКТабличнойЧасти, "Объект", Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииОбменаДанными

// Сформировать описание операции для документа.
//
// Параметры:
//  Описание - Строка - Описание операции.
//  ДокументСсылка - ДокументСсылка - Документ.
//  НомерВерсии - Число - Номер версии.
// 
// Возвращаемое значение:
//  Строка - Описание операции.
//
Функция ОписаниеОперации(Описание, ДокументСсылка, НомерВерсии = Неопределено, ТекстПоКоличествуСообщений = Неопределено) Экспорт
	
	Если НомерВерсии = Неопределено И ДокументСсылка = Неопределено Тогда
		ТекстВозврата = Описание;
	ИначеЕсли НомерВерсии = Неопределено И ДокументСсылка <> Неопределено Тогда
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1 по документу ""%2""'"), Описание, ДокументСсылка);
	ИначеЕсли НомерВерсии <> Неопределено И ДокументСсылка = Неопределено Тогда
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1. Версия %2'"), Описание, НомерВерсии);
	Иначе
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1 по документу ""%2"". Версия %3'"), Описание, ДокументСсылка, НомерВерсии);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстПоКоличествуСообщений) Тогда
		ТекстВозврата = ТекстВозврата + ". " + ТекстПоКоличествуСообщений;
	КонецЕсли;
	
	Возврат ТекстВозврата;

КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ЕГАИС
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПередачиДанных(ОперацияПередачиДанных, ДокументСсылка = Неопределено, НомерВерсии = Неопределено, ТекстПоКоличествуСообщений = Неопределено) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПередачаДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, ДокументСсылка, НомерВерсии, ТекстПоКоличествуСообщений);
	
КонецФункции

// Формирует текст счетчика по формату N из M.
//
// Параметры:
// 	ТекущийНомерГруппы - Число - текущий номер в группе.
// 	КоличествоГрупп - Число - Всего элементов в группе.
// Возвращаемое значение:
// 	Строка - Сформированный текст счетчика.
Функция ТекстКоличествоИзГруппы(ТекущийНомерГруппы, КоличествоГрупп) Экспорт
	Если КоличествоГрупп > ТекущийНомерГруппы Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 из %2'"), ТекущийНомерГруппы, КоличествоГрупп);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ЕГАИС
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПолученияДанных(ОперацияПередачиДанных) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПолучениеДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, Неопределено, Неопределено);
	
КонецФункции

// Возвращает операции обмена с ИС МП, разбитые на категории
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ПередачаДанных - Соответствие - Операции передачи данных.
//    * ПолучениеДанных - Соответствие - Операции получения данных.
//
Функция КатегорииОпераций() Экспорт
	
	ПередачаДанных = Новый Соответствие;
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки,
		НСтр("ru = 'Оформление заказа на эмиссию кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки,
		НСтр("ru = 'Передача сведений об остатках обуви для получения GTIN'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса,
		НСтр("ru = 'Расчет статуса заказа на эмиссию (Абстрактная операция)'"));

	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.Агрегация,
		НСтр("ru = 'Передача сведений об агрегации кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияСоздание,
		НСтр("ru = 'Передача сведений о формировании агрегата'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияИзменение,
		НСтр("ru = 'Передача сведений о переагрегации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияУдаление,
		НСтр("ru = 'Передача сведений о расформировании агрегата'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборот,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции собственного производства'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной импортной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции, произведенной по договору'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции, произведенной по договору'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц,
		НСтр("ru = 'Передача сведений о вводе в оборот продукции, полученной от физических лиц'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков,
		НСтр("ru = 'Передача сведений о вводе в оборот остатков обувной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля,
		НСтр("ru = 'Передача сведений о вводе в оборот при трансграничной торговле'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборота,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при конфискации товаров'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при уничтожении товаров'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при банкротстве или ликвидации организации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при безвозмездной передаче товара'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при внутреннем использовании продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при возврате товара физическому лицу'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции в процессе реализации продукции по договору рассрочки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при розничной продаже по кредитному договору'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при порче или учере товара'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при реализации конфискованной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при реализации по договору рассрочки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при розничной продаже'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при экспорте в ЕАЭС'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при экспорте за пределы ЕАЭС'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки,
		НСтр("ru = 'Передача сведений в СУЗ об использовании кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию,
		НСтр("ru = 'Передача сведений в СУЗ о передаче кодов маркировки на производственную линию'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер,
		НСтр("ru = 'Передача сведений в СУЗ о передаче кодов маркировки на принтер'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ,
		НСтр("ru = 'Передача сведений в СУЗ о печати кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ,
		НСтр("ru = 'Передача сведений в СУЗ о потере распечатанных кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ,
		НСтр("ru = 'Передача сведений в СУЗ о верфификации нанесенных кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса,
		НСтр("ru = 'Передача сведений в СУЗ об использовании кодов маркировки (Расчет статуса)'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки,
		НСтр("ru = 'Передача сведений о списании эмитированных кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки,
		НСтр("ru = 'Передача сведений о списании введенных в оборот кодов маркировки для последующей перемаркировки'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.Перемаркировка,
		НСтр("ru = 'Передача сведений о перемаркировке продукции'"));
	
	ПолучениеДанных = Новый Соответствие;
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		НСтр("ru = 'Получение результата обработки документа ИС МП'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиЗаказаНаЭмиссиюКодовМаркировки,
		НСтр("ru = 'Получение результата обработки Заказа на эмиссию кодов маркировки ИС МП'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ,
		НСтр("ru = 'Получение кодов маркировки из СУЗ'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеСтатусаПулаКодовМаркировкиИзСУЗ,
		НСтр("ru = 'Получение статуса пула кодов маркировки из СУЗ'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки,
		НСтр("ru = 'Получение GTIN для маркировки остатков обуви'"));

	Категории = Новый Структура;
	Категории.Вставить("ПередачаДанных",  ПередачаДанных);
	Категории.Вставить("ПолучениеДанных", ПолучениеДанных);
	
	Возврат Категории;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Формирует пустую структуру изменений данных
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//
Функция СтруктураИзменения() Экспорт
	
	СтруктураИзменения = Новый Структура;
	
	// Назначение сообщений: ИСМП, МОТП или СУЗ
	СтруктураИзменения.Вставить("Операция");
	СтруктураИзменения.Вставить("Назначение");
	СтруктураИзменения.Вставить("СтанцияУправленияЗаказами");
	
	// Источник
	СтруктураИзменения.Вставить("Организация");
	СтруктураИзменения.Вставить("Объект");
	СтруктураИзменения.Вставить("ДокументОснование");
	
	// Событие
	СтруктураИзменения.Вставить("ТекстОшибки",           "");
	СтруктураИзменения.Вставить("ПодготовленоКПередаче", Ложь);
	СтруктураИзменения.Вставить("Передано",              Ложь);
	СтруктураИзменения.Вставить("Принято",               Ложь);
	СтруктураИзменения.Вставить("ОбъектИзменен",         Ложь);
	СтруктураИзменения.Вставить("НовыйСтатус",           Неопределено);
	
	// Описание, протокол
	СтруктураИзменения.Вставить("Сообщение");
	СтруктураИзменения.Вставить("ТекстСообщения");
	СтруктураИзменения.Вставить("ПредставлениеПротоколаОбмена");
	
	Возврат СтруктураИзменения;
	
КонецФункции

// Выполняет запись ошибки в журнал регистрации, добавляя имя события ВЕТИС.
//
// Параметры:
//  Заголовок   - Строка - заголовок сообщения.
//  ТекстОшибки - Строка - текст ошибки.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	ИнтеграцияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
		ТекстОшибки,
		НСтр("ru='ИС МП'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ОбъектМетаданных,
		Данные);
	
КонецПроцедуры

#КонецОбласти

#Область МаркировкаОстатков

// Заполняет колонку GTIN в переданный таблице значениями, пригодными для маркировки остатков, полученными с помощью
// (См. ИнтерфейсИСМП.НайтиПродукциюПоИННПроизводителя)
//
// Параметры:
// 	ТаблицаНоменклатуры   - ДанныеФормыКоллекция                - Таблица номенклатуры для заполнения колонки GTIN:
// 	 * ВидОбуви           - Перечисления.ВидыОбувиИСМП          - Вид обуви.
// 	 * СпособВводаВОборот - Перечисления.СпособыВводаВОборотСУЗ - Способ ввода в оборот.
// 	 * КодТНВЭД           - Строка                              - Код ТНВЭД будет взято первые два символа.
// 	 * GTIN               - Строка                              - Поле GTIN, значение которого требуется заполнить,
// 	                                                              если не заполнено.
// 	Организация - ОпределяемыйТип.Организация - Оранизация - владелец.
// Возвращаемое значение:
// 	Булево - Признак необходимости обновления ключа сессии.
Функция ЗаполнитьGTINМаркировкиОстатков(ТаблицаНоменклатуры, Организация) Экспорт
	
	ИНН = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
	
	НомерСтраницы = 0;
	ПовторятьИтерацию = Истина;
	
	СоответствиеСтрокПоиска = Новый Соответствие;
	
	Для Каждого СтрокаТовары Из ТаблицаНоменклатуры Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.GTIN)
			Или Не ЗначениеЗаполнено(СтрокаТовары.ВидОбуви)
			Или Не ЗначениеЗаполнено(СтрокаТовары.СпособВводаВОборот) Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаПоиска = СтрокаДляПоискаGTINМаркировкиОстатков(СтрокаТовары.ВидОбуви, СтрокаТовары.СпособВводаВОборот);
	
		МассивСтрокТоварыПоСоответствию  = СоответствиеСтрокПоиска[СтрокаПоиска];
	
		Если МассивСтрокТоварыПоСоответствию = Неопределено Тогда
			МассивСтрокТоварыПоСоответствию = Новый Массив;
			СоответствиеСтрокПоиска.Вставить(СтрокаПоиска, МассивСтрокТоварыПоСоответствию);
		КонецЕсли;
	
		МассивСтрокТоварыПоСоответствию.Добавить(СтрокаТовары);
	
	КонецЦикла;
	
	Пока СоответствиеСтрокПоиска.Количество() И ПовторятьИтерацию Цикл
	
		РезультатЗапроса = ИнтерфейсИСМП.НайтиПродукциюПоИННПроизводителя(ИНН, НомерСтраницы);
		НомерСтраницы = НомерСтраницы + 1;
		
		Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат Истина;
		ИначеЕсли РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
			Прервать;
		ИначеЕсли РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN.Количество() = 0 Тогда
			ПовторятьИтерацию = Ложь;
			Прервать;
		КонецЕсли;
		
		МассивКлючейДляУдаления = Новый Массив;
		
		Для Каждого КлючИЗначениеИсточник Из СоответствиеСтрокПоиска Цикл
			
			Для Каждого КлючИЗначение Из РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN Цикл
				
				ОписаниеПозиции = КлючИЗначение.Значение;
				Если КлючИЗначение.Значение <> Неопределено
					И НРег(ОписаниеПозиции.НаименованиеПолное) = НРег(КлючИЗначениеИсточник.Ключ) Тогда
					
					GTIN = "0" + КлючИЗначение.Ключ;
					
					Для каждого СтрокаТовары Из КлючИЗначениеИсточник.Значение Цикл
						СтрокаТовары.GTIN = GTIN;
					КонецЦикла;
					
					Прервать;
				
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЦикла;
		
		Для каждого СтрокаКлюч Из МассивКлючейДляУдаления Цикл
			СоответствиеСтрокПоиска.Удалить(СтрокаКлюч);
		КонецЦикла
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Конвертирует кож ТНВЭД в значение для передачаи в ИС МП
// 
// Параметры:
// 	Значение - Строка - Код ТНВЭД.
// Возвращаемое значение:
// 	Число - Конвертированное значение для передачи.
Функция КодТНВЭДДляПередачиВИСМП(Значение) Экспорт
	
	ОписаниеТипа = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0),,,);
	Возврат ОписаниеТипа.ПривестиЗначение(Лев(Значение, 2));
	
КонецФункции

#КонецОбласти

Функция ПодготовитьОчередьЗагрузкиКодовМаркировкиПоЗаказуНаЭмиссию(ПараметрыЗапроса, ЭлементОчереди, ЗагружатьДо, ПараметрыОбмена, НастройкаОбменаСУЗ) Экспорт
	
	Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Идентификатор     = Строка(Новый УникальныйИдентификатор);
	СообщениеJSON.ЗагружатьДо       = ЗагружатьДо;
	
	СообщениеJSON.Организация       = ЭлементОчереди.Организация;
	СообщениеJSON.Документ          = ЭлементОчереди.Документ;
	СообщениеJSON.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПолученияДанных(
		Операция);
	
	СообщениеJSON.ТекстСообщенияJSON  = Неопределено;
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Ложь;
	СообщениеJSON.СообщениеОснование  = ЭлементОчереди.Сообщение;
	СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
	
	СообщениеJSON.ВидПродукции              = ЭлементОчереди.ВидПродукции;
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
	СообщениеJSON.ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
	СообщениеJSON.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	
	СообщенияJSON = Новый Массив;
	СообщенияJSON.Добавить(СообщениеJSON);
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	ПодготовитьСообщенияКПередаче(
		СообщенияJSON, ПараметрыОбмена,
		"00000000-0000-0000-0000-000000000000");
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.ОчередьСообщений[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьКПередачеСообщениеНаЗакрытиеПодзаказаНаЭмиссиюКодовМаркировки(ЭлементОчередиОснование, ЗагружатьДо, ПараметрыЗапроса, ПараметрыОбмена, НастройкаОбменаСУЗ) Экспорт
	
	Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор);
	СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
	
	СообщениеJSON.Организация       = ЭлементОчередиОснование.Организация;
	СообщениеJSON.Документ          = ЭлементОчередиОснование.Документ;
	СообщениеJSON.ДокументОснование = ЭлементОчередиОснование.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПолученияДанных(
		Операция);
	
	СообщениеJSON.ТекстСообщенияJSON  = Неопределено;
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Ложь;
	СообщениеJSON.СообщениеОснование  = ЭлементОчередиОснование.Сообщение;
	СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
	
	СообщениеJSON.ВидПродукции              = ЭлементОчередиОснование.ВидПродукции;
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
	СообщениеJSON.ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
	СообщениеJSON.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	
	СообщенияJSON = Новый Массив;
	СообщенияJSON.Добавить(СообщениеJSON);
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	ПодготовитьСообщенияКПередаче(
		СообщенияJSON, ПараметрыОбмена,
		"00000000-0000-0000-0000-000000000000");
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.ОчередьСообщений[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗапроситьУстановитьКлючСессии(ТребуетсяЗапроситьУстановитьКлючСессии, ПодписанныеСообщенияПоОрганизациям) Экспорт

	Если ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ТребуетсяЗапроситьУстановитьКлючСессии Цикл
		
		Организация                   = КлючИЗначение.Ключ;
		ДанныеДляУстановкиКлючаСессии = КлючИЗначение.Значение;
		
		Для Каждого ЭлементДанных Из ДанныеДляУстановкиКлючаСессии Цикл
			
			РезультатЗапросаИУстановкиКлючаСессии = ИнтерфейсАвторизацииИСМПСлужебный.ЗапроситьУстановитьКлючСессии(
				ЭлементДанных.ПараметрыЗапроса,
				ЭлементДанных.ПараметрыАвторизации,
				ПодписьИзСвойствПодписи(ЭлементДанных.СвойстваПодписи));
			
			Если Не РезультатЗапросаИУстановкиКлючаСессии.КлючСессииУстановлен
				И ПодписанныеСообщенияПоОрганизациям <> Неопределено Тогда
				
				// Вывести сообщение об ошибке установке ключа сессии.
				// Дальнейший обмен по организации невозможен.
				Сообщения = ПодписанныеСообщенияПоОрганизациям[Организация];
				Для Каждого Сообщение Из Сообщения Цикл
					Сообщение.ТекстОшибки = РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыСеансаИС() Экспорт
	
	ПараметрыСеансаИС = Новый Структура;
	ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииИСМП", Неопределено);
	ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииМОТП", Неопределено);
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетОбувнойПродукцииИСМП") Тогда
		Попытка
			ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииИСМП", ПараметрыСеанса.ДанныеКлючаСессииИСМП);
		Исключение
			// Действие не требуется
		КонецПопытки;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП") Тогда
		Попытка
			ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииМОТП", ПараметрыСеанса.ДанныеКлючаСессииМОТП);
		Исключение
			// Действие не требуется
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПараметрыСеансаИС;
	
КонецФункции

Процедура ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС) Экспорт
	
	Если ПараметрыСеансаИС.ДанныеКлючаСессииИСМП <> Неопределено Тогда
		ПараметрыСеанса.ДанныеКлючаСессииИСМП = ПараметрыСеансаИС.ДанныеКлючаСессииИСМП;
	КонецЕсли;
	Если ПараметрыСеансаИС.ДанныеКлючаСессииМОТП <> Неопределено Тогда
		ПараметрыСеанса.ДанныеКлючаСессииМОТП = ПараметрыСеансаИС.ДанныеКлючаСессииМОТП;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыОбмена

Функция МаксимальноеКоличествоЗаказовВОчередиСУЗ()
	Возврат 100;
КонецФункции

Функция ПериодичностьЗапросаАктивныхЗаказовВСекундах()
	Возврат 60;
КонецФункции

#КонецОбласти

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив - Сообщения к передаче см. ИнтеграцияЕГАИС.СтруктураСообщенияXML().
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено)
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ДокументСсылка);
	ВозвращаемоеЗначение = МенеджерОбъекта.СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подготавливает сообщения к передаче в ВЕТИС.
//
// Параметры:
//  Сообщения       - Массив - содержит структуру сообщений, которые подготавливаются к передаче
//    (см. ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML).
//  ПараметрыОбмена - Структура, Неопределено - см. функцию ПараметрыОбмена().
Процедура ПодготовитьПодписанныеСообщенияКПередаче(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена)
	
	Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПодписанныеСообщенияПоОрганизациям Цикл
		
		СообщенияJSON = КлючИЗначение.Значение;
		
		ПодготовитьСообщенияКПередаче(СообщенияJSON, ПараметрыОбмена);
		
	КонецЦикла;
	
	ПодписанныеСообщенияПоОрганизациям = Неопределено;
	
КонецПроцедуры

// Подготавливает сообщения к передаче в ВЕТИС.
//
// Параметры:
//  Сообщения       - Массив - содержит структуру сообщений, которые подготавливаются к передаче
//    (см. ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML).
//  ПараметрыОбмена - Структура, Неопределено - см. функцию ПараметрыОбмена().
Процедура ПодготовитьСообщенияКПередаче(СообщенияXML, ПараметрыОбмена, ИдентификаторЗаявки = Неопределено)
	
	Если ТипЗнч(СообщенияXML) = Тип("Структура") Тогда
		КоллекцияСообщенийXML = Новый Массив;
		КоллекцияСообщенийXML.Добавить(СообщенияXML);
	Иначе
		КоллекцияСообщенийXML = СообщенияXML;
	КонецЕсли;
	
	Для Каждого Сообщение Из КоллекцияСообщенийXML Цикл
		
		Если ЗначениеЗаполнено(Сообщение.ИдентификаторЗаявки) Тогда
			ТекущийИдентификаторЗаявки = Сообщение.ИдентификаторЗаявки;
		Иначе
			ТекущийИдентификаторЗаявки = ИдентификаторЗаявки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			
			РеквизитыОчереди = Новый Структура;
			// Назначение сообщений: ИСМП, МОТП или СУЗ
			РеквизитыОчереди.Вставить("ВидПродукции",                 Сообщение.ВидПродукции);
			РеквизитыОчереди.Вставить("Операция",                     Сообщение.Операция);
			РеквизитыОчереди.Вставить("Назначение",                   Сообщение.Назначение);
			РеквизитыОчереди.Вставить("СтанцияУправленияЗаказами",    Сообщение.СтанцияУправленияЗаказами);
			
			// Источник
			РеквизитыОчереди.Вставить("Организация",                  Сообщение.Организация);
			РеквизитыОчереди.Вставить("Документ",                     Сообщение.Документ);
			РеквизитыОчереди.Вставить("ДокументОснование",            Сообщение.ДокументОснование);
			
			// Описание, протокол и очередь
			РеквизитыОчереди.Вставить("РеквизитыИсходящегоСообщения", Сообщение);
			РеквизитыОчереди.Вставить("ПротоколОбмена",               Неопределено);
			РеквизитыОчереди.Вставить("ЗагружатьПосле",               Сообщение.ЗагружатьПосле);
			РеквизитыОчереди.Вставить("ЗагружатьДо",                  Сообщение.ЗагружатьДо);
			РеквизитыОчереди.Вставить("ИдентификаторЗаявки",          ТекущийИдентификаторЗаявки);
			РеквизитыОчереди.Вставить("СообщениеОснование",           Сообщение.СообщениеОснование);
			
			Попытка
				
				Результат = ПодготовитьСообщениеКПередаче(
					Сообщение,
					РеквизитыОчереди);
				
				ТекстОшибки            = Результат.ТекстОшибки;
				ПодготовленоКПередаче  = Не ЗначениеЗаполнено(ТекстОшибки);
				ИсходящееСообщение     = Результат.ИсходящееСообщение;
				
			Исключение
				
				ТекстОшибки            = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПодготовленоКПередаче  = Ложь;
				ИсходящееСообщение     = Неопределено;
				
			КонецПопытки;
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ИС МП:
				           |%2'"),
				Сообщение.Описание,
				Сообщение.ТекстОшибки);
			ПодготовленоКПередаче = Ложь;
			ИсходящееСообщение    = Неопределено;
			
		КонецЕсли;
		
		Если ПодготовленоКПередаче Тогда
			
			ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
			
			ЭлементОчереди.ДатаСоздания       = ТекущаяДатаСеанса();
			ЭлементОчереди.Сообщение          = ИсходящееСообщение;
			ЭлементОчереди.СообщениеОснование = Сообщение.СообщениеОснование;
			
			ЭлементОчереди.Организация       = Сообщение.Организация;
			ЭлементОчереди.Документ          = Сообщение.Документ;
			ЭлементОчереди.ДокументОснование = Сообщение.ДокументОснование;
			
			ЭлементОчереди.ВидПродукции              = Сообщение.ВидПродукции;
			ЭлементОчереди.Операция                  = Сообщение.Операция;
			ЭлементОчереди.Назначение                = Сообщение.Назначение;
			ЭлементОчереди.СтанцияУправленияЗаказами = Сообщение.СтанцияУправленияЗаказами;
			
			ЭлементОчереди.РеквизитыИсходящегоСообщения = Сообщение;
			ЭлементОчереди.ПротоколОбмена               = Неопределено;
			ЭлементОчереди.ИдентификаторЗаявки          = ТекущийИдентификаторЗаявки;
			
			Если ЗначениеЗаполнено(Сообщение.ЗагружатьПосле) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1     = ИсходящееСообщение;
				НоваяЗависимость.Сообщение2     = Сообщение.ЗагружатьПосле;
				НоваяЗависимость.Загрузка       = Ложь;
				НоваяЗависимость.Передача       = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сообщение.ЗагружатьДо) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1     = Сообщение.ЗагружатьДо;
				НоваяЗависимость.Сообщение2     = ИсходящееСообщение;
				НоваяЗависимость.Загрузка       = Ложь;
				НоваяЗависимость.Передача       = Ложь;
			КонецЕсли;
			
		Иначе
			
			СтрокаРезультата = СтруктураИзменения();
			
			СтрокаРезультата.Операция                  = Сообщение.Операция;
			СтрокаРезультата.Назначение                = Сообщение.Назначение;
			СтрокаРезультата.СтанцияУправленияЗаказами = Сообщение.СтанцияУправленияЗаказами;
			
			СтрокаРезультата.Организация           = Сообщение.Организация;
			СтрокаРезультата.Объект                = Сообщение.Документ;
			СтрокаРезультата.ДокументОснование     = Сообщение.ДокументОснование;
			
			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Ложь;
			СтрокаРезультата.НовыйСтатус           = Неопределено;
			СтрокаРезультата.ОбъектИзменен         = Ложь;
			
			СтрокаРезультата.Сообщение                    = Сообщение.Идентификатор;
			СтрокаРезультата.ТекстСообщения               = "";
			СтрокаРезультата.ПредставлениеПротоколаОбмена = "";
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Выбран() Тогда
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(ЗаписьНабора.ИдентификаторЗаявки) Тогда
					
					ОтменитьТранзакцию();
					
					// Сообщение уже передано в ВетИС, но еще не обработано.
					ЭлементОчереди.ИдентификаторЗаявки = ЗаписьНабора.ИдентификаторЗаявки;
					Возврат;
					
				КонецЕсли;
			КонецЦикла;
			
			Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
					ПодготовитьСообщенияПоАбстрактнойАгрегацииИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
				ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки
					И Не ТребуетсяВыполнитьПолучениеGTINНаОстаткиПоДокументу(ЭлементОчереди, ПараметрыОбмена) Тогда
					УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
					УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
				Иначе
					ПередатьСообщениеИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
				КонецЕсли;
				
			ИначеЕсли ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
				
				НастройкаОбменаСУЗ = НастройкаОбменаСУЗ(ЭлементОчереди.СтанцияУправленияЗаказами, ПараметрыОбмена);
				Если НастройкаОбменаСУЗ = Неопределено Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не удалось определить активную станцию управления заказами (СУЗ)
						           |для документа %1 в ИС МП.'"),
						ЭлементОчереди.Документ);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
					ПередатьЗаказНаЭмиссиюКодовМаркировкиСУЗ(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НастройкаОбменаСУЗ);
				Иначе
					ПередатьОтчетСУЗ(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НастройкаОбменаСУЗ);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМП(СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди, Знач ЗагружатьДо, СообщенияJSON, ПараметрыОбмена) Экспорт
	
	Если СтрокаДереваВерхнегоУровня.Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаДереваВерхнегоУровня.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
		
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание;
		
		aggregationUnit = Новый Структура;
		aggregationUnit.Вставить("unitSerialNumber", ШтрихкодированиеИСМПКлиентСервер.SSCCАгрегата(СтрокаДереваВерхнегоУровня.Штрихкод));
		aggregationUnit.Вставить("aggregationType", "AGGREGATION");
		aggregationUnit.Вставить("sntins",          Новый Массив);
		
		aggregationUnits = Новый Массив;
		aggregationUnits.Добавить(aggregationUnit);
		Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
			Если ШтрихкодированиеИСМПКлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(СтрокаДерева.Штрихкод) Тогда
				aggregationUnit.sntins.Добавить(ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(СтрокаДерева.Штрихкод));
			Иначе
				aggregationUnit.sntins.Добавить(ШтрихкодированиеИСМПКлиентСервер.SSCCАгрегата(СтрокаДерева.Штрихкод));
			КонецЕсли;
		КонецЦикла;
		
		ТелоЗапросаСоздание = Новый Структура;
		ТелоЗапросаСоздание.Вставить("participantId",    ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаСоздание.Вставить("aggregationUnits", aggregationUnits);
		
	ИначеЕсли ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН = СтрокаДереваВерхнегоУровня.ИННВладельца Тогда
		
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение;
		
		КодУпаковки = ШтрихкодированиеИСМПКлиентСервер.SSCCАгрегата(СтрокаДереваВерхнегоУровня.Штрихкод);
		
		ТелоЗапросаУдаление = Новый Структура;
		ТелоЗапросаУдаление.Вставить("participantId",      ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаУдаление.Вставить("reaggregation_type", "REMOVING");
		ТелоЗапросаУдаление.Вставить("uitu",               КодУпаковки);
		ТелоЗапросаУдаление.Вставить("uit_uitu_list",      Новый Массив);
		
		ТелоЗапросаДобавление = Новый Структура;
		ТелоЗапросаДобавление.Вставить("participantId",      ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаДобавление.Вставить("reaggregation_type", "ADDING");
		ТелоЗапросаДобавление.Вставить("uitu",               КодУпаковки);
		ТелоЗапросаДобавление.Вставить("uit_uitu_list",      Новый Массив);
		
		РезультатЗапросаДанных = ИнтерфейсИСМП.ПараметрыМаркированнойПродукции(КодУпаковки);
		
		Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаДанных, ОбщийЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатЗапросаДанных.ТекстОшибки) Тогда
			ВызватьИсключение РезультатЗапросаДанных.ТекстОшибки;
		КонецЕсли;
		
		ВложенныеУпаковки = Новый Соответствие;
		Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
			
			КодМаркировки = СтрокаДерева.Штрихкод;
			
			ВложенныеУпаковки.Вставить(КодМаркировки, СтрокаДерева);
			
			ТребуетсяДобавление = (РезультатЗапросаДанных.ПараметрыКодаМаркировки.ВложенныеУпаковки[КодМаркировки] = Неопределено);
			Если ТребуетсяДобавление Тогда
				
				Если ШтрихкодированиеИСМПКлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки) Тогда
					КодМаркировкиДляПередачи = ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(КодМаркировки);
				Иначе
					КодМаркировкиДляПередачи = ШтрихкодированиеИСМПКлиентСервер.SSCCАгрегата(КодМаркировки);
				КонецЕсли;
				
				reaggregationUnit = Новый Структура;
				reaggregationUnit.Вставить("uit_uitu", КодМаркировкиДляПередачи);
				ТелоЗапросаДобавление.uit_uitu_list.Добавить(reaggregationUnit);
				
			КонецЕсли;
		
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из РезультатЗапросаДанных.ПараметрыКодаМаркировки.ВложенныеУпаковки Цикл
			
			КодМаркировки = КлючИЗначение.Ключ;
			
			ТребуетсяУдаление = (ВложенныеУпаковки[КодМаркировки] = Неопределено);
			Если ТребуетсяУдаление Тогда
				
				Если ШтрихкодированиеИСМПКлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки) Тогда
					КодМаркировкиДляПередачи = ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(КодМаркировки);
				Иначе
					КодМаркировкиДляПередачи = ШтрихкодированиеИСМПКлиентСервер.SSCCАгрегата(КодМаркировки);
				КонецЕсли;
				
				reaggregationUnit = Новый Структура;
				reaggregationUnit.Вставить("uit_uitu", КодМаркировкиДляПередачи);
				ТелоЗапросаУдаление.uit_uitu_list.Добавить(reaggregationUnit);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Упаковка %1 принадлежит ИНН %2'"),
			ШтрихкодированиеИСМПКлиентСервер.SSCCАгрегата(СтрокаДереваВерхнегоУровня.Штрихкод),
			СтрокаДереваВерхнегоУровня.ИННВладельца);
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
		
		СообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
		СообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
		СообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
		
		СообщениеJSON.Описание = СтрШаблон("%1 %2", ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция), СтрокаДереваВерхнегоУровня.Штрихкод);
		
		СообщениеJSON.ТекстСообщенияJSON  = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапросаСоздание, Истина);
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = Неопределено;
		СообщениеJSON.ТребуетсяПодписание = Истина;
		СообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
		СообщениеJSON.ПараметрыЗапроса    = Неопределено;
		
		СообщениеJSON.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
		СообщениеJSON.Операция     = Операция;
		СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение Тогда
		
		Если ТелоЗапросаДобавление <> Неопределено И ТелоЗапросаДобавление.uit_uitu_list.Количество() > 0 Тогда
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
			СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
			
			СообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
			СообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
			СообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
			
			СообщениеJSON.Описание = СтрШаблон("%1 %2 (добавление)", ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция), СтрокаДереваВерхнегоУровня.Штрихкод);
			
			СообщениеJSON.ТекстСообщенияJSON  = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапросаДобавление, Истина);
			СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.Версия              = Неопределено;
			СообщениеJSON.ТребуетсяПодписание = Истина;
			СообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
			СообщениеJSON.ПараметрыЗапроса    = Неопределено;
			
			СообщениеJSON.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
			СообщениеJSON.Операция     = Операция;
			СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЕсли;
		
		Если ТелоЗапросаУдаление <> Неопределено И ТелоЗапросаУдаление.uit_uitu_list.Количество() > 0 Тогда
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
			СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
			
			СообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
			СообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
			СообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
			
			СообщениеJSON.Описание = СтрШаблон("%1 %2 (изменение)", ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция), СтрокаДереваВерхнегоУровня.Штрихкод);
			
			СообщениеJSON.ТекстСообщенияJSON  = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапросаУдаление, Истина);
			СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.Версия              = Неопределено;
			СообщениеJSON.ТребуетсяПодписание = Истина;
			СообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
			СообщениеJSON.ПараметрыЗапроса    = Неопределено;
			
			СообщениеJSON.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
			СообщениеJSON.Операция     = Операция;
			СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если СообщениеJSON = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
		ЗагружатьПеред = СообщениеJSON.Идентификатор;
		ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМП(
			СтрокаДерева, ОбщийЭлементОчереди,
			ЗагружатьПеред, СообщенияJSON, ПараметрыОбмена);
	КонецЦикла;
	
КонецФункции

Процедура ЗагрузитьРезультатОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиДокумента");
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМП.СтатусОбработкиДокументаПоИдентификатору(ЭлементОчереди.ИдентификаторЗаявки);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния     = 408       // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния  = 403       // Ошибка авторизации
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния  = 429 Тогда // Слишком много запросов
		УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		Возврат;
	КонецЕсли;
	
	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 404
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект,
			"error_message")
		И СтрНайти(
			ВРег(РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект.error_message),
			ВРег("Requested entity was not found")) > 0 Тогда
		УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		Возврат;
	КонецЕсли;
	
	Если ЭлементОчереди.ТекущийСтатус = РезультатОбработкиЗаявки.Статус
		И ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
				
			Возврат;
			
		КонецЕсли;
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = РезультатОбработкиЗаявки.Статус;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена))
			
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиЗапросаНаGTINНаОстатки(ЭлементОчереди, ПараметрыОбмена)

	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиЗапросаНаGTINНаОстатки");

	РезультатОбработкиЗаявки = ИнтерфейсИСМП.СтатусОбработкиДокументаПоИдентификатору(ЭлементОчереди.ИдентификаторЗаявки);

	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния  = 408         // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		Возврат;
	КонецЕсли;

	Если ЭлементОчереди.ТекущийСтатус = РезультатОбработкиЗаявки.Статус
		И ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	РезультатОбработкиЗаявки.Статус = КонвертированныйОбщийСтатусДокумента(
			РезультатОбработкиЗаявки.Статус, ЭлементОчереди.Документ);
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();

	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;

	НачатьТранзакцию();

	Попытка

		Блокировка = Новый БлокировкаДанных;

		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;

		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");

		Блокировка.Заблокировать();

		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();

		Если Не НаборЗаписей.Выбран() Тогда

			ОтменитьТранзакцию();

			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);

			Возврат;

		КонецЕсли;

		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);

		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = РезультатОбработкиЗаявки.Статус;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;

		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);

		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);

		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда

			Если РезультатОбработкиЗаявки.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПGTINНаОстаткиПолучены Тогда

				Блокировка = Новый БлокировкаДанных;

				ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
				ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
					"Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ"));
				ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;

				ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				Блокировка.Заблокировать();

				ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();

				ЗаполнитьGTINМаркировкиОстатков(ДокументОбъект.Товары, ДокументОбъект.Организация);

				Если ДокументОбъект.Модифицированность() Тогда
					ДокументОбъект.Записать();
				КонецЕсли;

				ТребуетсяЗапросGTIN = Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ТребуетсяЗапросGTIN(ДокументОбъект);

				Если ТребуетсяЗапросGTIN Тогда
					РезультатОбработкиЗаявки.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'После операции описания остатков получены не все GTIN по документу %1.
						           |Сообщите описание проблемы по адресу support@crpt.ru
						           |Организация: %2'"),
						ЭлементОчереди.Документ,
						ЭлементОчереди.Организация);

					РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;

					ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
					ПараметрыОбновленияСтатуса.Статус            = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
					ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
					ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
					ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
					ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;

					НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
						ЭлементОчереди.Документ,
						РезультатОбработкиЗаявки.Операция,
						ПараметрыОбновленияСтатуса);

				КонецЕсли;

			КонецЕсли;

			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);

			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);

			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);

		Иначе

			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена))

		КонецЕсли;

		СтрокаРезультата = СтруктураИзменения();

		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;

		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;

		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;

		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;

		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);

		ТранзакцияЗафиксирована = Истина;

		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ТранзакцияЗафиксирована = Ложь;

		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);

		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);

		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;

		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);

	КонецПопытки;

	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда

		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

	ИначеЕсли Не ТранзакцияЗафиксирована Тогда

		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);

		Возврат;

	КонецЕсли;

	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);

КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиЗапросаЗаказНаЭмиссиюСУЗАбстрактнаяОперация(ЭлементОчереди, ПараметрыОбмена)

	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура         КАК Номенклатура,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика       КАК Характеристика,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN                 КАК GTIN,
		|	МАКСИМУМ(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА ПулКодовМаркировкиСУЗ.Характеристика ЕСТЬ NULL
		|				ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ)                                              КАК КоличествоКодыМаркировки
		|ИЗ
		|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ПО ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура  = ПулКодовМаркировкиСУЗ.Номенклатура
		|		И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика = ПулКодовМаркировкиСУЗ.Характеристика
		|		И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка         = ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию
		|		И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN           = ПулКодовМаркировкиСУЗ.GTIN
		|ГДЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(КоличествоКодыМаркировки)
		|ПО
		|	ОБЩИЕ";

	Запрос.УстановитьПараметр("Ссылка", ЭлементОчереди.Документ);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВыборкаОбщийИтог.Следующий();

	Если ВыборкаОбщийИтог.КоличествоКодыМаркировки = 0 Тогда
		Статус          = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
	ИначеЕсли ВыборкаОбщийИтог.КоличествоКодыМаркировки < ВыборкаОбщийИтог.Количество Тогда
		Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично;
	Иначе
		Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы;
	КонецЕсли;

	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);

	ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Статус;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;

	МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиЗаказаНаЭмиссиюКодовМаркировки,
		ПараметрыОбновленияСтатуса);

	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);

	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиОтчетОбИспользованииКМРасчетСтатуса(ЭлементОчереди, ПараметрыОбмена)

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	ИСМППрисоединенныеФайлы.Описание
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|	И ИСМППрисоединенныеФайлы.Версия     = &Версия
	|	И ИСМППрисоединенныеФайлы.Операция   = &Операция
	|	И ИСМППрисоединенныеФайлы.Документ   = &Документ";

	Запрос.УстановитьПараметр("Документ", ЭлементОчереди.Документ);
	Запрос.УстановитьПараметр("Операция", ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОперацияДокумента);
	Запрос.УстановитьПараметр("Версия",   ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);

	ВыборкаОшибок = Запрос.Выполнить().Выбрать();
	
	ЕстьОшибки  = Ложь;
	ЕстьУспешно = Ложь;
	
	Пока ВыборкаОшибок.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОшибок.Описание) Тогда
			ЕстьОшибки = Истина;
		Иначе
			ЕстьУспешно = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки И ЕстьУспешно Тогда
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	ИначеЕсли Не ЕстьОшибки Тогда
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	Иначе
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОшибкаПередачи;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
	КонецЕсли;
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);

	ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Статус;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;

	МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		ПараметрыОбновленияСтатуса);

	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);

	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)

	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	Описание        = "";
	Для Каждого СтрокаТЧ Из ЭлементОчереди.ПротоколОбмена Цикл
		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			Описание = ОписаниеОшибкиПоЗаказу(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
	Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
	Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
	Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
	Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
	Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
	Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
	Реквизиты.Вставить("Описание",             Описание);

	ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
	ДобавитьЗаписьВПротоколОбмена(
		ПротоколаОбменаXML,
		Реквизиты);

	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);

	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

КонецПроцедуры

// Компанует строку наименования - ключ для поиска в национальном каталоге GTIN для маркировки остатков обуви, используя
// переданные параметры.
//
// Параметры:
// 	ВидОбуви - Перечисления.ВидыОбувиИСМП - Вид обуви.
// 	СпособВводаВОборот - Перечисления.СпособыВводаВОборотСУЗ - Способ ввода в оборот.
// Возвращаемое значение:
// 	Строка - Итоговое наименование в каталоге.
//
Функция СтрокаДляПоискаGTINМаркировкиОстатков(ВидОбуви, СпособВводаВОборот)

	Если СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство") Тогда
		СпособВводаВОборотТекст = "Произведен в РФ";
	ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт") Тогда
		СпособВводаВОборотТекст = "Ввезен в РФ";
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Способ ввода в оборот %1 не поддерживается'"),
			СпособВводаВОборот);
	КонецЕсли;

	Возврат СтрШаблон(
		"Остатки. Обувь. %1. %2",
		ВидОбувиПредставлениеДляПоискаGTIN(ВидОбуви),
		СпособВводаВОборотТекст);

КонецФункции

Функция ВидОбувиПредставлениеДляПоискаGTIN(ВидОбуви)

	Если ВидОбуви = ПредопределенноеЗначение("Перечисление.ВидыОбувиИСМП.Мужская") Тогда
		Представление = "Мужская";
	ИначеЕсли ВидОбуви = ПредопределенноеЗначение("Перечисление.ВидыОбувиИСМП.Женская") Тогда
		Представление = "Женская";
	ИначеЕсли ВидОбуви = ПредопределенноеЗначение("Перечисление.ВидыОбувиИСМП.Детская") Тогда
		Представление = "Детская";
	ИначеЕсли ВидОбуви = ПредопределенноеЗначение("Перечисление.ВидыОбувиИСМП.Унисекс") Тогда
		Представление = "Унисекс";
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Вид обуви %1 не поддерживается'"),
			Представление);
	КонецЕсли;

	Возврат Представление;

КонецФункции

Процедура ЗагрузитьРезультатОбработкиОтчетаСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиДокумента");
	
	РезультатОбработкиЗаявки = ИнтерфейсСУЗ.СтатусОбработкиОтчета_V2(
		ЭлементОчереди.ИдентификаторЗаявки, ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ);
	
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния  = 408         // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		Возврат;
	КонецЕсли;
	
	Если ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			Если Не ЗначениеЗаполнено(Реквизиты.Описание)
				И РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
				Реквизиты.Описание = НСтр("ru = 'Ошибка обработки сообщения. Заявка отклонена.'");
			КонецЕсли;
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена))
			
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Функция ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена)
	
	Если Не ЗначениеЗаполнено(ЭлементОчереди.СообщениеОснование) Тогда
		Возврат ЭлементОчереди;
	Иначе
		Возврат ПараметрыОбмена.ОчередьСообщений.Найти(ЭлементОчереди.СообщениеОснование, "Сообщение");
	КонецЕсли;
	
КонецФункции

Функция ЗапроситьКодыМаркировкиИзБизнесЗаказа(ПараметрыЗапроса, ДанныеПула, ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Шапка.ВидПродукции                       КАК ВидПродукции,
		|	Шапка.СпособВводаВОборот                 КАК СпособВводаВОборот,
		|	ТабличнаяЧасть.Номенклатура              КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика            КАК Характеристика,
		|	ТабличнаяЧасть.GTIN                      КАК GTIN,
		|	ТабличнаяЧасть.Шаблон                    КАК Шаблон,
		|	ТабличнаяЧасть.ИдентификаторСтроки       КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.СпособВводаВОборот        КАК ТоварыСпособВводаВОборот,
		|	ТабличнаяЧасть.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена
		|ИЗ
		|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ТабличнаяЧасть
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
		|		ПО ТабличнаяЧасть.Ссылка = Шапка.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", ЭлементОчереди.Документ);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	МассивПолейИндекса = Новый Массив();
	МассивПолейИндекса.Добавить("GTIN");
	
	СтруктураПоискаСтрокиЗаказа = Новый Структура;
	СтруктураПоискаСтрокиЗаказа.Вставить("GTIN", ДанныеПула.GTIN);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыЗапроса, "ИдентификаторСтрокиЗаказа") Тогда
		МассивПолейИндекса.Добавить("ИдентификаторСтроки");
		СтруктураПоискаСтрокиЗаказа.Вставить("ИдентификаторСтроки", ПараметрыЗапроса.ИдентификаторСтрокиЗаказа);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыЗапроса, "Шаблон") Тогда
		МассивПолейИндекса.Добавить("Шаблон");
		СтруктураПоискаСтрокиЗаказа.Вставить("Шаблон", ПараметрыЗапроса.Шаблон);
	КонецЕсли;
	
	Товары.Индексы.Добавить(СтрСоединить(МассивПолейИндекса, ","));
	
	СтрокиЗаказа = Товары.НайтиСтроки(СтруктураПоискаСтрокиЗаказа);
	Если СтрокиЗаказа.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	СтрокаЗаказаНаЭмиссию = СтрокиЗаказа.Получить(0);
	
	Если ПараметрыОбмена.МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула > ДанныеПула.Остаток Тогда
		КоличествоЗагружаемыхКодов = ДанныеПула.Остаток;
	Иначе
		КоличествоЗагружаемыхКодов = ПараметрыОбмена.МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула;
	КонецЕсли;
	
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		РезультатЗапросаКодовМаркировки = ИнтерфейсСУЗ.ЗапроситьКодыМаркировкиИзБизнесЗаказа_V1(
			ПараметрыЗапроса, КоличествоЗагружаемыхКодов,
			НастройкаОбменаСУЗ);
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
		РезультатЗапросаКодовМаркировки = ИнтерфейсСУЗ.ЗапроситьКодыМаркировкиИзБизнесЗаказа_V2(
			ПараметрыЗапроса, КоличествоЗагружаемыхКодов, ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов,
			ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается'"),
			ЭлементОчереди.ФорматОбмена);
	КонецЕсли;
	
	ДобавитьВПротоколОбмена(
		ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		РезультатЗапросаКодовМаркировки);
	
	Если РезультатЗапросаКодовМаркировки.ДанныеБлока <> Неопределено Тогда
		
		НаборЗаписейПулКодовМаркировкиСУЗ = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
		НаборЗаписейПулКодовМаркировкиСУЗ.Отбор.ЗаказНаЭмиссию.Установить(ЭлементОчереди.Документ, Истина);
		НаборЗаписейПулКодовМаркировкиСУЗ.Отбор.ДокументОснование.Установить(ЭлементОчереди.ДокументОснование, Истина);
		
		Для Каждого ЗначениеШтрихкода Из РезультатЗапросаКодовМаркировки.ДанныеБлока.КодыМаркировки Цикл
			
			КодМаркировки = КодМаркировкиДляЗаписиВПул(ЗначениеШтрихкода);
			
			ЗаписьНабора = НаборЗаписейПулКодовМаркировкиСУЗ.Добавить();
			// Измерения
			ЗаписьНабора.ЗаказНаЭмиссию    = ЭлементОчереди.Документ;
			ЗаписьНабора.ДокументОснование = ЭлементОчереди.ДокументОснование;
			
			Если СтрокаЗаказаНаЭмиссию.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
				ЗаписьНабора.КодМаркировки = ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(КодМаркировки);
				ЗаписьНабора.ТипШтрихкода  = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
			ИначеЕсли СтрокаЗаказаНаЭмиссию.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
				ЗаписьНабора.КодМаркировки = ШтрихкодированиеМОТПКлиентСервер.НормализоватьКодМаркировки(КодМаркировки);
				Если СтрокаЗаказаНаЭмиссию.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек Тогда
					ЗаписьНабора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
				ИначеЕсли СтрокаЗаказаНаЭмиссию.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка Тогда
					ЗаписьНабора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
				Иначе
					ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
				КонецЕсли;
			Иначе
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
			КонецЕсли;
			// Ресурсы
			ЗаписьНабора.Статус                    = Перечисления.СтатусыКодовМаркировкиСУЗ.Сгенерирован;
			// Реквизиты
			ЗаписьНабора.Организация               = ЭлементОчереди.Организация;
			ЗаписьНабора.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
			
			ЗаписьНабора.Номенклатура              = СтрокаЗаказаНаЭмиссию.Номенклатура;
			ЗаписьНабора.Характеристика            = СтрокаЗаказаНаЭмиссию.Характеристика;
			
			ЗаписьНабора.ПолныйКодМаркировки       = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ЗначениеШтрихкода);
			ЗаписьНабора.GTIN                      = ДанныеПула.GTIN;
			ЗаписьНабора.ВидПродукции              = СтрокаЗаказаНаЭмиссию.ВидПродукции;
			Если СтрокаЗаказаНаЭмиссию.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
				ЗаписьНабора.МаксимальнаяРозничнаяЦена = СтрокаЗаказаНаЭмиссию.МаксимальнаяРозничнаяЦена;
			Иначе
				ЗаписьНабора.МаксимальнаяРозничнаяЦена = 0;
			КонецЕсли;
			
			МаркировкаОстатков = Ложь;
			СпособВводаВОборот    = Неопределено;
			Если СтрокаЗаказаНаЭмиссию.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
				Если СтрокаЗаказаНаЭмиссию.СпособВводаВОборот =
					Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
					СпособВводаВОборот    = СтрокаЗаказаНаЭмиссию.ТоварыСпособВводаВОборот;
					МаркировкаОстатков = Истина;
				Иначе
					СпособВводаВОборот = СтрокаЗаказаНаЭмиссию.СпособВводаВОборот;
				КонецЕсли;
			КонецЕсли;
			
			ЗаписьНабора.СпособВводаВОборот        = СпособВводаВОборот;
			ЗаписьНабора.Шаблон                    = СтрокаЗаказаНаЭмиссию.Шаблон;
			ЗаписьНабора.ДатаЭмиссииУниверсальная  = ТекущаяУниверсальнаяДата();
			ЗаписьНабора.ХешСуммаКодаМаркировки    = ИнтеграцияИС.ХешированиеДанныхSHA256(ЗаписьНабора.КодМаркировки);
			ЗаписьНабора.МаркировкаОстатков        = МаркировкаОстатков;
			
		КонецЦикла;
		
		НаборЗаписейПулКодовМаркировкиСУЗ.Записать(Ложь);
		
		ПараметрыКонтроля = ПараметрыОбмена.КонтрольАктивныхЗаказовПоСУЗ.Получить(ЭлементОчереди.СтанцияУправленияЗаказами);
		
		Если ПараметрыКонтроля <> Неопределено Тогда
			ПоискСтрокЗаказов = ПараметрыКонтроля.АктивныеЗаказыНаЭмиссию.НайтиСтроки(
				Новый Структура("ИдентификаторЗаказа", ПараметрыЗапроса.ИдентификаторБизнесЗаказа));
			Для Каждого СтрокаТаблицы Из ПоискСтрокЗаказов Цикл
				ПараметрыКонтроля.АктивныеЗаказыНаЭмиссию.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатЗапросаКодовМаркировки;
	
КонецФункции

Функция ЗапроситьСтатусПулаКодовМаркировкиПоСтрокеЗаказаИПолучитьКоды(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	РезультатОбработкиПула = Новый Структура;
	РезультатОбработкиПула.Вставить("ОбработкаПулаЗавершена");
	РезультатОбработкиПула.Вставить("ИдентификаторПоследнегоБлокаКодов");
	РезультатОбработкиПула.Вставить("ОбновитьИдентификаторЗаявкиСообщенияОчереди", Ложь);
	
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		Результат = ИнтерфейсСУЗ.СтатусПулаКодовМаркировкиИзБизнесЗаказа_V1(
			ПараметрыЗапроса,
			НастройкаОбменаСУЗ);
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
		Результат = ИнтерфейсСУЗ.СтатусПулаКодовМаркировкиИзБизнесЗаказа_V2(
			ПараметрыЗапроса, ЭлементОчереди.ВидПродукции,
			НастройкаОбменаСУЗ);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается'"),
			ЭлементОчереди.ФорматОбмена);
	КонецЕсли;
	
	ДанныеПула = Результат.ДанныеПула;
	
	Если ДанныеПула <> Неопределено Тогда
		
		ЭлементОчередиСообщенияОснования = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		
		ДобавлятьЗаписьВПротоколОбмена = Истина;
		КоличествоСтрокПротоколаОбмена = ЭлементОчередиСообщенияОснования.ПротоколОбмена.Количество();
		Если КоличествоСтрокПротоколаОбмена > 0 Тогда
			ПоследнийСтатусОбработки = ЭлементОчередиСообщенияОснования.ПротоколОбмена[КоличествоСтрокПротоколаОбмена - 1].СтатусОбработки;
			Если ПоследнийСтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается
				И Результат.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается Тогда
				ДобавлятьЗаписьВПротоколОбмена = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавлятьЗаписьВПротоколОбмена Тогда
			ДобавитьВПротоколОбмена(
				ЭлементОчередиСообщенияОснования,
				Результат);
			РезультатОбработкиПула.ОбновитьИдентификаторЗаявкиСообщенияОчереди = Истина;
		КонецЕсли;
		
		Если ДанныеПула.Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Готов Тогда
			
			РезультатЗапросаКодовМаркировки = ЗапроситьКодыМаркировкиИзБизнесЗаказа(
				ПараметрыЗапроса, ДанныеПула,
				ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
			
			Если ЗначениеЗаполнено(РезультатЗапросаКодовМаркировки.ТекстОшибки) Тогда
				ВызватьИсключение РезультатЗапросаКодовМаркировки.ТекстОшибки;
			Иначе
				РезультатОбработкиПула.ОбработкаПулаЗавершена = (ДанныеПула.Остаток - РезультатЗапросаКодовМаркировки.ДанныеБлока.КодыМаркировки.Количество()) <= 0;
				РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов = РезультатЗапросаКодовМаркировки.ДанныеБлока.ИдентификаторПоследнегоБлокаКодов;
			КонецЕсли;
			
			ЭлементОчереди.ТекущийСтатус                = ДанныеПула.Статус;
			ЭлементОчереди.ТекущийСтатусОбработки       = Результат.СтатусОбработки;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
		ИначеЕсли ДанныеПула.Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Обрабатывается Тогда
			
			// Требуется ожидание
			Если ЭлементОчереди.ТекущийСтатус = ДанныеПула.Статус
				И ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки Тогда
				// Если с момента последнего изменения статуса прошло более 5 минут,
				// то отложим обработку элемента очереди до следующей попытки обмена.
				Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
					И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
					ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
				Иначе
					УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
				КонецЕсли;
			Иначе
				
				ЭлементОчереди.ТекущийСтатус                = ДанныеПула.Статус;
				ЭлементОчереди.ТекущийСтатусОбработки       = Результат.СтатусОбработки;
				ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
				
			КонецЕсли;
			
			РезультатОбработкиПула.ОбработкаПулаЗавершена = Ложь;
			
		ИначеЕсли ДанныеПула.Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Закрыт Тогда
			
			// Элемент очереди отработан
			РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
			
			ЭлементОчереди.ТекущийСтатус                = ДанныеПула.Статус;
			ЭлементОчереди.ТекущийСтатусОбработки       = Результат.СтатусОбработки;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
		ИначеЕсли ДанныеПула.Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Ошибка
			Или ДанныеПула.Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Отклонен Тогда
			
			// Элемент очереди отработан
			РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
			
			ЭлементОчереди.ТекущийСтатус                = ДанныеПула.Статус;
			ЭлементОчереди.ТекущийСтатусОбработки       = Результат.СтатусОбработки;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
		КонецЕсли;
		
	ИначеЕсли Результат.РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
		
		// Элемент очереди отработан
		РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
		
	Иначе
		
		ВызватьИсключение Результат.ТекстОшибки;
		
	КонецЕсли;
	
	Возврат РезультатОбработкиПула;
	
КонецФункции

Процедура ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиИСМП(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировки");
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМП.СтатусОбработкиЗаказаКодовМаркировкиПоИдентификатору(ЭлементОчереди.ИдентификаторЗаявки);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния  = 408         // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		Возврат;
	КонецЕсли;
	
	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект,
		"error_code")
		И РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект.error_code = 412102 Тогда
		УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		Возврат;
	КонецЕсли;
	
	СтатусыЗаказов = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП;
	Если ЭлементОчереди.ТекущийСтатус = РезультатОбработкиЗаявки.Статус
		И ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		ИначеЕсли РезультатОбработкиЗаявки.Статус = СтатусыЗаказов.ИСМПНаРассмотренииОператором
			Или РезультатОбработкиЗаявки.Статус = СтатусыЗаказов.КОплате Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПолноеИмя = ЭлементОчереди.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = РезультатОбработкиЗаявки.Статус;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
	
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
		КонецЕсли;
		
		Если РезультатОбработкиЗаявки.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКПроизводству
			Или РезультатОбработкиЗаявки.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично Тогда
			
			ТребуетсяЗапроситьКоды = Истина;
			Если РезультатОбработкиЗаявки.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично Тогда
				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки
				|ИЗ
				|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
				|ГДЕ
				|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &ЗаказНаЭмиссию");
				Запрос.УстановитьПараметр("ЗаказНаЭмиссию", ЭлементОчереди.Документ);
				ТребуетсяЗапроситьКоды = Не Запрос.Выполнить().Пустой();
			КонецЕсли;
			
			Объект = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект;
			Если Объект <> Неопределено И ТребуетсяЗапроситьКоды Тогда
				
				ЗагружатьДо = ЭлементОчереди.Сообщение;
				
				document_information = Объект.document_information;
				Для Каждого ЭлементДанных Из document_information.products_information Цикл
					
					ПараметрыЗапроса = Новый Структура;
					ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", ЭлементОчереди.ИдентификаторЗаявки);
					ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", ЭлементДанных.order_line_id);
					ПараметрыЗапроса.Вставить("GTIN",                      ЭлементДанных.gtin);
					
					НовыйЭлементОчереди = ПодготовитьОчередьЗагрузкиКодовМаркировкиПоЗаказуНаЭмиссию(
						ПараметрыЗапроса,
						ЭлементОчереди, ЗагружатьДо, ПараметрыОбмена, НастройкаОбменаСУЗ);
					
					Если НовыйЭлементОчереди <> Неопределено Тогда
						
						// Коды маркировки загружаются строго последовательно.
						ЗагружатьДо = НовыйЭлементОчереди.Сообщение;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		СтрокаРезультата.Организация               = ЭлементОчереди.Организация;
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен     = Ложь;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура УстановитьДатуСледующейИтерации(ЭлементОчереди, Инкремент = 1)
	
	Если Инкремент > 0 Тогда
		ЭлементОчереди.КоличествоИтераций = ЭлементОчереди.КоличествоИтераций + Инкремент;
	Иначе
		ЭлементОчереди.КоличествоИтераций = 1;
	КонецЕсли;
	
	ЭлементОчереди.ДатаСледующейИтерации = ТекущаяДатаСеанса() + ВремяОжидания(ЭлементОчереди.КоличествоИтераций);
	
КонецПроцедуры

Процедура ЗагрузитьКодыМаркировки(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьКодыМаркировки");
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	РезультатОбработкиПула = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.СообщениеОснование;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписейОснования.Выбран()
			Или Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		РезультатОбработкиПула = ЗапроситьСтатусПулаКодовМаркировкиПоСтрокеЗаказаИПолучитьКоды(
			ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		
		Если РезультатОбработкиПула.ОбновитьИдентификаторЗаявкиСообщенияОчереди Тогда
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписейОснования,,,
				Новый ХранилищеЗначения(ЭлементОчередиОснование.ПротоколОбмена));
		КонецЕсли;
		
		ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			НаборЗаписей,,,,
			РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов);
		
		Если РезультатОбработкиПула.ОбработкаПулаЗавершена Тогда
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
				
				Если ЭлементОчереди.ТекущийСтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда

					ПараметрыЗапроса = Новый Структура;
					ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ИдентификаторБизнесЗаказа);
					ПараметрыЗапроса.Вставить("GTIN",                              ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.GTIN);
					ПараметрыЗапроса.Вставить("ИдентификаторПоследнегоБлокаКодов", РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов);

					ПодготовитьКПередачеСообщениеНаЗакрытиеПодзаказаНаЭмиссиюКодовМаркировки(
						ЭлементОчередиОснование, ЭлементОчередиОснование.Сообщение, ПараметрыЗапроса, ПараметрыОбмена, НастройкаОбменаСУЗ);

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			"");
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если (РезультатОбработкиПула <> Неопределено
		И РезультатОбработкиПула.ОбработкаПулаЗавершена)
		И ТранзакцияЗафиксирована Тогда
		
		ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов = РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов;
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Функция ОписаниеОшибкиПоЗаказу(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)

	Результат = ИнтерфейсСУЗ.СтатусыБизнесЗаказов_V2(ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ);

	Если Результат.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Текст ошибки: %2'"),
						Результат.ТекстОшибки);
	КонецЕсли;

	ТекстОшибки = "";
	Для Каждого СтрокаЗаказа Из Результат.РезультатОтправкиЗапроса.Объект.orderinfos Цикл
		Если ЭлементОчереди.ИдентификаторЗаявки = СтрокаЗаказа.orderId Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗаказа.orderStatus) Тогда
				СтатусПула = ИнтерфейсСУЗСлужебный.СтатусБизнесЗаказа(СтрокаЗаказа.orderStatus);
				Если СтатусПула = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Готов Тогда
					Для Каждого СтрокGTIN Из СтрокаЗаказа.buffers Цикл
						ТекстОшибки = СокрЛП(ТекстОшибки + Символы.ПС + СтрокGTIN.rejectionReason);
					КонецЦикла;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			ТекстОшибки = СтрокаЗаказа.declineReason;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ТекстОшибки;

КонецФункции

Процедура ЗагрузитьРезультатОбработкиАгрегации(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатАгрегации");
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМП.СтатусОбработкиДокументаПоИдентификатору(ЭлементОчереди.ИдентификаторЗаявки);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния  = 408         // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		Возврат;
	КонецЕсли;
	
	Если ЭлементОчереди.ТекущийСтатус = РезультатОбработкиЗаявки.Статус
		И ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ЭлементОчередиАбстрактнаяАгрегация = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиАбстрактнаяАгрегация.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиАбстрактнаяАгрегация, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиАбстрактнаяАгрегация,
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
			ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.Статус            = РезультатОбработкиЗаявки.Статус;
			ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
			ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
			ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ЭлементОчереди.Документ,
				Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
				ПараметрыОбновленияСтатуса);
			
			СтрокаРезультата = СтруктураИзменения();
			СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
			СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
			СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
			
			СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
			СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
			СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
			
			СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Истина;
			СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
			СтрокаРезультата.ОбъектИзменен         = Ложь;
			
			СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
			СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
			Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			Иначе
				Для Каждого ЭлементОчередиКУдалению Из ПараметрыОбмена.ОчередьСообщений Цикл
					Если ЭлементОчередиКУдалению.Сообщение = ЭлементОчереди.Сообщение
						Или ЭлементОчередиКУдалению.СообщениеОснование = ЭлементОчереди.СообщениеОснование Тогда
						УдалитьСообщениеИзОчереди(ЭлементОчередиКУдалению, ПараметрыОбмена);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			НаборЗаписей,,,
			Новый ХранилищеЗначения(ЭлементОчередиАбстрактнаяАгрегация.ПротоколОбмена));
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки агрегации по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки агрегации по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		Иначе
			Для Каждого ЭлементОчередиКУдалению Из ПараметрыОбмена.ОчередьСообщений Цикл
				Если ЭлементОчередиКУдалению.Сообщение = ЭлементОчередиКУдалению.Сообщение
					Или ЭлементОчередиКУдалению.СообщениеОснование = ЭлементОчередиКУдалению.СообщениеОснование Тогда
					УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Функция ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки)
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда
		
		ПротоколОбмена = Новый ТаблицаЗначений;
		ПротоколОбмена.Колонки.Добавить("ДатаУниверсальная", Новый ОписаниеТипов("Дата"));
		ПротоколОбмена.Колонки.Добавить("Операция",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийИСМП"));
		ПротоколОбмена.Колонки.Добавить("СтатусОбработки",   Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП"));
		ПротоколОбмена.Колонки.Добавить("Запрос",            Новый ОписаниеТипов("Строка"));
		ПротоколОбмена.Колонки.Добавить("ЗапросЗаголовки",   Новый ОписаниеТипов("Строка"));
		ПротоколОбмена.Колонки.Добавить("ЗапросТело",        Новый ОписаниеТипов("Строка"));
		ПротоколОбмена.Колонки.Добавить("ОтветЗаголовки",    Новый ОписаниеТипов("Строка"));
		ПротоколОбмена.Колонки.Добавить("ОтветТело",         Новый ОписаниеТипов("Строка"));
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "Статус") Тогда
			ТипыСтатуса = Новый Массив;
			ТипыСтатуса.Добавить(ТипЗнч(ДанныеОбработки.Статус));
			ПротоколОбмена.Колонки.Добавить("Статус", Новый ОписаниеТипов(ТипыСтатуса));
		КонецЕсли;
		
		ЭлементОчереди.ПротоколОбмена = ПротоколОбмена;
		
	Иначе
		ПротоколОбмена = ЭлементОчереди.ПротоколОбмена;
	КонецЕсли;
	
	ДополнительныеПараметрыHTTP   = ДанныеОбработки.РезультатОтправкиЗапроса.ДополнительныеПараметры;
	ПараметрыОтправкиHTTPЗапросов = ДополнительныеПараметрыHTTP.ПараметрыОтправкиHTTPЗапросов;
	HTTPМетод                     = ДополнительныеПараметрыHTTP.HTTPМетод;
	HTTPЗапрос                    = ДополнительныеПараметрыHTTP.HTTPЗапрос;
	HTTPОтвет                     = ДополнительныеПараметрыHTTP.HTTPОтвет;
	
	ЗапросЗаголовки = Новый Массив;
	Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
		ЗапросЗаголовки.Добавить(
			СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
	КонецЦикла;
	
	ЗаписьПротокола = ПротоколОбмена.Добавить();
	ЗаписьПротокола.ДатаУниверсальная = ТекущаяУниверсальнаяДата();
	ЗаписьПротокола.Операция          = ДанныеОбработки.Операция;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗаписьПротокола, "Статус")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "Статус") Тогда
		ЗаписьПротокола.Статус = ДанныеОбработки.Статус;
	КонецЕсли;
	ЗаписьПротокола.СтатусОбработки   = ДанныеОбработки.СтатусОбработки;
	ЗаписьПротокола.Запрос            = ИнтеграцияИСМП.URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
	ЗаписьПротокола.ЗапросЗаголовки   = СтрСоединить(ЗапросЗаголовки, Символы.ПС);
	ЗаписьПротокола.ЗапросТело        = HTTPЗапрос.ПолучитьТелоКакСтроку();
	
	Если ДанныеОбработки.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ
		И ДанныеОбработки.ДанныеБлока <> Неопределено
		И ДанныеОбработки.ДанныеБлока.КодыМаркировки <> Неопределено Тогда
		
		КоличествоКодовВБлоке = ДанныеОбработки.ДанныеБлока.КодыМаркировки.Количество();
		
		Если КоличествоКодовВБлоке > 1 Тогда
			ПервыйКодМаркировки = СтрШаблон(
				НСтр("ru = '%1... (+ еще %2)'"),
				Лев(ДанныеОбработки.ДанныеБлока.КодыМаркировки[0], 21),
				КоличествоКодовВБлоке - 1);
		Иначе
			ПервыйКодМаркировки = СтрШаблон("%1...", Лев(ДанныеОбработки.ДанныеБлока.КодыМаркировки[0], 21));
		КонецЕсли;
		
		ЗаписьПротокола.ОтветЗаголовки = ЗаголовкиИзHTTPОтвета(HTTPОтвет);
		
		ЗаписьПротокола.ОтветТело = СтрШаблон(
			НСтр("ru = '{
			           |  %1
			           |}
			           |Коды маркировки записаны в пул. Количество: %2
			           |Идентификатор последнего блока кодов: %3'"),
			ПервыйКодМаркировки, КоличествоКодовВБлоке,
			ДанныеОбработки.ДанныеБлока.ИдентификаторПоследнегоБлокаКодов);
		
	ИначеЕсли HTTPОтвет <> Неопределено Тогда
		
		ЗаписьПротокола.ОтветЗаголовки = ЗаголовкиИзHTTPОтвета(HTTPОтвет);
		
		ЗаписьПротокола.ОтветТело = HTTPОтвет.ПолучитьТелоКакСтроку();
		
	Иначе
		ЗаписьПротокола.ОтветТело = ДанныеОбработки.ТекстОшибки;
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ИнтеграцияИСМП.ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод)
	                             + ИнтеграцияИСМП.ВывестиHTTPЗапросВЛог(HTTPОтвет,  Неопределено, Неопределено,, ДанныеОбработки.ТекстОшибки);
	
	Возврат ПредставлениеПротоколаОбмена;
	
КонецФункции

Процедура ПередатьСообщениеИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	СтанцияУправленияЗаказами = Неопределено;
	ФорматОбмена              = Неопределено;
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
		
		РезультатЗапроса = ИнтерфейсИСМП.ЗапроситьИдентификаторАктивногоСУЗ(ЭлементОчереди.Организация);
		Если РезультатЗапроса.Идентификатор <> Неопределено Тогда
			НастройкаОбменаПоОрганизации = ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере.Получить(ЭлементОчереди.Организация);
			Если НастройкаОбменаПоОрганизации <> Неопределено
				И НастройкаОбменаПоОрганизации.Идентификатор = РезультатЗапроса.Идентификатор Тогда
				НастройкаОбменаСУЗ        = НастройкаОбменаПоОрганизации;
				СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
				ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
			КонецЕсли;
		КонецЕсли;
		
		Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапроса, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось определить активную станцию управления заказами (СУЗ)
				           |по организации %1 в ИС МП.
				           |Текст ошибки: %2.'"),
				ЭлементОчереди.Организация,
				РезультатЗапроса.ТекстОшибки);
			ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
			Возврат;
		ИначеЕсли СтанцияУправленияЗаказами = Неопределено Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В сервисе ИС МП по организации %1 активная станция управления заказами (СУЗ) имеет идентификатор %2.
				           |В информационной базе не найдена настройка для подключения к СУЗ с идентификатором %2.'"),
				ЭлементОчереди.Организация,
				РезультатЗапроса.Идентификатор);
			ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	ДанныеОбработки = ИнтерфейсИСМП.СоздатьДокументПоСообщению(
		РеквизитыИсходящегоСообщения.Операция,
		РеквизитыИсходящегоСообщения.ТекстСообщенияJSON,
		ПодписьИзСвойствПодписи(РеквизитыИсходящегоСообщения.СвойстваПодписи));
	
	Если ТребуетсяОбновлениеКлючаСессии(ДанныеОбработки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
		ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		ДанныеОбработки);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
				ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,
				ДанныеОбработки.ИдентификаторЗаявки,
				СтанцияУправленияЗаказами,
				Новый ХранилищеЗначения(
					ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
			
			ЭлементОчереди.ИдентификаторЗаявки       = ДанныеОбработки.ИдентификаторЗаявки;
			ЭлементОчереди.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			ЭлементОчереди.ДатаСледующейИтерации     = ТекущаяДатаСеанса() + 5;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			
			Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ФорматОбмена",              ФорматОбмена);
				ДополнительныеПараметры.Вставить("СтанцияУправленияЗаказами", СтанцияУправленияЗаказами);
				ДополнительныеПараметры.Вставить("Назначение",                Перечисления.НазначениеСообщенийИСМП.ИСМП);
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
					ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки,
					ДополнительныеПараметры);
				
			Иначе
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки);
				
			КонецЕсли;
			
		Иначе
			
			НовыйСтатус = ДанныеОбработки.СтатусОбработки;
			
		КонецЕсли;
		
		РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято ИС МП:
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередатьЗаказНаЭмиссиюКодовМаркировкиСУЗ(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НастройкаОбменаСУЗ)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		ДанныеОбработки = ИнтерфейсСУЗ.СоздатьБизнесЗаказНаЭмиссиюКодовМаркировки_V1(
			РеквизитыИсходящегоСообщения.ТекстСообщенияJSON,
			НастройкаОбменаСУЗ);
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
		СвойстваПодписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			РеквизитыИсходящегоСообщения, "СвойстваПодписи");
		Подпись = ПодписьИзСвойствПодписи(СвойстваПодписи);
		ДанныеОбработки = ИнтерфейсСУЗ.СоздатьБизнесЗаказНаЭмиссиюКодовМаркировки_V2(
			РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди.ВидПродукции,
			НастройкаОбменаСУЗ, Подпись);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается'"),
			НастройкаОбменаСУЗ.ФорматОбмена);
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
		ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		ДанныеОбработки);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;

				Если ЭтоСообщениеОПревышенииМаксимальногоКоличестваАктивныхЗаказовСУЗ(ДанныеОбработки.ТекстОшибки) Тогда
					КонтрольКоличестваАктивныхЗаказовСУЗ(ПараметрыОбмена, ЭлементОчереди, НастройкаОбменаСУЗ);
					Возврат;
				КонецЕсли;

			КонецЕсли;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
				ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ЗагружатьДо = ЭлементОчереди.Сообщение;
			
			// Массив Из Структура - Параметры запроса:
			// * ИдентификаторБизнесЗаказа - Строка - Поле для заполнения идентификатора заказа
			// * ИдентификаторСтрокиЗаказа - Строка - Идентификатор строки заказа
			// * GTIN                      - Строка - GTIN
			Для Каждого ПараметрыЗапроса Из ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса Цикл
				
				ПараметрыЗапроса.ИдентификаторБизнесЗаказа = ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки;
				
				НовыйЭлементОчереди = ПодготовитьОчередьЗагрузкиКодовМаркировкиПоЗаказуНаЭмиссию(
					ПараметрыЗапроса,
					ЭлементОчереди, ЗагружатьДо, ПараметрыОбмена, НастройкаОбменаСУЗ);
				
				Если НовыйЭлементОчереди <> Неопределено Тогда
					
					// Коды маркировки загружаются строго последовательно.
					ЗагружатьДо = НовыйЭлементОчереди.Сообщение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,
				ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки,
				НастройкаОбменаСУЗ.СтанцияУправленияЗаказами,
				Новый ХранилищеЗначения(
					ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
			
			ЭлементОчереди.ИдентификаторЗаявки       = ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки;
			ЭлементОчереди.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
			ЭлементОчереди.ДатаСледующейИтерации     = ТекущаяДатаСеанса() + 5;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ФорматОбмена",              НастройкаОбменаСУЗ.ФорматОбмена);
			ДополнительныеПараметры.Вставить("СтанцияУправленияЗаказами", НастройкаОбменаСУЗ.СтанцияУправленияЗаказами);
			ДополнительныеПараметры.Вставить("Назначение",                Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами);
			
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
				ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки,
				ДополнительныеПараметры);
			
		Иначе
			
			НовыйСтатус = ДанныеОбработки.СтатусОбработки;
			
		КонецЕсли;
		
		РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято СУЗ:
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято СУЗ:
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоСообщениеОПревышенииМаксимальногоКоличестваАктивныхЗаказовСУЗ(ТекстСообщения)
	Возврат СтрНайти(ТекстСообщения, "Количество заказов в очереди не может превышать") > 0
		Или СтрНайти(ТекстСообщения, "Количество активных заказов не может превышать") > 0;
КонецФункции

// Включает контроль активных заказов СУЗ.
//
// Параметры:
// 	ПараметрыОбмена - (См. ИнтеграцияИСМП.ПараметрыОбмена) -
// 	ЭлементОчереди - Структура -
// 	НастройкаОбменаСУЗ - Структура -
Процедура КонтрольКоличестваАктивныхЗаказовСУЗ(ПараметрыОбмена, ЭлементОчереди, НастройкаОбменаСУЗ = Неопределено)

	СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
	ПараметрыАктивныхЗаказов = ПараметрыОбмена.КонтрольАктивныхЗаказовПоСУЗ.Получить(СтанцияУправленияЗаказами);

	Если ПараметрыАктивныхЗаказов = Неопределено Тогда
		ПараметрыАктивныхЗаказов = ИнтеграцияИСМП.НоваяСтруктураАктивныхЗаказовПоСУЗ();
		ПараметрыАктивныхЗаказов.НастройкаОбменаСУЗ  = НастройкаОбменаСУЗ;
		ПараметрыОбмена.КонтрольАктивныхЗаказовПоСУЗ.Вставить(СтанцияУправленияЗаказами, ПараметрыАктивныхЗаказов);
	КонецЕсли;

	Результат = ИнтерфейсСУЗ.СтатусыБизнесЗаказов_V2(
		ЭлементОчереди.ВидПродукции, ПараметрыАктивныхЗаказов.НастройкаОбменаСУЗ);

	Если Результат.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Сообщение по проверке активных заказов:
						             |Текст ошибки: %1'"),
						Результат.ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;

	ПараметрыАктивныхЗаказов.ДатаЗапросаАктивныхЗаказовНаЭмиссиюСУЗ = ТекущаяДата();
	ПараметрыАктивныхЗаказов.АктивныеЗаказыНаЭмиссию.Очистить();

	АктивныеЗаказы = Результат.РезультатОтправкиЗапроса.Объект.orderinfos;
	КоличествоАктивныхЗаказов = 0;

	Для каждого СтрокаЗаказа Из АктивныеЗаказы Цикл

		СтатусЗаказа = ИнтерфейсСУЗСлужебный.СтатусБизнесЗаказа(СтрокаЗаказа.orderStatus);
		Если СтатусЗаказа = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Выполнен
			Или СтатусЗаказа = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка Тогда
				Продолжить;
		КонецЕсли;

		КоличествоАктивныхЗаказов = КоличествоАктивныхЗаказов + 1;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторЗаявки",       СтрокаЗаказа.orderId);
		СтруктураПоиска.Вставить("СтанцияУправленияЗаказами", СтанцияУправленияЗаказами);
		ПоискСообщений = ПараметрыОбмена.ОчередьСообщений.НайтиСтроки(СтруктураПоиска);

		Если ПоискСообщений.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ПараметрыАктивныхЗаказов.АктивныеЗаказыНаЭмиссию.Добавить();
		НоваяСтрока.ИдентификаторЗаказа = СтрокаЗаказа.orderId;

	КонецЦикла;

	ДоступноеКоличествоЗаказовНаЭмиссиюСУЗ = МаксимальноеКоличествоЗаказовВОчередиСУЗ()
		- (КоличествоАктивныхЗаказов - ПараметрыАктивныхЗаказов.АктивныеЗаказыНаЭмиссию.Количество());

	ПараметрыАктивныхЗаказов.ДоступноеКоличествоЗаказовНаЭмиссиюСУЗ = Макс(ДоступноеКоличествоЗаказовНаЭмиссиюСУЗ, 0);

КонецПроцедуры

Процедура ПередатьОтчетСУЗ(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НастройкаОбменаСУЗ)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОбИспользованииКодовМаркировкиБизнесЗаказа_V1(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON,
				НастройкаОбменаСУЗ);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестная операция СУЗ %1'"),
				НастройкаОбменаСУЗ.Операция);
		КонецЕсли;
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОбИспользованииКодовМаркировки_V2(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди.ВидПродукции,
				НастройкаОбменаСУЗ);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОСписанииКодовМаркировки_V2(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди.ВидПродукции,
				НастройкаОбменаСУЗ);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Агрегация
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОбАгрегацииКодовМаркировки_V2(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди.ВидПродукции,
				НастройкаОбменаСУЗ);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестная операция СУЗ %1'"),
				НастройкаОбменаСУЗ.Операция);
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается'"),
			НастройкаОбменаСУЗ.ФорматОбмена);
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
		ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		ДанныеОбработки);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
				ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,
				ДанныеОбработки.ИдентификаторЗаявки,,
				Новый ХранилищеЗначения(
					ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
			
			ЭлементОчереди.ИдентификаторЗаявки       = ДанныеОбработки.ИдентификаторЗаявки;
			ЭлементОчереди.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
			ЭлементОчереди.ДатаСледующейИтерации     = ТекущаяДатаСеанса() + 5;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки);
			
		Иначе
			
			НовыйСтатус = ДанныеОбработки.СтатусОбработки;
			
		КонецЕсли;
		
		РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято СУЗ:
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято СУЗ:
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередатьСообщениеОЗакрытииПодзаказаНаЭмиссиюКодовМаркировкиСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ПередатьСообщениеОЗакрытииПодзаказаНаЭмиссиюКодовМаркировкиСУЗ");
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	ЭлементОчередиЗаказНаЭмиссию = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	Если ЭлементОчередиЗаказНаЭмиссию = Неопределено Тогда
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиЗаказНаЭмиссию.Сообщение;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчередиЗаказНаЭмиссию.Сообщение);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписейОснования.Выбран()
			Или Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		РезультатОбработкиЗаявки = ИнтерфейсСУЗ.ЗакрытьПодзаказПоGTIN_V2(
			ПараметрыЗапроса,
			ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиЗаказНаЭмиссию,
			РезультатОбработкиЗаявки);
		
		ЭлементОчереди.ТекущийСтатус                = Неопределено;
		ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
		ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		
		ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписейОснования,,,
				Новый ХранилищеЗначения(ЭлементОчередиЗаказНаЭмиссию.ПротоколОбмена));
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка Тогда
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = Неопределено;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При передаче закрытия подзаказа по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При передаче закрытия подзаказа по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст XML:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка)
		И ТранзакцияЗафиксирована Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиАбстрактнойАгрегации(ЭлементОчереди, ПараметрыОбмена)
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	Для Каждого СтрокаТЧ Из ЭлементОчереди.ПротоколОбмена Цикл
		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	
	ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Неопределено;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		ПараметрыОбновленияСтатуса);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
	Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
	Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
	Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
	Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
	Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
	Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
	Реквизиты.Вставить("Описание",             "");
	
	ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
	ДобавитьЗаписьВПротоколОбмена(
		ПротоколаОбменаXML,
		Реквизиты);
	
	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры

Процедура ПодготовитьСообщенияПоАбстрактнойАгрегацииИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	// Заполнение данных по маркируемым товарам
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(
		ЭлементОчереди.Документ, Неопределено, Перечисления.ВидыПродукцииИС.Обувная);
	ПараметрыСканирования.ЗапрашиватьСпособВводаВОборот = Ложь;
	
	РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(ЭлементОчереди.Документ, Неопределено, ПараметрыСканирования);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПолученияДанных.ЕстьОшибки Тогда
		ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
	КонецЕсли;
	
	СообщенияJSON = Новый Массив;
	Для Каждого СтрокаДерева Из РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
		ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМП(
			СтрокаДерева, ЭлементОчереди,
			ЭлементОчереди.Сообщение, СообщенияJSON, ПараметрыОбмена);
	КонецЦикла;
	
	// Если агрегация не требуется - завершить операцию
	Если СообщенияJSON.Количество() = 0 Тогда
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
		
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = "00000000-0000-0000-0000-000000000000";
	ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки = ИдентификаторЗаявки;
	
КонецПроцедуры

Функция ТребуетсяВыполнитьПолучениеGTINНаОстаткиПоДокументу(ЭлементОчереди, ПараметрыОбмена)

	Документ = ЭлементОчереди.Документ;

	Блокировка = Новый БлокировкаДанных;

	ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
	ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
		"Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ"));
	ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = Документ;

	ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

	ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");

	Блокировка.Заблокировать();

	Объект = Документ.ПолучитьОбъект();

	ТребуетсяОбновитьКлючСессии = ИнтеграцияИСМПСлужебный.ЗаполнитьGTINМаркировкиОстатков(
		Объект.Товары, Объект.Организация);

	Если ТребуетсяОбновитьКлючСессии Тогда
		Возврат Истина;
	КонецЕсли;

	Если Объект.Модифицированность() Тогда
		Объект.Записать();
	КонецЕсли;

	ТребуетсяВыполнитьПолучениеGTIN = Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ТребуетсяЗапросGTIN(Объект);

	Если ТребуетсяВыполнитьПолучениеGTIN Тогда

		ТекстТекстСообщения = СтрШаблон(
			НСтр("ru = 'Выполнен поиск GTIN осатков по документу %1. Остались не заполненные строки.
			    | Будет выполнена операция Описания остатков.'"),
			ЭлементОчереди.Документ);

		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
		Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
		Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
		Реквизиты.Вставить("СтатусОбработки",      ЭлементОчереди.ТекущийСтатусОбработки);
		Реквизиты.Вставить("Описание",             ТекстТекстСообщения);

		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
			ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
		ДобавитьЗаписьВПротоколОбмена(
			ПротоколаОбменаXML,
			Реквизиты);
	Иначе

		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус =
			Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПGTINНаОстаткиПолучены;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;

		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Документ);
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			Документ,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);

	КонецЕсли;


	Возврат ТребуетсяВыполнитьПолучениеGTIN;

КонецФункции

Процедура ОбновитьИдентификаторЗаявкиСообщенияОчереди(
	НаборЗаписей, ИдентификаторЗаявки = Неопределено, СтанцияУправленияЗаказами = Неопределено,
	ПротоколОбменаВХранилищеЗначения = Неопределено, ИдентификаторПоследнегоБлокаКодов = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если ИдентификаторЗаявки <> Неопределено
			И ЗаписьНабора.ИдентификаторЗаявки <> ИдентификаторЗаявки Тогда
			ЗаписьНабора.ИдентификаторЗаявки = ИдентификаторЗаявки;
			ЗаписьНабора.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ПротоколОбменаВХранилищеЗначения <> Неопределено Тогда
			ЗаписьНабора.ПротоколОбмена = ПротоколОбменаВХранилищеЗначения;
			ЗаписьНабора.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если СтанцияУправленияЗаказами <> Неопределено
			И ЗаписьНабора.СтанцияУправленияЗаказами <> СтанцияУправленияЗаказами Тогда
			ЗаписьНабора.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			ЗаписьНабора.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ИдентификаторПоследнегоБлокаКодов <> Неопределено
			И ЗаписьНабора.ИдентификаторПоследнегоБлокаКодов <> ИдентификаторПоследнегоБлокаКодов Тогда
			ЗаписьНабора.ИдентификаторПоследнегоБлокаКодов = ИдентификаторПоследнегоБлокаКодов;
			ЗаписьНабора.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена)
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение, Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиДокумент, ПараметрыОбмена)
	
	ЭлементОчереди = Неопределено;
	
	Если ТипЗнч(ЭлементОчередиДокумент) <> Тип("СтрокаТаблицыЗначений") Тогда
		Для Каждого СтрокаТЧ Из ПараметрыОбмена.ОчередьСообщений Цикл
			Если СтрокаТЧ.Документ = ЭлементОчередиДокумент Тогда
				ЭлементОчереди = СтрокаТЧ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлементОчереди = ЭлементОчередиДокумент;
	КонецЕсли;
	
	Если ЭлементОчереди = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение2", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	
КонецПроцедуры

// Подготавливает сообщение к передаче в сервис ВетИС.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст исходящего сообщения.
//  Реквизиты - Структура - Реквизиты передаваемого сообщения и свойства очереди, например:
//   * ТипСообщения - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция.
//   * Документ - ДокументСсылка - Документ.
//   * СообщениеОснование - СправочникСсылка.ВЕТИСПрисоединенныеФайлы - Сообщение-основание
//   * Описание - Строка - Описание сообщения.
//   * ИдентификаторЗапроса - Строка - Идентификатор запроса.
//   * ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаВЕТИС - Формат обмена.
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийВЕТИС - Статус обработки сообщения.
//   * Версия - Число - Номер версии.
//  РеквизитыОчереди - Неопределено, Структура - Параметры очереди сообщений ВетИС
//
// Возвращаемое значение:
//  Структура - результат подготовки сообщения к отправке с полями:
//    * НовыйСтатус
//    * ИсходящееСообщение
//    * ТекстОшибки
//    * ТребуетсяРасчетОчереди
//
Функция ПодготовитьСообщениеКПередаче(Сообщение, РеквизитыОчереди)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",        "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Не ЗначениеЗаполнено(Сообщение.Идентификатор) Тогда
			ИсходящееСообщение = Строка(Новый УникальныйИдентификатор);
		Иначе
			ИсходящееСообщение = Сообщение.Идентификатор;
		КонецЕсли;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
		
		Если РеквизитыОчереди <> Неопределено Тогда
			
			ДобавитьСообщениеВОчередьНаПередачуДанных(ИсходящееСообщение, РеквизитыОчереди);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сообщение.Документ) Тогда
			
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Сообщение.Документ);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПодготовкиКПередачеДанных(Сообщение.Документ, Сообщение.Операция);
			
		Иначе
			НовыйСтатус = Неопределено;
		КонецЕсли;
		
		ВозвращаемоеЗначение.НовыйСтатус = НовыйСтатус;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При подготовке к передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			Сообщение.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Добавить сообщение в регистра сведений ОчередьСообщенийИСМП.
//
// Параметры:
//  Сообщение - Справочник.ИСМППрисоединенныеФайлы - сообщение, которое добавляется в очередь.
//  Реквизиты - Структура                          - реквизиты очереди сообщений ИС МП.
//
Процедура ДобавитьСообщениеВОчередьНаПередачуДанных(Сообщение, Реквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьМенеджерЗаписи();
	НоваяЗапись.ДатаСоздания       = ТекущаяУниверсальнаяДата();
	НоваяЗапись.Сообщение          = Сообщение;
	НоваяЗапись.СообщениеОснование = Реквизиты.СообщениеОснование;
	
	// Назначение сообщений: ИСМП, МОТП или СУЗ
	НоваяЗапись.ВидПродукции              = Реквизиты.ВидПродукции;
	НоваяЗапись.Операция                  = Реквизиты.Операция;
	НоваяЗапись.Назначение                = Реквизиты.Назначение;
	НоваяЗапись.СтанцияУправленияЗаказами = Реквизиты.СтанцияУправленияЗаказами;
	
	// Источник
	НоваяЗапись.Организация       = Реквизиты.Организация;
	НоваяЗапись.Документ          = Реквизиты.Документ;
	НоваяЗапись.ДокументОснование = Реквизиты.ДокументОснование;
	
	// Описание, протокол и очередь
	НоваяЗапись.РеквизитыИсходящегоСообщения = Новый ХранилищеЗначения(Реквизиты.РеквизитыИсходящегоСообщения);
	НоваяЗапись.ПротоколОбмена               = Новый ХранилищеЗначения(Неопределено);
	НоваяЗапись.ЗагружатьПосле               = Реквизиты.ЗагружатьПосле;
	НоваяЗапись.ЗагружатьДо                  = Реквизиты.ЗагружатьДо;
	НоваяЗапись.ИдентификаторЗаявки          = Реквизиты.ИдентификаторЗаявки;
	
	НоваяЗапись.Записать();
	
КонецПроцедуры

Функция ТребуетсяОбновлениеКлючаСессии(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена)
	
	ТребуетсяОбновлениеКлючаСессии = РезультатыПередачиСообщения.ТребуетсяОбновлениеКлючаСессии;
	Если Не ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено Тогда
		ПараметрыОбмена.КОбновлениюКлючейСессии = Новый Соответствие;
	КонецЕсли;
	
	Если ПараметрыОбмена.КОбновлениюКлючейСессии[ЭлементОчереди.Организация] = Неопределено Тогда
		
		ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация);
		
		РезультатЗапроса = ИнтерфейсАвторизацииИСМПВызовСервера.ЗапроситьПараметрыАвторизации(ПараметрыЗапросаКлючаСессии);
		
		ПараметрыАвторизации = РезультатЗапроса.ПараметрыАвторизации;
		Если ПараметрыАвторизации = Неопределено Тогда
			
			ПриОтменеТранзакции(
				ЭлементОчереди, РезультатЗапроса.ТекстОшибки, ПараметрыОбмена);
			
		Иначе
			
			ПараметрыОбмена.КОбновлениюКлючейСессии.Вставить(
				ЭлементОчереди.Организация,
					Новый Структура(
						"ПараметрыЗапроса, ПараметрыАвторизации",
						ПараметрыЗапросаКлючаСессии,
						ПараметрыАвторизации));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена)
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки;
	ИначеЕсли ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки;
	КонецЕсли;
	
	Передано = Не ЗначениеЗаполнено(ТекстОшибки);
	
	ЭлементОчереди.ТекстОшибки = ТекстОшибки;
	
	СтрокаРезультата = СтруктураИзменения();
	
	СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
	СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
	СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
	
	СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
	СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;

	СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
	СтрокаРезультата.ПодготовленоКПередаче = Истина;
	СтрокаРезультата.Передано              = Передано;
	СтрокаРезультата.Принято               = Ложь;
	СтрокаРезультата.НовыйСтатус           = РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус;
	СтрокаРезультата.ОбъектИзменен         = Ложь;
	
	СтрокаРезультата.Сообщение                    = РезультатыПередачиСообщения.Сообщение;
	СтрокаРезультата.ТекстСообщения               = РезультатыПередачиСообщения.ТекстСообщения;
	СтрокаРезультата.ПредставлениеПротоколаОбмена = РезультатыПередачиСообщения.ПредставлениеПротоколаОбмена;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
	Если Не Передано Тогда
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена)
	
	СтрокаРезультата = СтруктураИзменения();
	
	СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
	СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
	СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
	
	СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
	СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
	СтрокаРезультата.ПодготовленоКПередаче = Ложь;
	СтрокаРезультата.Передано              = Ложь;
	СтрокаРезультата.Принято               = Истина;
	СтрокаРезультата.НовыйСтатус           = Неопределено;
	СтрокаРезультата.ОбъектИзменен         = Ложь;
	
	СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
	СтрокаРезультата.ТекстСообщения               = Неопределено;
	СтрокаРезультата.ПредставлениеПротоколаОбмена = Неопределено;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	
	СтрокаСтопЛист = ПараметрыОбмена.СтопЛист.Добавить();
	СтрокаСтопЛист.Организация = ЭлементОчереди.Организация;
	
КонецПроцедуры

Процедура ПроверитьКлючиСессии(СообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена)
	
	Если СообщенияПоОрганизациям = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СертификатыДляПодписанияНаСервере = Неопределено Тогда
		СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СообщенияПоОрганизациям Цикл
		
		Организация = КлючИЗначение.Ключ;
		Сообщения   = КлючИЗначение.Значение;
		
		Для Каждого Сообщение Из Сообщения Цикл
			
			Организация = Сообщение.Организация;
			Если Сообщение.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
				ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация);
			Иначе
				Продолжить;
			КонецЕсли;
			
			КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
				ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
			
			ТребуетсяОбновлениеКлючаСессии = (КлючСессии = Неопределено);
			Если ТребуетсяОбновлениеКлючаСессии Тогда
				
				Если ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено Тогда
					ПараметрыОбмена.КОбновлениюКлючейСессии = Новый Соответствие;
				КонецЕсли;
				
				Если ПараметрыОбмена.КОбновлениюКлючейСессии[Организация] = Неопределено Тогда
					
					РезультатЗапроса = ИнтерфейсАвторизацииИСМПВызовСервера.ЗапроситьПараметрыАвторизации(ПараметрыЗапросаКлючаСессии);
					
					ПараметрыАвторизации = РезультатЗапроса.ПараметрыАвторизации;
					Если ПараметрыАвторизации = Неопределено Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
						Продолжить;
					КонецЕсли;
					
					СтрокаСертификата = Неопределено;
					Если СертификатыДляПодписанияНаСервере <> Неопределено Тогда
						
						МенеджерКриптографии = СертификатыДляПодписанияНаСервере.МенеджерКриптографии;
						СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(
							Организация, "Организация");
						
					КонецЕсли;
					
					КлючСессииЗапрошенИУстановлен = Ложь;
					Если СтрокаСертификата <> Неопределено Тогда
						
						// Для авторизации требуется прикрепленная подпись
						ПараметрыCMS = ЭлектроннаяПодпись.ПараметрыCMS();
						ПараметрыCMS.Открепленная = Ложь;
						
						МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтрокаСертификата.Пароль;
						РезультатПодписания = ИнтерфейсАвторизацииИСМПСлужебный.Подписать(
							ПараметрыАвторизации.Данные,
							ПараметрыCMS,
							СтрокаСертификата.СертификатКриптографии,
							МенеджерКриптографии);
						
						Если РезультатПодписания.Успех Тогда
							
							РезультатЗапросаИУстановкиКлючаСессии = ИнтерфейсАвторизацииИСМПСлужебный.ЗапроситьУстановитьКлючСессии(
								ПараметрыЗапросаКлючаСессии,
								ПараметрыАвторизации,
								РезультатПодписания.Подпись);
							
							КлючСессииЗапрошенИУстановлен = РезультатЗапросаИУстановкиКлючаСессии.КлючСессииУстановлен;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не КлючСессииЗапрошенИУстановлен Тогда
						
						ПараметрыОбмена.КОбновлениюКлючейСессии.Вставить(
							Организация,
							Новый Структура(
								"ПараметрыЗапроса, ПараметрыАвторизации",
								ПараметрыЗапросаКлючаСессии,
								ПараметрыАвторизации));
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьОчередьСообщений(ПараметрыОбмена)
	
	СтруктураПоискаСтопЛист = Новый Структура("Организация");
	
	ПовторитьЦиклОбработкиСообщений  = Истина;
	
	МинимальноеКоличествоИтераций    = 0;
	МинимальнаяДатаСледующейОперации = Неопределено;
	
	Пока ПовторитьЦиклОбработкиСообщений Цикл
		
		ПовторитьЦиклОбработкиСообщений = Ложь;
		
		МинимальноеКоличествоИтераций    = 0;
		МинимальнаяДатаСледующейОперации = Неопределено;
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			СтруктураПоискаСтопЛист.Организация = ЭлементОчереди.Организация;
			
			Если ПараметрыОбмена.СтопЛист.НайтиСтроки(СтруктураПоискаСтопЛист).Количество() > 0 Тогда
				// При выполнении обмена по организации были ошибки. Пропустим сообщения.
				Продолжить;
			КонецЕсли;
			
			ДатаСледующейИтерации = Неопределено;
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ИдентификаторЗаявки) Тогда
				
				НайденныеЗависимости = Неопределено;
				Если СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
					
					ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена);
					
				ИначеЕсли НайденныеЗависимости <> Неопределено Тогда
					
					// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
					Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
						Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") = Неопределено Тогда
							ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				НайденныеЗависимости = Неопределено;
				Если СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
					
					Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
						
						Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
							
							НастройкаОбменаСУЗ = НастройкаОбменаСУЗ(ЭлементОчереди.СтанцияУправленияЗаказами, ПараметрыОбмена);
							Если НастройкаОбменаСУЗ = Неопределено Тогда
								ТекстОшибки = СтрШаблон(
									НСтр("ru = 'Не удалось определить активную станцию управления заказами (СУЗ)
									           |для документа %1 в ИС МП.'"),
									ЭлементОчереди.Документ);
								ВызватьИсключение ТекстОшибки;
							КонецЕсли;
							
							ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиИСМП(
								ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
							
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
							ЗагрузитьРезультатОбработкиЗапросаНаGTINНаОстатки(ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
							ЗагрузитьРезультатОбработкиАбстрактнойАгрегации(ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
							ЗагрузитьРезультатОбработкиАгрегации(ЭлементОчереди, ПараметрыОбмена);
						Иначе
							ЗагрузитьРезультатОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена);
						КонецЕсли;
						
					ИначеЕсли ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
						
						НастройкаОбменаСУЗ = НастройкаОбменаСУЗ(ЭлементОчереди.СтанцияУправленияЗаказами, ПараметрыОбмена);
						Если НастройкаОбменаСУЗ = Неопределено Тогда
							ТекстОшибки = СтрШаблон(
								НСтр("ru = 'Не удалось определить активную станцию управления заказами (СУЗ)
								           |для документа %1 в ИС МП.'"),
								ЭлементОчереди.Документ);
							ВызватьИсключение ТекстОшибки;
						КонецЕсли;
						
						Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
							// Фиктивная операция по изменению статуса и записи протокола обмена
							ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиСУЗ(
								ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса Тогда
							// Фиктивная операция для расчета статуса по нескольким сообщениями.
							ЗагрузитьРезультатОбработкиЗапросаЗаказНаЭмиссиюСУЗАбстрактнаяОперация(
								ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ Тогда
							ЗагрузитьКодыМаркировки(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ Тогда
							ПередатьСообщениеОЗакрытииПодзаказаНаЭмиссиюКодовМаркировкиСУЗ(
								ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса Тогда
							//Фиктивная операция для расчета статуса по нескольким сообщениями.
							ЗагрузитьРезультатОбработкиОтчетОбИспользованииКМРасчетСтатуса(
								ЭлементОчереди, ПараметрыОбмена);
						Иначе
							ЗагрузитьРезультатОбработкиОтчетаСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
						КонецЕсли;
						
					Иначе
						ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
					КонецЕсли;
					
				ИначеЕсли НайденныеЗависимости <> Неопределено Тогда
					
					// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
					Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
						Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") = Неопределено Тогда
							ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДатаСледующейИтерации <> Неопределено
				И (МинимальнаяДатаСледующейОперации = Неопределено Или МинимальнаяДатаСледующейОперации < ДатаСледующейИтерации) Тогда
				МинимальнаяДатаСледующейОперации = ДатаСледующейИтерации;
			КонецЕсли;
			
			Если ЭлементОчереди.КоличествоИтераций < МинимальноеКоличествоИтераций Тогда
				МинимальноеКоличествоИтераций = ЭлементОчереди.КоличествоИтераций;
			КонецЕсли;
			
		КонецЦикла;
		
		// Действия после основного цикла очереди.
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчереди) <> -1 Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
		
		Если МинимальнаяДатаСледующейОперации <> Неопределено
			И МинимальнаяДатаСледующейОперации < ТекущаяДатаСеанса() Тогда
			ПовторитьЦиклОбработкиСообщений = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МинимальнаяДатаСледующейОперации;
	
КонецФункции

Функция СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение); // Есть ли сообщения
	ПараметрыОтбора.Вставить("Загрузка",   Ложь);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОбновлениеКлючаСессии = Ложь;
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
		Если ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено Тогда
			ТребуетсяОбновлениеКлючаСессии = Ложь;
		Иначе
			ТребуетсяОбновлениеКлючаСессии = (ПараметрыОбмена.КОбновлениюКлючейСессии[ЭлементОчереди.Организация] <> Неопределено);
		КонецЕсли;
	Иначе
		ТребуетсяОбновлениеКлючаСессии = Ложь;
	КонецЕсли;
	
	Если ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяПодписание = Ложь;
	Если ПараметрыОбмена.СообщенияКПодписанию = Неопределено Тогда
		ТребуетсяПодписание = Ложь;
	Иначе
		ТребуетсяПодписание = (ПараметрыОбмена.СообщенияКПодписанию[ЭлементОчереди.Организация] <> Неопределено);
	КонецЕсли;

	Если ТребуетсяПодписание Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса());
	Если ТребуетсяОжидание Тогда
		
		ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	ПараметрыОтбора.Вставить("Передача",   Ложь);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОбновлениеКлючаСессии = Ложь;
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
		Если ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено Тогда
			ТребуетсяОбновлениеКлючаСессии = Ложь;
		Иначе
			ТребуетсяОбновлениеКлючаСессии = (ПараметрыОбмена.КОбновлениюКлючейСессии[ЭлементОчереди.Организация] <> Неопределено);
		КонецЕсли;
	Иначе
		ТребуетсяОбновлениеКлючаСессии = Ложь;
	КонецЕсли;
	
	Если ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ТребуетсяПодписание
		И Не ЭлементОчереди.РеквизитыИсходящегоСообщения.Свойство("СвойстваПодписи") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса());
	Если ТребуетсяОжидание Тогда
		
		ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда

		ПараметрыКонтроля = ПараметрыОбмена.КонтрольАктивныхЗаказовПоСУЗ.Получить(ЭлементОчереди.СтанцияУправленияЗаказами);

		Если ПараметрыКонтроля <> Неопределено Тогда

			ДатаСледующегоЗапроса = ПараметрыКонтроля.ДатаЗапросаАктивныхЗаказовНаЭмиссиюСУЗ + ПериодичностьЗапросаАктивныхЗаказовВСекундах();
			Если ТекущаяДата() >= ДатаСледующегоЗапроса Тогда
				КонтрольКоличестваАктивныхЗаказовСУЗ(ПараметрыОбмена, ЭлементОчереди);
			КонецЕсли;

			ТекущееКоличествоЗаказов = ПараметрыКонтроля.АктивныеЗаказыНаЭмиссию.Количество();

			Если ТекущееКоличествоЗаказов > ПараметрыКонтроля.ДоступноеКоличествоЗаказовНаЭмиссиюСУЗ Тогда
				Возврат Ложь;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Функция ДоступныеСертификаты(СообщенияПоОрганизациям, ДоступныеСертификаты = Неопределено)
	
	Если СообщенияПоОрганизациям = Неопределено Тогда
		Возврат ДоступныеСертификаты;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СообщенияПоОрганизациям Цикл
		
		Организация = КлючИЗначение.Ключ;
		
		Если ДоступныеСертификаты = Неопределено Тогда
			ДоступныеСертификаты = Новый Соответствие;
		КонецЕсли;
		
		СертификатыПользователяДляПодписиПоОрганизации = ДоступныеСертификаты[Организация];
		Если СертификатыПользователяДляПодписиПоОрганизации = Неопределено Тогда
			ДоступныеСертификаты.Вставить(
				Организация,
				ИнтеграцияГИСМВызовСервера.СертификатыПользователяДляПодписиПоОрганизации(Организация));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеСертификаты;
	
КонецФункции

Функция СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена)
	
	ПодписанныеСообщенияПоОрганизациям = Неопределено;
	
	Для Каждого СообщениеJSON Из СообщенияJSON Цикл
		
		ТребуетсяПодписание = СообщениеJSON.ТребуетсяПодписание И Не ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки);
		
		СтрокаСертификата = Неопределено;
		Если СертификатыДляПодписанияНаСервере <> Неопределено И ТребуетсяПодписание Тогда
			
			МенеджерКриптографии = СертификатыДляПодписанияНаСервере.МенеджерКриптографии;
			
			СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(
				СообщениеJSON.Организация,
				"Организация");
			
		КонецЕсли;
		
		Если (ТребуетсяПодписание
			И СтрокаСертификата <> Неопределено) Или Не ТребуетсяПодписание Тогда
			
			Если ТребуетсяПодписание Тогда
				
				// Для подписания документов требуется открепленная подпись
				ПараметрыCMS = ЭлектроннаяПодпись.ПараметрыCMS();
				ПараметрыCMS.Открепленная = Истина;
				
				МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтрокаСертификата.Пароль;
				РезультатПодписания = ИнтерфейсАвторизацииИСМПСлужебный.Подписать(
					СообщениеJSON.ТекстСообщенияJSON,
					ПараметрыCMS,
					СтрокаСертификата.СертификатКриптографии,
					МенеджерКриптографии);
				
				Если РезультатПодписания.Успех Тогда
					
					ТребуетсяПодписание = Ложь;
					
					СвойстваПодписи = Новый Структура;
					СвойстваПодписи.Вставить("Подпись", РезультатПодписания.Подпись);
					СообщениеJSON.Вставить("СвойстваПодписи", СвойстваПодписи);
					
					Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
						ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
					КонецЕсли;
					
					ПодписанныеСообщения = ПодписанныеСообщенияПоОрганизациям[СообщениеJSON.Организация];
					Если ПодписанныеСообщения = Неопределено Тогда
						ПодписанныеСообщенияПоОрганизациям.Вставить(СообщениеJSON.Организация, Новый Массив);
					КонецЕсли;
					
					ПодписанныеСообщенияПоОрганизациям[СообщениеJSON.Организация].Добавить(СообщениеJSON);
					
				КонецЕсли;
				
			Иначе
				
				Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
					ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
				КонецЕсли;
				
				ПодписанныеСообщения = ПодписанныеСообщенияПоОрганизациям[СообщениеJSON.Организация];
				Если ПодписанныеСообщения = Неопределено Тогда
					ПодписанныеСообщенияПоОрганизациям.Вставить(СообщениеJSON.Организация, Новый Массив);
				КонецЕсли;
				
				ПодписанныеСообщенияПоОрганизациям[СообщениеJSON.Организация].Добавить(СообщениеJSON);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяПодписание Тогда
			
			Если ПараметрыОбмена.СообщенияКПодписанию = Неопределено Тогда
				ПараметрыОбмена.СообщенияКПодписанию = Новый Соответствие;
			КонецЕсли;
			
			СообщенияКПодписанию = ПараметрыОбмена.СообщенияКПодписанию[СообщениеJSON.Организация];
			Если СообщенияКПодписанию = Неопределено Тогда
				ПараметрыОбмена.СообщенияКПодписанию.Вставить(СообщениеJSON.Организация, Новый Массив);
			КонецЕсли;
			
			ПараметрыОбмена.СообщенияКПодписанию[СообщениеJSON.Организация].Добавить(СообщениеJSON);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодписанныеСообщенияПоОрганизациям;
	
КонецФункции

Функция НастройкаОбменаСУЗ(СтанцияУправленияЗаказами, ПараметрыОбмена)
	
	НастройкаОбменаСУЗ = Неопределено;
	Для Каждого КлючИЗначение Из ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере Цикл
		НастройкаОбмена = КлючИЗначение.Значение;
		Если НастройкаОбмена.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами Тогда
			НастройкаОбменаСУЗ = НастройкаОбмена;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкаОбменаСУЗ;
	
КонецФункции

Функция ЗаголовкиИзHTTPОтвета(HTTPОтвет)
	
	ОтветЗаголовки = Новый Массив;
	
	ИгноруемыеЗаголовки = Новый Соответствие;
	ИгноруемыеЗаголовки.Вставить(ВРег("Set-Cookie"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Expires"),                Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Via"),                    Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Connection"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Proxy-Connection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Server"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Vary"),                   Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Frame-Options"),        Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Transfer-Encoding"),      Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Pragma"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Content-Type-Options"), Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-XSS-Protection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Cache-Control"),          Истина);
	
	Для Каждого КлючИЗначение Из HTTPОтвет.Заголовки Цикл
		Заголовок = КлючИЗначение.Ключ;
		Если ИгноруемыеЗаголовки[ВРег(Заголовок)] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОтветЗаголовки.Добавить(
			СтрШаблон("%1: %2", Заголовок, КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СтрСоединить(ОтветЗаголовки, Символы.ПС);
	
КонецФункции

Функция КодМаркировкиДляЗаписиВПул(ЗначениеШтрихкода)
	
	КодМаркировки = Неопределено;
	ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкода);
	Если ЧтениеШтрихкода.Результат <> Неопределено Тогда
		Если ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128")
			Или ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked") Тогда
			КодМаркировки = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Истина);
		КонецЕсли;
	Иначе
		КодМаркировки = СтрЗаменить(ЗначениеШтрихкода, Символ(29), "<GS>");
	КонецЕсли;
	
	Возврат КодМаркировки;
	
КонецФункции

Функция ПодписьИзСвойствПодписи(ВходящиеДанные) Экспорт

	Если ТипЗнч(ВходящиеДанные) = Тип("Строка") Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		СвойстваПодписи = ВходящиеДанные;
	КонецЕсли;

	Если ТипЗнч(СвойстваПодписи) = Тип("Структура") Тогда
		Подпись = СвойстваПодписи.Подпись;
	Иначе
		Подпись = "";
	КонецЕсли;

	Возврат Подпись;

КонецФункции

Функция КонвертированныйОбщийСтатусДокумента(ИсходныйСтатус, Документ)

	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Документ);
	Возврат МенеджерОбъекта.КонвертированныйОбщийСтатус(ИсходныйСтатус);

КонецФункции

#КонецОбласти