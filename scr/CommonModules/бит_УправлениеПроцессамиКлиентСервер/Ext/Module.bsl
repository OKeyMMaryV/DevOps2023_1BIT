#Область СлужебныйПрограммныйИнтерфейс

Функция ТипыЭлементовГрафическойСхемы() Экспорт
	
	// значения itemType
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(0, "Декорация");
	Результат.Вставить(1, "Линия");
	Результат.Вставить(2, "Старт");
	Результат.Вставить(3, "Завершение");
	Результат.Вставить(4, "Условие");
	Результат.Вставить(5, "Действие");
	Результат.Вставить(6, "Выбор варианта");
	Результат.Вставить(7, "Разделение");
	Результат.Вставить(8, "Слияние");
	Результат.Вставить(9, "Точка обработки");
	Результат.Вставить(10, "Вложенный бизнес-процесс");
	
	Возврат Результат;
	
КонецФункции

Функция ВидыЭлементовГрафическойСхемы() Экспорт
	
	// значения itemType
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(0, "Декорация");
	Результат.Вставить(1, "Линия");
	Результат.Вставить(2, ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Старт"));
	Результат.Вставить(3, ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Завершение"));
	Результат.Вставить(4, ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Условие"));
	Результат.Вставить(5, ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие"));
	Результат.Вставить(6, "Выбор варианта");
	Результат.Вставить(7, ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Разделение"));
	Результат.Вставить(8, ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Слияние"));
	Результат.Вставить(9, "Точка обработки");
	Результат.Вставить(10, ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс"));
	
	Возврат Результат;
	
КонецФункции

Функция ГрафическаяСхемаВXML(ГрафическаяСхема) Экспорт
	
	Результат = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Сериализатор.ЗаписатьXML(ЗаписьXML, ГрафическаяСхема, НазначениеТипаXML.Явное);
	
	Результат = ЗаписьXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ГрафическаяСхемаВDOM(ГрафическаяСхема) Экспорт
	
	Результат = Неопределено;
	
	XMLГрафическойСхемы = ГрафическаяСхемаВXML(ГрафическаяСхема);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLГрафическойСхемы);
	
	ПостроительDOM = Новый ПостроительDOM;
	
	Результат = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат Результат;
	
КонецФункции

Функция ГрафическаяСхемаИзXML(СтрокаXML) Экспорт
	
	Результат = Неопределено;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	
	Результат = Сериализатор.ПрочитатьXML(ЧтениеXML);
	
	Возврат Результат;
	
КонецФункции

Функция ГрафическаяСхемаИзDOM(ДокументDOM) Экспорт
	
	Результат = Неопределено;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьDOM = Новый ЗаписьDOM();
	ЗаписьDOM.Записать(ДокументDOM.ДочерниеУзлы[0] , ЗаписьXML);
	
	XMLГрафическойСхемы = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLГрафическойСхемы);
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	
	Результат = Сериализатор.ПрочитатьXML(ЧтениеXML);
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементПоЗначениюСвойства(ДокументDOM, ИмяСвойства, Значение) Экспорт
	
	Результат = Неопределено;
	
	СписокЭлементовDOM = ДокументDOM.ПолучитьЭлементыПоИмени(ИмяСвойства);
	
	Для Каждого Элемент Из СписокЭлементовDOM Цикл
		Если Элемент.ТекстовоеСодержимое = Значение Тогда
			Результат = Элемент.РодительскийУзел;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементыПоЗначениюСвойства(ДокументDOM, ИмяСвойства, Значение) Экспорт
	
	Результат = Новый Массив();
	
	СписокЭлементовDOM = ДокументDOM.ПолучитьЭлементыПоИмени(ИмяСвойства);
	
	Для Каждого Элемент Из СписокЭлементовDOM Цикл
		Если Элемент.ТекстовоеСодержимое = Значение Тогда
			Результат.Добавить(Элемент.РодительскийУзел);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСвойстваЭлемента(ЭлементDOM, ИмяСвойства) Экспорт
	
	СписокЭлементовDOM = ЭлементDOM.ПолучитьЭлементыПоИмени(ИмяСвойства);
	
	Если СписокЭлементовDOM.Количество() = 1 Тогда
		Возврат СписокЭлементовDOM[0].ТекстовоеСодержимое;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЗначениеСвойстваЭлемента(ЭлементDOM, ИмяСвойства, Значение) Экспорт
	
	СписокЭлементовDOM = ЭлементDOM.ПолучитьЭлементыПоИмени(ИмяСвойства);
	
	Если СписокЭлементовDOM.Количество() = 1 Тогда
		СписокЭлементовDOM[0].ТекстовоеСодержимое = Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция СвязиЭлементовГрафическойСхемы(ГрафическаяСхема) Экспорт

	ВходящиеТочки = Новый Соответствие(); 
	ИсходящиеТочки = Новый Соответствие(); 
	
	ДокументDOM = ГрафическаяСхемаВDOM(ГрафическаяСхема);
	СписокЭлементовDOM = ДокументDOM.ПолучитьЭлементыПоИмени("itemType");
	
	Для Каждого Элемент Из СписокЭлементовDOM Цикл
		
		ТипЭлемента = Число(Элемент.ТекстовоеСодержимое);
		Если НЕ (ТипЭлемента = 1) Тогда
			Продолжить;
		КонецЕсли;

		УзелТочкиМаршрута = Элемент.РодительскийУзел; // item
		РезультатВыполнения = Ложь;
		
		Если ТипЭлемента = 1 Тогда
			ВходящаяТочка = Число(ЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "connectFromItemId"));
			ИсходящаяТочка = Число(ЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "connectToItemId"));
		КонецЕсли; 

		Если ВходящаяТочка < 0 ИЛИ ИсходящаяТочка < 0 Тогда
			// Стрелка без начала или конца.
			Продолжить;	
		КонецЕсли; 
		
		Значение = ВходящиеТочки.Получить(ИсходящаяТочка);
		Если Значение = Неопределено Тогда
			Значение = Новый Соответствие(); 
		КонецЕсли;   
		Значение.Вставить(ВходящаяТочка);
		ВходящиеТочки.Вставить(ИсходящаяТочка,Значение);
		
		Значение = ИсходящиеТочки.Получить(ВходящаяТочка);
		Если Значение = Неопределено Тогда
			Значение = Новый Соответствие(); 
		КонецЕсли;   
		Значение.Вставить(ИсходящаяТочка);
		ИсходящиеТочки.Вставить(ВходящаяТочка, Значение);
	КонецЦикла;

	Возврат Новый Структура("ВходящиеТочки, ИсходящиеТочки", ВходящиеТочки, ИсходящиеТочки);

КонецФункции

// Выделяет элемент ДокументаDOM стандартным оформлением точки действия бизнес-процесса.
//
// Параметры:
//  Схема	- ГрафическаяСхема - схема бизнес-процесса.
//			- ДокументDOM 	   - ДокументDOM, полученный из Графической схемы бизнес-процесса. 
//  ИдентификаторТочки	 - Строка, Число - идентификатор точки в схеме.
//  passageState		 - Строка, Число - значение элемента оформления.
//
// Прмечение:
//	PassageState может принимать значения:
//	1. "0" - без оформления.
//	2. "1" - оформление: узор штриховка. Недоступно.
//	3. "2" - оформление: красная пунктирная линия. Активное действие.
//
Процедура ВыделитьЭлемент(Схема, ИдентификаторТочки, PassageState = "0") Экспорт

	Если ТипЗнч(PassageState) = Тип("Строка") Тогда
		Попытка
			Значение = Число(PassageState);
		Исключение
			Значение = 0;
		КонецПопытки; 
	КонецЕсли; 

	Если НЕ (Значение = 0 ИЛИ Значение = 1 ИЛИ Значение = 2) Тогда
		Значение = 0	
	КонецЕсли; 
	
	Если ТипЗнч(Схема) = Тип("ГрафическаяСхема") Тогда
		ДокументDOM = ГрафическаяСхемаВDOM(Схема);
	Иначе
		ДокументDOM = Схема;
	КонецЕсли; 
	
	УзелТочкиМаршрута = ЭлементПоЗначениюСвойства(ДокументDOM, "itemId", Строка(ИдентификаторТочки));
	
	Если УзелТочкиМаршрута = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	УстановитьЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "passageState", Строка(Значение));

	Если ТипЗнч(Схема) = Тип("ГрафическаяСхема") Тогда
		Схема = ГрафическаяСхемаИзDOM(ДокументDOM);
	КонецЕсли; 
	
КонецПроцедуры

// Выделяет элементы ДокументаDOM стандартным оформлением точки действия бизнес-процесса.
//
// Параметры:
//  Схема	- ГрафическаяСхема - схема бизнес-процесса.
//			- ДокументDOM 	   - ДокументDOM, полученный из Графической схемы бизнес-процесса. 
//  ТаблицаВиз - ТаблицаЗначений.
//
Процедура ВыделитьЭлементыПоТаблицеВиз(Схема, ТаблицаВиз) Экспорт
	
	ОформлениеЭлементов = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТаблицаВиз Цикл
	    Если СтрокаТаблицы.ВидТочки <> ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Решение) Тогда
			ВариантОформления = "1";
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение) И СтрокаТаблицы.Доступность Тогда
			ВариантОформления = "2";
		Иначе
			ВариантОформления = "0";
		КонецЕсли;
		
		ОформлениеЭлементов.Вставить(СтрокаТаблицы.ИдентификаторТочки, ВариантОформления);
	КонецЦикла;
	
	Если ОформлениеЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Схема) = Тип("ГрафическаяСхема") Тогда
		ДокументDOM = ГрафическаяСхемаВDOM(Схема);
	Иначе
		ДокументDOM = Схема;
	КонецЕсли; 
	
	Для каждого СтрокаОформления Из ОформлениеЭлементов Цикл
		УзелТочкиМаршрута = ЭлементПоЗначениюСвойства(ДокументDOM, "itemId", СтрокаОформления.Ключ);
		
		Если УзелТочкиМаршрута = Неопределено Тогда
			Продолжить;	
		КонецЕсли; 
		
		УстановитьЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "passageState", СтрокаОформления.Значение);
	КонецЦикла;

	Если ТипЗнч(Схема) = Тип("ГрафическаяСхема") Тогда
		Схема = ГрафическаяСхемаИзDOM(ДокументDOM);
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти