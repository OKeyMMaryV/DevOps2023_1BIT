
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыИФункцииРаботыСоСпискомОбъектовСистемыРегистровБухгалтерии

// Функция формирует список регистров бухгалтерии для выбора.
// 
// Параметры
//  Нет.
// 
// Возвращаемое значение:
//   СписокОбъектов - СписокЗначений.
// 
Функция СформироватьСписокРегистровБухгалтерииДляВыбора() Экспорт

	// Фильтр имен регимтров
	МассивИменОбъектов = Новый Массив;
	МассивИменОбъектов.Добавить("Хозрасчетный");
	МассивИменОбъектов.Добавить("Налоговый");
	МассивИменОбъектов.Добавить("бит_Бюджетирование");
	МассивИменОбъектов.Добавить("бит_Дополнительный_1");
	МассивИменОбъектов.Добавить("бит_Дополнительный_2");
	МассивИменОбъектов.Добавить("бит_Дополнительный_3");
	МассивИменОбъектов.Добавить("бит_Дополнительный_4");
		
	// Получаем массив объектов системы.	
	МассивОбъектов = бит_ПраваДоступа.ПолучитьМассивОбъектовСистемыПоВидуИМассивуИмен(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии, МассивИменОбъектов);
	
	СписокВыбора = Новый СписокЗначений;
	
	Для каждого ОбъектСистемы Из МассивОбъектов Цикл
	
		СписокВыбора.Добавить(ОбъектСистемы);
	
	КонецЦикла; 
	
	Возврат СписокВыбора;
	
КонецФункции // СформироватьСписокРегистровБухгалтерииДляВыбора()

#КонецОбласти

#Область ПроцедурыИФункцииПоЗаполнениюДанныхПоЗакрытию

// Процедура Выполняет заполнение таблицы "Закрытие" по настройке закрытия.
// 
// Параметры:
//  ТабличнаяЧастьЗакрытие - ТабличнаяЧасть.
//  СтруктураПараметров    - Структура.
//    						 Обязательные ключи: 
//    						 Организация 		- СправочникСсылка.Организации, СправочникСсылка.СценарииПланирования.
//    						 Дата        		- Дата.
//    						 НастройкаЗакрытия  - СправочникСсылка.бит_НастройкиЗакрытия.
//    						 КоличествоСубконто - Число.
//                 
Процедура ЗаполнитьДанныеЗакрытия(ТабличнаяЧастьЗакрытие, СтруктураПараметров) Экспорт
	
	Организация        = СтруктураПараметров.Организация;
	Дата               = СтруктураПараметров.Дата;
	НастройкаЗакрытия  = СтруктураПараметров.НастройкаЗакрытия;
	КоличествоСубконто = СтруктураПараметров.КоличествоСубконто;
	
	// Получаем таблицу отбора запроса источников.
	СтруктураПараметров.Вставить("ТаблицаОтбора", ПолучитьТаблицуОтбораЗапросаИсточника(СтруктураПараметров));
	
	Если Не ЗначениеЗаполнено(НастройкаЗакрытия) Тогда
		ТекстСообщения =  НСтр("ru = 'Не указана настройка закрытия, заполнение не возможно.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(НастройкаЗакрытия.ИменаРесурсов) Тогда
		ТекстСообщения =  НСтр("ru = 'В настройке закрытия не указаны имена ресурсов, заполнение не возможно.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);		
		Возврат;
	КонецЕсли; 
	
	НачГраница = НачалоМесяца(Дата);
	КонГраница = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
	
	Если Не ТабличнаяЧастьЗакрытие.Количество() = 0 Тогда
		ТабличнаяЧастьЗакрытие.Очистить();
	КонецЕсли;
		
	// Заполним данные по закрытию без распределения.
	ЗаполнитьДанныеЗакрытияБезРаспределения(ТабличнаяЧастьЗакрытие, СтруктураПараметров);
	
	// Заполним данные по закрытию с распределения.
	ЗаполнитьДанныеЗакрытияCРаспределением(ТабличнаяЧастьЗакрытие, СтруктураПараметров);
	
	ТекстСообщения =  НСтр("ru = 'Заполнение завершено.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры // ЗаполнитьДанныеЗакрытия()

#КонецОбласти

#Область ФункцииПоРаспределенияПоБазеАвторАртемКузнецов

// Функция РаспределитьПоБазе: РезультатЗапроса
// 	Выполняет распределение числовых данных из указанных полей пропорционально сумме из базы распределения.
// 	При необходимости предварительно нормирует базу распределения.
// 
// Параметры:
// 	ПарамДанныеРаспределения РезультатЗапроса (поля см. результат ПолучитьБазуРаспределенияРазвернуто),
// 							ТаблицаЗначений (поля те же),
// 							СправочникСсылка.НастройкаРаспределения.
// 						- Данные для распределения,  для случая справочника выполняется получение данных 
// 						  (обязательны параметры ДатаНач, ДатаКон, Организация).
// 	ПарамБазаРаспределения: РезультатЗапроса (поля см. результат ПолучитьБазуРаспределенияРазвернуто),
// 							ТаблицаЗначений (поля те же),
// 							СправочникСсылка.НастройкаРаспределения.
// 						- База распределения,  для случая справочника выполняется расчет базы 
// 						  (обязательны параметры ДатаНач, ДатаКон, Организация).
// 	ПарамНормировочнаяБаза: РезультатЗапроса (поля см. результат ПолучитьБазуРаспределенияРазвернуто),
// 							ТаблицаЗначений (поля те же),
// 							СправочникСсылка.НастройкаРаспределения.
// 						- Нормировочная база,  для случая справочника выполняется расчет базы 
// 						  (обязательны параметры ДатаНач, ДатаКон, Организация).
// 	ТабГруппировки: ТаблицаЗначений
// 				ПолеДанных: Строка.
// 				ПолеБазы: Строка.
// 				ПолеНормировки: Строка
// 						- Содержит наименования полей для нормирования и распределения по группам.
// 	ДатаНач: Дата
// 	ДатаКон: Дата
//  Организация: СправочникСсылка.Организации.
// 	ПоляДанныхДляРаспределения: Строка (по умолчанию "Сумма") - Список полей, разделенных запятыми, 
// 																данные из которых будут распределяться.
// 	МассивФильтрЭлементовДанных: Массив (СправочникСсылка.ЭлементыРаспределения) - Отбор элементов (групп), 
// 																				   для которых будуд получены данные для распределения
// 																		 		   используется только если тип 1 параметра - СправочникСсылка.НастройкаРаспределения.
// 	МассивФильтрЭлементовБазы: Массив (СправочникСсылка.ЭлементыРаспределения) - Отбор элементов (групп), 
// 																				 для которых будет расчитана база распределения
// 																		 		 используется только если тип 2 параметра - СправочникСсылка.НастройкаРаспределения.
// 	МассивФильтрЭлементовНормировки: Массив (СправочникСсылка.ЭлементыРаспределения) - Отбор элементов (групп), 
// 																					   для которых будет расчитана нормировочная база
// 																		 			   используется только если тип 3 параметра - СправочникСсылка.НастройкаРаспределения.
// 	ВключатьНераспределенныеДанные: Булево - если Истина, то в результат будут включены 
// 											 строки для которых рапределение не выполнено.
// 
// Колонки результата:
// 	Данные<имя поля данных> - Поля данных, тип каждого поля соответствует одноименному полю данных.
// 	База<имя поля базы> - Поля базы распределения, тип каждого поля соответствует одноименному полю базы распределения.
// 	<Имя поля для распределения>Распределения: Число - Результат распределения данных по соответствующему полю 
// 													   (Имена полей беруться из списка "ПоляДанныхДляРаспределения".
// 
Функция РаспределитьПоБазе(ПарамДанныеРаспределения, ПарамБазаРаспределения, ПарамНормировочнаяБаза=Неопределено, ПарамТабГруппировки=Неопределено, ДатаНач=неопределено,ДатаКон=неопределено, Организация=Неопределено, ПоляДанныхДляРаспределения = "Сумма", МассивФильтрЭлементовДанных = Неопределено, МассивФильтрЭлементовБазы = Неопределено, МассивФильтрЭлементовНормировки = Неопределено, ВключатьНераспределенныеДанные = ложь) Экспорт
	// Преобразуем переданный параметр в таблицу значения.
	Если ТипЗнч(ПарамДанныеРаспределения) = Тип("РезультатЗапроса") Тогда
		ТабДанныеРаспределения = ПарамДанныеРаспределения.Выгрузить();
	ИначеЕсли ТипЗнч(ПарамДанныеРаспределения) = Тип("ТаблицаЗначений") Тогда
		ТабДанныеРаспределения = ПарамДанныеРаспределения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Преобразуем переданный параметр в таблицу значения.
	Если ТипЗнч(ПарамБазаРаспределения) = Тип("РезультатЗапроса") Тогда
		ТабБазаРаспределения = ПарамБазаРаспределения.Выгрузить();
	ИначеЕсли ТипЗнч(ПарамБазаРаспределения) = Тип("ТаблицаЗначений") Тогда
		ТабБазаРаспределения = ПарамБазаРаспределения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверям корректность переданных параметров группировки.
	// Если указано только поле данных то оно будет использовано только для корректировки "копеечных" отклонений.
	Если ПарамТабГруппировки = Неопределено ИЛИ НЕ ТипЗнч(ПарамТабГруппировки)=Тип("ТаблицаЗначений") Тогда
		ТабГруппировки = Новый ТаблицаЗначений;
		ТабГруппировки.Колонки.Добавить("ПолеБазы",Новый ОписаниеТипов("Строка"));
		ТабГруппировки.Колонки.Добавить("ПолеДанных",Новый ОписаниеТипов("Строка"));
	ИначеЕсли ПарамТабГруппировки.Колонки.Найти("ПолеБазы") = Неопределено
		  ИЛИ ПарамТабГруппировки.Колонки.Найти("ПолеДанных") = Неопределено Тогда
		ТабГруппировки = Новый ТаблицаЗначений;
		ТабГруппировки.Колонки.Добавить("ПолеБазы",Новый ОписаниеТипов("Строка"));
		ТабГруппировки.Колонки.Добавить("ПолеДанных",Новый ОписаниеТипов("Строка"));
	Иначе
		ТабГруппировки = ПарамТабГруппировки.Скопировать();
		Для Инд=0 По ТабГруппировки.Количество()-1 Цикл
			Если Инд>=ТабГруппировки.Количество() Тогда
				Прервать;
			КонецЕсли;
			СтрокаТаб = ТабГруппировки[Инд];
			Если (ЗначениеЗаполнено(СтрокаТаб.ПолеБазы)
			   И ЗначениеЗаполнено(СтрокаТаб.ПолеДанных))
			 ИЛИ (НЕ ЗначениеЗаполнено(СтрокаТаб.ПолеБазы)
			   И ЗначениеЗаполнено(СтрокаТаб.ПолеДанных)) Тогда
				Продолжить;
			КонецЕсли;
			ТабГруппировки.Удалить(СтрокаТаб);
			Если Инд=ТабГруппировки.Количество() Тогда
				Прервать;
			КонецЕсли;
			Инд=Инд-1;
		КонецЦикла;
	КонецЕсли;
	
	// Если указана база нормировки, то выполняем нормирование базы рапределения.
	Если НЕ ПарамНормировочнаяБаза=Неопределено Тогда
		ВремБазаРаспределения = НормироватьБазуРаспределения(ТабБазаРаспределения,ПарамНормировочнаяБаза,ТабГруппировки,ДатаНач,ДатаКон,Организация,, МассивФильтрЭлементовНормировки);
		Если ТипЗнч(ВремБазаРаспределения) = Тип("РезультатЗапроса") Тогда
			ТабБазаРаспределения = ВремБазаРаспределения.Выгрузить();
		ИначеЕсли ТипЗнч(ВремБазаРаспределения) = Тип("ТаблицаЗначений") Тогда // Если была передана некорректная база нормировки, то мы получаем обратно базу распределения.
			ТабБазаРаспределения = ВремБазаРаспределения;
		КонецЕсли;
	КонецЕсли;
	
	// Считаем коэффициенты базы распределения с учетом группировки.
	ПоляДляРаспределения = бит_СтрокиКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляДанныхДляРаспределения);
	КолонкаЗнак = ТабБазаРаспределения.Колонки.Добавить("Sign", Новый ОписаниеТипов("Число"));
	Для каждого СтрокаБаза Из ТабБазаРаспределения Цикл
		
		Инд = 1;
		Для каждого ТекПоле Из ПоляДляРаспределения Цикл
			
			Если Инд = 1 Тогда
				
				СтрокаБаза.Sign = бит_ОбщегоНазначения.ЗнакЧисла(СтрокаБаза[ТекПоле]);
				
			КонецЕсли; 
			СтрокаБаза[ТекПоле] = бит_ОбщегоНазначения.МодульЧисла(СтрокаБаза[ТекПоле]);
			
			Инд =Инд +1; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	ВремБазаРаспределения = РассчитатьКоэффициентыБазыРаспределенияРазвернуто(ТабБазаРаспределения, ТабГруппировки.Скопировать(),,,,, ПоляДанныхДляРаспределения);
	
	ТабБазаРаспределения = ВремБазаРаспределения.Выгрузить();
	
	Для каждого СтрокаБаза Из ТабБазаРаспределения Цикл
		
		Для каждого ТекПоле Из ПоляДляРаспределения Цикл
			
			СтрокаБаза[ТекПоле] = СтрокаБаза.Sign*СтрокаБаза[ТекПоле];
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	КолонкаЗнак = ТабБазаРаспределения.Колонки.Найти("Sign");
	Если НЕ КолонкаЗнак = Неопределено Тогда
		
		ТабБазаРаспределения.Колонки.Удалить(ТабБазаРаспределения.Колонки.Индекс(КолонкаЗнак));
		
	КонецЕсли; 
	
	// Помещаем данные и базу распределения во временные таблицы.
	ТекстЗапроса = "ВЫБРАТЬ
	                      |	*
	                      |ПОМЕСТИТЬ Данные
	                      |ИЗ
	                      |	&Данные КАК Данные
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	*
	                      |ПОМЕСТИТЬ База
	                      |ИЗ
	                      |	&База КАК База
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ";
	// Добавляем колонки базы
	Для Каждого КолонкаБазы из ТабБазаРаспределения.Колонки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  |	База."+КолонкаБазы.Имя+" КАК База"+КолонкаБазы.Имя+",";
	КонецЦикла;
	// Добавляем колонки данных
	Для Каждого КолонкаДанных из ТабДанныеРаспределения.Колонки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  |	Данные."+КолонкаДанных.Имя+" КАК Данные"+КолонкаДанных.Имя+",";
	КонецЦикла;
	
	// Добавляем поля - расчета распределения, если выполнялась нормировка, то распределение выполняется с ее учетом
	// Если для данных не найдена соответствующая (с учетом группировки) база, 
	// то в результат попадают нераспределенные данные
	// Результат распределения округляется до 2-х знаков после запятой.
		
	// При распределении больших чисел порядка 10e+9 возникала ошибка SQL: Переполнение поля. 
	// Для исправления приводим коэффициент к числу 18.16.
	
	ШаблонТекстПоле = "
	             |ВЫБОР
                 |		КОГДА База.%Поле%Коэффициент%Норм% ЕСТЬ NULL
                 |			ТОГДА Данные.Сумма
                 |		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(Данные.%Поле%,0)*Выразить(База.%Поле%Коэффициент%Норм% КАК Число(18,16)) КАК Число(15,2))
                 |	КОНЕЦ КАК %Поле%Распределения,";
	
	
	Для Каждого Поле из ПоляДляРаспределения Цикл
		
		ТекстНорм = ?(ТабБазаРаспределения.Колонки.Найти(Поле+"КоэффициентНормированный")=Неопределено,"","Нормированный");
		ТекстПоле = ШаблонТекстПоле;
		ТекстПоле = СтрЗаменить(ТекстПоле, "%Поле%", Поле);
		ТекстПоле = СтрЗаменить(ТекстПоле, "%Норм%", ТекстНорм);
		
		ТекстЗапроса = ТекстЗапроса + ТекстПоле;
		
	КонецЦикла;
		
	ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1) + "
																|ИЗ
   		        		        								|	Данные КАК Данные
																| ЛЕВОЕ СОЕДИНЕНИЕ База КАК База
																| ПО 1=1";
	// Соединяем данные и базу по полям группировки
	// в простейшем случае (без группировки) каждая строка данных распределяется по всем строкам базы.
	Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаГруппировки.ПолеБазы) Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
									  | И Данные."+СокрЛП(СтрокаГруппировки.ПолеДанных)+" = База."+СокрЛП(СтрокаГруппировки.ПолеБазы);
	КонецЦикла;
						  
	Запрос = Новый Запрос(ТекстЗапроса);
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц(); // Используем менеджер временных таблиц, чтобы в дальнейшем не получать временную таблицу данных еще раз.
	Запрос.УстановитьПараметр("База",ТабБазаРаспределения);
	Запрос.УстановитьПараметр("Данные",ТабДанныеРаспределения);
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	РезультатРаспределения = Запрос.Выполнить();
	ТабРезультатРаспределения = РезультатРаспределения.Выгрузить();
	
	// Чернодаров
	// Перед тем как избавляться от копеек подчистим слегка таблицу группировки.
	Для Инд=0 По ТабГруппировки.Количество()-1 Цикл
		Если Инд>=ТабГруппировки.Количество() Тогда
			Прервать;
		КонецЕсли;
		СтрокаТаб = ТабГруппировки[Инд];
		Если (ЗначениеЗаполнено(СтрокаТаб.ПолеБазы) И НЕ ТабБазаРаспределения.Колонки.Найти(СокрЛП(СтрокаТаб.ПолеБазы))=Неопределено
		   И ЗначениеЗаполнено(СтрокаТаб.ПолеДанных) И НЕ ТабДанныеРаспределения.Колонки.Найти(СокрЛП(СтрокаТаб.ПолеДанных))=Неопределено)
		 ИЛИ (НЕ ЗначениеЗаполнено(СтрокаТаб.ПолеБазы)
		   И ЗначениеЗаполнено(СтрокаТаб.ПолеДанных) И НЕ ТабДанныеРаспределения.Колонки.Найти(СокрЛП(СтрокаТаб.ПолеДанных))=Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		ТабГруппировки.Удалить(СтрокаТаб);
		Если Инд=ТабГруппировки.Количество() Тогда
			Прервать;
		КонецЕсли;
		Инд=Инд-1;
	КонецЦикла;
	// Чернодаров
	
	// При расчете распределения могли возникнуть разницы на копейки,
	// поэтому компенсируем их за счет последней строки (каждой группировки) результата.
	ЕстьКорректировки = ложь;
	Если ТабБазаРаспределения.Колонки.Найти("КоэффициентНормированный")=Неопределено Тогда
		// Помещаем результат распределения во временную таблицу (данные для распределения у нас уже во временной таблице).
		// Формируем запрос для расчета "копеечных" разниц.
		ТекстЗапроса = "ВЫБРАТЬ * ПОМЕСТИТЬ РезультатРаспределения ИЗ &РезультатРаспределения КАК РезультатРаспределения;
					   |
					   |ВЫБРАТЬ";
		// Добавляем все поля данных из таблицы группировки, 
		// т.к. корректировка "копеечных" расхождений должна выполняться в пределах каждой группировки.
		Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
			ТекстЗапроса = ТекстЗапроса + "
										  |		РезультатРаспределенияИтоги."+СтрокаГруппировки.ПолеДанных+" КАК "+СтрокаГруппировки.ПолеДанных+",";
		КонецЦикла;
		
		// Добавляем поля расчета "копеечных" разниц для каждого поля "для распределения".
		Для Каждого Поле из ПоляДляРаспределения Цикл
			ТекстЗапроса = ТекстЗапроса + "
										  |		ДанныеИтоги."+Поле+"-РезультатРаспределенияИтоги."+Поле+" КАК "+Поле+"Разница,";
		КонецЦикла;
		ТекстЗапроса = Сред(ТекстЗапроса,1,СтрДлина(ТекстЗапроса)-1);// Убираем последнюю запятую ;-)
		
		// Во вложенном запросе объединяем результат распределения, свернутый по полям данных из таблицы группировки
		// с данными для распределения, свернутыми по полям данных из таблицы группировки
		// по полям данных из таблицы группировки.
		ТекстЗапроса = ТекстЗапроса + "
									  |ИЗ (ВЫБРАТЬ";
		// Добавляем все поля данных из таблицы группировки, 
		// т.к. корректировка "копеечных" расхождений должна выполняться в пределах каждой группировки.
		Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
			ТекстЗапроса = ТекстЗапроса + "
										  |		РезультатРаспределения.Данные"+СтрокаГруппировки.ПолеДанных+" КАК "+СтрокаГруппировки.ПолеДанных+",";
		КонецЦикла;
		// Добавляем поля "для распределения".
		Для Каждого Поле из ПоляДляРаспределения Цикл
			ТекстЗапроса = ТекстЗапроса + "
										  |		СУММА(РезультатРаспределения."+Поле+"Распределения) КАК "+Поле+",";
		КонецЦикла;
		ТекстЗапроса = Сред(ТекстЗапроса,1,СтрДлина(ТекстЗапроса)-1);// Убираем последнюю запятую ;-)
		ТекстЗапроса = ТекстЗапроса + "
									  |	ИЗ РезультатРаспределения КАК РезультатРаспределения";
		Если НЕ ТабГруппировки.Количество() = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
										  |	СГРУППИРОВАТЬ ПО";
		КонецЕсли;
		
		// Группируем по всем полям данных из таблицы группировки, 
		// т.к. корректировка "копеечных" расхождений должна выполняться в пределах каждой группировки.
		Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
			ТекстЗапроса = ТекстЗапроса + "
										  |		РезультатРаспределения.Данные"+СтрокаГруппировки.ПолеДанных+",";
		КонецЦикла;
		Если НЕ ТабГруппировки.Количество() = 0 Тогда
			ТекстЗапроса = Сред(ТекстЗапроса,1,СтрДлина(ТекстЗапроса)-1);// Убираем последнюю запятую ;-)
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
									  |   ) КАК РезультатРаспределенияИтоги
									  |   ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ";
		// Добавляем все поля данных из таблицы группировки, 
		// т.к. корректировка "копеечных" расхождений должна выполняться в пределах каждой группировки.
		Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
			ТекстЗапроса = ТекстЗапроса + "
										  |							Данные."+СтрокаГруппировки.ПолеДанных+" КАК "+СтрокаГруппировки.ПолеДанных+",";
		КонецЦикла;
		// Добавляем поля "для распределения"
		Для Каждого Поле из ПоляДляРаспределения Цикл
			ТекстЗапроса = ТекстЗапроса + "
										  |							СУММА(Данные."+Поле+") КАК "+Поле+",";
		КонецЦикла;
		ТекстЗапроса = Сред(ТекстЗапроса,1,СтрДлина(ТекстЗапроса)-1);// Убираем последнюю запятую ;-)
		ТекстЗапроса = ТекстЗапроса + "
									  |						ИЗ Данные КАК Данные";
		Если НЕ ТабГруппировки.Количество() = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
										  |						СГРУППИРОВАТЬ ПО";
		КонецЕсли;
		// Группируем по всем полям данных из таблицы группировки, 
		// т.к. корректировка "копеечных" расхождений должна выполняться в пределах каждой группировки.
		Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
			ТекстЗапроса = ТекстЗапроса + "
										  |							Данные."+СтрокаГруппировки.ПолеДанных+",";
		КонецЦикла;
		Если НЕ ТабГруппировки.Количество() = 0 Тогда
			ТекстЗапроса = Сред(ТекстЗапроса,1,СтрДлина(ТекстЗапроса)-1);// Убираем последнюю запятую ;-)
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
									  |					) КАК ДанныеИтоги
									  |		ПО
									  |			1=1";
		// Объединяем по всем полям данных из таблицы группировки.
		Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
			ТекстЗапроса = ТекстЗапроса + "
										  |			И РезультатРаспределенияИтоги."+СтрокаГруппировки.ПолеДанных+" = ДанныеИтоги."+СтрокаГруппировки.ПолеДанных;
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
									  |ГДЕ
									  |	НЕ 1=1";
		// Отфильтровываем данные, где нет "копеечных" расхождений.
		Для Каждого Поле из ПоляДляРаспределения Цикл
			ТекстЗапроса = ТекстЗапроса + "
										  |		ИЛИ НЕ ДанныеИтоги."+Поле+" = РезультатРаспределенияИтоги."+Поле;
		КонецЦикла;
		ЗапросПоРазницам = Новый Запрос(ТекстЗапроса);
		ЗапросПоРазницам.МенеджерВременныхТаблиц = ВременныеТаблицы;
		ЗапросПоРазницам.УстановитьПараметр("РезультатРаспределения",ТабРезультатРаспределения);
		ТабРазниц = ЗапросПоРазницам.Выполнить().Выгрузить();
		
		// Обходим полученную таблицы "копеечных" разниц 
		// и корректируем последнюю (с учетом группировки) строку результата распределения.
		Для Каждого СтрокаРазницы из ТабРазниц Цикл
			
			// Готовим структуру для поиска строк результата по значениям полей группировки из строки таблицы выявленных разниц.
			СтруктураПоиска = Новый Структура();
			Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
				СтруктураПоиска.Вставить("Данные" + СтрокаГруппировки.ПолеДанных,СтрокаРазницы[СтрокаГруппировки.ПолеДанных]);
			КонецЦикла;
			
			СтрокиДляКорректировки = ТабРезультатРаспределения.НайтиСтроки(СтруктураПоиска);
			Если СтрокиДляКорректировки.Количество() = 0 Тогда
				Для Каждого Поле из ПоляДляРаспределения Цикл
					СтрокаДляКорректировки = ТабРезультатРаспределения[ТабРезультатРаспределения.Количество()-1];
					СтрокаДляКорректировки[Поле+"Распределения"] = СтрокаДляКорректировки[Поле+"Распределения"] + СтрокаРазницы[Поле+"Разница"];
					ЕстьКорректировки = истина;
				КонецЦикла;
			Иначе
				// Корректируем поля последней из найденных строк результата на сумму выявленных разниц.
				Для Каждого Поле из ПоляДляРаспределения Цикл
					СтрокаДляКорректировки = СтрокиДляКорректировки[СтрокиДляКорректировки.Количество()-1];
					СтрокаДляКорректировки[Поле+"Распределения"] = СтрокаДляКорректировки[Поле+"Распределения"] + СтрокаРазницы[Поле+"Разница"];
					ЕстьКорректировки = истина;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если есть корректировки или необходимо отфильтровать нераспределенные данные,
	// то готовим и возвращаем скорректированный результат.
	Если ЕстьКорректировки ИЛИ НЕ ВключатьНераспределенныеДанные Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	*
		               |ПОМЕСТИТЬ Результат
		               |ИЗ
		               |	&Результат КАК Результат
		               |;
					   |ВЫБРАТЬ
		               |	*
		               |ИЗ
		               |	Результат КАК Результат";
		Если НЕ ВключатьНераспределенныеДанные Тогда
			ТекстЗапроса = ТекстЗапроса + "
										  |ГДЕ
										  |	Результат.Данные"+ТабДанныеРаспределения.Колонки[0].Имя+" ЕСТЬ НЕ NULL И Результат.База"+ТабБазаРаспределения.Колонки[0].Имя+" ЕСТЬ НЕ NULL";
		КонецЕсли;		   
		Запрос = Новый Запрос(ТекстЗапроса);					  
		Запрос.УстановитьПараметр("Результат",ТабРезультатРаспределения);
		РезультатРаспределения = Запрос.Выполнить();
	КонецЕсли;	
	Возврат РезультатРаспределения;
КонецФункции // РаспределитьПоБазе()

// Функция НормироватьБазуРаспределения: РезультатЗапроса
// 	Нормирует суммы в базе распределения по формуле "Сумма нормированная 
// 													= Сумма строки базы * Итоговая сумма базы / Итоговая сумма нормировочной базы)"
// 	при этом нормирование выполняется с учетом переданной группировки (итоги считаются по группе).
// 	
// 
// Параметры:
// 	ПарамБазаРаспределения: РезультатЗапроса (поля см. результат ПолучитьБазуРаспределенияРазвернуто),
// 							ТаблицаЗначений (поля те же),
// 							СправочникСсылка.НастройкаРаспределения
// 						    - База распределения для нормирования для случая справочника выполняется расчет базы 
// 						      (требуются остальные параметры)
// 	ПарамНормировочнаяБаза: РезультатЗапроса (поля см. результат ПолучитьБазуРаспределенияРазвернуто),
// 							ТаблицаЗначений (поля те же),
// 							СправочникСсылка.НастройкаРаспределения
// 						- Нормировочная база  для случая справочника выполняется расчет базы (требуются остальные параметры)
// 	ТабГруппировки: ТаблицаЗначений
// 				ПолеБазы: Строка
// 				ПолеНормировки: Строка
// 						- Содержит наименования полей для нормирования по группам
// 	ДатаНач: Дата - необходим только если тип 1 или 2 параметров - СправочникСсылка.НастройкаРаспределения
// 	ДатаКон: Дата - необходим только если тип 1 или 2 параметров - СправочникСсылка.НастройкаРаспределения
//  Организация: СправочникСсылка.Организации - необходим только если тип 1 или 2 параметров 
// 											  - СправочникСсылка.НастройкаРаспределения
// 	МассивФильтрЭлементовБазы: Массив (СправочникСсылка.ЭлементыРаспределения) 
// 							   - Отбор элементов (групп), для которых будет расчитана база распределения
// 								 используется только если тип 1 параметра - СправочникСсылка.НастройкаРаспределения
// 	МассивФильтрЭлементовНормировки: Массив (СправочникСсылка.ЭлементыРаспределения) 
// 									 - Отбор элементов (групп), для которых будет расчитана нормировочная база
// 									   используется только если тип 2 параметра - СправочникСсылка.НастройкаРаспределения.
// 
// Колонки результата:
// 	Поля переданной базы распределения
// 	КоэффициентНормирования: Число - Результат выражения "Итоговая сумма базы / Итоговая сумма нормировочной базы"
// 	СуммаНормированная: Число.
// 
Функция НормироватьБазуРаспределения(ПарамБазаРаспределения, ПарамНормировочнаяБаза, ПарамТабГруппировки=Неопределено, ДатаНач=неопределено,ДатаКон=неопределено,Организация=неопределено, МассивФильтрЭлементовБазы = Неопределено, МассивФильтрЭлементовНормировки = Неопределено) Экспорт
	// Преобразуем переданный параметр в таблицу значения.
	Если ТипЗнч(ПарамБазаРаспределения) = Тип("РезультатЗапроса") Тогда
		ТабБазаРаспределения = ПарамБазаРаспределения.Выгрузить();
	ИначеЕсли ТипЗнч(ПарамБазаРаспределения) = Тип("ТаблицаЗначений") Тогда
		ТабБазаРаспределения = ПарамБазаРаспределения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Преобразуем переданный параметр в таблицу значения.
	Если ТипЗнч(ПарамНормировочнаяБаза) = Тип("РезультатЗапроса") Тогда
		ТабНормировочнаяБаза = ПарамНормировочнаяБаза.Выгрузить();

	ИначеЕсли ТипЗнч(ПарамНормировочнаяБаза) = Тип("ТаблицаЗначений") Тогда
		ТабНормировочнаяБаза = ПарамНормировочнаяБаза;
	Иначе
		Возврат ПарамБазаРаспределения;
	КонецЕсли;
	
	// Проверям корректность переданных параметров группировки.
	// Если какие то поля некорректны, то все равно считаем, 
	// но с группировкой по оставшимся полям (в крайнем случае вообще без).
	Если ПарамТабГруппировки = Неопределено ИЛИ НЕ ТипЗнч(ПарамТабГруппировки)=Тип("ТаблицаЗначений") Тогда
		ТабГруппировки = Новый ТаблицаЗначений;
		ТабГруппировки.Колонки.Добавить("ПолеБазы",Новый ОписаниеТипов("Строка"));
		ТабГруппировки.Колонки.Добавить("ПолеНормировки",Новый ОписаниеТипов("Строка"));
	ИначеЕсли ПарамТабГруппировки.Колонки.Найти("ПолеБазы") = Неопределено ИЛИ ПарамТабГруппировки.Колонки.Найти("ПолеНормировки") = Неопределено Тогда
		ТабГруппировки = Новый ТаблицаЗначений;
		ТабГруппировки.Колонки.Добавить("ПолеБазы",Новый ОписаниеТипов("Строка"));
		ТабГруппировки.Колонки.Добавить("ПолеНормировки",Новый ОписаниеТипов("Строка"));
	Иначе
		ТабГруппировки = ПарамТабГруппировки.Скопировать();
		Для Инд=0 По ТабГруппировки.Количество()-1 Цикл
			Если Инд>=ТабГруппировки.Количество() Тогда
				Прервать;
			КонецЕсли;
			СтрокаТаб = ТабГруппировки[Инд];
			Если ЗначениеЗаполнено(СтрокаТаб.ПолеБазы)
			   И ЗначениеЗаполнено(СтрокаТаб.ПолеНормировки)
			   И НЕ ТабБазаРаспределения.Колонки.Найти(СокрЛП(СтрокаТаб.ПолеБазы))=Неопределено
			   И НЕ ТабНормировочнаяБаза.Колонки.Найти(СокрЛП(СтрокаТаб.ПолеНормировки))=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТабГруппировки.Удалить(СтрокаТаб);
			Если Инд=ТабГруппировки.Количество() Тогда
				Прервать;
			КонецЕсли;
			Инд=Инд-1;
		КонецЦикла;
	КонецЕсли;
		
	// Помещаем полученную базу распределения и базу нормировки во временные таблицы.
	// Соединяем базу распределения с ее свернутой копией, что бы в каждой строке результата.
	// была итоговая сумма (свертка и соединение выполняется по значениям полей группировки).
	// Соединяем базу распределения со свернутой базой нормировки, 
	// (свертка и соединение выполняется по значениям полей группировки).
	// И собсвенно расчитываем коэффициенты и нормированные суммы.
	ТекстЗапроса = "ВЫБРАТЬ
	                      |	*
	                      |ПОМЕСТИТЬ НормировочнаяБаза
	                      |ИЗ
	                      |	&НормировочнаяБаза КАК НормировочнаяБаза
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	*
	                      |ПОМЕСТИТЬ База
	                      |ИЗ
	                      |	&База КАК База
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	База.*,
						  | ВЫБОР
						  |		КОГДА НормировочнаяБаза.Сумма ЕСТЬ NULL
						  |			ТОГДА 0
						  |		КОГДА НормировочнаяБаза.Сумма = 0
						  |			ТОГДА 0
						  |		ИНАЧЕ
						  |			ВЫРАЗИТЬ(БазаИтоги.Сумма КАК Число(28,10))/НормировочнаяБаза.Сумма
						  |	КОНЕЦ КАК КоэффициентНормирования,
						  | ВЫБОР
						  |		КОГДА НормировочнаяБаза.Сумма ЕСТЬ NULL
						  |			ТОГДА 0
						  |		КОГДА НормировочнаяБаза.Сумма = 0
						  |			ТОГДА 0
						  |		ИНАЧЕ
						  |			ВЫРАЗИТЬ(База.Сумма КАК Число(28,10))/НормировочнаяБаза.Сумма*БазаИтоги.Сумма
						  |	КОНЕЦ КАК СуммаНормированная
	                      |ИЗ
	                      |	База КАК База
						  | ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ";
						  
	// В результат вложенного запроса по базе распределения добавляем поля 
	// из таблицы группировки (если такие есть) для свертки и соединения.
	Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  | База."+СокрЛП(СтрокаГруппировки.ПолеБазы)+" КАК "+СокрЛП(СтрокаГруппировки.ПолеБазы)+",";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса +"
								 |	СУММА(База.Сумма) КАК Сумма
						  		 | ИЗ База КАК База";
	Если ТабГруппировки.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
									  | СГРУППИРОВАТЬ ПО";
	КонецЕсли;
	
	// Группируем (сворачиваем) результат вложенного запроса по базе распределения по полям из таблицы группировки.
	Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  | "+СокрЛП(СтрокаГруппировки.ПолеБазы)+?(ТабГруппировки.Индекс(СтрокаГруппировки)=ТабГруппировки.Количество()-1,"",",");
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса +"
						  		 |) КАК БазаИтоги
								 | ПО 1=1";
								 
	// Присоединяем результат вложенного запроса по базе распределения по полям из таблицы группировки.
	Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  | И База."+СокрЛП(СтрокаГруппировки.ПолеБазы)+" = БазаИтоги."+СокрЛП(СтрокаГруппировки.ПолеБазы);
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса +"
						  | ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ";
						  
	// В результат вложенного запроса по базе нормировки добавляем поля 
	// из таблицы группировки (если такие есть) для свертки и соединения.
	Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  | НормировочнаяБаза."+СокрЛП(СтрокаГруппировки.ПолеНормировки)+" КАК "+СокрЛП(СтрокаГруппировки.ПолеНормировки)+",";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса +"
						  		 |		СУММА(НормировочнаяБаза.Сумма) КАК Сумма
								 | ИЗ НормировочнаяБаза КАК НормировочнаяБаза";
	Если ТабГруппировки.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
									  | СГРУППИРОВАТЬ ПО";
	КонецЕсли;
	
	// Группируем (сворачиваем) результат вложенного запроса по базе нормировки по полям из таблицы группировки.
	Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  | "+СокрЛП(СтрокаГруппировки.ПолеНормировки)+?(ТабГруппировки.Индекс(СтрокаГруппировки)=ТабГруппировки.Количество()-1,"",",");
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
								  |) КАК НормировочнаяБаза
								  | ПО 1=1";
								  
	// Присоединяем результат вложенного запроса по базе нормировки по полям из таблицы группировки.
	Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  | И База."+СокрЛП(СтрокаГруппировки.ПолеБазы)+" = НормировочнаяБаза."+СокрЛП(СтрокаГруппировки.ПолеНормировки);
	КонецЦикла;
						  
	Запрос = Новый Запрос(ТекстЗапроса);					  
	Запрос.УстановитьПараметр("База",ТабБазаРаспределения);
	Запрос.УстановитьПараметр("НормировочнаяБаза",ТабНормировочнаяБаза);
	Возврат Запрос.Выполнить();
КонецФункции // НормироватьБазуРаспределения

// Функция РассчитатьКоэффициентыБазыРаспределенияРазвернуто: РезультатЗапроса
// 	Рассчитывается доля строки результата в группе строк (с одинаковыми значениями полей группировки)
// 	в случае когда поля группировки не указаны, рассчитывает долю в общей сумме результата.
// 	
// 
// Параметры:
// 	ПарамБазаРаспределения: РезультатЗапроса (поля см. результат ПолучитьБазуРаспределенияРазвернуто),
// 							ТаблицаЗначений (поля те же),
// 							СправочникСсылка.НастройкаРаспределения.
// 						- База распределения для свертки для случая справочника выполняется расчет базы (требуются остальные параметры).
// 	ТабГруппировки: ТаблицаЗначений.
// 				ПолеБазы: Строка
// 						- Содержит наименования полей для группировки строк результата.
// 	ДатаНач: Дата - необходим только если тип 1 параметра - СправочникСсылка.НастройкаРаспределения
// 	ДатаКон: Дата - необходим только если тип 1 параметра - СправочникСсылка.НастройкаРаспределения
//  Организация: СправочникСсылка.Организации - необходим только если тип 1 параметра 
// 											  - СправочникСсылка.НастройкаРаспределения.
// 	МассивФильтрЭлементов: Массив (СправочникСсылка.ЭлементыРаспределения) - Отбор элементов (групп), 
// 																			 для которых будет расчитана база распределения
// 																		 	 используется только если тип 1 параметра - СправочникСсылка.НастройкаРаспределения.
// 
// Колонки результата:
// 	Ссылка: СправочникСсылка.ЭлементыРаспределения.
// 	Счет: ПланСчетовСсылка.<Имя плана счетов>.
// 	КорСчет: ПланСчетовСсылка.<Имя плана счетов>.
// 	ВидУчета: ПеречислениеСсылка.ВидыУчетаПоПБУ18.
// 	Субконто<#>
// 	КорСубконто<#>
// 	Регистратор: ДокументСсылка
// 	Сумма: Число
// 	Коэффициент: Число - Доля строки результата в группе строк (с одинаковыми значениями полей группировки).
// 	Процент: Число - Доля строки результата в группе строк (с одинаковыми значениями полей группировки).
// 	Если передана база после нормировки, то еще:
// 		СуммаНормированная: Число
// 		КоэффициентНормированный: Число - Доля строки результата в группе  
//		строк (с одинаковыми значениями полей группировки).
// 		ПроцентНормированный: Число - Доля строки результата в группе строк (с одинаковыми значениями полей группировки).
// 
Функция РассчитатьКоэффициентыБазыРаспределенияРазвернуто(ПарамБазаРаспределения,ТабГруппировки=Неопределено, ДатаНач=неопределено,ДатаКон=неопределено,Организация=неопределено, МассивФильтрЭлементов = Неопределено, ПоляДанныхДляРаспределения = Неопределено) Экспорт
	// Преобразуем переданный параметр в таблицу значения.
	Если ТипЗнч(ПарамБазаРаспределения) = Тип("РезультатЗапроса") Тогда
		ТабРезультата = ПарамБазаРаспределения.Выгрузить();
	ИначеЕсли ТипЗнч(ПарамБазаРаспределения) = Тип("ТаблицаЗначений") Тогда
		ТабРезультата = ПарамБазаРаспределения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверям корректность переданных параметров группировки.
	// Если какие то поля некорректны, то все равно считаем, 
	// но с группировкой по оставшимся полям (в крайнем случае вообще без).
	Если ТабГруппировки = Неопределено ИЛИ НЕ ТипЗнч(ТабГруппировки)=Тип("ТаблицаЗначений") Тогда
		ТабГруппировки = Новый ТаблицаЗначений;
		ТабГруппировки.Колонки.Добавить("ПолеБазы",Новый ОписаниеТипов("Строка"));
	ИначеЕсли ТабГруппировки.Колонки.Найти("ПолеБазы") = Неопределено Тогда
		ТабГруппировки = Новый ТаблицаЗначений;
		ТабГруппировки.Колонки.Добавить("ПолеБазы",Новый ОписаниеТипов("Строка"));
	Иначе
		Для Инд=0 По ТабГруппировки.Количество()-1 Цикл
			Если Инд>=ТабГруппировки.Количество() Тогда
				Прервать;
			КонецЕсли;
			СтрокаТаб = ТабГруппировки[Инд];
			Если ЗначениеЗаполнено(СтрокаТаб.ПолеБазы)
			   И НЕ ТабРезультата.Колонки.Найти(СокрЛП(СтрокаТаб.ПолеБазы))=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТабГруппировки.Удалить(СтрокаТаб);
			Если Инд=ТабГруппировки.Количество() Тогда
				Прервать;
			КонецЕсли;
			Инд=Инд-1;
		КонецЦикла;
	КонецЕсли;
	
	// Помещаем полученную базу распределения во временную таблицу.
	// Соединяем ее со своей свернутой копией, что бы в каждой строке результата была итоговая сумма.
	// И собсвенно расчитываем коэффициенты (с учетом коэффициентов элементов (групп) распределения).
	ТекстЗапроса = "ВЫБРАТЬ
	                      |	*
	                      |ПОМЕСТИТЬ БазаРаспределения
	                      |ИЗ
	                      |	&БазаРаспределения КАК БазаРаспределения
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	БазаРаспределения.*,";
						  
	ЕстьКолонкаСуммаНормированная = НЕ ТабРезультата.Колонки.Найти("СуммаНормированная") = Неопределено;
	
	ПоляДляРаспределения = бит_СтрокиКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляДанныхДляРаспределения);
	
	Счетчик  = 0;
	КолПолей = ПоляДляРаспределения.Количество();
	
	Для Каждого Поле из ПоляДляРаспределения Цикл
		
		Счетчик = Счетчик + 1;
		
		ИмяСуммаНормированная = Поле + "Нормированная";
		
		// Если в качестве параметра передана ТаблицаЗначений с нормированной суммой,
		// то также считаем коэффициенты и для нормированной суммы.
		Если НЕ ТабРезультата.Колонки.Найти(ИмяСуммаНормированная) = Неопределено Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			| ВЫБОР
			|		КОГДА БазаРаспределенияИтоги." + Поле + " ЕСТЬ NULL
			|			ТОГДА 0
			|		КОГДА БазаРаспределенияИтоги." + Поле + " = 0
			|			ТОГДА 0
			|		ИНАЧЕ
			|			ВЫРАЗИТЬ(БазаРаспределения." + ИмяСуммаНормированная + " КАК Число(28,10))/БазаРаспределенияИтоги." + Поле + "
			|	КОНЕЦ КАК " + Поле + "КоэффициентНормированный,
			| ВЫБОР
			|		КОГДА БазаРаспределенияИтоги." + Поле + " ЕСТЬ NULL
			|			ТОГДА 0
			|		КОГДА БазаРаспределенияИтоги." + Поле + " = 0
			|			ТОГДА 0
			|		ИНАЧЕ
			|			ВЫРАЗИТЬ(БазаРаспределения." + ИмяСуммаНормированная + " КАК Число(28,10))/БазаРаспределенияИтоги." + Поле + "*100
			|	КОНЕЦ КАК " + Поле + "ПроцентНормированный,";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		| ВЫБОР
		|		КОГДА БазаРаспределенияИтоги." + Поле + " ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА БазаРаспределенияИтоги." + Поле + " = 0
		|			ТОГДА 0
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(БазаРаспределения." + Поле + " КАК Число(28,10))/БазаРаспределенияИтоги." + Поле + "
		|	КОНЕЦ КАК " + Поле + "Коэффициент,
		| ВЫБОР
		|		КОГДА БазаРаспределенияИтоги." + Поле + " ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА БазаРаспределенияИтоги." + Поле + " = 0
		|			ТОГДА 0
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(БазаРаспределения." + Поле + " КАК Число(28,10))/БазаРаспределенияИтоги." + Поле + "*100
		|	КОНЕЦ КАК " + Поле + "Процент" + ?(Счетчик = КолПолей, "", ",");
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	БазаРаспределения КАК БазаРаспределения
	| ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ";
	
	// В запрос с итоговыми суммами выводим все полям группировки, переданным в таблице группировки.
	Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  | БазаРаспределения."+СокрЛП(СтрокаГруппировки.ПолеБазы)+" КАК "+СокрЛП(СтрокаГруппировки.ПолеБазы)+",";
	КонецЦикла;

	Счетчик = 0;
	
	Для Каждого Поле из ПоляДляРаспределения Цикл
		
		Счетчик = Счетчик + 1;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	СУММА(БазаРаспределения." + Поле + ") КАК " + Поле + ?(Счетчик = КолПолей, "", ",");
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса +"
	| ИЗ БазаРаспределения КАК БазаРаспределения";
								 
	Если ТабГруппировки.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
									  | СГРУППИРОВАТЬ ПО";
	КонецЕсли;
	
	// И сворачиваем сумму по всем полям группировки, переданным в таблице группировки.
	Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  | "+СокрЛП(СтрокаГруппировки.ПолеБазы)+?(ТабГруппировки.Индекс(СтрокаГруппировки)=ТабГруппировки.Количество()-1,"",",");
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса +"
						  		 |) КАК БазаРаспределенияИтоги
								 | ПО 1=1";
	
	// Соединение с запросом по итоговым суммам выполняем по всем полям группировки,
	// переданным в таблице группировки.							 
	Для Каждого СтрокаГруппировки Из ТабГруппировки Цикл
		ТекстЗапроса = ТекстЗапроса + "
									  | И БазаРаспределения."+СокрЛП(СтрокаГруппировки.ПолеБазы)+" = БазаРаспределенияИтоги."+СокрЛП(СтрокаГруппировки.ПолеБазы);
	КонецЦикла;
						  
	Запрос = Новый Запрос(ТекстЗапроса);					  
	Запрос.УстановитьПараметр("БазаРаспределения",ТабРезультата);
	
	
	Возврат Запрос.Выполнить();
КонецФункции // РассчитатьКоэффициентыБазыРаспределенияРазвернуто

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Получает алгоритм закрытия для структурного подразделения на дату.
// 
// Параметры:
//  СтруктурноеПодразделение - СправочникСсылка.бит_ГруппыСтруктурныхПодразделений,
// 							   СправочникСсылка.Организации.
// 
//  ВидЗакрытия - СправочникСсылка.бит_ВидыЗакрытияСчетов.
//  ДатаЗапроса - Дата.
// 
// Возвращаемое значение:
//   НастройкаЗакрытия - СправочникСсылка.бит_НастройкиЗакрытия.
// 
Функция ПолучитьАлгоритмЗакрытия(СтруктурноеПодразделение, ВидЗакрытия, ДатаЗапроса) Экспорт

	НастройкаЗакрытия = Справочники.бит_НастройкиЗакрытия.ПустаяСсылка();
	МассивГрупп		  = Новый Массив;
	
	// Получим массив групп структурных подразделений
	// для переданного структурного подразделения.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГруппыСтрПодразделений.Ссылка КАК Группа
	|ИЗ
	|	Справочник.бит_ГруппыСтруктурныхПодразделений.Состав КАК ГруппыСтрПодразделений
	|ГДЕ
	|	ГруппыСтрПодразделений.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|	И (НЕ ГруппыСтрПодразделений.Ссылка.ПометкаУдаления)";
					
	РезультатИзЗапроса = Запрос.Выполнить();
	
	Если Не РезультатИзЗапроса.Пустой() Тогда
		
		ВыборкаИзЗапроса = РезультатИзЗапроса.Выбрать();
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл
			МассивГрупп.Добавить(ВыборкаИзЗапроса.Группа);
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим настройку закрытия из регистра сведений "бит_НазначениеАлгоритмовЗакрытия".
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("МассивГрупп"				, МассивГрупп);
	Запрос.УстановитьПараметр("ВидЗакрытия"				, ВидЗакрытия);
	Запрос.УстановитьПараметр("ДатаЗапроса"				, ДатаЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АлгоритмыЗакрытия.НастройкаЗакрытия,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрСведений.бит_НазначениеАлгоритмовЗакрытия.СрезПоследних(
	|			&ДатаЗапроса,
	|			СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И ВидЗакрытия = &ВидЗакрытия) КАК АлгоритмыЗакрытия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлгоритмыЗакрытия.НастройкаЗакрытия,
	|	2
	|ИЗ
	|	РегистрСведений.бит_НазначениеАлгоритмовЗакрытия.СрезПоследних(
	|			&ДатаЗапроса,
	|			СтруктурноеПодразделение В (&МассивГрупп)
	|				И ВидЗакрытия = &ВидЗакрытия) КАК АлгоритмыЗакрытия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлгоритмыЗакрытия.НастройкаЗакрытия,
	|	3
	|ИЗ
	|	РегистрСведений.бит_НазначениеАлгоритмовЗакрытия.СрезПоследних(
	|			&ДатаЗапроса,
	|			(СтруктурноеПодразделение = НЕОПРЕДЕЛЕНО
	|				ИЛИ СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ИЛИ СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.бит_ГруппыСтруктурныхПодразделений.ПустаяСсылка))
	|				И ВидЗакрытия = &ВидЗакрытия) КАК АлгоритмыЗакрытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	РезультатИзЗапроса = Запрос.Выполнить();
	
	Если Не РезультатИзЗапроса.Пустой() Тогда
		
		ВыборкаИзЗапроса = РезультатИзЗапроса.Выбрать();
		
		Если ВыборкаИзЗапроса.Следующий() Тогда
			НастройкаЗакрытия = ВыборкаИзЗапроса.НастройкаЗакрытия;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкаЗакрытия;
	
КонецФункции // ПолучитьАлгоритмЗакрытия()

Функция ПолучитьВидЗакрытия(СтруктурноеПодразделение, НастройкаЗакрытия, ДатаЗапроса) Экспорт

	ВидЗакрытия = Справочники.бит_ВидыЗакрытияСчетов.ПустаяСсылка();
	МассивГрупп = Новый Массив;
	
	// Получим массив групп структурных подразделений
	// для переданного структурного подразделения.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГруппыСтрПодразделений.Ссылка КАК Группа
	|ИЗ
	|	Справочник.бит_ГруппыСтруктурныхПодразделений.Состав КАК ГруппыСтрПодразделений
	|ГДЕ
	|	ГруппыСтрПодразделений.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|	И (НЕ ГруппыСтрПодразделений.Ссылка.ПометкаУдаления)";
					
	РезультатИзЗапроса = Запрос.Выполнить();
	
	Если Не РезультатИзЗапроса.Пустой() Тогда
		
		ВыборкаИзЗапроса = РезультатИзЗапроса.Выбрать();
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл
			МассивГрупп.Добавить(ВыборкаИзЗапроса.Группа);
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим настройку закрытия из регистра сведений "бит_НазначениеАлгоритмовЗакрытия".
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("МассивГрупп"				, МассивГрупп);
	Запрос.УстановитьПараметр("НастройкаЗакрытия"	    , НастройкаЗакрытия);
	Запрос.УстановитьПараметр("ДатаЗапроса"				, ДатаЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АлгоритмыЗакрытия.ВидЗакрытия,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрСведений.бит_НазначениеАлгоритмовЗакрытия.СрезПоследних(
	|			&ДатаЗапроса,
	|			СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И НастройкаЗакрытия = &НастройкаЗакрытия) КАК АлгоритмыЗакрытия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлгоритмыЗакрытия.ВидЗакрытия,
	|	2
	|ИЗ
	|	РегистрСведений.бит_НазначениеАлгоритмовЗакрытия.СрезПоследних(
	|			&ДатаЗапроса,
	|			СтруктурноеПодразделение В (&МассивГрупп)
	|				И НастройкаЗакрытия = &НастройкаЗакрытия) КАК АлгоритмыЗакрытия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлгоритмыЗакрытия.ВидЗакрытия,
	|	3
	|ИЗ
	|	РегистрСведений.бит_НазначениеАлгоритмовЗакрытия.СрезПоследних(
	|			&ДатаЗапроса,
	|			(СтруктурноеПодразделение = НЕОПРЕДЕЛЕНО
	|				ИЛИ СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ИЛИ СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.бит_ГруппыСтруктурныхПодразделений.ПустаяСсылка))
	|				И НастройкаЗакрытия = &НастройкаЗакрытия) КАК АлгоритмыЗакрытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	РезультатИзЗапроса = Запрос.Выполнить();
	
	Если Не РезультатИзЗапроса.Пустой() Тогда
		
		ВыборкаИзЗапроса = РезультатИзЗапроса.Выбрать();
		
		Если ВыборкаИзЗапроса.Следующий() Тогда
			ВидЗакрытия = ВыборкаИзЗапроса.ВидЗакрытия;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидЗакрытия;
	
КонецФункции // ПолучитьВидЗакрытия()

// Функция проверяет по имени регистра бухгалтерии - это регистр бюджетирования.
// 
// Параметры:
//  ИмяРегистраБухгалтерии - Строка.
// 
// Возвращаемое значение:
//  ЭтоРегистрБюджетирования - Булево.
// 
Функция ЭтоРегистрБюджетирования(ИмяРегистраБухгалтерии) Экспорт
	
	ЭтоРегистрБюджетирования = (ВРег(ИмяРегистраБухгалтерии) = ВРег("бит_Бюджетирование"));
	
	Возврат ЭтоРегистрБюджетирования;
	
КонецФункции // ЭтоРегистрБюджетирования()

// Функция проверяет по имени регистра бухгалтерии - это регистр налогового учета.
// 
// Параметры:
//  ИмяРегистраБухгалтерии - Строка.
// 
// Возвращаемое значение:
//  ЭтоРегистрБюджетирования - Булево.
// 
Функция ЭтоРегистрНалоговогоУчета(ИмяРегистраБухгалтерии) Экспорт
	
	ЭтоРегистрБюджетирования = (ВРег(ИмяРегистраБухгалтерии) = ВРег("Налоговый"));
	
	Возврат ЭтоРегистрБюджетирования;
	
КонецФункции // ЭтоРегистрНалоговогоУчета()

// Функция определяет параметры регистра бухгалтерии.
// 
// Параметры:
//  РегистрБухгалтерии - СправочникСсылка.бит_ОбъектыСистемы.
// 
// Возвращаемое значение:
//  ПараметрыРБ - Структура.
// 
Функция ПолучитьПараметрыРегистраБухгалтерии(РегистрБухгалтерии) Экспорт

	ПараметрыРБ = Новый Структура("ИмяКласса
	                               |, ИмяРегистра
								   |, ИмяПланаСчетов
								   |, ПустойСчет
								   |, МаксКоличествоСубконто
								   |, МинКоличествоСубконто
								   |, КоличествоСубконтоДокумента
								   |, КоличествоРесурсов
								   |, ЭтоРегистрНУ
								   |, ЭтоРегистрБюдж
								   |, ЕстьПодразделение								   
								   |, ЕстьКоличественныйУчет
								   |, ЕстьВалютныйУчет");
								   
	ПараметрыРБ.ИмяКласса = "ПараметрыРегистраБухгалтерии";
	ПараметрыРБ.ЕстьКоличественныйУчет = Ложь;
	ПараметрыРБ.ЕстьВалютныйУчет = Ложь;
	ПараметрыРБ.ЕстьПодразделение = Ложь;
	ПараметрыРБ.КоличествоСубконтоДокумента = Документы.бит_ЗакрытиеСчетов.ПолучитьКоличествоСубконтоДокумента();
	ПараметрыРБ.КоличествоРесурсов     = 1;
	ПараметрыРБ.МинКоличествоСубконто  = 3;
	ПараметрыРБ.МаксКоличествоСубконто = 3;
	ПараметрыРБ.ЭтоРегистрНУ   = Ложь;
	ПараметрыРБ.ЭтоРегистрБюдж = Ложь;
	
	Если ЗначениеЗаполнено(РегистрБухгалтерии) Тогда
		
		// Укажем имя регистра бухгалтерии.
		ПараметрыРБ.ИмяРегистра = РегистрБухгалтерии.ИмяОбъекта;
		
		// Получим метаданные плана счетов регистра бухгалтерии.
		МетаРегистр    = Метаданные.РегистрыБухгалтерии[ПараметрыРБ.ИмяРегистра];
		ПланСчетовМета = МетаРегистр.ПланСчетов;
		ПараметрыРБ.ЕстьПодразделение = ?(МетаРегистр.Измерения.Найти("Подразделение") = Неопределено, Ложь, Истина);
		
		// Параметры плана счетов.
		ПараметрыРБ.ИмяПланаСчетов = ПланСчетовМета.Имя;
		ПараметрыРБ.ПустойСчет = ПланыСчетов[ПланСчетовМета.Имя].ПустаяСсылка();
		ПараметрыРБ.МаксКоличествоСубконто = ПланСчетовМета.МаксКоличествоСубконто;
		
		ПараметрыРБ.МинКоличествоСубконто = Мин(ПараметрыРБ.МаксКоличествоСубконто, ПараметрыРБ.КоличествоСубконтоДокумента);
		
		ПараметрыРБ.КоличествоРесурсов = МетаРегистр.Ресурсы.Количество();
		
		// Проверим наличие количественного и валютного учета у плана счетов.
		ПараметрыРБ.ЕстьКоличественныйУчет = Не ПланСчетовМета.ПризнакиУчета.Найти("Количественный") = Неопределено;
		ПараметрыРБ.ЕстьВалютныйУчет 	   = Не ПланСчетовМета.ПризнакиУчета.Найти("Валютный") 	    = Неопределено;
		
		// Проверки на специальные виды регистров.
		ПараметрыРБ.ЭтоРегистрНУ   = бит_РегламентныеЗакрытия.ЭтоРегистрНалоговогоУчета(ПараметрыРБ.ИмяРегистра);
		ПараметрыРБ.ЭтоРегистрБюдж = бит_РегламентныеЗакрытия.ЭтоРегистрБюджетирования(ПараметрыРБ.ИмяРегистра);
		
	КонецЕсли; 

	Возврат ПараметрыРБ;
	
КонецФункции // ПолучитьПараметрыРегистраБухгалтерии()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура Выполняет заполнение таблицы "Закрытие" по настройке закрытия без распределения.
// 
// Параметры:
//  ТабличнаяЧастьЗакрытие - ТабличнаяЧасть.
//  СтруктураПараметров    - Структура.
//    						 Обязательные ключи: 
//    						 Организация 		- СправочникСсылка.Организации, СправочникСсылка.СценарииПланирования.
//    						 Дата        		- Дата.
//    						 НастройкаЗакрытия  - СправочникСсылка.бит_НастройкиЗакрытия.
//    						 КоличествоСубконто - Число.
// 
Процедура ЗаполнитьДанныеЗакрытияБезРаспределения(ТабличнаяЧастьЗакрытие, СтруктураПараметров)
	
	Организация        = СтруктураПараметров.Организация;
	Дата               = СтруктураПараметров.Дата;
	НастройкаЗакрытия  = СтруктураПараметров.НастройкаЗакрытия;
	КоличествоСубконто = СтруктураПараметров.КоличествоСубконто;
	
	// Получаем таблицу отбора запроса источников.
	ТаблицаОтбора 	   = СтруктураПараметров.ТаблицаОтбора;
	
	ИменаРесурсов	   = НастройкаЗакрытия.ИменаРесурсов.Выгрузить();
	КоличествоРесурсов = ИменаРесурсов.Количество();
	
	ТекстСубконто 		= "";
	ТекстСпособ   		= "";
	ТекстПоказателиСумм = "";
	
	Для Ном = 1 По КоличествоСубконто ЦИкл
		
		ТекстСубконто = ТекстСубконто + "
					    |	НастройкиЗакрытия.СубконтоЗакрытия" + Ном + ",";
						
		ТекстСпособ   = ТекстСпособ + "
					    |	НастройкиЗакрытия.СпособЗаполненияСубконто" + Ном + ",";
						
	КонецЦикла;

	ТекстСубконто = ТекстСубконто + "
	                 |  НастройкиЗакрытия.ПодразделениеЗакрытия, ";
					 
	ТекстСпособ = ТекстСпособ + "
	                |  НастройкиЗакрытия.СпособЗаполненияПодразделения,";
	
	Для Ном = 1 По КоличествоРесурсов Цикл
		
		ТекстПоказателиСумм = ТекстПоказателиСумм + "
					    |	НастройкиЗакрытия.ИмяПоказателяСумма" + Ном + ",";
		
	КонецЦикла;
	
	// Закрытие без распределения.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", НастройкаЗакрытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЗакрытия.Ссылка,
	|	НастройкиЗакрытия.НомерСтроки,
	|	НастройкиЗакрытия.Данные,
	|	НастройкиЗакрытия.СчетЗакрытия,
	|	НастройкиЗакрытия.ДтКт, " + ТекстСубконто + ТекстСпособ + "
	|	НастройкиЗакрытия.ИмяПоказателяЦФО,
	|	НастройкиЗакрытия.ИмяПоказателяКоличество,
	|	НастройкиЗакрытия.ИмяПоказателяВидУчета,
	|	НастройкиЗакрытия.ИмяПоказателяВалюта,
	|	НастройкиЗакрытия.ИмяПоказателяВалютнаяСумма, " + ТекстПоказателиСумм + "
	|	НастройкиЗакрытия.Содержание,
	|	НастройкиЗакрытия.НомерЖурнала
	|ИЗ
	|	Справочник.бит_НастройкиЗакрытия.Закрытие КАК НастройкиЗакрытия
	|ГДЕ
	|	НастройкиЗакрытия.Ссылка = &Ссылка
	|	И НастройкиЗакрытия.ВидЗакрытия = ЗНАЧЕНИЕ(Перечисление.бит_ВидыЗакрытия.Простое)";
	
	РезультатИзЗапроса = Запрос.Выполнить();
	
	Если Не РезультатИзЗапроса.Пустой() Тогда
		
		НачГраница = НачалоМесяца(Дата);
		КонГраница = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
		
		ВыборкаНастройка = РезультатИзЗапроса.Выбрать();
		
		Пока ВыборкаНастройка.Следующий() Цикл
			
			// Получим данные по источнику данных.
			СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
			СтрПар.ОтборВОтчете = ТаблицаОтбора;
			
			ДанныеПоИсточнику = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ВыборкаНастройка.Данные
			                                                                          ,НачГраница 
																					  ,КонГраница
																					  ,СтрПар);
																						 
			Если ДанныеПоИсточнику.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПерваяСтрокаДанных = Истина;
			
			Для Каждого ТекДанные Из ДанныеПоИсточнику Цикл
				
				// Проверим наличие необходимых колонок.
				Если ПерваяСтрокаДанных Тогда
					Если ВыполнитьПроверкуКолонок(ВыборкаНастройка, ТекДанные, КоличествоСубконто, КоличествоРесурсов) Тогда
						Возврат;
					КонецЕсли;	
				КонецЕсли; 
				
				// Проверим заполненность ресурсов.
				Если Не ЗначениеРесурсовЗаполнено(ВыборкаНастройка, ТекДанные, КоличествоРесурсов) Тогда
					// Не заполнен ни один из указанных ресурсов.
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТабличнаяЧастьЗакрытие.Добавить();
				НоваяСтрока.Счет 		 = ТекДанные.Счет;
				НоваяСтрока.СчетЗакрытия = ВыборкаНастройка.СчетЗакрытия;
				
				НоваяСтрока.ДтКт         = ВыборкаНастройка.ДтКт;
				
				Аналитики = Новый Соответствие;
				
				// Заполним субконто исходного счета.
				Для Ном = 1 По КоличествоСубконто Цикл
					
					ТекЗначение = ТекДанные["Субконто" + Ном];  
					
					Если ЗначениеЗаполнено(ТекЗначение) Тогда
						
						НоваяСтрока["Субконто" + Ном] = ТекЗначение;
						Аналитики.Вставить(ТипЗнч(ТекЗначение), ТекЗначение);						
						
					КонецЕсли; 
					
				КонецЦикла;
				
				// Получим данные по субконто счета закрытия.
                СвСчЗк = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НоваяСтрока.СчетЗакрытия);
                КолВоСубконтоСчетаЗакрытия = СвСчЗк.КоличествоСубконто;
				
				// Заполним субконто закрытия.
				Для Ном = 1 по КоличествоСубконто Цикл
					
					//BIT_Amosov 2014/05/27 {{
					//Задача № 640 "Реформация баланса"
					Если НоваяСтрока.СчетЗакрытия = ПланыСчетов.бит_Дополнительный_2.ЗакрытиеСчетовДоходов ИЛИ
						 НоваяСтрока.СчетЗакрытия = ПланыСчетов.бит_Дополнительный_2.ЗакрытиеСчетовРасходов Тогда
						 Продолжить;
					КонецЕсли;
					//BIT_Amosov 2014/05/27 }}
					
					ИмяСубконтоЗакрытия = "СубконтоЗакрытия" + Ном;
					СпособЗаполнения = ВыборкаНастройка["СпособЗаполненияСубконто" + Ном];
					
					// Заполним субконто закрытия.
					Если СпособЗаполнения = "Явно" Тогда
						НоваяСтрока[ИмяСубконтоЗакрытия] = ВыборкаНастройка[ИмяСубконтоЗакрытия];
						
					ИначеЕсли НЕ ПустаяСтрока(СпособЗаполнения) Тогда	
						НоваяСтрока[ИмяСубконтоЗакрытия] = ТекДанные[СпособЗаполнения];					
						
					КонецЕсли; 
					
					// Если субконто не заполнено подберем соответствие по типам.
					Если Не ЗначениеЗаполнено(НоваяСтрока[ИмяСубконтоЗакрытия]) 
						И Ном <= КолВоСубконтоСчетаЗакрытия Тогда
						
                        ВидСубконто      = СвСчЗк["ВидСубконто" + Ном];
                        ТпЗнч            = СвСчЗк["ВидСубконто" + Ном + "ТипЗначения"];
                        ТипЗнчСубконто   = ТипЗнч(ТпЗнч.ПривестиЗначение());
						ЗначениеСубконто = Аналитики[ТипЗнчСубконто];
						НоваяСтрока[ИмяСубконтоЗакрытия] = ЗначениеСубконто;					
						
					КонецЕсли	
					
				КонецЦикла;	
				
				// Заполним данные по подразделениям организации.
				Если СтруктураПараметров.ЕстьПодразделение Тогда
                    
                    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НоваяСтрока.Счет);                    
					Если СвСч.УчетПоПодразделениям Тогда
						
						НоваяСтрока.Подразделение = ТекДанные.Подразделение;
						
					КонецЕсли; 
					
					СпособЗаполнения = ВыборкаНастройка.СпособЗаполненияПодразделения;
                    Если ЗначениеЗаполнено(СпособЗаполнения) И СвСчЗк.УчетПоПодразделениям Тогда 
						 					
						 Если СпособЗаполнения = "Явно" Тогда
							 
							 НоваяСтрока.ПодразделениеЗакрытия = ВыборкаНастройка.ПодразделениеЗакрытия;
							 
						 Иначе	
							 
							 НоваяСтрока.ПодразделениеЗакрытия = ТекДанные[СпособЗаполнения];
							 
						 КонецЕсли; 
					
					КонецЕсли; 
				
				КонецЕсли; // ЕстьПодразделение
				
				// Заполним данные по ЦФО.
				Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяЦФО) Тогда
					НоваяСтрока.ЦФО = ТекДанные[ВыборкаНастройка.ИмяПоказателяЦФО];
				КонецЕсли;
				
				// Заполним данные по количеству.
				Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяКоличество) Тогда
					НоваяСтрока.Количество = ТекДанные[ВыборкаНастройка.ИмяПоказателяКоличество];
				КонецЕсли; 
				
				// Заполним данные по виду учета.
				Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяВидУчета) Тогда
					НоваяСтрока.ВидУчета = ТекДанные[ВыборкаНастройка.ИмяПоказателяВидУчета];
				КонецЕсли;
				
				// Заполним данные по валютам.
				Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяВалюта) Тогда
					НоваяСтрока.Валюта = ТекДанные[ВыборкаНастройка.ИмяПоказателяВалюта];
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяВалютнаяСумма) Тогда
					НоваяСтрока.ВалютнаяСумма = ТекДанные[ВыборкаНастройка.ИмяПоказателяВалютнаяСумма];
				КонецЕсли;
				
				// Заполним суммы из ресурсов.
				Для Каждого ТекИмя Из ИменаРесурсов Цикл
					НоваяСтрока[ТекИмя.ИмяРеквизита] = ТекДанные[ВыборкаНастройка["ИмяПоказателяСумма" + ТекИмя.НомерСтроки]];
				КонецЦикла;
				
				НоваяСтрока.Содержание   = ВыборкаНастройка.Содержание;
				НоваяСтрока.НомерЖурнала = ВыборкаНастройка.НомерЖурнала;
				
				ПерваяСтрокаДанных = Ложь;
				
			КонецЦикла; // Для Каждого ТекДанные Из ДанныеПоИсточнику Цикл.
			
		КонецЦикла; // Пока ВыборкаНастройка.Следующий() Цикл
		
	КонецЕсли; // Если Не РезультатИзЗапроса.Пустой() Тогда.
	
КонецПроцедуры // ЗаполнитьДанныеЗакрытияБезРаспределения()

// Процедура Выполняет заполнение таблицы "Закрытие" по настройке закрытия с распределением.
// 
// Параметры:
//  ТабличнаяЧастьЗакрытие - ТабличнаяЧасть.
//  СтруктураПараметров    - Структура.
//    						 Обязательные ключи: 
//    						 Организация 		- СправочникСсылка.Организации, СправочникСсылка.СценарииПланирования.
//    						 Дата        		- Дата.
//    						 НастройкаЗакрытия  - СправочникСсылка.бит_НастройкиЗакрытия.
//    						 КоличествоСубконто - Число.
// 
Процедура ЗаполнитьДанныеЗакрытияCРаспределением(ТабличнаяЧастьЗакрытие, СтруктураПараметров)
	
	Организация        = СтруктураПараметров.Организация;
	Дата               = СтруктураПараметров.Дата;
	НастройкаЗакрытия  = СтруктураПараметров.НастройкаЗакрытия;
	КоличествоСубконто = СтруктураПараметров.КоличествоСубконто;
	
	// Получаем таблицу отбора запроса источников.
	ТаблицаОтбора 	   = СтруктураПараметров.ТаблицаОтбора;
	
	ИменаРесурсов	   = НастройкаЗакрытия.ИменаРесурсов.Выгрузить();
	КоличествоРесурсов = ИменаРесурсов.Количество();
	
	РегистрБухгалтерии 	    = НастройкаЗакрытия.РегистрБухгалтерии;
	ИмяРегистраБухгалтерии  = РегистрБухгалтерии.ИмяОбъекта;
	МетаРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	МетаПланаСчетов			= МетаРегистраБухгалтерии.ПланСчетов;
	
	// Проверим наличие количественного и валютного учета у плана счетов.
	ЕстьКоличественныйУчет = Не МетаПланаСчетов.ПризнакиУчета.Найти("Количественный") = Неопределено;
	ЕстьВалютныйУчет 	   = Не МетаПланаСчетов.ПризнакиУчета.Найти("Валютный")		  = Неопределено;
	
	ТекстСубконто 		= "";
	ТекстПоляБазы		= "";
	ТекстПоляДанных		= "";
	ТекстПоляНормировки	= "";
	ТекстСпособ   		= "";
	ТекстПоказателиСумм = "";
	
	Для Ном = 1 По КоличествоСубконто ЦИкл
		
		ТекстСубконто 		= ТекстСубконто + "
					    |	НастройкиЗакрытия.СубконтоЗакрытия" + Ном + ",";
		
		ТекстПоляБазы		= ТекстПоляБазы + "
					    |	НастройкиЗакрытия.ПолеБазы" + Ном + ",";
						
		ТекстПоляДанных 	= ТекстПоляДанных + "
					    |	НастройкиЗакрытия.ПолеДанных" + Ном + ",";
						
		ТекстПоляНормировки = ТекстПоляНормировки + "
					    |	НастройкиЗакрытия.ПолеНормировки" + Ном + ",";
						
		ТекстСпособ   		= ТекстСпособ + "
					    |	НастройкиЗакрытия.СпособЗаполненияСубконто" + Ном + ",";
						
	КонецЦикла;
	
	ТекстСубконто = ТекстСубконто + "
	                 |  НастройкиЗакрытия.ПодразделениеЗакрытия, ";
					 
	ТекстСпособ = ТекстСпособ + "
	                |  НастройкиЗакрытия.СпособЗаполненияПодразделения,";
					
	Если СтруктураПараметров.ЕстьПодразделение И КоличествоСубконто < 4 Тогда
		
		// Подразделение может выступать в качестве 4 поля настройки.
		ТекстПоляБазы		= ТекстПоляБазы + "
					    |	НастройкиЗакрытия.ПолеБазы4,";
						
		ТекстПоляДанных 	= ТекстПоляДанных + "
					    |	НастройкиЗакрытия.ПолеДанных4,";
						
		ТекстПоляНормировки = ТекстПоляНормировки + "
					    |	НастройкиЗакрытия.ПолеНормировки4,";
						
	
	КонецЕсли; 				
	
	Для Ном = 1 По КоличествоРесурсов Цикл
		
		ТекстПоказателиСумм = ТекстПоказателиСумм + "
					    |	НастройкиЗакрытия.ИмяПоказателяСумма" + Ном + ",";
		
	КонецЦикла;
	
	// Закрытие с распределением.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", НастройкаЗакрытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЗакрытия.Ссылка,
	|	НастройкиЗакрытия.НомерСтроки,
	|	НастройкиЗакрытия.Данные,
	|	НастройкиЗакрытия.СчетЗакрытия,
	|	НастройкиЗакрытия.ДтКт, " + ТекстСубконто + "
	|	НастройкиЗакрытия.База, " + ТекстПоляБазы
	+ ТекстПоляДанных + ТекстПоляНормировки + ТекстСпособ + "
	|	НастройкиЗакрытия.ИмяПоказателяЦФО,
	|	НастройкиЗакрытия.ИмяПоказателяКоличество,
	|	НастройкиЗакрытия.ИмяПоказателяВидУчета,
	|	НастройкиЗакрытия.ИмяПоказателяВалюта,
	|	НастройкиЗакрытия.ИмяПоказателяВалютнаяСумма, " + ТекстПоказателиСумм + "
	|	НастройкиЗакрытия.Содержание,
	|	НастройкиЗакрытия.НомерЖурнала
	|ИЗ
	|	Справочник.бит_НастройкиЗакрытия.Закрытие КАК НастройкиЗакрытия
	|ГДЕ
	|	НастройкиЗакрытия.Ссылка = &Ссылка
	|	И НастройкиЗакрытия.ВидЗакрытия = ЗНАЧЕНИЕ(Перечисление.бит_ВидыЗакрытия.Распределение)";
	
	РезультатИзЗапроса = Запрос.Выполнить();
	
	Если Не РезультатИзЗапроса.Пустой() Тогда
		
		НачГраница = НачалоМесяца(Дата);
		КонГраница = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
		
		ВыборкаНастройка = РезультатИзЗапроса.Выбрать();
		
		Пока ВыборкаНастройка.Следующий() Цикл
			
			// Получим список показателей для распределения.
			СписокПоказателейДляРаспределения = ПолучитьСписокПоказателейДляРаспределения(ВыборкаНастройка, КоличествоРесурсов);
			
			// Получим массив показателей.
			МассивПоказателей = бит_СтрокиКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПоказателейДляРаспределения);
			
			// Подготовим таблицу настроек распределения.
			ТабГруппировки = Новый ТаблицаЗначений;
			ТабГруппировки.Колонки.Добавить("ПолеБазы");
			ТабГруппировки.Колонки.Добавить("ПолеДанных");
			ТабГруппировки.Колонки.Добавить("ПолеНормировки");
			
			Для Ном = 1 По КоличествоСубконто Цикл
				
				Если 	Не ПустаяСтрока(ВыборкаНастройка["ПолеБазы" 	  + Ном]) 
					Или Не ПустаяСтрока(ВыборкаНастройка["ПолеДанных" 	  + Ном]) 
					Или Не ПустаяСтрока(ВыборкаНастройка["ПолеНормировки" + Ном]) Тогда
					
					НоваяСтрока = ТабГруппировки.Добавить();
					НоваяСтрока.ПолеБазы 	   = ВыборкаНастройка["ПолеБазы"	   + Ном];
					НоваяСтрока.ПолеДанных 	   = ВыборкаНастройка["ПолеДанных"	   + Ном];
					НоваяСтрока.ПолеНормировки = ВыборкаНастройка["ПолеНормировки" + Ном];
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если СтруктураПараметров.ЕстьПодразделение Тогда
			
				Если НЕ ПустаяСтрока(ВыборкаНастройка.ПолеБазы4) 
					 ИЛИ НЕ ПустаяСтрока(ВыборкаНастройка.ПолеДанных4) 
					 ИЛИ НЕ ПустаяСтрока(ВыборкаНастройка.ПолеНормировки4) Тогда
				
					НоваяСтрока = ТабГруппировки.Добавить();
					НоваяСтрока.ПолеБазы       = ВыборкаНастройка.ПолеБазы4;
					НоваяСтрока.ПолеДанных     = ВыборкаНастройка.ПолеДанных4;
					НоваяСтрока.ПолеНормировки = ВыборкаНастройка.ПолеНормировки4;
				
				КонецЕсли; 
			
			КонецЕсли; 
			
			Если ТабГруппировки.Количество() = 0 Тогда
				ТабГруппировки = Неопределено;
			КонецЕсли;
			
			// Получим данные по источникам для распределения.
			СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
			СтрПар.ОтборВОтчете = ТаблицаОтбора;
			
			РезультатДанные = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ВыборкаНастройка.Данные
			                                                                         ,НачГраница
																					 ,КонГраница
																					 ,СтрПар);
																					 
			РезультатБаза   = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ВыборкаНастройка.База
			                                                                         ,НачГраница
																					 ,КонГраница
																					 ,СтрПар);
																					
			// Проверим наличие колонок таблиц для распределения.
			Если ВыполнитьПроверкуКолонокТаблицДляРаспределения(ВыборкаНастройка, РезультатДанные, РезультатБаза, МассивПоказателей) Тогда
				Возврат;
			КонецЕсли; 
			
			// Подготовим таблицы для распределения.
			ТаблицаДанные   = ПодготовитьТаблицуДляРаспределения(РезультатДанные);
			ТаблицаБаза     = ПодготовитьТаблицуДляРаспределения(РезультатБаза);
			
			// Выполним распределение.
			Результат = РаспределитьПоБазе(ТаблицаДанные, ТаблицаБаза,, ТабГруппировки, НачГраница, 
										   КонГраница, Организация, СписокПоказателейДляРаспределения,,,, Истина);
											   
			ПерваяСтрокаДанных = Истина;
			
			ТекДанные = Результат.Выбрать();
			Пока ТекДанные.Следующий() Цикл
				
				// Проверим наличие необходимых колонок.
				Если ПерваяСтрокаДанных Тогда
					Если ВыполнитьПроверкуКолонок(ВыборкаНастройка, ТекДанные, КоличествоСубконто, КоличествоРесурсов, Истина) Тогда
						Возврат;
					КонецЕсли;	
				КонецЕсли;
				
				// Если счет базы не заполнен, тогда
				Если Не ЗначениеЗаполнено(ТекДанные.БазаСчет) Тогда
					
					СписокСумм = "";
					
					Для Каждого Поле Из МассивПоказателей Цикл
						
						ТекСумма   = ТекДанные["Данные" + Поле];
						СписокСумм = СписокСумм + ?(ПустаяСтрока(СписокСумм), "", ", ")
									 + Поле + ": " + ?(ЗначениеЗаполнено(ТекСумма), ТекСумма, "0,00");
									 
					КонецЦикла;
					
					СписокСубконто = "";
					
					Для Ном = 1 По КоличествоСубконто Цикл
						
						ТекСубконто    = ТекДанные["ДанныеСубконто" + Ном];
						СписокСубконто = СписокСубконто + ?(ПустаяСтрока(СписокСубконто), "", ", ")
										 + "Субконто" + Ном + ": " + ?(ЗначениеЗаполнено(ТекСубконто), ТекСубконто, "<...>");
					КонецЦикла;
					
					Если СтруктураПараметров.ЕстьПодразделение Тогда
					
						СписокСубконто = СписокСубконто + ?(ПустаяСтрока(СписокСубконто), "", ", ")
										 + "Подразделение: " + ?(ЗначениеЗаполнено(ТекСубконто), ТекСубконто, "<...>");
					
					КонецЕсли; 
					
					ТекстСообщения = "Не найдена база распределения для " 
									+ СписокСубконто + ", " + СписокСумм;
									
					бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,, СтатусСообщения.Информация);
					
					Продолжить;	
				КонецЕсли; 
				
				// Проверим заполненность ресурсов.
				Если Не ЗначениеРесурсовЗаполнено(ВыборкаНастройка, ТекДанные, КоличествоРесурсов, Истина) Тогда
					// Не заполнен ни один из указанных ресурсов.
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТабличнаяЧастьЗакрытие.Добавить();
				НоваяСтрока.Счет = ТекДанные.ДанныеСчет;
				
				Если ЗначениеЗаполнено(ВыборкаНастройка.СчетЗакрытия) Тогда
					НоваяСтрока.СчетЗакрытия = ВыборкаНастройка.СчетЗакрытия;
				Иначе	
					НоваяСтрока.СчетЗакрытия = ТекДанные.БазаСчет;
				КонецЕсли; 
				
				НоваяСтрока.ДтКт = ВыборкаНастройка.ДтКт;
				
				Аналитики = Новый Соответствие;
				
				// Заполним субконто исходного счета.
				Для Ном = 1 По КоличествоСубконто Цикл
					
					ЗначениеДанные = ТекДанные["ДанныеСубконто" + Ном];  
					
					Если ЗначениеЗаполнено(ЗначениеДанные) Тогда
						
						НоваяСтрока["Субконто" + Ном] = ЗначениеДанные;
						Аналитики.Вставить(ТипЗнч(ЗначениеДанные), ЗначениеДанные);						
						
					КонецЕсли; 
					
				КонецЦикла;
				
				// Получим данные по субконто счета закрытия.
                СвСчЗк = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НоваяСтрока.СчетЗакрытия);
                КолВоСубконтоСчетаЗакрытия = СвСчЗк.КоличествоСубконто;
				
				// Заполним субконто закрытия.
				Для Ном = 1 по КоличествоСубконто Цикл
					
					ИмяСубконтоЗакрытия = "СубконтоЗакрытия" + Ном;
					СпособЗаполнения = ВыборкаНастройка["СпособЗаполненияСубконто" + Ном];
					
					// Заполним субконто закрытия.
					Если СпособЗаполнения = "Явно" Тогда
						НоваяСтрока[ИмяСубконтоЗакрытия] = ВыборкаНастройка[ИмяСубконтоЗакрытия];
						
					ИначеЕсли НЕ ПустаяСтрока(СпособЗаполнения) Тогда	
						НоваяСтрока[ИмяСубконтоЗакрытия] = ТекДанные[СпособЗаполнения];					
						
					КонецЕсли; 
										
				КонецЦикла;	
				
				// Заполним данные по подразделениям организации.
				Если СтруктураПараметров.ЕстьПодразделение Тогда
                    
                    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НоваяСтрока.Счет);                    
					Если СвСч.УчетПоПодразделениям Тогда
						
						НоваяСтрока.Подразделение = ТекДанные.ДанныеПодразделение;
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.Подразделение) Тогда
							
							НоваяСтрока.Подразделение = ТекДанные.БазаПодразделение;
							
						КонецЕсли; 
						
					КонецЕсли; 
                    
                    СпособЗаполнения = ВыборкаНастройка.СпособЗаполненияПодразделения;
					Если ЗначениеЗаполнено(СпособЗаполнения) И СвСчЗк.УчетПоПодразделениям Тогда
					
						 Если СпособЗаполнения = "Явно" Тогда
							 
							 НоваяСтрока.ПодразделениеЗакрытия = ВыборкаНастройка.ПодразделениеЗакрытия;
							 
						 Иначе	
							 
							 НоваяСтрока.ПодразделениеЗакрытия = ТекДанные[СпособЗаполнения];
							 
						 КонецЕсли; 
					
					КонецЕсли; 
				
				КонецЕсли; // ЕстьПодразделение
				
				
				// Заполним данные по ЦФО.
				Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяЦФО) Тогда
					НоваяСтрока.ЦФО = ТекДанные["Данные" + ВыборкаНастройка.ИмяПоказателяЦФО];
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЦФО) Тогда
					
					  НоваяСтрока.ЦФО = ТекДанные["База" + ВыборкаНастройка.ИмяПоказателяЦФО];
					
					КонецЕсли; 
				КонецЕсли;
				
				// Заполним данные по количеству.
				Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяКоличество) Тогда
					НоваяСтрока.Количество = ТекДанные[ВыборкаНастройка.ИмяПоказателяКоличество + "Распределения"];
				КонецЕсли; 
				
				// Заполним данные по виду учета.
				Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяВидУчета) Тогда
					НоваяСтрока.ВидУчета = ТекДанные["Данные" + ВыборкаНастройка.ИмяПоказателяВидУчета];
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидУчета) Тогда
					
					  НоваяСтрока.ВидУчета = ТекДанные["База" + ВыборкаНастройка.ИмяПоказателяВидУчета];
					
					КонецЕсли; 
				КонецЕсли;
				
				// Заполним данные по валютам.
				Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяВалюта) Тогда
					НоваяСтрока.Валюта = ТекДанные["Данные" + ВыборкаНастройка.ИмяПоказателяВалюта];
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
					
					  НоваяСтрока.Валюта = ТекДанные["База" + ВыборкаНастройка.ИмяПоказателяВалюта];
					
					КонецЕсли; 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяВалютнаяСумма) Тогда
					НоваяСтрока.ВалютнаяСумма = ТекДанные[ВыборкаНастройка.ИмяПоказателяВалютнаяСумма + "Распределения"];
				КонецЕсли;
				
				// Заполним суммы из ресурсов.
				Для Каждого ТекИмя Из ИменаРесурсов Цикл
					НоваяСтрока[ТекИмя.ИмяРеквизита] = ТекДанные[ВыборкаНастройка["ИмяПоказателяСумма" + ТекИмя.НомерСтроки] + "Распределения"];
				КонецЦикла;
				
				НоваяСтрока.Содержание   = ВыборкаНастройка.Содержание;
				НоваяСтрока.НомерЖурнала = ВыборкаНастройка.НомерЖурнала;
				
				ПерваяСтрокаДанных = Ложь;
				
			КонецЦикла; // Пока ТекДанные.Следующий() Цикл
			
		КонецЦикла; // Пока ВыборкаНастройка.Следующий() Цикл
		
	КонецЕсли; // Если Не РезультатИзЗапроса.Пустой() Тогда.
	
КонецПроцедуры // ЗаполнитьДанныеЗакрытияCРаспределением()

// Функция выполняет проверку наличия необходимых колонок в таблице данных.
// 
// Параметры:
//  ВыборкаНастройка   - ВыборкаИзРезультатаЗапроса.
//  ВыборкаДанные      - ВыборкаИзРезультатаЗапроса.
//  КоличествоСубконто - Число.
//  КоличествоРесурсов - Число.
//  ЭтоРаспределение   - Булево, по умолчанию Ложь.
// 
// Возвращаемое значение:
//  Отказ - Булево.
//                
Функция ВыполнитьПроверкуКолонок(ВыборкаНастройка, ВыборкаДанные, КоличествоСубконто, 
								 КоличествоРесурсов, ЭтоРаспределение = Ложь)

	Отказ = Ложь;
	ДопТекст = ?(ЭтоРаспределение, "Данные", "");
	
	МассивИменДляПроверки = Новый Массив;
	МассивИменДляПроверки.Добавить(ДопТекст + "Счет");
	
	// Добавим имена колонок с субконто для проверки.
	Для Ном = 1 По КоличествоСубконто Цикл
		МассивИменДляПроверки.Добавить(ДопТекст + "Субконто" + Ном);
	КонецЦикла;
		
	// Добавим имена колонок по способам заполнения субконто для проверки.
	Для Ном = 1 По КоличествоСубконто Цикл
		
		СпособЗаполнения = СокрЛП(ВыборкаНастройка["СпособЗаполненияСубконто" + Ном]);
		
		Если ПустаяСтрока(СпособЗаполнения)
			Или СпособЗаполнения = "Явно" Тогда
			Продолжить;
		КонецЕсли;			
		
		Если МассивИменДляПроверки.Найти(СпособЗаполнения) = Неопределено Тогда
			МассивИменДляПроверки.Добавить(СпособЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекИмяКолонки Из МассивИменДляПроверки Цикл
	
		// Проверим наличие колонки.
		Попытка
			ТекЗн = ВыборкаДанные[ТекИмяКолонки];
		Исключение
			
			Если Найти(ТекИмяКолонки, "База") > 0 Тогда
				ТекстИсточник = "базы";
			Иначе
				ТекстИсточник = "данных";
			КонецЕсли;
			
			ТекИмяКолонки = СтрЗаменить(ТекИмяКолонки, "Данные", "");
			ТекИмяКолонки = СтрЗаменить(ТекИмяКолонки, "База", "");
			
			ТекстСообщения = "Таблица " + ТекстИсточник + " не содержит колонки """ + ТекИмяКолонки 
							 + """. Заполнение не возможно. Проверьте текст запроса " + ТекстИсточник + " настройки """ 
							 + ВыборкаНастройка.Ссылка + """ строка № " + ВыборкаНастройка.НомерСтроки + ".";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
		КонецПопытки;
	
	КонецЦикла;
	
	МассивИменИзНастройкиДляПроверки = Новый Массив;
	
	// Добавим имена количества, вида учета и валютных показателей для проверки.
	
	Если Не ЭтоРаспределение Тогда
		
		МассивИменИзНастройкиДляПроверки.Добавить(ВыборкаНастройка.ИмяПоказателяЦФО);
		МассивИменИзНастройкиДляПроверки.Добавить(ВыборкаНастройка.ИмяПоказателяКоличество);
		МассивИменИзНастройкиДляПроверки.Добавить(ВыборкаНастройка.ИмяПоказателяВидУчета);
		МассивИменИзНастройкиДляПроверки.Добавить(ВыборкаНастройка.ИмяПоказателяВалюта);
		МассивИменИзНастройкиДляПроверки.Добавить(ВыборкаНастройка.ИмяПоказателяВалютнаяСумма);
		
	Иначе
		
		Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяЦФО) Тогда
			МассивИменИзНастройкиДляПроверки.Добавить("Данные" + ВыборкаНастройка.ИмяПоказателяЦФО);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяКоличество) Тогда
			МассивИменИзНастройкиДляПроверки.Добавить(ВыборкаНастройка.ИмяПоказателяКоличество + "Распределения");
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяВидУчета) Тогда
			МассивИменИзНастройкиДляПроверки.Добавить("Данные" + ВыборкаНастройка.ИмяПоказателяВидУчета);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяВалюта) Тогда
			МассивИменИзНастройкиДляПроверки.Добавить("Данные" + ВыборкаНастройка.ИмяПоказателяВалюта);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяВалютнаяСумма) Тогда
			МассивИменИзНастройкиДляПроверки.Добавить(ВыборкаНастройка.ИмяПоказателяВалютнаяСумма + "Распределения");
		КонецЕсли;
		
	КонецЕсли;
		
	ДопТекст = ?(ЭтоРаспределение, "Распределения", "");
	
	// Добавим имена суммовых показателей для проверки.
	Для Ном = 1 По КоличествоРесурсов Цикл
		МассивИменИзНастройкиДляПроверки.Добавить(ВыборкаНастройка["ИмяПоказателяСумма" + Ном] + ДопТекст);
	КонецЦикла;
	
	// Проверим наличие колонок в таблице данных.
	Для Каждого ТекИмяКолонки Из МассивИменИзНастройкиДляПроверки Цикл
		
		Если ЗначениеЗаполнено(ТекИмяКолонки) Тогда
			
			Попытка
				ТекЗн = ВыборкаДанные[ТекИмяКолонки];
			Исключение
				
				ТекИмяКолонки = СтрЗаменить(ТекИмяКолонки, "Данные", "");
				ТекИмяКолонки = СтрЗаменить(ТекИмяКолонки, "Распределения", "");
				
				ТекстСообщения = "Таблица данных не содержит колонки """ + ТекИмяКолонки 
								 + """. Заполнение не возможно. Проверьте настройку """ 
								 + ВыборкаНастройка.Ссылка + """ строка № " + ВыборкаНастройка.НомерСтроки + ".";
								 
				бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
				
			КонецПопытки;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции // ВыполнитьПроверкуКолонок()

// Функция выполняет проверку наличия необходимых колонок в таблицах данных для распределения.
// 
// Параметры:
//  ВыборкаНастройка   - ВыборкаИзРезультатаЗапроса.
//  ТаблицаДанные      - ТаблицаЗначений.
//  ТаблицаБаза        - ТаблицаЗначений.
//  МассивПоказателей  - Массив.
// 
// Возвращаемое значение:
//  Отказ - Булево.
// 
функция ВыполнитьПроверкуКолонокТаблицДляРаспределения(ВыборкаНастройка, ТаблицаДанные, ТаблицаБаза, МассивПоказателей)
	
	Отказ = Ложь;
	
	КолонкиДанные = ТаблицаДанные.Колонки;
	КолонкиБаза   = ТаблицаБаза.Колонки;
	
	МассивИменДляПроверки = Новый Массив;
	МассивИменДляПроверки.Добавить("ДанныеСчет");
	МассивИменДляПроверки.Добавить("БазаСчет");
	
	Для Каждого Поле Из МассивПоказателей Цикл
		МассивИменДляПроверки.Добавить("Данные" + Поле);
		МассивИменДляПроверки.Добавить("База" 	+ Поле);
	КонецЦикла;
	
    Для Каждого ТекИмяКолонки Из МассивИменДляПроверки Цикл
		
		Если Найти(ТекИмяКолонки, "База") > 0 Тогда
			
			ТекИмяКолонки = СтрЗаменить(ТекИмяКолонки, "База", "");
			ТекстИсточник = "данных";
			
			КолонкиДляПроверки = КолонкиДанные;
			
		Иначе
			
			ТекИмяКолонки = СтрЗаменить(ТекИмяКолонки, "Данные", "");
			ТекстИсточник = "базы";
			
			КолонкиДляПроверки = КолонкиБаза;
			
		КонецЕсли;
		
		// Проверим наличие колонки.
		Попытка
			ТекКолонка = КолонкиДляПроверки[ТекИмяКолонки];
		Исключение
			
			ТекстСообщения = "Таблица " + ТекстИсточник + " не содержит колонки """ + ТекИмяКолонки 
							 + """. Заполнение не возможно. Проверьте текст запроса и синоним колонки " + ТекстИсточник + " настройки """ 
							 + ВыборкаНастройка.Ссылка + """ строка № " + ВыборкаНастройка.НомерСтроки + ".";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
		КонецПопытки;
	
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции // ВыполнитьПроверкуКолонокТаблицДляРаспределения()

// Функция выполняет проверку наличия значений ресурсов данных.
// 
// Параметры:
//  ВыборкаНастройка   - ВыборкаИзРезультатаЗапроса.
//  ВыборкаДанные 	   - ВыборкаИзРезультатаЗапроса.
//  КоличествоРесурсов - Число.
//  ЭтоРаспределение   - Булево, по умолчанию Ложь.
// 
// Возвращаемое значение:
//  ЕстьЗаполненныйРесурс - Булево.
// 
Функция ЗначениеРесурсовЗаполнено(ВыборкаНастройка, ВыборкаДанные, КоличествоРесурсов, ЭтоРаспределение = Ложь)
	
	ЕстьЗаполненныйРесурс = Ложь;
	
	ДопТекст = ?(ЭтоРаспределение, "Распределения", "");
	
	Для Ном = 1 По КоличествоРесурсов Цикл
		
		ТекСумма = ВыборкаДанные[ВыборкаНастройка["ИмяПоказателяСумма" + Ном] + ДопТекст];
		
		Если Не ЗначениеЗаполнено(ТекСумма) Тогда
			Продолжить;
		КонецЕсли; 
		
		СуммаЗакрытия = Окр(ТекСумма, 2, 1);
		
		Если Не бит_ОбщегоНазначения.МодульЧисла(СуммаЗакрытия) < 0.01 Тогда
			ЕстьЗаполненныйРесурс = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьЗаполненныйРесурс;
	
КонецФункции // ЗначениеРесурсовЗаполнено()

// Готовит таблицу для передачи в процедуру распределения. 
// 
// Параметры:
//  ИсходнаяТаблица - ТаблицаЗначений.
// 
// Возвращаемое значение:
//   РезТаблица - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуДляРаспределения(ИсходнаяТаблица)

	ОписаниеЛюбаяСсылка = бит_ОбщегоНазначения.ОписаниеЛюбаяСсылка();
	
	РезТаблица = Новый ТаблицаЗначений;
	
	Для каждого Колонка Из ИсходнаяТаблица.Колонки Цикл
		
		Если ЗначениеЗаполнено(Колонка.ТипЗначения) Тогда
			
			МассивИсключаемыхТипов = Новый Массив;
			МассивИсключаемыхТипов.Добавить(Тип("NULL"));
			МассивИсключаемыхТипов.Добавить(Тип("Неопределено"));
			Описание = Новый ОписаниеТипов(Колонка.ТипЗначения,, МассивИсключаемыхТипов);
			
		Иначе	
			
			Описание = ОписаниеЛюбаяСсылка;
			
		КонецЕсли; 
		
		
		РезТаблица.Колонки.Добавить(Колонка.Имя, Описание);
	
	КонецЦикла; 
	
	Для каждого СтрокаТЗ Из ИсходнаяТаблица Цикл
	
		НоваяСтрока = РезТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
	
	КонецЦикла; 
	
	Возврат РезТаблица;
  
КонецФункции // ПодготовитьТаблицуДляРаспределения()

// Функция получаем список показателей для распределения.
// 
// Параметры:
//  ВыборкаНастройка   - ВыборкаИзРезультатаЗапроса.
//  КоличествоРесурсов - Число.
// 
// Возвращаемое значение:
//  СписокПоказателей - Строка.
// 
Функция ПолучитьСписокПоказателейДляРаспределения(ВыборкаНастройка, КоличествоРесурсов)
	
	СписокПоказателей = "";
	
	// Выполним распределение по ресурсам.
	Для Ном = 1 По КоличествоРесурсов Цикл
		СписокПоказателей = СписокПоказателей + "," 
							+ ВыборкаНастройка["ИмяПоказателяСумма" + Ном];
	КонецЦикла;
	
	// Добавим показатель по количеству.
	Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяКоличество) Тогда
		СписокПоказателей = СписокПоказателей + "," 
							+ ВыборкаНастройка.ИмяПоказателяКоличество;
	КонецЕсли; 
	
	// Добавим показатель по валютной сумме.
	Если ЗначениеЗаполнено(ВыборкаНастройка.ИмяПоказателяВалютнаяСумма) Тогда
		СписокПоказателей = СписокПоказателей + "," 
							+ ВыборкаНастройка.ИмяПоказателяВалютнаяСумма;
	КонецЕсли; 
	
	СписокПоказателей = Сред(СписокПоказателей, 2);
	
	Возврат СписокПоказателей;
	
КонецФункции // ПолучитьСписокПоказателейДляРаспределения()

// Функция получает таблицу отбора запроса источника.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 						  Обязательные ключи: 
//    					  Организация - СправочникСсылка.Организации, СправочникСсылка.СценарииПланирования.
// 
// Возвращаемое значение:
//  ТаблицаОтбора - ТаблицаЗначений.
// 
Функция ПолучитьТаблицуОтбораЗапросаИсточника(СтруктураПараметров)
	
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Использование");
	ТаблицаОтбора.Колонки.Добавить("Имя");
	ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
	ТаблицаОтбора.Колонки.Добавить("Значение");
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		
		НоваяСтрока = ТаблицаОтбора.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Имя			  = "Организация";
		НоваяСтрока.ВидСравнения  = ВидСравнения.Равно;
		НоваяСтрока.Значение	  = СтруктураПараметров.Организация;
		
	КонецЕсли; 
	
	Если СтруктураПараметров.Свойство("Сценарий") Тогда
		
		НоваяСтрока = ТаблицаОтбора.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Имя			  = "Сценарий";
		НоваяСтрока.ВидСравнения  = ВидСравнения.Равно;
		НоваяСтрока.Значение	  = СтруктураПараметров.Сценарий;
		
	КонецЕсли; 
	
	Возврат ТаблицаОтбора;
	
КонецФункции // ПолучитьТаблицуОтбораЗапросаИсточника()

#КонецОбласти
