
#Область СлужебныйПрограммныйИнтерфейс

#Область Подписки

// Процедура обработчик подписки "бит_ПередЗаписьюСправочникаПраваДоступа" на событие  "ПередЗаписью".
// 
// Параметры:
//  Источник - СправочникОбъект.
//  Отказ    - Булево.
// 
Процедура бит_ПередЗаписьюСправочникаПраваДоступаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьРазделениеДоступаНаУровнеБазы") Тогда
		Возврат;	
	КонецЕсли; 

	Если НЕ Отказ Тогда
		
		Если (Метаданные.Справочники.Найти("Пользователи") <> Неопределено И ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи"))
			ИЛИ (Метаданные.Справочники.Найти("ИдентификаторыОбъектовМетаданных") <> Неопределено И ТипЗнч(Источник) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных")) 
			ИЛИ (Метаданные.Справочники.Найти("ИдентификаторыОбъектовРасширений") <> Неопределено И ТипЗнч(Источник) = Тип("СправочникОбъект.ИдентификаторыОбъектовРасширений")) 
			ИЛИ (Метаданные.Справочники.Найти("ГруппыДоступа") <> Неопределено И ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыДоступа")) 			
			Тогда		
			Возврат;                                                                                                                                                                  		
		КонецЕсли; 				
		
		События = ПроверитьПраваДоступа(Источник, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
		ОповеститьОбОтсутствииДоступа(Источник,События,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // бит_ПередЗаписьюСправочникаПраваДоступаПередЗаписью()

// Процедура обработчик подписки "бит_ПриКопированииСправочникаПраваДоступа" на событие  "ПриКопировании".
// 
// Параметры:
//  Источник          - СправочникОбъект.
//  ОбъектКопирование - СправочникОбъект.
// 
Процедура бит_ПриКопированииСправочникаПраваДоступаПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	КонецЕсли; 		
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьРазделениеДоступаНаУровнеБазы") Тогда
		Возврат;	
	КонецЕсли; 

	Отказ = Ложь;
	ТекущиеСобытия = Новый Структура;
	ТекущиеСобытия.Вставить("Редактирование",Ложь);
	ТекущиеСобытия.Вставить("Создание",Ложь);		
	ТекущиеСобытия.Вставить("Копирование",Ложь);	
	
	События = ПроверитьПраваДоступа(Источник, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"),,ТекущиеСобытия);
	ОповеститьОбОтсутствииДоступа(Источник,События,Отказ);			
	
	Если Отказ Тогда
		Источник.ДополнительныеСвойства.Вставить("Отказ",Истина);
	КонецЕсли;
	
КонецПроцедуры // бит_ПриКопированииСправочникаПраваДоступаПриКопировании()

// Процедура обработчик подписки "бит_ПередЗаписьюДокументаПраваДоступа" на событие  "ПередЗаписью".
// 
// Параметры:
//  Источник        - ДокументОбъект.
//  Отказ           - Булево.
//  РежимЗаписи     - РежимЗаписиДокумента.
//  РежимПроведения - РежимПроведенияДокумента.
// 
Процедура бит_ПередЗаписьюДокументаПраваДоступаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	КонецЕсли; 			
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьРазделениеДоступаНаУровнеБазы") Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		События = ПроверитьПраваДоступа(Источник, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"),РежимЗаписи);
		ОповеститьОбОтсутствииДоступа(Источник,События,Отказ);
	КонецЕсли; 
	
КонецПроцедуры // бит_ПередЗаписьюДокументаПраваДоступаПередЗаписью()

// Процедура обработчик подписки "бит_ПриКопированииСправочникаПраваДоступа" на событие  "ПриКопировании".
// 
// Параметры:
//  Источник          - ДокументОбъект.
//  ОбъектКопирование - ДокументОбъект.
// 
Процедура бит_ПриКопированииДокументаПраваДоступаПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	КонецЕсли; 			
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьРазделениеДоступаНаУровнеБазы") Тогда
		Возврат;	
	КонецЕсли; 
	
	Отказ = Ложь;
	ТекущиеСобытия = Новый Структура;
	ТекущиеСобытия.Вставить("Редактирование",Ложь);
	ТекущиеСобытия.Вставить("Создание",Ложь);		
	ТекущиеСобытия.Вставить("Копирование",Ложь);	
	
	События = ПроверитьПраваДоступа(Источник, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"),,ТекущиеСобытия);
	ОповеститьОбОтсутствииДоступа(Источник,События,Отказ);			
	
	Если Отказ Тогда
		Источник.ДополнительныеСвойства.Вставить("Отказ",Истина);
	КонецЕсли; 
	
КонецПроцедуры // бит_ПриКопированииДокументаПраваДоступаПриКопировании()

// Процедура обработчик подписки "бит_ПередЗаписьюРегистраСведенийПраваДоступа" на событие  "ПередЗаписью".
// 
// Параметры:
//  Источник  - РегистрСведенийНаборЗаписей.
//  Отказ     - Булево.
//  Замещение - Булево.
// 
Процедура бит_ПередЗаписьюРегистраСведенийПраваДоступаПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
	КонецЕсли;
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	КонецЕсли; 			
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьРазделениеДоступаНаУровнеБазы") Тогда
		Возврат;	
	КонецЕсли; 

	МетаданныеРегистра = Источник.Метаданные();
	
	Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		Возврат;
	КонецЕсли; 
	
	Если ((Метаданные.РегистрыСведений.Найти("РезультатыОбменаДанными") <> Неопределено И ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.РезультатыОбменаДанными"))
		ИЛИ (Метаданные.РегистрыСведений.Найти("ПраваРолей") <> Неопределено И ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ПраваРолей"))) Тогда		
		Возврат;  		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		События = ПроверитьПраваДоступа(Источник, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
		ОповеститьОбОтсутствииДоступа(Источник,События,Отказ);
	КонецЕсли; 
	
КонецПроцедуры // бит_ПередЗаписьюРегистраСведенийПраваДоступаПередЗаписью()
 
#КонецОбласти

#Область ПраваДоступа

// Определяет, достаточно ли у пользователя прав для обновления ИБ.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ПроверитьПраваДляОбновления() Экспорт
		
	// Проверка наличия прав для обновления информационной базы.
	флЕстьПрава = Истина;
    
    Если НЕ ПравоДоступа("МонопольныйРежим" , Метаданные) 
		ИЛИ НЕ ПравоДоступа("Изменение"        , Метаданные.Константы.бит_ИспользоватьРазделениеДоступаНаУровнеБазы) 			 
		ИЛИ НЕ ПравоДоступа("Изменение"        , Метаданные.Справочники.бит_ОбъектыСистемы)
		ИЛИ НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		
		флЕстьПрава = Ложь;
		
	КонецЕсли;
	
	Возврат флЕстьПрава;
	
КонецФункции // ПроверитьПраваДляОбновления()

// Фукнция определяет доступность определенного права по отношению к выбранному
// объекту метаданных.
//
// Параметры:
//  Право      - Строка.
//  ИмяОбъекта - Строка.
//
Функция ЕстьПравоДоступа(Право, ИмяОбъекта) Экспорт

	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	
	Результат = ПравоДоступа(Право, ОбъектМетаданных);
		
    Возврат Результат;	

КонецФункции // ЕстьПравоДоступа() 

// Функция проверяет наличие механизма разделения прав доступа на уровне базы.
// 
// Параметры:
//  ВыводитьСообщения - Булево (По умолчанию = Ложь).
//
// Возвращаемое значение:
//  Булево.
// 
Функция ЕстьМеханизмПравДоступа(ВыводитьСообщения = Ложь)  Экспорт

    Если Метаданные.ОбщиеМодули.Найти("бит_ПраваДоступаОсновной") = Неопределено Тогда
        
        ЕстьМеханизм = Ложь;
        Если ВыводитьСообщения Тогда
            бит_ОбщегоНазначения.СообщитьОбОшибке("Механизм разделения прав доступа на уровне базы отстутствует в данной версии.",,,СтатусСообщения.Информация);
        КонецЕсли;
    
    Иначе
        
        ЕстьМеханизм = Истина;
        
    КонецЕсли; 	

    Возврат ЕстьМеханизм;
 
КонецФункции // ЕстьМеханизмПравДоступа()

// Формирует массив с именами объектов, на которые не распространяется механизм разделение прав доступа
// на уровне базы.
// 
Функция СформироватьМассивИменИсключений() Экспорт

    МассивИсключений = Новый Массив;

    // Объекты, используемые в механизме разделения прав доступа - 
    // право определяется наличием роли бит_АдминистраторПравДоступа.
    МассивИсключений.Добавить("бит_ОбъектыСистемы");
    МассивИсключений.Добавить("бит_ОбластиДоступа");
    МассивИсключений.Добавить("бит_ШаблоныПравДоступа");
    МассивИсключений.Добавить("бит_ПраваДоступа");
    МассивИсключений.Добавить("бит_НастройкаПравДоступа");

    // Объекты используемые в механизме МХО.
    МассивИсключений.Добавить("бит_ЗначенияРеквизитовПроводок");
    МассивИсключений.Добавить("бит_НазначениеРеквизитовПроводок");
    МассивИсключений.Добавить("бит_ДанныеОтладкиПроведения");
    МассивИсключений.Добавить("бит_ИспользованиеПроводокДляДокументов");

    // Используется в механизме хранения истории редактирования справочников.
    МассивИсключений.Добавить("бит_ИсторияРедактированияРеквизитов");

    // Настройки пользователей.
    МассивИсключений.Добавить("НастройкиПользователей");
    МассивИсключений.Добавить("КонтактнаяИнформация");
    МассивИсключений.Добавить("КонтактныеЛица");
	
	// Лицензирование и УК.
	МассивИсключений.Добавить("бит_ук_Служебный");
	МассивИсключений.Добавить("бит_сл_СерверныеСеансы");
	
    Возврат МассивИсключений;

КонецФункции // БитСформироватьМассивИменИсключений()

// Процедура проверяет наличие прав доступа у данного пользователя на определенные действия над данным объектом
// перечень событий может быть передан в процедуру в виде структуры, либо может определяться автоматически, 
// в зависимости от вида и состояния объекта.
// 
// Параметры:
//  ТекущийОбъект       - СправочникОбъект,ДокументОбъект.
//  ТекущийПользователь - СправочникСсылка.Пользователи.
//  РежимЗаписи         - РежимЗаписиДокумента.
//  ТекущиеСобытия      - Структура - ключ: строка- имя события, значение: булево - доступность события.
//  ДопПараметры        - Структура - Задел на будущее.
// 
Функция ПроверитьПраваДоступа(ТекущийОбъект
								 , ТекущийПользователь
								 , РежимЗаписи = Неопределено
								 , ТекущиеСобытия = Неопределено
								 , ДопПараметры = Неопределено) Экспорт
								 
	Если НЕ ЕстьМеханизмПравДоступа() Тогда	
    	Возврат Новый Структура;	
	КонецЕсли; 							 
	
	События = Новый Структура;
	
	События = бит_ПраваДоступаОсновной.ПроверитьПраваДоступа(ТекущийОбъект
                                                            , ТекущийПользователь
                                                            , РежимЗаписи
                                                            , ТекущиеСобытия,ДопПараметры);
	
	Возврат События;
	
КонецФункции // ПроверитьПраваДоступа()	
  
// Функция определяет вид объекта по метаданным объекта.
// 
// Параметры:
//  МетаданныеОбъекта - ОбъектМетаданных.
// 
// Возвращаемое значение:
//   ПеречислениеСсылка.бит_ВидыОбъектовСистемы.
// 
Функция ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта)  Экспорт

    ВидОбъекта = бит_УправлениеОбъектамиСистемы.ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);

    Возврат ВидОбъекта;

КонецФункции // ПолучитьВидОбъектаПоМетаданным()
 
// Функция получает полное имя объекта.
// 
// Параметры:
//  ИмяОбъекта - Строка - Краткое имя объекта.
//  ВидОбъекта - ПеречислениеСсылка.бит_ВидыОбъектовСистемы.
// 
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьПолноеИмяОбъекта(ИмяОбъекта,ВидОбъекта) Экспорт
    
    // РезСтрока = Строка(ВидОбъекта)+"."+ИмяОбъекта;
	РезСтрока = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ВидыОбъектовСистемы, ВидОбъекта) + "." + ИмяОбъекта;	
    Возврат РезСтрока;
    
КонецФункции // ПолучитьПолноеИмяОбъекта()

// Функция получает имя типа объекта.
// 
// Параметры:
//  ИмяОбъекта - Строка - Краткое имя объекта.
//  ВидОбъекта - ПеречислениеСсылка.бит_ВидыОбъектовСистемы.
// 
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьИмяТипаОбъекта(ИмяОбъекта, ВидОбъекта) Экспорт
	
	РезСтрока = бит_УправлениеОбъектамиСистемы.ПолучитьИмяТипаОбъекта(ИмяОбъекта, ВидОбъекта);
	
	Возврат РезСтрока;
    
КонецФункции // БитПолучитьПолноеИмяОбъекта()

// Получает объект доступа по метаданным объекта.
// 
// Параметры:
//  МетаданныеОбъекта - ОбъектМетаданных.
// 
// Возвращаемое значение:
//   СправочникСсылка.бит_ОбъектыСистемы.
// 
Функция ПолучитьОбъектДоступаПоМетаданным(МетаданныеОбъекта) Экспорт

    ИмяОбъекта       = МетаданныеОбъекта.Имя;
    ВидОбъекта       = ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);	
    ИмяОбъектаПолное = ПолучитьПолноеИмяОбъекта(ИмяОбъекта,ВидОбъекта);

    РезОбъект = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ИмяОбъектаПолное);

    Возврат РезОбъект;

КонецФункции // ПолучитьОбъектДоступаПоМетаданным()

// Формирует таблицу реквизитов по переданному объекту.
// 
// Параметры:
//  ТекущийОбъект     - ДокументОбъект, СправочникОбъект.
//  МетаданныеОбъекта - ОбъектМетаданных.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
// 
Функция СформироватьТаблицуРеквизитовОбъекта(ТекущийОбъект, МетаданныеОбъекта) Экспорт

	ВидОбъекта = ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);
	ИмяТипаОбъекта = ПолучитьИмяТипаОбъекта(МетаданныеОбъекта.Имя, ВидОбъекта);
	
	ТабРеквизитов = Новый ТаблицаЗначений;
	
	ОписаниеСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеЧисло  = Новый ОписаниеТипов("Число");	
	ОписаниеТипаОбъекта = Новый ОписаниеТипов(ИмяТипаОбъекта);	
	
	// Создадим колонки
	// специфические свойства для справочника и документа.
	Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда
		Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ТабРеквизитов.Колонки.Добавить("Код", ОписаниеСтрока);
		ИначеЕсли МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
			ТабРеквизитов.Колонки.Добавить("Код", ОписаниеЧисло);			
		КонецЕсли; 
		ТабРеквизитов.Колонки.Добавить("Наименование", ОписаниеСтрока);
		Если МетаданныеОбъекта.Иерархический Тогда
		    ТабРеквизитов.Колонки.Добавить("Родитель", ОписаниеТипаОбъекта);
		КонецЕсли; 
		Если МетаданныеОбъекта.Владельцы.Количество() > 0 Тогда
			ТабРеквизитов.Колонки.Добавить("Владелец");
		КонецЕсли;	
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда	
		Если МетаданныеОбъекта.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
			ТабРеквизитов.Колонки.Добавить("Номер", ОписаниеСтрока);
		ИначеЕсли МетаданныеОбъекта.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Число Тогда	
			ТабРеквизитов.Колонки.Добавить("Номер", ОписаниеЧисло);
		КонецЕсли; 
		ТабРеквизитов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	КонецЕсли; 
	ТабРеквизитов.Колонки.Добавить("Ссылка", ОписаниеТипаОбъекта);
	
	// Реквизиты объектов.
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ТабРеквизитов.Колонки.Добавить(Реквизит.Имя, Новый ОписаниеТипов(Реквизит.Тип.Типы()));
	КонецЦикла;
	
	// Заполним значения.
	НоваяСтрока = ТабРеквизитов.Добавить();
	Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		НоваяСтрока[Реквизит.Имя] = ТекущийОбъект[Реквизит.имя];
	КонецЦикла;
	Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда
		 НоваяСтрока.Код          = ТекущийОбъект.Код;
		 НоваяСтрока.Наименование = ТекущийОбъект.Наименование;
		 Если МетаданныеОбъекта.Иерархический Тогда
		    НоваяСтрока.Родитель  = ТекущийОбъект.Родитель;
		КонецЕсли; 
		Если МетаданныеОбъекта.Владельцы.Количество() > 0 Тогда
			НоваяСтрока.Владелец  = ТекущийОбъект.Владелец;
		КонецЕсли;			
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда	
		 НоваяСтрока.Номер = ТекущийОбъект.Номер;
		 НоваяСтрока.Дата  = ТекущийОбъект.Дата;
	КонецЕсли; 
	НоваяСтрока.Ссылка = ТекущийОбъект.Ссылка;
	
	Возврат ТабРеквизитов;
	
КонецФункции // БитСформироватьТаблицуРеквизитовОбъекта()

// Функция определяет доступна ли печать для данного объекта.
// 
// Параметры:
//  ЭтотОбъект  - СправочникОбъект, ДокументОбъект.
// 
// Возвращаемое значение:
//   Булево.
// 
Функция ПечатьДоступна(ЭтотОбъект) Экспорт
 
    Отказ = Ложь;

    ТекущиеСобытия = Новый Структура;
    ТекущиеСобытия.Вставить("Печать", Ложь);

    События = ПроверитьПраваДоступа(ЭтотОбъект
                                    , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
                                    ,
                                    ,ТекущиеСобытия);
                                    
    ОповеститьОбОтсутствииДоступа(ЭтотОбъект, События, Отказ);			
     
    Возврат НЕ Отказ; 
 
КонецФункции // ПечатьДоступна()
 
// Функция формирует массив объектов системы (доступа).
// 
// Параметры
//  ВидыОбъекта 	   - Массив, "ПеречислениеСсылка.бит_ВидыОбъектовСистемы".
//  МассивИменОбъектов - Массив, массив имен объектов коллекции метаданных,
// 						 не обязательный.
// 
// Возвращаемое значение:
//   СписокОбъектов - СписокЗначений.
// 
Функция ПолучитьМассивОбъектовСистемыПоВидуИМассивуИмен(ВидыОбъекта, МассивИменОбъектов = Неопределено) Экспорт
	
	МассивОбъектов = Новый Массив;
	
	// Заполняем массив объектов доступа.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОбъекта", ВидыОбъекта);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ОбъектыСистемы.Ссылка
	|ИЗ
	|	Справочник.бит_ОбъектыСистемы КАК бит_ОбъектыСистемы
	|ГДЕ
	|	бит_ОбъектыСистемы.ВидОбъекта В(&ВидОбъекта)
	|	И (НЕ бит_ОбъектыСистемы.ЭтоГруппа)";
	
	Если Не МассивИменОбъектов = Неопределено Тогда
		
		Запрос.УстановитьПараметр("МассивИменОбъектов", МассивИменОбъектов);
		
		Запрос.Текст = Запрос.Текст + "
					   |	И бит_ОбъектыСистемы.ИмяОбъекта В(&МассивИменОбъектов)";
	КонецЕсли;
	
	РезультатИзЗапроса = Запрос.Выполнить();
	
	Если Не РезультатИзЗапроса.Пустой() Тогда
		
		ВыборкаИзЗапроса = РезультатИзЗапроса.Выбрать();
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл
			МассивОбъектов.Добавить(ВыборкаИзЗапроса.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции // ПолучитьМассивОбъектовСистемыПоВидуИМассивуИмен()

// Функция получает синоним объекта системы (доступа).
// 
// Параметры
//  МетаданныеОбъекта - МетаданныеОбъекта (любого объекта конфигурации), СправочникСсылка.бит_ОбъектыСистемы.
//  ВидФормы          - ПеречислениеСсылка.бит_ВидыФормОбъекта, по умолчанию "Списка", не обязателен.
// 
// Возвращаемое значение:
//   СинонимОбъекта - Строка.
// 
Функция ПолучитьСинонимОбъектаСистемы(МетаданныеОбъекта, ВидФормы = Неопределено) Экспорт
	
	СтруктураСвойств = Новый Структура("Заголовок");
	
	// Проверим доступность механизм управленческого учета в данной версии.
	Если бит_ОбщегоНазначения.ЕстьМеханизмУправленческогоУчета() Тогда
		
		Если ВидФормы = Неопределено Тогда
			ВидФормы = Перечисления.бит_ВидыФормОбъекта.Списка;
		КонецЕсли;
		
		// Получим синоним объекта для вида формы.
		бит_НазначениеСинонимовОбъектов.ВывестиЗаголовокФормы(МетаданныеОбъекта, СтруктураСвойств, ВидФормы);
		
	КонецЕсли;
	
	// Если установлен синоним в регистре сведений "бит_СинонимыОбъектов", тогда.
	Если ЗначениеЗаполнено(СтруктураСвойств.Заголовок) Тогда
		
		СинонимОбъекта = СтруктураСвойств.Заголовок;
		
	Иначе
		// Иначе берем наименование или синоним.
		
		// Если передана ссылка на объект доступа, тогда.
		Если ТипЗнч(МетаданныеОбъекта) = Тип("СправочникСсылка.бит_ОбъектыСистемы") Тогда
			СинонимОбъекта = МетаданныеОбъекта.Наименование;
		Иначе
			СинонимОбъекта = МетаданныеОбъекта.Синоним;
		КонецЕсли;

	КонецЕсли;
	
	Возврат СинонимОбъекта;
	
КонецФункции // ПолучитьСинонимОбъектаСистемы()

// Функция получает представление объекта системы из списка значений.
// 
// Параметры:
//  СписокОбъектов - СписокЗначений.
//  ОбъектДоступа  - СправочникСсылка.бит_ОбъектыСистемы.
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ПолучитьПредставлениеОбъектаСистемыИзСпискаЗначений(СписокОбъектов, ОбъектДоступа) Экспорт
	
	ПредставлениеОбъекта = "";
	
	Если Не ТипЗнч(СписокОбъектов) = Тип("СписокЗначений")
		Или СписокОбъектов.Количество() = 0 Тогда
		Возврат ПредставлениеОбъекта;
	КонецЕсли;
	
	ЗаписьСОбъектом = СписокОбъектов.НайтиПоЗначению(ОбъектДоступа);
	
	Если ЗаписьСОбъектом <> Неопределено Тогда
		ПредставлениеОбъекта = ЗаписьСОбъектом.Представление;
	КонецЕсли;
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции // ПолучитьПредставлениеОбъектаСистемыИзСпискаЗначений()

// Функция формирует список значений объектов системы с установленными
// синонимами для выбора.
// 
// Параметры
//  МассивОбъектов - МетаданныеОбъекта (любого объекта конфигурации), СправочникСсылка.бит_ОбъектыСистемы.
//  ВидФормы       - ПеречислениеСсылка.бит_ВидыФормОбъекта, по умолчанию "Списка", не обязателен.
// 
// Возвращаемое значение:
//   СписокЗначений.
// 	
Функция ПолучитьСписокЗначенийОбъектовСистемыДляВыбора(МассивОбъектов, ВидФормы = Неопределено) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	
    Для Каждого ТекОбъект Из МассивОбъектов Цикл
		
		// Получим синоним объекта.
		СинонимОбъекта = ПолучитьСинонимОбъектаСистемы(ТекОбъект, ВидФормы);
		
		// Получаем картинку объекта по виду объекта.
	    КартинкаОбъекта = бит_УправлениеОбъектамиСистемы.ОпределитьКартинкуВидаОбъекта(ТекОбъект.ВидОбъекта);
		
        // Добавим объект в список выбора объектов.
        СписокВыбора.Добавить(ТекОбъект, СинонимОбъекта,, КартинкаОбъекта);
        
    КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСписокЗначенийОбъектовСистемыДляВыбора()

#Если Клиент Тогда

// Процедура обрабатывает событие "ПередНачаломИзменения" в списках. Проверяется право на редактирование.
// 
// Параметры:
//  Отказ        - Булево.
//  Элемент      - ЭлементУправления.
//  ТекущаяФорма - Форма.
//  ДопПараметры - Структура.
//                
Процедура ПередНачаломИзмененияВСписке(Отказ, Элемент, ТекущаяФорма, ДопПараметры = Неопределено)  Экспорт
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеСобытия = Новый Структура;
	ТекущиеСобытия.Вставить("Редактирование",Ложь);
    
    События = ПроверитьПраваДоступа(ТекущаяСтрока.Ссылка.ПолучитьОбъект()
                                    , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
                                    ,
                                    ,ТекущиеСобытия);
    
    ОповеститьОбОтсутствииДоступа(ТекущаяСтрока.Ссылка, События, Отказ);			
	
КонецПроцедуры // ПередНачаломИзмененияВСписке()	

// Процедура обрабатывает событие "ПередНачаломДобавления" в списках. 
// Проверяется право на редактирование/Создание/Копирование.
// 
// Параметры:
//  Отказ        - Булево.
//  Элемент      - ЭлементУправления.
//  Копирование  - Булево.
//  ТекущаяФорма - Форма.
//  ДопПараметры - Структура.
//                
Процедура ПередНачаломДобавленияВСписке(Отказ, Элемент, Копирование, ТекущаяФорма, ДопПараметры = Неопределено)  Экспорт

	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеСобытия = Новый Структура;
	ТекущиеСобытия.Вставить("Редактирование", Ложь);
	ТекущиеСобытия.Вставить("Создание"      , Ложь);
	Если Копирование Тогда
		ТекущиеСобытия.Вставить("Копирование", Ложь);
	КонецЕсли; 
	События = ПроверитьПраваДоступа(ТекущаяСтрока.Ссылка.ПолучитьОбъект()
                , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
                ,
                ,ТекущиеСобытия);
	ОповеститьОбОтсутствииДоступа(ТекущаяСтрока.Ссылка, События, Отказ);	

КонецПроцедуры // ПередНачаломДобавленияВСписке()	

#КонецЕсли

// Процедура обрабатывает событие "ПередОткрытием" в формах элемента/документа. 
// Проверяется право на создание редактирование.
// 
// Параметры:
//  Отказ        - Булево.
//  Элемент      - ЭлементУправления.
//  ТекущаяФорма - Форма.
//  ДопПараметры - Структура.
//                
Процедура ПередОткрытиемФормы(Отказ,СтандартнаяОбработка, ТекущийОбъект, ТекущаяФорма, ДопПараметры = Неопределено) Экспорт
	
	// Если копирование запрещено - форму не открываем.
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("Отказ") Тогда
		
		Если ТекущийОбъект.ДополнительныеСвойства.Отказ Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	События = ПроверитьПраваДоступа(ТекущийОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	
	// Если создание запрещено - форму не открываем.
	Если События.Свойство("Создание") Тогда
		ОповеститьОбОтсутствииДоступа(ТекущийОбъект,События,Отказ);			
	КонецЕсли; 
	
	// Если редактирование запрещено устанавливаем на форму ТолькоПросмотр.
	Если События.Свойство("Редактирование") Тогда		
		ТекущаяФорма.ТолькоПросмотр = НЕ События.Редактирование;		
	КонецЕсли; 
	
КонецПроцедуры // ПередОткрытиемФормы()	

// Процедура обрабатывает событие "ПередОткрытием" в формах отчета/обработки. Проверяется право на доступ к объекту.
// 
// Параметры:
//  Отказ        - Булево.
//  Элемент      - ЭлементУправления.
//  ТекущаяФорма - Форма.
//  ДопПараметры - Структура.
//                
Процедура ПередОткрытиемФормыОтчета(Отказ,СтандартнаяОбработка,ТекущийОбъект,ТекущаяФорма,ДопПараметры=Неопределено) Экспорт
	
	События = ПроверитьПраваДоступа(ТекущийОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ОповеститьОбОтсутствииДоступа(ТекущийОбъект,События,Отказ);			
	
КонецПроцедуры // ПередОткрытиемФормыОтчета()

// Функция получает значение права пользователя.
// 
// Параметры:
//  Пользователь  - СправочникСсылка.Пользователь, 
// 					 СправочникСсылка.ГруппаПользователей.
//  Право		   - ПланВидовХарактеристикСсылка.бит_ДополнительныеПраваПользователей. 
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ПолучитьЗначениеДопПраваПользователя(Пользователь, Право)  Экспорт
 
 	Разрешено = Ложь;
	
 	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Право"		, Право);

	Запрос.Текст = "ВЫБРАТЬ
	               |	Группы.Ссылка КАК Группа
	               |ПОМЕСТИТЬ ГруппыПользователя
	               |ИЗ
	               |	Справочник.ГруппыПользователей.%ИмяТабЧасти% КАК Группы
	               |ГДЕ
	               |	Группы.Пользователь = &Пользователь
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(МАКСИМУМ(НастройкиПрав.Значение), ЛОЖЬ) КАК Значение
	               |ИЗ
	               |	РегистрСведений.бит_НастройкиДополнительныхПравПользователей КАК НастройкиПрав
	               |ГДЕ
	               |	(НастройкиПрав.Пользователь = &Пользователь
	               |			ИЛИ НастройкиПрав.Пользователь В
	               |				(ВЫБРАТЬ
	               |					ГруппыПользователя.Группа
	               |				ИЗ
	               |					ГруппыПользователя))
	               |	И НастройкиПрав.Право = &Право
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ГруппыПользователя";
	
				   
    ИмяТабЧасти  = бит_ОбщегоНазначения.ИмяТабЧастиГруппыПользователей();
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТабЧасти%", ИмяТабЧасти);	

    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Если Не Результат.Пустой() Тогда
        
        Выборка.Следующий();
        Разрешено = Выборка.Значение;

    КонецЕсли; 

    Возврат Разрешено;
 	
КонецФункции // ПолучитьЗначениеДопПраваПользователя()

// Процедура проверяет соответствие профилей доступа у пользователя и заместителя.
//
// Параметры:
//  Заместитель.
//  Пользователь.
//
Процедура ПроверкаПрофилейДоступаПользователяИЗаместителя(Заместитель, Пользователь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Профили.Ссылка КАК Профиль
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа КАК Профили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
		|			И (НЕ(ГруппыДоступа.Пользователь <> &Пользователь
		|					И НЕ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
		|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
		|ГДЕ
		|	НЕ Профили.ПометкаУдаления
		|	И НЕ ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Профили.Ссылка КАК Профиль
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа КАК Профили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
		|			И (НЕ(ГруппыДоступа.Пользователь <> &Заместитель
		|					И НЕ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
		|			И (ГруппыДоступаПользователи.Пользователь = &Заместитель)
		|ГДЕ
		|	НЕ Профили.ПометкаУдаления
		|	И НЕ ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Заместитель" , Заместитель);

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаПрофилейПользователь = РезультатЗапроса[0].Выгрузить();
	ТаблицаПрофилейЗаместитель  = РезультатЗапроса[1].Выгрузить();

	ЕстьРасхождение = Ложь;
	Для Каждого Профиль Из ТаблицаПрофилейПользователь Цикл
		НайденнаяСтрока =  ТаблицаПрофилейЗаместитель.Найти(Профиль, "Профиль");
		Если НайденнаяСтрока = Неопределено Тогда
			ЕстьРасхождение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРасхождение Тогда
		ТекстСообщения =  НСтр("ru = 'У назначенного заместителя ""%1"" не совпадают назначенные профили групп доступа с пользователем ""%2"". 
		                              |Возможна не корректная работа механизма прав доступа на уровне записей, обратитесь к администратору.'");
		ТекстСообщения =  СтрШаблон(ТекстСообщения, Заместитель, Пользователь);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПроверкаПрофилейДоступаПользователяИЗаместителя()	

// Процедура копирует настройки РЛС пользователя заместителю 
//
// Параметры:
//  Заместитель.
//  Пользователь.
//
Процедура ОбработатьНастройкиРЛСПользователя(Пользователь, Заместитель) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Ссылка КАК ГруппаПользователей
		|ПОМЕСТИТЬ ГруппыПользователя
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бит_рлс_ПраваДоступа.ВидНастройки,
		|	бит_рлс_ПраваДоступа.ВидОбластиДоступа,
		|	бит_рлс_ПраваДоступа.Пользователь,
		|	бит_рлс_ПраваДоступа.Разделитель_1,
		|	бит_рлс_ПраваДоступа.Разделитель_2,
		|	бит_рлс_ПраваДоступа.Разделитель_3,
		|	бит_рлс_ПраваДоступа.Разделитель_4,
		|	бит_рлс_ПраваДоступа.Чтение,
		|	бит_рлс_ПраваДоступа.Запись,
		|	бит_рлс_ПраваДоступа.ВидНаследования,
		|	бит_рлс_ПраваДоступа.Замещение,
		|	бит_рлс_ПраваДоступа.ПользовательЗамещение
		|ИЗ
		|	РегистрСведений.бит_рлс_ПраваДоступа КАК бит_рлс_ПраваДоступа
		|ГДЕ
		|	(бит_рлс_ПраваДоступа.Пользователь = &Пользователь
		|			ИЛИ бит_рлс_ПраваДоступа.Пользователь В
		|				(ВЫБРАТЬ
		|					ГруппыПользователя.ГруппаПользователей
		|				ИЗ
		|					ГруппыПользователя))";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		РегистрСведений = РегистрыСведений.бит_рлс_ПраваДоступа.СоздатьНаборЗаписей();
		РегистрСведений.Отбор.ВидНастройки.Установить(Выборка.ВидНастройки);
		РегистрСведений.Отбор.ВидОбластиДоступа.Установить(Выборка.ВидОбластиДоступа);
		РегистрСведений.Отбор.Пользователь.Установить(Заместитель);
		РегистрСведений.Отбор.Разделитель_1.Установить(Выборка.Разделитель_1);
		РегистрСведений.Отбор.Разделитель_2.Установить(Выборка.Разделитель_2);
		РегистрСведений.Отбор.Разделитель_3.Установить(Выборка.Разделитель_3);
		РегистрСведений.Отбор.Разделитель_4.Установить(Выборка.Разделитель_4);
        РегистрСведений.Отбор.Замещение.Установить(Ложь);

		РегистрСведений.Прочитать();
		
		Если РегистрСведений.Количество() = 0 Тогда
			
			// добавление новой записи
		    НоваяЗапись = РегистрыСведений.бит_рлс_ПраваДоступа.СоздатьМенеджерЗаписи();
		    НоваяЗапись.ВидНастройки  = Выборка.ВидНастройки;
		    НоваяЗапись.ВидОбластиДоступа = Выборка.ВидОбластиДоступа;
		    НоваяЗапись.Пользователь  = Заместитель;
			НоваяЗапись.Разделитель_1 = Выборка.Разделитель_1;
		    НоваяЗапись.Разделитель_2 = Выборка.Разделитель_2;
		    НоваяЗапись.Разделитель_3 = Выборка.Разделитель_3;
            НоваяЗапись.Разделитель_4 = Выборка.Разделитель_4;
			НоваяЗапись.Чтение        = Выборка.Чтение;
		    НоваяЗапись.Запись        = Выборка.Запись;
            НоваяЗапись.Замещение     = Истина;
			НоваяЗапись.ПользовательЗамещение = Пользователь;
			
			Попытка
		
				НоваяЗапись.Записать();
				
				ТекстСообщения = НСтр("ru = 'Установлен заместитель ""%1%"" пользователю ""%2%"" по правам доступа (RLS).'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
				                                                                             , Заместитель
																							 , Пользователь
																							 , 
																							 , ОписаниеОшибки());
				
			Исключение
				
				ТекстСообщения = НСтр("ru = 'Не удалось установить заместителя ""%1%"" пользователю ""%2%"" по правам доступа (RLS)! Описание ошибки: ""%4%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
				                                                                             , Заместитель
																							 , Пользователь
																							 , 
																							 , ОписаниеОшибки());
																							 
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																			 
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьНастройкиРЛСПользователя()

// Процедура удаляет настройки РЛС заместителя по окончании замещения. 
//
// Параметры:
//  Заместитель.
//  Пользователь.
//
Процедура УдалитьПраваРЛСЗаместителя(Пользователь, Заместитель) Экспорт
	
	РегистрСведенийНазначенныеЗаместители = РегистрыСведений.бит_НазначенныеЗаместители.СоздатьНаборЗаписей();
	РегистрСведенийНазначенныеЗаместители.Отбор.Пользователь.Установить(Пользователь);
	РегистрСведенийНазначенныеЗаместители.Отбор.Заместитель.Установить(Заместитель);
	РегистрСведенийНазначенныеЗаместители.Отбор.Состояние.Установить(Перечисления.бит_СостоянияЗаместителей.Назначен);
	//РегистрСведенийНазначенныеЗаместители.Отбор.ПередаватьПраваРЛС.Установить(Истина);

	РегистрСведенийНазначенныеЗаместители.Прочитать();
	
	Если РегистрСведенийНазначенныеЗаместители.Количество() = 0 Тогда

		РегистрСведенийПрава = РегистрыСведений.бит_рлс_ПраваДоступа.СоздатьНаборЗаписей();
		РегистрСведенийПрава.Отбор.Пользователь.Установить(Заместитель);
		РегистрСведенийПрава.Отбор.ПользовательЗамещение.Установить(Пользователь);
		РегистрСведенийПрава.Отбор.Замещение.Установить(Истина);

		РегистрСведенийПрава.Прочитать();
		РегистрСведенийПрава.Очистить();
		
		Попытка
			
			РегистрСведенийПрава.Записать();
			
			ТекстСообщения = НСтр("ru = 'Удален заместитель ""%1%"" пользователя ""%2%"" по правам доступа (RLS).'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
			                                                                             , Заместитель
																						 , Пользователь
																						 , 
																						 , ОписаниеОшибки());
			
		Исключение
					
			ТекстСообщения = НСтр("ru = 'Не удалось удалить заместителя ""%1%"" пользователя ""%2%"" по правам доступа (RLS)! Описание ошибки: ""%4%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
			                                                                             , Заместитель
																						 , Пользователь
																						 , 
																						 , ОписаниеОшибки());
																						 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																	 
						
		КонецПопытки;

	КонецЕсли;
	
КонецПроцедуры // УдалитьПраваРЛСЗаместителя()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура оповещает пользователя об отсутствии доступа.
// 
// Параметры:
//  ТекущийОбъект - СправочникСсылка,ДокументСсылка.
//  События       - Структура - ключ: строка- имя события, значение: булево - доступность события.
//  Отказ         - Булево.
// 
Процедура ОповеститьОбОтсутствииДоступа(ТекущийОбъект,События,Отказ)
	 
    МетаданныеОбъекта = ТекущийОбъект.Метаданные();
    ВидОбъекта        = ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);
    
    Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Обработка 
     ИЛИ ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Отчет Тогда

        Если События.Свойство("Редактирование") Тогда
            События.Вставить("Доступ", События.Редактирование);
            События.Удалить("Редактирование");
        КонецЕсли; 
    КонецЕсли; 

    Для каждого КлючИЗначение Из События Цикл
        Если НЕ ТипЗнч(КлючИЗначение.Значение) = Тип("Булево") Тогда
            Продолжить;
        КонецЕсли; 

        Если НЕ КлючИЗначение.Значение Тогда
            
            ТекстСообщения = "Отсутствует право ""%1"" над объектом ""%2"".";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
															КлючИЗначение.Ключ, 
															МетаданныеОбъекта.Синоним);
            Если События.Свойство("ОбластиДоступа") Тогда
                Ном = 1;
                Для каждого Элемент Из События.ОбластиДоступа Цикл
                    ТекстСообщения = ТекстСообщения + ?(Ном = 1, " Области доступа: ", ", ") + Строка(Элемент);
                    Ном = Ном + 1;
                КонецЦикла; 
            КонецЕсли; 
        
            бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,,СтатусСообщения.Важное);
        	ЗаписьЖурналаРегистрации("Доступ.Отказ в доступе"
									,УровеньЖурналаРегистрации.Ошибка
									,МетаданныеОбъекта
									,
									,ТекстСообщения);
        КонецЕсли; 
    КонецЦикла; 
	 
КонецПроцедуры // ОповеститьОбОтсутствииДоступа()

#КонецОбласти





