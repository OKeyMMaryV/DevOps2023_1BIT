////////////////////////////////////////////////////////////////////////////////
//
// Учитывает особенности реализации в конфигурации-носителе.
// При обновлении библиотеки переносить только состав процедур и функций без содержимого.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт

	// ++ БП 
	Библиотека = "БитФинанс"; // См. бит_ОбновлениеИнформационнойБазыБФ.ПриДобавленииПодсистемы();
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.44.2",
		"Подсистема.бит_КомИнт_МСФО.Подсистема.СтандартныеБухгалтерскиеОтчеты",
		"Подсистема.бит_КомИнт_МСФО.Подсистема.СтандартныеОтчеты",
		Библиотека);
	// -- БП 
	
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс 

#Область ПроведениеОтменаПроведения

Процедура ОбработкаПроведенияНачало(ДокументОбъект, РежимПроведения, Отказ, ВыборочноОчищатьРегистры = Истина) Экспорт

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ДокументОбъект, ВыборочноОчищатьРегистры);
	Если ДокументОбъект.РучнаяКорректировка Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведенияЗавершение(ДокументОбъект) Экспорт

	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ДокументОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ДокументОбъект);
	ДокументОбъект.Движения.Записать();
	
КонецПроцедуры

#КонецОбласти 

Функция ЭтоРасчетыВВалютеОплатаВВалюте(ПорядокОплаты) Экспорт

	// ++БП
	Возврат Ложь;
	// --БП
	
КонецФункции

Функция ЕстьРасшифровкаПлатежа(ДокументСсылка, ВидОперации) Экспорт

	ЕстьРасшифровкаПлатежа = Ложь;
	
	// ++ БП 
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ЕстьРасшифровкаПлатежа = Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		// Почему-то разработчики документа "ПоступлениеНаРасчетныйСчет" решили не делать, 
		// как в других документах движения денег: делить по видам операции метаданные документов, 
		// предназначенные для заполнения, а писать всегда в "расшифровку платежа".
		// ЕстьРасшифровкаПлатежа = Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ВидОперации, Истина);
		// Возможно, для интерфейсных целей используем ЕстьРасшифровкаПлатежаПоступлениеНаРасчетныйСчет().
		ЕстьРасшифровкаПлатежа = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ЕстьРасшифровкаПлатежа = Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации);	
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ЕстьРасшифровкаПлатежа = Документы.ПриходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации);	
	КонецЕсли; 
	// -- БП 
	
	Возврат ЕстьРасшифровкаПлатежа;
	
КонецФункции

// См. комментарии в теле бит_ОбщегоНазначенияПереопределяемый.ЕстьРасшифровкаПлатежа().
//
Функция ЕстьРасшифровкаПлатежаПоступлениеНаРасчетныйСчет(ВидОперации) Экспорт

	ОперацииБезРасшифровки = Новый Массив; 
	ОперацииБезРасшифровки.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета);
	ОперацииБезРасшифровки.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными);
	ОперацииБезРасшифровки.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником);
	ОперацииБезРасшифровки.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление);

	Возврат ОперацииБезРасшифровки.Найти(ВидОперации) = Неопределено;
	
КонецФункции 
 
#КонецОбласти