
#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработкаВыбораРНПТН(Форма, ИдентификаторСтроки, ВыбранноеЗначение) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	
	Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
	КонецЦикла;
		
	ПодобранныеРНПТ = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТаблицыРНПТВХранилище);
	Для Каждого НовыйРНПТ Из ПодобранныеРНПТ Цикл
		НоваяСтрока = Объект.СведенияПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйРНПТ);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРНПТДоКорректировки(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИсходныеРНПТ = РНПТисходногоДокументаРеализации(Объект);
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ИсходныеРНПТ = РНПТисходногоДокументаПоступления(Объект);
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары ИЗ Объект.Товары Цикл 
		Если СтрокаТовары.ПрослеживаемыйТовар Тогда
			Если ЗначениеЗаполнено(ИсходныеРНПТ) Тогда
				СтрокиСРНПТ = ИсходныеРНПТ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки));
				КоличествоРНПТ = СтрокиСРНПТ.Количество();
				Если КоличествоРНПТ = 0 Тогда
					СтрокаТовары.РНПТДо = "";
				ИначеЕсли КоличествоРНПТ = 1 Тогда
					СтрокаТовары.РНПТДо = СокрЛП(Строка(СтрокиСРНПТ[0].РНПТ));
				Иначе
					СтрокаТовары.РНПТДо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 и еще %2'"),
					СокрЛП(Строка(СтрокиСРНПТ[0].РНПТ)),
					КоличествоРНПТ-1);
				КонецЕсли;
			Иначе
				// Переходный период, в корректируемом документе не был заполнен РНПТ.
				СтрокаТовары.РНПТДо = "";
			КонецЕсли;
		Иначе
			СтрокаТовары.РНПТДо = Строка(СтрокаТовары.НомерГТДДоИзменения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РНПТисходногоДокументаРеализации(Объект)
	
	ДокументРеализации = Объект.ДокументРеализации;
	Если ТипЗнч(ДокументРеализации) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		И ТипЗнч(ДокументРеализации) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяВидаДокумента = ДокументРеализации.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	РеализацияТоваровУслугСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".СведенияПрослеживаемости КАК РеализацияТоваровУслугСведенияПрослеживаемости
	|ГДЕ
	|	РеализацияТоваровУслугСведенияПрослеживаемости.Ссылка = &ДокументРеализации";
	
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РНПТДокументаРеализации = Выборка.Выгрузить();
	
	Возврат РНПТДокументаРеализации;
	
КонецФункции

Функция РНПТисходногоДокументаПоступления(Объект)
	
	ДокументПоступления = Объект.ДокументПоступления;
	Если ТипЗнч(ДокументПоступления) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И ТипЗнч(ДокументПоступления) <> Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяВидаДокумента = ДокументПоступления.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	ПоступлениеТоваровУслугСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".СведенияПрослеживаемости КАК ПоступлениеТоваровУслугСведенияПрослеживаемости
	|ГДЕ
	|	ПоступлениеТоваровУслугСведенияПрослеживаемости.Ссылка = &ДокументПоступления";
	
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РНПТДокументаПоступления = Выборка.Выгрузить();
	
	Возврат РНПТДокументаПоступления;
	
КонецФункции

Процедура УстановитьПредставлениеНадписиУведомлениеОВвозе(Форма) Экспорт
	
	СписокУведомлений = СписокУведомлений(Форма);
	
	Форма.СписокУведомлений        = СписокУведомлений;
	Форма.НадписьУведомлениеОВвозе = ПредставлениеУведомлений(СписокУведомлений);

КонецПроцедуры

Процедура УстановитьПредставлениеНадписиУведомлениеОПеремещении(Форма) Экспорт
	
	НайденноеУведомление = НайтиУведомлениеОПеремещении(Форма);
		
	Если ЗначениеЗаполнено(НайденноеУведомление) Тогда
		
		ПредставлениеДокумента = ПрослеживаемостьПереопределяемый.ПредставлениеДокумента(НайденноеУведомление);
		
		НадписьУведомлениеОПеремещении = Новый ФорматированнаяСтрока(ПредставлениеДокумента, , , , "ссылка");
		
	Иначе
		
		НадписьУведомлениеОПеремещении = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Создать уведомление о перемещении прослеживаемых товаров'"),,ЦветаСтиля.ЦветОсобогоТекста,,"ссылка");
	
	КонецЕсли;
	
	Форма.УведомлениеОПеремещении  = НайденноеУведомление;
	Форма.НадписьУведомлениеОПеремещении = НадписьУведомлениеОПеремещении;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УведомленияОПеремещении

// Проверяет наличие  Уведомление о перемещении прослеживаемых товаров введенных на основании указанного документа
//
// Параметры:
//  Документ - ДокументСсылка, Документ основание, по которому проверяется  существование Уведомлений о перемещении
//
// Возвращаемые параметры:
// - Булево - Истина, если на основании документа введены уведомления о перемещении
//
Функция НайтиУведомлениеОПеремещении(Форма)
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Документ", Форма.Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров.Товары КАК УведомлениеОПеремещенииПрослеживаемыхТоваровТовары
	|ГДЕ
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.СопроводительныйДокумент = &Документ
	|	И УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Ссылка.Проведен";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

Функция СписокУведомлений(Форма)
	
	СписокУведомлений = Новый СписокЗначений;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров) Тогда
		Возврат СписокУведомлений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Форма.Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка КАК УведомлениеОВвозе,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Номер КАК Номер,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Дата КАК Дата
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозеПрослеживаемыхТоваров
	|ГДЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Проведен
	|	И УведомлениеОВвозеПрослеживаемыхТоваров.ПервичныйДокумент = &Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Уведомления = Запрос.Выполнить().Выгрузить();
	ШаблонПредставления = НСтр("ru = '%1 №%2 от %3'");
	Для Каждого Уведомление Из Уведомления Цикл
		
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			Уведомление.УведомлениеОВвозе.Метаданные().Представление(),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Уведомление.Номер, Истина, Ложь),
			Формат(Уведомление.Дата, "ДЛФ=Д"));
		
		СписокУведомлений.Добавить(Уведомление.УведомлениеОВвозе, Представление);
		
	КонецЦикла;	
	
	Возврат СписокУведомлений;
	
КонецФункции

Функция ПредставлениеУведомлений(СписокУведомлений)
	
	Если СписокУведомлений.Количество() = 0 Тогда
		
		ПредставлениеУведомлений = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Создать уведомление о ввозе прослеживаемых товаров'"),,ЦветаСтиля.ЦветОсобогоТекста,,"ссылка");
		
	ИначеЕсли СписокУведомлений.Количество() = 1 Тогда
		
		ПредставлениеДокумента = СписокУведомлений[0].Представление;
		ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, " № ", " ");
		
		ПредставлениеУведомлений = Новый ФорматированнаяСтрока(ПредставлениеДокумента, , , , "ссылка");
		
	Иначе
		
		ПредставлениеДокумента = Лев(СписокУведомлений[0].Представление, СтрНайти(СписокУведомлений[0].Представление, "№")-2);
		
		ПредставлениеКоличества = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(%1 %2)'"),
				СписокУведомлений.Количество(),
				СтрокаСЧислом("; документ; ; документа; документов; документа",
					СписокУведомлений.Количество(),
					ВидЧисловогоЗначения.Количественное,
					"L=ru_RU"));
					
		ПредставлениеДокументов  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"),
			ПредставлениеДокумента,
			ПредставлениеКоличества);
			
		ПредставлениеУведомлений = Новый ФорматированнаяСтрока(ПредставлениеДокументов,, , , "ссылка");
		
	КонецЕсли;
	
	Возврат ПредставлениеУведомлений;
	
КонецФункции

#КонецОбласти
