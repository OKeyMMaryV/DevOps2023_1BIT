
#Область СлужебныйПрограммныйИнтерфейс

// Функция определяет наличие в системе механизма справочной информации.
// 
// 
// Возвращаемое значение:
//   флЕстьМеханизм   - Булево.
// 
Функция ЕстьМеханизмСправочнойИнформации() Экспорт

	флЕстьМеханизм = ЕстьОбщийМодуль("бит_си_ОбщегоНазначения");

	Возврат флЕстьМеханизм;
	
КонецФункции // ЕстьМеханизмСправочнойИнформации()

// Функция определяет наличие в системе механизма нумерации объектов.
// 
// 
// Возвращаемое значение:
//   флЕстьМеханизм   - Булево.
// 
Функция ЕстьМеханизмНумерацииОбъектов()  Экспорт

	флЕстьМеханизм = ЕстьОбщийМодуль("МеханизмНумерацииОбъектов");

	Возврат флЕстьМеханизм;
	
КонецФункции // ЕстьМеханизмНумерацииОбъектов()

// Функция определяет наличие в системе механизма прав доступа.
// 
// 
// Возвращаемое значение:
//   флЕстьМеханизм   - Булево.
// 
Функция ЕстьМеханизмПравДоступа()  Экспорт

	флЕстьМеханизм = ЕстьОбщийМодуль("бит_ПраваДоступа");

	Возврат флЕстьМеханизм;
	
КонецФункции // ЕстьМеханизмПравДоступа()

//  Выводит состояние с учетом места исполнения кода.
// 
// Параметры:
//  ТекстСостояния  - Строка.
// 
Процедура бит_Состояние(ТекстСостояния) Экспорт
	
	#Если Клиент Тогда
		Если НЕ ПустаяСтрока(ТекстСостояния) Тогда
			Состояние(ТекстСостояния);	
		Иначе
			Состояние();
		КонецЕсли; 
	#КонецЕсли 	
	
КонецПроцедуры // бит_Состояние()

//  Выводит сообщение с учетом места исполнения кода.
// 
// Параметры:
//  ТекстСообщения    - Строка.
//  СтатусСообщения  - СтатусСообщения.
// 
Процедура бит_Сообщить(ТекстСообщения,Статус = Неопределено) Экспорт

	#Если Клиент Тогда
		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);	
		
	#КонецЕсли 	
	

КонецПроцедуры // бит_Сообщить()

//  Получает имя значения перечисления по ссылке.
// 
// Параметры:
//  ТекПеречисление       - ПеречислениеМенеджер.
//  ЗначениеПеречисления  - ПеречислениеСсылка.
// 
// Возвращаемое значение:
//   ИмяЗначения   - Строка.
// 
Функция ПолучитьИмяЗначенияПеречисления(ТекПеречисление,ЗначениеПеречисления) Экспорт
	
	ТекИндекс   = ТекПеречисление.Индекс(ЗначениеПеречисления);
	ИмяЗначения = ЗначениеПеречисления.Метаданные().ЗначенияПеречисления[ТекИндекс].Имя;
	
	Возврат ИмяЗначения;
	
КонецФункции // ПолучитьИмяЗначенияПеречисления()

// Функция выполняет поиск по имени группу объектов системы.
// 
// Параметры:
//  ИмяГруппы  - Строка.
// 
// Возвращаемое значение:
//   НайденнаяГруппа   - Справочники.бит_ОбъектыСистемы.
// 
Функция НайтиПредопределеннуюГруппу(ИмяГруппы) Экспорт

	НайденнаяГруппа = Справочники.бит_ОбъектыСистемы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ОбъектыСистемы.Ссылка
	               |ИЗ
	               |	Справочник.бит_ОбъектыСистемы КАК бит_ОбъектыСистемы
	               |ГДЕ
	               |	бит_ОбъектыСистемы.ЭтоГруппа
	               |	И бит_ОбъектыСистемы.Предопределенный";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		 ИмяПредопределенного = Справочники.бит_ОбъектыСистемы.ПолучитьИмяПредопределенного(Выборка.Ссылка);
		 Если ИмяПредопределенного = ИмяГруппы Тогда
		 
		 	НайденнаяГруппа = Выборка.Ссылка;
		 
		 КонецЕсли; 
		
	КонецЦикла; 

	Возврат НайденнаяГруппа;
	
КонецФункции // НайтиПредопределеннуюГруппу()

// Процедура выводить сообщение о наличии помеченных на удаление объектов системы.
// 
// Возвращаемое значение:
//  ТекстСообщения  - строка.
//
Функция ТекстСообщенияОПомеченных() Экспорт

 	ТекстСообщения =  НСтр("ru = 'ВНИМАНИЕ! В справочнике ""Объекты системы"" обнаружены элементы не соответствующие объектам метаданных! 
	                          |Данные элементы помечены на удаление. Рекомендуется выполнить удаление этих элементов перед продолжением работы.'");
							  
	Возврат ТекстСообщения;						  

КонецФункции // ТекстСообщенияОПомеченных()

// Процедура обновляет справочник ОбъектыСистемы по метеданным.
// 
// Параметры:
//  РежимСообщений - Строка: "Нет","Все","Ошибки".
// 
Функция ОбновитьОбъектыСистемы(РежимСообщений = "Все") Экспорт
	
	 Рез = Новый Структура("КоличествоПомеченных", 0);
	
	 Если НЕ ПравоДоступа("Изменение", Метаданные.Справочники.бит_ОбъектыСистемы) Тогда
		 Возврат Рез;
	 КонецЕсли; 
	 
	 Если НЕ ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		 
		 // В подчиненные узлы объекты системы должны прийти в результате обмена
		 // заполнение не нужно.
	 	 Возврат Рез;
	 
	 КонецЕсли; 
	 
	 ВыводитьОшибки     = ?(РежимСообщений="Все" ИЛИ РежимСообщений="Ошибки",Истина,Ложь);
	 ВыводитьИнформацию = ?(РежимСообщений="Все",Истина,Ложь);	 
	 
	 бит_Состояние("Обновление объектов системы");
	 
	 
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("Справочники"       ,РежимСообщений);
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("Документы"         ,РежимСообщений);
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("Отчеты"            ,РежимСообщений);
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("Обработки"         ,РежимСообщений);
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("ПланыСчетов"       ,РежимСообщений);	
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("ПланыВидовХарактеристик",РежимСообщений);	 	 	 
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("РегистрыСведений"       ,РежимСообщений);
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("РегистрыНакопления"     ,РежимСообщений);	 
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("РегистрыБухгалтерии"    ,РежимСообщений);	 
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("Задачи"    			   ,РежимСообщений);
	 ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных("БизнесПроцессы"    	   ,РежимСообщений);
	 
	 КоличествоПомеченных = ПометитьНеиспользуемыеОбъектыСистемы(РежимСообщений);
	 
	 бит_Состояние("");
	 
	 Рез.КоличествоПомеченных = КоличествоПомеченных;
	 
	 Возврат Рез;
	 
КонецФункции // ОбновитьОбъектыСистемы()

// Процедура заполняет свойства элемента справочника объекта доступа из структуры параметров.
// 
// Параметры:
// ТекущийОбъект - СправочникСсылка.бит_ОбъектыСистемы.
// 
Процедура ЗаполнитьОбъектДоступа(ТекущийОбъект,СтруктураПараметров)
	
	ЗаполнитьЗначенияСвойств(ТекущийОбъект,СтруктураПараметров);
 	ТекущийОбъект.ТипЗначенияОбъекта = Новый ХранилищеЗначения(СтруктураПараметров.ТипЗначенияОбъекта);
 
КонецПроцедуры // ЗаполнитьОбъектДоступа() 
  
// Функция выполняет поиск объекта доступа по типу.
// 
// Параметры:
//  ИмяОбъекта  - Строка
//  ВидОбъекта  - ПеречислениеСсылка.бит_ОбъектыСистемы.
// 
// Возвращаемое значение:
//   ТекущийОбъектДоступа   - СправочникСсылка.бит_ОбъектыСистемы.
// 
Функция НайтиОбъектДоступаПоТипу(ИмяОбъекта,ВидОбъекта) Экспорт
	 
	 ТекущийОбъектДоступа = Справочники.бит_ОбъектыСистемы.ПустаяСсылка();
	 
	 Если ТипЗнч(ИмяОбъекта) = Тип("Тип") Тогда
		 ТипОбъектаДоступа = ИмяОбъекта;
	 Иначе	
	     ИмяТипа = ПолучитьИмяТипаОбъекта(ИмяОбъекта,ВидОбъекта);		 
		 ТипОбъектаДоступа = Тип(ИмяТипа);
	 КонецЕсли; 
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	бит_ОбъектыСистемы.Ссылка,
	 |	бит_ОбъектыСистемы.ТипЗначенияОбъекта
	 |ИЗ
	 |	Справочник.бит_ОбъектыСистемы КАК бит_ОбъектыСистемы
	 |ГДЕ
	 |	НЕ бит_ОбъектыСистемы.ЭтоГруппа
	 |	И бит_ОбъектыСистемы.ВидОбъекта = &ВидОбъекта";
	 
	 Запрос.УстановитьПараметр("ВидОбъекта",ВидОбъекта);
	 
	 Результат = Запрос.Выполнить();
	 
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
		 ТекущийТип = Выборка.ТипЗначенияОбъекта.Получить();
		 Если ТекущийТип = ТипОбъектаДоступа Тогда
			 ТекущийОбъектДоступа = Выборка.Ссылка;
		 КонецЕсли; 
	 КонецЦикла; 
	 
	 Возврат ТекущийОбъектДоступа;
	 
КонецФункции // НайтиОбъектДоступаПоТипу()

// Функция определяет вид объекта по метаданным объекта.
// 
// Параметры:
//  МетаданныеОбъекта  - ОбъектМетаданных.
// 
// Возвращаемое значение:
//   ВидОбъекта   - ПеречислениеСсылка.бит_ВидыОбъектовСистемы.
// 
Функция ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта)  Экспорт
	
	ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.ПустаяСсылка();
	 
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник;
 	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда	
	 	ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ;
	ИначеЕсли Метаданные.Отчеты.Содержит(МетаданныеОбъекта) Тогда
		ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Отчет;
	ИначеЕсли Метаданные.Обработки.Содержит(МетаданныеОбъекта) Тогда
		ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Обработка;
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрСведений;
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления;	
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.ПланСчетов;		 
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.ПланВидовХарактеристик;		 
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеОбъекта) Тогда
		ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии;		 
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Задача;
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.БизнесПроцесс;
	КонецЕсли; 
	 
	Возврат ВидОбъекта;
 
КонецФункции // ПолучитьВидОбъектаПоМетаданным()
 
// Функция получает полное имя объекта
// 
// Параметры:
//  ИмяОбъекта  - Строка - Краткое имя объекта.
//  ВидОбъекта  - ПеречислениеСсылка.бит_ВидыОбъектовСистемы.
// 
// Возвращаемое значение:
//   РезСтрока   - Строка.
// 
Функция ПолучитьПолноеИмяОбъекта(ИмяОбъекта,ВидОбъекта) Экспорт
	РезСтрока = ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ВидыОбъектовСистемы,ВидОбъекта)+"."+ИмяОбъекта;	
    Возврат РезСтрока;
КонецФункции // ПолучитьПолноеИмяОбъекта()
 
// Функция получает имя типа объекта
// 
// Параметры:
//  ИмяОбъекта  - Строка - Краткое имя объекта.
//  ВидОбъекта  - ПеречислениеСсылка.бит_ВидыОбъектовСистемы.
// 
// Возвращаемое значение:
//   РезСтрока   - Строка.
// 
Функция ПолучитьИмяТипаОбъекта(ИмяОбъекта,ВидОбъекта) Экспорт
	
	Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда
		РезСтрока = "ДокументСсылка."+ИмяОбъекта;		
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда
		РезСтрока = "СправочникСсылка."+ИмяОбъекта;
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Обработка Тогда
		РезСтрока = "ОбработкаОбъект."+ИмяОбъекта;		
    ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Отчет Тогда	
		РезСтрока = "ОтчетОбъект."+ИмяОбъекта;
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрСведений Тогда
		РезСтрока = "РегистрСведенийНаборЗаписей."+ИмяОбъекта;
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления Тогда
		РезСтрока = "РегистрНакопленияНаборЗаписей."+ИмяОбъекта;
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии Тогда
		РезСтрока = "РегистрБухгалтерииНаборЗаписей."+ИмяОбъекта;
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.ПланСчетов Тогда
		РезСтрока = "ПланСчетовСсылка."+ИмяОбъекта;		
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.ПланВидовХарактеристик Тогда
		РезСтрока = "ПланВидовХарактеристикСсылка."+ИмяОбъекта;				
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Задача Тогда
		РезСтрока = "ЗадачаСсылка."+ИмяОбъекта;	
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.БизнесПроцесс Тогда
		РезСтрока = "БизнесПроцессСсылка."+ИмяОбъекта;
	КонецЕсли; 
	
	Возврат РезСтрока;
	
КонецФункции // ПолучитьИмяТипаОбъекта()

// Функция определяет картинку по виду объекта.
// 
// Параметры:
//  ВидОбъекта  - ПеречислениеСсылка.бит_ВидыОбъектовСистемы.
// 
// Возвращаемое значение:
//   РезКартинка   - Картинка.
// 
Функция ОпределитьКартинкуВидаОбъекта(ВидОбъекта) Экспорт

	РезКартинка = Неопределено;
	
	КартинкиОбъектов = Новый Соответствие;
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.Справочник            ,БиблиотекаКартинок.Справочник);
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.Документ              ,БиблиотекаКартинок.ДокументОбъект);
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.Обработка             ,БиблиотекаКартинок.Обработка);
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.Отчет                 ,БиблиотекаКартинок.Отчет);
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.ПланВидовХарактеристик,БиблиотекаКартинок.ПланВидовХарактеристик);
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.ПланСчетов            ,БиблиотекаКартинок.ПланСчетов);
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии    ,БиблиотекаКартинок.РегистрБухгалтерии);
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления     ,БиблиотекаКартинок.РегистрНакопления);
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.РегистрСведений       ,БиблиотекаКартинок.РегистрСведений);
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.Задача       		 ,БиблиотекаКартинок.Задача);
	КартинкиОбъектов.Вставить(Перечисления.бит_ВидыОбъектовСистемы.БизнесПроцесс       	 ,БиблиотекаКартинок.БизнесПроцесс);	
	
	РезКартинка = КартинкиОбъектов[ВидОбъекта];
	
	Возврат РезКартинка;

КонецФункции // ОпределитьКартинкуВидаОбъекта()

// Функция возвращает имя формы 
// для работы с процедурой глобального контекста "ПолучитьФорму".
// 
// Параметры:
//  ОбъектСистемы  - СправочникСсылка.бит_ОбъектСистемы.
// 
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьФормуОбъекта(ОбъектСистемы, ТипФормы = "Обычная") Экспорт

	Форма = Неопределено;
	ИмяФ  = Неопределено;
   		
	Если ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда
		
		МенеджерОбъект = Документы[ОбъектСистемы.ИмяОбъекта];
		ОбъектСсылка = Документы[ОбъектСистемы.ИмяОбъекта].ПустаяСсылка(); 
				
	ИначеЕсли ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда
		
		МенеджерОбъект = Справочники[ОбъектСистемы.ИмяОбъекта];
		ОбъектСсылка = Справочники[ОбъектСистемы.ИмяОбъекта].ПустаяСсылка();
   					
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипФормы) ИЛИ ОбъектСсылка = Неопределено Тогда
    	Возврат Форма;
	КонецЕсли;
		
	ОсновнаяФорма  = ОбъектСсылка.Метаданные().ОсновнаяФормаОбъекта;
	
	Если ОсновнаяФорма = Неопределено Тогда
		// Если основная форма не существует - проверяем сразу дополнительную.
		ПроверитьПолучитьИмяДополнительнойФормы(ОбъектСсылка, МенеджерОбъект, ТипФормы, ИмяФ);
	Иначе
		
		// Иначе получаем имя основной формы
		ТипФормыСтрока = Строка(ОбъектСсылка.Метаданные().ОсновнаяФормаОбъекта.ТипФормы);
		Если  ТипФормыСтрока = ТипФормы Тогда
			ИмяФ = ОсновнаяФорма.Имя;
		Иначе	
			
		// Если основная форма не совпадает требуемому типу - проверяем дополнительную форму.
        ПроверитьПолучитьИмяДополнительнойФормы(ОбъектСсылка, МенеджерОбъект, ТипФормы, ИмяФ);
			
		КонецЕсли; 
		
	КонецЕсли; 
		
	// Получаем форму (или строку для получения формы на клиенте).
	Если ИмяФ <> Неопределено Тогда
		Форма = (СтрЗаменить(Строка(МенеджерОбъект), "Менеджер", "") + ".Форма." + ИмяФ);
	КонецЕсли; 
	
	// Предупреждение, если форма не найдена
	Если Форма = Неопределено Тогда
   		Текст = "%ТипФормы% форма не найдена.";
		ТекстПредупреждения = СтрЗаменить(Текст, "%ТипФормы%", ТипФормы);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
	КонецЕсли; 
  	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуОбъекта()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция определяет наличие в системе общего модуля с указанным имененм.
// 
// Параметры:
//  ИмяМодуля  - Строка.
// 
// Возвращаемое значение:
//   флЕстьМодуль   - Булево.
// 
Функция ЕстьОбщийМодуль(ИмяМодуля)
	
	флЕстьМодуль = Истина;
	
	Если Метаданные.ОбщиеМодули.Найти(ИмяМодуля) = Неопределено Тогда
		
		флЕстьМодуль = Ложь;	
		
	КонецЕсли; 

	Возврат флЕстьМодуль;
	
КонецФункции // ЕстьОбщийМодуль()

// Устанавливает пометку удаления для объектов системы, которые более не используются, 
// т.е. для которых нет соответсвующих объектов метаданных.
// 
// Параметры:
//  РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  КоличествоПомеченных - Число.
// 
Функция ПометитьНеиспользуемыеОбъектыСистемы(РежимСообщений = "Все")

	 КоличествоПомеченных = 0;	
	 
	 ВыводитьОшибки     = ?(РежимСообщений="Все" ИЛИ РежимСообщений="Ошибки",Истина,Ложь);
	 ВыводитьИнформацию = ?(РежимСообщений="Все",Истина,Ложь);	 
	 
	 // Поиск объектов системы не соответствющих объектам конфигурации.
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	бит_ОбъектыСистемы.Ссылка,
	                |	бит_ОбъектыСистемы.ТипЗначенияОбъекта,
	                |	бит_ОбъектыСистемы.ИмяОбъектаПолное,
	                |	бит_ОбъектыСистемы.ВидОбъекта,
	                |	бит_ОбъектыСистемы.ИмяОбъекта
	                |ИЗ
	                |	Справочник.бит_ОбъектыСистемы КАК бит_ОбъектыСистемы
	                |ГДЕ
	                |	НЕ бит_ОбъектыСистемы.ЭтоГруппа
	                |	И НЕ бит_ОбъектыСистемы.ПометкаУдаления";
					
	 Результат = Запрос.Выполнить();				
	 
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	ТипОбъекта = Выборка.ТипЗначенияОбъекта.Получить();
		Если ТипОбъекта = Тип("Неопределено") Тогда
		
			СпрОб = Выборка.Ссылка.ПолучитьОбъект();
			
			Попытка
			
				СпрОб.УстановитьПометкуУдаления(Истина);
				КоличествоПомеченных = КоличествоПомеченных+1;
				
			Исключение
				
				Если ВыводитьОшибки Тогда
					
					ТекстСообщения =  НСтр("ru = 'Не удалось пометить на удаление объект системы ""%1%"".'");
					ТекстСообщения =  бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.Ссылка);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
					
				КонецЕсли; 
				
			КонецПопытки;
			
		КонецЕсли; 
		
	 КонецЦикла; // Выборка
	 
	 Если ВыводитьИнформацию И КоличествоПомеченных Тогда
		 
		 ТекстСообщения = ТекстСообщенияОПомеченных();
		 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);						  
		 
	 
	 КонецЕсли; 

	Возврат КоличествоПомеченных;
	
КонецФункции // ПометитьНеиспользуемыеОбъектыСистемы()

// Процедура Заполняет/обновляет справочник объекты доступа по коллекции метаданных. 
// При изменении имени объекта выполняется поиск по типу и обновляется имя. 
// 
// Параметры:
//  ИмяКоллекции  - строка.
//  РежимСообщений - Строка: "Нет","Все","Ошибки".
// 
Процедура ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных(ИмяКоллекции,РежимСообщений="Все")
	
	ВыводитьОшибки     = ?(РежимСообщений="Все" ИЛИ РежимСообщений="Ошибки",Истина,Ложь);
	ВыводитьИнформацию = ?(РежимСообщений="Все",Истина,Ложь);
	
	// Проверим и при необходимости установим вид объекта в группе.
	ТекГруппа = НайтиПредопределеннуюГруппу(ИмяКоллекции);
	Если ЗначениеЗаполнено(ТекГруппа) 
		 И Не ЗначениеЗаполнено(ТекГруппа.ВидОбъекта) Тогда
		 
		ГруппаОбъект = ТекГруппа.ПолучитьОбъект(); 
		КоллекцияМетаданных = Метаданные[ИмяКоллекции];
		Если КоллекцияМетаданных.Количество()>0 Тогда
		
			ГруппаОбъект.ВидОбъекта = ПолучитьВидОбъектаПоМетаданным(КоллекцияМетаданных[0]);	
			Попытка
				
				ГруппаОбъект.Записать();
					Если ВыводитьИнформацию Тогда
						бит_Сообщить("Для группы объектов системы "+ТекГруппа+" установлен вид "+ГруппаОбъект.ВидОбъекта,СтатусСообщения.Информация);
					КонецЕсли; 
			Исключение
				Если ВыводитьОшибки Тогда
					бит_Сообщить("Не удалось записать группу объектов системы "+ТекГруппа,СтатусСообщения.Информация);
				КонецЕсли; 
			КонецПопытки;
		  
		КонецЕсли; 
	
	КонецЕсли; // Нужно устанавливать вид группы
	
	ВидОбъекта = Неопределено;
	Для каждого Мета Из Метаданные[ИмяКоллекции] Цикл
		
		// Регистры сведений - только независимые
		Если ИмяКоллекции = "РегистрыСведений" Тогда
			 Если Мета.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			 	Продолжить;
			 КонецЕсли; 
		КонецЕсли; 
		
	    бит_Состояние("Обновление объектов системы - "+Мета.Синоним);
		
		Если НЕ ЗначениеЗаполнено(ВидОбъекта) Тогда
			
			ВидОбъекта = ПолучитьВидОбъектаПоМетаданным(Мета);
			
		КонецЕсли; 
		
		СтруктураПараметров = Новый Структура("ИмяОбъекта
												|,ВидОбъекта
												|,Наименование
												|,ИмяОбъектаПолное
												|,ИмяТипаОбъекта
												|,ТипЗначенияОбъекта
												|,Родитель");
		СтруктураПараметров.ИмяОбъекта         = Мета.Имя;
		СтруктураПараметров.ВидОбъекта         = ВидОбъекта;
		СтруктураПараметров.Наименование       = Мета.Синоним;
		СтруктураПараметров.ИмяОбъектаПолное   = ПолучитьПолноеИмяОбъекта(Мета.Имя,СтруктураПараметров.ВидОбъекта);
		СтруктураПараметров.ИмяТипаОбъекта     = ПолучитьИмяТипаОбъекта(Мета.Имя,СтруктураПараметров.ВидОбъекта);
		СтруктураПараметров.ТипЗначенияОбъекта = Тип(СтруктураПараметров.ИмяТипаОбъекта);
		СтруктураПараметров.Родитель           = ТекГруппа;
		
		ОбъектДоступа = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное",СтруктураПараметров.ИмяОбъектаПолное);
		Если НЕ ЗначениеЗаполнено(ОбъектДоступа) ИЛИ ОбъектДоступа.Наименование <> Мета.Синоним Тогда
			
			ОбъектДоступа = НайтиОбъектДоступаПоТипу(Мета.Имя,ВидОбъекта);
			// Проверим а не изменилось ли имя объекта
			Если ЗначениеЗаполнено(ОбъектДоступа) 
				  И (ОбъектДоступа.ИмяОбъекта <> Мета.Имя 
				     ИЛИ ОбъектДоступа.Наименование <> Мета.Синоним
				     ИЛИ ОбъектДоступа.ИмяОбъектаПолное <>СтруктураПараметров.ИмяОбъектаПолное) Тогда
				
				СпрОбъект = ОбъектДоступа.ПолучитьОбъект();
				ЗаполнитьОбъектДоступа(СпрОбъект,СтруктураПараметров);
				СпрОбъект.Родитель = ОбъектДоступа.Родитель;
				Попытка
					СпрОбъект.Записать();
					Если ВыводитьИнформацию Тогда
						бит_Сообщить("Обновлен объект системы "+СтруктураПараметров.ИмяОбъектаПолное,СтатусСообщения.Информация);
					КонецЕсли; 
					Продолжить;
				Исключение
					Если ВыводитьОшибки Тогда
						бит_Сообщить("Не удалось записать объект системы "+СтруктураПараметров.ИмяОбъектаПолное,СтатусСообщения.Информация);
					КонецЕсли; 
				КонецПопытки;
				
			КонецЕсли; // Проверка изменения имени объекта
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ОбъектДоступа) Тогда
			СпрОбъект = Справочники.бит_ОбъектыСистемы.СоздатьЭлемент();
			ЗаполнитьОбъектДоступа(СпрОбъект,СтруктураПараметров);
			СпрОбъект.Отключено = Истина;
			Попытка
				СпрОбъект.Записать();
				Если ВыводитьИнформацию Тогда
					бит_Сообщить("Записан новый объект системы "+СтруктураПараметров.ИмяОбъектаПолное,СтатусСообщения.Информация);
				КонецЕсли; 
			Исключение
				Если ВыводитьОшибки Тогда
					бит_Сообщить("Не удалось записать объект системы "+СтруктураПараметров.ИмяОбъектаПолное,СтатусСообщения.Информация);
				КонецЕсли; 
			КонецПопытки;
		
		КонецЕсли; 
		
	КонецЦикла; // Метаданные[ИмяКоллекции]

КонецПроцедуры // ЗаполнитьОбъектыДоступаПоКоллекцииМетаданных()

// Получеат имя дополнительной формы, если она существует и совпадает требуемому типу.
// 
// Параметры:
//  ОбъектСсылка  	- Ссылка.
//  МенеджерОбъект 	- МенеджерОбъект.               
//  ТипФормы  		- Строка.
//  Форма 			- Форма. 
// 
Процедура ПроверитьПолучитьИмяДополнительнойФормы(ОбъектСсылка, МенеджерОбъект, ТипФормы, ИмяФ)

	ДополнитФорма  = ОбъектСсылка.Метаданные().ДополнительнаяФормаОбъекта;	

	Если ДополнитФорма <> Неопределено Тогда
		ТипФормыСтрока = Строка(ОбъектСсылка.Метаданные().ДополнительнаяФормаОбъекта.ТипФормы);
		Если ТипФормыСтрока = ТипФормы Тогда
			ИмяФ = ДополнитФорма.Имя;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьПолучитьИмяДополнительнойФормы()

#КонецОбласти
