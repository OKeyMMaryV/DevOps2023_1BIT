
#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает установленную рыночную ставку для указанной даты и числа дней.
// 
// Параметры:
//  Дата - Дата.
//  ЧислоДней - Число.
//  Валюта    - СправочникСсылка.Валюты.
// 
// Возвращаемое значение:
//  Результат - Число.
// 
Функция ПолучитьРыночнуюСтавку(Дата, ЧислоДней, Валюта) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	бит_му_РыночныеСтавкиКредитыЗаймыСтавки.Ссылка,
	               |	бит_му_РыночныеСтавкиКредитыЗаймыСтавки.ЧислоДней КАК ЧислоДней,
	               |	бит_му_РыночныеСтавкиКредитыЗаймыСтавки.Ставка
	               |ИЗ
	               |	Справочник.бит_му_РыночныеСтавкиКредитыЗаймы.Ставки КАК бит_му_РыночныеСтавкиКредитыЗаймыСтавки
	               |ГДЕ
	               |	бит_му_РыночныеСтавкиКредитыЗаймыСтавки.Ссылка В
	               |			(ВЫБРАТЬ
	               |				бит_му_РыночныеСтавкиКредитыЗаймыСрезПоследних.Ставки
	               |			ИЗ
	               |				РегистрСведений.бит_му_РыночныеСтавкиКредитыЗаймы.СрезПоследних(&Дата, ) КАК бит_му_РыночныеСтавкиКредитыЗаймыСрезПоследних)
	               |	И бит_му_РыночныеСтавкиКредитыЗаймыСтавки.ЧислоДней >= &ЧислоДней
	               |	И бит_му_РыночныеСтавкиКредитыЗаймыСтавки.Ссылка.Валюта = &Валюта
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЧислоДней";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Дата", 		Дата);
	Запрос.УстановитьПараметр("ЧислоДней", 	ЧислоДней);
	Запрос.УстановитьПараметр("Валюта"   ,  Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ставка;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьРыночнуюСтавку()

// Функция возвращает установленную номинальную ставку для договора.
// 
// Параметры:
//  Дата - Дата.
//  Договор - СправочникСсылка.ДоговорыКонтрагентов.
// 
// Возвращаемое значение:
//  Результат - Структура.
// 
Функция ПолучитьДанныеПоНоминальнойСтавке(Дата, Договор) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Ставка", 						0);
	Результат.Вставить("ДополнительнаяСоставляющая", 	Неопределено);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_НоминальныеСтавкиСрезПоследних.Ставка,
	               |	бит_му_НоминальныеСтавкиСрезПоследних.ДополнительнаяСоставляющая
	               |ИЗ
	               |	РегистрСведений.бит_му_НоминальныеСтавки.СрезПоследних(&Дата, ДоговорКонтрагента = &ДоговорКонтрагента) КАК бит_му_НоминальныеСтавкиСрезПоследних";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.Ставка 						= Выборка.Ставка;
		Результат.ДополнительнаяСоставляющая 	= Выборка.ДополнительнаяСоставляющая;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьНоминальнуюСтавку()

// Процедура создает движения регистра сведений "бит_му_ПараметрыФинИнструментов".
// 
// Параметры:
// 	НаборЗаписей 			- Набор записей регистра сведений бит_му_ПараметрыФинИнструментов.
// 	СтруктураШапкиДокумента - Структура.
// 	СтруктураПараметров 	- Ключ имя параметра, Значение - значение параметра.
// 
Процедура ЗаписатьПараметры(НаборЗаписей, СтруктураШапкиДокумента, СтруктураПараметров) Экспорт

	Для каждого ТекПараметр Из СтруктураПараметров Цикл
	
		Запись = НаборЗаписей.Добавить();
		Запись.Период				= СтруктураШапкиДокумента.Дата;
		Запись.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
		Запись.Параметр				= ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов[ТекПараметр.Ключ];
		Запись.ЗначениеПараметра 	= ТекПараметр.Значение;
		
	КонецЦикла;

КонецПроцедуры // ЗаписатьПараметры()

// Функция возвращает набор параметров кредитов и займов.
// 
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//  ДатаЗапроса - Дата.
//  СтруктураПараметров - МассивПараметров, по умолчанию Неопределено.
// 
// Возвращаемое значение:
//  Результат - Соответствие.
// 
Функция ПолучитьПараметры(ДоговорКонтрагента, ДатаЗапроса, МассивПараметров = Неопределено) Экспорт

	Результат = Новый Соответствие;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.Параметр,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
	               |ИЗ
	               |	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(
	               |			&Дата,
	               |			ДоговорКонтрагента = &ДоговорКонтрагента
	               |" + ?(НЕ ЗначениеЗаполнено(МассивПараметров), "", "И Параметр В (&МассивПараметров)") + "
				   |) КАК бит_му_ПараметрыФинИнструментовСрезПоследних";	
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дата", 				ДатаЗапроса);
	Запрос.УстановитьПараметр("МассивПараметров", 	МассивПараметров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Параметр, Выборка.ЗначениеПараметра);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции // ПолучитьПараметры()

// Процедура устанавливает счета учета из параметров финансовых инструментов.
// 
// Параметры:
//  Объект - ДокументОбъект.бит_му_ПринятиеКУчетуОС.
// 
Процедура ПолучитьСчетаУчетаПоДоговору(Объект) Экспорт
		
	// Получим значения счетов из регистра сведений.
	ПВХПараметрыКЗ = ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"	   , Объект.Дата);
	Запрос.УстановитьПараметр("Договор"	   , Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПараметрСД" , ПВХПараметрыКЗ.СчетДолгосрочныхОбязательств);
	Запрос.УстановитьПараметр("ПараметрСК" , ПВХПараметрыКЗ.СчетКраткосрочныхОбязательств);
	Запрос.УстановитьПараметр("ПараметрСА" , ПВХПараметрыКЗ.СчетУчетаАванса);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПараметрыКЗ_СД.ЗначениеПараметра КАК СчетУчетаДолгосрочный,
	|	ПараметрыКЗ_СК.ЗначениеПараметра КАК СчетУчетаКраткосрочный,
	|	ПараметрыКЗ_СА.ЗначениеПараметра КАК СчетУчетаАванса
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(
	|			&Дата, ДоговорКонтрагента = &Договор И Параметр = &ПараметрСД) КАК ПараметрыКЗ_СД,
	|	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(
	|			&Дата, ДоговорКонтрагента = &Договор И Параметр = &ПараметрСК) КАК ПараметрыКЗ_СК,
	|	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(
	|			&Дата, ДоговорКонтрагента = &Договор И Параметр = &ПараметрСА) КАК ПараметрыКЗ_СА
	|";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	Иначе
		Объект.СчетУчетаДолгосрочный  = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
		Объект.СчетУчетаКраткосрочный = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
		Объект.СчетУчетаАванса 	      = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();		
	КонецЕсли; 	

КонецПроцедуры // ПолучитьСчетаУчетаПоДоговору()

// Функция.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
Функция ПолучитьТаблицуПараметров(Параметры, Договоры, Момент, СтрПар = Неопределено ) Экспорт

	ТабРез    = Новый ТаблицаЗначений;
	ТабРез.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Имена = Новый Соответствие;
	
	Для каждого Пар Из Параметры Цикл
	
		Имя = ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.ПолучитьИмяПредопределенного(Пар);
		
		Имена.Вставить(Пар,Имя);
		
		ТабРез.Колонки.Добавить(Имя, Пар.ТипЗначения);
	
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПараметров", Параметры);
	Запрос.УстановитьПараметр("МассивДоговоров", Договоры);
	Запрос.УстановитьПараметр("Момент", Момент);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.Параметр КАК Параметр,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
	               |ИЗ
	               |	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(
	               |			&Момент,
	               |			Параметр В (&МассивПараметров)
	               |				И ДоговорКонтрагента В (&МассивДоговоров)) КАК бит_му_ПараметрыФинИнструментовСрезПоследних
	               |ИТОГИ ПО
	               |	ДоговорКонтрагента";

	Результат = Запрос.Выполнить();
	
	ВыборкаДог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДог.Следующий() Цикл
		
		НоваяСтрока = ТабРез.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ВыборкаДог.ДоговорКонтрагента;
		
		ВыборкаПар = ВыборкаДог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПар.Следующий() Цикл
		
			ИмяКолонки = Имена[ВыборкаПар.Параметр];
			Если НЕ ИмяКолонки = Неопределено Тогда
			
				НоваяСтрока[ИмяКолонки] = ВыборкаПар.ЗначениеПараметра;
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЦикла; 
				   
	Возврат ТабРез;
	
КонецФункции // ПолучитьТаблицуПараметров()

// Функция возвращает набор номинальных ставок для договора.
// 
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
// 
// Возвращаемое значение:
//  Результат - Структура.
// 
Функция ПолучитьНаборНоминальныхСтавок(ДоговорКонтрагента) Экспорт

	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("Период");
	ТабЗнач.Колонки.Добавить("Ставка");
	
	// Дата окончания платежей
	ДатаОкончания = Неопределено;

    ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
                   |	бит_му_ФинансовыеГрафикиОбороты.Период КАК Период
                   |ИЗ
                   |	РегистрНакопления.бит_му_ФинансовыеГрафики.Обороты(, , Месяц, Объект = &ДоговорКонтрагента) КАК бит_му_ФинансовыеГрафикиОбороты
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |	Период УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Выборка = запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДатаОкончания = Выборка.Период;
	КонецЕсли;
	
	// Выборка номинальных ставок
    ТекстЗапроса = "ВЫБРАТЬ
                   |	бит_му_НоминальныеСтавки.Период КАК Период,
                   |	бит_му_НоминальныеСтавки.Ставка КАК Ставка,
                   |	бит_му_НоминальныеСтавки.ДополнительнаяСоставляющая КАК Составляющая
                   |ИЗ
                   |	РегистрСведений.бит_му_НоминальныеСтавки КАК бит_му_НоминальныеСтавки
                   |ГДЕ
                   |	бит_му_НоминальныеСтавки.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "И бит_му_НоминальныеСтавки.Период <= &ДатаОкончания";
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	
	ТаблицаСтавок = Запрос.Выполнить().Выгрузить();
	
	// Дополним таблицу строкой с датой окончания.
	Если (ТаблицаСтавок.Количество() > 0) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		СтрокаТаблицы = ТаблицаСтавок[ТаблицаСтавок.Количество() - 1];
		
		Если СтрокаТаблицы.Период <> ДатаОкончания Тогда
			НоваяСтрока = ТаблицаСтавок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Период = ДатаОкончания;
		КонецЕсли;		
	КонецЕсли;
	
	// Выборка дополнительных ставок
    ТекстЗапроса = "ВЫБРАТЬ
                   |	бит_му_ДополнительныеСтавки.Период КАК Период,
                   |	бит_му_ДополнительныеСтавки.ВидСтавки КАК Составляющая,
                   |	бит_му_ДополнительныеСтавки.Ставка
                   |ИЗ
                   |	РегистрСведений.бит_му_ДополнительныеСтавки КАК бит_му_ДополнительныеСтавки
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |	Период";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ДопСтавки = Запрос.Выполнить().Выбрать();
	
	// 
	ТекПериод = Дата(1, 1, 1); ТекСтавка = 0; ТекСоставляющая = Неопределено;
	
	Для каждого ТекСтрока Из ТаблицаСтавок Цикл
		
		Пока (ТекПериод <> Дата(1, 1, 1)) И (ДобавитьМесяц(ТекПериод, 1) < ТекСтрока.Период) Цикл
			ТекПериод = ДобавитьМесяц(ТекПериод, 1);
			НоваяСтрока = ТабЗнач.Добавить();
			НоваяСтрока.Период = ТекПериод;
			НоваяСтрока.Ставка = ПолучитьДопСтавку(ДопСтавки, ТекПериод, ТекСоставляющая) + ТекСтавка;
		КонецЦикла;
		
		ТекПериод 		= ТекСтрока.Период;
		ТекСтавка 		= ТекСтрока.Ставка;
		ТекСоставляющая = ТекСтрока.Составляющая;
		НоваяСтрока = ТабЗнач.Добавить();
		НоваяСтрока.Период = ТекПериод;
		НоваяСтрока.Ставка = ПолучитьДопСтавку(ДопСтавки, ТекПериод, ТекСоставляющая) + ТекСтавка;
		
	КонецЦикла;
	
	Результат = Новый Соответствие;
	
	Для каждого ТекСтр Из ТабЗнач Цикл
		Результат.Вставить(ТекСтр.Период, ТекСтр.Ставка/12);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьНаборНоминальныхСтавок()

// Функция возвращает набор параметров фин. инструмента.
// 
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка ДоговорыКонтрагентов.
//  Дата - Дата.
// 
// Возвращаемое значение:
//  Результат - ДеревоЗначений.
// 
Функция ПолучитьДеревоПараметровФинИнструментов(ДоговорКонтрагента, Дата) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.Параметр КАК Параметр,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра КАК Значение
	               |ИЗ
	               |	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, ДоговорКонтрагента = &ДоговорКонтрагента) КАК бит_му_ПараметрыФинИнструментовСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.Параметр.Наименование";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Дата", 				КонецДня(Дата));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоПараметров = Новый ДеревоЗначений;
	ДеревоПараметров.Колонки.Добавить("Параметр");
	ДеревоПараметров.Колонки.Добавить("Значение");
	
	// Добавим ветку "Основные сведения".
	ВерхняяСтрока = ДеревоПараметров.Строки.Добавить();
	ВерхняяСтрока.Параметр = "Параметры финансового инструмента";
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СтрокаДереваПараметров = ВерхняяСтрока.Строки.Добавить();
		СтрокаДереваПараметров.Параметр = Выборка.Параметр;
		СтрокаДереваПараметров.Значение = Выборка.Значение;
			
	КонецЦикла;
	
	Возврат ДеревоПараметров;
	
КонецФункции // ПолучитьДеревоПараметровФинИнструментов()
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает значение дополнительной ставки.
// 
Функция ПолучитьДопСтавку(ДопСтавки, Период, Составляющая)
	
	Результат = 0;
	ДопСтавки.Сбросить();
	
	СтуктураПоиска = Новый Структура("Составляющая");
	СтуктураПоиска.Составляющая = Составляющая;
	Пока ДопСтавки.НайтиСледующий(СтуктураПоиска) Цикл
		Если ДопСтавки.Период > Период Тогда
			Прервать;
		КонецЕсли;
		Результат = ДопСтавки.Ставка;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
