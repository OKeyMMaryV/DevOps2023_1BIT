#Область ПрограммныйИнтерфейс

#Область ЗаполнениеДанныхЭДОПоПрикладнымДокументам

#Область ПроверкаЗаполнения

// Проверяет совпадение табличной части "Штрихкоды упаковок" и табличной части ("Товары") 
//   в отношении маркируемой продукции перед формированием документа ЭДО
//
// Параметры:
//   ПроверяемыйДокумент - ДокументСсылка - проверяемый документ
// Возвращаемое значение:
//   Булево - номенклатура и количество по маркируемой продукции совпадают
//
Функция ДанныеДокументаСоответствуютДаннымУпаковок(ПроверяемыйДокумент) Экспорт
	
	ИмяДокумента = ПроверяемыйДокумент.Метаданные().Имя;
	
	ИмяТаблицы = СтрШаблон("Документ.%1.ШтрихкодыУпаковок", ИмяДокумента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаШтрихКодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	&ИмяТаблицы КАК ТаблицаШтрихКодыУпаковок
	|ГДЕ
	|	ТаблицаШтрихКодыУпаковок.Ссылка = &ПроверяемыйДокумент";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
	Запрос.УстановитьПараметр("ПроверяемыйДокумент", ПроверяемыйДокумент);
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	
	ВидыПродукции = Новый Массив;
	ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
	ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Обувная);
	
	ДанныеДерева    = Содержимое(ШтрихкодыУпаковок, ВидыПродукции);
	ДанныеДокумента = ТаблицаМаркируемойПродукцииДокумента(ПроверяемыйДокумент, ВидыПродукции);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДерева.Номенклатура,
	|	ДанныеДерева.Характеристика,
	|	ДанныеДерева.Серия,
	|	ДанныеДерева.Количество
	|ПОМЕСТИТЬ ДанныеДерева
	|ИЗ
	|	&ДанныеДерева КАК ДанныеДерева
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Серия,
	|	ДанныеДокумента.Количество
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Серия,
	|	ЕСТЬNULL(ДанныеДерева.Количество , 0) - ДанныеДокумента.Количество КАК Различие
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДерева КАК ДанныеДерева
	|		ПО ДанныеДерева.Номенклатура = ДанныеДокумента.Номенклатура
	|		И ДанныеДерева.Характеристика = ДанныеДокумента.Характеристика
	|		И ДанныеДерева.Серия = ДанныеДокумента.Серия
	|ГДЕ
	|	ЕСТЬNULL(ДанныеДерева.Количество, 0) - ДанныеДокумента.Количество <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДерева.Номенклатура,
	|	ДанныеДерева.Характеристика,
	|	ДанныеДерева.Серия,
	|	ДанныеДерева.Количество
	|ИЗ
	|	ДанныеДерева КАК ДанныеДерева
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Номенклатура = ДанныеДерева.Номенклатура
	|		И ДанныеДокумента.Характеристика = ДанныеДерева.Характеристика
	|		И ДанныеДокумента.Серия = ДанныеДерева.Серия
	|ГДЕ
	|	ДанныеДокумента.Номенклатура ЕСТЬ NULL
	|	И ДанныеДерева.Количество <> 0";
	
	Запрос.УстановитьПараметр("ДанныеДерева",    ДанныеДерева);
	Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

// Проверяет что по текущему прикладному документу есть электронный документ (входящий или исходящий)
//
// Параметры:
//   Ссылка - ДокументСсылка - проверяемый документ
// Возвращаемое значение:
//   Булево - с текущим документом связан электронный документ
//
Функция ДокументСвязанСЭлектронным(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	Статус = ОбменСКонтрагентами.СтатусДокументооборота(Ссылка);
	Если Статус.ЭлектронныйДокумент = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СоставШтрихкодовУпаковок

// Разворачивает таблицу транспортных и индивидуальных штрихкодов до номенклатуры, характеристики, серии
//   для дальнейшего сопоставления информации об упаковках с товарной частью.
//   Для транспортных упаковок номенклатура (характеристика, серия)- это номенклатура (характеристика, серия)
//   первого вложенного (на любом уровне) индивидуального штрихкода.
// 
// Параметры:
// 	ТаблицаУпаковок - ТаблицаЗначений - исходная таблица упаковок:
// 	 * Ссылка   - Произвольный - объект-владелец штрихкода
// 	 * Штрихкод - СправочникСсылка.ШтрихкодыУпаковокТоваров
// Возвращаемое значение - ТаблицаЗначений - таблица упаковок с товарными данными:
// 	 * Ссылка             - Произвольный - объект-владелец штрихкода - исходная колонка
// 	 * Штрихкод           - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на индивидуальный штрихкод содержимого
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
// 	 * Серия              - ОпределяемыйТип.СерияНоменклатуры - содержимое
// 	 * ЗначениеШтрихкода  - Строка - текстовое представление исходного штрихкода для передачи в ЭДО
// 	 * Обработан          - Булево - признак сопоставления строки товарной части документа
//
Функция ЧастичноеСодержимое(ТаблицаУпаковок) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.Ссылка   КАК Ссылка,
		|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ШтрихкодыВходящие
		|ИЗ
		|	&ШтрихкодУпаковки КАК ШтрихкодыУпаковок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Штрихкод
		|");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыВходящие.Ссылка            КАК Ссылка,
		|	ШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ШтрихкодыВходящие.Штрихкод          КАК Штрихкод,
		|	ШтрихкодыУпаковок.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковок.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковок.Серия             КАК Серия,
		|	ЛОЖЬ                                КАК Обработан
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыВходящие КАК ШтрихкодыВходящие
		|		ПО ШтрихкодыВходящие.Штрихкод = ШтрихкодыУпаковок.Ссылка
		|");
	
	СписокЗапросов.Добавить(
		ШтрихкодированиеИС.ОпределитьТекстЗапросаСвойстваМаркируемойПродукции());
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Ссылка            КАК Ссылка,
		|	ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ДанныеШтрихкодовУпаковок.Штрихкод          КАК Штрихкод,
		|	ДанныеШтрихкодовУпаковок.Номенклатура      КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика    КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Серия             КАК Серия,
		|	ДанныеШтрихкодовУпаковок.Обработан         КАК Обработан,
		|	СвойстваМаркируемойПродукции.ВидПродукции  КАК ВидПродукции
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура
		|		 И ДанныеШтрихкодовУпаковок.Характеристика = СвойстваМаркируемойПродукции.Характеристика
		|",
		"Результат");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыВходящие.Ссылка   КАК Ссылка,
		|	ШтрихкодыВходящие.Штрихкод КАК Родитель,
		|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыВходящие КАК ШтрихкодыВходящие
		|		ПО ШтрихкодыВходящие.Штрихкод = ШтрихкодыУпаковок.Ссылка
		|		И ШтрихкодыУпаковок.НомерСтроки = 1",
		"ВложенныеЗаписи");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", ТаблицаУпаковок);
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
	
	Результат = РезультатыЗапроса["Результат"].Выгрузить();
	ВложенныеЗаписи = РезультатыЗапроса["ВложенныеЗаписи"].Выгрузить();
	
	Результат.Индексы.Добавить("Ссылка, Штрихкод");
	СтруктураПоиска = Новый Структура("Ссылка, Штрихкод");
	
	Пока ВложенныеЗаписи.Количество() Цикл
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ВложенныеЗаписи);
		ДанныеВложенныхШтрихкодов = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов["Результат"].Выгрузить();
		ВложенныеЗаписи.Индексы.Добавить("Ссылка, Штрихкод");
		Для Каждого ДанныеШтрихКода Из ДочерниеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеШтрихКода);
			ДанныеРодителя = ВложенныеЗаписи.НайтиСтроки(СтруктураПоиска)[0];
			СтруктураПоиска.Штрихкод = ДанныеРодителя.Родитель;
			СтрокаЗаполнения = Результат.НайтиСтроки(СтруктураПоиска)[0];
			ЗаполнитьЗначенияСвойств(СтрокаЗаполнения, ДанныеШтрихКода, "Штрихкод, Номенклатура, Характеристика, Серия");
		КонецЦикла;
		ВложенныеЗаписи = ДанныеВложенныхШтрихкодов["ВложенныеЗаписи"].Выгрузить();
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		Если СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
			СтрокаТаблицы.ЗначениеШтрихкода = ШтрихкодированиеМОТПКлиентСервер.КодМаркировкиДляПередачиМОТП(СтрокаТаблицы.ЗначениеШтрихкода, Истина);
		ИначеЕсли СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
			СтрокаТаблицы.ЗначениеШтрихкода = ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиДляПередачиИСМП(СтрокаТаблицы.ЗначениеШтрихкода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разворачивает таблицу транспортных и индивидуалЭлектронноеВзаимодействиеИСМППереопределяемыйки, серии
//   для дальнейшего сравнения информации об упаковках с товарной частью.
// 
// Параметры:
//   ШтрихкодыУпаковок - Массив - исходный массив элементов типа "СправочникСсылка.ШтрихкодыУпаковокТоваров"
//   ВидыПродукцииИС   - (см. ИнтеграцияИСУТ.ШтрихкодыСодержащиеВидыПродукции) - виды продукции для отбора штрихкодов
// Возвращаемое значение - ТаблицаЗначений - таблица состава упаковок:
//   * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
//   * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
//   * Серия              - ОпределяемыйТип.СерияНоменклатуры - содержимое
//   * Количество         - Число - количество единиц содержимого
//
Функция Содержимое(Знач ШтрихкодыУпаковок, Знач ВидыПродукцииИС) Экспорт
	
	Запрос = Новый Запрос;
	ШтрихкодированиеИСПереопределяемый.ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС);
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыУпаковок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Номенклатура             КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика           КАК Характеристика,
	|	ШтрихкодыУпаковок.Серия                    КАК Серия,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковок.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ШтрихкодыУпаковок.Количество
	|	КОНЕЦ                                      КАК Количество
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК Вложенные
	|		ПО ШтрихкодыУпаковок.Ссылка = Вложенные.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И Вложенные.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[0].Выгрузить();
	ВложенныеЗаписи = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
	Пока ВложенныеЗаписи.Количество() Цикл
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ВложенныеЗаписи);
		ДанныеВложенныхШтрихкодов = Запрос.ВыполнитьПакет();
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов[0].Выбрать();
		Пока ДочерниеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), ДочерниеЗаписи);
		КонецЦикла;
		ВложенныеЗаписи = ДанныеВложенныхШтрихкодов[1].Выгрузить().ВыгрузитьКолонку("Штрихкод");
	КонецЦикла;
	
	Результат.Свернуть("Номенклатура, Характеристика, Серия", "Количество");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
//  ОбъектыСОграничениемДлины - Массив Из ДокументСсылка - документы в которых сработало ограничение на длину строки
//
Процедура ЗаполнитьСведенияОМаркировке(Приемник, Источник, ДанныеШтрихкодовУпаковок, ОбъектыСОграничениемДлины) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировке(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДаннымДляОшибки = "Объект";
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("КодУпаковки");
	
	СведенияОМаркировке = Новый Структура;
	СведенияОМаркировке.Вставить("КодыИндивидуальныхУпаковок", ТаблицаКодов);
	Приемник.СведенияОМаркировке = СведенияОМаркировке;
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия") Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Количество = Источник.Количество;
	ОбщаяДлинаКодов = 0;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		ОбщаяДлинаКодов = ОбщаяДлинаКодов + СтрДлина(СтрокаУпаковки.ЗначениеШтрихКода) + 2;
		Если (Количество<=0) Тогда
			Прервать;
		ИначеЕсли ОбщаяДлинаКодов > 2000 Тогда
			ОбъектыСОграничениемДлины.Добавить(Источник.Ссылка);
			Прервать;
		КонецЕсли;
		НоваяСтрока = ТаблицаКодов.Добавить();
		НоваяСтрока.КодУпаковки = СтрокаУпаковки.ЗначениеШтрихКода;
		СтрокаУпаковки.Обработан = Истина;
		Количество = Количество - 1;
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаКодов,
		"КодУпаковки", Источник.Ссылка, ПутьКДаннымДляОшибки);
	
КонецПроцедуры


// Проверяет распределение штрихкодов по строкам товаров. Требуется использование в формате ЭДО с ограничением
//   количества символов кодов маркировки для строки маркируемой продукции (после применения ограничения могут быть 
//   распределены не все коды)
//
// Параметры:
//   ДанныеШтрихкодовУпаковок  - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
//   ОбъектыСОграничениемДлины - Массив Из ДокументСсылка      - ссылки на документы, где требуется проверка
//   Отказ                     - Булево - признак что не все коды распределены
//
Процедура ПроверитьСведенияОМаркировке(ДанныеШтрихкодовУпаковок, ОбъектыСОграничениемДлины, Отказ) Экспорт

	Если ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Обработан, Ссылка", Ложь);
	Для Каждого Ссылка Из ОбъектыСОграничениемДлины Цикл
		ПараметрыПоиска.Ссылка = Ссылка;
		СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
		Если СтрокиУпаковок.Количество() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
Процедура ЗаполнитьСведенияОМаркировке_2019(Приемник, Источник, ДанныеШтрихкодовУпаковок) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировке_2019(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДаннымДляОшибки = "Объект";
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("Код");
	
	СведенияОМаркировке = Новый Структура;
	СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки", ТаблицаКодов);
	Приемник.СведенияОМаркировке = СведенияОМаркировке;
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия") Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Количество = Источник.Количество;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		Если (Количество<=0) Тогда
			Прервать;
		КонецЕсли;
		НоваяСтрока = ТаблицаКодов.Добавить();
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		СтрокаУпаковки.Обработан = Истина;
		Количество = Количество - 1;
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаКодов,
		"Код", Источник.Ссылка, ПутьКДаннымДляОшибки);

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПрикладныхДокументовНаОснованииДокументовЭДО

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;
//
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре)
	
	ШтрихкодыУпаковок = Новый Массив;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		Для Каждого СтрокаКодаУпаковки Из КодыУпаковок.Строки Цикл
			
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок.НомерСтроки.КодУпаковки");
			ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;
//
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО_2019(СведенияОТоваре)
	
	ШтрихкодыУпаковок = Новый Массив;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		
		ИндивидуальныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из ИндивидуальныеУпаковки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
		
		ТранспортныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из ТранспортныеУпаковки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Создает новую таблицу значений для штрихкодов упаковок.
// В прикладных документах должна существовать табличная часть с аналогичным набором колонок.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений штрихкодов упаковок:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод упаковки
// * ЗначениеШтрихкода - Строка - Значение штрихкода
Функция НоваяТаблицаШтрихкодыУпаковок() Экспорт
	
	ШтрихкодыУпаковок = Новый ТаблицаЗначений;
	ШтрихкодыУпаковок.Колонки.Добавить("ШтрихкодУпаковки");
	ШтрихкодыУпаковок.Колонки.Добавить("ЗначениеШтрихкода");
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО_2019(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Сворачивает таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов упаковок.
Процедура СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок) Экспорт
	
	ШтрихкодыУпаковок.Свернуть("ЗначениеШтрихкода, ШтрихкодУпаковки");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПрикладныхДокументовНаОснованииДокументовЭДО

// Предназначена для получения значения из дерева значений по полному пути.
// (См. ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве)
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - объект поиска.
//  ПолныйПуть   - Строка         - значение поиска.
// 
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть)
	
	СтандартнаяОбработка = Истина;
	ЗначениеРеквизита = "";
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриОпределенииЗначенияРеквизитаВДереве(ЗначениеРеквизита, ДеревоДанных, ПолныйПуть, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		ЗначениеРеквизита = Модуль.ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть);
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполнения

Функция ТаблицаМаркируемойПродукцииДокумента(Документ, ВидыМаркируемойПродукции)
	
	ТаблицаПродукции = Новый ТаблицаЗначений;
	ТаблицаПродукции.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПродукции.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаПродукции.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаПродукции.Колонки.Добавить("Количество",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ИнтеграцияИСМППереопределяемый.СформироватьТаблицуМаркируемойПродукцииДокумента(Документ,
		ТаблицаПродукции, ВидыМаркируемойПродукции);
	
	Возврат ТаблицаПродукции;
	
КонецФункции

#КонецОбласти

#КонецОбласти