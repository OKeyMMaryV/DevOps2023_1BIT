
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-07 (#3788)

//ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ

Процедура ФиксироватьЗаявкиПриПроведенииВСтатусеНаСогласовании(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ФВБ = Источник.Ссылка;
	ВидСтатуса = ПредопределенноеЗначение("Перечисление.бит_ВидыСтатусовОбъектов.Статус");
	
	Запись = бит_Визирование.ПолучитьСтатусОбъекта(ФВБ, ВидСтатуса);
	
	Если НЕ (Запись.Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании")
		И Запись.СтатусПредыдущий <> ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании")) Тогда
		Возврат;
	КонецЕсли; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-16 (#3914)
	МассивСценариев = ПолучитьМассивСценариевПоФВБ(ФВБ);
	Если МассивСценариев.Найти(ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_У")) = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-16 (#3914)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Источник.Движения.бит_КонтрольныеЗначенияБюджетов.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Кампания КАК Кампания,
		|	ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Кампания.ПериодКампании.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ_Кампании
		|ИЗ
		|	РегистрСведений.ок_СтатусыКампанииПоНачислениюАккруалов.СрезПоследних(ДАТАВРЕМЯ(1, 1, 1), ) КАК ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних
		|ГДЕ
		|	(ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыКампанииПоАккруалам.Черновик)
		|			ИЛИ ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыКампанииПоАккруалам.ОткрытаДляИнициаторов))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кампании.Кампания КАК Кампания,
		|	&ФВБ КАК ФВБ,
		|	КЗБ.Период КАК ПериодКЗБ,
		|	КЗБ.ЦФО КАК ЦФО,
		|	КЗБ.СтатьяОборотов КАК СтатьяОборотов,
		|	КЗБ.Аналитика_2 КАК Объект,
		|	СУММА(КЗБ.СуммаСценарийКонтроль) КАК СуммаКонтроль,
		|	0 КАК СуммаИсполнение,
		|	СУММА(КЗБ.СуммаСценарийКонтроль) КАК СуммаПринятоУслугТоваровРаботБезНДС
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-20 (#4390)
		|	, КЗБ.Проект КАК Проект
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-20 (#4390)
		|ИЗ
		|	ВТ_Кампании КАК Кампании
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК КЗБ
		|		ПО (КЗБ.Аналитика_1 = &ФВБ)
		|			И Кампании.Дата >= КЗБ.Период
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-19 (#3914)
		|			И (КЗБ.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Заявка_У))
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-19 (#3914)
		|ГДЕ
		|	НЕ КЗБ.Период ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Кампании.Кампания,
		|	КЗБ.Период,
		|	КЗБ.ЦФО,
		|	КЗБ.СтатьяОборотов,
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-20 (#4390)
		|	КЗБ.Проект,
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-20 (#4390)
		|	КЗБ.Аналитика_2";
	
	Запрос.УстановитьПараметр("ФВБ", ФВБ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	НаборСоздан = Ложь;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если НЕ НаборСоздан Тогда
		
			НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Кампания.Установить(ВыборкаДетальныеЗаписи.Кампания);
			НаборЗаписей.Отбор.ФВБ.Установить(ФВБ);
			
			НаборСоздан = Истина;
			
		КонецЕсли; 
		
		НоваяЗаписьНачислениеАккруалов = НаборЗаписей.Добавить();
		НоваяЗаписьНачислениеАккруалов.Кампания 		= ВыборкаДетальныеЗаписи.Кампания;
		НоваяЗаписьНачислениеАккруалов.ФВБ 				= ВыборкаДетальныеЗаписи.ФВБ;
		НоваяЗаписьНачислениеАккруалов.ЦФО 				= ВыборкаДетальныеЗаписи.ЦФО;
		НоваяЗаписьНачислениеАккруалов.СтатьяОборотов 	= ВыборкаДетальныеЗаписи.СтатьяОборотов;
		НоваяЗаписьНачислениеАккруалов.Объект 			= ВыборкаДетальныеЗаписи.Объект;
		НоваяЗаписьНачислениеАккруалов.ИДСтроки 		= Строка(Новый УникальныйИдентификатор);
		НоваяЗаписьНачислениеАккруалов.ПериодКЗБ 		= ВыборкаДетальныеЗаписи.ПериодКЗБ;
		
		НоваяЗаписьНачислениеАккруалов.СуммаКонтроль	= ВыборкаДетальныеЗаписи.СуммаКонтроль;
		НоваяЗаписьНачислениеАккруалов.СуммаИсполнение 	= ВыборкаДетальныеЗаписи.СуммаИсполнение;
		НоваяЗаписьНачислениеАккруалов.СуммаПринятоУслугТоваровРаботБезНДС = ВыборкаДетальныеЗаписи.СуммаПринятоУслугТоваровРаботБезНДС;
		
		НоваяЗаписьНачислениеАккруалов.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		
		НоваяЗаписьНачислениеАккруалов.ПередатьИнициатору = Истина;
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-20 (#4390)
		НоваяЗаписьНачислениеАккруалов.Проект			= ВыборкаДетальныеЗаписи.Проект;
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-20 (#4390)
		
	КонецЦикла;
	
	Если НаборСоздан Тогда
	
		НаборЗаписей.Записать(Истина);
	
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ФиксироватьЗаявкиПередЗаписьюВСтатусеНаСогласовании(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ЭтоНовый() Или Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ФВБ = Источник.Ссылка;
	ВидСтатуса = ПредопределенноеЗначение("Перечисление.бит_ВидыСтатусовОбъектов.Статус");
	
	Запись = бит_Визирование.ПолучитьСтатусОбъекта(ФВБ, ВидСтатуса);
	
	Если НЕ (Запись.Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании")
		И Запись.СтатусПредыдущий <> ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании")) Тогда
		Возврат;
	КонецЕсли; 
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Источник.Проведен Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФВБ.Установить(ФВБ);
		НаборЗаписей.Записать(Истина);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры


//ПРОГРАММНЫЕ МЕТОДЫ

Функция ПолучитьСписокИнициаторов(Кампания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    //ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-25 (#3822)
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор.Email КАК Инициатор
		//|ИЗ
		//|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		//|ГДЕ
		//|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		//|	И НЕ НачислениеАккруаловКонтроллинг.Обработано
		//|	И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор ЕСТЬ NULL
		//|	И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = НЕОПРЕДЕЛЕНО
		//|	И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор.Email";
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			ТОГДА НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор.Email
		|		ИНАЧЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор.Email
		|	КОНЕЦ КАК Инициатор
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		|	И НЕ НачислениеАккруаловКонтроллинг.Обработано
		|	И (НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(СПравочник.бит_БК_Инициаторы.ПустаяСсылка)
		|				И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор ЕСТЬ NULL
		|				И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = НЕОПРЕДЕЛЕНО
		|				И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			ИЛИ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор <> ЗНАЧЕНИЕ(СПравочник.бит_БК_Инициаторы.ПустаяСсылка)
		|				И НЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор ЕСТЬ NULL
		|				И НЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = НЕОПРЕДЕЛЕНО)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			ТОГДА НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор.Email
		|		ИНАЧЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор.Email
		|	КОНЕЦ";
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-25 (#3822)
	
	Запрос.УстановитьПараметр("Кампания", Кампания);
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивИнициаторов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Инициатор");
	
	Возврат МассивИнициаторов;
	
КонецФункции

Функция ПолучитьСписокЦФОМенеджераПоКонтроллингу(Менеджер = Неопределено) Экспорт
	
	Если Менеджер = Неопределено Тогда
		Менеджер = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	КонецЕсли; 
	
	СписокЦФОМенеджераПоКонтроллингу = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МенеджерыПоКонтроллингуИЦФО.ЦФО КАК ЦФО
		|ИЗ
		|	РегистрСведений.СБ_СоответствиеФД_ЦФО КАК МенеджерыПоКонтроллингуИЦФО
		|ГДЕ
		|	МенеджерыПоКонтроллингуИЦФО.ОтветственныйЗаКорректировкуБК.Пользователь = &Менеджер
		|	И МенеджерыПоКонтроллингуИЦФО.ЦФО <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		СписокЦФОМенеджераПоКонтроллингу.Добавить(ВыборкаДетальныеЗаписи.ЦФО);
	КонецЦикла;
	
	Возврат СписокЦФОМенеджераПоКонтроллингу;
	
КонецФункции

Функция ПолучитьДанныеПоНеобработаннымЗаявкам(Кампания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    //ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-25 (#3822)
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор КАК Получатель,
		//|	НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор.Email КАК Email,
		//|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК КоличествоНеобработанныхЗаписей
		//|ИЗ
		//|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		//|ГДЕ
		//|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		//|	И НЕ НачислениеАккруаловКонтроллинг.Обработано
		//|	И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор ЕСТЬ NULL
		//|	И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = НЕОПРЕДЕЛЕНО
		//|	И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор,
		//|	НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор.Email";
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			ТОГДА НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор
		|		ИНАЧЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор
		|	КОНЕЦ КАК Получатель,
		|	ВЫБОР
		|		КОГДА НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			ТОГДА НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор.Email
		|		ИНАЧЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор.Email
		|	КОНЕЦ КАК Email,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК КоличествоНеобработанныхЗаписей
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		|	И НЕ НачислениеАккруаловКонтроллинг.Обработано
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-22 (#3969)
		|	И НачислениеАккруаловКонтроллинг.ПередатьИнициатору
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-22 (#3969)
		|	И (НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(СПравочник.бит_БК_Инициаторы.ПустаяСсылка)
		|				И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор ЕСТЬ NULL
		|				И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = НЕОПРЕДЕЛЕНО
		|				И НЕ НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			ИЛИ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор <> ЗНАЧЕНИЕ(СПравочник.бит_БК_Инициаторы.ПустаяСсылка)
		|				И НЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор ЕСТЬ NULL
		|				И НЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = НЕОПРЕДЕЛЕНО)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			ТОГДА НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор
		|		ИНАЧЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			ТОГДА НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор.Email
		|		ИНАЧЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор.Email
		|	КОНЕЦ";
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-25 (#3822)
	
	Запрос.УстановитьПараметр("Кампания", Кампания);
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоНеобработаннымЗаявкам = РезультатЗапроса.Выгрузить();
	
	Возврат ДанныеПоНеобработаннымЗаявкам;
	
КонецФункции

Функция ПолучитьКампаниюПоНачислениюАккруалов(ПериодКампании) Экспорт
	
	КампанияПоНачислениюАккруалов = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ок_КампанииПоНачислениюАккруалов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ок_КампанииПоНачислениюАккруалов КАК ок_КампанииПоНачислениюАккруалов
		|ГДЕ
		|	НЕ ок_КампанииПоНачислениюАккруалов.ПометкаУдаления
		|	И ок_КампанииПоНачислениюАккруалов.ПериодКампании = &ПериодКампании";
	
	Запрос.УстановитьПараметр("ПериодКампании", ПериодКампании);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КампанияПоНачислениюАккруалов = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат КампанияПоНачислениюАккруалов;
	
КонецФункции

Функция ПолучитьПоследнююКампанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(КампанииПоНачислениюАккруалов.ПериодКампании.Дата) КАК ПериодКампанииДата
		|ПОМЕСТИТЬ ВТ_МаксимальныйПериодКампании
		|ИЗ
		|	Справочник.ок_КампанииПоНачислениюАккруалов КАК КампанииПоНачислениюАккруалов
		|ГДЕ
		|	НЕ КампанииПоНачислениюАккруалов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(КампанииПоНачислениюАккруалов.Ссылка) КАК Кампания
		|ИЗ
		|	ВТ_МаксимальныйПериодКампании КАК МаксимальныйПериодКампании
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ок_КампанииПоНачислениюАккруалов КАК КампанииПоНачислениюАккруалов
		|		ПО МаксимальныйПериодКампании.ПериодКампанииДата = КампанииПоНачислениюАккруалов.ПериодКампании.Дата
		|ГДЕ
		|	НЕ КампанииПоНачислениюАккруалов.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Кампания;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьНаличиеОткрытойКампанииПоНачислениюАккруаловПоДругимПериодам(ПериодКампании) Экспорт
	
	НаличиеОткрытойКампании = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Кампания КАК Кампания
		|ИЗ
		|	РегистрСведений.ок_СтатусыКампанииПоНачислениюАккруалов.СрезПоследних(ДАТАВРЕМЯ(1, 1, 1), ) КАК ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних
		|ГДЕ
		|	(ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыКампанииПоАккруалам.Черновик)
		|			ИЛИ ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыКампанииПоАккруалам.ОткрытаДляИнициаторов))
		|	И ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Кампания.ПериодКампании <> &ПериодКампании";
	
	Запрос.УстановитьПараметр("ПериодКампании", ПериодКампании);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НаличиеОткрытойКампании = Истина;
	КонецЕсли;
	
	Возврат НаличиеОткрытойКампании;
	
КонецФункции

Функция ПолучитьСтатусКампанииПоНачислениюАккруалов(Кампания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрезПоследних = РегистрыСведений.ок_СтатусыКампанииПоНачислениюАккруалов.СрезПоследних(, Новый Структура("Кампания", Кампания));
	
	Результат = Неопределено;
	Если СрезПоследних.Количество() > 0 Тогда
		Результат = СрезПоследних[0].Статус;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьЗаписиКампанииКСозданиюДокумента(КампанияПоНачислениюАккруалов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ок_НачислениеАккруаловКонтроллинг.ИДСтроки КАК ИДСтроки
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК ок_НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	ок_НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		|	И ок_НачислениеАккруаловКонтроллинг.Обработано
		|	И НЕ ок_НачислениеАккруаловКонтроллинг.ГотовоКСозданиюДокумента";
	
	Запрос.УстановитьПараметр("Кампания", КампанияПоНачислениюАккруалов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Процедура УстановитьСтатусКампанииПоНачислениюАккруалов(Кампания, Статус) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ок_СтатусыКампанииПоНачислениюАккруалов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Активность 		= Истина;
	МенеджерЗаписи.Период 			= ТекущаяДата();
	МенеджерЗаписи.Кампания 		= Кампания;
	МенеджерЗаписи.Статус 			= Статус;
	МенеджерЗаписи.Ответственный 	= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьСтрокуТЧДокументаАккруалБезIDПоИДСтроки(ДокументАккруалБезID, ИДСтроки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	рс_АккруалБезIDБаза.Объект КАК Объект,
		|	рс_АккруалБезIDБаза.ФункцияЦФО КАК ФункцияЦФО,
		|	рс_АккруалБезIDБаза.Период КАК Период,
		|	рс_АккруалБезIDБаза.Счет КАК Счет,
		|	рс_АккруалБезIDБаза.СчетНаименование КАК СчетНаименование,
		|	рс_АккруалБезIDБаза.СтатьяОборотов КАК СтатьяОборотов,
		|	рс_АккруалБезIDБаза.Сумма КАК Сумма,
		|	рс_АккруалБезIDБаза.Организация КАК Организация,
		|	рс_АккруалБезIDБаза.НомерЗаявки КАК НомерЗаявки,
		|	рс_АккруалБезIDБаза.Инициатор КАК Инициатор,
		|	рс_АккруалБезIDБаза.ПредполагаемыйКонтрагент КАК ПредполагаемыйКонтрагент,
		|	рс_АккруалБезIDБаза.ЦельРасходов КАК ЦельРасходов,
		|	рс_АккруалБезIDБаза.ИДСтроки КАК ИДСтроки
		|ИЗ
		|	Документ.рс_АккруалБезID.База КАК рс_АккруалБезIDБаза
		|ГДЕ
		|	рс_АккруалБезIDБаза.Ссылка = &Ссылка
		|	И рс_АккруалБезIDБаза.ИДСтроки = &ИДСтроки
		|	И рс_АккруалБезIDБаза.Сумма > 0";
	
	Запрос.УстановитьПараметр("Ссылка", 	ДокументАккруалБезID);
	Запрос.УстановитьПараметр("ИДСтроки", 	ИДСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьМенеджераПоКонтроллингу() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	МенеджерыПоКонтроллингуИЦФО.ОтветственныйЗаКорректировкуБК КАК Менеджер
		|ИЗ
		|	РегистрСведений.СБ_СоответствиеФД_ЦФО КАК МенеджерыПоКонтроллингуИЦФО
		|ГДЕ
		|	МенеджерыПоКонтроллингуИЦФО.ОтветственныйЗаКорректировкуБК.Пользователь = &Менеджер";
	
	Запрос.УстановитьПараметр("Менеджер", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;	
	
	Возврат Результат;	
	
КонецФункции

Функция ПроверитьОтветственногоЗаКампанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	МенеджерыПоКонтроллингуИЦФО.ОтветственныйЗаКорректировкуБК КАК Менеджер
		|ИЗ
		|	РегистрСведений.СБ_СоответствиеФД_ЦФО КАК МенеджерыПоКонтроллингуИЦФО
		|ГДЕ
		|	МенеджерыПоКонтроллингуИЦФО.ОтветственныйЗаКорректировкуБК.Пользователь = &Менеджер
		|	И МенеджерыПоКонтроллингуИЦФО.ОтветственныйЗаКампаниюПоНачислениюАккруалов";
	
	Запрос.УстановитьПараметр("Менеджер", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивОтветственныхЗаКампанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МенеджерыПоКонтроллингуИЦФО.ОтветственныйЗаКорректировкуБК КАК Менеджер
		|ИЗ
		|	РегистрСведений.СБ_СоответствиеФД_ЦФО КАК МенеджерыПоКонтроллингуИЦФО
		|ГДЕ
		|	МенеджерыПоКонтроллингуИЦФО.ОтветственныйЗаКорректировкуБК.Пользователь = &Менеджер
		|	И МенеджерыПоКонтроллингуИЦФО.ОтветственныйЗаКампаниюПоНачислениюАккруалов";
	
	Запрос.УстановитьПараметр("Менеджер", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивОтветственныхЗаКампанию = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Менеджер");
	
	Возврат МассивОтветственныхЗаКампанию;
	
КонецФункции

Процедура ЗаполнитьНачислениеАккруаловМСФО(Кампания) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачислениеАккруаловКонтроллинг.Кампания КАК Кампания,
		|	НачислениеАккруаловКонтроллинг.ФВБ КАК ФВБ,
		|	НачислениеАккруаловКонтроллинг.ЦФО КАК ЦФО,
		|	НачислениеАккруаловКонтроллинг.СтатьяОборотов КАК СтатьяОборотов,
		|	НачислениеАккруаловКонтроллинг.Объект КАК Объект,
		|	НачислениеАккруаловКонтроллинг.ИДСтроки КАК ИДСтроки,
		|	НачислениеАккруаловКонтроллинг.ПериодКЗБ КАК ПериодКЗБ,
		|	НачислениеАккруаловКонтроллинг.СуммаКонтроль КАК СуммаКонтроль,
		|	НачислениеАккруаловКонтроллинг.СуммаИсполнение КАК СуммаИсполнение,
		|	НачислениеАккруаловКонтроллинг.СуммаПринятоУслугТоваровРаботБезНДС КАК СуммаПринятоУслугТоваровРаботБезНДС,
		|	НачислениеАккруаловКонтроллинг.ПроведеноВМСФО КАК ПроведеноВМСФО,
		|	НачислениеАккруаловКонтроллинг.НачислитьАккруал КАК НачислитьАккруал,
		|	НачислениеАккруаловКонтроллинг.ПредполагаемаяДатаПредоставленияДокументов КАК ПредполагаемаяДатаПредоставленияДокументов,
		|	НачислениеАккруаловКонтроллинг.Комментарий КАК Комментарий,
		|	НачислениеАккруаловКонтроллинг.Обработано КАК Обработано,
		|	НачислениеАккруаловКонтроллинг.ДатаПередачиВМСФО КАК ДатаПередачиВМСФО,
		|	НачислениеАккруаловКонтроллинг.ДатаИзменения КАК ДатаИзменения,
		|	НачислениеАккруаловКонтроллинг.Ответственный КАК Ответственный
		|ПОМЕСТИТЬ ВТ_ДанныеКонтроллинг
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		|	И НачислениеАккруаловКонтроллинг.НачислитьАккруал > 0
		|	И НачислениеАккруаловКонтроллинг.Обработано
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-02 (#3969)
		|	И НачислениеАккруаловКонтроллинг.ГотовоКСозданиюДокумента
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-02 (#3969)
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-16 (#3914)
		//|	И НачислениеАккруаловКонтроллинг.ДатаИзменения >= НачислениеАккруаловКонтроллинг.ДатаПередачиВМСФО
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-16 (#3914)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачислениеАккруаловМСФО.Кампания КАК Кампания,
		|	НачислениеАккруаловМСФО.ИДСтроки КАК ИДСтроки,
		|	НачислениеАккруаловМСФО.ФВБ КАК ФВБ,
		|	НачислениеАккруаловМСФО.ЦФО КАК ЦФО,
		|	НачислениеАккруаловМСФО.СтатьяОборотов КАК СтатьяОборотов,
		|	НачислениеАккруаловМСФО.Объект КАК Объект,
		|	НачислениеАккруаловМСФО.ПериодКЗБ КАК ПериодКЗБ,
		|	НачислениеАккруаловМСФО.СуммаКонтроль КАК СуммаКонтроль,
		|	НачислениеАккруаловМСФО.СуммаИсполнение КАК СуммаИсполнение,
		|	НачислениеАккруаловМСФО.СуммаПринятоУслугТоваровРаботБезНДС КАК СуммаПринятоУслугТоваровРаботБезНДС,
		|	НачислениеАккруаловМСФО.ПроведеноВМСФО КАК ПроведеноВМСФО,
		|	НачислениеАккруаловМСФО.НачислитьАккруал КАК НачислитьАккруал,
		|	НачислениеАккруаловМСФО.ПредполагаемаяДатаПредоставленияДокументов КАК ПредполагаемаяДатаПредоставленияДокументов,
		|	НачислениеАккруаловМСФО.Комментарий КАК Комментарий,
		|	НачислениеАккруаловМСФО.Обработано КАК Обработано,
		|	НачислениеАккруаловМСФО.ДатаИзменения КАК ДатаИзменения,
		|	НачислениеАккруаловМСФО.Ответственный КАК Ответственный,
		|	НачислениеАккруаловМСФО.СоздатьДокумент КАК СоздатьДокумент,
		|	НачислениеАккруаловМСФО.ЗаписьКУдалению КАК ЗаписьКУдалению
		|ПОМЕСТИТЬ ВТ_ДанныеМСФО
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловМСФО КАК НачислениеАккруаловМСФО
		|ГДЕ
		|	НачислениеАккруаловМСФО.Кампания = &Кампания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКонтроллинг.Кампания КАК Кампания,
		|	ДанныеКонтроллинг.ФВБ КАК ФВБ,
		|	ДанныеКонтроллинг.ЦФО КАК ЦФО,
		|	ДанныеКонтроллинг.СтатьяОборотов КАК СтатьяОборотов,
		|	ДанныеКонтроллинг.Объект КАК Объект,
		|	ДанныеКонтроллинг.ИДСтроки КАК ИДСтроки,
		|	ДанныеКонтроллинг.ПериодКЗБ КАК ПериодКЗБ,
		|	ДанныеКонтроллинг.СуммаКонтроль КАК СуммаКонтроль,
		|	ДанныеКонтроллинг.СуммаИсполнение КАК СуммаИсполнение,
		|	ДанныеКонтроллинг.СуммаПринятоУслугТоваровРаботБезНДС КАК СуммаПринятоУслугТоваровРаботБезНДС,
		|	ДанныеКонтроллинг.НачислитьАккруал КАК НачислитьАккруал,
		|	ДанныеКонтроллинг.ПредполагаемаяДатаПредоставленияДокументов КАК ПредполагаемаяДатаПредоставленияДокументов,
		|	ДанныеКонтроллинг.Комментарий КАК Комментарий,
		|	ДанныеКонтроллинг.Обработано КАК Обработано,
		|	ДанныеКонтроллинг.ДатаИзменения КАК ДатаИзменения,
		|	ДанныеКонтроллинг.Ответственный КАК Ответственный,
		|	ВЫБОР
		|		КОГДА ДанныеМСФО.ИДСтроки ЕСТЬ NULL
		|				ИЛИ НЕ(ДанныеКонтроллинг.ФВБ = ДанныеМСФО.ФВБ
		|						И ДанныеКонтроллинг.ЦФО = ДанныеМСФО.ЦФО
		|						И ДанныеКонтроллинг.СтатьяОборотов = ДанныеМСФО.СтатьяОборотов
		|						И ДанныеКонтроллинг.Объект = ДанныеМСФО.Объект
		|						И ДанныеКонтроллинг.ПериодКЗБ = ДанныеМСФО.ПериодКЗБ
		|						И ДанныеКонтроллинг.НачислитьАккруал = ДанныеМСФО.НачислитьАккруал)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтрокаДляПереносаВМСФО,
		|	ИСТИНА КАК СоздатьДокумент,
		|	ЛОЖЬ КАК ЗаписьКУдалению
		|ИЗ
		|	ВТ_ДанныеКонтроллинг КАК ДанныеКонтроллинг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеМСФО КАК ДанныеМСФО
		|		ПО ДанныеКонтроллинг.Кампания = ДанныеМСФО.Кампания
		|			И ДанныеКонтроллинг.ИДСтроки = ДанныеМСФО.ИДСтроки
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-16 (#3914)
		|ГДЕ
		|	(ДанныеКонтроллинг.ДатаИзменения > ДанныеКонтроллинг.ДатаПередачиВМСФО
		|		ИЛИ ДанныеКонтроллинг.ДатаИзменения = ДАТАВРЕМЯ(1, 1, 1))
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-16 (#3914)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеМСФО.Кампания,
		|	ДанныеМСФО.ФВБ,
		|	ДанныеМСФО.ЦФО,
		|	ДанныеМСФО.СтатьяОборотов,
		|	ДанныеМСФО.Объект,
		|	ДанныеМСФО.ИДСтроки,
		|	ДанныеМСФО.ПериодКЗБ,
		|	ДанныеМСФО.СуммаКонтроль,
		|	ДанныеМСФО.СуммаИсполнение,
		|	ДанныеМСФО.СуммаПринятоУслугТоваровРаботБезНДС,
		|	ДанныеМСФО.НачислитьАккруал,
		|	ДанныеМСФО.ПредполагаемаяДатаПредоставленияДокументов,
		|	ДанныеМСФО.Комментарий,
		|	ДанныеМСФО.Обработано,
		|	ДанныеМСФО.ДатаИзменения,
		|	ДанныеМСФО.Ответственный,
		|	ИСТИНА,
		|	ИСТИНА,
		|	ИСТИНА
		|ИЗ
		|	ВТ_ДанныеМСФО КАК ДанныеМСФО
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтроллинг КАК ДанныеКонтроллинг
		|		ПО (ДанныеКонтроллинг.Кампания = ДанныеМСФО.Кампания)
		|			И (ДанныеКонтроллинг.ИДСтроки = ДанныеМСФО.ИДСтроки)
		|ГДЕ
		|	ДанныеКонтроллинг.ИДСтроки ЕСТЬ NULL
		|	И (ДанныеМСФО.СоздатьДокумент = ЛОЖЬ
		|			ИЛИ ДанныеМСФО.ЗаписьКУдалению = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Кампания", Кампания);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-19 (#3914)
	//РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	
	//	НаборЗаписейКонтроллинг = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
	//	НаборЗаписейКонтроллинг.Отбор.Кампания.Установить(ВыборкаДетальныеЗаписи.Кампания);
	//	НаборЗаписейКонтроллинг.Отбор.ИДСтроки.Установить(ВыборкаДетальныеЗаписи.ИДСтроки);
	//	НаборЗаписейКонтроллинг.Прочитать();
	//	
	//	Если НаборЗаписейКонтроллинг.Количество() > 0 Тогда
	//	
	//		ТекущаяЗаписьКонтроллинг = НаборЗаписейКонтроллинг[0];
	//		
	//		ТекущаяЗаписьКонтроллинг.ДатаПередачиВМСФО = ТекущаяДата();
	//		ТекущаяЗаписьКонтроллинг.ДатаИзменения 	= ТекущаяДата();
	//		ТекущаяЗаписьКонтроллинг.Ответственный 	= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	//		
	//		НаборЗаписейКонтроллинг.Записать();
	//		
	//	КонецЕсли;
	//	
	//	Если ВыборкаДетальныеЗаписи.СтрокаДляПереносаВМСФО Тогда
	//	
	//		НаборЗаписейМСФО = РегистрыСведений.ок_НачислениеАккруаловМСФО.СоздатьНаборЗаписей();
	//		НаборЗаписейМСФО.Отбор.Кампания.Установить(ВыборкаДетальныеЗаписи.Кампания);
	//		НаборЗаписейМСФО.Отбор.ИДСтроки.Установить(ВыборкаДетальныеЗаписи.ИДСтроки);
	//		
	//		НоваяЗаписьйМСФО = НаборЗаписейМСФО.Добавить();
	//	    ЗаполнитьЗначенияСвойств(НоваяЗаписьйМСФО, ВыборкаДетальныеЗаписи);
	//		
	//		НоваяЗаписьйМСФО.СоздатьДокумент = ВыборкаДетальныеЗаписи.СоздатьДокумент;
	//		НоваяЗаписьйМСФО.ЗаписьКУдалению = ВыборкаДетальныеЗаписи.ЗаписьКУдалению;
	//		
	//		НоваяЗаписьйМСФО.ДатаИзменения = ТекущаяДата();
	//		НоваяЗаписьйМСФО.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	//		
	//		НаборЗаписейМСФО.Записать(Истина);
	//	
	//	КонецЕсли; 
	//	
	//КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("СтрокаДляПереносаВМСФО", Истина);
	
	МассивИДСтроки 					= ТаблицаРезультата.ВыгрузитьКолонку("ИДСтроки");
	ТаблицаДляПереносаВМСФО 		= ТаблицаРезультата.Скопировать(ПараметрыОтбора);
	МассивИДСтрокиДляПереносаВМСФО 	= ТаблицаДляПереносаВМСФО.ВыгрузитьКолонку("ИДСтроки");
	
	ДатаИзменения = ТекущаяДата();
	Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	//Перенести строки в МСФО
	НаборЗаписейМСФО = РегистрыСведений.ок_НачислениеАккруаловМСФО.СоздатьНаборЗаписей();
	НаборЗаписейМСФО.Отбор.Кампания.Установить(Кампания);
	НаборЗаписейМСФО.Прочитать();
	
	Для каждого СтрокаНабораЗаписей Из НаборЗаписейМСФО Цикл
		
		Если МассивИДСтрокиДляПереносаВМСФО.Найти(СтрокаНабораЗаписей.ИДСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаДляПереносаВМСФО.Найти(СтрокаНабораЗаписей.ИДСтроки, "ИДСтроки");
		
	    ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, НайденнаяСтрока);
		
		СтрокаНабораЗаписей.СоздатьДокумент = НайденнаяСтрока.СоздатьДокумент;
		СтрокаНабораЗаписей.ЗаписьКУдалению = НайденнаяСтрока.ЗаписьКУдалению;
		
		СтрокаНабораЗаписей.ДатаИзменения = ДатаИзменения;
		СтрокаНабораЗаписей.Ответственный = Ответственный;
		
		МассивИДСтрокиДляПереносаВМСФО.Удалить(МассивИДСтрокиДляПереносаВМСФО.Найти(СтрокаНабораЗаписей.ИДСтроки));
		ТаблицаДляПереносаВМСФО.Удалить(НайденнаяСтрока);
		
	КонецЦикла; 
	
	Для каждого ВыборкаДетальныеЗаписи Из ТаблицаДляПереносаВМСФО Цикл
	
		НоваяЗаписьйМСФО = НаборЗаписейМСФО.Добавить();
	    ЗаполнитьЗначенияСвойств(НоваяЗаписьйМСФО, ВыборкаДетальныеЗаписи);
		
		НоваяЗаписьйМСФО.СоздатьДокумент = ВыборкаДетальныеЗаписи.СоздатьДокумент;
		НоваяЗаписьйМСФО.ЗаписьКУдалению = ВыборкаДетальныеЗаписи.ЗаписьКУдалению;
		
		НоваяЗаписьйМСФО.ДатаИзменения = ДатаИзменения;
		НоваяЗаписьйМСФО.Ответственный = Ответственный;
	
	КонецЦикла; 
		
	НаборЗаписейМСФО.Записать();
	
	//Пометить строки как обработанные
	НаборЗаписейКонтроллинг = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
	НаборЗаписейКонтроллинг.Отбор.Кампания.Установить(Кампания);
	НаборЗаписейКонтроллинг.Прочитать();
	
	Для каждого СтрокаНабораЗаписей Из НаборЗаписейКонтроллинг Цикл
	
		Если МассивИДСтроки.Найти(СтрокаНабораЗаписей.ИДСтроки) <> Неопределено Тогда
		
			СтрокаНабораЗаписей.ДатаПередачиВМСФО = ДатаИзменения;
			СтрокаНабораЗаписей.ДатаИзменения 	= ДатаИзменения;
			СтрокаНабораЗаписей.Ответственный 	= Ответственный;
		
		КонецЕсли; 
	
	КонецЦикла;
	НаборЗаписейКонтроллинг.Записать();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-19 (#3914)
	
КонецПроцедуры 

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-21 (#3822)
//Процедура СоздатьДокументАккруалБезID(Кампания) Экспорт
Процедура СоздатьДокументАккруалБезID(Кампания, ДополнительныеПараметры = Неопределено) Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-21 (#3822)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачислениеАккруаловМСФО.Кампания КАК Кампания,
		|	НачислениеАккруаловМСФО.ФВБ КАК ФВБ,
		|	НачислениеАккруаловМСФО.ФВБ.бит_БК_Организация КАК Организация,
		|	НачислениеАккруаловМСФО.ЦФО КАК ЦФО,
		|	НачислениеАккруаловМСФО.СтатьяОборотов КАК СтатьяОборотов,
		|	НачислениеАккруаловМСФО.Объект КАК Объект,
		|	НачислениеАккруаловМСФО.ИДСтроки КАК ИДСтроки,
		|	НачислениеАккруаловМСФО.ПериодКЗБ КАК ПериодКЗБ,
		|	МесяцыНачисления.Ссылка КАК МесяцНачисления,
		|	НачислениеАккруаловМСФО.НачислитьАккруал КАК НачислитьАккруал,
		|	НачислениеАккруаловМСФО.ПредполагаемаяДатаПредоставленияДокументов КАК ПредполагаемаяДатаПредоставленияДокументов,
		|	НачислениеАккруаловМСФО.СоздатьДокумент КАК СоздатьДокумент,
		|	ЕСТЬNULL(НачислениеАккруаловСоответствиеИДСтрокДокументу.Документ, ЗНАЧЕНИЕ(Документ.рс_АккруалБезID.ПустаяСсылка)) КАК ДокументАккруалБезID,
		|	НачислениеАккруаловМСФО.ФВБ.бит_БК_Инициатор КАК Инициатор,
		|	НачислениеАккруаловМСФО.ФВБ.бит_БК_ПредпологаемыйКонтрагент КАК ПредполагаемыйКонтрагент,
		|	НачислениеАккруаловМСФО.ФВБ.бит_БК_Цель КАК ЦельРасходов,
		|	НачислениеАккруаловМСФО.ЗаписьКУдалению КАК ЗаписьКУдалению,
		|	СоответствияАналитик.ЛеваяАналитика_1 КАК СчетМСФО,
		|	СоответствияАналитик.ЛеваяАналитика_1.Наименование КАК СчетМСФОНаименование
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловМСФО КАК НачислениеАккруаловМСФО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_НачислениеАккруаловСоответствиеИДСтрокДокументу.СрезПоследних КАК НачислениеАккруаловСоответствиеИДСтрокДокументу
		|		ПО НачислениеАккруаловМСФО.Кампания = НачислениеАккруаловСоответствиеИДСтрокДокументу.Кампания
		|			И НачислениеАккруаловМСФО.ИДСтроки = НачислениеАккруаловСоответствиеИДСтрокДокументу.ИДСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.рс_МесяцыНачисления КАК МесяцыНачисления
		|		ПО НачислениеАккруаловМСФО.ПериодКЗБ = МесяцыНачисления.Дата
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-16 (#3914)
		|			И НЕ МесяцыНачисления.ПометкаУдаления
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-16 (#3914)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК СоответствияАналитик
		|		ПО (СоответствияАналитик.ВидСоответствия = &ВидСоответствия)
		|			И (СоответствияАналитик.ПраваяАналитика_1 = НачислениеАккруаловМСФО.СтатьяОборотов)
		|ГДЕ
		|	НачислениеАккруаловМСФО.Кампания = &Кампания
		|	И НачислениеАккруаловМСФО.СоздатьДокумент";
	
	Запрос.УстановитьПараметр("Кампания", 		Кампания);
	Запрос.УстановитьПараметр("ВидСоответствия",ПредопределенноеЗначение("Справочник.бит_ВидыСоответствийАналитик.СчетМСФО_СтатьяОборотов"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДокумент = Документы.рс_АккруалБезID.СоздатьДокумент();
	НовыйДокумент.ВидОперации 	= ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийАккруалБезID.ОстаткиПоЗаявкам");
	НовыйДокумент.Дата 			= КонецМесяца(Кампания.ПериодКампании.Дата);
	НовыйДокумент.ДатаСторно 	= НачалоМесяца(ДобавитьМесяц(НовыйДокумент.Дата, 1));
	НовыйДокумент.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	НовыйДокумент.Комментарий	= "Создан при помощи обработки, в рамках кампании по начислению аккруалов за " + Кампания.ПериодКампании;
	НовыйДокумент.ок_Кампания 	= Кампания;
	
	НовыйДокумент.ок_СозданОбработкой = Истина;
	
	НовыйДокумент.Организация 				= Неопределено;
	НовыйДокумент.Счет 						= Неопределено;
	НовыйДокумент.ПредполагаемыйКонтрагент 	= Неопределено;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-19 (#3914)
	МассивИДСтрок 							= Новый Массив;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-19 (#3914)
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-02 (#3969)
	КоличествоОбработанныхЗаписей 			= 0;
	КоличествоВсегоЗаписей 					= ВыборкаДетальныеЗаписи.Количество();
	ПроцентОбработаноПред					= 0;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-02 (#3969)
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-02 (#3969)
		ПроцентОбработано = Цел(КоличествоОбработанныхЗаписей / КоличествоВсегоЗаписей * 100);

		Если ПроцентОбработано > (ПроцентОбработаноПред + 4)
			ИЛИ ПроцентОбработано = 0 И КоличествоОбработанныхЗаписей = 0 Тогда

			ДлительныеОперации.СообщитьПрогресс(, "" + Символы.ПС + "Обработано: " + ПроцентОбработано + "%");
			ПроцентОбработаноПред = ПроцентОбработано;
			
		КонецЕсли;
		
		КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + 1;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-02 (#3969)
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-19 (#3914)
		МассивИДСтрок.Добавить(ВыборкаДетальныеЗаписи.ИДСтроки);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-19 (#3914)
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументАккруалБезID) Тогда
			
			СтрокаДляСторно = ПолучитьСтрокуТЧДокументаАккруалБезIDПоИДСтроки(ВыборкаДетальныеЗаписи.ДокументАккруалБезID, ВыборкаДетальныеЗаписи.ИДСтроки);
			Если СтрокаДляСторно <> Неопределено Тогда
			
				НоваяСтрокаСторно = НовыйДокумент.База.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСторно, СтрокаДляСторно);
				НоваяСтрокаСторно.Сумма = (-1) * НоваяСтрокаСторно.Сумма;
			
			КонецЕсли; 
		
		КонецЕсли;
		
		Если НЕ ВыборкаДетальныеЗаписи.ЗаписьКУдалению Тогда
		
			НоваяСтрока = НовыйДокумент.База.Добавить();
			НоваяСтрока.ИДСтроки				= ВыборкаДетальныеЗаписи.ИДСтроки;
			НоваяСтрока.Объект					= ВыборкаДетальныеЗаписи.Объект;
			НоваяСтрока.ФункцияЦФО				= ВыборкаДетальныеЗаписи.ЦФО;
			НоваяСтрока.Период					= ВыборкаДетальныеЗаписи.МесяцНачисления;
			НоваяСтрока.СтатьяОборотов			= ВыборкаДетальныеЗаписи.СтатьяОборотов;
			НоваяСтрока.Счет					= ВыборкаДетальныеЗаписи.СчетМСФО;
			НоваяСтрока.СчетНаименование		= ВыборкаДетальныеЗаписи.СчетМСФОНаименование;
			НоваяСтрока.Сумма					= ВыборкаДетальныеЗаписи.НачислитьАккруал;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-21 (#3822)
			//НоваяСтрока.Организация				= ВыборкаДетальныеЗаписи.Организация;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-21 (#3822)
			НоваяСтрока.НомерЗаявки				= ВыборкаДетальныеЗаписи.ФВБ;
			НоваяСтрока.Инициатор				= ВыборкаДетальныеЗаписи.Инициатор;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-21 (#3822)
			//НоваяСтрока.ПредполагаемыйКонтрагент= ?(ЗначениеЗаполнено(Справочники.Контрагенты.НайтиПоНаименованию(ВыборкаДетальныеЗаписи.ПредполагаемыйКонтрагент, Истина)), ВыборкаДетальныеЗаписи.ПредполагаемыйКонтрагент, "Предполагаемый контрагент (остатки по заявкам)");
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПредполагаемыйКонтрагент)
				И Справочники.Контрагенты.НайтиПоНаименованию(ВыборкаДетальныеЗаписи.ПредполагаемыйКонтрагент, Истина) <> Неопределено Тогда
				НоваяСтрока.ПредполагаемыйКонтрагент = ВыборкаДетальныеЗаписи.ПредполагаемыйКонтрагент;
			Иначе
				НоваяСтрока.ПредполагаемыйКонтрагент = "Предполагаемый контрагент (остатки по заявкам)";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Организация)
				И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
				И ДополнительныеПараметры.Свойство("Организация")
				И ЗначениеЗаполнено(ДополнительныеПараметры.Организация) Тогда
				НоваяСтрока.Организация = ДополнительныеПараметры.Организация;
			Иначе
				НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
			КонецЕсли;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-21 (#3822)
			НоваяСтрока.ЦельРасходов			= ВыборкаДетальныеЗаписи.ЦельРасходов;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовыйДокумент.База.Количество() > 0 Тогда
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создан документ """ + НовыйДокумент.Ссылка + """. (Для перехода к документу нажмите дважды по строке)", НовыйДокумент.Ссылка); 
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-19 (#3914)
	//ВыборкаДетальныеЗаписи.Сбросить();
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	
	//	НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловМСФО.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.ИДСтроки.Установить(ВыборкаДетальныеЗаписи.ИДСтроки);
	//	НаборЗаписей.Отбор.Кампания.Установить(ВыборкаДетальныеЗаписи.Кампания);
	//	НаборЗаписей.Прочитать();
	//	
	//	Если НаборЗаписей.Количество() > 0 Тогда
	//		
	//		ТекущаяЗапись = НаборЗаписей[0];
	//		
	//		Если ТекущаяЗапись.ЗаписьКУдалению Тогда
	//			НаборЗаписей.Очистить();
	//		Иначе
	//			ТекущаяЗапись.СоздатьДокумент = Ложь;
	//			ТекущаяЗапись.ДатаИзменения = ТекущаяДата();
	//			ТекущаяЗапись.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	//		КонецЕсли; 
	//		
	//		НаборЗаписей.Записать();
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	МассивСтрокКУдалению 	= Новый Массив;
	ДатаИзменения 			= ТекущаяДата();
	Ответственный 			= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	НаборЗаписейМСФО = РегистрыСведений.ок_НачислениеАккруаловМСФО.СоздатьНаборЗаписей();
	НаборЗаписейМСФО.Отбор.Кампания.Установить(Кампания);
	НаборЗаписейМСФО.Прочитать();
	
	Для каждого СтрокаНабораЗаписей Из НаборЗаписейМСФО Цикл
		
		Если МассивИДСтрок.Найти(СтрокаНабораЗаписей.ИДСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНабораЗаписей.ЗаписьКУдалению Тогда
			МассивСтрокКУдалению.Добавить(СтрокаНабораЗаписей);
		Иначе
			СтрокаНабораЗаписей.СоздатьДокумент = Ложь;
			СтрокаНабораЗаписей.ДатаИзменения = ДатаИзменения;
			СтрокаНабораЗаписей.Ответственный = Ответственный;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаНабораЗаписей Из МассивСтрокКУдалению Цикл
		НаборЗаписейМСФО.Удалить(СтрокаНабораЗаписей);
	КонецЦикла; 
	
	НаборЗаписейМСФО.Записать();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-19 (#3914)
	
КонецПроцедуры 

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-02 (#3969)
//Функция ОбновитьСуммуНачислитьАккруал(Кампания) Экспорт
Функция ОбновитьСуммуНачислитьАккруал(Кампания, МассивЦФО = Неопределено) Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-02 (#3969)
	
	БылиИзмененияРегистра = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачислениеАккруаловКонтроллинг.Кампания КАК Кампания,
		|	НачислениеАккруаловКонтроллинг.ИДСтроки КАК ИДСтроки,
		|	ВЫБОР
		|		КОГДА НачислениеАккруаловКонтроллинг.Обработано
		|			ТОГДА НачислениеАккруаловКонтроллинг.СуммаПринятоУслугТоваровРаботБезНДС - НачислениеАккруаловКонтроллинг.ПроведеноВМСФО
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НачислитьАккруал
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-02 (#3969)
		|	И НЕ НачислениеАккруаловКонтроллинг.ГотовоКСозданиюДокумента
		|	//&ОтборПоЦФО
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-02 (#3969)
		|	И (НЕ НачислениеАккруаловКонтроллинг.Обработано
		|				И НачислениеАккруаловКонтроллинг.НачислитьАккруал <> 0
		|			ИЛИ НачислениеАккруаловКонтроллинг.Обработано
		|				И НачислениеАккруаловКонтроллинг.НачислитьАккруал <> НачислениеАккруаловКонтроллинг.СуммаПринятоУслугТоваровРаботБезНДС - НачислениеАккруаловКонтроллинг.ПроведеноВМСФО)";
	
	Запрос.УстановитьПараметр("Кампания", Кампания);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-02 (#3969)
	Если МассивЦФО <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//&ОтборПоЦФО", "И НачислениеАккруаловКонтроллинг.ЦФО В (&МассивЦФО)");
		Запрос.УстановитьПараметр("МассивЦФО", МассивЦФО);
	
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-02 (#3969)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-19 (#3914)
	//РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	
	//	НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.ИДСтроки.Установить(ВыборкаДетальныеЗаписи.ИДСтроки);
	//	НаборЗаписей.Отбор.Кампания.Установить(ВыборкаДетальныеЗаписи.Кампания);
	//	НаборЗаписей.Прочитать();
	//	
	//	Если НаборЗаписей.Количество() > 0 Тогда
	//		
	//		ТекущаяЗапись = НаборЗаписей[0];
	//		
	//		ТекущаяЗапись.НачислитьАккруал = ВыборкаДетальныеЗаписи.НачислитьАккруал;
	//		
	//		НаборЗаписей.Записать();
	//		
	//		БылиИзмененияРегистра = Истина;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	МассивИДСтроки = ТаблицаРезультата.ВыгрузитьКолонку("ИДСтроки");
	
	ДатаИзменения = ТекущаяДата();
	Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	//Пометить строки как обработанные
	НаборЗаписейКонтроллинг = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
	НаборЗаписейКонтроллинг.Отбор.Кампания.Установить(Кампания);
	НаборЗаписейКонтроллинг.Прочитать();
	
	Для каждого СтрокаНабораЗаписей Из НаборЗаписейКонтроллинг Цикл
	
		Если МассивИДСтроки.Найти(СтрокаНабораЗаписей.ИДСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		НайденнаяСтрока = ТаблицаРезультата.Найти(СтрокаНабораЗаписей.ИДСтроки, "ИДСтроки");
		
		СтрокаНабораЗаписей.НачислитьАккруал 	= НайденнаяСтрока.НачислитьАккруал;
		СтрокаНабораЗаписей.ДатаИзменения 		= ДатаИзменения;
		СтрокаНабораЗаписей.Ответственный 		= Ответственный;
		
		БылиИзмененияРегистра = Истина;
		
	КонецЦикла;
	
	Если БылиИзмененияРегистра Тогда
		НаборЗаписейКонтроллинг.Записать();
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-19 (#3914)
	
	Возврат БылиИзмененияРегистра;
	
КонецФункции

Процедура СоздатьОповещенияИнициаторам(Кампания) Экспорт

	Отказ = Ложь;
	
	ШаблонОповещенияНапоминание 	= бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Начисление аккруалов", "Шаблон оповещения (Напоминание)");
	ШаблонОповещенияСтартКампании 	= бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Начисление аккруалов", "Шаблон оповещения (Старт кампании)");
	НастройкаДоставкиОповещений 	= бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Начисление аккруалов", "Настройка доставки оповещений");
	
	Если НастройкаДоставкиОповещений = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задана настройка БК: Группа - ""Начисление аккруалов""; Настройка - ""Настройка доставки оповещений"".");
		Отказ = Истина;
	КонецЕсли; 
	
	Если ШаблонОповещенияСтартКампании = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задана настройка БК: Группа - ""Начисление аккруалов""; Настройка - ""Шаблон оповещения (Старт кампании)"".");
		Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Оповещение инициаторам не сформировано.");
		Возврат;
	КонецЕсли; 
	
	КонтекстДляШаблона = Новый Структура;
	
	Если Не КонтекстДляШаблона.Свойство("ДатаФормирования") Тогда
	    КонтекстДляШаблона.Вставить("ПериодКампании", Кампания.ПериодКампании.Наименование);
	КонецЕсли;	
		
	Получатели = ПолучитьСписокИнициаторов(Кампания);
	
	Для каждого Получатель Из Получатели Цикл
		
		//заполним кэш адресов чтобы фунция взяла из него
		КэшАдресов = Новый ТаблицаЗначений;
		КэшАдресов.Колонки.Добавить("Получатель");
		КэшАдресов.Колонки.Добавить("ВидКонтактнойИнформации");
		КэшАдресов.Колонки.Добавить("Адрес");
		
		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.Добавить(Получатель);
		
		НоваяСтрока = КэшАдресов.Добавить();
		НоваяСтрока.Получатель 	= Получатель;
		НоваяСтрока.Адрес 		= Получатель;
		
		//обязательные поля контекста, без них будет крашится процедура записи оповещения
		КонтекстДляШаблона.Вставить("ИдентификаторЗаписи", 		Новый УникальныйИдентификатор); 
		КонтекстДляШаблона.Вставить("Шаблон", 					ШаблонОповещенияСтартКампании);
		КонтекстДляШаблона.Вставить("Получатель", 				СписокПолучателей);  
		КонтекстДляШаблона.Вставить("ТекущийОбъект", 			Документы.бит_ФормаВводаБюджета.ПустаяСсылка());         				
		КонтекстДляШаблона.Вставить("Пользователь", 			Пользователи.ТекущийПользователь()); 
		КонтекстДляШаблона.Вставить("НеПроверятьНаличиеЗаписи", Истина);
		
		// попытка записать в РС "Оповещения" данные, для последующей отправки на эл. почту
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-31 (#3816)
		//Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.ЗаписатьОповещение(Неопределено 
		//									   ,ШаблонОповещенияСтартКампании
		//									   ,НастройкаДоставкиОповещений
		//									   ,КонтекстДляШаблона
		//									   ,КэшАдресов
		//									   ,бит_ОбщегоНазначения.ОпределитьРежимыВывода("Нет").ВыводитьОшибки);
		Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.СформироватьИЗаписатьСообщение(Неопределено 
											   ,ШаблонОповещенияСтартКампании
											   ,НастройкаДоставкиОповещений
											   ,КонтекстДляШаблона
											   ,КэшАдресов
											   ,бит_ОбщегоНазначения.ОпределитьРежимыВывода("Нет").ВыводитьОшибки);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-31 (#3816)
	
	КонецЦикла;
	
КонецПроцедуры 

Функция НачислениеАккруаловДоступноДляИнициатора(Инициатор) Экспорт
	
	НачислениеАккруаловДоступно = РольДоступна("ок_НачислениеАккруалов") ИЛИ РольДоступна("ПолныеПрава");
	
	Если НЕ НачислениеАккруаловДоступно Тогда
		Возврат НачислениеАккруаловДоступно;
	КонецЕсли; 
	
	НачислениеАккруаловДоступно = ИницциаторПрисутствуетВОткрытойКампании(Инициатор);
	
	Возврат НачислениеАккруаловДоступно;
	
КонецФункции

Функция ИницциаторПрисутствуетВОткрытойКампании(Инициатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Кампания КАК Кампания
		|ПОМЕСТИТЬ ВТ_ОткрытыеКампании
		|ИЗ
		|	РегистрСведений.ок_СтатусыКампанииПоНачислениюАккруалов.СрезПоследних КАК ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних
		|ГДЕ
		|	ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыКампанииПоАккруалам.ОткрытаДляИнициаторов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НачислениеАккруаловКонтроллинг.ФВБ КАК ФВБ
		|ИЗ
		|	ВТ_ОткрытыеКампании КАК ОткрытыеКампании
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|		ПО ОткрытыеКампании.Кампания = НачислениеАккруаловКонтроллинг.Кампания
		|ГДЕ
		|	НЕ НачислениеАккруаловКонтроллинг.ФВБ ЕСТЬ NULL
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-25 (#3822)
		//|	И НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = &Инициатор
		|	И (НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(СПравочник.бит_БК_Инициаторы.ПустаяСсылка)
		|		И НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = &Инициатор
		|		ИЛИ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор <> ЗНАЧЕНИЕ(СПравочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			И НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = &Инициатор)
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-25 (#3822)
		|	И НачислениеАккруаловКонтроллинг.ПередатьИнициатору";
		
	Запрос.УстановитьПараметр("Инициатор", Инициатор);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-25 (#3969)
	Если ТипЗнч(Инициатор) = Тип("Массив") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Инициатор", "В (&Инициатор)");
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-25 (#3969)
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-09 (#4035)
Функция ПолучитьСправочнуюИнформациюПоКампании(СтруктураПараметров) Экспорт

	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("ТекстСправочнаяИнформация", 				"");
	СтруктураРезультата.Вставить("ИнформацияПоКампании", 					"");
	СтруктураРезультата.Вставить("ДатаНачалаКампании", 						"");
	СтруктураРезультата.Вставить("ДнейДоОкончанияКампании", 				0);
	СтруктураРезультата.Вставить("КоличествоНеобработанныхЗаписей", 		0);
	СтруктураРезультата.Вставить("КоличествоИнициаторов", 					0);
	СтруктураРезультата.Вставить("ОбщаяНеобработаннаяСумма", 				0);
	СтруктураРезультата.Вставить("СтатусКампании", 							Неопределено);
	
	ЗаполнятьСправочнуюИнформациюПоКампании = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("НачислениеАккруалов", "ЗаполнятьСправочнуюИнформациюПоКампании", Истина);
	
	Если ЗаполнятьСправочнуюИнформациюПоКампании = Ложь
		ИЛИ НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") 
		ИЛИ НЕ СтруктураПараметров.Свойство("КампанияПоНачислениюАккруалов")
		ИЛИ НЕ СтруктураПараметров.Свойство("ОтветственныйЗаКампанию") 
		ИЛИ НЕ СтруктураПараметров.Свойство("СписокЦФОМенеджераПоКонтроллингу")
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.КампанияПоНачислениюАккруалов) Тогда
		
		ТекстСправочнаяИнформация	= "До окончания кампании осталось --- дней. Не обработано --- записей у --- инициаторов на общую сумму --- рублей.";
		ИнформацияПоКампании		= "Кампания: --- ; Статус: ---";
		ДатаНачалаКампании			= "Дата начала кампании: ---";
		
		СтруктураРезультата.ТекстСправочнаяИнформация 	= ТекстСправочнаяИнформация;
		СтруктураРезультата.ИнформацияПоКампании 		= ИнформацияПоКампании;
		СтруктураРезультата.ДатаНачалаКампании 			= ДатаНачалаКампании;
		
		Возврат СтруктураРезультата;
		
	КонецЕсли; 
	
	КампанияПоНачислениюАккруалов 		= СтруктураПараметров.КампанияПоНачислениюАккруалов;
	ОтветственныйЗаКампанию 			= СтруктураПараметров.ОтветственныйЗаКампанию;
	СписокЦФОМенеджераПоКонтроллингу 	= СтруктураПараметров.СписокЦФОМенеджераПоКонтроллингу; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			ТОГДА НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор
		|		ИНАЧЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор
		|	КОНЕЦ КАК Инициатор,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК КоличествоНеобработанныхЗаписей,
		|	ЕСТЬNULL(СУММА(НачислениеАккруаловКонтроллинг.СуммаПринятоУслугТоваровРаботБезНДС), 0) КАК ОбщаяНеобработаннаяСумма
		|ПОМЕСТИТЬ ВТ_НачислениеАккруаловКонтроллинг
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		|	И НЕ НачислениеАккруаловКонтроллинг.Обработано
		|	И (&ОтветственныйЗаКампанию
		|			ИЛИ НачислениеАккруаловКонтроллинг.ЦФО В (&СписокЦФОМенеджераПоКонтроллингу))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			ТОГДА НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор
		|		ИНАЧЕ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НачислениеАккруаловКонтроллинг.Инициатор), 0) - ЕСТЬNULL(МАКСИМУМ(ВЫБОР
		|				КОГДА НачислениеАккруаловКонтроллинг.Инициатор ЕСТЬ NULL
		|						ИЛИ НачислениеАккруаловКонтроллинг.Инициатор = НЕОПРЕДЕЛЕНО
		|						ИЛИ НачислениеАккруаловКонтроллинг.Инициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК КоличествоИнициаторов,
		|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
		|				КОГДА НачислениеАккруаловКонтроллинг.Инициатор ЕСТЬ NULL
		|						ИЛИ НачислениеАккруаловКонтроллинг.Инициатор = НЕОПРЕДЕЛЕНО
		|						ИЛИ НачислениеАккруаловКонтроллинг.Инициатор = ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЕстьНезаполненныйИнициатор,
		|	ЕСТЬNULL(СУММА(НачислениеАккруаловКонтроллинг.КоличествоНеобработанныхЗаписей), 0) КАК КоличествоНеобработанныхЗаписей,
		|	ЕСТЬNULL(СУММА(НачислениеАккруаловКонтроллинг.ОбщаяНеобработаннаяСумма), 0) КАК ОбщаяНеобработаннаяСумма
		|ИЗ
		|	ВТ_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг";
	
	Запрос.УстановитьПараметр("Кампания", 							КампанияПоНачислениюАккруалов);
	Запрос.УстановитьПараметр("ОтветственныйЗаКампанию", 			ОтветственныйЗаКампанию);
	Запрос.УстановитьПараметр("СписокЦФОМенеджераПоКонтроллингу", 	СписокЦФОМенеджераПоКонтроллингу);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	пТекстСправочнаяИнформация = "До окончания кампании %1. Не %2 у %3 на общую сумму %4.";
	
	ДнейДоОкончанияКампании 		= Окр((НачалоДня(КампанияПоНачислениюАккруалов.ДатаЗавершенияКампании) - НачалоДня(ТекущаяДата())) / (60 * 60 * 24), 0) + 1;
	КоличествоНеобработанныхЗаписей = 0;
	КоличествоИнициаторов 			= 0;
	ОбщаяНеобработаннаяСумма 		= 0;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	
		КоличествоНеобработанныхЗаписей = ВыборкаДетальныеЗаписи.КоличествоНеобработанныхЗаписей;
		КоличествоИнициаторов 			= ВыборкаДетальныеЗаписи.КоличествоИнициаторов;
		ОбщаяНеобработаннаяСумма 		= ВыборкаДетальныеЗаписи.ОбщаяНеобработаннаяСумма;
	
	КонецЕсли; 
	
	ТекстДнейДоОкончанияКампании 			= СтрокаСЧислом(";остался %1 день;;осталось %1 дня;осталось %1 дней;осталось %1 дня", 
												ДнейДоОкончанияКампании, ВидЧисловогоЗначения.Количественное, "L=ru");
	ТекстКоличествоНеобработанныхЗаписей 	= СтрокаСЧислом(";обработана &КоличествоНеобработанныхЗаписей запись;;обработано &КоличествоНеобработанныхЗаписей записи;обработано &КоличествоНеобработанныхЗаписей записей;обработано &КоличествоНеобработанныхЗаписей записей", 
												КоличествоНеобработанныхЗаписей, ВидЧисловогоЗначения.Количественное, "L=ru");
	ТекстКоличествоНеобработанныхЗаписей 	= СтрЗаменить(ТекстКоличествоНеобработанныхЗаписей, "&КоличествоНеобработанныхЗаписей", "" + КоличествоНеобработанныхЗаписей);
	ТекстКоличествоИнициаторов 				= "" + КоличествоИнициаторов + " " + СтрокаСЧислом(";инициатора;;инициаторов;инициаторов;инициаторов", 
												КоличествоИнициаторов, ВидЧисловогоЗначения.Количественное, "L=ru");
	ТекстОбщаяНеобработаннаяСумма 			= "" + ОбщаяНеобработаннаяСумма + " " + СтрокаСЧислом(";рубль;;рубля;рублей;рублей", 
												ОбщаяНеобработаннаяСумма, ВидЧисловогоЗначения.Количественное, "L=ru");

	СтруктураРезультата.ТекстСправочнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстСправочнаяИнформация, 
									ТекстДнейДоОкончанияКампании, 
									ТекстКоличествоНеобработанныхЗаписей, 
									ТекстКоличествоИнициаторов, 
									ТекстОбщаяНеобработаннаяСумма);
									
	СтруктураРезультата.СтатусКампании = ок_НачислениеАккруалов.ПолучитьСтатусКампанииПоНачислениюАккруалов(КампанияПоНачислениюАккруалов);
	
	СтруктураРезультата.ИнформацияПоКампании = "Кампания: " + КампанияПоНачислениюАккруалов.ПериодКампании + "; Статус: " + СтруктураРезультата.СтатусКампании;
	
	Если ЗначениеЗаполнено(КампанияПоНачислениюАккруалов.ДатаНачалаКампании) Тогда
		СтруктураРезультата.ДатаНачалаКампании = "Дата начала кампании: " + Формат(КампанияПоНачислениюАккруалов.ДатаНачалаКампании, "ДФ=dd.MM.yyyy");
	Иначе
		СтруктураРезультата.ДатаНачалаКампании = "Дата начала кампании: ---";
	КонецЕсли;
	
	СтруктураРезультата.ОбщаяНеобработаннаяСумма 		= ОбщаяНеобработаннаяСумма;
	СтруктураРезультата.КоличествоИнициаторов 			= КоличествоИнициаторов;
	СтруктураРезультата.КоличествоНеобработанныхЗаписей = КоличествоНеобработанныхЗаписей;
	СтруктураРезультата.ДнейДоОкончанияКампании 		= ДнейДоОкончанияКампании;
	
	Возврат СтруктураРезультата;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-09 (#4035)

//РЕГЛАМЕНТНЫЕ ЗАДАНИЯ

Процедура СоздатьРегламентноеЗаданиеОповещениеПоКампании(Кампания) Экспорт

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-25 (#3822)
	Если ПолучитьСтатусКампанииПоНачислениюАккруалов(Кампания) <> ПредопределенноеЗначение("Перечисление.ок_СтатусыКампанииПоАккруалам.ОткрытаДляИнициаторов") Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-25 (#3822)
	
	Если НЕ ЗначениеЗаполнено(Кампания.КлючРегламентногоЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-25 (#3822)
	//Если НЕ Кампания.Автооповещение Тогда
	//	Возврат;
	//КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-25 (#3822)
	
	Расписание = Кампания.РасписаниеАвтооповещений.Получить();
	Если НЕ ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Ключ", 		Кампания.КлючРегламентногоЗадания);
	СтруктураОтбора.Вставить("Метаданные", 	Метаданные.РегламентныеЗадания.ок_НачислениеАккруаловОповещение);
	
	МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураОтбора);
	
	Если МассивРЗ.Количество() > 0 Тогда
		ТекущееРегламентноеЗадание = МассивРЗ[0];
		ТекущееРегламентноеЗадание.Расписание = Расписание;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-25 (#3822)
		//ТекущееРегламентноеЗадание.Использование = Истина;
		ТекущееРегламентноеЗадание.Использование = Кампания.Автооповещение;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-25 (#3822)
		ТекущееРегламентноеЗадание.Записать();
	Иначе
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-25 (#3822)
		//ТекущееРегламентноеЗадание.Использование = Истина;
		Если Кампания.Автооповещение Тогда
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-25 (#3822)
		
			Параметры = Новый Массив;
			Параметры.Добавить(Кампания);
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Метаданные", 	Метаданные.РегламентныеЗадания.ок_НачислениеАккруаловОповещение);
			ПараметрыЗадания.Вставить("Ключ", 			Кампания.КлючРегламентногоЗадания);
			ПараметрыЗадания.Вставить("Параметры", 		Параметры);
			ПараметрыЗадания.Вставить("Расписание", 	Расписание);
			ПараметрыЗадания.Вставить("Использование", 	Истина);
			ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 10);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			ПараметрыЗадания.Вставить("Наименование",	СтрШаблон(НСтр("ru = '(Оповещение) Начисление аккруалов по кампании за ""%1""'"), Кампания));
			
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-25 (#3822)
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-25 (#3822)
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

Процедура УдалитьРегламентноеЗаданиеОповещениеПоКампании(Кампания) Экспорт

	Если НЕ ЗначениеЗаполнено(Кампания.КлючРегламентногоЗадания) Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Ключ", 		Кампания.КлючРегламентногоЗадания);
	СтруктураОтбора.Вставить("Метаданные", 	Метаданные.РегламентныеЗадания.ок_НачислениеАккруаловОповещение);
	
	МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураОтбора);
	
	Для каждого ТекущееРегламентноеЗадание Из МассивРЗ Цикл
	
		ТекущееРегламентноеЗадание.Удалить();
	
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ок_НачислениеАккруаловОповещение(КампанииПоНачислениюАккруалов) Экспорт
	
	ЗаписьЖурналаРегистрации("Начисление аккруалов (Оповещение)", УровеньЖурналаРегистрации.Информация,,КампанииПоНачислениюАккруалов,"Начало формирования оповещений по кампании """ + КампанииПоНачислениюАккруалов + """.");
	
	ШаблонОповещенияНапоминание = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Начисление аккруалов", "Шаблон оповещения (Напоминание)");
	НастройкаДоставкиОповещений	= бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Начисление аккруалов", "Настройка доставки оповещений");
	
	ТекстОшибки = "";
	Если НастройкаДоставкиОповещений = Неопределено Тогда
		ТекстОшибки = ТекстОшибки + "Не задана настройка БК: Группа - ""Начисление аккруалов""; Настройка - ""Настройка доставки оповещений"".";
	КонецЕсли; 
	
	Если ШаблонОповещенияНапоминание = Неопределено Тогда
		ТекстОшибки = ?(ТекстОшибки = "","",ТекстОшибки + Символы.ПС) + "Не задана настройка БК: Группа - ""Начисление аккруалов""; Настройка - ""Шаблон оповещения (Напоминание)"".";
	КонецЕсли; 
	
	Если ТекстОшибки <> "" Тогда
		ЗаписьЖурналаРегистрации("Начисление аккруалов (Оповещение)",УровеньЖурналаРегистрации.Предупреждение,,КампанииПоНачислениюАккруалов,
								"Формирования оповещений по кампании """ + КампанииПоНачислениюАккруалов + """ прервано по причине:
								|" + ТекстОшибки + ".");
		ЗаписьЖурналаРегистрации("Начисление аккруалов (Оповещение)", УровеньЖурналаРегистрации.Информация,,КампанииПоНачислениюАккруалов,"Завершение формирования оповещений по кампании """ + КампанииПоНачислениюАккруалов + """.");
		Возврат;
	КонецЕсли; 
	
	
	КонтекстДляШаблона = Новый Структура;
	
	Если Не КонтекстДляШаблона.Свойство("ДатаФормирования") Тогда
	    КонтекстДляШаблона.Вставить("ПериодКампании", КампанииПоНачислениюАккруалов.ПериодКампании.Наименование);
	КонецЕсли;	
		
	ДанныеПоНеобработаннымЗаявкам = ок_НачислениеАккруалов.ПолучитьДанныеПоНеобработаннымЗаявкам(КампанииПоНачислениюАккруалов);
	ДнейДоОкончанияКампании = Окр((НачалоДня(КампанииПоНачислениюАккруалов.ДатаЗавершенияКампании) - НачалоДня(ТекущаяДата())) / (60 * 60 * 24), 0);
	
	ТекстДнейДоОкончанияКампании = СтрокаСЧислом(";остался %1 день;;осталось %1 дня;осталось %1 дней;осталось %1 дня", ДнейДоОкончанияКампании, ВидЧисловогоЗначения.Количественное, "L=ru");
	КонтекстДляШаблона.Вставить("ТекстДнейДоОкончанияКампании", ТекстДнейДоОкончанияКампании);
	КонтекстДляШаблона.Вставить("ДнейДоОкончанияКампании", ДнейДоОкончанияКампании);
	
	КоличествоСформированныхОповещений = 0;
	Для каждого ТекущаяСтрока Из ДанныеПоНеобработаннымЗаявкам Цикл
		
		ТекстКоличествоНеобработанныхЗаписей = СтрокаСЧислом(";&КоличествоНеобработанныхЗаписей необработанная запись;;&КоличествоНеобработанныхЗаписей необработанных записи;&КоличествоНеобработанныхЗаписей необработанных записей;&КоличествоНеобработанныхЗаписей необработанных записей", 
													ТекущаяСтрока.КоличествоНеобработанныхЗаписей, ВидЧисловогоЗначения.Количественное, "L=ru");
		ТекстКоличествоНеобработанныхЗаписей = СтрЗаменить(ТекстКоличествоНеобработанныхЗаписей, "&КоличествоНеобработанныхЗаписей", "" + ТекущаяСтрока.КоличествоНеобработанныхЗаписей);
		
		КонтекстДляШаблона.Вставить("ТекстКоличествоНеобработанныхЗаписей", ТекстКоличествоНеобработанныхЗаписей);
		КонтекстДляШаблона.Вставить("КоличествоНеобработанныхЗаписей", ТекущаяСтрока.КоличествоНеобработанныхЗаписей);
		
		//заполним кэш адресов чтобы фунция взяла из него
		КэшАдресов = Новый ТаблицаЗначений;
		КэшАдресов.Колонки.Добавить("Получатель");
		КэшАдресов.Колонки.Добавить("ВидКонтактнойИнформации");
		КэшАдресов.Колонки.Добавить("Адрес");
		
		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.Добавить(ТекущаяСтрока.Получатель);
		
		НоваяСтрока = КэшАдресов.Добавить();
		НоваяСтрока.Получатель 	= ТекущаяСтрока.Получатель;
		НоваяСтрока.Адрес 		= ТекущаяСтрока.Email;
		
		//обязательные поля контекста, без них будет крашится процедура записи оповещения
		КонтекстДляШаблона.Вставить("ИдентификаторЗаписи", 		Новый УникальныйИдентификатор); 
		КонтекстДляШаблона.Вставить("Шаблон", 					ШаблонОповещенияНапоминание);
		КонтекстДляШаблона.Вставить("Получатель", 				СписокПолучателей);  
		КонтекстДляШаблона.Вставить("ТекущийОбъект", 			Документы.бит_ФормаВводаБюджета.ПустаяСсылка());         				
		КонтекстДляШаблона.Вставить("Пользователь", 			Пользователи.ТекущийПользователь()); 
		КонтекстДляШаблона.Вставить("НеПроверятьНаличиеЗаписи", Истина);
		
		КонтекстДляШаблона.Вставить("НеПроверятьНаличиеЗаписи", Истина);
		
		// попытка записать в РС "Оповещения" данные, для последующей отправки на эл. почту
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-31 (#3816)
		//Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.ЗаписатьОповещение(Неопределено 
		//									   ,ШаблонОповещенияНапоминание
		//									   ,НастройкаДоставкиОповещений
		//									   ,КонтекстДляШаблона
		//									   ,КэшАдресов
		//									   ,бит_ОбщегоНазначения.ОпределитьРежимыВывода("Нет").ВыводитьОшибки);
		Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.СформироватьИЗаписатьСообщение(Неопределено 
											   ,ШаблонОповещенияНапоминание
											   ,НастройкаДоставкиОповещений
											   ,КонтекстДляШаблона
											   ,КэшАдресов
											   ,бит_ОбщегоНазначения.ОпределитьРежимыВывода("Нет").ВыводитьОшибки);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-31 (#3816)
											   
		КоличествоСформированныхОповещений = КоличествоСформированныхОповещений + 1;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Начисление аккруалов (Оповещение)", УровеньЖурналаРегистрации.Информация,,КампанииПоНачислениюАккруалов,"Завершение формирования оповещений по кампании """ + КампанииПоНачислениюАккруалов + """.");
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-07 (#3788)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-12 (#3914)
Процедура РассчитатьАккруалы(СтруктураПараметров, ИмяРегламентногоЗадания = "") Экспорт
	
	ЗаписьЖурналаРегистрации("РассчетАккруалов.НачалоВыполнения",УровеньЖурналаРегистрации.Информация,,,"Начало выполнения" + ?(ИмяРегламентногоЗадания = "", "", " по РЗ """ + ИмяРегламентногоЗадания + """"));
	
	МассивЦФО 				= СтруктураПараметров.МассивЦФО;
	КоличествоУжеОбработано = 0;
	КоличествоВсего 		= МассивЦФО.Количество();
	
	Для каждого ЭлементМассива Из МассивЦФО Цикл
		
		ЗаписьЖурналаРегистрации("РассчетАккруалов.Выполнение",УровеньЖурналаРегистрации.Информация,,,"" + КоличествоУжеОбработано + "/" + КоличествоВсего + " """ + ЭлементМассива + """." + ?(ИмяРегламентногоЗадания = "", "", " по РЗ """ + ИмяРегламентногоЗадания + """"));
		Попытка
			РассчитатьАккруалыПоЦФО(СтруктураПараметров, ЭлементМассива);
		Исключение
			ЗаписьЖурналаРегистрации("РассчетАккруалов.Ошибка",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки() + ?(ИмяРегламентногоЗадания = "", "", " по РЗ """ + ИмяРегламентногоЗадания + """"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка: """ + ЭлементМассива + """ " + ОписаниеОшибки(), ЭлементМассива);
		КонецПопытки; 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + КоличествоУжеОбработано + "/" + КоличествоВсего + " """ + ЭлементМассива + """.", ЭлементМассива); 
		
		КоличествоУжеОбработано = КоличествоУжеОбработано + 1;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("РассчетАккруалов.ОкончаниеВыполнения",УровеньЖурналаРегистрации.Информация,,,"Окончание выполнения" + ?(ИмяРегламентногоЗадания = "", "", " по РЗ """ + ИмяРегламентногоЗадания + """"));
	
КонецПроцедуры

Функция РассчитатьАккруалыПоЦФО(СтруктураПараметров, ЭлементЦФО) Экспорт
	
	КампанияПоНачислениюАккруалов = СтруктураПараметров.КампанияПоНачислениюАккруалов;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(МесяцыНачисления.Ссылка) КАК МесяцНачисления,
		|	НачислениеАккруаловКонтроллинг.ФВБ КАК ФВБ,
		|	НачислениеАккруаловКонтроллинг.ЦФО КАК ЦФО,
		|	НачислениеАккруаловКонтроллинг.СтатьяОборотов КАК СтатьяОборотов,
		|	НачислениеАккруаловКонтроллинг.Объект КАК Объект,
		|	СоответствияАналитик.ЛеваяАналитика_1 КАК СчетМСФО,
		|	НачислениеАккруаловКонтроллинг.ИДСтроки КАК ИДСтроки
		|ПОМЕСТИТЬ ВТ_НачислениеАккруаловКонтроллинг
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК СоответствияАналитик
		|		ПО (СоответствияАналитик.ВидСоответствия = &ВидСоответствия)
		|			И (СоответствияАналитик.ПраваяАналитика_1 = НачислениеАккруаловКонтроллинг.СтатьяОборотов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.рс_МесяцыНачисления КАК МесяцыНачисления
		|		ПО НачислениеАккруаловКонтроллинг.ПериодКЗБ = МесяцыНачисления.Дата
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-16 (#3914)
		|			И НЕ МесяцыНачисления.ПометкаУдаления
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-16 (#3914)
		|ГДЕ
		|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		|	И НачислениеАккруаловКонтроллинг.Обработано
		|	И НачислениеАккруаловКонтроллинг.ЦФО = &ЦФО
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-22 (#3969)
		|	И НЕ НачислениеАккруаловКонтроллинг.СуммаПринятоУслугТоваровРаботБезНДС = 0
		|	И НЕ НачислениеАккруаловКонтроллинг.ГотовоКСозданиюДокумента
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-22 (#3969)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеАккруаловКонтроллинг.ЦФО,
		|	НачислениеАккруаловКонтроллинг.СтатьяОборотов,
		|	НачислениеАккруаловКонтроллинг.ФВБ,
		|	СоответствияАналитик.ЛеваяАналитика_1,
		|	НачислениеАккруаловКонтроллинг.Объект,
		|	НачислениеАккруаловКонтроллинг.ИДСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДвиженияССубконто.Организация КАК Организация,
		|	ДвиженияССубконто.Регистратор КАК Регистратор,
		|	ДвиженияССубконто.СчетДт КАК СчетДт,
		|	ВЫРАЗИТЬ(ДвиженияССубконто.СубконтоДт1 КАК Справочник.ОбъектыСтроительства) КАК Объект,
		|	ВЫРАЗИТЬ(ДвиженияССубконто.СубконтоДт2 КАК Справочник.Подразделения) КАК ЦФО,
		|	ВЫРАЗИТЬ(ДвиженияССубконто.СубконтоДт3 КАК Справочник.рс_МесяцыНачисления) КАК МесяцНачисления,
		|	СоответствияАналитик.ПраваяАналитика_1 КАК СтатьяОборотов,
		|	ДвиженияССубконто.СуммаРегл КАК СуммаРегл
		|ПОМЕСТИТЬ Т_Проводки
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(
		|			&НачалоПериода,
		|			КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
		|			Активность
		|				И СчетДт В ИЕРАРХИИ (&СчетМСФО_7)
		|				И СубконтоДт2 = &ЦФО
		|				И (СуммаРегл <> 0
		|					ИЛИ СуммаУпр <> 0
		|					ИЛИ СуммаМУ <> 0)
		|				И (СубконтоДт1, СубконтоДт2, СубконтоДт3, СчетДт) В
		|					(ВЫБРАТЬ
		|						НачислениеАккруаловКонтроллинг.Объект,
		|						НачислениеАккруаловКонтроллинг.ЦФО,
		|						НачислениеАккруаловКонтроллинг.МесяцНачисления,
		|						НачислениеАккруаловКонтроллинг.СчетМСФО
		|					ИЗ
		|						ВТ_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|					СГРУППИРОВАТЬ ПО
		|						НачислениеАккруаловКонтроллинг.Объект,
		|						НачислениеАккруаловКонтроллинг.ЦФО,
		|						НачислениеАккруаловКонтроллинг.МесяцНачисления,
		|						НачислениеАккруаловКонтроллинг.СчетМСФО),
		|			,
		|			) КАК ДвиженияССубконто
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК СоответствияАналитик
		|		ПО (СоответствияАналитик.ВидСоответствия = &ВидСоответствия)
		|			И (СоответствияАналитик.ЛеваяАналитика_1 = ДвиженияССубконто.СчетДт)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	рс_АккруалПоID.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(рс_АккруалПоID.ID, 5, 1) <> ""-""
		|			ТОГДА рс_АккруалПоID.ID
		|		ИНАЧЕ ПОДСТРОКА(рс_АккруалПоID.ID, 1, 4) + ПОДСТРОКА(рс_АккруалПоID.ID, 6, 4)
		|	КОНЕЦ КАК ID_Разноски
		|ПОМЕСТИТЬ АккруалыИСторноЭУ
		|ИЗ
		|	Документ.рс_АккруалПоID КАК рс_АккруалПоID
		|ГДЕ
		|	рс_АккруалПоID.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				Т_Проводки.Регистратор
		|			ИЗ
		|				Т_Проводки КАК Т_Проводки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	рс_СторноЭУ.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(рс_СторноЭУ.ID, 5, 1) <> ""-""
		|			ТОГДА рс_СторноЭУ.ID
		|		ИНАЧЕ ПОДСТРОКА(рс_СторноЭУ.ID, 1, 4) + ПОДСТРОКА(рс_СторноЭУ.ID, 6, 4)
		|	КОНЕЦ
		|ИЗ
		|	Документ.рс_СторноЭУ КАК рс_СторноЭУ
		|ГДЕ
		|	рс_СторноЭУ.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				Т_Проводки.Регистратор
		|			ИЗ
		|				Т_Проводки КАК Т_Проводки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Т_Проводки.Регистратор КАК Документ,
		|	ВЫБОР
		|		КОГДА АккруалыИСторноЭУ.ID_Разноски ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА ПОДСТРОКА(ЕСТЬNULL(рс_ДокументыПоID.ID, Т_Проводки.Регистратор.ОК_ID_Разноска), 5, 1) <> ""-""
		|						ТОГДА ЕСТЬNULL(рс_ДокументыПоID.ID, Т_Проводки.Регистратор.ОК_ID_Разноска)
		|					ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(рс_ДокументыПоID.ID, Т_Проводки.Регистратор.ОК_ID_Разноска), 1, 4) + ПОДСТРОКА(ЕСТЬNULL(рс_ДокументыПоID.ID, Т_Проводки.Регистратор.ОК_ID_Разноска), 6, 4)
		|				КОНЕЦ
		|		ИНАЧЕ АккруалыИСторноЭУ.ID_Разноски
		|	КОНЕЦ КАК ID_Разноски
		|ПОМЕСТИТЬ Т_ID
		|ИЗ
		|	Т_Проводки КАК Т_Проводки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рс_ДокументыПоID КАК рс_ДокументыПоID
		|		ПО Т_Проводки.Регистратор = рс_ДокументыПоID.Документ
		|			И (рс_ДокументыПоID.Активность)
		|		ЛЕВОЕ СОЕДИНЕНИЕ АккруалыИСторноЭУ КАК АккруалыИСторноЭУ
		|		ПО Т_Проводки.Регистратор = АккруалыИСторноЭУ.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Документ,
		|	ID_Разноски
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачислениеАккруаловКонтроллинг.ИДСтроки КАК ИДСтроки,
		|	НачислениеАккруаловКонтроллинг.МесяцНачисления КАК МесяцНачисления,
		|	ВЫРАЗИТЬ(КЗБ.Аналитика_1 КАК Документ.бит_ФормаВводаБюджета) КАК ФВБ,
		|	КЗБ.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ Т_КЗБ
		|ИЗ
		|	ВТ_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК КЗБ
		|		ПО (КЗБ.Аналитика_1 = НачислениеАккруаловКонтроллинг.ФВБ)
		|ГДЕ
		|	КЗБ.Активность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т_КЗБ.ФВБ КАК ФВБ,
		|	Т_КЗБ.ИДСтроки КАК ИДСтроки,
		|	Т_КЗБ.МесяцНачисления КАК МесяцНачисления,
		|	ПоступлениеТоваровУслуг.Ссылка КАК Регистратор,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЕСТЬNULL(ПоступлениеТоваровУслуг.ОК_ID_Разноска, """"), 5, 1) <> ""-""
		|			ТОГДА ЕСТЬNULL(ПоступлениеТоваровУслуг.ОК_ID_Разноска, """")
		|		ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(ПоступлениеТоваровУслуг.ОК_ID_Разноска, """"), 1, 4) + ПОДСТРОКА(ЕСТЬNULL(ПоступлениеТоваровУслуг.ОК_ID_Разноска, """"), 6, 4)
		|	КОНЕЦ КАК ID_Разноски
		|ПОМЕСТИТЬ Т_КЗБ_ID
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Т_КЗБ КАК Т_КЗБ
		|		ПО (Т_КЗБ.Регистратор = ПоступлениеТоваровУслуг.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т_КЗБ.ФВБ,
		|	Т_КЗБ.ИДСтроки,
		|	Т_КЗБ.МесяцНачисления,
		|	бит_ок_ОперацияАксапты.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЕСТЬNULL(бит_ок_ОперацияАксапты.ОК_ID_Разноска, """"), 5, 1) <> ""-""
		|			ТОГДА ЕСТЬNULL(бит_ок_ОперацияАксапты.ОК_ID_Разноска, """")
		|		ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(бит_ок_ОперацияАксапты.ОК_ID_Разноска, """"), 1, 4) + ПОДСТРОКА(ЕСТЬNULL(бит_ок_ОперацияАксапты.ОК_ID_Разноска, """"), 6, 4)
		|	КОНЕЦ
		|ИЗ
		|	Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Т_КЗБ КАК Т_КЗБ
		|		ПО (Т_КЗБ.Регистратор = бит_ок_ОперацияАксапты.Ссылка)
		|
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-18 (#ПроектИнтеграцияАксапта12)
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т_КЗБ.ФВБ,
		|	Т_КЗБ.ИДСтроки,
		|	Т_КЗБ.МесяцНачисления,
		|	бит_ок_ОперацияАксапты.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЕСТЬNULL(бит_ок_ОперацияАксапты.ОК_ID_Разноска, """"), 5, 1) <> ""-""
		|			ТОГДА ЕСТЬNULL(бит_ок_ОперацияАксапты.ОК_ID_Разноска, """")
		|		ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(бит_ок_ОперацияАксапты.ОК_ID_Разноска, """"), 1, 4) + ПОДСТРОКА(ЕСТЬNULL(бит_ок_ОперацияАксапты.ОК_ID_Разноска, """"), 6, 4)
		|	КОНЕЦ
		|ИЗ
		|	Документ.бит_ок_ОперацияАксапты12 КАК бит_ок_ОперацияАксапты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Т_КЗБ КАК Т_КЗБ
		|		ПО (Т_КЗБ.Регистратор = бит_ок_ОперацияАксапты.Ссылка)
		|
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-18 (#ПроектИнтеграцияАксапта12)
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т_КЗБ.ФВБ,
		|	Т_КЗБ.ИДСтроки,
		|	Т_КЗБ.МесяцНачисления,
		|	бит_БюджетнаяОперация.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЕСТЬNULL(бит_БюджетнаяОперация.ОК_ID_Разноска, """"), 5, 1) <> ""-""
		|			ТОГДА ЕСТЬNULL(бит_БюджетнаяОперация.ОК_ID_Разноска, """")
		|		ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(бит_БюджетнаяОперация.ОК_ID_Разноска, """"), 1, 4) + ПОДСТРОКА(ЕСТЬNULL(бит_БюджетнаяОперация.ОК_ID_Разноска, """"), 6, 4)
		|	КОНЕЦ
		|ИЗ
		|	Документ.бит_БюджетнаяОперация КАК бит_БюджетнаяОперация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Т_КЗБ КАК Т_КЗБ
		|		ПО (Т_КЗБ.Регистратор = бит_БюджетнаяОперация.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т_КЗБ.ФВБ,
		|	Т_КЗБ.ИДСтроки,
		|	Т_КЗБ.МесяцНачисления,
		|	ПоступлениеНМА.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЕСТЬNULL(ПоступлениеНМА.ОК_ID_Разноска, """"), 5, 1) <> ""-""
		|			ТОГДА ЕСТЬNULL(ПоступлениеНМА.ОК_ID_Разноска, """")
		|		ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(ПоступлениеНМА.ОК_ID_Разноска, """"), 1, 4) + ПОДСТРОКА(ЕСТЬNULL(ПоступлениеНМА.ОК_ID_Разноска, """"), 6, 4)
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПоступлениеНМА КАК ПоступлениеНМА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Т_КЗБ КАК Т_КЗБ
		|		ПО (Т_КЗБ.Регистратор = ПоступлениеНМА.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т_КЗБ.ФВБ,
		|	Т_КЗБ.ИДСтроки,
		|	Т_КЗБ.МесяцНачисления,
		|	ПоступлениеДопРасходов.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЕСТЬNULL(ПоступлениеДопРасходов.ОК_ID_Разноска, """"), 5, 1) <> ""-""
		|			ТОГДА ЕСТЬNULL(ПоступлениеДопРасходов.ОК_ID_Разноска, """")
		|		ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(ПоступлениеДопРасходов.ОК_ID_Разноска, """"), 1, 4) + ПОДСТРОКА(ЕСТЬNULL(ПоступлениеДопРасходов.ОК_ID_Разноска, """"), 6, 4)
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Т_КЗБ КАК Т_КЗБ
		|		ПО (Т_КЗБ.Регистратор = ПоступлениеДопРасходов.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т_КЗБ.ФВБ,
		|	Т_КЗБ.ИДСтроки,
		|	Т_КЗБ.МесяцНачисления,
		|	ОперацияБух.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЕСТЬNULL(ОперацияБух.ОК_ID_Разноска, """"), 5, 1) <> ""-""
		|			ТОГДА ЕСТЬNULL(ОперацияБух.ОК_ID_Разноска, """")
		|		ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(ОперацияБух.ОК_ID_Разноска, """"), 1, 4) + ПОДСТРОКА(ЕСТЬNULL(ОперацияБух.ОК_ID_Разноска, """"), 6, 4)
		|	КОНЕЦ
		|ИЗ
		|	Документ.ОперацияБух КАК ОперацияБух
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Т_КЗБ КАК Т_КЗБ
		|		ПО (Т_КЗБ.Регистратор = ОперацияБух.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т_КЗБ.ФВБ,
		|	Т_КЗБ.ИДСтроки,
		|	Т_КЗБ.МесяцНачисления,
		|	КорректировкаПоступления.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЕСТЬNULL(КорректировкаПоступления.ОК_ID_Разноска, """"), 5, 1) <> ""-""
		|			ТОГДА ЕСТЬNULL(КорректировкаПоступления.ОК_ID_Разноска, """")
		|		ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(КорректировкаПоступления.ОК_ID_Разноска, """"), 1, 4) + ПОДСТРОКА(ЕСТЬNULL(КорректировкаПоступления.ОК_ID_Разноска, """"), 6, 4)
		|	КОНЕЦ
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Т_КЗБ КАК Т_КЗБ
		|		ПО (Т_КЗБ.Регистратор = КорректировкаПоступления.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Т_КЗБ_ID.ФВБ КАК ФВБ,
		|	Т_КЗБ_ID.ИДСтроки КАК ИДСтроки,
		|	Т_КЗБ_ID.МесяцНачисления КАК МесяцНачисления,
		|	Т_КЗБ_ID.Регистратор КАК Регистратор,
		|	Т_КЗБ_ID.ID_Разноски КАК ID_Разноски
		|ПОМЕСТИТЬ Т_НЗ
		|ИЗ
		|	Т_ID КАК Т_ID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Т_КЗБ_ID КАК Т_КЗБ_ID
		|		ПО Т_ID.ID_Разноски = Т_КЗБ_ID.ID_Разноски
		|ГДЕ
		|	Т_ID.ID_Разноски <> """"
		|	И ПОДСТРОКА(Т_ID.ID_Разноски, 1, 1) <> "" ""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФВБ,
		|	ID_Разноски
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т_ID.Документ КАК Регистратор,
		|	Т_НЗ.МесяцНачисления КАК МесяцНачисления,
		|	Т_НЗ.ИДСтроки КАК ИДСтроки,
		|	Т_ID.ID_Разноски КАК ID_Разноски,
		|	ЕСТЬNULL(Т_НЗ.ФВБ, ДанныеПоОА.НомерЗаявки) КАК ФВБ
		|ПОМЕСТИТЬ Т_Итоговая_ID_НЗ
		|ИЗ
		|	Т_ID КАК Т_ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ Т_НЗ КАК Т_НЗ
		|		ПО Т_ID.ID_Разноски = Т_НЗ.ID_Разноски
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеДанныеПоОперациямАксапты КАК ДанныеПоОА
		|		ПО Т_ID.Документ = ДанныеПоОА.Документ
		|			И (ДанныеПоОА.НомерЗаявки В
		|				(ВЫБРАТЬ
		|					НачислениеАккруаловКонтроллинг.ФВБ
		|				ИЗ
		|					ВТ_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг))
		|ГДЕ
		|	Т_ID.ID_Разноски <> """"
		|	И ПОДСТРОКА(Т_ID.ID_Разноски, 1, 1) <> "" ""
		|	И НЕ ЕСТЬNULL(Т_НЗ.ФВБ, ДанныеПоОА.НомерЗаявки) ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т_Итоговая_ID_НЗ.ФВБ КАК ФВБ,
		|	Т_Итоговая_ID_НЗ.ИДСтроки КАК ИДСтроки,
		|	Т_Проводки.ЦФО КАК ЦФО,
		|	Т_Проводки.СтатьяОборотов КАК СтатьяОборотов,
		|	Т_Проводки.Объект КАК Объект,
		|	СУММА(Т_Проводки.СуммаРегл) КАК СуммаРегл
		|ИЗ
		|	Т_Проводки КАК Т_Проводки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Т_Итоговая_ID_НЗ КАК Т_Итоговая_ID_НЗ
		|		ПО Т_Проводки.Регистратор = Т_Итоговая_ID_НЗ.Регистратор
		|			И Т_Проводки.МесяцНачисления = Т_Итоговая_ID_НЗ.МесяцНачисления
		|ГДЕ
		|	НЕ Т_Итоговая_ID_НЗ.ФВБ ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Т_Проводки.ЦФО,
		|	Т_Итоговая_ID_НЗ.ИДСтроки,
		|	Т_Проводки.СтатьяОборотов,
		|	Т_Проводки.Объект,
		|	Т_Итоговая_ID_НЗ.ФВБ";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца(ДобавитьМесяц(КампанияПоНачислениюАккруалов.ПериодКампании.Дата, -24)));
	Запрос.УстановитьПараметр("КонецПериода",	КонецМесяца(КампанияПоНачислениюАккруалов.ПериодКампании.Дата));
	Запрос.УстановитьПараметр("СчетМСФО_7",		ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.Расходы"));
	Запрос.УстановитьПараметр("ВидСоответствия",ПредопределенноеЗначение("Справочник.бит_ВидыСоответствийАналитик.СчетМСФО_СтатьяОборотов"));
	Запрос.УстановитьПараметр("Кампания",		КампанияПоНачислениюАккруалов);
	Запрос.УстановитьПараметр("ЦФО",			ЭлементЦФО);
	
	НеобходимоОбновитьДинамическийСписок = Ложь;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Кампания.Установить(КампанияПоНачислениюАккруалов);
		НаборЗаписей.Отбор.ФВБ.Установить(ВыборкаДетальныеЗаписи.ФВБ);
		НаборЗаписей.Отбор.ЦФО.Установить(ВыборкаДетальныеЗаписи.ЦФО);
		НаборЗаписей.Отбор.СтатьяОборотов.Установить(ВыборкаДетальныеЗаписи.СтатьяОборотов);
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаДетальныеЗаписи.Объект);
		НаборЗаписей.Отбор.ИДСтроки.Установить(ВыборкаДетальныеЗаписи.ИДСтроки);
		НаборЗаписей.Прочитать();
		
		БылоИзменениеВРегистре = Ложь;
		Для каждого ТекущаяЗапись Из НаборЗаписей Цикл
			
			БылоИзменениеВЗаписи = Ложь;
			
			Если ТекущаяЗапись.ПроведеноВМСФО <> ВыборкаДетальныеЗаписи.СуммаРегл Тогда
				
				ТекущаяЗапись.ПроведеноВМСФО 	= ВыборкаДетальныеЗаписи.СуммаРегл;
				БылоИзменениеВРегистре 			= Истина;
				БылоИзменениеВЗаписи 			= Истина;
				
			КонецЕсли;
			
			Если БылоИзменениеВЗаписи Тогда
				ТекущаяЗапись.ДатаИзменения = ТекущаяДата();
				ТекущаяЗапись.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			КонецЕсли; 
			
		КонецЦикла;
		
		Если БылоИзменениеВРегистре Тогда
			
			НаборЗаписей.Записать();
			НеобходимоОбновитьДинамическийСписок = Истина;
		
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат НеобходимоОбновитьДинамическийСписок;
	
КонецФункции

Функция СоздатьПотокДляРасчетаАккруалов(Знач СтруктураПараметров, Знач МассивЦФО) Экспорт
	
	ИмяМетода 					= "ок_НачислениеАккруалов.РассчитатьАккруалы";
	ШаблонНаименованияЗадания 	= "Расчет аккруалов за период %1 по ЦФО: %2";
	Параметры 					= Новый Массив;
	
	СтруктураПараметров.Вставить("МассивЦФО", МассивЦФО);
	Параметры.Добавить(СтруктураПараметров);
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонНаименованияЗадания,
								СтруктураПараметров.КампанияПоНачислениюАккруалов,
								ПолучитьСписокЦФОСтрокой(МассивЦФО));
								
	ЗаданиеЗагрузки = ФоновыеЗадания.Выполнить(ИмяМетода, Параметры,, НаименованиеЗадания);
	
	Возврат ЗаданиеЗагрузки;
	
КонецФункции

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-02 (#3969)
//Процедура ЗапуститьРасчетАккруаловВФоне(СтруктураПараметров) Экспорт
Функция ЗапуститьРасчетАккруаловВФоне(СтруктураПараметров) Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-02 (#3969)

	КоличествоПотоков 	= ?(СтруктураПараметров.КоличествоПотоков = 0, 1, СтруктураПараметров.КоличествоПотоков);
	МассивЦФО 			= СтруктураПараметров.МассивЦФО;
	МассивЗаданий		= Новый Массив(); 
	
	КоличествоЦФООсталось		= МассивЦФО.Количество();
	КоличествоПотоковОсталось 	= КоличествоПотоков;
	
	Для Инд = 1 По КоличествоПотоков Цикл
		
		Если КоличествоЦФООсталось = 0
			ИЛИ КоличествоПотоковОсталось = 0 Тогда
			Прервать;
		КонецЕсли; 
		
		КоличествоЦФОНаПоток = Цел(КоличествоЦФООсталось / КоличествоПотоковОсталось) + ?(Цел(КоличествоЦФООсталось / КоличествоПотоковОсталось) = (КоличествоЦФООсталось / КоличествоПотоковОсталось), 0, 1) ;
		
		Если КоличествоЦФООсталось <= КоличествоЦФОНаПоток Тогда
		
			Задание = СоздатьПотокДляРасчетаАккруалов(СтруктураПараметров, МассивЦФО);
			МассивЗаданий.Добавить(Задание);
			КоличествоЦФООсталось = 0;
			КоличествоПотоковОсталось = 0;
			Прервать;
			
		КонецЕсли; 
		
		МассивЦФОНаПоток = Новый Массив();
		Для ИндЦФО = 1 По КоличествоЦФОНаПоток Цикл
		
			Если ИндЦФО = 1 Тогда
			
				МассивЦФОНаПоток.Добавить(МассивЦФО[0]);
				МассивЦФО.Удалить(0);
				
			Иначе
				
				МассивЦФОНаПоток.Добавить(МассивЦФО[МассивЦФО.Количество() - 1]);
				МассивЦФО.Удалить(МассивЦФО.Количество() - 1);
				
			КонецЕсли; 
		
		КонецЦикла; 
		
		Если МассивЦФОНаПоток.Количество() > 0 Тогда
		
			Задание = СоздатьПотокДляРасчетаАккруалов(СтруктураПараметров, МассивЦФОНаПоток);
			МассивЗаданий.Добавить(Задание);
			
		КонецЕсли; 
		
		КоличествоЦФООсталось		= МассивЦФО.Количество();
		КоличествоПотоковОсталось 	= КоличествоПотоков - Инд;
		
	КонецЦикла; 
	
	Если КоличествоЦФООсталось > 0 Тогда
		
		Задание = СоздатьПотокДляРасчетаАккруалов(СтруктураПараметров, МассивЦФО);
		МассивЗаданий.Добавить(Задание);
		
	КонецЕсли;
		
	ОжидатьЗавершенияЗаданий(МассивЗаданий);

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-02 (#3969)
//КонецПроцедуры

	ДлительныеОперации.СообщитьПрогресс(, "Расчет аккруалов выполнен успешно. Обновляем таблицу.");
	
	Возврат МассивЗаданий.Количество() > 0;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-02 (#3969)

Функция ПолучитьМассивЦФО(КампанияПоНачислениюАккруалов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачислениеАккруаловКонтроллинг.ЦФО КАК ЦФО,
		|	КОЛИЧЕСТВО(*) КАК КОЛИЧЕСТВО
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		|	И НачислениеАккруаловКонтроллинг.Обработано
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-22 (#3969)
		|	И НЕ СуммаПринятоУслугТоваровРаботБезНДС = 0
		|	И НЕ ГотовоКСозданиюДокумента
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-22 (#3969)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеАккруаловКонтроллинг.ЦФО
		|
		|УПОРЯДОЧИТЬ ПО
		|	КОЛИЧЕСТВО(*) УБЫВ";	
	
	Запрос.УстановитьПараметр("Кампания", КампанияПоНачислениюАккруалов);
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЦФО");
	
КонецФункции

Функция ПолучитьСписокЦФОСтрокой(МассивЦФО) Экспорт

	СписокЦФОСтрокой = "";
	Для каждого ЭлементМассива Из МассивЦФО Цикл
	
		СписокЦФОСтрокой = СписокЦФОСтрокой + ЭлементМассива + "; ";
	
	КонецЦикла; 

	Возврат СписокЦФОСтрокой;
	
КонецФункции

Процедура ОжидатьЗавершенияЗаданий(МассивЗаданий) Экспорт
	
	ОжидатьЗавершения = Истина;
	Пока ОжидатьЗавершения Цикл
		
		Попытка
			
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
			ОжидатьЗавершения = Ложь;
			
		Исключение
			ЗавершенныеЗадания = Новый Массив;
			Текст = ОписаниеОшибки();
			Для каждого Задание Из МассивЗаданий Цикл
				
				НайденноеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Задание.УникальныйИдентификатор);
				Если НайденноеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
					ЗавершенныеЗадания.Добавить(Задание);
				КонецЕсли; 
				
			КонецЦикла; 
			
			Для каждого Задание Из ЗавершенныеЗадания Цикл
				МассивЗаданий.Удалить(МассивЗаданий.Найти(Задание));
			КонецЦикла; 
			
			Если МассивЗаданий.Количество() = 0 Тогда
				ОжидатьЗавершения = Ложь;	
			КонецЕсли; 
			
		КонецПопытки; 

	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивСценариевПоФВБ(ФВБ) Экспорт

	МассивСценариевПоФВБ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ФормаВводаБюджета.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ ВТ_СценарииПоФВБ
		|ИЗ
		|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
		|ГДЕ
		|	бит_ФормаВводаБюджета.Ссылка = &ФВБ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	бит_ФормаВводаБюджетаБДДС.Сценарий
		|ИЗ
		|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
		|ГДЕ
		|	бит_ФормаВводаБюджетаБДДС.Ссылка = &ФВБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СценарииПоФВБ.Сценарий КАК Сценарий
		|ИЗ
		|	ВТ_СценарииПоФВБ КАК СценарииПоФВБ
		|
		|СГРУППИРОВАТЬ ПО
		|	СценарииПоФВБ.Сценарий";
	
	Запрос.УстановитьПараметр("ФВБ", ФВБ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСценариевПоФВБ.Добавить(ВыборкаДетальныеЗаписи.Сценарий);
	КонецЦикла;
	
	Возврат МассивСценариевПоФВБ;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-12 (#3914)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-22 (#3969)
Функция АРММенеджераПоКонтроллингу_ЗаполнитьНачислениеАккруаловКонтроллингНаСервере(КампанияПоНачислениюАккруалов, Схема, Настройки) Экспорт
	
	ТЗКонтрольныеЗначенияБюджетов = ПолучитьТаблицуЗначенийПоСхемеКомпоновкиДанныхИНастройкам(Схема, Настройки);
	
	НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Кампания.Установить(КампанияПоНачислениюАккруалов);
	
	Для каждого СтрокаКЗБ Из ТЗКонтрольныеЗначенияБюджетов Цикл
	
		НоваяЗаписьНачислениеАккруалов = НаборЗаписей.Добавить();
		НоваяЗаписьНачислениеАккруалов.Кампания 		= КампанияПоНачислениюАккруалов;
		НоваяЗаписьНачислениеАккруалов.ФВБ 				= СтрокаКЗБ.ФВБ;
		НоваяЗаписьНачислениеАккруалов.ЦФО 				= СтрокаКЗБ.ЦФО;
		НоваяЗаписьНачислениеАккруалов.СтатьяОборотов 	= СтрокаКЗБ.СтатьяОборотов;
		НоваяЗаписьНачислениеАккруалов.Объект 			= СтрокаКЗБ.Объект;
		НоваяЗаписьНачислениеАккруалов.ИДСтроки 		= Строка(Новый УникальныйИдентификатор);
		НоваяЗаписьНачислениеАккруалов.ПериодКЗБ 		= СтрокаКЗБ.Период;
		
		НоваяЗаписьНачислениеАккруалов.СуммаКонтроль	= СтрокаКЗБ.СуммаКонтроль;
		НоваяЗаписьНачислениеАккруалов.СуммаИсполнение 	= СтрокаКЗБ.СуммаИсполнение;
		НоваяЗаписьНачислениеАккруалов.СуммаПринятоУслугТоваровРаботБезНДС = СтрокаКЗБ.СуммаПринятоУслугТоваровРаботБезНДС;
		
		НоваяЗаписьНачислениеАккруалов.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"); 
		
		НоваяЗаписьНачислениеАккруалов.ПередатьИнициатору = Истина;
		
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-20 (#4390)
		НоваяЗаписьНачислениеАккруалов.Проект			= СтрокаКЗБ.Проект;
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-20 (#4390)
	КонецЦикла; 
	
	НаборЗаписей.Записать(Истина);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТаблицуЗначенийПоСхемеКомпоновкиДанныхИНастройкам(Схема, Настройки) Экспорт
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТЗ;
	
КонецФункции

Функция АРММенеджераПоКонтроллингу_ПредварительнаяОбработкаСтрок(КампанияПоНачислениюАккруалов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачислениеАккруаловКонтроллинг.ИДСтроки КАК ИДСтроки,
		|	НачислениеАккруаловКонтроллинг.ФВБ КАК ФВБ,
		|	НачислениеАккруаловКонтроллинг.ПериодКЗБ КАК ПериодКЗБ,
		|	НачислениеАккруаловКонтроллинг.ЦФО КАК ЦФО,
		|	НачислениеАккруаловКонтроллинг.Объект КАК Объект,
		|	НачислениеАккруаловКонтроллинг.СтатьяОборотов КАК СтатьяОборотов,
		|	НачислениеАккруаловКонтроллинг.СуммаИсполнение КАК СуммаИсполнение,
		|	НачислениеАккруаловКонтроллинг.СуммаПринятоУслугТоваровРаботБезНДС КАК СуммаПринятоУслугТоваровРаботБезНДС,
		|	НачислениеАккруаловКонтроллинг.ПредполагаемаяДатаПредоставленияДокументов КАК ПредполагаемаяДатаПредоставленияДокументов,
		|	НачислениеАккруаловКонтроллинг.СуммаКЗакрытию КАК СуммаКЗакрытию,
		|	НачислениеАккруаловКонтроллинг.Обработано КАК Обработано,
		|	НачислениеАккруаловКонтроллинг.ИзменилосьИсполнение КАК ИзменилосьИсполнение
		|ПОМЕСТИТЬ ВТ_ДанныеЗаТекущийПериод
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеЗаТекущийПериод.ИДСтроки КАК ИДСтроки,
		|	НачислениеАккруаловКонтроллинг.Кампания.ПериодКампании.Дата КАК ПериодКампанииДата,
		|	НачислениеАккруаловКонтроллинг.ФВБ КАК ФВБ,
		|	НачислениеАккруаловКонтроллинг.ПериодКЗБ КАК ПериодКЗБ,
		|	НачислениеАккруаловКонтроллинг.ЦФО КАК ЦФО,
		|	НачислениеАккруаловКонтроллинг.Объект КАК Объект,
		|	НачислениеАккруаловКонтроллинг.СтатьяОборотов КАК СтатьяОборотов,
		|	НачислениеАккруаловКонтроллинг.СуммаПринятоУслугТоваровРаботБезНДС КАК СуммаПринятоУслугТоваровРаботБезНДС,
		|	НачислениеАккруаловКонтроллинг.ПредполагаемаяДатаПредоставленияДокументов КАК ПредполагаемаяДатаПредоставленияДокументов,
		|	НачислениеАккруаловКонтроллинг.СуммаИсполнение КАК СуммаИсполнение,
		|	НачислениеАккруаловКонтроллинг.СуммаКЗакрытию КАК СуммаКЗакрытию
		|ПОМЕСТИТЬ ВТ_ДанныеЗаПрошлыеПериоды
		|ИЗ
		|	ВТ_ДанныеЗаТекущийПериод КАК ДанныеЗаТекущийПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|		ПО (НачислениеАккруаловКонтроллинг.Кампания <> &Кампания)
		|			И ДанныеЗаТекущийПериод.ФВБ = НачислениеАккруаловКонтроллинг.ФВБ
		|			И ДанныеЗаТекущийПериод.ЦФО = НачислениеАккруаловКонтроллинг.ЦФО
		|			И ДанныеЗаТекущийПериод.Объект = НачислениеАккруаловКонтроллинг.Объект
		|			И ДанныеЗаТекущийПериод.СтатьяОборотов = НачислениеАккруаловКонтроллинг.СтатьяОборотов
		|			И ДанныеЗаТекущийПериод.ПериодКЗБ = НачислениеАккруаловКонтроллинг.ПериодКЗБ
		|			И (НачислениеАккруаловКонтроллинг.Обработано)
		|ГДЕ
		|	НЕ НачислениеАккруаловКонтроллинг.Кампания ЕСТЬ NULL
		|	И НачислениеАккруаловКонтроллинг.Кампания.ПериодКампании.Дата < &ТекущаяДатаКампании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДанныеЗаПрошлыеПериоды.ПериодКампанииДата) КАК ПериодКампанииДата,
		|	ДанныеЗаПрошлыеПериоды.ФВБ КАК ФВБ,
		|	ДанныеЗаПрошлыеПериоды.ПериодКЗБ КАК ПериодКЗБ,
		|	ДанныеЗаПрошлыеПериоды.ЦФО КАК ЦФО,
		|	ДанныеЗаПрошлыеПериоды.Объект КАК Объект,
		|	ДанныеЗаПрошлыеПериоды.СтатьяОборотов КАК СтатьяОборотов
		|ПОМЕСТИТЬ ВТ_ДанныеЗаПоследнийПериод
		|ИЗ
		|	ВТ_ДанныеЗаПрошлыеПериоды КАК ДанныеЗаПрошлыеПериоды
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеЗаПрошлыеПериоды.ФВБ,
		|	ДанныеЗаПрошлыеПериоды.ПериодКЗБ,
		|	ДанныеЗаПрошлыеПериоды.ЦФО,
		|	ДанныеЗаПрошлыеПериоды.Объект,
		|	ДанныеЗаПрошлыеПериоды.СтатьяОборотов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗаПрошлыеПериоды.ИДСтроки КАК ИДСтроки,
		|	ДанныеЗаПрошлыеПериоды.СуммаПринятоУслугТоваровРаботБезНДС КАК СуммаПринятоУслугТоваровРаботБезНДС,
		|	ДанныеЗаПрошлыеПериоды.ПредполагаемаяДатаПредоставленияДокументов КАК ПредполагаемаяДатаПредоставленияДокументов,
		|	ДанныеЗаПрошлыеПериоды.СуммаКЗакрытию КАК СуммаКЗакрытию,
		|	ВЫБОР
		|		КОГДА ДанныеЗаПрошлыеПериоды.СуммаИсполнение = ДанныеЗаТекущийПериод.СуммаИсполнение
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИзменилосьИсполнение,
		|	ИСТИНА КАК Обработано
		|ИЗ
		|	ВТ_ДанныеЗаПоследнийПериод КАК ДанныеЗаПоследнийПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗаПрошлыеПериоды КАК ДанныеЗаПрошлыеПериоды
		|		ПО ДанныеЗаПоследнийПериод.ФВБ = ДанныеЗаПрошлыеПериоды.ФВБ
		|			И ДанныеЗаПоследнийПериод.ЦФО = ДанныеЗаПрошлыеПериоды.ЦФО
		|			И ДанныеЗаПоследнийПериод.Объект = ДанныеЗаПрошлыеПериоды.Объект
		|			И ДанныеЗаПоследнийПериод.СтатьяОборотов = ДанныеЗаПрошлыеПериоды.СтатьяОборотов
		|			И ДанныеЗаПоследнийПериод.ПериодКЗБ = ДанныеЗаПрошлыеПериоды.ПериодКЗБ
		|			И ДанныеЗаПоследнийПериод.ПериодКампанииДата = ДанныеЗаПрошлыеПериоды.ПериодКампанииДата
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗаТекущийПериод КАК ДанныеЗаТекущийПериод
		|		ПО (ДанныеЗаТекущийПериод.ИДСтроки = ДанныеЗаПрошлыеПериоды.ИДСтроки)
		|ГДЕ
		|	(ВЫБОР
		|				КОГДА ДанныеЗаПрошлыеПериоды.СуммаИсполнение = ДанныеЗаТекущийПериод.СуммаИсполнение
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ <> ДанныеЗаТекущийПериод.ИзменилосьИсполнение
		|			ИЛИ ДанныеЗаПрошлыеПериоды.СуммаПринятоУслугТоваровРаботБезНДС <> ДанныеЗаТекущийПериод.СуммаПринятоУслугТоваровРаботБезНДС
		|			ИЛИ ДанныеЗаПрошлыеПериоды.ПредполагаемаяДатаПредоставленияДокументов <> ДанныеЗаТекущийПериод.ПредполагаемаяДатаПредоставленияДокументов
		|			ИЛИ ДанныеЗаПрошлыеПериоды.СуммаКЗакрытию <> ДанныеЗаТекущийПериод.СуммаКЗакрытию)";
	
	Запрос.УстановитьПараметр("Кампания", КампанияПоНачислениюАккруалов);
	Запрос.УстановитьПараметр("ТекущаяДатаКампании", КампанияПоНачислениюАккруалов.ПериодКампании.Дата);
	
	БылоИзменениеВРегистре = Ложь;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат Ложь;
	
	КонецЕсли; 
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	МассивИДСтрок = ТаблицаРезультата.ВыгрузитьКолонку("ИДСтроки");
	
	НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Кампания.Установить(КампанияПоНачислениюАккруалов);
	НаборЗаписей.Прочитать();
	
	Для каждого ТекущаяЗапись Из НаборЗаписей Цикл
	
		Если МассивИДСтрок.Найти(ТекущаяЗапись.ИДСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ВыборкаДетальныеЗаписи = ТаблицаРезультата.НайтиСтроки(Новый Структура("ИДСтроки", ТекущаяЗапись.ИДСтроки));
		ВыборкаДетальныеЗаписи = ВыборкаДетальныеЗаписи[0];
		
		ТекущаяЗапись.СуммаПринятоУслугТоваровРаботБезНДС 			= ВыборкаДетальныеЗаписи.СуммаПринятоУслугТоваровРаботБезНДС;
		ТекущаяЗапись.ПредполагаемаяДатаПредоставленияДокументов	= ВыборкаДетальныеЗаписи.ПредполагаемаяДатаПредоставленияДокументов;
		ТекущаяЗапись.СуммаКЗакрытию 								= ВыборкаДетальныеЗаписи.СуммаКЗакрытию;
		ТекущаяЗапись.Обработано 									= ВыборкаДетальныеЗаписи.Обработано;
		ТекущаяЗапись.ИзменилосьИсполнение 							= ВыборкаДетальныеЗаписи.ИзменилосьИсполнение;
		
		ТекущаяЗапись.ДатаИзменения = ТекущаяДата();
		ТекущаяЗапись.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		
		БылоИзменениеВРегистре = Истина;
		
	КонецЦикла; 
	
	Если БылоИзменениеВРегистре Тогда
		НаборЗаписей.Записать(Истина);
	КонецЕсли; 
	
	Возврат БылоИзменениеВРегистре;
	
КонецФункции

Функция АРММенеджераПоКонтроллингу_ОбновитьДанныеПоКЗБ(КампанияПоНачислениюАккруалов, ПериодаКЗБ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачислениеАккруаловКонтроллинг.Кампания КАК Кампания,
		|	НачислениеАккруаловКонтроллинг.ФВБ КАК ФВБ,
		|	НачислениеАккруаловКонтроллинг.ЦФО КАК ЦФО,
		|	НачислениеАккруаловКонтроллинг.СтатьяОборотов КАК СтатьяОборотов,
		|	НачислениеАккруаловКонтроллинг.Объект КАК Объект,
		|	НачислениеАккруаловКонтроллинг.ИДСтроки КАК ИДСтроки,
		|	НачислениеАккруаловКонтроллинг.ПериодКЗБ КАК ПериодКЗБ,
		|	НачислениеАккруаловКонтроллинг.СуммаКонтроль КАК СуммаКонтроль,
		|	НачислениеАккруаловКонтроллинг.СуммаИсполнение КАК СуммаИсполнение
		|ПОМЕСТИТЬ ВТ_ДанныеКонтроллинг
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	НачислениеАккруаловКонтроллинг.Кампания = &Кампания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКонтроллинг.Кампания КАК Кампания,
		|	ДанныеКонтроллинг.ИДСтроки КАК ИДСтроки,
		|	ДанныеКонтроллинг.СуммаКонтроль КАК СуммаКонтрольКонтроллинг,
		|	ДанныеКонтроллинг.СуммаИсполнение КАК СуммаИсполнениеКонтроллинг,
		|	СУММА(КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольОборот) КАК СуммаКонтроль,
		|	СУММА(КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот) КАК СуммаИсполнение
		|ПОМЕСТИТЬ ВТ_ДанныеКЗБ
		|ИЗ
		|	ВТ_ДанныеКонтроллинг КАК ДанныеКонтроллинг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
		|				НАЧАЛОПЕРИОДА(&НачалоПериодаКЗБ, ДЕНЬ),
		|				КОНЕЦПЕРИОДА(&КонецПериодаКЗБ, ДЕНЬ),
		|				Месяц,
		|				Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Заявка_У)
		|					И Аналитика_1 ССЫЛКА Документ.бит_ФормаВводаБюджета) КАК КонтрольныеЗначенияБюджетовОбороты
		|		ПО ДанныеКонтроллинг.ФВБ = КонтрольныеЗначенияБюджетовОбороты.Аналитика_1
		|			И ДанныеКонтроллинг.ЦФО = КонтрольныеЗначенияБюджетовОбороты.ЦФО
		|			И ДанныеКонтроллинг.СтатьяОборотов = КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов
		|			И ДанныеКонтроллинг.Объект = КонтрольныеЗначенияБюджетовОбороты.Аналитика_2
		|			И ДанныеКонтроллинг.ПериодКЗБ = КонтрольныеЗначенияБюджетовОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеКонтроллинг.ИДСтроки,
		|	ДанныеКонтроллинг.Кампания,
		|	ДанныеКонтроллинг.СуммаКонтроль,
		|	ДанныеКонтроллинг.СуммаИсполнение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКЗБ.Кампания КАК Кампания,
		|	ДанныеКЗБ.ИДСтроки КАК ИДСтроки,
		|	ДанныеКЗБ.СуммаКонтроль КАК СуммаКонтроль,
		|	ДанныеКЗБ.СуммаИсполнение КАК СуммаИсполнение
		|ИЗ
		|	ВТ_ДанныеКЗБ КАК ДанныеКЗБ
		|ГДЕ
		|	(ДанныеКЗБ.СуммаКонтрольКонтроллинг <> ДанныеКЗБ.СуммаКонтроль
		|			ИЛИ ДанныеКЗБ.СуммаИсполнениеКонтроллинг <> ДанныеКЗБ.СуммаИсполнение)";
	
	Запрос.УстановитьПараметр("Кампания", КампанияПоНачислениюАккруалов);
	Запрос.УстановитьПараметр("НачалоПериодаКЗБ", НачалоДня(ПериодаКЗБ.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериодаКЗБ", КонецДня(ПериодаКЗБ.ДатаОкончания));
	
	БылоИзменениеВРегистре = Ложь;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат Ложь;
	
	КонецЕсли; 
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	МассивИДСтрок = ТаблицаРезультата.ВыгрузитьКолонку("ИДСтроки");
	
	НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Кампания.Установить(КампанияПоНачислениюАккруалов);
	НаборЗаписей.Прочитать();
	
	Для каждого ТекущаяЗапись Из НаборЗаписей Цикл
	
		Если МассивИДСтрок.Найти(ТекущаяЗапись.ИДСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ВыборкаДетальныеЗаписи = ТаблицаРезультата.НайтиСтроки(Новый Структура("ИДСтроки", ТекущаяЗапись.ИДСтроки));
		ВыборкаДетальныеЗаписи = ВыборкаДетальныеЗаписи[0];
		
		ТекущаяЗапись.СуммаКонтроль = ВыборкаДетальныеЗаписи.СуммаКонтроль;
		ТекущаяЗапись.СуммаИсполнение = ВыборкаДетальныеЗаписи.СуммаИсполнение;
		
		БылоИзменениеВРегистре = Истина;
		
	КонецЦикла; 
	
	Если БылоИзменениеВРегистре Тогда
		НаборЗаписей.Записать(Истина);
	КонецЕсли; 
	
	Возврат БылоИзменениеВРегистре;
	
КонецФункции

Функция АРММенеджераПоКонтроллингу_СоздатьДокументАккруалБезID(КампанияПоНачислениюАккруалов, ОрганизацияПоУмолчанию) Экспорт

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-02 (#3969)
	ДлительныеОперации.СообщитьПрогресс(, "Заполнение РС ""Начисление аккруалов (МСФО)""...");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-02 (#3969)
	
	ок_НачислениеАккруалов.ЗаполнитьНачислениеАккруаловМСФО(КампанияПоНачислениюАккруалов);
	СтруктураДополнительныхПараметров = новый Структура();
	СтруктураДополнительныхПараметров.Вставить("Организация", ОрганизацияПоУмолчанию);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-02 (#3969)
	ДлительныеОперации.СообщитьПрогресс(, "Создание документов ""Аккруал без ID""...");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-02 (#3969)
	
	ок_НачислениеАккруалов.СоздатьДокументАккруалБезID(КампанияПоНачислениюАккруалов, СтруктураДополнительныхПараметров);

	Возврат Истина;
	
КонецФункции

Функция АРММенеджераПоКонтроллингу_ИзменитьПометку(КампанияПоНачислениюАккруалов, ИмяПоля, ВыбЗнач, МассивИДСтрок) Экспорт
	
	Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Кампания.Установить(КампанияПоНачислениюАккруалов);
	НаборЗаписей.Прочитать();
	
	Для каждого ТекущаяЗапись Из НаборЗаписей Цикл
	
		Если МассивИДСтрок.Найти(ТекущаяЗапись.ИДСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТекущаяЗапись[ИмяПоля] = ВыбЗнач Тогда
			Продолжить;
		КонецЕсли; 
			
		ТекущаяЗапись[ИмяПоля] = ВыбЗнач;
		
		Если ИмяПоля = "ГотовоКСозданиюДокумента"
			И НЕ ТекущаяЗапись.Обработано Тогда
			
			Продолжить;
			
		ИначеЕсли ИмяПоля = "Обработано"
			И НЕ ТекущаяЗапись.Обработано
			И ТекущаяЗапись.ГотовоКСозданиюДокумента Тогда
			
			ТекущаяЗапись.ГотовоКСозданиюДокумента = Ложь;
			
		КонецЕсли;
		
		ТекущаяЗапись.ДатаИзменения = ТекущаяДата();
		ТекущаяЗапись.Ответственный = Ответственный;
		
		БылоИзменениеВРегистре = Истина;
		
	КонецЦикла; 
	
	Если БылоИзменениеВРегистре Тогда
		НаборЗаписей.Записать(Истина);
	КонецЕсли; 
	
	Возврат БылоИзменениеВРегистре;
	
КонецФункции

Функция ПолучитьМассивИнициаторовПоОтветственномуЗаОбработкуЗаписейКампании(ОтветственныйЗаОбработкуЗаписей) Экспорт

	МассивИнициаторов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЗаОбработкуЗаписейКампании.Инициатор КАК Инициатор
		|ИЗ
		|	РегистрСведений.ок_ОтветственныеЗаОбработкуЗаписейКампании КАК ОтветственныеЗаОбработкуЗаписейКампании
		|ГДЕ
		|	ОтветственныеЗаОбработкуЗаписейКампании.ОтветственныйЗаОбработкуЗаписей = &ОтветственныйЗаОбработкуЗаписей";
	
	Запрос.УстановитьПараметр("ОтветственныйЗаОбработкуЗаписей", ОтветственныйЗаОбработкуЗаписей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивИнициаторов.Добавить(ВыборкаДетальныеЗаписи.Инициатор);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивИнициаторов;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-22 (#3969)