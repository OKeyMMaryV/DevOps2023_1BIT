
#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСФайлами

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// 1С:Бухучет и торговля
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ

// Выделяет из полного пути к файлу его имя (набор символов после последней \).
// 
// Параметры
//  ПутьКФайлу     - Строка, содержащая имя файла, неважно с именем каталога или без.
// 
// Возвращаемое значение:
//   Строка - расширение файла.
// 
Функция ПолучитьИмяФайлаИзПолногоПути(Знач ПутьКФайлу) Экспорт
	
	ИмяФайла = ПолучитьЧастьСтрокиОтделеннойСимволом(ПутьКФайлу, "\");
	Возврат ИмяФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// 1С:Бухучет и торговля
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ ДЛЯ МЕХАНИЗМА ДОПРОЛНИТЕЛЬНОЙ ИНФОРМАЦИИ

// Составляет полное имя файла из имени каталога и имени файла.
// 
// Параметры
//  ИмяКаталога  - Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     - Строка, содержащая имя файла, без имени каталога.
// 
// Возвращаемое значение:
//   Строка - полное имя файла с учетом каталога.
// 
Функция ПолучитьИмяФайла(ИмяКаталога, ИмяФайла) Экспорт
	
	Если Найти(ИмяКаталога, "/") > 0 Тогда 
		Слэш = "/";		
	Иначе 
		Слэш = "\";
	КонецЕсли;
	Если Не ПустаяСтрока(ИмяФайла) Тогда  		
		Возврат "" + ИмяКаталога + ?(Прав(ИмяКаталога, 1) = Слэш, "", Слэш) + ИмяФайла;			
	Иначе        		
		Возврат ИмяКаталога; 		
	КонецЕсли;

КонецФункции // ПолучитьИмяФайла()

// Процедура полное имя файла разбивает на путь в файлу и имя самого файла.
// 
// Параметры
//  ПолноеИмяФайла  - Строка, содержащая полное имя файла на диске.
//  ИмяКаталога  - Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     - Строка, содержащая имя файла, без имени каталога.
// 
Процедура ПолучитьКаталогИИмяФайла(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла) Экспорт
	
	// Находим последний с конца "\" все что до него - это путь, после - имя.
	НомерПозиции = СтрДлина(ПолноеИмяФайла);
	Пока НомерПозиции <> 0 Цикл
		
		Если Сред(ПолноеИмяФайла, НомерПозиции, 1) = "\" Тогда
			
			ИмяКаталога = Сред(ПолноеИмяФайла, 1, НомерПозиции - 1);
			ИмяФайла = Сред(ПолноеИмяФайла, НомерПозиции + 1);
			Возврат;
			
		КонецЕсли;
		
		НомерПозиции = НомерПозиции - 1;
		
	КонецЦикла;
	
	// Так и не нашли слешей, значит все- это имя файла.
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
КонецПроцедуры

// Процедура меняет расширение имени переданного файла (сам файл не меняется, меняется колько строка).
// 
// Параметры
//  ИмяФайла  - Строка, содержащая полное имя файла на диске.
//  НовоеРасширениеФайла  - Строка, содержащая новое расширение файла.
// 
Процедура УстановитьРасширениеФайла(ИмяФайла, Знач НовоеРасширениеФайла) Экспорт
	
	// К расширению точку добавляем
	Если Сред(НовоеРасширениеФайла, 1, 1) <> "." Тогда
		ЗначениеНовогоРасширения = "." + НовоеРасширениеФайла;	
	Иначе
		ЗначениеНовогоРасширения = НовоеРасширениеФайла;	
	КонецЕсли;
	// Если не находим точку в текущем имени файла, то просто приписываем к нему новое расширение с конца.
	ПозицияТочки = СтрДлина(ИмяФайла);
	Пока ПозицияТочки >= 1 Цикл
		
		Если Сред(ИмяФайла, ПозицияТочки, 1) = "." Тогда
						
			ИмяФайла = Сред(ИмяФайла, 1, ПозицияТочки - 1) + ЗначениеНовогоРасширения;
			Возврат; 
			
		КонецЕсли;
		
		ПозицияТочки = ПозицияТочки - 1;	
	КонецЦикла;
	
	// Не нашли точку в имени файла
	ИмяФайла = ИмяФайла + ЗначениеНовогоРасширения;	
	
КонецПроцедуры

// Функция определяет дату последней модификации существующего файла на диске
// Параметры
//  ИмяФайла  - Строка, содержащая полный путь к файла на диске.
// 
// Возвращаемое значение:
//   Дата - Дата последней модификации файла.
// 
Функция ПолучитьДатуФайла(Знач ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ПолучитьВремяИзменения();
	 
КонецФункции

// Формирует строку фильтра для диалога выбора картинки с типами файлов.
// 
// Параметры
//  Нет.
// 
// Возвращаемое значение:
//   Строка - фильтр по типам файлов для диалога выбора картинки.
// 
Функция ПолучитьФильтрИзображений() Экспорт

	Возврат "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
	      + "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
	      + "Формат jpeg (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
	      + "Формат tiff (*.tif)|*.tif|"
	      + "Формат gif (*.gif)|*.gif|"
	      + "Формат png (*.png)|*.png|"
	      + "Формат icon (*.ico)|*.ico|"
	      + "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";

КонецФункции // ПолучитьФильтрИзображений()

// Формирует имя каталога для сохранения/чтения файлов. Для различных типов объектов возможны 
// различные алгоритмы определения каталога.
// 
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
// 
// Возвращаемое значение:
//   Строка - каталог файлов для указанного объекта и пользователя.
// 
Функция ПолучитьИмяКаталога(ТекущийПользователь) Экспорт

	// Получим рабочий каталог из свойств пользователя.
	РабочийКаталог = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновнойКаталогФайлов", ТекущийПользователь);
	
	// Если рабочий каталог не указан получим каталог временных файлов прогаммы.
	Если ПустаяСтрока(РабочийКаталог) Тогда
		РабочийКаталог = КаталогВременныхФайлов();
	КонецЕсли;

	// Так как при различных указаниях рабочего каталога возможно наличие или отсутствие
	// последнего слеша, приведем строку каталога к унифицированному виду - без слеша на конце.
	Если Прав(РабочийКаталог, 1) = "\" Тогда
		РабочийКаталог = Лев(РабочийКаталог, СтрДлина(РабочийКаталог) - 1);
	КонецЕсли;

	Возврат РабочийКаталог;

КонецФункции // ПолучитьИмяКаталога()

#КонецЕсли

// Процедура выполняет синхронизацию пометки на удаление объекта и 
// его дополнительной информации.
// 
// Параметры:
//  Объект - объект документа, справочника. 
// 
Процедура СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(Объект, Отказ = Ложь, Сообщать = Ложь) Экспорт
	

КонецПроцедуры // СинхронизацияПометкиНаУдалениеУДополнительныхФайлов()

#КонецОбласти	

// Функция проверяет наличие механизма "Хранение дополнительной информации"
// в текущем решении.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Результат - Булево.
// 
Функция МеханизмХраненияДополнительнойИнформацииЕсть() Экспорт
    
    Результат = Метаданные.Справочники.Найти("бит_ХранилищеДополнительнойИнформации") <> Неопределено;
    
    Возврат Результат;
    
КонецФункции // МеханизмХраненияДополнительнойИнформацииЕсть()

// Выделяет из имени файла его расширение (набор символов после последней точки).
// 
// Параметры
//  ИмяФайла     - Строка, содержащая имя файла, неважно с именем каталога или без.
// 
// Возвращаемое значение:
//   Строка - расширение файла.
// 
Функция ПолучитьРасширениеФайла(Знач ИмяФайла) Экспорт
	
	Расширение = ПолучитьЧастьСтрокиОтделеннойСимволом(ИмяФайла, ".");
	Возврат Расширение;
	
КонецФункции

// Получает индекс пиктограммы файла из коллекции пиктограмм в зависимости от расширения файла.
// 
// Параметры
//  РасширениеФайла - Строка, содержащая расширение файла.
// 
// Возвращаемое значение:
//   Число - индекс пиктограммы в коллекции.
// 
Функция ПолучитьИндексПиктограммыФайла(РасширениеФайла) Экспорт

	РасширениеФайла = Врег(РасширениеФайла);

	Если Найти(",1CD,CF,CFU,DT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 1;
	ИначеЕсли "MXL" = РасширениеФайла Тогда
		Возврат 2;
	ИначеЕсли "TXT" = РасширениеФайла Тогда
		Возврат 3;
	ИначеЕсли "EPF" = РасширениеФайла Тогда
		Возврат 4;
	ИначеЕсли Найти(",BMP,DIB,RLE,JPG,JPEG,TIF,GIF,PNG,ICO,WMF,EMF,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 5;
	ИначеЕсли Найти(",HTM,HTML,MHT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 6;
	ИначеЕсли "DOC" = РасширениеФайла Тогда
		Возврат 7;
    ИначеЕсли "DOCX" = РасширениеФайла Тогда
		Возврат 7;
	ИначеЕсли "XLS" = РасширениеФайла Тогда
		Возврат 8;
    ИначеЕсли "XLSX" = РасширениеФайла Тогда
		Возврат 8;
	ИначеЕсли "PPT" = РасширениеФайла Тогда
		Возврат 9;
	ИначеЕсли "VSD" = РасширениеФайла Тогда
		Возврат 10;
	ИначеЕсли "MPP" = РасширениеФайла Тогда
		Возврат 11;
	ИначеЕсли "MDB" = РасширениеФайла Тогда
		Возврат 12;
	ИначеЕсли "XML" = РасширениеФайла Тогда
		Возврат 13;
	ИначеЕсли "MSG" = РасширениеФайла Тогда
		Возврат 14;
	ИначеЕсли Найти(",RAR,ZIP,ARJ,CAB,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 15;
	ИначеЕсли Найти(",EXE,COM,,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 16;
	ИначеЕсли "BAT" = РасширениеФайла Тогда
		Возврат 17;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // ПолучитьИндексПиктограммыФайла()

// Формирует строку фильтра для диалога выбора файла с типами файлов.
// 
// Параметры
//  Нет.
// 
// Возвращаемое значение:
//   Строка - фильтр по типам файлов для диалога выбора файла.
// 
Функция ПолучитьФильтрФайлов() Экспорт

	Возврат "Все файлы (*.*)|*.*|"
	      + "Документ Microsoft Word (*.doc)|*.doc|"
	      + "Документ Microsoft Excell (*.xls)|*.xls|"
	      + "Документ Microsoft PowerPoint (*.ppt)|*.ppt|"
	      + "Документ Microsoft Visio (*.vsd)|*.vsd|"
	      + "Письмо электронной почты (*.msg)|*.msg|"
	      + "Картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|"
	      + "Текстовый документ (*.txt)|*.txt|"
	      + "Табличный документ (*.mxl)|*.mxl|";

КонецФункции // ПолучитьФильтрФайлов()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// функция возвращает часть строки после последнего встреченного символа в строке.
// 
Функция ПолучитьЧастьСтрокиОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции

#КонецОбласти
