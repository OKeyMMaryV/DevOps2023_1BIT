
#Область СлужебныйПрограммныйИнтерфейс

#Область ДействияПриНачалеРаботыСистемы

#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда

// Процедура выполняет активацию приложения.
// 
// Параметры:
//  ИмяПриложения   - Ид приложения или заголовок окна.
//  ЖдатьЗавершения - Булево.
//  ВыводитьОшибки  - Булево.
// 
Процедура АктивироватьПриложение(ИмяПриложения, ЖдатьЗавершения = Ложь, ВыводитьОшибки = Истина) Экспорт

	// Готовим текст скрипта активации.
	Путь         = ПолучитьИмяВременногоФайла("vbs");
	Скрипт       = ПолучитьОбщийМакет("бит_мпд_АктивироватьПриложение");
	ТекстСкрипта = Скрипт.ПолучитьТекст();
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта,"%AppID%", ИмяПриложения);
	Скрипт.УстановитьТекст(ТекстСкрипта);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Путь", Путь);
	Дополнительно.Вставить("ЖдатьЗавершения", ЖдатьЗавершения);
	Дополнительно.Вставить("ВыводитьОшибки", ВыводитьОшибки);
	
	Оповещение 	  = Новый ОписаниеОповещения("АктивироватьПриложениеЗавершение", ЭтотОбъект, Дополнительно); 
	Скрипт.НачатьЗапись(Оповещение, Путь, КодировкаТекста.ANSI);
	
КонецПроцедуры

// Обработчик завершения записи текстового документа.
//  См. Синтакс-помощник: ТекстовыйДокумент.НачатьЗапись().
//
Процедура АктивироватьПриложениеЗавершение(Результат, Дополнительно) Экспорт

	Если Результат = Истина Тогда
		ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
		ПараметрыЗапуска.ДождатьсяЗавершения = Дополнительно.ЖдатьЗавершения;
		ФайловаяСистемаКлиент.ЗапуститьПрограмму("""" + Дополнительно.Путь + """", ПараметрыЗапуска);
	Иначе
		Если Дополнительно.ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось записать скрипт активации внешнего окна %1%! Описание ошибки %2%.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,  Дополнительно.Путь);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецЕсли 

// Процедура выполняет действия, необходимые при начале работы системы. 
// 
Процедура ДействияПриНачалеРаботыСистемы()  Экспорт
	
	// Инициализация клиента лицензирования
	бит_сл_клиент.ИнициализацияКлиентаЛицензирования();
	бит_ЛицензированиеБФCервер.ИнициализацияРешения();
	Если бит_ЛицензированиеБФCервер.ТребуетсяОбновитьИнтерфес() Тогда		
		бит_ЛицензированиеБФCервер.ТребуетсяОбновитьИнтерфес(Ложь);
		бит_РаботаСДиалогамиКлиент.ОбновитьИнтерфейсПользователя();		 
	КонецЕсли; 
	
	// Подключение обработчика действия сообщения системы взаимодействия.
	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьНавигационнуюСсылку", бит_ОбщегоНазначенияКлиент);
		СистемаВзаимодействия.ПодключитьОбработчикДействияСообщения(Оповещение);
	КонецЕсли; 
	
	ПарамСтарта = бит_ПолныеПрава.ПолучитьПараметрыДляСтартаСистемы("ДействияПриНачалеРаботыСистемы");
	
	Если ПарамСтарта.ЭтоЧужойПодчиненныйУзел Тогда	
		Возврат;	
	КонецЕсли; 
	
	ЭтоСервернаяБаза = ?(Найти(Врег(СтрокаСоединенияИнформационнойБазы()), "FILE=")=0, Истина, Ложь);
	Если ПарамСтарта.ВыполнятьСборСтатистики.Клиент Тогда
		Данные = бит_ук_СлужебныйКлиент.ПолучитьСистемнуюИнформациюКлиент();
		бит_ук_СлужебныйВызовСервера.ЗаписатьИнформациюОСистеме(Данные, Ложь);
	КонецЕсли;
	
	Если ЭтоСервернаяБаза И ПарамСтарта.ВыполнятьСборСтатистики.Сервер Тогда
		Данные = бит_ук_СлужебныйВызовСервера.ПолучитьСистемнуюИнформациюСервер();
		бит_ук_СлужебныйВызовСервера.ЗаписатьИнформациюОСистеме(Данные, Истина);
	КонецЕсли; 
	
	// Здесь выключаю обновление и действия на клиенте при запуске БИТ.Финанс для перехода на БСП.
	// Интерактивное взаимодействие с пользователем:
	// - заполняем параметры: См. бит_ОбщегоНазначения.ПриДобавленииПараметровРаботыКлиентаПриЗапуске()
	// - выполнение по параметрам:
	// 		См. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы() -> 
	// 		бит_ОбщегоНазначенияКлиент.ПослеНачалаРаботыСистемы().
	// Обработчики обновления:  бит_ОбновлениеИнформационнойБазыБФ.ПриДобавленииОбработчиковОбновления().
	
КонецПроцедуры

// Возвращает клиентский общий модуль по имени.
// 
// Параметры:
//  Имя - Строка
//
Функция КлиентскийОбщийМодуль(Имя) Экспорт
	
	Модуль = Вычислить(Имя);
	
#Если НЕ ВебКлиент Тогда
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции // КлиентскийОбщийМодуль()
 
#КонецОбласти

Процедура ПослеНачалаРаботыСистемы() Экспорт

	// Доступные параметры работы клиента см. бит_ОбщегоНазначения.ПриДобавленииПараметровРаботыКлиентаПриЗапуске();
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если ПараметрыРаботыКлиента.бит_ПоказатьФормуКонстант Тогда
		ПоказатьФормуКонстант();
	КонецЕсли; 
	
	Если ПараметрыРаботыКлиента.бит_ПоказатьКонвертациюДокументовБюджетирования Тогда
		ПоказатьКонвертациюДокументовБюджетирования();
	КонецЕсли;
	
	Если ПараметрыРаботыКлиента.бит_ПоказатьКонвертациюОборотовПоБюджету Тогда
		ПоказатьКонвертациюОборотовПоБюджету();
	КонецЕсли;
	
	Если ПараметрыРаботыКлиента.бит_ПоказатьПомощникКонвертацииКодаАлгоритмов Тогда
		ПоказатьПомощникКонвертацииКодаАлгоритмов();
	КонецЕсли;
	
	Если ПараметрыРаботыКлиента.бит_ПоказатьРабочееМестоВизирования Тогда
		ПоказатьРабочееМестоВизирования();
	КонецЕсли;
	
	Если ПараметрыРаботыКлиента.бит_ПодключитьОжиданиеУведомленияОбУстановкеВиз <> 0 Тогда
		ПодключитьОжиданиеУведомленияОбУстановкеВиз(ПараметрыРаботыКлиента.бит_ПодключитьОжиданиеУведомленияОбУстановкеВиз);
	КонецЕсли;
	
	Если ПараметрыРаботыКлиента.бит_ПоказатьДополнительнуюИнформацию Тогда
		ПоказатьДополнительнуюИнформацию();
	КонецЕсли;
	
КонецПроцедуры
	
// Удаляет из кэша на клиенте значение по ключу. 
// Необходимо для обеспечения обновления кэша в клиент-серверном режиме. 
// В клиент-серверном режиме процедура глУстановитьЗначениеПеременной() 
// не обновляет клиентский кэш глОбщиеЗначение. И затем при получении значений из кэша функцией 
// бит_ОбщиеПеременныеСервер.ЗначениеПеременной() на клиенте возвращаются не актуальные значения из глОбщиеЗначения.
// В такой ситуации единственный способ обеспечить обновление кэша - очистка соответсвующих ключей в глОбщиеЗначения.
// 
// Параметры:
//  Ключ - Строка.
// 
Процедура УдалитьЗначениеКэша(Ключ) Экспорт
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() 
		 ИЛИ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		
		// В БП нет данной глобальной переменной.
		глОбщиеЗначения = Новый Структура;
	
	КонецЕсли; 
	
	Если ТипЗнч(глОбщиеЗначения) = Тип("Структура") Тогда
		
		 Если глОбщиеЗначения.Свойство(Ключ) Тогда
		 
		 	глОбщиеЗначения.Удалить(Ключ);
		 
		 КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // УдалитьЗначениеКэша()

// Процедура открывает обработку рабочее место визирования с заполненным перечнем документов, 
// подлежащих визированию.
// 
// Параметры:
//  ОтключитьМеханизмЗащиты - Булево.
// 
Процедура УведомитьОбУстановкеВиз(ОтключитьМеханизмЗащиты) Экспорт
	
	ФормаРМВ = ПолучитьФорму("Обработка.бит_РабочееМестоВизирования.Форма",,,"бит_РабочееМестоВизирования");
	
	Если Не ЗначениеЗаполнено(ФормаРМВ.АдресСхемыКомпоновкиДанных) Тогда
		
		Если ОтключитьМеханизмЗащиты Тогда
			ФормаРМВ.ПодготовитьФорму();	
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;			
	
	ФормаРМВ.ОбновитьТаблицу();
	
	Если ФормаРМВ.ТабДокументы.Количество() = 0 Тогда
		ФормаРМВ        = Неопределено;	
	Иначе
		Если НЕ ФормаРМВ.Открыта() Тогда
			
			ФормаРМВ.Открыть();	
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // УведомитьОбУстановкеВиз()

// Прцедура выбора периода.
//
// Параметры:
//  ПараметрыПередачи	 - Структура	 - данные для формирования периода.
//
Процедура ВыбратьПериод(ПараметрыПередачи) Экспорт
	
	// ПараметрыПередачи:
	//	ДатаНачала, ДатаОкончания, Контекст.		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, ПараметрыПередачи);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Новый СтандартныйПериод(ПараметрыПередачи.ДатаНачала, ПараметрыПередачи.ДатаОкончания);
	Диалог.Показать(ОписаниеОповещения); 
	
КонецПроцедуры

// Завершение немодального вызова "ВыбратьПериод".
//
// Параметры:
//  Результат			 - СтандартныйПериод
//  ПараметрыПередачи	 - Структура.
//
Процедура ВыбратьПериодЗавершение(Результат, ПараметрыПередачи) Экспорт 

	ПараметрыПередачи.Вставить("Результат", Результат);
	Оповестить("ВыбратьПериодЗавершение", ПараметрыПередачи, ПараметрыПередачи.Контекст);

КонецПроцедуры

Процедура ОткрытьНавигационнуюСсылку(Сообщение, Действие, Дополнительно) Экспорт

	Если Сообщение.Данные = "ОткрытьНавигационнуюСсылку" Тогда
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(Действие);	
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПоказатьФормуКонстант()

	ОткрытьФорму("ОбщаяФорма.бит_КонстантыУправляемая");	

КонецПроцедуры

Процедура ПоказатьКонвертациюДокументовБюджетирования()

	ОткрытьФорму("Обработка.бит_КонвертацияДокументовБюджетирования.Форма",,,,
		ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

Процедура ПоказатьКонвертациюОборотовПоБюджету()

	ОткрытьФорму("Обработка.бит_КонвертацияОборотовПоБюджету.Форма",,,,
		ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

Процедура ПоказатьПомощникКонвертацииКодаАлгоритмов()

	ОткрытьФорму("Обработка.бит_ПомощникКонвертацииКодаАлгоритмов.Форма",,,,
		ВариантОткрытияОкна.ОтдельноеОкно);					

КонецПроцедуры

Процедура ПоказатьРабочееМестоВизирования()

	ПодключитьОбработчикОжидания("бит_ОжиданиеУведомленияОбУстановкеВизПриСтарте", 5, Истина); 

КонецПроцедуры
 
Процедура ПодключитьОжиданиеУведомленияОбУстановкеВиз(Интервал)

	ПодключитьОбработчикОжидания("бит_ОжиданиеУведомленияОбУстановкеВиз", Интервал * 60); 	

КонецПроцедуры

Процедура ПоказатьДополнительнуюИнформацию()

	ОткрытьФорму("Обработка.бит_ДополнительнаяИнформация.Форма");	

КонецПроцедуры

#КонецОбласти
