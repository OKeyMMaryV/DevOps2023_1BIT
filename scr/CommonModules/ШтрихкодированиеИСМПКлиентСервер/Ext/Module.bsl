#Область ПрограммныйИнтерфейс

// Проверяет код маркировки на соответствие шаблону потребительской упаковки
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// 	GTIN          - Строка - GTIN [Возвращаемое значение].
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует коробке обуви.
Функция ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки, EAN = Неопределено, СерийныйНомер = Неопределено, КодТНВЭД = Неопределено) Экспорт
	
	Если Не СтрНачинаетсяС(СокрЛП(КодМаркировки), "(") Тогда
		
		ЭтоКМ38 = (СтрДлина(КодМаркировки) = 38);
		ЭтоКМ32 = (СтрДлина(КодМаркировки) = 31);
		
		Если ЭтоКМ38 Или ЭтоКМ32 Тогда
			
			ОсновнойАлфавит = "0123456789";
			
			ИдентификаторПрименения = Сред(КодМаркировки, 1, 2);
			Если ИдентификаторПрименения <> "01" Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// "01" + 14 знаков GTIN
			ЗначениеEAN = ШтрихкодированиеМОТПКлиентСервер.EANПоКодуМаркировки(Сред(КодМаркировки, 3, 14));
			Если ЗначениеEAN = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ИдентификаторПрименения = Сред(КодМаркировки, 17, 2);
			Если ИдентификаторПрименения <> "21" Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// "21" + 13 знаков Серийный номер
			ЗначениеСерийныйНомер = Сред(КодМаркировки, 19, 13);
			Если Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(ЗначениеСерийныйНомер, АлфавитКодаМаркировки()) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если ЭтоКМ38 Тогда
				
				ИдентификаторПрименения = Сред(КодМаркировки, 32, 3);
				Если ИдентификаторПрименения <> "240" Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ЗначениеКодТНВЭД = Сред(КодМаркировки, 35, 4);
				
				// "240" + 4 знака Код ТН ВЭД
				Если Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(ЗначениеКодТНВЭД, ОсновнойАлфавит) Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			EAN           = ЗначениеEAN;
			СерийныйНомер = ЗначениеСерийныйНомер;
			КодТНВЭД      = ЗначениеКодТНВЭД;
			
			Возврат Истина;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		
		Если Не РезультатРазбора.Разобран Тогда
			Возврат Ложь;
		КонецЕсли;
		
		АлфавитКодаМаркировки = АлфавитКодаМаркировки();
		
		// Обязательный элемент кода маркировки.
		Идентификатор01 = РезультатРазбора.ДанныеШтрихкода["01"];
		Если Идентификатор01 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗначениеEAN = ШтрихкодированиеМОТПКлиентСервер.EANПоКодуМаркировки(Идентификатор01.Значение);
		Если ЗначениеEAN = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Обязательный элемент кода маркировки.
		Идентификатор21 = РезультатРазбора.ДанныеШтрихкода["21"];
		Если Идентификатор21 = Неопределено
				Или СтрДлина(Идентификатор21.Значение) <> 13
				Или Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(
					Идентификатор21.Значение, АлфавитКодаМаркировки) Тогда // Серийный номер
			Возврат Ложь;
		КонецЕсли;
		
		// Необязательный элемент кода маркировки.
		Идентификатор240 = РезультатРазбора.ДанныеШтрихкода["240"];
		Если Идентификатор240 <> Неопределено Тогда // Ключ проверки
			
			Если СтрДлина(Идентификатор240.Значение) <> 4
				Или Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(Идентификатор240.Значение, "0123456789") Тогда // Код ТН ВЭД
				Возврат Ложь;
			КонецЕсли;
			
			ЗначениеКодТНВЭД = Идентификатор240.Значение;
			
		КонецЕсли;
		
		// Необязательный элемент кода маркировки.
		Идентификатор91 = РезультатРазбора.ДанныеШтрихкода["91"];
		Если Идентификатор91 <> Неопределено Тогда // Ключ проверки
			
			Если СтрДлина(Идентификатор91.Значение) <> 4
				Или Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(Идентификатор91.Значение, АлфавитКодаМаркировки) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Необязательный элемент кода маркировки.
		Идентификатор92 = РезультатРазбора.ДанныеШтрихкода["92"];
		Если Идентификатор92 <> Неопределено Тогда // Подпись
			
			Если СтрДлина(Идентификатор92.Значение) <> 88
				Или Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(Идентификатор92.Значение, АлфавитКодаМаркировки) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		EAN           = ЗначениеEAN;
		СерийныйНомер = Идентификатор21.Значение;
		КодТНВЭД      = ЗначениеКодТНВЭД;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону логистической упаковки.
// 
// Параметры:
//  КодМаркировки - Строка - Штрихкод.
// Возвращаемое значение:
//  Булево - Истина, если код соответствует логистической упаковке.
Функция ЭтоКодУпаковки(КодМаркировки) Экспорт
	
	Возврат ЭтоКодЛогистическойУпаковки(КодМаркировки);
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону логистической упаковки
// 
// Параметры:
//  КодМаркировки - Строка - Штрихкод.
// Возвращаемое значение:
//  Булево - Истина, если код соответствует логистической упаковке.
Функция ЭтоКодЛогистическойУпаковки(КодМаркировки, ЗначениеSSCC = Неопределено) Экспорт
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(КодМаркировки);
	Если ЭтоGTIN Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Шаблоны:
	// - (00) + 000000000000000000,     22 char
	// - 00 + GS1 + 000000000000000000, 21 char
	// - 00 + 000000000000000000,       20 char
	// - 000000000000000000,            18 char
	
	ЭтоЛогистическаяУпаковка18 = Ложь;
	ЭтоЛогистическаяУпаковка20 = Ложь;
	ПроверяемоеЗначениеSSCC    = Неопределено;
	
	РазделительGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	
	Если СтрНачинаетсяС(КодМаркировки, "(00)") И СтрДлина(КодМаркировки) = 22 Тогда
		ЭтоЛогистическаяУпаковка20 = Истина;
	ИначеЕсли СтрНачинаетсяС(КодМаркировки, "00" + РазделительGS1) И СтрДлина(КодМаркировки) = 21 Тогда
		ЭтоЛогистическаяУпаковка20 = Истина;
	ИначеЕсли СтрНачинаетсяС(КодМаркировки, "00") И СтрДлина(КодМаркировки) = 20 Тогда
		ЭтоЛогистическаяУпаковка20 = Истина;
	ИначеЕсли СтрДлина(КодМаркировки) = 18 Тогда
		ЭтоЛогистическаяУпаковка18 = Истина;
	КонецЕсли;
	
	Если ЭтоЛогистическаяУпаковка18 Тогда
		ПроверяемоеЗначениеSSCC = КодМаркировки;
	ИначеЕсли ЭтоЛогистическаяУпаковка20 Тогда
		ПроверяемоеЗначениеSSCC = Прав(КодМаркировки, 18);
	КонецЕсли;
	
	Если ПроверяемоеЗначениеSSCC = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(ПроверяемоеЗначениеSSCC, "0123456789") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтрольноеЧислоSSCC = ШтрихкодыУпаковокКлиентСервер.КонтрольноеЧислоSSCC(Лев(ПроверяемоеЗначениеSSCC, 17));
	
	Если КонтрольноеЧислоSSCC <> Число(Прав(ПроверяемоеЗначениеSSCC, 1)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеSSCC = ПроверяемоеЗначениеSSCC;
	
	Возврат Истина;
	
КонецФункции

// Убирает разделители идентификаторов "(", ")" из кода маркировки.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//  Строка - Код маркировки без разделителей.
Функция КодМаркировкиБезСкобок(КодМаркировки) Экспорт
	
	ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(КодМаркировки);
	Если ЧтениеШтрихкода.Результат <> Неопределено Тогда
		Возврат ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Ложь, "");
	КонецЕсли;
	
КонецФункции

// Приводит код маркировки к виду, необходимому для системы ИС МП.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки до нормализации.
// Возвращаемое значение:
//  Неопределено, Строка - Код маркировки после нормализации.
Функция КодМаркировкиДляПередачиИСМП(КодМаркировки) Экспорт
	
	ЗначениеSSCC = Неопределено;
	Если ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки) Тогда
		ЗначениеДляПоиска = КодМаркировкиБезСкобок(
			НормализоватьКодМаркировки(
				КодМаркировки));
	ИначеЕсли ЭтоКодЛогистическойУпаковки(КодМаркировки, ЗначениеSSCC) Тогда
		ЗначениеДляПоиска = ЗначениеSSCC;
	Иначе
		ЗначениеДляПоиска = КодМаркировки;
	КонецЕсли;
	
	Возврат ЗначениеДляПоиска;
	
КонецФункции

// Возвращает состав кода маркировки обувной продукции.
// 
// Параметры:
//  КодМаркировки - Строка - код маркировки обувной продукции.
// Возвращаемое значение:
//  Неопределено, Структура - Описание:
// * GTIN - Строка - GTIN табачной продукции.
// * СерийныйНомер - Строка - серийный номер.
Функция СоставКодаМаркировки(КодМаркировки) Экспорт
	
	СоставКодаМаркировки = Новый Структура("GTIN, СерийныйНомер");
	
	Если ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки) Тогда
		
		РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		
		ДанныеШтрихкода01 = РезультатРазбора.ДанныеШтрихкода["01"];
		ДанныеШтрихкода21 = РезультатРазбора.ДанныеШтрихкода["21"];
		
		Если ДанныеШтрихкода01 <> Неопределено Тогда
			СоставКодаМаркировки.GTIN = ДанныеШтрихкода01.Значение;
		КонецЕсли;
		
		Если ДанныеШтрихкода21 <> Неопределено Тогда
			СоставКодаМаркировки.СерийныйНомер = ДанныеШтрихкода21.Значение;
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат СоставКодаМаркировки;
	
КонецФункции

// Возвращает сокращенное представление штрихкода маркируемой продукции.
// 
// Параметры:
// 	Штрихкод - Строка - Штрихкод строкой.
// Возвращаемое значение:
// 	Строка - Краткое представление штрихкода маркируемой продукции.
Функция ПредставлениеШтрихкода(Штрихкод) Экспорт
	
	Если ЭтоКодМаркировкиПотребительскойУпаковки(Штрихкод) Тогда
		ПредставлениеШтрихкода = Штрихкод;
	Иначе
		ПредставлениеШтрихкода = ШтрихкодированиеИСКлиентСервер.ПредставлениеШтрихкода(Штрихкод);
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

Функция SSCCАгрегата(Штрихкод) Экспорт
	
	ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
	Если ПараметрыШтрихкода.Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	Если ПараметрыШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		КодАгрегата = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ПараметрыШтрихкода.Результат, Ложь, Ложь);
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	Возврат КодАгрегата;
	
КонецФункции

// Возвращает способ ввода в оборот СУЗ по виду операции.
// 
// Параметры:
//  ВидОперации - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции документа.
// Возвращаемое значение:
//  ПеречислениеСсылка.СпособыВводаВОборотСУЗ - Способ ввода в оборот СУЗ.
Функция СпособВводаВОборотСУЗПоВидуОперации(ВидОперации) Экспорт
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт");
	ИначеЕсли ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору")
		Или ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство");
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков");
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ПустаяСсылка");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//Включает поддержку обувной продукции, дополняя базовые параметры сканирования, параметрами необходимыми для обработки
//   штрихкодов обуви.
//
//Параметры:
//   ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования), дополняются параметрами:
//    * ЗапрашиватьСтатусыИСМП - Булево - Истина, если требуется разрешить запрашивать статусы в ИС МП.
//    * ДопустимыеСтатусыИСМП - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статусы, которые разрешены.
//    * ЗапрашиватьСпособВводаВОборот - Булево - Истина, если необходимо получать способ ввода в оборот кода маркировки.
//    * КонтролироватьРасхожденияСИСМП - Булево - Истина, если требуется сравнить данные, хранящиеся в справочнике
//          Штрихкоды упаковок товаров с данными сервиса ИС МП и отобразить расхождения.
//
//Возвращаемое значение:
//  Булево - параметры сканирования штрихкодов обуви добавлены
//
Функция ВключитьПоддержкуОбувнойПродукции(ПараметрыСканирования, ВидПродукции = Неопределено) Экспорт
	
	ВидыПродукцииОбувная = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная");
	
	Если ЗначениеЗаполнено(ВидПродукции) И ВидПродукции <> ВидыПродукцииОбувная Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидыПродукцииОбувная);
	КонтролироватьСтатусы = ИнтеграцияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки();
	
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП",                   КонтролироватьСтатусы);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыИСМП",                    Новый Массив);
	ПараметрыСканирования.Вставить("Детализация",                              Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот",            Ложь);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП",              Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП", Ложь);
	ПараметрыСканирования.Вставить("ЭтоМаркировкаОстатков",                    Неопределено);
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьПараметрыЗаполненияТабличнойЧастиТовары(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗаполнения.Вставить("ЗаполнитьGTIN", Истина);
	ПараметрыЗаполнения.ЗаполнитьКодТНВЭД = Истина;
	
КонецПроцедуры

// Заполняет параметры сканирования по контексту.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - источник заполнения параметров сканирования.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - по данному параметру будет проиходить отбор заполнения.
//  ФормаВыбора - ФормаКлиентскогоПриложения - Форма выбора.
Процедура ЗаполнитьПараметрыСканирования(Контекст, ФормаВыбора, ВидПродукции, ПараметрыСканирования) Экспорт
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.МаркировкаТоваровИСМП") Тогда
		
		ЗаполнитьПараметрыСканированияМаркировкаТоваров(Контекст, ПараметрыСканирования);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВыводИзОборотаИСМП") Тогда
		
		ЗаполнитьПараметрыСканированияВыводаИзОборота(Контекст, ПараметрыСканирования);
	
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.СписаниеКодовМаркировкиИСМП") Тогда
		
		ЗаполнитьПараметрыСканированияСписанияКодовМаркировки(Контекст, ПараметрыСканирования);
	
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПеремаркировкаТоваровИСМП") Тогда
		
		ЗаполнитьПараметрыСканированияПеремаркировкаТоваров(Контекст, ПараметрыСканирования);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Обработка.ПроверкаИПодборПродукцииИСМП") Тогда 
		
		ВключитьПоддержкуОбувнойПродукции(ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Приводит код маркировки к требуемому виду для обработки.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//  Строка - Код маркировки, приведенный к требуемому виду.
Функция НормализоватьКодМаркировки(Знач КодМаркировки) Экспорт
	
	НормализованныйКод = КодМаркировки;
	
	EAN           = Неопределено;
	СерийныйНомер = Неопределено;
	КодТНВЭД      = Неопределено;
	ЗначениеSSCC  = Неопределено;
	
	Если ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки, EAN, СерийныйНомер, КодТНВЭД) Тогда
		
		Если КодТНВЭД = Неопределено Тогда
			ШаблонНормализованногоКодаБлока = "(01)%1(21)%2";
			НормализованныйКод = СтрШаблон(
				ШаблонНормализованногоКодаБлока,
				ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(EAN), СерийныйНомер);
		Иначе
			ШаблонНормализованногоКодаБлока = "(01)%1(21)%2(240)%3";
			НормализованныйКод = СтрШаблон(
				ШаблонНормализованногоКодаБлока,
				ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(EAN), СерийныйНомер, КодТНВЭД);
		КонецЕсли;
		
	ИначеЕсли ЭтоКодЛогистическойУпаковки(КодМаркировки, ЗначениеSSCC) Тогда
		
		Если ЗначениеSSCC <> Неопределено Тогда
			
			ШаблонНормализованногоКодаSSCC = "(00)%1";
			НормализованныйКод = СтрШаблон(
				ШаблонНормализованногоКодаSSCC,
				ЗначениеSSCC);
			
		Иначе
			
			НормализованныйКод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВФорматеGS1(КодМаркировки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НормализованныйКод;
	
КонецФункции

// Выполняет обработку сохраненного выбора пользователем.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  ДанныеШтрихкода - Структура - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
Процедура ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода) Экспорт

	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ДанныеШтрихкода.ДополнительныеПараметры;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЗапомнитьВыбор")
		И ДополнительныеПараметры.ЗапомнитьВыбор Тогда
		
		Если ДополнительныеПараметры.Свойство("ДанныеВыбора")
			И ТипЗнч(ДополнительныеПараметры.ДанныеВыбора) = Тип("Структура") Тогда
			
			Если Форма.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
				Форма.ДанныеВыбораПоМаркируемойПродукции = ДополнительныеПараметры.ДанныеВыбора;
			Иначе
				ЗаполнитьЗначенияСвойств(
					Форма.ДанныеВыбораПоМаркируемойПродукции,
					ДополнительныеПараметры.ДанныеВыбора);
			КонецЕсли;
			
			Форма.СохраненВыборПоМаркируемойПродукции = Истина;
			ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает допустимые символы кода маркировки.
// 
// Параметры:
// Возвращаемое значение:
// 	Строка - Алфавит серийного номера.
Функция АлфавитКодаМаркировки() Экспорт
	
	Возврат "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”""%&’'()*+,-./_:;=<>?";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПараметровСканирования

// Дополняются свойства параметров сканирования и заполняются значения для документа "Маркировка товаров ИСМП".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияМаркировкаТоваров(Контекст, ПараметрыСканирования)
	
	ВидПродукции = Неопределено;
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		ВидПродукции = Контекст.Объект.ВидПродукции;
	КонецЕсли;
	
	Если Не ВключитьПоддержкуОбувнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ЗапрашиватьСтатусыИСМП = Истина;
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием       = Истина;
	ПараметрыСканирования.ДоступнаПечатьЭтикеток                         = Истина;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	ПараметрыСканирования.ЗапрашиватьСпособВводаВОборот                  = Истина;
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                            = Истина;
	ПараметрыСканирования.КонтрольСоставаУпаковокИСМП                    = Ложь;
	ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		ПараметрыСканирования.Организация = Контекст.Объект.Организация;
		ПараметрыСканирования.ДокументОснование = Контекст.Объект.ДокументОснование;
		Операция = Контекст.Объект.Операция;
	Иначе
		Операция = Контекст.Операция;
	КонецЕсли;
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
		ПараметрыСканирования.ЗапрашиватьСпособВводаВОборот = Ложь;
		ПараметрыСканирования.ЭтоМаркировкаОстатков         = Истина;
	Иначе
		ПараметрыСканирования.ЭтоМаркировкаОстатков        = Ложь;
		ПараметрыСканирования.ДопустимыйСпособВводаВОборот =
			ШтрихкодированиеИСМПКлиентСервер.СпособВводаВОборотСУЗПоВидуОперации(Операция);
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен"));
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Вывод из оборота ИСМП".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияВыводаИзОборота(Контекст, ПараметрыСканирования)
	
	ВидПродукции = Неопределено;
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		ВидПродукции = Контекст.Объект.ВидПродукции;
	КонецЕсли;
	
	Если Не ВключитьПоддержкуОбувнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	
	ПараметрыСканирования.ВозможнаЗагрузкаТСД = Истина;
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		ПараметрыСканирования.Организация = Контекст.Объект.Организация;
	Иначе
		ПараметрыСканирования.Организация = Контекст.Организация;
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Списание кодов маркировки ИСМП".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияСписанияКодовМаркировки(Контекст, ПараметрыСканирования)
	
	ВидПродукции = Неопределено;
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		ВидПродукции = Контекст.Объект.ВидПродукции;
	КонецЕсли;
	
	Если Не ВключитьПоддержкуОбувнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		ПараметрыСканирования.Организация = Контекст.Объект.Организация;
	Иначе
		ПараметрыСканирования.Организация = Контекст.Организация;
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Перемаркировка ИСМП".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияПеремаркировкаТоваров(Контекст, ПараметрыСканирования)
	
	ВидПродукции = Неопределено;
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		ВидПродукции = Контекст.Объект.ВидПродукции;
	КонецЕсли;
	
	Если Не ВключитьПоддержкуОбувнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "Товары";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "КодМаркировки, НовыйКодМаркировки";
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		ПараметрыСканирования.Организация = Контекст.Объект.Организация;
	Иначе
		ПараметрыСканирования.Организация = Контекст.Организация;
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПовторнойМаркировки"));
	ПараметрыСканирования.ЗапрашиватьСпособВводаВОборот = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
