//Функция получает таблицу точек алгоритма с количествами входящих и исходящих точек.
// 
// Параметры:
//  Алгоритм  - СправочникСсылка.бит_уп_Алгоритмы
// 
// Возвращаемое значение:
//   ТаблицаТочки   - ТаблицаЗначений
// 
Функция ПолучитьТочкиАлгоритма(Алгоритм, ПоказатьВсеТочки = Ложь) Экспорт
	
	СоответствиеТочек = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Алгоритм",Алгоритм);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_уп_ТочкиАлгоритмовВходящиеТочки.Ссылка КАК Ссылка,
	|	бит_уп_ТочкиАлгоритмовВходящиеТочки.Точка КАК СвязаннаяТочка,
	|	бит_уп_ТочкиАлгоритмовВходящиеТочки.Направление,
	|	ИСТИНА КАК ВходящаяТочка,
	|	бит_уп_ТочкиАлгоритмовВходящиеТочки.Точка.ВидТочки КАК ВидСвязаннойТочки
	|ПОМЕСТИТЬ ВТ01_ТочкиАлгоритма
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов.ВходящиеТочки КАК бит_уп_ТочкиАлгоритмовВходящиеТочки
	|ГДЕ
	|	бит_уп_ТочкиАлгоритмовВходящиеТочки.Ссылка.Владелец = &Алгоритм
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_уп_ТочкиАлгоритмовИсходящиеТочки.Ссылка,
	|	бит_уп_ТочкиАлгоритмовИсходящиеТочки.Точка,
	|	бит_уп_ТочкиАлгоритмовИсходящиеТочки.Направление,
	|	ЛОЖЬ,
	|	бит_уп_ТочкиАлгоритмовИсходящиеТочки.Точка.ВидТочки
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов.ИсходящиеТочки КАК бит_уп_ТочкиАлгоритмовИсходящиеТочки
	|ГДЕ
	|	бит_уп_ТочкиАлгоритмовИсходящиеТочки.Ссылка.Владелец = &Алгоритм
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(бит_уп_ТочкиАлгоритмов.Ссылка, ЗНАЧЕНИЕ(Справочник.бит_уп_ТочкиАлгоритмов.ПустаяСсылка)) КАК Точка,
	|	ЕСТЬNULL(бит_уп_ТочкиАлгоритмов.ВидТочки, ЗНАЧЕНИЕ(Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие)) КАК ВидТочки,
	|	ЕСТЬNULL(ВхТочки.Количество, 0) КАК КоличествоВходящих,
	|	ЕСТЬNULL(ИсхТочки.Количество, 0) КАК КоличествоИсходящих,
	|	ЕСТЬNULL(ТочкиАлгоритма.СвязаннаяТочка, ЗНАЧЕНИЕ(Справочник.бит_уп_ТочкиАлгоритмов.ПустаяСсылка)) КАК СвязаннаяТочка,
	|	ЕСТЬNULL(ТочкиАлгоритма.Направление, ЗНАЧЕНИЕ(Перечисление.бит_уп_Направление.ПустаяСсылка)) КАК Направление,
	|	ЕСТЬNULL(ТочкиАлгоритма.ВходящаяТочка, ЛОЖЬ) КАК ВходящаяТочка,
	|	ЕСТЬNULL(ТочкиАлгоритма.ВидСвязаннойТочки, ЗНАЧЕНИЕ(Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие)) КАК ВидСвязаннойТочки
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-10 (#2971)
	|	,ЕСТЬNULL(бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Значение, ЛОЖЬ) КАК ТочкаЦикла
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-10 (#2971)
	//1С-ИжТиСи, Кондратьев, 16.03.2020, обновление (
	|	,бит_уп_ТочкиАлгоритмов.ИдентификаторТочки КАК ИдентификаторТочки,
	|	бит_уп_ТочкиАлгоритмов.КодТочки КАК КодТочки	
	//1С-ИжТиСи, Кондратьев, 16.03.2020, обновление )
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов КАК бит_уп_ТочкиАлгоритмов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бит_уп_ТочкиАлгоритмовВходящиеТочки.Ссылка КАК Точка,
	|			СУММА(1) КАК Количество
	|		ИЗ
	|			ВТ01_ТочкиАлгоритма КАК бит_уп_ТочкиАлгоритмовВходящиеТочки
	|		ГДЕ
	|			бит_уп_ТочкиАлгоритмовВходящиеТочки.Ссылка.Владелец = &Алгоритм
	|			И бит_уп_ТочкиАлгоритмовВходящиеТочки.ВходящаяТочка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			бит_уп_ТочкиАлгоритмовВходящиеТочки.Ссылка) КАК ВхТочки
	|		ПО бит_уп_ТочкиАлгоритмов.Ссылка = ВхТочки.Точка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бит_уп_ТочкиАлгоритмовИсходящиеТочки.Ссылка КАК Точка,
	|			СУММА(1) КАК Количество
	|		ИЗ
	|			ВТ01_ТочкиАлгоритма КАК бит_уп_ТочкиАлгоритмовИсходящиеТочки
	|		ГДЕ
	|			бит_уп_ТочкиАлгоритмовИсходящиеТочки.Ссылка.Владелец = &Алгоритм
	|			И НЕ бит_уп_ТочкиАлгоритмовИсходящиеТочки.ВходящаяТочка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			бит_уп_ТочкиАлгоритмовИсходящиеТочки.Ссылка) КАК ИсхТочки
	|		ПО бит_уп_ТочкиАлгоритмов.Ссылка = ИсхТочки.Точка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ01_ТочкиАлгоритма КАК ТочкиАлгоритма
	|		ПО бит_уп_ТочкиАлгоритмов.Ссылка = ТочкиАлгоритма.Ссылка
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-10 (#2971)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_уп_ТочкиАлгоритмов.ПараметрыПроцесса КАК бит_уп_ТочкиАлгоритмовПараметрыПроцесса
	|		ПО бит_уп_ТочкиАлгоритмов.Ссылка = бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Ссылка
	|			И (бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Имя = ""Точка цикла"")
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-10 (#2971)
	|ГДЕ
	|	(бит_уп_ТочкиАлгоритмов.Владелец = &Алгоритм
	|			ИЛИ бит_уп_ТочкиАлгоритмов.Ссылка ЕСТЬ NULL)
	|	И &ПоказатьВсеТочки
	|ИТОГИ
	|	МАКСИМУМ(ВидТочки),
	|	МАКСИМУМ(КоличествоВходящих),
	|	МАКСИМУМ(КоличествоИсходящих)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-10 (#2971)
	|	,МАКСИМУМ(ТочкаЦикла)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-10 (#2971)
	|ПО
	|	Точка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ01_ТочкиАлгоритма";
	
	ЧтоЗаменить = "&ПоказатьВсеТочки";
	Если ПоказатьВсеТочки Тогда
		НаЧтоЗаменить = "ИСТИНА";
	Иначе	
		НаЧтоЗаменить = "НЕ бит_уп_ТочкиАлгоритмов.ПометкаУдаления";
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ЧтоЗаменить, НаЧтоЗаменить);
	
	Результат = Запрос.Выполнить();
		
	ТаблицаТочки = Новый ТаблицаЗначений;
	ТаблицаТочки.Колонки.Добавить("Точка"				,	Новый ОписаниеТипов("СправочникСсылка.бит_уп_ТочкиАлгоритмов")); 
	ТаблицаТочки.Колонки.Добавить("ВидТочки"			,	Новый ОписаниеТипов("ПеречислениеСсылка.бит_уп_ВидыТочекАлгоритмов"));
	ТаблицаТочки.Колонки.Добавить("КоличествоВходящих"	,	Новый ОписаниеТипов("Число"));
	ТаблицаТочки.Колонки.Добавить("КоличествоИсходящих"	,	Новый ОписаниеТипов("Число"));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-10 (#2971)
	ТаблицаТочки.Колонки.Добавить("ТочкаЦикла"			,	Новый ОписаниеТипов("Булево"));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-10 (#2971)

	ВыборкаТочки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТочки.Следующий() Цикл 
		пСтрокаТаблицыТочек = ТаблицаТочки.Добавить();
		ЗаполнитьЗначенияСвойств(пСтрокаТаблицыТочек, ВыборкаТочки);
		
		ВыборкаДетали = ВыборкаТочки.Выбрать();
		
		СтруктураТочки = Новый Структура;
		
		пМассивВхТочек  = Новый Массив;
		пМассивИсхТочек = Новый Массив;
		
		Пока ВыборкаДетали.Следующий() Цикл 
			
			СтруктураВхИсхТочки = Новый Структура;
			СтруктураВхИсхТочки.Вставить("Точка"		, ВыборкаДетали.СвязаннаяТочка);
			СтруктураВхИсхТочки.Вставить("Направление"	, ВыборкаДетали.Направление);
			СтруктураВхИсхТочки.Вставить("ВидТочки"		, ВыборкаДетали.ВидСвязаннойТочки);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-10 (#2971)
			СтруктураВхИсхТочки.Вставить("ТочкаЦикла"	, ВыборкаДетали.ТочкаЦикла);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-10 (#2971)
			
			Если ВыборкаДетали.ВходящаяТочка Тогда
				пМассивВхТочек.Добавить(СтруктураВхИсхТочки);
			Иначе 
				пМассивИсхТочек.Добавить(СтруктураВхИсхТочки);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТочки.Вставить("ВходящиеТочки"		,	пМассивВхТочек);
		СтруктураТочки.Вставить("ИсходящиеТочки"	,	пМассивИсхТочек);
		СтруктураТочки.Вставить("ВидТочки"			,	ВыборкаТочки.ВидТочки);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-10 (#2971)
		СтруктураТочки.Вставить("ТочкаЦикла"		, 	ВыборкаТочки.ТочкаЦикла);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-10 (#2971)
		
		СоответствиеТочек.Вставить(ВыборкаТочки.Точка, СтруктураТочки);
		
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаТочки,СоответствиеТочек", ТаблицаТочки,СоответствиеТочек);	
	
КонецФункции // ПолучитьТочкиАлгоритма()
