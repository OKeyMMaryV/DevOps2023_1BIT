
#Область СлужебныйПрограммныйИнтерфейс

#Область ЗагрузкаВыгрузкаExcel

#Область ОбщиеПроцедурыФункции

// Получает метаданне объекта.
//
// Параметры:
//  СтрОбъекта - Структура (ВидОбъекта, ИмяОбъекта, ИмяТч).
//                
// Возвращаемое значение:
//   Метаданные объекта.
//
Функция ПолучитьМетаданныеОбъектаПоСтруктуре(СтрОбъекта) Экспорт

	Возврат Метаданные[СтрОбъекта.ВидОбъекта][СтрОбъекта.ИмяОбъекта];
		                           
КонецФункции // ПолучитьМетаданныеОбъектаПоСтруктуре()

// Получает метаданне табличной части.
//
// Параметры:
//  СтрОбъекта - Структура (ВидОбъекта, ИмяОбъекта, ИмяТч).
//                
// Возвращаемое значение:
//   Метаданные табличной части.
//
Функция ПолучитьМетаданныеТчПоСтруктуре(СтрОбъекта) Экспорт

	Возврат Метаданные[СтрОбъекта.ВидОбъекта][СтрОбъекта.ИмяОбъекта].ТабличныеЧасти[СтрОбъекта.ИмяТч];
		                           
КонецФункции // ПолучитьМетаданныеТчПоСтруктуре()

// Функция формирует структуру поля: 
//  Имя                      - Строка.
//  Синоним                  - Строка.
//  ТипРеквизита             - ОписаниеТипов.
//  СтрТип                   - Строка - Строковое представление описания типов.
//  НастройкиОбмена          - Структура (По умолчанию = Неопределено).
//  СоставнойТип             - Булево (По умолчанию = Ложь).
//  ПримитивныйТип           - Булево (По умолчанию = Истина).
//  Длина                    - Число (По умолчанию = 0).
//  Точность                 - Число (По умолчанию = 0). 							
//  ЭтоСубконто              - Булево (По умолчанию = Ложь)
//  ПолеСчет                 - Строка (По умолчанию = Неопределено).
//  ИдСубконто               - Строка (По умолчанию = Неопределено).
//  ЭтоДополнение            - Булево (По умолчанию = Ложь).
//  ИмяТч                    - Строка (По умолчанию = Неопределено).
//  ИспользованиеДляГруппы   - Булево (По умолчанию = Истина).
//  ИспользованиеДляЭлемента - Булево (По умолчанию = Истина).
//  Обязательный             - Булево (По умолчанию = Ложь).
//  ВыгружатьСписки			 - Булево (По умолчанию = Истина).
// 
// Возвращаемое значение:
//   Структура.
//
Функция СоздатьСтруктуруПоля() Экспорт
							
	СтруктураПоля = Новый Структура();
	СтруктураПоля.Вставить("Имя"    				 , "");
	СтруктураПоля.Вставить("Синоним"				 , "");
	СтруктураПоля.Вставить("ТипРеквизита"			 , Неопределено);
	СтруктураПоля.Вставить("СтрТип"					 , "");
	СтруктураПоля.Вставить("НастройкиОбмена"		 , Неопределено);
	СтруктураПоля.Вставить("СоставнойТип"			 , Ложь);
	СтруктураПоля.Вставить("ПримитивныйТип"			 , Истина);
	СтруктураПоля.Вставить("Длина"					 , 0);
	СтруктураПоля.Вставить("Точность"				 , 0);
	СтруктураПоля.Вставить("ЭтоСубконто"			 , Ложь);
	СтруктураПоля.Вставить("ПолеСчет"				 , Неопределено);
	СтруктураПоля.Вставить("ИдСубконто"				 , Неопределено);
	СтруктураПоля.Вставить("ЭтоДополнение"			 , Ложь);
	СтруктураПоля.Вставить("ИмяТч"					 , Неопределено);
	СтруктураПоля.Вставить("ИспользованиеДляГруппы"	 , Истина);
	СтруктураПоля.Вставить("ИспользованиеДляЭлемента", Истина);
	СтруктураПоля.Вставить("Обязательный"			 , Ложь);
	СтруктураПоля.Вставить("ВыгружатьСписки"		 , Истина);
		
	Возврат СтруктураПоля;
									
КонецФункции // СоздатьСтруктуруПоля()

// Функция формирует структуру НастройкиОбмена 
// необходимую для работы старого механизма взаимодействия с Excel. 
//
Функция СформироватьНастройкиОбмена() Экспорт

	// Используется в старом механизме работы с Excel
	Возврат Новый Структура("Выгружать, ВыражениеПредставления", Истина, "");

КонецФункции // СформироватьНастройкиОбмена()

// Функция определяет имя дополнительного поля для сохранения информации об уровне строки в дереве.
// 
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьИмяДопПоля_Уровень() Экспорт

	Возврат "Доп_Уровень";	

КонецФункции // ПолучитьИмяДопПоля_Уровень()

// Процедура добавляет колонку, хранящую информацию об уровне в дереве.
// 
// Параметры:
//  СтруктураПолей - Структура
//
Процедура ДобавитьДопКолонку_Уровень(СтруктураПолей) Экспорт

	НастройкиОбмена = СформироватьНастройкиОбмена();
	
	ОписаниеЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0));
	
	СтруктураПоля = СоздатьСтруктуруПоля();
	СтруктураПоля.Вставить("Имя"    		, "Уровень");
	СтруктураПоля.Вставить("Синоним"		, "Уровень в дереве");
	СтруктураПоля.Вставить("ТипРеквизита"	, ОписаниеЧисло);
	СтруктураПоля.Вставить("СтрТип"			, "Число(2,0)");
	СтруктураПоля.Вставить("НастройкиОбмена", НастройкиОбмена);
	СтруктураПоля.Вставить("Длина"			, 2);
	СтруктураПоля.Вставить("ЭтоДополнение"	, Истина);
							
	СтруктураПолей.Вставить(бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьИмяДопПоля_Уровень(), СтруктураПоля);

КонецПроцедуры // ДобавитьДопКолонку_Уровень()

// Функция заполняет структуру полей для загрузки/выгрузки.
//
// Параметры:
//  СтрОбъекта	            - Структура.
//  КоллекцияРеквизитов     - Метаданные, ТаблицаЗначений.
//  ИмяТч                   - Строка.
//  МассивИсключений        - Массив.
//  СтруктураСчетовСубконто - Структура.
//  НастройкиОбмена.
//  ЭтоСтандартный          - Булево (По умолчанию = Ложь)
//  ЭтоТч                   - Булево (По умолчанию = Ложь)
//
// Возвращаемое значение:
//  Структура.
//
Процедура ДополнитьСтруктуруПолейПоКоллекцииРеквизитов(СтруктураПолей, КоллекцияРеквизитов, ИмяТч, 
						МассивИсключений, СтруктураСчетовСубконто, НастройкиОбмена, ЭтоСтандартный = Ложь, ЭтоТч = Ложь) Экспорт 

	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
    
    ВидыИспользования = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита;
    
    КоллекцияЭтоТз = ТипЗнч(КоллекцияРеквизитов) = Тип("ТаблицаЗначений");
    Если КоллекцияЭтоТз Тогда
        ИмяР = "ИмяРеквизита";
        ТипР = "ОписаниеТипов";
        СинР = "ПредставлениеРеквизита";
		ЕстьВыбрать 		= КоллекцияРеквизитов.Колонки.Найти("Выбрать") <> Неопределено;
		ЕстьВыгрузитьСписки = КоллекцияРеквизитов.Колонки.Найти("ВыгружатьСписки") <> Неопределено;		
    Иначе	
        ИмяР = "Имя";
        ТипР = "Тип";
        СинР = "Синоним";
		ЕстьВыбрать			= Ложь;
		ЕстьВыгрузитьСписки = Ложь;
	КонецЕсли;
		 
    Для каждого Рек Из КоллекцияРеквизитов Цикл
		
		Если ЕстьВыбрать И НЕ Рек.Выбрать Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРек = Рек[ИмяР];
		
		Если МассивИсключений.Найти(ИмяРек) = Неопределено Тогда
			
			ТипРеквизита   = Рек[ТипР];
			СоставнойТип   = ТипРеквизита.Типы().Количество() > 1;
			ПервыйТип      = ТипРеквизита.Типы()[0];
			ПримитивныйТип = ?(СоставнойТип, Ложь, бит_ОбщегоНазначения.ЭтоПримитивныйТип(ПервыйТип));
            
            РекСиноним = ?(ЗначениеЗаполнено(Рек[СинР]), Рек[СинР], Рек[ИмяР]);
            
            ПроверитьДанныеПоляСАналитикой(ИмяРек, РекСиноним, ТипРеквизита, НастройкиИзмерений);
            			                    		 			
			ЭтоСубконто = СтруктураСчетовСубконто.Свойство(ИмяРек);
            
            Если КоллекцияЭтоТз Тогда
                ИспользованиеДляЭлемента = Рек.ИспользованиеДляЭлемента;
                ИспользованиеДляГруппы   = Рек.ИспользованиеДляГруппы;
            ИначеЕсли ЭтоСтандартный ИЛИ ЭтоТч Тогда
                ИспользованиеДляЭлемента = Истина;
                ИспользованиеДляГруппы   = Истина;
            Иначе
                ИспользованиеДляЭлемента = Рек.Использование <> ВидыИспользования.ДляГруппы;
                ИспользованиеДляГруппы   = Рек.Использование <> ВидыИспользования.ДляЭлемента;
            КонецЕсли;
			
			СтрТип 		    = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ТипРеквизита, ".");
			РекОбязательный = Рек.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку;
			ВыгружатьСписки = ?(ЕстьВыгрузитьСписки, Рек.ВыгружатьСписки, Истина);
			
			СтруктураПоля = СоздатьСтруктуруПоля();
			СтруктураПоля.Вставить("Имя"    				 , ИмяРек);
			СтруктураПоля.Вставить("Синоним"				 , РекСиноним);
			СтруктураПоля.Вставить("ТипРеквизита"			 , ТипРеквизита);
			СтруктураПоля.Вставить("СтрТип"					 , СтрТип);
			СтруктураПоля.Вставить("НастройкиОбмена"		 , НастройкиОбмена);
			СтруктураПоля.Вставить("СоставнойТип"			 , СоставнойТип);
			СтруктураПоля.Вставить("ПримитивныйТип"			 , ПримитивныйТип);			
			СтруктураПоля.Вставить("ЭтоСубконто"			 , ЭтоСубконто);			
			СтруктураПоля.Вставить("ИмяТч"					 , ИмяТч);
			СтруктураПоля.Вставить("ИспользованиеДляГруппы"	 , ИспользованиеДляГруппы);
			СтруктураПоля.Вставить("ИспользованиеДляЭлемента", ИспользованиеДляЭлемента);
			СтруктураПоля.Вставить("Обязательный"			 , РекОбязательный);
			СтруктураПоля.Вставить("ВыгружатьСписки"		 , ВыгружатьСписки);
							
			Если НЕ СоставнойТип И ПервыйТип = Тип("Число") Тогда
				СтруктураПоля.Вставить("Длина"   , ТипРеквизита.КвалификаторыЧисла.Разрядность);
				СтруктураПоля.Вставить("Точность", ТипРеквизита.КвалификаторыЧисла.РазрядностьДробнойЧасти);			
			КонецЕсли;
			
			Если ЭтоСубконто Тогда
				// Для субконто сохраняем имя поля счета, связанного с субконто
				СтруктураПоля.Вставить("ПолеСчет"  , СтруктураСчетовСубконто[ИмяРек].ПолеСчет);
				СтруктураПоля.Вставить("ИдСубконто", СтруктураСчетовСубконто[ИмяРек].Ид);
			КонецЕсли;
									
			СтруктураПолей.Вставить(ИмяРек, СтруктураПоля);	
			
		КонецЕсли;  			
		
	КонецЦикла; 	
	
КонецПроцедуры // ДополнитьСтруктуруПолейПоКоллекцииРеквизитов()

// Функция определяет структуру полей для загрузки/выгрузки.
//
// Параметры:
//  СтрОбъекта	            - Структура.
//  МассивИсключений        - Массив (По умолчанию = Неопределено).
//  СтруктураСчетовСубконто - Структура (По умолчанию = Неопределено).
//  ТаблицаРеквизитов       - ТаблицаЗначений (По умолчанию = Неопределено).
//
// Возвращаемое значение:
//  Структура.
//
Функция ОпределитьСтруктуруПолей(СтрОбъекта, МассивИсключений = Неопределено, СтруктураСчетовСубконто = Неопределено, ТаблицаРеквизитов = Неопределено) Экспорт 
    
    НастройкиОбмена = СформироватьНастройкиОбмена();
	
	СтруктураПолей = Новый Структура;
    
    Если МассивИсключений = Неопределено Тогда
        МассивИсключений = Новый Массив;   
    КонецЕсли;
    Если СтруктураСчетовСубконто = Неопределено Тогда
        СтруктураСчетовСубконто = Новый Структура;   
    КонецЕсли;    
    
    // Стандартный массив исключений.
    МассивИсключений.Добавить("Ссылка");
    МассивИсключений.Добавить("ИмяПредопределенныхДанных");
    МассивИсключений.Добавить("Предопределенный");        
    МассивИсключений.Добавить("ПометкаУдаления");
    
    Если ТаблицаРеквизитов <> Неопределено Тогда
        
        ИмяТабличнойЧасти = ?(СтрОбъекта = Неопределено, "",  СтрОбъекта.ИмяТабличнойЧасти);
        ДополнитьСтруктуруПолейПоКоллекцииРеквизитов(СтруктураПолей, ТаблицаРеквизитов, ИмяТабличнойЧасти, 
					МассивИсключений, СтруктураСчетовСубконто, НастройкиОбмена);
            
    Иначе
		
		ИмяТабличнойЧасти = СтрОбъекта.ИмяТч;
        Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
            
            МетаТч = ПолучитьМетаданныеТчПоСтруктуре(СтрОбъекта);
            ДополнитьСтруктуруПолейПоКоллекцииРеквизитов(СтруктураПолей, МетаТч.Реквизиты, ИмяТабличнойЧасти, 
				    МассивИсключений, СтруктураСчетовСубконто, НастройкиОбмена, , Истина);
        
        Иначе
                      
            ЕстьТабЧасти = СтрОбъекта.ВидОбъекта = "Справочники" ИЛИ СтрОбъекта.ВидОбъекта = "Документы";
        
            МетаОб = ПолучитьМетаданныеОбъектаПоСтруктуре(СтрОбъекта);
            // Стандартные реквизиты объекта.
            ДополнитьСтруктуруПолейПоКоллекцииРеквизитов(СтруктураПолей, МетаОб.СтандартныеРеквизиты, ИмяТабличнойЧасти,
					МассивИсключений, СтруктураСчетовСубконто, НастройкиОбмена, Истина);
            // Обычные реквизиты объекта.
            ДополнитьСтруктуруПолейПоКоллекцииРеквизитов(СтруктураПолей, МетаОб.Реквизиты, ИмяТабличнойЧасти,
					МассивИсключений, СтруктураСчетовСубконто, НастройкиОбмена);
        
        КонецЕсли;
        
    КонецЕсли;
		
	Возврат СтруктураПолей;  	
	
КонецФункции // ОпределитьСтруктуруПолей()

#КонецОбласти

#Область ЭлементыФормы

// Процедура создает кнопки работы с Excel в справочнике Проекты в ЕРП.
//
// Параметры:
//  ЭтотОбъект.
//
Процедура СоздатьКнопкиРаботыСExcel(ЭтотОбъект) Экспорт

    РолиНаИзменениеДоступны = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("бит_ФинансистПолныеПрава");
    Если НЕ РолиНаИзменениеДоступны Тогда
        Возврат;   
    КонецЕсли;
    
   	КомандаЗагрузитьВExcel = ЭтотОбъект.Команды.Добавить("ЗагрузитьЧерезТабДок");
    КомандаЗагрузитьВExcel.Заголовок = "Загрузить через табличный документ";
    КомандаЗагрузитьВExcel.Картинка  = БиблиотекаКартинок.бит_од_Excel;
    КомандаЗагрузитьВExcel.Подсказка = "Загрузить через табличный документ.";
    КомандаЗагрузитьВExcel.Действие  = "Подключаемый_ЗагрузитьЧерезТабДок";
    
    ПодменюЗаполнение = ЭтотОбъект.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ПодменюДополнительныхОбработокЗаполнения");
    Если ПодменюЗаполнение = Неопределено Тогда
        ПодменюЗаполнение = ЭтотОбъект.Элементы.Добавить("ПодменюДополнительныхОбработокЗаполнения", Тип("ГруппаФормы"), ЭтотОбъект.КоманднаяПанель);
        ПодменюЗаполнение.Вид       = ВидГруппыФормы.Подменю;
        ПодменюЗаполнение.Заголовок = "Заполнить";
        ПодменюЗаполнение.Картинка  = БиблиотекаКартинок.бит_ЗаполнитьФорму;
    КонецЕсли;
    
    Если ЭтотОбъект.Элементы.Найти("ФормаОбработкабит_ИмпортОбъектовИзExcelЗагрузитьИзExcelПоНастройке") <> Неопределено Тогда
        ЭтотОбъект.Элементы.Переместить(ЭтотОбъект.Элементы.ФормаОбработкабит_ИмпортОбъектовИзExcelЗагрузитьИзExcelПоНастройке, ПодменюЗаполнение);
    КонецЕсли;
    
    СписокГруппаExcel = ЭтотОбъект.Элементы.Добавить("СписокГруппаExcel", Тип("ГруппаФормы"), ПодменюЗаполнение);
    СписокГруппаExcel.Вид 		  = ВидГруппыФормы.ГруппаКнопок;
    СписокГруппаExcel.Отображение = ОтображениеГруппыКнопок.Авто;
	    
   	КомандаФормыЗагрузитьВExcel = ЭтотОбъект.Элементы.Добавить("ФормаЗагрузитьЧерезТабДок", Тип("КнопкаФормы"), СписокГруппаExcel);
    КомандаФормыЗагрузитьВExcel.ИмяКоманды = "ЗагрузитьЧерезТабДок";
    
КонецПроцедуры // СоздатьКнопкиРаботыСExcel()

#КонецОбласти

#Область ЗагрузкаИзExcel

// Функция получает значение для ИБ из данных поля Excel.
//
// Параметры:
//  СсылкаЗначенияExcel        - Строка.
//  ИмяСпискаИсточникаExcel    - Строка.
//  ПредставлениеЗначенияExcel - Строка.
//
Функция ПолучитьЗначениеПоСсылкеExcel(СсылкаЗначенияExcel, ИмяСпискаИсточникаExcel, ПредставлениеЗначенияExcel) Экспорт

	ТекЗначение = Неопределено;
	
	Если ИмяСпискаИсточникаExcel = "Булево" Тогда
		
		Если СсылкаЗначенияExcel = "Истина" Тогда
			ТекЗначение = Истина;	
		ИначеЕсли СсылкаЗначенияExcel = "Ложь" Тогда
			ТекЗначение = Ложь;
		КонецЕсли;	
	
	ИначеЕсли Лев(ИмяСпискаИсточникаExcel, 16) = "СправочникСсылка" Тогда
		
		ИмяОбъекта  = СтрЗаменить(ИмяСпискаИсточникаExcel, "СправочникСсылка.", "");	
		СтрокаИнд 	= Сред(СсылкаЗначенияExcel, Найти(СсылкаЗначенияExcel, "/") + 1);
		Попытка
            ТекЗначение = Справочники[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИнд));
		Исключение 
            ТекЗначение = ПолучитьЗначениеСправочникаПоНаименованию(ИмяСпискаИсточникаExcel, ПредставлениеЗначенияExcel);
		КонецПопытки;		
		
	ИначеЕсли Лев(ИмяСпискаИсточникаExcel, 18) = "ПеречислениеСсылка" Тогда
		
		ИмяОбъекта  = СтрЗаменить(ИмяСпискаИсточникаExcel, "ПеречислениеСсылка.", "");	
		СтрокаИнд 	= СтрЗаменить(СсылкаЗначенияExcel, "Перечисление." + ИмяОбъекта + ".", "");
		ТекЗначение = Перечисления[ИмяОбъекта][СтрокаИнд];
		
	ИначеЕсли Лев(ИмяСпискаИсточникаExcel, 16) = "ПланСчетовСсылка" Тогда
		
		ИмяОбъекта  = СтрЗаменить(ИмяСпискаИсточникаExcel, "ПланСчетовСсылка.", "");	
		СтрокаИнд 	= Сред(СсылкаЗначенияExcel, Найти(СсылкаЗначенияExcel, "/") + 1);
		ТекЗначение = ПланыСчетов[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИнд));
		
	ИначеЕсли Лев(ИмяСпискаИсточникаExcel, 22) = "ПланВидовХарактеристик" Тогда
		
		ИмяОбъекта  = СтрЗаменить(ИмяСпискаИсточникаExcel, "ПланВидовХарактеристик.", "");	
		СтрокаИнд 	= Сред(СсылкаЗначенияExcel, Найти(СсылкаЗначенияExcel, "/") + 1);
		ТекЗначение = ПланыВидовХарактеристик[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИнд));
		
	КонецЕсли;
	
	Возврат ТекЗначение;

КонецФункции // ПолучитьЗначениеПоСсылкеExcel()

// Процедура получает значение для поля ИБ из данных поля Excel.
//
// Параметры:
//  СтрExcel.
//  КлЗнПоля - Структура.
//  МетаТчРек - Метаданные табличной части.
//  СтруктураДанных - Структура.
//  СпискиИсточники.
//
// Возвращаемое значение:
//  Любое значение.
//
Функция ПолучитьЗначениеСубконтоДляИБИзДанныхПоляExcel(СтрExcel, ИмяПоля, СтруктураПоля, СтруктураДанных, СчетДляСубконто) Экспорт

	ЗначениеДляИБ = Неопределено;
			
	ИмяПоляТч = ВРег(ИмяПоля);
	
	Ид = СтруктураПоля.ИдСубконто;
	
	Если СтрExcel.Свойство(ИмяПоляТч) Тогда
		 		
		Если ЗначениеЗаполнено(СчетДляСубконто) Тогда
            
            СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДляСубконто);
            Если СвСч.КоличествоСубконто > Ид Тогда // Ид(от 0) не выходит за количство видов субконто(от 1)
				
				// Текущий тип значения для субконто по счету.
                ТипРеквизита = СвСч["ВидСубконто" + Строка(Ид+1) + "ТипЗначения"];
				
				// Значение из Exel
				ПредставлениеЗначенияExcel = СокрЛП(СтрExcel[ИмяПоляТч]);
                
                Для каждого ТекТип Из ТипРеквизита.Типы() Цикл
                    
                    МетаОбъекта  = Метаданные.НайтиПоТипу(ТекТип);
    				ИмяКоллекции = бит_ОбщегоНазначения.ОпределитьИмяКоллекции(МетаОбъекта);
    				
    				Если ИмяКоллекции = "Справочники" Тогда
    				
    					ТекЗначение = Справочники[МетаОбъекта.Имя].НайтиПоНаименованию(ПредставлениеЗначенияExcel);
    					Если ЗначениеЗаполнено(ТекЗначение) Тогда
    					
    						ЗначениеДляИБ = ТекЗначение;
                            Прервать;
    					
    					КонецЕсли;
                        
                    //ИначеЕсли ИмяКоллекции = "Документы" Тогда                         
                            
    				КонецЕсли;                	
                
                КонецЦикла;				
				
			КонецЕсли;
		    
		КонецЕсли;
						
	КонецЕсли;
	
	Возврат ЗначениеДляИБ;
	
КонецФункции // ПолучитьЗначениеСубконтоДляИБИзДанныхПоляExcel()

// Процедура получает значение для поля ИБ из данных поля Excel.
//
// Параметры:
//  СтрExcel
//  КлЗнПоля - Структура
//  СтруктураДанных - Структура
//  СпискиИсточники
//
// Возвращаемое значение:
//  Любое значение
//
Функция ПолучитьЗначениеДляИБИзДанныхПоляExcel(СтрExcel, ИмяПоля, СтруктураПоля, СтруктураДанных, СпискиИсточники) Экспорт

	ЗначениеДляИБ = Неопределено;
			
	ИмяПоляТч = ВРег(ИмяПоля); 
	
	Если СтрExcel.Свойство(ИмяПоляТч) Тогда
		
		ПредставлениеЗначенияExcel = СокрЛП(СтрExcel[ИмяПоляТч]);
        Если ЗначениеЗаполнено(ПредставлениеЗначенияExcel) Тогда
            
    		ТипРеквизита = СтруктураПоля.ТипРеквизита;//МетаТчРек[ИмяПоля].Тип;
    		ТипОдин = ТипРеквизита.Типы().Количество() = 1;
    			     
    		Если ТипОдин И ТипРеквизита.Типы()[0] = Тип("Дата") Тогда
    			
    			Попытка
    				// Значение типа "Дата".
    				ЗначениеДляИБ = Дата(ПредставлениеЗначенияExcel);
    			Исключение
    			КонецПопытки;  					
    			
    		ИначеЕсли ТипОдин И ТипРеквизита.Типы()[0] = Тип("Число") Тогда
    			
    			Если НЕ ПустаяСтрока(ПредставлениеЗначенияExcel) Тогда
    				// Значение типа "Число".
    				ЗначениеДляИБ = Число(ПредставлениеЗначенияExcel);
    			КонецЕсли;
    			
    		ИначеЕсли ТипОдин И ТипРеквизита.Типы()[0] = Тип("Строка") Тогда
    			
    			Если НЕ ПустаяСтрока(ПредставлениеЗначенияExcel) Тогда
    				// Значение типа "Строка".
    				ЗначениеДляИБ = ПредставлениеЗначенияExcel;
    			КонецЕсли;
    			
    		ИначеЕсли НЕ ТипОдин И НЕ ПустаяСтрока(ПредставлениеЗначенияExcel) Тогда
    			
    			// Значение составного типа.
    			
    			МассивПримитивныхТипов = Новый Массив;
    			ТипНайден 			   = Ложь;
    			ЕстьТипСтрока 		   = Истина;
    			
    			// Попытка привести значение к сложным типам
    			Для каждого ТекТип Из ТипРеквизита.Типы() Цикл
    				Если бит_ОбщегоНазначения.ЭтоПримитивныйТип(ТекТип) Тогда
    					Если ТекТип <> Тип("Строка") Тогда
    						МассивПримитивныхТипов.Добавить(ТекТип);
    					КонецЕсли;
    				Иначе	
    					ТекЗначениеДляИБ = ПривестиЗначениеПоТипуТипу(ТекТип, ПредставлениеЗначенияExcel);
    					Если ЗначениеЗаполнено(ТекЗначениеДляИБ) Тогда
    						ЗначениеДляИБ = ТекЗначениеДляИБ;
    						ТипНайден = Истина;
    						Прервать; 
    					КонецЕсли;
    				КонецЕсли; 		
    			КонецЦикла;
    			
    			// Попытка привести значение к примитивным типам
    			Если НЕ ТипНайден Тогда
    				ЗнчВерхРег = ВРег(ПредставлениеЗначенияExcel);
    				Для каждого ТекТип Из МассивПримитивныхТипов Цикл
    					Если ТекТип = Тип("Булево") Тогда
    						ЗнчВерхРег = ВРег(ПредставлениеЗначенияExcel);
    						Если ЗнчВерхРег = "ЛОЖЬ" ИЛИ ЗнчВерхРег = "НЕТ" Тогда
    							ЗначениеДляИБ = Ложь;
    						ИначеЕсли ЗнчВерхРег = "ИСТИНА" ИЛИ ЗнчВерхРег = "ДА" Тогда
    							ЗначениеДляИБ = Истина;
    						КонецЕсли;	
    					Иначе
    						ТекЗначениеДляИБ = ПривестиЗначениеПоТипуТипу(ТекТип, ПредставлениеЗначенияExcel, Истина);
    						Если ЗначениеЗаполнено(ТекЗначениеДляИБ) Тогда
    							ЗначениеДляИБ = ТекЗначениеДляИБ;
    							ТипНайден = Истина;
    							Прервать; 
    						КонецЕсли;
    					КонецЕсли;
    			    КонецЦикла;
    			КонецЕсли;
    			
    			// Тип - строка
    			Если НЕ ТипНайден И ЕстьТипСтрока Тогда
    				ЗначениеДляИБ = ПредставлениеЗначенияExcel;
    			КонецЕсли;
    			
    		Иначе
    		
    			ИмяСпискаИсточникаExcel = СтруктураДанных.НастройкиКолонок[ИмяПоляТч].ИмяСписка;
    			СписокИсточникExcel 	= СпискиИсточники.Получить(ИмяСпискаИсточникаExcel);
    			Если СписокИсточникExcel <> Неопределено Тогда
    				
    				СтруктураЗначенияExcel = СписокИсточникExcel.Получить(ПредставлениеЗначенияExcel);
    				Если СтруктураЗначенияExcel <> Неопределено Тогда
    					
    					// Значение найдено (ссылочного типа или булево).
    					ЗначениеДляИБ = бит_ОбменДаннымиЭксельСервер.ПолучитьЗначениеПоСсылкеExcel(СтруктураЗначенияExcel.Ссылка
                                                                                                    , ИмяСпискаИсточникаExcel
                                                                                                    , ПредставлениеЗначенияExcel);					
    				      					
                    Иначе
                        
                        // Поиск элемента в базе, если в списках excel не найден элемент.
                        
                        Если Найти(ИмяСпискаИсточникаExcel, "СправочникСсылка.") <> 0 Тогда
                            // Для справочников - поиск по наименованию.
                            ЗначениеДляИБ = ПолучитьЗначениеСправочникаПоНаименованию(ИмяСпискаИсточникаExcel, ПредставлениеЗначенияExcel);                            
                        КонецЕсли;
                        
                    КонецЕсли;
    				
    			КонецЕсли; 				
    			
    		КонецЕсли;
		
	    КонецЕсли;
				
	КонецЕсли;
	
	Возврат ЗначениеДляИБ;
	
КонецФункции // ПолучитьЗначениеДляИБИзДанныхПоляExcel()

// Процедура загружает данные из Excel в табличную часть объекта.
//
// Параметры:
//  СтрОбъекта       - Структура.
//  МассивСтрокExcel - Массив.
//  СтруктураДанных  - Структура.
//  СпискиИсточники  - Соответствие.
//
Процедура ЗагрузитьДанныеСправочникаИзExcelСервер(СтрОбъекта, МассивСтрокExcel, СтруктураПолей, СтруктураДанных, СпискиИсточники) Экспорт
    
    ИмяОбъекта = СтрОбъекта.ИмяОбъекта;
    
    Для каждого СтрExcel Из МассивСтрокExcel Цикл
        
        // Создание нового элемента - помощника заполнения полей.
        Если СтруктураПолей.Свойство("ЭтоГруппа") И СтрExcel["ЭтоГруппа"] = "Да" Тогда
            НовОбъект = Справочники[ИмяОбъекта].СоздатьГруппу();
            ЗаполнитьСтрокуДаннымиИзExcel(НовОбъект, СтруктураПолей, СтрExcel, СтруктураДанных, СпискиИсточники, Истина);
        Иначе	
            НовОбъект = Справочники[ИмяОбъекта].СоздатьЭлемент();
            ЗаполнитьСтрокуДаннымиИзExcel(НовОбъект, СтруктураПолей, СтрExcel, СтруктураДанных, СпискиИсточники, Ложь);
        КонецЕсли;
                
        // Поля, по которым будет производится поиск объекта.
        МассивПолейПоиска = Новый Массив;
        МассивПолейПоиска.Добавить("Код");
        //МассивПолейПоиска.Добавить("Наименование");
        //МассивПолейПоиска.Добавить("ЭтоГруппа");
        
        // Структура поиска объекта в базе.
        НовОтбор = Новый Структура;
        Для каждого ПолеПоиска Из МассивПолейПоиска Цикл
            Если СтруктураПолей.Свойство(ПолеПоиска) Тогда
                НовОтбор.Вставить(ПолеПоиска, НовОбъект[ПолеПоиска]);        
            КонецЕсли;
        КонецЦикла;                   
        
        // Поиск объетка в базе, его изменение и запись.
        НайденОбъект = Ложь;
        ВыборкаОб = Справочники[ИмяОбъекта].Выбрать(, , НовОтбор);
        Пока ВыборкаОб.Следующий() Цикл
            ТекОбъект = ВыборкаОб.ПолучитьОбъект();
            ЕстьИзменения = Ложь;
            Для каждого СтрПоля Из СтруктураПолей Цикл
                ИмяПоля = СтрПоля.Ключ;
                Если ТекОбъект[ИмяПоля] <> НовОбъект[ИмяПоля] Тогда
                    ТекОбъект[ИмяПоля] = НовОбъект[ИмяПоля];            	
                    ЕстьИзменения = Истина;
                КонецЕсли;           
            КонецЦикла;
            Если ЕстьИзменения Тогда
                бит_ОбщегоНазначения.ЗаписатьСправочник(ТекОбъект, , "Ошибки");
            КонецЕсли;
            НайденОбъект = Истина;
            Прервать;
        КонецЦикла;
        
        Если НЕ НайденОбъект Тогда
            // Запись нового, если объект в базе по полям поиска не найден.
            бит_ОбщегоНазначения.ЗаписатьСправочник(НовОбъект, , "Ошибки");       
        КонецЕсли; 
                
    КонецЦикла;
		
КонецПроцедуры // ЗагрузитьДанныеСправочникаИзExcelСервер()

// Процедура загружает данные из Excel в табличную часть объекта.
//
// Параметры:
//  СтрОбъекта       - Структура.
//  АдресДанных      - Адрес во временном хранилище.
//  МассивСтрокExcel - Массив.
//  СтруктураДанных  - Структура.
//  СпискиИсточники  - Соответствие.
// 
Процедура ЗагрузитьДанныеТчИзExcelСервер(СтрОбъекта, АдресДанных, МассивСтрокExcel, СтруктураПолей, СтруктураДанных, СпискиИсточники) Экспорт

	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресДанных);
	
	Если ТипЗнч(ТаблицаДанных) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого СтрExcel Из МассивСтрокExcel Цикл
			НоваяСтрокаТч = ТаблицаДанных.Добавить();
			ЗаполнитьСтрокуДаннымиИзExcel(НоваяСтрокаТч, СтруктураПолей, СтрExcel, СтруктураДанных, СпискиИсточники);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ТаблицаДанных) = Тип("ДеревоЗначений") Тогда
		
		КореньДерева = ТаблицаДанных.Строки;
		СдвигУровня  = 0;
		СтарыйУровень = 1;
		СтрокаДз = ТаблицаДанных;
		ЭтоПерваяСтрока = Истина;
				
		СтруктураУровней = Новый Структура;
		СтруктураУровней.Вставить("Уровень1", КореньДерева);
		    	
		//ТаблицаТч.Колонки.Добавить("Доп_Уровень", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
		Для каждого СтрExcel Из МассивСтрокExcel Цикл
			
			УрЕх = ПолучитьЗначениеДляИБИзДанныхПоляExcel(СтрExcel, "Доп_Уровень", СтруктураПолей.Доп_Уровень, СтруктураДанных, СпискиИсточники);
			Попытка
			 	ПроверкаУровня = Число(УрЕх);		
			Исключение
				УрЕх = 1;
			КонецПопытки;
			
			Если УрЕх < 1 ИЛИ ЭтоПерваяСтрока Тогда
				ВеткаДерева = КореньДерева;
			ИначеЕсли УрЕх > СтарыйУровень Тогда
				ВеткаДерева = СтрокаДз.Строки;
				Для i = СтарыйУровень + 1 По УрЕх Цикл
					СтруктураУровней.Вставить("Уровень"+i, ВеткаДерева);
				КонецЦикла;
			ИначеЕсли УрЕх < СтарыйУровень Тогда
				СтруктураУровней.Свойство("Уровень"+УрЕх, ВеткаДерева);
			КонецЕсли;
			
			СтрокаДз = ВеткаДерева.Добавить();
			ЗаполнитьСтрокуДаннымиИзExcel(СтрокаДз, СтруктураПолей, СтрExcel, СтруктураДанных, СпискиИсточники);
			
			ЭтоПерваяСтрока = Ложь;
			СтарыйУровень = УрЕх;
			
		КонецЦикла;
					
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаДанных, АдресДанных);

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаВExcel

// Функция формирует данные необходимые для выгрузки проформы в Excel.
// 
// Параметры:
//  СтруктураПолей - Структура
// 
// Возвращаемое значение:
//  Структура
// 
Функция ПодготовитьДанныеДляВыгрузкиШаблона(СтруктураНастроекКолонок) Экспорт 

	// Подготовка списков для выгрузки
	СпискиВыгрузки    = Новый Соответствие;
	ВидыПредставлений = Новый Массив;
	
	СтруктураПолей = СтруктураНастроекКолонок.СтруктураПолей;
	Если СтруктураНастроекКолонок.Свойство("ТаблицаОтборов") Тогда
		ТаблицаОтборов = СтруктураНастроекКолонок.ТаблицаОтборов.Получить();
	Иначе	
		ТаблицаОтборов = Неопределено;
	КонецЕсли;
	
    // Список Булево
	СписокБулево = Новый СписокЗначений;
	СписокБулево.Добавить("Истина"  , "Да");
	СписокБулево.Добавить("Ложь"    , "Нет"); 	
	СпискиВыгрузки.Вставить("Булево", СписокБулево);
	    
    Для каждого КлЗнчПоля Из СтруктураПолей Цикл
		
		СтруктураПоля = КлЗнчПоля.Значение;
		Если НЕ СтруктураПоля.ВыгружатьСписки Тогда
			Продолжить;	
		КонецЕсли;
		Если (СтруктураПоля.СоставнойТип ИЛИ СтруктураПоля.ПримитивныйТип) Тогда
			Продолжить;	
		КонецЕсли;	
		
        СтрТип = СтруктураПоля.СтрТип;		
		
		СписокВыгрузки = ВыгружаемыеДанныеЗапросом(СтруктураПоля.Имя, СтрТип, ТаблицаОтборов, Истина);
						
		Если СписокВыгрузки.Количество() > 0 Тогда
			СпискиВыгрузки.Вставить(СтрТип, СписокВыгрузки);
		ИначеЕсли СтруктураПоля.ТипРеквизита = Новый ОписаниеТипов("ВидСчета") Тогда
			СписокДляВыбора = Новый СписокЗначений;	
			Для каждого ЭлементВид Из ВидСчета Цикл
				ЭлементСтрокой = Строка(ЭлементВид);
				СписокДляВыбора.Добавить(ЭлементСтрокой, ЭлементСтрокой);	
			КонецЦикла;
			СпискиВыгрузки.Вставить("Вид", СписокДляВыбора);	
		КонецЕсли; 
	
	КонецЦикла;
		
	ДанныеВыгрузки = Новый Структура;
	// Списки, которые будут устанавливаться в качестве списков выбора
	ДанныеВыгрузки.Вставить("СпискиВыгрузки", СпискиВыгрузки);
	// Испольуемые виды представлений
	ДанныеВыгрузки.Вставить("ВидыПредставлений", ВидыПредставлений);
	
	Возврат ДанныеВыгрузки;
	
КонецФункции // ПодготовитьДанныеДляВыгрузкиШаблона()

// Формирует массив данных для выгрузки в Excel.
//
// Возвращаемое значение:
//  Массив - массив структур строк.
//
Функция ПолучитьМассивДанныхЧерезЗапрос(СтруктураОбъекта, СтруктураПолей) Экспорт

    МассивДанных = Новый Массив;
    
    Если СтруктураОбъекта.ВидОбъекта = "Справочники" Тогда
    
        Запрос = Новый Запрос;
        Запрос.Текст = "
        |ВЫБРАТЬ 
        |    *
        |ИЗ
        |   Справочник.%ИмяСправочника%
        |АВТОУПОРЯДОЧИВАНИЕ
        |";
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", СтруктураОбъекта.ИмяОбъекта);
        Результат = Запрос.Выполнить();        
        Выборка = Результат.Выбрать();        
        Пока Выборка.Следующий() Цикл  
            
            СтруктураСтроки = Новый Структура;
            Для каждого СтрПоля Из СтруктураПолей Цикл
                ИмяПоля = СтрПоля.Ключ;
                СтруктураСтроки.Вставить(ИмяПоля, Выборка[ИмяПоля]);         
            КонецЦикла;
            
            МассивДанных.Добавить(СтруктураСтроки);        
            
        КонецЦикла;	
    
    КонецЕсли;
    
    Возврат МассивДанных;

КонецФункции // ПолучитьМассивДанныхЧерезЗапрос()

#КонецОбласти

#Область СпискиИсточники 

// Процедура добавляет отборы в запрос.
// 
// Параметры:
//  ИмяОбъекта     - Строка.
//  Запрос 		   - Запрос.
//  ТаблицаОтборов - ТаблицаЗначений.
//
Процедура ИзменитьЗапросПоОтборам(ИмяОбъекта, Запрос, ТаблицаОтборов) Экспорт

	МассивОтборов = ТаблицаОтборов.НайтиСтроки(Новый Структура("Имя, Использование", ИмяОбъекта, Истина));
		
	Если МассивОтборов.Количество() <> 0 Тогда
		
		Сч = 1;
		Если Найти(Запрос.Текст, "ГДЕ") = 0 Тогда
			Запрос.Текст = Запрос.Текст + "
			| ГДЕ ";	
		КонецЕсли;
		
		Для каждого ЭлМасс Из МассивОтборов Цикл
			
			Если ЭлМасс.ВидСравнения = ВидСравнения.Равно Тогда
				Запрос.Текст = Запрос.Текст + "
				|И ТекТаб.Ссылка = &Зн" + Сч;
			ИначеЕсли ЭлМасс.ВидСравнения = ВидСравнения.НеРавно Тогда
				Запрос.Текст = Запрос.Текст + "
				|И ТекТаб.Ссылка <> &Зн" + Сч;
			ИначеЕсли ЭлМасс.ВидСравнения = ВидСравнения.ВИерархии ИЛИ ЭлМасс.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
				Запрос.Текст = Запрос.Текст + "
				|И ТекТаб.Ссылка В ИЕРАРХИИ (&Зн" + Сч + ")";
			ИначеЕсли ЭлМасс.ВидСравнения = ВидСравнения.НеВИерархии ИЛИ ЭлМасс.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
				Запрос.Текст = Запрос.Текст + "
				|И ТекТаб.Ссылка НЕ В ИЕРАРХИИ (&Зн" + Сч + ")";
			ИначеЕсли ЭлМасс.ВидСравнения = ВидСравнения.ВСписке Тогда
				Запрос.Текст = Запрос.Текст + "
				|И ТекТаб.Ссылка В (&Зн" + Сч + ")";
			ИначеЕсли ЭлМасс.ВидСравнения = ВидСравнения.ВСписке Тогда
				Запрос.Текст = Запрос.Текст + "
				|И ТекТаб.Ссылка НЕ В (&Зн" + Сч + ")";
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Зн" + Сч, ЭлМасс.Значение);					
			
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ 
												 |И", "ГДЕ");
	КонецЕсли;

КонецПроцедуры

// Функция формирует текст запроса, для извлечения данных списков выгружаемых в Эксель.
// В Эксель списки используются в качестве списков выбора для полей соответсвующих типов.
// 
// Параметры:
//  ИмяРеквизита     	   - Строка.
//  СтрТип                 - Строка
//  ТаблицаОтборов 		   - ТаблицаЗначений (По умолчанию = Неопределено).
//  ВыражениеПредставления - Строка (По умолчанию = "").
// 
// Возвращаемое значение:
//  Запрос.
// 
Функция ЗапросДляВыгрузкиДанных(ИмяРеквизита, СтрТип, ТаблицаОтборов = Неопределено, ВыражениеПредставления = "") Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "";
	
	// Заготовки для формирования текста запроса.
	ШаблонЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |   ""%ИмяПолное%"" КАК ИмяПолное,
					|   ""%ИмяОбъекта%"" КАК ИмяОбъекта,
					|   %ВыражениеПредставления% КАК Представление,
	                |	ТекТаб.Ссылка КАК Ссылка
					|{ВЫБРАТЬ
	                | Представление.*,
	                | Ссылка.*}
	                |ИЗ
	                |	%ИмяТаблицы% КАК ТекТаб
					|";
					
	ШаблонОбъединить = "
	                   |ОБЪЕДИНИТЬ ВСЕ
	                   |";
					   
    ШаблонНеГруппа = "
                    |ГДЕ
	                |(НЕ ТекТаб.ЭтоГруппа)
					|";
					
	ШаблонГруппа = "
                    |ГДЕ
	                |(ТекТаб.ЭтоГруппа)
					|";				
					
	ШаблонИнстр = "
				   |{ГДЕ
	               | ТекТаб.Ссылка.*}
                   |{УПОРЯДОЧИТЬ ПО
	               | Ссылка.*}
				   |";
					   
	ШаблонАвтоУп	= "АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Типы = бит_ОбщегоНазначенияКлиентСервер.ПолучитьТипыИзСтроки(СтрТип);
	
	Описание = Новый ОписаниеТипов(Типы);
	
	Для каждого ТекТип Из Типы Цикл
		
		Если НЕ бит_ОбщегоНазначенияКлиентСервер.ЭтоПримитивныйТип(ТекТип) Тогда
			
			МетаОбъект = Метаданные.НайтиПоТипу(ТекТип);
			
			Если МетаОбъект <> Неопределено Тогда
				
				ИмяПолное = МетаОбъект.ПолноеИмя();
				СтрИмена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ИмяПолное);
				ИмяТаблицы = СтрИмена.ИмяКласса + "." + СтрИмена.ИмяОбъекта;					  
				
				ТекстТекТаблица = ШаблонЗапроса;
				ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица, "%ИмяПолное%" , ИмяПолное);
				ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица, "%ИмяОбъекта%", СтрИмена.ИмяОбъекта);					  
				ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица, "%ИмяТаблицы%", ИмяТаблицы);
				
				Если НЕ ПустаяСтрока(ВыражениеПредставления) Тогда
					
					ВыражениеПредставления = СтрЗаменить(ВыражениеПредставления, "Ссылка.", "ТекТаб.");
					ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица, "%ВыражениеПредставления%", ВыражениеПредставления);						  
					
				Иначе	
					
					ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица, "%ВыражениеПредставления%", "ПредставлениеСсылки(ТекТаб.Ссылка)");
					
				КонецЕсли; 
				
				Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
					
					ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица, "РАЗРЕШЕННЫЕ", "");
					
				КонецЕсли; 
				
				// Группы не выгружаем.
				Если бит_ОбщегоНазначения.ОбъектПринадлежитКоллекцииМетаданных("Справочники", СтрИмена.ИмяОбъекта) Тогда
					
					Если МетаОбъект.Иерархический 
						И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
						
						Если ИмяРеквизита = "Родитель" Тогда
							ТекстТекТаблица = ТекстТекТаблица + ШаблонГруппа;
						Иначе
							ТекстТекТаблица = ТекстТекТаблица + ШаблонНеГруппа;
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ШаблонОбъединить) + ТекстТекТаблица;
				
			КонецЕсли; 
			
		КонецЕсли; // Тип не примитивный
		
	КонецЦикла; // Типы
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		Запрос.Текст = ТекстЗапроса;
		
		Если ТаблицаОтборов <> Неопределено Тогда
			ИзменитьЗапросПоОтборам(ИмяРеквизита, Запрос, ТаблицаОтборов);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ШаблонИнстр + ШаблонАвтоУп;
		
	КонецЕсли; 
	
	Возврат Запрос;
	
КонецФункции // ЗапросДляВыгрузкиДанных()

// Функция извлекает из БД список для выгрузки в Эксель.
// В Эксель список будет установлен в качестве списка выбора для полей соответсвующих типов.
// 
// Параметры:
//  ИмяРеквизита					   - Строка.
//  СтрТип 	                           - Строка.
//  ТаблицаОтборов 					   - ТаблицаЗначений (По умолчанию = Неопределено).
//  ВыгружатьПредставлениеПеречисления - Булево (По умолчанию = Ложь).
// 
// Возвращаемое значение:
//  СписокЗначений - список выгрузки.
// 
Функция ВыгружаемыеДанныеЗапросом(ИмяРеквизита, СтрТип, ТаблицаОтборов = Неопределено, ВыгружатьПредставлениеПеречисления = Ложь) Экспорт
	
	СписокВыгрузки = Новый СписокЗначений;
	
	Запрос = ЗапросДляВыгрузкиДанных(ИмяРеквизита, СтрТип, ТаблицаОтборов);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		
		Попытка
			
			Результат = Запрос.Выполнить();
			
		Исключение
			
			ТекстСообщения = "Не удалось выгрузить список для типа ""%1%"" по причине ""%2%"".";
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																						, СтрТип
																						, Строка(ОписаниеОшибки()));
																						
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Результат = Неопределено;
			
		КонецПопытки; 			
						
		Если ТипЗнч(Результат) = Тип("РезультатЗапроса") Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Найти(Выборка.ИмяПолное, "Перечисление") > 0 Тогда
					
					ТекПеречисление = Перечисления[Выборка.ИмяОбъекта];
					ИмяЗначения = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(ТекПеречисление, Выборка.Ссылка);
					
					СтрСсылка = Выборка.ИмяПолное + "." + ИмяЗначения;
					СтрПредставление = ?(ВыгружатьПредставлениеПеречисления, Выборка.Представление, ИмяЗначения);								
					
				Иначе	 
					
					СтрСсылка = Выборка.ИмяПолное + "/" + Строка(Выборка.Ссылка.УникальныйИдентификатор());
					СтрПредставление = Выборка.Представление;
					
				КонецЕсли; 
				
				СписокВыгрузки.Добавить(СтрСсылка, СокрЛП(СтрПредставление));
				      				
			КонецЦикла; // Выборка
			
		КонецЕсли; // ЕстьРезультат
		
	КонецЕсли; 
	
	Возврат СписокВыгрузки;
	
КонецФункции // ВыгружаемыеДанныеЗапросом()

// Функция извлекает из БД список для выгрузки в Эксель.
// В Эксель список будет установлен в качестве списка выбора для полей соответсвующих типов.
// 
// Параметры:
//  ТекстЗапроса                       - Строка.
//  СтрТип 	                           - Строка.
//  СтрНастроек                        - Структура (По умолчанию = Неопределено).
//  Режим                              - Строка.
//  ВыгружатьПредставлениеПеречисления - Булево (По умолчанию = Ложь).
// 
// Возвращаемое значение:
//  СписокЗначений - список выгрузки.
// 
Функция ВыгружаемыеДанныеПостроитем(ТекстЗапроса, СтрТип, СтрНастроек = Неопределено, ВыгружатьПредставлениеПеречисления = Ложь) Экспорт
	
	СписокВыгрузки = Новый СписокЗначений;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
				
		Построитель = Новый ПостроительЗапроса;
		Построитель.Текст = ТекстЗапроса;
		
		Если ТипЗнч(СтрНастроек) = Тип("Структура") Тогда
		
			СтруктураНастроек = СтрНастроек.СтруктураНастроек;
			
			Если СтруктураНастроек.Свойство("Отбор") Тогда
			
				Для каждого СтрОтбор Из СтруктураНастроек.Отбор Цикл
				
					   НовыйЭлОтбора = Построитель.Отбор.Добавить(СтрОтбор.ПутьКДанным);
					   бит_ОбщегоНазначения.ЗаполнитьЭлементОтбора(СтрОтбор, НовыйЭлОтбора);
				
				КонецЦикла; 
			
			КонецЕсли; 
			
			Если СтруктураНастроек.Свойство("Порядок") Тогда
				
				бит_МеханизмПолученияДанных.УстановитьПорядокПостроителя(СтруктураНастроек.Порядок, Построитель, НаправлениеСортировки);
			
			КонецЕсли; 
			
		КонецЕсли; 
		
		Попытка
		
			Построитель.Выполнить();
			Результат = Построитель.Результат;
		
		Исключение
			
			ТекстСообщения = "Не удалось выгрузить список для типа ""%1%"" по причине ""%2%"".";
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																						, СтрТип
																						, Строка(ОписаниеОшибки()));
																						
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Результат = Неопределено;
			
		КонецПопытки;			
					
		Если ТипЗнч(Результат) = Тип("РезультатЗапроса") Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Найти(Выборка.ИмяПолное, "Перечисление") > 0 Тогда
					
					ТекПеречисление = Перечисления[Выборка.ИмяОбъекта];
					ИмяЗначения = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(ТекПеречисление, Выборка.Ссылка);
					
					СтрСсылка = Выборка.ИмяПолное+"."+ИмяЗначения;
					Если ВыгружатьПредставлениеПеречисления Тогда
					    СтрПредставление = Выборка.Представление;
					Иначе
						СтрПредставление = ИмяЗначения;					
					КонецЕсли;   			
					
				Иначе	 
					
					СтрСсылка = Выборка.ИмяПолное+"/"+Строка(Выборка.Ссылка.УникальныйИдентификатор());
					СтрПредставление = Выборка.Представление;
					
				КонецЕсли; 
				
				СписокВыгрузки.Добавить(СтрСсылка, СокрЛП(СтрПредставление));
				      				
			КонецЦикла; // Выборка
			
		КонецЕсли; // ЕстьРезультат
		
	КонецЕсли; 
	
	Возврат СписокВыгрузки;
	
КонецФункции // ВыгружаемыеДанныеПостроитем()

#КонецОбласти

#КонецОбласти

#Область ПоискЗначенийВИБ

// Процедура выполняет поиск значения в ИБ по ссылке вида <ПолноеИмяОбъекта>/<УникальныйИдентификатор>.
// 
// Параметры:
//  ЭлСпискаИсточника - Структура.
// 
Процедура НайтиСсылочноеЗначение(ЭлСпискаИсточника) Экспорт
	
	 ПозицияСлэш  = Найти(ЭлСпискаИсточника.Ссылка,"/");
	 
	 Если ПозицияСлэш > 0 Тогда
	 
	 	ИмяПолное = Лев(ЭлСпискаИсточника.Ссылка, ПозицияСлэш - 1);
		ИД = Сред(ЭлСпискаИсточника.Ссылка, ПозицияСлэш + 1);
		
		СтрИмена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ИмяПолное);
		
		ЭлСпискаИсточника.Значение = бит_ОбщегоНазначения.НайтиСсылкуПоИД(СтрИмена, ИД);
		
	 ИначеЕсли Найти(ЭлСпискаИсточника.Ссылка, "Перечисление.") > 0 Тогда
		 
		 МассивИмен = бит_ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСРазделителями(ЭлСпискаИсточника.Ссылка, ".");
		 ИмяПеречисления = "";
		 ИмяЗначения     = "";
		 Если МассивИмен.Количество() > 2 Тогда
			 
			 ИмяПеречисления = СокрЛП(МассивИмен[1]);
			 ИмяЗначения = СокрЛП(МассивИмен[2]);
			 
		 КонецЕсли; 
		 
		 Попытка
			 
			 Знч = Перечисления[ИмяПеречисления][ИмяЗначения];
			 
		 Исключение
			 
			 Знч = Неопределено;
			 
		 КонецПопытки;
		 
		 ЭлСпискаИсточника.Значение = Знч;
		
	 КонецЕсли; 
	
КонецПроцедуры // НайтиСсылочноеЗначение()

// Функция выполняет преобразование значения, загруженного из Эксель в значения ИБ.
// 
// Параметры:
//   ВхЗначение - Произвольный.
//   ТребуемыйТип - ОписаниеТипов.
//   ИмяСписка - Строка.
//   СпискиИсточники - Соответствие.
// 
// Возвращаемое значение:
//  РезЗначение - Произвольный.
// 
Функция ПреобразоватьЗагруженноеЗначение(ВхЗначение, ТребуемыйТип, ИмяСписка, СпискиИсточники) Экспорт
	
	РезЗначение = Неопределено;
	
	Если НЕ ТипЗнч(ВхЗначение) = Тип("Строка") Тогда
		
		РезЗначение = ТребуемыйТип.ПривестиЗначение(ВхЗначение);
		
	Иначе	
		
		Если ЗначениеЗаполнено(ИмяСписка) Тогда
			Список = СпискиИсточники[ИмяСписка];
		Иначе	
			Список = Неопределено;
		КонецЕсли; 
		
		Если НЕ Список = Неопределено Тогда
			
			// Поиск значений в списках			
			
			ЭлСписка = Список[ВхЗначение];
			
			Если ТипЗнч(ЭлСписка) = Тип("Структура") Тогда
				
				Если ЭлСписка.Значение = Неопределено Тогда
					
					НайтиСсылочноеЗначение(ЭлСписка);
					
					Если ЗначениеЗаполнено(ЭлСписка.Значение) Тогда
						
						РезЗначение = ТребуемыйТип.ПривестиЗначение(ЭлСписка.Значение);
						
					КонецЕсли; 
					
				Иначе	
					
					РезЗначение = ТребуемыйТип.ПривестиЗначение(ЭлСписка.Значение);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		Иначе	
			
			// Преобразование примитивных типов			
			
			ОписаниеЧисло  = Новый ОписаниеТипов("Число");
			ОписаниеСтрока = Новый ОписаниеТипов("Строка");
			ОписаниеБулево = Новый ОписаниеТипов("Булево");
			ОписаниеДата   = Новый ОписаниеТипов("Дата");
			
			
			Если ТребуемыйТип = ОписаниеСтрока Тогда
				
				РезЗначение = ВхЗначение;
				
			ИначеЕсли ТребуемыйТип = ОписаниеЧисло Тогда
				
				ЗначениеСтр = бит_ОбменДанными_Excel.УбитьЛишнее(ВхЗначение);				
				РезЗначение = бит_ОбменДанными_Excel.ПолучитьЧисло(ЗначениеСтр);
				
			ИначеЕсли ТребуемыйТип = ОписаниеБулево Тогда
				
				ЗначениеСтр = бит_ОбменДанными_Excel.УбитьЛишнее(ВхЗначение);				
				РезЗначение = бит_ОбменДанными_Excel.ПолучитьБулево(ЗначениеСтр);
				
			ИначеЕсли ТребуемыйТип = ОписаниеДата Тогда	
				
				ЗначениеСтр = бит_ОбменДанными_Excel.УбитьЛишнее(ВхЗначение);				
				РезЗначение = бит_ОбменДанными_Excel.ПолучитьДату(ЗначениеСтр);
				
			КонецЕсли; 
			
			РезЗначение = ТребуемыйТип.ПривестиЗначение(РезЗначение);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат РезЗначение;
	
КонецФункции // ПреобразоватьЗагруженноеЗначение()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразует строку в допустимое наименование колонки таблицы Excel, заменяя недопустимые
// символы на символ подчеркивания.
//
// Параметры:
//  Строка - Строка - Строка для преобразования.
//  Замена - Строка (По умолчанию = "_").
// 
// Возвращаемое значение:
//  Результат - Строка, содержащая только допустимые символы для наименования колонок таблицы значений.
//
Функция ДопустимоеНаименованиеКолонкиExcel(Строка) Экспорт  
	
	Результат = Строка;
	ЗаменяемыеСимволы = "'""[].,`~!@#$%^&*-+=|\/:;";
	Для Индекс = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Результат = СтрЗаменить(Результат, Сред(ЗаменяемыеСимволы, Индекс, 1), " ");
	КонецЦикла;
	Результат = СокрЛП(Результат);
	
	Возврат Результат;
	
КонецФункции

// Процедура формирует синоним и тип значения поля с аналитикой.
//
// Параметры:
//  ИмяРек             - Строка.
//  РекСиноним         - Строка.
//  ТипРеквизита       - ОписаниеТипов.
//  НастройкиИзмерений - Соответствие.
//  ВыбратьРеквизит	   - Булево (По умолчанию = Истина).
//
Процедура ПроверитьДанныеПоляСАналитикой(ИмяРек, РекСиноним, ТипРеквизита, НастройкиИзмерений, ВыбратьРеквизит = Истина) Экспорт

    Если Найти(ИмяРек, "Аналитика") = 0 Тогда
        // Это поле не связано с аналитикой.
        Возврат;
    КонецЕсли;
    
    ИдАналитики = Сред(ИмяРек, Найти(ИмяРек, "Аналитика"));
    
    НастройкаАналитики = НастройкиИзмерений.Получить(ИдАналитики);    
	Если НастройкаАналитики = Неопределено Тогда
		ВыбратьРеквизит = Ложь;
	Иначе
		ДопустимыйСинонимАналитики = ДопустимоеНаименованиеКолонкиExcel(НастройкаАналитики.Синоним);
        Если Найти(ИмяРек, "Учет") > 0 Тогда
            РекСиноним = "Учет - " + ДопустимыйСинонимАналитики;
        ИначеЕсли Найти(ИмяРек, "Обязательный") > 0 Тогда
            РекСиноним = "Обязательный - " + ДопустимыйСинонимАналитики;    
        ИначеЕсли Найти(ИмяРек, "ИмяТипаПоУмолчанию") > 0 Тогда
            РекСиноним = "Имя типа по умолчанию - " + ДопустимыйСинонимАналитики;    
        Иначе
            РекСиноним   = ДопустимыйСинонимАналитики;
            ТипРеквизита = НастройкаАналитики.ТипЗначения;
        КонецЕсли;    	    
    КонецЕсли;   
    
КонецПроцедуры // ПроверитьДанныеПоляСАналитикой()

// Функция получает значение для ИБ по наименованию элемента справочника.
//
// Параметры:
//  ИмяСпискаИсточникаExcel - Строка.
//  ПредставлениеЗначенияExcel - Строка.
//
Функция ПолучитьЗначениеСправочникаПоНаименованию(ИмяСпискаИсточникаExcel, ПредставлениеЗначенияExcel)

    ЗначениеДляИБ = Неопределено;
    
    ИмяОбъекта = СтрЗаменить(ИмяСпискаИсточникаExcel, "СправочникСсылка.", "");
    
    НовОтбор = Новый Структура("Наименование", ПредставлениеЗначенияExcel);
    
    ВыборкаОб = Справочники[ИмяОбъекта].Выбрать(, , НовОтбор);
    Пока ВыборкаОб.Следующий() Цикл
        ТекОбъект = ВыборкаОб.Ссылка;
        Прервать;
    КонецЦикла;	

    Возврат ЗначениеДляИБ;
    
КонецФункции // ПолучитьЗначениеСправочникаПоНаименованию()

// Функция проверяет значение на соответствие типу.
//
// Параметры:
//  ТекТип 					   - Тип.
//  ПредставлениеЗначенияExcel - Строка.
//  ЭтоПримитивныйТип		   - Булево (По умолчанию = Ложь).
// 
// Возвращаемое значение:
//  Любое значение (ЗначениеДляИБ).
//
Функция ПривестиЗначениеПоТипуТипу(ТекТип, ПредставлениеЗначенияExcel, ЭтоПримитивныйТип = Ложь)

	МассивТип = Новый Массив;
	МассивТип.Добавить(ТекТип);
	ТекОписание = Новый ОписаниеТипов(МассивТип);
	
	ТекЗначениеДляИБ = ТекОписание.ПривестиЗначение(ПредставлениеЗначенияExcel);
	Если НЕ ЗначениеЗаполнено(ТекЗначениеДляИБ) И НЕ ЭтоПримитивныйТип Тогда
		
		МетаОб = ТекЗначениеДляИБ.Метаданные();
		ИмяКоллекции = бит_ОбщегоНазначения.ОпределитьИмяКоллекции(МетаОб);
		Если ИмяКоллекции = "Справочники" Тогда
			ТекЗначениеДляИБ = Справочники[МетаОб.Имя].НайтиПоНаименованию(ПредставлениеЗначенияExcel);	
		ИначеЕсли ИмяКоллекции = "Перечисления" Тогда
			Для каждого ТекПереч Из Перечисления[МетаОб.Имя] Цикл
				Если Строка(ТекПереч) = ПредставлениеЗначенияExcel Тогда
				 	ТекЗначениеДляИБ = ТекПереч;				
				КонецЕсли; 			
			КонецЦикла;
		ИначеЕсли ИмяКоллекции = "ПланыВидовХарактеристик" Тогда
			ТекЗначениеДляИБ = ПланыВидовХарактеристик[МетаОб.Имя].НайтиПоНаименованию(ПредставлениеЗначенияExcel);
		//ИначеЕсли ИмяКоллекции = "ПланыСчетов" Тогда
		КонецЕсли;
	                  
	КонецЕсли;
		
	Возврат ТекЗначениеДляИБ;

КонецФункции // ПривестиЗначениеПоТипуТипу()

Процедура ЗаполнитьСтрокуДаннымиИзExcel(НоваяСтрокаТч, СтруктураПолей, СтрExcel, СтруктураДанных, СпискиИсточники, ЭтоГруппа = Неопределено)

	Для каждого КлЗнПоля Из СтруктураПолей Цикл
			                                          			
        ИмяПоля       = КлЗнПоля.Ключ;
        СтруктураПоля = КлЗнПоля.Значение;
        
        Если ЭтоГруппа <> Неопределено Тогда
            Если ИмяПоля = "ЭтоГруппа" Тогда
                Продолжить;       
            КонецЕсли;
            Если (ЭтоГруппа И НЕ СтруктураПоля.ИспользованиеДляГруппы)
                 ИЛИ (НЕ ЭтоГруппа И НЕ СтруктураПоля.ИспользованиеДляЭлемента) Тогда
                 Продолжить;               
            КонецЕсли;
        КонецЕсли;       
        
        Если СтруктураПоля.ЭтоДополнение Тогда
             Продолжить;		
        КонецЕсли;
        
        Если СтруктураПоля.ЭтоСубконто Тогда
            
            ПолеСчет = СтруктураПоля.ПолеСчет;
            Если ПолеСчет = Неопределено Тогда
                 ЗначениеДляИБ = ПолучитьЗначениеДляИБИзДанныхПоляExcel(СтрExcel, ИмяПоля, СтруктураПоля, СтруктураДанных, СпискиИсточники);
            Иначе	
                СчетДляСубконто = НоваяСтрокаТч[ПолеСчет];
                ЗначениеДляИБ = ПолучитьЗначениеСубконтоДляИБИзДанныхПоляExcel(СтрExcel, ИмяПоля, СтруктураПоля, СтруктураДанных, СчетДляСубконто);
            КонецЕсли;
            
        Иначе	
            
            ЗначениеДляИБ = ПолучитьЗначениеДляИБИзДанныхПоляExcel(СтрExcel, ИмяПоля, СтруктураПоля, СтруктураДанных, СпискиИсточники);
        
        КонецЕсли;
        
        Если ЗначениеДляИБ <> Неопределено Тогда
            НоваяСтрокаТч[ИмяПоля] = ЗначениеДляИБ;	
        КонецЕсли;
                                             
    КонецЦикла;	

КонецПроцедуры // ЗаполнитьСтрокуДаннымиИзExcel()

#КонецОбласти
