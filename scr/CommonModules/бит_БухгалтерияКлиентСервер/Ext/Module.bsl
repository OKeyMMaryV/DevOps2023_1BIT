
#Область ПрограммныйИнтерфейс

Процедура УстановитьНачальныеСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки) Экспорт
	
	УстановитьСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(Форма, Объект, ПараметрыУстановки) Экспорт
	
	УстановитьСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
	УстановитьЗначенияСубконтоПоУмолчанию(Объект, ПараметрыУстановки);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(Форма, Объект, НомерСубконто, ПараметрыУстановки) Экспорт
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
	ОчиститьСубконтоПриИзмененииСубконто(Объект, НомерСубконто, ПараметрыУстановки, ДанныеОбъекта);
	
КонецПроцедуры

Функция ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки) Экспорт
	
	Результат = Новый Структура;
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	ДопРеквизиты = ПараметрыУстановки.ДопРеквизиты;
	
	ОписаниеТиповДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора();
	
	Для Индекс = 1 По 4 Цикл
		Если НЕ ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеСубконто = Объект[ПоляОбъекта["Субконто" + Индекс]];
		ТипСубконто = ТипЗнч(ЗначениеСубконто);
		Если ТипСубконто= Тип("СправочникСсылка.Контрагенты") Тогда
			Результат.Вставить("Контрагент", ЗначениеСубконто);
		ИначеЕсли ОписаниеТиповДоговора.СодержитТип(ТипСубконто) Тогда
			Результат.Вставить("ДоговорКонтрагента", ЗначениеСубконто);
		ИначеЕсли ТипСубконто = Тип("СправочникСсылка.Номенклатура") Тогда
			Результат.Вставить("Номенклатура", ЗначениеСубконто);
		ИначеЕсли ТипСубконто = Тип("СправочникСсылка.Склады") Тогда
			Результат.Вставить("Склад", ЗначениеСубконто);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("СчетУчета", Объект[ПоляОбъекта.СчетУчета]);
	
	Если ПоляОбъекта.Свойство("Организация") Тогда
		Результат.Вставить("Организация", Объект[ПоляОбъекта.Организация]);
	КонецЕсли;
	
	Для каждого ДопРеквизит Из ДопРеквизиты Цикл
		Результат.Вставить(ДопРеквизит.Ключ, ДопРеквизит.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеПараметрыУстановкиСвойствСубконто() Экспорт
	
	Результат = Новый Структура;
	
	ПоляФормы = Новый Структура;
	ПоляФормы.Вставить("Субконто1");
	ПоляФормы.Вставить("Субконто2");
	ПоляФормы.Вставить("Субконто3");
	ПоляФормы.Вставить("Субконто4");
	Результат.Вставить("ПоляФормы", ПоляФормы);
	
	ПоляОбъекта = Новый Структура;
	ПоляОбъекта.Вставить("СчетУчета", "СчетУчета");
	ПоляОбъекта.Вставить("Субконто1");
	ПоляОбъекта.Вставить("Субконто2");
	ПоляОбъекта.Вставить("Субконто3");
	ПоляОбъекта.Вставить("Субконто4");
	Результат.Вставить("ПоляОбъекта", ПоляОбъекта);
	
	ДопРеквизиты = Новый Структура;
	Результат.Вставить("ДопРеквизиты", ДопРеквизиты);
	
	Результат.Вставить("ЗначенияПоУмолчанию", Новый Соответствие); // См. также ПредопределенныеЗначенияСубконтоПоУмолчанию()
	
	Результат.Вставить("СкрыватьСубконто", Истина);
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтерфейсыКМетодамТиповыхКонфигураций

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма			 - Число	 - Сумма от которой надо рассчитывать налоги.
//  УчитыватьНДС	 - Булево	 - Признак учета НДС в сумме.
//  СуммаВключаетНДС - Булево	 - Признак включения НДС в сумму ("внутри" или "сверху").
//  СтавкаНДС		 - Число	 - Процентная ставка НДС.
// 
// Возвращаемое значение:
//  Число, полученная - сумма НДС.
//
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Возврат УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС);
	
КонецФункции

// Функция возвращает ставку НДС.
//  Является альтернативой к процедуре бит_БухгалтерияСервер.ПолучитьСтавкуНДС, т.к. при вызове с клиента
//  не обращается на сервер.
//
// Параметры:
//  СтавкаНДС	 - ПеречислениеСсылка.СтавкиНДС		 - Ставка НДС.
//  СтавкиНДС	 - Структура, Перечисление.СтавкиНДС - Ставки НДС.
// 
// Возвращаемое значение:
//  ЗначениеСтавки - Число.
//
Функция ПолучитьСтавкуНДС(СтавкаНДС,СтавкиНДС) Экспорт

	// ++ БП 
	Возврат УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
	// -- БП 

КонецФункции

// Процедура формирует структуру для последующей установки параметров выбора.
// 
// Параметры:
//  Контейнер          - Произвольный.
//  КонтейнерШапка     - Произвольный.
//  ИмяСубконто        - Строка.
//  ЗначениеСубконто   - Произвольный.
//  КоличествоСубконто - Число.
// 
Функция ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                      ,Знач КонтейнерШапка = Неопределено
										  ,ИмяСубконто
										  ,ЗначениеСубконто
										  ,КоличествоСубконто
										  ,ИсключитьОрганизацию = Ложь) Экспорт

	Если КонтейнерШапка = Неопределено Тогда
		КонтейнерШапка = Контейнер;
	КонецЕсли; 
	
	//++ СБ_ПискуноваВВ добавление кода 13.04.2016 (#2373)
	Если ЗначениеЗаполнено(КонтейнерШапка.Организация) Тогда
		КонсолидирующаяОрганизация  = СБ_РаботаСФормамиОбъекты.СБ_ПроверитьОрганизацию(КонтейнерШапка.Организация,КонтейнерШапка.Дата);
	Иначе 
		КонсолидирующаяОрганизация = Ложь;
	КонецЕсли;
    //-- СБ_ПискуноваВВ добавление кода 13.04.2016 (#2373)	
	
	// ++ БП 
	флДоговорыНезависимые = Ложь;
	// -- БП 
	СтруктураПараметров   = Новый Структура;
	
	// ++ БП 
	Если ТипЗнч(ЗначениеСубконто) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет")
		//++ СБ_ПискуноваВВ изменение кода 13.04.2016 (#2373) 
		Или  КонсолидирующаяОрганизация
		//-- СБ_ПискуноваВВ изменение кода  13.04.2016 (#2373)		
	 ИЛИ ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	 
		ИсключитьОрганизацию = Истина; 	
	КонецЕсли; 
	// -- БП 
	
	Если Не ИсключитьОрганизацию Тогда
		
		ОрганизацияВШапкеЕсть = Истина;
		
		Если ТипЗнч(КонтейнерШапка) = Тип("ДанныеФормыЭлементКоллекции")
			Или ТипЗнч(КонтейнерШапка) = Тип("ДанныеФормыСтруктура") Тогда
			
			Если КонтейнерШапка.Свойство("Организация") Тогда
				СтруктураПараметров.Вставить("Организация", КонтейнерШапка.Организация);
			Иначе
				ОрганизацияВШапкеЕсть = Ложь;
			КонецЕсли;
			
		Иначе
			СтруктураПараметров.Вставить("Организация", КонтейнерШапка.Организация);
		КонецЕсли;
		
	Иначе
		ОрганизацияВШапкеЕсть = Ложь;
	КонецЕсли;
	
	Для Ном = 1 По КоличествоСубконто Цикл
		
		Имя = ИмяСубконто+Ном;
		ТекЗначениеСубконто = Контейнер[Имя];
		ТипТекСубконто      = ТипЗнч(ТекЗначениеСубконто);
		
		Если ТипТекСубконто = Тип("СправочникСсылка.Контрагенты") Тогда
			СтруктураПараметров.Вставить("Контрагент", ТекЗначениеСубконто);
			
		ИначеЕсли ТипТекСубконто = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если НЕ флДоговорыНезависимые Тогда
				СтруктураПараметров.Вставить("ДоговорКонтрагента", ТекЗначениеСубконто);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ТипЭлемента = ТипЗнч(ЗначениеСубконто);
	
	Если бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЭлемента, "СправочникСсылка.БанковскиеСчета") 
			Или бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЭлемента, "СправочникСсылка.БанковскиеСчетаОрганизаций") 
			Или бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЭлемента, "СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		Если ОрганизацияВШапкеЕсть Тогда
			СтруктураПараметров.Вставить("Владелец", КонтейнерШапка.Организация);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		Если ОрганизацияВШапкеЕсть Тогда
			СтруктураПараметров.Вставить("Организация", бит_ОбщегоНазначения.ГоловнаяОрганизация(КонтейнерШапка.Организация));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Контрагент") Тогда
			Если флДоговорыНезависимые Тогда
				СтруктураПараметров.Вставить("Контрагент", СтруктураПараметров.Контрагент);	
			Иначе	
				СтруктураПараметров.Вставить("Владелец", СтруктураПараметров.Контрагент);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции // ПодготовитьПараметрыВыбораСубконто()

// Процедура обрабатывает автоподбор субконто. Устанавливаются необходимые отборы.
// 
// Параметры:
//  Элемент            - ПолеФормы.
//  Параметры          - Структура.
//  Контейнер          - Произвольный.
//  КонтейнерШапка     - Произвольный.
//  ИмяСубконто        - Строка.
//  ЗначениеСубконто   - Произвольный.
//  КоличествоСубконто - Число.
// 
Процедура СубконтоАвтоПодбор(Элемент
	                          , Параметры
							  , Контейнер
							  , Знач КонтейнерШапка = Неопределено
							  , ИмяСубконто
							  , ЗначениеСубконто
							  , КоличествоСубконто
							  , ИсключитьОрганизацию) Экспорт

	СтруктураПараметров  = ПодготовитьПараметрыВыбораСубконто(Контейнер
                                                                 ,КонтейнерШапка
																 ,ИмяСубконто
																 ,ЗначениеСубконто
																 ,КоличествоСубконто
																 ,ИсключитьОрганизацию);	
																 
																 
	// Установим параметры выбора субконто.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

	Для каждого КиЗ Из СтруктураПараметров Цикл
	
		Параметры.Отбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
	
	КонецЦикла; 
																 

КонецПроцедуры // СубконтоАвтоПодбор()

// Процедура устанавливает отборы в формах выбора субконто, такие как Организация, Контрагент и др.
// 
// Параметры:
//  Элемент      		 	- Элемент управления, для которого устанавливается отбор.
//  ЗначениеСубконто 	 	- Произвольный.
//  СтандартнаяОбработка 	- Булево, признак стандартной обработки выбора в элементе формы.
//  Организация				- СправочникСсылка.Организации (Необязатльный).
//  СписокПараметров 	 	- СписокЗначений, в котором передаются параметры отбора
//                 				для форм выбора партий, документов расчетов с контрагентами.
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых типов элемента управления.
// 
Процедура ОбработатьВыборСубконтоОбычныеФормы(Элемент
				                              , СтандартнаяОбработка
											  , ЗначениеСубконто
											  , Организация  = Неопределено
											  , СписокПараметров = Неопределено
											  , ОграничениеТипаЭлемента = Неопределено) Экспорт
								  



#Если Не ТонкийКлиент И Не ВебКлиент Тогда
								  
								  
	Если НЕ ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") Тогда
		
		ТипЭлемента = ТипЗнч(ЗначениеСубконто);
		Если ТипЭлемента = Неопределено Тогда
		    Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(ЗначениеСубконто);
		Если ?(ТипЭлемента = Неопределено, Истина, не ОграничениеТипаЭлемента.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		Если Организация <> Неопределено Тогда
		 	ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;		
		КонецЕсли;                                                                                 		

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

		Если Организация <> Неопределено Тогда
			ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = бит_ОбщегоНазначения.ГоловнаяОрганизация(Организация);
			ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
			ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;			
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			Если СписокПараметров.Свойство("Контрагент") Тогда
				
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = СписокПараметров.Контрагент;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;

	Если НЕ СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

#КонецЕсли	
	
КонецПроцедуры // ОбработатьВыборСубконто()

// Функция заполняет значения субконто в структуру. 
// Необходимо для уменьшения трафика при последующих серверных вызовах. 
// Т.е. дальше на сервер будем передавать не всю форму а только структуру субконто.
// 
// Параметры:
//  Контейнер  - Произвольный.
//  ИмяСубконто- Строка.
//  Количество - Число.
// 
// Возвращаемое значение:
//   СтруктураСубконто   - Структура - Ключ:ИмяСубконто, Значение:ЗначениеСубконто.
// 
Функция ПодготовитьСтруктуруСубконто(Контейнер,ИмяСубконто,КоличествоСубконто) Экспорт
	
	СтруктураСубконто = Новый Структура;
	
	Для Н = 1 По КоличествоСубконто Цикл
	
		Имя = ИмяСубконто+Н;
		СтруктураСубконто.Вставить(Имя,Контейнер[Имя]);
	
	КонецЦикла; 

	Возврат СтруктураСубконто;
	
КонецФункции // ПодготовитьСтруктуруСубконто()

// Процедура заполняет значения субконто в приемник, если значения в приемнике и источнике не совпадают.
// 
// Параметры:
//  КонтейнерИсточник   - Произвольный.
//  КонтейнерПриемник   - Произвольный.
//  ИмяСубконтоИсточник - Строка.
//  ИмяСубконтоПриемник - Строка.
//  КоличествоСубконто  - Число.
// 
Процедура ЗаполнитьСубконтоПоСтруктуре(КонтейнерИсточник
	                                    ,КонтейнерПриемник
										,ИмяСубконтоИсточник
										,ИмяСубконтоПриемник=""
										,КоличествоСубконто) Экспорт

	Для Н = 1 По КоличествоСубконто Цикл
	
		ИмяИсточник = ИмяСубконтоИсточник+Н;
		Если ПустаяСтрока(ИмяСубконтоПриемник) Тогда
			ИмяПриемник = ИмяСубконтоИсточник+Н;
		Иначе	
			ИмяПриемник = ИмяСубконтоПриемник+Н;
		КонецЕсли; 
		
		Если КонтейнерИсточник[ИмяИсточник] <> КонтейнерПриемник[ИмяПриемник] Тогда
		
			 КонтейнерПриемник[ИмяПриемник] = КонтейнерИсточник[ИмяИсточник];
		
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьСубконтоПоСтруктуре()

// Процедура приводит значения субконто согласно настройкам субконто, полученным исходя из текущего счета.
// 
// Параметры:
//  Контейнер          - Произвольный - в качестве свойств содержит субконто.
//  НастройкиСубконто  - СписокЗначений - значением является ОписаниеТипов к которому нужно привести субконто.
//  ИмяСубконто        - Строка.
// 
Процедура ПривестиЗначенияСубконто(Контейнер,НастройкиСубконто,ИмяСубконто) Экспорт

	Ном = 1;
	Для каждого ЭлементНастройки Из НастройкиСубконто Цикл
		
		ИмяРеквизита = ИмяСубконто+Ном;
		Если ЭлементНастройки.Пометка Тогда
			
			
			НовоеЗначение = ЭлементНастройки.Значение.ПривестиЗначение(Контейнер[ИмяРеквизита]);
			Если НовоеЗначение <> Контейнер[ИмяРеквизита] Тогда
				
				Контейнер[ИмяРеквизита] = НовоеЗначение;
				
			КонецЕсли; 
			
		Иначе
			
			Контейнер[ИмяРеквизита] = Неопределено;
			
		КонецЕсли; 
		
		Ном = Ном+1;
	КонецЦикла; 


КонецПроцедуры // ПривестиЗначенияКонтейнера()

#КонецОбласти

#Область ЗаполнениеПлановСчетов

// Функция удаляет разделители из строки.
// 
// Параметры:
//  МаскаКода  - Строка.
//  
// Возвращаемое значение:
//   Число.
// 
Функция ПолучитьМассивДоступныхРазделителейМасокПлановСчетов() Экспорт

	МассивРазделителей = Новый Массив;
	МассивРазделителей.Добавить(".");
	МассивРазделителей.Добавить("/");
	МассивРазделителей.Добавить("-");
	МассивРазделителей.Добавить("_");
		
	Возврат МассивРазделителей;
	
КонецФункции // ПолучитьМассивДоступныхРазделителейМасокПлановСчетов()
           
// Функция удаляет разделители из строки.
// 
// Параметры:
//  МаскаКода  - Строка.
//  
// Возвращаемое значение:
//   Число.
// 
Функция УдалитьРазделителиИзСтроки(ОбрабатываемаяСтрока) Экспорт

	СтрокаРезультат    = ОбрабатываемаяСтрока;
	
	МассивРазделителей = ПолучитьМассивДоступныхРазделителейМасокПлановСчетов();
	                       	
	Для каждого ТекРазделитель Из МассивРазделителей Цикл
	 	СтрокаРезультат = СокрЛП(СтрЗаменить(СтрокаРезультат, ТекРазделитель, ""));
	КонецЦикла;
		
	Возврат СтрокаРезультат;
	
КонецФункции // УдалитьРазделителиИзСтроки()

// Функция формирует код быстрого доступа.
// 
// Параметры:
//  Код - Строка.
//  
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьКодБыстрогоДоступа(Код) Экспорт

	КодБыстрогоВыбора = СокрЛП(УдалитьРазделителиИзСтроки(Код));
	
	Возврат КодБыстрогоВыбора;
	
КонецФункции // ПолучитьКодБыстрогоДоступа()

// Функция подсчитывает количество разделителей в маске.
// 
// Параметры:
//  МаскаКода  		   - Строка.
//  МассивРазделителей - Массив (По умолчанию = Неопределено).
//  
// Возвращаемое значение:
//   Число.
// 
Функция ПолучитьКоличествоРазделителейМаски(МаскаКода, МассивРазделителей = Неопределено) Экспорт

	КоличествоРазделителей = 0;
	
	Если МассивРазделителей = Неопределено Тогда
		МассивРазделителей = ПолучитьМассивДоступныхРазделителейМасокПлановСчетов();
	КонецЕсли;      	
		
	Для каждого ТекРазделитель Из МассивРазделителей Цикл
		КоличествоРазделителей = КоличествоРазделителей + СтрЧислоВхождений(МаскаКода, ТекРазделитель);
	КонецЦикла;
		
	Возврат КоличествоРазделителей;
	
КонецФункции // ПолучитьКоличествоРазделителейМаски()

// Функция определяет строку полей для создания структуры для загрузки/выгрузки планов счетов.
//
// Параметры:
//  ИмяПланаСчетов  - Строка.
//  ПометкаУдаления - Булево (По умолчанию = Истина). 
//  ПоМакету        - Булево (По умолчанию = Ложь).
//
// Возвращаемое значение:
//  Стока.
//
Функция ОпределитьСтрокуПолейПланаСчетов(ИмяПланаСчетов, ПометкаУдаления = Истина, ПоМакету = Ложь) Экспорт
	
	Если бит_БухгалтерияСервер.ЕстьИсторическиеКурсы(ИмяПланаСчетов) Тогда
		СтрокаПолей = "РодительКод,Код,Порядок,Наименование,НаименованиеПолное,Вид,Забалансовый,Валютный,Количественный,ИспользоватьИсторическиеКурсы,Группа,Субконто1,ОбСубконто1,Субконто2,ОбСубконто2,Субконто3,ОбСубконто3,Субконто4,ОбСубконто4"; 
	Иначе
		СтрокаПолей = "РодительКод,Код,Порядок,Наименование,НаименованиеПолное,Вид,Забалансовый,Валютный,Количественный,Группа,Субконто1,ОбСубконто1,Субконто2,ОбСубконто2,Субконто3,ОбСубконто3,Субконто4,ОбСубконто4"; 
	КонецЕсли;
	
	Если ПоМакету Тогда
		СтрокаПолей = СтрЗаменить(СтрокаПолей, "НаименованиеПолное,"		   , "");
		СтрокаПолей = СтрЗаменить(СтрокаПолей, "ИспользоватьИсторическиеКурсы,", "");	
    КонецЕсли;
    
    Если ПометкаУдаления Тогда
        СтрокаПолей = СтрокаПолей + ",ПометкаУдаления";
    КонецЕсли;
    
	Возврат СтрокаПолей;
	
КонецФункции // ОпределитьСтруктуруПолей()

// Функция определяет структуру полей для загрузки/выгрузки планов счетов.
//
// Параметры:
//  ИмяПланаСчетов  - Строка.
//  ПометкаУдаления - Булево (По умолчанию = Истина). 
//  ПоМакету        - Булево (По умолчанию = Ложь).
//
// Возвращаемое значение:
//  Структура.
//
Функция ОпределитьСтруктуруПолейПланаСчетов(ИмяПланаСчетов, ПометкаУдаления = Истина, ПоМакету = Ложь) Экспорт
    
    СтруктуруПолей = Новый Структура;
    
    СтруктуруПолей.Вставить("РодительКод" , "Родитель");
    СтруктуруПолей.Вставить("Код"         , "Код");
    СтруктуруПолей.Вставить("Порядок"     , "Порядок");
    СтруктуруПолей.Вставить("Наименование", "Наименование");
    
    Если Не ПоМакету Тогда
        СтруктуруПолей.Вставить("НаименованиеПолное", "Полное наименование");
    КонецЕсли;
    
    СтруктуруПолей.Вставить("Вид"           , "Вид");
    СтруктуруПолей.Вставить("Забалансовый"  , "Забалансовый");
    СтруктуруПолей.Вставить("Валютный"      , "Валютный");
    СтруктуруПолей.Вставить("Количественный", "Количественный");
    
    Если Не ПоМакету И бит_БухгалтерияСервер.ЕстьИсторическиеКурсы(ИмяПланаСчетов) Тогда
        СтруктуруПолей.Вставить("ИспользоватьИсторическиеКурсы", "Использовать исторические курсы");
    КонецЕсли;
    
    СтруктуруПолей.Вставить("Группа", "Группа");
    
    СтруктуруПолей.Вставить("Субконто1"  , "Субконто 1");
    СтруктуруПолей.Вставить("ОбСубконто1", "Только обороты субконто 1");
    СтруктуруПолей.Вставить("Субконто2"  , "Субконто 2");
    СтруктуруПолей.Вставить("ОбСубконто2", "Только обороты субконто 2");
    СтруктуруПолей.Вставить("Субконто3"  , "Субконто 3");
    СтруктуруПолей.Вставить("ОбСубконто3", "Только обороты субконто 3");
    СтруктуруПолей.Вставить("Субконто4"  , "Субконто 4");
    СтруктуруПолей.Вставить("ОбСубконто4", "Только обороты субконто 4");
    
    Если ПометкаУдаления Тогда
        СтруктуруПолей.Вставить("ПометкаУдаления", "Пометка удаления");
    КонецЕсли;
    
	Возврат СтруктуруПолей;
	
КонецФункции // ОпределитьСтруктуруПолей()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта)
	
	Элементы = Форма.Элементы;
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	ПоляФормы   = ПараметрыУстановки.ПоляФормы;
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить(
		БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации(), "БанковскийСчет");
	ВидыПараметров.Вставить(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения(), "Подразделение");
	Для каждого ТипДоговора Из БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы() Цикл
		ВидыПараметров.Вставить(ТипДоговора, "Договор");
	КонецЦикла;
	
	Для Индекс = 1 По 4 Цикл
		Если НЕ ЗначениеЗаполнено(ПоляФормы["Субконто" + Индекс])
			ИЛИ НЕ ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормыСубконто = Элементы.Найти(ПоляФормы["Субконто" + Индекс]);
		Если ЭлементФормыСубконто = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипСубконто   = ТипЗнч(Объект[ПоляОбъекта["Субконто" + Индекс]]);
		ВидПараметров = ВидыПараметров[ТипСубконто];
		Если ВидПараметров <> Неопределено Тогда
			
			МассивПараметров = Новый Массив();
			Если ВидПараметров = "Договор" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", ДанныеОбъекта.Организация));
				КонецЕсли;
				Если ДанныеОбъекта.Свойство("Контрагент") Тогда
					ИмяКонтрагента = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор." + ИмяКонтрагента, ДанныеОбъекта.Контрагент));
				КонецЕсли;
			ИначеЕсли ВидПараметров = "БанковскийСчет" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ДанныеОбъекта.Организация));
				КонецЕсли;
			ИначеЕсли ВидПараметров = "Подразделение" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					ИмяРеквизитаОрганизация = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
					Если ЗначениеЗаполнено(ИмяРеквизитаОрганизация) Тогда
						МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор." + ИмяРеквизитаОрганизация, ДанныеОбъекта.Организация));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если МассивПараметров.Количество() > 0 Тогда
				ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
				ЭлементФормыСубконто.ПараметрыВыбора = ПараметрыВыбора;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСубконтоПриИзмененииСубконто(Объект, НомерСубконто, ПараметрыУстановки, ДанныеОбъекта)
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	
	ВсеТипыСвязанныхСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ВсеТипыСвязанныхСубконто();
	ТипыСубконтоДляОчистки   = Новый ОписаниеТипов(Новый Массив);
	Для каждого СвойствоОбъекта Из ДанныеОбъекта Цикл
		СвязанныеТипы = ВсеТипыСвязанныхСубконто[СвойствоОбъекта.Ключ];
		Если СвязанныеТипы <> Неопределено Тогда
			ТипыСубконтоДляОчистки = Новый ОписаниеТипов(ТипыСубконтоДляОчистки, СвязанныеТипы.Типы());
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс = НомерСубконто + 1 По 4 Цикл
		
		Если НЕ ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСубконто = ПоляОбъекта["Субконто" + Индекс];
		ТипСубконто = ТипЗнч(Объект[ИмяСубконто]);
		
		Если ЗначениеЗаполнено(Объект[ИмяСубконто])
			И ТипыСубконтоДляОчистки.СодержитТип(ТипСубконто) Тогда
			Объект[ИмяСубконто] = Новый (ТипСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСубконтоПриИзмененииОрганизации(Объект, ПараметрыУстановки)
	
	ВсеТипыСвязанныхСубконто   = БухгалтерскийУчетВызовСервераПовтИсп.ВсеТипыСвязанныхСубконто();
	ТипыСвязанныеСОрганизацией = ВсеТипыСвязанныхСубконто["Организация"];
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	
	Для каждого ПолеОбъекта Из ПоляОбъекта Цикл
		ИмяПоля = ПолеОбъекта.Значение;
		Если ЗначениеЗаполнено(ИмяПоля)
			И ЗначениеЗаполнено(Объект[ИмяПоля]) Тогда
			ТипПоля = ТипЗнч(Объект[ИмяПоля]);
			Если ТипыСвязанныеСОрганизацией.СодержитТип(ТипПоля) Тогда
				Объект[ИмяПоля] = Новый (ТипПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки)
	
	Элементы = Форма.Элементы;
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	ПоляФормы   = ПараметрыУстановки.ПоляФормы;
	
	ДанныеСчета = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект[ПоляОбъекта.СчетУчета]);
	
	Для Индекс = 1 По 4 Цикл
		Если НЕ ЗначениеЗаполнено(ПоляФормы["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		ПолеСубконто = Элементы.Найти(ПоляФормы["Субконто" + Индекс]);
		Если ПолеСубконто <> Неопределено Тогда
			ПоказатьСубконто = ДанныеСчета.КоличествоСубконто >= Индекс;
			ПолеСубконто.Видимость = ПоказатьСубконто;
			Если ПоказатьСубконто Тогда
				ПолеСубконто.Заголовок = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначенияСубконтоПоУмолчанию(Объект, ПараметрыУстановки)
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	ДопРеквизиты = ПараметрыУстановки.ДопРеквизиты;
	
	ЗначенияПоУмолчанию = Новый Соответствие;
	
	ДанныеСчета = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект[ПоляОбъекта.СчетУчета]);
	
	Для Индекс = 1 По 4 Цикл
		
		ИмяПоля = ПоляОбъекта["Субконто" + Индекс];
		Если НЕ ЗначениеЗаполнено(ИмяПоля) 
			ИЛИ ЗначениеЗаполнено(Объект[ИмяПоля]) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипСубконто = ТипЗнч(Объект[ИмяПоля]);
		ЗначениеПоУмолчанию = ЗначенияПоУмолчанию[ДанныеСчета["ВидСубконто" + Индекс]];
		Если ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
			Объект[ИмяПоля] = ЗначениеПоУмолчанию;
		КонецЕсли; 
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти