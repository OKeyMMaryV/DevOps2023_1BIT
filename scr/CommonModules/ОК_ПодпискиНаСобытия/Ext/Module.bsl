//ОК Калинин М. 261212
Процедура ДобавитьОстатокОтОкругления(ТабПриемник,ТабИсточник,Сумма,СуммаИсточник)
	ТабПриемник[0][Сумма]=ТабПриемник[0][Сумма]-ТабПриемник.Итог(Сумма)+ТабИсточник[СуммаИсточник];
КонецПроцедуры
//ОК Калинин М. 

//Ванюков К. +// кредитовый оборот 08.03 в разрезе статей затрат //2012-02-17

Процедура ОК_ПроведениеДокументовОС(Источник, Отказ, РежимПроведения) Экспорт 
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Нужны документы модернизация ОС или принятия к учету ОС с видом операции Объекты строительства
	//и установленным флагом ОК_ВРазрезеСтатейЗатрат
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПринятиеКУчетуОС") Тогда
		//ОКЕЙ Иванов А.Е.(СофтЛаб) Начало 2018-04-25 (#3010)
		
		ОтборНастроек = Новый Структура("Группа, ИмяНастройки", "ПроведениеДокументовОС", "ПринятиеКУчетуОС_ОрганизацияПроверкиПодразделений");
		НаборЗаписейСчетВыбытия = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборНастроек, "бит_му_Настройки");
		
		Если НаборЗаписейСчетВыбытия.Количество() = 0 Тогда
			ТребуетсяПроверка = Ложь;
		Иначе
			ТребуетсяПроверка = (НаборЗаписейСчетВыбытия[0].Значение = Источник.Организация);
		КонецЕсли;

		Если ТребуетсяПроверка Тогда
			Если НЕ Источник.ПодразделениеОрганизации = Источник.МестонахождениеОС Тогда
				ТекстСообщения = НСтр("ru = 'Местоположение ОС не соответствует установленному Подразделению организации!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, "МестонахождениеОС", , Отказ);
				Возврат;
			КонецЕсли;
			Если 
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-20 (#3281)
				Источник.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства") И
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-20 (#3281)
				НЕ Источник.ПодразделениеОрганизации = Источник.Склад.ПодразделениеОрганизации Тогда
				ТекстСообщения = НСтр("ru = 'Подразделение склада не соответствует установленному Подразделению организации!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, "Склад", , Отказ);
				Если НЕ ЗначениеЗаполнено(Источник.Склад.ПодразделениеОрганизации) Тогда
					ТекстСообщения = НСтр("ru = 'Подразделение склада не заполнено!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, "Склад", , );
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		//ОКЕЙ Иванов А.Е.(СофтЛаб) Конец 2018-04-25 (#3010)
		
		// ОКЕЙ Цветков А.(СофтЛаб) Начало 2018-06-06 (#3014)	
		Если Источник.ПодразделениеОрганизации.ОК_КонтрольОбъекта тогда
			
			СтруктураПолей_ = Новый Структура;
			СтруктураПолей_.Вставить("НомерСтроки"	, "НомерСтроки");
			СтруктураПолей_.Вставить("Объект"		, "Объект");
			
			ПроверямаяСтруктура = Новый Структура("Подразделение,СпособОтраженияРасходов,ТаблицаОС", 
			Источник.ПодразделениеОрганизации, 
			Источник.СпособыОтраженияРасходовПоАмортизации,
			УчетОС.СформироватьЗапросПоТабличнойЧасти(Источник, "ОС", СтруктураПолей_).Выгрузить());
			
			мЗаголовок = СокрЛП(Источник);
			
			ОК_ОбщегоНазначения.ПроверкаУказанныхОбъектовСтроительстваВДокументе(ПроверямаяСтруктура, Отказ, мЗаголовок);
			
		КонецЕсли;																	 
		// ОКЕЙ Цветков А.(СофтЛаб) Конец 2018-06-06 (#3014)
		
		Если Источник.ВидОперации <> Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда 
			Возврат;
		КонецЕсли;	
		СчетЗамены			= Источник.СчетУчетаВнеоборотногоАктива;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.МодернизацияОС") Тогда 
		СчетЗамены			= Источник.СчетУчетаВнеоборотногоАктива;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеОС") Тогда
		// ОКЕЙ Наумов А.(СофтЛаб) Начало 2018-09-05 (#3010)
		мЗаголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Источник.Ссылка);
		Если Источник.ПодразделениеОрганизации.ОК_КонтрольОбъекта Тогда
			
			СтруктураПолей_ = Новый Структура;
			СтруктураПолей_.Вставить("НомерСтроки"	, "НомерСтроки");
			СтруктураПолей_.Вставить("Объект"	, "ОК_Объект");
			
			
			ПроверямаяСтруктура = Новый Структура("Подразделение,ТаблицаОС", 
				Источник.ПодразделениеОрганизации, 
				//Источник.СпособыОтраженияРасходовПоАмортизации,
				УчетОС.СформироватьЗапросПоТабличнойЧасти(Источник, "ОС", СтруктураПолей_).Выгрузить());
					
			ОК_ОбщегоНазначения.ПроверкаУказанныхОбъектовСтроительстваВДокументе(ПроверямаяСтруктура, Отказ, мЗаголовок);
			
		КонецЕсли;
		
		Если Источник.ПодразделениеПолучатель.ОК_КонтрольОбъекта тогда
			
			ПроверямаяСтруктура = Новый Структура("Подразделение,СпособОтраженияРасходов",
				Источник.ПодразделениеПолучатель,
				Источник.СпособОтраженияРасходовПоАмортизации);
				
			ОК_ОбщегоНазначения.ПроверкаУказанныхОбъектовСтроительстваВДокументе(ПроверямаяСтруктура, Отказ, Источник, "подразделении-получателе");
		Конецесли;
		Возврат; // по перемещениям больше ничего не делаем
		// ОКЕЙ Наумов А.(СофтЛаб) Конец 2018-09-05 (#3010)
	Иначе 
		Возврат;
	КонецЕсли;
	
// +СБ. Полякова Ирина. 2016-11-13. Redmine 2704
	Если  ТипЗнч(Источник) = Тип("ДокументОбъект.МодернизацияОС") 
		И Источник.СБ_РазрезеСтатейЗатратПропорционально 
		И Источник.СобытиеОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Дооборудование Тогда  
			СБ_КазначействоСервер.ПроведениеМодернизацияОСВРазрезеСтатейЗатратПропорционально(Источник, Отказ, РежимПроведения);
		Возврат;
	КонецЕсли;
// -СБ. Полякова Ирина  
	
	Если Не Источник.ОК_ВРазрезеСтатейЗатрат Тогда  
		Возврат;
	КонецЕсли;
	
//Проверка, в каждой строке Аналитики должно быть БУ = НУ + ПР + ВР	
	
	Для Каждого СтрокаТЧ из Источник.Аналитика Цикл 
		Если СтрокаТЧ.СуммаБУ <> СтрокаТЧ.СуммаНУ + СтрокаТЧ.СуммаПР + СтрокаТЧ.СуммаВР Тогда
			ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,"Доп. Аналитика, Строка " + СтрокаТЧ.НомерСтроки + ": Сумма БУ не равна сумме НУ + ПР + ВР");
			Отказ 			= Истина;
		КонецЕсли;
	КонецЦикла;
	
	//Формирование движений	
	ДвиженияБУ				= Источник.Движения.Хозрасчетный;
	ТЗДвиженияБУ			= ДвиженияБУ.Выгрузить();
	
	//ОК Калинин 271212	Разнесение сумм по основным средствам. Ошибка округление ложится на первое ОС в таб. части.
	строкиЗамены=ТЗДвиженияБУ.НайтиСтроки(Новый Структура("СчетКт",СчетЗамены));	
	строкиЗаменыКоличество=строкиЗамены.Количество();
	Если  строкиЗаменыКоличество>0 тогда       			
		Для Каждого СтрокаТЧ из Источник.Аналитика Цикл 
			ТЗДвиженияБУНовыеСтроки=ТЗДвиженияБУ.СкопироватьКолонки();
			Для каждого СтрокаЗамены из строкиЗамены
			Цикл	
				НовСтр				= ТЗДвиженияБУНовыеСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,СтрокаЗамены);
				НовСтр.Сумма		= СтрокаТЧ.СуммаБУ/строкиЗаменыКоличество;
				НовСтр.СуммаВРДт	= СтрокаТЧ.СуммаВР/строкиЗаменыКоличество;
				НовСтр.СуммаВРКт	= СтрокаТЧ.СуммаВР/строкиЗаменыКоличество;
				НовСтр.СуммаПРДт	= СтрокаТЧ.СуммаПР/строкиЗаменыКоличество;
				НовСтр.СуммаПРКт	= СтрокаТЧ.СуммаПР/строкиЗаменыКоличество;
				НовСтр.СуммаНУДт	= СтрокаТЧ.СуммаНУ/строкиЗаменыКоличество;
				НовСтр.СуммаНУКт	= СтрокаТЧ.СуммаНУ/строкиЗаменыКоличество;
				НовСтр.ВидСубконтоКт2= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
				НовСтр.СубконтоКт2	= СтрокаТЧ.СтатьяЗатрат;
				НовСтр.ПодразделениеКт= СтрокаТЧ.Подразделение;
						
			КонецЦикла;
			
			
			//Добавка потерь при округлении  в первую строку
			ДобавитьОстатокОтОкругления(ТЗДвиженияБУНовыеСтроки,СтрокаТЧ,"Сумма","СуммаБУ");	
			ДобавитьОстатокОтОкругления(ТЗДвиженияБУНовыеСтроки,СтрокаТЧ,"СуммаВРДт","СуммаВР");
			ДобавитьОстатокОтОкругления(ТЗДвиженияБУНовыеСтроки,СтрокаТЧ,"СуммаВРКт","СуммаВР");
			ДобавитьОстатокОтОкругления(ТЗДвиженияБУНовыеСтроки,СтрокаТЧ,"СуммаПРДт","СуммаПР");
			ДобавитьОстатокОтОкругления(ТЗДвиженияБУНовыеСтроки,СтрокаТЧ,"СуммаПРКт","СуммаПР");
			ДобавитьОстатокОтОкругления(ТЗДвиженияБУНовыеСтроки,СтрокаТЧ,"СуммаНУДт","СуммаНУ");
			ДобавитьОстатокОтОкругления(ТЗДвиженияБУНовыеСтроки,СтрокаТЧ,"СуммаНУКт","СуммаНУ");
		  
			
			//добавим новые строки			
			для каждого стрНов из  ТЗДвиженияБУНовыеСтроки
			цикл
				ТЗДвиженияБУНов=ТЗДвиженияБУ.Добавить();
				ЗаполнитьЗначенияСвойств(ТЗДвиженияБУНов,стрНов);
			конеццикла;
    	    
		Конеццикла;
		
		Для каждого СтрокаЗамены из строкиЗамены
		Цикл
			ТЗДвиженияБУ.Удалить(СтрокаЗамены);
		КонецЦикла;
	//ОК Калинин 	
				
		ДвиженияБУ.Загрузить(ТЗДвиженияБУ);
		
	КонецЕсли;
КонецПроцедуры // ОК_ПроведениеДокументовОС()

//Ванюков К. +// При проведении документа сейчас система формирует движения по регистру 
//«Контрольные значения бюджетов» и заполняет поле «Сумма сценария контроль» суммой 
//с учетом НДС. Необходимо: чтобы сумма подтягивалась из поля «Сумма без НДС сценарий» //2012-05-14
Процедура ОК_ПроведениеДокументовБК(Источник, Отказ, РежимПроведения) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_КорректировкаБюджета") Тогда 
	//Движения по регистру бит_КонтрольныеЗначенияБюджетов
	
		ТаблицаБДДС = ПодготовитьТаблицуБДДС(Источник.Ссылка);	
		
		ТаблицаДвижений = Источник.Движения.бит_КонтрольныеЗначенияБюджетов.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаБДДС Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			СценарийКонтролируемый = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролируемый сценарий",Источник.Сценарий, Справочники.СценарииПланирования); 
			Если НЕ ЗначениеЗаполнено(СценарийКонтролируемый) Тогда 
				Сообщить("Регистр <Настройки БК(БИТ)>, группа <Контролируемый сценарий>, имя настройки <"+Источник.Сценарий+">:");
				Сообщить("Не указан контролируемый сценарий",СтатусСообщения.Важное);
			иначе
				НоваяСтрока.СценарийКонтролируемый = СценарийКонтролируемый;
			КонецЕсли;
			НоваяСтрока.СуммаСценарийКонтроль = СтрокаТаблицы.СуммаСценарий;
			//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2018-07-05 (#3042)
			//НоваяСтрока.СуммаСценарийКонтрольСПревышением = СтрокаТаблицы.СуммаСценарий;
			//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2018-07-05 (#3042)
		КонецЦикла; 
		
		Источник.Движения.бит_КонтрольныеЗначенияБюджетов.мТаблицаДвижений = ТаблицаДвижений;
		Источник.Движения.бит_КонтрольныеЗначенияБюджетов.ДобавитьДвижение();

	КонецЕсли;
КонецПроцедуры

// Функция готовит таблицу БДДС для проведения
//
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений
//
Функция ПодготовитьТаблицуБДДС(Источник)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_КорректировкаБюджетаБДДС.Период_Старый КАК Период,
	               |	бит_КорректировкаБюджетаБДДС.Ссылка.ВалютаДокумента КАК Валюта,
	               |	бит_КорректировкаБюджетаБДДС.Ссылка.Сценарий,
	               |	бит_КорректировкаБюджетаБДДС.ЦФО_Старый КАК ЦФО,
	               |	бит_КорректировкаБюджетаБДДС.СтатьяОборотов_Старый КАК СтатьяОборотов,
	               |	бит_КорректировкаБюджетаБДДС.Контрагент_Старый КАК Контрагент,
	               |	бит_КорректировкаБюджетаБДДС.ДоговорКонтрагента_Старый КАК ДоговорКонтрагента,
	               |	бит_КорректировкаБюджетаБДДС.Проект_Старый КАК Проект,
	               |	бит_КорректировкаБюджетаБДДС.НоменклатурнаяГруппа_Старый КАК НоменклатурнаяГруппа,
				   //1c-izhtc spawn 31.07.15 (
				   //|	бит_КорректировкаБюджетаБДДС.Номенклатура_Старый КАК Номенклатура,
				   |	бит_КорректировкаБюджетаБДДС.Аналитика_5_Старый КАК Аналитика_5,
				   //1c-izhtc spawn 31.07.15 )
	               |	бит_КорректировкаБюджетаБДДС.БанковскийСчет_Старый КАК БанковскийСчет,
	               |	бит_КорректировкаБюджетаБДДС.Количество_Старый * -1 КАК Количество,
	               |	бит_КорректировкаБюджетаБДДС.СтавкаНДС_Старый КАК СтавкаНДС,
	               |	NULL КАК Ссылка,
	               |	бит_КорректировкаБюджетаБДДС.СуммаСценарий_Старый * -1 КАК СуммаСценарий_Old,
				   //1c-izhtc spawn 31.07.15 (
				   //|	бит_КорректировкаБюджетаБДДС.СуммаБезНДССценарий_Старый * -1 КАК СуммаСценарий,
				   //1c-izhtc spawn 31.07.15 )
	               |	бит_КорректировкаБюджетаБДДС.СуммаРегл_Старый * -1 КАК СуммаРегл,
				   //1c-izhtc spawn 31.07.15 (
				   //|	бит_КорректировкаБюджетаБДДС.СуммаБезНДСРегл_Старый * -1 КАК СуммаБезНДСРегл,
				   //1c-izhtc spawn 31.07.15 )
	               |	бит_КорректировкаБюджетаБДДС.СуммаУпр_Старый * -1 КАК СуммаУпр,
				   //1c-izhtc spawn 31.07.15 (
				   //|	бит_КорректировкаБюджетаБДДС.СуммаБезНДСУпр_Старый * -1 КАК СуммаБезНДСУпр,
				   //1c-izhtc spawn 31.07.15 )
	               |	бит_КорректировкаБюджетаБДДС.СуммаСценарий_Старый * -1 КАК Сумма,
				   //1c-izhtc spawn 31.07.15 (
				   //|	(бит_КорректировкаБюджетаБДДС.СуммаСценарий_Старый - бит_КорректировкаБюджетаБДДС.СуммаБезНДССценарий_Старый) * -1 КАК НДС,
				   //1c-izhtc spawn 31.07.15 )
	               |	бит_КорректировкаБюджетаБДДС.Аналитика_1_Старый КАК Аналитика_1,
	               |	бит_КорректировкаБюджетаБДДС.Аналитика_2_Старый КАК Аналитика_2,
	               |	бит_КорректировкаБюджетаБДДС.Аналитика_3_Старый КАК Аналитика_3,
	               |	бит_КорректировкаБюджетаБДДС.Аналитика_4_Старый КАК Аналитика_4
	               |ИЗ
	               |	Документ.бит_КорректировкаБюджета.БДДС КАК бит_КорректировкаБюджетаБДДС
	               |ГДЕ
	               |	бит_КорректировкаБюджетаБДДС.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	бит_КорректировкаБюджетаБДДС.Период,
	               |	бит_КорректировкаБюджетаБДДС.Ссылка.ВалютаДокумента,
	               |	бит_КорректировкаБюджетаБДДС.Ссылка.Сценарий,
	               |	бит_КорректировкаБюджетаБДДС.ЦФО,
	               |	бит_КорректировкаБюджетаБДДС.СтатьяОборотов,
	               |	бит_КорректировкаБюджетаБДДС.Контрагент,
	               |	бит_КорректировкаБюджетаБДДС.ДоговорКонтрагента,
	               |	бит_КорректировкаБюджетаБДДС.Проект,
	               |	бит_КорректировкаБюджетаБДДС.НоменклатурнаяГруппа,
				   //1c-izhtc spawn 31.07.15 (
				   //|	бит_КорректировкаБюджетаБДДС.Номенклатура,
				   |	бит_КорректировкаБюджетаБДДС.Аналитика_5,
				   //1c-izhtc spawn 31.07.15 )
	               |	бит_КорректировкаБюджетаБДДС.БанковскийСчет,
	               |	бит_КорректировкаБюджетаБДДС.Количество,
	               |	бит_КорректировкаБюджетаБДДС.СтавкаНДС,
	               |	NULL,
	               |	бит_КорректировкаБюджетаБДДС.СуммаСценарий КАК СуммаСценарий_Old,
				   //1c-izhtc spawn 31.07.15 (
				   //|	бит_КорректировкаБюджетаБДДС.СуммаБезНДССценарий Как СуммаСценарий,
				   //1c-izhtc spawn 31.07.15 )
	               |	бит_КорректировкаБюджетаБДДС.СуммаРегл,
				   //1c-izhtc spawn 31.07.15 (
				   //|	бит_КорректировкаБюджетаБДДС.СуммаБезНДСРегл,
				   //1c-izhtc spawn 31.07.15 )
	               |	бит_КорректировкаБюджетаБДДС.СуммаУпр,
				   //1c-izhtc spawn 31.07.15 (
				   //|	бит_КорректировкаБюджетаБДДС.СуммаБезНДСУпр,
				   //1c-izhtc spawn 31.07.15 )
	               |	бит_КорректировкаБюджетаБДДС.СуммаСценарий,
				   //1c-izhtc spawn 31.07.15 (
				   //|	бит_КорректировкаБюджетаБДДС.СуммаСценарий - бит_КорректировкаБюджетаБДДС.СуммаБезНДССценарий,
				   //1c-izhtc spawn 31.07.15 )
	               |	бит_КорректировкаБюджетаБДДС.Аналитика_1,
	               |	бит_КорректировкаБюджетаБДДС.Аналитика_2,
	               |	бит_КорректировкаБюджетаБДДС.Аналитика_3,
	               |	бит_КорректировкаБюджетаБДДС.Аналитика_4
	               |ИЗ
	               |	Документ.бит_КорректировкаБюджета.БДДС КАК бит_КорректировкаБюджетаБДДС
	               |ГДЕ
	               |	бит_КорректировкаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Источник);			   
	Результат = Запрос.Выполнить();
	
	ТаблицаБДДС = Результат.Выгрузить();
		
	Возврат ТаблицаБДДС;
	
КонецФункции // ПодготовитьТаблицуБДДС()


//Ванюков К. -


//ОК Калинин М. 201212

Процедура ОК_ПроставитьСубконтоМСФООперацииБух(ОперацияБух) Экспорт
	заполнитель=Обработки.ОК_ЗаполнениеСубконтоМСФОСторно.Создать();
	заполнитель.ВидСубконто=ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Объект;
	заполнитель.ОперацияБух=ОперацияБух.ссылка;
	заполнитель.НачалоПериода=ОперацияБух.ссылка.Дата;
	заполнитель.КонецПериода=ОперацияБух.ссылка.Дата;
	заполнитель.УстановитьОрганизациюОкей();
	отказ=ложь;
	заполнитель.Заполнить(отказ);
	Если не отказ тогда		
		заполнитель.ПодставитьЗначенияИзИсточника();
	конецесли;	
КонецПроцедуры	

Процедура ОК_ПриЗаписиОперацииБух(Источник, Отказ) Экспорт
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-08-09 (#2836)
	Если ЭтоИзменениеРеквизитовОбъектаБезПроведения(Источник) Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-08-09 (#2836)
	
	//	возврат;
	начало_=ТекущаяДата();
	ОК_ПроставитьСубконтоМСФООперацииБух(Источник);
	//сообщить("ОК_ПроставитьСубконтоМСФООперацииБух за "+строка(ТекущаяДата()-начало_));
КонецПроцедуры	
//ОК Калинин М.


//ОК Калинин М. 090713           
Процедура ОК_ОбработкаДвиженийРегламентнойОперации(Источник, Отказ, РежимПроведения, ЗаписыватьДвижения = Ложь) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	НаборИсточник=Источник.Движения.Хозрасчетный;	
	Если НаборИсточник.Количество() = 0 Тогда 				
		НаборИсточник.Прочитать();								
	КонецЕсли; 
	Выполнить(Справочники.бит_ПользовательскиеФункции.НайтиПоНаименованию("ПостОбработкаДвиженийРегламентнойОперации").КодПодпрограммы);	
КонецПроцедуры	
//ОК Калинин М.

//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-08-09 (#2836)

// Функция опеределяет наличие свойства "ИзменитьРеквизитыОбъектаБезПроведения" 
//
// Параметры:
//	Источник - документ-объект
//
Функция ЭтоИзменениеРеквизитовОбъектаБезПроведения(Источник) Экспорт
	Перем ИзменениеРеквизитовОбъектаБезПроведения;
	
	Источник.ДополнительныеСвойства.Свойство("ОК_ИзменениеРеквизитовОбъектаБезПроведения", ИзменениеРеквизитовОбъектаБезПроведения);
	Возврат (ИзменениеРеквизитовОбъектаБезПроведения = Истина);
	
КонецФункции
	
//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-08-09 (#2836)

//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-01-18 (#2963)
Функция ОбработатьСубконтоПередЗаписью(Проводки, Отказ) Экспорт
	
	ЕстьИзменения = Ложь;
	
	Если Проводки.ОбменДанными.Загрузка Тогда
		Возврат ЕстьИзменения;
	КонецЕсли;
	
	// получим настройку по организациям, для которых не требуется заполнять субконто "Документы расчетов с контрагентами"
	СписокОрганизаций_НеПогашатьЗадолженность = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_НеПогашатьЗадолженность");
	Если Не ТипЗнч(СписокОрганизаций_НеПогашатьЗадолженность) = Тип("СписокЗначений") Тогда // в настройках пусто, то и обрабатывать дальше нет смысла
		//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-06-17 (#НТП_МП_02)
		// на случай, если все организации исключат из настройки 
		//Возврат ЕстьИзменения;
		СписокОрганизаций_НеПогашатьЗадолженность = Новый СписокЗначений;
		//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-06-17 (#НТП_МП_02)
	КонецЕсли;
	
	// проверим, что проводки создаются не ручным способом
	Регистратор = Проводки.Отбор.Регистратор.Значение;
	ТипРегистратора = ТипЗнч(Регистратор);
	
	//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Начало 2021-04-20 (#ТП_БП11_ФР03)
	ОбработатьСубконтоПередЗаписью_КассовыеДокументы(Проводки, Регистратор, ТипРегистратора);
	//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Конец 2021-04-20 (#ТП_БП11_ФР03)
	
	ПроводкиВведеныПользователем = (ТипРегистратора = Тип("ДокументСсылка.ОперацияБух"));
		//ИЛИ (ОбщегоНазначения.ЕстьРеквизитОбъекта("РучнаяКорректировка", Регистратор.Метаданные())
		//И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "РучнаяКорректировка"));
	
	Если ПроводкиВведеныПользователем Тогда
		Возврат ЕстьИзменения;
	КонецЕсли;
	
	Для Каждого Проводка Из Проводки Цикл
		
		// проверим, что организации проводки и настройки совпадают
		ЕстьНастройкаДляОрганизации = НЕ СписокОрганизаций_НеПогашатьЗадолженность.НайтиПоЗначению(Проводка.Организация) = Неопределено;
		//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-06-17 (#НТП_МП_02)
		//Если Не ЕстьНастройкаДляОрганизации Тогда
		//	Возврат ЕстьИзменения;
		//КонецЕсли;	
		//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-06-17 (#НТП_МП_02)
		
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			
			Если Субконто.Ключ = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами") Тогда
				
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-14 (#НТП_МП_02)
				Договор = Проводка.СубконтоДт.Получить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры"));
				Если Договор <> Неопределено И Договор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
					//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-09-23 (#ТП_БП11_ФР04)
					////ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-06-17 (#НТП_МП_02)
					//ОчищатьСубконто = ЕстьНастройкаДляОрганизации Или ок_ПроверкаОчисткиСубконто(ТипРегистратора, Регистратор, Проводка, "Дт"); 
					////ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-06-17 (#НТП_МП_02)
					ОчищатьСубконто = ЕстьНастройкаДляОрганизации Или Договор.ок_ОчищатьСубконто3 
					                  Или ок_ПроверкаОчисткиСубконто(ТипРегистратора, Регистратор, Проводка, "Дт"); 
					//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-09-23 (#ТП_БП11_ФР04)
					Если ОчищатьСубконто Тогда
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-14 (#НТП_МП_02)
				
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-22 (#2963)
						//Проводка.СубконтоДт.Вставить(Субконто.Ключ, Неопределено);
						//Заменено на:
						Проводка.СубконтоДт.Удалить(Субконто.Ключ);
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-22 (#2963)
						ЕстьИзменения = Истина;
						
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-14 (#НТП_МП_02)
					КонецЕсли;
				КонецЕсли;
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-14 (#НТП_МП_02)
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			
			Если Субконто.Ключ = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами") Тогда				
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-14 (#НТП_МП_02)
				Договор = Проводка.СубконтоКт.Получить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры"));
				Если Договор <> Неопределено И Договор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
					//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-09-23 (#ТП_БП11_ФР04)
					////ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-06-17 (#НТП_МП_02)
					//ОчищатьСубконто = ЕстьНастройкаДляОрганизации Или ок_ПроверкаОчисткиСубконто(ТипРегистратора, Регистратор, Проводка, "Кт"); 
					////ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-06-17 (#НТП_МП_02)
					ОчищатьСубконто = ЕстьНастройкаДляОрганизации Или Договор.ок_ОчищатьСубконто3 
					                  Или ок_ПроверкаОчисткиСубконто(ТипРегистратора, Регистратор, Проводка, "Кт"); 
					//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-09-23 (#ТП_БП11_ФР04)
					Если ОчищатьСубконто Тогда
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-14 (#НТП_МП_02)
				
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-22 (#2963)
						//Проводка.СубконтоДт.Вставить(Субконто.Ключ, Неопределено);
						//Заменено на:
						Проводка.СубконтоКт.Удалить(Субконто.Ключ);
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-22 (#2963)
						ЕстьИзменения = Истина;
						
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-14 (#НТП_МП_02)
					КонецЕсли;
				КонецЕсли;
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-14 (#НТП_МП_02)
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

//ОКЕЙ Наумов А.Н..(СофтЛаб) Конец 2018-01-18 (#2963)


//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103
Процедура ок_ОтразитьПризнакСогласованияЭлектронногоДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 2019-05-20 (#3140)
	//Если Отказ Или Источник.ок_Согласован Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Источник.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован Тогда
	//	Источник.ок_Согласован = Истина;
	//КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//перенес из модуля объекта
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-03-28 (#3103)
	// переопределим 
	Если Источник.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован") Тогда
		Источник.ок_Согласован = Истина;
	ИначеЕсли Источник.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
		Источник.ок_Согласован = Ложь;
	ИначеЕсли Источник.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
		Источник.ок_Согласован = Ложь;
	ИначеЕсли Источник.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
		Источник.ок_Согласован = Ложь;	
	КонецЕсли;	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-03-28 (#3103)
	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 2019-05-20 (#3140)
	
КонецПроцедуры

Процедура ок_ОбновлениеИсторииСоглашенияОбИспользованииЭДПриЗаписи(Источник, Отказ) Экспорт
	
	Если Не Отказ Тогда
		РегистрыСведений.ок_ИсторияСоглашенияОбИспользованииЭД.ОбновитьИсторию(Источник);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ок_ОбновитьСостояниеЭДИсходящегоЭДПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ок_Статус = Перечисления.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Завершен Тогда
		Источник.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	ИначеЕсли Источник.ок_Статус = Перечисления.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Отправлен Тогда
		Источник.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
	ИначеЕсли Источник.ок_Статус = Перечисления.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Подписать Тогда
		Источник.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи;
	КонецЕсли;
	
КонецПроцедуры

Процедура ок_КонтрольНаличияРасчетаРеализацииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-10 (#3392)
	Если Не ЗначениеЗаполнено(ок_ОбменСКонтрагентамиВнутренний.ПолучитьДействующиеНастройкиОбменаЭДПоДокументу(Источник)) Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-10 (#3392)
	
	ЕстьНоменклатура = Ложь;
	
	ОбязательныеФрагменты = Новый Массив;
	ОбязательныеФрагменты.Добавить("перемен");
	ОбязательныеФрагменты.Добавить("арен");
	
	ДанныеУслуг = Источник.Услуги.Выгрузить(, "Номенклатура,Содержание");
	Для каждого Строка из ДанныеУслуг Цикл
		ЕстьВсеФрагменты = Истина;
		Для каждого ОбязательныйФрагмент из ОбязательныеФрагменты Цикл
			Если СтрНайти(НРег(Строка.Содержание), ОбязательныйФрагмент) = 0 Тогда
				ЕстьВсеФрагменты = Ложь;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Если ЕстьВсеФрагменты Тогда
			ЕстьНоменклатура = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ЕстьНоменклатура Тогда
		ДанныеНоменклатуры = ДанныеУслуг.ВыгрузитьКолонку("Номенклатура");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка,
			|	Номенклатура.Наименование КАК Наименование,
			|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&ДанныеНоменклатуры)";
		
		Запрос.УстановитьПараметр("ДанныеНоменклатуры", ДанныеНоменклатуры);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		ПроверяемыеРеквизиты = Новый Массив;
		ПроверяемыеРеквизиты.Добавить("Наименование");
		ПроверяемыеРеквизиты.Добавить("НаименованиеПолное");
		Пока Выборка.Следующий() Цикл
			Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
				ЕстьВсеФрагменты = Истина;
				Для каждого ОбязательныйФрагмент из ОбязательныеФрагменты Цикл
					Если Не СтрНайти(НРег(Выборка[ПроверяемыйРеквизит]),	ОбязательныйФрагмент) Тогда
						ЕстьВсеФрагменты = Ложь;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				Если ЕстьВсеФрагменты Тогда
					ЕстьНоменклатура = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;	
	
	ТекстСообщения = "";
	Если ЕстьНоменклатура Тогда
		Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
			ТекстСообщения = "К документу не приложен файл с расчетом.";
		ИначеЕсли Не ЗначениеЗаполнено(ок_ОбменСКонтрагентамиВнутренний.ПолучитьПрикладываемыйФайлКРеализации(Источник.Ссылка)) Тогда
			ТекстСообщения = "К документу не приложен файл с расчетом.";
		ИначеЕсли Источник.СуммаДокумента <> Источник.ок_СуммаДокументаПрисоединенныйФайлРасчета Тогда
			ТекстСообщения = "Сумма присоединенного файла с расчетом не совпадает с суммой документа.";
		КонецЕсли;	
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;	
	Иначе	
		Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
			Если ЗначениеЗаполнено(ок_ОбменСКонтрагентамиВнутренний.ПолучитьПрикладываемыйФайлКРеализации(Источник.Ссылка)) Тогда
				ТекстСообщения = "К документу возможно ошибочно приложен файл с расчетом.";
			КонецЕсли;	
		КонецЕсли;	
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , );
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

Процедура ок_ОбновитьСостояниеЭДИсходящегоДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.ок_Статус) Тогда
		Возврат;		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Данные.ДокументОснование КАК Документ
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК Данные
		|ГДЕ
		|	Данные.Ссылка = &Ссылка
		|	И Данные.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг";
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СсылкаНаОбъект = Выборка.Документ;
		
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		КонецЕсли;
		НоваяЗаписьНабора.ЭлектронныйДокумент = Источник.Ссылка;
		НоваяЗаписьНабора.СостояниеВерсииЭД = Источник.СостояниеЭДО;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-30 (#3614)
		НоваяЗаписьНабора.ок_СтатусЭД = Источник.ок_Статус;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-04 (#3816)
		//Если Источник.ПрофильНастроекЭДО <> ПредопределенноеЗначение("Справочник.ПрофилиНастроекЭДО.ПустаяСсылка" ) Тогда
		Если Не ПустаяСтрока(Источник.ИдентификаторОрганизации) Тогда	
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-04 (#3816)
			НоваяЗаписьНабора.ок_ВидДО = ПредопределенноеЗначение("Перечисление.ок_ВидыДокументооборота.Электронный");
		Иначе
			НоваяЗаписьНабора.ок_ВидДО = ПредопределенноеЗначение("Перечисление.ок_ВидыДокументооборота.Бумажный");
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-30 (#3614)
		
		Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении Тогда
			НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		ИначеЕсли НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
			НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ИначеЕсли НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
			НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция бит_ДополнительныхАналитикаНомерЗаявки() Экспорт
	
	Возврат ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ");
	
КонецФункции	
//ОКЕЙ Наумов А.Н..(СофтЛаб) Конец 2018-01-18 (#2963)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-09 (#3047)
Процедура ок_ПроведениеПоАналитикамБК(Источник, Отказ, РежимПроведения) Экспорт
	
	Перем пТаблицаДвижений,стрТаблицыДокумента,пНомерЗаявки,ОК_ID;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ТаблицыДокумента",стрТаблицыДокумента) Тогда 
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-14 (#3147)
	Источник.Движения.бит_КонтрольныеЗначенияБюджетов.ДополнительныеСвойства.Вставить("бит_БК_УстановкаСтатусаПослеПроведения", Истина);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-14 (#3147)
	
	Если Источник.ДополнительныеСвойства.Свойство("ДополнительныеАналитики") И 
		 Источник.ДополнительныеСвойства.ДополнительныеАналитики.Получить("NЗАЯВКИ")<>Неопределено
	Тогда 
		
		пНомерЗаявки =  Источник.ДополнительныеСвойства.ДополнительныеАналитики["NЗАЯВКИ"];	
		
	Иначе 
		
		пНомерЗаявки = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Источник.Ссылка,
									   	   ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ"), ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
		
	КонецЕсли;	 
	
	Если Не ЗначениеЗаполнено(пНомерЗаявки) Тогда 
		//Отказ = Истина;
		//
		//пТекстОшибки = НСтр("ru = 'Не задана доп. аналитика № заявки'");
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,
		
		Возврат;
	КонецЕсли;
		
	пЗапрос = Новый Запрос;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-28 (#3192)
	пЗапрос.УстановитьПараметр("ИсключаемыеСчета"	,	бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Проведение по БК", "Список счетов БУ исключений" ,Новый СписокЗначений));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-28 (#3192)
	пТекстЗапроса = "";
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-09-21 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		пТекст = 
		"ВЫБРАТЬ
		|	%ИмяТаблицы.Ссылка КАК Ссылка,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-28 (#3192)
		|	%ИмяТаблицы.Счет КАК Счет,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-28 (#3192)
		|	%ИмяТаблицы.НомерСтроки КАК НомерСтроки,
		|	%ИмяТаблицы.Период КАК Период,
		|	%ИмяТаблицы.ЦФО КАК ЦФО,
		|	Выразить(%ИмяТаблицы.ОК_ID_Разноска КАК Строка(9)) КАК ОК_ID_Разноска,
		|	%ИмяТаблицы.СтатьяОборотов КАК СтатьяОборотов,
		|	%ИмяТаблицы.ВидСтатьи КАК ВидСтатьи,
		|	%ИмяТаблицы.Проект КАК Проект,
		|	%ИмяТаблицы.Аналитика_2 КАК Аналитика_2,
		|	ВЫБОР КОГДА НЕ ВЫРАЗИТЬ(%ИмяТаблицы.Ссылка КАК Документ.АвансовыйОтчет).НДСВключенВСтоимость ТОГДА %ИмяТаблицы.СуммаРуб+%ИмяТаблицы.СуммаНДСРуб ИНАЧЕ %ИмяТаблицы.СуммаРуб КОНЕЦ КАК СуммаРуб,
		|	%ИмяТаблицы.СуммаНДСРуб КАК СуммаНДСРуб,	
		|	ВЫБОР КОГДА НЕ ВЫРАЗИТЬ(%ИмяТаблицы.Ссылка КАК Документ.АвансовыйОтчет).НДСВключенВСтоимость ТОГДА %ИмяТаблицы.СуммаВзаиморасчетов+%ИмяТаблицы.СуммаНДСВзаиморасчетов ИНАЧЕ %ИмяТаблицы.СуммаВзаиморасчетов КОНЕЦ КАК СуммаВзаиморасчетов,
		|	%ИмяТаблицы.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов
		|ПОМЕСТИТЬ ВТ0_%ИмяТаблицы
		|ИЗ
		|	%ИмяПараметраТаблицы КАК %ИмяТаблицы
		|;
		|";	
	Иначе
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-09-21 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)	

	пТекст = "ВЫБРАТЬ
	|	%ИмяТаблицы.Ссылка КАК Ссылка,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-28 (#3192)
	|	%ИмяТаблицы.Счет КАК Счет,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-28 (#3192)
	|	%ИмяТаблицы.НомерСтроки КАК НомерСтроки,
	|	%ИмяТаблицы.Период КАК Период,
	|	%ИмяТаблицы.ЦФО КАК ЦФО,
	|	Выразить(%ИмяТаблицы.ОК_ID_Разноска КАК Строка(9)) КАК ОК_ID_Разноска,
	|	%ИмяТаблицы.СтатьяОборотов КАК СтатьяОборотов,
	|	%ИмяТаблицы.ВидСтатьи КАК ВидСтатьи,
	|	%ИмяТаблицы.Проект КАК Проект,
	|	%ИмяТаблицы.Аналитика_2 КАК Аналитика_2,
	|	%ИмяТаблицы.СуммаРуб КАК СуммаРуб,
	|	%ИмяТаблицы.СуммаНДСРуб КАК СуммаНДСРуб,	
	|	%ИмяТаблицы.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	%ИмяТаблицы.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов
	|ПОМЕСТИТЬ ВТ0_%ИмяТаблицы
	|ИЗ
	|	%ИмяПараметраТаблицы КАК %ИмяТаблицы
	|;
	|";	
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-09-21 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)
	КонецЕсли;
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-09-21 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)	

	пТекстШаблонаГруппировочнойТаблицы = СтрЗаменить(пТекст,"ПОМЕСТИТЬ ВТ0_%ИмяТаблицы","ПОМЕСТИТЬ ВТ0_ИсходныеДанные");
	пТекстШаблонаГруппировочнойТаблицы = СтрЗаменить(пТекстШаблонаГруппировочнойТаблицы,";","");
	пТекстГруппировочнойТаблицы = "";
		
	Для Каждого стрТаблица Из стрТаблицыДокумента Цикл 
		
		пТекстЗапроса = пТекстЗапроса+пТекст;
		
		пТекстЗапроса = СтрЗаменить(пТекстЗапроса, "%ИмяТаблицы"		 , стрТаблица.Ключ);
		пТекстЗапроса = СтрЗаменить(пТекстЗапроса, "%ИмяПараметраТаблицы", "&"+стрТаблица.Ключ);
		
		Если стрТаблица.Значение.Колонки.Найти("ОК_ID_Разноска")=Неопределено Тогда 
			стрТаблица.Значение.Колонки.Добавить("ОК_ID_Разноска", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-28 (#3192)
		Если стрТаблица.Значение.Колонки.Найти("Счет")=Неопределено Тогда 
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
			//стрТаблица.Значение.Колонки.Добавить("Счет", Новый ОписаниеТипов(Тип("ПланСчетовСсылка.Хозрасчетный")));
			стрТаблица.Значение.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-28 (#3192)
		
		пЗапрос.УстановитьПараметр(стрТаблица.Ключ, стрТаблица.Значение);
				
		пТекстШаблонаГруппировочнойТаблицы = ?(ПустаяСтрока(пТекстГруппировочнойТаблицы), пТекстШаблонаГруппировочнойТаблицы, СтрЗаменить(пТекстШаблонаГруппировочнойТаблицы, "ПОМЕСТИТЬ ВТ0_ИсходныеДанные", ""));
		
		пТекстГруппировочнойТаблицы = пТекстГруппировочнойТаблицы + ?(ПустаяСтрока(пТекстГруппировочнойТаблицы),"","
																												   |
																									               |ОБЪЕДИНИТЬ
																									               |") +
																									               пТекстШаблонаГруппировочнойТаблицы;    		
		пТекстГруппировочнойТаблицы = СтрЗаменить(пТекстГруппировочнойТаблицы, "%ИмяТаблицы"		  , стрТаблица.Ключ);
		пТекстГруппировочнойТаблицы = СтрЗаменить(пТекстГруппировочнойТаблицы, "%ИмяПараметраТаблицы" , "ВТ0_"+стрТаблица.Ключ);
				
	КонецЦикла;
	
	пТекстЗапроса = пТекстЗапроса + пТекстГруппировочнойТаблицы;
	
	пТекстЗапроса = пТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ0_ИсходныеДанные.Ссылка КАК Регистратор,
	|	ВТ0_ИсходныеДанные.ЦФО КАК ЦФО,
	|	ВТ0_ИсходныеДанные.ОК_ID_Разноска КАК ОК_ID_Разноска,
	|	ВТ0_ИсходныеДанные.НомерСтроки КАК НомерСтроки,
	|	ВТ0_ИсходныеДанные.СтатьяОборотов КАК СтатьяОборотов,
	|	ВЫБОР
	|		КОГДА ВТ0_ИсходныеДанные.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_Инвест)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_У)
	|	КОНЕЦ КАК Сценарий,
	|	ВТ0_ИсходныеДанные.Период КАК Период,
	|	ВТ0_ИсходныеДанные.Проект КАК Проект,
	|	ВТ0_ИсходныеДанные.Аналитика_2 КАК Аналитика_2,
	|	СУММА(ВТ0_ИсходныеДанные.СуммаРуб) КАК СуммаСНДССценарий,
	|	СУММА(ВТ0_ИсходныеДанные.СуммаРуб) КАК СуммаСНДСРегл,
	|	СУММА(ВТ0_ИсходныеДанные.СуммаНДСРуб) КАК СуммаНДСРуб,
	|	СУММА(ВТ0_ИсходныеДанные.СуммаРуб-ВТ0_ИсходныеДанные.СуммаНДСРуб) КАК СуммаСценарий,	
	|	СУММА(ВТ0_ИсходныеДанные.СуммаРуб-ВТ0_ИсходныеДанные.СуммаНДСРуб) КАК СуммаРегл,
	|	СУММА(ВТ0_ИсходныеДанные.СуммаВзаиморасчетов-ВТ0_ИсходныеДанные.СуммаНДСВзаиморасчетов) КАК Сумма,
	|	СУММА(ВТ0_ИсходныеДанные.СуммаВзаиморасчетов) КАК СуммаСНДС
	|ИЗ
	|	ВТ0_ИсходныеДанные КАК ВТ0_ИсходныеДанные
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-28 (#3192)
	|ГДЕ
	|	НЕ ВТ0_ИсходныеДанные.Счет В(&ИсключаемыеСчета)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-28 (#3192)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ0_ИсходныеДанные.Ссылка,
	|	ВТ0_ИсходныеДанные.НомерСтроки,
	|	ВТ0_ИсходныеДанные.ОК_ID_Разноска,
	|	ВТ0_ИсходныеДанные.ЦФО,
	|	ВТ0_ИсходныеДанные.СтатьяОборотов,
	|	ВТ0_ИсходныеДанные.ВидСтатьи,
	|	ВЫБОР
	|		КОГДА ВТ0_ИсходныеДанные.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_Инвест)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_У)
	|	КОНЕЦ,
	|	ВТ0_ИсходныеДанные.Период,
	|	ВТ0_ИсходныеДанные.Проект,
	|	ВТ0_ИсходныеДанные.Аналитика_2
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ0_ИсходныеДанные.Ссылка КАК Регистратор,
	|	ВТ0_ИсходныеДанные.ЦФО КАК ЦФО,
	|	ВТ0_ИсходныеДанные.ОК_ID_Разноска КАК ОК_ID_Разноска,
	|	ВТ0_ИсходныеДанные.НомерСтроки КАК НомерСтроки,
	|	ВТ0_ИсходныеДанные.СтатьяОборотов КАК СтатьяОборотов,
	|	ВЫБОР
	|		КОГДА ВТ0_ИсходныеДанные.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Контракт_Инвест)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Заявка_У)
	|	КОНЕЦ КАК Сценарий,
	|	ВТ0_ИсходныеДанные.Период КАК Период,
	|	ВТ0_ИсходныеДанные.Проект КАК Проект,
	|	ВТ0_ИсходныеДанные.Аналитика_2 КАК Аналитика_2,
	|	СУММА(ВТ0_ИсходныеДанные.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ВТ0_ИсходныеДанные.СуммаНДСРуб) КАК СуммаНДСРуб,
	|	СУММА(ВТ0_ИсходныеДанные.СуммаРуб-ВТ0_ИсходныеДанные.СуммаНДСРуб) КАК СуммаБезНДСРуб
	|ПОМЕСТИТЬ ВТ1_СгруппированныеДанные
	|ИЗ
	|	ВТ0_ИсходныеДанные КАК ВТ0_ИсходныеДанные
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-28 (#3192)
	|ГДЕ
	|	НЕ ВТ0_ИсходныеДанные.Счет В(&ИсключаемыеСчета)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-28 (#3192)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ0_ИсходныеДанные.Ссылка,
	|	ВТ0_ИсходныеДанные.НомерСтроки,
	|	ВТ0_ИсходныеДанные.ОК_ID_Разноска,
	|	ВТ0_ИсходныеДанные.ЦФО,
	|	ВТ0_ИсходныеДанные.СтатьяОборотов,
	|	ВЫБОР
	|		КОГДА ВТ0_ИсходныеДанные.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Контракт_Инвест)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Заявка_У)
	|	КОНЕЦ,
	|	ВТ0_ИсходныеДанные.Период,
	|	ВТ0_ИсходныеДанные.Проект,
	|	ВТ0_ИсходныеДанные.Аналитика_2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ0_ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ1_СгруппированныеДанные.Регистратор КАК Регистратор,
	|	ВТ1_СгруппированныеДанные.ЦФО КАК ЦФО,
	|	ВТ1_СгруппированныеДанные.ОК_ID_Разноска КАК ОК_ID_Разноска,
	|	ВТ1_СгруппированныеДанные.НомерСтроки КАК НомерСтроки,
	|	ВТ1_СгруппированныеДанные.СтатьяОборотов КАК СтатьяОборотов,
	|	ВТ1_СгруппированныеДанные.Сценарий КАК Сценарий,
	|	ВТ1_СгруппированныеДанные.Период КАК Период,
	|	ВТ1_СгруппированныеДанные.Проект КАК Проект,
	|	ВТ1_СгруппированныеДанные.Аналитика_2 КАК Аналитика_2,
	|	МАКСИМУМ(ВЫРАЗИТЬ(СоответствияСценариев.ЗначениеСсылка КАК Справочник.СценарииПланирования)) КАК СценарийКонтролируемый,
	|	ВТ1_СгруппированныеДанные.СуммаРуб КАК СуммаРуб,
	|	ВТ1_СгруппированныеДанные.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ВТ1_СгруппированныеДанные.СуммаБезНДСРуб КАК СуммаБезНДСРуб
	|ПОМЕСТИТЬ ВТ2_Исполнение
	|ИЗ
	|	ВТ1_СгруппированныеДанные КАК ВТ1_СгруппированныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_НастройкиБК КАК СоответствияСценариев
	|		ПО (ВТ1_СгруппированныеДанные.Сценарий = (ВЫРАЗИТЬ(СоответствияСценариев.ИмяНастройки КАК Справочник.СценарииПланирования)))
	|		И СоответствияСценариев.Группа = ""Контролируемый сценарий""	
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ1_СгруппированныеДанные.Аналитика_2,
	|	ВТ1_СгруппированныеДанные.НомерСтроки,
	|	ВТ1_СгруппированныеДанные.Период,
	|	ВТ1_СгруппированныеДанные.Проект,
	|	ВТ1_СгруппированныеДанные.Сценарий,
	|	ВТ1_СгруппированныеДанные.Регистратор,
	|	ВТ1_СгруппированныеДанные.ЦФО,
	|	ВТ1_СгруппированныеДанные.ОК_ID_Разноска,
	|	ВТ1_СгруппированныеДанные.СтатьяОборотов,
	|	ВТ1_СгруппированныеДанные.СуммаРуб,
	|	ВТ1_СгруппированныеДанные.СуммаНДСРуб,
	|	ВТ1_СгруппированныеДанные.СуммаБезНДСРуб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СценарийКонтролируемый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ2_Исполнение.Регистратор КАК регистратор,
	|	ВТ2_Исполнение.НомерСтроки КАК НомерСтроки,
	|	ВТ2_Исполнение.ЦФО КАК ЦФО,
	|	ВТ2_Исполнение.ОК_ID_Разноска КАК ОК_ID_Разноска,
	|	ВТ2_Исполнение.СтатьяОборотов КАК СтатьяОборотов,
	|	МАКСИМУМ(ВТ2_Исполнение.СценарийКонтролируемый) КАК Сценарий,
	|	ВТ2_Исполнение.Период КАК Период,
	|	ВТ2_Исполнение.Проект КАК Проект,
	|	ВТ2_Исполнение.Аналитика_2 КАК Аналитика_2,
	|	ВЫРАЗИТЬ(СоответствияСценариев.ЗначениеСсылка КАК Справочник.СценарииПланирования) КАК СценарийКонтролируемый,
	|	ВТ2_Исполнение.СуммаРуб КАК СуммаРуб,
	|	ВТ2_Исполнение.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ВТ2_Исполнение.СуммаБезНДСРуб КАК СуммаБезНДСРуб
	|ПОМЕСТИТЬ ВТ3_Контроль
	|ИЗ
	|	ВТ2_Исполнение КАК ВТ2_Исполнение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_НастройкиБК КАК СоответствияСценариев
	|		ПО (ВТ2_Исполнение.СценарийКонтролируемый = (ВЫРАЗИТЬ(СоответствияСценариев.ИмяНастройки КАК Справочник.СценарииПланирования)))
	|		И СоответствияСценариев.Группа = ""Контролируемый сценарий""	
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ2_Исполнение.Аналитика_2,
	|	ВТ2_Исполнение.НомерСтроки,
	|	ВТ2_Исполнение.Период,
	|	ВТ2_Исполнение.Проект,
	|	ВТ2_Исполнение.Регистратор,
	|	ВТ2_Исполнение.ЦФО,
	|	ВТ2_Исполнение.ОК_ID_Разноска,
	|	ВТ2_Исполнение.СтатьяОборотов,
	|	ВТ2_Исполнение.СуммаРуб,
	|	ВТ2_Исполнение.СуммаНДСРуб,
	|	ВТ2_Исполнение.СуммаБезНДСРуб,
	|	ВЫРАЗИТЬ(СоответствияСценариев.ЗначениеСсылка КАК Справочник.СценарииПланирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ1_СгруппированныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ2_Исполнение.Регистратор КАК Регистратор,
	|	ВТ2_Исполнение.ЦФО КАК ЦФО,
	|	ВТ2_Исполнение.ОК_ID_Разноска КАК ОК_ID_Разноска,
	|	ВТ2_Исполнение.НомерСтроки КАК НомерСтроки,
	|	ВТ2_Исполнение.СтатьяОборотов КАК СтатьяОборотов,
	|	ВТ2_Исполнение.Сценарий КАК Сценарий,
	|	ВТ2_Исполнение.Период КАК Период,
	|	ВТ2_Исполнение.Проект КАК Проект,
	|	ВТ2_Исполнение.Аналитика_2 КАК Аналитика_2,
	|	ВТ2_Исполнение.СценарийКонтролируемый КАК СценарийКонтролируемый,
	|	ВТ2_Исполнение.СуммаРуб КАК СуммаСценарийИсполнениеСНДС,
	|	ВТ2_Исполнение.СуммаБезНДСРуб КАК СуммаСценарийИсполнение,
	|	0 КАК СуммаСценарийКонтроль,
	|	0 КАК СуммаСценарийКонтрольСНДС
	|ИЗ
	|	ВТ2_Исполнение КАК ВТ2_Исполнение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ3_Контроль.регистратор,
	|	ВТ3_Контроль.ЦФО,
	|	ВТ3_Контроль.ОК_ID_Разноска,
	|	ВТ3_Контроль.НомерСтроки,
	|	ВТ3_Контроль.СтатьяОборотов,
	|	ВТ3_Контроль.Сценарий,
	|	ВТ3_Контроль.Период,
	|	ВТ3_Контроль.Проект,
	|	ВТ3_Контроль.Аналитика_2,
	|	ВТ3_Контроль.СценарийКонтролируемый,
	|	0,
	|	0,
	|	ВТ3_Контроль.СуммаБезНДСРуб,
	|	ВТ3_Контроль.СуммаРуб
	|ИЗ
	|	ВТ3_Контроль КАК ВТ3_Контроль";
	
	пЗапрос.Текст = пТекстЗапроса;
	
	пРезультат = пЗапрос.ВыполнитьПакет();
	
	пЗапросШапка = Новый Запрос;
	пЗапросШапка.УстановитьПараметр("Ссылка"	,	Источник.Ссылка);
	
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-06-01 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		пЗапросШапка.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	бит_БК_НастройкиБК.ЗначениеСсылка КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
		|	АвансовыйОтчет.Дата КАК Дата,
		|	АвансовыйОтчет.Организация КАК Организация,
		|	АвансовыйОтчет.ВалютаДокумента КАК ВалютаДокумента
		|ИЗ
		|	РегистрСведений.бит_БК_НастройкиБК КАК бит_БК_НастройкиБК
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет КАК АвансовыйОтчет
		|		ПО (бит_БК_НастройкиБК.ИмяНастройки = ""Контрагент для АО"")
		|			И (бит_БК_НастройкиБК.Группа = ""Проведение по БК"")
		|			И (АвансовыйОтчет.Ссылка = &Ссылка)";
	Иначе
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-06-01 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)	
		
		пТекстШапка  = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документ.Контрагент КАК Контрагент,
		|	Документ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Документ.Дата КАК Дата,
		|	Документ.Организация КАК Организация,  	
		|	Документ.ВалютаДокумента КАК ВалютаДокумента
		|ИЗ
		|	Документ.%ИмяДокумента КАК Документ
		|ГДЕ
		|	Документ.Ссылка = &Ссылка";
		
		пЗапросШапка.Текст = СтрЗаменить(пТекстШапка, "%ИмяДокумента", Источник.Метаданные().Имя);
		
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-06-01 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)	
	КонецЕсли;
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-06-01 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)
	
	ВыборкаШапка = пЗапросШапка.Выполнить().Выбрать();
	ВыборкаШапка.Следующий();
	
	стрЗаполненияСумм = Новый Структура;
	стрЗаполненияСумм.Вставить("ВалютаРегламентированногоУчета"	, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	стрЗаполненияСумм.Вставить("бит_ВалютаУправленческогоУчета"	, Константы.бит_ВалютаУправленческогоУчета.Получить());
		
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОК_ID_Разноска", Источник.Метаданные()) Тогда 
		ОК_ID = Источник.ОК_ID_Разноска;
	КонецЕсли;
	
	Если Источник.Движения.Найти("бит_КонтрольныеЗначенияБюджетов") <> Неопределено Тогда 
		
		Выборка = пРезультат[пРезультат.Количество()-1].Выбрать();
		
		пТаблицаДвижений = Источник.Движения.бит_КонтрольныеЗначенияБюджетов.Выгрузить();
		пТаблицаДвижений.Очистить();
			
		Пока Выборка.Следующий() Цикл 
			
			пДвижение = пТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(пДвижение, Выборка);
			
			пДвижение.Аналитика_1 = пНомерЗаявки;
						
			Если Выборка.СценарийКонтролируемый<>ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У") Тогда 
				пДвижение.Контрагент		 = ВыборкаШапка.Контрагент;
				пДвижение.ДоговорКонтрагента = ВыборкаШапка.ДоговорКонтрагента;				
			КонецЕсли;
			
			Если пДвижение.СуммаСценарийКонтроль<>0 Тогда 
				пДвижение.СуммаСценарийКонтроль = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(пДвижение.СуммаСценарийКонтроль, ВыборкаШапка.Дата, пДвижение.Сценарий, стрЗаполненияСумм);			 
				//ID заполняется только для движений по контролю
				Если Не ЗначениеЗаполнено(Выборка.ОК_ID_Разноска) Тогда 
					пДвижение.Аналитика_4			  = ОК_ID;
				Иначе 
					пДвижение.Аналитика_4			  = Выборка.ОК_ID_Разноска;
				КонецЕсли;
				
				//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-01-23 (#3151)
				пДвижение.Аналитика_4			  = рс_ОбщийМодуль.ОбработатьID(пДвижение.Аналитика_4);
				//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-01-23 (#3151)
				
			КонецЕсли;
			
			Если пДвижение.СуммаСценарийКонтрольСНДС<>0 Тогда 
				пДвижение.СуммаСценарийКонтрольСНДС = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(пДвижение.СуммаСценарийКонтрольСНДС, ВыборкаШапка.Дата, пДвижение.Сценарий, стрЗаполненияСумм);			 
			КонецЕсли;
			
			
			Если пДвижение.СуммаСценарийИсполнение<>0 Тогда 
				пДвижение.СуммаСценарийИсполнение = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(пДвижение.СуммаСценарийИсполнение, ВыборкаШапка.Дата, пДвижение.Сценарий, стрЗаполненияСумм);			 				
			КонецЕсли;
			
			//Если пДвижение.СуммаСценарийИсполнениеСНДС<>0 Тогда 
			//	пДвижение.СуммаСценарийИсполнениеСНДС = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(пДвижение.СуммаСценарийИсполнениеСНДС, ВыборкаШапка.Дата, пДвижение.Сценарий, стрЗаполненияСумм);			 
			//КонецЕсли;
			пДвижение.СуммаСценарийИсполнениеСНДС = 0;
			
			пДвижение.бит_БК_Организация = ВыборкаШапка.Организация;
			
		КонецЦикла;
		
		пДвиженияКЗБ = Источник.Движения.бит_КонтрольныеЗначенияБюджетов;
		пДвиженияКЗБ.Записывать = Истина;
		пДвиженияКЗБ.мТаблицаДвижений = пТаблицаДвижений;
		пДвиженияКЗБ.ДобавитьДвижение();
				
	КонецЕсли;
	
	//ОпБ
	Если Источник.Движения.Найти("бит_ОборотыПоБюджетам") <> Неопределено Тогда
		пТаблицаДвижений = Источник.Движения.бит_ОборотыПоБюджетам.Выгрузить();
		пТаблицаДвижений.Очистить();
		
		Выборка = пРезультат[стрТаблицыДокумента.Количество() + 1].Выбрать();
		
		стрЗаполненияСумм.Вставить("Дата", Дата('00010101'));
		
		Пока Выборка.Следующий() Цикл 
			пДвижение = пТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(пДвижение, Выборка);
			
			пДвижение.Аналитика_1 = пНомерЗаявки;
			Если Не ЗначениеЗаполнено(Выборка.ОК_ID_Разноска) Тогда 
				пДвижение.Аналитика_4			  = ОК_ID;
			Иначе 
				пДвижение.Аналитика_4			  = Выборка.ОК_ID_Разноска;
			КонецЕсли;
			
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-01-23 (#3151)
			пДвижение.Аналитика_4			  = рс_ОбщийМодуль.ОбработатьID(пДвижение.Аналитика_4);
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-01-23 (#3151)
			
			пДвижение.Валюта 	 		 = ВыборкаШапка.ВалютаДокумента;
			пДвижение.бит_БК_Организация = ВыборкаШапка.Организация;
			
			пДвижение.Контрагент		 = ВыборкаШапка.Контрагент;
			пДвижение.ДоговорКонтрагента = ВыборкаШапка.ДоговорКонтрагента;			
			
			Если пДвижение.СуммаСценарий<>0 Тогда 
				пДвижение.СуммаСценарий = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(пДвижение.СуммаСценарий, ВыборкаШапка.Дата, пДвижение.Сценарий, стрЗаполненияСумм);			 
			КонецЕсли;
			
			Если пДвижение.СуммаСНДССценарий<>0 Тогда 
				пДвижение.СуммаСНДССценарий = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(пДвижение.СуммаСНДССценарий, ВыборкаШапка.Дата, пДвижение.Сценарий, стрЗаполненияСумм);			 
			КонецЕсли;
			
			пДвижение.СуммаУпр	   = бит_МеханизмТрансляции.ПересчитатьРеглУпр(пДвижение.СуммаСценарий	  , ВыборкаШапка.Дата, стрЗаполненияСумм);	
			пДвижение.СуммаСНДСУпр = бит_МеханизмТрансляции.ПересчитатьРеглУпр(пДвижение.СуммаСНДССценарий, ВыборкаШапка.Дата, стрЗаполненияСумм);		
			
		КонецЦикла;
		
		пДвиженияОпБ = Источник.Движения.бит_ОборотыПоБюджетам;
		пДвиженияОпБ.Записывать = Истина;
		пДвиженияОпБ.мТаблицаДвижений = пТаблицаДвижений;
		пДвиженияОпБ.ДобавитьДвижение();		
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ок_ЗаполнитьIDРазноскаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3102)
	//Перем пНомерЗаявки;
	//Заменено на:
	Перем пНомерЗаявки, Организация;
	мдИсточника = Источник.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", мдИсточника) Тогда 
		Организация = Источник.Организация;
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("бит_Организация", мдИсточника) Тогда 
		Организация = Источник.бит_Организация;
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("бит_БК_Организация", мдИсточника) Тогда 
		Организация = Источник.бит_БК_Организация;
    КонецЕсли;		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3102)
		
	Если Отказ ИЛИ
		 ЗначениеЗаполнено(Источник.ОК_ID_Разноска) ИЛИ
		 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3102)
		 //НЕ ЗначениеЗаполнено(Источник.Организация)
		 //Заменено на:
		 НЕ ЗначениеЗаполнено(Организация)
		 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3102)
		 
	Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДополнительныеАналитики") И 
		 Источник.ДополнительныеСвойства.ДополнительныеАналитики.Получить("NЗАЯВКИ")<>Неопределено
	Тогда 
		
		пНомерЗаявки =  Источник.ДополнительныеСвойства.ДополнительныеАналитики["NЗАЯВКИ"];	
		
	ИначеЕсли Источник.ДополнительныеСвойства.Свойство("ок_ФВБ") И
		 	  ЗначениеЗаполнено(Источник.ДополнительныеСвойства.ок_ФВБ)
	Тогда 
			  
		пНомерЗаявки =  Источник.ДополнительныеСвойства.ок_ФВБ;	
		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3102)
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерЗаявки", мдИсточника) Тогда 
		пНомерЗаявки = Источник.НомерЗаявки;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3102)
	
	Иначе 
		
		пНомерЗаявки = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Источник.Ссылка,
									   	   ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ"), ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
		
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-08 (#ПроектИнтеграцияАксапта12)
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты12") Тогда
		
		Если НЕ ЗначениеЗаполнено(Источник.E1COrderId)
			ИЛИ ЗначениеЗаполнено(Источник.ВаучерИсходногоДокумента)
			ИЛИ ЗначениеЗаполнено(Источник.ВаучерДокументаЗакупки) Тогда
			
			Если ЗначениеЗаполнено(Источник.ВаучерИсходногоДокументаСсылка) Тогда
				
				Источник.ОК_ID_Разноска = Источник.ВаучерИсходногоДокументаСсылка.ОК_ID_Разноска;
				
			ИначеЕсли ЗначениеЗаполнено(Источник.ВаучерДокументаЗакупкиСсылка) Тогда
				
				Источник.ОК_ID_Разноска = Источник.ВаучерДокументаЗакупкиСсылка.ОК_ID_Разноска;
				
			КонецЕсли; 
			
			Возврат;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(пНомерЗаявки) Тогда
			
			Если ЗначениеЗаполнено(Источник.НомерЗаявки) Тогда
				пНомерЗаявки = Источник.НомерЗаявки;
			Иначе
				пНомерЗаявки = Истина;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-08 (#ПроектИнтеграцияАксапта12)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3102)
	// генерация ID только в случае, если смогли определить заявку - ФВБ
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3102)
	Если Не ЗначениеЗаполнено(пНомерЗаявки) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Номер) Тогда
		Источник.УстановитьНовыйНомер(); 
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3102)
	//Источник.ОК_ID_Разноска = ПолучитьID_Разноска(Источник.Дата, Источник.Номер, Источник.Организация.Код);
	//Заменено на:
	Источник.ОК_ID_Разноска = ПолучитьID_Разноска(Источник, Организация);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3102)
	
КонецПроцедуры

Функция ПолучитьID_Разноска(Источник, Знач Организация) Экспорт 
	
	СтрокаРезультат = "";
	
	МетаданныеОбъекта = Источник.Метаданные();
	
	Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		Возврат СтрокаРезультат;
	КонецЕсли;
	
	ИмяОбъекта        = МетаданныеОбъекта.Имя;
	ВидОбъекта        = бит_ПраваДоступа.ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);	
	ИмяОбъектаПолное  = бит_ПраваДоступа.ПолучитьПолноеИмяОбъекта(ИмяОбъекта, ВидОбъекта);
	
	ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ИмяОбъектаПолное);
	Если НЕ ЗначениеЗаполнено(ОбъектСистемы) Тогда
    	Возврат СтрокаРезультат;	
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-06-04 (#4191)
	//НомерДокумента	= Формат(Число(Прав(Источник.Номер, 5)),"ЧЦ=5; ЧН=0; ЧВН=; ЧГ=0");
	ВключитьАлгоритмФормированияIDРазноскиВ25ойСистемеСчисления = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Общая", "ВключитьАлгоритмФормированияIDРазноскиВ25ойСистемеСчисления", Ложь);
	Если ВключитьАлгоритмФормированияIDРазноскиВ25ойСистемеСчисления Тогда
		НомерДокумента = Число(бит_ОбщегоНазначенияКлиентСервер.ПолучитьНомерНаПечать(Источник));
		НомерДокумента = ОК_ОбщегоНазначения.DecToAny(НомерДокумента, 25, "123456789вбгджилмпфцчшщюя");
		НомерДокумента = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерДокумента, 5, "1", "Слева");
	Иначе
		НомерДокумента	= Формат(Число(Прав(Источник.Номер, 5)),"ЧЦ=5; ЧН=0; ЧВН=; ЧГ=0");
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-06-04 (#4191)
	
	ГодДокумента	= Формат(Прав(Год(Источник.Дата), 1),"ЧЦ=1; ЧВН=; ЧГ=0");
	// получим доп. реквизит организации
	ИмяНастройкиХраненияПрефиксаID = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("ГенерацияID", "НаименованиеДопРеквизита", СтрокаРезультат);
	Если Не ЗначениеЗаполнено(ИмяНастройкиХраненияПрефиксаID) Тогда
		Возврат СтрокаРезультат;
	КонецЕсли;
	
	Организация = бит_МеханизмТрансляции.ЗначениеДопРеквизита(Организация, "ДополнительныйРеквизит", ИмяНастройкиХраненияПрефиксаID);
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = "0";
	КонецЕсли;	
	Организация		= Формат(Прав(Организация,1),"ЧЦ=1; ЧВН=; ЧГ=0; ЧН=0");
	
	// вид операции
	ВидОперации = ОбъектСистемы.ок_КодДляID;
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = "0";
	КонецЕсли;
	
	ВидОперации		= Формат(Прав(ВидОперации,1),"ЧЦ=1; ЧВН=; ЧГ=0; ЧН=0");
	// Рез(8) = вид документа(1) + организация(1) + год(1) + номер документа(5)
	// ID = Рез(первые 4) + "-" + Рез(последние 4)
	СтрокаРезультат = бит_МеханизмХозяйственныхОперацийСервер.ДобавитьЛидирующиеНули(ВидОперации + Организация + ГодДокумента + НомерДокумента, 8);
		
	Возврат Сред(СтрокаРезультат,1,4) + "-" + Сред(СтрокаРезультат,5,4);
	
	//Если Год(Дата)>2016 Тогда 
	//	Префикс = Формат(Год(Дата)-2015,"ЧЦ=1");
	//Иначе
	//	Префикс = Формат(1,"ЧЦ=1");
	//КонецЕсли;
	//ПрефиксОрг = Формат(Число(Прав(КодОрганизации,1)),"ЧЦ=1; ЧВН=; ЧГ=0; ЧН=0");
	//Корень = Формат(Число(Прав(Номер,5)),"ЧЦ=5; ЧВН=; ЧГ=0");
	//СтрокаРезультат = Префикс + ПрефиксОрг + Корень;
	//	
	////вычисляем постфикс
	//Сумма = 0;
	//Для сч = 0 по 6 Цикл
	//	НомерСимвола = 7-сч; //от 7 до 1
	//	СимволС = Сред(СтрокаРезультат,НомерСимвола,1);
	//	СимволЧ = Число(СимволС);
	//	Если Цел(НомерСимвола/2) = НомерСимвола/2 Тогда
	//		СимволЧ = СимволЧ * 2;
	//		Если СимволЧ > 9 Тогда 
	//			СимволЧ = СимволЧ - 9;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Сумма = Сумма + СимволЧ;
	//КонецЦикла;
	//Сумма = (1-(Сумма/10 - Цел(Сумма/10)))*10;
	//Если Сумма = 10 Тогда 
	//	Сумма = 0;
	//КонецЕсли;
	//СтрокаРезультат = СтрокаРезультат + Строка(Сумма);
	//	
	//Возврат Сред(СтрокаРезультат,1,4) + "-" + Сред(СтрокаРезультат,5,4); 
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-09 (#3047)

//ОКЕЙ Поздняков А.(СофтЛаб) Начало 2018-09-30 (#3092)
Процедура ок_ПередЗаписью_Документы_ЗаполнениеТЧДляСтруктурыПодчиненностиПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//ОКЕЙ Боровинская О.(СофтЛаб) Начало 2018-12-07 (#3126)
	//Если Источник.ОбменДанными.Загрузка Тогда
	//Заменено на:
	Если Источник.ОбменДанными.Загрузка И НЕ ЭтоИзменениеРеквизитовОбъектаБезПроведения(Источник) Тогда
	//ОКЕЙ Боровинская О.(СофтЛаб) Конец 2018-12-07 (#3126)
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Источник));
		
	Если МетаданныеДокумента = Неопределено Тогда 
		Возврат; // не нашли в МД
	КонецЕсли;
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ок_СтруктураПодчиненностиБК") = Неопределено Тогда
		Возврат; // процедура работает только с ТЧ "ок_СтруктураПодчиненностиБК"		
	КонецЕсли;
	
	Источник.ок_СтруктураПодчиненностиБК.Очистить();
	ОбъектДляПоиска = Источник;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ОперацияБух") Тогда

		Если ЗначениеЗаполнено(Источник.СторнируемыйДокумент) Тогда
			Возврат; // не заполням ТЧ, чтобы отразить ЗнРДС "под" документом-основанием в дереве структуры
		КонецЕсли;
		
		ОбъектДляПоиска = Источник.Движения.бит_ОборотыПоБюджетам;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредств") Тогда

		Если ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
			Возврат; // не заполням ТЧ, чтобы отразить ЗнРДС "под" документом-основанием в дереве структуры
		КонецЕсли;
		
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-16 (#3101)
	//МассивДокументовФВБ 				= ПолучитьМассивДокументовФормаВводаБюджета(Источник, ОбъектДляПоиска, Тип("ДокументСсылка.бит_ФормаВводаБюджета"));
	//Заменено на:
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты") Тогда 
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты12") Тогда 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
		
		стрФВБ = РегистрыСведений.бит_ДополнительныеДанныеПоОперациямАксапты.Получить(Новый Структура("Документ",Источник.Ссылка));
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-24 (#ПроектИнтеграцияАксапта12)
		//Если НЕ стрФВБ.Свойство("НомерЗаявки") ИЛИ
		//	 НЕ ЗначениеЗаполнено(стрФВБ.НомерЗаявки)
		//Тогда 
		//	Возврат;
		//КонецЕсли;
		//
		//МассивДокументовФВБ = Новый Массив;
		//МассивДокументовФВБ.Добавить(стрФВБ.НомерЗаявки);
		
		МассивДокументовФВБ = Новый Массив;
		
		Если стрФВБ.Свойство("НомерЗаявки") 
			И ЗначениеЗаполнено(стрФВБ.НомерЗаявки) Тогда 
			
			МассивДокументовФВБ.Добавить(стрФВБ.НомерЗаявки);
			
		КонецЕсли;
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты12") 
			И ЗначениеЗаполнено(Источник.НомерЗаявки)
			И МассивДокументовФВБ.Найти(Источник.НомерЗаявки) = Неопределено Тогда
			
			МассивДокументовФВБ.Добавить(Источник.НомерЗаявки);
			
		КонецЕсли;
		
		Если МассивДокументовФВБ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-24 (#ПроектИнтеграцияАксапта12)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-28 (#3290)
		//ОбъектДляПоиска = Источник.Движения.бит_ок_ОборотыАксапты;
		//ОбъектДляПоиска.Прочитать();		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-28 (#3290)
		
	Иначе 
		МассивДокументовФВБ 				= ПолучитьМассивДокументовФормаВводаБюджета(Источник, ОбъектДляПоиска, Тип("ДокументСсылка.бит_ФормаВводаБюджета"));
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-16 (#3101)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-10-11 (#4193)
	// Не заполнять ФВБ контракт для документа ОА12 с типом 250 и ОА12.ДокументЗакупки, имеющие в подчинении ФВБ
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты12")
		И Источник.DocType = "250" Тогда
		
		ОперацияАксапты_ФВБ = РегистрыСведений.бит_ДополнительныеДанныеПоОперациямАксапты.Получить(Новый Структура("Документ",Источник.Ссылка));
		Если ОперацияАксапты_ФВБ.Свойство("НомерЗаявки")
			И ЗначениеЗаполнено(ОперацияАксапты_ФВБ.НомерЗаявки) Тогда
			
			ДокументЗакупки_ФВБ = РегистрыСведений.бит_ДополнительныеДанныеПоОперациямАксапты.Получить(Новый Структура("Документ",Источник.ВаучерДокументаЗакупкиСсылка));
			Если ДокументЗакупки_ФВБ.Свойство("НомерЗаявки")
				И ЗначениеЗаполнено(ДокументЗакупки_ФВБ.НомерЗаявки) Тогда
			
				Если МассивДокументовФВБ.Количество() > 0 Тогда 
					
					ЭлСтрПодчиненности = Источник.ок_СтруктураПодчиненностиБК.Добавить();
					ЭлСтрПодчиненности.ФормаВводаБюджета = МассивДокументовФВБ[0];
					ЭлСтрПодчиненности.ИнвестиционнаяФВБ = Ложь;
					
				КонецЕсли;
				
				Источник.ок_НеНайденКонтракт = Ложь;
				
				Возврат;
			
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-10-11 (#4193)
	
	ТаблицаДокументовФВБПоВидамСтатей 	= ПолучитьТаблицуДокументовПоВидамСтатей(МассивДокументовФВБ);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-24 (#3382)
	//ТаблицаДокументовФВБПоДоговорам 	= ПолучитьТаблицуДокументовПоДоговорам(Источник, ОбъектДляПоиска, ТаблицаДокументовФВБПоВидамСтатей);
	//Заменено на:
	мДоговоровОперАксапты = Новый Массив;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты") Тогда 
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты12") Тогда 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
		Если ТаблицаДокументовФВБПоВидамСтатей.Найти(Истина,"ЕстьИнвестиционныеСтатьи") = Неопределено Тогда //Только опер
			
			Источник.ок_НеНайденКонтракт = Ложь;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-08-12 (#3425)
			Для Каждого ЭлементТЗ Из ТаблицаДокументовФВБПоВидамСтатей Цикл
				
				НоваяСтрока = Источник.ок_СтруктураПодчиненностиБК.Добавить();
				НоваяСтрока.ФормаВводаБюджета = ЭлементТЗ.Документ;						
				
			КонецЦикла;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-08-12 (#3425)
			
			Возврат;
			
		Иначе 
			
			
			мДоговоровОперАксапты = ПолучитьМассивДоговоровПоТЧОборотыАксапты(Источник);
			
			//Если в документе есть инвест статья (найденная по сопоставлению с рег./ПиДР статьей ТЧ ОборотыАксапты), то безусловно взводим флаг "Контракт не найден"
			Если мДоговоровОперАксапты.Найти(ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"))<>Неопределено Тогда 
				Источник.ок_НеНайденКонтракт = Истина;
				
				Если МассивДокументовФВБ.Количество()>0 Тогда 
					ЭлСтрПодчиненности = Источник.ок_СтруктураПодчиненностиБК.Добавить();
					ЭлСтрПодчиненности.ФормаВводаБюджета = МассивДокументовФВБ[0];
					ЭлСтрПодчиненности.ИнвестиционнаяФВБ = Ложь;
				КонецЕсли;
				
				Возврат;
			ИначеЕсли ТаблицаДокументовФВБПоВидамСтатей.Найти(Истина,"ЕстьОперационныеСтатьи")<>Неопределено
				И мДоговоровОперАксапты.Количество() = 0 
				Тогда //Только опер. статьи
				Источник.ок_НеНайденКонтракт = Ложь;
				
				Если МассивДокументовФВБ.Количество()>0 Тогда 
					ЭлСтрПодчиненности = Источник.ок_СтруктураПодчиненностиБК.Добавить();
					ЭлСтрПодчиненности.ФормаВводаБюджета = МассивДокументовФВБ[0];
					ЭлСтрПодчиненности.ИнвестиционнаяФВБ = Ложь;
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДокументовФВБПоДоговорам 	= ПолучитьТаблицуДокументовПоДоговорам(Источник, ОбъектДляПоиска, ТаблицаДокументовФВБПоВидамСтатей, мДоговоровОперАксапты);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-24 (#3382)
	ТаблицаДокументовФВБКонтракт 		= ПолучитьТаблицуДокументовФВБКонтракт(ТаблицаДокументовФВБПоДоговорам);                                                                                                                                                                           
	
	Для Каждого ЭлементТЗ Из ТаблицаДокументовФВБКонтракт Цикл
		
		НоваяСтрока = Источник.ок_СтруктураПодчиненностиБК.Добавить();
		НоваяСтрока.ФормаВводаБюджета = ЭлементТЗ.ДокументыФВБКонтракт;
		НоваяСтрока.ИнвестиционнаяФВБ = ?(НоваяСтрока.ФормаВводаБюджета.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт"), Истина, Ложь)
		
	КонецЦикла;
	
	Для Каждого ЭлементТЗ Из ТаблицаДокументовФВБПоВидамСтатей Цикл
		
		Если ТаблицаДокументовФВБКонтракт.Найти(ЭлементТЗ.Документ, "ДокументыФВБ") = Неопределено Тогда
			НоваяСтрока = Источник.ок_СтруктураПодчиненностиБК.Добавить();
			НоваяСтрока.ФормаВводаБюджета = ЭлементТЗ.Документ;		
			НоваяСтрока.ИнвестиционнаяФВБ = ?(НоваяСтрока.ФормаВводаБюджета.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт"), Истина, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	Источник.ок_СтруктураПодчиненностиБК.Свернуть("ФормаВводаБюджета", "ИнвестиционнаяФВБ");
	Источник.ок_СтруктураПодчиненностиБК.Сортировать("ИнвестиционнаяФВБ Убыв");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-16 (#3101)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты") Тогда 
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты") 
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.бит_ок_ОперацияАксапты12") Тогда 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
		
		мИнвестФВБ = ТаблицаДокументовФВБПоВидамСтатей.НайтиСтроки(Новый Структура("ЕстьИнвестиционныеСтатьи", Истина));
		Если мИнвестФВБ.Количество() > 0 Тогда 
			мКонтракты = Источник.ок_СтруктураПодчиненностиБК.НайтиСтроки(Новый Структура("ИнвестиционнаяФВБ", Истина));
			ТаблицаДокументовФВБПоДоговорам.Свернуть("Договор");
			Источник.ок_НеНайденКонтракт = мКонтракты.Количество() <> ТаблицаДокументовФВБПоДоговорам.Количество();//Т.к. допускаем, что на один договор может быть создан только один документ ФВБ Контракт
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-04-11 (#3325)
		Иначе
			Источник.ок_НеНайденКонтракт = Ложь;
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-04-11 (#3325)
		КонецЕсли;
		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-16 (#3101)
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-24 (#3382)
Функция ПолучитьМассивДоговоровПоТЧОборотыАксапты(ОперацияАксапты)
	
	ТабСтатьяДоговор = Новый ТаблицаЗначений;
	ТабСтатьяДоговор.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	мТиповСтатей = Новый Массив;
	мТиповСтатей.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
	мТиповСтатей.Добавить(Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
	
	ТабСтатьяДоговор.Колонки.Добавить("Статья", Новый ОписаниеТипов(мТиповСтатей));
	
	Для Каждого стрОборотыАксапты Из ОперацияАксапты.ОборотыАксапты Цикл 
		
		ТекСтатья  = Неопределено;
		
		Если ЗначениеЗаполнено(стрОборотыАксапты.Субконто1СДт1)
		   И ТабСтатьяДоговор.Колонки.Статья.ТипЗначения.СодержитТип(ТипЗнч(стрОборотыАксапты.Субконто1СДт1)) 
		Тогда 
			ТекСтатья = стрОборотыАксапты.Субконто1СДт1;
		ИначеЕсли ЗначениеЗаполнено(стрОборотыАксапты.Субконто1СДт2)
		   		И ТабСтатьяДоговор.Колонки.Статья.ТипЗначения.СодержитТип(ТипЗнч(стрОборотыАксапты.Субконто1СДт2)) 
		Тогда 
			ТекСтатья = стрОборотыАксапты.Субконто1СДт2;
		ИначеЕсли ЗначениеЗаполнено(стрОборотыАксапты.Субконто1СДт3)
		   		И ТабСтатьяДоговор.Колонки.Статья.ТипЗначения.СодержитТип(ТипЗнч(стрОборотыАксапты.Субконто1СДт3))  
		Тогда 
			ТекСтатья = стрОборотыАксапты.Субконто1СДт3;
		ИначеЕсли ЗначениеЗаполнено(стрОборотыАксапты.Субконто1СДт4)
		   		И ТабСтатьяДоговор.Колонки.Статья.ТипЗначения.СодержитТип(ТипЗнч(стрОборотыАксапты.Субконто1СДт4))  
		Тогда 
			ТекСтатья = стрОборотыАксапты.Субконто1СДт4;
		ИначеЕсли ЗначениеЗаполнено(стрОборотыАксапты.Субконто1СДт5)
		   		И ТабСтатьяДоговор.Колонки.Статья.ТипЗначения.СодержитТип(ТипЗнч(стрОборотыАксапты.Субконто1СДт5))  
		Тогда 
			ТекСтатья = стрОборотыАксапты.Субконто1СДт5;
		ИначеЕсли ЗначениеЗаполнено(стрОборотыАксапты.Субконто1СКт1)
		   		И ТабСтатьяДоговор.Колонки.Статья.ТипЗначения.СодержитТип(ТипЗнч(стрОборотыАксапты.Субконто1СКт1))  
		Тогда 
			ТекСтатья = стрОборотыАксапты.Субконто1СКт1;
		ИначеЕсли ЗначениеЗаполнено(стрОборотыАксапты.Субконто1СКт2)
		   		И ТабСтатьяДоговор.Колонки.Статья.ТипЗначения.СодержитТип(ТипЗнч(стрОборотыАксапты.Субконто1СКт2))  
		Тогда 
			ТекСтатья = стрОборотыАксапты.Субконто1СКт2;
		ИначеЕсли ЗначениеЗаполнено(стрОборотыАксапты.Субконто1СКт3)
		   		И ТабСтатьяДоговор.Колонки.Статья.ТипЗначения.СодержитТип(ТипЗнч(стрОборотыАксапты.Субконто1СКт3))  
		Тогда 
			ТекСтатья = стрОборотыАксапты.Субконто1СКт3;
		ИначеЕсли ЗначениеЗаполнено(стрОборотыАксапты.Субконто1СКт4)
		   		И ТабСтатьяДоговор.Колонки.Статья.ТипЗначения.СодержитТип(ТипЗнч(стрОборотыАксапты.Субконто1СКт4))  
		Тогда 
			ТекСтатья = стрОборотыАксапты.Субконто1СКт4;
		ИначеЕсли ЗначениеЗаполнено(стрОборотыАксапты.Субконто1СКт5)
		   		И ТабСтатьяДоговор.Колонки.Статья.ТипЗначения.СодержитТип(ТипЗнч(стрОборотыАксапты.Субконто1СКт5))  
		Тогда 
			ТекСтатья = стрОборотыАксапты.Субконто1СКт5;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтатья) Тогда 
			
			ТекДоговор = Неопределено;
			
			Если ТипЗнч(стрОборотыАксапты.Субконто1СДт1) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ТекДоговор = стрОборотыАксапты.Субконто1СДт1;
			ИначеЕсли ТипЗнч(стрОборотыАксапты.Субконто1СДт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ТекДоговор = стрОборотыАксапты.Субконто1СДт2;
			ИначеЕсли ТипЗнч(стрОборотыАксапты.Субконто1СДт3) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ТекДоговор = стрОборотыАксапты.Субконто1СДт3;
			ИначеЕсли ТипЗнч(стрОборотыАксапты.Субконто1СДт4) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ТекДоговор = стрОборотыАксапты.Субконто1СДт4;
			ИначеЕсли ТипЗнч(стрОборотыАксапты.Субконто1СДт5) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ТекДоговор = стрОборотыАксапты.Субконто1СДт5;
			ИначеЕсли ТипЗнч(стрОборотыАксапты.Субконто1СКт1) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ТекДоговор = стрОборотыАксапты.Субконто1СКт1;
			ИначеЕсли ТипЗнч(стрОборотыАксапты.Субконто1СКт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ТекДоговор = стрОборотыАксапты.Субконто1СКт2;
			ИначеЕсли ТипЗнч(стрОборотыАксапты.Субконто1СКт3) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ТекДоговор = стрОборотыАксапты.Субконто1СКт3;
			ИначеЕсли ТипЗнч(стрОборотыАксапты.Субконто1СКт4) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ТекДоговор = стрОборотыАксапты.Субконто1СКт4;
			ИначеЕсли ТипЗнч(стрОборотыАксапты.Субконто1СКт5) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ТекДоговор = стрОборотыАксапты.Субконто1СКт5;				
			КонецЕсли;	
			
			СтрТабСтатьяДоговор = ТабСтатьяДоговор.Добавить();
			СтрТабСтатьяДоговор.ДоговорКонтрагента = ТекДоговор;
			СтрТабСтатьяДоговор.Статья			   = ТекСтатья;
			
		КонецЕсли;		
			
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиДоговоры.Статья КАК Статья,
	|	СтатьиДоговоры.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ0_ИсходныеДанные
	|ИЗ
	|	&СтатьиДоговоры КАК СтатьиДоговоры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ0_ИсходныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	ВТ0_ИсходныеДанные КАК ВТ0_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	|		ПО ВТ0_ИсходныеДанные.Статья = бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
	|ГДЕ
	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)";
	Запрос.УстановитьПараметр("СтатьиДоговоры"	,	ТабСтатьяДоговор);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаРезультат.ВыгрузитьКолонку("ДоговорКонтрагента");
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-24 (#3382)

Функция ПолучитьМассивДокументовФормаВводаБюджета(Источник, ОбъектДляПоиска, Тип)
	
	МассивДокументовФВБ = Новый Массив;
			
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектДляПоиска));
	
	Если МетаданныеДокумента = Неопределено Тогда 
		Возврат МассивДокументовФВБ;
	КонецЕсли;
		
	МассивДокументовФВБ = ПолучитьМассивЗначенийВДокументеПоТипу(ОбъектДляПоиска, Тип("ДокументСсылка.бит_ФормаВводаБюджета"), МассивДокументовФВБ);
	
	Если ТипЗнч(Источник.ДополнительныеСвойства) = Тип("Структура") 
		И Источник.ДополнительныеСвойства.Свойство("ДополнительныеАналитики") 
		И Источник.ДополнительныеСвойства.ДополнительныеАналитики.Получить("NЗАЯВКИ") <> Неопределено 
		Тогда
		
		пНомерЗаявки =  Источник.ДополнительныеСвойства.ДополнительныеАналитики["NЗАЯВКИ"];
		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-14 (#3092)
	ИначеЕсли Источник.ДополнительныеСвойства.Свойство("ок_ФВБ") Тогда 
	
	 	пНомерЗаявки = Источник.ДополнительныеСвойства.ок_ФВБ;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-14 (#3092)
		
	Иначе 
		
		пНомерЗаявки = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Источник.Ссылка,
							ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ"), ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));	
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пНомерЗаявки)
		И ТипЗнч(пНомерЗаявки) = Тип("ДокументСсылка.бит_ФормаВводаБюджета")
		И МассивДокументовФВБ.Найти(пНомерЗаявки) = Неопределено Тогда
		
		МассивДокументовФВБ.Добавить(пНомерЗаявки);						
		
	КонецЕсли;
	
	Возврат МассивДокументовФВБ;
	
КонецФункции

Функция ПолучитьТаблицуДокументовПоВидамСтатей(МассивДокументов)
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", 					Новый ОписаниеТипов("ДокументСсылка.бит_ФормаВводаБюджета"));
	ТаблицаДокументов.Колонки.Добавить("ЕстьИнвестиционныеСтатьи", 	Новый ОписаниеТипов("Булево"));
	ТаблицаДокументов.Колонки.Добавить("ЕстьОперационныеСтатьи", 	Новый ОписаниеТипов("Булево"));
	
	Для Каждого Документ Из МассивДокументов Цикл 
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.Документ 					= Документ;
		НоваяСтрока.ЕстьИнвестиционныеСтатьи 	= Ложь;
		НоваяСтрока.ЕстьОперационныеСтатьи 		= Ложь;
		
		МассивСтатей = ПолучитьМассивЗначенийВДокументеПоТипу(Документ, Тип("СправочникСсылка.бит_СтатьиОборотов"));
		Для Каждого СтатьяОборотов Из МассивСтатей Цикл 
			
			Если СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
				НоваяСтрока.ЕстьОперационныеСтатьи = Истина;
			ИначеЕсли СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
				НоваяСтрока.ЕстьИнвестиционныеСтатьи = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-24 (#3382)
//Функция ПолучитьТаблицуДокументовПоДоговорам(Источник, ОбъектДляПоиска, ТаблицаДокументов)
//Заменено на:
Функция ПолучитьТаблицуДокументовПоДоговорам(Источник, ОбъектДляПоиска, ТаблицаДокументов, мВклДоговоров)
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-24 (#3382)
	
	ТаблицаДокументовПоДоговорам = ТаблицаДокументов.СкопироватьКолонки();
	ТаблицаДокументовПоДоговорам.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-04-11 (#3325)
	МассивДоговоров = ПолучитьМассивЗначенийВДокументеПоТипу(ОбъектДляПоиска, Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-04-11 (#3325)
	
	Для Каждого СтрокаТЗ Из ТаблицаДокументов Цикл 
		
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-04-11 (#3325)
		//МассивДоговоров = ПолучитьМассивЗначенийВДокументеПоТипу(ОбъектДляПоиска, Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-04-11 (#3325)
		Для Каждого Договор Из МассивДоговоров Цикл 
			
			НоваяСтрока = ТаблицаДокументовПоДоговорам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Договор = Договор;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДокументовПоДоговорам;
	
КонецФункции

Функция ПолучитьТаблицуДокументовФВБКонтракт(ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокументовФВБ.Документ КАК Документ,
		|	ТаблицаДокументовФВБ.Договор КАК Договор,
		|	ТаблицаДокументовФВБ.ЕстьИнвестиционныеСтатьи КАК ЕстьИнвестиционныеСтатьи,
		|	ТаблицаДокументовФВБ.ЕстьОперационныеСтатьи КАК ЕстьОперационныеСтатьи
		|ПОМЕСТИТЬ ВТ_ДокументыФВБ
		|ИЗ
		|	&ТаблицаДокументовФВБ КАК ТаблицаДокументовФВБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Результат.ДокументыФВБКонтракт КАК ДокументыФВБКонтракт,
		|	Результат.ДокументыФВБ КАК ДокументыФВБ
		|ИЗ
		|	(ВЫБРАТЬ
		|		бит_ФормаВводаБюджетаБДДС.Ссылка КАК ДокументыФВБКонтракт,
		|		ЕСТЬNULL(ДокументыФВБ_ДоговорВШапке.Документ, ДокументыФВБ_ДоговорВТЧ.Документ) КАК ДокументыФВБ,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ДокументыФВБ_ДоговорВШапке.Документ ЕСТЬ NULL
		|					ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ) КАК ДоговорВШапке,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ДокументыФВБ_ДоговорВТЧ.Документ ЕСТЬ NULL
		|					ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ) КАК ДоговорВТЧ
		|	ИЗ
		|		Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументыФВБ КАК ДокументыФВБ
		|			ПО бит_ФормаВводаБюджетаБДДС.Ссылка.бит_БК_НомерЗаявки = ДокументыФВБ.Документ
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыФВБ КАК ДокументыФВБ_ДоговорВШапке
		|			ПО бит_ФормаВводаБюджетаБДДС.Ссылка.бит_БК_НомерЗаявки = ДокументыФВБ_ДоговорВШапке.Документ
		|				И бит_ФормаВводаБюджетаБДДС.Ссылка.ДоговорКонтрагента = ДокументыФВБ_ДоговорВШапке.Договор
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыФВБ КАК ДокументыФВБ_ДоговорВТЧ
		|			ПО бит_ФормаВводаБюджетаБДДС.Ссылка.бит_БК_НомерЗаявки = ДокументыФВБ_ДоговорВТЧ.Документ
		|				И бит_ФормаВводаБюджетаБДДС.ДоговорКонтрагента = ДокументыФВБ_ДоговорВТЧ.Договор
		|	ГДЕ
		|		бит_ФормаВводаБюджетаБДДС.Ссылка.Проведен
		|		И НЕ бит_ФормаВводаБюджетаБДДС.Ссылка.ПометкаУдаления
		|	
		|	СГРУППИРОВАТЬ ПО
		|		бит_ФормаВводаБюджетаБДДС.Ссылка,
		|		ЕСТЬNULL(ДокументыФВБ_ДоговорВШапке.Документ, ДокументыФВБ_ДоговорВТЧ.Документ)) КАК Результат
		|ГДЕ
		|	Результат.ДоговорВШапке = 1
		|	И Результат.ДоговорВТЧ = 1";
	
	Запрос.УстановитьПараметр("ТаблицаДокументовФВБ", ТаблицаДокументов);
	ТаблицаДокументовФВБКонтракт = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаДокументовФВБКонтракт;
	
КонецФункции

Функция ПолучитьМассивЗначенийВДокументеПоТипу(Документ, ТипЗначения, МассивЗначений = Неопределено)
	
	Если МассивЗначений = Неопределено Тогда 
		МассивЗначений = Новый Массив;
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	Если МетаданныеДокумента = Неопределено Тогда 
		Возврат МассивЗначений;
	КонецЕсли;
	
	Если Метаданные.РегистрыНакопления.Найти(МетаданныеДокумента.Имя) <> Неопределено 
		ИЛИ Метаданные.РегистрыСведений.Найти(МетаданныеДокумента.Имя) <> Неопределено
		ИЛИ Метаданные.РегистрыБухгалтерии.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
		
		МассивРеквизитов = Новый Массив;
		Для Каждого ЭлементРеквизит Из МетаданныеДокумента.Измерения Цикл
			Если ЭлементРеквизит.Тип.СодержитТип(ТипЗначения) Тогда
				МассивРеквизитов.Добавить(ЭлементРеквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементРеквизит Из МетаданныеДокумента.Реквизиты Цикл
			Если ЭлементРеквизит.Тип.СодержитТип(ТипЗначения) Тогда
				МассивРеквизитов.Добавить(ЭлементРеквизит.Имя);
			КонецЕсли;
		КонецЦикла;	
			
		Для Каждого ЭлементРеквизит Из МетаданныеДокумента.Ресурсы Цикл
			Если ЭлементРеквизит.Тип.СодержитТип(ТипЗначения) Тогда
				МассивРеквизитов.Добавить(ЭлементРеквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивРеквизитов.Количество() > 0 Тогда 
			
			Для Каждого СтрокаНабораЗаписей Из Документ Цикл 
				Для Каждого ЭлементРеквизитИмя Из МассивРеквизитов Цикл 
				
					Если ЗначениеЗаполнено(СтрокаНабораЗаписей[ЭлементРеквизитИмя])
						И ТипЗнч(СтрокаНабораЗаписей[ЭлементРеквизитИмя]) = ТипЗначения
						И МассивЗначений.Найти(СтрокаНабораЗаписей[ЭлементРеквизитИмя]) = Неопределено Тогда
						
						МассивЗначений.Добавить(СтрокаНабораЗаписей[ЭлементРеквизитИмя]);						
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
	
		Для Каждого ЭлементРеквизит Из МетаданныеДокумента.Реквизиты Цикл
			
			Если ЭлементРеквизит.Тип.СодержитТип(ТипЗначения) 
				И ЗначениеЗаполнено(Документ[ЭлементРеквизит.Имя])
				И ТипЗнч(Документ[ЭлементРеквизит.Имя]) = ТипЗначения
				И МассивЗначений.Найти(Документ[ЭлементРеквизит.Имя]) = Неопределено Тогда
				
				МассивЗначений.Добавить(Документ[ЭлементРеквизит.Имя]);
				
			КонецЕсли;
				
		КонецЦикла;
		
		Для Каждого ЭлементТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			
			МассивРеквизитов = Новый Массив;
			Для Каждого ЭлементРеквизит Из ЭлементТабличнаяЧасть.Реквизиты Цикл
			
				Если ЭлементРеквизит.Тип.СодержитТип(ТипЗначения) Тогда
					
					МассивРеквизитов.Добавить(ЭлементРеквизит.Имя);
					
				КонецЕсли;
					
			КонецЦикла;
			
			Если МассивРеквизитов.Количество() > 0 Тогда 
				
				Для Каждого СтрокаТЧ Из Документ[ЭлементТабличнаяЧасть.Имя] Цикл 
					
					Для Каждого ЭлементРеквизитИмя Из МассивРеквизитов Цикл 
					
						Если ЗначениеЗаполнено(СтрокаТЧ[ЭлементРеквизитИмя])
							И ТипЗнч(СтрокаТЧ[ЭлементРеквизитИмя]) = ТипЗначения
							И МассивЗначений.Найти(СтрокаТЧ[ЭлементРеквизитИмя]) = Неопределено Тогда
							
							МассивЗначений.Добавить(СтрокаТЧ[ЭлементРеквизитИмя]);						
							
						КонецЕсли;
						
					КонецЦикла;
						
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЗначений;
	
КонецФункции

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
Процедура ок_ОбработкаПолученияФормыЭДОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если ТипЗнч(Параметры) = Тип("Структура") 
			И Параметры.Свойство("Ключ") 
			И ЗначениеЗаполнено(Параметры.Ключ) Тогда
				
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-06-17 (#3377)
				//Если  ТипЗнч(Параметры.Ключ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
				ТипЗначения = ТипЗнч(Параметры.Ключ);
				Если  ТипЗначения = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
					Или  ТипЗначения = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-17 (#3377)
				
					//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
				    //Профиль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ПрофильНастроекЭДО");
					Профиль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ИдентификаторОрганизации");
					//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
					Если ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоДополнительныйСервисЭДО(Профиль) Тогда
						
						СтандартнаяОбработка = Ложь;
						ВыбраннаяФорма = "Обработка.ОбменСКонтрагентами.Форма.ок_ФормаПросмотраВходящегоДокумента";
						
						//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-06-17 (#3377)
						Если  ТипЗначения = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
							ВыбраннаяФорма = "Обработка.ОбменСКонтрагентами.Форма.ок_ФормаПросмотраИсходящегоДокумента";
						КонецЕсли;	
						//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-17 (#3377)
						
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
					ИначеЕсли ок_ОбменСКонтрагентамиВнутренний.ЭтоБумажныйДокумент(, Профиль) И ТипЗначения = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
						СтандартнаяОбработка = Ложь;
						ВыбраннаяФорма = "Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента";
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
					
					КонецЕсли;
					
				КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)

#Область _3317

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-26 (#3317)

Процедура ок_УстановитьПризнакВыгруженВБанкПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.Статус <> Перечисления.СтатусыОбменСБанками.Принят
		И Источник.Статус <> Перечисления.СтатусыОбменСБанками.Исполнен
		И Источник.Статус <> Перечисления.СтатусыОбменСБанками.Подтвержден Тогда
		Возврат;
	КонецЕсли;	
	
	ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(Источник.Ссылка);
	
	Если ТипЗнч(ДокументУчета) <> Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументУчета, "СБ_ВыгруженВКлиентБанка") Тогда
		
		Объект = ДокументУчета.ПолучитьОбъект();
		Объект.СБ_ВыгруженВКлиентБанка = Истина;
		Объект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;	
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-26 (#3317)

#КонецОбласти
//ОКЕЙ Поздняков А.(СофтЛаб) Конец 2018-09-30 (#3092)

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-11 (#4139)
Процедура ок_ПередЗаписьюДокументаВызовПользовательскойФункции(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
		
	мдОбъекта = Источник.Метаданные();
	
	ПользовательскаяФункция = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ПользовательскиеФункции", мдОбъекта.Имя + "_ПередЗаписью");
	Если ЗначениеЗаполнено(ПользовательскаяФункция) Тогда
		Результат = бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункцию(ПользовательскаяФункция, Источник, Отказ, РежимЗаписи, РежимПроведения);
		Если ТипЗнч(Результат) = Тип("Структура")
			И Результат.Свойство("Отказ") 
			И Результат.Отказ = Истина Тогда
			Отказ = Истина;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-11 (#4139) 

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-17 (#3273)
Процедура ок_ПередЗаписьюИсторияИзмененийОбъектов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-10 (#3396)
	Если Источник.ОбменДанными.Загрузка 
	 ИЛИ (Источник.ДополнительныеСвойства.Свойство("ДобавленаЗаписьВИсториюИзменений")
	     И Источник.ДополнительныеСвойства.ДобавленаЗаписьВИсториюИзменений = Истина)
	Тогда 
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-10 (#3396)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранитьИсторию = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("История изменения объектов", "Хранить историю последних изменений объектов", Ложь);	  
	
	Если Не ХранитьИсторию Тогда 
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	мдОбъекта = Источник.Метаданные();
	
	ЗаписьРС = РегистрыСведений.ок_ИсторияИзмененийОбъектов.СоздатьМенеджерЗаписи();	
	
	ЗаписьРС.ТипОбъекта	   = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", мдОбъекта.ПолноеИмя());
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда 
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-11 (#4139)
		//Источник.УстановитьСсылкуНового(Документы[мдОбъекта.Имя].ПолучитьСсылку());
		//ЗаписьРС.Объект = Источник.ПолучитьСсылкуНового();
		ЗаписьРС.Объект = Источник.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(ЗаписьРС.Объект) Тогда
			Источник.УстановитьСсылкуНового(Документы[мдОбъекта.Имя].ПолучитьСсылку());
			ЗаписьРС.Объект	= Источник.ПолучитьСсылкуНового();
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-11 (#4139) 			
	Иначе 
		ЗаписьРС.Объект	   	   = Источник.Ссылка;
	КонецЕсли;

	ЗаписьРС.ДатаИзменения = ТекущаяДата();
	
	ЗаписьРС.Пользователь  = Пользователи.ТекущийПользователь();	
	Если Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления Тогда 
		ЗаписьРС.Действие = ПредопределенноеЗначение("Перечисление.бит_фн_ВидыСобытийОповещений.ок_ПомеченНаУдаление");
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
		ЗаписьРС.Действие = ПредопределенноеЗначение("Перечисление.бит_фн_ВидыСобытийОповещений.ЗаписанДокумент");
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		ЗаписьРС.Действие = ПредопределенноеЗначение("Перечисление.бит_фн_ВидыСобытийОповещений.ПроведенДокумент");
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		ЗаписьРС.Действие = ПредопределенноеЗначение("Перечисление.бит_фн_ВидыСобытийОповещений.ОтмененоПроведениеДокумента");
	КонецЕсли;
		
	ЗаписьРС.ЭтоНовый	   = НЕ ЗначениеЗаполнено(Источник.Ссылка);
	 
	Попытка
		
		ЗаписьРС.Записать(Истина);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-10 (#3396)
		Источник.ДополнительныеСвойства.Вставить("ДобавленаЗаписьВИсториюИзменений", Истина);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-10 (#3396)
		
	Исключение
		  
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'История изменений объектов (ОКЕЙ)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
															 УровеньЖурналаРегистрации.Ошибка,,,
															 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
																			 
 	КонецПопытки;
 
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-17 (#3273)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-11 (#3348)
Процедура ок_бит_БК_УстановленныеВизыПриЗаписи(Источник, Отказ) Экспорт
	
	Перем пСсылкаНаДокЗакрытия;
	
	Если Отказ или Источник.ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-16 (#3393)
	Если Источник.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-16 (#3393)
	
	//т.к. запись через бит_Визирование.УстановитьВизы осуществляется несколько раз - берем первый раз
	Если Источник.ДополнительныеСвойства.Свойство("ПерезаписатьПринудительно") 
	   И Источник.ДополнительныеСвойства.ПерезаписатьПринудительно		
	Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = Источник.Отбор.Найти("Объект");
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ТипЗнч(ЭлементОтбора.Значение) = Тип("ДокументСсылка.бит_ФормаВводаБюджета")
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-12 (#3393)
		    И Не ТипЗнч(ЭлементОтбора.Значение) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета") 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-12 (#3393)
	Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-16 (#3393)
	мТочекИсключений = Новый Массив;
	Если ТипЗнч(ЭлементОтбора.Значение) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_уп_ТочкиАлгоритмов.ПараметрыПроцесса КАК бит_уп_ТочкиАлгоритмовПараметрыПроцесса
		|		ПО бит_УстановленныеВизы.ТочкаАлгоритма = бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Ссылка
		|			И (бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Имя = ""НеОстанавливатьМаршрутПоОтклонено"")
		|			И (бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Значение = ИСТИНА)
		|ГДЕ
		|	бит_УстановленныеВизы.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", ЭлементОтбора.Значение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			мТочекИсключений.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-16 (#3393)
	
	НайденоОтклонено = Ложь;
	Для Каждого СтрокаНабора Из Источник Цикл 
		Если СтрокаНабора.Решение = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено") 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-16 (#3393)
		   И мТочекИсключений.Найти(СтрокаНабора.ТочкаАлгоритма) = Неопределено
			 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-16 (#3393)
		Тогда 
			НайденоОтклонено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НайденоОтклонено Тогда 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-14 (#3393)
		//Перепроведем корректировку для формирования движений по полной схеме
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета") Тогда 
			
			СтруктураОтбора = Новый Структура("Объект", ЭлементОтбора.Значение.Ссылка);
			ТаблицаРС = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбора).Выгрузить();
			
			мСтрокСПустымиРешениями = ТаблицаРС.НайтиСтроки(Новый Структура("Решение", ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка")));
		
			Если мСтрокСПустымиРешениями.Количество() = 0 Тогда
		
				ДокументОбъект = ЭлементОтбора.Значение.ПолучитьОбъект();
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПолностьюПровестиДокумент");
				УстановитьПривилегированныйРежим(Истина);
				
				ВыполнитьОтправкуОповещений = Истина;
				
				Попытка
				
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Исключение
					
					ВыполнитьОтправкуОповещений = Ложь;
					
					ТекстОшибки = НСтр("ru = 'Не удалось сформировать движения документа после полного согласования по причине
                                       |%1'");
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-13 (#4278)
					//ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОписаниеОшибки());
					КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, КраткоеПредставлениеОшибки);
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-13 (#4278)
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					
				КонецПопытки;
				
				Если ВыполнитьОтправкуОповещений Тогда 
					
					ШаблонИнициатору   = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Оповещения ККЗБ", "Шаблон оповещения инициатора о согласованной ККЗБ");
					
					ШаблонФинДиректору = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Оповещения ККЗБ", "Шаблон оповещения финансового директора о согласованной ККЗБ");
					
					КэшАдресов = Неопределено;      
										
					АдресатыФинОтдел = бит_Визирование.ПолучитьАдресатовФинОтдела(ЭлементОтбора.Значение, КэшАдресов);
													
					СтруктураКонтекста = Неопределено;
					
					Если ЗначениеЗаполнено(ШаблонИнициатору) Тогда 
						
						СтруктураКонтекста = бит_Визирование.ПолучитьСтруктуруКонтекстаДляПисьма_ККЗБ(ЭлементОтбора.Значение, ШаблонИнициатору);
						
						бит_Визирование.ВыполнитьОтправкуОповещенияОСогласовании(СтруктураКонтекста);
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ШаблонФинДиректору) Тогда 
						
						Если СтруктураКонтекста = Неопределено Тогда 
							
							СтруктураКонтекста = бит_Визирование.ПолучитьСтруктуруКонтекстаДляПисьма_ККЗБ(ЭлементОтбора.Значение, ШаблонФинДиректору);
							
						Иначе
							
							СтруктураКонтекста.Вставить("Шаблон"			, ШаблонФинДиректору);
							СтруктураКонтекста.Вставить("ТипТекстаСообщения", ШаблонФинДиректору.ТипТекстаСообщения);
							
						КонецЕсли;				
						
						Для Каждого ЭлАдресат Из АдресатыФинОтдел Цикл 
							СтруктураКонтекста.Вставить("Получатель"	, ЭлАдресат.Значение);
							СтруктураКонтекста.Вставить("Пользователь"	, ЭлАдресат.Значение);

							бит_Визирование.ВыполнитьОтправкуОповещенияОСогласовании(СтруктураКонтекста, КэшАдресов);
						КонецЦикла;
						
					КонецЕсли;	
					
					Если ЗначениеЗаполнено(ШаблонФинДиректору) И 
						 ЭлементОтбора.Значение.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррВПределахФункцийФД")
					Тогда 
						ВизаФинДира = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Оповещения ККЗБ", "Виза финансового директора");
						Если ЗначениеЗаполнено(ВизаФинДира) Тогда 
							ТЗ_ФинДиров = бит_Визирование.ПолучитьНазначенногоИнициатора(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВизаФинДира));
							Если ТЗ_ФинДиров.Количество()>0 Тогда 
								
								Если ЗначениеЗаполнено(ТЗ_ФинДиров[0].Пользователь)
								   И АдресатыФинОтдел.НайтиПоЗначению(ТЗ_ФинДиров[0].Пользователь) = Неопределено
								   И ЗначениеЗаполнено(ТЗ_ФинДиров[0].ИнициаторEmail)
								Тогда 
								
									СтрКэшАдр = КэшАдресов.Добавить();
									СтрКэшАдр.Получатель = ТЗ_ФинДиров[0].Пользователь;
									СтрКэшАдр.Адрес      = ТЗ_ФинДиров[0].ИнициаторEmail;
									
									Если СтруктураКонтекста = Неопределено Тогда 
										
										СтруктураКонтекста = бит_Визирование.ПолучитьСтруктуруКонтекстаДляПисьма_ККЗБ(ЭлементОтбора.Значение, ШаблонФинДиректору);
										
									Иначе
										
										СтруктураКонтекста.Вставить("Шаблон"			, ШаблонФинДиректору);
										СтруктураКонтекста.Вставить("ТипТекстаСообщения", ШаблонФинДиректору.ТипТекстаСообщения);
										
									КонецЕсли;				
									
									СтруктураКонтекста.Вставить("Получатель"	, ТЗ_ФинДиров[0].Пользователь);
									СтруктураКонтекста.Вставить("Пользователь"	, СтруктураКонтекста.Получатель);
									
									бит_Визирование.ВыполнитьОтправкуОповещенияОСогласовании(СтруктураКонтекста, КэшАдресов); 
									
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

					
					
				КонецЕсли;
				
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;	   
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-14 (#3393)
		Возврат;
	КонецЕсли;
		
	Если //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-12 (#3393)
		 ТипЗнч(ЭлементОтбора.Значение) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") И
		 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-12 (#3393)
		Не ОК_ОбщегоНазначения.ЕстьДвиженияПоФВБПоИсполнениюПлана(ЭлементОтбора.Значение) Тогда 
		ОК_ОбщегоНазначения.НеобходимостьИЗакрытиеОстаткаСервер(ЭлементОтбора.Значение, пСсылкаНаДокЗакрытия);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-12 (#3393)
	ИначеЕсли ТипЗнч(ЭлементОтбора.Значение) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета")
	        И ЗначениеЗаполнено(ЭлементОтбора.Значение.ок_ВидКорректировки) 
		Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборКЗБ = РегистрыНакопления.бит_КонтрольныеЗначенияБюджетов.СоздатьНаборЗаписей();
		НаборКЗБ.Отбор.Регистратор.Установить(ЭлементОтбора.Значение);
		НаборКЗБ.Прочитать();
		НаборКЗБ.Очистить();
		Попытка
		
			НаборКЗБ.Записать();
		
		Исключение
			
			пТекстОшибки = НСтр("ru = 'Не удалось очистить движения по РН ""Контрольные значения бюджетов"" по причине:
                                 |%1'");
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-13 (#4278)
			//пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, КраткоеПредставлениеОшибки);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-13 (#4278)
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки);
			
  		КонецПопытки;
		
		НаборОПБ = РегистрыНакопления.бит_ОборотыПоБюджетам.СоздатьНаборЗаписей();
		НаборОПБ.Отбор.Регистратор.Установить(ЭлементОтбора.Значение);
		
		НаборОПБ.Прочитать();
		НаборОПБ.Очистить();
		Попытка
		
			НаборОПБ.Записать();
		
		Исключение
			
			пТекстОшибки = НСтр("ru = 'Не удалось очистить движения по РН ""Обороты по бюджетам"" по причине:
                                 |%1'");
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-13 (#4278)
			//пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, КраткоеПредставлениеОшибки);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-13 (#4278)
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки);
			
		КонецПопытки;    
		
		ДокументОбъект = ЭлементОтбора.Значение.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("СтатусКорректировки", ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Отменена"));
		ДокументОбъект.УстановитьСтатус();
		УстановитьПривилегированныйРежим(Ложь);		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-12 (#3393)
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-11 (#3348)

//ОКЕЙ Рычаков А.С.(СофтЛаб) Начало 2019-10-01 (#3490)
Процедура ок_ДокументКорректировкаДолгаОбработкаПроведенияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	АналитикаФВБ = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки"); 
	
	Если АналитикаФВБ.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Источник.Движения.Записать();
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб) Начало 2021-04-28 (#4166)
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                      |	ВложенныйЗапрос.ДокументРасчетов КАК ДокументРасчетов,
	//                      |	ВложенныйЗапрос.ЕстьФВБ КАК ЕстьФВБ
	//                      |ИЗ
	//                      |	(ВЫБРАТЬ
	//                      |		ХозрасчетныйОбороты.Субконто1 КАК ДокументРасчетов,
	//                      |		ВЫБОР
	//                      |			КОГДА 1 В
	//                      |					(ВЫБРАТЬ ПЕРВЫЕ 1
	//                      |						1
	//                      |					ИЗ
	//                      |						РегистрСведений.бит_ДополнительныеАналитики КАК ДополнительныеАналитики
	//                      |					ГДЕ
	//                      |						ДополнительныеАналитики.Объект = ХозрасчетныйОбороты.Субконто1
	//                      |						И ДополнительныеАналитики.Аналитика = &АналитикаФВБ)
	//                      |				ТОГДА ИСТИНА
	//                      |			ИНАЧЕ ЛОЖЬ
	//                      |		КОНЕЦ КАК ЕстьФВБ
	//                      |	ИЗ
	//                      |		РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, , &СписокСубконто, , , ) КАК ХозрасчетныйОбороты
	//                      |	ГДЕ
	//                      |		ХозрасчетныйОбороты.Регистратор = &Регистратор) КАК ВложенныйЗапрос
	//                      |ГДЕ
	//                      |	ВложенныйЗапрос.ЕстьФВБ");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ХозрасчетныйСубконто.Значение КАК ДокументРасчетов
	                      |ИЗ
	                      |	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеАналитики КАК ДополнительныеАналитики
	                      |		ПО (ХозрасчетныйСубконто.Регистратор = &Регистратор)
	                      |			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	                      |			И (ДополнительныеАналитики.Аналитика = &АналитикаФВБ)
	                      |			И (ДополнительныеАналитики.Объект = ХозрасчетныйСубконто.Значение)");
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб) Конец 2021-04-28 (#4166)
	
	Запрос.УстановитьПараметр("Регистратор",Источник.Ссылка);
	Запрос.УстановитьПараметр("АналитикаФВБ",АналитикаФВБ);
	//ОКЕЙ Рычаков А.С.(СофтЛаб) Начало 2021-04-28 (#4166)
	//Запрос.УстановитьПараметр("СписокСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	//ОКЕЙ Рычаков А.С.(СофтЛаб) Конец 2021-04-28 (#4166)
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 	
		Источник.ДополнительныеСвойства.Вставить("ПередатьИнфоДляБК",Истина);
	КонецЕсли;	
	
	//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Начало 2021-03-25 (#НТП_БП06_ФР01, #НТП_БП06_ФР02)
	Если Источник.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		И Источник.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику Тогда 

		МассивФВБ = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Источник.КредиторскаяЗадолженность.ВыгрузитьКолонку("ок_ФВБ"));

		ФВБЗаявка = Неопределено;
		Для Каждого ФВБЗаявка Из МассивФВБ Цикл
			Если ЗначениеЗаполнено(ФВБЗаявка) Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;

		// копирование ФВБ в РС бит_ДополнительныеАналитики
		НаборЗаписейДополнительныеАналитики = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьНаборЗаписей();
		НаборЗаписейДополнительныеАналитики.Отбор.Объект.Установить(Источник.Ссылка);
		НаборЗаписейДополнительныеАналитики.Отбор.Аналитика.Установить(АналитикаФВБ);
		НаборЗаписейДополнительныеАналитики.Прочитать();

		Если Не ЗначениеЗаполнено(ФВБЗаявка) Тогда 
			Если НаборЗаписейДополнительныеАналитики.Количество() Тогда 
				НаборЗаписейДополнительныеАналитики.Очистить();
				НаборЗаписейДополнительныеАналитики.Записать();
			КонецЕсли;
			Возврат; // Дальше не продолжаем
		ИначеЕсли НаборЗаписейДополнительныеАналитики.Количество() Тогда 
			ЗаписьНабора = НаборЗаписейДополнительныеАналитики[0];
			Если ЗаписьНабора.ЗначениеАналитики <> ФВБЗаявка Тогда 
				ЗаписьНабора.ЗначениеАналитики = ФВБЗаявка;
				НаборЗаписейДополнительныеАналитики.Записать();
			КонецЕсли;
		Иначе
			ЗаписьНабора = НаборЗаписейДополнительныеАналитики.Добавить();
			ЗаписьНабора.Объект = Источник.Ссылка;
			ЗаписьНабора.Аналитика = АналитикаФВБ;
			ЗаписьНабора.ЗначениеАналитики = ФВБЗаявка;
			НаборЗаписейДополнительныеАналитики.Записать();
		КонецЕсли;

		ТЗДокументыРасчетаСФВБ = Источник.КредиторскаяЗадолженность.Выгрузить(Новый Структура("ок_ФВБ", ФВБЗаявка));

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыРасчетаСФВБ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДокументыРасчетаСФВБ.Сделка КАК ДокументРасчетов,
		|	ДокументыРасчетаСФВБ.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ДокументыРасчетаСФВБ.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ДокументыРасчетаСФВБ.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
		|	ДокументыРасчетаСФВБ.КорДоговорКонтрагента КАК КорДоговорКонтрагента,
		|	ДокументыРасчетаСФВБ.КорСчетУчетаРасчетов КАК КорСчетУчетаРасчетов,
		|	ДокументыРасчетаСФВБ.ок_ФВБ КАК ок_ФВБ,
		|	ДокументыРасчетаСФВБ.НомерСтроки КАК НомерСтроки,
		|	ДокументыРасчетаСФВБ.Сумма КАК СуммаСторно,
		|	ДокументыРасчетаСФВБ.Сумма КАК СуммаНовая
		|ПОМЕСТИТЬ ТЗДокументыРасчетаСФВБ
		|ИЗ
		|	&ТЗДокументыРасчетаСФВБ КАК ДокументыРасчетаСФВБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗДокументыРасчетаСФВБ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТЗДокументыРасчетаСФВБ.ДокументРасчетов КАК ДокументРасчетов,
		|	ТЗДокументыРасчетаСФВБ.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ТЗДокументыРасчетаСФВБ.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ТЗДокументыРасчетаСФВБ.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
		|	ТЗДокументыРасчетаСФВБ.КорДоговорКонтрагента КАК КорДоговорКонтрагента,
		|	ТЗДокументыРасчетаСФВБ.КорСчетУчетаРасчетов КАК КорСчетУчетаРасчетов,
		|	ТЗДокументыРасчетаСФВБ.ок_ФВБ КАК ок_ФВБ,
		|	МАКСИМУМ(ТЗДокументыРасчетаСФВБ.НомерСтроки) КАК НомерСтроки,
		|	СУММА(ТЗДокументыРасчетаСФВБ.СуммаСторно) КАК СуммаСторно,
		|	СУММА(ТЗДокументыРасчетаСФВБ.СуммаНовая) КАК СуммаНовая
		|ПОМЕСТИТЬ ВТ_ДокументыРасчетаСФВБ
		|ИЗ
		|	ТЗДокументыРасчетаСФВБ КАК ТЗДокументыРасчетаСФВБ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЗДокументыРасчетаСФВБ.ок_ФВБ,
		|	ТЗДокументыРасчетаСФВБ.ДокументРасчетов,
		|	ТЗДокументыРасчетаСФВБ.ДоговорКонтрагента,
		|	ТЗДокументыРасчетаСФВБ.СчетУчетаРасчетов,
		|	ТЗДокументыРасчетаСФВБ.КорДоговорКонтрагента,
		|	ТЗДокументыРасчетаСФВБ.КорСчетУчетаРасчетов,
		|	ТЗДокументыРасчетаСФВБ.КурсВзаиморасчетов,
		|	ТЗДокументыРасчетаСФВБ.КратностьВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДокументыРасчетаСФВБ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВТ_ДокументыРасчетаСФВБ.ДокументРасчетов КАК ДокументРасчетов,
		|	ВТ_ДокументыРасчетаСФВБ.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ВТ_ДокументыРасчетаСФВБ.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ВТ_ДокументыРасчетаСФВБ.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
		|	ВТ_ДокументыРасчетаСФВБ.КорДоговорКонтрагента КАК КорДоговорКонтрагента,
		|	ВТ_ДокументыРасчетаСФВБ.КорСчетУчетаРасчетов КАК КорСчетУчетаРасчетов,
		|	ВТ_ДокументыРасчетаСФВБ.ок_ФВБ КАК ок_ФВБ,
		|	ВТ_ДокументыРасчетаСФВБ.НомерСтроки КАК НомерСтроки,
		|	ВТ_ДокументыРасчетаСФВБ.СуммаСторно КАК СуммаСторно,
		|	ВТ_ДокументыРасчетаСФВБ.СуммаНовая КАК СуммаНовая,
		|	бит_ОборотыПоБюджетамОбороты.СуммаОборот КАК Сумма,
		|	бит_ОборотыПоБюджетамОбороты.СуммаРеглОборот КАК СуммаРегл,
		|	бит_ОборотыПоБюджетамОбороты.СуммаУпрОборот КАК СуммаУпр,
		|	бит_ОборотыПоБюджетамОбороты.СуммаСценарийОборот КАК СуммаСценарий,
		|	бит_ОборотыПоБюджетамОбороты.СуммаСНДСОборот КАК СуммаСНДС,
		|	бит_ОборотыПоБюджетамОбороты.СуммаСНДСРеглОборот КАК СуммаСНДСРегл,
		|	бит_ОборотыПоБюджетамОбороты.СуммаСНДСУпрОборот КАК СуммаСНДСУпр,
		|	бит_ОборотыПоБюджетамОбороты.СуммаСНДССценарийОборот КАК СуммаСНДССценарий,
		|	бит_ОборотыПоБюджетамОбороты.Сценарий КАК Сценарий,
		|	бит_ОборотыПоБюджетамОбороты.ЦФО КАК ЦФО,
		|	бит_ОборотыПоБюджетамОбороты.СтатьяОборотов КАК СтатьяОборотов,
		|	бит_ОборотыПоБюджетамОбороты.Валюта КАК Валюта,
		|	бит_ОборотыПоБюджетамОбороты.Контрагент КАК Контрагент,
		|	бит_ОборотыПоБюджетамОбороты.Проект КАК Проект,
		|	бит_ОборотыПоБюджетамОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	бит_ОборотыПоБюджетамОбороты.БанковскийСчет КАК БанковскийСчет,
		|	бит_ОборотыПоБюджетамОбороты.Аналитика_1 КАК Аналитика_1,
		|	бит_ОборотыПоБюджетамОбороты.Аналитика_2 КАК Аналитика_2,
		|	бит_ОборотыПоБюджетамОбороты.Аналитика_3 КАК Аналитика_3,
		|	бит_ОборотыПоБюджетамОбороты.Аналитика_4 КАК Аналитика_4,
		|	бит_ОборотыПоБюджетамОбороты.Аналитика_5 КАК Аналитика_5,
		|	бит_ОборотыПоБюджетамОбороты.Аналитика_6 КАК Аналитика_6,
		|	бит_ОборотыПоБюджетамОбороты.Аналитика_7 КАК Аналитика_7,
		|	ВЫБОР
		|		КОГДА бит_ОборотыПоБюджетамОбороты.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_Инвест)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_У)
		|	КОНЕЦ КАК СценарийНовый,
		|	&Организация КАК бит_БК_Организация
		|ИЗ
		|	ВТ_ДокументыРасчетаСФВБ КАК ВТ_ДокументыРасчетаСФВБ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
		|				,
		|				,
		|				Регистратор,
		|				ДоговорКонтрагента В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТЗДокументыРасчетаСФВБ.ДоговорКонтрагента КАК ДоговорКонтрагента
		|					ИЗ
		|						ТЗДокументыРасчетаСФВБ КАК ТЗДокументыРасчетаСФВБ)) КАК бит_ОборотыПоБюджетамОбороты
		|		ПО ВТ_ДокументыРасчетаСФВБ.ДокументРасчетов = бит_ОборотыПоБюджетамОбороты.Регистратор
		|			И ВТ_ДокументыРасчетаСФВБ.ДоговорКонтрагента = бит_ОборотыПоБюджетамОбороты.ДоговорКонтрагента
		|ИТОГИ
		|	МАКСИМУМ(ДоговорКонтрагента),
		|	МАКСИМУМ(ДокументРасчетов),
		|	МАКСИМУМ(КурсВзаиморасчетов),
		|	МАКСИМУМ(КратностьВзаиморасчетов),
		|	МАКСИМУМ(СчетУчетаРасчетов),
		|	МАКСИМУМ(КорДоговорКонтрагента),
		|	МАКСИМУМ(КорСчетУчетаРасчетов),
		|	МАКСИМУМ(ок_ФВБ),
		|	МАКСИМУМ(СуммаСторно),
		|	МАКСИМУМ(СуммаНовая),
		|	СУММА(Сумма),
		|	СУММА(СуммаРегл),
		|	СУММА(СуммаУпр),
		|	СУММА(СуммаСценарий),
		|	СУММА(СуммаСНДС),
		|	СУММА(СуммаСНДСРегл),
		|	СУММА(СуммаСНДСУпр),
		|	СУММА(СуммаСНДССценарий)
		|ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДокументыРасчетаСФВБ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВТ_ДокументыРасчетаСФВБ.ДокументРасчетов КАК ДокументРасчетов,
		|	ВТ_ДокументыРасчетаСФВБ.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ВТ_ДокументыРасчетаСФВБ.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ВТ_ДокументыРасчетаСФВБ.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
		|	ВТ_ДокументыРасчетаСФВБ.КорДоговорКонтрагента КАК КорДоговорКонтрагента,
		|	ВТ_ДокументыРасчетаСФВБ.КорСчетУчетаРасчетов КАК КорСчетУчетаРасчетов,
		|	ВТ_ДокументыРасчетаСФВБ.ок_ФВБ КАК ок_ФВБ,
		|	ВТ_ДокументыРасчетаСФВБ.НомерСтроки КАК НомерСтроки,
		|	ВТ_ДокументыРасчетаСФВБ.СуммаСторно КАК СуммаСторно,
		|	ВТ_ДокументыРасчетаСФВБ.СуммаНовая КАК СуммаНовая,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольОборот КАК СуммаСценарийКонтроль,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот КАК СуммаСценарийИсполнение,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольСНДСОборот КАК СуммаСценарийКонтрольСНДС,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеСНДСОборот КАК СуммаСценарийИсполнениеСНДС,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий КАК Сценарий,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО КАК ЦФО,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов КАК СтатьяОборотов,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Контрагент КАК Контрагент,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Проект КАК Проект,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.БанковскийСчет КАК БанковскийСчет,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый КАК СценарийКонтролируемый,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1 КАК Аналитика_1,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_2 КАК Аналитика_2,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_3 КАК Аналитика_3,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_4 КАК Аналитика_4,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_5 КАК Аналитика_5,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_6 КАК Аналитика_6,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_7 КАК Аналитика_7,
		|	ВЫБОР
		|		КОГДА бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_Инвест)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_У)
		|	КОНЕЦ КАК СценарийНовый,
		|	ЕСТЬNULL(бит_БК_НастройкиБК.ЗначениеСсылка, ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)) КАК СценарийКонтролируемыйНовый,
		|	&Организация КАК бит_БК_Организация
		|ИЗ
		|	ВТ_ДокументыРасчетаСФВБ КАК ВТ_ДокументыРасчетаСФВБ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
		|				,
		|				,
		|				Регистратор,
		|				ВЫБОР
		|					КОГДА Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_Инвест)
		|						ТОГДА СценарийКонтролируемый = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ЗаявкаНаОплату_И)
		|					КОГДА Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_У)
		|						ТОГДА СценарийКонтролируемый = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ЗаявкаНаОплату_У)
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК бит_КонтрольныеЗначенияБюджетовОбороты
		|		ПО ВТ_ДокументыРасчетаСФВБ.ДокументРасчетов = бит_КонтрольныеЗначенияБюджетовОбороты.Регистратор
		|			И ВТ_ДокументыРасчетаСФВБ.ДоговорКонтрагента = бит_КонтрольныеЗначенияБюджетовОбороты.ДоговорКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_НастройкиБК КАК бит_БК_НастройкиБК
		|		ПО (бит_БК_НастройкиБК.Группа = ""Контролируемый сценарий"")
		|			И (бит_БК_НастройкиБК.ИмяНастройки = ВЫБОР
		|				КОГДА бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_Инвест)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт_У)
		|			КОНЕЦ)
		|ИТОГИ
		|	МАКСИМУМ(ДоговорКонтрагента),
		|	МАКСИМУМ(ДокументРасчетов),
		|	МАКСИМУМ(КурсВзаиморасчетов),
		|	МАКСИМУМ(КратностьВзаиморасчетов),
		|	МАКСИМУМ(СчетУчетаРасчетов),
		|	МАКСИМУМ(КорДоговорКонтрагента),
		|	МАКСИМУМ(КорСчетУчетаРасчетов),
		|	МАКСИМУМ(ок_ФВБ),
		|	МАКСИМУМ(СуммаСторно),
		|	МАКСИМУМ(СуммаНовая),
		|	СУММА(СуммаСценарийКонтроль),
		|	СУММА(СуммаСценарийИсполнение),
		|	СУММА(СуммаСценарийКонтрольСНДС),
		|	СУММА(СуммаСценарийИсполнениеСНДС)
		|ПО
		|	НомерСтроки";

		Запрос.УстановитьПараметр("ТЗДокументыРасчетаСФВБ", ТЗДокументыРасчетаСФВБ);
		Запрос.УстановитьПараметр("Организация", Источник.Организация);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();

		// ОПБ
		ОбщаяТЗ = Источник.Движения.бит_ОборотыПоБюджетам.ВыгрузитьКолонки();

		МассивИменРесурсов = Новый Массив;
		МассивИменРесурсов.Добавить("Сумма");
		МассивИменРесурсов.Добавить("СуммаРегл");
		МассивИменРесурсов.Добавить("СуммаУпр");
		МассивИменРесурсов.Добавить("СуммаСценарий");
		МассивИменРесурсов.Добавить("СуммаСНДС");
		МассивИменРесурсов.Добавить("СуммаСНДСРегл");
		МассивИменРесурсов.Добавить("СуммаСНДСУпр");
		МассивИменРесурсов.Добавить("СуммаСНДССценарий");

		ВыборкаНомерСтроки = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНомерСтроки.Следующий() Цикл

			Если Не ЗначениеЗаполнено(ВыборкаНомерСтроки.СуммаСНДС) Тогда 

				ТекстСообщения = СтрШаблон(НСтр("ru = 'Отсутствуют движения по РН %1 по документу расчетов %2'"), "Обороты по бюджетам (БИТ)", ВыборкаНомерСтроки.ДокументРасчетов);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;

			ТЗпоСтрокеСторно = ОбщаяТЗ.СкопироватьКолонки();
			ТЗпоСтрокеНовая = ОбщаяТЗ.СкопироватьКолонки();

			НужноРаспределятьСумму = ВыборкаНомерСтроки.СуммаСторно <> ВыборкаНомерСтроки.СуммаСНДС;
			ИтогиПоРесурсам = Новый Структура;
			Для Каждого ИмяРесурса Из МассивИменРесурсов Цикл

				Если НужноРаспределятьСумму Тогда 

					ИтогиПоРесурсам.Вставить(ИмяРесурса + "Сторно", ВыборкаНомерСтроки[ИмяРесурса]/ВыборкаНомерСтроки.СуммаСНДС * ВыборкаНомерСтроки.СуммаСторно);
					ИтогиПоРесурсам.Вставить(ИмяРесурса + "Новая", ВыборкаНомерСтроки[ИмяРесурса]/ВыборкаНомерСтроки.СуммаСНДС * ВыборкаНомерСтроки.СуммаНовая);

				Иначе

					ИтогиПоРесурсам.Вставить(ИмяРесурса + "Сторно", ВыборкаНомерСтроки[ИмяРесурса]);
					ИтогиПоРесурсам.Вставить(ИмяРесурса + "Новая", ВыборкаНомерСтроки[ИмяРесурса]);

				КонецЕсли;
			КонецЦикла;

			ВыборкаДетальныеЗаписи = ВыборкаНомерСтроки.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

				СтрокаТЗпоСтрокеСторно = ТЗпоСтрокеСторно.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЗпоСтрокеСторно, ВыборкаДетальныеЗаписи);
				СтрокаТЗпоСтрокеСторно.Период = Источник.Дата;
				СтрокаТЗпоСтрокеСторно.Регистратор = Источник.Ссылка;

				СтрокаТЗпоСтрокеНовая = ТЗпоСтрокеНовая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЗпоСтрокеНовая, ВыборкаДетальныеЗаписи, , "Сценарий, Контрагент, ДоговорКонтрагента");
				СтрокаТЗпоСтрокеНовая.Период = Источник.Дата;
				СтрокаТЗпоСтрокеНовая.Регистратор = Источник.Ссылка;
				СтрокаТЗпоСтрокеНовая.Сценарий = ВыборкаДетальныеЗаписи.СценарийНовый;
				СтрокаТЗпоСтрокеНовая.Контрагент = Источник.КонтрагентКредитор;
				СтрокаТЗпоСтрокеНовая.ДоговорКонтрагента = ВыборкаДетальныеЗаписи.КорДоговорКонтрагента;

			КонецЦикла;

			Для Каждого ИмяРесурса Из МассивИменРесурсов Цикл
				Если ИтогиПоРесурсам[ИмяРесурса + "Сторно"] <> 0 Тогда 				
					РаспределненныеСуммыСторно = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ИтогиПоРесурсам[ИмяРесурса + "Сторно"], ТЗпоСтрокеСторно.ВыгрузитьКолонку(ИмяРесурса)); 
					ТЗпоСтрокеСторно.ЗагрузитьКолонку(РаспределненныеСуммыСторно, ИмяРесурса);
				КонецЕсли;

				Если ИтогиПоРесурсам[ИмяРесурса + "Новая"] <> 0 Тогда 
					РаспределненныеСуммыНовая = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ИтогиПоРесурсам[ИмяРесурса + "Новая"], ТЗпоСтрокеНовая.ВыгрузитьКолонку(ИмяРесурса)); 
					ТЗпоСтрокеНовая.ЗагрузитьКолонку(РаспределненныеСуммыНовая, ИмяРесурса);
				КонецЕсли;
			КонецЦикла;

			Для Каждого СтрокаТЗпоСтрокеСторно Из ТЗпоСтрокеСторно Цикл
				СтрокаОбщаяТЗ = ОбщаяТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбщаяТЗ, СтрокаТЗпоСтрокеСторно);
				Для Каждого ИмяРесурса Из МассивИменРесурсов Цикл
					СтрокаОбщаяТЗ[ИмяРесурса] = СтрокаОбщаяТЗ[ИмяРесурса] * -1;
				КонецЦикла;
			КонецЦикла;

			Для Каждого СтрокаТЗпоСтрокеНовая Из ТЗпоСтрокеНовая Цикл
				СтрокаОбщаяТЗ = ОбщаяТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбщаяТЗ, СтрокаТЗпоСтрокеНовая);
			КонецЦикла;

		КонецЦикла;

		СтрИзмерения = "";
		СтрРесурсы = "";
		Для Каждого КолонкаТЗ Из ОбщаяТЗ.Колонки Цикл
			Если МассивИменРесурсов.Найти(КолонкаТЗ.Имя) = Неопределено Тогда 
				СтрИзмерения = СтрИзмерения + ?(ПустаяСтрока(СтрИзмерения), "", ",") + КолонкаТЗ.Имя;
			Иначе
				СтрРесурсы = СтрРесурсы + ?(ПустаяСтрока(СтрРесурсы), "", ",") + КолонкаТЗ.Имя;
			КонецЕсли;
		КонецЦикла;
		ОбщаяТЗ.Свернуть(СтрИзмерения, СтрРесурсы);
		
		ДвиженияОПБ = Источник.Движения.бит_ОборотыПоБюджетам;
		ДвиженияОПБ.Записывать = Истина;
		ДвиженияОПБ.мТаблицаДвижений = ОбщаяТЗ;
		ДвиженияОПБ.ДобавитьДвижение();

		// КЗБ		
		ОбщаяТЗ = Источник.Движения.бит_КонтрольныеЗначенияБюджетов.ВыгрузитьКолонки();

		МассивИменРесурсов = Новый Массив;
		МассивИменРесурсов.Добавить("СуммаСценарийКонтроль");
		МассивИменРесурсов.Добавить("СуммаСценарийИсполнение");
		МассивИменРесурсов.Добавить("СуммаСценарийКонтрольСНДС");
		МассивИменРесурсов.Добавить("СуммаСценарийИсполнениеСНДС");

		ВыборкаНомерСтроки = РезультатыЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНомерСтроки.Следующий() Цикл

			Если Не ЗначениеЗаполнено(ВыборкаНомерСтроки.СуммаСценарийКонтрольСНДС) Тогда 

				ТекстСообщения = СтрШаблон(НСтр("ru = 'Отсутствуют движения по РН %1 по документу расчетов %2'"), "Контрольные значения бюджетов (БИТ)", ВыборкаНомерСтроки.ДокументРасчетов);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;

			ТЗпоСтрокеСторно = ОбщаяТЗ.СкопироватьКолонки();
			ТЗпоСтрокеНовая = ОбщаяТЗ.СкопироватьКолонки();

			НужноРаспределятьСумму = ВыборкаНомерСтроки.СуммаСторно <> ВыборкаНомерСтроки.СуммаСценарийКонтрольСНДС;
			ИтогиПоРесурсам = Новый Структура;
			Для Каждого ИмяРесурса Из МассивИменРесурсов Цикл

				Если НужноРаспределятьСумму Тогда 

					ИтогиПоРесурсам.Вставить(ИмяРесурса + "Сторно", ВыборкаНомерСтроки[ИмяРесурса]/ВыборкаНомерСтроки.СуммаСценарийКонтрольСНДС * ВыборкаНомерСтроки.СуммаСторно);
					ИтогиПоРесурсам.Вставить(ИмяРесурса + "Новая", ВыборкаНомерСтроки[ИмяРесурса]/ВыборкаНомерСтроки.СуммаСценарийКонтрольСНДС * ВыборкаНомерСтроки.СуммаНовая);

				Иначе

					ИтогиПоРесурсам.Вставить(ИмяРесурса + "Сторно", ВыборкаНомерСтроки[ИмяРесурса]);
					ИтогиПоРесурсам.Вставить(ИмяРесурса + "Новая", ВыборкаНомерСтроки[ИмяРесурса]);

				КонецЕсли;
			КонецЦикла;

			ВыборкаДетальныеЗаписи = ВыборкаНомерСтроки.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

				СтрокаТЗпоСтрокеСторно = ТЗпоСтрокеСторно.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЗпоСтрокеСторно, ВыборкаДетальныеЗаписи);
				СтрокаТЗпоСтрокеСторно.Период = Источник.Дата;
				СтрокаТЗпоСтрокеСторно.Регистратор = Источник.Ссылка;

				СтрокаТЗпоСтрокеНовая = ТЗпоСтрокеНовая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЗпоСтрокеНовая, ВыборкаДетальныеЗаписи, , "Сценарий, Контрагент, ДоговорКонтрагента");
				СтрокаТЗпоСтрокеНовая.Период = Источник.Дата;
				СтрокаТЗпоСтрокеНовая.Регистратор = Источник.Ссылка;				
				СтрокаТЗпоСтрокеНовая.Сценарий = ВыборкаДетальныеЗаписи.СценарийНовый;
				СтрокаТЗпоСтрокеНовая.СценарийКонтролируемый = ВыборкаДетальныеЗаписи.СценарийКонтролируемыйНовый;
				СтрокаТЗпоСтрокеНовая.Контрагент = Источник.КонтрагентКредитор;
				СтрокаТЗпоСтрокеНовая.ДоговорКонтрагента = ВыборкаДетальныеЗаписи.КорДоговорКонтрагента;

			КонецЦикла;

			Для Каждого ИмяРесурса Из МассивИменРесурсов Цикл
				Если ИтогиПоРесурсам[ИмяРесурса + "Сторно"] <> 0 Тогда 
					РаспределненныеСуммыСторно = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ИтогиПоРесурсам[ИмяРесурса + "Сторно"], ТЗпоСтрокеСторно.ВыгрузитьКолонку(ИмяРесурса)); 
					ТЗпоСтрокеСторно.ЗагрузитьКолонку(РаспределненныеСуммыСторно, ИмяРесурса);
				КонецЕсли;

				Если ИтогиПоРесурсам[ИмяРесурса + "Новая"] <> 0 Тогда 
					РаспределненныеСуммыНовая = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ИтогиПоРесурсам[ИмяРесурса + "Новая"], ТЗпоСтрокеНовая.ВыгрузитьКолонку(ИмяРесурса)); 
					ТЗпоСтрокеНовая.ЗагрузитьКолонку(РаспределненныеСуммыНовая, ИмяРесурса);
				КонецЕсли;
			КонецЦикла;

			Для Каждого СтрокаТЗпоСтрокеСторно Из ТЗпоСтрокеСторно Цикл
				СтрокаОбщаяТЗ = ОбщаяТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбщаяТЗ, СтрокаТЗпоСтрокеСторно);
				Для Каждого ИмяРесурса Из МассивИменРесурсов Цикл
					СтрокаОбщаяТЗ[ИмяРесурса] = СтрокаОбщаяТЗ[ИмяРесурса] * -1;
				КонецЦикла;
			КонецЦикла;

			Для Каждого СтрокаТЗпоСтрокеНовая Из ТЗпоСтрокеНовая Цикл
				СтрокаОбщаяТЗ = ОбщаяТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбщаяТЗ, СтрокаТЗпоСтрокеНовая);
			КонецЦикла;

		КонецЦикла;

		СтрИзмерения = "";
		СтрРесурсы = "";
		Для Каждого КолонкаТЗ Из ОбщаяТЗ.Колонки Цикл
			Если МассивИменРесурсов.Найти(КолонкаТЗ.Имя) = Неопределено Тогда 
				СтрИзмерения = СтрИзмерения + ?(ПустаяСтрока(СтрИзмерения), "", ",") + КолонкаТЗ.Имя;
			Иначе
				СтрРесурсы = СтрРесурсы + ?(ПустаяСтрока(СтрРесурсы), "", ",") + КолонкаТЗ.Имя;
			КонецЕсли;
		КонецЦикла;
		ОбщаяТЗ.Свернуть(СтрИзмерения, СтрРесурсы);
		
		ДвиженияКЗБ = Источник.Движения.бит_КонтрольныеЗначенияБюджетов;
		ДвиженияКЗБ.Записывать = Истина;
		ДвиженияКЗБ.мТаблицаДвижений = ОбщаяТЗ;
		ДвиженияКЗБ.ДобавитьДвижение();
	КонецЕсли;
	//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Конец 2021-03-25 (#НТП_БП06_ФР01, #НТП_БП06_ФР02)
		
КонецПроцедуры
//ОКЕЙ Рычаков А.С.(СофтЛаб) Конец 2019-10-01 (#3490)

// ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
// +СБ. Калинкина Елена. 2014-04-30. Загрузка платежных документов AXAPTA 
Процедура бит_ЗаявкаНаРасходованиеСредствПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.СБ_ИдентификаторЗаписиAXAPTA) Тогда
		
		Если Не ИдентификаторЗаписиAXAPTAУникален(Источник) Тогда
			
// +СБ. Чеплин Денис. 2017-02-15. Факторинг (#2612)
			//ТекстСообщения = НСтр("ru = 'Идентификатор записи AXAPTA не уникален. Документ не записан'");
			ТекстСообщения = НСтр("ru = 'Идентификатор записи AXAPTA не уникален: "+Источник.СБ_ИдентификаторЗаписиAXAPTA+". Документ не записан'");
// -СБ. Чеплин Денис 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		КонецЕсли	
			
	КонецЕсли;
	
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
	Источник.Ок_ПересчетКурса = Документы.бит_ЗаявкаНаРасходованиеСредств.ПолучитьПризнакПересчетаКурсаПоДоговорамРаспределения(Источник.Распределение.ВыгрузитьКолонку("ДоговорКонтрагента"), Источник.ДоговорКонтрагента);	
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)
	
КонецПроцедуры	// -СБ. Калинкина Елена

// +СБ. Калинкина Елена. 2014-04-30. Загрузка платежных документов AXAPTA 
//проверка на уникальность (потом пойдет в отдельный общий модуль)
Функция ИдентификаторЗаписиAXAPTAУникален(Источник)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка <> &Ссылка
	|	И бит_ЗаявкаНаРасходованиеСредств.СБ_ИдентификаторЗаписиAXAPTA = &ИдентификаторЗаписиAXAPTA";
				   
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИдентификаторЗаписиAXAPTA", Источник.СБ_ИдентификаторЗаписиAXAPTA);
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции // -СБ. Калинкина Елена

// ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)

// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-05-15 (#3122)
Процедура ок_ПередЗаписьюДоговораПередЗаписью(Источник, Отказ) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Источник.ОК_КодМСФО) Тогда
		Если НЕ ОК_бит_МеханизмСворачиванияДЗКЗ.ПроверкаКодаМСФОПоМаске(Источник.ОК_КодМСФО) Тогда
			Сообщить("Код МСФО не прошёл проверку по маске.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.ОК_КодМСФО) И Источник.Ссылка.Пустая() И ОК_бит_МеханизмСворачиванияДЗКЗ.ГенерироватьНовыеКодаМСФО() Тогда
		//Нету дублей контрагентов по ИНН
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН";
		Запрос.УстановитьПараметр("ИНН", Источник.Владелец.ИНН);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Владелец
			|	И ДоговорыКонтрагентов.Организация = &Организация
			|	И НЕ ДоговорыКонтрагентов.ЭтоГруппа";
			Запрос.УстановитьПараметр("Владелец", Источник.Владелец);
			Запрос.УстановитьПараметр("Организация", Источник.Организация);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			//Нету других договоров с этой организацией
			Если НЕ ВыборкаДетальныеЗаписи.Количество() Тогда
				Источник.ОК_КодМСФО = ОК_бит_МеханизмСворачиванияДЗКЗ.ПолучитьНовыйКодМСФО(Источник.Организация);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-05-15 (#3122)

//ОКЕЙ Наумов А.Н.(Софтлаб) Начало 02.10.2019 (#3493)
Процедура ок_ПередЗаписьюРегистраБухгалтерииХозрасчетный(ЭтотОбъект, Отказ) Экспорт
	
	Если ЭтотОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСубконтоПередЗаписью(ЭтотОбъект, Отказ);
	
	РегистрыБухгалтерии.Хозрасчетный.ПроверитьЗапретРедактированияДокументовФакта(ЭтотОбъект, Отказ);
	
КонецПроцедуры	
//ОКЕЙ Наумов А.Н.(Софтлаб) Конец 02.10.2019 (#3493)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-19 (#3443)
Процедура ок_ПередЗаписьюДокументаВыгрузкаВAXAPTAПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ
		ИЛИ НЕ Источник.ок_ВыгруженВAXAPTA_Актуальный
		ИЛИ Источник.ДополнительныеСвойства.Свойство("НепроверятьОк_ВыгруженВAXAPTA_Актуальный")
		    И Источник.ДополнительныеСвойства.НепроверятьОк_ВыгруженВAXAPTA_Актуальный = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
	
		РезультатСравнения = ПолучитьРезультатСравненияПоДокументу_ПоступлениеТоваровУслуг(Источник);
		
		Если Не РезультатСравнения.Пустой() Тогда
		
			Источник.ок_ВыгруженВAXAPTA_Актуальный = Ложь;
		
		КонецЕсли; 
	
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
		
		РезультатСравнения = ПолучитьРезультатСравненияПоДокументу_ПоступлениеДопРасходов(Источник);
		
		Если Не РезультатСравнения.Пустой() Тогда
		
			Источник.ок_ВыгруженВAXAPTA_Актуальный = Ложь;
		
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПоступлениеНМА") Тогда
		
		РезультатСравнения = ПолучитьРезультатСравненияПоДокументу_ПоступлениеНМА(Источник);
		
		Если Не РезультатСравнения.Пустой() Тогда
		
			Источник.ок_ВыгруженВAXAPTA_Актуальный = Ложь;
		
		КонецЕсли;
		
		Для Каждого СтрокаНМА Из Источник.НематериальныеАктивы Цикл
			СтрокаНМА.ок_ОбъектНМАСлужебный = СтрокаНМА.НематериальныйАктив.бит_ОбъектСтроительства;
		КонецЦикла;  
		 	
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ок_ПередЗаписьюРегистраВыгрузкаВAXAPTAПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-13 (#3443)
	УстановитьПривилегированныйРежим(Истина);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-13 (#3443)
	ПВХ_ДатаПолученияЗакрывающегоДокумента = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Выгрузка в AXAPTA","ДатаПолученияЗакрывающегоДокумента");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-13 (#3443)
	УстановитьПривилегированныйРежим(Ложь);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-13 (#3443)
	
	Если НЕ ЗначениеЗаполнено(ПВХ_ДатаПолученияЗакрывающегоДокумента) Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ТекущаяЗапись Из Источник Цикл
		
		ТипОбъекта = ТипЗнч(ТекущаяЗапись.Объект);
		
		Если ТекущаяЗапись.Свойство = ПВХ_ДатаПолученияЗакрывающегоДокумента
			И (ТипОбъекта = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПоступлениеДопРасходов")
				ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПоступлениеНМА")) Тогда
		
			Если ТекущаяЗапись.Объект.ок_ВыгруженВAXAPTA_Актуальный Тогда
				
				ЗначениеСвойстваДо = УправлениеСвойствами.ЗначениеСвойства(ТекущаяЗапись.Объект, ПВХ_ДатаПолученияЗакрывающегоДокумента);
				Если ТекущаяЗапись.Значение <> ЗначениеСвойстваДо Тогда
				
					ДокументОбъект = ТекущаяЗапись.Объект.ПолучитьОбъект();
					ДокументОбъект.ок_ВыгруженВAXAPTA_Актуальный = Ложь;
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать();
				
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьРезультатСравненияПоДокументу_ПоступлениеТоваровУслуг(Источник);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Дата КАК Дата,
		|	&ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	&Контрагент КАК Контрагент,
		|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	&СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	&Склад КАК Склад,
		|	ПоступлениеТоваровУслугОборудование.СтавкаНДС КАК СтавкаНДС,
		|	ПоступлениеТоваровУслугОборудование.СчетУчета КАК СчетУчета,
		|	ПоступлениеТоваровУслугОборудование.ок_Аналитика_2 КАК Объект,
		|	ПоступлениеТоваровУслугОборудование.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугОборудование.СуммаНДС КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_ТЧ_Оборудование
		|ИЗ
		|	&ТЧ_Оборудование КАК ПоступлениеТоваровУслугОборудование
		|ГДЕ
		|	&СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ (&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеТоваровУслугОборудование.СчетУчета В ИЕРАРХИИ(&СчетаУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Дата КАК Дата,
		|	&ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	&Контрагент КАК Контрагент,
		|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	&СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	&Склад КАК Склад,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.СтавкаНДС КАК СтавкаНДС,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.СчетУчета КАК СчетУчета,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.ок_Аналитика_2 КАК ок_Аналитика_2,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.СуммаНДС КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_ТЧ_ОбъектыСтроительства
		|ИЗ
		|	&ТЧ_ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
		|ГДЕ
		|	&СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ (&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеТоваровУслугОбъектыСтроительства.СчетУчета В ИЕРАРХИИ(&СчетаУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Дата КАК Дата,
		|	&ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	&Контрагент КАК Контрагент,
		|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	&СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	&Склад КАК Склад,
		|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
		|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
		|	ПоступлениеТоваровУслугТовары.ок_Аналитика_2 КАК ок_Аналитика_2,
		|	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_ТЧ_Товары
		|ИЗ
		|	&ТЧ_Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	&СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ (&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеТоваровУслугТовары.СчетУчета В ИЕРАРХИИ(&СчетаУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Дата КАК Дата,
		|	&ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	&Контрагент КАК Контрагент,
		|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	&СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	&Склад КАК Склад,
		|	ПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатрат КАК СчетЗатрат,
		|	ПоступлениеТоваровУслугУслуги.ок_Аналитика_2 КАК ок_Аналитика_2,
		|	ПоступлениеТоваровУслугУслуги.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДС КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_ТЧ_Услуги
		|ИЗ
		|	&ТЧ_Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	&СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ (&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеТоваровУслугУслуги.СчетЗатрат В ИЕРАРХИИ(&СчетаУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслугОборудование.Дата КАК Дата,
		|	ПоступлениеТоваровУслугОборудование.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслугОборудование.Контрагент КАК Контрагент,
		|	ПоступлениеТоваровУслугОборудование.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПоступлениеТоваровУслугОборудование.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеТоваровУслугОборудование.Склад КАК Склад,
		|	ПоступлениеТоваровУслугОборудование.СчетУчета КАК СчетУчета,
		|	ПоступлениеТоваровУслугОборудование.Объект КАК Объект,
		|	ПоступлениеТоваровУслугОборудование.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугОборудование.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугОборудование.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_ДанныеПослеЗаписи_вр
		|ИЗ
		|	ВТ_ТЧ_Оборудование КАК ПоступлениеТоваровУслугОборудование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Дата,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Контрагент,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Склад,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.СчетУчета,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.ок_Аналитика_2,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Сумма,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.СуммаНДС,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.СтавкаНДС
		|ИЗ
		|	ВТ_ТЧ_ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Дата,
		|	ПоступлениеТоваровУслугТовары.ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслугТовары.Контрагент,
		|	ПоступлениеТоваровУслугТовары.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслугТовары.СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеТоваровУслугТовары.Склад,
		|	ПоступлениеТоваровУслугТовары.СчетУчета,
		|	ПоступлениеТоваровУслугТовары.ок_Аналитика_2,
		|	ПоступлениеТоваровУслугТовары.Сумма,
		|	ПоступлениеТоваровУслугТовары.СуммаНДС,
		|	ПоступлениеТоваровУслугТовары.СтавкаНДС
		|ИЗ
		|	ВТ_ТЧ_Товары КАК ПоступлениеТоваровУслугТовары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Дата,
		|	ПоступлениеТоваровУслугУслуги.ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслугУслуги.Контрагент,
		|	ПоступлениеТоваровУслугУслуги.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслугУслуги.СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеТоваровУслугУслуги.Склад,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
		|	ПоступлениеТоваровУслугУслуги.ок_Аналитика_2,
		|	ПоступлениеТоваровУслугУслуги.Сумма,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДС,
		|	ПоступлениеТоваровУслугУслуги.СтавкаНДС
		|ИЗ
		|	ВТ_ТЧ_Услуги КАК ПоступлениеТоваровУслугУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТЧ_Оборудование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТЧ_ОбъектыСтроительства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТЧ_Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТЧ_Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПослеЗаписи.Дата КАК Дата,
		|	ДанныеПослеЗаписи.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ДанныеПослеЗаписи.Контрагент КАК Контрагент,
		|	ДанныеПослеЗаписи.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеПослеЗаписи.Склад КАК Склад,
		|	ДанныеПослеЗаписи.СчетУчета КАК СчетУчета,
		|	ДанныеПослеЗаписи.Объект КАК Объект,
		|	ДанныеПослеЗаписи.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ДанныеПослеЗаписи.Сумма) КАК Сумма,
		|	СУММА(ДанныеПослеЗаписи.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_ДанныеПослеЗаписи
		|ИЗ
		|	ВТ_ДанныеПослеЗаписи_вр КАК ДанныеПослеЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПослеЗаписи.Дата,
		|	ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеПослеЗаписи.Контрагент,
		|	ДанныеПослеЗаписи.ДоговорКонтрагента,
		|	ДанныеПослеЗаписи.СчетУчета,
		|	ДанныеПослеЗаписи.Объект,
		|	ДанныеПослеЗаписи.Склад,
		|	ДанныеПослеЗаписи.ДатаВходящегоДокумента,
		|	ДанныеПослеЗаписи.СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДанныеПослеЗаписи_вр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка.Дата КАК Дата,
		|	ПоступлениеТоваровУслугОборудование.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслугОборудование.Ссылка.Контрагент КАК Контрагент,
		|	ПоступлениеТоваровУслугОборудование.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПоступлениеТоваровУслугОборудование.Ссылка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеТоваровУслугОборудование.Ссылка.Склад КАК Склад,
		|	ПоступлениеТоваровУслугОборудование.СчетУчета КАК СчетУчета,
		|	ПоступлениеТоваровУслугОборудование.ок_Аналитика_2 КАК Объект,
		|	ПоступлениеТоваровУслугОборудование.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугОборудование.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугОборудование.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_ДанныеДоЗаписи_вр
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|ГДЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
		|	И ПоступлениеТоваровУслугОборудование.Ссылка.СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ(&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеТоваровУслугОборудование.СчетУчета В ИЕРАРХИИ(&СчетаУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.Дата,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.Контрагент,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.Склад,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.СчетУчета,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.ок_Аналитика_2,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Сумма,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.СуммаНДС,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.СтавкаНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
		|ГДЕ
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка = &Ссылка
		|	И ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ(&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеТоваровУслугОбъектыСтроительства.СчетУчета В ИЕРАРХИИ(&СчетаУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка.Дата,
		|	ПоступлениеТоваровУслугТовары.Ссылка.ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент,
		|	ПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслугТовары.Ссылка.СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Склад,
		|	ПоступлениеТоваровУслугТовары.СчетУчета,
		|	ПоступлениеТоваровУслугТовары.ок_Аналитика_2,
		|	ПоступлениеТоваровУслугТовары.Сумма,
		|	ПоступлениеТоваровУслугТовары.СуммаНДС,
		|	ПоступлениеТоваровУслугТовары.СтавкаНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		|	И ПоступлениеТоваровУслугТовары.Ссылка.СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ(&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеТоваровУслугТовары.СчетУчета В ИЕРАРХИИ(&СчетаУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Склад,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
		|	ПоступлениеТоваровУслугУслуги.ок_Аналитика_2,
		|	ПоступлениеТоваровУслугУслуги.Сумма,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДС,
		|	ПоступлениеТоваровУслугУслуги.СтавкаНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ(&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеТоваровУслугУслуги.СчетЗатрат В ИЕРАРХИИ(&СчетаУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДоЗаписи.Дата КАК Дата,
		|	ДанныеДоЗаписи.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ДанныеДоЗаписи.Контрагент КАК Контрагент,
		|	ДанныеДоЗаписи.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДанныеДоЗаписи.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеДоЗаписи.Склад КАК Склад,
		|	ДанныеДоЗаписи.СчетУчета КАК СчетУчета,
		|	ДанныеДоЗаписи.Объект КАК Объект,
		|	ДанныеДоЗаписи.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ДанныеДоЗаписи.Сумма) КАК Сумма,
		|	СУММА(ДанныеДоЗаписи.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_ДанныеДоЗаписи
		|ИЗ
		|	ВТ_ДанныеДоЗаписи_вр КАК ДанныеДоЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДоЗаписи.Дата,
		|	ДанныеДоЗаписи.СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеДоЗаписи.Контрагент,
		|	ДанныеДоЗаписи.ДоговорКонтрагента,
		|	ДанныеДоЗаписи.СчетУчета,
		|	ДанныеДоЗаписи.Объект,
		|	ДанныеДоЗаписи.Склад,
		|	ДанныеДоЗаписи.ДатаВходящегоДокумента,
		|	ДанныеДоЗаписи.СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДанныеДоЗаписи_вр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДоЗаписи.Дата КАК Дата,
		|	ДанныеДоЗаписи.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ДанныеДоЗаписи.Контрагент КАК Контрагент,
		|	ДанныеДоЗаписи.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДанныеДоЗаписи.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеДоЗаписи.Склад КАК Склад,
		|	ДанныеДоЗаписи.СчетУчета КАК СчетУчета,
		|	ДанныеДоЗаписи.Объект КАК Объект,
		|	ДанныеДоЗаписи.Сумма КАК Сумма,
		|	ДанныеДоЗаписи.СуммаНДС КАК СуммаНДС,
		|	ДанныеПослеЗаписи.Дата КАК Дата_После,
		|	ДанныеПослеЗаписи.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента_После,
		|	ДанныеПослеЗаписи.Контрагент КАК Контрагент_После,
		|	ДанныеПослеЗаписи.ДоговорКонтрагента КАК ДоговорКонтрагента_После,
		|	ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом_После,
		|	ДанныеПослеЗаписи.Склад КАК Склад_После,
		|	ДанныеПослеЗаписи.СчетУчета КАК СчетУчета_После,
		|	ДанныеПослеЗаписи.Объект КАК Объект_После,
		|	ДанныеПослеЗаписи.Сумма КАК Сумма_После,
		|	ДанныеПослеЗаписи.СуммаНДС КАК СуммаНДС_После
		|ИЗ
		|	ВТ_ДанныеДоЗаписи КАК ДанныеДоЗаписи
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеПослеЗаписи КАК ДанныеПослеЗаписи
		|		ПО ДанныеДоЗаписи.Дата = ДанныеПослеЗаписи.Дата
		|			И ДанныеДоЗаписи.СчетУчетаРасчетовСКонтрагентом = ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом
		|			И ДанныеДоЗаписи.Контрагент = ДанныеПослеЗаписи.Контрагент
		|			И ДанныеДоЗаписи.ДоговорКонтрагента = ДанныеПослеЗаписи.ДоговорКонтрагента
		|			И ДанныеДоЗаписи.СчетУчета = ДанныеПослеЗаписи.СчетУчета
		|			И ДанныеДоЗаписи.Объект = ДанныеПослеЗаписи.Объект
		|			И ДанныеДоЗаписи.Склад = ДанныеПослеЗаписи.Склад
		|			И ДанныеДоЗаписи.ДатаВходящегоДокумента = ДанныеПослеЗаписи.ДатаВходящегоДокумента
		|			И ДанныеДоЗаписи.СтавкаНДС = ДанныеПослеЗаписи.СтавкаНДС
		|			И ДанныеДоЗаписи.Сумма = ДанныеПослеЗаписи.Сумма
		|			И ДанныеДоЗаписи.СуммаНДС = ДанныеПослеЗаписи.СуммаНДС
		|ГДЕ
		|	(ДанныеДоЗаписи.Дата ЕСТЬ NULL
		|			ИЛИ ДанныеПослеЗаписи.Дата ЕСТЬ NULL)";
	
	
	ТЧ_Оборудование 		= Источник.Оборудование.Выгрузить();
	ТЧ_ОбъектыСтроительства = Источник.ОбъектыСтроительства.Выгрузить();
	ТЧ_Товары 				= Источник.Товары.Выгрузить();
	ТЧ_Услуги 				= Источник.Услуги.Выгрузить();
	
	СчетаУчетаРасчетовСКонтрагентом = Новый СписокЗначений();
	СчетаУчетаРасчетовСКонтрагентом.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками"));
	СчетаУчетаРасчетовСКонтрагентом.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами"));
	
	СчетаУчета = Новый СписокЗначений();
	СчетаУчета.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы"));
	
	Запрос.УстановитьПараметр("Ссылка", 							Источник.Ссылка);
	Запрос.УстановитьПараметр("Дата", 								Источник.Дата);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", 			Источник.ДатаВходящегоДокумента);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", 				Источник.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", 						Источник.Контрагент);
	Запрос.УстановитьПараметр("Склад", 								Источник.Склад);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", 	Источник.СчетУчетаРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("СчетаУчетаРасчетовСКонтрагентом", 	СчетаУчетаРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("СчетаУчета", 						СчетаУчета);
	Запрос.УстановитьПараметр("ТЧ_Оборудование", 					ТЧ_Оборудование);
	Запрос.УстановитьПараметр("ТЧ_ОбъектыСтроительства", 			ТЧ_ОбъектыСтроительства);
	Запрос.УстановитьПараметр("ТЧ_Товары", 							ТЧ_Товары);
	Запрос.УстановитьПараметр("ТЧ_Услуги", 							ТЧ_Услуги);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьРезультатСравненияПоДокументу_ПоступлениеДопРасходов(Источник);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Дата КАК Дата,
		|	&ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	&Контрагент КАК Контрагент,
		|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	&СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	&СтавкаНДС КАК СтавкаНДС,
		|	&СуммаДоп КАК СуммаДоп,
		|	&СуммаНДСДоп КАК СуммаНДСДоп,
		|	ПоступлениеДопРасходовТовары.СчетУчета КАК СчетУчета,
		|	ПоступлениеДопРасходовТовары.ок_Аналитика_2 КАК Объект,
		|	ПоступлениеДопРасходовТовары.Сумма КАК Сумма,
		|	ПоступлениеДопРасходовТовары.СуммаНДС КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_ДанныеПослеЗаписи_вр
		|ИЗ
		|	&ТЧ_Товары КАК ПоступлениеДопРасходовТовары
		|ГДЕ
		|	&СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ (&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеДопРасходовТовары.СчетУчета В ИЕРАРХИИ(&СчетаУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПослеЗаписи.Дата КАК Дата,
		|	ДанныеПослеЗаписи.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ДанныеПослеЗаписи.Контрагент КАК Контрагент,
		|	ДанныеПослеЗаписи.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеПослеЗаписи.СчетУчета КАК СчетУчета,
		|	ДанныеПослеЗаписи.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеПослеЗаписи.Объект КАК Объект,
		|	СУММА(ДанныеПослеЗаписи.Сумма) КАК Сумма,
		|	СУММА(ДанныеПослеЗаписи.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ДанныеПослеЗаписи.СуммаДоп) КАК СуммаДоп,
		|	СУММА(ДанныеПослеЗаписи.СуммаНДСДоп) КАК СуммаНДСДоп
		|ПОМЕСТИТЬ ВТ_ДанныеПослеЗаписи
		|ИЗ
		|	ВТ_ДанныеПослеЗаписи_вр КАК ДанныеПослеЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПослеЗаписи.Дата,
		|	ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеПослеЗаписи.Контрагент,
		|	ДанныеПослеЗаписи.ДоговорКонтрагента,
		|	ДанныеПослеЗаписи.СчетУчета,
		|	ДанныеПослеЗаписи.Объект,
		|	ДанныеПослеЗаписи.ДатаВходящегоДокумента,
		|	ДанныеПослеЗаписи.СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДанныеПослеЗаписи_вр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеДопРасходовТовары.Ссылка.Дата КАК Дата,
		|	ПоступлениеДопРасходовТовары.Ссылка.СтавкаНДС КАК СтавкаНДС,
		|	ПоступлениеДопРасходовТовары.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ПоступлениеДопРасходовТовары.Ссылка.Контрагент КАК Контрагент,
		|	ПоступлениеДопРасходовТовары.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПоступлениеДопРасходовТовары.Ссылка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	СУММА(ПоступлениеДопРасходовТовары.Ссылка.Сумма) КАК СуммаДоп,
		|	СУММА(ПоступлениеДопРасходовТовары.Ссылка.СуммаНДС) КАК СуммаНДСДоп,
		|	ПоступлениеДопРасходовТовары.СчетУчета КАК СчетУчета,
		|	ПоступлениеДопРасходовТовары.ок_Аналитика_2 КАК Объект,
		|	СУММА(ПоступлениеДопРасходовТовары.Сумма) КАК Сумма,
		|	СУММА(ПоступлениеДопРасходовТовары.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_ДанныеДоЗаписи
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
		|ГДЕ
		|	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка
		|	И ПоступлениеДопРасходовТовары.Ссылка.СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ(&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеДопРасходовТовары.СчетУчета В ИЕРАРХИИ(&СчетаУчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеДопРасходовТовары.ок_Аналитика_2,
		|	ПоступлениеДопРасходовТовары.Ссылка.Контрагент,
		|	ПоступлениеДопРасходовТовары.Ссылка.СтавкаНДС,
		|	ПоступлениеДопРасходовТовары.СчетУчета,
		|	ПоступлениеДопРасходовТовары.Ссылка.ДоговорКонтрагента,
		|	ПоступлениеДопРасходовТовары.Ссылка.Дата,
		|	ПоступлениеДопРасходовТовары.Ссылка.СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеДопРасходовТовары.Ссылка.ДатаВходящегоДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДоЗаписи.Дата КАК Дата,
		|	ДанныеДоЗаписи.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ДанныеДоЗаписи.Контрагент КАК Контрагент,
		|	ДанныеДоЗаписи.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДанныеДоЗаписи.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеДоЗаписи.СчетУчета КАК СчетУчета,
		|	ДанныеДоЗаписи.Объект КАК Объект,
		|	ДанныеДоЗаписи.Сумма КАК Сумма,
		|	ДанныеДоЗаписи.СуммаНДС КАК СуммаНДС,
		|	ДанныеПослеЗаписи.Дата КАК Дата_После,
		|	ДанныеПослеЗаписи.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента_После,
		|	ДанныеПослеЗаписи.Контрагент КАК Контрагент_После,
		|	ДанныеПослеЗаписи.ДоговорКонтрагента КАК ДоговорКонтрагента_После,
		|	ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом_После,
		|	ДанныеПослеЗаписи.СчетУчета КАК СчетУчета_После,
		|	ДанныеПослеЗаписи.Объект КАК Объект_После,
		|	ДанныеПослеЗаписи.Сумма КАК Сумма_После,
		|	ДанныеПослеЗаписи.СуммаНДС КАК СуммаНДС_После
		|ИЗ
		|	ВТ_ДанныеДоЗаписи КАК ДанныеДоЗаписи
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеПослеЗаписи КАК ДанныеПослеЗаписи
		|		ПО ДанныеДоЗаписи.Дата = ДанныеПослеЗаписи.Дата
		|			И ДанныеДоЗаписи.СчетУчетаРасчетовСКонтрагентом = ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом
		|			И ДанныеДоЗаписи.Контрагент = ДанныеПослеЗаписи.Контрагент
		|			И ДанныеДоЗаписи.ДоговорКонтрагента = ДанныеПослеЗаписи.ДоговорКонтрагента
		|			И ДанныеДоЗаписи.СчетУчета = ДанныеПослеЗаписи.СчетУчета
		|			И ДанныеДоЗаписи.Объект = ДанныеПослеЗаписи.Объект
		|			И ДанныеДоЗаписи.ДатаВходящегоДокумента = ДанныеПослеЗаписи.ДатаВходящегоДокумента
		|			И ДанныеДоЗаписи.СтавкаНДС = ДанныеПослеЗаписи.СтавкаНДС
		|			И ДанныеДоЗаписи.Сумма = ДанныеПослеЗаписи.Сумма
		|			И ДанныеДоЗаписи.СуммаНДС = ДанныеПослеЗаписи.СуммаНДС
		|			И ДанныеДоЗаписи.СуммаДоп = ДанныеПослеЗаписи.СуммаДоп
		|			И ДанныеДоЗаписи.СуммаНДСДоп = ДанныеПослеЗаписи.СуммаНДСДоп
		|ГДЕ
		|	(ДанныеДоЗаписи.Дата ЕСТЬ NULL
		|			ИЛИ ДанныеПослеЗаписи.Дата ЕСТЬ NULL)";
	
	
	ТЧ_Товары = Источник.Товары.Выгрузить();
	
	СчетаУчетаРасчетовСКонтрагентом = Новый СписокЗначений();
	СчетаУчетаРасчетовСКонтрагентом.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками"));
	СчетаУчетаРасчетовСКонтрагентом.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами"));
	
	СчетаУчета = Новый СписокЗначений();
	СчетаУчета.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы"));
	
	Запрос.УстановитьПараметр("СуммаДоп", 						    Источник.Сумма);
	Запрос.УстановитьПараметр("СуммаНДСДоп", 						Источник.СуммаНДС);
	Запрос.УстановитьПараметр("СтавкаНДС", 						    Источник.СтавкаНДС);
	Запрос.УстановитьПараметр("Ссылка", 							Источник.Ссылка);
	Запрос.УстановитьПараметр("Дата", 								Источник.Дата);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", 			Источник.ДатаВходящегоДокумента);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", 				Источник.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", 						Источник.Контрагент);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", 	Источник.СчетУчетаРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("СчетаУчетаРасчетовСКонтрагентом", 	СчетаУчетаРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("СчетаУчета", 						СчетаУчета);
	Запрос.УстановитьПараметр("ТЧ_Товары", 							ТЧ_Товары);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьРезультатСравненияПоДокументу_ПоступлениеНМА(Источник);
	
	Запрос = Новый Запрос;  
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Дата КАК Дата,
		|	&ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	&Контрагент КАК Контрагент,
		|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	&СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеНМАНематериальныеАктивы.СчетУчета КАК СчетУчета,
		|	ПоступлениеНМАНематериальныеАктивы.ок_Аналитика_2 КАК Объект,
		|	ПоступлениеНМАНематериальныеАктивы.Сумма КАК Сумма,
		|	ПоступлениеНМАНематериальныеАктивы.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеНМАНематериальныеАктивы.СтавкаНДС КАК СтавкаНДС,
		|	ПоступлениеНМАНематериальныеАктивы.ок_ОбъектНМАСлужебный КАК ОбъектНМА
		|ПОМЕСТИТЬ ВТ_ДанныеПослеЗаписи_вр
		|ИЗ
		|	&ТЧ_НематериальныеАктивы КАК ПоступлениеНМАНематериальныеАктивы
		|ГДЕ
		|	&СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ (&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеНМАНематериальныеАктивы.СчетУчета В ИЕРАРХИИ(&СчетаУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПослеЗаписи.Дата КАК Дата,
		|	ДанныеПослеЗаписи.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ДанныеПослеЗаписи.Контрагент КАК Контрагент,
		|	ДанныеПослеЗаписи.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеПослеЗаписи.СчетУчета КАК СчетУчета,
		|	ДанныеПослеЗаписи.Объект КАК Объект,
		|	СУММА(ДанныеПослеЗаписи.Сумма) КАК Сумма,
		|	СУММА(ДанныеПослеЗаписи.СуммаНДС) КАК СуммаНДС,
		|	ДанныеПослеЗаписи.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеПослеЗаписи.ОбъектНМА КАК ОбъектНМА
		|ПОМЕСТИТЬ ВТ_ДанныеПослеЗаписи
		|ИЗ
		|	ВТ_ДанныеПослеЗаписи_вр КАК ДанныеПослеЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПослеЗаписи.Дата,
		|	ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеПослеЗаписи.Контрагент,
		|	ДанныеПослеЗаписи.ДоговорКонтрагента,
		|	ДанныеПослеЗаписи.СчетУчета,
		|	ДанныеПослеЗаписи.Объект,
		|	ДанныеПослеЗаписи.ДатаВходящегоДокумента,
		|	ДанныеПослеЗаписи.СтавкаНДС,
		|	ДанныеПослеЗаписи.ОбъектНМА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДанныеПослеЗаписи_вр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка.Дата КАК Дата,
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка.Контрагент КАК Контрагент,
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеНМАНематериальныеАктивы.СчетУчета КАК СчетУчета,
		|	ПоступлениеНМАНематериальныеАктивы.ок_Аналитика_2 КАК Объект,
		|	СУММА(ПоступлениеНМАНематериальныеАктивы.Сумма) КАК Сумма,
		|	СУММА(ПоступлениеНМАНематериальныеАктивы.СуммаНДС) КАК СуммаНДС,
		|	ПоступлениеНМАНематериальныеАктивы.СтавкаНДС КАК СтавкаНДС,
		|	ПоступлениеНМАНематериальныеАктивы.НематериальныйАктив.бит_ОбъектСтроительства КАК ОбъектНМА
		|ПОМЕСТИТЬ ВТ_ДанныеДоЗаписи
		|ИЗ
		|	Документ.ПоступлениеНМА.НематериальныеАктивы КАК ПоступлениеНМАНематериальныеАктивы
		|ГДЕ
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка = &Ссылка
		|	И ПоступлениеНМАНематериальныеАктивы.Ссылка.СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ(&СчетаУчетаРасчетовСКонтрагентом)
		|	И ПоступлениеНМАНематериальныеАктивы.СчетУчета В ИЕРАРХИИ(&СчетаУчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеНМАНематериальныеАктивы.СтавкаНДС,
		|	ПоступлениеНМАНематериальныеАктивы.СчетУчета,
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка.ДоговорКонтрагента,
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка.Дата,
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка.СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка.ДатаВходящегоДокумента,
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка.Контрагент,
		|	ПоступлениеНМАНематериальныеАктивы.ок_Аналитика_2,
		|	ПоступлениеНМАНематериальныеАктивы.НематериальныйАктив.бит_ОбъектСтроительства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДоЗаписи.Дата КАК Дата,
		|	ДанныеДоЗаписи.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ДанныеДоЗаписи.Контрагент КАК Контрагент,
		|	ДанныеДоЗаписи.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДанныеДоЗаписи.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ДанныеДоЗаписи.СчетУчета КАК СчетУчета,
		|	ДанныеДоЗаписи.Объект КАК Объект,
		|	ДанныеДоЗаписи.Сумма КАК Сумма,
		|	ДанныеДоЗаписи.СуммаНДС КАК СуммаНДС,
		|	ДанныеПослеЗаписи.Дата КАК Дата_После,
		|	ДанныеПослеЗаписи.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента_После,
		|	ДанныеПослеЗаписи.Контрагент КАК Контрагент_После,
		|	ДанныеПослеЗаписи.ДоговорКонтрагента КАК ДоговорКонтрагента_После,
		|	ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом_После,
		|	ДанныеПослеЗаписи.СчетУчета КАК СчетУчета_После,
		|	ДанныеПослеЗаписи.Объект КАК Объект_После,
		|	ДанныеПослеЗаписи.Сумма КАК Сумма_После,
		|	ДанныеПослеЗаписи.СуммаНДС КАК СуммаНДС_После
		|ИЗ
		|	ВТ_ДанныеДоЗаписи КАК ДанныеДоЗаписи
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеПослеЗаписи КАК ДанныеПослеЗаписи
		|		ПО ДанныеДоЗаписи.Дата = ДанныеПослеЗаписи.Дата
		|			И ДанныеДоЗаписи.СчетУчетаРасчетовСКонтрагентом = ДанныеПослеЗаписи.СчетУчетаРасчетовСКонтрагентом
		|			И ДанныеДоЗаписи.Контрагент = ДанныеПослеЗаписи.Контрагент
		|			И ДанныеДоЗаписи.ДоговорКонтрагента = ДанныеПослеЗаписи.ДоговорКонтрагента
		|			И ДанныеДоЗаписи.СчетУчета = ДанныеПослеЗаписи.СчетУчета
		|			И ДанныеДоЗаписи.Объект = ДанныеПослеЗаписи.Объект
		|			И ДанныеДоЗаписи.ДатаВходящегоДокумента = ДанныеПослеЗаписи.ДатаВходящегоДокумента
		|			И ДанныеДоЗаписи.СтавкаНДС = ДанныеПослеЗаписи.СтавкаНДС
		|			И ДанныеДоЗаписи.Сумма = ДанныеПослеЗаписи.Сумма
		|			И ДанныеДоЗаписи.СуммаНДС = ДанныеПослеЗаписи.СуммаНДС
		|			И ДанныеДоЗаписи.ОбъектНМА = ДанныеПослеЗаписи.ОбъектНМА
		|ГДЕ
		|	(ДанныеДоЗаписи.Дата ЕСТЬ NULL
		|			ИЛИ ДанныеПослеЗаписи.Дата ЕСТЬ NULL)";
	
	
	ТЧ_НематериальныеАктивы = Источник.НематериальныеАктивы.Выгрузить();
	
	СчетаУчетаРасчетовСКонтрагентом = Новый СписокЗначений();
	СчетаУчетаРасчетовСКонтрагентом.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками"));
	СчетаУчетаРасчетовСКонтрагентом.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами"));
	
	СчетаУчета = Новый СписокЗначений();
	СчетаУчета.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы"));
	
	Запрос.УстановитьПараметр("Ссылка", 							Источник.Ссылка);
	Запрос.УстановитьПараметр("Дата", 								Источник.Дата);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", 			Источник.ДатаВходящегоДокумента);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", 				Источник.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", 						Источник.Контрагент);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", 	Источник.СчетУчетаРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("СчетаУчетаРасчетовСКонтрагентом", 	СчетаУчетаРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("СчетаУчета", 						СчетаУчета);
	Запрос.УстановитьПараметр("ТЧ_НематериальныеАктивы", 			ТЧ_НематериальныеАктивы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-12-03 (#3533)
Процедура ок_ПередЗаписьюДокументаФактаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-12-20 Начало (#3587)
	Если Источник.ДополнительныеСвойства.Свойство("НеПроверятьНаличиеЗнРДСдляДокументовФакта")
		И Источник.ДополнительныеСвойства.НеПроверятьНаличиеЗнРДСдляДокументовФакта = Истина Тогда
		Возврат;
	КонецЕсли;	
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-12-20 Конец (#3587)
	
	// проверим связку документа с ЗнРДС, если есть, то запретим изменение документа
	МетаданныеДокумента = Источник.Ссылка.Метаданные();
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеДокумента) 
		И ЗначениеЗаполнено(Источник.Ссылка) 
		И (Источник.Проведен
			ИЛИ МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить) Тогда
		
		МассивДокументовРасчета = Новый Массив();
		МассивДокументовРасчета.Добавить(Источник.Ссылка);
		Если РегистрыБухгалтерии.Хозрасчетный.ПроверитьНаличиеСозданногоДокументаЗнРДСВСтатусе(МассивДокументовРасчета) Тогда
			
			Отказ = Истина;
			
			пТекстОшибки = НСтр("ru = 'Не удалось записать документ, так как документ связан с Заявкой на расходование денежных средств.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки);
			ЗаписьЖурналаРегистрации("Перед записью документа", УровеньЖурналаРегистрации.Ошибка, МетаданныеДокумента, Источник.Ссылка, пТекстОшибки);

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-12-03 (#3533)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-30 (#3614)
Процедура ок_ОбновитьРССостоянияЭДПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И (СостоянияЭД.ок_СтатусЭД <> &ок_СтатусЭД
		|			ИЛИ СостоянияЭД.ок_ВидДО <> &ок_ВидДО)";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", 	Источник.Ссылка);
	Запрос.УстановитьПараметр("ок_СтатусЭД", 			Источник.ок_Статус);
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-04 (#3816)
	//Если Источник.ПрофильНастроекЭДО <> ПредопределенноеЗначение("Справочник.ПрофилиНастроекЭДО.ПустаяСсылка" ) Тогда
	Если Не ПустаяСтрока(Источник.ИдентификаторОрганизации) Тогда
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-04 (#3816)
		ок_ВидДО = ПредопределенноеЗначение("Перечисление.ок_ВидыДокументооборота.Электронный");
	Иначе
		ок_ВидДО = ПредопределенноеЗначение("Перечисление.ок_ВидыДокументооборота.Бумажный");
	КонецЕсли;
	Запрос.УстановитьПараметр("ок_ВидДО", ок_ВидДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СсылкаНаОбъект = Выборка.СсылкаНаОбъект;
		
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Продолжить;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		КонецЕсли;
		
		НоваяЗаписьНабора.ок_СтатусЭД = Источник.ок_Статус;
		НоваяЗаписьНабора.ок_ВидДО = ок_ВидДО;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-30 (#3614)

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-06-02 (#4206)
Процедура ок_УдалениеОдинаковыхПроводокПередЗаписью(Источник, Отказ, РежимЗаписи) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2")  Тогда
		
		Если ТипЗнч(Источник.Отбор.Регистратор.Значение) = Тип("ДокументСсылка.бит_му_СворачиваниеЗадолженности") Тогда
			УдалениеПроводокСворачиваниеЗадолженности(Источник, Отказ);
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление проводок из набора записей РБУ бит_Дополнительный_2
//
// Параметры:
//  Источник - РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2 - Проверяемый набор записей.
//  Отказ - Булево - Признак отказа
//  ВыполнениеОбработкой - Булево - Признак того, что операция выполняется обработкой
Процедура УдалениеПроводокСворачиваниеЗадолженности(Источник, Отказ, ВыполнениеОбработкой = Ложь) Экспорт
	
	Если Отказ  Тогда
		Возврат;
	КонецЕсли;
	
	// При выполнении обработкой обрабатываются все объекты независимо от признака
	Если Не ВыполнениеОбработкой Тогда
		
		НеФормироватьОборотыВнутриОдногоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Отбор.Регистратор.Значение, "ок_НеФормироватьОборотыВнутриОдногоСчета");																	
		
		Если Не НеФормироватьОборотыВнутриОдногоСчета Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	          
	МассивУдаляемыхЗаписей = Новый Массив;
	
	Для каждого ЗаписьНабора Из Источник Цикл
		
		Если ЗаписьНабора.СчетДт <> ЗаписьНабора.СчетКт Тогда
			Продолжить;
		КонецЕсли;
		
		СубконтоСчета = ЗаписьНабора.СчетДт.ВидыСубконто;				
		УдалятьЗапись = Истина; // изначально считаем, что запись будет удалена, далее, если хотя бы одно значение субконто в ДТ <> этому же значению субконто в КТ тогда запись остается  

		Для каждого Субконто Из СубконтоСчета Цикл
			
			Если ЗаписьНабора.СубконтоДт[Субконто.ВидСубконто] <> ЗаписьНабора.СубконтоКт[Субконто.ВидСубконто] Тогда
				УдалятьЗапись = Ложь;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
		Если УдалятьЗапись Тогда
			МассивУдаляемыхЗаписей.Добавить(ЗаписьНабора);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого УдаляемаяЗапись Из МассивУдаляемыхЗаписей Цикл
		Источник.Удалить(УдаляемаяЗапись);
	КонецЦикла;
	
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-06-02 (#4206)

//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Начало 2021-04-02 (#НТП_БП06_ФР05)
Процедура ок_СрокИсполнения_ПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ Или Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;

	СвойствоСрокИсполнения = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "СрокИсполнения"); 	
	Если СвойствоСрокИсполнения.Пустая() Тогда 
		Возврат;
	КонецЕсли;

	СрокИсполнения = Неопределено;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеДопРасходов")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеНМА") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(ДанныеДокумента.Дата, ДЕНЬ, ВЫБОР
		|			КОГДА ДанныеДокумента.ДоговорКонтрагента.УстановленСрокОплаты 
		|				ТОГДА ДанныеДокумента.ДоговорКонтрагента.СрокОплаты
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СрокИсполнения
		|ИЗ
		|	ИмяДокумента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяДокумента", "Документ." + Источник.Метаданные().Имя);
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СрокИсполнения = ВыборкаДетальныеЗаписи.СрокИсполнения;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ РеализацияТоваровУслуг.ДоговорКонтрагента.ок_СложныйДоговор
		|			ТОГДА ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, ВЫБОР
		|						КОГДА РеализацияТоваровУслуг.ДоговорКонтрагента.УстановленСрокОплаты 
		|							ТОГДА РеализацияТоваровУслуг.ДоговорКонтрагента.СрокОплаты
		|						ИНАЧЕ 0
		|					КОНЕЦ)
		|		КОГДА ДополнительныеСведения.Значение = &СвойствоПостояннаяАП
		|			ТОГДА ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, МЕСЯЦ, &ПостояннаяАП)
		|		КОГДА ДополнительныеСведения.Значение = &СвойствоДоплатаПоТО
		|			ТОГДА ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, МЕСЯЦ, &ДоплатаПоТО)
		|		КОГДА ДополнительныеСведения.Значение = &СвойствоПеременнаяАП
		|			ТОГДА ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, МЕСЯЦ, &ПеременнаяАП)
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК СрокИсполнения
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО РеализацияТоваровУслуг.Ссылка = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство = &СвойствоВидАП)
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
		
		ПостояннаяАП = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда","ПостояннаяАП", 0);
		ДоплатаПоТО  = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда","ДоплатаПоТО", 0);
		ПеременнаяАП = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда","ПеременнаяАП", 0);
		СвойствоВидАП = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ВидАП");
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.УстановитьПараметр("СвойствоВидАП", СвойствоВидАП);
		Запрос.УстановитьПараметр("СвойствоПостояннаяАП", Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("Постоянная АП",,,СвойствоВидАП));
		Запрос.УстановитьПараметр("ПостояннаяАП", ?(ТипЗнч(ПостояннаяАП)=Тип("Число"), ПостояннаяАП, 0));
		Запрос.УстановитьПараметр("СвойствоДоплатаПоТО", Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("Доплата по ТО",,,СвойствоВидАП));
		Запрос.УстановитьПараметр("ДоплатаПоТО", ?(ТипЗнч(ДоплатаПоТО)=Тип("Число"), ДоплатаПоТО, 0));
		Запрос.УстановитьПараметр("СвойствоПеременнаяАП", Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("Переменная АП",,,СвойствоВидАП));
		Запрос.УстановитьПараметр("ПеременнаяАП", ?(ТипЗнч(ПеременнаяАП)=Тип("Число"), ПеременнаяАП, 0));
		
		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СрокИсполнения = ВыборкаДетальныеЗаписи.СрокИсполнения;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаДолга") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(КорректировкаДолга.Дата, ДЕНЬ, ЕСТЬNULL(СрокиОплаты.СрокОплаты, 0)) КАК СрокИсполнения
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МИНИМУМ(КорректировкаДолгаКредиторскаяЗадолженность.КорДоговорКонтрагента.СрокОплаты) КАК СрокОплаты
		|		ИЗ
		|			Документ.КорректировкаДолга.КредиторскаяЗадолженность КАК КорректировкаДолгаКредиторскаяЗадолженность
		|		ГДЕ
		|			КорректировкаДолгаКредиторскаяЗадолженность.Ссылка = &Ссылка
		|			И КорректировкаДолгаКредиторскаяЗадолженность.КорДоговорКонтрагента.УстановленСрокОплаты
		|			И КорректировкаДолгаКредиторскаяЗадолженность.КорДоговорКонтрагента.СрокОплаты <> ДАТАВРЕМЯ(1, 1, 1)) КАК СрокиОплаты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	КорректировкаДолга.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СрокИсполнения = ВыборкаДетальныеЗаписи.СрокИсполнения;
		КонецЕсли;

	КонецЕсли;

	НаборЗаписейДополнительныеСведения = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписейДополнительныеСведения.Отбор.Объект.Установить(Источник.Ссылка);
	НаборЗаписейДополнительныеСведения.Отбор.Свойство.Установить(СвойствоСрокИсполнения);
	НаборЗаписейДополнительныеСведения.Прочитать();

	Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда 
		Если НаборЗаписейДополнительныеСведения.Количество() Тогда 
			НаборЗаписейДополнительныеСведения.Очистить();
			НаборЗаписейДополнительныеСведения.Записать();
		КонецЕсли;
	ИначеЕсли НаборЗаписейДополнительныеСведения.Количество() Тогда 
		ЗаписьНабора = НаборЗаписейДополнительныеСведения[0];
		Если ЗаписьНабора.Значение <> СрокИсполнения Тогда 
			ЗаписьНабора.Значение = СрокИсполнения;
			НаборЗаписейДополнительныеСведения.Записать();
		КонецЕсли;
	Иначе
		ЗаписьНабора = НаборЗаписейДополнительныеСведения.Добавить();
		ЗаписьНабора.Объект = Источник.Ссылка;
		ЗаписьНабора.Свойство = СвойствоСрокИсполнения;
		ЗаписьНабора.Значение = СрокИсполнения;
		НаборЗаписейДополнительныеСведения.Записать();
	КонецЕсли;

КонецПроцедуры
//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Конец 2021-04-02 (#НТП_БП06_ФР05)

//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Начало 2021-04-21 (#НТП_БП06_ФР01, #НТП_БП06_ФР02)
Процедура ок_ДокументКорректировкаДолга_ПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если Отказ Или Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТЗКредиторскаяЗадолженность = Источник.КредиторскаяЗадолженность.Выгрузить(, "НомерСтроки, Сделка, ДоговорКОнтрагента, КорДоговорКонтрагента, ок_ФВБ");
		АдресТаблицыВХранилище = ПоместитьВоВременноеХранилище(ТЗКредиторскаяЗадолженность, Новый УникальныйИдентификатор);
		АдресТаблицыВХранилище = Документы.КорректировкаДолга.ок_ОбработатьКЗДляПроведенияПоБК(АдресТаблицыВХранилище);
		ТЗКредиторскаяЗадолженность = ПолучитьИзВременногоХранилища(АдресТаблицыВХранилище);
		Для Каждого СтрокаТЗКредиторскаяЗадолженность Из ТЗКредиторскаяЗадолженность Цикл
			ИндексСтрокиТЧ = СтрокаТЗКредиторскаяЗадолженность.НомерСтроки-1;
			ЗаполнитьЗначенияСвойств(Источник.КредиторскаяЗадолженность[ИндексСтрокиТЧ], СтрокаТЗКредиторскаяЗадолженность, "ок_ФВБ");   
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ок_ДокументКорректировкаДолга_ОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт

	Если Отказ Или Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;

	МассивФВБ = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Источник.КредиторскаяЗадолженность.ВыгрузитьКолонку("ок_ФВБ"));
	Если МассивФВБ.Количество() > 1 Тогда 
		ТекстСообщения = НСтр("ru = 'Выбранные документы расчетов связаны с разными номерами заявок.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, ,	"Объект", Отказ);
	КонецЕсли;

КонецПроцедуры
//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Конец 2021-04-21 (#НТП_БП06_ФР01, #НТП_БП06_ФР02)

//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-14 (#НТП_МП_02)
Функция ок_ПроверкаОчисткиСубконто(ТипРегистратора, Регистратор, Проводка, ДтКт)
	
	Если НЕ ТипРегистратора = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
		И НЕ ТипРегистратора = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Контрагент 			= Проводка["Субконто"+ДтКт].Контрагенты;
	Договор				= Проводка["Субконто"+ДтКт].Договоры;
	НаправлениеДоговора = Договор.бит_НаправлениеДоговора;
	ПрофильРазноски		= Регистратор.СБ_ПрофильРазноски;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Контрагент", Контрагент);
	ПараметрыПроверки.Вставить("Договор", Договор);
	ПараметрыПроверки.Вставить("НаправлениеДоговора", НаправлениеДоговора);
	ПараметрыПроверки.Вставить("ПрофильРазноски", ПрофильРазноски);
	
	Возврат ок_ПроверкаВыполненияУсловийОчисткиСубконто(ПараметрыПроверки);
	
КонецФункции
//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-14 (#НТП_МП_02)

//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-06-18 (#НТП_МП_02)
#Область НТП_МП_02
	
// Проверяет выполнение условий по настройке казначейства Ок_НастройкиОтбораДляОчисткиСубконто3
// ПараметрыПроверки - структура со свойствами Контрагент, Договор, НаправлениеДоговора, ПрофильРазноски
// возвращает Истина, если условия выполнены, Ложе, в противном случае
Функция ок_ПроверкаВыполненияУсловийОчисткиСубконто(ПараметрыПроверки) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Контрагент 			= ПараметрыПроверки.Контрагент;
	Договор				= ПараметрыПроверки.Договор;
	НаправлениеДоговора = ПараметрыПроверки.НаправлениеДоговора;
	ПрофильРазноски		= ПараметрыПроверки.ПрофильРазноски;
	
	СтрокаКомпоновщика = Обработки.ок_НастройкиОтборовДляОчисткиСубконто3.ПолучитьЗначениеКонстанты("Ок_НастройкиОтбораДляОчисткиСубконто3", Неопределено);
	
	Если СтрокаКомпоновщика = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Настройки = СериализаторXDTO.XMLЗначение(Тип("ХранилищеЗначения"), СтрокаКомпоновщика).Получить();
	
	СКД = Обработки.ок_НастройкиОтборовДляОчисткиСубконто3.ПолучитьМакет("Макет");
	
	СКД.НаборыДанных.НаборДанных1.Запрос = Обработки.ок_НастройкиОтборовДляОчисткиСубконто3.ПолучитьТекстЗапросаДляПроверки();
	
	НовыйИсточник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(НовыйИсточник);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Установим параметры	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПрофильРазноски"), 		ПрофильРазноски);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НаправлениеДоговора"), 	НаправлениеДоговора);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Контрагент"), 			Контрагент);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Договор"), 				Договор);

	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Возврат Истина;	
	КонецЕсли;	
	
	Возврат Ложь;	
	
КонецФункции

Процедура ок_ПлатежныеДокументыПроставитьСпособ_ПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	ЕстьРасшифровкаПлатежа = бит_ОбщегоНазначенияПереопределяемый.ЕстьРасшифровкаПлатежа(Источник.Ссылка, 
							 Источник.ВидОперации);

	Если ЕстьРасшифровкаПлатежа Тогда
		// перезаполним способ, если выполняются условия очистки субконто3
		СпНеПогашать = Перечисления.СпособыПогашенияЗадолженности.НеПогашать;
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Контрагент", Источник.Контрагент);
		ПараметрыПроверки.Вставить("ПрофильРазноски", Источник.СБ_ПрофильРазноски);
		
		Для каждого СтрокаРасшифровки Из Источник.РасшифровкаПлатежа Цикл
			
			Если СтрокаРасшифровки.СпособПогашенияЗадолженности = СпНеПогашать Тогда
				Продолжить;
			КонецЕсли; 
			// проверим выполнение условия
			ПараметрыПроверки.Вставить("Договор", СтрокаРасшифровки.ДоговорКонтрагента);
			ПараметрыПроверки.Вставить("НаправлениеДоговора", СтрокаРасшифровки.ДоговорКонтрагента.бит_НаправлениеДоговора);
			
			Если ок_ПроверкаВыполненияУсловийОчисткиСубконто(ПараметрыПроверки) Тогда        
				СтрокаРасшифровки.СпособПогашенияЗадолженности = СпНеПогашать;
				СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам = СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли; 
			
		КонецЦикла;
	КонецЕсли; 
						 
КонецПроцедуры

#КонецОбласти
//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Конец 2021-04-21 (#НТП_БП06_ФР01, #НТП_БП06_ФР02)

//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Начало 2021-04-19 (#ТП_БП11_ФР01, #ТП_БП11_ФР05, #ТП_БП11_ФР11)
Процедура ок_КассовыеДокументы_ОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;

	ЗаполняемыеСвойства = Новый Структура();

	Если Источник.РасшифровкаПлатежа.Количество() И ЗначениеЗаполнено(Источник.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда 
		ЗаполняемыеСвойства.Вставить("ок_Объект", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.РасшифровкаПлатежа[0].ДоговорКонтрагента, "Объект"));
	КонецЕсли;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		РеквизитыАО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Номер, Дата"); 		
		ЗаполняемыеСвойства.Вставить("Приложение", СтрШаблон("Авансовый отчет %1 от %2", РеквизитыАО.Номер, Формат(РеквизитыАО.Дата, "ДЛФ=D")));  

		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда 		
			Основание = "Возврат подотчетных сумм";
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда 
			Основание = "Выдача подотчетных сумм";
		Иначе
			Основание = "";
		КонецЕсли;
		ЗаполняемыеСвойства.Вставить("Основание", Основание); 
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Источник, ЗаполняемыеСвойства);

КонецПроцедуры
//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Начало 2021-04-19 (#ТП_БП11_ФР01, #ТП_БП11_ФР05, #ТП_БП11_ФР11)

//ОКЕЙ Беднягин Е.А. (ПервыйБИТ) Начало 2021-04-20 (#ТП_БП11_ФР03)
Процедура ОбработатьСубконтоПередЗаписью_КассовыеДокументы(Проводки, Регистратор, ТипРегистратора)

	Если Проводки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	Если ТипРегистратора = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда 
		ДтКт = "Дт";
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ДтКт = "Кт";
	Иначе
		Возврат;
	КонецЕсли;

	ЗначениеСубконтоОбъект = Неопределено;
	Для Каждого Проводка Из Проводки Цикл
		
		Если Проводка["Счет" + ДтКт] = ПланыСчетов.Хозрасчетный.КассаОрганизации
		  Или Проводка["Счет" + ДтКт] = ПланыСчетов.Хозрасчетный.ОперационнаяКасса Тогда 
			Если ЗначениеСубконтоОбъект = Неопределено Тогда 
				ЗначениеСубконтоОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "ок_Объект");
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт], Проводка["Субконто" + ДтКт], "ОбъектыСтроительства", ЗначениеСубконтоОбъект);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-06-18 (#НТП_МП_02)

