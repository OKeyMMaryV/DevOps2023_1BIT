
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Фуекционал, расположенный ниже копирует ОМ "БухгалтерскиеОтчетыКлиент"
// В необходимой части. Предназначен для выполнения бухгалтерских отчетов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ТабличноеПолеПоСчетам

// Вызывается при изменении счета в строке табличного поля формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	ИмяЭлемента - Строка - Имя табличного поля формы.
//	Элемент - ПолеФормы - Поле ввода со счетом, значение которого было изменено.
//
Процедура ТабличноеПолеПоСчетамСчетПриИзменении(ФормаОтчета, ИмяЭлемента, Элемент) Экспорт
	
	ИспользоватьОднуНоменклатурнуюГруппу = Ложь; //БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	ВестиУчетПоДоговорам                 = Истина; //РаботаСДоговорамиКонтрагентовБПВызовСервера.ВестиУчетПоДоговорам();
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Счет) Тогда
			ДанныеСчета = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
			ТекущиеДанные.ПоСубсчетам = ДанныеСчета.КоличествоСубконто = 0;

			СтрокаПоСубконто    = "";
			СтрокаПредставление = "";
			
			//Если ИмяЭлемента = "ГруппировкаКор" 
			//	И ДанныеСчета.УчетПоПодразделениям
			//	И БухгалтерскиеОтчетыВызовСервера.ИспользоватьПодразделения() Тогда
			//	СтрокаПоСубконто = СтрокаПоСубконто + "+" + "0";
			//	СтрокаПредставление = СтрокаПредставление + "Подразделения, ";
			//КонецЕсли;
			
			Если ДанныеСчета.КоличествоСубконто > 0 Тогда
				Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
					// Если одна номенклатурная группа, то не добавляем Номенклатурные группы в список субконто.
					Если ИспользоватьОднуНоменклатурнуюГруппу 
						И ДанныеСчета["ВидСубконто" + Индекс] = бит_БухгалтерскийУчетВызовСервераПовтИсп.СубконтоНоменклатурныеГруппы(ТекущиеДанные.Счет) Тогда
						СтрокаПоСубконто    = СтрокаПоСубконто + "-" + Индекс;
					ИначеЕсли НЕ ВестиУчетПоДоговорам 
						И ДанныеСчета["ВидСубконто" + Индекс] = бит_БухгалтерскийУчетВызовСервераПовтИсп.СубконтоДоговоры(ТекущиеДанные.Счет) Тогда
						СтрокаПоСубконто    = СтрокаПоСубконто + "-" + Индекс;
					Иначе
						СтрокаПоСубконто    = СтрокаПоСубконто + "+" + Индекс;
						СтрокаПредставление = СтрокаПредставление + ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ", ";
					КонецЕсли;
					
				КонецЦикла;
				СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
			КонецЕсли;
			ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
			ТекущиеДанные.Представление = СтрокаПредставление;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при начале выбора поля представления в строке табличного поля формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	ИмяЭлемента - Строка - Имя табличного поля формы.
//	Элемент - ПолеФормы - Поле с представлением.
//	ДанныеВыбора - СписокЗначений - Список доступных значений для выбора.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ТабличноеПолеПоСчетамПредставлениеНачалоВыбора(ФормаОтчета, ИмяЭлемента, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтрокаПоСубконто = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.ПоСубконто;
	Счет = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.Счет;
	ДанныеСчета = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	СписокВидовСубконто = Новый СписокЗначений;
	Если ПустаяСтрока(СтрокаПоСубконто) Тогда		
		Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
			СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Индекс], ДанныеСчета["ВидСубконто" + Индекс + "Наименование"]);
		КонецЦикла;
	Иначе
		КоличествоСубконто = СтрДлина(СтрокаПоСубконто) / 2;
		Для Индекс = 1 По КоличествоСубконто Цикл
			ИндексСубконто = Сред(СтрокаПоСубконто, Индекс*2, 1);
			Если ИндексСубконто = "0" Тогда
				СписокВидовСубконто.Добавить("Подразделения", "Подразделения", ?(Сред(СтрокаПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь));
			Иначе
				СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Сред(СтрокаПоСубконто, Индекс*2, 1)], ДанныеСчета["ВидСубконто" + Сред(СтрокаПоСубконто, Индекс*2, 1) + "Наименование"], ?(Сред(СтрокаПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкаПоСубконто", Новый Структура("СписокВидовСубконто", СписокВидовСубконто), Элемент);
	
КонецПроцедуры

// Вызывается из обработчика события "ОбработкаВыбора" поля представления в строке табличного поля формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	ИмяЭлемента - Строка - Имя табличного поля формы.
//	Элемент - ПолеФормы - Поле с представлением.
//	ВыбранноеЗначение - Произвольный - Выбранное значение.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ТабличноеПолеПоСчетамПредставлениеОбработкаВыбора(ФормаОтчета, ИмяЭлемента, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	ДанныеСчета = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда 
		СтрокаПоСубконто = "";
		СтрокаПредставление = "";
		Для Каждого ЭлементСписка Из ВыбранноеЗначение Цикл
			Если ЭлементСписка.Пометка Тогда
				СтрокаПоСубконто    = СтрокаПоСубконто + "+";
				СтрокаПредставление = СтрокаПредставление + Строка(ЭлементСписка.Значение) + ", ";
			Иначе
				СтрокаПоСубконто = СтрокаПоСубконто + "-";
			КонецЕсли;
			
			Если бит_БухгалтерскийУчетВызовСервераПовтИсп.ЭтоВидСубконто(ЭлементСписка.Значение) Тогда
				Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл 
					Если ДанныеСчета["ВидСубконто" + Индекс] = ЭлементСписка.Значение Тогда
						СтрокаПоСубконто = СтрокаПоСубконто + Индекс;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтрокаПоСубконто = СтрокаПоСубконто + "0";
			КонецЕсли;
		КонецЦикла;
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
		
		ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
		ТекущиеДанные.Представление = СтрокаПредставление;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РасшифровкаОтчетов

// По регистратору.

// Процедура открывает документ регистратор движения
// и позиционируемся на строке движения в документе операция.
// 
// Параметры
//  Расшифровка            - Структура.
//  ДокументРегистратор    - ДокументСсылка.
//  ИмяДокументаОперация   - Строка.
//  ИмяРегистраБухгалтерии - Строка.
//  ИмяТабличногоПоля      - Строка.
// 
Процедура ОткрытьДокументРегистраторДвиженияИПозиционироватьсяНаСтроке(Расшифровка, ДокументРегистратор, ИмяДокументаОперация, 
                                                                       ИмяРегистраБухгалтерии, ИмяТабличногоПоля) Экспорт

	Если ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка." + ИмяДокументаОперация) Тогда
        
        ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ"				 , ДокументРегистратор);
		ПараметрыФормы.Вставить("ИмяТабличногоПоля"	 , ИмяТабличногоПоля);
		ПараметрыФормы.Вставить("НомерСтрокиДвижения", Расшифровка["НомерСтроки"]-1);
		ОткрытьФорму("Документ." + ИмяДокументаОперация + ".ФормаОбъекта", ПараметрыФормы);
		
	Иначе
		
		ПоказатьЗначение( , ДокументРегистратор);
			
	КонецЕсли;

КонецПроцедуры // ОткрытьДокументРегистраторДвиженияИПозиционироватьсяНаСтроке()

// Процедура открывает расшифровку отчета.
// 
// Параметры:
//  Расшифровка 		   - Структура.
//  ИмяРегистраБухгалтерии - Строка.
// 
Процедура ОбработкаРасшифровкиПоРегистратору(Расшифровка, ИмяРегистраБухгалтерии) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда

		Если ИмяРегистраБухгалтерии = "бит_Бюджетирование" Тогда
			ИмяДокументаОперация = "бит_ОперацияБюджетирование";
			ИмяТабличногоПоля 	 = "ДвиженияБитБюджетирование";
		Иначе	
			ИмяДокументаОперация = "бит_ОперацияУправленческий";
		    ИмяТабличногоПоля    = "Движения" + ИмяРегистраБухгалтерии;
		КонецЕсли;
		
	    // Открытие документа и позиционирование на строке.
		бит_БухгалтерскиеОтчетыКлиент.ОткрытьДокументРегистраторДвиженияИПозиционироватьсяНаСтроке(Расшифровка
																	, Расшифровка.Регистратор
																	, ИмяДокументаОперация
																	, ИмяРегистраБухгалтерии
																	, ИмяТабличногоПоля);

	КонецЕсли;	
	
КонецПроцедуры // РезультатОбработкаРасшифровки()


// Процедура - завершение выбора элемента расшифровки.
// 
Процедура РезультатОбработкаРасшифровки_ВыборЭлемента_Завершение(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	ВыбраннаяРасшифровка = ?(ВыбранноеЗначение = Неопределено, Неопределено, ВыбранноеЗначение.Значение);
		
	РезультатОбработкаРасшифровки_РасшифровкаВыбранного(ВыбраннаяРасшифровка, ДопПараметры.Элемент, ДопПараметры.Отчет, ДопПараметры.ЭтаФорма);
	
КонецПроцедуры // РезультатОбработкаРасшифровки_ВыборЭлемента_Завершение()

// Процедура открывает стандартную расшифровку отчета.
// 
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, Отчет, ЭтаФорма) Экспорт
											
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяРасшифровка = Неопределено;
	Если ТипЗнч(Расшифровка) = Тип("СписокЗначений") Тогда		
		
		Если Расшифровка.Количество() = 1 Тогда
			ВыбранноеЗначение = Расшифровка[0];
		Иначе	
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Элемент" , Элемент);
			ДопПараметры.Вставить("Отчет"	, Отчет);
			ДопПараметры.Вставить("ЭтаФорма", ЭтаФорма);
			ОбработчикВЭ = Новый ОписаниеОповещения("РезультатОбработкаРасшифровки_ВыборЭлемента_Завершение", бит_БухгалтерскиеОтчетыКлиент.ЭтотОбъект, ДопПараметры);
			Расшифровка.ПоказатьВыборЭлемента(ОбработчикВЭ, Нстр("ru = 'Выберите расшифровку'"), Расшифровка[0]);
			Возврат;
		КонецЕсли;	
								
		Если ВыбранноеЗначение <> Неопределено Тогда
			ВыбраннаяРасшифровка = ВыбранноеЗначение.Значение;
		КонецЕсли; 		
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") ИЛИ ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда     		
		
		ВыбраннаяРасшифровка = Расшифровка; 		
		
	КонецЕсли;
	
	РезультатОбработкаРасшифровки_РасшифровкаВыбранного(ВыбраннаяРасшифровка, Элемент, Отчет, ЭтаФорма);
			
КонецПроцедуры // РезультатОбработкаРасшифровки()

// Процедура дополнить дополнительными отборами пареметры расшифровки отчета.
// 
// Параметры:
// 	ВыбраннаяРасшифровка - Структура/Соответствие.
// 
Процедура ДополнитьДопОтборамиРасшифровкуДанных(ВыбраннаяРасшифровка) Экспорт
	
	Если ТипЗнч(ВыбраннаяРасшифровка) = Тип("Структура") Тогда
			
		ОтборыДанных = Неопределено;
		ВыбраннаяРасшифровка.Свойство("Отбор", ОтборыДанных);
			
		ДопОтборыДанных = Неопределено;
		ВыбраннаяРасшифровка.Свойство("ДополнительныеОтборы", ДопОтборыДанных);
			
	Иначе
			
		ОтборыДанных    = ВыбраннаяРасшифровка["Отбор"];
		ДопОтборыДанных = ВыбраннаяРасшифровка["ДополнительныеОтборы"];
				
	КонецЕсли;
		
	// Дополнительная расшифровка
	ДополнитьОтборОтчетаДополнительнымиПараметрами(ОтборыДанных, ДопОтборыДанных);	
	
КонецПроцедуры // ДополнитьДопОтборамиРасшифровкуДанных()

// Процедура открывает расшифровку отчета.
// 
// Параметры:
//  Отчет		- ДанныеФормыСтруктура.
//  ЭтаФорма    - УправляемаяФорма.
//  Расшифровка - Структура.
// 
Процедура ОбработкаРасшифровкиСтандартногоОтчета(Отчет, ЭтаФорма, ВыбраннаяРасшифровка, ОбщаяРасшифровка = Неопределено) Экспорт

	Если ОбщаяРасшифровка <> Неопределено Тогда
		ВыбраннаяРасшифровка.Вставить("ОбщаяРасшифровка"   , ОбщаяРасшифровка);	
		ВыбраннаяРасшифровка.Вставить("ПоказыватьЗаголовок", ОбщаяРасшифровка.ПоказыватьЗаголовок);
	КонецЕсли;	
	
	СпособРасшифровки = ?(ВыбраннаяРасшифровка.Свойство("СпособРасшифровки")
						, ВыбраннаяРасшифровка.СпособРасшифровки
						, "Отчет");
		
	Если СпособРасшифровки = "Отчет" Тогда			
			
		ИмяОбъекта = ВыбраннаяРасшифровка.ИмяОбъекта;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЭтоОбработкаРасшифровки", Истина);
		ПараметрыФормы.Вставить("ПредставлениеВарианта"  , "Расшифровка");
		ПараметрыФормы.Вставить("Расшифровка" 		     , ВыбраннаяРасшифровка);
		ПараметрыФормы.Вставить("ПоказыватьЗаголовок"    , ВыбраннаяРасшифровка.ПоказыватьЗаголовок);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Если Найти(ЭтаФорма.ИмяФормы, "ОборотыМеждуСубконто") <> 0 Тогда
			ПараметрыФормы.Вставить("ОтчетМенеджер", "ОборотыМеждуСубконто");
		КонецЕсли;

		Если ИмяОбъекта <> Неопределено Тогда
		 	ОткрытьФорму("Отчет." + ИмяОбъекта + ".Форма" , ПараметрыФормы, , Истина);
		КонецЕсли;
		
	ИначеЕсли СпособРасшифровки = "ОткрытьЗначение" Тогда
		
		ПоказатьЗначение(, ВыбраннаяРасшифровка.Значение);
		
	КонецЕсли;
			
КонецПроцедуры // ОбработкаРасшифровкиСтандартногоОтчета()

// Функция получает выбранную расшифровку.
// 
// Параметры:
//  Расшифровка - СписокЗначений Или Структура Или Соответствие.
//  
// Возвращаемое значение:
//   Структура Или Соответствие.
// 
Функция ПолучитьВыбраннуюРасшифровку(Расшифровка) Экспорт
	
	ВыбраннаяРасшифровка = Неопределено;
	
	Если ТипЗнч(Расшифровка) = Тип("СписокЗначений") Тогда
		
		ВыбранноеЗначение = ?(Расшифровка.Количество() = 1
								, Расшифровка[0]
								, Расшифровка.ВыбратьЭлемент(Нстр("ru = 'Выберите расшифровку'"), Расшифровка[0]));
			
		Если ВыбранноеЗначение <> Неопределено Тогда
			ВыбраннаяРасшифровка = ВыбранноеЗначение.Значение;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") ИЛИ ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		
		ВыбраннаяРасшифровка = Расшифровка;
		
	КонецЕсли;
	       
	Возврат ВыбраннаяРасшифровка;
	
КонецФункции // ПолучитьВыбраннуюРасшифровку()

#КонецОбласти

#Область Детализация

// Функция получает параметры формы настройки по субконто.
// 
// Параметры:
//  ТекущиеДанныеПравил  - ДанныеФормыЭлементКоллекции.
// 
// Возвращаемое значение:
//  СписокЗначений.
// 
Функция ПолучитьПараметрыФормыНастройкиПоСубконто(ТекущиеДанныеПравил) Экспорт

	// Открытие формы настройки субконто
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Счет"			    , ТекущиеДанныеПравил.Счет);
	ПараметрыФормы.Вставить("РазворотПоСубконто", ТекущиеДанныеПравил.РазворотПоСубконто);
		
	Возврат ПараметрыФормы;	
	
КонецФункции // ПолучитьПараметрыФормыНастройкиПоСубконто()

#КонецОбласти

#Область Корреспонденции

// Процедура удаляет строки таблицы субконто, соответствующие счету.
// 
// Параметры:
//  ТаблицаСубконто - ДанныеФормыКоллекция.
//  ДтКт  			- Строка (По умолчанию = Неопределено).
// 
Процедура ОчиститьТаблицуСубконтоПоСчету(ТаблицаСубконто, ДтКт = Неопределено) Экспорт

	Если ДтКт = Неопределено Тогда
		ТаблицаСубконто.Очистить();
		Возврат;
	КонецЕсли;
	
	Сч = ТаблицаСубконто.Количество() - 1;
	Пока Сч >= 0 Цикл
	
		СтрокаТаблицы = ТаблицаСубконто[Сч];
		Если Лев(СтрокаТаблицы.Представление, 2) = ДтКт Тогда
			ТаблицаСубконто.Удалить(СтрокаТаблицы);		
		КонецЕсли;
		
		Сч = Сч - 1;
	
	КонецЦикла;
	
КонецПроцедуры // ОчиститьТаблицуСубконтоПоСчету()

#КонецОбласти

#Область Отборы

// Процедура обновляет отбор на основной странице настроек по таблице отборов.
// 
// Параметры:
//  Отчет  		 - ДанныеФормыСтруктура.
//  ТаблицаОтбор - ТаблицаФормы.
//  ИмяЭлемента  - Строка.
// 
Процедура ОбновитьОтборОсновныхНастроекПоТаблицеОтборов(Отчет, ТаблицаОтбор, ИмяЭлемента) Экспорт

	ТекущиеДанные = ТаблицаОтбор.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Имя = ИмяЭлемента Тогда
		
		ИмяВидаСравнения = ИмяЭлемента + "ВидСравнения";
		ИмяИспользование = ИмяЭлемента + "Использование";
	
		Отчет[ИмяЭлемента]     	= ТекущиеДанные.Значение;	
		Отчет[ИмяВидаСравнения] = ТекущиеДанные.ВидСравнения;
		Отчет[ИмяИспользование] = ТекущиеДанные.Использование;	
		
	КонецЕсли;	

КонецПроцедуры // ОбновитьОтборОсновныхНастроекПоТаблицеОтбора()

// Процедура очищает значение.
// 
// Параметры:
//   ТекЗначение - ЛюбаяСсылка или СписокЗначений.
// 
Процедура ОчиститьЗначениеОтбора(ТекЗначение) Экспорт

	ТипТекЗначения = ТипЗнч(ТекЗначение);
	
	Если ТипТекЗначения = Тип("СписокЗначений") Тогда 		
		
		ТекЗначение.Очистить();		
		
	Иначе
		
		ТекЗначение = Неопределено;
		
	КонецЕсли;	

КонецПроцедуры // ОчиститьЗначениеОтбора()

#КонецОбласти

#Область Группировки

// Процедура открывает форму группировки.
// 
// Параметры:
//   РезВыбора - Структура.
//   ДопПараметры - Структура.
// 
Процедура ОткрытьФормуПолейГруппировокЗавершение(РезВыбора, ДопПараметры) Экспорт
	
	Если РезВыбора = Неопределено ИЛИ ТипЗнч(РезВыбора) = Тип("Строка") Тогда
		Возврат;	
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезВыбора);

КонецПроцедуры // ОткрытьФормуПолейГруппировокЗавершение()

// Процедура очищает значение.
// 
// Параметры:
//   Элемент - ЛюбаяСсылка или СписокЗначений.
//   ДанныеВыбора.
//   СтандартнаяОбработка - Булево.
//   фКэшЗначений - Структура.
//   ТчСубконто.
// 
Процедура ОткрытьФормуПолейГруппировок(Элемент, ТекущиеДанные, фКэшЗначений, ИсточникСубконто = Неопределено, Счет = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивГруппировок", фКэшЗначений.МассивГруппировок);
	ПараметрыФормы.Вставить("ИсточникСубконто" , ИсточникСубконто);
	ПараметрыФормы.Вставить("Счет" 			   , Счет);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОбработчикВыб = Новый ОписаниеОповещения("ОткрытьФормуПолейГруппировокЗавершение", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораГруппировокОтчета", ПараметрыФормы, Элемент,,,, ОбработчикВыб);
			
КонецПроцедуры // ОткрытьФормуПолейГруппировок()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура дополняет основной отбор для отчета параметрами из дополнительного отбора.
// 
// Параметры:
// 	ОсновнойОтбор  - Отбор.
// 	ДопРасшифровка - ТаблицаЗначений.
// 
Процедура ДополнитьОтборОтчетаДополнительнымиПараметрами(ОсновнойОтбор, ДопРасшифровка)
	
	Если ДопРасшифровка = Неопределено Или ОсновнойОтбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДопРасшифровка) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Элемент Из ДопРасшифровка Цикл
			
			Если ТипЗнч(ОсновнойОтбор) = Тип("Соответствие") Или ТипЗнч(ОсновнойОтбор) = Тип("Структура") Тогда				
				ОсновнойОтбор.Вставить(Элемент.Имя, Элемент.Значение);  				
			Иначе
				СтрокаОсновногоОтбора = ОсновнойОтбор.Добавить(); 
				ЗаполнитьЗначенияСвойств(СтрокаОсновногоОтбора, Элемент);
			КонецЕсли;
					
		КонецЦикла;   
		
	Иначе	
			
		Для Каждого Элемент Из ДопРасшифровка Цикл
					
			СтрокаОсновногоОтбора = ОсновнойОтбор.Добавить(); 
						
			СтрокаОсновногоОтбора.Значение      = Элемент.Значение;
			СтрокаОсновногоОтбора.ПутьКДанным   = Элемент.Ключ;
			СтрокаОсновногоОтбора.Использование = Истина;
			
			ВидСравненияДанных = бит_БухгалтерскиеОтчетыСервер.ПолучитьВидОтбораПоТипуЗначения(СтрокаОсновногоОтбора.Значение);
			СтрокаОсновногоОтбора.ВидСравнения = ВидСравненияДанных;
			СтрокаОсновногоОтбора.ЗначениеС    = Null;
			СтрокаОсновногоОтбора.ЗначениеПО   = Null;
					
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ДополнитьОтборОтчетаДополнительнымиПараметрами()

// Расшифровка стандартного отчета.
Процедура РезультатОбработкаРасшифровки_РасшифровкаВыбранного(ВыбраннаяРасшифровка, Элемент, Отчет, ЭтаФорма)
	
	КлючОбъекта 	    = ЭтаФорма.фКлючОбъекта;
	ПоказыватьЗаголовок = ЭтаФорма.фПоказыватьЗаголовок;
	ВысотаЗаголовка     = ЭтаФорма.фВысотаЗаголовка;
	Результат			= ЭтаФорма.Результат;
	
	Если ТипЗнч(ВыбраннаяРасшифровка) = Тип("Структура") ИЛИ ТипЗнч(ВыбраннаяРасшифровка) = Тип("Соответствие") Тогда

		// Общая расшифровка из левого верхнего угла.
		ОбщаяРасшифровка = Результат.Область(1, 1).Расшифровка;
		
		Если Найти(КлючОбъекта, "бит_АнализСубконто_") <> 0 Тогда
			
			// Расшифровка колонки находится в заголовке колонки.
			РасшифровкаКолонки = Результат.Область(ВысотаЗаголовка + 2, Элемент.ТекущаяОбласть.Лево).Расшифровка;
			ВыбраннаяРасшифровка.Вставить("ВидОборота", РасшифровкаКолонки);
		
		ИначеЕсли Найти(КлючОбъекта, "бит_АнализСчета_") <> 0 Тогда
			
				// Расшифровка колонки находится в заголовке колонки.
			РасшифровкаКолонки = Результат.Область(ВысотаЗаголовка + 2, Элемент.ТекущаяОбласть.Лево).Расшифровка;
			ВыбраннаяРасшифровка.Вставить("ВидОборота"	 , РасшифровкаКолонки);    				
			ВыбраннаяРасшифровка.Вставить("Периодичность", Отчет.Периодичность);     	
			
		ИначеЕсли Найти(КлючОбъекта, "бит_ОборотыСчета_") <> 0 Тогда
			
			// Расшифровка колонки находится в заголовке колонки.
			РасшифровкаКолонки = Результат.Область(ВысотаЗаголовка + 2, Элемент.ТекущаяОбласть.Лево).Расшифровка;
			
			// Изменение кода. Начало. 28.04.2014{{
			Если Не ЗначениеЗаполнено(РасшифровкаКолонки) Тогда
				ТекстОбластьПоиска = Результат.Область(ВысотаЗаголовка + 2, Элемент.ТекущаяОбласть.Лево).Текст;
				ВыбраннаяРасшифровка.Вставить("ВидСчета", ?(Найти(ТекстОбластьПоиска, "Кред") = 0, "Дт", "Кт"));
			Иначе
				ВыбраннаяРасшифровка.Вставить("ВидСчета", "");
			КонецЕсли;
			// Изменение кода. Конец. 28.04.2014}}
			
			ВыбраннаяРасшифровка.Вставить("КорСчет", РасшифровкаКолонки);
			
		КонецЕсли;
		
		ВыбраннаяРасшифровка.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
		
		// Открытие формы расшифровки
		ОбработкаРасшифровкиСтандартногоОтчета(Отчет, ЭтаФорма, ВыбраннаяРасшифровка, ОбщаяРасшифровка);
	
	КонецЕсли;
	
КонецПроцедуры // РезультатОбработкаРасшифровки_Завершение()

#КонецОбласти
