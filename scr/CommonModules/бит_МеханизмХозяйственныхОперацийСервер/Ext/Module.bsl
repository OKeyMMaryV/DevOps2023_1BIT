////////////////////////////////////////////////////////////////////////////////
// 1С:Бухучет и торговля
//  ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ ХОЗЯЙСТВЕННЫХ ОПЕРАЦИЙ (Сервер).
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСНастройкамиКонструктораПроводок
	
// Создает реквизиты формы в соответствии с переданными параметрами колонок.
// 
Процедура ПривестиРеквзитыФормыВСоответствииСоСтруктурой(Форма, ПараметрыКолонок, ИмяТаблицыСтруктуры = "СтруктураКолонок") Экспорт
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов	= Новый Массив;
	
	УдаляемыеКолонки = Форма.ПолучитьРеквизиты(ИмяТаблицыСтруктуры);
	
    Для Каждого УдаляемаяКолонка Из УдаляемыеКолонки Цикл
        МассивУдаляемыхРеквизитов.Добавить(ИмяТаблицыСтруктуры + "." + УдаляемаяКолонка.Имя);
    КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	Для Каждого ОписаниеКолонки Из ПараметрыКолонок Цикл
		
		ТипРеквизита = ОписаниеКолонки.ТипРеквизита;
		
		Если ТипЗнч(ТипРеквизита) = Тип("ХранилищеЗначения") Тогда
			ТипРеквизита = ТипРеквизита.Получить();
		КонецЕсли;
		
		Если ТипЗнч(ТипРеквизита) <> Тип("ОписаниеТипов") Тогда
			ТипРеквизита = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		// Изменение кода. Начало. 05.06.2014{{
		Если Найти(ОписаниеКолонки.ИмяРеквизита, "Значение") > 0 Тогда
		
			 ТипРеквизита = Новый ОписаниеТипов(ТипРеквизита, "СписокЗначений");
		
		КонецЕсли; 
		// Изменение кода. Конец. 05.06.2014}}
		
		РеквизитФормы = Новый РеквизитФормы(ОписаниеКолонки.ИмяРеквизита, ТипРеквизита, ИмяТаблицыСтруктуры, ОписаниеКолонки.ИмяРеквизита);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

// Создает реквизиты табличного поля в соответствии с реквизитами формы.
// 
Процедура ПривестиТабличноеПолеКСоответствиюСоСтруктурой(Форма, ТаблицаНаФорме, РеквизитФормы, СтруктураКолонок, ИмяТаблицыДанных = "СтруктураКолонок", ТолькоПросмотр = Истина, НазначитьОбработчики = Ложь) Экспорт
	
	УдалитьПодчиненныеРеквизитыКоллекции(Форма, ТаблицаНаФорме);
	
	ТекущаяГруппа 			= Неопределено;
	ГоризонтальнаяГруппа 	= Неопределено;
	СчетчикГрупп			= 0;
	ВТойЖеКолонке			= Ложь;
	ПредыдущаяКолонка		= Неопределено;
	ТекИндекс				= -1;
	
	Для Каждого ОписаниеКолонки Из СтруктураКолонок Цикл
		
		ТекИндекс = ТекИндекс + 1;
		
		Если ТекИндекс = 0 Тогда
			ОписаниеКолонки.ПоложениеКолонки = Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка;
		КонецЕсли;
		
		Если ОписаниеКолонки.ПоложениеКолонки = Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка Тогда
			
			// Создадим группу
			СчетчикГрупп 	= СчетчикГрупп + 1;
			ТекущаяГруппа 	= Форма.Элементы.Добавить("Группа" + Строка(СчетчикГрупп), Тип("ГруппаФормы"), ТаблицаНаФорме);
			
			ВТойЖеКолонке = Ложь;
			
		ИначеЕсли ОписаниеКолонки.ПоложениеКолонки = Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке Тогда	
			
			ВТойЖеКолонке = Ложь;
			
		ИначеЕсли ОписаниеКолонки.ПоложениеКолонки = Перечисления.бит_ПоложенияКолонокТаблицы.ВТойЖеКолонке Тогда		
			
			ВТойЖеКолонке = Истина;
						
		КонецЕсли;
		
		Если ТекИндекс <> СтруктураКолонок.Количество() - 1 Тогда
			
			СледЭлемент = СтруктураКолонок.Получить(ТекИндекс + 1);
			
			Если СледЭлемент.ПоложениеКолонки = Перечисления.бит_ПоложенияКолонокТаблицы.ВТойЖеКолонке Тогда
				
				Если не ВТойЖеКолонке Тогда
					СчетчикГрупп = СчетчикГрупп + 1;
					ГоризонтальнаяГруппа = Форма.Элементы.Добавить("Группа" + Строка(СчетчикГрупп), Тип("ГруппаФормы"), ТекущаяГруппа);
					ГоризонтальнаяГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;
					ВТойЖеКолонке = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// *Обновление*, Братухин М.В., 2017.03.30 (
		// Исправление типовой ошибки. Если имя реквизита совпадает с существующим элементом формы (например, "Комментарий"), то при добавлении элемента
		// будет ошибка. Для исправления проверим существование элемента и при необходимости дадим ему новое неуникальное имя.
		ИмяРеквизита = ОписаниеКолонки.ИмяРеквизита;
		Пока Форма.Элементы.Найти(ОписаниеКолонки.ИмяРеквизита) <> Неопределено Цикл
			ОписаниеКолонки.ИмяРеквизита = ОписаниеКолонки.ИмяРеквизита + "_";
		КонецЦикла;
		// *Обновление*, Братухин М.В., 2017.03.30 )		
		
		Если не ВТойЖеКолонке Тогда
			Элемент = Форма.Элементы.Добавить(ОписаниеКолонки.ИмяРеквизита, Тип("ПолеФормы"), ТекущаяГруппа);
		Иначе
			Элемент = Форма.Элементы.Добавить(ОписаниеКолонки.ИмяРеквизита, Тип("ПолеФормы"), ГоризонтальнаяГруппа);
		КонецЕсли;
		
		// *Обновление*, Братухин М.В., 2017.03.30 (
		// Вернем оригинальное имя реквизита, чтобы дальнейший код выполнялся корректно.
		Если ОписаниеКолонки.ИмяРеквизита <> ИмяРеквизита Тогда
			ОписаниеКолонки.ИмяРеквизита = ИмяРеквизита;
		КонецЕсли;
		// *Обновление*, Братухин М.В., 2017.03.30 )		
		
		Элемент.ТолькоПросмотр 	= ТолькоПросмотр;
		Элемент.Заголовок 		= ОписаниеКолонки.СинонимРеквизита;
		Элемент.Вид 			= ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным 	= ИмяТаблицыДанных + "." + ОписаниеКолонки.ИмяРеквизита;
		Элемент.Видимость 		= ОписаниеКолонки.Видимость;
		Элемент.Ширина 			= ОписаниеКолонки.ШиринаКолонки;
	    Элемент.КнопкаВыбора	= Истина;
		
		УстановитьСвойстваПредопределенныхРеквизитов(Элемент);
		
		Если НазначитьОбработчики Тогда
			
			Элемент.УстановитьДействие("ПриИзменении"			, "Подключаемый_ПриИзменении");
			Элемент.УстановитьДействие("НачалоВыбора"			, "Подключаемый_НачалоВыбора");
			// Изменение кода. Начало. 26.12.2013{{
			// Элемент.УстановитьДействие("НачалоВыбораИзСписка"	, "ХранилищеОбработчиковНачалоВыбораИзСписка");
			Элемент.УстановитьДействие("АвтоПодбор"	            , "Подключаемый_АвтоПодбор");			
			// Изменение кода. Конец. 26.12.2013}}
			Элемент.УстановитьДействие("Очистка"				, "Подключаемый_Очистка");
			Элемент.УстановитьДействие("Регулирование"			, "Подключаемый_Регулирование");
			Элемент.УстановитьДействие("Открытие"				, "Подключаемый_Открытие");
			Элемент.УстановитьДействие("ОбработкаВыбора"		, "Подключаемый_ОбработкаВыбора");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значения предопределенных обязательных реквизитов.
// 
// Параметры:
//  Колонка  - Колонка табличного поля.
//  Элемент  - Элемент управления.
// Возвращаемое значение - Булево. Признак того, что элемент предопределенный.
// 
Функция ЗаполнитьЗначенияПредопределенныхРеквизитов(КолонкаИмя, ЭлементСписокВыбора, Документ, Регистр = Неопределено, ВидПроформы = Неопределено, ДопСписокИменТаблиц = Неопределено) Экспорт

	ТипОбъекта = Документ.ТипЗначенияОбъекта.Получить();
	
	Если КолонкаИмя = "Таблица" Тогда
		
		Если ТипОбъекта = Тип("ДокументСсылка.бит_Проформы") и ЗначениеЗаполнено(ВидПроформы) Тогда
			
			МетаданныеДокумента = Справочники.бит_ВидыПроформ.ЭмулироватьМетаданные(ВидПроформы, "Массив");
			
			ЭлементСписокВыбора.Очистить();
			
			Для Каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
				ТабЧастьЗначение = ТабЧасть.Значение;
				ЭлементСписокВыбора.Добавить(ТабЧастьЗначение.Имя);
			КонецЦикла;
			
		Иначе
			
			МетаданныеДокумента = Метаданные.Документы[Документ.ИмяОбъекта];
			
			ЭлементСписокВыбора.Очистить();
			
			Для Каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
				ЭлементСписокВыбора.Добавить(ТабЧасть.Имя);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДопСписокИменТаблиц <> Неопределено Тогда
			
			Для Каждого ДопТаблица Из ДопСписокИменТаблиц Цикл
				
				ЭлементСписокВыбора.Добавить(ДопТаблица);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли КолонкаИмя = "ВидДвижения" Тогда
		
	ИначеЕсли Найти(КолонкаИмя, "ВидСравнения") <> 0 Тогда
		
		ЭлементСписокВыбора.Очистить();
		
		Для Каждого Пер Из Перечисления.бит_ЛогическиеОператоры Цикл
			ЭлементСписокВыбора.Добавить(Пер);
		КонецЦикла;
		
	ИначеЕсли Найти(КолонкаИмя, "ОбъединениеСПоследующим") <> 0 Тогда
		
		ЭлементСписокВыбора.Очистить();
		
		Для Каждого Пер Из Перечисления.бит_ТипыОбъединенияУсловий Цикл
			ЭлементСписокВыбора.Добавить(Пер);
		КонецЦикла;	
		
	ИначеЕсли Найти(КолонкаИмя, "ИмяВидаСубконто") <> 0 Тогда
		
		ЭлементСписокВыбора.Очистить();
		
		Если не ЗначениеЗаполнено(Регистр) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ПВХ = Метаданные.РегистрыБухгалтерии[Регистр.ИмяРегистра].ПланСчетов.ВидыСубконто.Имя;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	" + ПВХ + ".Ссылка
		|ИЗ
		|	ПланВидовХарактеристик." + ПВХ + " КАК " + ПВХ + "
		|
		|СГРУППИРОВАТЬ ПО
		|	" + ПВХ + ".Ссылка");
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			ИмяПредопределенного = ПланыВидовХарактеристик[ПВХ].ПолучитьИмяПредопределенного(Результат.Ссылка);
			Если не СокрЛП(ИмяПредопределенного) = "" Тогда
				ЭлементСписокВыбора.Добавить(ИмяПредопределенного);
			КонецЕсли;
		КонецЦикла;
		
	Иначе	
		Возврат Ложь; // Это не предопределенный
	КонецЕсли;	

	Возврат Истина;
	
КонецФункции // ЗаполнитьЗначенияПредопределенныхРеквизитов()

// Устанавливает свойства предопределенных обязательных реквизитов.
// 
// Параметры:
//  Колонка  - Колонка табличного поля.
// 
Процедура УстановитьСвойстваПредопределенныхРеквизитов(Колонка) Экспорт

	Если Колонка.Имя = "Таблица" 
		 или Найти(Колонка.Имя, "ВидСравнения") <> 0 
		 или Найти(Колонка.Имя, "ОбъединениеСПоследующим") <> 0 
		 или Найти(Колонка.Имя, "ИмяВидаСубконто") <> 0 Тогда
		// Изменение кода. Начало. 26.12.2013{{
		// Колонка.КнопкаСпискаВыбора 	= Истина;
		Колонка.КнопкаВыпадающегоСписка = Истина;
		Колонка.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		// Изменение кода. Конец. 26.12.2013}}
		Колонка.КнопкаВыбора 		= Ложь;
	КонецЕсли;
	
	// Если Колонка.Имя = "Таблица" Тогда
	// 	Колонка.КнопкаВыбора = Истина;
	// КонецЕсли;

КонецПроцедуры // УстановитьСвойстваПредопределенныхРеквизитов()

#КонецОбласти

#Область РаботаСШаблонамиДвижений
	
// <Описание функции>
// 
// Параметры:
//  Родитель  	- Группа справочника "бит_ВидыРеквизитовДвижений"
//  Имя  		- Строка - имя реквизита.
// 
// Возвращаемое значение:
//   СправочникСсылка.бит_ВидыРеквизитовДвижений.
// 
Функция ПолучитьСсылкуРеквизитаПоИмени(Родитель, Имя) Экспорт

	// Определим реквизит
	Отбор = Новый Структура("Наименование");
	Отбор.Наименование = Имя;
	Реквизиты = Справочники.бит_ВидыРеквизитовДвижений.Выбрать(Родитель,, Отбор);
			
	Если Реквизиты.Следующий() Тогда
		Возврат Реквизиты.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьСсылкуРеквизитаПоИмени()

// Добавляет шаблон в выбранный комплект.
// 
// Параметры:
//  ШаблонСсылка  	- Шаблон движений
//  КомплектСсылка  - Комплект движений.
// 
Процедура ВключитьШаблонВКомплект(ШаблонСсылка, КомплектСсылка) Экспорт

	// Проверим, не включен ли уже данный шаблон в данный комплект движений.
	ТабЧастьШаблонов = КомплектСсылка.ШаблоныДвижений;
	
	СтрокаКомплект = ТабЧастьШаблонов.Найти(ШаблонСсылка, "ШаблонДвижения");
	
	Если СтрокаКомплект <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйКомплектОбъект = КомплектСсылка.ПолучитьОбъект();
	НоваяЗаписьШаблон = ВыбранныйКомплектОбъект.ШаблоныДвижений.Добавить();
	НоваяЗаписьШаблон.ШаблонДвижения = ШаблонСсылка;
	
	ВыбранныйКомплектОбъект.Записать();	

КонецПроцедуры // ВключитьШаблонВКомплект()

// Возвращает идентификатор комплекта движений "КомплектСсылка"
// в формате [ID Документа]-[ID Комплекта].
// 
// Параметры:
//  КомплектСсылка  - Шаблон движений.
// 
// Возвращаемое значение:
//   Строка   - Идентификатор шаблона движений.
// 
Функция ПолучитьИдентификаторКомплекта(КомплектСсылка) Экспорт

	// Необходимо получить Имя Регистра, Вид Регистра, Имя документа.
	
	ИмяДокумента 	= "";
	
	Если ЗначениеЗаполнено(КомплектСсылка.ВидДокумента) Тогда
		ИмяДокумента = СокрЛП(КомплектСсылка.ВидДокумента.ИмяОбъекта);
	КонецЕсли;

	Возврат "[" + ПолучитьИдентификаторДокумента(ИмяДокумента) + "]-" + "[" + СокрЛП(КомплектСсылка.Идентификатор) + "]";
	
КонецФункции // ПолучитьИдентификаторКомплекта()

// Возвращает идентификатор документа по имени документа.
// 
// Параметры:
//  ИмяДокумента  - Строка. Имя документа.
// 
// Возвращаемое значение:
//   Строка - Идентификатор документа.
// 
Функция ПолучитьИдентификаторДокумента(ИмяДокумента) Экспорт

	// Идентификатор получаем по следующим правилам:
	// ID - контрольная сумма имени - сумма кодов символов имени/количество символов + лидирующие нули до пяти знаков.

	// Получим сумму кодов символов имени регистра.
	СуммаКодовСимволов = ДобавитьЛидирующиеНули(ПолучитьСуммуКодовСимволовСтроки(ИмяДокумента), 8);
	
	Возврат СуммаКодовСимволов;

КонецФункции // ПолучитьИдентификаторДокумента()

// Добавляет лидирующие нули к строке.
// 
Функция ДобавитьЛидирующиеНули(Идентификатор, ЧислоЗнаков) Экспорт
	
	Результат		= СтрЗаменить(Строка(Идентификатор), Символы.НПП, "");
	ШаблонНули 		= "0000000000000000000000000000000000000000000000000000";
	
	Возврат Прав(ШаблонНули, ЧислоЗнаков - СтрДлина(Результат)) + Результат;
	
КонецФункции // ДобавитьЛидирующиеНули()

// Возвращает сумму кодов символов строки текста.
// 
Функция ПолучитьСуммуКодовСимволовСтроки(СтрокаСимволов) Экспорт

	ИтогСумма = 0;
	
	Для жи = 0 По СтрДлина(СтрокаСимволов) - 1 Цикл
		ИтогСумма = ИтогСумма + КодСимвола(СтрокаСимволов, жи);
	КонецЦикла;
	
	Возврат Лев(Строка((ИтогСумма / СтрДлина(СтрокаСимволов) + 1)*100000 - КодСимвола(СтрокаСимволов, 1)), 7);

КонецФункции // ПолучитьСуммуКодовСимволовСтроки()

// <Описание функции>
// 
// Параметры:
//  ШаблонОбъект  - Шаблон движений.
// 
// Возвращаемое значение:
//  Строка - идентификатор, уникальный в рамках измерений ВидДокумента + ВидРегистра.
// 
Функция ПолучитьПодчиненныйИдентификаторШаблона(ШаблонОбъект) Экспорт

	ВидДокумента 	= ШаблонОбъект.ВидДокумента;
	Регистр			= ШаблонОбъект.Регистр;
	
	// Выберем все идентификаторы шаблонов, для данного вида документа и регистра.
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_ШаблоныДвижений.Идентификатор
	|ИЗ
	|	Справочник.бит_ШаблоныДвижений КАК бит_ШаблоныДвижений
	|ГДЕ
	|	бит_ШаблоныДвижений.Регистр = &Регистр
	|	И бит_ШаблоныДвижений.ВидДокумента = &ВидДокумента" +
	?(ШаблонОбъект.ЭтоНовый(), "", "	И бит_ШаблоныДвижений.Ссылка <> &Ссылка"));
						  
	Запрос.УстановитьПараметр("Регистр"		, Регистр);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Если не ШаблонОбъект.ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("Ссылка", ШаблонОбъект.Ссылка);
	КонецЕсли;
	
	// Получим массив имеющихся идентификаторов
	Результат 		= Запрос.Выполнить().Выгрузить();
	РезультатМассив = Результат.ВыгрузитьКолонку("Идентификатор");
	
	Если ЗначениеЗаполнено(ШаблонОбъект.Идентификатор) Тогда
		// Если он уникальный - его и вернем (не будем изменять).
		Если РезультатМассив.Найти(ШаблонОбъект.Идентификатор) = Неопределено Тогда
			Возврат ШаблонОбъект.Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем новый уникальный идентификатор
	// Отсортируем имеющиеся идентификаторы по возрастанию и разберем последний.
	Результат.Сортировать("Идентификатор Возр");
	
	Если Результат.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	// Получим последний идентификатор
	МаксимальныйИдентификатор = Результат.Получить(Результат.Количество() - 1).Идентификатор;
	
	Если СокрЛП(МаксимальныйИдентификатор) = "" Тогда
		Возврат "1";
	КонецЕсли;
	
	Ошибка 				= Ложь;
	ИтоговоеЧисло 		= 0;
	КоличествоСимволов 	= 0;
	
	Попытка
		ПромежуточныйРезультат = Число(МаксимальныйИдентификатор);
		Возврат Строка(ПромежуточныйРезультат + 1);
	Исключение
		
	КонецПопытки;
	
	Пока Ошибка = Ложь Цикл
		
		КоличествоСимволов = КоличествоСимволов + 1;
		
		Подстрока = Прав(МаксимальныйИдентификатор, КоличествоСимволов);
		
		Попытка
			ПромежуточныйРезультат = Число(Подстрока);
			ИтоговоеЧисло = ПромежуточныйРезультат;
		Исключение
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Строка(Лев(МаксимальныйИдентификатор, СтрДлина(МаксимальныйИдентификатор) - (КоличествоСимволов - 1))) + Строка(ИтоговоеЧисло + 1);
	
КонецФункции // ПолучитьИдентификаторШаблона()

// Возвращает идентификатор регистра по имени и виду регистра.
// 
// Параметры:
//  ВидРегистра  - Строка. Вид регистра.
//                 
//  ИмяРегистра  - Строка. Имя регистра.
//                 
// 
// Возвращаемое значение:
//   Строка - Идентификатор регистра.
// 
Функция ПолучитьИдентификаторРегистра(ВидРегистра, ИмяРегистра) Экспорт

	// Идентификатор получаем по следующим правилам:
	// Префикс:ID
	// Префикс = РБ (регистр бухгалтерии) или РН (регистр накопления)
	// ID - контрольная сумма имени - сумма кодов символов имени/количество символов + лидирующие нули до пяти знаков.

	Префикс = "";
	ИД		= "";
	
	Если ВидРегистра = "РегистрыБухгалтерии" Тогда
		Префикс = "РБ";
	ИначеЕсли ВидРегистра = "РегистрыНакопления" Тогда
		Префикс = "РН";
    ИначеЕсли ВидРегистра = "РегистрыСведений" Тогда
		Префикс = "РС";
	КонецЕсли;
	
	// Получим сумму кодов символов имени регистра.
	СуммаКодовСимволов = ДобавитьЛидирующиеНули(ПолучитьСуммуКодовСимволовСтроки(ИмяРегистра), 8);
	
	Возврат Префикс + ":" + СуммаКодовСимволов;
	
КонецФункции // ПолучитьИдентификаторРегистра()

// Возвращает идентификатор шаблона движений "ШаблонСсылка"
// в формате [ID Регистра]-[ID Документа]-[ID Шаблона].
// 
// Параметры:
//  ШаблонСсылка  - Шаблон движений.
// 
// Возвращаемое значение:
//   Строка   - Идентификатор шаблона движений.
// 
Функция ПолучитьИдентификаторШаблона(ШаблонСсылка) Экспорт

	// Необходимо получить Имя Регистра, Вид Регистра, Имя документа.
	
	ИмяРегистра 	= "";
	ВидРегистра 	= "";
	ИмяДокумента 	= "";
	
	Если ЗначениеЗаполнено(ШаблонСсылка.Регистр) Тогда
		ИмяРегистра = СокрЛП(ШаблонСсылка.Регистр.ИмяРегистра);
		ВидРегистра = СокрЛП(ШаблонСсылка.Регистр.ВидРегистра);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонСсылка.ВидДокумента) Тогда
		ИмяДокумента = СокрЛП(ШаблонСсылка.ВидДокумента.ИмяОбъекта);
	КонецЕсли;

	Возврат "[" + ПолучитьИдентификаторРегистра(ВидРегистра, ИмяРегистра) + "]-" + "[" + ПолучитьИдентификаторДокумента(ИмяДокумента) + "]-" + "[" + СокрЛП(ШаблонСсылка.Идентификатор) + "]";
	
КонецФункции // ПолучитьИдентификаторШаблона()

#КонецОбласти

#Область ОтладкаПроведения
	
// Открывает форму управления отладкой проведения по шаблонам движений.
// 
Функция ПродолжитьОтладку(ФормаВопроса) Экспорт
	// АПК:565-выкл модальное открытие испольуется в целях задач отладки с использованием внешней обработки.
	Возврат ФормаВопроса.ОткрытьМодально();		
	// АПК:565-вкл.
КонецФункции

// Заполняет форму отладки в соответствии с кодом обработчика проведения.
// 
// Параметры:
//  ФормаОтладки   - Форма. Форма отладчика
//  КодОбработчика - Строка. Код обработчика проведения.
// 
Процедура ЗаполнитьФормуОтладки(ФормаОтладки, КодОбработчика, Отказ) Экспорт
	
	ЭлементыФормыОтладки  = ФормаОтладки.ЭлементыФормы;
	ПолеОтладчика   = ЭлементыФормыОтладки.ПолеОтладки;
	
	КодДляОбработки = КодОбработчика;
	СимволыДоСпецСлова = " " + Символы.НПП + Символы.Таб + Символы.ПС + Символы.ВК;
	СимволыПослеСпецСлова = " " + Символы.НПП + Символы.Таб + Символы.ПС;
	жи = 0;
	Пока НЕ ПустаяСтрока(КодДляОбработки) Цикл
		
		ОчСтрока = "";
		Символ = "";
		ОткрытыхКавычек = 0;
		ЭтоКомментарий = Ложь;
		
		Пока Истина Цикл
			СпецСлово = "";
			Если Символ = ";" Тогда
				Если НРег(Лев(КодДляОбработки, 5)) = "иначе" И НЕ Найти(СимволыПослеСпецСлова, Сред(КодДляОбработки, 6, 1)) = 0 Тогда
					СпецСлово = Лев(КодДляОбработки, 5);
				КонецЕсли;
			ИначеЕсли НЕ Найти(СимволыДоСпецСлова, Символ) = 0 Тогда
				Если НРег(Лев(КодДляОбработки, 5)) = "иначе" И НЕ Найти(СимволыПослеСпецСлова, Сред(КодДляОбработки, 6, 1)) = 0 Тогда
					СпецСлово = Лев(КодДляОбработки, 5);
				ИначеЕсли НРег(Лев(КодДляОбработки, 5)) = "тогда" И НЕ Найти(СимволыПослеСпецСлова, Сред(КодДляОбработки, 6, 1)) = 0 Тогда
					СпецСлово = Лев(КодДляОбработки, 5);
				ИначеЕсли НРег(Лев(КодДляОбработки, 4)) = "цикл" И НЕ Найти(СимволыПослеСпецСлова, Сред(КодДляОбработки, 6, 1)) = 0 Тогда
					СпецСлово = Лев(КодДляОбработки, 4);
				КонецЕсли;
			КонецЕсли;
			Если Символ = "/" И Лев(КодДляОбработки, 1) = "/" И НЕ ЭтоКомментарий Тогда
				ЭтоКомментарий = Истина;
			КонецЕсли;
			Символ = Лев(КодДляОбработки, 1);
			
			Если СтрДлина(КодДляОбработки) = 1 Тогда
				ОчСтрока = ОчСтрока + Символ;
				КодДляОбработки = Сред(КодДляОбработки, 2);
				Прервать;
			ИначеЕсли ЭтоКомментарий Тогда
				ОчСтрока = ОчСтрока + Символ;
				ЭтоКомментарий = НЕ (Символ = Символы.ПС);
			ИначеЕсли НЕ СпецСлово = "" Тогда
				Если ОткрытыхКавычек = 0 Тогда
					ОчСтрока = ОчСтрока + СпецСлово;
					КодДляОбработки = Сред(КодДляОбработки, СтрДлина(СпецСлово) + 1);
					Прервать;
				Иначе
					ОчСтрока = ОчСтрока + СпецСлово;
					КодДляОбработки = Сред(КодДляОбработки, СтрДлина(СпецСлово) + 1);
					Прервать;
				КонецЕсли;
			ИначеЕсли Символ = ";" Тогда
				Если ОткрытыхКавычек = 0 Тогда
					ОчСтрока = ОчСтрока + Символ;
					КодДляОбработки = Сред(КодДляОбработки, 2);
					Прервать;
				Иначе
					ОчСтрока = ОчСтрока + Символ;
				КонецЕсли;
			ИначеЕсли Символ = """" И ОткрытыхКавычек = 0 Тогда
				ОткрытыхКавычек = ОткрытыхКавычек + 1;
				ОчСтрока = ОчСтрока + Символ;
			ИначеЕсли Символ = """" И ОткрытыхКавычек = 1 Тогда
				ОткрытыхКавычек = ОткрытыхКавычек - 1;
				ОчСтрока = ОчСтрока + Символ;
			Иначе
				ОчСтрока = ОчСтрока + Символ;
			КонецЕсли;
			КодДляОбработки = Сред(КодДляОбработки, 2);
		КонецЦикла;
		
		жи = жи + 1;
		НоваяСтрока     = ПолеОтладчика.Значение.Добавить();
		НоваяСтрока.ФрагментКода  = СокрЛП(ОчСтрока);
		НоваяСтрока.Служебная  = жи;
		
КонецЦикла; 

 Если ЭлементыФормыОтладки.НеПроводить.Значение Тогда
  Отказ = Истина;
 КонецЕсли;
 
КонецПроцедуры // ЗаполнитьФормуОтладки()

// Производит очередной этап отладки.
// 
// Параметры:
//  ФормаОтладки  	- Форма. Форма отладчика проведения
// 	НомерСтроки		- Число. Номер текущей строки обработчика проведения.
//                 
Процедура ЭтапОтладки(ФормаОтладки, НомерСтроки) Экспорт

	ЭлементыФормыОтладки = ФормаОтладки.ЭлементыФормы;
	

КонецПроцедуры // ЭтапОтладки()

// Процедура подготавливает текст обработчика проведения для отладки в пользовательском режиме.
// 
// Параметры:
//  КодОбработчика  - Строка - полный текст обработчика проведения.
//                 
Процедура ПодготовитьТекстОбработчикаДляОтладкиПроведения(КодОбработчика) Экспорт
	
	Результат = "";
	КодЗаполненияФормыОтладки = "";
	Результат = "ЭФ = Источник.ДополнительныеСвойства.ФормаОтладки.ЭлементыФормы; Если ЭФ.НеПроводить.Значение Тогда Отказ = Истина; КонецЕсли; ПрО = ЭФ.ПолеОтладки; ПКП = ЭФ.ПолеКакиеПеременные; ПЗП = ЭФ.ПолеЗначенияПеременных; сч = 0; ТипОтладки = 0; " + КодЗаполненияФормыОтладки + Символы.ПС + Результат;
	
	КодДляОбработки = КодОбработчика;
	СимволыДоСпецСлова = " " + Символы.НПП + Символы.Таб + Символы.ПС + Символы.ВК;
	СимволыПослеСпецСлова = " " + Символы.НПП + Символы.Таб + Символы.ПС;
	жи = 0;
	Пока НЕ ПустаяСтрока(КодДляОбработки) Цикл
		
		ОчСтрока = "";
		Символ = "";
		ОткрытыхКавычек = 0;
		ЭтоКомментарий = Ложь;
		
		Пока Истина Цикл
			СпецСлово = "";
			Если Символ = ";" Тогда
				Если НРег(Лев(КодДляОбработки, 5)) = "иначе" И НЕ Найти(СимволыПослеСпецСлова, Сред(КодДляОбработки, 6, 1)) = 0 Тогда
					СпецСлово = Лев(КодДляОбработки, 5);
				КонецЕсли;
			ИначеЕсли НЕ Найти(СимволыДоСпецСлова, Символ) = 0 Тогда
				Если НРег(Лев(КодДляОбработки, 5)) = "иначе" И НЕ Найти(СимволыПослеСпецСлова, Сред(КодДляОбработки, 6, 1)) = 0 Тогда
					СпецСлово = Лев(КодДляОбработки, 5);
				ИначеЕсли НРег(Лев(КодДляОбработки, 5)) = "тогда" И НЕ Найти(СимволыПослеСпецСлова, Сред(КодДляОбработки, 6, 1)) = 0 Тогда
					СпецСлово = Лев(КодДляОбработки, 5);
				ИначеЕсли НРег(Лев(КодДляОбработки, 4)) = "цикл" И НЕ Найти(СимволыПослеСпецСлова, Сред(КодДляОбработки, 6, 1)) = 0 Тогда
					СпецСлово = Лев(КодДляОбработки, 4);
				КонецЕсли;
			КонецЕсли;
			Если Символ = "/" И Лев(КодДляОбработки, 1) = "/" И НЕ ЭтоКомментарий Тогда
				ЭтоКомментарий = Истина;
			КонецЕсли;
			Символ = Лев(КодДляОбработки, 1);
			
			Если СтрДлина(КодДляОбработки) = 1 Тогда
				ОчСтрока = ОчСтрока + Символ;
				КодДляОбработки = Сред(КодДляОбработки, 2);
				Прервать;
			ИначеЕсли ЭтоКомментарий Тогда
				ОчСтрока = ОчСтрока + Символ;
				ЭтоКомментарий = НЕ (Символ = Символы.ПС);
			ИначеЕсли НЕ СпецСлово = "" Тогда
				Если ОткрытыхКавычек = 0 Тогда
					ОчСтрока = ОчСтрока + СпецСлово;
					КодДляОбработки = Сред(КодДляОбработки, СтрДлина(СпецСлово) + 1);
					Прервать;
				Иначе
					ОчСтрока = ОчСтрока + СпецСлово;
					КодДляОбработки = Сред(КодДляОбработки, СтрДлина(СпецСлово) + 1);
					Прервать;
				КонецЕсли;
			ИначеЕсли Символ = ";" Тогда
				Если ОткрытыхКавычек = 0 Тогда
					ОчСтрока = ОчСтрока + Символ;
					КодДляОбработки = Сред(КодДляОбработки, 2);
					Прервать;
				Иначе
					ОчСтрока = ОчСтрока + Символ;
				КонецЕсли;
			ИначеЕсли Символ = """" И ОткрытыхКавычек = 0 Тогда
				ОткрытыхКавычек = ОткрытыхКавычек + 1;
				ОчСтрока = ОчСтрока + Символ;
			ИначеЕсли Символ = """" И ОткрытыхКавычек = 1 Тогда
				ОткрытыхКавычек = ОткрытыхКавычек - 1;
				ОчСтрока = ОчСтрока + Символ;
			Иначе
				ОчСтрока = ОчСтрока + Символ;
			КонецЕсли;
			КодДляОбработки = Сред(КодДляОбработки, 2);
		КонецЦикла;
		
		жи = жи + 1;
		СПеременными = " ПЗП.Значение.Очистить();
						|Для Каждого СтрПер Из ПКП.Значение Цикл
						| Попытка
						|  Выполнить(""Пром="" + СтрПер.Переменная);
						| Исключение
						|  Пром = Неопределено;
						| КонецПопытки;
						| НПер = ПЗП.Значение.Добавить();
						| НПер.Переменная = СтрПер.Переменная;
						| НПер.ТипЗначения = ТипЗнч(Пром);
						| НПер.Значение = Пром;
						|КонецЦикла;";
		ОчСтрока = ОчСтрока + Символы.ПС + " ПрО.ТекущаяСтрока = ПрО.Значение.Получить(" + СтрЗаменить(Строка(жи-1), Символы.НПП, "") + ");
		|Если ТипОтладки = 3 и не ПрО.ТекущаяСтрока.ТочкаОстанова Тогда
		|Иначе ТипОтладки = бит_МеханизмХозяйственныхОперацийСервер.ПродолжитьОтладку(Источник.ДополнительныеСвойства.ФормаУОтл);
		|" + Символы.ПС + СПеременными + Символы.ПС + "
		|КонецЕсли;";
		ДобавитьСтрокуКТексту(Результат, ОчСтрока);
		
		
	КонецЦикла; 
	
	КодОбработчика = Результат;
	
КонецПроцедуры // ПодготовитьТекстОбработчикаДляОтладкиПроведения()

#КонецОбласти

#Область ИнтерпретацияШаблоновДвижений

// Процедура выравнивает фрагмент кода.
// 
Процедура ВыровнятьФрагментКода(ФрагментКода) Экспорт
	
	// Уберем все знаки табуляции
	ФрагментКода = СтрЗаменить(ФрагментКода, Символы.Таб, "");
	Результат	 = "";
	Отступ = 0;
	
	Для жи = 1 По СтрЧислоСтрок(ФрагментКода) Цикл
		
		ОчередСтрока 	= СтрПолучитьСтроку(ФрагментКода, жи);
		ДобавитьОтступ(ОчередСтрока, Отступ + ШифтСтроки(ОчередСтрока));
		Отступ 			= Отступ + ВСтрокеЕстьОтступ(ОчередСтрока);
		ДобавитьСтрокуКТексту(Результат, ОчередСтрока);
		
	КонецЦикла;	
	
	ФрагментКода = Результат;
	
КонецПроцедуры

// Добавляет новую строку "СтрокаТекста" к тексту "Текст".
// 
// Параметры:
//  Текст - текст
// 	СтрокаТекста - добавляемая строка.
// 
Процедура ДобавитьСтрокуКТексту(Текст, СтрокаТекста) Экспорт

	Текст = Текст + ?(СокрЛП(Текст) = "", "", Символы.ПС) + СтрокаТекста;

КонецПроцедуры // ДобавитьСтрокуКТексту()

// Добавляет новый комментарий "СтрокаТекста" к тексту "Текст".
// 
// Параметры:
//  Текст - комментарий
// 	СтрокаТекста - добавляемая строка.
// 
Процедура ДобавитьКомментарийКТексту(Текст, СтрокаТекста) Экспорт

	ДобавитьСтрокуКТексту(Текст, " ");
	ДобавитьСтрокуКТексту(Текст, "/////////////////////////////////////////////////////////////////////////");
	ДобавитьСтрокуКТексту(Текст, "// " + СтрокаТекста);
	ДобавитьСтрокуКТексту(Текст, " ");
	
КонецПроцедуры // ДобавитьКомментарийКТексту()

// Инициализирует массив-стек переменных.
// 
// Возвращаемое значение:
//   Массив - Произвольный тип
// 
Функция ИнициализироватьСтекПеременных() Экспорт

	СтекПеременных = Новый Массив;
	СтекПеременных.Добавить(Неопределено); // Нулевая переменная - служебная
	Возврат СтекПеременных;

КонецФункции // ИнициализироватьСтекПеременных()

// Помещает переменную в стек (массив) переменных и возвращает ее строковое
// представление для использование в коде обработчика.
// 
// Параметры:
//  Стек  - Инициализированный массив переменныз
//  ЗначениеПеременной  - Произвольное выражение - значение переменной.
// 
// Возвращаемое значение:
//   Строка - строковое представление переменной для использования в коде обработчика.
// 
Функция ПоместитьПеременнуюВСтек(Стек, ЗначениеПеременной) Экспорт
	
	// Избавляемся от избыточности стека - если идентичное значение переменной присутствует
	// в стеке - вернем идентификатор существующего элемента.
	ИндексИмеющейсяПеременной = Стек.Найти(ЗначениеПеременной);
	
	Если ИндексИмеющейсяПеременной = Неопределено Тогда
		Стек.Добавить(ЗначениеПеременной);
		Возврат "МассивПеременных[" + Строка(Стек.Количество() - 1) + "]";
	Иначе
		Возврат "МассивПеременных[" + Строка(ИндексИмеющейсяПеременной) + "]";
	КонецЕсли;
	
КонецФункции // ПоместитьПеременнуюВСтек()

// Получает последовательность всех строк шаблонов, с упорядочиванием по имени таблицы.
// 
// Параметры:
// 	СписокШаблонов  - Массив шаблонов.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
// 
Функция ПолучитьУпорядоченнуюПоследовательностьСтрокШаблонов(СписокШаблонов) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокШаблонов", СписокШаблонов);
	Запрос.Текст = "ВЫБРАТЬ
	|	бит_ЗначенияРеквизитовШаблонов.ШаблонДвижений,
	|	бит_ЗначенияРеквизитовШаблонов.Реквизит,
	|	бит_ЗначенияРеквизитовШаблонов.НомерДвижения КАК НомерДвижения,
	|	бит_ЗначенияРеквизитовШаблонов.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.бит_ЗначенияРеквизитовШаблонов КАК бит_ЗначенияРеквизитовШаблонов
	|ГДЕ
	|	бит_ЗначенияРеквизитовШаблонов.ШаблонДвижений В(&СписокШаблонов)
	|	И бит_ЗначенияРеквизитовШаблонов.Реквизит.Наименование = ""Таблица""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Значение,
	|	НомерДвижения";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции // ПолучитьУпорядоченнуюПоследовательностьСтрокШаблона()

// Добавляет к коду обработчика текст начала обхода таблицы "ИмяТаблицы".
// 
// Параметры:
//  КодОбработчика  - Строка.
// 
//  ИмяТаблицы  - Имя таблицы обхода.
// 
Процедура ДобавитьНачалоОбходаТаблицы(КодОбработчика, ИмяТаблицы) Экспорт
	
	// Возможно таблица - это не табличная часть документа. В таком случае, она должна иметь
	// префикс "$".
	Если Найти(ИмяТаблицы, "$") = 0 Тогда
		ДобавитьСтрокуКТексту(КодОбработчика, "мхо_ТаблицаОбхода = мхо_ДокументОбъект." + ИмяТаблицы + ";");
		ДобавитьСтрокуКТексту(КодОбработчика, "Для Каждого мхо_СтрокаТаблицы Из мхо_ТаблицаОбхода Цикл");
	Иначе
		// Это может быть как таблица значений, так и выборка
		// у выборки в конце "()".
		Если Найти(ИмяТаблицы, "()") = 0 Тогда
			ДобавитьСтрокуКТексту(КодОбработчика, "мхо_ТаблицаОбхода = " + СтрЗаменить(ИмяТаблицы, "$", "") + ";");
			ДобавитьСтрокуКТексту(КодОбработчика, "Для Каждого мхо_СтрокаТаблицы Из мхо_ТаблицаОбхода Цикл");
		Иначе
			ДобавитьСтрокуКТексту(КодОбработчика, "мхо_СтрокаТаблицы = " + СтрЗаменить(СтрЗаменить(ИмяТаблицы, "$", ""), "()", "") + ";");
			ДобавитьСтрокуКТексту(КодОбработчика, "Пока мхо_СтрокаТаблицы.Следующий() Цикл");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ДобавитьНачалоОбходаТаблицы()

// Добавляет к коду обработчика текст окончания обхода таблицы "ИмяТаблицы".
// 
// Параметры:
//  КодОбработчика  - Строка.
// 
//  ИмяТаблицы  - Имя таблицы обхода.
// 
Процедура ДобавитьЗавершениеОбходаТаблицы(КодОбработчика, ИмяТаблицы) Экспорт
    ДобавитьСтрокуКТексту(КодОбработчика, "КонецЦикла; // Обход таблицы ""мхо_ТаблицаОбхода"" = " + ИмяТаблицы);
КонецПроцедуры // ДобавитьЗавершениеОбходаТаблицы()

// Возвращает список всех регистров, по которым будут осуществляться движения документа.
// 
// Параметры:
//  ШаблоныДвижений  - Массив шаблонов движений.
// 
// Возвращаемое значение:
//   Массив строк   - Массив имен регистров движений.
// 
Функция ПолучитьСписокРегистровДвижений(ШаблоныДвижений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокШаблонов", ШаблоныДвижений);
	Запрос.Текст = "ВЫБРАТЬ
	|	бит_ШаблоныДвижений.Регистр.ИмяРегистра
	|ИЗ
	|	Справочник.бит_ШаблоныДвижений КАК бит_ШаблоныДвижений
	|ГДЕ
	|	бит_ШаблоныДвижений.Ссылка В(&СписокШаблонов)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ШаблоныДвижений.Регистр.ИмяРегистра";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("РегистрИмяРегистра");
	
КонецФункции // ПолучитьСписокРегистровДвижений()

// Добавляет к коду обработчика инициализацию движений по регистрам.
// 
// Параметры:
//  КодОбработчика  	- Строка кода
//  СписокРегистров  	- Массив имен необходимых регистров.
// 
Процедура ИнициироватьДвиженияПоРегистрам(КодОбработчика, СписокРегистров) Экспорт

	Для Каждого Регистр Из СписокРегистров Цикл
		ДобавитьСтрокуКТексту(КодОбработчика, "мхо_Движения_" + Регистр + " = Источник.Движения." + Регистр + ";");
		ДобавитьСтрокуКТексту(КодОбработчика, "мхо_Движения_" + Регистр + ".Записывать = Истина;");
	КонецЦикла;

	ДобавитьСтрокуКТексту(КодОбработчика, "// Движения использования шаблонов");
	ДобавитьСтрокуКТексту(КодОбработчика, "НаборИспользуемыеШаблоны 	= РегистрыСведений.бит_ИспользованиеШаблоновДвижений.СоздатьНаборЗаписей();");
	ДобавитьСтрокуКТексту(КодОбработчика, "НаборИспользуемыеШаблоны.Отбор.ДокументСсылка.Установить(Источник.Ссылка);");
	
КонецПроцедуры // ИнициироватьДвиженияПоРегистрам()

// Функция выполняет пользовательскую функцию.
// 
Функция ВыполнитьПользовательскуюФункцию(ИмяФункции, 	П1 = Неопределено, П2 = Неопределено,
														П3 = Неопределено, П4 = Неопределено, 
														П5 = Неопределено, П6 = Неопределено, 
														П7 = Неопределено, П8 = Неопределено,
														П9 = Неопределено, П10 = Неопределено) Экспорт

	// Выполним поиск функции по наименованию.
	ФункцияСсылка 		= Справочники.бит_ПользовательскиеФункции.НайтиПоНаименованию(ИмяФункции);
	
	// Выполним код функции
	Результат = бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункцию(ФункцияСсылка, П1, П2, П3, П4, П5, П6, П7, П8, П9, П10);
	
	Возврат Результат;
	
КонецФункции

// Приводит значение реквизита к виду, пригодному для использования в коде обработчика
// и, если нужно, заполняет стек переменных.
// 
// Параметры:
//  ЗначениеРеквизита  - Значение реквизита.
//                 
//  СтекПеременных  - Стек переменных.
// 
// Возвращаемое значение:
//   Строка - выражение, для использования в коде обработчика.
// 
Функция ИнтерпретироватьРеквизит(ЗначениеРеквизита, СтекПеременных, КодОбработчика = "", Шаблон = Неопределено) Экспорт

	// Логика итерпретации значения реквизита:
	// Если тип значения строка и есть # - это тег
	// Правила замены тегов:
	// 	#Р - бит_ДокументОбъект
	//  #Т - бит_НовоеДвижение_<ИмяРегистра>
	//  #П - Необходимо поместить строку вызова функции общего модуля, которая исполнит 
	//       код пользовательской функции с переданными параметрами
	//  #Д - необходимо вставить код инициализации доппараметра
	// Если префикса нет - это строка
	// Если тип - не строка, но примитивный тип - оставляем без изменения, если ссылочный - помещаем
	// в массив и вместо значения параметра подставляем ссылку на элемент массива
	// Алгоритм должен быть рекурсивным, т.к. например, интерпретируя пользовательскую функцию, необходимо
	// интерпретировать ее параметры, которые в свою очередь тоже могут быть функциями и т.д.
	СтроковоеПредставлениеЗначения = "МассивПеременных[0]"; // Если не сможем интерпретировать - будет присвоено "Неопределено"
	
	// Некоторые типы необходимо интерпретировать вручную.
	Если ИнтерпретироватьЕслиПредопределенный(ЗначениеРеквизита, СтроковоеПредставлениеЗначения) Тогда
		Возврат СтроковоеПредставлениеЗначения;
	КонецЕсли;
	
	// Проверим - что за тип у значения
	Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
		Если Найти(ЗначениеРеквизита, "#") = 0 Тогда // Просто строка
			СтроковоеПредставлениеЗначения = ЗначениеРеквизита;
		Иначе	
			Пока Найти(ЗначениеРеквизита, "#") <> 0 Цикл
				// Необходимо определить теговое выражение и рассмотреть его
				// Окончанием тега могут служить символы: " ", ",", ".", ")", ";".
				ПозицияТега = Найти(ЗначениеРеквизита, "#");
				Тег = Сред(ЗначениеРеквизита, ПозицияТега, 3);
				
				Если Тег = "#Р." Тогда // Реквизит документа
					ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "#Р.", "мхо_ДокументОбъект.");
					СтроковоеПредставлениеЗначения = ЗначениеРеквизита;
				ИначеЕсли Тег = "#Т." Тогда // Реквизит табличной части
					ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "#Т.", "мхо_СтрокаТаблицы.");
					СтроковоеПредставлениеЗначения = ЗначениеРеквизита;
				// Изменение кода. Начало. 16.02.2016{{
			    ИначеЕсли Тег = "#З." Тогда // Текущая запись
					
					ИмяТекДвижения =  "мхо_НовоеДвижение_"+Шаблон.Регистр.ИмяРегистра;
					ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Тег, ИмяТекДвижения+".");
					СтроковоеПредставлениеЗначения = ЗначениеРеквизита;
				    
				// Изменение кода. Конец. 16.02.2016}}
				ИначеЕсли Тег = "#П." Тогда // Пользовательская функция... с ней особый разговор нужен...
					СтрокаВызоваФункции = ПолучитьСтрокуВызоваФункции(ЗначениеРеквизита);
					// Получим массив входных параметров функции
					// исходим из того, что прямых ссылок там нет. Максимум - доппараметры и 
					// значения примитивных типов.
					МассивПараметров = ПолучитьМассивПараметровФункцииИзСтрокиВызоваФункции(СтрокаВызоваФункции);
					// Для каждого параметра необходимо определить строковый эквивалент и сформировать
					// строку вызова функции, пригодную для использования в коде обработчика.
					МассивИнтерпретированныхПараметров = Новый Массив;
					Для Каждого ВходнойПараметр Из МассивПараметров Цикл
						ПредставлениеПараметра 	= ИнтерпретироватьРеквизит(ВходнойПараметр, СтекПеременных, КодОбработчика, Шаблон);
						// Заменим входной параметр его строковым эксисалентом.
						МассивИнтерпретированныхПараметров.Добавить(ПредставлениеПараметра);
					КонецЦикла;
					НоваяСтрокаВызоваФункции = ПолучитьСтрокуИсполненияФункции(СтрокаВызоваФункции, МассивИнтерпретированныхПараметров);
					// Вставим новый вызов пользовательской функции вместо старого.
					ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "#П." + СтрокаВызоваФункции, НоваяСтрокаВызоваФункции);
					СтроковоеПредставлениеЗначения = ЗначениеРеквизита;
				ИначеЕсли Тег = "#Д." Тогда
					// Необходимо перед вызовом доппараметра выполнить его код
					// результат выполнения - в переменной "Результат"
					// Получим имя доппараметра.
					ПозицияДопПараметра = Найти(ЗначениеРеквизита, "#Д.");
					ИмяДопПараметра = ВычленитьТегПоПозицииПрефикса(ЗначениеРеквизита, ПозицияДопПараметра);
					// Найдем код доппараметра в табличной части шаблона движений.
					СтрокаДоппараметра = Шаблон.ДополнительныеРеквизиты.Найти(ИмяДопПараметра, "ИмяРеквизита");
					Если СтрокаДоппараметра = Неопределено Тогда // Установим значение доппараметра - Неопределено.
						КодИнициализации = "Результат = Неопределено;";
					Иначе // Получим представление значения параметра
						ЗначениеРеквизитаТекст = СтрокаДоппараметра.Значение;
						КодИнициализации = ИнтерпретироватьРеквизит(ЗначениеРеквизитаТекст, СтекПеременных, КодОбработчика, Шаблон);
						Если СтрокаДоппараметра.Простое Тогда
							КодИнициализации = "Результат = " + КодИнициализации + ";";
						КонецЕсли;
					КонецЕсли;
					ДобавитьСтрокуКТексту(КодИнициализации, "дп_" + ИмяДопПараметра + " = Результат;");
					ДобавитьСтрокуКТексту(КодОбработчика, КодИнициализации);
					СтроковоеПредставлениеЗначения = "дп_" + ИмяДопПараметра;
					ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "#Д." + ИмяДопПараметра, СтроковоеПредставлениеЗначения);
					
				// AKuznetsov - начало изменения 25.08.11
				ИначеЕсли Тег = "#А." Тогда
					Если Лев(ЗначениеРеквизита, 6) = "#А.Ид_" Тогда
						ИмяПеременной = "да_" + Сред(ЗначениеРеквизита, 7);
						КодПолученияВидаАналитики = ИмяПеременной + " = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду(""" +
													Сред(ЗначениеРеквизита, 7) +
													""");";
					Иначе
						ИмяПеременной = "да_" + Сред(ЗначениеРеквизита, 4);
						КодПолученияВидаАналитики = ИмяПеременной + " = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик." +
													Сред(ЗначениеРеквизита, 4) +
													";";
					КонецЕсли;
					ДобавитьСтрокуКТексту(КодОбработчика, КодПолученияВидаАналитики);
												
					ЗначениеРеквизита = "мхо_Соответствие_ДопАналитикиДокумента[" + ИмяПеременной + "]";
					СтроковоеПредставлениеЗначения = ЗначениеРеквизита;
					// AKuznetsov - конец изменения	
					
				// Изменение кода. Начало. 21.07.2016{{	
				ИначеЕсли Тег = "#Ф." Тогда
					
					ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "#Ф.", "бит_мхо_ОбщегоНазначенияСервер.");
					СтроковоеПредставлениеЗначения = ЗначениеРеквизита;
					
					// Изменение кода. Конец. 21.07.2016}}	
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли
	ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
		// Изменение кода. Начало. 08.12.2015{{
		СтроковоеПредставлениеЗначения = Формат(ЗначениеРеквизита,"ЧРД=.; ЧГ=");
		// Изменение кода. Конец. 08.12.2015}}
	ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
		СтроковоеПредставлениеЗначения = ?(ЗначениеРеквизита, "Истина", "Ложь");
	Иначе // Не примитивный тип
		СтроковоеПредставлениеЗначения = ПоместитьПеременнуюВСтек(СтекПеременных, ЗначениеРеквизита);
	КонецЕсли;	
	
	Возврат СтроковоеПредставлениеЗначения;
	
КонецФункции // ИнтерпретироватьРеквизит()

// Возвращает строковое представление вида сравнения.
// 
// Параметры:
//  ВидСравнения - ПеречислениеСсылка.бит_ВидСравнения.
// 
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьСтрокойСравнение(ВидСравнения) Экспорт

	Возврат " " + Строка(ВидСравнения) + " ";
	
КонецФункции // ПолучитьСтрокойСравнение()

// Добавляет к коду обработчика условия существования движения.
// 
// Параметры:
//  КодОбработчика  	- Код обработчика
//  СписокРеквизитов  	- Список реквизитов движений и их значения.
// 
Функция ОпределитьУсловияСуществованияДвижения(КодОбработчика, Регистр, СписокРеквизитов, СтекПеременных, Шаблон = Неопределено) Экспорт

	ЕстьУсловия = Ложь;
	
	ПолныйТекстУсловия = "Если ";
    ТекстОбъединения   = "";	
	
	Для жи = 1 По 3 Цикл
		
		Условие 		= ПолучитьСсылкуРеквизитаПоИмени(Регистр, "Условие" + Строка(жи));
		Сравнение 		= ПолучитьСсылкуРеквизитаПоИмени(Регистр, "ВидСравнения" + Строка(жи));
		Значение		= ПолучитьСсылкуРеквизитаПоИмени(Регистр, "Значение" + Строка(жи));
		ВидОбъединения 	= ПолучитьСсылкуРеквизитаПоИмени(Регистр, "ОбъединениеСПоследующим" + Строка(жи));
		
		Если Условие = Неопределено или Сравнение = Неопределено или Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Найдем значения данных реквизитов в списке реквизитов.
		ЗначениеУсловие 		= ?(СписокРеквизитов.Найти(Условие			, "Реквизит") = Неопределено, Неопределено, СписокРеквизитов.Найти(Условие			, "Реквизит").Значение);
		ЗначениеСравнения 		= ?(СписокРеквизитов.Найти(Сравнение		, "Реквизит") = Неопределено, Неопределено, СписокРеквизитов.Найти(Сравнение		, "Реквизит").Значение);
		// Изменение кода. Начало. 05.06.2014{{
		
		СтрОтбор = Новый Структура("Реквизит",Значение);
		НайденныеСтроки = СписокРеквизитов.НайтиСтроки(СтрОтбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЗначениеЗначения = Неопределено;
		ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
			ЗначениеЗначения = НайденныеСтроки[0].Значение;
		Иначе
			ЗначениеЗначения = Новый СписокЗначений;
			
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
			
				ЗначениеЗначения.Добавить(ТекСтрока.Значение);
			
			КонецЦикла; 
			
		КонецЕсли; 
		// Изменение кода. Конец. 05.06.2014}}
		ЗначениеВидаОбъединения = ?(СписокРеквизитов.Найти(ВидОбъединения	, "Реквизит") = Неопределено, Неопределено, СписокРеквизитов.Найти(ВидОбъединения	, "Реквизит").Значение);
		
		Если (ЗначениеУсловие = Неопределено или ПустаяСтрока(ЗначениеУсловие)) или ЗначениеСравнения = Неопределено или ЗначениеЗначения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Изменение кода. Начало. 05.06.2014{{
		Если ТипЗнч(ЗначениеЗначения) = Тип("СписокЗначений") И ЗначениеСравнения = Перечисления.бит_ЛогическиеОператоры.ВСписке Тогда
			
			ТекстУсловия = "("+ИнтерпретироватьРеквизит(ЗначениеЗначения, СтекПеременных, КодОбработчика, Шаблон)
			                  +".НайтиПоЗначению("
							  +ИнтерпретироватьРеквизит(ЗначениеУсловие, СтекПеременных, КодОбработчика, Шаблон)
							  +") <> Неопределено"
							+")";
			
		Иначе	
			
		ТекстУсловия = "(" 
		                   + ИнтерпретироватьРеквизит(ЗначениеУсловие, СтекПеременных, КодОбработчика, Шаблон) 
		                   + ИнтерпретироватьРеквизит(ЗначениеСравнения, СтекПеременных, КодОбработчика, Шаблон) 
						   + ИнтерпретироватьРеквизит(ЗначениеЗначения, СтекПеременных, КодОбработчика, Шаблон) 
						   + ")";
			
		КонецЕсли; 
		
						   
		// Изменение кода. Конец. 05.06.2014}}				   
		
		ПолныйТекстУсловия = ПолныйТекстУсловия + ТекстОбъединения + ТекстУсловия;
		
		Если ЗначениеВидаОбъединения = Перечисления.бит_ТипыОбъединенияУсловий.ЛогическоеСложение Тогда
			ТекстОбъединения = " ИЛИ ";
		ИначеЕсли ЗначениеВидаОбъединения = Перечисления.бит_ТипыОбъединенияУсловий.ЛогическоеУмножение Тогда
			ТекстОбъединения = " И ";
		Иначе
			ТекстОбъединения = " И ";
		КонецЕсли;
		
	КонецЦикла;

	// Не забываем про произвольное условие
	Условие = ПолучитьСсылкуРеквизитаПоИмени(Регистр, "ПроизвольноеУсловие");
	
	Если Условие <> Неопределено Тогда
		ЗначениеУсловие = ?(СписокРеквизитов.Найти(Условие, "Реквизит") = Неопределено, Неопределено, СписокРеквизитов.Найти(Условие, "Реквизит").Значение);
		Если ЗначениеЗаполнено(ЗначениеУсловие) Тогда
			ТекстУсловия = "(" + ИнтерпретироватьРеквизит(ЗначениеУсловие, СтекПеременных, КодОбработчика, Шаблон) + ")";
			Если ЗначениеВидаОбъединения <> Неопределено Тогда
				ТекстУсловия = ?(ЗначениеВидаОбъединения = Перечисления.бит_ТипыОбъединенияУсловий.ЛогическоеСложение, " ИЛИ ", " И ") + ТекстУсловия;
			КонецЕсли;
			ПолныйТекстУсловия = ПолныйТекстУсловия + ТекстУсловия;
		КонецЕсли;
	КонецЕсли;
	
	Если СокрЛП(ПолныйТекстУсловия) <> "Если" Тогда
		ПолныйТекстУсловия = ПолныйТекстУсловия + " Тогда";
		ДобавитьСтрокуКТексту(КодОбработчика, ПолныйТекстУсловия);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции  // ОпределитьУсловияСуществованияДвижения()

// Добавляет строку создания нового движения к коду обработчика.
// 
Функция ДобавитьНовоеДвижение(КодОбработчика, Регистр, СписокРеквизитов) Экспорт
	
	ИмяДвижения = "мхо_НовоеДвижение_" + Регистр.ИмяРегистра;
	
	Если Регистр.ВидРегистра = "РегистрыБухгалтерии" или Регистр.ВидРегистра = "РегистрыСведений" Тогда
		ДобавитьСтрокуКТексту(КодОбработчика, ИмяДвижения + " = мхо_Движения_" + Регистр.ИмяРегистра + ".Добавить();");
	Иначе // Если Регистр.ВидРегистра = "РегистрыНакопления" Тогда.
		
		// Определим, это приход или расход
		// Для этого необходимо найти значение реквизита "ВидДвижения".
		Реквизит = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию("ВидДвижения", Истина, Регистр);
		
		Если не Реквизит.Пустая() Тогда
			
			ЗначениеРеквизита = СписокРеквизитов.Найти(Реквизит, "Реквизит").Значение;
			
			Если ЗначениеРеквизита = Перечисления.бит_ВидДвиженияНакопления.Приход Тогда
				ДобавитьСтрокуКТексту(КодОбработчика, ИмяДвижения + " = мхо_Движения_" + Регистр.ИмяРегистра + ".ДобавитьПриход();");
			ИначеЕсли ЗначениеРеквизита = Перечисления.бит_ВидДвиженияНакопления.Расход Тогда
				ДобавитьСтрокуКТексту(КодОбработчика, ИмяДвижения + " = мхо_Движения_" + Регистр.ИмяРегистра + ".ДобавитьРасход();");
			Иначе
				ДобавитьСтрокуКТексту(КодОбработчика, ИмяДвижения + " = мхо_Движения_" + Регистр.ИмяРегистра + ".Добавить();");
			КонецЕсли;
			
		Иначе	
			ДобавитьСтрокуКТексту(КодОбработчика, ИмяДвижения + " = мхо_Движения_" + Регистр.ИмяРегистра + ".Добавить();");
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ИмяДвижения;
	
КонецФункции // ДобавитьНовоеДвижение()

// Процедура добавляет к коду обработчика строки формирования движений
// по регистру сведений "бит_ИспользованиеШаблоновДвижений".
// 
// Параметры:
//  КодОбработчика 	- Код обработчика проведения.
//  Шаблон			- Структура (ШаблонДвижений, НомерДвижения).
//  СтекПеременных  - Массив переменных.
// 
Процедура ОтразитьВИспользуемыхШаблонах(КодОбработчика, Шаблон, СтекПеременных) Экспорт

	// НаборИспользуемыеШаблоны
	ДокументСсылкаТекст 	= "Источник.Ссылка";
	ШаблонСсылкаТекст		= ПоместитьПеременнуюВСтек(СтекПеременных, Шаблон.ШаблонДвижений);
	НомерСтрокиШаблонаТекст	= Строка(Шаблон.НомерДвижения);
	
	ДобавитьСтрокуКТексту(КодОбработчика, "бит_МеханизмХозяйственныхОперацийСервер.ДвиженияИспользуемыеШаблоны(НаборИспользуемыеШаблоны" + ", " + ДокументСсылкаТекст + ", " + ШаблонСсылкаТекст + ", " + НомерСтрокиШаблонаТекст + ");");
	
КонецПроцедуры // ОтразитьВИспользуемыхШаблонах()

// ДвиженияИспользуемыеШаблоны.
// 
// Параметры:
//  ДокументСсылка 		- Код обработчика проведения
//  Шаблон				- Структура (ШаблонДвижений, НомерДвижения)
//  НомерСтрокиШаблона  - Массив переменных.
// 
Процедура ДвиженияИспользуемыеШаблоны(НаборЗаписей, ДокументСсылка, Шаблон, НомерСтрокиШаблона) Экспорт

	
	НаборЗаписей.Отбор.Шаблон.Установить(Шаблон);
	НаборЗаписей.Отбор.НомерСтрокиШаблона.Установить(НомерСтрокиШаблона);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	ДвижениеИспользуемыеШаблоны = НаборЗаписей.Добавить();
	ДвижениеИспользуемыеШаблоны.ДокументСсылка 		= ДокументСсылка;
	ДвижениеИспользуемыеШаблоны.Шаблон 				= Шаблон;
	ДвижениеИспользуемыеШаблоны.НомерСтрокиШаблона	= НомерСтрокиШаблона;
	
	НаборЗаписей.Записать();

	
КонецПроцедуры // ДвиженияИспользуемыеШаблоны()

// Добавляет к коду обработчика новое движение по регистру.
// 
// Параметры:
//  КодОбработчика  - Строка кода
//  Шаблон			- Структура (ШаблонДвижений, НомерДвижения).
// 
Процедура СформироватьКодДвиженияПоРегистру(КодОбработчика, Шаблон, СтекПеременных) Экспорт
	
	// Получим значения всех реквизитов для определенной строки определенного шаблона.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Шаблон"			, Шаблон.ШаблонДвижений);
	Запрос.УстановитьПараметр("НомерДвижения"	, Шаблон.НомерДвижения);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ЗначенияРеквизитовШаблонов.Реквизит,
	               |	бит_ЗначенияРеквизитовШаблонов.Значение,
	               |	бит_ЗначенияРеквизитовШаблонов.ЭтоСписок,
	               |	бит_ЗначенияРеквизитовШаблонов.НомерЗначения
	               |ИЗ
	               |	РегистрСведений.бит_ЗначенияРеквизитовШаблонов КАК бит_ЗначенияРеквизитовШаблонов
	               |ГДЕ
	               |	бит_ЗначенияРеквизитовШаблонов.ШаблонДвижений = &Шаблон
	               |	И бит_ЗначенияРеквизитовШаблонов.НомерДвижения = &НомерДвижения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	бит_ЗначенияРеквизитовШаблонов.Реквизит.Ведущий УБЫВ";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Получим регистр шаблона
	РегистрШаблона = Шаблон.ШаблонДвижений.Регистр;
	// Получим имя регистра шаблона
	ИмяРегистра = РегистрШаблона.ИмяРегистра;
	// Вставим в обработчик код создания нового движения
	// ДобавитьСтрокуКТексту(КодОбработчика, ИмяДвижения + " = мхо_Движения_" + ИмяРегистра + ";");
	
	// Здесь следующая логика - если это регистр накопления, нужно определить
	// вид движения накопления. Если не заполнен - приход
	// Если это регистр бухгалтерии - ничего особенного делать не нужно
	// Кроме того, перед заполнением реквизитов движения нужно учесть условия формирования
	// движения (разумеется, если они есть).
	
	ДобавитьКомментарийКТексту(КодОбработчика, "ОБРАБОТЧИК ""ПЕРЕД ФОРМИРОВАНИЕМ СТРОКИ ШАБЛОНА""");
	
	// Добавим к обработчику алгоритм "Перед формированием строки".
	ДобавитьСтрокуКТексту(КодОбработчика, Шаблон.ШаблонДвижений.АлгоритмПередФормированиемСтроки);
	
	// Добавим условия существования движения
	ЕстьУсловиеСуществованияДвижения = ОпределитьУсловияСуществованияДвижения(КодОбработчика, РегистрШаблона, Результат, СтекПеременных, Шаблон.ШаблонДвижений);
	
	// Необходимо "двинуть" регистр "Использование шаблонов движения"
	// для отражения результата проведения документа.
	ОтразитьВИспользуемыхШаблонах(КодОбработчика, Шаблон, СтекПеременных);
	
	// Добавим новое движение
	ИмяДвижения = ДобавитьНовоеДвижение(КодОбработчика, РегистрШаблона, Результат);
	
	// Заполним значения реквизитов движения
	Для Каждого РеквизитДвижения Из Результат Цикл
		// Заполнение реквизитов движения
		Если не РеквизитДвижения.Реквизит.УчаствуетВДвижении Тогда
			Продолжить;
		КонецЕсли;
		Если не ЗначениеЗаполнено(РеквизитДвижения.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если не РеквизитДвижения.Реквизит.Субконто Тогда
			// Изменение кода. Начало. 05.06.2014{{
			Если РеквизитДвижения.ЭтоСписок Тогда
				
				Если РеквизитДвижения.НомерЗначения = 1 Тогда
					
					НовыйСписок = Новый СписокЗначений;
					СтрОтбор = Новый Структура("Реквизит, ЭтоСписок", РеквизитДвижения.Реквизит, Истина);
					НайденныеСтроки = Результат.НайтиСтроки(СтрОтбор);
					
					Для каждого ТекСтрока Из НайденныеСтроки Цикл
						
						НовыйСписок.Добавить(ТекСтрока.Значение);
						
					КонецЦикла; 
					
			       ДобавитьСтрокуКТексту(КодОбработчика, ИмяДвижения + "." + РеквизитДвижения.Реквизит.Наименование + " = " + ИнтерпретироватьРеквизит(НовыйСписок, СтекПеременных, КодОбработчика, Шаблон.ШаблонДвижений) + ";");
					
				КонецЕсли; 
				
			Иначе	
			ДобавитьСтрокуКТексту(КодОбработчика, ИмяДвижения + "." + РеквизитДвижения.Реквизит.Наименование + " = " + ИнтерпретироватьРеквизит(РеквизитДвижения.Значение, СтекПеременных, КодОбработчика, Шаблон.ШаблонДвижений) + ";");
			КонецЕсли; 
			// Изменение кода. Конец. 05.06.2014}}
		Иначе
			// Субконто обработаем по-особому...
			НаправлениеСубконто = ?(Найти(РеквизитДвижения.Реквизит.Наименование, "Дт") > 0, "Дт", ?(Найти(РеквизитДвижения.Реквизит.Наименование, "Кт") > 0, "Кт", ""));
			НомерСубконто		= СокрЛП(СтрЗаменить(РеквизитДвижения.Реквизит.Наименование, "Субконто" + НаправлениеСубконто, ""));
			ИмяВидаСубконто		= Неопределено;
			// Попробуем найти соответствующее имя вида субконто.
			ИмяДляПоиска = "ИмяВидаСубконто" + НаправлениеСубконто + Строка(НомерСубконто);
			// Найдем его в справочнике
			РеквизитИмяВидаСубконто = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию(ИмяДляПоиска, Истина, РегистрШаблона);
			
			Если не РеквизитИмяВидаСубконто.Пустая() Тогда
				СтрокаСоЗначением = Результат.Найти(РеквизитИмяВидаСубконто, "Реквизит");
				Если СтрокаСоЗначением <> Неопределено Тогда
					ИмяВидаСубконто = СтрокаСоЗначением.Значение;
				КонецЕсли;
			КонецЕсли;
			
			ЗначениеСубконто	= ИнтерпретироватьРеквизит(РеквизитДвижения.Значение, СтекПеременных, КодОбработчика, Шаблон.ШаблонДвижений);
			СтрокаУстановкиСубконто = "бит_мхо_ОбщегоНазначенияСервер.бит_УстановитьСубконто(" + ИмяДвижения + ".Счет" + НаправлениеСубконто + ", " + ИмяДвижения + ".Субконто" + НаправлениеСубконто + ", " + ?(не ЗначениеЗаполнено(ИмяВидаСубконто), НомерСубконто, """" + ИмяВидаСубконто + """") + ", " + ЗначениеСубконто + ");";
			ДобавитьСтрокуКТексту(КодОбработчика, СтрокаУстановкиСубконто);
		КонецЕсли;
		
	КонецЦикла; // Заполнение значений реквизитов движения
	
	// Закрыть условие существования движения
	Если ЕстьУсловиеСуществованияДвижения Тогда
		ДобавитьСтрокуКТексту(КодОбработчика, "КонецЕсли;");
	КонецЕсли;
	
	ДобавитьКомментарийКТексту(КодОбработчика, "ОБРАБОТЧИК ""ПОСЛЕ ФОРМИРОВАНИЯ СТРОКИ ШАБЛОНА""");
	// Добавим к обработчику алгоритм "После формирования строки".
	ДобавитьСтрокуКТексту(КодОбработчика, Шаблон.ШаблонДвижений.АлгоритмПослеФормированияСтроки);
	
КонецПроцедуры // СформироватьКодДвиженияПоРегистру()

// Интерпретирует шаблоны и возвращает их представление в виде кода 1С.
// 
// Параметры:
//  ШаблоныДвижений  - Массив типа "СправочникСсылка.бит_ШаблоныДвижений"
//  СтекПеременных  - Массив-стек переменных.
// 
// Возвращаемое значение:
//   Строка - 1С-код (обработчик проведения шаблонов).
// 
Функция ПолучитьИсполнимыйКодШаблонов(ШаблоныДвижений, СтекПеременных) Экспорт
	
	// Инициализируем переменную-код обработчика шаблонов.
	
	КодОбработчикаШаблонов = "";
	
	// В различных шаблонах для обхода может использоваться одна и та же табличная часть
	// Чтобы избежать избыточных циклов, необходимо сгруппировать строки шаблонов по этому признаку
	// А так, как таблицы могут быть инициированы в обработчиках "Перед формированием проводок".
	
	// Разместим обработчики "Перед формированием проводок".
	
	Для Каждого Шаблон Из ШаблоныДвижений Цикл
		
		ДобавитьСтрокуКТексту(КодОбработчикаШаблонов, Шаблон.АлгоритмПередФормированиемПроводок);
		
		
		
	КонецЦикла;
	
	// От Kuznetsov
	ДобавитьСтрокуКТексту(КодОбработчикаШаблонов, "// Подготовим таблицу значений дополнительных аналитик документа");
	ДобавитьСтрокуКТексту(КодОбработчикаШаблонов, "Запрос = Новый Запрос(""ВЫБРАТЬ
	|		              |	ДополнительныеАналитики.Аналитика,
	|        		      |	ДополнительныеАналитики.ЗначениеАналитики
	|                   |ИЗ
	|		              |	РегистрСведений.бит_ДополнительныеАналитики КАК ДополнительныеАналитики
	|        		      |ГДЕ
	|                   |	ДополнительныеАналитики.Объект = &Ссылка"");
	|Запрос.УстановитьПараметр(""Ссылка"", мхо_ДокументОбъект.Ссылка);
	|мхо_Соответствие_ДопАналитикиДокумента = Новый Соответствие();
	|мхо_Выборка_ДопАналитикиДокумента = Запрос.Выполнить().Выбрать();
	|Пока мхо_Выборка_ДопАналитикиДокумента.Следующий() Цикл
	|	мхо_Соответствие_ДопАналитикиДокумента.Вставить(мхо_Выборка_ДопАналитикиДокумента.Аналитика,
	|													мхо_Выборка_ДопАналитикиДокумента.ЗначениеАналитики);
	|КонецЦикла;");
	
	// AKuznetsov - конец изменения
	
	// Получим последовательность всех строк шаблона, с упорядочиванием по имени таблицы.
	ПоследовательностьШаблонов = ПолучитьУпорядоченнуюПоследовательностьСтрокШаблонов(ШаблоныДвижений); 
	
	// Получим список всех регистров, по которым будут выполняться движения.
	СписокРегистров = ПолучитьСписокРегистровДвижений(ШаблоныДвижений);
	
	// Инициируем движения регистров для последующего добавления записей.
	ИнициироватьДвиженияПоРегистрам(КодОбработчикаШаблонов, СписокРегистров);
	
	// Инициируем имя таблицы обхода
	ТаблицаОбхода = "";
	
	Если ПоследовательностьШаблонов.Количество() > 0 Тогда
		
		Для Каждого Шаблон Из ПоследовательностьШаблонов Цикл
			
			// Проверим, не началась ли новая таблица в последовательности.
			
			Если ТаблицаОбхода <> Шаблон.Значение Тогда // Начало новой таблицы
				
				Если ТаблицаОбхода = "" Тогда // Нет завершения старой таблицы
					
				Иначе // Необходимо отразить завершение обхода по предыдущей таблице.
					
					ДобавитьЗавершениеОбходаТаблицы(КодОбработчикаШаблонов, ТаблицаОбхода);
					
				Конецесли;
				
				ТаблицаОбхода = Шаблон.Значение; // Получим новую таблицу
				
				Если ТаблицаОбхода = "" Тогда // Нет нужды отражать начало обхода по новой таблице.
					
				Иначе // Необходимо начать обход новой таблицы
					
					// Инициализируем нужную таблицу, если есть соотвествующий код.
					ДобавитьКодИнициализацииТаблицы(КодОбработчикаШаблонов, ТаблицаОбхода, Шаблон.ШаблонДвижений);
					ДобавитьНачалоОбходаТаблицы(КодОбработчикаШаблонов, ТаблицаОбхода);
					
				Конецесли;
				
			КонецЕсли;
			
			// Можно формировать очередное движение по регистру.
			СформироватьКодДвиженияПоРегистру(КодОбработчикаШаблонов, Шаблон, СтекПеременных);
			
		КонецЦикла;
		
		Если СокрЛП(Шаблон.Значение) <> "" Тогда
			
			ДобавитьЗавершениеОбходаТаблицы(КодОбработчикаШаблонов, Шаблон.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Разместим обработчики "После формирования проводок".
	Для Каждого Шаблон Из ШаблоныДвижений Цикл
		
		ДобавитьСтрокуКТексту(КодОбработчикаШаблонов, Шаблон.АлгоритмПослеФормированияПроводок);
		
	КонецЦикла;
	
	Возврат КодОбработчикаШаблонов;
	
КонецФункции // ПолучитьИсполнимыйКодШаблонов()

// Интерпретирует комплект движений и помещает в его реквизиты код обработчика проведения
// и заполняет таблицу переменных.
// 
// Параметры:
//  КомплектОбъект - "СправочникОбъект.бит_КомплектыДвижений".
// 
Процедура ИнтерпретироватьКомплект(КомплектОбъект) Экспорт

	// Основные правила интерпретации:
	// 1. Обращение к реквизитам объекта и экспортным переменным модуля объекта происходит
	//   через префикс "мхо_ДокументОбъект.".
	// 
	
	Если КомплектОбъект.ШаблоныДвижений.Количество() = 0 Тогда
		КомплектОбъект.КодОбработчикаПроведения = "";
		Возврат;
	КонецЕсли;
	
	// Получим список шаблонов движений, участвующих в комплекте.
	МассивШаблоновДвижений = КомплектОбъект.ШаблоныДвижений.ВыгрузитьКолонку("ШаблонДвижения");
	
	ИмяОбъектаПолное      = "Документ.бит_Проформы";
	ПроформаОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ИмяОбъектаПолное);
	
	// Инициализируем переменную-код обработчика проведения.
	Если КомплектОбъект.ВидДокумента = ПроформаОбъектСистемы Тогда
		КодОбработчикаПроведения = "мхо_ДокументОбъект = Документы.бит_Проформы.ПодготовитьДанныеДокумента(Источник.Ссылка);";
	Иначе
		КодОбработчикаПроведения = "мхо_ДокументОбъект = Источник;";
	КонецЕсли;
	
	// Инициализируем стек переменных
	СтекПеременных = ИнициализироватьСтекПеременных();
    // Добавим к обработчику алгоритм "Перед формированием проводок версии".
	ДобавитьКомментарийКТексту(КодОбработчикаПроведения, "ОБРАБОТЧИК ""ПЕРЕД ФОРМИРОВАНИЕМ ПРОВОДОК КОМПЛЕКТА""");
	ДобавитьСтрокуКТексту(КодОбработчикаПроведения, КомплектОбъект.АлгоритмПередФормированиемПроводокВерсии);
	// Получим код обработчика проведения шаблонов.
	ОбработчикПроведенияШаблонов = ПолучитьИсполнимыйКодШаблонов(МассивШаблоновДвижений, СтекПеременных);
	// Сольем два раздела
	ДобавитьСтрокуКТексту(КодОбработчикаПроведения, ОбработчикПроведенияШаблонов);
	
	// Добавим к обработчику алгоритм "После формирования проводок версии".
	ДобавитьКомментарийКТексту(КодОбработчикаПроведения, "ОБРАБОТЧИК ""ПОСЛЕ ФОРМИРОВАНИЯ ПРОВОДОК КОМПЛЕКТА""");
	ДобавитьСтрокуКТексту(КодОбработчикаПроведения, КомплектОбъект.АлгоритмПослеФормированияПроводокВерсии);
	
	ВыровнятьФрагментКода(КодОбработчикаПроведения);
	
	// Поместим итоговый код обработчика и стек переменных в соответствующие реквизиты комплекта.
	КомплектОбъект.КодОбработчикаПроведения = КодОбработчикаПроведения;
	КомплектОбъект.СтекПеременных 			= Новый ХранилищеЗначения(СтекПеременных);
	
	// Запишем комплект
	// Запись комплекта - задача того обработчика, который вызвал интерпретацию комплекта.
	
КонецПроцедуры // ИнтерпретироватьКомплект()

// Интерпретирует комплект движений и помещает в его реквизиты код обработчика проведения
// и заполняет таблицу переменных.
// 
// Параметры:
//  КомплектОбъект - "СправочникОбъект.бит_КомплектыДвижений".
// 
Процедура ИнтерпретироватьШаблоныПроформы(КомплектОбъект) Экспорт

	// Основные правила интерпретации:
	// 1. Обращение к реквизитам объекта и экспортным переменным модуля объекта происходит
	//   через префикс "мхо_ДокументОбъект.".
	// 
	
	// Получим список шаблонов движений, участвующих в комплекте.
	МассивШаблоновДвижений = Новый Массив;
	
	Для Каждого СтрокаШаблона Из КомплектОбъект.НастройкиДвижений Цикл
		
		Если СтрокаШаблона.Активность Тогда
			МассивШаблоновДвижений.Добавить(СтрокаШаблона.ШаблонДвижений);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивШаблоновДвижений.Количество() = 0 Тогда
		КомплектОбъект.КодОбработчикаПроведения = "";
	КонецЕсли;
	
	// Инициализируем переменную-код обработчика проведения.
	КодОбработчикаПроведения = "мхо_ДокументОбъект = Документы.бит_Проформы.ПодготовитьДанныеДокумента(Источник.Ссылка);";
	// Инициализируем стек переменных
	СтекПеременных = ИнициализироватьСтекПеременных();

	// Получим код обработчика проведения шаблонов.
	ОбработчикПроведенияШаблонов = ПолучитьИсполнимыйКодШаблонов(МассивШаблоновДвижений, СтекПеременных);
	// Сольем два раздела
	ДобавитьСтрокуКТексту(КодОбработчикаПроведения, ОбработчикПроведенияШаблонов);
	
	ВыровнятьФрагментКода(КодОбработчикаПроведения);
	
	// Поместим итоговый код обработчика и стек переменных в соответствующие реквизиты комплекта.
	КомплектОбъект.КодОбработчикаПроведения = КодОбработчикаПроведения;
	КомплектОбъект.СтекПеременных 			= Новый ХранилищеЗначения(СтекПеременных);
	
	// Запишем комплект
	// Запись комплекта - задача того обработчика, который вызвал интерпретацию комплекта.
	
КонецПроцедуры // ИнтерпретироватьКомплект()

// Интерпретирует все комплекты движений и помещает в их реквизиты код обработчика проведения
// и заполняет таблицу переменных.
// 
// 
Процедура ИнтерпретироватьВсеКомплекты() Экспорт

	ВыборкаКомплектов = Справочники.бит_КомплектыДвижений.Выбрать();
	
	Пока ВыборкаКомплектов.Следующий() Цикл
		
		Если ВыборкаКомплектов.ПометкаУдаления или ВыборкаКомплектов.ТолькоРучныеИзменения Тогда
			Продолжить;
		КонецЕсли;
		
		КомплектОбъект = ВыборкаКомплектов.ПолучитьОбъект();
		ИнтерпретироватьКомплект(КомплектОбъект);
		КомплектОбъект.Записать();
		
		#Если Клиент Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Компилирован комплект " + """" + Строка(ВыборкаКомплектов.Ссылка) + """");	
		#КонецЕсли
	
	КонецЦикла;
	
КонецПроцедуры // ИнтерпретироватьВсеКомплекты()

// Возвращает активный комплект для документа.
// 
// Параметры:
//  ДокументОбъект  - ДокументОбъект.
// 
Функция ПолучитьАктивныйКомплектДляДокумента(ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяВидаДокумента 	= МетаданныеДокумента.Имя;
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяОбъекта", ИмяВидаДокумента);
	
	ВидДокумента = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъекта", ИмяВидаДокумента, Справочники.бит_ОбъектыСистемы.Документы);
	
	Если ВидДокумента.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаданныеДокумента) Тогда
		Организация = ДокументОбъект.Организация;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Организация"	, Организация);
	Запрос.УстановитьПараметр("ДатаСреза"	, КонецДня(ДокументОбъект.Дата));
	Запрос.УстановитьПараметр("ПустаяДата"	, Дата("00010101"));
	Запрос.УстановитьПараметр("ВидПроформы" , ?(ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.бит_Проформы"), ДокументОбъект.ВидПроформы, Неопределено));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_АктивныеКомплектыДвиженийСрезПоследних.Комплект,
	|	ВЫБОР
	|		КОГДА бит_АктивныеКомплектыДвиженийСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.бит_АктивныеКомплектыДвижений.СрезПоследних(
	|			&ДатаСреза,
	|			(Организация = &Организация
	|				ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				И Комплект.ВидДокумента = &ВидДокумента
	|				И Комплект.СтатусВерсии = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыКомплектовДвижений.Утвержден)
	|				И (КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ДатаСреза
	|					ИЛИ ДатаОкончания = &ПустаяДата)) КАК бит_АктивныеКомплектыДвиженийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ВидПроформы,
	|	2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
				   
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда // Активным может быть только один комплект. Выбираем первый попавшийся, если есть дубли.
		Возврат Результат.Комплект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
    
КонецФункции // ПолучитьАктивныйКомплектДляДокумента()

// Генерирует наименование для шаблона движений.
// 
// Параметры:
//  ШаблонОбъект  - СправочникОбъект.бит_ШаблоныДвижений.
// 
Процедура ПолучитьНаименованиеШаблонаДвиженийНаСервере(ШаблонОбъект) Экспорт

	ШаблонНаименование = "" + Строка(ШаблонОбъект.Регистр) + " --> " + Строка(ШаблонОбъект.ВидДокумента) + " --> " + ШаблонОбъект.Код;
	
	Если Найти(ШаблонОбъект.Наименование, " --> ") > 0 или СокрЛП(ШаблонОбъект.Наименование) = "" Тогда
		ШаблонОбъект.Наименование = ШаблонНаименование;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьНаименованиеШаблонаДвижений()

// Читает текущие значения реквизитов из регистра в таблицу движений.
// 
// Параметры:
//  ШаблонСсылка  	- СправочникСсылка.бит_ШаблоныДвижений
//  ТаблищаДвижений - Значение табличного поля с описанием движений.
// 
Процедура ПрочитатьЗначенияРеквизитовДвиженийШаблона(ШаблонСсылка, ТаблицаДвижений) Экспорт

	НаборЗаписей = РегистрыСведений.бит_ЗначенияРеквизитовШаблонов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ШаблонДвижений.Установить(ШаблонСсылка);
	НаборЗаписей.Прочитать();
	
	ВыгрузкаНабора = НаборЗаписей.Выгрузить();
	ВыгрузкаНабора.Сортировать("НомерДвижения Возр");
	
	// Очистим таблицу от прошлых записей по шаблону.
	ТаблицаДвижений.Очистить();
	
	ТекущийНомерДвижения = -1;
	
	Для Каждого Движение Из ВыгрузкаНабора Цикл
		
		Если Движение.НомерДвижения <> ТекущийНомерДвижения Тогда // Новая строка шаблона
			// Добавим строку щаблона
			ТекущийНомерДвижения = Движение.НомерДвижения;
			НоваяСтрокаШаблона = ТаблицаДвижений.Добавить();
		КонецЕсли;
		
		Если ТаблицаДвижений.Колонки.Найти(Движение.Реквизит.Наименование) <> Неопределено Тогда
			
			// Изменение кода. Начало. 05.06.2014{{
			Если Движение.ЭтоСписок = Истина Тогда
				
				Если Движение.НомерЗначения = 1 Тогда
					
					НовыйСписок = Новый СписокЗначений;
					СтрОтбор = Новый Структура("Реквизит, ЭтоСписок, НомерДвижения", Движение.Реквизит, Истина, Движение.НомерДвижения);
					НайденныеСтроки = ВыгрузкаНабора.НайтиСтроки(СтрОтбор);
					
					Для каждого ТекСтрока Из НайденныеСтроки Цикл
						
						НовыйСписок.Добавить(ТекСтрока.Значение);
						
					КонецЦикла; 
					
					НоваяСтрокаШаблона[Движение.Реквизит.Наименование] = НовыйСписок;
					
				КонецЕсли; 
				
			Иначе	
			    НоваяСтрокаШаблона[Движение.Реквизит.Наименование] = Движение.Значение;
			КонецЕсли; 
			
			// Изменение кода. Конец. 05.06.2014}}
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьЗначенияРеквизитовДвиженийШаблона()

// Читает текущие значения реквизитов из данных автозаполнения в таблицу движений.
// 
Процедура ПрочитатьЗначенияРеквизитовДвиженийШаблонаМуляж(ТаблицаДвижений, ПараметрыАвтозаполнения) Экспорт
	
	ТабАвтозаполнение = ПараметрыАвтозаполнения.Выгрузить();
	ТабАвтозаполнение.Сортировать("НомерДвижения");
	
	ТекущийНомерДвижения = -1;
	
	Для Каждого Движение Из ТабАвтозаполнение Цикл
		
		Если Движение.НомерДвижения <> ТекущийНомерДвижения Тогда // Новая строка шаблона
			// Добавим строку щаблона
			ТекущийНомерДвижения = Движение.НомерДвижения;
			НоваяСтрокаШаблона = ТаблицаДвижений.Добавить();
		КонецЕсли;
		
		Если ТаблицаДвижений.Колонки.Найти(Движение.Реквизит.Наименование) <> Неопределено Тогда
			НоваяСтрокаШаблона[Движение.Реквизит.Наименование] = Движение.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает текущие значения реквизитов шаблона в регистр.
// 
// Параметры:
//  ШаблонСсылка  	- СправочникСсылка.бит_ШаблоныДвижений.
// 	Регистр			- Группа справочника "бит_ВидыРеквизитовДвижений".
//  ТаблищаДвижений - Значение табличного поля с описанием движений.
// 
Процедура ЗаписатьЗначенияРеквизитовДвиженийШаблона(ШаблонСсылка, Регистр, ТаблицаДвижений) Экспорт

	// Поместим данные в регистр
	НаборЗаписей = РегистрыСведений.бит_ЗначенияРеквизитовШаблонов.СоздатьНаборЗаписей();
	// Замещаем шаблон целиком
	НаборЗаписей.Отбор.ШаблонДвижений.Установить(ШаблонСсылка);
	НаборЗаписей.Прочитать();
	// Очистим набор от прошлых записей по шаблону.
	НаборЗаписей.Очистить();
	
	Отбор = Новый Структура("Наименование");
	
	Для Каждого Движение Из ТаблицаДвижений Цикл
		
		Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
			
			// Определим реквизит
			Отбор.Наименование = Колонка.Имя;
			Реквизиты = Справочники.бит_ВидыРеквизитовДвижений.Выбрать(Регистр,, Отбор);
			
			Если Реквизиты.Следующий() Тогда
				Реквизит = Реквизиты.Ссылка;
			Иначе
				Продолжить;
			КонецЕсли;
			
			// Изменение кода. Начало. 05.06.2014{{
			ТекЗначение = Движение[Колонка.Имя];
			Если ТипЗнч(ТекЗначение) = Тип("СписокЗначений") Тогда
				
				инд = 1;
				Для каждого Эл Из ТекЗначение Цикл
					
					НовВНаборе = НаборЗаписей.Добавить();
					НовВНаборе.ШаблонДвижений 	= ШаблонСсылка;
					НовВНаборе.НомерДвижения 	= ТаблицаДвижений.Индекс(Движение);
					НовВНаборе.Реквизит 		= Реквизит;
					НовВНаборе.Значение 		= Эл.Значение;
					НовВНаборе.НомерЗначения    = инд;
					НовВНаборе.ЭтоСписок        = Истина;
					
					инд = инд + 1;
				КонецЦикла; 
				
			Иначе	
				
				НовВНаборе = НаборЗаписей.Добавить();
				НовВНаборе.ШаблонДвижений 	= ШаблонСсылка;
				НовВНаборе.НомерДвижения 	= ТаблицаДвижений.Индекс(Движение);
				НовВНаборе.Реквизит 		= Реквизит;
				НовВНаборе.Значение 		= ТекЗначение;
				
			КонецЕсли; 
			// Изменение кода. Конец. 05.06.2014}}
			
			
		КонецЦикла;	
		
	КонецЦикла;
	
	// Запишем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры // ЗаписатьЗначенияРеквизитовДвиженийШаблона()

// Обработчик подписки на событие "Обработка проведения".
// 
// 
Процедура бит_мхо_НастраиваемыеДвиженияДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 			
	
	// Движения по документам, откорректировнным вручную не формируем.
	Если бит_ОбщегоНазначения.РучнаяКорректировка(Источник) Тогда
		 Возврат;
	КонецЕсли;
	
	// Получим активные комплекты для вида документа
	// Получим имя метаданных документа.
	ИмяВидаДокумента = Источник.Метаданные().Имя;
	
	АктивныйКомплект = ПолучитьАктивныйКомплектДляДокумента(Источник);
	
	Если АктивныйКомплект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получим массив переменных
	МассивПеременных 	= АктивныйКомплект.СтекПеременных.Получить();
	КодОбработчика 		= АктивныйКомплект.КодОбработчикаПроведения;
	
	Если СокрЛП(КодОбработчика) = "" Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОтладка = Неопределено;
	
	Источник.ДополнительныеСвойства.Свойство("ЭтоОтладка", ЭтоОтладка);
	
	Если ЭтоОтладка <> Неопределено Тогда
		Если ЭтоОтладка Тогда
			// ЗаполнитьФормуОтладки(Источник.ДополнительныеСвойства.ФормаОтладки, КодОбработчика, Отказ);
			ПодготовитьТекстОбработчикаДляОтладкиПроведения(КодОбработчика);
		КонецЕсли;
	КонецЕсли;
	
	// Изменение кода. Начало. 20.07.2016{{
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Источник);
	бит_МеханизмТрансляции.ДополнитьСтруктуруШапкиДокумента(Источник, СтруктураШапкиДокумента);
	// Изменение кода. Конец. 20.07.2016}}
	
	Попытка
		Выполнить(КодОбработчика);
	Исключение
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСМетаданными

// Процедура создает шаблон для документа "Операция (управленческая)". 
//
// Параметры:
//  СтруктураПараметров - Структура.
//
Процедура СоздатьОбновитьШаблонПроводокОперация(СтруктураПараметров, ШаблонСсылка, ЭтоНовый = Ложь) Экспорт

	РегистрБухгалтерии = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоРеквизиту("ИмяРегистра", СтруктураПараметров.ИмяРегистра, Справочники.бит_ВидыРеквизитовДвижений.ПустаяСсылка());

	Если ЭтоНовый Тогда
		
		ШаблонПроводок = Справочники.бит_ШаблоныДвижений.СоздатьЭлемент();
				
		ШаблонПроводок.Регистр = РегистрБухгалтерии;
		ШаблонПроводок.ВидДокумента = СтруктураПараметров.ВидДокумента;;
	
	Иначе
		
		ШаблонПроводок = ШаблонСсылка.Ссылка.ПолучитьОбъект();
		
	КонецЕсли;

	Если СтрНайти(СтруктураПараметров.ИмяРегистра, "Дополнительный") <> 0 Тогда
		
		Если бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(СтруктураПараметров.ИмяРегистра) Тогда
		
			ШаблонПроводок.АлгоритмПередФормированиемПроводок = "мхо_ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(мхо_ДокументОбъект.Организация, , Истина);";
			
		Иначе
			
			ШаблонПроводок.АлгоритмПередФормированиемПроводок = "мхо_ВалютаУпр = Константы.бит_ВалютаУправленческогоУчета.Получить();";

		КонецЕсли;
		
	ИначеЕсли СтрНайти(СтруктураПараметров.ИмяРегистра, "Бюджетирование") <> 0 Тогда

		ШаблонПроводок.АлгоритмПередФормированиемПроводок = "мхо_ВалютаСценарий = мхо_ДокументОбъект.Сценарий.Валюта;";
		
	КонецЕсли; 
	
	ШаблонПроводок.АлгоритмПослеФормированияСтроки    = ПолучитьКодАлгоритмПередФормированиемСтроки(СтруктураПараметров.ИмяРегистра);
	
	ШаблонПроводок.Записать();

	Если ЭтоНовый Тогда
		
		ШаблонПроводокНаим = ШаблонПроводок.Ссылка.ПолучитьОбъект();
		ШаблонПроводокНаим.Наименование = "" + Строка(ШаблонПроводокНаим.Регистр) + " --> " + Строка(ШаблонПроводокНаим.ВидДокумента) + " --> " + ШаблонПроводокНаим.Код;
		ШаблонПроводокНаим.Записать();
		
		ШаблонСсылка = ШаблонПроводокНаим.Ссылка;
	
	КонецЕсли; 
	
	ОтредактироватьСуммыРесурсовТаблицыПроводок(СтруктураПараметров.ИмяРегистра, СтруктураПараметров.ТаблицаПроводок);
	
	ЗаписатьЗначенияРеквизитовДвиженийШаблонаУпр(ШаблонСсылка, РегистрБухгалтерии, СтруктураПараметров.ТаблицаПроводок);	
	
КонецПроцедуры // СоздатьОбновитьШаблонПроводокОперацияУправленческая()
	
// Записывает текущие значения реквизитов шаблона в регистр.
// 
// Параметры:
//  ШаблонСсылка  	- СправочникСсылка.бит_ШаблоныДвижений.
// 	Регистр			- Группа справочника "бит_ВидыРеквизитовДвижений".
//  ТаблищаДвижений - Значение табличного поля с описанием движений.
// 
Процедура ЗаписатьЗначенияРеквизитовДвиженийШаблонаУпр(ШаблонСсылка, Регистр, ТаблицаДвижений) Экспорт

	// Поместим данные в регистр
	НаборЗаписей = РегистрыСведений.бит_ЗначенияРеквизитовШаблонов.СоздатьНаборЗаписей();
	// Замещаем шаблон целиком
	НаборЗаписей.Отбор.ШаблонДвижений.Установить(ШаблонСсылка);
	НаборЗаписей.Прочитать();
	// Очистим набор от прошлых записей по шаблону.
	НаборЗаписей.Очистить();
	
	Отбор = Новый Структура("Наименование");
	
	Для Каждого Движение Из ТаблицаДвижений Цикл
		
		Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
			
			// Определим реквизит
			Отбор.Наименование = Колонка.Имя;
			Реквизиты = Справочники.бит_ВидыРеквизитовДвижений.Выбрать(Регистр,, Отбор);
			
			Если Реквизиты.Следующий() Тогда
				Реквизит = Реквизиты.Ссылка;
			Иначе
				Продолжить;
			КонецЕсли;
			
			// Изменение кода. Начало. 05.06.2014{{
			ТекЗначение = Движение[Колонка.Имя];
			Если ТипЗнч(ТекЗначение) = Тип("СписокЗначений") Тогда
				
				инд = 1;
				Для каждого Эл Из ТекЗначение Цикл
					
					НовВНаборе = НаборЗаписей.Добавить();
					НовВНаборе.ШаблонДвижений 	= ШаблонСсылка;
					НовВНаборе.НомерДвижения 	= ТаблицаДвижений.Индекс(Движение);
					НовВНаборе.Реквизит 		= Реквизит;
					НовВНаборе.Значение 		= Эл.Значение;
					НовВНаборе.НомерЗначения    = инд;
					НовВНаборе.ЭтоСписок        = Истина;
					
					инд = инд + 1;
				КонецЦикла; 
				
			Иначе	
				
				НовВНаборе = НаборЗаписей.Добавить();
				НовВНаборе.ШаблонДвижений 	= ШаблонСсылка;
				НовВНаборе.НомерДвижения 	= ТаблицаДвижений.Индекс(Движение);
				
				НовВНаборе.Реквизит = Реквизит;
				
				Если Отбор.Наименование = "Период" Тогда
					НовВНаборе.Значение = "#Р.Дата";
				ИначеЕсли Отбор.Наименование = "Организация" Тогда
					НовВНаборе.Значение = "#Р.Организация";
				Иначе
					НовВНаборе.Значение = ТекЗначение;
				КонецЕсли;
				
			КонецЕсли; 
			// Изменение кода. Конец. 05.06.2014}}
			
			
		КонецЦикла;	
		
	КонецЦикла;
	
	// Запишем набор записей
	НаборЗаписей.Записать();
		
КонецПроцедуры // ЗаписатьЗначенияРеквизитовДвиженийШаблона()

// Процедура - Записать движения операция упр.
//
// Параметры:
//  ИсточникСсылка		 - 	Ссылка - источник.
//  ШаблонСсылка		 - 	Ссылка - шаблон.
//  ИмяРегистра			 - 	Строка - наименование регистра.
//  ДобавитьЗагрузить	 - 	Булево - добавлять.
//
Процедура ЗаписатьДвиженияОперацияУпр(ИсточникСсылка, ШаблонСсылка, ИмяРегистра, ДобавитьЗагрузить) Экспорт
		
	Источник = ИсточникСсылка.ПолучитьОбъект();
	
	Если ДобавитьЗагрузить = "Добавить" Тогда
		Источник.Движения[ИмяРегистра].Прочитать();
	КонецЕсли;
	 
	мхо_ДокументОбъект = Источник;
	
	МассивПеременных = бит_МеханизмХозяйственныхОперацийСервер.ИнициализироватьСтекПеременных();
	
	СписокШаблонов = Новый Массив;
	СписокШаблонов.Добавить(ШаблонСсылка);

	КодОбработчика = бит_МеханизмХозяйственныхОперацийСервер.ПолучитьИсполнимыйКодШаблонов(СписокШаблонов, МассивПеременных);
	бит_МеханизмХозяйственныхОперацийСервер.ВыровнятьФрагментКода(КодОбработчика);
	
	ВыправитьКодОбработчикаОперацияУпр(КодОбработчика, ИмяРегистра);
		
	Попытка
		Выполнить(КодОбработчика);
	Исключение
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;	

КонецПроцедуры // ЗаписатьДвиженияОперацияУпр()

// Возвращает таблицу значений, содержащую описание
// регистров бухгалтерии и регистров накопления конфигурации.
// 
// Возвращаемое значение:
//   <ТаблицаЗначения>   - описание регистров системы.
// 		- <ИмяРегистра>	 - Строка. Имя регистра.
//      - <ВидРегистра>	 - Строка. Тип регистра.
//      - <Синоним>	 	 - Строка. Синоним.
// 
Процедура ЗаполнитьОписаниеРегистровКонфигурации(ТаблицаОписания) Экспорт

	ТаблицаРегистров 		= ТаблицаОписания;
	
	МассивВидовРегистров 	= Новый Массив;
	МассивВидовРегистров.Добавить("РегистрыБухгалтерии");
	МассивВидовРегистров.Добавить("РегистрыНакопления");
	МассивВидовРегистров.Добавить("РегистрыСведений");
	
	// Заполним массив регистров
	Для Каждого ВидРегистра Из МассивВидовРегистров Цикл
		Для Каждого Регистр  Из Метаданные[ВидРегистра] Цикл
			
			Если ВидРегистра = "РегистрыСведений" Тогда
				Если Регистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыРегистров = ТаблицаРегистров.Добавить();
			СтрокаТаблицыРегистров.ИмяРегистра 	= Регистр.Имя;
			СтрокаТаблицыРегистров.ВидРегистра 	= ВидРегистра;
			СтрокаТаблицыРегистров.Синоним		= Регистр.Синоним;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПолучитьСписокРегистровКонфигурации()

// Возвращает таблицу значений, содержащую описание
// регистров бухгалтерии и регистров накопления конфигурации.
// 
// Возвращаемое значение:
//   <ТаблицаЗначения>   - описание регистров системы.
// 		- <ИмяРегистра>	 - Строка. Имя регистра.
//      - <ВидРегистра>	 - Строка. Тип регистра.
//      - <Синоним>	 	 - Строка. Синоним.
// 
Функция ПолучитьОписаниеРегистровКонфигурации() Экспорт

	ТаблицаРегистров 		= Новый ТаблицаЗначений;
	
	ТипСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150));
	
	ТаблицаРегистров.Колонки.Добавить("ИмяРегистра"	, ТипСтрока);
	ТаблицаРегистров.Колонки.Добавить("ВидРегистра"	, ТипСтрока);
	ТаблицаРегистров.Колонки.Добавить("Синоним"		, ТипСтрока);
	
	МассивВидовРегистров 	= Новый Массив;
	МассивВидовРегистров.Добавить("РегистрыБухгалтерии");
	МассивВидовРегистров.Добавить("РегистрыНакопления");
	МассивВидовРегистров.Добавить("РегистрыСведений");
	
	// Заполним массив регистров
	Для Каждого ВидРегистра Из МассивВидовРегистров Цикл
		Для Каждого Регистр  Из Метаданные[ВидРегистра] Цикл
			
			Если ВидРегистра = "РегистрыСведений" Тогда
				Если Регистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыРегистров = ТаблицаРегистров.Добавить();
			СтрокаТаблицыРегистров.ИмяРегистра 	= Регистр.Имя;
			СтрокаТаблицыРегистров.ВидРегистра 	= ВидРегистра;
			СтрокаТаблицыРегистров.Синоним		= Регистр.Синоним;
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаРегистров;
	
КонецФункции // ПолучитьСписокРегистровКонфигурации()

// Возвращает таблицу значений, содержащую описание
// регистров бухгалтерии и регистров накопления, содержащихся в справочнике
// "Виды реквизитов движений".
// 
// Возвращаемое значение:
//   <ТаблицаЗначения>   - описание регистров в справочнике "Виды реквизитов движений".
// 		- <ИмяРегистра>	 - Строка. Имя регистра.
//      - <ВидРегистра>	 - Строка. Тип регистра.
//      - <Синоним>	 	 - Строка. Синоним.
// 
Функция ПолучитьОписаниеРегистровСправочника() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	бит_ВидыРеквизитовДвижений.Ссылка,
	|	бит_ВидыРеквизитовДвижений.Наименование КАК Синоним,
	|	бит_ВидыРеквизитовДвижений.ВидРегистра,
	|	бит_ВидыРеквизитовДвижений.ИмяРегистра
	|ИЗ
	|	Справочник.бит_ВидыРеквизитовДвижений КАК бит_ВидыРеквизитовДвижений
	|ГДЕ
	|	бит_ВидыРеквизитовДвижений.ЭтоГруппа = ИСТИНА";
				   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСписокРегистровСправочника()

// Возвращает описание переданных в качестве параметров типов + описание типа "Строка(900)".
// 
// Параметры:
//  ТипДанныхСтрокаМассив  - "Строка" Или "Массив" типов или "ОписаниеТипов".
// 
// Возвращаемое значение:
//   Описание типов.
// 
Функция мхо_ОписаниеТипов(ТипДанныхСтрокаМассив) Экспорт

	МассивТипов = Новый Массив;
	КС 			= Новый КвалификаторыСтроки(900);
	КЧ			= Неопределено;
	КД          = Неопределено;
	
	Если ТипЗнч(ТипДанныхСтрокаМассив) = Тип("Строка") Тогда
		МассивТипов.Добавить(Тип(ТипДанныхСтрокаМассив));
	ИначеЕсли ТипЗнч(ТипДанныхСтрокаМассив) = Тип("Массив") Тогда
		МассивТипов = ТипДанныхСтрокаМассив;
	Иначе
		МассивТипов = ТипДанныхСтрокаМассив.Типы();
		КЧ 			= ТипДанныхСтрокаМассив.КвалификаторыЧисла;
		КД 			= ТипДанныхСтрокаМассив.КвалификаторыДаты;
	КонецЕсли;
	
	// В любом случае, добавим тип "Строка"
	МассивТипов.Добавить(Тип("Строка"));
	
	Если КЧ = Неопределено Тогда
		НовоеОписаниеТипов = Новый ОписаниеТипов(МассивТипов,, КС);
	Иначе // В качестве параметра было передано описание типов. Необходимо учесть его квалификаторы.
		НовоеОписаниеТипов = Новый ОписаниеТипов(МассивТипов, КД, КС, КЧ);
	КонецЕсли;

	Возврат НовоеОписаниеТипов;
	
КонецФункции // Мхо_ОписаниеТипов()

// Дополняет таблицу реквизитов движений предопределенными.
// 
// Параметры:
//  ТаблицаРеквизитов - Таблица значений.
// 
Процедура ДополнитьТаблицуПредопределеннымиРеквизитамиДвижений(ТаблицаРеквизитов) Экспорт

	ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "Таблица", "Таблица", мхо_ОписаниеТипов("Строка"), Ложь);
	
	// Условия существования движения
	Для жи = 1 По 3 Цикл
		ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "Условие" + Строка(жи), "Условие №" + Строка(жи), ОписаниеПроизвольногоТипа(), Ложь);
		ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "ВидСравнения" + Строка(жи), "Вид сравнения", Новый ОписаниеТипов("ПеречислениеСсылка.бит_ЛогическиеОператоры"), Ложь);
		ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "Значение" + Строка(жи), "Значение №" + Строка(жи), ОписаниеПроизвольногоТипа(), Ложь);
		ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "ОбъединениеСПоследующим" + Строка(жи), "и/или", Новый ОписаниеТипов("ПеречислениеСсылка.бит_ТипыОбъединенияУсловий"), Ложь);
	КонецЦикла;
	
	// Произвольное условие
	ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "ПроизвольноеУсловие", "Произвольное условие", мхо_ОписаниеТипов("Строка"), Ложь);

КонецПроцедуры // ДополнитьТаблицуПредопределеннымиРеквизитамиДвижений()

// Возвращает описание реквизитов движений для регистра бухгалтерии.
// 
// Параметры:
//  <ИмяРегистра>  - Строка. Имя регистра бухгалтерии.
// 
// Возвращаемое значение:
//   ТаблицаЗначений   - описание реквизитов:
//                       - ИмяРеквизита  - имя реквизита в коллекции метаданных.
//                       - Представление - синоним.
//                       - ТипыЗначений  - Описание типов возможных значений реквизита.
// 
Функция ПолучитьРеквизитыРегистраБухгалтерии(ИмяРегистра) Экспорт
	
	Если Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра) = Неопределено Тогда
		МетаданныеРегистр = Неопределено;	
	Иначе	
		МетаданныеРегистр = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	КонецЕсли; 
	
	ТаблицаРеквизитов = Неопределено;
	
	Если НЕ МетаданныеРегистр = Неопределено Тогда
		
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
		ТаблицаРеквизитов.Колонки.Добавить("Синоним");
		ТаблицаРеквизитов.Колонки.Добавить("Тип");
		ТаблицаРеквизитов.Колонки.Добавить("Использование");
		
		// Дополним сначала обязательными реквизитами для регистра бухгалтерии.
		ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "Период", "Период", мхо_ОписаниеТипов("Дата"));
		ДополнитьТаблицуПредопределеннымиРеквизитамиДвижений(ТаблицаРеквизитов);
		
		// Получим план счетов регистра бухгалтерии
		ПланСчетов = МетаданныеРегистр.ПланСчетов;
		
		// Определим, поддерживается ли корреспонденция счетов регистра бухгалтерии
		Если МетаданныеРегистр.Корреспонденция Тогда 	// Присутствуют реквизиты движения "СчетДт" и "СчетКт"
			ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "СчетДт", "Счет Дт", мхо_ОписаниеТипов("ПланСчетовСсылка." + ПланСчетов.Имя));
			ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "СчетКт", "Счет Кт", мхо_ОписаниеТипов("ПланСчетовСсылка." + ПланСчетов.Имя));
		Иначе											// Присутствует только реквизит движения	"Счет".
			ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "Счет", "Счет", мхо_ОписаниеТипов("ПланСчетовСсылка." + ПланСчетов.Имя));
		КонецЕсли;
		
		// Заполним сведения о субконто регистра бухгалтерии.
		МаксСубконто 	= ПланСчетов.МаксКоличествоСубконто;
		ОписаниеТипаПВХ = ПланСчетов.ВидыСубконто.Тип;
		
		Для жи = 1 По МаксСубконто Цикл
			
			// Определим, поддерживается ли корреспонденция счетов регистра бухгалтерии
			Если МетаданныеРегистр.Корреспонденция Тогда 	// Присутствуют реквизиты движения "СчетДт" и "СчетКт"
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "СубконтоДт" + Строка(жи), "СубконтоДт" + Строка(жи), мхо_ОписаниеТипов(ОписаниеТипаПВХ));
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "СубконтоКт" + Строка(жи), "СубконтоКт" + Строка(жи), мхо_ОписаниеТипов(ОписаниеТипаПВХ));
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "ИмяВидаСубконтоДт" + Строка(жи), "ИмяВидаСубконтоДт" + Строка(жи), мхо_ОписаниеТипов("Строка"), Ложь);
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "ИмяВидаСубконтоКт" + Строка(жи), "ИмяВидаСубконтоКт" + Строка(жи), мхо_ОписаниеТипов("Строка"), Ложь);
			Иначе											// Присутствует только реквизит движения	"Счет".
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "Субконто" + Строка(жи), "Субконто" + Строка(жи), мхо_ОписаниеТипов(ОписаниеТипаПВХ));
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "ИмяВидаСубконто" + Строка(жи), "ИмяВидаСубконто" + Строка(жи), мхо_ОписаниеТипов("Строка"), Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполним сведения об измерениях регистра бухгалтерии.
		Для Каждого Измерение Из МетаданныеРегистр.Измерения Цикл
			
			Если Измерение.Балансовый или не МетаданныеРегистр.Корреспонденция Тогда 	// У измерения не будет экземпляров "Дт" и "Кт".
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, Измерение.Имя, Измерение.Синоним, мхо_ОписаниеТипов(Измерение.Тип));
			Иначе																		// Имеются экземпляры "Дт" и "Кт"
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, Измерение.Имя + "Дт", Измерение.Синоним + " Дт", мхо_ОписаниеТипов(Измерение.Тип));
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, Измерение.Имя + "Кт", Измерение.Синоним + " Кт", мхо_ОписаниеТипов(Измерение.Тип));
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполним сведения о ресурсах регистра бухгалтерии.
		Для Каждого Ресурс Из МетаданныеРегистр.Ресурсы Цикл
			
			Если Ресурс.Балансовый или не МетаданныеРегистр.Корреспонденция Тогда 	// У ресурса не будет экземпляров "Дт" и "Кт".
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, Ресурс.Имя, Ресурс.Синоним, мхо_ОписаниеТипов(Ресурс.Тип));
			Иначе																	// Имеются экземпляры "Дт" и "Кт"
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, Ресурс.Имя + "Дт", Ресурс.Синоним + " Дт", мхо_ОписаниеТипов(Ресурс.Тип));
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, Ресурс.Имя + "Кт", Ресурс.Синоним + " Кт", мхо_ОписаниеТипов(Ресурс.Тип));
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполним сведения о реквизитах регистра бухгалтерии.
		Для Каждого Реквизит Из МетаданныеРегистр.Реквизиты Цикл
			ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, Реквизит.Имя, Реквизит.Синоним, мхо_ОписаниеТипов(Реквизит.Тип));
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции // ПолучитьРеквизитыРегистраБухгалтерии()

// Возвращает описание реквизитов движений для регистра накопления.
// 
// Параметры:
//  <ИмяРегистра>  - Строка. Имя регистра накопления.
// 
// Возвращаемое значение:
//   ТаблицаЗначений   - описание реквизитов:
//                       - ИмяРеквизита  - имя реквизита в коллекции метаданных.
//                       - Представление - синоним.
//                       - ТипыЗначений  - Описание типов возможных значений реквизита.
// 
Функция ПолучитьРеквизитыРегистраНакопления(ИмяРегистра) Экспорт

	Если Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		МетаданныеРегистр = Неопределено;
	Иначе	
		МетаданныеРегистр = Метаданные.РегистрыНакопления[ИмяРегистра];
	КонецЕсли; 
	
	ТаблицаРеквизитов = Неопределено;
	Если НЕ МетаданныеРегистр = Неопределено Тогда
		
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
		ТаблицаРеквизитов.Колонки.Добавить("Синоним");
		ТаблицаРеквизитов.Колонки.Добавить("Тип");
		ТаблицаРеквизитов.Колонки.Добавить("Использование");
		
		ТипЗнчПер = ТипЗнч(ВидДвиженияНакопления);
		
		// Дополним сначала обязательными реквизитами для регистра накопления.
		ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "Период"	, "Период", мхо_ОписаниеТипов("Дата"));
		ДополнитьТаблицуПредопределеннымиРеквизитамиДвижений(ТаблицаРеквизитов);
		
		// ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "ВидДвижения"	, 
		// "Вид движения", Новый ОписаниеТипов("ПеречислениеВидДвиженияНакопления"));
		// Если регистр оборотный - вида движений не будет.
		Если МетаданныеРегистр.ВидРегистра <> Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
			ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "ВидДвижения"	, "Вид движения", мхо_ОписаниеТипов("ПеречислениеСсылка.бит_ВидДвиженияНакопления"), Ложь);
		Иначе
			// Не добляем реквизита
		КонецЕсли;	
		
		
		// Заполним измерения, ресурсы и реквизиты
		
		МассивОбхода = Новый Массив;
		МассивОбхода.Добавить("Измерения");
		МассивОбхода.Добавить("Ресурсы");
		МассивОбхода.Добавить("Реквизиты");
		
		Для Каждого ЭлементОбхода Из МассивОбхода Цикл
			Для Каждого Реквизит Из МетаданныеРегистр[ЭлементОбхода] Цикл
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, Реквизит.Имя, Реквизит.Синоним, мхо_ОписаниеТипов(Реквизит.Тип));
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции // ПолучитьРеквизитыРегистраНакопления()

// Возвращает описание реквизитов движений для регистра сведений.
// 
// Параметры:
//  <ИмяРегистра>  - Строка. Имя регистра сведений.
// 
// Возвращаемое значение:
//   ТаблицаЗначений   - описание реквизитов:
//                       - ИмяРеквизита  - имя реквизита в коллекции метаданных.
//                       - Представление - синоним.
//                       - ТипыЗначений  - Описание типов возможных значений реквизита.
// 
Функция ПолучитьРеквизитыРегистраСведений(ИмяРегистра) Экспорт

	Если Метаданные.РегистрыСведений.Найти(ИмяРегистра) = Неопределено Тогда
		
		МетаданныеРегистр = Неопределено;		
		
	Иначе	

		МетаданныеРегистр = Метаданные.РегистрыСведений[ИмяРегистра];
		
	КонецЕсли; 
	
	ТаблицаРеквизитов = Неопределено;
	
	Если НЕ МетаданныеРегистр = Неопределено Тогда
		
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
		ТаблицаРеквизитов.Колонки.Добавить("Синоним");
		ТаблицаРеквизитов.Колонки.Добавить("Тип");
		ТаблицаРеквизитов.Колонки.Добавить("Использование");
		
		// Дополним сначала обязательными реквизитами для регистра сведений.
		Если МетаданныеРегистр.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, "Период"	, "Период", мхо_ОписаниеТипов("Дата"));
		КонецЕсли;
		
		ДополнитьТаблицуПредопределеннымиРеквизитамиДвижений(ТаблицаРеквизитов);
		
		// Заполним измерения, ресурсы и реквизиты
		
		МассивОбхода = Новый Массив;
		МассивОбхода.Добавить("Измерения");
		МассивОбхода.Добавить("Ресурсы");
		МассивОбхода.Добавить("Реквизиты");
		
		Для Каждого ЭлементОбхода Из МассивОбхода Цикл
			Для Каждого Реквизит Из МетаданныеРегистр[ЭлементОбхода] Цикл
				ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, Реквизит.Имя, Реквизит.Синоним, мхо_ОписаниеТипов(Реквизит.Тип));
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции // ПолучитьРеквизитыРегистраСведений()

// Формирует таблицу-сценарий обновления списка реквизитов. Производит сравнение двух таблиц.
// 
// Параметры:
//  <ТекущиеРеквизиты>  	- ТаблицаЗначений (Ссылка, Имя, Синоним, Тип)
//                 			Описание реквизитов в справочнике "Виды реквизитов движений".
//  <МетаданныеРеквизиты>  	- ТаблицаЗнаяений (Имя, Синоним, Тип)
//                 			Описание реквизитов регистра по данным метаданных конфигурации.
// 
// Возвращаемое значение:
//   ТаблицаЗначений (Ссылка, Имя, Синоним, Тип, Команда) - сценарий обновления состава реквизитов.
// 
Функция СформироватьСценарийОбновленияРеквизитов(ТекущиеРеквизиты, МетаданныеРеквизиты) Экспорт

	ТаблицаОбновления = ТекущиеРеквизиты.Скопировать();
	ТаблицаОбновления.Колонки.Добавить("Команда");
	ТаблицаОбновления.Колонки.Добавить("НаименованиеВРег");
	
	Для каждого СтрокаТаблицы Из ТаблицаОбновления Цикл
		СтрокаТаблицы.НаименованиеВРег = ВРег(СтрокаТаблицы.ИмяРеквизита);
	КонецЦикла; 
		
	Для Каждого РеквизитМетаданные Из МетаданныеРеквизиты Цикл
		// Будем искать по наименованию
		Существующий = ТаблицаОбновления.Найти(ВРег(РеквизитМетаданные.ИмяРеквизита), "НаименованиеВРег");
				
		Если Существующий = Неопределено Тогда
			НовыйРеквизит = ТаблицаОбновления.Добавить();
			НовыйРеквизит.ИмяРеквизита 		 = РеквизитМетаданные.ИмяРеквизита;
			НовыйРеквизит.Тип 				 = РеквизитМетаданные.Тип;
			НовыйРеквизит.Синоним 			 = РеквизитМетаданные.Синоним;
			НовыйРеквизит.УчаствуетВДвижении = РеквизитМетаданные.Использование;
			НовыйРеквизит.Команда			 = "Добавить";
		Иначе
			Если Существующий.Синоним <> РеквизитМетаданные.Синоним или Существующий.Тип <> РеквизитМетаданные.Тип или Существующий.УчаствуетВДвижении <> РеквизитМетаданные.Использование Тогда
				Существующий.Синоним			= РеквизитМетаданные.Синоним;
				Существующий.Тип				= РеквизитМетаданные.Тип;
				Существующий.Команда			= "Обновить";
				Существующий.УчаствуетВДвижении = РеквизитМетаданные.Использование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаОбновления;
	
КонецФункции // СформироватьСценарийОбновленияРеквизитов()

// Обновляет состав реквизитов для регистра в справочнике
// "Виды реквизитов движений".
// 
// Параметры:
//  <ОписаниеРегистра>  - Структура: 
//                                  - Ссылка - ссылка на группу справочника.
//                                  - ИмяРегистра 	- имя регистра из коллекции метаданных.
//                                  - ВидРегистра 	- вид регистра (регистр бухгалтерии, регистр накопления).
//                                  - Синоним		- синоним регистра.
// 
Процедура ОбновитьСоставРеквизитовРегистра(ОписаниеРегистра) Экспорт

	// Получим текущие реквизиты регистра
	ТекущиеРеквизиты = ПолучитьТекущиеРеквизитыРегистра(ОписаниеРегистра.Ссылка);
	// Алгоритм для определения реквизитов для регистра бухгалтерии и регистра накопления разные.
	Если ОписаниеРегистра.ВидРегистра = "РегистрыБухгалтерии" Тогда
		МетаданныеРеквизиты = ПолучитьРеквизитыРегистраБухгалтерии(ОписаниеРегистра.ИмяРегистра);
	ИначеЕсли ОписаниеРегистра.ВидРегистра = "РегистрыНакопления" Тогда
		МетаданныеРеквизиты = ПолучитьРеквизитыРегистраНакопления(ОписаниеРегистра.ИмяРегистра);
	ИначеЕсли ОписаниеРегистра.ВидРегистра = "РегистрыСведений" Тогда
		МетаданныеРеквизиты = ПолучитьРеквизитыРегистраСведений(ОписаниеРегистра.ИмяРегистра);	
	КонецЕсли;
	
	Если МетаданныеРеквизиты = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 	
	
	// Проверим соответствие текущих реквизитов метаданным.
	ТаблицаКоманд = СформироватьСценарийОбновленияРеквизитов(ТекущиеРеквизиты, МетаданныеРеквизиты);
	
	// Выполним сценарий
	Для Каждого Элемент Из ТаблицаКоманд Цикл
		
		Если Элемент.Команда = "Добавить" Тогда
			
			НовыйРеквизит = Справочники.бит_ВидыРеквизитовДвижений.СоздатьЭлемент();
			
			НовыйРеквизит.Родитель 				= ОписаниеРегистра.Ссылка;
			НовыйРеквизит.Наименование 			= Элемент.ИмяРеквизита;
			НовыйРеквизит.ИмяРегистра			= ОписаниеРегистра.ИмяРегистра;
			
		ИначеЕсли Элемент.Команда = "Обновить" Тогда	
			НовыйРеквизит = Элемент.Ссылка.ПолучитьОбъект();
		Иначе
			Продолжить;
		КонецЕсли;
		
		НовыйРеквизит.ТипыЗначений			= Новый ХранилищеЗначения(Элемент.Тип);
		НовыйРеквизит.ПредставлениеЭлемента = Элемент.Синоним;
		НовыйРеквизит.УчаствуетВДвижении 	= Элемент.УчаствуетВДвижении;
		
		Если ОписаниеРегистра.ВидРегистра = "РегистрыБухгалтерии" и Найти(НовыйРеквизит.Наименование, "Субконто") <> 0 Тогда
			НовыйРеквизит.Субконто 	= Истина;
		КонецЕсли;
		
		Если ОписаниеРегистра.ВидРегистра = "РегистрыБухгалтерии" и Найти(НовыйРеквизит.Наименование, "Счет") <> 0 Тогда
			НовыйРеквизит.Ведущий 	= Истина;
		КонецЕсли;
		
		НовыйРеквизит.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСоставРеквизитовРегистра()

// Обновляет состав реквизитов в справочнике "Виды реквизитов движений".
// 
// Параметры:
// 	<ОчищатьУдаленные> - Булево. Признак необходимости очистки справочника от
// 	реквизитов регистров, удаленных из конфигурации.
Процедура ОбновитьСоставРеквизитов(ОчищатьУдаленные = Ложь) Экспорт

	// Получим список регистров в справочнике
	ОписаниеРегистров = ПолучитьОписаниеРегистровСправочника();
	
	// Последовательно обновим состав реквизитов для каждого регистра.
	Для Каждого СтрокаОписаниеРегистра Из ОписаниеРегистров Цикл
		ОбновитьСоставРеквизитовРегистра(СтрокаОписаниеРегистра);
	КонецЦикла;

КонецПроцедуры // ОбновитьСоставРеквизитов()

// Обновляет состав справочника "Виды реквизитов движений"
// в соответствии с текущим составом метаданных конфигурации
// <ОчищатьУдаленные> - Булево. Признак необходимости очистки справочника от
// реквизитов регистров, удаленных из конфигурации.
Процедура ОбновитьСоставРеквизитовДвижений(ОчищатьУдаленные = Ложь) Экспорт

	ОбновитьСоставРегистров(ОчищатьУдаленные);
	ОбновитьСоставРеквизитов(ОчищатьУдаленные);
		
КонецПроцедуры // ОбновитьСоставРеквизитовДвижений()

// Обновляет состав регистров в справочнике "Виды реквизитов движений".
// 
// Параметры:
// 	<ОчищатьУдаленные> - Булево. Признак необходимости очистки справочника от
// 	реквизитов регистров, удаленных из конфигурации.
Процедура ОбновитьСоставРегистров(ОчищатьУдаленные = Ложь) Экспорт

	// Получим описание регистров системы
	ОписаниеРегистров = ПолучитьОписаниеРегистровКонфигурации();
	
	// Проверим, все ли регистры присутствуют в справочнике, если нет - добавим
	// Если присутствуют регистры, которые были удалены из конфигурации - при наличии
	// признака "ОчищатьУдаленные" - удалим их из справочника.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистрыКонфигурации", ОписаниеРегистров);
	Запрос.Текст = "ВЫБРАТЬ
	|	РегистрыКонфигурации.ИмяРегистра,
	|	РегистрыКонфигурации.ВидРегистра,
	|	РегистрыКонфигурации.Синоним
	|ПОМЕСТИТЬ РегистрыКонфигурации
	|ИЗ
	|	&РегистрыКонфигурации КАК РегистрыКонфигурации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.ИмяРегистраКонф,
	|	ТаблицаСоответствия.ВидРегистраКонф,
	|	ТаблицаСоответствия.СинонимКонф,
	|	ТаблицаСоответствия.Ссылка,
	|	ТаблицаСоответствия.Синоним,
	|	ТаблицаСоответствия.ВидРегистра,
	|	ТаблицаСоответствия.ИмяРегистра,
	|	ВЫБОР
	|		КОГДА ТаблицаСоответствия.ИмяРегистраКонф ЕСТЬ NULL 
	|			ТОГДА ""Удалить""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСоответствия.ИмяРегистра ЕСТЬ NULL 
	|					ТОГДА ""Добавить""
	|				ИНАЧЕ ""Обновить""
	|			КОНЕЦ
	|	КОНЕЦ КАК Действие
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрыКонфигурации.ИмяРегистра КАК ИмяРегистраКонф,
	|		РегистрыКонфигурации.ВидРегистра КАК ВидРегистраКонф,
	|		РегистрыКонфигурации.Синоним КАК СинонимКонф,
	|		РегистрыСправочника.Ссылка КАК Ссылка,
	|		РегистрыСправочника.Синоним КАК Синоним,
	|		РегистрыСправочника.ВидРегистра КАК ВидРегистра,
	|		РегистрыСправочника.ИмяРегистра КАК ИмяРегистра
	|	ИЗ
	|		РегистрыКонфигурации КАК РегистрыКонфигурации
	|			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				бит_ВидыРеквизитовДвижений.Ссылка КАК Ссылка,
	|				бит_ВидыРеквизитовДвижений.Наименование КАК Синоним,
	|				бит_ВидыРеквизитовДвижений.ВидРегистра КАК ВидРегистра,
	|				бит_ВидыРеквизитовДвижений.ИмяРегистра КАК ИмяРегистра
	|			ИЗ
	|				Справочник.бит_ВидыРеквизитовДвижений КАК бит_ВидыРеквизитовДвижений
	|			ГДЕ
	|				бит_ВидыРеквизитовДвижений.ЭтоГруппа = ИСТИНА) КАК РегистрыСправочника
	|			ПО РегистрыКонфигурации.ИмяРегистра = РегистрыСправочника.ИмяРегистра
	|				И РегистрыКонфигурации.ВидРегистра = РегистрыСправочника.ВидРегистра) КАК ТаблицаСоответствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистрыКонфигурации";
	
	ОписаниеРегистровСправочник = Запрос.Выполнить().Выбрать();
	
	// Приведем справочник в соответствии с результатом запроса.
	Пока ОписаниеРегистровСправочник.Следующий() Цикл
		
		Если ОписаниеРегистровСправочник.Действие = "Добавить" Тогда
			
			// Добавим новый регистр в справочник
			Дубль = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию(ОписаниеРегистровСправочник.СинонимКонф, Истина);			
			
			Если НЕ ЗначениеЗаполнено(Дубль) Тогда
				
				НовыйРегистр = Справочники.бит_ВидыРеквизитовДвижений.СоздатьГруппу();
				НовыйРегистр.Наименование 	= ОписаниеРегистровСправочник.СинонимКонф;
				НовыйРегистр.ВидРегистра 	= ОписаниеРегистровСправочник.ВидРегистраКонф;
				НовыйРегистр.ИмяРегистра 	= ОписаниеРегистровСправочник.ИмяРегистраКонф;
				
				бит_ОбщегоНазначения.ЗаписатьСправочник(НовыйРегистр,,"Ошибки");
				
			КонецЕсли; 
			
		ИначеЕсли ОписаниеРегистровСправочник.Действие = "Удалить" Тогда
			
			Если ОчищатьУдаленные Тогда
				// Удалим описание регистра и реквизиты, родителем которых он является.
				УдалитьОписаниеРегистра(ОписаниеРегистровСправочник.ИмяРегистра);
			КонецЕсли;
			
		Иначе // Обновление имеющейся информации
			// По сути, необходимо обновить только синоним, т.к. соединение в запросе по имени и виду регистра.
			ОбъектОбновление 				= ОписаниеРегистровСправочник.Ссылка.ПолучитьОбъект();
			ОбъектОбновление.Наименование 	= ОписаниеРегистровСправочник.СинонимКонф;
			бит_ОбщегоНазначения.ЗаписатьСправочник(ОбъектОбновление,,"Ошибки");			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры // ОбновитьСоставРегистров()

// Добавляет строку таблицы значенй и заполняет ее поля переданными значениями.
// 
Процедура ЗаполнитьСвойстваНовогоРеквизита(ТаблицаРеквизитов, ИмяРеквизита, Синоним, ТипРеквизита, Использование = Истина) Экспорт
	
	НовыйРеквизит = ТаблицаРеквизитов.Добавить();
	НовыйРеквизит.ИмяРеквизита 	= ИмяРеквизита;
	НовыйРеквизит.Синоним		= Синоним;
	НовыйРеквизит.Тип			= ТипРеквизита;
	НовыйРеквизит.Использование = Использование;
	
КонецПроцедуры

// Возвращает коллекцию метаданных по переданному типу.
// 
// Параметры:
//  МетаТип - ОписаниеТипов
// 
// Возвращаемое значение:
//   КоллекцияМетаданных
// 
Функция ПолучитьМетаданныеСсылкиПоТипу(МетаТип) Экспорт

	// Нужны только ссылки
	Если Найти(Строка(МетаТип), "ссылка:") = 0 или Найти(Строка(МетаТип), "Перечисление") > 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Приведенное = МетаТип.ПривестиЗначение();
	
	Если Приведенное = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Приведенное.Метаданные();
	
КонецФункции // ПолучитьМетаданныеСсылкиПоТипу()

// Возвращает Описание типов (Строка, Число, Булево, Дата, ЛюбаяСсылка).
// 
// Возвращаемое значение:
//   ОписаниеТипов
// 
Функция ОписаниеПроизвольногоТипа() Экспорт

	МассивТипов        = Новый Массив;
	
	КвЧисла  = Новый КвалификаторыЧисла(16, 3);
	КвСтроки = Новый КвалификаторыСтроки(500);
	КвДаты 	 = Новый КвалификаторыДаты();
	
	МассивТипов        = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Дата"));
	МассивТипов.Добавить(Тип("Булево"));
	
	ОписаниеТиповВсеСсылки = Новый ОписаниеТипов(Метаданные.ПараметрыСеанса.бит_мхо_ЛюбаяСсылка.Тип, МассивТипов,, КвЧисла, КвСтроки, КвДаты);
	
	Возврат ОписаниеТиповВсеСсылки;
	
КонецФункции // ОписаниеПроизвольногоТипа()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКодИнициализацииТаблицы(КодОбработчикаШаблонов, ИмяТаблицы, ШаблонСсылка)
	
	Если Найти(ИмяТаблицы, "$") = 0 и Найти(ИмяТаблицы, "()") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем в шаблоне код инициализации таблицы.
	Отбор = Новый Структура("ИмяТаблицы, ИнициализацияТаблицы", ИмяТаблицы, Истина);
	СтрокиОписанияТаблицы = ШаблонСсылка.НастройкиРеквизитов.НайтиСтроки(Отбор);
	
	Если СтрокиОписанияТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КодИнициализации = СтрокиОписанияТаблицы[0].КодИнициализации;
	
	Если СокрЛП(КодИнициализации) = "" Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтрокуКТексту(КодОбработчикаШаблонов, КодИнициализации);
	ДобавитьСтрокуКТексту(КодОбработчикаШаблонов, СтрЗаменить(СтрЗаменить(ИмяТаблицы, "$", ""), "()", "") + " = Результат;");
	
КонецПроцедуры

// Функция получает ссылку функции из строки вызова функции.
// 
Функция ПолучитьСсылкуФункцииИзСтрокиВызоваФункции(СтрокаВызоваФункции)
	
	Если Найти(СтрокаВызоваФункции, "(") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ПозКонецНаименования 	= Найти(СтрокаВызоваФункции, "(");
	ИмяФункции 				= Лев(СтрокаВызоваФункции, ПозКонецНаименования - 1);
	СсылкаФункции 			= Справочники.бит_ПользовательскиеФункции.НайтиПоНаименованию(СокрЛП(ИмяФункции));
	
	Возврат СсылкаФункции;
	
КонецФункции

// Функция получает строку исполнения функции.
// 
Функция ПолучитьСтрокуИсполненияФункции(СтрокаВызоваФункции, МассивПараметров)
	
	СтрокаИсполнения = "";
	// Получим ссылку на функцию из строки вызова функции.
	ФункцияСсылка = ПолучитьСсылкуФункцииИзСтрокиВызоваФункции(СтрокаВызоваФункции);
	СтрокаИсполнения = СтрокаИсполнения + "бит_МеханизмХозяйственныхОперацийСервер.ВыполнитьПользовательскуюФункцию(""" + ФункцияСсылка.Наименование + """";
	
	Для Каждого Параметр Из МассивПараметров Цикл
		СтрокаИсполнения = СтрокаИсполнения + ", " + Параметр;
	КонецЦикла;
	
	СтрокаИсполнения = СтрокаИсполнения + ")";
	Возврат СтрокаИсполнения;
	
КонецФункции 
 
// Функция получает строку вызова функции.
// 
Функция ПолучитьСтрокуВызоваФункции(СтрокаКода)
	
	НачалоПрефикса = Найти(СтрокаКода, "#П.");
	
	Если НачалоПрефикса = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	СтрокаСНачалаФункции = Прав(СтрокаКода, СтрДлина(СтрокаКода) - (НачалоПрефикса + 2));
	СтрокаВызоваФункции = "";
	ПозицияОткр = Найти(СтрокаСНачалаФункции, "(");
	
	ОткрытыхСкобок = 0;
	Если ПозицияОткр = 0 Тогда
		Возврат Неопределено;
	Иначе
		ОткрытыхСкобок = 1;
		СтрокаВызоваФункции = СтрокаВызоваФункции + Лев(СтрокаСНачалаФункции, ПозицияОткр);
		СтрокаСНачалаФункции = Сред(СтрокаСНачалаФункции, ПозицияОткр + 1);
	КонецЕсли;
	ПозицияЗакр = Найти(СтрокаСНачалаФункции, ")");
	ПозицияОткр = Найти(СтрокаСНачалаФункции, "(");
	Пока ОткрытыхСкобок > 0 И (ПозицияЗакр > 0 ИЛИ ПозицияОткр > 0) Цикл
		Если ПозицияОткр < ПозицияЗакр И ПозицияОткр > 0 Тогда
			ОткрытыхСкобок = ОткрытыхСкобок + 1;
			СтрокаВызоваФункции = СтрокаВызоваФункции + Лев(СтрокаСНачалаФункции, ПозицияОткр);
			СтрокаСНачалаФункции = Сред(СтрокаСНачалаФункции, ПозицияОткр + 1);
		ИначеЕсли ПозицияЗакр > 0 Тогда
			ОткрытыхСкобок = ОткрытыхСкобок - 1;
			СтрокаВызоваФункции = СтрокаВызоваФункции + Лев(СтрокаСНачалаФункции, ПозицияЗакр);
			СтрокаСНачалаФункции = Сред(СтрокаСНачалаФункции, ПозицияЗакр + 1);
		КонецЕсли;
		ПозицияЗакр = Найти(СтрокаСНачалаФункции, ")");
		ПозицияОткр = Найти(СтрокаСНачалаФункции, "(");
	КонецЦикла;
	
	Если НЕ ОткрытыхСкобок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат СтрокаВызоваФункции;

КонецФункции

// Функция получает массив параметров функции из строки вызова функции.
// 
Функция ПолучитьМассивПараметровФункцииИзСтрокиВызоваФункции(СтрокаВызоваФункции)
	
	НачПараметров = Найти(СтрокаВызоваФункции, "(");
	
	СтрокаПараметров = СокрЛП(Сред(СтрокаВызоваФункции, НачПараметров + 1));
	СтрокаПараметров = ?(СтрДлина(СтрокаПараметров) = 1,
	                                                 "",
	Лев(СтрокаПараметров, СтрДлина(СтрокаПараметров) - 1));
	
	МассивПараметров = Новый Массив;
	
	Если ПустаяСтрока(СтрокаПараметров) Тогда
		Возврат МассивПараметров;
	КонецЕсли;
	
	
	Пока НЕ ПустаяСтрока(СтрокаПараметров) Цикл
		
		СтрокаПараметра = "";
		ОткрытыхСкобок = 0;
		
		Пока Истина Цикл
			Символ = Лев(СтрокаПараметров, 1);
			Если СтрДлина(СтрокаПараметров) = 1 Тогда
				МассивПараметров.Добавить(СтрокаПараметра + Символ);
				СтрокаПараметров = Сред(СтрокаПараметров, 2);
				Прервать;
			ИначеЕсли Символ = "," Тогда
				Если ОткрытыхСкобок = 0 Тогда
					МассивПараметров.Добавить(СтрокаПараметра);
					СтрокаПараметров = Сред(СтрокаПараметров, 2);
					Прервать;
				Иначе
					СтрокаПараметра = СтрокаПараметра + Символ;
				КонецЕсли;
			ИначеЕсли Символ = "(" Тогда
				ОткрытыхСкобок = ОткрытыхСкобок + 1;
				СтрокаПараметра = СтрокаПараметра + Символ;
			ИначеЕсли Символ = ")" Тогда
				ОткрытыхСкобок = ОткрытыхСкобок - 1;
				СтрокаПараметра = СтрокаПараметра + Символ;
			Иначе
				СтрокаПараметра = СтрокаПараметра + Символ;
			КонецЕсли;
			СтрокаПараметров = Сред(СтрокаПараметров, 2);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивПараметров;

КонецФункции

// Интерпретирует значения некоторых "особых" типов.
// 
// Параметры:
//  ЗначениеРеквизита  - Значение реквизита
//  СтроковоеПредставлениеЗначения  - его строковое представление (заполняется самой функцией).
// 
// Возвращаемое значение:
//   Истина - интерпретирован, Ложь - нет.
// 
Функция ИнтерпретироватьЕслиПредопределенный(ЗначениеРеквизита, СтрокововеПредставлениеЗначения)
	
	// Проверим на интересующие нас типы
	Если ТипЗнч(ЗначениеРеквизита) = Тип("ПеречислениеСсылка.бит_ЛогическиеОператоры") Тогда
		СтрокововеПредставлениеЗначения = ПолучитьСтрокойСравнение(ЗначениеРеквизита);
		Возврат Истина;
	ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("ПеречислениеСсылка.бит_ТипыОбъединенияУсловий") Тогда	
		СтрокововеПредставлениеЗначения = ?(ЗначениеРеквизита = Перечисления.бит_ТипыОбъединенияУсловий.ЛогическоеСложение, " ИЛИ ", " И ");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь; // Интерпретации не было
	
КонецФункции // ИнтерпретироватьЕслиПредопределенный()

// Возвращает массив знаков препинаний, которыми может ограничиваться тег в тексте
// обработчика проведения.
Функция ПолучитьМассивЗнаковПрепинаний()
	
	Массив = Новый Массив;
	Массив.Добавить(",");
	Массив.Добавить(";");
	Массив.Добавить(" ");
	Массив.Добавить(".");
	Массив.Добавить(")");
	
	Возврат Массив;
	
КонецФункции

// Возвращает имя тега, без префикса.
// 
Функция ВычленитьТегПоПозицииПрефикса(ЗначениеРеквизита, ПозицияПрефикса)
	
	ПраваяЧасть = Прав(ЗначениеРеквизита, СтрДлина(ЗначениеРеквизита) - ПозицияПрефикса - 2);
	МассивЗнаков = ПолучитьМассивЗнаковПрепинаний();
	ТекЗнак 	= Неопределено;
	ТекПозиция 	= 10000;
	
	Для Каждого Знак Из МассивЗнаков Цикл
		ПретПоз = Найти(ПраваяЧасть, Знак);
		Если ПретПоз > 0 и ПретПоз < ТекПозиция Тогда
			ТекЗнак 	= Знак;
			ТекПозиция 	= ПретПоз;
		КонецЕсли;
	КонецЦикла;
	
	ТекПозиция = ?(ТекПозиция = 10000, СтрДлина(ПраваяЧасть) + 1, ТекПозиция);
	ИтогТег = Лев(ПраваяЧасть, ТекПозиция - 1);
	
	Возврат ИтогТег;
	
КонецФункции

// Функция проверяет наличие отступа в строке.
// 
Функция ВСтрокеЕстьОтступ(СтрокаКода)
	
	Отступ = 0;
	
	Если (Найти(СтрокаКода, "Если") > 0 и Найти(СтрокаКода, "КонецЕсли") = 0 и Найти(СтрокаКода, "ИначеЕсли") = 0) или (Найти(СтрокаКода, "Для") > 0 и (Найти(СтрокаКода, "// ") > 2 или Найти(СтрокаКода, "// ") = 0)) или Найти(СтрокаКода, "Пока") > 0  Тогда
		Отступ = 1;
		СтрокаКода = Символы.ПС + СтрокаКода;
	ИначеЕсли Найти(СтрокаКода, "КонецЕсли") > 0 или Найти(СтрокаКода, "КонецЦикла") > 0 Тогда
		Отступ = -1;
		СтрокаКода = СтрокаКода + Символы.ПС;
	КонецЕсли;	
	
	Возврат Отступ;
	
КонецФункции	

// Процедура добавляет отступ в строке.
// 
Процедура ДобавитьОтступ(СтрокаКода, Отступ)
	
	Если Отступ = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для жи = 1 По Отступ Цикл
		СтрокаКода = Символы.Таб + СтрокаКода;
	КонецЦикла;	
	
КонецПроцедуры	

// Функция возвращает шифт строки.
// 
Функция ШифтСтроки(СтрокаКода)
	
	Отступ = 0;
	
	Если Найти(СтрокаКода, "Иначе") > 0 или Найти(СтрокаКода, "ИначеЕсли") > 0 или Найти(СтрокаКода, "КонецЕсли") > 0 или Найти(СтрокаКода, "КонецЦикла") > 0 Тогда
		Отступ = -1;
	КонецЕсли;	
	
	Возврат Отступ;
	
КонецФункции	

// Процедура устанавливает значение "0" для зависимых ресурсов от основного ресурса регистра бухгалтерии.
//
// Параметры:
//  ИмяРегистра - Строка.
//  ТаблицаПроводок - ТаблицаЗначений.
//
Процедура ОтредактироватьСуммыРесурсовТаблицыПроводок(ИмяРегистра, ТаблицаПроводок)

	Если СтрНайти(ИмяРегистра, "Дополнительный") <> 0 Тогда
		
		Если бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(ИмяРегистра) Тогда
		
			Для Каждого Эл Из ТаблицаПроводок Цикл
				Эл.СуммаУпр = 0;
				Эл.СуммаРегл = 0;
			КонецЦикла;

		Иначе
			
			Для Каждого Эл Из ТаблицаПроводок Цикл
				Эл.СуммаРегл = 0;
			КонецЦикла;

		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяРегистра, "Бюджетирование") <> 0 Тогда

		Для Каждого Эл Из ТаблицаПроводок Цикл
			Эл.СуммаУпр = 0;
			Эл.СуммаРегл = 0;
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры // ОтредактироватьСуммыРесурсовТаблицыПроводок()
	
// Функция редактирует код обработчика в зависимости от регистра.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Результат - Строка.
//
Функция ПолучитьКодАлгоритмПередФормированиемСтроки(ИмяРегистра)

	КодОбработчика = "";
	
	Если СтрНайти(ИмяРегистра, "Дополнительный") <> 0 Тогда
		
		Если бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(ИмяРегистра) Тогда
		
			КодОбработчика = "мхо_ДокументОбъект.ВыполнитьРасчетСуммВТекущейСтроке(мхо_НовоеДвижение_" +ИмяРегистра+ ", мхо_ВалютаМСФО, мхо_НовоеДвижение_" +ИмяРегистра +".СуммаМУ, ""ИзменениеМУСуммы"");";
			
		Иначе
			
			КодОбработчика = "мхо_ДокументОбъект.ВыполнитьРасчетСуммВТекущейСтроке(мхо_НовоеДвижение_" +ИмяРегистра+ ", мхо_ВалютаУпр, мхо_НовоеДвижение_" +ИмяРегистра +".СуммаУпр, ""ИзменениеУпрСуммы"");";

		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяРегистра, "Бюджетирование") <> 0 Тогда

		КодОбработчика = "мхо_ДокументОбъект.ВыполнитьРасчетСуммВТекущейСтроке(мхо_НовоеДвижение_" +ИмяРегистра+ ", мхо_ВалютаСценарий, мхо_НовоеДвижение_" +ИмяРегистра +".СуммаСценарий);";
		
	КонецЕсли; 

	Возврат КодОбработчика;
	
КонецФункции // ПолучитьКодАлгоритмПередФормированиемСтроки()	

// Процедура выправляет код обработчика по имени регистра. 
//
// Параметры:
//  КодОбработчика - Строка.
//  ИмяРегистра - Строка.
//
Процедура ВыправитьКодОбработчикаОперацияУпр(КодОбработчика, ИмяРегистра)

	КодОбработчика = КодОбработчика + Символы.ПС + "мхо_Движения_"+ИмяРегистра+".Записать();"; 
	
КонецПроцедуры // ВыправитьКодОбработчикаОперацияУпр()

// Получает описание реквизитов регистра, которые в настоящее время содержаться в справочнике.
// "Виды реквизитов движений".
// 
// Параметры:
//  Регистр - ссылка на группу справочника "Виды реквизитов движений".
// 
// Возвращаемое значение:
//   <ТаблицаЗначений>   - описание реквизитов регистра (ИмяРеквизита, Тип, УчаствуетВДвижении, Синоним).
// 
Функция ПолучитьТекущиеРеквизитыРегистра(Регистр)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыРеквизитовДвижений.Ссылка КАК Ссылка,
	               |	ВидыРеквизитовДвижений.Наименование КАК ИмяРеквизита,
	               |	ВидыРеквизитовДвижений.ТипыЗначений КАК ТипХранилище,
	               |	ВидыРеквизитовДвижений.УчаствуетВДвижении КАК УчаствуетВДвижении,
	               |	ВидыРеквизитовДвижений.ПредставлениеЭлемента КАК Синоним
	               |ИЗ
	               |	Справочник.бит_ВидыРеквизитовДвижений КАК ВидыРеквизитовДвижений
	               |ГДЕ
	               |	ВидыРеквизитовДвижений.Родитель = &Регистр";
				   
	Запрос.УстановитьПараметр("Регистр", Регистр);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Извлечем ОписаниеТипов из хранилища
	Результат.Колонки.Добавить("Тип");
	
	Для Каждого Элемент Из Результат Цикл
		Элемент.Тип = Элемент.ТипХранилище.Получить();
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПолучитьТекущиеРеквизитыРегистра()

// Удаляет из справочника "Виды реквизитов движений" описание регистра
// и соответствующие ему реквизиты.
// 
// Параметры:
//  <ИмяРегистра>  - Строка - имя регистра в коллекции метаданных.
// 
Процедура УдалитьОписаниеРегистра(ИмяРегистра)

	РегистрРодитель = Неопределено;
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяРегистра", ИмяРегистра);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_ВидыРеквизитовДвижений.Ссылка КАК Родитель
	|ИЗ
	|	Справочник.бит_ВидыРеквизитовДвижений КАК бит_ВидыРеквизитовДвижений
	|ГДЕ
	|	бит_ВидыРеквизитовДвижений.ЭтоГруппа
	|	И бит_ВидыРеквизитовДвижений.ИмяРегистра = &ИмяРегистра";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РегистрРодитель = Выборка.Родитель;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(РегистрРодитель) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	// Удалим все элементы, родителем которых является найденная группа.
	ВыборкаУдаление = Справочники.бит_ВидыРеквизитовДвижений.Выбрать(РегистрРодитель);
	
	Пока ВыборкаУдаление.Следующий() Цикл
		ОбъектУдаление = ВыборкаУдаление.ПолучитьОбъект();
		ОбъектУдаление.ОбменДанными.Загрузка = Истина;		
		ОбъектУдаление.Удалить();
	КонецЦикла;

	РегистрРодительОбъект = РегистрРодитель.ПолучитьОбъект();
	РегистрРодительОбъект.ОбменДанными.Загрузка = Истина;	
	РегистрРодительОбъект.Удалить();
	
КонецПроцедуры // УдалитьОписаниеРегистра()

// Удаляет подчиненные переданной коллекции элементф формы.
// 
Процедура УдалитьПодчиненныеРеквизитыКоллекции(Форма, КоллекцияЭлементов)

	Если ТипЗнч(КоллекцияЭлементов) = Тип("ПолеФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоЭлементов = КоллекцияЭлементов.ПодчиненныеЭлементы.Количество();
	
	Для жи = 1 По ЧислоЭлементов Цикл
		
		УдалитьПодчиненныеРеквизитыКоллекции(Форма, КоллекцияЭлементов.ПодчиненныеЭлементы.Получить(ЧислоЭлементов - жи));
		Форма.Элементы.Удалить(КоллекцияЭлементов.ПодчиненныеЭлементы.Получить(ЧислоЭлементов - жи));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
