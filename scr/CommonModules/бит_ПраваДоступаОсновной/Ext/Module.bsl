
#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСПрофилямиДоступа

// Процедура добавляет ВидыДоступа БИТ.
//
// Параметры:
//  ВидыДоступа.
//
Процедура ЗаполнитьСвойстваВидовДоступа(ВидыДоступа) Экспорт

	Если НЕ Метаданные.Справочники.Найти("бит_мдм_ОписанияОбъектовОбмена") = Неопределено Тогда
		
		// Есть МДМ
		
		ВидДоступа = ВидыДоступа.Добавить();
		ВидДоступа.Имя           = "бит_мдм_ОписанияОбъектовОбмена";
		ВидДоступа.Представление = НСтр("ru = 'Описания объектов обмена (БИТ.ФИНАНС.MDM)'");
		ВидДоступа.ТипЗначений   = Тип("СправочникСсылка.бит_мдм_ОписанияОбъектовОбмена");
		
	КонецЕсли; 
	
	Если НЕ Метаданные.Справочники.Найти("бит_ВидыПроформ") = Неопределено Тогда
        
        ВидДоступа = ВидыДоступа.Добавить();
		ВидДоступа.Имя           = "бит_ВидыПроформ";
		ВидДоступа.Представление = НСтр("ru = 'Виды проформ (БИТ.ФИНАНС)'");
		ВидДоступа.ТипЗначений   = Тип("СправочникСсылка.бит_ВидыПроформ");
        
    КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет в типовые профили необходимые роли БИТ в БП. 
// И создает профили БИТ. 
// 
// Параметры:
//  ОписанияПрофилей - Массив.
// 
Процедура БП_ДоработатьОписаниеПоставляемыхПрофилей(ОписанияПрофилей) Экспорт
	            	
	// ----------------------------------------------------------------------
	// Доработка типовых профилей.
	
	ПрофильБухгалтер 	  = Неопределено;
	ПрофильТолькоПросмотр = Неопределено;
	
	Для каждого ОпТиповой Из ОписанияПрофилей Цикл
		
		Если ОпТиповой.Идентификатор = "ea55b08d-7d30-11e0-b9a7-20cf30c960bf" Тогда
			
			ПрофильБухгалтер = ОпТиповой;
			
			БП_СоздатьПрофилиБитНаОсновеБухгалтера(ОписанияПрофилей, ПрофильБухгалтер);
			
			// Бухгалтер.
			ПрофильБухгалтер.Роли.Добавить("бит_ФинансПользователь");
			ПрофильБухгалтер.Роли.Добавить("бит_БухгалтерДополнение");			
			
		ИначеЕсли ОпТиповой.Идентификатор = "62730c03-81d6-11e0-a42a-be487808c52b" Тогда
			
			// Главный бухгалтер			
			ОпТиповой.Роли.Добавить("бит_ФинансПользователь");
			ОпТиповой.Роли.Добавить("бит_БухгалтерДополнение");		
			
		ИначеЕсли ОпТиповой.Идентификатор = "45ce5549-ade3-11e0-9746-00179a3853da" Тогда
			
			ПрофильТолькоПросмотр = ОпТиповой;
			
			// Только просмотр			
			ОпТиповой.Роли.Добавить("бит_ФинансПользователь"); 		
			
		КонецЕсли; 
		
	КонецЦикла; // ОписанияПрофилей.		
	
	// ----------------------------------------------------------------------
	// Собственные профили БИТ.ФИНАНС.
	
	// Минимальный профиль, обеспечивающий запуск системы.
	МинимальныйПрофиль = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
	МинимальныйПрофиль.Роли.Добавить("БазовыеПраваБСП");
	МинимальныйПрофиль.Роли.Добавить("ЗапускAutomation");
	МинимальныйПрофиль.Роли.Добавить("ЗапускВебКлиента");
	МинимальныйПрофиль.Роли.Добавить("ЗапускВнешнегоСоединения");
	МинимальныйПрофиль.Роли.Добавить("ЗапускТолстогоКлиента");
	МинимальныйПрофиль.Роли.Добавить("ЗапускТонкогоКлиента");
	МинимальныйПрофиль.Роли.Добавить("СохранениеДанныхПользователя");
	МинимальныйПрофиль.Роли.Добавить("ЧтениеОбщейБухгалтерскойНСИ");
	МинимальныйПрофиль.Роли.Добавить("ЧтениеДанныхРегламентированнойОтчетности");
	МинимальныйПрофиль.Роли.Добавить("ЧтениеДанныхСотрудников");
	МинимальныйПрофиль.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	МинимальныйПрофиль.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	МинимальныйПрофиль.Роли.Добавить("ЧтениеВерсийОбъектов");
	
	// Исполнитель бюджетирования
	опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
	опНов.Идентификатор = "bfc79be0-1a63-4149-a224-d2a25c8739bd";
	опНов.Наименование  = "БИТ.Исполнитель бюджетирования";
	опНов.Роли.Добавить("бит_ФинансПользователь");
	опНов.Роли.Добавить("бит_ИспользованиеДополнительныхОтчетовИОбработок");				
	опНов.Роли.Добавить("бит_рлс_ИсполнительБюджетирования");
	опНов.Роли.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок");
	СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
	опНов.Описание =  НСтр("ru = 'Профиль  обеспечивает ввод объектов Бюджетирования. 
                            |В профиле реализовано разделение RLS по ЦФО, СтатьямОборотов, Проектам и Ответственным.'");
	ДобавитьВидыДоступа(опНов);
		
	ОписанияПрофилей.Добавить(опНов);
	
	// Казначей.
	опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
	опНов.Идентификатор = "3791868d-e683-4b79-8b79-6c335ea1699b";
	опНов.Наименование  = "БИТ.Казначей";
	опНов.Роли.Добавить("бит_ФинансПользователь");
	опНов.Роли.Добавить("бит_рлс_Казначей");
	опНов.Роли.Добавить("БазовыеПраваБП");
	опНов.Роли.Добавить("БазовыеПраваЗарплатаКадры");
	опНов.Роли.Добавить("ЧтениеДанныхБухгалтерскогоУчета");
	опНов.Роли.Добавить("ЧтениеПлановОбменаСМобильнымиПриложениями");
	опНов.Роли.Добавить("ДобавлениеИзменениеДокументовЗарплатаКадры");
	опНов.Роли.Добавить("ДобавлениеИзменениеДепонированнойЗарплаты");
	опНов.Роли.Добавить("ЧтениеНалоговИВзносов");
	опНов.Роли.Добавить("ЧтениеОрганизаций");
	опНов.Роли.Добавить("ЧтениеВыплаченнойЗарплаты");
	опНов.Роли.Добавить("ЧтениеОбменаСБанкамиПоЗачислениюЗарплаты");
	опНов.Роли.Добавить("ЧтениеЗарплатныхПроектов");
	СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
	опНов.Описание =  НСтр("ru = 'Профиль обеспечивает ввод основных документов Казначейства( Заявка на расходование денежных средств, 
	                            |Прогноз платежа, Планируемое поступление денежных среств). 
								|В профиле реализовано разделение на уровне записей RLS по ЦФО и СтатьямОборотов, Проектам и Ответственным. 
								|Имеет смысл только отдельное назначение данного профиля. Совместное использование с другими профилями/ролями может привести к 
								|увеличению области доступа и сделает бессмысленным использование разделения доступа на уровне записей в рамках данного профиля.'");
	ДобавитьВидыДоступа(опНов);
	ОписанияПрофилей.Добавить(опНов);
	
	// Исполнитель казначейства
	опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
	опНов.Идентификатор = "f1b65145-3842-4236-bc49-0ea51915f372";
	опНов.Наименование  = "БИТ.Исполнитель казначейства";
	опНов.Роли.Добавить("бит_ФинансПользователь");
	опНов.Роли.Добавить("бит_рлс_ИсполнительКазначейства");
	опНов.Роли.Добавить("ЧтениеВыплаченнойЗарплаты");
	опНов.Роли.Добавить("БазовыеПраваЗарплатаКадры");
	опНов.Роли.Добавить("ЧтениеОбменаСБанкамиПоЗачислениюЗарплаты");
	опНов.Роли.Добавить("ЧтениеЗарплатныхПроектов");
	опНов.Роли.Добавить("ЧтениеДанныхФизическихЛицЗарплатаКадры");
	СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
	опНов.Описание =  НСтр("ru = 'Профиль обеспечивает ввод основных документов Казначейства( Заявка на расходование денежных средств, 
	                            |Прогноз платежа, Планируемое поступление денежных среств). 
								|В профиле реализовано разделение на уровне записей RLS по ЦФО и СтатьямОборотов, Проектам и Ответственным. 
								|Имеет смысл только отдельное назначение данного профиля. Совместное использование с другими профилями/ролями может привести к 
								|увеличению области доступа и сделает бессмысленным использование разделения доступа на уровне записей в рамках данного профиля.'");
	ДобавитьВидыДоступа(опНов);
	ОписанияПрофилей.Добавить(опНов);
	                       	
	// Исполнитель по заявкам на затраты
	опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
	опНов.Идентификатор = "bc0aeeb6-75e3-4e9c-8962-4a6a3ac6470e";
	опНов.Наименование  = "БИТ.Исполнитель по заявкам на затраты";
	опНов.Роли.Добавить("ЧтениеСпискаФизическихЛиц");
	опНов.Роли.Добавить("бит_ФинансПользователь");
	опНов.Роли.Добавить("бит_рлс_ИсполнительЗаявкиНаЗатраты");
	СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);	
	опНов.Описание =  НСтр("ru = 'Профиль обеспечивает ввод документов «Заявка на затраты». В роли реализовано разделение на уровне записей RLS по ЦФО и Статьям оборотов, 
	                            |Проектам и Исполнителям. Имеет смысл только отдельное назначение данного профиля. Совместное использование с другими профилями/ролями может привести 
								|к увеличению области доступа и сделает бессмысленным использование разделения доступа на уровне записей в рамках данного профиля.'");
	ДобавитьВидыДоступа(опНов);
	ОписанияПрофилей.Добавить(опНов);	
	
	// Инициатор НСИ	
	МинимальныйПрофиль = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
	МинимальныйПрофиль.Роли.Добавить("БазовыеПраваБСП");
	МинимальныйПрофиль.Роли.Добавить("ЗапускAutomation");
	МинимальныйПрофиль.Роли.Добавить("ЗапускВебКлиента");
	МинимальныйПрофиль.Роли.Добавить("ЗапускВнешнегоСоединения");
	МинимальныйПрофиль.Роли.Добавить("ЗапускТолстогоКлиента");
	МинимальныйПрофиль.Роли.Добавить("ЗапускТонкогоКлиента");
	МинимальныйПрофиль.Роли.Добавить("ДобавлениеИзменениеОбщейБухгалтерскойНСИ");
	МинимальныйПрофиль.Роли.Добавить("ЧтениеДанныхРегламентированнойОтчетности");
	МинимальныйПрофиль.Роли.Добавить("ЧтениеДанныхСотрудников");
	МинимальныйПрофиль.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	МинимальныйПрофиль.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	
	опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
	опНов.Идентификатор = НРег("FA409C64-36BA-4C27-AFB3-4344A4E7E406");
	опНов.Наименование  = "БИТ.Инициатор изменения НСИ";
	опНов.Роли.Добавить("бит_ФинансПользователь");
	опНов.Роли.Добавить("бит_мдм_ИнициаторИзмененияНСИ");		
	СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
	опНов.Описание =  НСтр("ru = 'Профиль обеспечивает возможность ввода заявок на изменение/удаление элементов НСИ.'");
	опНов.ВидыДоступа.Добавить("бит_мдм_ОписанияОбъектовОбмена");
	
	ОписанияПрофилей.Добавить(опНов);
	
	// Исполнитель по заявкам на потребность
	опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
	опНов.Идентификатор = "6a6ba6dd-223c-4cce-be31-2688527180ab";
	опНов.Наименование  = "БИТ.Исполнитель по заявкам на потребность";
	опНов.Роли.Добавить("бит_ФинансПользователь");
	опНов.Роли.Добавить("бит_мто_ИсполнительПоЗаявкамНаПотребность");
	СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);	
	опНов.Описание =  НСтр("ru = 'Профиль обеспечивает ввод документов «Заявка на потребность».'");
	ДобавитьВидыДоступа(опНов);
	
	ОписанияПрофилей.Добавить(опНов);
	
КонецПроцедуры

// Процедура добавляет в типовые профили необходимые роли БИТ в УТ. 
// И создает профили БИТ. 
// 
// Параметры:
//  ОписанияПрофилей - Массив.
// 
Процедура УТ_ДоработатьОписаниеПоставляемыхПрофилей(ОписанияПрофилей) Экспорт
	            	
	// Доработка типовых профилей.
    
	ПрофильБухгалтер = Неопределено;
    ИмяПрофиля = "Бухгалтер";
	
	Для каждого ОпТиповой Из ОписанияПрофилей Цикл
		
		Если ОпТиповой.Идентификатор = Строка(Справочники.ПрофилиГруппДоступа[ИмяПрофиля].УникальныйИдентификатор()) Тогда
			
			ПрофильБухгалтер = ОпТиповой;
			
			УТ_СоздатьПрофилиБитНаОсновеБухгалтера(ОписанияПрофилей, ПрофильБухгалтер);
			
			// Бухгалтер.
			ПрофильБухгалтер.Роли.Добавить("бит_ФинансПользователь");
			ПрофильБухгалтер.Роли.Добавить("бит_БухгалтерДополнение");		 
			
		КонецЕсли;
		
	КонецЦикла; // ОписанияПрофилей.
	
КонецПроцедуры

// Процедура добавляет в типовые профили необходимые роли БИТ. 
// И создает профили БИТ. 
// 
// Параметры:
//  ОписанияПрофилей - Массив.
// 
Процедура ДоработатьОписаниеПоставляемыхПрофилей(ОписанияПрофилей) Экспорт
	            	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		БП_ДоработатьОписаниеПоставляемыхПрофилей(ОписанияПрофилей);
	ИначеЕсли бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда	
	 	УТ_ДоработатьОписаниеПоставляемыхПрофилей(ОписанияПрофилей);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФункцииОпределенияНаличияДоступа

// Функция проверяет включен ли механизм разделения прав на уровне базы.
// 
// Возвращаемое значение:
//  флМеханизмОтключен - Булево.
// 
Функция МеханизмОтключен() Экспорт

	флМеханизмОтключен = ПолучитьФункциональнуюОпцию("бит_ИспользоватьРазделениеДоступаНаУровнеБазы") = Ложь 
	                     ИЛИ РольДоступна("бит_АдминистраторПравДоступа")
						 ИЛИ Пользователи.ЭтоПолноправныйПользователь(, Истина)
	                     ИЛИ бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
	                              ,ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.ОтключитьМеханизмПравДоступаНаУровнеБазы);

	Возврат флМеханизмОтключен;
	
КонецФункции

// Процедура проверяет наличие прав доступа у данного пользователя на определенные действия над данным объектом
// перечень событий может быть передан в процедуру в виде структуры, либо может определяться автоматически, 
// в зависимости от вида и состояния объекта.
// 
// Параметры:
// ТекущийОбъект       - СправочникОбъект,ДокументОбъект.
// ТекущийПользователь - СправочникСсылка.Пользователи.
// РежимЗаписи         - РежимЗаписиДокумента.
// ТекущиеСобытия      - Структура - ключ: строка- имя события, значение: булево - доступность события.
// ДопПараметры        - Структура - Задел на будущее.
// 
Функция ПроверитьПраваДоступа(ТекущийОбъект
								 ,ТекущийПользователь
								 ,РежимЗаписи = Неопределено
								 ,ТекущиеСобытия = Неопределено
								 ,ДопПараметры = Неопределено) Экспорт
								 
	
								  
	Если МеханизмОтключен() Тогда	
		Возврат Новый Структура;	
	КонецЕсли;
	
	// Определим имя объекта и вид объекта.
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	ИмяОбъекта        = МетаданныеОбъекта.Имя;
	ВидОбъекта        = бит_ПраваДоступа.ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);	
	ИмяОбъектаПолное  = бит_ПраваДоступа.ПолучитьПолноеИмяОбъекта(ИмяОбъекта, ВидОбъекта);
	
	ТекущийОбъектДоступа = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ИмяОбъектаПолное);
    
    // Если объект не нашли, то это скорее всего внешний отчет или внешняя обработка.
	Если НЕ ЗначениеЗаполнено(ТекущийОбъектДоступа) Тогда
    	Возврат Новый Структура;	
	КонецЕсли; 
    
    // Не проверяем права, если у объекта поднят флаг "Отключено".
	Если ТекущийОбъектДоступа.Отключено Тогда
    	Возврат Новый Структура;	
	КонецЕсли; 
	
	// Если пользователь администратор прав доступа, то доступ к справочнику пользователи безусловный.
	Если ТекущийОбъектДоступа.ИмяОбъектаПолное = "Справочник.Пользователи" Тогда	
	    Если РольДоступна("бит_АдминистраторПравДоступа") Тогда		 
            Возврат Новый Структура;		 
        КонецЕсли; 	
	КонецЕсли; 
	
	// Не проверяем права для определенного перечня имен.
	МассивИсключений = бит_ПраваДоступа.СформироватьМассивИменИсключений();
	Если МассивИсключений.Найти(ИмяОбъекта) <> Неопределено Тогда
    	Возврат Новый Структура;	
	КонецЕсли;
	
	// В режиме загрузки не проверяем права.
	Если НЕ (ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Отчет 
		     ИЛИ ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Обработка) 
			И ТекущийОбъект.ОбменДанными.Загрузка Тогда
	    Возврат Новый Структура;	
	КонецЕсли; 		

	// Определим текущее события.
	Если ТекущиеСобытия = Неопределено Тогда
	     События = ОпределитьТекущиеСобытия(ТекущийОбъект, МетаданныеОбъекта, ВидОбъекта, РежимЗаписи);
	Иначе	
	     События = ТекущиеСобытия;
	КонецЕсли; 
	
	// Получим права по текущему объекту и пользователю.
	СтруктураПрав = ПолучитьПраваДоступа(МетаданныеОбъекта, ТекущийПользователь,ТекущийОбъект);
	
	Для каждого КлючИЗначение Из События Цикл
		События[КлючИЗначение.Ключ] = СтруктураПрав[КлючИЗначение.Ключ];
	КонецЦикла; 
	События.Вставить("ОбластиДоступа", СтруктураПрав.ОбластиДоступа);
	
	Возврат События;
	
КонецФункции	

// Функция получает все права пользователя на данный объект.
// 
// Параметры:
// МетаданныеОбъекта   - ОбъектМетаданных.
// ТекущийПользователь - СправочникСсылка.Пользователи.
//                 
Функция ПолучитьПраваДоступа(МетаданныеОбъекта, ТекущийПользователь, ТекущийОбъект) Экспорт

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("Редактирование"   ,Ложь);
	РезСтруктура.Вставить("Создание"         ,Ложь);
	РезСтруктура.Вставить("Копирование"      ,Ложь);
	РезСтруктура.Вставить("ПометкаНаУдаление",Ложь);
	РезСтруктура.Вставить("ПереносВГруппу"   ,Ложь);
	РезСтруктура.Вставить("Проведение"       ,Ложь);
	РезСтруктура.Вставить("ОтменаПроведения" ,Ложь);
	РезСтруктура.Вставить("Печать"           ,Ложь);
	РезСтруктура.Вставить("ОбластиДоступа"   ,Новый Массив);
									   
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	ВидОбъекта = бит_ПраваДоступа.ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);
	ИмяОбъектаПолное = бит_ПраваДоступа.ПолучитьПолноеИмяОбъекта(ИмяОбъекта,ВидОбъекта);
	
	// Получим области доступа для текущего объекта.
	Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник ИЛИ ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда
	  МассивОбластейДоступа = ПолучитьМассивОбластейДоступа(ТекущийОбъект,МетаданныеОбъекта,ИмяОбъектаПолное);
	Иначе	
	  МассивОбластейДоступа = Новый Массив;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СубъектДоступа"       ,ТекущийПользователь);
	Запрос.УстановитьПараметр("ИмяОбъектаПолное"     ,ИмяОбъектаПолное);
	Запрос.УстановитьПараметр("ВидОбъекта"           ,ВидОбъекта);
	Запрос.УстановитьПараметр("МассивОбластейДоступа",МассивОбластейДоступа);
	
	
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ГруппыПользователейСостав.Ссылка КАК СубъектДоступа
	                |ПОМЕСТИТЬ СубъектыДоступа
	                |ИЗ
	                |	Справочник.ГруппыПользователей.%ИмяТабЧасти% КАК ГруппыПользователейСостав
	                |ГДЕ
	                |	ГруппыПользователейСостав.Пользователь = &СубъектДоступа
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	&СубъектДоступа
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	бит_ОбъектыСистемы.Ссылка
	                |ПОМЕСТИТЬ ОбъектыДоступа
	                |ИЗ
	                |	Справочник.бит_ОбъектыСистемы КАК бит_ОбъектыСистемы
	                |ГДЕ
	                |	бит_ОбъектыСистемы.ИмяОбъектаПолное = &ИмяОбъектаПолное
	                |	И НЕ бит_ОбъектыСистемы.Отключено
	                |	И бит_ОбъектыСистемы.ВидОбъекта = &ВидОбъекта
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	бит_ПраваДоступа.ОбъектДоступа КАК ОбъектДоступа,
	                |	МАКСИМУМ(бит_ПраваДоступа.Редактирование) КАК Редактирование,
	                |	МАКСИМУМ(бит_ПраваДоступа.Создание) КАК Создание,
	                |	МАКСИМУМ(бит_ПраваДоступа.Копирование) КАК Копирование,
	                |	МАКСИМУМ(бит_ПраваДоступа.ПометкаНаУдаление) КАК ПометкаНаУдаление,
	                |	МАКСИМУМ(бит_ПраваДоступа.ПереносВГруппу) КАК ПереносВГруппу,
	                |	МАКСИМУМ(бит_ПраваДоступа.Проведение) КАК Проведение,
	                |	МАКСИМУМ(бит_ПраваДоступа.ОтменаПроведения) КАК ОтменаПроведения,
	                |	МАКСИМУМ(бит_ПраваДоступа.Печать) КАК Печать
	                |ИЗ
	                |	РегистрСведений.бит_ПраваДоступа КАК бит_ПраваДоступа
	                |ГДЕ
	                |	бит_ПраваДоступа.СубъектДоступа В
	                |			(ВЫБРАТЬ
	                |				СубъектыДоступа.СубъектДоступа
	                |			ИЗ
	                |				СубъектыДоступа КАК СубъектыДоступа)
	                |	И бит_ПраваДоступа.ОбъектДоступа В
	                |			(ВЫБРАТЬ
	                |				ОбъектыДоступа.Ссылка
	                |			ИЗ
	                |				ОбъектыДоступа КАК ОбъектыДоступа)
	                |	И бит_ПраваДоступа.ВидОбъекта = &ВидОбъекта
	                |    %УсловиеОбластиДоступа%					
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	бит_ПраваДоступа.ОбъектДоступа";
	
	
	Если МассивОбластейДоступа.Количество() = 0 Тогда		
		ТекстУсловиеОбластьДоступа = "И бит_ПраваДоступа.ОбластьДоступа = ЗНАЧЕНИЕ(Справочник.бит_ОбластиДоступа.ПустаяСсылка)";		
	Иначе			
		ТекстУсловиеОбластьДоступа = "И бит_ПраваДоступа.ОбластьДоступа В(&МассивОбластейДоступа) И НЕ бит_ПраваДоступа.ОбластьДоступа.Отключено";		
	КонецЕсли; 					   
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОбластиДоступа%", ТекстУсловиеОбластьДоступа);  
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТабЧасти%",бит_ОбщегоНазначения.ИмяТабЧастиГруппыПользователей()); 
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();	
	Если Выборка.Следующий() Тогда
		
		Для каждого КлючИЗначение Из РезСтруктура Цикл
			Если КлючИЗначение.Ключ = "ОбластиДоступа" Тогда
				Продолжить;
			КонецЕсли; 			
			РезСтруктура[КлючИЗначение.Ключ] = Выборка[КлючИЗначение.Ключ];
		КонецЦикла; 
		
    КонецЕсли; 
    
	РезСтруктура.ОбластиДоступа = МассивОбластейДоступа;
	
	Возврат РезСтруктура;	

КонецФункции

// Получает массив областей доступа, которым принадлежит текущий объект.
// 
// Параметры:
//  ТекущийОбъект      - ДокументОбъект, СправочникОбъект.
//  МетаданныеОбъекта  - ОбъектМетаданных.
//  ИмяОбъектаПолное   - Строка.
// 
// Возвращаемое значение:
//   Массив. 
// 
Функция ПолучитьМассивОбластейДоступа(ТекущийОбъект, МетаданныеОбъекта, ИмяОбъектаПолное) Экспорт

	МассивОбластейДоступа = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_ОбластиДоступа.Ссылка КАК ОбластьДоступа
	               |ИЗ
	               |	Справочник.бит_ОбластиДоступа КАК бит_ОбластиДоступа
	               |ГДЕ
	               |	(НЕ бит_ОбластиДоступа.ПометкаУдаления)
	               |	И бит_ОбластиДоступа.Владелец В
	               |			(ВЫБРАТЬ
	               |				бит_ОбъектыСистемы.Ссылка
	               |			ИЗ
	               |				Справочник.бит_ОбъектыСистемы КАК бит_ОбъектыСистемы
	               |			ГДЕ
	               |				бит_ОбъектыСистемы.ИмяОбъектаПолное = &ИмяОбъектаПолное
				   |                И НЕ бит_ОбъектыСистемы.Отключено)
	               |	И НЕ бит_ОбластиДоступа.Отключено";
				   
	Запрос.УстановитьПараметр("ИмяОбъектаПолное", ИмяОбъектаПолное);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ТабРеквизитов = бит_ПраваДоступа.СформироватьТаблицуРеквизитовОбъекта(ТекущийОбъект,МетаданныеОбъекта);
	КонецЕсли; 	
	
	Выборка = Результат.Выбрать();	
	Пока Выборка.Следующий() Цикл
	
		ОбластьДоступа = Выборка.ОбластьДоступа;
		СохраненнаяНастройка = ОбластьДоступа.НастройкиПостроителя.Получить();
		Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") И СохраненнаяНастройка.Свойство("Отбор") Тогда
		
			ПостроительЗапроса = Новый ПостроительЗапроса;
			ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабРеквизитов);
			
			Для каждого ЭлементОтбора Из СохраненнаяНастройка.Отбор Цикл
				Попытка
					ОписаниеЭлемента = ЭлементОтбора.ПутьКДанным;
					НовыйЭлОтбора    = ПостроительЗапроса.Отбор.Добавить(ОписаниеЭлемента);
					бит_ОбщегоНазначения.ЗаполнитьЭлементОтбора(ЭлементОтбора,НовыйЭлОтбора);
				Исключение
					бит_ОбщегоНазначения.бит_Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла; 
            
            ПостроительЗапроса.Выполнить();            
            Если Не ПостроительЗапроса.Результат.Пустой() Тогда
			
				МассивОбластейДоступа.Добавить(Выборка.ОбластьДоступа);
			
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЦикла; 
	
  Возврат МассивОбластейДоступа;
  
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает новое описание профиля групп доступа.
//  
// Возвращаемое значение:
//   Структура.
// 
Функция ПолучитьНовоеОписаниеПрофиляГруппДоступа()
	
	Результат = Неопределено;
	Модуль    = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
	Результат = Модуль.НовоеОписаниеПрофиляГруппДоступа();                

	Возврат Результат;
	
КонецФункции

// Процедура ыыполняет копирование ролей из описания одного профиля в другой.
// 
// Параметры:
//  Источник   - Структура.ОписаниеПрофиля.
//  Приемник   - Структура.ОписаниеПрофиля.
//  Исключения - Строка.
// 
Процедура СкопироватьРолиПрофиля(Источник, Приемник, Исключения  = "")
	
	МассивИсключений = бит_СтрокиКлиентСервер.РазложитьСтрокуВМассивПодстрок(Исключения, ";");
	
	Для каждого СтрРоль Из Источник.Роли Цикл
	
		Если МассивИсключений.Найти(СтрРоль) = Неопределено Тогда 		
			Приемник.Роли.Добавить(СтрРоль);  		
		КонецЕсли;         		
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет виды доступа профилю.
// 
// Параметры:
//  ОписаниеПрофиля - Структура.
// 
Процедура ДобавитьВидыДоступа(ОписаниеПрофиля)

	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");

КонецПроцедуры

// Процедура добавляет новые описания профилей на основе типового профиля "Бухгалтер" в БП.
// 
// Параметры:
//  ОписанияПрофилей - Структура.
//  ПрофильБухгалтер - Структура.
// 
Процедура БП_СоздатьПрофилиБитНаОсновеБухгалтера(ОписанияПрофилей, ПрофильБухгалтер)

	// Минимальный профиль, обеспечивающий возможность работы с типовыми механизмами.
	МинимальныйПрофиль = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
	МинимальныйПрофиль.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	МинимальныйПрофиль.Роли.Добавить("ЗапускВнешнегоСоединения");
	МинимальныйПрофиль.Роли.Добавить("ЗапускТолстогоКлиента");
	МинимальныйПрофиль.Роли.Добавить("ЧтениеВерсийОбъектов");
	
	// Профили на основе типового профиля бухгалтер.
	Если ТипЗнч(ПрофильБухгалтер) = Тип("Структура") Тогда
				        
		// Финансист полные права.
		опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
		опНов.Идентификатор = "f712fb91-6037-4a89-b61d-aa0202ad6f7d";
		опНов.Наименование  = "БИТ.Финансист(полные права)";
		опНов.Роли.Добавить("бит_ФинансПользователь");
		опНов.Роли.Добавить("бит_ФинансистПолныеПрава");
		опНов.Роли.Добавить("бит_ИспользованиеДополнительныхОтчетовИОбработок");
		опНов.Роли.Добавить("ЧтениеВыплаченнойЗарплаты");
		опНов.Роли.Добавить("БазовыеПраваЗарплатаКадры");
		опНов.Роли.Добавить("ЧтениеОбменаСБанкамиПоЗачислениюЗарплаты");
		опНов.Роли.Добавить("ЧтениеЗарплатныхПроектов");
		опНов.Роли.Добавить("бит_АдминистраторPowerBI");
		СкопироватьРолиПрофиля(ПрофильБухгалтер, опНов);
		СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
		опНов.Описание =  НСтр("ru = 'Профиль базируется на типовом профиле ""Бухгалтер"" и дополнительно обеспечивает полный доступ к объектам Казначейства и Бюджетирования.'");
		ОписанияПрофилей.Добавить(опНов);

		// Финансист с ограничением на уровне записей.
		опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
		опНов.Идентификатор = "4fdbc592-023b-47c5-8849-5fd5de605af8";
		опНов.Наименование  = "БИТ.Финансист(ограничения на уровне записей)";
		опНов.Роли.Добавить("бит_ФинансПользователь");
		опНов.Роли.Добавить("бит_ИспользованиеДополнительныхОтчетовИОбработок");				
		опНов.Роли.Добавить("бит_рлс_Финансист");
		опНов.Роли.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок");
		опНов.Роли.Добавить("ЧтениеВыплаченнойЗарплаты");
		опНов.Роли.Добавить("БазовыеПраваЗарплатаКадры");
		опНов.Роли.Добавить("ЧтениеОбменаСБанкамиПоЗачислениюЗарплаты");
		опНов.Роли.Добавить("ЧтениеЗарплатныхПроектов");
		СкопироватьРолиПрофиля(ПрофильБухгалтер, опНов);
		СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
		опНов.Описание =  НСтр("ru = 'Профиль базируется на типовом профиле ""Бухгалтер"" и дополнительно обеспечивает ввод 
                                |объектов Казначейства и Бюджетирования. В профиле реализовано разделение RLS по ЦФО, СтатьямОборотов и Проектам.'");
		ДобавитьВидыДоступа(опНов);
		ОписанияПрофилей.Добавить(опНов);

		// Финансист ЦФО. Ограничение на уровне записей только по ЦФО.
		опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
		опНов.Идентификатор = НРег("7C451A02-FFF0-47B9-8A95-BED1E717B089");
		опНов.Наименование  = "БИТ.Финансист ЦФО";
		опНов.Роли.Добавить("бит_ФинансПользователь");
		опНов.Роли.Добавить("бит_ИспользованиеДополнительныхОтчетовИОбработок");				
		опНов.Роли.Добавить("бит_рлс_ФинансистЦФО");
		опНов.Роли.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок");
		опНов.Роли.Добавить("ЧтениеВыплаченнойЗарплаты");
		опНов.Роли.Добавить("БазовыеПраваЗарплатаКадры");
		опНов.Роли.Добавить("ЧтениеОбменаСБанкамиПоЗачислениюЗарплаты");
		опНов.Роли.Добавить("ЧтениеЗарплатныхПроектов");
		СкопироватьРолиПрофиля(ПрофильБухгалтер, опНов);
		СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
		опНов.Описание =  НСтр("ru = 'Профиль базируется на типовом профиле ""Бухгалтер"" и дополнительно обеспечивает ввод 
		|объектов Казначейства и Бюджетирования. В профиле реализовано разделение RLS по ЦФО.'");
		ДобавитьВидыДоступа(опНов);
		ОписанияПрофилей.Добавить(опНов);		
		
		// МСФО - полные права.
		опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
		опНов.Идентификатор = "922b8c69-b10d-4418-8c2c-1a9c69946880";
		опНов.Наименование  = "БИТ.МСФО(полные права)";
		опНов.Роли.Добавить("бит_ФинансПользователь");
		опНов.Роли.Добавить("бит_ИспользованиеДополнительныхОтчетовИОбработок");				
		опНов.Роли.Добавить("бит_му_ПолныеПрава");
		опНов.Роли.Добавить("бит_УправлениеПроцессами");
		СкопироватьРолиПрофиля(ПрофильБухгалтер, опНов);
		СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
		опНов.Описание =  НСтр("ru = 'Профиль базируется на типовом профиле ""Бухгалтер"" и дополнительно обеспечивает полный доступ к объектам необходимым для настройки и ведения учета по МСФО'");
		ОписанияПрофилей.Добавить(опНов);		
		
		// Специалист МСФО. RLS по организации.
		опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
		опНов.Идентификатор = НРег("63BFB112-FDF3-491B-8DE3-DC2150088E26");
		опНов.Наименование  = "БИТ.Специалист МСФО";
		опНов.Роли.Добавить("бит_ФинансПользователь");
		опНов.Роли.Добавить("бит_ИспользованиеДополнительныхОтчетовИОбработок");				
		опНов.Роли.Добавить("бит_рлс_му_Специалист");
		опНов.Роли.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок");
		СкопироватьРолиПрофиля(ПрофильБухгалтер, опНов);
		СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
		опНов.Описание =  НСтр("ru = 'Профиль базируется на типовом профиле ""Бухгалтер"" и дополнительно обеспечивает доступ к объектам, необходимым 
		|для ведения учета по МСФО в рамках одной или нескольких организаций. В профиле реализовано разделение RLS по Организации.'");
		ДобавитьВидыДоступа(опНов);
		ОписанияПрофилей.Добавить(опНов);		
		
	КонецЕсли;	

КонецПроцедуры

// Процедура добавляет новые описания профилей на основе типового профиля "Бухгалтер" в БП.
// 
// Параметры:
//  ОписанияПрофилей - Структура.
//  ПрофильБухгалтер - Структура.
// 
Процедура УТ_СоздатьПрофилиБитНаОсновеБухгалтера(ОписанияПрофилей, ПрофильБухгалтер)

	// Минимальный профиль, обеспечивающий возможность работы с типовыми механизмами.
	МинимальныйПрофиль = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
	МинимальныйПрофиль.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	
	// Профили на основе типового профиля бухгалтер.
	Если ТипЗнч(ПрофильБухгалтер) = Тип("Структура") Тогда
				        
		// Финансист полные права.
		опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
		опНов.Идентификатор = "f712fb91-6037-4a89-b61d-aa0202ad6f7d";
		опНов.Наименование  = "БИТ.Финансист(полные права)";
		опНов.Роли.Добавить("бит_ФинансПользователь");
		опНов.Роли.Добавить("бит_ФинансистПолныеПрава");
		опНов.Роли.Добавить("бит_ИспользованиеДополнительныхОтчетовИОбработок");
		// BF-1699 Изменение кода. Начало. 29.11.2017{{
		опНов.Роли.Добавить("ЧтениеВерсийОбъектов");
		// Изменение кода. Конец. 29.11.2017}}
		опНов.Роли.Добавить("бит_АдминистраторPowerBI");
		СкопироватьРолиПрофиля(ПрофильБухгалтер, опНов);
		СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
		опНов.Описание =  НСтр("ru = 'Профиль базируется на типовом профиле ""Бухгалтер"" и дополнительно обеспечивает полный доступ к объектам Казначейства и Бюджетирования.'");
		ОписанияПрофилей.Добавить(опНов);

		// Финансист с ограничением на уровне записей.
		опНов = ПолучитьНовоеОписаниеПрофиляГруппДоступа();
		опНов.Идентификатор = "4fdbc592-023b-47c5-8849-5fd5de605af8";
		опНов.Наименование  = "БИТ.Финансист(ограничения на уровне записей)";
		опНов.Роли.Добавить("бит_ФинансПользователь");
		опНов.Роли.Добавить("бит_ИспользованиеДополнительныхОтчетовИОбработок");				
		опНов.Роли.Добавить("бит_рлс_Финансист");
		СкопироватьРолиПрофиля(ПрофильБухгалтер  , опНов);
		СкопироватьРолиПрофиля(МинимальныйПрофиль, опНов);
		опНов.Описание =  НСтр("ru = 'Профиль базируется на типовом профиле ""Бухгалтер"" и дополнительно обеспечивает ввод 
		|объектов Казначейства и Бюджетирования. В профиле реализовано разделение RLS по ЦФО, СтатьямОборотов.'");
		ДобавитьВидыДоступа(опНов);
		ОписанияПрофилей.Добавить(опНов);		
				
	КонецЕсли;	

КонецПроцедуры

// Процедура определяет перечень событий в зависимости от вида объекта и состояния объекта.
// 
// Параметры:
//  ТекущийОбъект     - СправочникСсылка, ДокументСсылка.
//  МетаданныеОбъекта - ОбъектМетаданных.
//  ВидОбъекта        - ПеречислениеСсылка.бит_ВидыОбъектовСистемы.
//  РежимЗаписи       - РежимЗаписиДокумента.
//                 
Функция ОпределитьТекущиеСобытия(ТекущийОбъект,МетаданныеОбъекта, ВидОбъекта, РежимЗаписи) 

	События = Новый Структура;
	
	Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник ИЛИ ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда
        
        // Общие события для справочника и документа.
		События.Вставить("Редактирование",Ложь);
		Если ТекущийОбъект.ЭтоНовый() Тогда
			События.Вставить("Создание",Ложь);
		КонецЕсли; 
		Если НЕ ТекущийОбъект.ЭтоНовый() И ТекущийОбъект.ПометкаУдаления <> ТекущийОбъект.Ссылка.ПометкаУдаления Тогда
			События.Вставить("ПометкаНаУдаление",Ложь);
		КонецЕсли;
		
		// Специфические события справочника.
		Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник И МетаданныеОбъекта.Иерархический Тогда
			Если ТекущийОбъект.Родитель <> ТекущийОбъект.Ссылка.Родитель Тогда
				События.Вставить("ПереносВГруппу",Ложь);
			КонецЕсли; 
		КонецЕсли; 
		
		// Специфические события документа.
		Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				События.Вставить("Проведение",Ложь);
			КонецЕсли; 
			Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				События.Вставить("ОтменаПроведения",Ложь);
			КонецЕсли; 
        КонецЕсли; 
        
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Отчет Тогда
		События.Вставить("Редактирование",Ложь);
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Обработка Тогда
		События.Вставить("Редактирование",Ложь);
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрСведений Тогда
		События.Вставить("Редактирование",Ложь);
	КонецЕсли; 

    Возврат События;
    
КонецФункции

#КонецОбласти
