Процедура ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, ПараметрКоманды, ВладелецФормы, ПараметрыПечати = Неопределено, ВнешнийИсточник) Экспорт
	
	//Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
	//	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(ПараметрКоманды, Тип("СтрокаГруппировкиДинамическогоСписка"));
	//КонецЕсли;
	
	// Проверим количество объектов
	Если НЕ ПроверитьКоличествоПереданныхОбъектов(ПараметрКоманды) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим ключ уникальности открываемой формы
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	ПараметрыОткрытия.ИмяМенеджераПечати = ИмяМенеджераПечати;
	ПараметрыОткрытия.ИменаМакетов		 = ИменаМакетов;
	ПараметрыОткрытия.ПараметрКоманды	 = ПараметрКоманды;
	ПараметрыОткрытия.ПараметрыПечати	 = ПараметрыПечати;
	
	//Начало_бит_БК_Магомедов_06.03.2012 
	Если ЗначениеЗаполнено(ВнешнийИсточник) Тогда 
		ПараметрыОткрытия.Вставить("ВнешнийИсточник",Истина);
		ПараметрыОткрытия.Вставить("ИсточникДанных", ВнешнийИсточник);
		ПараметрыИсточника = Новый Структура;
		ПараметрыИсточника.Вставить("БезопасныйРежим", Ложь);
		//Список макетов через запятую
		ПараметрыИсточника.Вставить("ИдентификаторКоманды","Макет");
		ПараметрыОткрытия.Вставить("ПараметрыИсточника",ПараметрыИсточника);
	КонецЕсли;
	//Конец_бит_БК_Магомедов_06.03.2012 
	
	// Откроем форму печати документов
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументовУправляемая", ПараметрыОткрытия, ВладелецФормы, КлючУникальности);
	
КонецПроцедуры
// Перед выполнение команды печати проверить, был ли передан хотя бы один объект, так как
// для команд с множественным режимом использования может быть передан пустой массив.
Функция ПроверитьКоличествоПереданныхОбъектов(ПараметрКоманды)
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////
//РАБОТА С ПОЧТОЙ,

//создать новое сообщение из 1С в MS Outlook
Процедура СоздатьНовоеСообщениеАУТЛУК(СписокВложений, Параметры) Экспорт
	//приложение
	Попытка		
		OutlookApp = Новый COMОбъект("Outlook.Application");		
	Исключение
		Предупреждение("Не удалось создать приложение Outlook.Application !"); 		
		Возврат;		
	КонецПопытки;
	
	message = OutlookApp.CreateItem(0);
	
	message.Subject = Параметры.Заголовок;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-07 (#2879)
	//message.Body = Параметры.Текст;
	//Заменено на:
	Если Параметры.Свойство("ТипТекстаСообщения") И
		 Параметры.ТипТекстаСообщения = Строка(ТипТекстаПочтовогоСообщения.HTML) 
	Тогда 
		message.HTMLBody = Параметры.Текст;
	Иначе 
		message.Body = Параметры.Текст;		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-07 (#2879)
		
	//               Подпись
	message.To = Параметры.Адрес;
	
	Для каждого Файл Из СписокВложений Цикл
		
		message.Attachments.Add(Файл.Значение,1,1,Файл.Представление );
		
	КонецЦикла; 		
	
	ПоказатьПередОтправкой = Истина;
	Если ПоказатьПередОтправкой тогда
		Попытка
			message.Display(-1);
		исключение
		КонецПопытки;
	иначе
		message.Send();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//ИменаТабДокументов - список значений, где значение = табличный документ, представление = Имя Табличного документа
//ОбъектыПечати - список значений, где значение и представление = Имя документа 
Функция ПолучитьСписокВложений(ИменаТабДокументов, ОбъектыПечати) Экспорт
	//здесь можно настроить выбор формата файла
	//Результат = ОткрытьФормуМодально("ОбщаяФорма.НастройкаПечатныхФормПередОтправкой");
	Результат = Новый Структура;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-29 (#3754)
	//Результат.Вставить("ФорматHTML",    Истина);
	//Заменено на:
	Результат.Вставить("ФорматPDF" ,    Истина);
	Результат.Вставить("ФорматHTML",    Ложь);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-29 (#3754)
	Результат.Вставить("ФорматMXL",    Ложь);
	Результат.Вставить("ФорматXLS",    Ложь);
	//Если ТипЗнч(Результат) <> Тип("Структура") Тогда
	//	Возврат;
	//КонецЕсли;
	
	Вложения = Новый Соответствие;
	
	СписокФайлов = Новый СписокЗначений;
	
	
	#Если ВебКлиент Тогда
		ПоместитьТабличныеДокументыВоВременноеХранилище(СписокФайлов, ИменаТабДокументов,ОбъектыПечати);
	#Иначе
		ПоместитьТабличныеДокументыВФайлы(СписокФайлов, Результат, ИменаТабДокументов,ОбъектыПечати);
	#КонецЕсли
	
	
	НормализоватьИменаФайлов(СписокФайлов);
	
	Возврат СписокФайлов;
	
КонецФункции
&НаКлиенте
Функция ПолучитьСписокТиповФайловТабличныхДокументов(Результат)
	
	СписокТипов = Новый СписокЗначений;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-29 (#3754)
	Если Результат.ФорматPDF Тогда
		СписокТипов.Добавить(ТипФайлаТабличногоДокумента.PDF, "pdf");
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-29 (#3754)
	
	Если Результат.ФорматMXL Тогда
		СписокТипов.Добавить(ТипФайлаТабличногоДокумента.MXL, "mxl");
	КонецЕсли;
	
	Если Результат.ФорматHTML Тогда
		СписокТипов.Добавить(ТипФайлаТабличногоДокумента.HTML, "html");
	КонецЕсли;
	
	Если Результат.ФорматXLS Тогда
		СписокТипов.Добавить(ТипФайлаТабличногоДокумента.XLS, "xls");
	КонецЕсли;
	
	Возврат СписокТипов;	
	
КонецФункции
#Если НЕ ВебКлиент Тогда
&НаКлиенте
Процедура ПоместитьТабличныеДокументыВФайлы(СписокФайлов, Результат, ИменаТабДокументов,ОбъектыПечати)
		
		СписокТипов = ПолучитьСписокТиповФайловТабличныхДокументов(Результат);
		ДатаПредставление = Формат(ТекущаяДата(), "ДФ='yyyyMMdd HH:mm'");
		
		Для Каждого ТабДокумент Из ИменаТабДокументов Цикл
			//ТабДок = ЭтаФорма["Таб" + ТабДокумент.Значение];
			ТабДок = ТабДокумент.Значение;
			
			Для Каждого ТипФайла Из СписокТипов Цикл
				//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Начало (#3499)
				//ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ТипФайла.Представление);
				ИмяВременногоФайла = КаталогВременныхФайлов() + ТабДокумент.Представление + "." + ТипФайла.Представление;	
				//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Конец (#3499)
				
				ТабДок.Записать(ИмяВременногоФайла, ТипФайла.Значение);
				
				Если ОбъектыПечати.Количество() > 1 Тогда
					ИмяФайла = "[ИмяМакета] ([ДатаПредставление]).[Расширение]";
				Иначе
					ИмяФайла = "[Документ] ([ИмяМакета] [ДатаПредставление]).[Расширение]";
				КонецЕсли;
				
				ИмяФайла = СтрЗаменить(ИмяФайла, "[Документ]",			Строка(ОбъектыПечати[0].Значение));
				ИмяФайла = СтрЗаменить(ИмяФайла, "[ИмяМакета]",			ТабДокумент.Представление);
				ИмяФайла = СтрЗаменить(ИмяФайла, "[ДатаПредставление]",	ДатаПредставление);
				ИмяФайла = СтрЗаменить(ИмяФайла, "[Расширение]",		ТипФайла.Представление);
				
				СписокФайлов.Добавить(ИмяВременногоФайла, ИмяФайла);
			КонецЦикла;
		КонецЦикла;
		
	КонецПроцедуры
#КонецЕсли 
&НаКлиенте
Процедура НормализоватьИменаФайлов(СписокФайлов)
	
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Для Каждого ЭлементФайл Из СписокФайлов Цикл
		Для Индекс = 1 По СтрДлина(СтрИсключения) Цикл
			
			Символ = Сред(СтрИсключения, Индекс, 1);
			
			Если Найти(ЭлементФайл.Представление, Символ) > 0 Тогда
				ЭлементФайл.Представление = СтрЗаменить(ЭлементФайл.Представление, Символ, " ");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПараметрыАутентификацииПользователя() Экспорт
	СтруктураПараметров = ОткрытьФормуМодально("ОбщаяФорма.бит_БК_ОкноАутентификацииSMTP");
	Если СтруктураПараметров = Неопределено Тогда 
		Возврат Неопределено;
	иначе
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	
КонецФункции

/////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПО УПРАВЛЕНИЮ ПРИЛОЖЕНИЕМ EXCEL

// бит_DKravchenko Функция создает COMОбъект - "Excel.Application".
//
// Параметры:
//  Отказ 		- Булево, по умолчанию Ложь.
//  ЭтоЗагрузка - Булево, признак инициализации Excel для чтения, по умолчанию Ложь.
//
// Возвращаемое значение:
//   Excel - ComObject("Excel.Application"), в случае неудачи Неопределено.
//
Функция СоздатьПриложениеExcelКлиент(Отказ = Ложь, ЭтоЗагрузка = Ложь) Экспорт
	
	Попытка
		
		// Загрузка Microsoft Excel.
		бит_ОбменДанными_Excel.ВывестиСостояниеПользователю("Загрузка Microsoft Excel...");
		Excel = Новый COMОбъект("Excel.Application");
		
		Если ЭтоЗагрузка Тогда
			Excel.DisplayAlerts = False;
			Excel.AutomationSecurity = 3;
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
		//бит_ОбменДанными_Excel.СообщитьПользователю("Ошибка загрузки Microsoft Excel." + Символы.ПС + ОписаниеОшибки(), 
		//СтатусСообщения.Важное);
		бит_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка загрузки Microsoft Excel." + Символы.ПС + ОписаниеОшибки()); 
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Excel;
	
КонецФункции // СоздатьПриложениеExcel()

// бит_DKravchenko Функция открывает Excel файл.
//
// Параметры:
//  Excel	   - ComObject("Excel.Application").
//  ПутьКФайлу - Строка, полный путь где лежит файл.
//  Отказ 	   - Булево, по умолчанию Ложь.
//
// Возвращаемое значение:
//   ExcelФайл - ComObject, в случае неудачи Неопределено.
//
Функция ОткрытьExcelФайлКлиент(Excel, ПутьКФайлу, Отказ = Ложь, бит_БК_ОбновлятьСсылки = 0 ) Экспорт
	
	Попытка
		// Открытие файла Microsoft Excel
		бит_ОбменДанными_Excel.ВывестиСостояниеПользователю("Открытие файла Microsoft Excel...");
		ExcelФайл = Excel.WorkBooks.Open(ПутьКФайлу,бит_БК_ОбновлятьСсылки);
	Исключение
		Отказ = Истина;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
		//бит_ОбменДанными_Excel.СообщитьПользователю("Ошибка при открытии файла: " + ПутьКФайлу + "." + Символы.ПС + ОписаниеОшибки(), 
		//СтатусСообщения.Важное);
		бит_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при открытии файла: " + ПутьКФайлу + "." + Символы.ПС + ОписаниеОшибки());
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
		Возврат Неопределено;
	КонецПопытки;
	
	
	Excel.DisplayAlerts = False;
	Excel.AutomationSecurity = 3;
	
	Возврат ExcelФайл;
	
КонецФункции // ОткрытьExcelФайл()

// бит_DKravchenko Функция открывает Excel лист.
//
// Параметры:
//  ExcelФайл - ComObject.
//  ИмяЛиста  - Строка, имя листа для открытия.
//  Отказ 	  - Булево, по умолчанию Ложь.
//
//  СообщатьОбОшибке - Булево, по умолчанию Истина.
//  ДопСообщение     - Строка, текст дополнительного сообщения для вывода в случае неудачи,
//					   по умолчанию "".
//
// Возвращаемое значение:
//   ExcelЛист - ComObject, в случае неудачи Неопределено.
//
Функция ОткрытьExcelЛистКлиент(ExcelФайл, ИмяЛиста, Отказ = Ложь, 
	СообщатьОбОшибке = Истина, ДопСообщение = "") Экспорт
	
	// Указываем лист в книге для получения данных.
	Попытка
		// Открытие листа файла Microsoft Excel.
		бит_ОбменДанными_Excel.ВывестиСостояниеПользователю("Открытие листа файла Microsoft Excel...");
		ExcelЛист = ExcelФайл.Sheets(ИмяЛиста);
	Исключение
		
		Отказ = Истина;
		
		Если СообщатьОбОшибке Тогда
			
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
			//бит_ОбменДанными_Excel.СообщитьПользователю("Лист с именем """ + ИмяЛиста + """ в файле не найден!", СтатусСообщения.Важное);	
			бит_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Лист с именем """ + ИмяЛиста + """ в файле не найден!");	
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
			Если ПустаяСтрока(ДопСообщение) Тогда
				Сообщить("	" + ДопСообщение, СтатусСообщения.Важное);	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ExcelЛист;
	
КонецФункции // ОткрытьExcelЛист()

// бит_DKravchenko Функция закрывает открытый файл Excel.
//
// Параметры:
//  ExcelФайл - ComObject.
//
// Возвращаемое значение:
//  ФайлЗакрыт - Булево.
//
Функция ЗакрытьExcelФайлКлиент(ExcelФайл) Экспорт
	
	ФайлЗакрыт = Истина;
	
	Попытка 
		ExcelФайл.Close();
	Исключение                 
		ФайлЗакрыт = Ложь;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
		//бит_ОбменДанными_Excel.СообщитьПользователю("Не удалось закрыть файл источник!" + ОписаниеОшибки(), СтатусСообщения.Важное);
		бит_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось закрыть файл источник!" + ОписаниеОшибки());
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	КонецПопытки;
	
	Возврат ФайлЗакрыт;
	
КонецФункции // ЗакрытьExcelФайл()

// бит_DKravchenko Функция закрывает приложение Excel.
//
// Параметры:
//  Excel 		- ComObject("Excel.Application").
//  ЭтоЗагрузка - Булево, признат что Excel был открыт для чтения, по умолчанию Ложь.
//
// Возвращаемое значение:
//  ExcelЗакрыт - Булево.
//
Функция ЗакрытьПриложениеExcelКлиент(Excel, ЭтоЗагрузка = Ложь) Экспорт
	
	ExcelЗакрыт = Истина;
	
	Попытка 
		
		Если ЭтоЗагрузка Тогда
			Excel.DisplayAlerts = False;		
		КонецЕсли;
		
		Excel.Quit();
		
	Исключение                 
		ExcelЗакрыт = Ложь;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
		//бит_ОбменДанными_Excel.СообщитьПользователю("Не удалось закрыть приложение Excel!" + ОписаниеОшибки(), СтатусСообщения.Важное);
		бит_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось закрыть приложение Excel!" + ОписаниеОшибки(), СтатусСообщения.Важное);
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	КонецПопытки;
	
	Возврат ExcelЗакрыт;
	
КонецФункции // ЗакрытьПриложениеExcel()

//Возвращает таблицу значений
Функция ПолучитьДанныеExcelКлиент(ИмяФайла,ИмяЛиста, Отказ) Экспорт
	// Создадим приложение Excel.
	Excel = СоздатьПриложениеExcelКлиент(Отказ, Истина);
	
	Если Excel = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	// Откроем указанный файл.
	ОбновлятьСсылки = 0;
	ExcelФайл = ОткрытьExcelФайлКлиент(Excel, ИмяФайла, Отказ, ОбновлятьСсылки);
	
	Если ExcelФайл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ExcelЛист = ОткрытьExcelЛистКлиент(ExcelФайл, ИмяЛиста, Отказ, Истина); 
	
	Если ExcelЛист = Неопределено ИЛИ ExcelЛист = Неопределено Тогда
		// Закроем открытый файл.
		ФайлЗакрыт = ЗакрытьExcelФайлКлиент(ExcelФайл);
		
		// Закроем приложение Excel.
		ExcelЗакрыт = ЗакрытьПриложениеExcelКлиент(Excel, Истина);
		Возврат Неопределено;
	КонецЕсли; 
	
	// Получим количество колонок.
	КоличествоКолонок = ExcelЛист.Cells(1,1).SpecialCells(11).Column;
	// Получим количество строк.
	КоличествоСтрок = ExcelЛист.Cells(1,1).SpecialCells(11).Row;
	
	Arr = ExcelЛист.UsedRange.Value;
	
	// Закроем открытый файл.
	ФайлЗакрыт = ЗакрытьExcelФайлКлиент(ExcelФайл);
	
	// Закроем приложение Excel.
	ExcelЗакрыт = ЗакрытьПриложениеExcelКлиент(Excel, Истина);
	
	МассивКолонок = Arr.Выгрузить();
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("КоличествоКолонок", КоличествоКолонок);
	СтруктураДанных.Вставить("КоличествоСтрок", КоличествоСтрок);
	СтруктураДанных.Вставить("МассивКолонок", МассивКолонок);
    Возврат СтруктураДанных;

КонецФункции
	 
// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт

	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

//ижтиси, шадрин, 18.08.2015(
//ОК Калинин М. 130313  Отбор по объекту
Процедура НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(ЭлементФормы, Организация, СтандартнаяОбработка,Объект, ТекущийСпособОтражения = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ТекущийСпособОтражения);
	ФормаВыбора          = ПолучитьФорму("Справочник.СпособыОтраженияРасходовПоАмортизации.ФормаВыбора", ПараметрыФормы, ЭлементФормы);
	
	Если значениеЗаполнено(Организация) тогда
	// Оставим в выборе только записи с организацией из документа и те, в которых организация вообще не указана
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(Организация);
		СписокОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаВыбора.Список, "Организация", СписокОрганизаций, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	Если значениеЗаполнено(объект) тогда
	//Получим номера с Субконто2=объект
		// ОКЕЙ Цветков А.(СофтЛаб) Начало 2018-06-06 (#3014)
		//мномера = ОК_ОбщегоНазначения.ПолучитьКодМассив(Объект);
		
		//номера = Новый СписокЗначений;
		//номера.ЗагрузитьЗначения(мномера);
		номера = ОК_ОбщегоНазначения.ПолучитьСпособыОтраженияРасходовПоАмортизации(СписокОрганизаций, Объект); 
		// ОКЕЙ Цветков А.(СофтЛаб) Конец 2018-06-06 (#3014)
		// ОКЕЙ Наумов А.(СофтЛаб) Начало 2018-09-06 (#3014)
		//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаВыбора.Список, "Код", номера, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаВыбора.Список, "Ссылка", номера, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		// ОКЕЙ Наумов А.(СофтЛаб) Конец 2018-09-06 (#3014)
    КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСостоянияОС()
//ижтиси, шадрин, 18.08.2015)

// 1c-izhtc spawn 20.08.15 (

//бит_БК_Михайлова_Начало_24.11.11 - открываем форму ввода с видом операции "Финансовый план"
Процедура ОткрытьФинПлан() Экспорт
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан")));
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры
//бит_БК_Михайлова_Начало_24.11.11 - открываем список документов форма ввода с фильтром по виду операции "Финансовый план"
Процедура ОткрытьСписокФинПланов() Экспорт
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан")));
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры
//бит_БК_Михайлова_Начало_30.11.11 - открываем форму ввода с видом операции "Заявка (операционный)"
Процедура ОткрытьЗаявкаОпер() Экспорт
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный")));
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры
//бит_БК_Михайлова_Начало_30.11.11 - открываем список документов форма ввода с фильтром по виду операции "Заявка (операционный)"
Процедура ОткрытьСписокЗаявокОпер() Экспорт
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный")));
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры
//бит_БК_Михайлова_Начало_02.12.11 - открываем список документов форма ввода с фильтром по виду операции "Заявка (инвестиционный)"
Процедура ОткрытьСписокЗаявокИнвест() Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный"));
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидОперации", СписокЗначений));
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры
//бит_БК_Михайлова_Начало_02.12.11 - открываем форму ввода с видом операции "Заявка (инвестиционный)"
Процедура ОткрытьЗаявкаИнвест() Экспорт
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный")));
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры
//бит_БК_Михайлова_Начало_02.12.11 - открываем список документов форма ввода с фильтром по виду операции "Контракт"
Процедура ОткрытьСписокКонтрактов() Экспорт
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт")));
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры
//бит_БК_Михайлова_Начало_02.12.11 - открываем форму ввода с видом операции "Контракт"
Процедура ОткрытьКонтракт() Экспорт
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт")));
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры
//бит_БК_Михайлова_Начало_19.12.11 - открываем отчет "Выполнение плана"
Процедура ОткрытьОтчетВыполнениеПлана() Экспорт
	
	ОткрытьФорму("Отчет.бит_БК_ВыполнениеПлана.Форма");
	
КонецПроцедуры

// 1c-izhtc spawn 20.08.15 )

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-06 (#3043)
//ОКЕЙ Василенко В.В. (СофтЛаб) Начало 2021-10-28 (#4415)
//Процедура ЗаполнитьТЧПоУправленческимАналитикам(Форма, ИмяТЧ, ОчиститьТЧ = Истина) Экспорт
Процедура ЗаполнитьТЧПоУправленческимАналитикам(Форма, ИмяТЧ, ОчиститьТЧ = Истина, ОднаСтрока = Ложь) Экспорт
//ОКЕЙ Василенко В.В. (СофтЛаб) Конец 2021-10-28 (#4415)
	
	пТекстОшибки = "";
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-05-24 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)
	Если Не Форма.ИмяФормы = "Документ.АвансовыйОтчет.Форма.ФормаДокумента" Тогда
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-05-24 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)
		Если Не ЗначениеЗаполнено(Форма.Объект.Контрагент) Тогда 
			пТекстОшибки = "Контрагент";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Форма.Объект.ДоговорКонтрагента) Тогда 
			пТекстОшибки = пТекстОшибки + ?(ПустаяСтрока(пТекстОшибки),"",",") + "Договор контрагента";
		КонецЕсли;
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-05-24 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)
	КонецЕсли;
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-05-24 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)
	
	Если Не ПустаяСтрока(пТекстОшибки) Тогда 
		пТекстОшибки = "Для продолжения необходимо указать значения следующих полей документа: " + пТекстОшибки;
		ПоказатьПредупреждение(,пТекстОшибки,30);
		Возврат;
	КонецЕсли;	
	
	Если ОчиститьТЧ И 
		 Форма.Объект[ИмяТЧ].Количество()>0		 
	Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма"	  , Форма);
		ДопПараметры.Вставить("ИмяТЧ"	  , ИмяТЧ);
		//ОКЕЙ Василенко В.В. (СофтЛаб) Начало 2021-10-28 (#4415)
		ДопПараметры.Вставить("ОднаСтрока", ОднаСтрока);
		//ОКЕЙ Василенко В.В. (СофтЛаб) Конец 2021-10-28 (#4415)
				
		пОповещениеОтвет = Новый ОписаниеОповещения("ОтветНаВопросОбОчисткеПриЗаполненииАналитик",ЭтотОбъект,ДопПараметры);
	    ПоказатьВопрос(пОповещениеОтвет,НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;  
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) ИЛИ
		 Форма.Модифицированность
	Тогда 
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма"	  , Форма);
		ДопПараметры.Вставить("ИмяТЧ"	  , ИмяТЧ);
		ДопПараметры.Вставить("ОчиститьТЧ", ОчиститьТЧ);
		
		//ОКЕЙ Василенко В.В. (СофтЛаб) Начало 2021-10-28 (#4415)
		ДопПараметры.Вставить("ОднаСтрока", ОднаСтрока);
		Если ОднаСтрока
			И Форма.Элементы.Найти(ИмяТЧ) <> Неопределено
			И ЗначениеЗаполнено(Форма.Элементы[ИмяТЧ].ТекущаяСтрока) Тогда
			
			ТекущаяСтрокаТЧ = Форма.Элементы[ИмяТЧ].ТекущиеДанные;
			КлючевыеРеквизитыТекущейСтрокиТЧ = ПолучитьКлючевыеРеквизитыТекущейСтрокиТЧ(ИмяТЧ, ТекущаяСтрокаТЧ);
			Форма.фКэшЗначений.Вставить("КлючевыеРеквизитыТекущейСтрокиТЧ", КлючевыеРеквизитыТекущейСтрокиТЧ);
			
		КонецЕсли;
		//ОКЕЙ Василенко В.В. (СофтЛаб) Конец 2021-10-28 (#4415)
		
		пОповещениеОЗаписи = Новый ОписаниеОповещения("ПослеЗаписиДокументаПриЗаполненииПоУправленческимАналитикам",ЭтотОбъект,ДопПараметры);
				
		ПоказатьВопрос(пОповещениеОЗаписи, НСтр("ru = 'Для продолжения необходимо записать документ. Записать?'"),РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);		
		
		Возврат;
		
	КонецЕсли;
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Документ"  , Форма.Объект.Ссылка);
	ДопПараметры.Вставить("Форма"  	  , Форма);
	ДопПараметры.Вставить("ИмяТЧ"	  , ИмяТЧ);
	
	//ОКЕЙ Василенко В.В. (СофтЛаб) Начало 2021-10-28 (#4415)
	ДопПараметры.Вставить("ОднаСтрока", ОднаСтрока);
	Если ОднаСтрока 
		И Форма.фКэшЗначений.Свойство("КлючевыеРеквизитыТекущейСтрокиТЧ") 
		И Форма.фКэшЗначений.КлючевыеРеквизитыТекущейСтрокиТЧ.Свойство(ИмяТЧ)
		И Форма.Элементы.Найти(ИмяТЧ) <> Неопределено Тогда
		
		РеквизитыТекущейСтрокиТЧ = Форма.фКэшЗначений.КлючевыеРеквизитыТекущейСтрокиТЧ[ИмяТЧ];
		Форма.фКэшЗначений.Удалить("КлючевыеРеквизитыТекущейСтрокиТЧ");
		
		НайденныеСтроки = Форма.Объект[ИмяТЧ].НайтиСтроки(РеквизитыТекущейСтрокиТЧ);
		Если НайденныеСтроки.Количество() = 1 Тогда
			Форма.Элементы[ИмяТЧ].ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Обнаружены одинаковые строки'"));
			Возврат;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Строка не найдена'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	//ОКЕЙ Василенко В.В. (СофтЛаб) Конец 2021-10-28 (#4415)
	
	пОповещениеПослеВводаФВБ = Новый ОписаниеОповещения("ПослеВводаЗначенияФВБДляЗаполненияПоУпрАналитикам",ЭтотОбъект,ДопПараметры);
		
	пПараметрыОткрытия = Новый Структура;	
	пНастройкиОткрытия = Новый НастройкиКомпоновкиДанных;
	
	пЭлНастроек = пНастройкиОткрытия.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    пЭлНастроек.ЛевоеЗначение 	 = Новый ПолеКомпоновкиДанных("ВидОперации");
    пЭлНастроек.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
    пЭлНастроек.Использование 	 = Истина;
    пЭлНастроек.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	пСписокВидов = Новый СписокЗначений;
	пСписокВидов.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный"));
	пСписокВидов.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный"));
	пСписокВидов.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный"));
	
	пЭлНастроек.ПравоеЗначение 	 = пСписокВидов;
	
	пПараметрыОткрытия.Вставить("ФиксированныеНастройки", пНастройкиОткрытия);
		 
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаВыбора", пПараметрыОткрытия, Форма, , , , пОповещениеПослеВводаФВБ, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

//ОКЕЙ Василенко В.В. (СофтЛаб) Начало 2021-11-29 (#4415)
Функция ПолучитьКлючевыеРеквизитыТекущейСтрокиТЧ(ИмяТЧ, ТекущаяСтрокаТЧ)
	
	КлючевыеРеквизитыТекущейСтрокиТЧ = Новый Структура;
	РеквизитыТЧ = Новый Структура;
	МассивРеквизитовТЧ = Новый Массив;
	
	Если ИмяТЧ = "Товары" Тогда
		МассивРеквизитовТЧ.Добавить("Номенклатура");
		МассивРеквизитовТЧ.Добавить("Количество");
		МассивРеквизитовТЧ.Добавить("Цена");
		МассивРеквизитовТЧ.Добавить("Сумма");
		МассивРеквизитовТЧ.Добавить("СчетУчета");
		МассивРеквизитовТЧ.Добавить("ок_Период");
		МассивРеквизитовТЧ.Добавить("ок_ЦФО");
		МассивРеквизитовТЧ.Добавить("ок_СтатьяОборотов");
		МассивРеквизитовТЧ.Добавить("ок_Проект");
		МассивРеквизитовТЧ.Добавить("ок_Аналитика_2");
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		МассивРеквизитовТЧ.Добавить("Номенклатура");
		МассивРеквизитовТЧ.Добавить("Количество");
		МассивРеквизитовТЧ.Добавить("Цена");
		МассивРеквизитовТЧ.Добавить("Сумма");
		МассивРеквизитовТЧ.Добавить("СчетЗатрат");
		МассивРеквизитовТЧ.Добавить("Субконто1");
		МассивРеквизитовТЧ.Добавить("Субконто2");
		МассивРеквизитовТЧ.Добавить("Субконто3");
		МассивРеквизитовТЧ.Добавить("СчетЗатратНУ");
		МассивРеквизитовТЧ.Добавить("СубконтоНУ1");
		МассивРеквизитовТЧ.Добавить("СубконтоНУ2");
		МассивРеквизитовТЧ.Добавить("СубконтоНУ3");
		МассивРеквизитовТЧ.Добавить("ок_Период");
		МассивРеквизитовТЧ.Добавить("ок_ЦФО");
		МассивРеквизитовТЧ.Добавить("ок_СтатьяОборотов");
		МассивРеквизитовТЧ.Добавить("ок_Проект");
		МассивРеквизитовТЧ.Добавить("ок_Аналитика_2");
		МассивРеквизитовТЧ.Добавить("ок_ПодотчетноеЛицо");
	ИначеЕсли ИмяТЧ = "АгентскиеУслуги" Тогда
		МассивРеквизитовТЧ.Добавить("Номенклатура");
		МассивРеквизитовТЧ.Добавить("Количество");
		МассивРеквизитовТЧ.Добавить("Цена");
		МассивРеквизитовТЧ.Добавить("Сумма");
		МассивРеквизитовТЧ.Добавить("Контрагент");
		МассивРеквизитовТЧ.Добавить("ДоговорКонтрагента");
		МассивРеквизитовТЧ.Добавить("СчетРасчетов");
		МассивРеквизитовТЧ.Добавить("ок_Период");
		МассивРеквизитовТЧ.Добавить("ок_ЦФО");
		МассивРеквизитовТЧ.Добавить("ок_СтатьяОборотов");
		МассивРеквизитовТЧ.Добавить("ок_Проект");
		МассивРеквизитовТЧ.Добавить("ок_Аналитика_2");
	ИначеЕсли ИмяТЧ = "Оборудование" Тогда
		МассивРеквизитовТЧ.Добавить("Номенклатура");
		МассивРеквизитовТЧ.Добавить("Количество");
		МассивРеквизитовТЧ.Добавить("Цена");
		МассивРеквизитовТЧ.Добавить("Сумма");
		МассивРеквизитовТЧ.Добавить("СчетУчета");
		МассивРеквизитовТЧ.Добавить("ок_Период");
		МассивРеквизитовТЧ.Добавить("ок_ЦФО");
		МассивРеквизитовТЧ.Добавить("ок_СтатьяОборотов");
		МассивРеквизитовТЧ.Добавить("ок_Проект");
		МассивРеквизитовТЧ.Добавить("ок_Аналитика_2");
	ИначеЕсли ИмяТЧ = "ОбъектыСтроительства" Тогда
		МассивРеквизитовТЧ.Добавить("ОбъектСтроительства");
		МассивРеквизитовТЧ.Добавить("СтатьяЗатрат");
		МассивРеквизитовТЧ.Добавить("Сумма");
		МассивРеквизитовТЧ.Добавить("СчетУчета");
		МассивРеквизитовТЧ.Добавить("ок_Период");
		МассивРеквизитовТЧ.Добавить("ок_ЦФО");
		МассивРеквизитовТЧ.Добавить("ок_СтатьяОборотов");
		МассивРеквизитовТЧ.Добавить("ок_Проект");
		МассивРеквизитовТЧ.Добавить("ок_Аналитика_2");
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Табличная часть %1 не обрабатывается'"), ИмяТЧ));
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого ИмяРеквизитаТЧ Из МассивРеквизитовТЧ Цикл
		Если ТекущаяСтрокаТЧ.Свойство(ИмяРеквизитаТЧ) Тогда
			РеквизитыТЧ.Вставить(ИмяРеквизитаТЧ, ТекущаяСтрокаТЧ[ИмяРеквизитаТЧ]);
		КонецЕсли;
	КонецЦикла;
	
	КлючевыеРеквизитыТекущейСтрокиТЧ.Вставить(ИмяТЧ, РеквизитыТЧ);
	
	Возврат КлючевыеРеквизитыТекущейСтрокиТЧ;
	
КонецФункции
//ОКЕЙ Василенко В.В. (СофтЛаб) Конец 2021-11-29 (#4415)

Процедура ОтветНаВопросОбОчисткеПриЗаполненииАналитик(Результат, ДопПараметры) Экспорт
	
	Если Результат<>КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Форма.Объект[ДопПараметры.ИмяТЧ].Очистить();
	
	ЗаполнитьТЧПоУправленческимАналитикам(ДопПараметры.Форма, ДопПараметры.ИмяТЧ, Ложь);
	
КонецПроцедуры

Процедура ПослеВводаЗначенияФВБДляЗаполненияПоУпрАналитикам(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Вставить("Заявка"	,	Результат);
		
	пОповещениеОЗаполнении = Новый ОписаниеОповещения("ЗаполнитьТЧПоУправленческимАналитикам",ДопПараметры.Форма,ДопПараметры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заявка"	 ,	Результат);
	ПараметрыОткрытия.Вставить("Документ",	ДопПараметры.Документ);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-19 (#3051)
	Если ДопПараметры.Свойство("ОтборПоКонтрагентуДоговору") Тогда 
		ПараметрыОткрытия.Вставить("ОтборПоКонтрагентуДоговору"	, ДопПараметры.ОтборПоКонтрагентуДоговору);
	КонецЕсли;
	Если ДопПараметры.Свойство("ОтборОрганизация") Тогда 
		ПараметрыОткрытия.Вставить("ОтборОрганизация"	, ДопПараметры.ОтборОрганизация);
	КонецЕсли;		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-19 (#3051)
	//ОКЕЙ Василенко В.В. (СофтЛаб) Начало 2021-10-28 (#4415)
	Если ДопПараметры.Свойство("ОднаСтрока") Тогда 
		ПараметрыОткрытия.Вставить("ОднаСтрока", ДопПараметры.ОднаСтрока);
	КонецЕсли;
	//ОКЕЙ Василенко В.В. (СофтЛаб) Конец 2021-10-28 (#4415)
	ОткрытьФорму("ОбщаяФорма.ок_ОбработкаСтрокУправленческойАналитики",ПараметрыОткрытия,ДопПараметры.Форма,,,,пОповещениеОЗаполнении,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ПослеЗаписиДокументаПриЗаполненииПоУправленческимАналитикам(Результат, ДопПараметры) Экспорт
	
	Если Результат<>КодВозвратаДиалога.Да Тогда 
		
		Возврат;
		
	КонецЕсли;	
	
	Попытка
	
		ДопПараметры.Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	Исключение
		
		пТекстОшибки = НСтр("ru = 'Не удалось записать документ '") + ДопПараметры.Форма.Объект + " по причине:
					   |" + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки);
		Возврат;
		
	КонецПопытки;
	
	//ОКЕЙ Василенко В.В. (СофтЛаб) Начало 2021-11-02 (#4415)
	//ЗаполнитьТЧПоУправленческимАналитикам(ДопПараметры.Форма, ДопПараметры.ИмяТЧ, ДопПараметры.ОчиститьТЧ);
	ЗаполнитьТЧПоУправленческимАналитикам(ДопПараметры.Форма, ДопПараметры.ИмяТЧ, ДопПараметры.ОчиститьТЧ, ДопПараметры.ОднаСтрока);
	//ОКЕЙ Василенко В.В. (СофтЛаб) Конец 2021-11-02 (#4415)
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-06 (#3043)
