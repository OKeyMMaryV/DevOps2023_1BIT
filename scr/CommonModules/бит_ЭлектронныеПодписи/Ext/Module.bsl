
#Область СлужебныйПрограммныйИнтерфейс

// Процедура 
//
// Параметры:
//  Параметр1 - Строка.
//
Процедура ОбновитьСтатусПроверкиПодписи(РезультатПроверкиПодписи, ИДПодписи, ОбъектПодписи, СтатусПроверкиПодписи) Экспорт

	Выборка = ПолучитьЭлектронныеПодписи(ОбъектПодписи,,, ИДПодписи);
	Если Выборка.Следующий() Тогда
		Подпись = РегистрыСведений.бит_ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Подпись, Выборка);
		Подпись.Прочитать();
		Если Не Подпись.Выбран() Тогда
			ВызватьИсключение НСтр("ru = 'Подпись не найдена.'");
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Подпись не найдена.'");
	КонецЕсли;
	
	Если ТипЗнч(РезультатПроверкиПодписи) = Тип("Булево") Тогда
		Подпись.ПодписьВерна = РезультатПроверкиПодписи;
		Подпись.СертификатДействителен = РезультатПроверкиПодписи;
		
	ИначеЕсли ТипЗнч(РезультатПроверкиПодписи) = Тип("Структура") Тогда		
		Подпись.ПодписьВерна = Не РезультатПроверкиПодписи.Свойство("ТекстОшибкиПроверкиПодписи");
		Подпись.СертификатДействителен = Не РезультатПроверкиПодписи.Свойство("ТекстОшибкиПроверкиСертификата");
	КонецЕсли;
	
	Если ТипЗнч(РезультатПроверкиПодписи) = Тип("Структура") И РезультатПроверкиПодписи.Свойство("ТекстОшибкиПроверкиПодписи") Тогда
		Подпись.ТекстОшибкиПроверкиПодписи = РезультатПроверкиПодписи.ТекстОшибкиПроверкиПодписи;
	Иначе
		Подпись.ТекстОшибкиПроверкиПодписи = "";
	КонецЕсли;
	Если ТипЗнч(РезультатПроверкиПодписи) = Тип("Структура") И РезультатПроверкиПодписи.Свойство("ТекстОшибкиПроверкиСертификата") Тогда
		Подпись.ТекстОшибкиПроверкиСертификата = РезультатПроверкиПодписи.ТекстОшибкиПроверкиСертификата;
	Иначе
		Подпись.ТекстОшибкиПроверкиСертификата = "";
	КонецЕсли;

	Подпись.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
	
	Подпись.Записать();
	
	СтатусПроверкиПодписи = ПолучитьОбщийСтатусПроверкиПодписи(Подпись.ПодписьВерна, Подпись.СертификатДействителен, Подпись.ДатаПроверкиПодписи);
	
КонецПроцедуры // ОбновитьСтатусПроверкиПодписи()

// Возвращает подписи, принадлежащие объекту.
//
Функция ПолучитьЭлектронныеПодписи(ПодписанныйОбъектСсылка, УстановившийПодпись = Неопределено,
	ДатаПодписи = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭП.Объект,
		|	ЭП.ИД,
		|	ЭП.ДатаПодписи,
		|	ЭП.УстановившийПодпись,
		|	ЭП.Версия,
		|	ЭП.ДатаПроверкиПодписи,
		|	ЭП.ИмяФайлаПодписи,
		|	ЭП.Комментарий,
		|	ЭП.КомуВыданСертификат,
		|	ЭП.Отпечаток,
		|	ЭП.Подпись,
		|	ЭП.ПодписьВерна,
		|	ЭП.Сертификат,
		|	ЭП.СертификатДействителен,
		|	ЭП.ТекстОшибкиПроверкиПодписи,
		|	ЭП.ТекстОшибкиПроверкиСертификата
		|ИЗ
		|	РегистрСведений.бит_ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.Объект = &ОбъектПодписи";
		
	Запрос.Параметры.Вставить("ОбъектПодписи", ПодписанныйОбъектСсылка);
	Если УстановившийПодпись <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.УстановившийПодпись = &УстановившийПодпись";
		Запрос.Параметры.Вставить("УстановившийПодпись", УстановившийПодпись);
	КонецЕсли;
	Если ДатаПодписи <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.ДатаПодписи = &ДатаПодписи";
		Запрос.Параметры.Вставить("ДатаПодписи", ДатаПодписи);
	КонецЕсли;
	Если УникальныйИдентификатор <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.ИД = &УникальныйИдентификатор";
		Запрос.Параметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Формирует строку общего статуса проверки подписи
//
Функция ПолучитьОбщийСтатусПроверкиПодписи(Знач ПодписьВерна, Знач СертификатДействителен,
	Знач ДатаПроверкиПодписи) Экспорт
	
	ДатаПроверкиПодписи = Формат(ДатаПроверкиПодписи, "ДФ='dd.MM.yyyy HH:mm'");
	
	Если Не ЗначениеЗаполнено(ДатаПроверкиПодписи) Тогда
		Возврат НСтр("ru = 'Не проверена'");
	КонецЕсли;
	
	Если Не ПодписьВерна Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недействительна (%1)'"), ДатаПроверкиПодписи);
	КонецЕсли;
	
	Если Не СертификатДействителен Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Действительна, но нет доверия к сертификату (%1)'"),
			ДатаПроверкиПодписи);
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Действительна (%1)'"), ДатаПроверкиПодписи);
	
КонецФункции

// Процедура находит запись в регистре сведений "бит_ЭлектронныеПодписи" с отбором
// и очищает ее.
//
// Параметры:
//  ИД - Строка.
//  ОбъектПодписи - Объект.
//
Процедура ПроверитьУдалитьПодписьВизы(ИД, ОбъектПодписи) Экспорт

	НаборЗаписей = РегистрыСведений.бит_ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИД.Установить(ИД);
	НаборЗаписей.Отбор.Объект.Установить(ОбъектПодписи);
	НаборЗаписей.Прочитать(); 
	НаборЗаписей.Очистить(); 
	НаборЗаписей.Записать(Истина); 
			
КонецПроцедуры // ПроверитьУдалитьПодписьВизы()

// Возвращает первую найденную подпись к объекту, в ином случае возвращает Неопределено.
//
Функция ПолучитьЭлектроннуюПодпись(ПодписанныйОбъект,
	УстановившийПодпись = Неопределено, ДатаПодписи = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	Выборка = ПолучитьЭлектронныеПодписи(ПодписанныйОбъект.Ссылка, УстановившийПодпись, ДатаПодписи, УникальныйИдентификатор);
	Если Выборка.Следующий() Тогда
		Подпись = РегистрыСведений.бит_ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Подпись, Выборка);
		Подпись.Прочитать();
		Если Не Подпись.Выбран() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Подпись;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Формирует строку статуса проверки подписи
//
Функция ПолучитьСтатусПроверкиПодписи(Знач ДатаПроверкиПодписи, Знач ПодписьВерна,
	Знач ТекстОшибкиПроверкиПодписи) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаПроверкиПодписи) Тогда
		Возврат НСтр("ru = 'Не проверена'");
	КонецЕсли;
	
	Если ПодписьВерна Тогда
		Возврат НСтр("ru = 'Действительна'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибкиПроверкиПодписи) Тогда
		Возврат ТекстОшибкиПроверкиПодписи;
	КонецЕсли;
	
	Возврат НСтр("ru = 'Недействительна'");
	
КонецФункции

// Формирует строку статуса проверки сертификата
//
Функция ПолучитьСтатусПроверкиСертификата(Знач ДатаПроверкиПодписи, Знач СертификатДействителен,
	Знач ТекстОшибкиПроверкиСертификата) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаПроверкиПодписи)
		ИЛИ (
			ЗначениеЗаполнено(ДатаПроверкиПодписи)
			И Не СертификатДействителен
			И Не ЗначениеЗаполнено(ТекстОшибкиПроверкиСертификата)
		) Тогда
			
		Возврат НСтр("ru = 'Не проверен'");
	КонецЕсли;
	
	Если СертификатДействителен Тогда
		Возврат НСтр("ru = 'Действителен'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибкиПроверкиСертификата) Тогда
		Возврат ТекстОшибкиПроверкиСертификата;
	КонецЕсли;
	
	Возврат НСтр("ru = 'Недействителен'");
	
КонецФункции

// Сохраняет информацию о ЭП.
//
Процедура ЗанестиИнформациюОПодписи(ПараметрыПодписи) Экспорт
	
	ДатаПодписиИзФайла = ЭлектроннаяПодпись.ДатаПодписания(ПараметрыПодписи.СвойстваПодписи.Подпись);
	
	ПодписьЗагруженаИзФайла = (ПараметрыПодписи.СвойстваПодписи.ДатаПодписи = Неопределено);
	
	// Устанавливаем текущую дату сеанса в качестве даты создания подписи,
	// если последнюю не получилось извлечь из двоичных данных.
	Если ЗначениеЗаполнено(ДатаПодписиИзФайла) Тогда
		ДатаПодписи = ДатаПодписиИзФайла;
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыПодписи.СвойстваПодписи.ДатаПодписи) Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.бит_ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИД          = ПараметрыПодписи.ИД;
	МенеджерЗаписи.Виза        = ПараметрыПодписи.Виза;
	МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
	МенеджерЗаписи.Объект      = ПараметрыПодписи.Объект;
	МенеджерЗаписи.УстановившийПодпись = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Версия      = 3; // актуальная версия подписываемых данных на текущий момент
	МенеджерЗаписи.Комментарий = ПараметрыПодписи.СвойстваПодписи.Комментарий;
	МенеджерЗаписи.КомуВыданСертификат = ПараметрыПодписи.СвойстваПодписи.КомуВыданСертификат;
	МенеджерЗаписи.Отпечаток   = ПараметрыПодписи.СвойстваПодписи.Отпечаток;
	МенеджерЗаписи.Подпись     = Новый ХранилищеЗначения(ПараметрыПодписи.СвойстваПодписи.Подпись);
	МенеджерЗаписи.Сертификат  = Новый ХранилищеЗначения(ПараметрыПодписи.СвойстваПодписи.Сертификат); 

	МенеджерЗаписи.ДатаПроверкиПодписи    = ДатаПодписи;
	МенеджерЗаписи.ПодписьВерна           = Истина;
	МенеджерЗаписи.СертификатДействителен = Истина;
	
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
	КонецПопытки;
	
КонецПроцедуры

// Процедура записывает информацию о подписи в регистр сведений "бит_УстановленныеВизы". 
//
// Параметры:
//  ИД - Строка,
//  ОбъектПодписи - ДокументОбъект,
//  РезультатПроверкиПОдписи - Структура, Булево,
//  ТипСобытия - СТрока.
//
Процедура ЗаписатьДанныеПодписиВРегистрУстановленныеВизы(ИД, ОбъектПодписи, РезультатПроверкиПОдписи = Неопределено, ТипСобытия) Экспорт

	НаборЗаписей = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИД.Установить(ИД);
	НаборЗаписей.Отбор.Объект.Установить(ОбъектПодписи);
	НаборЗаписей.Прочитать();
	
	Для Каждого Набор ИЗ НаборЗаписей Цикл
		Если ТипСобытия = "Подпись" Тогда
			Набор.ПодписанЭП      = Истина;
			Набор.ЭПДействительна = Истина;
		Иначе
			Набор.ЭПДействительна = РезультатПроверкиПОдписи;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Если НаборЗаписей.ПроверитьЗаполнение() Тогда
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
		КонецПопытки;	
	КонецЕсли;	
	
КонецПроцедуры // ЗаписатьДанныеПодписиВРегистр()

// Функция определяет доступность функционала для работы с электронными подписями.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Результат - Булево.
//
Функция ДоступенФункционалЭП() Экспорт

	Результат = Ложь;
	
	Если Константы.ИспользоватьЭлектронныеПодписи.Получить() И КОнстанты.бит_ИспользоватьЭлектронныеПодписи.Получить() Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДоступенФункционалЭП()
 
#КонецОбласти
