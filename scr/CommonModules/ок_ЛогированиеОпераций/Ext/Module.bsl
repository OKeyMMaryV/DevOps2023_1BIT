
#Область ПрограммныйИнтерфейс

Процедура ОбновлениеЛогаОпераций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос	=	Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ок_НастройкиЛогированияОпераций.ИдентификаторОперации КАК ИдентификаторОперации
	|ИЗ
	|	РегистрСведений.ок_НастройкиЛогированияОпераций КАК ок_НастройкиЛогированияОпераций
	|ГДЕ
	|	ок_НастройкиЛогированияОпераций.Использовать
	|	И ок_НастройкиЛогированияОпераций.ВидОперации = ""РЗ""";
	Результат	=	Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(СостояниеФоновогоЗадания.Активно);
	МассивСостояний.Добавить(СостояниеФоновогоЗадания.Завершено);
	МассивСостояний.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
	МассивСостояний.Добавить(СостояниеФоновогоЗадания.Отменено);
	
	ТекущаяДата			=	ТекущаяДатаСеанса();
	
	РегламентноеЗадание	=	РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ок_ОбновлениеЛогаОпераций);
	ПериодПовтора		=	РегламентноеЗадание.Расписание.ПериодПовтораВТечениеДня*2;
	
	ПериодПовтора		=	?(ПериодПовтора = 0, 86400, ПериодПовтора);
	
	// Так как нет гарантии, что в логируемых ФЗ ПериодПовтораВТечениеДня не поменяется в процессе.
	Начало				=	ТекущаяДата - ПериодПовтора; 
	Конец				=	ТекущаяДата;
	
	ОбщаяТаблицаФоновыхЗаданий	=	НовыеСвойстваФоновыхЗаданий();
	
	МассивНаименованийРегламентныхЗаданий	=	Результат.Выгрузить().ВыгрузитьКолонку("ИдентификаторОперации");
	
	Для Каждого НаименованиеРегламентногоЗадания Из МассивНаименованийРегламентныхЗаданий Цикл 
		
		ОтборРегламентныхЗаданий = Новый Структура;
		ОтборРегламентныхЗаданий.Вставить("Метаданные", Метаданные.РегламентныеЗадания[НаименованиеРегламентногоЗадания]);
		
	    МассивРегламентныхЗаданий	=	РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРегламентныхЗаданий);
		
		Для Каждого РегламентноеЗадание Из МассивРегламентныхЗаданий Цикл
			
			ОтборФоновыхЗаданий = Новый Структура;
			ОтборФоновыхЗаданий.Вставить("ИдентификаторРегламентногоЗадания",	Строка(РегламентноеЗадание.УникальныйИдентификатор));
			ОтборФоновыхЗаданий.Вставить("Начало", 								Начало);
			ОтборФоновыхЗаданий.Вставить("Конец",  								Конец);
			ОтборФоновыхЗаданий.Вставить("Состояние",							МассивСостояний);
			
			ТаблицаФоновыхЗаданий = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(ОтборФоновыхЗаданий);
			
			Для Каждого СтрокаТабдицы Из ТаблицаФоновыхЗаданий Цикл 
				СтрокаОбщейТаблицы	=	ОбщаяТаблицаФоновыхЗаданий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбщейТаблицы, СтрокаТабдицы);
				СтрокаОбщейТаблицы.НаименованиеРегламентногоЗадания	=	НаименованиеРегламентногоЗадания;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФоновыхЗаданий",	ОбщаяТаблицаФоновыхЗаданий);
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ТаблицаФоновыхЗаданий.НаименованиеРегламентногоЗадания КАК НаименованиеРегламентногоЗадания,
	|	ТаблицаФоновыхЗаданий.ИдентификаторРегламентногоЗадания КАК ИдентификаторРегламентногоЗадания,
	|	ТаблицаФоновыхЗаданий.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаФоновыхЗаданий
	|ИЗ
	|	&ТаблицаФоновыхЗаданий КАК ТаблицаФоновыхЗаданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФоновыхЗаданий.ИдентификаторРегламентногоЗадания КАК ИдентификаторРегламентногоЗадания,
	|	ТаблицаФоновыхЗаданий.Идентификатор КАК Идентификатор,
	|	ТаблицаФоновыхЗаданий.НаименованиеРегламентногоЗадания КАК НаименованиеРегламентногоЗадания
	|ИЗ
	|	ТаблицаФоновыхЗаданий КАК ТаблицаФоновыхЗаданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_ЛогированиеОпераций КАК ок_ЛогированиеОпераций
	|		ПО ТаблицаФоновыхЗаданий.ИдентификаторРегламентногоЗадания = ок_ЛогированиеОпераций.ИдентификаторЗадания
	|			И ТаблицаФоновыхЗаданий.Идентификатор = ок_ЛогированиеОпераций.ИдентификаторПотока
	|			И ТаблицаФоновыхЗаданий.НаименованиеРегламентногоЗадания = ок_ЛогированиеОпераций.ИдентификаторОперации
	|ГДЕ
	|	(ок_ЛогированиеОпераций.ДатаНачала ЕСТЬ NULL
	|			ИЛИ ЕСТЬNULL(ок_ЛогированиеОпераций.Состояние, 0) = 4)";
	Результат	=	Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка	=	Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураОтбора	=	Новый Структура("НаименованиеРегламентногоЗадания, ИдентификаторРегламентногоЗадания, Идентификатор");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
			МассивСтрокОбщейТаблицы	=	ОбщаяТаблицаФоновыхЗаданий.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаОбщейТаблицы Из МассивСтрокОбщейТаблицы Цикл
				
				МенеджерЗаписи							=	РегистрыСведений.ок_ЛогированиеОпераций.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ИдентификаторОперации	=	СтрокаОбщейТаблицы.НаименованиеРегламентногоЗадания;
				МенеджерЗаписи.ИдентификаторЗадания		=	СтрокаОбщейТаблицы.ИдентификаторРегламентногоЗадания;
				МенеджерЗаписи.ИдентификаторПотока		=	СтрокаОбщейТаблицы.Идентификатор;
				
				МенеджерЗаписи.ДатаНачала				=	СтрокаОбщейТаблицы.Начало;
				МенеджерЗаписи.ДатаОкончания			=	СтрокаОбщейТаблицы.Конец;
				МенеджерЗаписи.Состояние				=	СостояниеФоновогоЗаданияЧислом(СтрокаОбщейТаблицы.Состояние);
				МенеджерЗаписи.ИнформацияОбОшибке		=	СтрокаОбщейТаблицы.ОписаниеИнформацииОбОшибке;
				МенеджерЗаписи.СообщенияПользователю	=	СтрСоединить(СтрокаОбщейТаблицы.СообщенияПользователю);
				МенеджерЗаписи.Записать();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДлительныеОперации() Экспорт
	
	СписокДлительныхОпераций	=	Новый СписокЗначений;
	СписокДлительныхОпераций.Добавить("ок_ПроведениеДокументов",					"Проведение документов (ОКЕЙ)"); // Для отладки.
	СписокДлительныхОпераций.Добавить("ок_УТ_ЗагрузкаДанных",						"Загрузка данных из УТ (ОКЕЙ)");
	СписокДлительныхОпераций.Добавить("ок_Кристалл_ЗагрузкаДанных",					"Загрузка данных из Кристалл (ОКЕЙ)");
	СписокДлительныхОпераций.Добавить("ок_DAX12_КассовыеОперации_ЗагрузкаДанных",	"Загрузка данных из DAX12 (Кассовые операции) (ОКЕЙ)");
	
	Возврат СписокДлительныхОпераций;
		
КонецФункции

Функция ПолучитьНастройкиЛогирования(ИдентификаторОперации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата	=	Новый Структура("Использовать, ЗаписыватьСообщенияПользователю", Ложь, Ложь);
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторОперации", ИдентификаторОперации);
	Запрос.Текст	=	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ок_НастройкиЛогированияОпераций.Использовать КАК Использовать,
	|	ок_НастройкиЛогированияОпераций.ЗаписыватьСообщенияПользователю КАК ЗаписыватьСообщенияПользователю
	|ИЗ
	|	РегистрСведений.ок_НастройкиЛогированияОпераций КАК ок_НастройкиЛогированияОпераций
	|ГДЕ
	|	ок_НастройкиЛогированияОпераций.ИдентификаторОперации = &ИдентификаторОперации";
	
	Результат	=	Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка	=	Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
		
КонецФункции

Функция ПолучитьЛогируемыеОперации() Экспорт
	
	СписокЛогируемыхОпераций	=	Новый СписокЗначений;
	
	Для Каждого РегламентноеЗадание Из Метаданные.РегламентныеЗадания Цикл
		
		Если РегламентноеЗадание.Имя = "ок_ОбновлениеЛогаОпераций" Тогда
			Продолжить;	
		КонецЕсли;
		
		СписокЛогируемыхОпераций.Добавить(РегламентноеЗадание.Имя, "РЗ: " + РегламентноеЗадание.Синоним);
		
	КонецЦикла;
	
	СписокДлительныхОпераций	=	ПолучитьДлительныеОперации();
	Для Каждого ДлительнаяОперация Из СписокДлительныхОпераций Цикл
		СписокЛогируемыхОпераций.Добавить(ДлительнаяОперация.Значение, "ДО: " + ДлительнаяОперация.Представление);		
	КонецЦикла;
	
	СписокЛогируемыхОпераций.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат СписокЛогируемыхОпераций;
	
КонецФункции

Процедура ЗаписастьЛогДО(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи	=	РегистрыСведений.ок_ЛогированиеОпераций.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Параметры);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ЗаписатьСообщенияПользователю(Текст, Параметры) Экспорт
	
	Если Параметры.ИспользоватьЛогирование И Параметры.ЗаписыватьСообщенияПользователю Тогда
	
		Параметры.ПараметрыЛогирования.СообщенияПользователю	=	Параметры.ПараметрыЛогирования.СообщенияПользователю 
																	+ ?(ЗначениеЗаполнено(Параметры.ПараметрыЛогирования.СообщенияПользователю), Символы.ПС, "");
		Параметры.ПараметрыЛогирования.СообщенияПользователю	=	Параметры.ПараметрыЛогирования.СообщенияПользователю + Текст;
		
		ЗаписастьЛогДО(Параметры.ПараметрыЛогирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибке(ОписаниеОшибки, Параметры) Экспорт
	
	Если Параметры.ИспользоватьЛогирование Тогда
		Параметры.ПараметрыЛогирования.ИнформацияОбОшибке	=	Параметры.ПараметрыЛогирования.ИнформацияОбОшибке 
																		+ ?(ЗначениеЗаполнено(Параметры.ПараметрыЛогирования.ИнформацияОбОшибке), Символы.ПС, "");
		Параметры.ПараметрыЛогирования.ИнформацияОбОшибке	=	Параметры.ПараметрыЛогирования.ИнформацияОбОшибке + ОписаниеОшибки;
		
		ЗаписастьЛогДО(Параметры.ПараметрыЛогирования);	
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьПараметрыЛогирования() Экспорт
	
	СтруктураПараметровЛогирования	=	Новый Структура;
	СтруктураПараметровЛогирования.Вставить("ИдентификаторОперации", 	"");
	СтруктураПараметровЛогирования.Вставить("ИдентификаторЗадания", 	"");
	СтруктураПараметровЛогирования.Вставить("ИдентификаторПотока", 		"");
	СтруктураПараметровЛогирования.Вставить("ДатаНачала", 				ТекущаяДатаСеанса());
	СтруктураПараметровЛогирования.Вставить("ДатаОкончания", 			Неопределено);
	СтруктураПараметровЛогирования.Вставить("ИнформацияОбОшибке", 		"");
	СтруктураПараметровЛогирования.Вставить("СообщенияПользователю", 	"");
	СтруктураПараметровЛогирования.Вставить("Состояние", 				4);
	
	Возврат СтруктураПараметровЛогирования; 
	
КонецФункции

// Возвращает новую таблицу свойств фоновых заданий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - .
//
Функция НовыеСвойстваФоновыхЗаданий()
	
	МассивТипов	=	Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока36	=	Новый ОписаниеТипов(МассивТипов, , , , Новый КвалификаторыСтроки(36));
	ОписаниеТиповСтрока50	=	Новый ОписаниеТипов(МассивТипов, , , , Новый КвалификаторыСтроки(50));
	
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("Идентификатор",                     ОписаниеТиповСтрока36);
	НоваяТаблица.Колонки.Добавить("Наименование",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Ключ",                              Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Начало",                            Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("Конец",                             Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("ИдентификаторРегламентногоЗадания", ОписаниеТиповСтрока36);
	НоваяТаблица.Колонки.Добавить("Состояние",                         Новый ОписаниеТипов("СостояниеФоновогоЗадания"));
	НоваяТаблица.Колонки.Добавить("ИмяМетода",                         Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Расположение",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ОписаниеИнформацииОбОшибке",        Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ПопыткаЗапуска",                    Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("СообщенияПользователю",             Новый ОписаниеТипов("Массив"));
	НоваяТаблица.Колонки.Добавить("НомерСеанса",                       Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("НачалоСеанса",                      Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("НаименованиеРегламентногоЗадания",  ОписаниеТиповСтрока50);
	
	НоваяТаблица.Индексы.Добавить("Идентификатор, ИдентификаторРегламентногоЗадания, НаименованиеРегламентногоЗадания, Начало");
	
	Возврат НоваяТаблица;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СостояниеФоновогоЗаданияЧислом(Состояние)
	
	Если Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат 4;
	ИначеЕсли Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Возврат 1;
	ИначеЕсли Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Возврат 2;
	ИначеЕсли Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Возврат 3;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

#КонецОбласти
