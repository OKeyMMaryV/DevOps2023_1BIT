
#Область СлужебныйПрограммныйИнтерфейс
 
 // Процедура отправляет объект обмена во внешнюю базу.
 // 
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_ОбъектыОбмена, 
 //                 СправочникСсылка.бит_мдм_СведенияОбмена, 
 //	                СправочникСсылка.бит_мдм_ОбъектыОбменаИерархияЭлементов.
 // 
 Процедура ОтправитьОбъект(ОбъектОбмена) Экспорт
	 
	 Отказ = Ложь;
	 
	 // Проверки возможности отправки объекта
	 Если НЕ ЗначениеЗаполнено(ОбъектОбмена.ИнформационнаяБаза) Тогда
		 
		 Отказ = Истина;
		 
	 КонецЕсли; 
	 
	 Если Отказ  Тогда
		 
		 Возврат;
		 
	 КонецЕсли; 
	 
	 
	 ОписаниеОбъекта  = ОбъектОбмена.ОписаниеОбъекта;
	 Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.РегистрСведений Тогда
		 
		 ОтправитьЗаписьРегистра(ОбъектОбмена);
		 
	 Иначе	
		 
		 ОтправитьСсылочныйОбъект(ОбъектОбмена);
		 
	 КонецЕсли; 
	 
	 
 КонецПроцедуры // ОтправитьОбъект()

 // Процедура отправляет все измененные объекты обмена. 
 // 
 Процедура ОтправитьИзмененные() Экспорт
 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеИзменен", Перечисления.бит_мдм_СостоянияОбъектов.Изменен);
	Запрос.УстановитьПараметр("ВидТекущаяБаза", Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_мдм_ОбъектыОбмена.Ссылка,
	               |	бит_мдм_СостоянияОбъектов.Состояние,
	               |	бит_мдм_ОбъектыОбмена.ВидИнформационнойБазы КАК ВидИнформационнойБазы,
	               |	бит_мдм_ОбъектыОбмена.ОписаниеОбъекта КАК ОписаниеОбъекта
	               |ИЗ
	               |	Справочник.бит_мдм_ОбъектыОбмена КАК бит_мдм_ОбъектыОбмена
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ПО бит_мдм_ОбъектыОбмена.Ссылка = бит_мдм_СостоянияОбъектов.Объект
	               |ГДЕ
	               |	бит_мдм_СостоянияОбъектов.Состояние = &СостояниеИзменен
	               |	И бит_мдм_ОбъектыОбмена.ВидИнформационнойБазы <> &ВидТекущаяБаза
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	бит_мдм_ОбъектыОбменаИерархияЭлементов.Ссылка,
	               |	бит_мдм_СостоянияОбъектов.Состояние,
	               |	бит_мдм_ОбъектыОбменаИерархияЭлементов.ВидИнформационнойБазы,
	               |	бит_мдм_ОбъектыОбменаИерархияЭлементов.ОписаниеОбъекта
	               |ИЗ
	               |	Справочник.бит_мдм_ОбъектыОбменаИерархияЭлементов КАК бит_мдм_ОбъектыОбменаИерархияЭлементов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ПО бит_мдм_ОбъектыОбменаИерархияЭлементов.Ссылка = бит_мдм_СостоянияОбъектов.Объект
	               |ГДЕ
	               |	бит_мдм_СостоянияОбъектов.Состояние = &СостояниеИзменен
	               |	И бит_мдм_ОбъектыОбменаИерархияЭлементов.ВидИнформационнойБазы <> &ВидТекущаяБаза
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	бит_мдм_ПланыВидовХарактеристикОбмена.Ссылка,
	               |	бит_мдм_СостоянияОбъектов.Состояние,
	               |	бит_мдм_ПланыВидовХарактеристикОбмена.ВидИнформационнойБазы,
	               |	бит_мдм_ПланыВидовХарактеристикОбмена.ОписаниеОбъекта
	               |ИЗ
	               |	Справочник.бит_мдм_ПланыВидовХарактеристикОбмена КАК бит_мдм_ПланыВидовХарактеристикОбмена
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ПО бит_мдм_ПланыВидовХарактеристикОбмена.Ссылка = бит_мдм_СостоянияОбъектов.Объект
	               |ГДЕ
	               |	бит_мдм_СостоянияОбъектов.Состояние = &СостояниеИзменен
	               |	И бит_мдм_ПланыВидовХарактеристикОбмена.ВидИнформационнойБазы <> &ВидТекущаяБаза
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	бит_мдм_СчетаОбмена.Ссылка,
	               |	бит_мдм_СостоянияОбъектов.Состояние,
	               |	бит_мдм_СчетаОбмена.ВидИнформационнойБазы,
	               |	бит_мдм_СчетаОбмена.ОписаниеОбъекта
	               |ИЗ
	               |	Справочник.бит_мдм_СчетаОбмена КАК бит_мдм_СчетаОбмена
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ПО бит_мдм_СчетаОбмена.Ссылка = бит_мдм_СостоянияОбъектов.Объект
	               |ГДЕ
	               |	бит_мдм_СчетаОбмена.ВидИнформационнойБазы <> &ВидТекущаяБаза
	               |	И бит_мдм_СостоянияОбъектов.Состояние = &СостояниеИзменен
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	бит_мдм_СведенияОбмена.Ссылка,
	               |	бит_мдм_СостоянияОбъектов.Состояние,
	               |	бит_мдм_СведенияОбмена.ВидИнформационнойБазы,
	               |	бит_мдм_СведенияОбмена.ОписаниеОбъекта
	               |ИЗ
	               |	Справочник.бит_мдм_СведенияОбмена КАК бит_мдм_СведенияОбмена
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_мдм_СостоянияОбъектов КАК бит_мдм_СостоянияОбъектов
	               |		ПО бит_мдм_СведенияОбмена.Ссылка = бит_мдм_СостоянияОбъектов.Объект
	               |ГДЕ
	               |	бит_мдм_СостоянияОбъектов.Состояние = &СостояниеИзменен
	               |	И бит_мдм_СведенияОбмена.ВидИнформационнойБазы <> &ВидТекущаяБаза";
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОтправитьОбъект(Выборка.Ссылка);
		
	КонецЦикла; 
 
 КонецПроцедуры // ОтправитьИзмененные()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СсылочныеОбъекты

 // Функция выполняет поиск объекта обмена во внешней базе.
 // 
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_ОбъектыОбмена, СправочникСсылка.бит_мдм_ОбъектыОбменаИерархияЭлементов.
 //  ИД_Поиска - Строка.
 // 
 // Возвращаемое значение:
 //  РезДанные - Структура.
 // 
 Функция НайтиОбъектВнеш(ОбъектОбмена, СпособПоиска, ЗначениеПоиска, УчитыватьИерархию = Ложь) 
	 
	 РезДанные = Новый Структура("Есть, ИД, Код", Ложь, "", "");	 
	 
	 ПризнакОбращения     = бит_мпд_КлиентСервер.ПризнакОбращенияОДата();
	 ОписаниеОбъекта      = ОбъектОбмена.ОписаниеОбъекта;
	 НастройкаПодключения = ОбъектОбмена.ИнформационнаяБаза;
	 
	 Если СпособПоиска = Перечисления.бит_мдм_СпособыПоиска.Код Тогда
		 
		 ТекстЗапроса =  ПризнакОбращения+"%ИмяОбъектаНаСервисе%_%ИмяОбъекта%?$filter=Code eq '%ЗначениеПоиска%'";
		 ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЗначениеПоиска%", ЗначениеПоиска);
		 
	 ИначеЕсли СпособПоиска = Перечисления.бит_мдм_СпособыПоиска.Наименование Тогда
		 
		 Если УчитыватьИерархию Тогда
			 ТекстЗапроса =  ПризнакОбращения+"%ИмяОбъектаНаСервисе%_%ИмяОбъекта%?$filter=Description eq '%ЗначениеПоиска%' and IsFolder eq '%ЭтоГруппа%' ";
		 Иначе	
			 ТекстЗапроса =  ПризнакОбращения+"%ИмяОбъектаНаСервисе%_%ИмяОбъекта%?$filter=Description eq '%ЗначениеПоиска%'";
		 КонецЕсли; 
		 
		 ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЭтоГруппа%"     , Формат(ОбъектОбмена.ЭтоГруппа,"БЛ=false; БИ=true"));
		 ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЗначениеПоиска%", ЗначениеПоиска);
		 
	 ИначеЕсли СпособПоиска = Перечисления.бит_мдм_СпособыПоиска.ИД Тогда	 
		 
		 ТекстЗапроса =  ПризнакОбращения+"%ИмяОбъектаНаСервисе%_%ИмяОбъекта%(guid'%ИД%')";
		 ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИД%"        , ЗначениеПоиска);
		 
	 КонецЕсли; 
	 
	 
	 ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%"    , ОписаниеОбъекта.Имя);
	 
	 ИмяОбъектаНаСервисе = бит_мдм.ПолучитьИмяОбъектаСервиса(ОписаниеОбъекта.Вид);	 
	 ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъектаНаСервисе%"    , ИмяОбъектаНаСервисе);
	 
	 Путь = НастройкаПодключения.ИмяСервера+"/"+НастройкаПодключения.ИмяБазы;
	 
	 СоединениеHTTP = Новый HTTPСоединение(Путь,,НастройкаПодключения.Пользователь,НастройкаПодключения.Пароль);
	 ЗапросHTTP = Новый HTTPЗапрос(ТекстЗапроса);
	 ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	 
	 флЕсть = Ложь;
	 
	 Если ОтветHTTP.КодСостояния = 200 Тогда
		 
		 ОтветСтр = ОтветHTTP.ПолучитьТелоКакСтроку();
		 
		 ОтветДанные = ПрочитатьИдентификатор(ОтветСтр);
		 РезДанные.ИД = ОтветДанные.ИД;
		 РезДанные.Код = ОтветДанные.Код;
		 РезДанные.Есть = ?(ЗначениеЗаполнено(РезДанные.ИД), Истина, Ложь);
		 
	 КонецЕсли; 
	 
	 Возврат РезДанные;
	 
 КонецФункции // НайтиОбъектВнеш()

 // Функция сериализует объект обмена в формат atom для обмена посредством автоматического REST сервиса. 
 // 
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_ОбъектыОбмена, СправочникСсылка.бит_мдм_ОбъектыОбменаИерархияЭлементов.
 //  ПсевдоМета - ОбъектМетаданных.
 //  АнализироватьИзмененные - Булево.
 // 
 Функция СериализоватьОбъектОбмена(ОбъектОбмена, ПсевдоМета, АнализироватьИзмененные = Ложь)
	 
	 ОписаниеОбъекта      = ОбъектОбмена.ОписаниеОбъекта;
	 ИмяОбъектаНаСервисе  = бит_мдм.ПолучитьИмяОбъектаСервиса(ОбъектОбмена.ОписаниеОбъекта.Вид);	 
	 
	 МодельОбъекта        = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьОбъект(ОбъектОбмена, ПсевдоМета);
	 
	 // Получаем измененные реквизиты
	 ИзмененныеРеквизиты = Новый Структура;
	 ИзмененныеРеквизиты.Вставить("СтандартныеРеквизиты", Новый Соответствие);
	 ИзмененныеРеквизиты.Вставить("Реквизиты", Новый Соответствие);
	 
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("ОбъектОбмена", ОбъектОбмена);
	 Запрос.Текст = "ВЫБРАТЬ
	                |	бит_мдм_ИзмененныеРеквизиты.ОбъектОбмена,
	                |	бит_мдм_ИзмененныеРеквизиты.ОписаниеРеквизита,
	                |	бит_мдм_ИзмененныеРеквизиты.НомерСтрокиТабличнойЧасти,
	                |	бит_мдм_ИзмененныеРеквизиты.ИмяРеквизита,
	                |	бит_мдм_ИзмененныеРеквизиты.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти
	                |ИЗ
	                |	РегистрСведений.бит_мдм_ИзмененныеРеквизиты КАК бит_мдм_ИзмененныеРеквизиты
	                |ГДЕ
	                |	бит_мдм_ИзмененныеРеквизиты.ОбъектОбмена = &ОбъектОбмена
	                |ИТОГИ ПО
	                |	ИмяТабличнойЧасти";
					
	 Результат = Запрос.Выполнить();				
	 
	 ВыборкаТабЧасти = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	 Пока ВыборкаТабЧасти.Следующий() Цикл
		 
		  Если НЕ Лев(ВыборкаТабЧасти.ИмяТабличнойЧасти,1) = "$" Тогда
		  
		  	   ИзмененныеРеквизиты.Вставить(ВыборкаТабЧасти.ИмяТабличнойЧасти, Новый Соответствие);
		  
		  КонецЕсли; 
		 
	 	  Выборка = ВыборкаТабЧасти.Выбрать();
		  
		  Пока Выборка.Следующий() Цикл
		  
		  	   Если Выборка.ИмяТабличнойЧасти = "$Реквизиты" Тогда
				   
				    ИзмененныеРеквизиты.Реквизиты.Вставить(Выборка.ИмяРеквизита, Истина);
				   
			   ИначеЕсли Выборка.ИмяТабличнойЧасти = "$СтандартныеРеквизиты" Тогда	
				   
				    ИзмененныеРеквизиты.СтандартныеРеквизиты.Вставить(Выборка.ИмяРеквизита, Истина);
				   
			   Иначе	   
				   
				    ИзмененныеРеквизиты[Выборка.ИмяТабличнойЧасти].Вставить(Выборка.НомерСтрокиТабличнойЧасти, Истина);
				   
			   КонецЕсли; 
		  
		  КонецЦикла; 
	 
	 КонецЦикла; // По измененным реквизитам
	 
	 флЕстьВладелец = ?(ЗначениеЗаполнено(МодельОбъекта.СтандартныеРеквизиты.Владелец) 
	                     И ЗначениеЗаполнено(МодельОбъекта.СтандартныеРеквизиты.Владелец.ИД_Внешний), Истина, Ложь);
						 
	 флЕстьРодитель = ?(ЗначениеЗаполнено(ОписаниеОбъекта.ВидИерархии) 
		   И ЗначениеЗаполнено(ОбъектОбмена.Родитель) 
		   И ЗначениеЗаполнено(ОбъектОбмена.Родитель.ИД_Внешний), Истина, Ложь);	 
	 
	 Запись =  Новый ЗаписьXML;
	 Запись.УстановитьСтроку("UTF-8");
	 
	 Запись.ЗаписатьОбъявлениеXML();	 
	 Запись.ЗаписатьНачалоЭлемента("entry");
	 
	 Запись.ЗаписатьНачалоЭлемента("category");
	 
	 ТегКатегорияЗн = "StandardODATA."+ИмяОбъектаНаСервисе+"_"+ОписаниеОбъекта.Имя;
	 Запись.ЗаписатьАтрибут("term",ТегКатегорияЗн);		
	 Запись.ЗаписатьАтрибут("scheme","http://schemas.microsoft.com/ado/2007/08/dataservices/scheme");		 
	 Запись.ЗаписатьКонецЭлемента();
	 
	 Запись.ЗаписатьНачалоЭлемента("title");
	 Запись.ЗаписатьАтрибут("type","text");		 		 
	 Запись.ЗаписатьКонецЭлемента();
	 
	 Запись.ЗаписатьНачалоЭлемента("updated");
	 Запись.ЗаписатьКонецЭлемента();
	 
	 Запись.ЗаписатьНачалоЭлемента("author");
	 Запись.ЗаписатьКонецЭлемента();
	 
	 Запись.ЗаписатьНачалоЭлемента("summary");
	 Запись.ЗаписатьКонецЭлемента();
	 
	 АбсолютныйПрефикс = Справочники.бит_мпд_НастройкиВнешнихПодключений.ПолучитьАбсолютныйПрефикс(ОбъектОбмена.ИнформационнаяБаза);		 
	 
	 Запись.ЗаписатьНачалоЭлемента("content");
	 Запись.ЗаписатьАтрибут("type","application/xml");		 
	 
	 Запись.ЗаписатьНачалоЭлемента("m:properties");
	 
	 Запись.ЗаписатьСоответствиеПространстваИмен("d", "http://schemas.microsoft.com/ado/2007/08/dataservices");
	 Запись.ЗаписатьСоответствиеПространстваИмен("m", "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata");		 
	 
	 Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.ПланВидовХарактеристик Тогда
		 
		 // Сериализация поля ТипЗначения
		 МассивТиповСтр = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ОбъектОбмена.ТипЗначения,"/");
		 
		 Запись.ЗаписатьНачалоЭлемента("d:ValueType");
		 
		     Запись.ЗаписатьНачалоЭлемента("d:Types");
		     Запись.ЗаписатьАтрибут("m:type","Collection(Edm.String)");
		     Для каждого ТипСтр Из МассивТиповСтр Цикл
		    	 
		    	 ТипСтрАнгл = бит_мдм.ПреобразоватьТипыОдинЭс(ТипСтр);
		    	 Запись.ЗаписатьНачалоЭлемента("d:element");
		    	 Запись.ЗаписатьТекст(ТипСтрАнгл);
		    	 Запись.ЗаписатьКонецЭлемента();
		    	 
		     КонецЦикла; 
		     Запись.ЗаписатьКонецЭлемента(); // Types
		     
		     Запись.ЗаписатьНачалоЭлемента("d:NumberQualifiers");
		     
		    	 Запись.ЗаписатьНачалоЭлемента("d:AllowedSign");
		    	 Запись.ЗаписатьТекст("Any");
		    	 Запись.ЗаписатьКонецЭлемента(); // D:AllowedSign

		    	 Запись.ЗаписатьНачалоЭлемента("d:Digits");
		    	 Запись.ЗаписатьТекст("0");
		    	 Запись.ЗаписатьКонецЭлемента(); // D:Digits
		    	 
		    	 Запись.ЗаписатьНачалоЭлемента("d:FractionDigits");
		    	 Запись.ЗаписатьТекст("0");
		    	 Запись.ЗаписатьКонецЭлемента(); // D:FractionDigits
		     
		     Запись.ЗаписатьКонецЭлемента(); // D:NumberQualifiers
		     
		     
		 Запись.ЗаписатьКонецЭлемента(); // ValueType
		 
	 КонецЕсли; 
	 
	 // Стандартные реквизиты
	 Для каждого КиЗ Из ПсевдоМета.СтандартныеРеквизиты Цикл
		 
		 ИмяРеквизита = КиЗ.Ключ;
		 
		 Если АнализироватьИзмененные 
			 И НЕ ИзмененныеРеквизиты.СтандартныеРеквизиты[ИмяРеквизита] = Истина Тогда
			 
			 // записываем только измененные
			 Продолжить;
			 
		 КонецЕсли; 
		 
		 Если ИмяРеквизита = "Код" Тогда
			 
			 Если ЗначениеЗаполнено(ОбъектОбмена.Код_Внешний) Тогда
				 
				 // Устанавливаем код, который был изначально при создании.
				 Запись.ЗаписатьНачалоЭлемента("d:Code");
				 Запись.ЗаписатьТекст(ОбъектОбмена.Код_Внешний);
				 Запись.ЗаписатьКонецЭлемента();
				 
			 Иначе
				 
				 Если ОписаниеОбъекта.ОтправлятьКод Тогда
					 
					 Запись.ЗаписатьНачалоЭлемента("d:Code");
					 Запись.ЗаписатьТекст(ОбъектОбмена.КодОбъекта);
					 Запись.ЗаписатьКонецЭлемента();
					 
				 КонецЕсли; 
				 
			 КонецЕсли;
			 
		 ИначеЕсли ИмяРеквизита = "Наименование" Тогда	
			 
			 Запись.ЗаписатьНачалоЭлемента("d:Description");
			 Запись.ЗаписатьТекст(ОбъектОбмена.Наименование);
			 Запись.ЗаписатьКонецЭлемента();
			 
		 ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда	 
			 
			 Запись.ЗаписатьНачалоЭлемента("d:DeletionMark");
			 Запись.ЗаписатьТекст(Формат(ОбъектОбмена.ПометкаУдаления,"БЛ=false; БИ=true"));
			 Запись.ЗаписатьКонецЭлемента();
			 
		 ИначеЕсли ИмяРеквизита = "ЭтоГруппа" Тогда	 
			 
			 Если ОписаниеОбъекта.ВидИерархии = Перечисления.бит_мдм_ВидыИерархии.ИерахрияГруппИЭлементов Тогда
				 
				 Запись.ЗаписатьНачалоЭлемента("d:IsFolder");
				 Запись.ЗаписатьТекст(Формат(ОбъектОбмена.ЭтоГруппа,"БЛ=false; БИ=true"));
				 Запись.ЗаписатьКонецЭлемента();
				 
			 КонецЕсли; 
			 
		 ИначеЕсли ИмяРеквизита = "Родитель" Тогда
			 
			 Если флЕстьРодитель Тогда
				 
				 Запись.ЗаписатьНачалоЭлемента("d:Parent_Key");
				 Запись.ЗаписатьТекст(ОбъектОбмена.Родитель.ИД_Внешний);
				 Запись.ЗаписатьКонецЭлемента();
				 
			 КонецЕсли; 
			 
		 ИначеЕсли ИмяРеквизита = "Владелец" Тогда
			 
			 Если флЕстьВладелец Тогда
				 
				 ПсевдоМетаРеквизит = ПсевдоМета.СтандартныеРеквизиты.Владелец;
				 
				 Если ПсевдоМетаРеквизит.Составной Тогда
					 
					 Запись.ЗаписатьНачалоЭлемента("d:Owner");
					 Запись.ЗаписатьТекст(МодельОбъекта.СтандартныеРеквизиты.Владелец.ИД_Внешний);
					 Запись.ЗаписатьКонецЭлемента();
					 
					 Запись.ЗаписатьНачалоЭлемента("d:Owner_Type");
					 
					 ИмяОбъектаНаСервисеРеквизит = бит_мдм.ПолучитьИмяОбъектаСервиса(МодельОбъекта.СтандартныеРеквизиты.Владелец.ОписаниеОбъекта.Вид);
					 Запись.ЗаписатьТекст("StandardODATA."+ИмяОбъектаНаСервисеРеквизит+"_"+МодельОбъекта.СтандартныеРеквизиты.Владелец.ОписаниеОбъекта.Имя);
					 Запись.ЗаписатьКонецЭлемента();
					 
				 Иначе	
					 
					 Запись.ЗаписатьНачалоЭлемента("d:Owner_Key");
					 Запись.ЗаписатьТекст(МодельОбъекта.СтандартныеРеквизиты.Владелец.ИД_Внешний);
					 Запись.ЗаписатьКонецЭлемента();
					 
				 КонецЕсли; 
				 
			 КонецЕсли; 
			 
		 КонецЕсли; 
		 
	 КонецЦикла; // СтандартныеРеквизиты 
	 
	 // Другие реквизиты
	 Для каждого СтрДанные Из ОбъектОбмена.Данные Цикл
		 
		 ОписаниеРеквизита = СтрДанные.ОписаниеРеквизита;
		 ИмяРеквизита = ОписаниеРеквизита.Имя;
		 
		 Если ИмяРеквизита = "Код" Тогда
		 
		 	  Продолжить;
		 
		 КонецЕсли; 
		 
		 Если АнализироватьИзмененные 
			  И НЕ ИзмененныеРеквизиты.Реквизиты[ИмяРеквизита] = Истина Тогда
			  
			  // записываем только измененные
		 	  Продолжить;
		 
		 КонецЕсли; 
		 
		 ПсевдоРеквизит = Неопределено;
		 ПсевдоМета.Реквизиты.Свойство(ИмяРеквизита, ПсевдоРеквизит);
		 Если НЕ ПсевдоРеквизит = Неопределено Тогда
			 
			 СериализоватьРеквизит(Запись, СтрДанные.Значение, ПсевдоРеквизит);
			 
		 КонецЕсли; 
		 
	 КонецЦикла;  // Реквизиты шапки
	 
	 // Данные видов субконто
	 Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет 
		  И МодельОбъекта.ТабличныеЧасти.Свойство("ВидыСубконто") Тогда
		  
		  ИмяТЧ        = "ВидыСубконто";
		  ИмяТчАнгл    = "ExtDimensionTypes";
		  ПсевдоМетаТЧ = ПсевдоМета.ТабличныеЧасти[ИмяТЧ];
		  МодельТЧ     = МодельОбъекта.ТабличныеЧасти[ИмяТЧ];
		  
		  ИмяТипаСтроки = "StandardODATA.%ИмяОбъектаНаСервисе%_%1%_%2%";		  
		  ИмяТипаСтроки = СтрЗаменить(ИмяТипаСтроки, "%ИмяОбъектаНаСервисе%", ИмяОбъектаНаСервисе);
		  ИмяТипаСтроки = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ИмяТипаСтроки, ПсевдоМета.Имя, ИмяТчАнгл);
		  
		  ИмяТипаКоллекции = "Collection(%1%)";
		  ИмяТипаКоллекции = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ИмяТипаКоллекции, ИмяТипаСтроки);
		  
		  Запись.ЗаписатьНачалоЭлемента("d:"+ИмяТчАнгл);
		  Запись.ЗаписатьАтрибут("m:type", ИмяТипаКоллекции);
		  
			  Сч = 1;
			  Для каждого МодельСтроки Из МодельТЧ Цикл
				  
				  Запись.ЗаписатьНачалоЭлемента("d:element");
				  Запись.ЗаписатьАтрибут("m:type", ИмяТипаСтроки);
				  
				  Запись.ЗаписатьНачалоЭлемента("d:LineNumber");
				  Запись.ЗаписатьТекст(Формат(Сч,"ЧГ="));
				  Запись.ЗаписатьКонецЭлемента();
				  
				  Для каждого КиЗР Из МодельСтроки Цикл
					  
					  ПсевдоМетаРеквизит = ПсевдоМетаТЧ.Реквизиты[КиЗР.Ключ];
					  Если НЕ ПсевдоМетаРеквизит = Неопределено Тогда
						  
						  Если ПсевдоМетаРеквизит.Имя = "ВидСубконто" Тогда
						  
						  	  ПсевдоМетаРеквизит.Имя = "ExtDimensionType";
							  
						  ИначеЕсли ПсевдоМетаРеквизит.Имя = "Предопределенное" Тогда	  
							  
							  ПсевдоМетаРеквизит.Имя = "Predefined";
							  
						  ИначеЕсли ПсевдоМетаРеквизит.Имя = "ТолькоОбороты" Тогда	  
							  
							  ПсевдоМетаРеквизит.Имя = "TurnoversOnly";
							  
						  КонецЕсли; 
						  СериализоватьРеквизит(Запись, КиЗР.Значение, ПсевдоМетаРеквизит);
						  
					  КонецЕсли; 
					  
				  КонецЦикла; 
				  
				  Запись.ЗаписатьКонецЭлемента(); // Строка табличной части
				  Сч = Сч+1;
				  
			  КонецЦикла; 
		  
		  Запись.ЗаписатьКонецЭлемента(); // Табличная часть
		  
	 КонецЕсли; 
	 
	 // Данные табличных частей
	 Для каждого КиЗ Из МодельОбъекта.ТабличныеЧасти Цикл
		 
		 ИмяТЧ = КиЗ.Ключ;
		 Если ОписаниеОбъекта.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет И ИмяТЧ = "ВидыСубконто" Тогда
			 
			  // Виды субконто передаются специальным способом.
		 	  Продолжить;
		 
		 КонецЕсли; 
		 МодельТЧ = КиЗ.Значение;
		 ПсевдоМетаТЧ = ПсевдоМета.ТабличныеЧасти[ИмяТЧ];
		 
		 Если МодельТЧ.Количество() > 0 Тогда
			 
			 Если АнализироватьИзмененные И НЕ ИзмененныеРеквизиты.Свойство(ИмяТЧ) Тогда
				 
				 // PATCH запрос не позволяет обновить только выбранные строки ТЧ, 
				 // поэтому анализируем в целом, была ТЧ изменена или нет.
				 Продолжить;
			 
			 КонецЕсли; 
			 
			 ИмяТипаСтроки = "StandardODATA.%ИмяОбъектаНаСервисе%_%1%_%2%_RowType";
			 ИмяТипаСтроки = СтрЗаменить(ИмяТипаСтроки, "%ИмяОбъектаНаСервисе%", ИмяОбъектаНаСервисе);
			 ИмяТипаСтроки = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ИмяТипаСтроки, ПсевдоМета.Имя, ИмяТЧ);
			 
			 ИмяТипаКоллекции = "Collection(%1%)";
			 ИмяТипаКоллекции = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ИмяТипаКоллекции, ИмяТипаСтроки);
			 
			 Запись.ЗаписатьНачалоЭлемента("d:"+ИмяТЧ);
			 Запись.ЗаписатьАтрибут("m:type", ИмяТипаКоллекции);
			 
			  Сч = 1;
			  Для каждого МодельСтроки Из МодельТЧ Цикл
				  
				  
			  	Запись.ЗаписатьНачалоЭлемента("d:element");
				Запись.ЗаписатьАтрибут("m:type", ИмяТипаСтроки);
				
				  Запись.ЗаписатьНачалоЭлемента("d:LineNumber");
				  Запись.ЗаписатьТекст(Формат(Сч,"ЧГ="));
				  Запись.ЗаписатьКонецЭлемента();
				  
				  Для каждого КиЗР Из МодельСтроки Цикл
					  
					  ПсевдоМетаРеквизит = ПсевдоМетаТЧ.Реквизиты[КиЗР.Ключ];
					  Если НЕ ПсевдоМетаРеквизит = Неопределено Тогда
						  
						  СериализоватьРеквизит(Запись, КиЗР.Значение, ПсевдоМетаРеквизит);
						  
					  КонецЕсли; 
					  
				  КонецЦикла; 
				  
				Запись.ЗаписатьКонецЭлемента(); // Строка табличной части
				Сч = Сч+1;
			  
			  КонецЦикла; 
			 
			 Запись.ЗаписатьКонецЭлемента(); // Табличная часть
			 
		 КонецЕсли; 
		 
	 КонецЦикла; 
	 
	 Запись.ЗаписатьКонецЭлемента(); // M:properties
	 
	 Запись.ЗаписатьКонецЭлемента(); // Content
	 
	 Запись.ЗаписатьКонецЭлемента(); // Entry
	 
	 ДанныеСтр = Запись.Закрыть();
	 
	 Возврат ДанныеСтр;
	 
 КонецФункции // СериализоватьОбъектОбмена()
 
 // Функция выполняет создание объекта во внешней базе. 
 // 
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_ОбъектыОбмена, СправочникСсылка.бит_мдм_ОбъектыОбменаИерархияЭлементов.
 //  ПсевдоМета - ОбъектМетаданных.
 // 
 // Возвращаемое значение:
 //  флВыполнено - Булево.
 // 
 Функция СоздатьОбъектОбменаВнеш(ОбъектОбмена, ПсевдоМета)
	 
	 флВыполнено = Ложь;
	 
	 НастройкаПодключения = ОбъектОбмена.ИнформационнаяБаза;
	 ПризнакОбращения     = бит_мпд_КлиентСервер.ПризнакОбращенияОДата();
	 ОписаниеОбъекта      = ОбъектОбмена.ОписаниеОбъекта; 
	 ИмяОбъектаНаСервисе  = бит_мдм.ПолучитьИмяОбъектаСервиса(ОписаниеОбъекта.Вид);
	 
	 // Новый объект
	 Адрес =  ПризнакОбращения+ИмяОбъектаНаСервисе+"_"+ОписаниеОбъекта.Имя;
	 
	 Путь = НастройкаПодключения.ИмяСервера+"/"+НастройкаПодключения.ИмяБазы;
	 
	 СоединениеHTTP = Новый HTTPСоединение(Путь,,НастройкаПодключения.Пользователь,НастройкаПодключения.Пароль);
	 
	 ТелоЗапроса = СериализоватьОбъектОбмена(ОбъектОбмена, ПсевдоМета);
	 
	 Заголовки = Новый Соответствие;
	 Заголовки.Вставить("1C_OData_DataLoadMode", "true"); // ОбменДанными.Загрузка = Истина
	 
	 ЗапросHTTP = Новый HTTPЗапрос(Адрес, Заголовки);
	 ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	 
	 ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP); // POST
	 
	 Если ОтветHTTP.КодСостояния = 201 Тогда
		 
		 // Запись выполнена - необходимо извлечь из ответа ИД объекта и Код в другой базе.
		 ОтветСтр = ОтветHTTP.ПолучитьТелоКакСтроку();
		 
		 РезДанные = ПрочитатьИдентификатор(ОтветСтр);
		 
		 
		 // Записываем внешний ИД в ОбъектОбмена в режиме загрузки.
		 СпрОб = ОбъектОбмена.ПолучитьОбъект();
		 СпрОб.Код_Внешний = РезДанные.Код;
		 СпрОб.ИД_Внешний  = РезДанные.ИД;
		 
		 флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОб, "", "Ошибка", Истина);
		 
		 // Регистрация состояния и события объекта обмена.
		 Если флВыполнено Тогда
			 
			 РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.Обмен);
			 РегистрыСведений.бит_мдм_СостоянияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_СостоянияОбъектов.Обработан);
			 бит_мдм.ОчиститьИзмененныеРеквизиты(ОбъектОбмена);
			 
		 Иначе
			 
			 РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.ОшибкаОбмена);
			 
		 КонецЕсли; 
		 
		 
	 Иначе
		 
		 ТекстСообщения = "POST
		 |%1%
		 |%2%
		 |Ответ:
		 |%3%
		 |%4%";
		 ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
		 , Адрес
		 , ТелоЗапроса
		 , ОтветHTTP.КодСостояния
		 , ОтветHTTP.ПолучитьТелоКакСтроку());
		 
		 РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.ОшибкаОбмена, ТекстСообщения);
		 
	 КонецЕсли;  // Ответ = 201
	 
	 Возврат флВыполнено;
	 
 КонецФункции // ЗаписатьОбъектОбмена()
 
 // Функция выполняе перезапись объекта во внешней базе. Передаются все поля и используется запрос PUT, 
 // т.к. PATCH не доступен в платформе 1С.
 // 
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_ОбъектыОбмена, СправочникСсылка.бит_мдм_ОбъектыОбменаИерархияЭлементов.
 //  ПсевдоМета - ОбъектМетаданных.
 // 
 // Возвращаемое значение:
 //  флВыполнено - Булево.
 // 
 Функция ЗаписатьОбъектОбменаВнеш(ОбъектОбмена, ПсевдоМета)
 
	 флВыполнено = Ложь;
	 
	 НастройкаПодключения = ОбъектОбмена.ИнформационнаяБаза;
	 ПризнакОбращения = бит_мпд_КлиентСервер.ПризнакОбращенияОДата();
	 ОписаниеОбъекта = ОбъектОбмена.ОписаниеОбъекта; 
	 ИмяОбъектаНаСервисе = бит_мдм.ПолучитьИмяОбъектаСервиса(ОписаниеОбъекта.Вид);
	 
	 // Новый объект
	 Адрес =  ПризнакОбращения+"%ИмяОбъектаНаСервисе%_%ИмяОбъекта%(guid'%ИД%')";
	 Адрес = СтрЗаменить(Адрес, "%ИмяОбъектаНаСервисе%", ИмяОбъектаНаСервисе);	 
	 Адрес = СтрЗаменить(Адрес, "%ИмяОбъекта%", ОписаниеОбъекта.Имя);
	 Адрес = СтрЗаменить(Адрес, "%ИД%", ОбъектОбмена.ИД_Внешний);
	 
	 
	 Путь = НастройкаПодключения.ИмяСервера+"/"+НастройкаПодключения.ИмяБазы;
	 
	 СоединениеHTTP = Новый HTTPСоединение(Путь,,НастройкаПодключения.Пользователь,НастройкаПодключения.Пароль);
	 
	 ТелоЗапроса = СериализоватьОбъектОбмена(ОбъектОбмена, ПсевдоМета, Истина);
	 
	 Заголовки = Новый Соответствие;
	 Заголовки.Вставить("1C_OData_DataLoadMode", "true"); // ОбменДанными.Загрузка = Истина
	 
	 ЗапросHTTP = Новый HTTPЗапрос(Адрес, Заголовки);
	 ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	 
	// ОтветHTTP = СоединениеHTTP.Записать(ЗапросHTTP); // PUT
	 ОтветHTTP = СоединениеHTTP.Изменить(ЗапросHTTP); // Patch

	 
	 Если ОтветHTTP.КодСостояния = 200 Тогда
		 
		 флВыполнено = Истина;
		 
		 РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.Обмен);
		 РегистрыСведений.бит_мдм_СостоянияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_СостоянияОбъектов.Обработан);
		 бит_мдм.ОчиститьИзмененныеРеквизиты(ОбъектОбмена);
		 
	 Иначе
		 
		 ТекстСообщения = "PATCH
		 |%1%
		 |%2%
		 |Ответ:
		 |%3%
		 |%4%";
		 //ТекстСообщения = "КодСостояния: %1%, Ответ сервера: %2%";
		 ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
		 , Адрес
		 , ТелоЗапроса
		 , ОтветHTTP.КодСостояния
		 , ОтветHTTP.ПолучитьТелоКакСтроку());
		 
		 РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.ОшибкаОбмена, ТекстСообщения);
		 
	 КонецЕсли;  // Ответ = 200
	 
	 Возврат флВыполнено;
 	
 КонецФункции // ЗаписатьОбъектОбмена()

 // Процедура отправляет по HTTP ссылочный объект.
 //
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_ОбъектыОбмена, СправочникСсылка.бит_мдм_ОбъектыОбменаИерархияЭлементов.
 //
 Процедура ОтправитьСсылочныйОбъект(ОбъектОбмена)
 
	 ОписаниеОбъекта  = ОбъектОбмена.ОписаниеОбъекта;
	 ЭтоИерархический = ?(ЗначениеЗаполнено(ОписаниеОбъекта.ВидИерархии), Истина, Ложь);
	 ПсевдоМета = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданные(ОписаниеОбъекта, "Структура");
	 Если НЕ ЗначениеЗаполнено(ОбъектОбмена.ИД_Внешний) Тогда
		 
		 Если ОбъектОбмена.ЭтоПредопределенный Тогда
			 
			 // Если у удаленной базы такая же конфигурация, то ИД предопределенных могут быть одинаковыми.
			 РезДанные = НайтиОбъектВнеш(ОбъектОбмена, Перечисления.бит_мдм_СпособыПоиска.ИД, ОбъектОбмена.ИД);
			 
			 Если НЕ РезДанные.Есть Тогда
				 
				 // Выполним поиск по наименованию (по именам выполнить поиск сейчас возможности нет сейчас нет).
				 РезДанные = НайтиОбъектВнеш(ОбъектОбмена, Перечисления.бит_мдм_СпособыПоиска.Наименование, ОбъектОбмена.Наименование, ЭтоИерархический);
				 
			 КонецЕсли; 
			 
			 Если НЕ РезДанные.Есть Тогда
				 
				  // Выполняем поиск по коду
			 	  РезДанные = НайтиОбъектВнеш(ОбъектОбмена, Перечисления.бит_мдм_СпособыПоиска.Код, ОбъектОбмена.КодОбъекта);
			 
			 КонецЕсли; 
			 
			 Если РезДанные.Есть Тогда
				 
				 // Записываем внешний ИД в ОбъектОбмена в режиме загрузки.
				 СпрОб = ОбъектОбмена.ПолучитьОбъект();
				 СпрОб.Код_Внешний = РезДанные.Код;
				 СпрОб.ИД_Внешний  = РезДанные.ИД;
				 
				 бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОб, "", "Ошибка", Истина);
				 
				 // Обновляем данные
				 ЗаписатьОбъектОбменаВнеш(ОбъектОбмена, ПсевдоМета);
				 
			 Иначе	
				 
				 // Не нашли - создаем новый элемент
				 СоздатьОбъектОбменаВнеш(ОбъектОбмена, ПсевдоМета);
				 
			 КонецЕсли; 
			 
			 
		 Иначе	
			 
			 Если НЕ ОписаниеОбъекта.ПервичныйСпособПоиска = Перечисления.бит_мдм_СпособыПоиска.ИД  Тогда
				 
				 ЗначениеПоиска = ПолучитьЗначениеПоиска(ОбъектОбмена, ОписаниеОбъекта.ПервичныйСпособПоиска);
				 РезДанные = НайтиОбъектВнеш(ОбъектОбмена, ОписаниеОбъекта.ПервичныйСпособПоиска, ЗначениеПоиска, ЭтоИерархический);
				 
				 Если РезДанные.Есть Тогда
					 
					 // Записываем внешний ИД в ОбъектОбмена в режиме загрузки.
					 СпрОб = ОбъектОбмена.ПолучитьОбъект();
					 СпрОб.Код_Внешний = РезДанные.Код;
					 СпрОб.ИД_Внешний  = РезДанные.ИД;
					 
					 бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОб, "", "Ошибка", Истина);
					 
					 // Обновляем данные
					 ЗаписатьОбъектОбменаВнеш(ОбъектОбмена, ПсевдоМета);
					 
				 Иначе	
					 
					 // Не нашли - создаем новый элемент
					 СоздатьОбъектОбменаВнеш(ОбъектОбмена, ПсевдоМета);
					 
				 КонецЕсли; 				 
				 
			 Иначе	
				 
				 // Внешнего ИД нет - создаем новый
				 СоздатьОбъектОбменаВнеш(ОбъектОбмена, ПсевдоМета);
				 
			 КонецЕсли; 
			 
		 КонецЕсли; 
		 
		 
	 Иначе	
		 
		 // Первичная синхронизация уже прошла - дальше обмен по ИД.
		 РезДанные      = НайтиОбъектВнеш(ОбъектОбмена, Перечисления.бит_мдм_СпособыПоиска.ИД, ОбъектОбмена.ИД_Внешний);
		 
		 Если РезДанные.Есть Тогда
			 
			 // Обновляем существующий элемент
			 ЗаписатьОбъектОбменаВнеш(ОбъектОбмена, ПсевдоМета);
			 
		 Иначе	
			 
			 // Создаем заново
			 СоздатьОбъектОбменаВнеш(ОбъектОбмена, ПсевдоМета);
			 
		 КонецЕсли; 
		 
		 
	 КонецЕсли; 
 
 КонецПроцедуры // ОтправитьСсылочныйОбъект()
 
#КонецОбласти

#Область РегистрыСведений

 // Функция возвращает строковое представление ключа записи в формате, 
 // пригодном для использования в HTTP запросе.
 //
 // Параметры:
 //   ОбъектОбмена - СправочникСсылка.бит_мдм_ОбъектыОбмена.
 //
 // Возвращаемое значение:
 //  КлючЗаписи - Строка.
 //
 Функция КлючЗаписиРегистраВнеш(МодельОбъекта)
 
 	КлючЗаписи = "";
 	
 	 Сч = 0;
	  Для каждого КиЗ Из МодельОбъекта.Измерения Цикл
	 
	 	  ТекИмя  = КиЗ.Ключ;
		  ТекЗнч  = КиЗ.Значение;
		  ИмяАнгл = бит_мпд_ВнешниеИсточникиСервер.ПеревестиИмяПоля(ТекИмя, "en");
		  ТекТип = ТипЗнч(ТекЗнч);
		  
		  ПредставлениеЗначения = "";
		  Если бит_ОбщегоНазначения.ЭтоПримитивныйТип(ТекЗнч) Тогда
			  
			  РезСтр = ПолучитьЗначениеДляОтправки(ТекЗнч);
			  Если ТипЗнч(ТекЗнч) = Тип("Дата") Тогда
				  ПредставлениеЗначения = "datetime'"+РезСтр.Значение+"'";
			  Иначе	
				  ПредставлениеЗначения = РезСтр.Значение;
			  КонецЕсли; 
			  
		  Иначе	
			  
			  ПредставлениеЗначения = "guid'"+ТекЗнч.ИД_Внешний+"'";
			  ИмяАнгл = ИмяАнгл+"_Key";

			  
		  КонецЕсли; 
		  
		  КлючЗаписи = КлючЗаписи+?(Сч = 0,"", ", ") + ИмяАнгл+" = "+ПредставлениеЗначения;
		  Сч = Сч + 1;
		  
	  КонецЦикла;
 
 	Возврат КлючЗаписи;
 	
 КонецФункции // КлючЗаписиРегистраВнеш()

 // Функция выполняет поиск объекта во внешней базе.
 //
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_СведенияОбмена.
 //  ПсевдоМета - ОбъектМетаданных.
 //  МодельОбъекта - Структура.
 //
 // Возвращаемое значение:
 //  РезДанные - Структура.
 //
 Функция НайтиЗаписьРегистраВнеш(ОбъектОбмена, ПсевдоМета, МодельОбъекта) 
 
	 РезДанные = Новый Структура("Есть, ТекстЗапроса", Ложь, "");	 
	 
	 ПризнакОбращения     = бит_мпд_КлиентСервер.ПризнакОбращенияОДата();
	 ОписаниеОбъекта      = ОбъектОбмена.ОписаниеОбъекта;
	 НастройкаПодключения = ОбъектОбмена.ИнформационнаяБаза;
	 ИмяОбъектаНаСервисе = бит_мдм.ПолучитьИмяОбъектаСервиса(ОписаниеОбъекта.Вид);	 

	 Адрес =  ПризнакОбращения+ИмяОбъектаНаСервисе+"_"+ОписаниеОбъекта.Имя+"("+КлючЗаписиРегистраВнеш(МодельОбъекта)+")";

	 Путь = НастройкаПодключения.ИмяСервера+"/"+НастройкаПодключения.ИмяБазы;
	 
	 СоединениеHTTP = Новый HTTPСоединение(Путь,,НастройкаПодключения.Пользователь,НастройкаПодключения.Пароль);
	 ЗапросHTTP = Новый HTTPЗапрос(Адрес);
	 ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	 
	 
	 Если ОтветHTTP.КодСостояния = 200 Тогда
	     
	     ОтветСтр = ОтветHTTP.ПолучитьТелоКакСтроку();
		 Если Найти(ОтветСтр, "<d:Period>") > 0 Тогда
		 
		 	  РезДанные.Есть = Истина;
		 
		 КонецЕсли; 
	     
	 КонецЕсли; 
 
 	Возврат РезДанные;
 	
 КонецФункции // НайтиЗаписьРегистраВнеш()

 // Функция удаляет запись регистра во внешней базе.
 //
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_СведенияОбмена.
 //  ПсевдоМета - ОбъектМетаданных. 
 //  МодельОбъекта - Структура.
 //
 // Возвращаемое значение:
 //  флВыполнено - Булево.
 //
 Функция УдалитьЗаписьРегистраВнеш(ОбъектОбмена, ПсевдоМета, МодельОбъекта)
	 
	 
	 флВыполнено = Ложь;
	 
	 НастройкаПодключения = ОбъектОбмена.ИнформационнаяБаза;
	 ПризнакОбращения     = бит_мпд_КлиентСервер.ПризнакОбращенияОДата();
	 ОписаниеОбъекта      = ОбъектОбмена.ОписаниеОбъекта; 
	 ИмяОбъектаНаСервисе  = бит_мдм.ПолучитьИмяОбъектаСервиса(ОписаниеОбъекта.Вид);
	 
	 // Новый объект
	 Адрес =  ПризнакОбращения+ИмяОбъектаНаСервисе+"_"+ОписаниеОбъекта.Имя+"("+КлючЗаписиРегистраВнеш(МодельОбъекта)+")";

	 
	 Путь = НастройкаПодключения.ИмяСервера+"/"+НастройкаПодключения.ИмяБазы;
	 
	 СоединениеHTTP = Новый HTTPСоединение(Путь,,НастройкаПодключения.Пользователь,НастройкаПодключения.Пароль);
	 
	 ТелоЗапроса = СериализоватьЗаписьРегистра(ОбъектОбмена, ПсевдоМета, МодельОбъекта);
	 
	 Заголовки = Новый Соответствие;
	 Заголовки.Вставить("1C_OData_DataLoadMode", "true"); // ОбменДанными.Загрузка = Истина
	 
	 ЗапросHTTP = Новый HTTPЗапрос(Адрес, Заголовки);
	 ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	 
	 ОтветHTTP = СоединениеHTTP.Удалить(ЗапросHTTP); // POST
	 
	 Если ОтветHTTP.КодСостояния = 204 Тогда
	     
		 // Запись выполнена - необходимо извлечь из ответа ИД объекта и Код в другой базе.
		 ОтветСтр = ОтветHTTP.ПолучитьТелоКакСтроку();
		 
		 РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.Обмен);
		 РегистрыСведений.бит_мдм_СостоянияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_СостоянияОбъектов.Обработан);
		 флВыполнено = Ложь;
	     
	 Иначе
	     
	     ТекстСообщения = "Delete
	     |%1%
	     |%2%
	     |Ответ:
	     |%3%
	     |%4%";
	     //ТекстСообщения = "КодСостояния: %1%, Ответ сервера: %2%";
	     ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
	     , Адрес
	     , ТелоЗапроса
	     , ОтветHTTP.КодСостояния
	     , ОтветHTTP.ПолучитьТелоКакСтроку());
	     
	     РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.ОшибкаОбмена, ТекстСообщения);
	     
	 КонецЕсли;  // Ответ = 204
	 
	 
	 Возврат флВыполнено;
	 
 КонецФункции // УдалитьЗаписьРегистраВнеш()

 // Функция выполяет сериализацию записи регистра в XML.
 //
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_СведенияОбмена
 //  ПсевдоМета - ОбъектМетаданных 
 //  МодельОбъекта - Структура.
 //
 // Возвращаемое значение:
 //  ДанныеСтр - Строка.
 //
 Функция СериализоватьЗаписьРегистра(ОбъектОбмена, ПсевдоМета, МодельОбъекта, ВключатьИзмерения = Истина)
 
	 ОписаниеОбъекта      = ОбъектОбмена.ОписаниеОбъекта;
	 ИмяОбъектаНаСервисе  = бит_мдм.ПолучитьИмяОбъектаСервиса(ОбъектОбмена.ОписаниеОбъекта.Вид);	 
	 АбсолютныйПрефикс = Справочники.бит_мпд_НастройкиВнешнихПодключений.ПолучитьАбсолютныйПрефикс(ОбъектОбмена.ИнформационнаяБаза);
	 ТегКатегорияЗн = "StandardODATA."+ИмяОбъектаНаСервисе+"_"+ОписаниеОбъекта.Имя;
 	
 	 Запись =  Новый ЗаписьXML;
	 Запись.УстановитьСтроку("UTF-8");
	 
	 Запись.ЗаписатьОбъявлениеXML();	 
	 Запись.ЗаписатьНачалоЭлемента("entry");
		 
	 Запись.ЗаписатьНачалоЭлемента("category");
	 
	 Запись.ЗаписатьАтрибут("term",ТегКатегорияЗн);		
	 Запись.ЗаписатьАтрибут("scheme","http://schemas.microsoft.com/ado/2007/08/dataservices/scheme");		 
	 Запись.ЗаписатьКонецЭлемента();
	 
	 Запись.ЗаписатьНачалоЭлемента("title");
	 Запись.ЗаписатьАтрибут("type","text");		 		 
	 Запись.ЗаписатьКонецЭлемента();
	 
	 Запись.ЗаписатьНачалоЭлемента("updated");
	 Запись.ЗаписатьКонецЭлемента();
	 
	 Запись.ЗаписатьНачалоЭлемента("author");
	 Запись.ЗаписатьКонецЭлемента();
	 
	 Запись.ЗаписатьНачалоЭлемента("summary");
	 Запись.ЗаписатьКонецЭлемента();
	 
	 
	 Запись.ЗаписатьНачалоЭлемента("content");
	 Запись.ЗаписатьАтрибут("type","application/xml");		 
	 
	 Запись.ЗаписатьНачалоЭлемента("m:properties");
	 
	 Запись.ЗаписатьСоответствиеПространстваИмен("d", "http://schemas.microsoft.com/ado/2007/08/dataservices");
	 Запись.ЗаписатьСоответствиеПространстваИмен("m", "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata");	
	 
	 Если ВключатьИзмерения Тогда
		 
		 Для каждого КиЗ Из ПсевдоМета.Измерения Цикл
			 
			 ПсевдоРеквизит = КиЗ.Значение;
			 ТекЗначение = МодельОбъекта.Измерения[КиЗ.Ключ];
			 СериализоватьРеквизит(Запись, ТекЗначение, ПсевдоРеквизит);
			 
		 КонецЦикла; 
		 
	 КонецЕсли; 
	  
	 Для каждого КиЗ Из ПсевдоМета.Реквизиты Цикл
	 
	 	  ПсевдоРеквизит = КиЗ.Значение;
		  ТекЗначение = МодельОбъекта.Реквизиты[КиЗ.Ключ];
		  СериализоватьРеквизит(Запись, ТекЗначение, ПсевдоРеквизит);
	 
	 КонецЦикла; 
	 
	 Запись.ЗаписатьКонецЭлемента(); // M:properties
	 
	 Запись.ЗаписатьКонецЭлемента(); // Content
	 
	 Запись.ЗаписатьКонецЭлемента(); // Entry
	 
	 ДанныеСтр = Запись.Закрыть();
	 
 	Возврат ДанныеСтр;
 	
 КонецФункции // СериализоватьЗаписьРегистра(ОбъектОбмена, ПсевдоМета, МодельОбъекта)
 
 // Функция создает запись регистра сведений во внешней базе.
 //
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_СведенияОбмена
 //  ПсевдоМета - ОбъектМетаданных 
 //  МодельОбъекта - Структура.
 //
 // Возвращаемое значение:
 //  флВыполнено - Булево.
 //
 Функция СоздатьЗаписьРегистраВнеш(ОбъектОбмена, ПсевдоМета, МодельОбъекта)
 
	 флВыполнено = Ложь;
	 
	 НастройкаПодключения = ОбъектОбмена.ИнформационнаяБаза;
	 ПризнакОбращения     = бит_мпд_КлиентСервер.ПризнакОбращенияОДата();
	 ОписаниеОбъекта      = ОбъектОбмена.ОписаниеОбъекта; 
	 ИмяОбъектаНаСервисе  = бит_мдм.ПолучитьИмяОбъектаСервиса(ОписаниеОбъекта.Вид);
	 
	 // Новый объект
	 Адрес =  ПризнакОбращения+ИмяОбъектаНаСервисе+"_"+ОписаниеОбъекта.Имя;
	 
	 Путь = НастройкаПодключения.ИмяСервера+"/"+НастройкаПодключения.ИмяБазы;
	 
	 СоединениеHTTP = Новый HTTPСоединение(Путь,,НастройкаПодключения.Пользователь,НастройкаПодключения.Пароль);
	 
	 ТелоЗапроса = СериализоватьЗаписьРегистра(ОбъектОбмена, ПсевдоМета, МодельОбъекта);
	 
	 Заголовки = Новый Соответствие;
	 Заголовки.Вставить("1C_OData_DataLoadMode", "true"); // ОбменДанными.Загрузка = Истина
	 
	 ЗапросHTTP = Новый HTTPЗапрос(Адрес, Заголовки);
	 ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	 
	 ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP); // POST
	 
	 Если ОтветHTTP.КодСостояния = 200 Тогда
	     
	     // Запись выполнена - необходимо извлечь из ответа ИД объекта и Код в другой базе.
	    ОтветСтр = ОтветHTTP.ПолучитьТелоКакСтроку();
	     
	    РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.Обмен);
	    РегистрыСведений.бит_мдм_СостоянияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_СостоянияОбъектов.Обработан);
		
		флВыполнено = Истина;
	     
	 Иначе
	     
	     ТекстСообщения = "POST
	     |%1%
	     |%2%
	     |Ответ:
	     |%3%
	     |%4%";
	     ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
	     , Адрес
	     , ТелоЗапроса
	     , ОтветHTTP.КодСостояния
	     , ОтветHTTP.ПолучитьТелоКакСтроку());
	     
	     РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.ОшибкаОбмена, ТекстСообщения);
	     
	 КонецЕсли;  // Ответ = 201
	 
	 Возврат флВыполнено;
 
 	
 КонецФункции // СоздатьЗаписьРегистраВнеш()

 // Функция перезаписывает запись регистра во внешней базе.
 //
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_СведенияОбмена.
 //  ПсевдоМета - ОбъектМетаданных.
 //  МодельОбъекта - Структура.
 //
 // Возвращаемое значение:
 //  флВыполнено - Булево.
 //
 Функция ЗаписьРегистраВнеш(ОбъектОбмена, ПсевдоМета, МодельОбъекта)
	 
	 флВыполнено = Ложь;
	 
	 НастройкаПодключения = ОбъектОбмена.ИнформационнаяБаза;
	 ПризнакОбращения     = бит_мпд_КлиентСервер.ПризнакОбращенияОДата();
	 ОписаниеОбъекта      = ОбъектОбмена.ОписаниеОбъекта; 
	 ИмяОбъектаНаСервисе  = бит_мдм.ПолучитьИмяОбъектаСервиса(ОписаниеОбъекта.Вид);
	 
	 // Новый объект
	 Адрес =  ПризнакОбращения+ИмяОбъектаНаСервисе+"_"+ОписаниеОбъекта.Имя+"("+КлючЗаписиРегистраВнеш(МодельОбъекта)+")";
	 
	 Путь = НастройкаПодключения.ИмяСервера+"/"+НастройкаПодключения.ИмяБазы;
	 
	 СоединениеHTTP = Новый HTTPСоединение(Путь,,НастройкаПодключения.Пользователь,НастройкаПодключения.Пароль);
	 
	 ТелоЗапроса = СериализоватьЗаписьРегистра(ОбъектОбмена, ПсевдоМета, МодельОбъекта, Ложь);
	 
	 Заголовки = Новый Соответствие;
	 Заголовки.Вставить("1C_OData_DataLoadMode", "true"); // ОбменДанными.Загрузка = Истина
	 
	 ЗапросHTTP = Новый HTTPЗапрос(Адрес, Заголовки);
	 ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	 
	 ОтветHTTP = СоединениеHTTP.Изменить(ЗапросHTTP); // Patch
	 
	 Если ОтветHTTP.КодСостояния = 200 Тогда
	     
	     // Запись выполнена - необходимо извлечь из ответа ИД объекта и Код в другой базе.
	     ОтветСтр = ОтветHTTP.ПолучитьТелоКакСтроку();
	     
		 // Регистрация состояния и события объекта обмена.
		 
		 РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.Обмен);
		 РегистрыСведений.бит_мдм_СостоянияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_СостоянияОбъектов.Обработан);
		 флВыполнено = Истина;
		 
	     
	 Иначе
	     
	     ТекстСообщения = "PUT
	     |%1%
	     |%2%
	     |Ответ:
	     |%3%
	     |%4%";
	     //ТекстСообщения = "КодСостояния: %1%, Ответ сервера: %2%";
	     ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
	     , Адрес
	     , ТелоЗапроса
	     , ОтветHTTP.КодСостояния
	     , ОтветHTTP.ПолучитьТелоКакСтроку());
	     
	     РегистрыСведений.бит_мдм_СобытияОбъектов.Зарегистрировать(ОбъектОбмена, Перечисления.бит_мдм_События.ОшибкаОбмена, ТекстСообщения);
	     
	 КонецЕсли;  // Ответ = 201
	 
	 Возврат флВыполнено;
 
 КонецФункции // ЗаписьРегистраВнеш()
 
 // Процедура отправляет запись регистра во внешнюю базу.
 //
 // Параметры:
 //  ОбъектОбмена - СправочникСсылка.бит_мдм_СведенияОбмена.
 //
 Процедура ОтправитьЗаписьРегистра(ОбъектОбмена)
 
	 ОписаниеОбъекта  = ОбъектОбмена.ОписаниеОбъекта;
	 ПсевдоМета = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданные(ОписаниеОбъекта, "Структура");
	 МодельОбъекта = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьОбъект(ОбъектОбмена, ПсевдоМета);
		 
	 РезДанные = НайтиЗаписьРегистраВнеш(ОбъектОбмена, ПсевдоМета, МодельОбъекта);
	 
	 Если РезДанные.Есть Тогда
		 
		 Если ОбъектОбмена.ПометкаУдаления Тогда
			 ФлВыполнено = УдалитьЗаписьРегистраВнеш(ОбъектОбмена, ПсевдоМета, МодельОбъекта);
		 Иначе	
			 ФлВыполнено = ЗаписьРегистраВнеш(ОбъектОбмена, ПсевдоМета, МодельОбъекта);
		 КонецЕсли; 
		 
	 Иначе	
		 
		 // Новая запись регистра.
		 ФлВыполнено = СоздатьЗаписьРегистраВнеш(ОбъектОбмена, ПсевдоМета, МодельОбъекта);
		 
	 КонецЕсли; 
 
 КонецПроцедуры // ОтправитьЗаписьРегистра()
 
#КонецОбласти

 // Функция считывает идентификатор и код объекта из XML ответа.
 // 
 // Параметры:
 //   ОтветСтр - Строка.
 // 
 // Возвращаемое значение:
 //  РезДанные - Структура.
 // 
 Функция ПрочитатьИдентификатор(ОтветСтр) 
	 
	 РезДанные = Новый Структура("ИД, Код", "", "");
	 
	 Чтение = Новый ЧтениеXML;
	 Чтение.УстановитьСтроку(ОтветСтр);
	 
	 ИмяУзла = "";
	 Пока Чтение.Прочитать() Цикл
		 
		 Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			 И (Чтение.Имя = "d:Ref_Key" ИЛИ Чтение.Имя = "d:Code") Тогда
			 
			 ИмяУзла = Чтение.Имя;
			 
		 КонецЕсли; 
		 
		 Если ЗначениеЗаполнено(ИмяУзла) Тогда
			 
			 Если Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
				 
				 Если ИмяУзла = "d:Ref_Key" Тогда
					 
					 РезДанные.ИД = Чтение.Значение;
					 
				 КонецЕсли; 
				 
				 Если ИмяУзла = "d:Code" Тогда
					 
					 РезДанные.Код = Чтение.Значение;
					 
				 КонецЕсли; 
				 
				 Если ЗначениеЗаполнено(РезДанные.ИД) 
					  И ЗначениеЗаполнено(РезДанные.Код) Тогда
				 
				 	 Прервать;
				 
				 КонецЕсли; 
				 
			 КонецЕсли; 
			 
			 Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				 
				 ИмяУзла = "";
				 
			 КонецЕсли; 
			 
		 КонецЕсли; 
		 
	 КонецЦикла; // Чтение XML
	 
	 Возврат РезДанные;
	 
 КонецФункции // ПрочитатьИдентификатор()

 // Функция получает значение поиска в зависимости от способа поиска.
 // 
 // Возвращаемое значение:
 //  ЗначениеПоиска - Произвольный.
 // 
 Функция ПолучитьЗначениеПоиска(ОбъектОбмена, Способ)
	 
	 СпособыПоиска = Перечисления.бит_мдм_СпособыПоиска;
	 
	 Если Способ = СпособыПоиска.Код Тогда
		 
		 ЗначениеПоиска = ОбъектОбмена.КодОбъекта;
		 
	 ИначеЕсли Способ = СпособыПоиска.Наименование Тогда
		 
		 ЗначениеПоиска = ОбъектОбмена.Наименование;
		 
	 ИначеЕсли Способ = СпособыПоиска.ИД Тогда
		 
		 ЗначениеПоиска = ОбъектОбмена.ИД_Внешний;
		 
	 Иначе
		 
		 ЗначениеПоиска = ОбъектОбмена.ИД_Внешний;
		 
	 КонецЕсли; 
	 
	 Возврат ЗначениеПоиска;
	 
 КонецФункции // ПолучитьЗначениеПоиска()

 // Функция конвертирует входящее значение в значение пригодное для отправки через HTTP.
 //
 // Параметры:
 //   вхЗначение - Произвольный.
 //
 // Возвращаемое значение:
 //  РезДанные - Структура.
 //
 Функция ПолучитьЗначениеДляОтправки(вхЗначение)
 
	 РезДанные = Новый Структура("Значение, Тип", "", "" );
	 
	 Если ТипЗнч(вхЗначение) = Тип("Строка") Тогда
		 
		 РезДанные.Значение = вхЗначение;
		 РезДанные.Тип      = "Edm.String";				 				 
		 
	 ИначеЕсли ТипЗнч(вхЗначение) = Тип("Булево") Тогда
		 
		 РезДанные.Значение = Формат(вхЗначение, "БЛ=false; БИ=true");
		 РезДанные.Тип      = "Edm.Boolean";				 				 				 
		 
	 ИначеЕсли ТипЗнч(вхЗначение) = Тип("Число") Тогда
		 
		 РезДанные.Значение = Формат(вхЗначение, "ЧРД=.; ЧГ=0");
		 РезДанные.Тип      = "Edm.Double";				 				 				 
		 
	 ИначеЕсли ТипЗнч(вхЗначение) = Тип("Дата") Тогда
		 
		 РезДанные.Значение = Формат(вхЗначение, "ДФ=yyyy-MM-ddTHH:mm:ss; ДП=0001-01-01");
		 РезДанные.Тип      = "Edm.DateTime";				 				 				 
		 
	 ИначеЕсли ТипЗнч(вхЗначение) = Тип("Неопределено") 
		 ИЛИ ТипЗнч(вхЗначение) = Тип("Null") Тогда	 
		 
		 РезДанные.Значение = "";
		 РезДанные.Тип      = "StandardODATA.Undefined";				 
		 
	 Иначе
		 
		 РезДанные.Значение = "";
		 РезДанные.Тип      = "StandardODATA.Undefined";
		 
	 КонецЕсли; 
	 
	 Возврат РезДанные;
 	
 КонецФункции // ПолучитьЗначениеДляОтправки()

 // Функция сериализовывает реквизит объекта.
 // 
 // Параметры:
 //   Запись - ЗаписьXML.
 //   вхЗначение - Произвольный.
 //   ПсевдоМетаРеквизит - ОбъектМетаданных.
 // 
 Процедура СериализоватьРеквизит(Запись, вхЗначение, ПсевдоМетаРеквизит)
	 
	 ИмяРеквизитаРу = ПсевдоМетаРеквизит.Имя; 
	 ИмяРеквизита   =  бит_мпд_ВнешниеИсточникиСервер.ПеревестиИмяПоля(ИмяРеквизитаРу, "en");
	 
	 Если ТипЗнч(вхЗначение) = Тип("СправочникСсылка.бит_мдм_ОбъектыОбмена") 
		 ИЛИ ТипЗнч(вхЗначение) = Тип("СправочникСсылка.бит_мдм_ОбъектыОбменаИерархияЭлементов")
		 ИЛИ ТипЗнч(вхЗначение) = Тип("СправочникСсылка.бит_мдм_ПланыВидовХарактеристикОбмена") 
		 ИЛИ ТипЗнч(вхЗначение) = Тип("СправочникСсылка.бит_мдм_СчетаОбмена") Тогда
		 
		 // Реквизиты ссылочных типов
		 Запись.ЗаписатьНачалоЭлемента("d:"+ИмяРеквизита+"_Key");		 
		 
		 Если НЕ ЗначениеЗаполнено(вхЗначение) Тогда
			 
			 // Пустая ссылка
			 Запись.ЗаписатьТекст("00000000-0000-0000-0000-000000000000");
			 Запись.ЗаписатьКонецЭлемента();			 
			 
		 Иначе	
			 
			 Если ЗначениеЗаполнено(вхЗначение.ИД_Внешний) Тогда
				 
				 Запись.ЗаписатьТекст(вхЗначение.ИД_Внешний);
				 
			 Иначе	
				 
				 // Ссылка еще не отправлена во внешнюю базу - отправляем и записываем новый ИД.
				 ОтправитьОбъект(вхЗначение);
				 Если НЕ ЗначениеЗаполнено(вхЗначение.ИД_Внешний) Тогда
					 Запись.ЗаписатьТекст("00000000-0000-0000-0000-000000000000");
				 Иначе	
					 Запись.ЗаписатьТекст(вхЗначение.ИД_Внешний);					 
				 КонецЕсли; 
				 
			 КонецЕсли; 
			 Запись.ЗаписатьКонецЭлемента();			 
			 
			 Если ПсевдоМетаРеквизит.Составной Тогда
				 
				 ТипДляОтправки = "StandardODATA.%ИмяОбъектаНаСервисе%_"+вхЗначение.ОписаниеОбъекта.Имя;
				 
				 ИмяОбъектаНаСервисе = бит_мдм.ПолучитьИмяОбъектаСервиса(вхЗначение.ОписаниеОбъекта.Вид);	 
				 ТипДляОтправки = СтрЗаменить(ТипДляОтправки, "%ИмяОбъектаНаСервисе%"    , ИмяОбъектаНаСервисе);
				 
				 Запись.ЗаписатьНачалоЭлемента("d:"+ИмяРеквизита+"_Type");
				 Запись.ЗаписатьТекст(ТипДляОтправки);
				 Запись.ЗаписатьКонецЭлемента();
				 
			 КонецЕсли;	 
			 
		 КонецЕсли; 
		 
	 ИначеЕсли ТипЗнч(вхЗначение) = Тип("СправочникСсылка.бит_мдм_ЗначенияПеречислений") Тогда
		 
		 Запись.ЗаписатьНачалоЭлемента("d:"+ИмяРеквизита+"_Key");
		 Запись.ЗаписатьТекст(вхЗначение.Имя);
		 Запись.ЗаписатьКонецЭлемента();			 
		 
	 ИначеЕсли ЗначениеЗаполнено(ПсевдоМетаРеквизит.видОбъекта) И ЗначениеЗаполнено(ПсевдоМетаРеквизит.ИмяОбъекта) Тогда
		 
		 // Это ссылочный реквизит, но сейчас пустой
		 Запись.ЗаписатьНачалоЭлемента("d:"+ИмяРеквизита+"_Key");
		 Запись.ЗаписатьТекст("00000000-0000-0000-0000-000000000000");
		 Запись.ЗаписатьКонецЭлемента();			 
		 
	 Иначе	
		 
		 // Реквизиты примитивных типов
		 Запись.ЗаписатьНачалоЭлемента("d:"+ИмяРеквизита);
		 
		 РезДанные = ПолучитьЗначениеДляОтправки(вхЗначение);
		 ЗначениеДляОтправки = РезДанные.Значение;
		 ТипДляОтправки      = РезДанные.Тип;
		 
		 Если ЗначениеЗаполнено(ЗначениеДляОтправки) Тогда
			 
			 Запись.ЗаписатьТекст(ЗначениеДляОтправки);
			 
		 Иначе
			 
			 ТипДляОтправки = "StandardODATA.Undefined";
			 
		 КонецЕсли; 
		 Запись.ЗаписатьКонецЭлемента();
		 
		 Если ПсевдоМетаРеквизит.Составной Тогда
			 
			 // Тип для поля составного типа
			 Запись.ЗаписатьНачалоЭлемента("d:"+ИмяРеквизита+"_Type");
			 Запись.ЗаписатьТекст(ТипДляОтправки);
			 Запись.ЗаписатьКонецЭлемента();
			 
		 КонецЕсли; 
		 
	 КонецЕсли; 
	 
	 
 КонецПроцедуры // ПреобразоватьЗначениеВнеш() 

#КонецОбласти
