
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыИФункцииДляРаботыСРедакторомФормул

// Процедура открывает редактор формул.
// 
// Параметры:
//  ЭтаФорма    - УправляемаяФорма
//  МакетОтчета - ТабличныйДокумент (По умолчанию = Неопределно).
// 
Процедура ОткрытьРедакторФормул(ЭтаФорма, МакетОтчета = Неопределено) Экспорт

	Элементы = ЭтаФорма.Элементы;
	
	// Если МакетОтчета <> Неопределено Тогда
	// КонецЕсли;
	
	МассивОбластей = ПолучитьМассивОбластей(МакетОтчета);
	Если МассивОбластей.Количество() <> 1 Тогда
		 ТекстПредупреждения = Нстр("ru = 'Для ввода формулы выделите одну ячейку.'");
		 ПоказатьПредупреждение(,ТекстПредупреждения);
		 Возврат;
	КонецЕсли; 
	
	ТекущаяОбластьМакета     = МассивОбластей[0];
	ИмяОбластиПолучатель     = ТекущаяОбластьМакета.Имя;
    Если ЭтаФормаНастроекФормВводаБюджета(ЭтаФорма.ИмяФормы) Тогда
	    СинонимОбластиПолучатель = бит_БюджетированиеКлиент.ПользовательскоеПредставлениеФормулы(ЭтаФорма.ТабДокДанные, "["+ТекущаяОбластьМакета.Имя+"]");
	  	ЗаголовокРедактораФормул = Нстр("ru = 'Редактор формулы: %1%'");
	    ЗаголовокРедактораФормул = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ЗаголовокРедактораФормул, СинонимОбластиПолучатель);
	Иначе
		ЗаголовокРедактораФормул = Нстр("ru = 'Редактор формулы: [%1%]'");
		ЗаголовокРедактораФормул = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ЗаголовокРедактораФормул, ИмяОбластиПолучатель);
    КонецЕсли;

	
	Если ЭтаФорма.рфРедакторФормулОткрыт И ЭтаФорма.рфФормула <> ЭтаФорма.рфСтараяФормула Тогда
	 	ТекстСообщения = Нстр("ru = 'Не закончен ввод предыдущей формулы.'") + Символы.ПС
		 				+ Нстр("ru = 'Для окончания ввода закройте окно редактора или нажмите кнопку ""=""(равно) в окне редактора.'");
		ПоказатьПредупреждение(,ТекстПредупреждения, , ЗаголовокРедактораФормул);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтаФормаНастроекФормВводаБюджета(ЭтаФорма.ИмяФормы) Тогда
		СтрокаПравил = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ИмяОбластиПолучатель, ЭтаФорма.ПравилаЗаполнения);
		
		// Параметря для обработки оповещения
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЭтаФорма",                 ЭтаФорма);
		ДопПараметры.Вставить("ЗаголовокРедактораФормул", ЗаголовокРедактораФормул);
		ДопПараметры.Вставить("ИмяОбластиПолучатель",     ИмяОбластиПолучатель);

		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросДобавитьЯчейкуФормула", бит_РедакторФормулКлиент, ДопПараметры);
		
		Если СтрокаПравил = Неопределено Тогда
			
			ДопПараметры.Вставить("ЭтоДобавление", Истина);
			
			// Обработка новой строки правил заполнения		
			ТекстВопроса = Нстр("ru = 'Добавить в правила ячейку с видом ""Формула""?'");
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
			
		Иначе	
			
			// Обработка существующей строки правил заполнения.
			
			Если СтрокаПравил.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула") Тогда
				
				ТекущаяФормула = СтрокаПравил.Формула;;
				ЭтаФорма.рфФормула       = ТекущаяФормула;
				ЭтаФорма.рфСтараяФормула = ТекущаяФормула;
				Элементы.рфСтрокаНазад.СписокВыбора.Вставить(0, Новый УникальныйИдентификатор(), ТекущаяФормула);
				
				ЭтаФорма.рфИмяОбластиПолучатель = ИмяОбластиПолучатель;
				бит_РедакторФормулКлиентСервер.рф_ОткрытьСервер(ЭтаФорма, ЗаголовокРедактораФормул);
				
			Иначе
				
				ДопПараметры.Вставить("ЭтоДобавление", Ложь);
				
				ТекстВопроса = Нстр("ru = 'Установить вид ячейки в значение ""Формула""?'");
				ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЭтаФорма.рфИмяОбластиПолучатель = ИмяОбластиПолучатель;
		бит_РедакторФормулКлиентСервер.рф_ОткрытьСервер(ЭтаФорма, ЗаголовокРедактораФормул);

    КонецЕсли;
		
КонецПроцедуры // ОткрытьРедакторФормул()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  ДопПараметры - Структура.
// 
Процедура ВопросДобавитьЯчейкуФормула(Ответ, ДопПараметры) Экспорт

	ЭтаФорма                 = ДопПараметры.ЭтаФорма;
	ЗаголовокРедактораФормул = ДопПараметры.ЗаголовокРедактораФормул;
	ИмяОбластиПолучатель     = ДопПараметры.ИмяОбластиПолучатель;
			
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ДопПараметры.ЭтоДобавление Тогда
			// Это добавление правила заполнения
			ЭтаФорма.рфЭтоДобавление = Истина;
		КонецЕсли;
		
		ЭтаФорма.рфИмяОбластиПолучатель = ИмяОбластиПолучатель;
		бит_РедакторФормулКлиентСервер.рф_ОткрытьСервер(ЭтаФорма, ЗаголовокРедактораФормул);

	КонецЕсли;

КонецПроцедуры // ВопросДобавитьЯчейкуФормула()

// Процедура выполняет действия при изменении формулы.
// 
// Параметры:
//  ЭтаФорма   - УправляемаяФорма
//  ЭтоОчистка - Булево (По умолчанию = Ложь).
// 
Процедура ПриИзмененииФормулы(ЭтаФорма, ЭтоОчистка = Ложь) Экспорт

	Элементы = ЭтаФорма.Элементы;
	
	ТекущаяФормула   = ЭтаФорма.рфФормула;
	ТекущийЗаголовок = Элементы.ГруппаРедакторФормул.Заголовок;
	
	Если ЭтаФорма.рфФормула <> ЭтаФорма.рфСтараяФормула Тогда
		
		Если Прав(ТекущийЗаголовок, 1) <> "*" Тогда
			Элементы.ГруппаРедакторФормул.Заголовок = ТекущийЗаголовок + " *";
		КонецЕсли;
		
	Иначе
		
		Если Прав(ТекущийЗаголовок, 1) = "*" Тогда
			Элементы.ГруппаРедакторФормул.Заголовок = Лев(ТекущийЗаголовок, СтрДлина(ТекущийЗаголовок)-2);
		КонецЕсли;
														
	КонецЕсли;
    
	//ИсторияФормул = Элементы.рфСтрокаНазад.СписокВыбора;
	//Если ЭтоОчистка Тогда
	//    Если ИсторияФормул.Количество() = 0 ИЛИ ИсторияФормул[0].Представление <> "Очистка формулы" Тогда
	//        ИсторияФормул.Вставить(0, Новый УникальныйИдентификатор(), "Очистка формулы");
	//    КонецЕсли;		
	//Иначе	
	//    Если ИсторияФормул.Количество() = 0 ИЛИ ИсторияФормул[0].Представление <> ТекущаяФормула Тогда
	//        ИсторияФормул.Вставить(0, Новый УникальныйИдентификатор(), ТекущаяФормула);
	//    КонецЕсли;
	//КонецЕсли;   	

КонецПроцедуры // ПриИзмененииФормулы()

// Процедура анализирует формулу.
// 
// Параметры:
//  ЭтаФорма    - УправляемаяФорма.
//  МакетОтчета - ТабличныйДокумент.
// 
Процедура АнализЗначенияВводФормул(ЭтаФорма, МакетОтчета, ПравилаЗаполнения = Неопределено) Экспорт

	ЭтаФорма.рфВыбранныеОбласти.Очистить();
	
	МассивОбластей     = ПолучитьМассивОбластей(МакетОтчета);
	КоличествоОбластей = МассивОбластей.Количество();
    
    ЭтоНастройкаФВБ = ЭтаФормаНастроекФормВводаБюджета(ЭтаФорма.ИмяФормы);
    
	Для каждого Область Из МассивОбластей Цикл
		
		// Убираем возможности добавления ячейки для которой мы вводим формулу.
		Если ЭтоНастройкаФВБ Тогда
			Если Область.Имя = ЭтаФорма.фИмяЯчейкиВводФормулы Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ЭтаФорма.рфВыбранныеОбласти.Добавить();
		Если ЭтоНастройкаФВБ Тогда
			НоваяСтрока.ИмяОбласти       = Область.Имя;			
			НоваяСтрока.ЗаголовокОбласти = бит_БюджетированиеКлиент.ПользовательскоеПредставлениеФормулы(ЭтаФорма.ТабДокДанные, "["+Область.Имя+"]");
		Иначе
			НоваяСтрока.ИмяОбласти       = "["+Область.Имя+"]";
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры // АнализЗначенияВводФормул()

// Процедура - обработчик простых команд:
// "РедакторФормул_Цифра", "РедакторФормул_Запятая", "РедакторФормул_СкобкаЛевая", "РедакторФормул_СкобкаПравая",
// "РедакторФормул_Плюс" , "РедакторФормул_Минус"  , "РедакторФормул_Умножить"   , "РедакторФормул_Разделить",
// "РедакторФормул_Обратное".
// 
// Параметры:
//  Команда  - КомандаФормы
//  ЭтаФорма - УправляемаяФорма
// 
Процедура РедакторФормул_ПростыеКоманды(Команда, ЭтаФорма) Экспорт
	
	ИмяКоманды = Команда.Имя;
		
	Если Лев(ИмяКоманды, 20) = "РедакторФормул_Цифра" Тогда
	 	РезультатИзменений = Прав(Команда.Имя, 1);
		
	ИначеЕсли ИмяКоманды = "РедакторФормул_Запятая" Тогда	
		РезультатИзменений = ".";
		
	ИначеЕсли ИмяКоманды = "РедакторФормул_СкобкаЛевая" Тогда	
		РезультатИзменений = "(";
		
	ИначеЕсли ИмяКоманды = "РедакторФормул_СкобкаПравая" Тогда	
		РезультатИзменений = ")";	
		
	ИначеЕсли ИмяКоманды = "РедакторФормул_Плюс" Тогда	
		РезультатИзменений = "+";
		
	ИначеЕсли ИмяКоманды = "РедакторФормул_Минус" Тогда	
		РезультатИзменений = "-";
		
	ИначеЕсли ИмяКоманды = "РедакторФормул_Умножить" Тогда	
		РезультатИзменений = "*";
		
	ИначеЕсли ИмяКоманды = "РедакторФормул_Разделить" Тогда	
		РезультатИзменений = "/";	
		
	ИначеЕсли ИмяКоманды = "РедакторФормул_Обратное" Тогда	
		РезультатИзменений = "1/(" + ЭтаФорма.Элементы.рфФормула.ВыделенныйТекст + ")";
		
	КонецЕсли;
	
	ЭтаФорма.Элементы.рфФормула.ВыделенныйТекст = РезультатИзменений;	
	ПриИзмененииФормулы(ЭтаФорма);
			
КонецПроцедуры // РедакторФормул_ПростыеКоманды()

// Процедура - обработчик команды "РедакторФормул_Функция".
// 
// Параметры:
//  Команда  - КомандаФормы
//  ЭтаФорма - УправляемаяФорма
// 
Процедура РедакторФормул_Очистить(ЭтаФорма) Экспорт
	
	ЭтаФорма.рфФормула = "";	
	ПриИзмененииФормулы(ЭтаФорма, Истина); 	
	
КонецПроцедуры // РедакторФормул_Очистить()

// Процедура - обработчик команды "РедакторФормул_Функция".
// 
// Параметры:
//  Команда  - КомандаФормы
//  ЭтаФорма - УправляемаяФорма
// 
Процедура РедакторФормул_Функция(Команда, ЭтаФорма) Экспорт
	
	Если ЭтаФорма.рфВыбранныеОбласти.Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Для ввода функции нужно выбрать в макете хотя бы одну область!'");
		ПоказатьПредупреждение(, ТекстСообщения,);
		Возврат;
	КонецЕсли; 
	 	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныеОбласти", ЭтаФорма.рфВыбранныеОбласти);
	ПараметрыФормы.Вставить("ВладелецИмяФормы", ЭтаФорма.ИмяФормы);
	
	ОповещениеЗакрытияФормы = Новый ОписаниеОповещения("ЗакрытиеФормыВводаФункции", бит_РедакторФормулКлиент, ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВводаФункцииУправляемая", ПараметрыФормы, ЭтаФорма,,,, ОповещениеЗакрытияФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // РедакторФормул_Функция()

// Обработка оповещения закрытия формы. 
// 
// Параметры:
//  Результат - Строка.
//  ЭтаФорма  - Управляемая Форма.
// 
Процедура ЗакрытиеФормыВводаФункции(Результат, ЭтаФорма) Экспорт
	
	Если ЭтаФормаНастроекФормВводаБюджета(ЭтаФорма.ИмяФормы) Тогда
		
		ФормулаВыражение = бит_БюджетированиеКлиент.ПолучитьФормулуИзПредставления(ЭтаФорма.ТабДокДанные, Результат);
		ЭтаФорма.Формула = ФормулаВыражение;
		
		Результат = СтрЗаменить(Результат, "[[", "[");
		Результат = СтрЗаменить(Результат, "]]", "]");	
		ЭтаФорма.Элементы.рфФормула.ВыделенныйТекст = Результат;	
		ПриИзмененииФормулы(ЭтаФорма);
		
		
	Иначе	
		
		Если ТипЗнч(Результат) = Тип("Строка") И Не ПустаяСтрока(Результат) Тогда
			ЭтаФорма.Элементы.рфФормула.ВыделенныйТекст = Результат;
			ПриИзмененииФормулы(ЭтаФорма);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеФормыВводаФункции()

// Процедура - обработчик команды "РедакторФормул_Вернуть".
// 
// Параметры:
//  ЭтаФорма - УправляемаяФорма
// 
Процедура РедакторФормул_Вернуть(ЭтаФорма) Экспорт

	Элементы = ЭтаФорма.Элементы;
	
	Если Элементы.рфСтрокаНазад.СписокВыбора.Количество() > 1 Тогда
		Элементы.рфСтрокаНазад.СписокВыбора.Удалить(0);
		ЭтаФорма.рфФормула = Элементы.рфСтрокаНазад.СписокВыбора[0];
	КонецЕсли;	

КонецПроцедуры // РедакторФормул_Вернуть()

// Процедура - обработчик команд "РедакторФормул_Равно", "РедакторФормул_ОК" и "РедакторФормул_Закрыть".
// 
// Параметры:
//  Команда  		  - КомандаФормы
//  ЭтаФорма 		  - УправляемаяФорма
//  СтруктураИмени    - Структура("МаксНомерОбласти, Префикс, ДлинаИмени")
//  ПравилаЗаполнения - ДанныеФормыКоллекция
//  МакетОтчета 	  - ТабличныйДокумент.
// 
Процедура РедакторФормул_ЗавершитьРедактирование(Команда, ЭтаФорма, СтруктураИмени, ПравилаЗаполнения, МакетОтчета) Экспорт
	
	Если Команда.Имя = "РедакторФормул_Закрыть" Тогда
			
		Если ЭтаФорма.рфРедакторФормулОткрыт И ЭтаФорма.рфФормула <> ЭтаФорма.рфСтараяФормула Тогда
			
			ТекстВопроса = НСтр("ru = 'Формула изменена, принять изменения?'");
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ЭтаФорма",          ЭтаФорма);
			ДопПараметры.Вставить("СтруктураИмени",    СтруктураИмени);
			ДопПараметры.Вставить("ПравилаЗаполнения", ПравилаЗаполнения);
			ДопПараметры.Вставить("МакетОтчета",       МакетОтчета);
   
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗаверщитьРедактирование", бит_РедакторФормулКлиент, ДопПараметры);
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
			
		Иначе
			бит_РедакторФормулКлиентСервер.рф_ЗакрытьСервер(ЭтаФорма);
		КонецЕсли;
		
	Иначе
		
		ПринятьИзменения(ЭтаФорма, СтруктураИмени, ПравилаЗаполнения, МакетОтчета);
		
		бит_РедакторФормулКлиентСервер.рф_ЗакрытьСервер(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // РедакторФормул_ЗавершитьРедактирование()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  ДопПараметры - Структура.
// 
Процедура ВопросЗаверщитьРедактирование(Ответ, ДопПараметры) Экспорт

	ЭтаФорма = ДопПараметры.ЭтаФорма;
	СтруктураИмени = ДопПараметры.СтруктураИмени;
	ПравилаЗаполнения = ДопПараметры.ПравилаЗаполнения;
	МакетОтчета = ДопПараметры.МакетОтчета;

	Если Ответ = КодВозвратаДиалога.Да Тогда 			
		ПринятьИзменения(ЭтаФорма, СтруктураИмени, ПравилаЗаполнения, МакетОтчета);   						
	КонецЕсли;

	бит_РедакторФормулКлиентСервер.рф_ЗакрытьСервер(ЭтаФорма);
	
КонецПроцедуры // ВопросЗаверщитьРедактирование()

// Процедура анализирует формулу.
// 
// Параметры:
//  ЭтаФорма - УправляемаяФорма
// 
Процедура ВыбранныеОбластиВыбор(ЭтаФорма) Экспорт
	
	ТекущиеДанные = ЭтаФорма.Элементы.рфВыбранныеОбласти.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЭтаФормаНастроекФормВводаБюджета(ЭтаФорма.ИмяФормы) Тогда
	    ЭтаФорма.Элементы.рфФормула.ВыделенныйТекст = "" + ТекущиеДанные.ЗаголовокОбласти + "";
    Иначе
	    ЭтаФорма.Элементы.рфФормула.ВыделенныйТекст = "" + ТекущиеДанные.ИмяОбласти + "";
	КонецЕсли;
	
	ПриИзмененииФормулы(ЭтаФорма);
	
КонецПроцедуры // ВыбранныеОбластиВыбор()

// Процедура анализирует формулу.
// 
// Параметры:
//  ЭтаФорма 		  - УправляемаяФорма
//  ВыбранноеЗначение - Произвольный.
// 
Процедура СтрокаНазадОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущийСписокДействий = ЭтаФорма.Элементы.рфСтрокаНазад.СписокВыбора;
	ЭлементСписка = ТекущийСписокДействий.НайтиПоЗначению(ВыбранноеЗначение); 	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.рфФормула = ?(ЭлементСписка.Представление = "Очистка формулы"
							, ""
							, ЭлементСписка.Представление);
	
	ИндексЭлемента     = ТекущийСписокДействий.Индекс(ЭлементСписка);
	Пока ИндексЭлемента > 0 Цикл
		ЭтаФорма.Элементы.рфСтрокаНазад.СписокВыбора.Удалить(0);
		ИндексЭлемента = ИндексЭлемента - 1;	
	КонецЦикла;

КонецПроцедуры // СтрокаНазадОбработкаВыбора()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция определяет является ли эта форма формой справочника настроек форм ввода бюджета.
// 
// Параметры:
//  ИмяФормы - Строка
//  
// Возвращаемое значение:
//   Булево
//
Функция ЭтаФормаНастроекФормВводаБюджета(ИмяФормы)

	Возврат Найти(ИмяФормы, "НастройкиФормВводаБюджета") <> 0;

КонецФункции // ЭтаФормаНастроекФормВводаБюджета()

// Функция производит поиск строки правил заполнения по имени области.
// 
// Параметры:
//  ИмяОбласти 		  - Строка
//  ПравилаЗаполнения - ДанныеФормыКоллекция.
//  
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции
// 
Функция НайтиСтрокуПравилЗаполненияПоИмениОбласти(ИмяОбласти, ПравилаЗаполнения)

	СтрокаПравил = Неопределено;
	
	НайденныеСтрокиПравил = ПравилаЗаполнения.НайтиСтроки(Новый Структура("ИмяОбласти", ИмяОбласти));	
	Если НайденныеСтрокиПравил.Количество() > 0 Тогда
		СтрокаПравил = НайденныеСтрокиПравил[0];
	КонецЕсли;

	Возврат СтрокаПравил;
	
КонецФункции // НайтиСтрокуПравилЗаполненияПоИмениОбласти()

// Функция формирует уникальное в пределах макета имя.
// 
// Параметры:
//  ТабДокумент    - ТабличныйДокумент
//  СтруктураИмени - Структура("МаксНомерОбласти, Префикс, ДлинаИмени").
// 
// Возвращаемое значение:
//   Строка
// 
Функция СформироватьУникальноеИмяОбласти(ТабДокумент, СтруктураИмени)

	КонтрольнаяОбласть = "ВыполнимХотябыОдинРаз";
	Пока КонтрольнаяОбласть <> Неопределено Цикл
		
		СтруктураИмени.Вставить("МаксНомерОбласти", СтруктураИмени.МаксНомерОбласти + 1);
		ИмяОбласти         = бит_мпд_КлиентСервер.СформироватьИмяОбласти(СтруктураИмени.Префикс, СтруктураИмени.МаксНомерОбласти, СтруктураИмени.ДлинаИмени);
		КонтрольнаяОбласть = бит_мпд_КлиентСервер.ПолучитьОбластьЯчеек(ТабДокумент, ИмяОбласти);
		
	КонецЦикла; 

    Возврат ИмяОбласти;
	
КонецФункции // СформироватьУникальноеИмяОбласти()

// Формурует массив областей.
// 
// Параметры:
//  МакетОтчета - ТабличныйДокумент.
// 
Функция ПолучитьМассивОбластей(МакетОтчета)
	
	МассивОбластей = Новый Массив;
		        
	ВыделенныеОбласти = МакетОтчета.ВыделенныеОбласти;
	Для каждого ОблМакета Из ВыделенныеОбласти Цикл
		
		Если ОблМакета = Неопределено Тогда 		
			Продолжить;  		
		КонецЕсли; 
		
		Право  = ОблМакета.Право;
		Низ    = ОблМакета.Низ;
		
		Для ИндексСтроки = ОблМакета.Верх По Низ  Цикл
			Для ИндексКолонки = ОблМакета.Лево По Право  Цикл
				
				Адрес = ?(ИндексСтроки = 0, "", "R" + ИндексСтроки)
						+ ?(ИндексКолонки = 0, "", "C" + ИндексКолонки);
						
				 
				Если Не ПустаяСтрока(Адрес) Тогда
					
					ТекущееЗначение = МакетОтчета.Область(Адрес);		
					Если Не бит_РаботаСКоллекциямиКлиентСервер.МассивСодержит(МассивОбластей, ТекущееЗначение) Тогда				  
				  		МассивОбластей.Добавить(ТекущееЗначение);				  
					КонецЕсли;
					
			  	КонецЕсли;
			  
			КонецЦикла;
		КонецЦикла; 
	
	КонецЦикла; 
   	
	Возврат МассивОбластей;
	
КонецФункции // ПолучитьМассивОбластей()

// Процедура применяет изменения формулы из редактора.
// 
// Параметры:
//  ЭтаФорма 		  - УправляемаяФорма
//  СтруктураИмени    - Структура("МаксНомерОбласти, Префикс, ДлинаИмени")
//  ПравилаЗаполнения - ДанныеФормыКоллекция
//  МакетОтчета 	  - ТабличныйДокумент (Необязательный, по умолчанию = Неопределено).
// 
Процедура ПринятьИзменения(ЭтаФорма, СтруктураИмени, ПравилаЗаполнения, МакетОтчета = Неопределено)

	// Если МакетОтчета <> Неопределено Тогда	
	// КонецЕсли;
	
	// Поиск области макета
	ОблМакета = бит_мпд_Клиент.ПолучитьОбластьЯчеек(МакетОтчета, ЭтаФорма.рфИмяОбластиПолучатель);
	Если ОблМакета = Неопределено Тогда
		
		ТекстСообщения = Нстр("ru = 'Не найдена область макета.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			 
		Возврат;
		
	Иначе
		
		Если ЭтаФорма.рфЭтоДобавление И бит_МеханизмПолученияДанных.ИмяОбластиТиповое(ЭтаФорма.рфИмяОбластиПолучатель) Тогда
			ЭтаФорма.рфИмяОбластиПолучатель = СформироватьУникальноеИмяОбласти(МакетОтчета, СтруктураИмени);		
		КонецЕсли;
		
		ОблМакета.Имя = ЭтаФорма.рфИмяОбластиПолучатель;
		ОблМакета.Примечание.Текст = ЭтаФорма.рфФормула;
		ОблМакета.СодержитЗначение = Истина;
		
		Если ОблМакета.СодержитЗначение <> Неопределено Тогда  			
			ОблМакета.ТипЗначения = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2));
			Если ОблМакета.ЭлементУправления <> Неопределено Тогда						
				ОблМакета.ЭлементУправления.КнопкаВыбора = Истина;						
			КонецЕсли; 			
		КонецЕсли;
		
	КонецЕсли; 	
	
    // Строка правил заполнения
    СтрокаПравил = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ЭтаФорма.рфИмяОбластиПолучатель, ПравилаЗаполнения);
	Если СтрокаПравил = Неопределено Тогда
	    ОблМакета.Имя = ЭтаФорма.рфИмяОбластиПолучатель;
	    СтрокаПравил = ПравилаЗаполнения.Добавить();
	    СтрокаПравил.ЭтоНовый   = Истина;
	    СтрокаПравил.ИмяОбласти = ЭтаФорма.рфИмяОбластиПолучатель;
	КонецЕсли;  

	// Принятие изменений		
	СтрокаПравил.ВидЯчейки     = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула");
	СтрокаПравил.Формула       = СокрЛП(ЭтаФорма.рфФормула);
	СтрокаПравил.Изменен       = Истина;
	СтрокаПравил.ЭлементДанных = ПредопределенноеЗначение("Справочник.бит_ЭлементыДанных.ПустаяСсылка");

	Модифицированность = Истина;
		
КонецПроцедуры // ПринятьИзменения()

#КонецОбласти






