
#Область ПрограммныйИнтерфейс

#Область ФункцииКонструкторы

// Модифицирует универсальные настройки.
// 
// Параметры:
//  Настройки - Структура - См. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки().
//  ИмяИсходногоОтчета - Строка - Имя проверяемого отчета.
//
Процедура НовыйУниверсальныеНастройки(Настройки, ИмяИсходногоОтчета) Экспорт
	
	Если СтрНачинаетсяС(ИмяИсходногоОтчета, "бит_") Тогда
		Настройки.Вставить("Счет", ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ПустаяСсылка"));
		
		Настройки.Вставить("ПоказательМУ",	  Истина);	// По умолчанию МУ включен.
		Настройки.Вставить("ПоказательРегл",  Ложь);
		Настройки.Вставить("ПоказательУпр",	  Ложь);
		Настройки.Вставить("ПоказательСумма", Истина);	// По умолчанию Сумма включена.
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ФормированиеДополнительныхДанных	

// Функция получает конечную дату по дате и периоду.
// 
// Параметры:
//  ДатаОграничений - Дата.
//  Периодичность   - Строка, представление периода.
// 
// Возвращаемое значение:
//  Дата.
// 
Функция ПолучитьДатуОкончанияПериода(Знач ДатаОграничений, Знач Периодичность) Экспорт
	
	Если ДатаОграничений = Null
		ИЛИ ДатаОграничений = Неопределено Тогда
		
		Возврат Дата('00010101');
		
	КонецЕсли;
	
	ПериодПо = ДатаОграничений;
	
	Если Периодичность = "ДЕНЬ" Тогда
		ПериодПо = ДатаОграничений + 24 * 60 * 60 - 1;
	ИначеЕсли Периодичность = "НЕДЕЛЯ" Тогда
		ПериодПо = ДатаОграничений + 7 * 24 * 60 * 60 - 1;
	ИначеЕсли Периодичность = "ДЕКАДА" Тогда
		ПериодПо = ДатаОграничений + 10 * 24 * 60 * 60 - 1;
	ИначеЕсли Периодичность = "МЕСЯЦ" Тогда
		ПериодПо = КонецДня(КонецМесяца(ДатаОграничений));
	ИначеЕсли Периодичность = "КВАРТАЛ" Тогда
		ПериодПо = КонецДня(КонецКвартала(ДатаОграничений));
	ИначеЕсли Периодичность = "ПОЛУГОДИЕ" Тогда
		СерединаГода = КонецМесяца(ДобавитьМесяц(НачалоГода(ДатаОграничений), 6));
		Если ДатаОграничений <= СерединаГода Тогда
			ПериодПо = СерединаГода;
		Иначе
			ПериодПо = КонецДня(КонецГода(ДатаОграничений));
		КонецЕсли;
				
	ИначеЕсли Периодичность = "ГОД" Тогда
		ПериодПо = КонецДня(КонецГода(ДатаОграничений));
	КонецЕсли;
	
	Возврат ПериодПо;
	
КонецФункции // ПолучитьДатуОкончанияПериода()

// Функция получает идентификатор имени отчета.
// 
// Параметры:
//  ПолноеИмяОтчета - Строка.
//  
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьИдентификаторИмениОтчета(ПолноеИмяОтчета) Экспорт

	МассивИмени = бит_ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСРазделителями(ПолноеИмяОтчета, "_");
	ИдентификаторОбъекта = МассивИмени[1];

	Возврат ИдентификаторОбъекта;
	
КонецФункции // ПолучитьСтроковыйИдентификаторОтчета()

#КонецОбласти
// Модифицирует универсальные настройки.
// См. БухгалтерскиеОтчетыКлиентСервер.ОтчетПоддерживаетУниверсальныеНастройки(ИдентификаторОбъекта)
//
Процедура ОтчетПоддерживаетУниверсальныеНастройки(СписокОтчетов) Экспорт
	
	СписокОтчетов.Добавить("бит_АнализСубконтоМУ");
	СписокОтчетов.Добавить("бит_АнализСчетаМУ");
	СписокОтчетов.Добавить("бит_КарточкаСубконтоМУ");
	СписокОтчетов.Добавить("бит_КарточкаСчетаМУ");
	СписокОтчетов.Добавить("бит_ОборотноСальдоваяВедомостьМУ");
	СписокОтчетов.Добавить("бит_ОборотноСальдоваяВедомостьПоСчетуМУ");
	СписокОтчетов.Добавить("бит_ОборотыМеждуСубконтоМУ");
	СписокОтчетов.Добавить("бит_ОборотыСчетаМУ");
	СписокОтчетов.Добавить("бит_ОтчетПоПроводкамМУ");
	СписокОтчетов.Добавить("бит_СводныеПроводкиМУ");
	СписокОтчетов.Добавить("бит_ШахматнаяВедомостьМУ");
		
КонецПроцедуры

#КонецОбласти
