
#Область СлужебныйПрограммныйИнтерфейс

#Область ПараметрыВНА

// Функция получает класс ВНА по соответствию групп ВНА и Классов ВНА.
// 
// Параметры:
//  ГруппаВНА    - ПеречислениеСсылка.ГруппыОС, ПеречислениеСсылка.ГруппыВНА
//  Организация  - СправочникСсылка.Организации.
// 
// Возвращаемое значение:
//   КлассВНА    - СправочникСсылка.бит_му_КлассыНМА, СправочникСсылка.бит_му_КлассыОсновныхСредств.
// 
Функция ПолучитьКлассВНА(ГруппаВНА,Организация = Неопределено) Экспорт

	КлассВНА = Неопределено;
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	Если ЗначениеЗаполнено(Организация) Тогда
	
		МассивОрганизаций.Добавить(Организация);
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаВНА"        ,ГруппаВНА);
	Запрос.УстановитьПараметр("МассивОрганизаций",МассивОрганизаций);
	
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	бит_му_ГруппыВНА_КлассыВНА.КлассВНА,
	                |	ВЫБОР
	                |		КОГДА бит_му_ГруппыВНА_КлассыВНА.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	                |			ТОГДА 1
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Приоритет
	                |ИЗ
	                |	РегистрСведений.бит_му_ГруппыВНА_КлассыВНА КАК бит_му_ГруппыВНА_КлассыВНА
	                |ГДЕ
	                |	бит_му_ГруппыВНА_КлассыВНА.ГруппаВНА = &ГруппаВНА
	                |	И бит_му_ГруппыВНА_КлассыВНА.Организация В(&МассивОрганизаций)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Приоритет";
					
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		КлассВНА = Выборка.КлассВНА;
	
	КонецЕсли; 				

	Возврат КлассВНА;
	
КонецФункции // ПолучитьКлассВНА()

// Функция получает параметры класса основных средств и нематериальных активов.
// 
// Параметры:
//  СтруктураПараметров - Структура - Ключи: "Организация","Класс".
// 
// Возвращаемое значение:
//  РезСтруктура   - Структура.
// 
Функция ПолучитьПараметрыКлассаВНА(СтруктураПараметров) Экспорт

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("МодельУчета"               ,Перечисления.бит_му_МоделиУчетаВНА.ПустаяСсылка());
	РезСтруктура.Вставить("СчетУчета"                 ,ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("СрокПолезногоИспользования",0);
	РезСтруктура.Вставить("СрокПолезногоИспользованияМаксимальный",0);	
	РезСтруктура.Вставить("СчетНачисленияАмортизации" ,ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("СчетРезерваПереоценки"     ,ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("СчетСниженияСтоимости"     ,ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("СчетРасходовОтОбесценения" ,ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("СчетДоходовОтОбесценения"  ,ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("СпособОтраженияРасходовПоАмортизации",Справочники.бит_му_СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка());
	//БИТ Изюмов А.В. 06.08.12 <--- добавлены новые поля в структуру в следствие изменения "РН Параметры классов ВНА"
	РезСтруктура.Вставить("НачислятьАмортизацию"     ,Ложь);
	РезСтруктура.Вставить("МетодНачисленияАмортизации"  ,Перечисления.бит_му_МетодыНачисленияАмортизации.ПустаяСсылка());
	//БИТ Изюмов А.В. 06.08.12 <---
	
	Запрос = Новый Запрос;
	
	Организация  = бит_ОбщегоНазначения.ПолучитьЗначениеИзСтруктуры(СтруктураПараметров,"Организация");
	Класс        = бит_ОбщегоНазначения.ПолучитьЗначениеИзСтруктуры(СтруктураПараметров,"Класс");
	
	Запрос.УстановитьПараметр("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКласс"      ,Справочники.бит_му_КлассыОсновныхСредств.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация"      ,Организация);
	Запрос.УстановитьПараметр("Класс"            ,Класс);
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыКлассовВНА.МодельУчета,
	               |	ПараметрыКлассовВНА.СчетУчета,
	               |	ПараметрыКлассовВНА.СчетНачисленияАмортизации,
	               |	ПараметрыКлассовВНА.СчетРезерваПереоценки,
	               |	ПараметрыКлассовВНА.СчетСниженияСтоимости,
	               |	ПараметрыКлассовВНА.СчетРасходовОтОбесценения,
	               |	ПараметрыКлассовВНА.СчетДоходовОтОбесценения,
	               |	ПараметрыКлассовВНА.СрокПолезногоИспользования,
	               |	ПараметрыКлассовВНА.СрокПолезногоИспользованияМаксимальный,
	               |	ВЫБОР
	               |		КОГДА ПараметрыКлассовВНА.Организация = &ПустаяОрганизация
	               |				И ПараметрыКлассовВНА.Класс = &ПустойКласс
	               |			ТОГДА 3
	               |		КОГДА ПараметрыКлассовВНА.Организация = &Организация
	               |				И ПараметрыКлассовВНА.Класс = &ПустойКласс
	               |			ТОГДА 2
	               |		КОГДА ПараметрыКлассовВНА.Организация = &ПустаяОрганизация
	               |				И ПараметрыКлассовВНА.Класс = &Класс
	               |			ТОГДА 1
	               |		КОГДА ПараметрыКлассовВНА.Организация = &Организация
	               |				И ПараметрыКлассовВНА.Класс = &Класс
	               |			ТОГДА 0
	               |	КОНЕЦ КАК Приоритет,
				   //БИТ Изюмов А.В. 06.08.12 <--- добавлены новые поля в запрос в следствие изменения "РН Параметры классов ВНА"
				   |	ПараметрыКлассовВНА.НачислятьАмортизацию,
				   |	ПараметрыКлассовВНА.МетодНачисленияАмортизации,
				   //БИТ Изюмов А.В. 06.08.12 <---				   
	               |	ПараметрыКлассовВНА.СпособОтраженияРасходовПоАмортизации
	               |ИЗ
	               |	РегистрСведений.бит_му_ПараметрыКлассовВНА КАК ПараметрыКлассовВНА
	               |ГДЕ
	               |	(ПараметрыКлассовВНА.Организация = &Организация
	               |				И ПараметрыКлассовВНА.Класс = &Класс
	               |			ИЛИ ПараметрыКлассовВНА.Организация = &ПустаяОрганизация
	               |				И ПараметрыКлассовВНА.Класс = &ПустойКласс
	               |			ИЛИ ПараметрыКлассовВНА.Организация = &Организация
	               |				И ПараметрыКлассовВНА.Класс = &ПустойКласс
	               |			ИЛИ ПараметрыКлассовВНА.Организация = &ПустаяОрганизация
	               |				И ПараметрыКлассовВНА.Класс = &Класс)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
				   
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Для каждого КлючИЗначение Из РезСтруктура Цикл
		
			ИмяСвойства = КлючИЗначение.Ключ;
			
			РезСтруктура[ИмяСвойства] = Выборка[ИмяСвойства];
		
		КонецЦикла;  // По ключам структуры
	
	КонецЕсли; // По выборке

	Возврат РезСтруктура;
	
КонецФункции // ПолучитьПараметрыКлассаВНА()

// Функция формирует соответствие имен предопределенных элементов и ссылок ПВХ по указанной группе.
// 
// Параметры:
//  ГруппаПараметров  - ПланВидовХарактеристикСсылка.бит_му_ВидыПараметровВНА.
// 
// Возвращаемое значение:
//   ВидыПараметров   - Соответствие.
// 
Функция ПолучитьВидыПараметров(ГруппаПараметров) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыПараметров.Ссылка
	               |ИЗ
	               |	ПланВидовХарактеристик.бит_му_ВидыПараметровВНА КАК ВидыПараметров
	               |ГДЕ
	               |	ВидыПараметров.Ссылка В ИЕРАРХИИ(&Группа)
	               |	И (НЕ ВидыПараметров.ЭтоГруппа)";
				   
	Запрос.УстановитьПараметр("Группа", ГруппаПараметров);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	ВидыПараметров = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
	
	  	 ИмяПараметра = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПолучитьИмяПредопределенного(Выборка.Ссылка);
		 ВидыПараметров.Вставить(ИмяПараметра,Выборка.Ссылка);
	
	КонецЦикла; 
	
	Возврат ВидыПараметров;

КонецФункции // ПолучитьВидыПараметров()

// Процедура выполняет запись параметров основных средств и нематериальных активов в 
// соответствующий набор записей регистра сведений.
// 
// Параметры:
//  НаборЗаписей  - РегистрСведений.НаборЗаписей.
//  СтруктураШапкиДокумента - Структура.
//  ТаблицаДанных           - ТаблицаЗначений.
//  ВидыПараметров          - Соответствие.
//  ВидВНА                  - Строка - "ОС","НМА". По умолчанию "". 
// 
Процедура ЗаписатьПараметрыВНА(НаборЗаписей,СтруктураШапкиДокумента,ТаблицаДанных,ВидыПараметров,ВидВНА = "") Экспорт

	Постфикс = ВРЕГ(ВидВНА);
	
	Если Не ПустаяСтрока(Постфикс) Тогда
		Постфикс = "_" + Постфикс;
	КонецЕсли;
	
	КолонкиТаблицы = ТаблицаДанных.Колонки;
	
	// Добавление кода. Начало. 01.02.2016{{
	флЕстьУвеличениеСтоимостиОС = ТаблицаДанных.Колонки.Найти("УвеличениеСтоимостиОС") <> Неопределено;
	// Добавление кода. Конец. 01.02.2016}}
	флЕстьУчитыватьКакОС = ?(ТаблицаДанных.Колонки.Найти("УчитыватьКакОС")   	= Неопределено, Ложь, Истина);
	ЕстьКолонкаОС		 = ?(ТаблицаДанных.Колонки.Найти("ОсновноеСредство") 	= Неопределено, Ложь, Истина);
	ЕстьКолонкаНМА		 = ?(ТаблицаДанных.Колонки.Найти("НематериальныйАктив") = Неопределено, Ложь, Истина);
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если флЕстьУчитыватьКакОС Тогда
			Если НЕ СтрокаТаблицы.УчитыватьКакОС Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		// Добавление кода. Начало. 01.02.2016{{
		Если флЕстьУвеличениеСтоимостиОС Тогда
			
			Если СтрокаТаблицы.УвеличениеСтоимостиОС Тогда
				
				ИмяКолонки        = "ПервоначальнаяСтоимость";
				ИмяПараметра      = ИмяКолонки + Постфикс;
				ТекущееЗначение   = СтрокаТаблицы[ИмяКолонки];
				ЭтоПримитивныйТип = бит_ОбщегоНазначения.ЭтоПримитивныйТип(ТекущееЗначение);
				Параметр          = ВидыПараметров[ИмяПараметра];

				Если ЗначениеЗаполнено(Параметр) 
				  И (ЗначениеЗаполнено(ТекущееЗначение) 
				     ИЛИ ЭтоПримитивныйТип) Тогда

					Запись = НаборЗаписей.Добавить();
					Запись.Организация      = СтруктураШапкиДокумента.Организация;

					Если ЕстьКолонкаОС Тогда
						Запись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;

					ИначеЕсли ЕстьКолонкаНМА Тогда
						Запись.НематериальныйАктив = СтрокаТаблицы.НематериальныйАктив;

					КонецЕсли;

					Запись.Параметр         = Параметр;
					Запись.ЗначениеПараметра= ТекущееЗначение;
					Запись.Регистратор      = СтруктураШапкиДокумента.Ссылка;
					Запись.Период           = СтруктураШапкиДокумента.Дата;

			 	КонецЕсли; // Необходимо выполнить запись
		 
				Продолжить;
			
			КонецЕсли;
		
		КонецЕсли;
		// Добавление кода. Конец. 01.02.2016}}
		            	
		Для каждого Колонка Из КолонкиТаблицы Цикл

			ИмяКолонки        = Колонка.Имя;
			ИмяПараметра      = ИмяКолонки + Постфикс;
			ТекущееЗначение   = СтрокаТаблицы[ИмяКолонки];
			ЭтоПримитивныйТип = бит_ОбщегоНазначения.ЭтоПримитивныйТип(ТекущееЗначение);
			Параметр          = ВидыПараметров[ИмяПараметра];

			Если ЗначениеЗаполнено(Параметр) 
				И (ЗначениеЗаполнено(ТекущееЗначение) 
				ИЛИ ЭтоПримитивныйТип) Тогда

				Запись = НаборЗаписей.Добавить();
				Запись.Организация      = СтруктураШапкиДокумента.Организация;

				Если ЕстьКолонкаОС Тогда
					Запись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
				ИначеЕсли ЕстьКолонкаНМА Тогда
					Запись.НематериальныйАктив = СтрокаТаблицы.НематериальныйАктив; 
				КонецЕсли;

				Запись.Параметр         = Параметр;
				Запись.ЗначениеПараметра= ТекущееЗначение;
				Запись.Регистратор      = СтруктураШапкиДокумента.Ссылка;
				Запись.Период           = СтруктураШапкиДокумента.Дата;

				Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.бит_му_МодернизацияОС") 
					И Параметр = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СрокПолезногоИспользования_ОС Тогда
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Организация",      СтруктураШапкиДокумента.Организация);
					СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
					СтруктураОтбора.Вставить("Параметр",         ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС);
					
					ЗначениеПараметра = РегистрыСведений.бит_му_ПараметрыОС.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата, СтруктураОтбора).ЗначениеПараметра; 
					
					Если ЗначениеПараметра = Ложь Тогда
						
						Запись = НаборЗаписей.Добавить();
						Запись.Организация      = СтруктураШапкиДокумента.Организация;
						Запись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
						Запись.Параметр         = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС;
						Запись.ЗначениеПараметра= Истина;
						Запись.Регистратор      = СтруктураШапкиДокумента.Ссылка;
						Запись.Период           = СтруктураШапкиДокумента.Дата;
					
					КонецЕсли; 
				
				КонецЕсли; 
				
			КонецЕсли; // Необходимо выполнить запись

		КонецЦикла; // По колонкам таблицы
		
		//БИТ Тртилек 14.08.2012 только при наличии вида операции
		Если СтруктураШапкиДокумента.Свойство("ВидОперации") Тогда 
			///БИТ Тртилек
			//Изюмов А.В. 02.08.12 <--- прерывание выполнение цикла 
			Если СтруктураШапкиДокумента.ВидОперации  = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС ИЛИ СтруктураШапкиДокумента.ВидОперации  = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ВводВачальныхОстатковКонсолидированногоОС Тогда  
				Прервать;
			КонецЕсли;
			//Изюмов А.В. 02.08.12 <---
			//БИТ Тртилек 14.08.2012 только при наличии вида операции 
		КонецЕсли;
		///БИТ Тртилек		
	
	КонецЦикла; // По строкам таблицы


КонецПроцедуры // ЗаписатьПараметрыВНА()

// Функция получает таблицу параметров ВНА.
// 
// Параметры:
//  СтруктураПараметров - Структура. Обязательные ключи: 
// 							1) Организация 		- СправочникСсылка.Организации.
// 							2) ОсновноеСредство - СправочникСсылка.ОсновныеСредства, массив.
//                          3) НематериальныйАктив - СправочникСсылка.НематериальныеАктивы,Массив
// 							4) МоментВремени    - МоментВремени, Дата.
// 							5) ПараметрыВНА     - Массив, ПланыВидовХарактеристикСсылка.бит_му_ВидыПараметровВНА.
// 
//  ТипРезультата - Строка, значения "ТаблицаЗначений, Соответствие".
// 
// Возвращаемое значение:
//   Таблица_Соответствие_ПараметровВНА - ТаблицаЗначений, Соответствие, Неопределено.
// 
Функция ПолучитьТаблицуПараметровВНА(СтруктураПараметров, ТипРезультата)  Экспорт
	
	РезультатТаблица	  = ВРег(ТипРезультата) = ВРег("ТаблицаЗначений");
	РезультатСоответствие = ВРег(ТипРезультата) = ВРег("Соответствие");
	
	ПараметрыВНА = СтруктураПараметров.ПараметрыВНА;
	
	Если РезультатТаблица Тогда
		
		СоотвПараметра_Имени = Новый Соответствие;
		
		ТипыВНА = Новый Массив; 
		ТипыВНА.Добавить(Тип(бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ИмяТипаОсновныеСредства()));
		ТипыВНА.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
		
		// Сформируем структуру таблицы параметров.
		ТаблицаСоответствиеПараметровВНА = Новый ТаблицаЗначений;
		ТаблицаСоответствиеПараметровВНА.Колонки.Добавить("ВНА", Новый ОписаниеТипов(ТипыВНА));
		
		Для Каждого ТекПараметр Из ПараметрыВНА Цикл
			
			// Получим имя предопределенного элемента ПВХ.
			ИмяПараметра = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПолучитьИмяПредопределенного(ТекПараметр);
			
			// Запишем в соответствие "параметр ссылка - имя колонки".
			СоотвПараметра_Имени.Вставить(ТекПараметр, ИмяПараметра);
			
			// Добавим колонку с именем параметра.
			ТаблицаСоответствиеПараметровВНА.Колонки.Добавить(ИмяПараметра, ТекПараметр.ТипЗначения);
			
		КонецЦикла;
		
	ИначеЕсли РезультатСоответствие Тогда
		
		ТаблицаСоответствиеПараметровВНА = Новый Соответствие;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"     , СтруктураПараметров.Организация);
	Если СтруктураПараметров.Свойство("ОсновноеСредство") Тогда
		Запрос.УстановитьПараметр("ОсновноеСредство", СтруктураПараметров.ОсновноеСредство);
	Иначе	
		Запрос.УстановитьПараметр("ОсновноеСредство", Справочники.ОсновныеСредства.ПустаяСсылка());
	КонецЕсли; 
	Если СтруктураПараметров.Свойство("НематериальныйАктив") Тогда
		Запрос.УстановитьПараметр("НематериальныйАктив", СтруктураПараметров.НематериальныйАктив);	
	Иначе	
		Запрос.УстановитьПараметр("НематериальныйАктив", Справочники.НематериальныеАктивы.ПустаяСсылка());	
	КонецЕсли; 
	Если ТипЗнч(СтруктураПараметров.МоментВремени) = Тип("Граница") Тогда
		Запрос.УстановитьПараметр("МоментВремени"   , СтруктураПараметров.МоментВремени);
	Иначе	
		Запрос.УстановитьПараметр("МоментВремени"   , Новый Граница(СтруктураПараметров.МоментВремени, ВидГраницы.Исключая));
	КонецЕсли; 
	Запрос.УстановитьПараметр("ПараметрыВНА"    , СтруктураПараметров.ПараметрыВНА);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыОС_МУ.ОсновноеСредство КАК ВНА,
	|	ПараметрыОС_МУ.Параметр КАК Параметр,
	|	ПараметрыОС_МУ.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ОсновноеСредство)
	|				И Параметр В (&ПараметрыВНА)) КАК ПараметрыОС_МУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_му_ПараметрыНМАСрезПоследних.НематериальныйАктив,
	|	бит_му_ПараметрыНМАСрезПоследних.Параметр,
	|	бит_му_ПараметрыНМАСрезПоследних.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыНМА.СрезПоследних(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И Параметр В (&ПараметрыВНА)
	|				И НематериальныйАктив В (&НематериальныйАктив)) КАК бит_му_ПараметрыНМАСрезПоследних
	|ИТОГИ ПО
	|	ВНА";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаСоответствиеПараметровВНА;
	КонецЕсли;
	
	ВыборкаПоОС = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОС.Следующий() Цикл
		
		Если РезультатТаблица Тогда
			
			НовСтрока = ТаблицаСоответствиеПараметровВНА.Добавить();
			НовСтрока.ВНА = ВыборкаПоОС.ВНА;
			
		ИначеЕсли РезультатСоответствие Тогда
			
			ПараметрыОС = Новый Соответствие;
			
		КонецЕсли;
		
		ВыборкаПоПараметрам = ВыборкаПоОС.Выбрать();
		
		Пока ВыборкаПоПараметрам.Следующий() Цикл
			
			Если РезультатТаблица Тогда
				
				НовСтрока[СоотвПараметра_Имени.Получить(ВыборкаПоПараметрам.Параметр)] = ВыборкаПоПараметрам.ЗначениеПараметра;
				
			ИначеЕсли РезультатСоответствие Тогда
				ПараметрыОС.Вставить(ВыборкаПоПараметрам.Параметр, ВыборкаПоПараметрам.ЗначениеПараметра);
			КонецЕсли;
			
		КонецЦикла; // По параметрам
		
		Если РезультатСоответствие Тогда
			ТаблицаСоответствиеПараметровВНА.Вставить(ВыборкаПоОС.ВНА, ПараметрыОС);
		КонецЕсли;
		
	КонецЦикла; // Выборка по ВНА
	
	Возврат ТаблицаСоответствиеПараметровВНА;
	
КонецФункции // ПолучитьТаблицуПараметровВНА()

// Функция определяет есть ли объекты данного класса класса.
// 
// Параметры:
//  ТекущийКласс  - СправочникСсылка.бит_КлассыОсновныхСредств.
// 
// Возвращаемое значение:
//   ЕстьОбъектыКласса - Булево.
// 
Функция ЕстьОбъектыКласса(ТекущийКласс,ТекущаяОрганизация = Неопределено)  Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ЗначениеПараметра",ТекущийКласс);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_му_ПараметрыОС.ОсновноеСредство
	               |ИЗ
	               |	РегистрСведений.бит_му_ПараметрыОС КАК бит_му_ПараметрыОС
	               |ГДЕ
	               |	бит_му_ПараметрыОС.ЗначениеПараметра = &ЗначениеПараметра";
				   
     Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
	 
	 	 Запрос.Текст = Запрос.Текст +"	И бит_му_ПараметрыОС.Организация = &Организация";
		 Запрос.УстановитьПараметр("Организация",ТекущаяОрганизация);
	 
	 КонецЕсли; 				   
				   
				   
     Результат = Запрос.Выполнить();				   
				   
     Если Результат.Пустой() Тогда
		 
		 ЕстьОбъектыКласса = Ложь;
		 
	 Иначе	
		 
		 ЕстьОбъектыКласса = Истина;
		 
	 КонецЕсли; 				   
	 
	 Возврат ЕстьОбъектыКласса;

КонецФункции // ЕстьОбъектыКласса()

#КонецОбласти

#Область ПроцедурыИФункцииДляПолученияИВыводаИнвентарныхНомеровОс

// Процедура восстанавливает инвентарные номера таблицы ОС по соответствию.
// 
// Параметры:
//  ТаблОсновныеСредства 			- ДанныеформыКоллекция.
//  СоответствиеОС_ИнвентарныйНомер - Соответствие.
// 
Процедура ВосстановитьИнвентарныеНомераТаблицыОС(ТаблОсновныеСредства, СоответствиеОС_ИнвентарныйНомер) Экспорт

	Для каждого СтрокаОС Из ТаблОсновныеСредства Цикл
		
		ИнвентарныйНомер = СоответствиеОС_ИнвентарныйНомер.Получить(СтрокаОС.ОсновноеСредство);
		
		Если ИнвентарныйНомер <> Неопределено Тогда
			СтрокаОС.ИнвентарныйНомер = ИнвентарныйНомер;		
		КонецЕсли;
				     	
	КонецЦикла;	

КонецПроцедуры // ВосстановитьИнвентарныеНомераТаблицыОС()

// Процедура заполняет соответствие "Основное средство - инвентарный номер".
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства.
//  Организация      - СправочникСсылка.Организации.
// 
Функция ПолучитьРезультатЗапросаДляПоискаИнвентарныхНомеровОС(ОсновноеСредство, Организация) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
		
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ЗаполнитьИнвентарныйНомерОС()

// Процедура заполняет соответствие "Основное средство - инвентарный номер".
// 
// Параметры:
//  ТекущиеДанные    			    - ДанныеФормыЭлементКоллекции.
//  Организация      			    - СправочникСсылка.Организации.
//  СоответствиеОС_ИнвентарныйНомер - Соответствие.
// 
Процедура ЗаполнитьИнвентарныйНомерТекущегоОС(ТекущиеДанные, Организация, СоответствиеОС_ИнвентарныйНомер) Экспорт
	
	ОсновноеСредство = ТекущиеДанные.ОсновноеСредство;
	Если Не ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ПолучитьРезультатЗапросаДляПоискаИнвентарныхНомеровОС(ОсновноеСредство, Организация);	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзЗапроса.Следующий();
		
		ТекущиеДанные.ИнвентарныйНомер = ВыборкаИзЗапроса.ИнвентарныйНомер;
		СоответствиеОС_ИнвентарныйНомер.Вставить(ТекущиеДанные.ОсновноеСредство, ТекущиеДанные.ИнвентарныйНомер);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИнвентарныйНомерТекущегоОС()

// Процедура заполняет соответствие "Основное средство - инвентарный номер".
// 
// Параметры:
//  ТаблОсновныеСредства 			- ДанныеформыКоллекция.
//  Организация          			- СправочникСсылка.Организации.
//  СоответствиеОС_ИнвентарныйНомер - Соответствие.
// 
Процедура ЗаполнитьИнвентарныеНомераТаблицыОС(ТаблОсновныеСредства, Организация, СоответствиеОС_ИнвентарныйНомер) Экспорт
	
	ОсновноеСредство = ТаблОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	Если Не ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
 	РезультатЗапроса = ПолучитьРезультатЗапросаДляПоискаИнвентарныхНомеровОС(ОсновноеСредство, Организация);	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
	
	Для каждого СтрокаОС Из ТаблОсновныеСредства Цикл
		
		ВыборкаИзЗапроса.Сбросить();
		
		Если ЗначениеЗаполнено(СтрокаОС.ОсновноеСредство)
			И ВыборкаИзЗапроса.НайтиСледующий(Новый Структура("ОсновноеСредство", СтрокаОС.ОсновноеСредство)) Тогда
		
			СтрокаОС.ИнвентарныйНомер = ВыборкаИзЗапроса.ИнвентарныйНомер;
			СоответствиеОС_ИнвентарныйНомер.Вставить(СтрокаОС.ОсновноеСредство, СтрокаОС.ИнвентарныйНомер);
		
		КонецЕсли;  		
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьИнвентарныйНомерОС()

// Процедура заполняет соответствие "Основное средство - инвентарный номер".
// 
// Параметры:
//  СоответствиеОС_ИнвНомер - Соответствие.
//  ОсновноеСредство		- СправочникСсылка.ОсновныеСредства, массив.
//  Организация             - СправочникСсылка.Организации.
// 
Процедура ЗаполнитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвНомер
												  ,ОсновноеСредство
												  ,Организация) Экспорт
												  
	Если Не ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	//БИТ Тртилек 20.07.2012
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("Организация"		, Организация);
	//Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	//
	//Запрос.Текст =
	// "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	// |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	// |ИЗ
	// |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	// |			,
	// |			Организация = &Организация
	// |				И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаИзЗапроса.Следующий() Цикл
	//	СоответствиеОС_ИнвНомер.Вставить(ВыборкаИзЗапроса.ОсновноеСредство, ВыборкаИзЗапроса.ИнвентарныйНомер);
	//КонецЦикла;
	Если ТипЗнч(ОсновноеСредство) = Тип("Массив") Тогда
		Для Каждого ОсновноеСредствоЭлемент Из ОсновноеСредство Цикл
			СоответствиеОС_ИнвНомер.Вставить(ОсновноеСредствоЭлемент, ОсновноеСредствоЭлемент.Код);
		КонецЦикла;
	Иначе
		СоответствиеОС_ИнвНомер.Вставить(ОсновноеСредство, ОсновноеСредство.Код);
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры // ЗаполнитьСоответствиеОС_ИнвентарныйНомер()

// Функция определяет инвентарный номер ОС по соответствию СоответствиеОС_ИнвентарныйНомер.
// 
// Параметры:
//  СоответствиеОС_ИнвНомер - Соответствие.
//  ОсновноеСредство		- СправочникСсылка.ОсновныеСредства, массив.
//  Организация             - СправочникСсылка.Организации.
//                     
// Возвращаемое значение:
//  ИнвентарныйНомер - Строка.
// 
Функция ПолучитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвНомер
											   ,ОсновноеСредство
											   ,Организация) Экспорт
	
	ИнвентарныйНомер = "";
	
	Если СоответствиеОС_ИнвНомер[ОсновноеСредство] = Неопределено Тогда
		
		// Добавим в соответствие ОС его инвентарный номер.
		ЗаполнитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвНомер
												,ОсновноеСредство
												,Организация);
												  
	КонецЕсли;
	
	Если Не СоответствиеОС_ИнвНомер[ОсновноеСредство] = Неопределено Тогда
		ИнвентарныйНомер = СоответствиеОС_ИнвНомер[ОсновноеСредство];
	КонецЕсли;
	
	Возврат ИнвентарныйНомер;
	
КонецФункции // ПолучитьСоответствиеОС_ИнвентарныйНомер()

#КонецОбласти

#Область ПроцедурыИФункцииОтображенияСведенийМсфо

// Функция получает дерево параметров для ВНА.
// 
// Параметры:
//  ДатаСведений - Дата.
//  ВНАСсылка 	 - СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы.
//  ВидВНА    	 - Строка, "ОС" и "НМА".
// 
// Возвращаемое значение:
//  ДеревоПараметров - ДеревоЗначений.
// 
Функция ПолучитьДеревоПараметровВНА(ДатаСведений, ВНАСсылка, ВидВНА) Экспорт
	
	ДеревоПараметров = Новый ДеревоЗначений;
	
	// Добавим колонки дерева параметров
	ДеревоПараметров.Колонки.Добавить("Параметр");
	ДеревоПараметров.Колонки.Добавить("Значение");
	
	Если Не ЗначениеЗаполнено(ВНАСсылка) Тогда
		Возврат ДеревоПараметров;
	КонецЕсли;
	
	// Получим организацию для ВНА.
	Организация = ПолучитьОрганизациюВНА(ВНАСсылка, ВидВНА);
	
	МенеджерПВХ = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА;
	
	// Сформируем структуру имен параметров.
	СтруктураИменПараметров = Новый Структура;
	СтруктураИменПараметров.Вставить("Класс_" 				       + ВидВНА, "Класс");	
	СтруктураИменПараметров.Вставить("СчетУчета_" 				   + ВидВНА, "Счет учета");
	СтруктураИменПараметров.Вставить("ПервоначальнаяСтоимость_"    + ВидВНА, "Первоначальная стоимость");
	СтруктураИменПараметров.Вставить("СчетСниженияСтоимости_" 	   + ВидВНА, "Счет снижения стоимости");
	СтруктураИменПараметров.Вставить("СчетНачисленияАмортизации_"  + ВидВНА, "Счет начисления амортизации");
	СтруктураИменПараметров.Вставить("МетодНачисленияАмортизации_" + ВидВНА, "Метод начисления амортизациии");
	СтруктураИменПараметров.Вставить("СрокПолезногоИспользования_" + ВидВНА, "Срок полезного использования");
	
	// Добавим дополнительные параметры.
	Если ВидВНА = "ОС" Тогда
		СтруктураИменПараметров.Вставить("ЛиквидационнаяСтоимость_" + ВидВНА, "Ликвидационная стоимость");
		СтруктураИменПараметров.Вставить("МОЛ_"			 			+ ВидВНА, "МОЛ");
		СтруктураИменПараметров.Вставить("Местонахождение_" 		+ ВидВНА, "Местонахождение");
		СтруктураИменПараметров.Вставить("ФинансоваяАренда_ОС"              , "В финансовой аренде");
		//БИТ Тртилек 25112013
		СтруктураИменПараметров.Вставить("ВнутригрупповыеЗатраты_"     + ВидВНА, "Внутригрупповые затраты");
		///БИТ Тртилек	
	КонецЕсли;
	
	// Сформируем массив параметров ПВХ,
	// текст запроса по выборке параметров.
	МассивПараметров 	   = Новый Массив;
	ТекстВыборкаПараметров = "";
	
	Для Каждого КлючЗначение Из СтруктураИменПараметров Цикл
		
		ТекИмяПараметра = КлючЗначение.Ключ;
		
		МассивПараметров.Добавить(МенеджерПВХ[ТекИмяПараметра]);
		ТекстВыборкаПараметров = ТекстВыборкаПараметров + "
								 |	ТаблицаПараметров." + ТекИмяПараметра + ",";
	КонецЦикла;
	
	ИмяИзмеренияВНА = ?(ВидВНА = "ОС", "ОсновноеСредство", "НематериальныйАктив");
	
	// Сформируем структуру параметров для получения таблицы параметров ВНА.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"  , Организация);
	СтруктураПараметров.Вставить(ИмяИзмеренияВНА, ВНАСсылка);
	СтруктураПараметров.Вставить("МоментВремени", КонецДня(ДатаСведений));
	СтруктураПараметров.Вставить("ПараметрыВНА"	, МассивПараметров);
	
	// Получим таблицу параметров ВНА.
	ТаблицаПараметров = ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	
	Если ТаблицаПараметров.Количество() = 0 Тогда
		Возврат ДеревоПараметров;
	КонецЕсли;
	
	// Получим массив счетов по ВНА.
	МассивСчетовАмортизации 	  = ТаблицаПараметров.ВыгрузитьКолонку("СчетНачисленияАмортизации_" + ВидВНА);
	МассивСчетовСниженияСтоимости = ТаблицаПараметров.ВыгрузитьКолонку("СчетСниженияСтоимости_" 	+ ВидВНА);
	МассивСчетовУчета 			  = ТаблицаПараметров.ВыгрузитьКолонку("СчетУчета_" 				+ ВидВНА);
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовАмортизации	  , Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовСниженияСтоимости, Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета			  , Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПараметров"      		 , ТаблицаПараметров);
	Запрос.УстановитьПараметр("МоментВремени"				 , ДатаСведений);
	Запрос.УстановитьПараметр("Организация"					 , Организация);
	Запрос.УстановитьПараметр("ВНАСсылка"					 , ВНАСсылка);
	Запрос.УстановитьПараметр("МассивСчетовАмортизации"		 , МассивСчетовАмортизации);
	Запрос.УстановитьПараметр("МассивСчетовСниженияСтоимости", МассивСчетовСниженияСтоимости);
	Запрос.УстановитьПараметр("МассивСчетовУчета"			 , МассивСчетовУчета);
	Запрос.УстановитьПараметр("СостояниеПринятоКУчету"		 , Перечисления["бит_му_Состояния" + ВидВНА].ПринятоКУчету);
	Запрос.УстановитьПараметр("СостояниеСнятоСУчета"  		 , Перечисления["бит_му_Состояния" + ВидВНА].СнятоСУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ" + ТекстВыборкаПараметров + "
	|	ТаблицаПараметров.ВНА
	|ПОМЕСТИТЬ ТаблицаПараметров
	|ИЗ
	|	&ТаблицаПараметров КАК ТаблицаПараметров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстВыборкаПараметров + "
	|	ТаблицаПараметров.ВНА,
	|	ЕСТЬNULL(СтоимостьВНА_МУ.СуммаМУОстатокДт, 0) - ЕСТЬNULL(АмортизацияВНА_МУ.СуммаМУОстатокКт, 0) - ЕСТЬNULL(ФактОбесценениеВНА_МУ.СуммаМУОстатокКт, 0) КАК ТекущаяСтоимость,
	|	ЕСТЬNULL(ФактОбесценениеВНА_МУ.СуммаМУОстатокКт, 0) КАК СуммаОбесценения,
	|	ЕСТЬNULL(АмортизацияВНА_МУ.СуммаМУОстатокКт, 0) КАК СуммаАмортизации,
	|	ПринятыеВНА_МУ.ДатаСостояния КАК ДатаПринятия,
	|	ПринятыеВНА_МУ.Регистратор КАК ДокументПринятияКУчету,
	|	ВыбывшиеВНА_МУ.ДатаСостояния КАК ДатаВыбытия,
	|	ВыбывшиеВНА_МУ.Регистратор КАК ДокументВыбытия
	|ИЗ
	|	ТаблицаПараметров КАК ТаблицаПараметров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_Состояния" + ВидВНА + " КАК ПринятыеВНА_МУ
	|		ПО ТаблицаПараметров.ВНА = ПринятыеВНА_МУ." + ИмяИзмеренияВНА + "
	|			И (ПринятыеВНА_МУ.Организация = &Организация)
	|			И (ПринятыеВНА_МУ.Состояние = &СостояниеПринятоКУчету)
	|			И (ПринятыеВНА_МУ.ДатаСостояния <= &МоментВремени)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_Состояния" + ВидВНА + " КАК ВыбывшиеВНА_МУ
	|		ПО ТаблицаПараметров.ВНА = ВыбывшиеВНА_МУ." + ИмяИзмеренияВНА + "
	|			И (ВыбывшиеВНА_МУ.Организация = &Организация)
	|			И (ВыбывшиеВНА_МУ.Состояние = &СостояниеСнятоСУчета)
	|			И (ВыбывшиеВНА_МУ.ДатаСостояния <= &МоментВремени)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовСниженияСтоимости),
	|				,
	|				Организация = &Организация
	|					И Субконто1 = &ВНАСсылка) КАК ФактОбесценениеВНА_МУ
	|		ПО ТаблицаПараметров.ВНА = ФактОбесценениеВНА_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовУчета),
	|				,
	|				Организация = &Организация
	|					И Субконто1 = &ВНАСсылка) КАК СтоимостьВНА_МУ
	|		ПО ТаблицаПараметров.ВНА = СтоимостьВНА_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовАмортизации),
	|				,
	|				Организация = &Организация
	|					И Субконто1 = &ВНАСсылка) КАК АмортизацияВНА_МУ
	|		ПО ТаблицаПараметров.ВНА = АмортизацияВНА_МУ.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПараметров";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДеревоПараметров;
	КонецЕсли;
	
	// Сформируем массив имен параметров амортизации.
	МассивИменПараметровАмортизации = Новый Массив;
	МассивИменПараметровАмортизации.Добавить("СчетНачисленияАмортизации_"  + ВидВНА);
	МассивИменПараметровАмортизации.Добавить("СуммаАмортизации");
	МассивИменПараметровАмортизации.Добавить("МетодНачисленияАмортизации_" + ВидВНА);
	МассивИменПараметровАмортизации.Добавить("СрокПолезногоИспользования_" + ВидВНА);
	
	// Добавим имена параметров для получения.
	СтруктураИменПараметров.Вставить("ТекущаяСтоимость"		 , "Текущая стоимость");
	СтруктураИменПараметров.Вставить("СуммаОбесценения"		 , "Сумма накопленного обесценения");
	СтруктураИменПараметров.Вставить("СуммаАмортизации"		 , "Сумма начисленной амортизации");
	СтруктураИменПараметров.Вставить("ДатаПринятия"			 , "Дата принятия");
	СтруктураИменПараметров.Вставить("ДокументПринятияКУчету", "Документ принятия к учету");
	СтруктураИменПараметров.Вставить("ДатаВыбытия"	   		 , "Дата выбытия");
	СтруктураИменПараметров.Вставить("ДокументВыбытия"		 , "Документ выбытия");
	
	ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		
		// Добавим ветку "Основные сведения".
		ОсновныеСведения = ДеревоПараметров.Строки.Добавить();
		ОсновныеСведения.Параметр = "Основные сведения";
		
		// Добавим ветку "Параметры амортизации".
		ПараметрыАмортизации = ДеревоПараметров.Строки.Добавить();
		ПараметрыАмортизации.Параметр = "Параметры амортизации";
		
		Для Каждого КлючЗначение Из СтруктураИменПараметров Цикл
			
			ТекИмяПараметра   = КлючЗначение.Ключ;
			ЗначениеПараметра = ВыборкаИзЗапроса[ТекИмяПараметра];
			
			Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоПараметрАмортизации = (Не МассивИменПараметровАмортизации.Найти(ТекИмяПараметра) = Неопределено);
			
			Если ЭтоПараметрАмортизации Тогда
				СтрокаДереваПараметров = ПараметрыАмортизации.Строки.Добавить();
			Иначе
				СтрокаДереваПараметров = ОсновныеСведения.Строки.Добавить();
			КонецЕсли;
			
			СтрокаДереваПараметров.Параметр = КлючЗначение.Значение;
			СтрокаДереваПараметров.Значение = ЗначениеПараметра;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоПараметров;
	
КонецФункции // ПолучитьДеревоПараметровВНА()

#КонецОбласти

#Область ПроцедурыИФункцииДляРасчетаАмортизацииВна

// Функция выполняет получение параметров для расчета амортизации расчет амортизации для массива ВНА.
// 
// Параметры:
//  ПереченьВНА  - Массив,СправочникСсылка.ОсновныеСредства.
//  Организация- СправочникСсылка.Организации.
//  ПериодРасчета  - Дата,МоментВремени.
// 
// Возвращаемое значение:
//   РезультатРасчета   - Соответствие - Ключ:ВНА,Значение:СтрокаТаблицыЗначений.
// 
Функция ВыполнитьРасчетАмортизации(ПереченьВНА,Организация,ПериодРасчета,ВыводитьСообщения) Экспорт
	
	Если ТипЗнч(ПереченьВНА) = Тип("Массив") Тогда
		МассивВНА = ПереченьВНА;
	Иначе	
		МассивВНА = Новый Массив;
		МассивВНА.Добавить(ПереченьВНА);
	КонецЕсли; 
	
	// Определим, по ОС или по НМА начисляем амортизацию.
	ВидВНА = ОпределитьВидВНАПоМассиву(МассивВНА);
	
	Если ТипЗнч(ПериодРасчета) = Тип("Дата") Тогда
		НачалоПериода = НачалоМесяца(ПериодРасчета);		
		//++СисИнфо //будем расчитывать амортизацию на конец дня документа //2012-07-30
		//КонецПериода  = Новый Граница(КонецМесяца(ПериодРасчета),ВидГраницы.Включая);
		КонецПериода  = Новый Граница(КонецДня(ПериодРасчета),ВидГраницы.Включая);
		//--СисИнфо
	ИначеЕсли ТипЗнч(ПериодРасчета) = Тип("Граница") Тогда
		НачалоПериода = НачалоМесяца(ПериодРасчета.Значение);		
		//++СисИнфо //будем расчитывать амортизацию на конец дня документа //2012-07-30
		//КонецПериода  = Новый Граница(КонецМесяца(ПериодРасчета.Значение),ВидГраницы.Включая);
		КонецПериода  = Новый Граница(КонецДня(ПериодРасчета.Значение),ВидГраницы.Включая);
		//--СисИнфо
	Иначе	
		// Тип - дата
		НачалоПериода = НачалоМесяца(ПериодРасчета.Дата);
		//++СисИнфо //будем расчитывать амортизацию на конец дня документа //2012-07-30
		//КонецПериода  = Новый Граница(КонецМесяца(ПериодРасчета.Дата),ВидГраницы.Включая);
		КонецПериода  = Новый Граница(КонецДня(ПериодРасчета.Дата),ВидГраницы.Включая);
		//--СисИнфо		
	КонецЕсли; 
	КонецПериодаПред = Новый Граница(КонецМесяца(НачалоПериода-1),ВидГраницы.Включая);
	КонецПериодаПредДата = КонецМесяца(НачалоПериода-1);
	
	
	// Сформируем массив параметров для получения.
	ПараметрыВНА = Новый Массив;
	Если ВидВНА = "НМА" Тогда
		
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизациюСТекущегоПериода_НМА);	
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.МетодНачисленияАмортизации_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПредполагаемыйОбъемПродукции_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КоэффициентУскорения_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СрокПолезногоИспользования_НМА);	
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СпособОтраженияРасходовПоАмортизации_НМА);	
		
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_НМА);
		
	Иначе	
		
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизациюСТекущегоПериода_ОС);	
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.МетодНачисленияАмортизации_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ЛиквидационнаяСтоимость_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПредполагаемыйОбъемПродукции_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КоэффициентУскорения_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СрокПолезногоИспользования_ОС);	
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СпособОтраженияРасходовПоАмортизации_ОС);	
		
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
		
	КонецЕсли; 
	
	//++Сис_инфо // получениt параметра ОбъектСтроительства // 2012-07-23
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ОбъектСтроительства);
	//--Сис_инфо	
	
	// Сформируем структуру параметров для получения таблицы параметров.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     , Организация);
	Если ВидВНА = "НМА" Тогда
		СтруктураПараметров.Вставить("НематериальныйАктив", МассивВНА);
	Иначе	
		СтруктураПараметров.Вставить("ОсновноеСредство", МассивВНА);
	КонецЕсли; 
	СтруктураПараметров.Вставить("МоментВремени"   , ПериодРасчета);
	СтруктураПараметров.Вставить("ПараметрыВНА"	   , ПараметрыВНА);
	
	// Получим таблицу параметров
	ТаблицаПараметров = ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	ДоработатьТаблицуПараметровВНА(ТаблицаПараметров);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаПараметров",ТаблицаПараметров);
	Запрос.УстановитьПараметр("КонецПериодаПред" ,КонецПериодаПред);
	Запрос.УстановитьПараметр("КонецПериодаПредДата",КонецПериодаПредДата);
	Запрос.УстановитьПараметр("ГраницаНач"       ,НачалоПериода);
	Запрос.УстановитьПараметр("ГраницаКон"       ,ПериодРасчета);	
	Запрос.УстановитьПараметр("КонецПериода"     ,КонецПериода);
	Запрос.УстановитьПараметр("Организация"      ,Организация);
	Запрос.УстановитьПараметр("МассивВНА"        ,МассивВНА);
	Запрос.УстановитьПараметр("МассивСчетовУчета",ТаблицаПараметров.ВыгрузитьКолонку("СчетУчета"));
	Запрос.УстановитьПараметр("МассивСчетовАмортизация",ТаблицаПараметров.ВыгрузитьКолонку("СчетНачисленияАмортизации"));
	Запрос.УстановитьПараметр("МассивСчетовСнижения"   ,ТаблицаПараметров.ВыгрузитьКолонку("СчетСниженияСтоимости"));
	Запрос.УстановитьПараметр("ВидВНА"           ,Перечисления.бит_му_ВидыВНА[ВидВНА]);
	
	// Установим порядок субконто
	МассивСубконто 	= Новый Массив;
	Если ВидВНА = "НМА" Тогда
		МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.НематериальныеАктивы);
	Иначе
		МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ОсновныеСредства);
	КонецЕсли;	

	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	
	Если ВидВНА = "ОС" Тогда
		
	    Запрос.УстановитьПараметр("СостояниеПринято"       ,Перечисления.бит_му_СостоянияОС.ПринятоКУчету);		
		
		ТекстСостояния = "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК СостоянияВНА
		|           ПО ТаблицаПараметров.ВНА = СостоянияВНА.ОсновноеСредство
		|			И (СостоянияВНА.Организация = &Организация)
		|			И (СостоянияВНА.Состояние = &СостояниеПринято)";
		
    Иначе		
		
	    Запрос.УстановитьПараметр("СостояниеПринято"       ,Перечисления.бит_му_СостоянияНМА.ПринятоКУчету);		
		
		ТекстСостояния = "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияНМА КАК СостоянияВНА
		|           ПО ТаблицаПараметров.ВНА = СостоянияВНА.НематериальныйАктив
		|			И (СостоянияВНА.Организация = &Организация)
		|			И (СостоянияВНА.Состояние = &СостояниеПринято)";
		
		
	КонецЕсли; 


	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПараметров.ВНА,
	               |	ТаблицаПараметров.СчетУчета,
	               |	ТаблицаПараметров.СчетНачисленияАмортизации,
	               |	ТаблицаПараметров.СчетСниженияСтоимости,
	               |	ТаблицаПараметров.НачислятьАмортизацию,
	               |	ТаблицаПараметров.НачислятьАмортизациюСТекущегоПериода,
	               |	ТаблицаПараметров.МетодНачисленияАмортизации,
	               |	ТаблицаПараметров.ЛиквидационнаяСтоимость,
	               |	ТаблицаПараметров.ПредполагаемыйОбъемПродукции,
	               |	ТаблицаПараметров.КоэффициентУскорения,
	               |	ТаблицаПараметров.СрокПолезногоИспользования,
	               |	ТаблицаПараметров.СпособОтраженияРасходовПоАмортизации
				   //++Сис_инфо
				   |	,ТаблицаПараметров.ОбъектСтроительства
				   //--Сис_инфо				   
	               |ПОМЕСТИТЬ ТаблицаПараметров
	               |ИЗ
	               |	&ТаблицаПараметров КАК ТаблицаПараметров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_му_СобытияОС.ОсновноеСредство КАК ВНА,
	               |	СУММА(1) КАК КоличествоПериодов
	               |ПОМЕСТИТЬ ПериодыАмортизации
	               |ИЗ
	               |	РегистрСведений.бит_му_СобытияОС КАК бит_му_СобытияОС
	               |ГДЕ
	               |	бит_му_СобытияОС.Событие = ЗНАЧЕНИЕ(Перечисление.бит_му_СобытияОС.НачислениеАмортизации)
	               |	И бит_му_СобытияОС.Организация = &Организация
	               |	И бит_му_СобытияОС.ОсновноеСредство В(&МассивВНА)
	               |	И бит_му_СобытияОС.Период <= &КонецПериодаПредДата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_СобытияОС.ОсновноеСредство
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	бит_му_СобытияНМА.НематериальныйАктив,
	               |	СУММА(1)
	               |ИЗ
	               |	РегистрСведений.бит_му_СобытияНМА КАК бит_му_СобытияНМА
	               |ГДЕ
	               |	бит_му_СобытияНМА.Событие = ЗНАЧЕНИЕ(Перечисление.бит_му_СобытияНМА.НачислениеАмортизации)
	               |	И бит_му_СобытияНМА.Организация = &Организация
	               |	И бит_му_СобытияНМА.НематериальныйАктив В(&МассивВНА)
	               |	И бит_му_СобытияНМА.Период <= &КонецПериодаПредДата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_СобытияНМА.НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА НЕ ВыработкаОбщая.ОбъектВНА ЕСТЬ NULL 
	               |			ТОГДА ВыработкаОбщая.ОбъектВНА
	               |		ИНАЧЕ ВыработкаТекущийПериод.ОбъектВНА
	               |	КОНЕЦ КАК ВНА,
	               |	СУММА(ЕСТЬNULL(ВыработкаТекущийПериод.КоличествоОборот, 0)) КАК ОбъемПродукцииТекущий,
	               |	СУММА(ЕСТЬNULL(ВыработкаОбщая.КоличествоОборот, 0)) КАК ОбъемПродукцииОбщий
	               |ПОМЕСТИТЬ Выработка
	               |ИЗ
	               |	РегистрНакопления.бит_му_ВыработкаВНА.Обороты(
	               |			,
	               |			&КонецПериодаПред,
	               |			Период,
	               |			Организация = &Организация
	               |				И ВидВНА = &ВидВНА
	               |				И ОбъектВНА В (&МассивВНА)) КАК ВыработкаОбщая
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_му_ВыработкаВНА.Обороты(
	               |				&ГраницаНач,
	               |				&КонецПериода,
	               |				Месяц,
	               |				Организация = &Организация
	               |					И ВидВНА = &ВидВНА
	               |					И ОбъектВНА В (&МассивВНА)) КАК ВыработкаТекущийПериод
	               |		ПО ВыработкаОбщая.ОбъектВНА = ВыработкаТекущийПериод.ОбъектВНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА НЕ ВыработкаОбщая.ОбъектВНА ЕСТЬ NULL 
	               |			ТОГДА ВыработкаОбщая.ОбъектВНА
	               |		ИНАЧЕ ВыработкаТекущийПериод.ОбъектВНА
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПараметров.ВНА,
	               |	ТаблицаПараметров.СчетНачисленияАмортизации,
	               |	ТаблицаПараметров.НачислятьАмортизацию,
	               |	ТаблицаПараметров.МетодНачисленияАмортизации,
	               |	ТаблицаПараметров.НачислятьАмортизациюСТекущегоПериода,
				   |	ЕСТЬNULL(СостоянияВНА.ДатаСостояния, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПринятияКУчету,
	               |	ТаблицаПараметров.СпособОтраженияРасходовПоАмортизации,
	               |	ТаблицаПараметров.ЛиквидационнаяСтоимость,
	               |	ТаблицаПараметров.ПредполагаемыйОбъемПродукции,
	               |	ТаблицаПараметров.КоэффициентУскорения,
	               |	ТаблицаПараметров.СрокПолезногоИспользования,
				   |	ТаблицаПараметров.СрокПолезногоИспользования,
				   //++Сис_инфо
				   |	ТаблицаПараметров.ОбъектСтроительства,
				   //--Сис_инфо				   
	               |	ЕСТЬNULL(АмортизацияОстатки.СуммаМУОстатокКт, 0) КАК НачисленнаяАмортизация,
	               |	ЕСТЬNULL(ОбесценениеОстатки.СуммаМУОстатокКт, 0) КАК СуммаОбесценения,
	               |	ЕСТЬNULL(СтоимостьОстатки.СуммаМУОстатокДт, 0) КАК ПервоначальнаяСтоимость,
	               |	ЕСТЬNULL(ТаблицаПараметров.СрокПолезногоИспользования, 0) - ЕСТЬNULL(ПериодыАмортизации.КоличествоПериодов, 0) КАК ОстаточныйСрокАмортизации,
	               |	ЕСТЬNULL(СтоимостьОстатки.СуммаМУОстатокДт, 0) - ЕСТЬNULL(АмортизацияОстатки.СуммаМУОстатокКт, 0) - ЕСТЬNULL(ОбесценениеОстатки.СуммаМУОстатокКт, 0) - ЕСТЬNULL(ТаблицаПараметров.ЛиквидационнаяСтоимость, 0) КАК БалансоваяСтоимость,
	               |	ЕСТЬNULL(Выработка.ОбъемПродукцииТекущий, 0) КАК ОбъемПродукцииТекущий,
	               |	ЕСТЬNULL(Выработка.ОбъемПродукцииОбщий, 0) КАК ОбъемПродукцииОбщий,
	               |	ЕСТЬNULL(ТаблицаПараметров.ПредполагаемыйОбъемПродукции, 0) - ЕСТЬNULL(Выработка.ОбъемПродукцииОбщий, 0) КАК ОбъемПродукцииОстаточный,
	               |	0 КАК СуммаАмортизации
	               |ИЗ
	               |	ТаблицаПараметров КАК ТаблицаПараметров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&ГраницаКон,
	               |				Счет В (&МассивСчетовУчета),
	               |				&МассивСубконто,
	               |				Организация = &Организация
	               |					И Субконто1 В (&МассивВНА)) КАК СтоимостьОстатки
	               |		ПО ТаблицаПараметров.ВНА = СтоимостьОстатки.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&ГраницаКон,
	               |				Счет В (&МассивСчетовАмортизация),
	               |				&МассивСубконто,
	               |				Организация = &Организация
	               |					И Субконто1 В (&МассивВНА)) КАК АмортизацияОстатки
	               |		ПО ТаблицаПараметров.ВНА = АмортизацияОстатки.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&ГраницаКон,
	               |				Счет В (&МассивСчетовСнижения),
	               |				&МассивСубконто,
	               |				Организация = &Организация
	               |					И Субконто1 В (&МассивВНА)) КАК ОбесценениеОстатки
	               |		ПО ТаблицаПараметров.ВНА = ОбесценениеОстатки.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыАмортизации КАК ПериодыАмортизации
	               |		ПО ТаблицаПараметров.ВНА = ПериодыАмортизации.ВНА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Выработка КАК Выработка
	               |		ПО ТаблицаПараметров.ВНА = Выработка.ВНА";
				   
Запрос.Текст = Запрос.Текст+ТекстСостояния;				   
				   
Запрос.Текст = Запрос.Текст+"				 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаПараметров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПериодыАмортизации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Выработка";
				   

				   
     Результат = Запрос.Выполнить();
	
	 РезультатРасчета = Новый Соответствие;
	 
	 ТаблицаПараметров = Результат.Выгрузить();
	 
	 //ОК Ванюков К. +// при расчете суммы амортизации к начислению остаточный СПИ был равен как СПИ, заведенный в документе «принятие к учету ОС (МСФО) – кол-во месяцев между «датой принятия к учету», указанной в документе «Принятие к учету ОС (МСФО)» и датой начисления амортиза // 2012-11-29
	 ТаблицаПараметров = ОК_ОбщегоНазначения.СкорректироватьСПИПриАмортизацииОС(ТаблицаПараметров, ПериодРасчета, Организация);
	 //ОК Ванюков К. -
	 
	 Заголовок = "Расчет амортизации "+ВидВНА;
	 
	 Для каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		 
		// Проверки
		флЕстьОшибки = Ложь;
		Если НЕ ЗначениеЗаполнено(СтрокаПараметров.ДатаПринятияКУчету) Тогда
			
			 Если ВыводитьСообщения Тогда
			 
			 	  ТекстСообщения = ВидВНА
				                   +" """
								   +СтрокаПараметров.ВНА
								   +""" не принято к учету. Начисление амортизации невозможно!";
				  бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,Заголовок,СтатусСообщения.Важное);
				  
			 
			 КонецЕсли; 
			 флЕстьОшибки = Истина;
		
		КонецЕсли;  
		
		Если НЕ СтрокаПараметров.НачислятьАмортизацию Тогда
			
			Если ВыводитьСообщения Тогда
				
				ТекстСообщения = "По "
				                  +ВидВНА
								  +" """
								  +СтрокаПараметров.ВНА
								  +""" амортизация не начисляется!";
				бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,Заголовок,СтатусСообщения.Важное);
				
			КонецЕсли; 
			 флЕстьОшибки = Истина;
			
		Иначе
			
			Если КонецМесяца(СтрокаПараметров.ДатаПринятияКУчету) = КонецПериода.Значение 
				И НЕ СтрокаПараметров.НачислятьАмортизациюСТекущегоПериода Тогда
				
				Если ВыводитьСообщения Тогда
					
					ТекстСообщения = "По "
									+ВидВНА
									+" """
									+СтрокаПараметров.ВНА
									+""" за период "
									// +Формат(КонецПериода,"ДФ=MMMM-YYYY")
									+Формат(КонецПериода.Значение,"ДФ=MMMM-yyyy")
									+" амортизация не начисляется!";
									бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,Заголовок,СтатусСообщения.Важное);
					
				КонецЕсли; 
				
			  флЕстьОшибки = Истина;
				
			КонецЕсли;  
			
		КонецЕсли; 
		
		Если СтрокаПараметров.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизации.УменьшаемогоОстатка
			ИЛИ СтрокаПараметров.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
			
			Если Месяц(НачалоПериода) >= Месяц(СтрокаПараметров.ДатаПринятияКУчету) Тогда
				ДатаРасчета = Дата(Год(НачалоПериода),   Месяц(СтрокаПараметров.ДатаПринятияКУчету), 01);
			Иначе	
				ДатаРасчета = Дата(Год(НачалоПериода)-1, Месяц(СтрокаПараметров.ДатаПринятияКУчету), 01);
			КонецЕсли;
			
			ЗапросАм = Новый Запрос;
			
			ЗапросАм.УстановитьПараметр("ДатаРасчета"            ,ДатаРасчета);
			ЗапросАм.УстановитьПараметр("МассивСубконто"         ,МассивСубконто);
			ЗапросАм.УстановитьПараметр("Организация"            ,Организация);
			ЗапросАм.УстановитьПараметр("МассивСчетовАмортизация",ТаблицаПараметров.ВыгрузитьКолонку("СчетНачисленияАмортизации"));
			ЗапросАм.УстановитьПараметр("ВНА"              		 ,СтрокаПараметров.ВНА);
			
			ЗапросАм.Текст =
			"ВЫБРАТЬ
			|	АмортизацияОстатки.СуммаМУОстатокКт КАК АмортизацияНаНачалоГода
			|ИЗ
			|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
			|				&ДатаРасчета,
			|				Счет В (&МассивСчетовАмортизация),
			|				&МассивСубконто,
			|				Организация = &Организация
			|					И Субконто1 В (&ВНА)) КАК АмортизацияОстатки ";
			
			РезультатАм = ЗапросАм.Выполнить().Выгрузить().ВыгрузитьКолонку("АмортизацияНаНачалоГода");
			
			Если ЗначениеЗаполнено(РезультатАм) Тогда
				АмортизацияНаНачалоГода = РезультатАм[0];
			КонецЕсли; 
			
			РассчитатьАмортизацию(СтрокаПараметров, АмортизацияНаНачалоГода);

		Иначе
			
		 	РассчитатьАмортизацию(СтрокаПараметров);

		КонецЕсли; 
		
		Если флЕстьОшибки Тогда
			 СтрокаПараметров.СуммаАмортизации = 0;
		КонецЕсли; 
		
		
		РезультатРасчета.Вставить(СтрокаПараметров.ВНА,СтрокаПараметров);
	 
	 КонецЦикла; 
	 
	 Возврат РезультатРасчета;
  
КонецФункции // ВыполнитьРасчетАмортизации()

// Процедура рассчитывает амортизацию ВНА по строке параметров, результат 
// расчета записывается в колонку СуммаАмортизации.
// 
// Параметры:
//  СтрокаПараметров  - СтрокаТаблицыЗначений.
// 
Процедура РассчитатьАмортизацию(СтрокаПараметров, АмортизацияНаНачалоГода = 0)  Экспорт

	БалансоваяСтоимость = СтрокаПараметров.ПервоначальнаяСтоимость
	                      -СтрокаПараметров.НачисленнаяАмортизация
						  -СтрокаПараметров.СуммаОбесценения
						  -СтрокаПараметров.ЛиквидационнаяСтоимость;
						  
    СтрокаПараметров.БалансоваяСтоимость = БалансоваяСтоимость;						  
	
	Если СтрокаПараметров.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизации.Линейный
		 ИЛИ СтрокаПараметров.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизацииНМА.Линейный Тогда
		
		 Если СтрокаПараметров.ОстаточныйСрокАмортизации >1 Тогда
		 
		 	  СтрокаПараметров.СуммаАмортизации = БалансоваяСтоимость/СтрокаПараметров.ОстаточныйСрокАмортизации; 
			  
		  Иначе
			  
			  СтрокаПараметров.СуммаАмортизации = БалансоваяСтоимость;
		 
		 КонецЕсли; 
		
	 ИначеЕсли СтрокаПараметров.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизации.УменьшаемогоОстатка
		       ИЛИ СтрокаПараметров.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
			   
		ФактическийСрокИспользования = СтрокаПараметров.СрокПолезногоИспользования/СтрокаПараметров.КоэффициентУскорения;	   
			   
		Если СтрокаПараметров.ОстаточныйСрокАмортизации-1 > ФактическийСрокИспользования Тогда
			
			// СтрокаПараметров.СуммаАмортизации = СтрокаПараметров.КоэффициентУскорения*БалансоваяСтоимость;
			СуммаИтоговая =  СтрокаПараметров.ПервоначальнаяСтоимость - АмортизацияНаНачалоГода;
			СтрокаПараметров.СуммаАмортизации = СуммаИтоговая * СтрокаПараметров.КоэффициентУскорения / СтрокаПараметров.СрокПолезногоИспользования;
			
		Иначе
			
			СтрокаПараметров.СуммаАмортизации = БалансоваяСтоимость;
			
		КонецЕсли; 
		
		
	ИначеЕсли СтрокаПараметров.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизации.Производственный 
		      ИЛИ СтрокаПараметров.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизацииНМА.Производственный Тогда
		
		
		Если СтрокаПараметров.ОбъемПродукцииОстаточный > 0 Тогда
			
			СтрокаПараметров.СуммаАмортизации = БалансоваяСтоимость*СтрокаПараметров.ОбъемПродукцииТекущий/СтрокаПараметров.ОбъемПродукцииОстаточный;
			
		Иначе
			
			СтрокаПараметров.СуммаАмортизации = БалансоваяСтоимость;
			
		КонецЕсли; 
		
		
	КонецЕсли; 

КонецПроцедуры // РассчитатьАмортизацию()

#КонецОбласти

#Область ПроцедурыФункцииДляВыполненияОбесцененияВна

// Процедура выполняет расчет-моделирование амортизации с момента первого формирования 
// резерва или момента последней модернизации до момента документа. Левая граница (формирование резерва) включается,
// правая (период документа) не включается. Изменения параметров ВНА на рассматриваемом интервале не учитываются.
// 
// Параметры:
//  ТаблицаОС  - ТаблицаЗначений
// 
Функция РасчетМоделированиеАмортизации(СтруктураШапкиДокумента,ТаблицаВНА) Экспорт
	
	// Дерево для сохранения результатов расчета.
	ДеревоАмортизация = Новый ДеревоЗначений;
	ДеревоАмортизация.Колонки.Добавить("ОбъектВНА");
	ДеревоАмортизация.Колонки.Добавить("СуммаАмортизации");
	ДеревоАмортизация.Колонки.Добавить("Период");
	ДеревоАмортизация.Колонки.Добавить("БалансоваяСтоимость");
	ДеревоАмортизация.Колонки.Добавить("ИнвентарныйНомер");
	
	КолонкиТаблицы = ТаблицаВНА.Колонки;
	
	Если КолонкиТаблицы.Найти("ОсновноеСредство") <> Неопределено Тогда
		
		 ИмяКолонкиВНА = "ОсновноеСредство";
		
	ИначеЕсли КолонкиТаблицы.Найти("НематериальныйАктив") <> Неопределено Тогда 	
		
		 ИмяКолонкиВНА = "НематериальныйАктив";
		
	КонецЕсли; 
	
	ЕстьКолонкаИнвНомер = ?(КолонкиТаблицы.Найти("ИнвентарныйНомер")=Неопределено,Ложь,Истина);
	
	// Рассчитаем амортизацию, которая была бы начислена, если бы резерв не был бы сформирован.
	Для каждого СтрокаТаблицы Из ТаблицаВНА Цикл
		
		ОбъектВНА = СтрокаТаблицы[ИмяКолонкиВНА];
		
		ДатаРасчета      = Макс(СтрокаТаблицы.ДатаФормированияРезерва
		                         ,СтрокаТаблицы.ДатаМодернизации
								 ,СтрокаТаблицы.ДатаФормированияРезерваПослеМодернизации);
								 
								 
		Если ДатаРасчета > СтруктураШапкиДокумента.Дата Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		ВидГраницыДляРасчета = ?(ДатаРасчета = СтрокаТаблицы.ДатаМодернизации,ВидГраницы.Включая,ВидГраницы.Исключая);
		
		ГраницаДляРасчета = Новый Граница(ДатаРасчета,ВидГраницыДляРасчета);
		
		ПериодРасчета    = КонецМесяца(ДатаРасчета);			  
		
		// Выполняем расчет для первого периода
		РезультатРасчета =  ВыполнитьРасчетАмортизации(ОбъектВНА
							,СтруктураШапкиДокумента.Организация
							,ГраницаДляРасчета
							,Ложь);
		
		СтрокаПараметров = РезультатРасчета[ОбъектВНА];
		
		Если СтрокаПараметров = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		НакопленнаяАмортизация = СтрокаПараметров.СуммаАмортизации;
		СтрокаТаблицы.БалансоваяСтоимостьНач    = СтрокаПараметров.БалансоваяСтоимость+СтрокаПараметров.ЛиквидационнаяСтоимость;
		
		// Сохраним результаты расчета в дерево
		СтрокаДереваОбъект = ДеревоАмортизация.Строки.Добавить();
		СтрокаДереваОбъект.ОбъектВНА                  = ОбъектВНА;
		СтрокаДереваОбъект.БалансоваяСтоимость        = СтрокаПараметров.БалансоваяСтоимость+СтрокаПараметров.ЛиквидационнаяСтоимость;
		Если ЕстьКолонкаИнвНомер Тогда
			СтрокаДереваОбъект.ИнвентарныйНомер           = СтрокаТаблицы.ИнвентарныйНомер;
		КонецЕсли; 
		
		СтрокаДереваПериод = СтрокаДереваОбъект.Строки.Добавить();
		СтрокаДереваПериод.Период           = ПериодРасчета;
		СтрокаДереваПериод.СуммаАмортизации = СтрокаПараметров.СуммаАмортизации;
		
		// В месяц возврата обесценения амортизацию не учитываем.
		Если ПериодРасчета = КонецМесяца(СтруктураШапкиДокумента.Дата) Тогда
		
			 СтрокаДереваПериод.СуммаАмортизации = 0;
			 НакопленнаяАмортизация = 0;
		
		КонецЕсли; 
		
		// Для последующих периодов выполним расчет-моделирование.
		ПериодРасчета = КонецМесяца(ПериодРасчета+1);
		
		Пока ПериодРасчета < СтруктураШапкиДокумента.Дата Цикл
			
			СтрокаПараметров.ОстаточныйСрокАмортизации = СтрокаПараметров.ОстаточныйСрокАмортизации-1;
			
			СтрокаПараметров.НачисленнаяАмортизация    = СтрокаПараметров.НачисленнаяАмортизация
			                                             +СтрокаПараметров.СуммаАмортизации;
			
			
			Если СтрокаПараметров.МетодНачисленияАмортизации 
				= Перечисления.бит_му_МетодыНачисленияАмортизации.Производственный Тогда
				
				// Необходимо получить данные по выработке ВНА.
				РезультатРасчета =  ВыполнитьРасчетАмортизации(ОбъектВНА
															  ,СтруктураШапкиДокумента.Организация
															  ,ПериодРасчета
															  ,Ложь);
				
				СтрокаПараметровВыработка = РезультатРасчета[ОбъектВНА];
				
				Если СтрокаПараметровВыработка <> Неопределено Тогда
					
					СтрокаПараметров.ОбъемПродукцииТекущий    = СтрокаПараметровВыработка.ОбъемПродукцииТекущий;
					СтрокаПараметров.ОбъемПродукцииОстаточный = СтрокаПараметровВыработка.ОбъемПродукцииОстаточный;
					
				Иначе
					
					СтрокаПараметров.ОбъемПродукцииТекущий = 0;
					
				КонецЕсли; 
				
				
			КонецЕсли; 
			
			
			РассчитатьАмортизацию(СтрокаПараметров);															  
			
			НакопленнаяАмортизация = НакопленнаяАмортизация + СтрокаПараметров.СуммаАмортизации;
			
			// Сохраним результаты расчета в дерево
			СтрокаДереваПериод = СтрокаДереваОбъект.Строки.Добавить();
			СтрокаДереваПериод.Период           = ПериодРасчета;
			СтрокаДереваПериод.СуммаАмортизации = СтрокаПараметров.СуммаАмортизации;
			
			ПериодРасчета = КонецМесяца(ПериодРасчета+1);
			
		КонецЦикла; // По периодам расчета
		
		СтрокаДереваОбъект.СуммаАмортизации = НакопленнаяАмортизация;
		
		СтрокаТаблицы.СуммаАмортизации  = НакопленнаяАмортизация;
		
	КонецЦикла; // По строкам таблицы ОС
	
	Возврат ДеревоАмортизация;
	
КонецФункции // РасчетМоделированиеАмортизации()

// Функция получает параметры ВНА необходимы при расчете обесценения
// для массива ВНА или одного основного средства.
// 
// Параметры:
//  ПереченьВНА  - Массив.
// 
// Возвращаемое значение:
// ПараметрыОС - Соответствие.
// 
Функция ПолучитьПараметрыДляОбесцененияВНА(ПереченьВНА,СтруктураПараметров) Экспорт

	Если ТипЗнч(ПереченьВНА)<>Тип("Массив") Тогда
		МассивВНА = Новый Массив;
		МассивВНА.Добавить(ПереченьВНА);
	Иначе
		МассивВНА = ПереченьВНА;
	КонецЕсли; 
	
	// Определим вид ВНА
	ВидВНА = ОпределитьВидВНАПоМассиву(МассивВНА);
	
	// Сформируем массив параметров ВНА для получения.
	ПараметрыВНА = Новый Массив;
	Если ВидВНА = "ОС" Тогда
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ЛиквидационнаяСтоимость_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);
	Иначе	
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_НМА);
	КонецЕсли; 
	
	//++Сис_инфо //получение параметра ОбъектСтроительства//2012-07-23
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ОбъектСтроительства);
	//--Сис_инфо
	
	// Сформируем структуру параметров для получения таблицы параметров ОС.
	СтруктураДляТаблицыПараметров = Новый Структура;
	СтруктураДляТаблицыПараметров.Вставить("Организация"     , СтруктураПараметров.Организация);
	СтруктураДляТаблицыПараметров.Вставить("ПараметрыВНА"    , ПараметрыВНА);
	//++СисИнфо //изменим передачу момента времени на границу конца дня, иначе некоторые движения выпадают //2012-07-23
	//СтруктураДляТаблицыПараметров.Вставить("МоментВремени"   , ?(СтруктураПараметров.ЭтоНовый, КонецДня(СтруктураПараметров.Дата), СтруктураПараметров.МоментВремени));
	Параметры = Новый Массив(2);
	//izhtc-Kir 17.08.2015 (
	//Параметры[0] = КонецДня(СтруктураПараметров.МоментВремени.Дата);
	Если ТипЗнч(СтруктураПараметров.МоментВремени) = Тип("Граница") Тогда
		Параметры[0] = КонецДня(СтруктураПараметров.МоментВремени.Значение);
	Иначе
		Параметры[0] = КонецДня(СтруктураПараметров.МоментВремени.Дата);
	КонецЕсли;
	//izhtc-Kir 17.08.2015 )
	Параметры[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),Параметры); 
	СтруктураДляТаблицыПараметров.Вставить("МоментВремени", Граница);
	//--СисИнфо
	Если ВидВНА = "НМА" Тогда
		СтруктураДляТаблицыПараметров.Вставить("НематериальныйАктив", МассивВНА);
	Иначе	
		СтруктураДляТаблицыПараметров.Вставить("ОсновноеСредство", МассивВНА);
	КонецЕсли; 
	
	// Получим таблицу параметров ВНА.
	ТаблицаПараметров = ПолучитьТаблицуПараметровВНА(СтруктураДляТаблицыПараметров, "ТаблицаЗначений");
	ДоработатьТаблицуПараметровВНА(ТаблицаПараметров);
	
	// Изменение кода. Начало. 17.02.2014{{
	МассивСубконто = Новый Массив;
	Если ВидВНА = "НМА" Тогда 
		МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.НематериальныеАктивы);
	Иначе
		МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ОсновныеСредства);
	КонецЕсли;
	// Изменение кода. Конец. 17.02.2014}}
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаПараметров"      ,ТаблицаПараметров);
	Запрос.УстановитьПараметр("МоментВремени"          ,СтруктураПараметров.МоментВремени);
	Запрос.УстановитьПараметр("Организация"            ,СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("МассивВНА"              ,МассивВНА);
	Запрос.УстановитьПараметр("МассивСчетовУчета"      ,ТаблицаПараметров.ВыгрузитьКолонку("СчетУчета"));
	Запрос.УстановитьПараметр("МассивСчетовАмортизация",ТаблицаПараметров.ВыгрузитьКолонку("СчетНачисленияАмортизации"));
	Запрос.УстановитьПараметр("МассивСчетовСнижения"   ,ТаблицаПараметров.ВыгрузитьКолонку("СчетСниженияСтоимости"));
	Запрос.УстановитьПараметр("ВидДвижения"            ,СтруктураПараметров.ВидДвижения);
	// 1c-izhtc, ChuckNorris, 17.08.2015 (
	//Запрос.УстановитьПараметр("МассивСубконто"		   ,МассивСубконто);	
	// 1c-izhtc, ChuckNorris, 17.08.2015 )
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПараметров.ВНА КАК ОбъектВНА,
	               |	ТаблицаПараметров.СчетСниженияСтоимости КАК СчетСниженияСтоимости,
	               |	ТаблицаПараметров.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	               |	ТаблицаПараметров.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	               |	ТаблицаПараметров.Класс КАК Класс,
	               |	ТаблицаПараметров.СчетУчета КАК СчетУчета
				   //++Сис_инфо //получение объекта строительства //2012-07-23
				   |	,ТаблицаПараметров.ОбъектСтроительства КАК ОбъектСтроительства
				   //--Сис_инфо				   
	               |ПОМЕСТИТЬ ТаблицаПараметров
	               |ИЗ
	               |	&ТаблицаПараметров КАК ТаблицаПараметров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПараметров.ОбъектВНА,
	               |	ТаблицаПараметров.СчетСниженияСтоимости КАК СчетСниженияСтоимости,
	               // ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-11-05 (#4297) 
	               |	ТаблицаПараметров.СчетУчета КАК СчетУчета,
	               |	ТаблицаПараметров.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	               // ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-11-05 (#4297) 
	               |	ВЫБОР
	               |		КОГДА &ВидДвижения = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыДвиженияОбесценения.ФормированиеРезерва)
	               |			ТОГДА бит_му_ПараметрыКлассовВНА.СчетРасходовОтОбесценения
	               |		ИНАЧЕ бит_му_ПараметрыКлассовВНА.СчетДоходовОтОбесценения
	               |	КОНЕЦ КАК СчетДоходовРасходов,
	               |	ЕСТЬNULL(Стоимость_Остатки.СуммаМУОстатокДт, 0) - ЕСТЬNULL(Амортизация_Остатки.СуммаМУОстатокКт, 0) - ЕСТЬNULL(Обесценение_Остатки.СуммаМУОстатокКт, 0) КАК БалансоваяСтоимость,
	               |	ТаблицаПараметров.Класс КАК Класс,
	               |	ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыКлассовОС.ПустаяСсылка) КАК ВидКласса,
	               |	ЕСТЬNULL(Обесценение_Остатки.СуммаМУОстатокКт, 0) КАК СуммаОбесценения,
	               |	ЕСТЬNULL(Амортизация_Остатки.СуммаМУОстатокКт, 0) КАК НачисленнаяАмортизация,
	               |	ЕСТЬNULL(Стоимость_Остатки.СуммаМУОстатокДт, 0) КАК ПервоначальнаяСтоимость
				   //++Сис_инфо //получение объекта строительства //2012-07-23
				   |	,ТаблицаПараметров.ОбъектСтроительства КАК ОбъектСтроительства
				   //--Сис_инфо
				   //Начало_бит_Магомедов_20.07.2012 
				   |	,Стоимость_Остатки.Субконто1 КАК СубконтоУчета1,
				   |	Стоимость_Остатки.Субконто2 КАК СубконтоУчета2,
				   |	Стоимость_Остатки.Субконто3 КАК СубконтоУчета3,
				   |	Стоимость_Остатки.Субконто4 КАК СубконтоУчета4
				   //Конец_бит_Магомедов_20.07.2012 				   
	               |ИЗ
	               |	ТаблицаПараметров КАК ТаблицаПараметров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыКлассовВНА КАК бит_му_ПараметрыКлассовВНА
	               |		ПО ТаблицаПараметров.Класс = бит_му_ПараметрыКлассовВНА.Класс
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&МоментВремени,
	               |				Счет В (&МассивСчетовУчета),
				   // 1c-izhtc, ChuckNorris, 17.08.2015 ( 
				   //|				&МассивСубконто,
				   |				,
				   // 1c-izhtc, ChuckNorris, 17.08.2015 ) 
				   |				Организация = &Организация
	               |					И Субконто1 В (&МассивВНА)) КАК Стоимость_Остатки
	               |		ПО ТаблицаПараметров.ОбъектВНА = Стоимость_Остатки.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&МоментВремени,
	               |				Счет В (&МассивСчетовАмортизация),
				   // 1c-izhtc, ChuckNorris, 17.08.2015 ( 
				   //|				&МассивСубконто,
				   |				,
				   // 1c-izhtc, ChuckNorris, 17.08.2015 ) 
				   |				Организация = &Организация
	               |					И Субконто1 В (&МассивВНА)) КАК Амортизация_Остатки
	               |		ПО ТаблицаПараметров.ОбъектВНА = Амортизация_Остатки.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&МоментВремени,
	               |				Счет В (&МассивСчетовСнижения),
				   // 1c-izhtc, ChuckNorris, 17.08.2015 ( 
				   //|				&МассивСубконто,
				   |				,
				   // 1c-izhtc, ChuckNorris, 17.08.2015 ) 
				   |				Организация = &Организация
	               |					И Субконто1 В (&МассивВНА)) КАК Обесценение_Остатки
	               |		ПО ТаблицаПараметров.ОбъектВНА = Обесценение_Остатки.Субконто1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаПараметров";
				   
    Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ПараметрыВНА = Новый Соответствие;
	
	РезТаблица = Результат.Выгрузить();
	
	Для каждого СтрокаТаблицы Из РезТаблица Цикл
		
		Если ВидВНА = "ОС" Тогда
		
			СтрокаТаблицы.ВидКласса = СтрокаТаблицы.Класс.ВидКласса;
		
		КонецЕсли; 
		ПараметрыВНА.Вставить(СтрокаТаблицы.ОбъектВНА,СтрокаТаблицы);
	
	КонецЦикла; 
	
	Возврат ПараметрыВНА;

КонецФункции // ПолучитьПараметрыДляОбесцененияВНА()

#КонецОбласти

#Область ПроцедурыИФункцииДляВыполненияПереоценкиВна

// Процедура выполняет движения по переоценки ВНА.
// 
// Параметры: 
//  СтруктураШапкиДокумента - Структура.
//  ТаблицаДанных			- ТаблицаЗначений.
//  СтруктураКурсыВалют     - Структура.
//  НаборЗаписей_МУ			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  ТаблицаЗаписей_События  - ТаблицаЗначений.
//  ВидВНА					- Строка, "ОС", "НМА".
// 	ИсторическиеКурсы		- Соответствие - обязателен для НМА.
// 
Процедура ВыполнитьДвиженияПоПереоценкиВНА(СтруктураШапкиДокумента
									      ,ТаблицаДанных
									      ,СтруктураКурсыВалют
									   	  ,НаборЗаписей_МУ
									      ,ТаблицаЗаписей_События
									      ,ВидВНА
										  ,ИсторическиеКурсы=Неопределено) Экспорт
							   
	МетодУчетаАмортизацииПриПереоценке = СтруктураШапкиДокумента.МетодУчетаАмортизацииПриПереоценке;
	МенеджерПеречисления 			   = Перечисления.бит_му_МетодыУчетаАмортизацииПриПереоценке;
	АмортизацияСписывается 			   = (МетодУчетаАмортизацииПриПереоценке = МенеджерПеречисления.АмортизацияСписывается);
	
	ИмяИзмеренияВНА = ?(ВидВНА = "ОС", "ОсновноеСредство", "НематериальныйАктив");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			
		СпрСтоимость = СтрокаТаблицы.СправедливаяСтоимость;
		БалСтоимость = СтрокаТаблицы.БалансоваяСтоимость;
		
		Если СпрСтоимость = БалСтоимость Тогда
			Продолжить;
		КонецЕсли;
		
		Курсы = ИсторическиеКурсы[СтрокаТаблицы[ИмяИзмеренияВНА]];
		
		// Определим направление переоценки.
		// Справедливая стоимость < Балансовой стоимости = Уценка.
		// Справедливая стоимость > Балансовой стоимости = Дооценка.
		
		Если СпрСтоимость < БалСтоимость Тогда
			// Это "Уценка".
			
			Событие 	 = Перечисления["бит_му_События" + ВидВНА].Уценка;
			СуммаРезерва = СтрокаТаблицы.СуммаРезерваПереоценки;
			
			// Если остаток счета резерва переоценки не равен 0, тогда
			// ранее была признана дооценка.
			Если Не СуммаРезерва = 0 Тогда
				
				// АМОРТИЗАЦИЯ ПЕРЕСЧИТЫВАЕТСЯ ПРОПОРЦИОНАЛЬНО.
				Если Не АмортизацияСписывается Тогда
					
					// Расчитаем значение сумм: 
					// 1) ИзменениеСтоимости  	- сумма изменения счета учета.
					// 2) СписаниеРезерва 		- сумма списания резерва.
					// 3) НачислениеОбесценения - сумма начисления обесценения.
					// 
					// 4) ИзменениеАмортизации  		   - сумма корректировки амортизационных отчислений.
					// 5) СписаниеАмортизацииРезерва 	   - сумма корректировки амортизационных отчислений за счет резерва переоценки.
					// 6) НачислениеАмортизацииОбесценения - сумма корректировки амортизационных отчислений 
					// 										 за счет дохода от переоценки.
					
					ИзменениеАмортизации = Окр(-1 * (СтрокаТаблицы.Амортизация * (СпрСтоимость / БалСтоимость)) + СтрокаТаблицы.Амортизация, 2);
					ИзменениеСтоимости   = Окр(БалСтоимость - СпрСтоимость + ИзменениеАмортизации, 2);
					
					// Рассчитаем суммы по корректировке амортизации.
					СтруктураСумм = РассчитатьСуммуУменьшенияОстаткаИНачисленияИзбытка(СтрокаТаблицы.СуммаКорректировкиРезерва
																					  ,ИзменениеАмортизации);
																				
					СписаниеАмортизацииРезерва 		 = СтруктураСумм.СуммаУменьшенияОстатка;
					НачислениеАмортизацииОбесценения = СтруктураСумм.СуммаНачисленияИзбытка;
					
					// Увеличиваем сумму резерва.
					СуммаРезерва = СуммаРезерва + СписаниеАмортизацииРезерва;
					
					// Рассчитаем суммы по изменению стоимости.
					СтруктураСумм = РассчитатьСуммуУменьшенияОстаткаИНачисленияИзбытка(СуммаРезерва
																					  ,ИзменениеСтоимости);
																				
					СписаниеРезерва 	  = СтруктураСумм.СуммаУменьшенияОстатка;
					НачислениеОбесценения = СтруктураСумм.СуммаНачисленияИзбытка;
					
					// ДТ СчетРезерваПереоценки КТ СчетУчета СписаниеРезерва.
					СоздатьЗаписьПоСписаниюРезерва(СтруктураШапкиДокумента
												  ,НаборЗаписей_МУ
												  ,СтрокаТаблицы
												  ,Курсы
												  ,СписаниеРезерва
												  ,"Списание резерва " + ВидВНА);
					
					// ДТ СчетРасходаОтПереоценки КТ СчетСниженияСтоимости НачислениеОбесценения.
					СоздатьЗаписьПоНачислениюОбесценения(СтруктураШапкиДокумента
														,НаборЗаписей_МУ
														,СтрокаТаблицы
														,Курсы
														,НачислениеОбесценения
														,"Начисление обесценения " + ВидВНА);
														
					// ДТ СчетНачисленияАмортизации КТ СчетРезерваПереоценки СписаниеАмортизацииРезерва.
					СоздатьЗаписьПоКорректировкеАмортизацииЗаСчетРезерваПереоценки(СтруктураШапкиДокумента
																				  ,НаборЗаписей_МУ
																				  ,СтрокаТаблицы
																				  ,Курсы
																				  ,СписаниеАмортизацииРезерва
																				  ,"Корректировка амортизационных отчислений " + ВидВНА);
																  
					// ДТ СчетНачисленияАмортизации КТ СчетДоходаОтПереоценки НачислениеАмортизацииОбесценения.
					СоздатьЗаписьПоКорректировкеАмортизации_Уценка(СтруктураШапкиДокумента
																  ,НаборЗаписей_МУ
																  ,СтрокаТаблицы
																  ,Курсы
																  ,НачислениеАмортизацииОбесценения
																  ,"Корректировка амортизационных отчислений " + ВидВНА);
				Иначе											  
					// АМОРТИЗАЦИЯ СПИСЫВАЕТСЯ
					
					// Расчитаем значение сумм: 
					// 1) СписаниеРезерва 		- сумма списания резерва.
					// 2) НачислениеОбесценения - сумма начисления обесценения.
					
					СписаниеРезерва 	  = БалСтоимость - СпрСтоимость;
					НачислениеОбесценения = СписаниеРезерва - СуммаРезерва;
					
					// ДТ СчетНачисленияАмортизации КТ СчетУчета Амортизация.
					СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента
													  ,НаборЗаписей_МУ
													  ,СтрокаТаблицы
													  ,Курсы
													  ,СтрокаТаблицы.Амортизация
													  ,"Списание амортизации " + ВидВНА);
					
					Если СписаниеРезерва <= СуммаРезерва Тогда
						
						// ДТ СчетРезерваПереоценки КТ СчетУчета СписаниеРезерва.
						СоздатьЗаписьПоСписаниюРезерва(СтруктураШапкиДокумента
													  ,НаборЗаписей_МУ
													  ,СтрокаТаблицы
													  ,Курсы
													  ,СписаниеРезерва
													  ,"Списание резерва " + ВидВНА);
					Иначе
						
						// ДТ СчетРезерваПереоценки КТ СчетУчета СуммаРезерва.
						СоздатьЗаписьПоСписаниюРезерва(СтруктураШапкиДокумента
													  ,НаборЗаписей_МУ
													  ,СтрокаТаблицы
													  ,Курсы
													  ,СуммаРезерва
													  ,"Списание резерва " + ВидВНА);
														  
						// ДТ СчетРасходаОтПереоценки КТ СчетСниженияСтоимости НачислениеОбесценения.
						СоздатьЗаписьПоНачислениюОбесценения(СтруктураШапкиДокумента
															,НаборЗаписей_МУ
															,СтрокаТаблицы
															,Курсы
															,НачислениеОбесценения
															,"Начисление обесценения " + ВидВНА);
					КонецЕсли;
				
				КонецЕсли; // Если Не АмортизацияСписывается Тогда
				
			Иначе
				// Дооценка не признавалась ранее.
				
				// АМОРТИЗАЦИЯ ПЕРЕСЧИТЫВАЕТСЯ ПРОПОРЦИОНАЛЬНО.
				Если Не АмортизацияСписывается Тогда
					
					// Расчитаем значение сумм: 
					// 1) НачислениеОбесценения 		   - сумма начисления обесценения.
					// 2) НачислениеАмортизацииОбесценения - сумма корректировки амортизационных отчислений.
					
					НачислениеОбесценения 			 = Окр(-1 * (СтрокаТаблицы.Стоимость   * (СпрСтоимость / БалСтоимость)) + СтрокаТаблицы.Стоимость, 2);
					НачислениеАмортизацииОбесценения = Окр(-1 * (СтрокаТаблицы.Амортизация * (СпрСтоимость / БалСтоимость)) + СтрокаТаблицы.Амортизация, 2);
					
					// ДТ СчетРасходаОтПереоценки КТ СчетСниженияСтоимости НачислениеОбесценения.
					СоздатьЗаписьПоНачислениюОбесценения(СтруктураШапкиДокумента
														,НаборЗаписей_МУ
														,СтрокаТаблицы
														,Курсы
														,НачислениеОбесценения
														,"Начисление обесценения " + ВидВНА);
					
					// ДТ СчетНачисленияАмортизации КТ СчетДоходаОтПереоценки НачислениеАмортизацииОбесценения.
					СоздатьЗаписьПоКорректировкеАмортизации_Уценка(СтруктураШапкиДокумента
																  ,НаборЗаписей_МУ
																  ,СтрокаТаблицы
																  ,Курсы
																  ,НачислениеАмортизацииОбесценения
																  ,"Корректировка амортизационных отчислений " + ВидВНА);
				Иначе											  
					// АМОРТИЗАЦИЯ СПИСЫВАЕТСЯ
					
					// Расчитаем значение сумм: 
					// 1) НачислениеОбесценения - сумма начисления обесценения.
					
					НачислениеОбесценения = БалСтоимость - СпрСтоимость;
					
					// ДТ СчетНачисленияАмортизации КТ СчетУчета Амортизация.
					СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента
													  ,НаборЗаписей_МУ
													  ,СтрокаТаблицы
													  ,Курсы
													  ,СтрокаТаблицы.Амортизация
													  ,"Списание амортизации " + ВидВНА);
					
					// ДТ СчетРасходаОтПереоценки КТ СчетСниженияСтоимости НачислениеОбесценения.
					СоздатьЗаписьПоНачислениюОбесценения(СтруктураШапкиДокумента
														,НаборЗаписей_МУ
														,СтрокаТаблицы
														,Курсы
														,НачислениеОбесценения
														,"Начисление обесценения " + ВидВНА);

				КонецЕсли; // Если Не АмортизацияСписывается Тогда
			
			КонецЕсли; // Если Не СуммаРезерва = 0 Тогда
			
		Иначе
			// Это "Дооценка".
			
			Событие 		 = Перечисления["бит_му_События" + ВидВНА].Дооценка;
			СуммаОбесценения = СтрокаТаблицы.СуммаОбесценения;
			
			// Если остаток счета снижения стоимости не равен 0, тогда
			// ранее была признана уценка.
			Если Не СуммаОбесценения = 0 Тогда
				
				// АМОРТИЗАЦИЯ ПЕРЕСЧИТЫВАЕТСЯ ПРОПОРЦИОНАЛЬНО.
				Если Не АмортизацияСписывается Тогда
					
					// Расчитаем значение сумм: 
					// 1) ИзменениеСтоимости  - сумма изменения счета учета.
					// 2) СписаниеОбесценения - сумма списания обесценения.
					// 3) НачислениеРезерва   - сумма начисления резерва.
					// 
					// 4) ИзменениеАмортизации  		 - сумма корректировки амортизационных отчислений.
					// 5) СписаниеАмортизацииОбесценения - сумма корректировки амортизационных отчислений 
					// 									   за счет обесценения от переоценки.
					// 6) НачислениеАмортизацииРезерва 	 - сумма корректировки амортизационных отчислений за счет расхода переоценки.
					
					ИзменениеАмортизации = Окр(СтрокаТаблицы.Амортизация * (СпрСтоимость / БалСтоимость) - СтрокаТаблицы.Амортизация, 2);
					ИзменениеСтоимости   = Окр(СпрСтоимость - БалСтоимость + ИзменениеАмортизации, 2);
					
					// Рассчитаем суммы по корректировке амортизации.
					СтруктураСумм = РассчитатьСуммуУменьшенияОстаткаИНачисленияИзбытка(СтрокаТаблицы.СуммаКорректировкиОбесценения
																					  ,ИзменениеАмортизации);
																				
					СписаниеАмортизацииОбесценения = СтруктураСумм.СуммаУменьшенияОстатка;
					НачислениеАмортизацииРезерва   = СтруктураСумм.СуммаНачисленияИзбытка;
					
					// Рассчитаем суммы по изменению стоимости.
					СтруктураСумм = РассчитатьСуммуУменьшенияОстаткаИНачисленияИзбытка(СуммаОбесценения
																					  ,ИзменениеСтоимости);
																				
					СписаниеОбесценения = СтруктураСумм.СуммаУменьшенияОстатка;
					НачислениеРезерва   = СтруктураСумм.СуммаНачисленияИзбытка;
					
					// ДТ СчетСниженияСтоимости КТ СчетДоходаОтПереоценки СписаниеОбесценения.
					СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
													  ,НаборЗаписей_МУ
													  ,СтрокаТаблицы
													  ,Курсы
													  ,СписаниеОбесценения
													  ,"Списание обесценения " + ВидВНА);
					
					// ДТ СчетУчета КТ СчетРезерваПереоценки НачислениеРезерва.
					СоздатьЗаписьПоНачислениюРезерва(СтруктураШапкиДокумента
													,НаборЗаписей_МУ
													,СтрокаТаблицы
													,Курсы
													,НачислениеРезерва
													,"Начисление резерва " + ВидВНА);
													
					// ДТ СчетРасходаОтПереоценки КТ СчетНачисленияАмортизации СписаниеАмортизацииОбесценения.
					СоздатьЗаписьПоКорректировкеАмортизацииЗаСчетРасходаОтПереоценки(СтруктураШапкиДокумента
																					,НаборЗаписей_МУ
																					,СтрокаТаблицы
																					,Курсы
																					,СписаниеАмортизацииОбесценения
																					,"Корректировка амортизационных отчислений " + ВидВНА);
																					
					// ДТ СчетРезерваПереоценки КТ СчетНачисленияАмортизации НачислениеАмортизацииРезерва.
					СоздатьЗаписьПоКорректировкеАмортизации_Дооценка(СтруктураШапкиДокумента
																	,НаборЗаписей_МУ
																	,СтрокаТаблицы
																	,Курсы
																	,НачислениеАмортизацииРезерва
																	,"Корректировка амортизационных отчислений " + ВидВНА);
				Иначе												
					// АМОРТИЗАЦИЯ СПИСЫВАЕТСЯ
					
					// Расчитаем значение сумм: 
					// 1) СписаниеОбесценения - сумма списания обесценения.
					// 2) НачислениеРезерва   - сумма начисления резерва.
					
					СписаниеОбесценения = СпрСтоимость - БалСтоимость;
					НачислениеРезерва   = СпрСтоимость - БалСтоимость - СуммаОбесценения;
					
					// ДТ СчетНачисленияАмортизации КТ СчетУчета Амортизация.
					СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента
													  ,НаборЗаписей_МУ
													  ,СтрокаТаблицы
													  ,Курсы
													  ,СтрокаТаблицы.Амортизация
													  ,"Списание амортизации " + ВидВНА);
					
					Если СписаниеОбесценения <= СуммаОбесценения Тогда
						
						// ДТ СчетСниженияСтоимости КТ СчетДоходаОтПереоценки СписаниеОбесценения.
						СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
														  ,НаборЗаписей_МУ
														  ,СтрокаТаблицы
														  ,Курсы
														  ,СписаниеОбесценения
														  ,"Списание обесценения " + ВидВНА);
					Иначе
						
						// ДТ СчетСниженияСтоимости КТ СчетДоходаОтПереоценки СуммаОбесценения.
						СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
														  ,НаборЗаписей_МУ
														  ,СтрокаТаблицы
														  ,Курсы
														  ,СуммаОбесценения
														  ,"Списание обесценения " + ВидВНА);
														  
						// ДТ СчетУчета КТ СчетРезерваПереоценки НачислениеРезерва.
						СоздатьЗаписьПоНачислениюРезерва(СтруктураШапкиДокумента
														,НаборЗаписей_МУ
														,СтрокаТаблицы
														,Курсы
														,НачислениеРезерва
														,"Начисление резерва " + ВидВНА);
					КонецЕсли;
				
				КонецЕсли; // Если Не АмортизацияСписывается Тогда
				
			Иначе
				// Уценка не признавалась ранее.
				
				// АМОРТИЗАЦИЯ ПЕРЕСЧИТЫВАЕТСЯ ПРОПОРЦИОНАЛЬНО.
				Если Не АмортизацияСписывается Тогда
					
					// Расчитаем значение сумм: 
					// 1) НачислениеРезерва 		   - сумма начисления резерва.
					// 2) НачислениеАмортизацииРезерва - сумма корректировки амортизационных отчислений.
					
					НачислениеРезерва 			 = Окр(СтрокаТаблицы.Стоимость   * (СпрСтоимость / БалСтоимость) - СтрокаТаблицы.Стоимость, 2);
					НачислениеАмортизацииРезерва = Окр(СтрокаТаблицы.Амортизация * (СпрСтоимость / БалСтоимость) - СтрокаТаблицы.Амортизация, 2);
					
					// ДТ СчетУчета КТ СчетРезерваПереоценки НачислениеРезерва.
					СоздатьЗаписьПоНачислениюРезерва(СтруктураШапкиДокумента
													,НаборЗаписей_МУ
													,СтрокаТаблицы
													,Курсы
													,НачислениеРезерва
													,"Начисление резерва " + ВидВНА);
					
					// ДТ СчетРезерваПереоценки КТ СчетНачисленияАмортизации Сумма_Y.
					СоздатьЗаписьПоКорректировкеАмортизации_Дооценка(СтруктураШапкиДокумента
																	,НаборЗаписей_МУ
																	,СтрокаТаблицы
																	,Курсы
																	,НачислениеАмортизацииРезерва
																	,"Корректировка амортизационных отчислений " + ВидВНА);
				Иначе												
					// АМОРТИЗАЦИЯ СПИСЫВАЕТСЯ
					
					// Расчитаем значение сумм: 
					// 1) НачислениеРезерва - сумма начисления резерва.
					
					НачислениеРезерва = СпрСтоимость - БалСтоимость;
					
					// ДТ СчетНачисленияАмортизации КТ СчетУчета Амортизация.
					СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента
													  ,НаборЗаписей_МУ
													  ,СтрокаТаблицы
													  ,Курсы
													  ,СтрокаТаблицы.Амортизация
													  ,"Списание амортизации " + ВидВНА);
					
					// ДТ СчетУчета КТ СчетРезерваПереоценки НачислениеРезерва.
					СоздатьЗаписьПоНачислениюРезерва(СтруктураШапкиДокумента
													,НаборЗаписей_МУ
													,СтрокаТаблицы
													,Курсы
													,НачислениеРезерва
													,"Начисление резерва " + ВидВНА);
												
				КонецЕсли; // Если Не АмортизацияСписывается Тогда
				
			КонецЕсли; // Если Не СуммаОбесценения = 0 Тогда
			
		КонецЕсли; // Если СпрСтоимость < БалСтоимость Тогда
		
		// Добавим событие.
		ЗаписьСобытие = ТаблицаЗаписей_События.Добавить();
		ЗаписьСобытие[ИмяИзмеренияВНА] = СтрокаТаблицы[ИмяИзмеренияВНА];
		ЗаписьСобытие.Событие		   = Событие;
		
	КонецЦикла; // Обход таблицы.
							 
КонецПроцедуры // ВыполнитьДвиженияПоПереоценкиВНА()

// Функция получает группуОС согласно регл. учету.
//
// Параметры:
//   ОсновноеСредство - СправочникСсылка.ОсновныеСредства.
//   Организации - СправочникСсылка.Организации.
//   ДатаСведений - Дата.
//
// Возвращаемое значение:
//  ГруппаОС - ПеречислениеСсылка.ГруппыОС.
//
Функция ПолучитьГруппуОС(ОсновноеСредство, Организация, ДатаСведений) Экспорт

	ГруппаОС = Неопределено;
		
	МетаОб = ОсновноеСредство.Метаданные();
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("ГруппаОС", МетаОб) Тогда
		
		 ГруппаОС = ОсновноеСредство.ГруппаОС;
		
	ИначеЕсли бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("РегистрыСведений", "ПервоначальныеСведенияОСБухгалтерскийУчет") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
		Запрос.Текст =  "ВЫБРАТЬ
		                |	СведенияБух.ГруппаОС
		                |ИЗ
		                |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		                |			&ДатаСведений,
		                |			Организация = &Организация
		                |				И ОсновноеСредство = &ОсновноеСредство) КАК СведенияБух";
						
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ГруппаОС = Выборка.ГруппаОС;
		
		КонецЕсли; 
		 
	Иначе	 
		
		ВызватьИсключение "Ошибка определения ГруппыОС";
		
	КонецЕсли; 
	

	Возврат ГруппаОС;
	
КонецФункции // ПолучитьГруппуОС()

#КонецОбласти

// Функция определяет фактический срок использования ВНА (в месяцах)
// исходя из даты принятия ВНА к учету и даты выбытия.
// 
// Параметры:
//   ДатаПринятияКУчету - Дата, дата принятия актива к учету.
//   ДатаВыбытия 		- Дата, дата выбытия актива.
// 
// Возвращаемое значение:
//   КоличествоМесяцев - Число, число месяцев.
// 
Функция ОпределитьФактическийСрокИспользования(Организация, ОсновноеСредство, ДатаМодернизации) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("ДатаМодернизации", ДатаМодернизации);
	Запрос.УстановитьПараметр("Событие",          Перечисления.бит_му_СобытияОС.НачислениеАмортизации);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СобытияОС.Период) КАК КоличествоПериодов
		|ИЗ
		|	РегистрСведений.бит_му_СобытияОС КАК СобытияОС
		|ГДЕ
		|	СобытияОС.Организация = &Организация
		|	И СобытияОС.ОсновноеСредство = &ОсновноеСредство
		|	И СобытияОС.Событие = &Событие
		|	И СобытияОС.Период <= &ДатаМодернизации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда		
		КоличествоМесяцев = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		КоличествоМесяцев = Выборка.КоличествоПериодов;
	КонецЕсли; 
	
	Возврат КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

// Процедура проверяет строку таблицы данных по основным средствам.
// 
// Параметры:
//  СтрокаТаблицы  		- СтрокаТаблицыЗначений.
//  КолонкиТаблицы 		- КолонкиТаблицыЗначений.
//  СтруктураПараметров - Структура, по умолчанию Неопределено.
//  Отказ          		- Булево, по умолчанию Ложь.
//  Заголовок      		- Строка, по умолчанию "".
// 
Процедура ПроверитьСтрокуТаблицыОС(СтрокаТаблицы
								  , КолонкиТаблицы
								  , СтруктураПараметров = Неопределено
								  , Отказ = Ложь
								  , Заголовок = "") Экспорт

	НачалоСообщения = Нстр("ru = 'В строке № %1% табличной части ""Основные средства"" '");
	НачалоСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НачалоСообщения, СтрокаТаблицы.НомерСтроки);
		
	Если КолонкиТаблицы.Найти("ДатаПринятия") <> Неопределено 
		И Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаПринятия) Тогда
		
		ТекстСообщения = НачалоСообщения 
						+ Нстр("ru = 'указано основное средство ""%1%"" не принятое к учету!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.ОсновноеСредство);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);			   
		
	КонецЕсли; 
	
	Если КолонкиТаблицы.Найти("ДатаВыбытия") <> Неопределено 
		И ЗначениеЗаполнено(СтрокаТаблицы.ДатаВыбытия)
		И СтрокаТаблицы.ДатаВыбытия <= СтруктураПараметров.Дата Тогда
		
		ТекстСообщения = НачалоСообщения
						+ Нстр("ru = 'указано выбывшее основное средство ""%1%"", дата выбытия: %2%!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
						, СтрокаТаблицы.ОсновноеСредство
						, Формат(СтрокаТаблицы.ДатаВыбытия, "ДЛФ=DT"));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
		
	КонецЕсли; 
	
	Если КолонкиТаблицы.Найти("ОбъектВФинансовойАренде") <> Неопределено 
		И СтрокаТаблицы.ОбъектВФинансовойАренде Тогда
		
		ТекстСообщения = НачалоСообщения
						+ Нстр("ru = 'указано основное средство ""%1%"", находящееся в финансовой аренде!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.ОсновноеСредство);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
		
	КонецЕсли; 

КонецПроцедуры // ПроверитьСтрокуТаблицыОС()

// Процедура проверяет строку таблицы данных по нематериальным активам.
// 
// Параметры:
//  СтрокаТаблицы  		- СтрокаТаблицыЗначений
//  КолонкиТаблицы 		- КолонкиТаблицыЗначений
//  СтруктураПараметров - Структура, по умолчанию Неопределено.
//  Отказ          		- Булево, по умолчанию Ложь.
//  Заголовок      		- Строка, по умолчанию "".
// 
Процедура ПроверитьСтрокуТаблицыНМА(СтрокаТаблицы
								  ,КолонкиТаблицы
								  ,СтруктураПараметров = Неопределено
								  ,Отказ = Ложь
								  ,Заголовок = "") Экспорт

	НачалоСообщения = "В строке № "
			             +СтрокаТаблицы.НомерСтроки
						 +" табличной части ""Нематериальные активы""";
	
	
	Если КолонкиТаблицы.Найти("ДатаПринятия") <> Неопределено 
		И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаПринятия) Тогда
		
		ТекстСообщения =  НачалоСообщения
							+" указан нематериальный актив """
							+СтрокаТаблицы.НематериальныйАктив
							+""" не принятый к учету!";
		
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);							   
		
	КонецЕсли; 
	
	Если КолонкиТаблицы.Найти("ДатаВыбытия") <> Неопределено 
		И ЗначениеЗаполнено(СтрокаТаблицы.ДатаВыбытия)
		И СтрокаТаблицы.ДатаВыбытия <= СтруктураПараметров.Дата Тогда
		
		ТекстСообщения = НачалоСообщения
							+" указан выбывший нематериальный актив """
							+СтрокаТаблицы.НематериальныйАктив
							+""", дата выбытия: "
							+Формат(СтрокаТаблицы.ДатаВыбытия,"ДЛФ=DT")+" !";
		
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);							   
		
	КонецЕсли; 


КонецПроцедуры // ПроверитьСтрокуКолонкиНМА()

// Функция формирует массив недоступных параметров ВНА в зависимости от
// от метода начисления амортизации.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти - в составе строки должен быть реквизит "МетодНачисленияАмортизации".
//  Префикс		  - Строка.
// 
// Возвращаемое значение:
//  МассивНедоступныхПараметров - Массив;
// 
Функция СформироватьМассивНедоступныхПараметровАмортизации(ТекущаяСтрока, Префикс = "") Экспорт
	
	МассивНедоступныхПараметров = Новый Массив;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		МенеджерПеречисленияНМА 		 = Перечисления.бит_му_МетодыНачисленияАмортизацииНМА;
		МенеджерПеречисленияОС           = Перечисления.бит_му_МетодыНачисленияАмортизации;
		МетодНачисленияАмортизации_Новый = ТекущаяСтрока.МетодНачисленияАмортизации;
		
		Если МетодНачисленияАмортизации_Новый = МенеджерПеречисленияНМА.Линейный 
			ИЛИ МетодНачисленияАмортизации_Новый = МенеджерПеречисленияОС.Линейный  Тогда
			
			МассивНедоступныхПараметров.Добавить(Префикс + "КоэффициентУскорения");
			МассивНедоступныхПараметров.Добавить(Префикс + "ПредполагаемыйОбъемПродукции");
			МассивНедоступныхПараметров.Добавить(Префикс + "ЕдиницаИзмеренияОбъемаПродукции");
			
		ИначеЕсли МетодНачисленияАмортизации_Новый = МенеджерПеречисленияНМА.УменьшаемогоОстатка 
			ИЛИ МетодНачисленияАмортизации_Новый = МенеджерПеречисленияОС.УменьшаемогоОстатка Тогда
			
			МассивНедоступныхПараметров.Добавить(Префикс + "ПредполагаемыйОбъемПродукции");
			МассивНедоступныхПараметров.Добавить(Префикс + "ЕдиницаИзмеренияОбъемаПродукции");
			
		ИначеЕсли МетодНачисленияАмортизации_Новый = МенеджерПеречисленияНМА.Производственный
			ИЛИ МетодНачисленияАмортизации_Новый = МенеджерПеречисленияОС.Производственный Тогда
			
			МассивНедоступныхПараметров.Добавить(Префикс + "КоэффициентУскорения");
			
		КонецЕсли; // Условие по методу 
		
	КонецЕсли; // Условие по строке 
	
	Возврат МассивНедоступныхПараметров;
	
КонецФункции // СформироватьМассивНедоступныхПараметровАмортизации()

// Процедура очищает недоступные параметры амортизации
// в зависимости от метода начисления амортизации.
// 
// Параметры:
//  ТекущаяСтрока 				- ДанныеФормыЭлементКоллекции (Строка табличной части НематериальныеАктивы или ОсновныеСредства).
//  МассивИсключений 			- Массив.
//  МассивНедоступныхПараметров - Массив.
// 
Процедура ОчиститьНедоступныеПараметрыАмортизации(ТекущаяСтрока, МассивИсключений = Неопределено, МассивНедоступныхПараметров = Неопределено) Экспорт
	
	Если МассивИсключений = Неопределено Тогда	
		 МассивИсключений = Новый Массив;	
	КонецЕсли; 
	
	Если МассивНедоступныхПараметров = Неопределено Тогда
		// Получим массив недоступных параметров.
		МассивНедоступныхПараметров = СформироватьМассивНедоступныхПараметровАмортизации(ТекущаяСтрока);
	КонецЕсли;
	
	Для Каждого ТекИмяПараметра Из МассивНедоступныхПараметров Цикл
		
		Если Не МассивИсключений.Найти(ТекИмяПараметра) = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		ТекущаяСтрока[ТекИмяПараметра] = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьНедоступныеПараметрыАмортизации()

// Процедура проверяет ОС при выборе.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.
//  ВидКласса	   - ПеречислениеСсылка.бит_му_ВидыКлассовОС.
//  МассивОС	   - СправочникСсылка.ОсновыеСредства, МассивОС.
//  Отказ	 	   - Булево, по умолчанию Ложь.
// 
Процедура ПроверитьОСПриВыборе(ДокументОбъект, ВидКласса, МассивОС, Отказ = Ложь) Экспорт
	
	Заголовок = "Проверка параметров основного средства";
	
	// Сформируем массив параметров ОС для получения.
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ФинансоваяАренда_ОС);
	
	МоментВремени = ?(ДокументОбъект.ЭтоНовый(), КонецДня(ДокументОбъект.Дата), ДокументОбъект.МоментВремени());
	
	// Сформируем структуру параметров для получения таблицы параметров ОС.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     , ДокументОбъект.Организация);
	СтруктураПараметров.Вставить("ОсновноеСредство", МассивОС);
	СтруктураПараметров.Вставить("МоментВремени"   , МоментВремени);
	СтруктураПараметров.Вставить("ПараметрыВНА"	   , ПараметрыВНА);
	
	// Получим таблицу параметров ОС.
	ТаблицаПараметров = ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	
	Для Каждого ТекСтрока Из ТаблицаПараметров Цикл
		
		ТекущийВидКласса = ТекСтрока.Класс_ОС.ВидКласса;
			
		Если ВидКласса <> ТекущийВидКласса Тогда
			
			бит_ОбщегоНазначения.СообщитьОбОшибке("Вид класса """ + ТекущийВидКласса 
											  	  + """ основного средства """ + ТекСтрока.ВНА 
											  	  + """ не соответствует виду операции документа!"
											  	  ,Отказ
											  	  ,Заголовок);
			
		КонецЕсли;
		
		Если ТекСтрока.ФинансоваяАренда_ОС Тогда
			
			бит_ОбщегоНазначения.СообщитьОбОшибке("Основное средство """ + ТекСтрока.ВНА 
											      + """ находится в финансовой аренде!"
											  	  ,Отказ
											  	  ,Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьОСПриВыборе()

// Формирует структуру курсов по НМА используемых при принятии к учету.
// 
// Параметры:
// 	СтруктураШапкиДокумента - Структура.
// 	МассивВНА - Массив.
// 	Период - Дата, МоментВремени - на которую получаем параметры ВНА.
// 	СтруктураКурсыВалют - Структура - курсы валют используемые в документе.
// 
// Возвращаемое значение:
// 	ИсторическиеКурсы - Соответствие - по каждому переданному ВНА содержится структура курсов идентичная переданной.
// 
Функция ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивВНА, Период, СтруктураКурсыВалют) Экспорт
	
	// Имена валют по которым ведутся исторические курсы.
	МассивИменВалют = Новый Массив;
	МассивИменВалют.Добавить("МУ");
	МассивИменВалют.Добавить("Упр");
	
	ПараметрыВалюты = Новый Массив;
	ПараметрыВалюты.Добавить("Валюта");
	ПараметрыВалюты.Добавить("Курс");
	ПараметрыВалюты.Добавить("Кратность");
	
	ВидВНА = ОпределитьВидВНАПоМассиву(МассивВНА);
	
	ПараметрыВНА = Новый Массив;
	
	Если ВидВНА = "НМА" Тогда
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ВалютаМУ_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КурсМУ_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КратностьМУ_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ВалютаУпр_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КурсУпр_НМА);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КратностьУпр_НМА);
	Иначе
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ВалютаМУ_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КурсМУ_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КратностьМУ_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ВалютаУпр_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КурсУпр_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КратностьУпр_ОС);
	КонецЕсли;
	
	// Сформируем структуру параметров для получения таблицы параметров НМА.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     	  , СтруктураШапкиДокумента.Организация);
	Если ВидВНА = "НМА" Тогда
		СтруктураПараметров.Вставить("НематериальныйАктив", МассивВНА);
	Иначе
		СтруктураПараметров.Вставить("ОсновноеСредство", МассивВНА);
	КонецЕсли;
	СтруктураПараметров.Вставить("МоментВремени"      , Период);
	СтруктураПараметров.Вставить("ПараметрыВНА"	      , ПараметрыВНА);
	
	// Получим таблицу параметров ВНА.
	СоответствиеПараметровВНА = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "Соответствие");
	
	ИсторическиеКурсы = Новый Соответствие;
	
	Для Каждого ТекВНА Из МассивВНА Цикл
		
		ЗначенияПараметровВНА = СоответствиеПараметровВНА[ТекВНА];
		
		СтрКурсы = Новый Структура;
		
		Для Каждого КлючЗначение Из СтруктураКурсыВалют Цикл
			
			Если МассивИменВалют.Найти(КлючЗначение.Ключ) = Неопределено
				ИЛИ ЗначенияПараметровВНА = Неопределено Тогда
				// По данной валюте учет по историческим курсам не ведется
				// 	будем использовать текущие значения.
				СтрКурсы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			Иначе
				// Для данной валюты применяются исторические курсы.
				СтрКурса = Новый Структура;
				
				Для Каждого ТекПараметр Из ПараметрыВалюты Цикл
					
					ВидПараметра = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА[ТекПараметр+КлючЗначение.Ключ+"_"+ВидВНА];
					ЗначениеПараметра = ЗначенияПараметровВНА[ВидПараметра];
					
					СтрКурса.Вставить(ТекПараметр, ЗначениеПараметра);
				КонецЦикла;
				
				СтрКурсы.Вставить(КлючЗначение.Ключ, СтрКурса);
			КонецЕсли;
			
		КонецЦикла;
		
		ИсторическиеКурсы.Вставить(ТекВНА, СтрКурсы);
		
	КонецЦикла;	
	
	
	Возврат ИсторическиеКурсы;
	
КонецФункции

// Функция получает таблицу дат принятия к учету по каждому НМА из массива.
// 
// Параметры:
//  МассивНМА - Массив НМА, по которым получаем дату принятия к учету
//  Организация - СправочникСсылка.Организации.
// 
// Возвращаемое значение:
//  ТаблицаДатПринятия - Таблица значений.
// 
Функция ПодготовитьТаблицуДатПринятияНМА(МассивНМА, Организация) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СостояниеПринято", Перечисления.бит_му_СостоянияНМА.ПринятоКУчету);
	Запрос.УстановитьПараметр("МассивНМА", МассивНМА);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив,
	|	СостоянияНМА.ДатаСостояния Период
	|ИЗ
	|	РегистрСведений.бит_му_СостоянияНМА КАК СостоянияНМА
	|ГДЕ
	|	СостоянияНМА.Организация = &Организация
	|	И СостоянияНМА.Состояние = &СостояниеПринято
	|	И СостоянияНМА.НематериальныйАктив В(&МассивНМА)";
	
	ТаблицаДатПринятия = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДатПринятия;
	
КонецФункции

// Функция получает соответствие НМА и курса валюты документа
// на дату принятия к учету НМА.
// 
// Параметры:
//  МассивНМА - Массив.
// 	СтруктураКурсыВалютДокумент - Структура.
//  Организация - СправочникСсылка.Организации.
// 
// ВозвращаемоеЗначение:
// 	СоответствиеНМАиКурсов - Соответствие.
// 
Функция ПолучитьСоответствиеНМАиКурсовНаДатуПринятия(МассивНМА, вхСтруктураКурсыВалют, Организация) Экспорт
	
	// Получим дату принятия к учету для каждого ОС.
	ТаблицаДатПринятияНМА = ПодготовитьТаблицуДатПринятияНМА(МассивНМА, Организация);
	
	ТаблицаПериодов = ТаблицаДатПринятияНМА.Скопировать();
	ТаблицаПериодов.Свернуть("Период");
	
	Если НЕ вхСтруктураКурсыВалют.Свойство("Документ") Тогда
		СтруктураКурсыВалют = Новый Структура;
		СтруктураКурсыВалют.Вставить("Документ", вхСтруктураКурсыВалют);
	Иначе
		СтруктураКурсыВалют = вхСтруктураКурсыВалют;
	КонецЕсли; 
	
	// Получим курс валюты документа для каждого НМА на дату принятия к учету.
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсыВалют);

	СоответствиеНМАиКурсов = Новый Соответствие;
	 
	Для каждого Строка Из ТаблицаДатПринятияНМА Цикл
		СоответствиеНМАиКурсов.Вставить(Строка.НематериальныйАктив, Курсы[Строка.Период])
	КонецЦикла; 

	Возврат СоответствиеНМАиКурсов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает организацию на которую был принят ВНА.
// 
// Параметры:
//  ВНАСсылка - СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы.
//  ВидВНА    - Строка, "ОС" и "НМА".
// 
// Возвращаемое значение:
//  ТекОрганизация - СправочникСсылка.Организации.
// 
Функция ПолучитьОрганизациюВНА(ВНАСсылка, ВидВНА)
	
	ТекОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ВНАСсылка) Тогда
		Возврат ТекОрганизация;
	КонецЕсли;
	
	// Выборка из регистра сведений "Состояния".
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВНА", ВНАСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_му_СостоянияВНА.Организация
	|ИЗ
	|	РегистрСведений.бит_му_Состояния" + ВидВНА + " КАК бит_му_СостоянияВНА
	|ГДЕ
	|	бит_му_СостоянияВНА." + ?(ВидВНА = "ОС", "ОсновноеСредство", "НематериальныйАктив") + " = &ВНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзЗапроса.Следующий();
		
		ТекОрганизация = ВыборкаИзЗапроса.Организация;
		
	КонецЕсли;
	
	Возврат ТекОрганизация;
	
КонецФункции // ПолучитьОрганизациюВНА()

// Функция определяет вид ВНА по наполнению массива. 
// Анализируется первый элемент, предполагается однотипный состав массива.
// Используется при расчете амортизации ВНА и обесценении ВНА.
// 
// Параметры:
//  МассивВНА  - Массив.
// 
// Возвращаемое значение:
//   ВидВНА   - Строка.
// 
Функция ОпределитьВидВНАПоМассиву(МассивВНА)

	ВидВНА = "ОС";
	Если МассивВНА.Количество()>0 Тогда
	
		Если ТипЗнч(МассивВНА[0]) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
		
			ВидВНА = "НМА";
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат ВидВНА;

КонецФункции // ОпределитьВидВНАПоМассиву()

// Процедура убирает в именах колонок таблицы параметров постфиксы. 
// При необходимости таблица дополняется нулевой ЛиквидационнойСтоимостью
// Используется при расчете амортизации ВНА и обесценении ВНА.
// 
// Параметры:
//  ТаблицаПараметров  - Таблица.
// 
Процедура ДоработатьТаблицуПараметровВНА(ТаблицаПараметров)
	
	Для каждого Колонка Из ТаблицаПараметров.Колонки Цикл
		
		ПозицияПодчеркивания = Найти(Колонка.Имя,"_"); 
		Если ПозицияПодчеркивания>0 Тогда
			
			Колонка.Имя = Лев(Колонка.Имя,ПозицияПодчеркивания-1);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ТаблицаПараметров.Колонки.Найти("ЛиквидационнаяСтоимость") = Неопределено Тогда
		
		ТаблицаПараметров.Колонки.Добавить("ЛиквидационнаяСтоимость",Новый ОписаниеТипов("Число"));
		
	КонецЕсли; 
	
КонецПроцедуры // ДоработатьТаблицуПараметров()

// Процедура формирует проводку по списанию обесценения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаСписания			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
											,НаборЗаписей
											,СтрокаТаблицы
											,СтруктураКурсыВалют
											,СуммаСписания
											,СодержаниеДвижения)
	Если СуммаСписания = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,СтруктураШапкиДокумента.мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетСниженияСтоимости
										  ,СтрокаТаблицы.СчетДоходаОтПереоценки
										  ,СуммаСписания
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"ССС_Субконто","СубконтоД",СтруктураШапкиДокумента.мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	//БИТ Тртилек 24.07.2012 заполним вид движения МСФО
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	///БИТ Тртилек	
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюОбесценения()

// Процедура формирует проводку по списанию амортизации.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаСписания			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента
											,НаборЗаписей
											,СтрокаТаблицы
											,СтруктураКурсыВалют
											,СуммаАмортизации
											,СодержаниеДвижения)
	Если СуммаАмортизации = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,СтруктураШапкиДокумента.мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетНачисленияАмортизации
										  ,СтрокаТаблицы.СчетУчета
										  ,СуммаАмортизации
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СНА_Субконто","СУ_Субконто",СтруктураШапкиДокумента.мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюАмортизации()

// Процедура формирует проводку по начислению резерва.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаРезерва			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоНачислениюРезерва(СтруктураШапкиДокумента
										  ,НаборЗаписей
										  ,СтрокаТаблицы
										  ,СтруктураКурсыВалют
										  ,СуммаРезерва
										  ,СодержаниеДвижения)
	Если СуммаРезерва = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,СтруктураШапкиДокумента.мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетУчета
										  ,СтрокаТаблицы.СчетРезерваПереоценки
										  ,СуммаРезерва
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СУ_Субконто","СРП_Субконто",СтруктураШапкиДокумента.мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	//БИТ Тртилек 24.07.2012 заполним вид движения МСФО
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	///БИТ Тртилек
	
КонецПроцедуры // СоздатьЗаписьПоНачислениюРезерва()

// Процедура формирует проводку по списанию резерва.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаРезерва			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюРезерва(СтруктураШапкиДокумента
										,НаборЗаписей
										,СтрокаТаблицы
										,СтруктураКурсыВалют
										,СуммаРезерва
										,СодержаниеДвижения)
	Если СуммаРезерва = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,СтруктураШапкиДокумента.мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетРезерваПереоценки
										  ,СтрокаТаблицы.СчетУчета
										  ,СуммаРезерва
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СРП_Субконто","СУ_Субконто",СтруктураШапкиДокумента.мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюРезерва()

// Процедура формирует проводку по корректировке амортизационных отчислений (Дооценка).
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаКорректировки		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоКорректировкеАмортизации_Дооценка(СтруктураШапкиДокумента
														  ,НаборЗаписей
														  ,СтрокаТаблицы
														  ,СтруктураКурсыВалют
														  ,СуммаКорректировки
														  ,СодержаниеДвижения)
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,СтруктураШапкиДокумента.мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетРезерваПереоценки
										  ,СтрокаТаблицы.СчетНачисленияАмортизации
										  ,СуммаКорректировки
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СРП_Субконто","СНА_Субконто",СтруктураШапкиДокумента.мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	//БИТ Тртилек 24.07.2012 заполним вид движения МСФО
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	///БИТ Тртилек
	
КонецПроцедуры // СоздатьЗаписьПоКорректировкеАмортизации_Дооценка()

// Процедура формирует проводку по корректировке амортизационных отчислений за счет резерва переоценки.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаКорректировки		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоКорректировкеАмортизацииЗаСчетРезерваПереоценки(СтруктураШапкиДокумента
																		,НаборЗаписей
																		,СтрокаТаблицы
																		,СтруктураКурсыВалют
																		,СуммаКорректировки
																		,СодержаниеДвижения)
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,СтруктураШапкиДокумента.мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетНачисленияАмортизации
										  ,СтрокаТаблицы.СчетРезерваПереоценки
										  ,СуммаКорректировки
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СНА_Субконто","СРП_Субконто",СтруктураШапкиДокумента.мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоКорректировкеАмортизацииЗаСчетРезерваПереоценки()

// Процедура формирует проводку по корректировке амортизационных отчислений 
// за счет расхода от переоценки.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаКорректировки		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоКорректировкеАмортизацииЗаСчетРасходаОтПереоценки(СтруктураШапкиДокумента
																		  ,НаборЗаписей
																		  ,СтрокаТаблицы
																		  ,СтруктураКурсыВалют
																		  ,СуммаКорректировки
																		  ,СодержаниеДвижения)
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,СтруктураШапкиДокумента.мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетРасходаОтПереоценки
										  ,СтрокаТаблицы.СчетНачисленияАмортизации
										  ,СуммаКорректировки
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СубконтоР","СНА_Субконто",СтруктураШапкиДокумента.мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	//БИТ Тртилек 24.07.2012 заполним вид движения МСФО
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	///БИТ Тртилек
	
КонецПроцедуры // СоздатьЗаписьПоКорректировкеАмортизацииЗаСчетРасходаОтПереоценки()

// Процедура формирует проводку по корректировке амортизационных отчислений (Уценка).
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаКорректировки		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоКорректировкеАмортизации_Уценка(СтруктураШапкиДокумента
														,НаборЗаписей
														,СтрокаТаблицы
														,СтруктураКурсыВалют
														,СуммаКорректировки
														,СодержаниеДвижения)
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,СтруктураШапкиДокумента.мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетНачисленияАмортизации
										  ,СтрокаТаблицы.СчетДоходаОтПереоценки
										  ,СуммаКорректировки
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СНА_Субконто","СубконтоД",СтруктураШапкиДокумента.мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоКорректировкеАмортизации_Уценка()

// Процедура формирует проводку по начислению обесценения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаОбесценения		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоНачислениюОбесценения(СтруктураШапкиДокумента
											  ,НаборЗаписей
											  ,СтрокаТаблицы
											  ,СтруктураКурсыВалют
											  ,СуммаОбесценения
											  ,СодержаниеДвижения)
	Если СуммаОбесценения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,СтруктураШапкиДокумента.мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетРасходаОтПереоценки
										  ,СтрокаТаблицы.СчетСниженияСтоимости
										  ,СуммаОбесценения
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СубконтоР","ССС_Субконто",СтруктураШапкиДокумента.мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоНачислениюОбесценения()

// Процедура выполняет расчет суммы уменьшения остатка и суммы начисления избытка
// в зависимости от дельты исходных сумм для расчета.
// 
// Параметры:
//  ОстаточнаяСумма  - Число, сумма остатка.
//  УменьшающаяСумма - Число, сумма уменьшения остатка.
// 
// Возвращаемое значений:
//  СтруктураСумм - Структура, ключи: 1) СуммаУменьшенияОстатка - Число.
// 									  2) СуммаНачисленияИзбытка - Число.
// 
Функция РассчитатьСуммуУменьшенияОстаткаИНачисленияИзбытка(ОстаточнаяСумма
														  ,УменьшающаяСумма)
													 
	// Получим разность сумм.
	ДельтаСумм = (ОстаточнаяСумма - УменьшающаяСумма);
					
	Если ДельтаСумм >= 0 Тогда
		ТолькоПогашениеОстатка = (ОстаточнаяСумма >= УменьшающаяСумма);
		ДельтаОтрицательна 	   = Ложь;
	Иначе
		ТолькоПогашениеОстатка = бит_ОбщегоНазначения.МодульЧисла(ДельтаСумм) <= 0.01;
		ДельтаОтрицательна 	   = Истина;
	КонецЕсли;
	
	Если ТолькоПогашениеОстатка Тогда
		// Только погасить.
		СуммаУменьшенияОстатка = ?(ДельтаОтрицательна, ОстаточнаяСумма, УменьшающаяСумма);
		СуммаНачисленияИзбытка = 0;
	Иначе
		// Погасить остаток и начислить избыток.
		СуммаУменьшенияОстатка = ОстаточнаяСумма;
		СуммаНачисленияИзбытка = УменьшающаяСумма - СуммаУменьшенияОстатка;
	КонецЕсли;
	
	СтруктураСумм = Новый Структура;
	СтруктураСумм.Вставить("СуммаУменьшенияОстатка", СуммаУменьшенияОстатка);
	СтруктураСумм.Вставить("СуммаНачисленияИзбытка", СуммаНачисленияИзбытка);
	
	Возврат СтруктураСумм;
	
КонецФункции // РассчитатьСуммуУменьшенияОстаткаИНачисленияИзбытка()

#КонецОбласти
