////////////////////////////////////////////////////////////////////////////////
// 1С:Бухучет и торговля
//  ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ ХОЗЯЙСТВЕННЫХ ОПЕРАЦИЙ (ОБЩИЕ) (Сервер).
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
// 
// Параметры:
// 		Счет - Счет, к которому относится субконто.
//      Субконто - набор субконто.
// 		Номер или имя установливаемого субконто.
//      Значение субконто - значение устанавливаемого субконто.
// 
Процедура бит_УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "", ВидыСубконтоСчета = Неопределено) Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
    ПВХ = Счет.Метаданные().ВидыСубконто.Имя;
    
    //Если ВидыСубконтоСчета = Неопределено Тогда
    //     ВидыСубконтоСчета = Счет.ВидыСубконто;
    //КонецЕсли; 
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

        //Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
        Если ИмяСубконто > СвСч.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

        //ВидСубк = ВидыСубконтоСчета[ИмяСубконто - 1].ВидСубконто;
        ВидСубк = СвСч["ВидСубконто" + ИмяСубконто];

    Иначе
        
        Если ВидыСубконтоСчета = Неопределено Тогда
	        ВидыСубконтоСчета = Счет.ВидыСубконто;
	    КонецЕсли;
		ВидСубк = ПланыВидовХарактеристик[ПВХ][ИмяСубконто];

		Если ВидыСубконтоСчета.Найти(ВидСубк) = Неопределено Тогда
			Если Сообщать тогда
				бит_СообщитьОбОшибке("Вид субконто <" + ВидСубк + "> для счета """+СвСч.Код +" ("+СвСч.Наименование+")"" не определен.",, Заголовок );
			КонецЕсли;
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубк, ЗначениеСубконто);

	ИначеЕсли Сообщать тогда
		бит_СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубк + ">",, Заголовок);

	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Функция убирает из текста сообщения слущебную информацию.
// 
// Параметры:
//  ТекстСообщения, Строка, исходный текст сообщения.
// Возвращаемое значение:
//   Строка.
// 
Функция бит_СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции // ()

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
// 
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
// 
Процедура бит_СообщитьОбОшибке(Знач ТекстСообщения, Отказ = Ложь, Заголовок = "") Экспорт

	ТекстСообщения = бит_СформироватьТекстСообщения(ТекстСообщения);
	Отказ = Истина;
	
	ТекстСообщения = НСтр("ru='" + ТекстСообщения + "'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры // СообщитьОбОшибке()

// Процедура обрабатывает обработчик системы ""ПриНачалеРаботыСистемы.
// 
Процедура мхо_ДействияПриНачалеРаботыСистемы() Экспорт
	
	Если РольДоступна("бит_АдминистраторМХО") Тогда
		бит_МеханизмХозяйственныхОперацийСервер.ОбновитьСоставРеквизитовДвижений(Истина);
	КонецЕсли; 
	
КонецПроцедуры

#Область ФункцииВызываемыеВШаблонах

// Функция выполняет пересчет из валюты регл в валюту упр.
// Предпогалается, что курс валюты Упр получен при формировании СтруктурыШапкиДокумента.
// Если период, на который необходимо выполнить пересчет не совападает с датой документа, 
// курс будет получен в процедуре.
// 
// Параметры:
//  Сумма - Число.
//  Период - Дата.
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  РезСумма - Число.
// 
Функция ПересчитатьРеглУпр(Сумма, Период, СтруктураШапкиДокумента) Экспорт
	
	РезСумма = бит_МеханизмТрансляции.ПересчитатьРеглУпр(Сумма,Период,СтруктураШапкиДокумента);
		
	Возврат РезСумма;
	
КонецФункции // ПересчитатьРеглУпр()

// Функция выполняет пересчет из валюты регл в валюту международного учета.
// Предпогалается, что курс валюты МУ получен при формировании СтруктурыШапкиДокумента.
// 
// Параметры:
//  Сумма - Число.
//  Период - Дата.
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  РезСумма - Число.
// 
Функция ПересчитатьРеглМУ(Сумма, Период, СтруктураШапкиДокумента) Экспорт

	РезСумма = бит_МеханизмТрансляции.ПересчитатьРеглУпр(Сумма,Период,СтруктураШапкиДокумента);

	Возврат РезСумма;
	
КонецФункции // ПересчитатьРеглМУ()

// Функция выполняет пересчет из валюты регл в валюту сценария.
// 
// Параметры:
//  Сумма  - Число.
//  Период - Дата.
//  Сценарий - СправочникСсылка.СценарииПланирования.
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  РезСумма - Число.
// 
Функция ПересчитатьРеглСценарий(Сумма, Период, Сценарий, СтруктураШапкиДокумента) Экспорт

	РезСумма = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(Сумма, Период, Сценарий, СтруктураШапкиДокумента);

	Возврат РезСумма;
	
КонецФункции // ПересчитатьРеглМУ()

// Функция выполняет валютные пересчеты.
// 
// Параметры:
//  Сумма - Число.
//  Период - Дата.
//  ВалютаНач - СправочникСсылка.Валюты.
//  ВалютаКон - СправочникСсылка.Валюты.
// 
// Возвращаемое значение:
//  РезСумма - Число.
// 
Функция ПересчитатьПоВалюте(Сумма, Период, ВалютаНач, ВалютаКон) Экспорт

	РезСумма = бит_МеханизмТрансляции.ПересчитатьПоВалюте(Сумма, Период, ВалютаНач, ВалютаКон);
		
	Возврат РезСумма;
	
КонецФункции // ПересчитатьРеглМУ()

#КонецОбласти

#КонецОбласти
