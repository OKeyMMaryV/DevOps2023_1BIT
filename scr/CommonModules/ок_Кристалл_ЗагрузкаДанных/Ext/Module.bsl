
#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьДанныеРЗ() Экспорт
	
	Параметры	=	ок_ОбщегоНазначенияФинансы21.ПолучитьПараметрыРегламентногоЗадания();
	
	Если Не Параметры = Неопределено Тогда 
		ЗагрузитьДанные(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанные(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗагрузитьТаблицу(ПолучитьИнтеграционнуюТаблицу(Параметры));
	
КонецПроцедуры

Функция ПолучитьДанные(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПолучитьИнтеграционнуюТаблицу(Параметры);
	
КонецФункции

Функция ЗагрузитьТаблицу(ТаблицаЗначений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗавершеноУспешно		=	Истина;
	
	#Область Логирование
	
	ИдентификаторОперации	=	"ок_Кристалл_ЗагрузкаДанных";
	ИдентификаторЗадания	=	Строка(Новый УникальныйИдентификатор);
	ИдентификаторПотока		=	Строка(Новый УникальныйИдентификатор);
	
	НастройкиЛогирования	=	ок_ЛогированиеОпераций.ПолучитьНастройкиЛогирования(ИдентификаторОперации);
	
	ИспользоватьЛогирование			=	НастройкиЛогирования.Использовать;
	ЗаписыватьСообщенияПользователю	=	НастройкиЛогирования.ЗаписыватьСообщенияПользователю;
	
	Если ИспользоватьЛогирование Тогда
		
		ПараметрыЛогирования	=	ок_ЛогированиеОпераций.ИнициализироватьПараметрыЛогирования();	
		
		ПараметрыЛогирования.Вставить("ИдентификаторОперации",	ИдентификаторОперации);
		ПараметрыЛогирования.Вставить("ИдентификаторЗадания",	ИдентификаторЗадания);
		ПараметрыЛогирования.Вставить("ИдентификаторПотока",	ИдентификаторПотока);
		
		ок_ЛогированиеОпераций.ЗаписастьЛогДО(ПараметрыЛогирования);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Параметры	=	ПолучитьПараметры(ИспользоватьЛогирование, ЗаписыватьСообщенияПользователю, ПараметрыЛогирования);
	
	Выборка		=	Мэппинг(ТаблицаЗначений, Параметры);
	
	Пока Выборка.Следующий() Цикл
		
		#Область Логирование
		Если Параметры.ИспользоватьЛогирование Тогда
			
			ОписаниеОшибки	=	"";
			Если Выборка.НесопоставленоДоговор Тогда
				ОписаниеОшибки	=	ОписаниеОшибки	+	?(ЗначениеЗаполнено(ОписаниеОшибки), Символы.ПС, "");
				ОписаниеОшибки	=	ОписаниеОшибки	+	"Не сопоставлен договор: " + Выборка.ВидОперации + "_" + Выборка.Объект;
			КонецЕсли;
			Если Выборка.НесопоставленоОбъект Тогда
				ОписаниеОшибки	=	ОписаниеОшибки	+	?(ЗначениеЗаполнено(ОписаниеОшибки), Символы.ПС, "");
				ОписаниеОшибки	=	ОписаниеОшибки	+	"Не сопоставлен объект: " + Выборка.Объект;
			КонецЕсли;
			Если Выборка.НесопоставленоСтатьяДДС Тогда
				ОписаниеОшибки	=	ОписаниеОшибки	+	?(ЗначениеЗаполнено(ОписаниеОшибки), Символы.ПС, "");
				ОписаниеОшибки	=	ОписаниеОшибки	+	"Не сопоставлена статья ДДС: " + Выборка.ВидОперации;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке(ОписаниеОшибки, Параметры);
			КонецЕсли;
			
		КонецЕсли;
		#КонецОбласти
		
		Результат	=	Истина;
		
		Если Выборка.Сумма > 0 И Выборка.ВидОплаты = "Нал" Тогда
			Результат	=	Результат И ЗагрузитьПриходныйКассовыйОрдер(Выборка, Параметры);
		КонецЕсли;
		
		Если Выборка.Сумма > 0 И Выборка.ВидОплаты = "Безнал" Тогда
			Результат	=	Результат И ЗагрузитьОплатуПлатежнойКартой(Выборка, Параметры);
		КонецЕсли;
		
		Если Выборка.Сумма > 0 И Выборка.ВидОплаты = "Серт" Тогда
			Результат	=	Результат И ЗагрузитьКорректировкуДолга(Выборка, Параметры);
		КонецЕсли;
		
		ЗавершеноУспешно	=	ЗавершеноУспешно И Результат;
		
	КонецЦикла;
	
	#Область Логирование
	
	Если ИспользоватьЛогирование Тогда
		ПараметрыЛогирования.Вставить("ДатаОкончания",	ТекущаяДатаСеанса());
		ПараметрыЛогирования.Вставить("Состояние",		?(ЗавершеноУспешно, 1, 2));
		
		ок_ЛогированиеОпераций.ЗаписастьЛогДО(ПараметрыЛогирования);
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат ЗавершеноУспешно;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВидОперацииОплатаТовара()
	Возврат "Оплата товара";	
КонецФункции

Функция ПолучитьВидОперацииОплатаСертификата()
	Возврат "Оплата сертификата";	
КонецФункции

Функция ПолучитьВидОперацииОплатаСТОЛОТО()
	Возврат "Оплата СТОЛОТО";	
КонецФункции

Функция ПолучитьИсточник()
	Возврат "Кристалл";	
КонецФункции

Функция ПолучитьСчетУчетаРасчетов(ВидОперации)
	
	Если ВидОперации = ПолучитьВидОперацииОплатаТовара() Тогда
		СчетУчетаРасчетов	=	ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	ИначеЕсли ВидОперации = ПолучитьВидОперацииОплатаСертификата() Тогда
		СчетУчетаРасчетов	=	ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	ИначеЕсли ВидОперации = ПолучитьВидОперацииОплатаСТОЛОТО() Тогда
		СчетУчетаРасчетов	=	ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Иначе
		СчетУчетаРасчетов	=	ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	КонецЕсли;	
	
	Возврат СчетУчетаРасчетов;
	
КонецФункции

Функция ЗагрузитьПриходныйКассовыйОрдер(Выборка, Параметры)
	
	Попытка
		
		Если ЗначениеЗаполнено(Выборка.ПриходныйКассовыйОрдерСсылка) Тогда
			
			Если Не Выборка.ПриходныйКассовыйОрдерЗагружатьПовторно Тогда
				#Область Логирование
				ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Документ не разрешено загружать повторно: " 
					+ Выборка.ПриходныйКассовыйОрдерСсылка, Параметры);
				#КонецОбласти
				Возврат Истина;	
			КонецЕсли;
			
			ДокументОбъект		=	Выборка.ПриходныйКассовыйОрдерСсылка.ПолучитьОбъект();	
		Иначе
			ДокументОбъект		=	Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Дата	=	КонецДня(Выборка.Дата);
		КонецЕсли;
		
		ЭтоОплатаСТОЛОТО	=	Выборка.ВидОперации = ПолучитьВидОперацииОплатаСТОЛОТО();
		
		Если ЭтоОплатаСТОЛОТО Тогда
			ВидОперации	=	Перечисления.ВидыОперацийПКО.ПрочийПриход;	
		Иначе
			ВидОперации	=	Перечисления.ВидыОперацийПКО.ОплатаПокупателя;	
		КонецЕсли;
		
		Если Не ДокументОбъект.ВидОперации = ВидОперации Тогда
			ДокументОбъект.ВидОперации = ВидОперации;
		КонецЕсли;
		
		Если Не ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации Тогда
			ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		КонецЕсли;
		
		Если Не ДокументОбъект.Организация = Выборка.ОрганизацияСсылка Тогда
			ДокументОбъект.Организация = Выборка.ОрганизацияСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ок_Объект = Выборка.ОбъектСсылка Тогда
			ДокументОбъект.ок_Объект = Выборка.ОбъектСсылка;
		КонецЕсли;
		
		ОснованиеОплаты	=	"Выручка от розничного покупателя";
		Если Не ДокументОбъект.Основание = ОснованиеОплаты Тогда
			ДокументОбъект.Основание = ОснованиеОплаты;
		КонецЕсли;
		
		ВалютаДокумента	=	Выборка.ДоговорСсылка.ВалютаВзаиморасчетов;
			
		Если Не ДокументОбъект.ВалютаДокумента = ВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента	=	ВалютаДокумента;
		КонецЕсли;
		
		Если ЭтоОплатаСТОЛОТО Тогда
			
			СчетУчетаРасчетов	=	ПолучитьСчетУчетаРасчетов(Выборка.ВидОперации);
			
			Если Не ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетов Тогда
				ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетов;
			КонецЕсли;
			
			Если Не ДокументОбъект.СубконтоКт1 = Выборка.КонтрагентСсылка Тогда
				ДокументОбъект.СубконтоКт1 = Выборка.КонтрагентСсылка;
			КонецЕсли;
			
			Если Не ДокументОбъект.СубконтоКт2 = Выборка.ДоговорСсылка Тогда
				ДокументОбъект.СубконтоКт2 = Выборка.ДоговорСсылка;
			КонецЕсли;
			
			Если Не ДокументОбъект.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДССсылка Тогда
				ДокументОбъект.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДССсылка;
			КонецЕсли;
			
			Если Не ДокументОбъект.СуммаДокумента = Выборка.Сумма Тогда
				ДокументОбъект.СуммаДокумента = Выборка.Сумма;
			КонецЕсли;
			
		Иначе
			
			Если Не ДокументОбъект.Контрагент = Выборка.КонтрагентСсылка Тогда
				ДокументОбъект.Контрагент = Выборка.КонтрагентСсылка;
			КонецЕсли;
			
			Если Не ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорСсылка Тогда
				ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорСсылка;
			КонецЕсли;
			
			МассивИменКолонок	=	"ДоговорКонтрагента, СтатьяДвиженияДенежныхСредств, СуммаПлатежа, СуммаВзаиморасчетов,
									|СтавкаНДС, СуммаНДС, СпособПогашенияЗадолженности, СчетУчетаРасчетовСКонтрагентом,
									|СчетУчетаРасчетовПоАвансам, КурсВзаиморасчетов, КратностьВзаиморасчетов";
			
			РасшифровкаПлатежа	=	ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонки(МассивИменКолонок);
		
			СтрокаРасшифровки	=	РасшифровкаПлатежа.Добавить();
			
			Если Не СтрокаРасшифровки.ДоговорКонтрагента = Выборка.ДоговорСсылка Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = Выборка.ДоговорСсылка;
			КонецЕсли;
			
			Если Не СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДССсылка Тогда
				СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДССсылка;
			КонецЕсли;
			
			Если Не СтрокаРасшифровки.СуммаПлатежа = Выборка.Сумма Тогда
				СтрокаРасшифровки.СуммаПлатежа = Выборка.Сумма;
			КонецЕсли;
			
			Если Не СтрокаРасшифровки.СуммаВзаиморасчетов = Выборка.Сумма Тогда
				СтрокаРасшифровки.СуммаВзаиморасчетов = Выборка.Сумма;
			КонецЕсли;
			
			Если Выборка.ВидОперации = ПолучитьВидОперацииОплатаСертификата() Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			Иначе
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			
			Если Не СтрокаРасшифровки.СтавкаНДС = СтавкаНДС Тогда
				СтрокаРасшифровки.СтавкаНДС = СтавкаНДС;
			КонецЕсли;
			
			ЗначениеСтавкиНДС	=	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			СуммаНДС			=	СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			
			Если Не СтрокаРасшифровки.СуммаНДС = СуммаНДС Тогда
				СтрокаРасшифровки.СуммаНДС = СуммаНДС;
			КонецЕсли;
			
			Если Не СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать Тогда
				СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать;
			КонецЕсли;
			
			СчетУчетаРасчетов	=	ПолучитьСчетУчетаРасчетов(Выборка.ВидОперации);
			
			Если Не СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетов Тогда
				СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетов;
			КонецЕсли;
			
			Если Не СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетов Тогда
				СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетов;
			КонецЕсли;
			
			СтруктураКурсаДокумента        				=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			Если Не СтрокаРасшифровки.КурсВзаиморасчетов	=	СтруктураКурсаДокумента.Курс Тогда 
				СтрокаРасшифровки.КурсВзаиморасчетов	=	СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если Не СтрокаРасшифровки.КратностьВзаиморасчетов	=	СтруктураКурсаДокумента.Кратность Тогда 
				СтрокаРасшифровки.КратностьВзаиморасчетов	=	СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			
			Если Не ок_ОбщегоНазначенияФинансы21.ТаблицыЗначенийРавны(ДокументОбъект.РасшифровкаПлатежа.Выгрузить(, МассивИменКолонок), РасшифровкаПлатежа) Тогда
				ДокументОбъект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);	
			КонецЕсли;
			
			СуммаДокумента	=	ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Если Не ДокументОбъект.СуммаДокумента = СуммаДокумента Тогда
				ДокументОбъект.СуммаДокумента = СуммаДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
		ПринятоОт	=	СокрЛП(Выборка.КонтрагентСсылка);
		
		Если Не ДокументОбъект.ПринятоОт = ПринятоОт Тогда
			ДокументОбъект.ПринятоОт = ПринятоОт;
		КонецЕсли;
		
		Если ДокументОбъект.Модифицированность() Тогда
			
			ДокументОбъект.Ответственный	=	Пользователи.ТекущийПользователь();
			ДокументОбъект.Комментарий		=	Выборка.Комментарий + " " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			УстановитьДопСведениеЗагружатьПовторно(ДокументОбъект.Ссылка, Ложь, Параметры);
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Проведен документ: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		Иначе
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Документ не был изменен: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки	=	ОписаниеОшибки();
		
		#Область Логирование
		ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке(ОписаниеОшибки, Параметры);
		#КонецОбласти
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьОплатуПлатежнойКартой(Выборка, Параметры)
	
	Попытка
		
		Если ЗначениеЗаполнено(Выборка.ОплатаПлатежнойКартойСсылка) Тогда
			
			Если Не Выборка.ОплатаПлатежнойКартойЗагружатьПовторно Тогда
				#Область Логирование
				ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Документ не разрешено загружать повторно: " 
				+ Выборка.ОплатаПлатежнойКартойСсылка, Параметры);
				#КонецОбласти
				Возврат Истина;	
			КонецЕсли;
			
			ДокументОбъект		=	Выборка.ОплатаПлатежнойКартойСсылка.ПолучитьОбъект();	
		Иначе
			ДокументОбъект		=	Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
			ДокументОбъект.Дата	=	КонецДня(Выборка.Дата);
		КонецЕсли;
		
		Если Не ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
		КонецЕсли;
		
		Если Не ДокументОбъект.ВидОплаты = Параметры.ВидОплаты Тогда
			ДокументОбъект.ВидОплаты = Параметры.ВидОплаты;
		КонецЕсли;
		
		Если Не ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.ПереводыВПути Тогда
			ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.ПереводыВПути;
		КонецЕсли;
		
		Если Не ДокументОбъект.Организация = Выборка.ОрганизацияСсылка Тогда
			ДокументОбъект.Организация = Выборка.ОрганизацияСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ок_Объект = Выборка.ОбъектСсылка Тогда
			ДокументОбъект.ок_Объект = Выборка.ОбъектСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.Контрагент = Выборка.КонтрагентСсылка Тогда
			ДокументОбъект.Контрагент = Выборка.КонтрагентСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорСсылка Тогда
			ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ок_СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДССсылка Тогда
			ДокументОбъект.ок_СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДССсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ок_ВидыПереводов = Перечисления.ОК_ВидыПереводов.ПластиковыеКарты Тогда
			ДокументОбъект.ок_ВидыПереводов = Перечисления.ОК_ВидыПереводов.ПластиковыеКарты;
		КонецЕсли;
		
		ВалютаДокумента	=	Выборка.ДоговорСсылка.ВалютаВзаиморасчетов;
			
		Если Не ДокументОбъект.ВалютаДокумента = ВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента	=	ВалютаДокумента;
		КонецЕсли;
		
		МассивИменКолонок	=	"ДоговорКонтрагента, СуммаПлатежа, СуммаВзаиморасчетов, СтавкаНДС, СуммаНДС,
								|СпособПогашенияЗадолженности, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,
								|КурсВзаиморасчетов, КратностьВзаиморасчетов";
		
		РасшифровкаПлатежа	=	ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонки(МассивИменКолонок);
		
		СтрокаРасшифровки	=	РасшифровкаПлатежа.Добавить();
		
		Если Не СтрокаРасшифровки.ДоговорКонтрагента = Выборка.ДоговорСсылка Тогда
			СтрокаРасшифровки.ДоговорКонтрагента = Выборка.ДоговорСсылка;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СуммаПлатежа = Выборка.Сумма Тогда
			СтрокаРасшифровки.СуммаПлатежа = Выборка.Сумма;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СуммаВзаиморасчетов = Выборка.Сумма Тогда
			СтрокаРасшифровки.СуммаВзаиморасчетов = Выборка.Сумма;
		КонецЕсли;
		
		Если Выборка.ВидОперации = ПолучитьВидОперацииОплатаСертификата() Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СтавкаНДС = СтавкаНДС Тогда
			СтрокаРасшифровки.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
		
		ЗначениеСтавкиНДС	=	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СуммаНДС			=	СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
		
		Если Не СтрокаРасшифровки.СуммаНДС = СуммаНДС Тогда
			СтрокаРасшифровки.СуммаНДС = СуммаНДС;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать Тогда
			СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать;
		КонецЕсли;
		
		СчетУчетаРасчетов	=	ПолучитьСчетУчетаРасчетов(Выборка.ВидОперации);
			
		Если Не СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетов Тогда
			СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетов;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетов Тогда
			СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетов;
		КонецЕсли;
		
		СтруктураКурсаДокумента        				=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		Если Не СтрокаРасшифровки.КурсВзаиморасчетов	=	СтруктураКурсаДокумента.Курс Тогда 
			СтрокаРасшифровки.КурсВзаиморасчетов	=	СтруктураКурсаДокумента.Курс;
		КонецЕсли;
		Если Не СтрокаРасшифровки.КратностьВзаиморасчетов	=	СтруктураКурсаДокумента.Кратность Тогда 
			СтрокаРасшифровки.КратностьВзаиморасчетов	=	СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
		
		Если Не ок_ОбщегоНазначенияФинансы21.ТаблицыЗначенийРавны(ДокументОбъект.РасшифровкаПлатежа.Выгрузить(, МассивИменКолонок), РасшифровкаПлатежа) Тогда
			ДокументОбъект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);	
		КонецЕсли;
		
		СуммаДокумента	=	ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		Если Не ДокументОбъект.СуммаДокумента = СуммаДокумента Тогда
			ДокументОбъект.СуммаДокумента = СуммаДокумента;
		КонецЕсли;
		
		Если ДокументОбъект.Модифицированность() Тогда
			
			ДокументОбъект.Ответственный	=	Пользователи.ТекущийПользователь();
			ДокументОбъект.Комментарий		=	Выборка.Комментарий + " " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			УстановитьДопСведениеЗагружатьПовторно(ДокументОбъект.Ссылка, Ложь, Параметры);
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Проведен документ: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		Иначе
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Документ не был изменен: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки	=	ОписаниеОшибки();
		
		#Область Логирование
		ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке(ОписаниеОшибки, Параметры);
		#КонецОбласти
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьКорректировкуДолга(Выборка, Параметры)
	
	Попытка
		
		Если ЗначениеЗаполнено(Выборка.КорректировкаДолгаСсылка) Тогда
			
			Если Не Выборка.КорректировкаДолгаЗагружатьПовторно Тогда
				#Область Логирование
				ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Документ не разрешено загружать повторно: " 
					+ Выборка.КорректировкаДолгаСсылка, Параметры);
				#КонецОбласти
				Возврат Истина;	
			КонецЕсли;
			
			ДокументОбъект		=	Выборка.КорректировкаДолгаСсылка.ПолучитьОбъект();	
		Иначе
			ДокументОбъект		=	Документы.КорректировкаДолга.СоздатьДокумент();
			ДокументОбъект.Дата	=	КонецДня(Выборка.Дата);
		КонецЕсли;
		
		Если Не ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
		КонецЕсли;
		
		Если Не ДокументОбъект.Организация = Выборка.ОрганизацияСсылка Тогда
			ДокументОбъект.Организация = Выборка.ОрганизацияСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.КонтрагентДебитор = Выборка.КонтрагентСсылка Тогда
			ДокументОбъект.КонтрагентДебитор = Выборка.КонтрагентСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.КонтрагентКредитор = Параметры.КонтрагентРозничныйСертификат Тогда
			ДокументОбъект.КонтрагентКредитор = Параметры.КонтрагентРозничныйСертификат;
		КонецЕсли;
		
		ВалютаДокумента	=	Выборка.ДоговорСсылка.ВалютаВзаиморасчетов;
		
		Если Не ДокументОбъект.ВалютаДокумента = ВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента		=	ВалютаДокумента;
			
			СтруктураКурсаДокумента        		=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсДокумента		=	СтруктураКурсаДокумента.Курс;
			ДокументОбъект.КратностьДокумента	=	СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
		
		Если Не ДокументОбъект.СчетКт	=	ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			ДокументОбъект.СчетКт	=	ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		КонецЕсли;
		
		Если Не ДокументОбъект.СубконтоКт1	=	Выборка.КонтрагентСсылка Тогда
			ДокументОбъект.СубконтоКт1	=	Выборка.КонтрагентСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.СубконтоКт2	=	Выборка.ДоговорСсылка Тогда
			ДокументОбъект.СубконтоКт2	=	Выборка.ДоговорСсылка;
		КонецЕсли;
		
		//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2021-10-22 (#AT-2156046)
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			ДокументОбъект.ОбменДанными.Загрузка	=	Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ДокументОбъект.ОбменДанными.Загрузка	=	Ложь;
		КонецЕсли;
		//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2021-10-22 (#AT-2156046)
		
		ОстаткиЗадолженности		=	ПолучитьОстаткиЗадолженности(Выборка, ДокументОбъект.Ссылка, ДокументОбъект.Дата, Параметры);
		
		МассивИменКолонок			=	"КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента,
										|Сделка, СчетУчетаРасчетов, Сумма, СуммаНУ, СуммаВзаиморасчетов";
		
		КредиторскаяЗадолженность	=	ДокументОбъект.КредиторскаяЗадолженность.ВыгрузитьКолонки(МассивИменКолонок);
		
		СуммаКСписанию				=	Выборка.Сумма;
		Если ОстаткиЗадолженности.Количество() > 0 Тогда
			
			Для Каждого СтрокаЗадолженности Из ОстаткиЗадолженности Цикл
				
				Сумма	=	?(СуммаКСписанию > СтрокаЗадолженности.СуммаВзаиморасчетов, СтрокаЗадолженности.СуммаВзаиморасчетов, СуммаКСписанию);
				
				НоваяСтрока							=	КредиторскаяЗадолженность.Добавить();	
				НоваяСтрока.КурсВзаиморасчетов		=	ДокументОбъект.КурсДокумента;
				НоваяСтрока.КратностьВзаиморасчетов	=	ДокументОбъект.КратностьДокумента;
				
				НоваяСтрока.ДоговорКонтрагента		=	СтрокаЗадолженности.ДоговорКонтрагента;
				НоваяСтрока.Сделка					=	СтрокаЗадолженности.ДокументРасчетов;
				НоваяСтрока.СчетУчетаРасчетов		=	ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
				
				НоваяСтрока.Сумма					=	Сумма;
				НоваяСтрока.СуммаНУ					=	Сумма;
				НоваяСтрока.СуммаВзаиморасчетов		=	Сумма;
				
				СуммаКСписанию	=	СуммаКСписанию	-	Сумма;
				
				Если СуммаКСписанию = 0 Тогда
					Прервать;	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ок_ОбщегоНазначенияФинансы21.ТаблицыЗначенийРавны(ДокументОбъект.КредиторскаяЗадолженность.Выгрузить(, МассивИменКолонок), КредиторскаяЗадолженность) Тогда
			ДокументОбъект.КредиторскаяЗадолженность.Загрузить(КредиторскаяЗадолженность);	
		КонецЕсли;
		
		Если ДокументОбъект.Модифицированность() Тогда
			
			ДокументОбъект.Ответственный	=	Пользователи.ТекущийПользователь();
			ДокументОбъект.Комментарий		=	Выборка.Комментарий + " " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			УстановитьДопСведениеЗагружатьПовторно(ДокументОбъект.Ссылка, Ложь, Параметры);
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Проведен документ: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		Иначе
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Документ не был изменен: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки	=	ОписаниеОшибки();
		
		#Область Логирование
		ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке(ОписаниеОшибки, Параметры);
		#КонецОбласти
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОстаткиЗадолженности(Выборка, ДокументСсылка, Дата, Параметры)
	
	ТаблицаДоговоров	=	Новый ТаблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("Контрагент");
	ТаблицаДоговоров.Колонки.Добавить("ДоговорКонтрагента");
	
	НоваяСтрока						=	ТаблицаДоговоров.Добавить();
	НоваяСтрока.Контрагент			=	Параметры.КонтрагентРозничныйСертификат;
	НоваяСтрока.ДоговорКонтрагента	=	Параметры.ДоговорРозничныйСертификат;
	
	Запрос = Новый Запрос;
	
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2021-10-22 (#AT-2156046)
	//Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	//Если ДокументСсылка.Пустая() Тогда
	//	Запрос.УстановитьПараметр("МоментВремениОстатков",		Дата);
	//Иначе
	//	Запрос.УстановитьПараметр("МоментВремениОстатков",		Новый МоментВремени(Дата, ДокументСсылка));
	//КонецЕсли;
	Запрос.УстановитьПараметр("МоментВремениОстатков",		Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая));
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2021-10-22 (#AT-2156046)
	
	Запрос.УстановитьПараметр("ВидыСубконтоРасчетов",		ВидыСубконтоРасчетов());
	
	СчетаРасчетовПоДокументам = Новый Массив;
	СчетаРасчетовПоДокументам.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	
	Запрос.УстановитьПараметр("СчетаРасчетовПоДокументам",	СчетаРасчетовПоДокументам);
	Запрос.УстановитьПараметр("Контрагенты", 				РазличныеЗначенияКолонкиТаблицы(ТаблицаДоговоров, "Контрагент"));
	Запрос.УстановитьПараметр("Договоры",    				РазличныеЗначенияКолонкиТаблицы(ТаблицаДоговоров, "ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("Множитель", 					-1);
	Запрос.УстановитьПараметр("ПустоеПодразделение", 		БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = ТекстЗапросаОстаткиЗадолженности();
	
	ОстаткиЗадолженности = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначенияБПВызовСервера.УпорядочитьТаблицуПоДокументу(ОстаткиЗадолженности, "ДокументРасчетов", "ДатаДокументаРасчетов");
	
	Возврат ОстаткиЗадолженности;
	
КонецФункции

Функция ТекстЗапросаОстаткиЗадолженности()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Остатки.Счет КАК СчетРасчетов,
	|	Остатки.Субконто1 КАК Контрагент,
	|	Остатки.Субконто2 КАК ДоговорКонтрагента,
	|	Остатки.Субконто3 КАК ДокументРасчетов,
	|	ЕСТЬNULL(Остатки.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
	|	ЕСТЬNULL(Остатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Остатки.Счет.Валютный
	|			ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
	|		ИНАЧЕ Остатки.СуммаОстаток * &Множитель
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	Остатки.СуммаОстаток * &Множитель КАК СуммаБУ,
	|	ЕСТЬNULL(Остатки.СуммаНУОстаток, 0) * &Множитель КАК СуммаНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремениОстатков,
	|			Счет В (&СчетаРасчетовПоДокументам),
	|			&ВидыСубконтоРасчетов,
	|			Организация = &Организация
	|				И Субконто1 В (&Контрагенты)
	|				И Субконто2 В (&Договоры)
	|				И НЕ Субконто3 = НЕОПРЕДЕЛЕНО) КАК Остатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Остатки.Счет.Валютный
	|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
	|			ИНАЧЕ Остатки.СуммаОстаток * &Множитель
	|		КОНЕЦ > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВидыСубконтоРасчетов()

	ВидыСубконтоРасчетов = Новый Массив;
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);

	Возврат ВидыСубконтоРасчетов;

КонецФункции

Функция РазличныеЗначенияКолонкиТаблицы(ТаблицаЗначений, ИмяКолонки)

	ВсеЗначенияКолонки = ТаблицаЗначений.ВыгрузитьКолонку(ИмяКолонки);
	РазличныеЗначения  = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВсеЗначенияКолонки);
	Возврат РазличныеЗначения;

КонецФункции

Функция ПолучитьПараметры(ИспользоватьЛогирование, ЗаписыватьСообщенияПользователю, ПараметрыЛогирования)
	
	Параметры				=	Новый Структура;
	
	Параметры.Вставить("ИспользоватьЛогирование", 			ИспользоватьЛогирование);
	Параметры.Вставить("ЗаписыватьСообщенияПользователю",	ЗаписыватьСообщенияПользователю);
	Параметры.Вставить("ПараметрыЛогирования",				ПараметрыЛогирования);
	
	ИмяНастройкиОрганизация	=	ок_ОбщегоНазначенияФинансы21.ПолучитьИмяНастройкиОрганизацияОКЕЙ();
	Организация				=	ок_ОбщегоНазначенияФинансы21.ПолучитьОрганизацию(ИмяНастройкиОрганизация);
	
	Параметры.Вставить("Организация",	Организация);
	
	#Область Логирование
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке("Организация не найдена: " + ИмяНастройкиОрганизация, Параметры);
	КонецЕсли;
	#КонецОбласти
	
	Измерения	=	Метаданные.РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.Измерения;
	
	ТаблицаЗначений	=	Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Группа",			Измерения.Группа.Тип);
	ТаблицаЗначений.Колонки.Добавить("ИмяНастройки",	Измерения.ИмяНастройки.Тип);
	ТаблицаЗначений.Колонки.Добавить("Идентификатор",	Измерения.ИмяНастройки.Тип);
	
	НоваяСтрока	=	ТаблицаЗначений.Добавить();
	НоваяСтрока.Группа			=	ок_ОбщегоНазначенияФинансы21.ПолучитьИмяГруппыНастроекЗагрузкаДанныхИзКристалл();
	НоваяСтрока.ИмяНастройки	=	"Контрагент РозничныйСертификат";
	НоваяСтрока.Идентификатор	=	"КонтрагентРозничныйСертификат";
	
	НоваяСтрока	=	ТаблицаЗначений.Добавить();
	НоваяСтрока.Группа			=	ок_ОбщегоНазначенияФинансы21.ПолучитьИмяГруппыНастроекЗагрузкаДанныхИзКристалл();
	НоваяСтрока.ИмяНастройки	=	"Договор РозничныйСертификат";
	НоваяСтрока.Идентификатор	=	"ДоговорРозничныйСертификат";
	
	НоваяСтрока	=	ТаблицаЗначений.Добавить();
	НоваяСтрока.Группа			=	ок_ОбщегоНазначенияФинансы21.ПолучитьИмяГруппыНастроекЗагрузкаДанныхИзКристалл();
	НоваяСтрока.ИмяНастройки	=	"Вид оплаты";
	НоваяСтрока.Идентификатор	=	"ВидОплаты";
	
	НоваяСтрока	=	ТаблицаЗначений.Добавить();
	НоваяСтрока.Группа			=	ок_ОбщегоНазначенияФинансы21.ПолучитьИмяГруппыНастроекЗагрузкаДанныхИзКристалл();
	НоваяСтрока.ИмяНастройки	=	ок_ОбщегоНазначенияФинансы21.ПолучитьИмяНастройкиЗагружатьПовторно();
	НоваяСтрока.Идентификатор	=	ок_ОбщегоНазначенияФинансы21.ПолучитьИдентификаторНастройкиЗагружатьПовторно();
	
	НоваяСтрока	=	ТаблицаЗначений.Добавить();
	НоваяСтрока.Группа			=	"Служебные элементы Не сопоставлено";
	НоваяСтрока.ИмяНастройки	=	"Статьи движения денежных средств";
	НоваяСтрока.Идентификатор	=	"НесопоставленоСтатьяДДС";
	
	НоваяСтрока	=	ТаблицаЗначений.Добавить();
	НоваяСтрока.Группа			=	"Служебные элементы Не сопоставлено";
	НоваяСтрока.ИмяНастройки	=	"Договоры";
	НоваяСтрока.Идентификатор	=	"НесопоставленоДоговор";
	
	НоваяСтрока	=	ТаблицаЗначений.Добавить();
	НоваяСтрока.Группа			=	"Служебные элементы Не сопоставлено";
	НоваяСтрока.ИмяНастройки	=	"Объекты строительства";
	НоваяСтрока.Идентификатор	=	"НесопоставленоОбъект";
	
	Запрос			=	Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ТаблицаЗначений.Группа КАК Группа,
	|	ТаблицаЗначений.ИмяНастройки КАК ИмяНастройки,
	|	ТаблицаЗначений.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаЗначений
	|ИЗ
	|	&ТаблицаЗначений КАК ТаблицаЗначений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗначений.Группа КАК Группа,
	|	ТаблицаЗначений.ИмяНастройки КАК ИмяНастройки,
	|	ТаблицаЗначений.Идентификатор КАК Идентификатор,
	|	ЕСТЬNULL(бит_ок_НастройкиМеханизмаИмпортаДанных.Значение, НЕОПРЕДЕЛЕНО) КАК Значение
	|ИЗ
	|	ТаблицаЗначений КАК ТаблицаЗначений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	|		ПО ТаблицаЗначений.Группа = бит_ок_НастройкиМеханизмаИмпортаДанных.Группа
	|			И ТаблицаЗначений.ИмяНастройки = бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки";
	Результат	=	Запрос.Выполнить();
	
	Выборка	=	Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Параметры.Вставить(Выборка.Идентификатор,	Выборка.Значение);
		
		#Область Логирование
		Если Не ЗначениеЗаполнено(Выборка.Значение) Тогда
			ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке("Настройка не заполнена: """ + Выборка.Группа + ": " + Выборка.ИмяНастройки + """", Параметры);
		КонецЕсли;
		#КонецОбласти
		
	КонецЦикла;
	
	СвойствоЗагружатьПовторно	=	ПолучитьСвойствоЗагружатьПовторно(Параметры);
	Параметры.Вставить("СвойствоЗагружатьПовторно", СвойствоЗагружатьПовторно);
	
	Возврат Параметры;
	
КонецФункции

Процедура ДобавитьСтрокуВТаблицу(ТаблицаНастроекЗапроса, ИмяТаблицы, ИмяПоля, ВидОперации, ВидОплаты)
	
	НоваяСтрока					=	ТаблицаНастроекЗапроса.Добавить();
	НоваяСтрока.ИмяТаблицы		=	ИмяТаблицы;
	НоваяСтрока.ИмяПоля			=	ИмяПоля;
	НоваяСтрока.ВидОперации		=	ВидОперации;
	НоваяСтрока.ВидОплаты		=	ВидОплаты;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаИнтеграционнаяТаблица()
	
	ТаблицаНастроекЗапроса	=	Новый ТаблицаЗначений;
	ТаблицаНастроекЗапроса.Колонки.Добавить("ИмяТаблицы");
	ТаблицаНастроекЗапроса.Колонки.Добавить("ИмяПоля");
	ТаблицаНастроекЗапроса.Колонки.Добавить("ВидОперации");
	ТаблицаНастроекЗапроса.Колонки.Добавить("ВидОплаты");
	
	ДобавитьСтрокуВТаблицу(ТаблицаНастроекЗапроса, "dbo_OperRepProceedsWithoutVoucher", "СуммаТоварНал", 			"Оплата товара", 		"Нал");
	ДобавитьСтрокуВТаблицу(ТаблицаНастроекЗапроса, "dbo_OperRepProceedsWithoutVoucher", "СуммаТоварБезнал", 		"Оплата товара", 		"Безнал");
	ДобавитьСтрокуВТаблицу(ТаблицаНастроекЗапроса, "dbo_OperRepProceedsWithoutVoucher", "СуммаТоварСерт", 			"Оплата товара", 		"Серт");
	
	ДобавитьСтрокуВТаблицу(ТаблицаНастроекЗапроса, "dbo_OperRepProceedsWithoutVoucher", "СуммаСертификатыНал", 		"Оплата сертификата",	"Нал");
	ДобавитьСтрокуВТаблицу(ТаблицаНастроекЗапроса, "dbo_OperRepProceedsWithoutVoucher", "СуммаСертификатыБезнал", 	"Оплата сертификата",	"Безнал");
	
	ДобавитьСтрокуВТаблицу(ТаблицаНастроекЗапроса, "dbo_ReportChequeLotto", 			"СуммаСТОЛОТОНал", 			"Оплата СТОЛОТО",		"Нал");
	ДобавитьСтрокуВТаблицу(ТаблицаНастроекЗапроса, "dbo_ReportChequeLotto", 			"СуммаСТОЛОТОБезнал", 		"Оплата СТОЛОТО",		"Безнал");
	ДобавитьСтрокуВТаблицу(ТаблицаНастроекЗапроса, "dbo_ReportChequeLotto", 			"СуммаСТОЛОТОСерт", 		"Оплата СТОЛОТО",		"Серт");
	
	ТекстОбъединитьВсе =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
	ТекстЗапроса	=	"";
	
	ПреобразованиеЧислаВДату	=	ок_ОбщегоНазначенияФинансы21.ПреобразованиеЧислаВДатуДляЗапроса("Таблица.Дата");	
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроекЗапроса Цикл
	
		ТекстЗапроса	=	ТекстЗапроса + ?(ЗначениеЗаполнено(ТекстЗапроса), ТекстОбъединитьВсе, "");
		ТекстЗапроса	=	ТекстЗапроса
		+ "ВЫБРАТЬ
		|	" + ПреобразованиеЧислаВДату + " КАК Дата,
		|	Таблица.Объект КАК Объект,
		|	""" + СтрокаТаблицы.ВидОперации + """ КАК ВидОперации,
		|	""" + СтрокаТаблицы.ВидОплаты + """ КАК ВидОплаты,
		|	СУММА(ЕСТЬNULL(Таблица." + СтрокаТаблицы.ИмяПоля + ", 0)) КАК Сумма
		|ИЗ
		|	ВнешнийИсточникДанных.ок_Кристалл_ЗагрузкаДанных.Таблица." + СтрокаТаблицы.ИмяТаблицы + " КАК Таблица
		|ГДЕ
		|	Таблица." + СтрокаТаблицы.ИмяПоля + " > 0
		|	И ВЫБОР
		|			КОГДА &ИгнорироватьПериод
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ " + ПреобразованиеЧислаВДату + " МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ИспользоватьОтборПоВидамОплат
		|				ТОГДА """ + СтрокаТаблицы.ВидОплаты + """ В (&ВидыОплат)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ИспользоватьОтборПоОбъекту
		|				ТОГДА Таблица.Объект = &ОбъектЧисло
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ИспользоватьОтборПоВидамОпераций
		|				ТОГДА """ + СтрокаТаблицы.ВидОперации + """ В (&ВидыОпераций)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	" + ПреобразованиеЧислаВДату + ",
		|	Таблица.Объект";
		
	КонецЦикла;
	
	ТекстЗапроса	=	ТекстЗапроса
	+ "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ВидОперации,
	|	ВидОплаты";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьИнтеграционнуюТаблицу(Параметры)
	
	ДатаНачала			=	Неопределено;
	ДатаОкончания		=	Неопределено;
	Объект				=	Неопределено;
	ВидыОпераций		=	Неопределено;
	ВидыОплат			=	Неопределено;
	ИгнорироватьПериод	=	Неопределено;
	
	Параметры.Свойство("ДатаНачала",			ДатаНачала);
	Параметры.Свойство("ДатаОкончания",			ДатаОкончания);
	Параметры.Свойство("Объект",				Объект);
	Параметры.Свойство("ВидыОпераций",			ВидыОпераций);
	Параметры.Свойство("ВидыОплат",				ВидыОплат);
	Параметры.Свойство("ИгнорироватьПериод",	ИгнорироватьПериод);
	
	ИспользоватьОтборПоВидамОпераций	=	ЗначениеЗаполнено(ВидыОпераций);
	ИспользоватьОтборПоВидамОплат		=	ЗначениеЗаполнено(ВидыОплат);
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", 							ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 							ДатаОкончания);
	Запрос.УстановитьПараметр("ИгнорироватьПериод", 					ИгнорироватьПериод);
	Запрос.УстановитьПараметр("ОбъектЧисло", 							ок_ОбщегоНазначенияФинансы21.ПолучитьОтборПоОбъекту(Объект, ПолучитьИсточник(), Истина));
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОбъекту",				ЗначениеЗаполнено(Объект));
	Запрос.УстановитьПараметр("ВидыОпераций", 							ВидыОпераций);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидамОпераций",		ИспользоватьОтборПоВидамОпераций);
	Запрос.УстановитьПараметр("ВидыОплат", 								ВидыОплат);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидамОплат",			ИспользоватьОтборПоВидамОплат);
	
	Запрос.Текст	=	ПолучитьТекстЗапросаИнтеграционнаяТаблица();
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура УстановитьДопСведениеЗагружатьПовторно(ДокументСсылка, Значение, Параметры)
	
	Если ЗначениеЗаполнено(Параметры.СвойствоЗагружатьПовторно) Тогда
	
		МенеджерЗаписи			=	РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект	=	ДокументСсылка;	
		МенеджерЗаписи.Свойство	=	Параметры.СвойствоЗагружатьПовторно;
		МенеджерЗаписи.Значение	=	Значение;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСвойствоЗагружатьПовторно(Параметры)
	
	ИмяСвойства		=	Параметры[ок_ОбщегоНазначенияФинансы21.ПолучитьИдентификаторНастройкиЗагружатьПовторно()];
	
	Если ЗначениеЗаполнено(ИмяСвойства) Тогда
		СвойствоСсылка	=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", ИмяСвойства);
		
		#Область Логирование
		Если Параметры.ИспользоватьЛогирование И СвойствоСсылка.Пустая() Тогда
			ОписаниеОшибки	=	"Доп. свойство не найдено: " + ИмяСвойства;
			ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке(ОписаниеОшибки, Параметры);
		КонецЕсли;
		#КонецОбласти
	Иначе
		СвойствоСсылка	=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СвойствоСсылка;
	
КонецФункции

Функция Мэппинг(ИнтеграционнаяТаблица, Параметры)
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата",					ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИнтеграционнаяТаблица",			ИнтеграционнаяТаблица);
	Запрос.УстановитьПараметр("Источник",						ПолучитьИсточник());
	
	Запрос.УстановитьПараметр("Организация",					Параметры.Организация);
	Запрос.УстановитьПараметр("НесопоставленоДоговор",			Параметры.НесопоставленоДоговор);
	Запрос.УстановитьПараметр("НесопоставленоОбъект",			Параметры.НесопоставленоОбъект);
	Запрос.УстановитьПараметр("НесопоставленоСтатьяДДС",		Параметры.НесопоставленоСтатьяДДС);
	
	Запрос.УстановитьПараметр("ВидОперацииОплатаТовара",		ПолучитьВидОперацииОплатаТовара());
	Запрос.УстановитьПараметр("ВидОперацииОплатаСертификата",	ПолучитьВидОперацииОплатаСертификата());
	Запрос.УстановитьПараметр("ВидОперацииОплатаСТОЛОТО",		ПолучитьВидОперацииОплатаСТОЛОТО());
	Запрос.УстановитьПараметр("СвойствоЗагружатьПовторно",		Параметры.СвойствоЗагружатьПовторно);

	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ИнтеграционнаяТаблица.ВидОперации КАК ВидОперации,
	|	ИнтеграционнаяТаблица.Дата КАК Дата,
	|	ИнтеграционнаяТаблица.Объект КАК Объект,
	|	ИнтеграционнаяТаблица.Сумма КАК Сумма,
	|	ИнтеграционнаяТаблица.ВидОплаты КАК ВидОплаты
	|ПОМЕСТИТЬ ИнтеграционнаяТаблица
	|ИЗ
	|	&ИнтеграционнаяТаблица КАК ИнтеграционнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнтеграционнаяТаблица.ВидОперации КАК ВидОперации,
	|	ИнтеграционнаяТаблица.ВидОплаты КАК ВидОплаты,
	|	ИнтеграционнаяТаблица.Дата КАК Дата,
	|	ИнтеграционнаяТаблица.Объект КАК Объект,
	|	ИнтеграционнаяТаблица.Сумма КАК Сумма,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ок_СопоставлениеАналитикиДляИнтеграций_Объект.Аналитика1С, &НесопоставленоОбъект) КАК Справочник.ОбъектыСтроительства)) КАК ОбъектСсылка,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.Аналитика1С, &НесопоставленоСтатьяДДС) КАК Справочник.СтатьиДвиженияДенежныхСредств)) КАК СтатьяДДССсылка,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ок_СопоставлениеАналитикиДляИнтеграций_Договор.Аналитика1С, &НесопоставленоДоговор) КАК Справочник.ДоговорыКонтрагентов)) КАК ДоговорСсылка,
	|	МАКСИМУМ(""#"" + ИнтеграционнаяТаблица.Объект + "" ("" + ВЫРАЗИТЬ(ЕСТЬNULL(ок_СопоставлениеАналитикиДляИнтеграций_Объект.Аналитика1С, &НесопоставленоОбъект) КАК Справочник.ОбъектыСтроительства).Наименование + ""). "" + ИнтеграционнаяТаблица.ВидОперации + "". "" + ИнтеграционнаяТаблица.ВидОплаты + "". Загружен из POS Кристалл"") КАК Комментарий
	|ПОМЕСТИТЬ ТаблицаПослеСопоставленияАналитики
	|ИЗ
	|	ИнтеграционнаяТаблица КАК ИнтеграционнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СопоставлениеАналитикиДляИнтеграций КАК ок_СопоставлениеАналитикиДляИнтеграций_Объект
	|		ПО ИнтеграционнаяТаблица.Объект = ок_СопоставлениеАналитикиДляИнтеграций_Объект.АналитикаИсточника
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Объект.Источник = &Источник)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Объект.Организация = &Организация)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Объект.Тип1С.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОбъектовСистемы.Справочник))
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Объект.Тип1С.ИмяОбъекта = ""ОбъектыСтроительства"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СопоставлениеАналитикиДляИнтеграций КАК ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС
	|		ПО ИнтеграционнаяТаблица.ВидОперации = ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.АналитикаИсточника
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.Источник = &Источник)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.Организация = &Организация)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.Тип1С.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОбъектовСистемы.Справочник))
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.Тип1С.ИмяОбъекта = ""СтатьиДвиженияДенежныхСредств"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СопоставлениеАналитикиДляИнтеграций КАК ок_СопоставлениеАналитикиДляИнтеграций_Договор
	|		ПО (ИнтеграционнаяТаблица.ВидОперации + ""_"" + ИнтеграционнаяТаблица.Объект = ок_СопоставлениеАналитикиДляИнтеграций_Договор.АналитикаИсточника)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Договор.Источник = &Источник)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Договор.Организация = &Организация)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Договор.Тип1С.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОбъектовСистемы.Справочник))
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Договор.Тип1С.ИмяОбъекта = ""ДоговорыКонтрагентов"")
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнтеграционнаяТаблица.ВидОперации,
	|	ИнтеграционнаяТаблица.Дата,
	|	ИнтеграционнаяТаблица.Объект,
	|	ИнтеграционнаяТаблица.Сумма,
	|	ИнтеграционнаяТаблица.ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИнтеграционнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПослеСопоставленияАналитики.ВидОперации КАК ВидОперации,
	|	ТаблицаПослеСопоставленияАналитики.ВидОплаты КАК ВидОплаты,
	|	ТаблицаПослеСопоставленияАналитики.Объект КАК Объект,
	|	ТаблицаПослеСопоставленияАналитики.Дата КАК Дата,
	|	ТаблицаПослеСопоставленияАналитики.Сумма КАК Сумма,
	|	ТаблицаПослеСопоставленияАналитики.Комментарий КАК Комментарий,
	|	&Организация КАК ОрганизацияСсылка,
	|	ТаблицаПослеСопоставленияАналитики.ДоговорСсылка.Владелец КАК КонтрагентСсылка,
	|	ТаблицаПослеСопоставленияАналитики.ОбъектСсылка КАК ОбъектСсылка,
	|	ТаблицаПослеСопоставленияАналитики.СтатьяДДССсылка КАК СтатьяДДССсылка,
	|	ТаблицаПослеСопоставленияАналитики.ДоговорСсылка КАК ДоговорСсылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПриходныйКассовыйОрдер.Ссылка, ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка))) КАК ПриходныйКассовыйОрдерСсылка,
	|	МАКСИМУМ(ЕСТЬNULL(ОплатаПлатежнойКартой.Ссылка, ЗНАЧЕНИЕ(Документ.ОплатаПлатежнойКартой.ПустаяСсылка))) КАК ОплатаПлатежнойКартойСсылка,
	|	МАКСИМУМ(ЕСТЬNULL(КорректировкаДолга.Ссылка, ЗНАЧЕНИЕ(Документ.КорректировкаДолга.ПустаяСсылка))) КАК КорректировкаДолгаСсылка,
	|	ВЫБОР
	|		КОГДА ТаблицаПослеСопоставленияАналитики.ОбъектСсылка = &НесопоставленоОбъект
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесопоставленоОбъект,
	|	ВЫБОР
	|		КОГДА ТаблицаПослеСопоставленияАналитики.СтатьяДДССсылка = &НесопоставленоСтатьяДДС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесопоставленоСтатьяДДС,
	|	ВЫБОР
	|		КОГДА ТаблицаПослеСопоставленияАналитики.ДоговорСсылка = &НесопоставленоДоговор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесопоставленоДоговор
	|ПОМЕСТИТЬ РезультирующаяТаблица
	|ИЗ
	|	ТаблицаПослеСопоставленияАналитики КАК ТаблицаПослеСопоставленияАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ПО (ТаблицаПослеСопоставленияАналитики.ВидОперации = &ВидОперацииОплатаТовара
	|				ИЛИ ТаблицаПослеСопоставленияАналитики.ВидОперации = &ВидОперацииОплатаСертификата
	|				ИЛИ ТаблицаПослеСопоставленияАналитики.ВидОперации = &ВидОперацииОплатаСТОЛОТО)
	|			И (КОНЕЦПЕРИОДА(ТаблицаПослеСопоставленияАналитики.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(ПриходныйКассовыйОрдер.Дата, ДЕНЬ))
	|			И (ПриходныйКассовыйОрдер.Комментарий ПОДОБНО ТаблицаПослеСопоставленияАналитики.Комментарий + ""%"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|		ПО (ТаблицаПослеСопоставленияАналитики.ВидОперации = &ВидОперацииОплатаТовара
	|				ИЛИ ТаблицаПослеСопоставленияАналитики.ВидОперации = &ВидОперацииОплатаСертификата
	|				ИЛИ ТаблицаПослеСопоставленияАналитики.ВидОперации = &ВидОперацииОплатаСТОЛОТО)
	|			И (КОНЕЦПЕРИОДА(ТаблицаПослеСопоставленияАналитики.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(ОплатаПлатежнойКартой.Дата, ДЕНЬ))
	|			И (ОплатаПлатежнойКартой.Комментарий ПОДОБНО ТаблицаПослеСопоставленияАналитики.Комментарий + ""%"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
	|		ПО (ТаблицаПослеСопоставленияАналитики.ВидОперации = &ВидОперацииОплатаТовара
	|				ИЛИ ТаблицаПослеСопоставленияАналитики.ВидОперации = &ВидОперацииОплатаСТОЛОТО)
	|			И (КОНЕЦПЕРИОДА(ТаблицаПослеСопоставленияАналитики.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(КорректировкаДолга.Дата, ДЕНЬ))
	|			И (КорректировкаДолга.Комментарий ПОДОБНО ТаблицаПослеСопоставленияАналитики.Комментарий + ""%"")
	|			И ТаблицаПослеСопоставленияАналитики.ДоговорСсылка.Владелец = КорректировкаДолга.КонтрагентДебитор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПослеСопоставленияАналитики.ВидОперации,
	|	ТаблицаПослеСопоставленияАналитики.Дата,
	|	ТаблицаПослеСопоставленияАналитики.Объект,
	|	ТаблицаПослеСопоставленияАналитики.Сумма,
	|	ТаблицаПослеСопоставленияАналитики.ОбъектСсылка,
	|	ТаблицаПослеСопоставленияАналитики.СтатьяДДССсылка,
	|	ТаблицаПослеСопоставленияАналитики.ДоговорСсылка,
	|	ТаблицаПослеСопоставленияАналитики.ДоговорСсылка.Владелец,
	|	ТаблицаПослеСопоставленияАналитики.Комментарий,
	|	ВЫБОР
	|		КОГДА ТаблицаПослеСопоставленияАналитики.ОбъектСсылка = &НесопоставленоОбъект
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаПослеСопоставленияАналитики.СтатьяДДССсылка = &НесопоставленоСтатьяДДС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаПослеСопоставленияАналитики.ДоговорСсылка = &НесопоставленоДоговор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаПослеСопоставленияАналитики.ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПослеСопоставленияАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультирующаяТаблица.ВидОперации КАК ВидОперации,
	|	РезультирующаяТаблица.ВидОплаты КАК ВидОплаты,
	|	РезультирующаяТаблица.Объект КАК Объект,
	|	РезультирующаяТаблица.Дата КАК Дата,
	|	РезультирующаяТаблица.Сумма КАК Сумма,
	|	РезультирующаяТаблица.Комментарий КАК Комментарий,
	|	РезультирующаяТаблица.ОрганизацияСсылка КАК ОрганизацияСсылка,
	|	РезультирующаяТаблица.КонтрагентСсылка КАК КонтрагентСсылка,
	|	РезультирующаяТаблица.ОбъектСсылка КАК ОбъектСсылка,
	|	РезультирующаяТаблица.СтатьяДДССсылка КАК СтатьяДДССсылка,
	|	РезультирующаяТаблица.ДоговорСсылка КАК ДоговорСсылка,
	|	РезультирующаяТаблица.ПриходныйКассовыйОрдерСсылка КАК ПриходныйКассовыйОрдерСсылка,
	|	РезультирующаяТаблица.ОплатаПлатежнойКартойСсылка КАК ОплатаПлатежнойКартойСсылка,
	|	РезультирующаяТаблица.КорректировкаДолгаСсылка КАК КорректировкаДолгаСсылка,
	|	РезультирующаяТаблица.НесопоставленоОбъект КАК НесопоставленоОбъект,
	|	РезультирующаяТаблица.НесопоставленоСтатьяДДС КАК НесопоставленоСтатьяДДС,
	|	РезультирующаяТаблица.НесопоставленоДоговор КАК НесопоставленоДоговор,
	|	ЕСТЬNULL(ДополнительныеСведенияКорректировкаДолга.Значение, ЛОЖЬ) КАК КорректировкаДолгаЗагружатьПовторно,
	|	ЕСТЬNULL(ДополнительныеСведенияОплатаПлатежнойКартой.Значение, ЛОЖЬ) КАК ОплатаПлатежнойКартойЗагружатьПовторно,
	|	ЕСТЬNULL(ДополнительныеСведенияПриходныйКассовыйОрдер.Значение, ЛОЖЬ) КАК ПриходныйКассовыйОрдерЗагружатьПовторно
	|ИЗ
	|	РезультирующаяТаблица КАК РезультирующаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведенияПриходныйКассовыйОрдер
	|		ПО РезультирующаяТаблица.ПриходныйКассовыйОрдерСсылка = ДополнительныеСведенияПриходныйКассовыйОрдер.Объект
	|			И (ДополнительныеСведенияПриходныйКассовыйОрдер.Свойство = &СвойствоЗагружатьПовторно)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведенияОплатаПлатежнойКартой
	|		ПО РезультирующаяТаблица.ОплатаПлатежнойКартойСсылка = ДополнительныеСведенияОплатаПлатежнойКартой.Объект
	|			И (ДополнительныеСведенияОплатаПлатежнойКартой.Свойство = &СвойствоЗагружатьПовторно)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведенияКорректировкаДолга
	|		ПО РезультирующаяТаблица.КорректировкаДолгаСсылка = ДополнительныеСведенияКорректировкаДолга.Объект
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2021-11-12 (#AT-2156046)
	//|			И (ДополнительныеСведенияКорректировкаДолга.Свойство = &СвойствоЗагружатьПовторно)";
	|			И (ДополнительныеСведенияКорректировкаДолга.Свойство = &СвойствоЗагружатьПовторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2021-11-12 (#AT-2156046)
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти