
Процедура бит_ВыгрузкаЗаявокДляРО() Экспорт 
	
	Перем ТЗ;
	Перем РезультатИзменненые;

	// Ок Видяйкин 20170116 +
	// Заготовка для отправки отчета
	ВремяОкончанияЗагрузки = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy hh:mm:ss"); 
	// Извещение инженеров второй линии об ошибках при пработе обработки "бит_ВыгрузкаЗаявокДляРО" 1С EIS
	времСообщение_Заголовок = "Информация по работе обработки по выгрузке заявок из Аксапты (Ок). ""бит_ВыгрузкаЗаявокДляРО"".";
	времСообщение_Заголовок_Ошибка = "!ОШИБКА! Информация по работе обработки по выгрузке заявок из Аксапты (Ок). ""бит_ВыгрузкаЗаявокДляРО"".";	
	времТекстСообщения      = ""; 
	времСообщение_Подпись   = "Информация о работе обработки ""бит_ВыгрузкаЗаявокДляРО"". Пользователь: "+ПользователиИнформационнойБазы.ТекущийПользователь();
	времСообщение_Подпись_Ошибка  = "!"+времСообщение_Подпись_Ошибка;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-17 (#3771)
	//вхСписокПолучателей = Новый СписокЗначений();
	//вхСписокПолучателей.Добавить("valeriy.vidyaykin@okmarket.ru");
	//вхСписокПолучателей.Добавить("Tatyana.Dovbeshka@okmarket.ru");
	//вхСписокПолучателей.Добавить("Svetlana.Averyanova@okmarket.ru");
	
	вхСписокПолучателей = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте","Список получателей протокола выполнения РЗ", Новый СписокЗначений());
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-17 (#3771)
	
	вхСписокПолучателейТест = Новый СписокЗначений();
	вхСписокПолучателейТест.Добавить("valeriy.vidyaykin@okmarket.ru");

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
	ТекстСообшенияОбОшибкахСоответствийСтатейОборотов = "";
	ЗаголовокСообшенияОбОшибкахСоответствийСтатейОборотов = "Ошибка соответствия статьи оборотов статьи РУ в обработке по выгрузке заявок из Аксапты (Ок). ""бит_ВыгрузкаЗаявокДляРО"".";
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
	
	Попытка
	    ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок, времТекстСообщения, времСообщение_Подпись, вхСписокПолучателейТест);
	Исключение
		Сообщить("");
	КонецПопытки;	
	// Ок Видяйкин 20170116 -
	
	ЗаписьЖурналаРегистрации("Выгрузка заявок в Аксапту",УровеньЖурналаРегистрации.Информация,,,"Начало выгрузки данных");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресСервера.Значение КАК АдресСервера,
	|	БазаДанных.Значение КАК БазаДанных,
	|	ИмяПользователя.Значение КАК ИмяПользователя,
	|	Пароль.Значение КАК Пароль
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
	|ГДЕ
	|	АдресСервера.ИмяНастройки = ""АдресСервера для выгрузки/загрузки заявок""
	|	И БазаДанных.ИмяНастройки = ""БазаДанных для выгрузки/загрузки заявок""
	|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя для выгрузки/загрузки заявок""
	|	И Пароль.ИмяНастройки = ""Пароль для выгрузки/загрузки заявок""
	|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
	|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
	|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
	|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
	
	
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	
	Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
	ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
	Пароль = ВыборкаДетальныеЗаписи.Пароль;
	ИмяБаза = ВыборкаДетальныеЗаписи.БазаДанных;
	
			
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
	СоединениеАДО.ConnectionTimeOut = 600; 
	СоединениеАДО.CommandTimeOut = 600; 
	СоединениеАДО.CursorLocation = 3; 
	
	СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ИмяБаза+""; 
	
	Попытка
		СоединениеАДО.Open(СтрокаСоединения); 
		//Сообщить("Соединение с базой установлено");
	Исключение 
		времТекст = "Не удалось подключиться к базе: "+Сервер+","+ИмяПользователя +","+Пароль+","+ИмяБаза; // Ок Видяйкин 20170116
		ЗаписьЖурналаРегистрации("Выгрузка заявок в Аксапту",УровеньЖурналаРегистрации.Информация,,,времТекст);
		//Сообщить("Не удалось установить соединение с базой данных", СтатусСообщения.Важное);
		// Ок Видяйкин 20170116 +
		Попытка
			ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок_Ошибка, времТекст, времСообщение_Подпись_Ошибка, вхСписокПолучателей);
		Исключение
			Сообщить("");
		КонецПопытки;	
		// Ок Видяйкин 20170116 -
		Возврат;
	КонецПопытки;
	
	Отказ =Ложь;
	
	
	ЗапросАДО = Новый COMОбъект("ADODB.Command");
	ЗапросАДО.ActiveConnection = СоединениеАДО; 

	
	//Удаляем старые измененные заявки заявки
	ВыборкаПустая = Ложь;
	ПолучитьИзмененныеЗаявки(РезультатИзменненые,ВыборкаПустая);
	
	Если Не ВыборкаПустая Тогда 
		ВыборкаИзменненые = РезультатИзменненые.Выбрать();
		Пока ВыборкаИзменненые.Следующий() Цикл 
			СтрСКЛ = "delete FROM ["+ИмяБаза+"].[dbo].[E1CExternalOrderData] Where[E1COrderId] = '"+ ВыборкаИзменненые.НомерЗаявки +"'";
			//состояние("Удаляется заявка из таблицы  E1CExternalOrderData "+строка(ВыборкаПоШапке.Заявка));
				
			ЗапросАДО.CommandText = СтрСКЛ;
			Попытка
				РезультатУдаления = ЗапросАДО.Execute(); 
			Исключение
				Сообщить("Не удалось выполнить запрос:
				|" + СтрСКЛ);
				отказ=Истина;
			КонецПопытки;	
			
			СтрСКЛ = "delete FROM ["+ИмяБаза+"].[dbo].[E1CExternalOrderLine] Where[E1COrderId] = '"+ ВыборкаИзменненые.НомерЗаявки +"'";
			//состояние("Удаляется заявка из таблицы E1CExternalOrderLine "+строка(ВыборкаПоШапке.Заявка));
						
			ЗапросАДО.CommandText = СтрСКЛ;
	        времТекст = "";  // Ок Видяйкин 20170116
			Попытка
				РезультатУдаления = ЗапросАДО.Execute(); 
				
			Исключение
				// Ок Видяйкин 20170116 +
				//Сообщить("Не удалось выполнить запрос:
				//|" + СтрСКЛ);
				времТекст = "Не удалось выполнить запрос:
				|" + СтрСКЛ;
				Сообщить(ВремТекст);
				// Ок Видяйкин 20170116 -
				отказ=Истина;
			КонецПопытки;	
			
			Если Отказ Тогда
				// Ок Видяйкин 20170116 +
				Попытка
					ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок_Ошибка, времТекст, времСообщение_Подпись, вхСписокПолучателей);
				Исключение
					Сообщить("");
				КонецПопытки;	
				// Ок Видяйкин 20170116 -
				
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПолучитьТЗИзЗаявок(ТЗ,Отказ);
	
	
	ШапкаЗапросаSQL	= "INSERT INTO ["+ИмяБаза+"].[dbo].[E1CExternalOrderData] (
	           	|[E1COrderId],
				|[CustVendName],
				|[CurrencyCode],
				|[TaxGroup],
				|[PurposeIssue],
				|[FormOfPayment],
				|[PayerAccount],
				|[AmountCurPrePayment],
				|[Subject],
				|[InitiatorFIO],
				|[ReceiverFIO],
				|[ReceiveDate],
				|[ReceiveAmount],
				|[E1COrderStatus],
				|[ImportStatus],
				|[OrderDelete],
				|[CreatedDate])
				|VALUES";
				
	ШапкаЗапросаПоТабЧастямSQL	= "INSERT INTO ["+ИмяБаза+"].[dbo].[E1CExternalOrderLine] (
				|[RecId1C],
				|[E1COrderId],
				|[Dim1],
				|[Dim3],
				|[Dim4],
				|[AmountInclTax],
				|[IssuePeriod],
				|[ImportStatus])
				|VALUES";

	ОбъемЗапроса 	= 0;
	ОбъемЗапросаПоТЧ = 0;
	Инд				= 1;
			
	СтрокиЗначений="";
	СтрокиЗначенийДляТабЧастей = "";
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	ВыборкаПоШапке = ТЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПерваяСтрокаВЗапросеПоШапке = Истина;
	ПерваяСтрокаВЗапросеТЧ = Истина;
	ВыгруженныеЗаявки = Новый Массив;
	Пока ВыборкаПоШапке.Следующий() Цикл 
		
	
		Если Не ПерваяСтрокаВЗапросеПоШапке Тогда
			 СтрокиЗначений = СтрокиЗначений+",";
		КонецЕсли;
		ПерваяСтрокаВЗапросеПоШапке =Ложь;
		
				
		ИдентификаторПоля =            "";//ВыборкаПоШапке.Заявка.УникальныйИдентификатор();
		НомерЗаявки =                  СокрЛП(ВыборкаПоШапке.НомерЗаявки);
		НаименованиеКонтрагента =      СтрЗаменить(Лев(СокрЛП(ВыборкаПоШапке.ПрКонтрагент),140),"'","");
		Валюта =                       Лев(СокрЛП(ВыборкаПоШапке.Валюта),3);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-01 (#3116)
		//СтавкаНДС =                    СтрЗаменить(ВыборкаПоШапке.СтавкаНДС,"%","");
		//НалоговаяГруппа =              СтавкаНДС;
		//Заменено на:
		НалоговаяГруппа =              "";
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-01 (#3116)
		ЦельРасход =                   СтрЗаменить(Лев(СокрЛП(ВыборкаПоШапке.ЦельРасхода),100),"'","''");

		ЦельРасхода =                  СтрЗаменить(ЦельРасход,Символы.ПС,"");
		ФормаОплаты =                  СокрЛП(ВыборкаПоШапке.ФормаОплаты);
		КомпанияПлательщик =           СтрЗаменить(ВыборкаПоШапке.Организация,"'","");
		СуммаПредоплаты =              ВыборкаПоШапке.ОК_РазмерПредоплаты;
		ПредметЗаказа =                "";
		ФИОИнициатора =                СтрЗаменить(ВыборкаПоШапке.Инициатор,"'","");
		ФИОПриемщика =                 "";
		ДатаПриемки =                  Формат(Дата(1,1,1),"ДФ=ггггММдд");
		СуммаПриемки =                 0;
		Если Не ЗначениеЗаполнено(ВыборкаПоШапке.Статус) Тогда 
			//СтатусЗаявки = "''";
			СтатусЗаявки = "Черновик";   //Довбешка Т. 10.12.2017
		Иначе 
			СтатусЗаявки =  СокрЛП(ВыборкаПоШапке.Статус.Наименование);
		КонецЕсли;
		Если  СтатусЗаявки = "Закрыт(а)" Тогда 
			СтатусЗаявки = "Закрыта";
		ИначеЕсли  СтатусЗаявки = "Согласован(а)" Тогда
			СтатусЗаявки = "Согласована";
		КонецЕсли;
		
			  
		Статус =                       СтатусЗаявки;
		СтатусЗагрузки =               0;
		Если   ВыборкаПоШапке.ПометкаУдаления Тогда 
			УдаленаВ1С =                   1;
		иначе
			УдаленаВ1С =                   0;
		КонецЕсли;
		ДатаСоздания =                 Формат(ВыборкаПоШапке.Дата,"ДФ=ггггММдд");
		Если ВыборкаПоШапке.Дата < Дата(1900,1,1) Тогда 
			Сообщить("Заявка №" + НомерЗаявки + " от " + Формат(ВыборкаПоШапке.Дата,"ДЛФ=Д") + " - не верно указана дата");
			ЗаявкаДата	= "";
		КонецЕсли;
			
		
		СтрокиЗначений = СтрокиЗначений+  "
			 	|('"+НомерЗаявки+
				"','"+НаименованиеКонтрагента+
				"','"+Валюта+
				"','"+НалоговаяГруппа+
				"','"+ЦельРасхода+
				"','"+ФормаОплаты+
				"','"+КомпанияПлательщик+
				"',"+СуммаПредоплаты+                  
				",'"+ПредметЗаказа+
				"','"+ФИОИнициатора+
				"','"+ФИОПриемщика+
				"','"+ДатаПриемки+
				"',"+СуммаПриемки+
				",'"+Статус+
				"',"+СтатусЗагрузки+
				","+УдаленаВ1С+
				",'"+ДатаСоздания+"'
			|)";	
	    
	     ОбъемЗапроса = ОбъемЗапроса + 1;
		 
		 //Если ОбъемЗапроса> 400 Тогда   
		 //	//Состояние("Выполнение запроса SQL");
		 //	ЗапросАДО.CommandText =ШапкаЗапросаSQL + СтрокиЗначений;
		 //	Попытка                                                 
		 //   	 РезультатЗагрузки = ЗапросАДО.Execute(); 
		 //   	 СтрокиЗначений ="";
		 //   	 ПерваяСтрокаВЗапросеПоШапке = Истина;
		 //   Исключение
		 //   	 Сообщить("Не удалось выполнить запрос:
		 //   	 |" + ЗапросАДО.CommandText);           	
		 //   	 Инфо = ИнформацияОбОшибке();
		 //   	 //ПоказатьИнформациюОбОшибке(Инфо);
		 //   	 возврат;
		 //	КонецПопытки;
		 //	ОбъемЗапроса = 0;
		 //КонецЕсли;
		
		ВыборкаДетали = ВыборкаПоШапке.Выбрать();	
		//Выполним загрузку по табличным частям
		Пока ВыборкаДетали.Следующий() Цикл 
			
			Если Не ПерваяСтрокаВЗапросеТЧ  Тогда
				СтрокиЗначенийДляТабЧастей = СтрокиЗначенийДляТабЧастей+",";
			КонецЕсли;
			ПерваяСтрокаВЗапросеТЧ = Ложь;

			ИдентификаторПоляТЧ = Строка(ВыборкаДетали.НомерЗаявки)+"/"+ ВыборкаДетали.НомерСтроки;
			Объект =   ПолучитьКодАксапты(ВыборкаДетали.Объект);
			ЦФО =   ПолучитьКодАксапты(ВыборкаДетали.ЦФО);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
			//СтатьяЗатрат = ПолучитьКодАксапты(ВыборкаДетали.Статья,Истина);
			ТекстСообшенияОбОшибках = "";
			СтатьяЗатрат = ПолучитьКодАксапты(ВыборкаДетали.Статья,Истина,ТекстСообшенияОбОшибках);
			Если ТекстСообшенияОбОшибках <> "" Тогда
				ТекстСообшенияОбОшибках = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообшенияОбОшибках, ВыборкаДетали.НомерЗаявки, ВыборкаДетали.Дата, ВыборкаДетали.Статья);
				ТекстСообшенияОбОшибкахСоответствийСтатейОборотов = ТекстСообшенияОбОшибкахСоответствийСтатейОборотов + Символы.ПС + ТекстСообшенияОбОшибках;
			КонецЕсли;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-01 (#3116)
			//Если  ВыборкаДетали.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Или 
			//	ВыборкаДетали.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
			//	СуммаСНДС = Окр(ВыборкаДетали.СуммаБезНДС * 1.18,2);
			//ИначеЕсли   ВыборкаДетали.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Или
			//	ВыборкаДетали.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда 
			//	СуммаСНДС = Окр(ВыборкаДетали.СуммаБезНДС * 1.1,2);
			//ИначеЕсли ВыборкаДетали.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Или
			//	ВыборкаДетали.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда 
			//	СуммаСНДС = Окр(ВыборкаДетали.СуммаБезНДС * 1.2,2);
			//Иначе 
			//	СуммаСНДС =	ВыборкаДетали.СуммаБезНДС;
			//КонецЕсли;
			//СуммаСНДС = Формат(СуммаСНДС,"ЧРД=.; ЧН=0; ЧГ=");
			//Заменено на:
			СуммаСНДС = Формат(ВыборкаДетали.СуммаСНДС,"ЧРД=.; ЧН=0; ЧГ=");			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-01 (#3116)
		    СтатусЗагрузки = 0;
			ПериодРасхода =  Формат(ВыборкаДетали.Период,"ДФ=ггггММдд");
			
			СтрокиЗначенийДляТабЧастей = СтрокиЗначенийДляТабЧастей + "
			|('"+ ИдентификаторПоляТЧ+
			"','"+НомерЗаявки+
			"','"+Объект+
			"','"+СтатьяЗатрат+
			"','"+ЦФО+
			"',"+СуммаСНДС+
			",'"+ПериодРасхода+
			"',"+СтатусЗагрузки+"
			|)";	

			ОбъемЗапросаПоТЧ = ОбъемЗапросаПоТЧ + 1;
			//Если ОбъемЗапросаПоТЧ>999 Тогда  
			//	//Состояние("Выполнение запроса SQL");
			//	ЗапросАДО.CommandText =ШапкаЗапросаПоТабЧастямSQL + СтрокиЗначенийДляТабЧастей;
			//	Попытка                                                 
			//		РезультатЗагрузки = ЗапросАДО.Execute(); 
			//		СтрокиЗначенийДляТабЧастей ="";
			//		ПерваяСтрокаВЗапросеТЧ = Истина;
			//	Исключение
			//		Сообщить("Не удалось выполнить запрос:
			//		|" + ЗапросАДО.CommandText);           	
			//		Инфо = ИнформацияОбОшибке();
			//		//ПоказатьИнформациюОбОшибке(Инфо);
			//		возврат;
			//	КонецПопытки;
			//	ОбъемЗапросаПоТЧ = 0;
			//КонецЕсли;
		КонецЦикла;
		ВыгруженныеЗаявки.Добавить(ВыборкаПоШапке.Заявка);
		
		// Ок Видяйкин 20170714 + Участились сбои выгрузки заявок: большой размер пакета (ОбъемЗапросаПоТЧ>1000), формируемый из строк табличных частей документов.
		// Ок Видяйкин 20170116 +
		//Если ОбъемЗапроса > 100 Тогда   
		//Если ОбъемЗапроса > 50 Тогда   
		Если ОбъемЗапроса > 40 Тогда	
		// Ок Видяйкин 20170116 -
		// Ок Видяйкин 20170714 -
		
			//Состояние("Выполнение запроса SQL");
			ЗапросАДО.CommandText =ШапкаЗапросаSQL + СтрокиЗначений;
			Попытка                                                 
				РезультатЗагрузки = ЗапросАДО.Execute(); 
				СтрокиЗначений ="";
				ПерваяСтрокаВЗапросеПоШапке = Истина;
				ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок+"(Шапка)", ШапкаЗапросаSQL + СтрокиЗначений, времСообщение_Подпись, вхСписокПолучателейТест); // Ок Видяйкин 20170116
			Исключение
				//Сообщить("Не удалось выполнить запрос:
				//|" + ЗапросАДО.CommandText);
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось выполнить запрос:
				//|" + ЗапросАДО.CommandText);
				Инфо = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации("Выгрузка заявок в Аксапту",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка при выгрузке заявок: " +Инфо); // Ок Видяйкин 20170116
				ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок_Ошибка+"(Шапка)", ШапкаЗапросаSQL + СтрокиЗначений
				                                               , "Ошибка:"+СокрЛП(Инфо)+"."+времСообщение_Подпись_Ошибка, вхСписокПолучателей); // Ок Видяйкин 20170116
				//ПоказатьИнформациюОбОшибке(Инфо);				
				возврат;
			КонецПопытки;
			ОбъемЗапроса = 0;
			
			ЗапросАДО.CommandText =ШапкаЗапросаПоТабЧастямSQL + СтрокиЗначенийДляТабЧастей;
			Попытка                                                 
				РезультатЗагрузки = ЗапросАДО.Execute(); 
				СтрокиЗначенийДляТабЧастей ="";
				ПерваяСтрокаВЗапросеТЧ = Истина;
    			ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок+"(Табл.часть)", ШапкаЗапросаПоТабЧастямSQL + СтрокиЗначенийДляТабЧастей, времСообщение_Подпись
			                                                   , вхСписокПолучателейТест); // Ок Видяйкин 20170116
			Исключение
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось выполнить запрос:
				//|" + ЗапросАДО.CommandText);           	
				Инфо = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации("Выгрузка заявок в Аксапту",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка при выгрузке заявок: " +Инфо); 
				ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок_Ошибка+"(Табл.часть)", ШапкаЗапросаПоТабЧастямSQL + СтрокиЗначенийДляТабЧастей
				                                               , "Ошибка:"+СокрЛП(Инфо)+"."+времСообщение_Подпись_Ошибка, вхСписокПолучателей); // Ок Видяйкин 20170116
				//ПоказатьИнформациюОбОшибке(Инфо);
				//ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Инфо);
				возврат;
			КонецПопытки;
			
			ОбъемЗапросаПоТЧ = 0;

			НачатьТранзакцию();
			//Очищаем регистр Регистрация изменений объектов
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_РегистрацияИзмененийОбъектов.Объект
			|ИЗ
			|	РегистрСведений.бит_РегистрацияИзмененийОбъектов КАК бит_РегистрацияИзмененийОбъектов
			|ГДЕ
			|	бит_РегистрацияИзмененийОбъектов.Объект В(&Объекты)";
			
			Запрос.УстановитьПараметр("Объекты", ВыгруженныеЗаявки);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = ВыборкаДетальныеЗаписи.Объект;
				МенеджерЗаписи.Удалить();
			КонецЦикла;
			ВыгруженныеЗаявки.Очистить();
			ЗафиксироватьТранзакцию(); 			
			
		КонецЕсли; 
	КонецЦикла;
	
	Если ОбъемЗапроса <>0 Тогда 
		
		//Состояние("Выполнение запроса SQL");
		ЗапросАДО.CommandText =ШапкаЗапросаSQL + СтрокиЗначений;
		
		Попытка                                                 
			РезультатЗагрузки = ЗапросАДО.Execute(); 
			СтрокиЗначений ="";
			ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок+"(Шапка)", ШапкаЗапросаSQL + СтрокиЗначений, времСообщение_Подпись
			                                               , вхСписокПолучателейТест); // Ок Видяйкин 20170116
		Исключение
			//Сообщить("Не удалось выполнить запрос:
			//|" + ЗапросАДО.CommandText);           	
			Инфо = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации("Выгрузка заявок в Аксапту",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка при выгрузке заявок: " +Инфо);
			ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок_Ошибка+"(Шапка)", ШапкаЗапросаSQL + СтрокиЗначений
			                                               , "Ошибка:"+СокрЛП(Инфо)+"."+времСообщение_Подпись_Ошибка, вхСписокПолучателей); // Ок Видяйкин 20170116
			//ПоказатьИнформациюОбОшибке(Инфо);
			возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ОбъемЗапросаПоТЧ <>0 Тогда 
		
		//Состояние("Выполнение запроса SQL");
		ЗапросАДО.CommandText =ШапкаЗапросаПоТабЧастямSQL + СтрокиЗначенийДляТабЧастей;
		Попытка                                                 
			РезультатЗагрузки = ЗапросАДО.Execute(); 
			СтрокиЗначенийДляТабЧастей ="";
			ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок+"(Табл.часть)", ШапкаЗапросаПоТабЧастямSQL + СтрокиЗначенийДляТабЧастей, времСообщение_Подпись
			                                               , вхСписокПолучателейТест); // Ок Видяйкин 20170116
		Исключение
			//Сообщить("Не удалось выполнить запрос:
			//|" + ЗапросАДО.CommandText);           	
			Инфо = ИнформацияОбОшибке();    
			ЗаписьЖурналаРегистрации("Выгрузка заявок в Аксапту",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка при выгрузке заявок: " +Инфо);
			ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок_Ошибка+"(Табл.часть)", ШапкаЗапросаПоТабЧастямSQL + СтрокиЗначенийДляТабЧастей
			                                               , "Ошибка:"+СокрЛП(Инфо)+"."+времСообщение_Подпись_Ошибка, вхСписокПолучателей); // Ок Видяйкин 20170116
			//ПоказатьИнформациюОбОшибке(Инфо);
			возврат;
		КонецПопытки;
	КонецЕсли;

	//Очищаем регистр Регистрация изменений объектов
	НачатьТранзакцию();		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_РегистрацияИзмененийОбъектов.Объект
	|ИЗ
	|	РегистрСведений.бит_РегистрацияИзмененийОбъектов КАК бит_РегистрацияИзмененийОбъектов
	|ГДЕ
	|	бит_РегистрацияИзмененийОбъектов.Объект В(&Объекты)";
	
	Запрос.УстановитьПараметр("Объекты", ВыгруженныеЗаявки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ВыборкаДетальныеЗаписи.Объект;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
    ЗаписьЖурналаРегистрации("Выгрузка заявок в Аксапту",УровеньЖурналаРегистрации.Информация,,,"Данные успешно выгруженны"); 
	
	// Ок Видяйкин 20170116 +
	Попытка
		ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок, "Выгрузка успешно завершена. ", времСообщение_Подпись
			                                           , вхСписокПолучателейТест); 
    Исключение
		Сообщить("");												   
    КонецПопытки;	
	// Ок Видяйкин 20170116 +
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
	Если ТекстСообшенияОбОшибкахСоответствийСтатейОборотов <> "" Тогда
	
		Попытка
			ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(ЗаголовокСообшенияОбОшибкахСоответствийСтатейОборотов, 
															ТекстСообшенияОбОшибкахСоответствийСтатейОборотов, 
															времСообщение_Подпись,
															вхСписокПолучателей); 
	    Исключение
			Сообщить(ТекстСообшенияОбОшибкахСоответствийСтатейОборотов);
	    КонецПопытки;
	
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
	
КонецПроцедуры

Процедура ПолучитьТЗИзЗаявок(ТЗ,Отказ)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_РегистрацияИзмененийОбъектов.Объект
	|ПОМЕСТИТЬ ВР_Заявки
	|ИЗ
	|	РегистрСведений.бит_РегистрацияИзмененийОбъектов КАК бит_РегистрацияИзмененийОбъектов
	|ГДЕ
	|	бит_РегистрацияИзмененийОбъектов.Объект ССЫЛКА Документ.бит_ФормаВводаБюджета
	|	И бит_РегистрацияИзмененийОбъектов.Объект.ВидОперации В(&ВидыОперации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка КАК Заявка,
	|	бит_ФормаВводаБюджетаБДДС.Период КАК Период,
	|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов КАК Статья,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_2 КАК Объект,
	|	бит_ФормаВводаБюджетаБДДС.ЦФО КАК ЦФО,
	|	ВЫРАЗИТЬ(бит_ФормаВводаБюджетаБДДС.бит_БК_Организация.Наименование КАК СТРОКА(20)) КАК Организация,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС КАК СуммаБезНДС,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.бит_БК_ПредпологаемыйКонтрагент КАК ПрКонтрагент,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.бит_БК_ВалютаДокумента КАК Валюта,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.Ответственный КАК Автор,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.бит_БК_Инициатор КАК Инициатор,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-01 (#3116)
	//|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	//Заменено на:
	|	бит_ФормаВводаБюджетаБДДС.бит_СтавкаНДС КАК СтавкаНДС,
	|	бит_ФормаВводаБюджетаБДДС.Сумма КАК СуммаСНДС,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-01 (#3116)
	|	ВЫРАЗИТЬ(бит_ФормаВводаБюджетаБДДС.Ссылка.бит_БК_Цель КАК СТРОКА(100)) КАК ЦельРасхода,
	|	бит_ФормаВводаБюджетаБДДС.ИД КАК ИД,
	|	""                                                                                     "" КАК ГодНомер,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.Номер КАК НомерЗаявки,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.ОК_БК_ФормаОплаты КАК ФормаОплаты,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.Дата КАК Дата,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.ОК_РазмерПредоплаты КАК ОК_РазмерПредоплаты,
	|	ЕСТЬNULL(бит_СтатусыОбъектов.Статус, """") КАК Статус,
	|	бит_ФормаВводаБюджетаБДДС.НомерСтроки,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.ПометкаУдаления
	|ИЗ
	|	ВР_Заявки КАК ВР_Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	|			ПО бит_ФормаВводаБюджетаБДДС.Ссылка = бит_СтатусыОбъектов.Объект
	|		ПО ВР_Заявки.Объект = бит_ФормаВводаБюджетаБДДС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заявка
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	МАКСИМУМ(ПрКонтрагент),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(Инициатор),
	|	МАКСИМУМ(СтавкаНДС),
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-01 (#3116)
	|	СУММА(СуммаСНДС),
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-01 (#3116)
	|	МАКСИМУМ(ЦельРасхода),
	|	МАКСИМУМ(ИД),
	|	МАКСИМУМ(НомерЗаявки),
	|	МАКСИМУМ(КонтрагентНаименование),
	|	МАКСИМУМ(ФормаОплаты),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(ОК_РазмерПредоплаты),
	|	МАКСИМУМ(Статус)
	|ПО
	|	Заявка";
	
	ВидыОперации = Новый Массив;
	ВидыОперации.Добавить(Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный);
	ВидыОперации.Добавить(Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный);
	ВидыОперации.Добавить(Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный);
	
	Запрос.УстановитьПараметр("ВидыОперации",ВидыОперации);
	
	Рез = Запрос.Выполнить();

	Если Рез.Пустой() Тогда 
		Отказ = Истина;
		Возврат
	КонецЕсли;                                                                                           
	
	ТЗ = Рез;
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
//Функция ПолучитьКодАксапты (Объект1с,СтатьяОборотов=Ложь)
Функция ПолучитьКодАксапты(Объект1с, СтатьяОборотов = Ложь, ТекстСообшенияОбОшибках = "")
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
	
	Если СтатьяОборотов Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
		//"ВЫБРАТЬ ПЕРВЫЕ 1
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	бит_СтатьиОборотов_СтатьиРегл.ок_ОсновноеСоответствие,
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
		|ИЗ
		|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
		|ГДЕ
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов = &СтатьяОборотов
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
		|УПОРЯДОЧИТЬ ПО
		|	бит_СтатьиОборотов_СтатьиРегл.ок_ОсновноеСоответствие УБЫВ,
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл";
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
		
		Запрос.УстановитьПараметр("СтатьяОборотов", Объект1с);
		
		Результат = Запрос.Выполнить();
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
		//Если  Результат.Пустой() Тогда 
		//	Возврат "";
		//КонецЕсли;
		//
		//ВыборкаДетальныеЗаписи = Результат.Выбрать();
		//
		//ВыборкаДетальныеЗаписи.Следующий();
		//
		//ОбъектПоиска = ВыборкаДетальныеЗаписи.СтатьяРегл;
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		
			ВыборкаДетальныеЗаписи.Следующий();
			ОбъектПоиска = ВыборкаДетальныеЗаписи.СтатьяРегл;
			
		ИначеЕсли ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
			
			ВыборкаДетальныеЗаписи.Следующий();
			ОбъектПоиска = ВыборкаДетальныеЗаписи.СтатьяРегл;
			
			Если НЕ ВыборкаДетальныеЗаписи.ок_ОсновноеСоответствие Тогда	
				ТекстСообшенияОбОшибках = "В ФВБ №%1 от %2 для статьи оборотов «%3» не установлен признак «Основное соответствие».";
			КонецЕсли;
			
		Иначе
			
			ТекстСообшенияОбОшибках = "В ФВБ №%1 от %2 для статьи оборотов «%3» не найдено сопоставления статьи РУ. Необходимо обратиться в службу поддержки.";
			Возврат "";
			
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты
	|ИЗ
	|	РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
	|ГДЕ
	|	бит_ок_СопоставлениеАналитики.Организация = &Организация
	|	И бит_ок_СопоставлениеАналитики.Аналитика1С = &Аналитика1С";
	
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоКоду("000000045"));
	Запрос.УстановитьПараметр("Аналитика1С",?(СтатьяОборотов,ОбъектПоиска,Объект1С));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат "" 
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий(); 
	Возврат Выборка.КодАналитикиАксапты;
	
	
КонецФункции

Процедура ПолучитьИзмененныеЗаявки(Выборка,ВыборкаПустая)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_РегистрацияИзмененийОбъектов.Объект КАК Заявка,
		|	бит_РегистрацияИзмененийОбъектов.Объект.Номер КАК НомерЗаявки
		|ИЗ
		|	РегистрСведений.бит_РегистрацияИзмененийОбъектов КАК бит_РегистрацияИзмененийОбъектов
		|ГДЕ
		|	бит_РегистрацияИзмененийОбъектов.Объект ССЫЛКА Документ.бит_ФормаВводаБюджета";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		ВыборкаПустая = Истина;
		Возврат
	КонецЕсли;  
	
	Выборка =  РезультатЗапроса;
	
КонецПроцедуры

Процедура бит_ЗагрузкаРОАксапта() Экспорт
	
	Перем Выборка;
	
	ЗаписьЖурналаРегистрации("Загрузка РО из Аксапты",УровеньЖурналаРегистрации.Информация,,,"Начало загрузки данных");
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
	СоединениеАДО.ConnectionTimeOut = 600; 
	СоединениеАДО.CommandTimeOut = 600; 
	СоединениеАДО.CursorLocation = 3; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресСервера.Значение КАК АдресСервера,
	|	БазаДанных.Значение КАК БазаДанных,
	|	ИмяПользователя.Значение КАК ИмяПользователя,
	|	Пароль.Значение КАК Пароль
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
	|ГДЕ
	|	АдресСервера.ИмяНастройки = ""АдресСервера для выгрузки/загрузки заявок""
	|	И БазаДанных.ИмяНастройки = ""БазаДанных для выгрузки/загрузки заявок""
	|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя для выгрузки/загрузки заявок""
	|	И Пароль.ИмяНастройки = ""Пароль для выгрузки/загрузки заявок""
	|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
	|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
	|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
	|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";

	
	
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	
	Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
	ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
	Пароль = ВыборкаДетальныеЗаписи.Пароль;
	База = ВыборкаДетальныеЗаписи.БазаДанных;

	
	СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 
	
	Попытка
		СоединениеАДО.Open(СтрокаСоединения); 
	Исключение 
		//Сообщить("Не удалось установить соединение с базой данных", СтатусСообщения.Важное); 
		ЗаписьЖурналаРегистрации("Загрузка РО из Аксапты",УровеньЖурналаРегистрации.Информация,,,"Не удалось подключиться к базе: "+Сервер+","+ИмяПользователя
        +","+Пароль+","+База);

		Возврат;
	КонецПопытки;
	
	Запрос = "";
	
	ПолучитьЗапрос(Запрос,База);
	
	
	ЗапросВыполенен = ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка);
	
	Если НЕ ЗапросВыполенен Тогда 
		Возврат
	КонецЕсли;
	
	таб = Новый ТаблицаЗначений;
	
	таб.Колонки.Добавить("RecNo");
	таб.Колонки.Добавить("Action");
	таб.Колонки.Добавить("ActionDate");
	таб.Колонки.Добавить("LinkID");
	таб.Колонки.Добавить("E1COrderId");
	таб.Колонки.Добавить("InitiatorFIO");
	таб.Колонки.Добавить("JournalNum");
	таб.Колонки.Добавить("CustVendName");
	таб.Колонки.Добавить("DocumentNum");
	таб.Колонки.Добавить("SourceDate");
	таб.Колонки.Добавить("RContractNumber");
	таб.Колонки.Добавить("LedgerRecId");
	таб.Колонки.Добавить("Voucher");
	таб.Колонки.Добавить("TransDate");
	таб.Колонки.Добавить("Dim1");
	таб.Колонки.Добавить("Dim3");
	таб.Колонки.Добавить("Dim4");
	таб.Колонки.Добавить("TaxValue");
	таб.Колонки.Добавить("AmountInclTax");
	таб.Колонки.Добавить("CurrencyCode");
	таб.Колонки.Добавить("IssuePeriod1C");
	таб.Колонки.Добавить("Dim1_1C");
	таб.Колонки.Добавить("Dim3_1C");
	таб.Колонки.Добавить("Dim4_1C");
	таб.Колонки.Добавить("AmountInclTax1C");
	таб.Колонки.Добавить("VendAccount");
	
	
	Пока Не Выборка.EOF() Цикл 
		fields=FieldsСтруктура(Выборка.Fields);
		нов=таб.Добавить();
		ЗаполнитьЗначенияСвойств(нов,fields);	
		Выборка.MoveNext(); 
	КонецЦикла;	
	
	таб.Сортировать("LinkID");
	
	idРазнесения="";
	КоличествоСтрок =  таб.Количество();
	СтрокаДляЗаписиПолученныхСтрока="";
	Для Строка = 0 по  КоличествоСтрок-1 Цикл 
		
		idРазнесения = таб[Строка].LinkID;
		
		Если Лев(idРазнесения,1)<>"9" Тогда 
			Продолжить;
		КонецЕсли;
		
		// 1c-izhtc spawn 03.08.15 (
		// документ отклонен
		//ПометитьНаУдалениеДокументы(idРазнесения);
		//			
		//Док = Документы.бит_БК_РазнесениеОборотов.СоздатьДокумент();

		//ЗаполнитьШапкуДокумента(Док,таб[Строка]);
		//				
		//СуммаСНДСВсего =0 ;
		//СтавкаНДСДокумента = Док.СтавкаНДС;
		//Пока таб[Строка].LinkID = idРазнесения Цикл 
		//	
		//	ЗаполнитьТабличныеЧастиДокумента(док,таб[Строка],СтавкаНДСДокумента,СуммаСНДСВсего,СтрокаДляЗаписиПолученныхСтрока);
		//	Строка = Строка+1;
		//	Если КоличествоСтрок-1 >=Строка Тогда  
		//		//idРазнесения =таб[Строка].LinkID;
		//	Иначе 
		//		Прервать;
		//	КонецЕсли;
		//	
		//				
		//КонецЦикла;
		//
		//Строка = Строка-1;
		//Док.СуммаСНДС = СуммаСНДСВсего;
		//Док.НДС = бит_ОбщегоНазначения.РассчитатьСуммуНДС(Док.СуммаСНДС, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Док.СтавкаНДС));
		//Док.СуммаБезНДС = Док.СуммаСНДС - Док.НДС;
		//Док.СуммаВВалютеБезНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Док.СуммаБезНДС,
		//мВалютаРегламентированногоУчета,
		//Док.ВалютаДокумента,
		//1,
		//Док.КурсДокумента,
		//1,
		//Док.КратностьДокумента);
		//Док.бит_ЗагруженИзАксапты = Истина;
		//Док.ДополнительныеСвойства.Вставить("бит_ЗагруженИзАксапты");
		//Док.Записать();
		//Сообщить("Создан документ: "+Док.Ссылка);
		// 1c-izhtc spawn 03.08.15 )
	КонецЦикла;

	 //Выгрузим в таблицы признак о загрузке
	Если ЗначениеЗаполнено(СтрокаДляЗаписиПолученныхСтрока) Тогда 
		ТекстЗапросаДляВыгрузки = "
		|	UPDATE [dbo].[ExportDataTo1COrderTrans]
		|SET [ImportStatus]='1' WHERE " + СтрокаДляЗаписиПолученныхСтрока;
		ЗапросАДО = Новый COMОбъект("ADODB.Command");
		ЗапросАДО.CommandTimeout = 600;
		ЗапросАДО.ActiveConnection=СоединениеАДО; 	
		ЗапросАДО.CommandText=ТекстЗапросаДляВыгрузки; 
		
		Попытка                                                 
			РезультатЗагрузки = ЗапросАДО.Execute(); 
		Исключение	
		КонецПопытки;	  
	КонецЕсли;

	ПолучитьЗапросДляСторно(Запрос,База);
	
	
	ЗапросВыполенен = ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка);
	
	Если НЕ ЗапросВыполенен Тогда 
		Возврат
	КонецЕсли;

	таб.Очистить();
	
	Пока Не Выборка.EOF() Цикл 
		fields=FieldsСтруктура(Выборка.Fields);
		нов=таб.Добавить();
		ЗаполнитьЗначенияСвойств(нов,fields);	
		Выборка.MoveNext(); 
	КонецЦикла;	

	
	ТабСторноДляГруппировки = таб.Скопировать();
    
	
	Если таб.Количество()>0 Тогда 
		
		ТабСторноДляГруппировки.Свернуть("LinkID");
		
		СтрокаДляЗаписиПолученныхСтрока = "";
		Для Каждого Строка ИЗ ТабСторноДляГруппировки Цикл  
			
			// 1c-izhtc spawn 03.08.15 (
			// документ отклонен
			//ДокСторно = Документы.бит_БК_РазнесениеОборотов.НайтиПоРеквизиту("ID_Разнесения",Строка.LinkID);
			//
			//Если ЗначениеЗаполнено(ДокСторно) Тогда 
			//	ДокСторноОбъект = ДокСторно.ПолучитьОбъект();
			//	ДокСторноОбъект.ПометкаУдаления = Истина;
			//	ДокСторноОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			//	
			//	//Сообщить("Стороно документа: "+ ДокСторно + ", документ помечен на удаление.");
			//КонецЕсли;
			// 1c-izhtc spawn 03.08.15 )
			
			СтруктураОтбора = Новый Структура("LinkID",Строка.LinkID);
			СтрокиПоРазнесению = таб.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого строкаРазнесения из СтрокиПоРазнесению Цикл 
				Если НЕ ЗначениеЗаполнено(СтрокаДляЗаписиПолученныхСтрока) Тогда 
					СтрокаДляЗаписиПолученныхСтрока = " [RecNo]="+строкаРазнесения.RecNo;
				Иначе 
					СтрокаДляЗаписиПолученныхСтрока = СтрокаДляЗаписиПолученныхСтрока + " or [RecNo]="+строкаРазнесения.RecNo; 
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;		
	КонецЕсли;			
	
	 //Выгрузим в таблицы признак о загрузке
	Если ЗначениеЗаполнено(СтрокаДляЗаписиПолученныхСтрока) Тогда 
		ТекстЗапросаДляВыгрузки = "
		|	UPDATE [dbo].[ExportDataTo1COrderTrans]
		|SET [ImportStatus]='1' WHERE " + СтрокаДляЗаписиПолученныхСтрока;
		ЗапросАДО = Новый COMОбъект("ADODB.Command");
		ЗапросАДО.CommandTimeout = 600;
		ЗапросАДО.ActiveConnection=СоединениеАДО; 	
		ЗапросАДО.CommandText=ТекстЗапросаДляВыгрузки; 
		
		Попытка                                                 
			РезультатЗагрузки = ЗапросАДО.Execute(); 
		Исключение	
		КонецПопытки;	  
	КонецЕсли;

	//Обработаем строки с Action = 2
	
	ПолучитьЗапросДляAction2(Запрос,База);
	
	ЗапросВыполенен = ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка);
	
	Если НЕ ЗапросВыполенен Тогда 
		Возврат
	КонецЕсли;

	таб.Очистить();
	
	Пока Не Выборка.EOF() Цикл 
		fields=FieldsСтруктура(Выборка.Fields);
		нов=таб.Добавить();
		ЗаполнитьЗначенияСвойств(нов,fields);	
		Выборка.MoveNext(); 
	КонецЦикла;	

	СтрокаДляЗаписиПолученныхСтрока = "";
	Если таб.Количество()> 0 Тогда 
		
		// 1c-izhtc spawn 03.08.15 (
		// документ отклонен
		//Для Каждого строка из таб Цикл 
		//	
		//	idРазнесения = Строка.LinkID;
		//	ДокСсылка = Документы.бит_БК_РазнесениеОборотов.НайтиПоРеквизиту("ID_Разнесения",Строка.LinkID);
		//	
		//	Док = ДокСсылка.ПолучитьОбъект();
		//	СуммаСНДСВсего =0 ;
		//	СтавкаНДСДокумента = Док.СтавкаНДС;
		//	
		//	ЗаполнитьТабличныеЧастиДокумента(док,Строка,СтавкаНДСДокумента,СуммаСНДСВсего,СтрокаДляЗаписиПолученныхСтрока,Истина);			
		//	Док.СуммаСНДС = Док.КонтрольБюджета.Итог("СуммаСНДС");
		//	Док.НДС = бит_ОбщегоНазначения.РассчитатьСуммуНДС(Док.СуммаСНДС, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Док.СтавкаНДС));
		//	Док.СуммаБезНДС = Док.СуммаСНДС - Док.НДС;
		//	Док.СуммаВВалютеБезНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Док.СуммаБезНДС,
		//	мВалютаРегламентированногоУчета,
		//	Док.ВалютаДокумента,
		//	1,
		//	Док.КурсДокумента,
		//	1,
		//	Док.КратностьДокумента);
		//	Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//	//Сообщить("В документ : "+Док.Ссылка +" добавлена запись");
		//	
		//КонецЦикла;
		// 1c-izhtc spawn 03.08.15 )
		
		//Выгрузим в таблицы признак о загрузке
		Если ЗначениеЗаполнено(СтрокаДляЗаписиПолученныхСтрока) Тогда 
			ТекстЗапросаДляВыгрузки = "
			|	UPDATE [dbo].[ExportDataTo1COrderTrans]
			|SET [ImportStatus]='1' WHERE " + СтрокаДляЗаписиПолученныхСтрока;
			ЗапросАДО = Новый COMОбъект("ADODB.Command");
			ЗапросАДО.CommandTimeout = 600;
			ЗапросАДО.ActiveConnection=СоединениеАДО; 	
			ЗапросАДО.CommandText=ТекстЗапросаДляВыгрузки; 
			
			Попытка                                                 
				РезультатЗагрузки = ЗапросАДО.Execute(); 
			Исключение	
			КонецПопытки;	  
		КонецЕсли;
		
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации("Загрузка РО из Аксапты",УровеньЖурналаРегистрации.Информация,,,"Окончание загрузки данных");

КонецПроцедуры

Процедура ПолучитьЗапрос(Запрос,База)
	
	Запрос = "
	|SELECT [RecNo]
	|,[Action]
	|,[ActionDate]
	|,[LinkID]
	|,[E1COrderId]
	|,[InitiatorFIO]
	|,[JournalNum]
	|,[CustVendName]
	|,[DocumentNum]
	|,[SourceDate]
	|,[RContractNumber]
	|,[LedgerRecId]
	|,[Voucher]
	|,[TransDate]
	|,[Dim1]
	|,[Dim3]
	|,[Dim4]
	|,[TaxValue]
	|,[AmountInclTax]
	|,[CurrencyCode]
	|,[IssuePeriod1C]
	|,[Dim1_1C]
	|,[Dim3_1C]
	|,[Dim4_1C]
	|,[AmountInclTax1C]
	|,[VendAccount]
	|,[CreatedDateTime]
	|FROM ["+База+"].[dbo].[ExportDataTo1COrderTrans]
	|where [Action] = '1' and [ImportStatus]= '0'";
	
КонецПроцедуры

Процедура ПолучитьЗапросДляСторно(Запрос,База)
	
	Запрос = "
	|SELECT   [RecNo]
	|,[Action]
	|,[LinkID]
	|FROM ["+База+"].[dbo].[ExportDataTo1COrderTrans]
	|where [Action] = '3' and [importstatus]='0' ";
	
КонецПроцедуры

Процедура ПолучитьЗапросДляAction2(Запрос,База)
	
	Запрос = "
	|SELECT distinct 
	|[Action]
	|,[RecNo] 
	|,[ActionDate]
	|,[LinkID]
	|,[E1COrderId]
	|,[InitiatorFIO]
	|,[JournalNum]
	|,[CustVendName]
	|,[DocumentNum]
	|,[SourceDate]
	|,[RContractNumber]
	|,[LedgerRecId]
	|,[Voucher]
	|,[TransDate]
	|,[Dim1]
	|,[Dim3]
	|,[Dim4]
	|,[TaxValue]
	|,[AmountInclTax]
	|,[CurrencyCode]
	|,[IssuePeriod1C]
	|,[Dim1_1C]
	|,[Dim3_1C]
	|,[Dim4_1C]
	|,[AmountInclTax1C]
	|,[VendAccount]
	|,[CreatedDateTime]
	|FROM ["+База+"].[dbo].[ExportDataTo1COrderTrans]
	|where [Action] = '2' and [importstatus]='0' ";
	
КонецПроцедуры

Процедура ПолучитьЗапросДляСозданиеНовогоДокументаAction2(Запрос,База,Условие)
	
	Запрос = "
	|	SELECT  [RecNo]
	|	  ,[Action]
	|	  ,[ActionDate]
	|	  ,[LinkID]
	|	  ,[E1COrderId]
	|	  ,[InitiatorFIO]
	|	  ,[JournalNum]
	|	  ,[CustVendName]
	|	  ,[DocumentNum]
	|	  ,[SourceDate]
	|	  ,[RContractNumber]
	|	  ,[LedgerRecId]
	|	  ,[Voucher]
	|	  ,[TransDate]
	|	  ,[Dim1]
	|	  ,[Dim3]
	|	  ,[Dim4]
	|	  ,[TaxValue]
	|	  ,[AmountInclTax]
	|	  ,[CurrencyCode]
	|	  ,[IssuePeriod1C]
	|	  ,[Dim1_1C]
	|	  ,[Dim3_1C]
	|	  ,[Dim4_1C]
	|	  ,[AmountInclTax1C]
	|	  ,[VendAccount]
	|	  ,[CreatedDateTime]
	|	  ,[ImportStatus]
	|  FROM ["+База+"].[dbo].[ExportDataTo1COrderTrans] where linkid='"+Условие+"'   and LedgerRecId not in ( select [LedgerRecId] from 

	|["+База+"].[dbo].[ExportDataTo1COrderTrans]  where  linkid='"+Условие+"' and Action=2)";
	
КонецПроцедуры

Функция ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка)
	рез=ложь;
	
	ЗапросАДО = Новый COMОбъект("ADODB.Command");
	ЗапросАДО.CommandTimeout = 600;
	ЗапросАДО.ActiveConnection=СоединениеАДО; 	
	ЗапросАДО.CommandText=Запрос; 
	Попытка
		Выборка = ЗапросАДО.Execute(); 		
		рез=Истина;
	Исключение 
		Сообщить("	Не удалось выполнить запрос!"+Символы.ПС+Строка(Запрос)+Символы.ПС+Строка(ОписаниеОшибки()));  		
	КонецПопытки; 
	
	возврат рез;  
КонецФункции

Функция FieldsСтруктура(fields)
	рез=новый Структура;
	Для каждого стр из fields
		Цикл
		
		рез.Вставить(стр.name,ЧислоВСтроку(стр.value));
		
	КонецЦикла;
	возврат рез;
КонецФункции

Функция ЧислоВСтроку(значение)
	
	рез=значение;
	
	Если ТипЗнч(значение)=Тип("Число") тогда
		рез = Формат(значение,"ЧГ=0");			
	КонецЕсли;	
	
	возврат рез;
КонецФункции

Функция ЗаписьВЦелевуюСтруктуру(fields,СоответствиеПолей)
	рез= новый Структура;
	Для каждого поле из СоответствиеПолей
		Цикл
		рез.Вставить(поле.Значение.Поле,fields[поле.Ключ]);
	КонецЦикла;   
	
	Возврат рез;
КонецФункции	

Функция  ПолучитьАналитикуПоКодуАксапты(КодАксапты)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_ок_СопоставлениеАналитики.Аналитика1С
	|ИЗ
	|	РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
	|ГДЕ
	|	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты = &КодАналитикиАксапты
	|	И бит_ок_СопоставлениеАналитики.Организация = &Организация";
	
	Запрос.УстановитьПараметр("КодАналитикиАксапты", КодАксапты);
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоКоду("000000045"));
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если  Выборка.Следующий() Тогда 
		Возврат Выборка.Аналитика1С;	
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция РассчитьСуммуБезНДС(СуммаСНДС,СтавкаНДС)
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
		
		Возврат СуммаСНДС/1.18;
	ИначеЕсли 	СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда  
		
		Возврат СуммаСНДС/1.2;
	ИначеЕсли 	СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда  	 
		Возврат СуммаСНДС/1.1;
	Иначе 
		Возврат СуммаСНДС;
	КонецЕсли;
КонецФункции

Функция ПолучитьСтавкуНДС(TaxValue);
	Если TaxValue = "18" Тогда 
		Возврат Перечисления.СтавкиНДС.НДС18 
	ИначеЕсли TaxValue = "10" Тогда 
		Возврат Перечисления.СтавкиНДС.НДС10
	ИначеЕсли TaxValue = "20" Тогда 
		Возврат Перечисления.СтавкиНДС.НДС20
	ИначеЕсли  TaxValue = "0" Тогда 
		Возврат Перечисления.СтавкиНДС.НДС0
	Иначе 
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьШапкуДокумента(Док,Строка)
	
	IdРазнесения = Строка.LinkID;
	НомерС4знаками = Лев(IdРазнесения,4);
	НомерС4ЗнакамиПосле = Прав(IdРазнесения,4);
	IdРазнесения = НомерС4знаками+"-"+ НомерС4ЗнакамиПосле;
	Док.ID_Разнесения = IdРазнесения;
	Док.Дата = ТекущаяДата(); 
	//Док.Номер = таб[Строка].DocumentNum;
	Док.Организация = Справочники.Организации.НайтиПоКоду("000000045");
	Док.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("НомДокИмпорт",Строка.VendAccount);
	Заявка = ПолучитьЗаявку(Строка.E1COrderId);
	Док.НомерЗаявки = Заявка;
	Док.Инициатор = Справочники.бит_БК_Инициаторы.НайтиПоНаименованию(Строка.InitiatorFIO);
	//Если Заявка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
	//	ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный
	//ИначеЕсли Заявка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Тогда 	
	//	ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный
	//КонецЕсли;
	
	Док.СБ_ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",Строка.RContractNumber,,Док.Контрагент);
	ДопТекстККомментарию = "";
	Если ЗначениеЗаполнено(Заявка) Тогда 
		ДопТекстККомментарию = Заявка.бит_БК_Цель;
	КонецЕсли;
	
	Док.Комментарий = "Выгрузка Axapta "+ДопТекстККомментарию;
	Док.Регион = Справочники.бит_БК_Регион.НайтиПоНаименованию("С-Западный");
	Док.ВалютаДокумента = Справочники.Валюты.НайтиПоНаименованию(Строка.CurrencyCode);
	СтавкаНДС=ПолучитьСтавкуНДС(Строка.TaxValue);				
	Док.СтавкаНДС = СтавкаНДС;
	Док.бит_Номер = Строка.DocumentNum;
	Док.бит_Дата =  Строка.SourceDate;
	Док.ВидДокумента = Справочники.бит_БК_ВидыДокументов.НайтиПоКоду("000000001");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("Валюта", Док.ВалютаДокумента);
	Запрос.УстановитьПараметр("ДатаДокумента", Док.Дата);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Док.КурсДокумента = ВыборкаДетальныеЗаписи.Курс;
		Док.КратностьДокумента = ВыборкаДетальныеЗаписи.Кратность;
		Док.ДатаКурсаДокумента = Док.Дата;
	КонецЕсли;;
	
КонецПроцедуры

Функция  ПолучитьЗаявку(НомерЗаявки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ФормаВводаБюджета.Ссылка
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	|ГДЕ
	|	бит_ФормаВводаБюджета.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", НомерЗаявки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Документы.бит_ФормаВводаБюджета.ПустаяСсылка();
	Иначе 
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат  ВыборкаДетальныеЗаписи.Ссылка;	
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьТабличныеЧастиДокумента(док,строка,СтавкаНДСДокумента,СуммаСНДСВсего,СтрокаДляЗаписиПолученныхСтрока,ДопЗапись = Ложь)
	
	СтрокаКонтроляБюджета = Док.КонтрольБюджета.Добавить();
	СтрокаКонтроляБюджета.Период =НачалоМесяца(Строка.IssuePeriod1C);
	СтрокаКонтроляБюджета.ПредставлениеПериодаРегистрации = Формат(СтрокаКонтроляБюджета.Период,"ДФ='ММММ гггг'"); 
	
	
	ОбъектСтроительства = ПолучитьАналитикуПоКодуАксапты(Строка.Dim1);
	
	Если ОбъектСтроительства <> Неопределено Тогда 
		СтрокаКонтроляБюджета.Аналитика_2 =  ОбъектСтроительства;
	КонецЕсли; 
	
	ЦФО = ПолучитьАналитикуПоКодуАксапты(строка.Dim4);
	
	Если ЦФО <> Неопределено Тогда 
		СтрокаКонтроляБюджета.ЦФО =  ЦФО;
	КонецЕсли; 
	
	СтатьяРег = ПолучитьАналитикуПоКодуАксапты(Строка.Dim3);
	
	Если СтатьяРег <> Неопределено Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов
		|ИЗ
		|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
		|ГДЕ
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл = &СтатьяРегл";
		
		Запрос.УстановитьПараметр("СтатьяРегл", СтатьяРег);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если  Выборка.Следующий() Тогда 
			СтрокаКонтроляБюджета.СтатьяОборотов = Выборка.СтатьяОборотов;
		КонецЕсли;
		
		Если СтрокаКонтроляБюджета.СтатьяОборотов.ВидСтатьи = Справочники.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность Тогда 
			ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный
		ИначеЕсли СтрокаКонтроляБюджета.СтатьяОборотов.ВидСтатьи = Справочники.бит_ВидыСтатейОборотов.Выручка Тогда 	
			ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный
		КонецЕсли;
		
		Док.ВидОперации = ВидОперации;
		
	КонецЕсли;
	
	Если  ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный Тогда 
		СтрокаКонтроляБюджета.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_Инвест
	ИначеЕсли 	ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный Тогда 
		Если ЗначениеЗаполнено(Док.НомерЗаявки) Тогда 
			СтрокаКонтроляБюджета.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_У
		Иначе 
			СтрокаКонтроляБюджета.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_А;
		КонецЕсли;
	КонецЕсли; 
	
	СтрокаКонтроляБюджета.НомерЗаявки = строка.E1COrderId;
	СтавкаНДССтроки = ПолучитьСтавкуНДС(Строка.TaxValue); 
	Если ДопЗапись Тогда 
		СтрокаКонтроляБюджета.СуммаСНДС = -Строка.AmountInclTax;
	Иначе 
		СтрокаКонтроляБюджета.СуммаСНДС = Строка.AmountInclTax;
	КонецЕсли;
	СтрокаКонтроляБюджета.СтавкаНДС = СтавкаНДССтроки;
	//СтрокаКонтроляБюджета.СуммаБезНДС=РассчитьСуммуБезНДС(СтрокаКонтроляБюджета.СуммаСНДС,СтавкаНДССтроки);
	СтрокаКонтроляБюджета.НДС = бит_ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаКонтроляБюджета.СуммаСНДС, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаКонтроляБюджета.СтавкаНДС));
	СтрокаКонтроляБюджета.СуммаБезНДС = СтрокаКонтроляБюджета.СуммаСНДС - СтрокаКонтроляБюджета.НДС;
	//СуммаВВалютеБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаКонтроляБюджета.СуммаБезНДС,
	//мВалютаРегламентированногоУчета,
	//Док.ВалютаДокумента,
	//1,
	//Док.КурсДокумента,
	//1,
	//Док.КратностьДокумента);
	
	СтрокаКонтроляБюджета.НДС = СтрокаКонтроляБюджета.СуммаСНДС-СтрокаКонтроляБюджета.СуммаБезНДС;
	
	СтрокаУправленческаяАналитика = Док.УправленческаяАналитика.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаУправленческаяАналитика,СтрокаКонтроляБюджета);
	СтрокаУправленческаяАналитика.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_УУ;
	
	СуммаСНДСВсего = СуммаСНДСВсего + СтрокаКонтроляБюджета.СуммаСНДС;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДляЗаписиПолученныхСтрока) Тогда 
		СтрокаДляЗаписиПолученныхСтрока = " [RecNo]="+Строка.RecNo;
	Иначе 
		СтрокаДляЗаписиПолученныхСтрока = СтрокаДляЗаписиПолученныхСтрока + " or [RecNo]="+Строка.RecNo; 
	КонецЕсли;
	Если СтавкаНДСДокумента <> СтавкаНДССтроки Тогда 
		Док.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
	КонецЕсли;
	

КонецПроцедуры

Процедура ПометитьНаУдалениеДокументы (ID_Разнесения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_БК_РазнесениеОборотов.Ссылка
		|ИЗ
		|	Документ.бит_БК_РазнесениеОборотов КАК бит_БК_РазнесениеОборотов
		|ГДЕ
		|	бит_БК_РазнесениеОборотов.ID_Разнесения в (&ID_Разнесения)";

		
	НомерС4знаками = Лев(ID_Разнесения,4);
	НомерС4ЗнакамиПосле = Прав(ID_Разнесения,4);
	IdРазнесенияСДефис = НомерС4знаками+"-"+ НомерС4ЗнакамиПосле;
	
	МассивID_Разнесения = Новый Массив;
	МассивID_Разнесения.Добавить(ID_Разнесения);
	МассивID_Разнесения.Добавить(IdРазнесенияСДефис);
	
	Запрос.УстановитьПараметр("ID_Разнесения", МассивID_Разнесения);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Док = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если Док.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		
		 
		Док.ПометкаУдаления = Истина;
		Если Док.Проведен Тогда 
			Док.Записать(РежимЗаписиДокумента.ОтменаПроведения)
		Иначе 
			Док.Записать();
		КонецЕсли;
		Сообщить("Документ" + Док.Ссылка + "  был помечен на удаление. Создан новый документ",СтатусСообщения.ОченьВажное); 		

    КонецЦикла;
	
КонецПроцедуры	

Процедура бит_ВыгрузкаДоговоровВAX() Экспорт
	 	
	Перем ТЗ;
	
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487)
	Возврат;
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
	
	ЗаписьЖурналаРегистрации("Выгрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Начало выгрузки договоров");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВариантЗагрузки.Значение КАК Источник
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ВариантЗагрузки
	|ГДЕ
	|	ВариантЗагрузки.ИмяНастройки = ""Источник загрузки""
	|	И ВариантЗагрузки.Группа = ""ПараметрыЗагрузкиАксапты""";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если Результат.Пустой() Тогда 
		ЗаписьЖурналаРегистрации("Выгрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Не указан источник загрузки");
		Возврат
	КонецЕсли;   	
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	ИсточникЗагрузки = ВыборкаДетальныеЗаписи.Источник;
	
	Отказ =Ложь;

	ПолучитьРеквизиты(ТЗ,Отказ);
	
	Если Отказ Тогда
		ЗаписьЖурналаРегистрации("Выгрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Отсутствуют данные для выгрузки");
		Возврат
	КонецЕсли;
	
	ВыборкаПоОрганизации = ТЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаДоговоров = Новый ТаблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("Договор");
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл 
		
		СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
		СоединениеАДО.ConnectionTimeOut = 100; 
				
		Если  ВыборкаПоОрганизации.Организация = Справочники.Организации.НайтиПоКоду("000000045") Тогда 
					
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресСервера.Значение КАК АдресСервера,
			|	БазаДанных.Значение КАК БазаДанных,
			|	ИмяПользователя.Значение КАК ИмяПользователя,
			|	Пароль.Значение КАК Пароль
			|ИЗ
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
			|ГДЕ
			|	АдресСервера.ИмяНастройки = ""АдресСервера""
			|	И БазаДанных.ИмяНастройки = ""БазаДанных""
			|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя""
			|	И Пароль.ИмяНастройки = ""Пароль""
			|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
			|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
			|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
			|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
			
			
		ИначеЕсли  ВыборкаПоОрганизации.Организация = Справочники.Организации.НайтиПоКоду("000000056") Тогда 		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресСервера.Значение КАК АдресСервера,
			|	БазаДанных.Значение КАК БазаДанных,
			|	ИмяПользователя.Значение КАК ИмяПользователя,
			|	Пароль.Значение КАК Пароль
			|ИЗ
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
			|ГДЕ
			|	АдресСервера.ИмяНастройки = ""АдресСервера Лоджистикс""
			|	И БазаДанных.ИмяНастройки = ""БазаДанных Лоджистикс""
			|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя Лоджистикс""
			|	И Пароль.ИмяНастройки = ""Пароль Лоджистикс""
			|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
			|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
			|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
			|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
			
		Иначе 
			Продолжить;
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий(); 
		Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
		ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
		Пароль = ВыборкаДетальныеЗаписи.Пароль;
		База = ВыборкаДетальныеЗаписи.БазаДанных;
		
		СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 
		
		Попытка
			СоединениеАДО.Open(СтрокаСоединения); 
		Исключение 
			ЗаписьЖурналаРегистрации("Выгрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Не удалось выполнить соединение с базой");
			Продолжить;
		КонецПопытки;
		
		ЗапросАДО = Новый COMОбъект("ADODB.Command");
		ЗапросАДО.ActiveConnection = СоединениеАДО; 
		
		ШапкаЗапросаSQL	= "INSERT INTO "+База+".[dbo].[ContractTable_IMP] (
		| [CODE1C]
		|,[RContractAccount]
		|,[ContractRecId]
		|,[CURRENCYCODE]
		|,[DIMENSION2]
		|,[CONTRACTPOSTINGPROGILE]
		|,[RCONTRACTCODE]
		|,[RContractPartnerType]
		|,[RCONTRACTNUMBER]
		|,[CONTRACTDATE]
		|,[CONTRACTSTARTDATE]
		|,[CONTRACTENDDATE]
		|,[RCONTRACTPARTNERCODE]
		|,[RContractPartnerCode1C]
		|,[RCONTRACTSTATUS]
		|,[RCONTRACTSUBJECT]
		|,[CONTRACTIDEXT]" +
		// ОКЕЙ Гиль А.В.(Софтлаб) Начало 03.10.2019 (#3497) 
		?(ВыборкаПоОрганизации.Организация <> Справочники.Организации.НайтиПоКоду("000000056"), Символы.ПС + ",[UE]", "") + "
		// ОКЕЙ Гиль А.В.(Софтлаб) Конец 03.10.2019 (#3497)
		|,[Source])
		|VALUES";
		
		ВыборкаПоШапке = ВыборкаПоОрганизации.Выбрать();
		
		Пока ВыборкаПоШапке.Следующий() Цикл 
			
			Если ИсточникЗагрузки = "AX" Тогда 
				
				//ОК+ Аверьянова 24.12.15 корректировка условия выгрузки для договора по материалам
				//Если ВыборкаПоШапке.НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.НайтиПоНаименованию("НЕУТВ") Тогда
				//	Продолжить;
				//КонецЕсли;
				Если ВыборкаПоШапке.НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.НайтиПоНаименованию("НЕУТВ") Тогда
					Если ВыборкаПоШапке.Владелец.бит_ГруппаПоставщиков = Перечисления.бит_ГруппаПоставщиков.ПМат И ВыборкаПоШапке.СБ_ПрофильРазноски = "60.01.02" Тогда
					Иначе	
						Продолжить;
					КонецЕсли;	
				КонецЕсли;
				//ОК-
				
			КонецЕсли;
			
			СтрокиЗначений="";
			КодДоговора = ВыборкаПоШапке.Код;
			ВалютаКод =  ВыборкаПоШапке.ВалютаРасчетов;
			СтатьяОборотов = Лев(ВыборкаПоШапке.КодАналитикиАксапты,20);   
		    ПрофильРазноски = Лев(ВыборкаПоШапке.СБ_ПрофильРазноски,10);                     
		    НаправлениеДоговора = Лев(ВыборкаПоШапке.НаправлениеДоговора,10);         
			ВидДоговора = ВыборкаПоШапке.ВидДоговора;            
			Номер =ВыборкаПоШапке.Номер;			
			НомерАХ =  ВыборкаПоШапке.НомерАХ;
			RecId =  ВыборкаПоШапке.RECID;
			Если  Не ЗначениеЗаполнено(ВыборкаПоШапке.Дата)Тогда 
				ДатаОт = Дата(1,1,1);
			Иначе 
				ДатаОт = Дата(ВыборкаПоШапке.Дата);
			КонецЕсли;
			От  = Формат(ДатаОт,"ДФ=yyyy-MM-dd");
			Если  Не ЗначениеЗаполнено(ВыборкаПоШапке.ДатаВозникновенияОбязательства)Тогда 
				ДатаВозникновения = Дата(1,1,1);
			Иначе 
				ДатаВозникновения = Дата(ВыборкаПоШапке.ДатаВозникновенияОбязательства);
			КонецЕсли;
			ДатаВозникновенияОбяз = Формат(ДатаВозникновения,"ДФ=yyyy-MM-dd");
			ВладелецКод = Лев(ВыборкаПоШапке.КодКонтрагента,9);
			//ДатаПогашенияОбяз =  Формат(ВыборкаПоШапке.ДатаПогашенияОбязательства,"ДЛФ=Д");
			Если Не ЗначениеЗаполнено(ВыборкаПоШапке.ДатаПогашенияОбязательства)Тогда 
				ДатаПогашения = Дата(1,1,1);
			Иначе 
				ДатаПогашения = Дата(ВыборкаПоШапке.ДатаПогашенияОбязательства);
			КонецЕсли;
			
			ДатаПогашенияОбяз =  Формат(ДатаПогашения,"ДФ=yyyy-MM-dd");
			ВладелецНомДокИмпорта = ВыборкаПоШапке.ВладелецКодАксапта;
			СтадияДоговора = ВыборкаПоШапке.СтадияДоговора;
			ПредметДоговора = ВыборкаПоШапке.бит_ПредметДоговора;
			ВнешнийКодКонтракта = ВыборкаПоШапке.бит_ВнешнийКодКонтракта;
			Иcточник = "1C";  
			// ОКЕЙ Гиль А.В.(Софтлаб) Начало 01.10.2019 (#3497) 
			ПересчетКурса = Число(ВыборкаПоШапке.ПересчетКурса);	
			// ОКЕЙ Гиль А.В.(Софтлаб) Конец 01.10.2019 (#3497)
			
			СтрокиЗначений = СтрокиЗначений + "
			|('"+ КодДоговора+
			"','"+НомерАХ+
			"','"+RecId+
			"','"+ВалютаКод+
			"','"+СтатьяОборотов+
			"','"+ПрофильРазноски+
			"','"+НаправлениеДоговора+
			"','"+ВидДоговора+
			"','"+Номер+
			"','"+От+
			"','"+ДатаВозникновенияОбяз+                  
			"','"+ДатаПогашенияОбяз+
			"','"+ВладелецНомДокИмпорта+
			"','"+ВладелецКод+
			"',"+СтадияДоговора +
			",'"+ПредметДоговора+
			"','"+ВнешнийКодКонтракта+
			// ОКЕЙ Гиль А.В.(Софтлаб) Начало 03.10.2019 (#3497) 
			?(ВыборкаПоОрганизации.Организация <> Справочники.Организации.НайтиПоКоду("000000056"), "','"+ПересчетКурса, "'") +
			// ОКЕЙ Гиль А.В.(Софтлаб) Конец 03.10.2019 (#3497)
			"','"+Иcточник+"'
			|)";	
			
			ЗапросАДО.CommandText =ШапкаЗапросаSQL + СтрокиЗначений;  
			
			Попытка
				РезультатЗагрузки = ЗапросАДО.Execute(); 
				СтрокиЗначений ="";
				НоваяСтрокаВТаблицеДоговоров = ТаблицаДоговоров.Добавить();
				НоваяСтрокаВТаблицеДоговоров.Договор = ВыборкаПоШапке.Ссылка;
			Исключение
				ЗаписьЖурналаРегистрации("Выгрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Не удалось выгрузить договор: "+ВыборкаПоШапке.Ссылка + ОписаниеОшибки() );
			    Продолжить;
			КонецПопытки;  			
			
		КонецЦикла; 		
		
		СоединениеАДО.Close();
		
	КонецЦикла;
	
	ТаблицаДоговоров.Свернуть("Договор");
	
	Если ТаблицаДоговоров.Количество()> 0 Тогда 
		
		Для Каждого Стр из ТаблицаДоговоров Цикл 
			УстановитьПривилегированныйРежим(Истина);
			Запись = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = Стр.Договор;
			Запись.Удалить();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЦикла;
		ЗаписьЖурналаРегистрации("Выгрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Выгружено "+ТаблицаДоговоров.Количество()+" договоров");
	Иначе 
		ЗаписьЖурналаРегистрации("Выгрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Выгружено 0 договоров");
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Выгрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Окончание выгрузки");

КонецПроцедуры

Процедура ПолучитьРеквизиты(ТЗ,Отказ)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_РегистрацияИзмененийОбъектов.Объект
	|ПОМЕСТИТЬ ВР_Договоры
	|ИЗ
	|	РегистрСведений.бит_РегистрацияИзмененийОбъектов КАК бит_РегистрацияИзмененийОбъектов
	|ГДЕ
	|	бит_РегистрацияИзмененийОбъектов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Код,
	|	ПОДСТРОКА(ДоговорыКонтрагентов.ВалютаВзаиморасчетов.Наименование, 1, 3) КАК ВалютаРасчетов,
	|	КодАксапты.КодАналитикиАксапты,
	|	ДоговорыКонтрагентов.СБ_ПрофильРазноски,
	|	ДоговорыКонтрагентов.бит_НаправлениеДоговора.Наименование КАК НаправлениеДоговора,
	|	ВЫБОР ДоговорыКонтрагентов.ВидДоговора
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ТОГДА 0
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)
	|			ТОГДА 2
	|	КОНЕЦ КАК ВидДоговора,
	|	ДоговорыКонтрагентов.Дата,
	|	ДоговорыКонтрагентов.Номер,
	|	ДоговорыКонтрагентов.ДатаВозникновенияОбязательства,
	|	ДоговорыКонтрагентов.ДатаПогашенияОбязательства,
	|	ДоговорыКонтрагентов.Владелец.Код КАК КодКонтрагента,
	|	ВЫБОР ДоговорыКонтрагентов.ВидДоговора
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ТОГДА ДоговорыКонтрагентов.Владелец.НомДокИмпорт
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДоговорыКонтрагентов.Владелец.НомДокИмпорт2
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)
	|			ТОГДА ДоговорыКонтрагентов.Владелец.НомДокИмпорт
	|	КОНЕЦ КАК ВладелецКодАксапта,
	|	ВЫБОР ДоговорыКонтрагентов.бит_СтадияДоговора
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Подготовка)
	|			ТОГДА 0
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Исполнение)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Закрыт)
	|			ТОГДА 2
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Замечания)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтадияДоговора,
	|	ДоговорыКонтрагентов.бит_ПредметДоговора,
	|	ДоговорыКонтрагентов.бит_ВнешнийКодКонтракта,
	|	ДоговорыКонтрагентов.бит_НомерАХ КАК НомерАХ,
	|	ДоговорыКонтрагентов.бит_RECID КАК RECID,
	|	ДоговорыКонтрагентов.Владелец КАК Владелец,
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 01.10.2019 (#3497) 
	//|	ДоговорыКонтрагентов.Организация КАК Организация
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.Ок_ПересчетКурса КАК ПересчетКурса
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 01.10.2019 (#3497)
	|ИЗ
	|	ВР_Договоры КАК ВР_Договоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СтатьиРегДДС.Ссылка КАК Ссылка,
	|				СопоставлениеАналитикиОтбор51счет.КодАналитикиАксапты КАК КодАналитикиАксапты
	|			ИЗ
	|				(ВЫБРАТЬ
	|					СтатьиБДДС.Ссылка КАК Ссылка,
	|					бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл КАК СтатьяРегл
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ДоговорыКонтрагентовбит_СтатьиОборотов.СтатьяОборотов КАК СтатьяОборотов,
	|						ДоговорыКонтрагентовбит_СтатьиОборотов.Ссылка КАК Ссылка
	|					ИЗ
	|						Справочник.ДоговорыКонтрагентов.бит_СтатьиОборотов КАК ДоговорыКонтрагентовбит_СтатьиОборотов
	|					ГДЕ
	|						ДоговорыКонтрагентовбит_СтатьиОборотов.СтатьяОборотов.ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДДС)) КАК СтатьиБДДС
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	|						ПО СтатьиБДДС.СтатьяОборотов = бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов) КАК СтатьиРегДДС
	|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						бит_ок_СопоставлениеАналитики.СчетАксапты КАК СчетАксапты,
	|						бит_ок_СопоставлениеАналитики.КодАналитикиАксапты КАК КодАналитикиАксапты,
	|						бит_ок_СопоставлениеАналитики.Организация КАК Организация,
	|						бит_ок_СопоставлениеАналитики.Аналитика1С КАК Аналитика1С,
	|						бит_ок_СопоставлениеАналитики.Тип1С КАК Тип1С
	|					ИЗ
	|						РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
	|					ГДЕ
	|						бит_ок_СопоставлениеАналитики.СчетАксапты = ""51"") КАК СопоставлениеАналитикиОтбор51счет
	|					ПО СтатьиРегДДС.Ссылка.Организация = СопоставлениеАналитикиОтбор51счет.Организация
	|						И СтатьиРегДДС.СтатьяРегл = СопоставлениеАналитикиОтбор51счет.Аналитика1С) КАК КодАксапты
	|			ПО (КодАксапты.Ссылка = ДоговорыКонтрагентов.Ссылка)
	|		ПО ВР_Договоры.Объект = ДоговорыКонтрагентов.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Ссылка)
	|ПО
	|	Организация
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Рез = Запрос.Выполнить();

	Если Рез.Пустой() Тогда 
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	ТЗ = Рез;
	
КонецПроцедуры

Процедура бит_ВыгрузкаКонтрагентов() Экспорт
	
	Перем ТЗ;
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487)
	Возврат;
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
	
	ЗаписьЖурналаРегистрации("Выгрузка контрагентов",УровеньЖурналаРегистрации.Информация,,,"Начало выгрузки контрагентов");

	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
	СоединениеАДО.ConnectionTimeOut = 600; 
	СоединениеАДО.CommandTimeOut = 600; 
	СоединениеАДО.CursorLocation = 3; 
	
	Отказ = Ложь;	
	ПолучитьВыборкуПоКонтрагентам(ТЗ,Отказ);
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	ЗапросАДО = Новый COMОбъект("ADODB.Command");
	//ЗапросАДО.ActiveConnection = СоединениеАДО; 
	Выборка = ТЗ.Выбрать();
	СтрокиЗначений="";
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("000000045"));
	МассивОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("000000056"));
	
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Контрагент");

	Для Каждого Организация из МассивОрганизаций Цикл 
		
		Если  Организация = Справочники.Организации.НайтиПоКоду("000000045") Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресСервера.Значение КАК АдресСервера,
			|	БазаДанных.Значение КАК БазаДанных,
			|	ИмяПользователя.Значение КАК ИмяПользователя,
			|	Пароль.Значение КАК Пароль
			|ИЗ
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
			|ГДЕ
			|	АдресСервера.ИмяНастройки = ""АдресСервера""
			|	И БазаДанных.ИмяНастройки = ""БазаДанных""
			|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя""
			|	И Пароль.ИмяНастройки = ""Пароль""
			|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
			|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
			|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
			|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий(); 
			Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
			ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
			Пароль = ВыборкаДетальныеЗаписи.Пароль;
			База = ВыборкаДетальныеЗаписи.БазаДанных;
			
			СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 
			
		ИначеЕсли  Организация = Справочники.Организации.НайтиПоКоду("000000056") Тогда 		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресСервера.Значение КАК АдресСервера,
			|	БазаДанных.Значение КАК БазаДанных,
			|	ИмяПользователя.Значение КАК ИмяПользователя,
			|	Пароль.Значение КАК Пароль
			|ИЗ
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
			|ГДЕ
			|	АдресСервера.ИмяНастройки = ""АдресСервера Лоджистикс""
			|	И БазаДанных.ИмяНастройки = ""БазаДанных Лоджистикс""
			|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя Лоджистикс""
			|	И Пароль.ИмяНастройки = ""Пароль Лоджистикс""
			|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
			|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
			|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
			|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий(); 
			Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
			ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
			Пароль = ВыборкаДетальныеЗаписи.Пароль;
			База = ВыборкаДетальныеЗаписи.БазаДанных;
			
			СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 
		КонецЕсли;
		
		Попытка
			СоединениеАДО.Open(СтрокаСоединения); 
			//Сообщить("Соединение с базой установлено");
		Исключение 
			Продолжить;
		КонецПопытки;
		
		ЗапросАДО.ActiveConnection = СоединениеАДО;			
		
		Пока Выборка.Следующий() Цикл 
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Владелец
			|	И ДоговорыКонтрагентов.Организация = &Организация";
			
			Запрос.УстановитьПараметр("Владелец", Выборка.Ссылка);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда 
				Продолжить;
			КонецЕсли;
			
			ШапкаЗапросаSQLПоДоКонтрагентам	= "Insert into ["+База+"].[dbo].[CustVendTable_IMP] (
			|[CODE1C]
			|,[VendNum]
			|,[CustNum]
			|,[NAMEALIAS]
			|,[NAME]
			|,[ADDRESS]
			|,[INN]
			|,[KPP]
			|,[PHONE]
			|,[TELEFAX]
			|,[EMAILFINANCE]
			|,[EMAILPURCHORDER]
			|,[ACCOUNTSTATUS1C]
			|,[CodeSS]
			|,[Source]
			|,[VENDGroup]
			|,[CustGroup]
			|,[DATEMODNAME]
			//|,[DateModNameAlias]
			|,[DATEMODALIASNAME]
			|,[DATEMODINN]
			|,[DATEMODKPP]
			|,[DATEMODADDRESS]
			|,[OrganizationType])
			|VALUES";
			
			ВыгрузитьВSQL(ШапкаЗапросаSQLПоДоКонтрагентам,Выборка,ЗапросАДО,ТаблицаКонтрагентов);
			
		КонецЦикла;
		Выборка.Сбросить();
		СоединениеАДО.Close();
	КонецЦикла;

    ТаблицаКонтрагентов.Свернуть("Контрагент");
	
	Если ТаблицаКонтрагентов.Количество()> 0 Тогда 
		
		Для Каждого Стр из ТаблицаКонтрагентов Цикл 
			УстановитьПривилегированныйРежим(Истина);
			Запись = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = Стр.Контрагент;
			Запись.Удалить();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЦикла;
		
	КонецЕсли;

	ЗаписьЖурналаРегистрации("Выгрузка контрагентов",УровеньЖурналаРегистрации.Информация,,,"Окончание выгрузки контрагентов");
	
КонецПроцедуры

Процедура ПолучитьВыборкуПоКонтрагентам(ТЗ,Отказ)
	
    Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Код,
	|	Контрагенты.НомДокИмпорт,
	|	Контрагенты.НомДокИмпорт2,
	|	Контрагенты.Наименование,
	|	Контрагенты.НаименованиеПолное,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	ТабКонтактнаяИнформация.Адрес,
	|	ТабКонтактнаяИнформация.Телефон,
	|	ВЫБОР Контрагенты.бит_Статус
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.Проверено)
	|			ТОГДА 0
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.Рабочий)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе)
	|			ТОГДА 2
	|	КОНЕЦ КАК Статус,
	|	""1C"" КАК Источник,
	|	ТабКонтактнаяИнформация.ЭлАдресБух,
	|	ТабКонтактнаяИнформация.ЭлАдресЗаказ,
	|	Контрагенты.Ссылка,
	|	ТабКонтактнаяИнформация.Факс,
	|	Контрагенты.бит_ГруппаПоставщиков.Ссылка КАК ГруппаПоставщиков,
	|	Контрагенты.бит_ГруппаКлиентов.Ссылка КАК ГруппаКлиентов,
	|	Контрагенты.бит_ВнешнийКодSoftSolution,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮрФизЛицо
	|ПОМЕСТИТЬ ВР_ДанныеПоКонтрагенту
	|ИЗ
	|	РегистрСведений.бит_РегистрацияИзмененийОбъектов КАК бит_РегистрацияИзмененийОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				КонтактнаяИнформация.Объект КАК Объект,
	|				КонтактнаяИнформация.Адрес КАК Адрес,
	|				КонтактнаяИнформация.Телефон КАК Телефон,
	|				КонтактнаяИнформация.ЭлАдресБух КАК ЭлАдресБух,
	|				КонтактнаяИнформация.ЭлАдресЗаказ КАК ЭлАдресЗаказ,
	|				КонтактнаяИнформация.Факс КАК Факс
	|			ИЗ
	|				(ВЫБРАТЬ
	|					КИ.Объект КАК Объект,
	|					МАКСИМУМ(КИ.Адрес) КАК Адрес,
	|					МАКСИМУМ(КИ.Телефон) КАК Телефон,
	|					МАКСИМУМ(КИ.ЭлАдресБух) КАК ЭлАдресБух,
	|					МАКСИМУМ(КИ.ЭлАдресЗаказ) КАК ЭлАдресЗаказ,
	|					МАКСИМУМ(КИ.Факс) КАК Факс
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ВЫРАЗИТЬ(Адрес.Представление КАК СТРОКА(250)) КАК Адрес,
	|						Адрес.Ссылка КАК Объект,
	|						NULL КАК Телефон,
	|						NULL КАК ЭлАдресБух,
	|						NULL КАК ЭлАдресЗаказ,
	|						NULL КАК Факс
	|					ИЗ
	|						Справочник.Контрагенты.КонтактнаяИнформация КАК Адрес
	|					ГДЕ
	|						Адрес.Тип = &ТипАдрес
	|						И Адрес.Вид = &ВидАдрес
	|					
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						NULL,
	|						Телефон.Ссылка,
	|						ВЫРАЗИТЬ(Телефон.Представление КАК СТРОКА(20)),
	|						NULL,
	|						NULL,
	|						NULL
	|					ИЗ
	|						Справочник.Контрагенты.КонтактнаяИнформация КАК Телефон
	|					ГДЕ
	|						Телефон.Тип = &ТипТелефон
	|						И Телефон.Вид = &ВидТелефон
	|					
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						NULL,
	|						ЭлПочтаБух.Ссылка,
	|						NULL,
	|						ВЫРАЗИТЬ(ЭлПочтаБух.Представление КАК СТРОКА(150)),
	|						NULL,
	|						NULL
	|					ИЗ
	|						Справочник.Контрагенты.КонтактнаяИнформация КАК ЭлПочтаБух
	|					ГДЕ
	|						ЭлПочтаБух.Тип = &ТипЭлПочта
	|						И ЭлПочтаБух.Вид = &ВидЭлПочтаБух
	|					
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						NULL,
	|						ЭлПочтаЗаказ.Ссылка,
	|						NULL,
	|						NULL,
	|						ВЫРАЗИТЬ(ЭлПочтаЗаказ.Представление КАК СТРОКА(150)),
	|						NULL
	|					ИЗ
	|						Справочник.Контрагенты.КонтактнаяИнформация КАК ЭлПочтаЗаказ
	|					ГДЕ
	|						ЭлПочтаЗаказ.Тип = &ТипЭлПочта
	|						И ЭлПочтаЗаказ.Вид = &ВидЭлПочтаЗаказ
	|					
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						NULL,
	|						КонтактнаяИнформация.Ссылка,
	|						NULL,
	|						NULL,
	|						NULL,
	|						ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(20))
	|					ИЗ
	|						Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
	|					ГДЕ
	|						КонтактнаяИнформация.Тип = &ТипТелефон
	|						И КонтактнаяИнформация.Вид = &ВидФакс) КАК КИ
	|				
	|				СГРУППИРОВАТЬ ПО
	|					КИ.Объект) КАК КонтактнаяИнформация) КАК ТабКонтактнаяИнформация
	|			ПО Контрагенты.Ссылка = ТабКонтактнаяИнформация.Объект
	|		ПО бит_РегистрацияИзмененийОбъектов.Объект = Контрагенты.Ссылка
	|ГДЕ
	|	бит_РегистрацияИзмененийОбъектов.Объект ССЫЛКА Справочник.Контрагенты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаНаименование,
	|	бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаНаименованиеПолное,
	|	бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаЮридическийАдрес,
	|	бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаИНН,
	|	бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаКПП,
	|	ВР_ДанныеПоКонтрагенту.Код,
	|	ВР_ДанныеПоКонтрагенту.НомДокИмпорт,
	|	ВР_ДанныеПоКонтрагенту.НомДокИмпорт2,
	|	ВР_ДанныеПоКонтрагенту.Наименование,
	|	ВР_ДанныеПоКонтрагенту.НаименованиеПолное,
	|	ВР_ДанныеПоКонтрагенту.ИНН,
	|	ВР_ДанныеПоКонтрагенту.КПП,
	|	ВР_ДанныеПоКонтрагенту.Адрес,
	|	ВР_ДанныеПоКонтрагенту.Телефон,
	|	ВР_ДанныеПоКонтрагенту.Статус,
	|	ВР_ДанныеПоКонтрагенту.Источник,
	|	ВР_ДанныеПоКонтрагенту.ЭлАдресБух,
	|	ВР_ДанныеПоКонтрагенту.ЭлАдресЗаказ,
	|	ВР_ДанныеПоКонтрагенту.Ссылка,
	|	ВР_ДанныеПоКонтрагенту.Факс,
	|	ВР_ДанныеПоКонтрагенту.ГруппаПоставщиков,
	|	ВР_ДанныеПоКонтрагенту.ГруппаКлиентов,
	|	ВР_ДанныеПоКонтрагенту.бит_ВнешнийКодSoftSolution КАК ВнешнийКодSoftSolution,
	|	ВР_ДанныеПоКонтрагенту.ЮрФизЛицо
	|ИЗ
	|	ВР_ДанныеПоКонтрагенту КАК ВР_ДанныеПоКонтрагенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ИсторияИзмененияРеквизитовКонтрагентов.СрезПоследних(
	|				,
	|				Контрагент В
	|					(ВЫБРАТЬ
	|						ВР_ДанныеПоКонтрагенту.Ссылка
	|					ИЗ
	|						ВР_ДанныеПоКонтрагенту КАК ВР_ДанныеПоКонтрагенту)) КАК бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних
	|		ПО ВР_ДанныеПоКонтрагенту.Ссылка = бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.Контрагент";
	
	
	Запрос.УстановитьПараметр("ТипАдрес",Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидАдрес", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("ТипТелефон",Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ВидТелефон",Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Запрос.УстановитьПараметр("ВидФакс",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00033"));
	Запрос.УстановитьПараметр("ТипЭлПочта",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	//ОК+ Аверьянова 18.12.15   перепутаны полля при выгрузке
    //Запрос.УстановитьПараметр("ВидЭлПочтаЗаказ",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00034"));
    //Запрос.УстановитьПараметр("ВидЭлПочтаБух",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00035"));
	Запрос.УстановитьПараметр("ВидЭлПочтаЗаказ",Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Заявка"));
	Запрос.УстановитьПараметр("ВидЭлПочтаБух",Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Бухгалтерия"));
    //ОК-

	
	Рез = Запрос.Выполнить();

	Если Рез.Пустой() Тогда 
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
		
	ТЗ = Рез;
	
	
КонецПроцедуры

Процедура ВыгрузитьВSQL(ШапкаЗапросаSQLПоДоКонтрагентам,Выборка,ЗапросАДО,ТаблицаКонтрагентов)
	
	    Код = Выборка.Код;
		Наименование =  СтрЗаменить(Выборка.Наименование,"'","''");
		//ОК+ Аверьянова 23.06.15 - обрежем наименование, т.к. длина в таблице ограничена - 140 символов
		//ПолноеНаименование =  СтрЗаменить(Выборка.НаименованиеПолное,"'","''");
		ПолнНаим = Лев(Выборка.НаименованиеПолное,140);
		ПолноеНаименование =  СтрЗаменить(ПолнНаим,"'","''");
		//ОК- Аверьянова 23.06.15
		ЮридическийАдрес =  СтрЗаменить(Выборка.Адрес,"'","''");
		ИНН =   Выборка.ИНН;
		КПП =   Выборка.КПП;
		Телефон = Выборка.Телефон;
		Факс = Выборка.Факс; 
		ЭлПочатБух = Выборка.ЭлАдресБух;
		ЭлПочтаЗаказ = Выборка.ЭлАдресЗаказ;
		Статус= Выборка.Статус;
		НомДокИмпорт = Выборка.НомДокИмпорт;
		НомДокИмпорт2 = Выборка.НомДокИмпорт2;
		ВнешнийКод = СтрЗаменить(Выборка.ВнешнийКодSoftSolution,"'","''");
		Источник =  СтрЗаменить(Выборка.Источник,"'","''");
		Если ЗначениеЗаполнено(Выборка.ГруппаПоставщиков) Тогда 
			ЗначениеПеречисления = Выборка.ГруппаПоставщиков;
			ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
			ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
			ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		Иначе 
		    ИмяЗначенияПеречисления = "";
		КонецЕсли;
		
			
		ГруппаПоставщиков = ИмяЗначенияПеречисления ;
		Если ЗначениеЗаполнено(Выборка.ГруппаКлиентов) Тогда 

			ЗначениеПеречисления = Выборка.ГруппаКлиентов;
			ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
			ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
			ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		Иначе 
			ИмяЗначенияПеречисления = "";
		КонецЕсли;
		

		ГруппаКлиентов =  ИмяЗначенияПеречисления ;
		ДатаНаименования = Формат(Выборка.ДатаНаименование,"ДФ=yyyy-MM-dd");
		ДатаНаименованиеПолное = Формат(Выборка.ДатаНаименованиеПолное,"ДФ=yyyy-MM-dd"); 
		ДатаИНН =Формат(Выборка.ДатаИНН,"ДФ=yyyy-MM-dd"); 
		ДатаКПП = Формат(Выборка. ДатаКПП,"ДФ=yyyy-MM-dd");
		ДатаАдреса = Формат(Выборка.ДатаЮридическийАдрес,"ДФ=yyyy-MM-dd");
		
		Если Выборка.ЮрФизЛицо =Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда 
			ТипОрганизации = 0;
		ИначеЕсли Выборка.ЮрФизЛицо =Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда  
			ТипОрганизации = 1;
		Иначе 
			ТипОрганизации = 2;
		КонецЕсли;
		
		
		СтрокиЗначений =ШапкаЗапросаSQLПоДоКонтрагентам+ "
		     
			    |('"+Код+"'
				|,'"+НомДокИмпорт +"'
				|,'"+НомДокИмпорт2 +"'
			    |,'"+Наименование+"' 
			    |,'"+ПолноеНаименование+"' 
			    |,'"+ЮридическийАдрес+"' 
			    |,'"+ИНН+"' 
			    |,'"+КПП+"' 
			    |,'"+Телефон+"'
			    |,'"+Факс+"'
			    |,'"+ЭлПочатБух+"'
			    |,'"+ЭлПочтаЗаказ+"'
			    |,'"+Статус+"'
			    |,'"+ВнешнийКод+"'
			    |,'"+Источник+"'
			    |,'"+ГруппаПоставщиков+"'
			    |,'"+ГруппаКлиентов+"'
			    |,'"+ДатаНаименования+"'
			    |,'"+ДатаНаименованиеПолное+"'
			    |,'"+ДатаИНН+"'
			    |,'"+ДатаКПП+"'
			    |,'"+ДатаАдреса+"'
				|,'"+ТипОрганизации+"')"; 
			  

			ЗапросАДО.CommandText = СтрокиЗначений;
			Попытка                                                 
				РезультатЗагрузки = ЗапросАДО.Execute(); 
				СтрокиЗначений ="";
				//Запись = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
				//Запись.Объект = Выборка.Ссылка;
				//Запись.Удалить();
				НоваяСтрокаВТаблицеКонтрагентов = ТаблицаКонтрагентов.Добавить();
				НоваяСтрокаВТаблицеКонтрагентов.Контрагент = Выборка.Ссылка;

			Исключение
			   ЗаписьЖурналаРегистрации("Выгрузка контрагентов",УровеньЖурналаРегистрации.Информация,,,"Не удалось выгрузить контрагента "+Выборка.Ссылка+ ОписаниеОшибки());	
			КонецПопытки;

КонецПроцедуры

Процедура бит_ЗагрузкаКонтрагентов() Экспорт
	
	Перем Выборка;
	
	ЗаписьЖурналаРегистрации("Загрузка контрагентов",УровеньЖурналаРегистрации.Информация,,,"Начало загрузки контрагентов");
	
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
	СоединениеАДО.ConnectionTimeOut = 600; 
	СоединениеАДО.CommandTimeOut = 600; 
	СоединениеАДО.CursorLocation = 3; 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВариантЗагрузки.Значение КАК Источник
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ВариантЗагрузки
	|ГДЕ
	|	ВариантЗагрузки.ИмяНастройки = ""Источник загрузки""
	|	И ВариантЗагрузки.Группа = ""ПараметрыЗагрузкиАксапты""";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	ИсточникЗагрузки = ВыборкаДетальныеЗаписи.Источник;
	
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487)
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("000000045"));
	МассивОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("000000056"));
	
	Организация_ОкейЛоджистикс 	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Лоджистикс");
	Организация_Окей 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
	
	Для Каждого Организация Из МассивОрганизаций Цикл  
		
		Если  Организация = Справочники.Организации.НайтиПоКоду("000000045") Тогда
			
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресСервера.Значение КАК АдресСервера,
			|	БазаДанных.Значение КАК БазаДанных,
			|	ИмяПользователя.Значение КАК ИмяПользователя,
			|	Пароль.Значение КАК Пароль,
			|	ПапкаПоискаКонтрагентов.Значение КАК ПапкаПоискаКонтрагентов
			|ИЗ
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ПапкаПоискаКонтрагентов
			|ГДЕ
			|	АдресСервера.ИмяНастройки = ""АдресСервера""
			|	И БазаДанных.ИмяНастройки = ""БазаДанных""
			|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя""
			|	И Пароль.ИмяНастройки = ""Пароль""
			|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
			|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
			|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
			|	И Пароль.Группа = ""ПараметрыСоединенияSQL""
			|	И ПапкаПоискаКонтрагентов.Группа = ""Предопределенные группы""
			|	И ПапкаПоискаКонтрагентов.ИмяНастройки = ""Группа контрагентов Поставщики""";

			
			
		ИначеЕсли  Организация = Справочники.Организации.НайтиПоКоду("000000056") Тогда 		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресСервера.Значение КАК АдресСервера,
			|	БазаДанных.Значение КАК БазаДанных,
			|	ИмяПользователя.Значение КАК ИмяПользователя,
			|	Пароль.Значение КАК Пароль,
			|	ПапкаПоискаКонтрагентов.Значение КАК ПапкаПоискаКонтрагентов
			|ИЗ
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ПапкаПоискаКонтрагентов
			|ГДЕ
			|	АдресСервера.ИмяНастройки = ""АдресСервера Лоджистикс""
			|	И БазаДанных.ИмяНастройки = ""БазаДанных Лоджистикс""
			|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя Лоджистикс""
			|	И Пароль.ИмяНастройки = ""Пароль Лоджистикс""
			|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
			|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
			|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
			|	И Пароль.Группа = ""ПараметрыСоединенияSQL""
			|	И ПапкаПоискаКонтрагентов.Группа = ""Предопределенные группы""
			|	И ПапкаПоискаКонтрагентов.ИмяНастройки = ""Группа контрагентов Поставщики Лоджистикс""";			
			
		КонецЕсли;
		
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий(); 
		Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
		ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
		Пароль = ВыборкаДетальныеЗаписи.Пароль;
		База = ВыборкаДетальныеЗаписи.БазаДанных;
		ПапкаПоискаКонтрагентов =ВыборкаДетальныеЗаписи.ПапкаПоискаКонтрагентов;
		
		СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 
		
		
		Попытка
			СоединениеАДО.Open(СтрокаСоединения);			
		Исключение 
			ЗаписьЖурналаРегистрации("Загрузка контрагентов",УровеньЖурналаРегистрации.Информация,,,"Не удалось выполнить соединение с базой "+ОписаниеОшибки()); 			 
			Продолжить;
		КонецПопытки;
		
		
		Запрос = "";
		
		ПолучитьЗапросДдяЗагрузкиКонтрагентов(Запрос,База);
		
		
		ЗапросВыполенен = ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка);
		
		Если НЕ ЗапросВыполенен Тогда
			ЗаписьЖурналаРегистрации("Загрузка контрагентов",УровеньЖурналаРегистрации.Информация,,,"Нет данных для загрузки по Организации "+Организация); 			 
			СоединениеАДО.Close();
			Продолжить;
		КонецЕсли;
		
		таб = Новый ТаблицаЗначений;
		
		таб.Колонки.Добавить("CODE1C");
		таб.Колонки.Добавить("VENDNUM");
		таб.Колонки.Добавить("CUSTNUM");
		таб.Колонки.Добавить("NAMEALIAS");
		таб.Колонки.Добавить("NAME");
		таб.Колонки.Добавить("Address");
		таб.Колонки.Добавить("INN");
		таб.Колонки.Добавить("KPP");
		таб.Колонки.Добавить("PHONE");
		таб.Колонки.Добавить("TELEFAX");
		таб.Колонки.Добавить("EMAILFINANCE");
		таб.Колонки.Добавить("EMAILPURCHORDER");
		таб.Колонки.Добавить("ACCOUNTSTATUS1C");
		таб.Колонки.Добавить("BLOCKED");
		таб.Колонки.Добавить("CLOSED");
		таб.Колонки.Добавить("FINANCEMANAGERBLOCKED");
		таб.Колонки.Добавить("BLOCKEDPAYMENTORDER");
		таб.Колонки.Добавить("CodeSS");
		таб.Колонки.Добавить("Source");
		таб.Колонки.Добавить("VENDGroup");
		таб.Колонки.Добавить("CustGroup");
		таб.Колонки.Добавить("DATEMODNAME");
		таб.Колонки.Добавить("DATEMODALIASNAME");
		таб.Колонки.Добавить("DATEMODINN");
		таб.Колонки.Добавить("DATEMODKPP");
		таб.Колонки.Добавить("DATEMODADDRESS");
		таб.Колонки.Добавить("MODIFIEDDATE");
		таб.Колонки.Добавить("OrganizationType");
		таб.Колонки.Добавить("RecId");  
		
		Пока Не Выборка.EOF() Цикл 
			fields=FieldsСтруктура(Выборка.Fields);
			нов=таб.Добавить();
			ЗаполнитьЗначенияСвойств(нов,fields);	
			Выборка.MoveNext(); 
		КонецЦикла;	
		
		Для Каждого Строка Из  таб Цикл 
			
			Попытка
				ГруппаКлиентов = Перечисления.бит_ГруппаКлиентов[Строка.CustGroup];
			Исключение
				ГруппаКлиентов = "";
			КонецПопытки;
			
			Попытка
				ГруппаПоставщиков = Перечисления.бит_ГруппаПоставщиков[Строка.VENDGroup];
			Исключение
				ГруппаПоставщиков ="";
			КонецПопытки;

			
			Если ЗначениеЗаполнено(Строка.CODE1C) Тогда 
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.Родитель В ИЕРАРХИИ(&Родитель)
				|	И НЕ Контрагенты.ЭтоГруппа
				|	И Контрагенты.Код = &Код";
				
				Запрос.УстановитьПараметр("Родитель", ПапкаПоискаКонтрагентов);
				Запрос.УстановитьПараметр("Код", Строка.CODE1C);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
					КонтрагентСсылка = ВыборкаДетальныеЗаписи.ссылка;
				Иначе 
					КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
				КонецЕсли;

				//КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(Строка.CODE1C);
				
				Если Не ЗначениеЗаполнено(КонтрагентСсылка) Тогда 
					Продолжить;
				КонецЕсли;
				
				КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
				КонтрагентОбъект.НомДокИмпорт = Строка.VENDNUM;
				КонтрагентОбъект.НомДокИмпорт2 = Строка.CUSTNUM;
				Если ЗначениеЗаполнено(ГруппаКлиентов) Тогда 
					КонтрагентОбъект.бит_ГруппаКлиентов = ГруппаКлиентов;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ГруппаПоставщиков) Тогда 
					КонтрагентОбъект.бит_ГруппаПоставщиков= ГруппаПоставщиков;
				КонецЕсли;

				//Изменение по статусам
				
				// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487) 
				Если Строка.BLOCKED = "2" Тогда
					
					КонтрагентОбъект.бит_Статус = Перечисления.бит_СтатусыПоставщиковAX.БлокированоВсе;
					
					НоваяСтрокаИстории = Неопределено;
					
					Если КонтрагентОбъект.ок_ИсторияСтатусов.Количество() Тогда
						
						ПоследняяСтрока = КонтрагентОбъект.ок_ИсторияСтатусов[КонтрагентОбъект.ок_ИсторияСтатусов.Количество()-1];
						
						Если НЕ ПоследняяСтрока.Статус = КонтрагентОбъект.бит_Статус Тогда
							НоваяСтрокаИстории = КонтрагентОбъект.ок_ИсторияСтатусов.Добавить();	
						КонецЕсли;
						
					Иначе
						
						НоваяСтрокаИстории = КонтрагентОбъект.ок_ИсторияСтатусов.Добавить();	
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НоваяСтрокаИстории) Тогда
						НоваяСтрокаИстории.Период = ТекущаяДата();	
						НоваяСтрокаИстории.Статус = КонтрагентОбъект.бит_Статус;	
						НоваяСтрокаИстории.Ответственный = Пользователи.АвторизованныйПользователь();	
						НоваяСтрокаИстории.Описание = "Загружено из АХ";	
					КонецЕсли;
					
				КонецЕсли;	
				// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
				
				
				Если  Строка.CLOSED = "1" Тогда 
					
					ВыборкаДетальныеЗаписи = ПолуичтьДоговораКонтрагента(КонтрагентОбъект.Ссылка,Организация);
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Если ВыборкаДетальныеЗаписи.Ссылка.бит_СтадияДоговора <> Перечисления.бит_ВидыСтадийДоговоров.Закрыт Тогда 
							ДогОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
							ДогОбъект.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Закрыт;
							ДогОбъект.Записать();
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;	
				
				Если Строка.BLOCKEDPAYMENTORDER = "1" Тогда 
					
					ВыборкаДетальныеЗаписи = ПолуичтьДоговораКонтрагента(КонтрагентОбъект.Ссылка,Организация);	
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Если ВыборкаДетальныеЗаписи.Ссылка.бит_СтадияДоговора <> Перечисления.бит_ВидыСтадийДоговоров.Замечания Тогда 
							ДогОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
							ДогОбъект.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Замечания;
							ДогОбъект.Записать();
						КонецЕсли;
						
					КонецЦикла;
					
					// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487) 
					КонтрагентОбъект.бит_Статус = Перечисления.бит_СтатусыПоставщиковAX.БлокированыОплаты;
					
					НоваяСтрокаИстории = Неопределено;
					
					Если КонтрагентОбъект.ок_ИсторияСтатусов.Количество() Тогда
						
						ПоследняяСтрока = КонтрагентОбъект.ок_ИсторияСтатусов[КонтрагентОбъект.ок_ИсторияСтатусов.Количество()-1];
						
						Если НЕ ПоследняяСтрока.Статус = КонтрагентОбъект.бит_Статус Тогда
							НоваяСтрокаИстории = КонтрагентОбъект.ок_ИсторияСтатусов.Добавить();	
						КонецЕсли;
						
					Иначе
						
						НоваяСтрокаИстории = КонтрагентОбъект.ок_ИсторияСтатусов.Добавить();	
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НоваяСтрокаИстории) Тогда
						НоваяСтрокаИстории.Период = ТекущаяДата();	
						НоваяСтрокаИстории.Статус = КонтрагентОбъект.бит_Статус;	
						НоваяСтрокаИстории.Ответственный = Пользователи.АвторизованныйПользователь();	
						НоваяСтрокаИстории.Описание = "Загружено из АХ";	
					КонецЕсли;
					// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
					
				КонецЕсли;
				
				Если  Строка.BLOCKEDPAYMENTORDER = "0" и  Строка.CLOSED = "0" и Строка.FINANCEMANAGERBLOCKED = "0" Тогда 
					
					Если КонтрагентОбъект.бит_Статус  = Перечисления.бит_СтатусыПоставщиковAX.БлокированоВсе Тогда 
						КонтрагентОбъект.бит_Статус = Перечисления.бит_СтатусыПоставщиковAX.Рабочий
					КонецЕсли;
					
				КонецЕсли;  				
				
				
				КонтрагентОбъект.Записать();
				Сообщить("Для клиента "+КонтрагентОбъект.Наименование+", получен код аналитики");
				
				Если ЗначениеЗаполнено(Строка.CUSTNUM) Тогда 
					ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"60",КонтрагентОбъект.Ссылка,Организация);
					ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"62",КонтрагентОбъект.Ссылка,Организация);
					ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"76",КонтрагентОбъект.Ссылка,Организация);
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
					ЗаписатьВРегистрСопоставленияАксапты12(Строка.CUSTNUM,"19",КонтрагентОбъект.Ссылка,Организация, Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041"));
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
				КонецЕсли;
				Если ЗначениеЗаполнено(Строка.VENDNUM) Тогда 
					ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"60",КонтрагентОбъект.Ссылка,Организация);
					ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"62",КонтрагентОбъект.Ссылка,Организация);
					ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"76",КонтрагентОбъект.Ссылка,Организация);
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
					ЗаписатьВРегистрСопоставленияАксапты12(Строка.VENDNUM,"19",КонтрагентОбъект.Ссылка,Организация,Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041"));
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
				КонецЕсли;
				УдалитьЗаписьВТаблице(Строка.RecId,СоединениеАДО);
				Продолжить;
			КонецЕсли;
			
			
			КонтрагентЕстьВБазе1С = Ложь;
			
			Если ЗначениеЗаполнено(Строка.VENDNUM) Тогда 
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.Родитель В ИЕРАРХИИ(&Родитель) 
				|	и Контрагенты.НомДокИмпорт = &НомДокИмпорт";
				
				Запрос.УстановитьПараметр("НомДокИмпорт", Строка.VENDNUM);
				Запрос.УстановитьПараметр("Родитель", ПапкаПоискаКонтрагентов);

				Результат = Запрос.Выполнить();
				
				Если Результат.Пустой() Тогда 
					
				Иначе 	  
					КонтрагентЕстьВБазе1С = Истина;
					ВыборкаДетальныеЗаписи = Результат.Выбрать();
					ВыборкаДетальныеЗаписи.Следующий();
					КотрагентСсылка = ВыборкаДетальныеЗаписи.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.CUSTNUM) и не КонтрагентЕстьВБазе1С Тогда 
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.Родитель В ИЕРАРХИИ(&Родитель)
				|	и Контрагенты.НомДокИмпорт2 = &НомДокИмпорт";
				
				Запрос.УстановитьПараметр("НомДокИмпорт", Строка.CUSTNUM);
				Запрос.УстановитьПараметр("Родитель", ПапкаПоискаКонтрагентов);

				Результат = Запрос.Выполнить();
				
				Если Результат.Пустой() Тогда 
					
				Иначе 	  
					КонтрагентЕстьВБазе1С = Истина;
					ВыборкаДетальныеЗаписи = Результат.Выбрать();
					ВыборкаДетальныеЗаписи.Следующий();
					КотрагентСсылка = ВыборкаДетальныеЗаписи.Ссылка; 
				КонецЕсли;
				
				
			КонецЕсли;
			
			
			
			Если Не КонтрагентЕстьВБазе1С Тогда 
				
				Если ИсточникЗагрузки = "SS" Тогда 
					//Сообщить("Контрагент с НомДокИмпорт ="+Строка.VENDNUM +" или НомДокИмпорт2 ="+ Строка.CUSTNUM+ " не найден.");
					УдалитьЗаписьВТаблице(Строка.RecId,СоединениеАДО);
					Продолжить;
				КонецЕсли;
				
				
				//Создаем нового контрагента
				КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				КонтрагентОбъект.Наименование = Строка.NAMEALIAS;
				КонтрагентОбъект.НаименованиеПолное = Строка.NAME;
				КонтрагентОбъект.НомДокИмпорт = Строка.VENDNUM;
				КонтрагентОбъект.НомДокИмпорт2 = Строка.CUSTNUM;
				КонтрагентОбъект.ИНН = Строка.INN;
				КонтрагентОбъект.КПП = Строка.KPP;
				Если Строка.OrganizationType = "" Тогда 
					КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
				ИначеЕсли Строка.OrganizationType = "1" Тогда
					КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				КонецЕсли;
				КонтрагентОбъект.бит_ГруппаКлиентов = ГруппаКлиентов;  					
				КонтрагентОбъект.бит_ГруппаПоставщиков= ГруппаПоставщиков;
				КонтрагентОбъект.Родитель = ПапкаПоискаКонтрагентов;
				
				КонтрагентОбъект.Записать();
				
				// заполнить адреса после записи объекта
				// Юридический адрес
				ЗаписьЮА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				ЗаписьЮА.Представление 		= Строка.ADDRESS;
				
				// Фактический адрес
				ЗаписьФА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаписьФА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				ЗаписьФА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ЗаписьФА.Представление 		= Строка.ADDRESS;
				
				// Телефон
				ЗаписьТел 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаписьТел.Тип 				= Перечисления.ТипыКонтактнойИнформации.Телефон;
				ЗаписьТел.Вид 				= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				ЗаписьТел.Представление 	= Строка.PHONE;
				
				// Факс
				ЗаписьТел 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаписьТел.Тип 				= Перечисления.ТипыКонтактнойИнформации.Телефон;
				ЗаписьТел.Вид 				= Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00033");
				ЗаписьТел.Представление 	= Строка.TELEFAX;
				
				//ОК+ Аверьянова 28.08.15   дозаполним Внешний код и эл адрес
				//эл.почта
				ЗаписьЕмайл 				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаписьЕмайл.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				ЗаписьЕмайл.Вид 			= Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00034"); //Адрес электронной почты-Бухгалтерия
				ЗаписьЕмайл.Представление 	= Строка.EMAILFINANCE;
				
				//эл.почта 
				ЗаписьЕмайл 				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаписьЕмайл.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				ЗаписьЕмайл.Вид 			= Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00035");   //Адрес электронной почты-Заявка
				ЗаписьЕмайл.Представление 	= Строка.EMAILPURCHORDER;
				
				КонтрагентОбъект.бит_ВнешнийКодSoftSolution= Строка.CodeSS;
				//ОК-
				
				//Заполняем регистр изменения реквизитоы контрагентов
				Запись = РегистрыСведений.бит_ИсторияИзмененияРеквизитовКонтрагентов.СоздатьМенеджерЗаписи();
				Запись.Контрагент = КонтрагентОбъект.Ссылка;
				Запись.ИНН = КонтрагентОбъект.ИНН;
				Запись.КПП = КонтрагентОбъект.КПП;
				Запись.НаименованиеПолное 		= КонтрагентОбъект.НаименованиеПолное;
				Запись.Наименование 			= КонтрагентОбъект.Наименование;
				Запись.ЮридическийАдрес 		= Строка.ADDRESS;			
				Запись.ДатаМодификации 	= ТекущаяДата();
				Запись.Период			= '19800101';
				Запись.ДатаНаименование = '19800101';
				Запись.ДатаНаименованиеПолное = '19800101';
				Запись.ДатаИНН = '19800101';
				Запись.ДатаКПП = '19800101';
				Запись.ДатаЮридическийАдрес ='19800101';
				Запись.Записать();
				//Сообщить("Новый контрагент "+КонтрагентОбъект.Наименование +",записан в базу");
				ЗаписьЖурналаРегистрации("Загрузка контрагентов",УровеньЖурналаРегистрации.Информация,,,"Новый контрагент "+КонтрагентОбъект.Наименование +",записан в базу"); 			 
				Если ЗначениеЗаполнено(Строка.CUSTNUM) Тогда 
					ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"60",КонтрагентОбъект.Ссылка,Организация);
					ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"62",КонтрагентОбъект.Ссылка,Организация);
					ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"76",КонтрагентОбъект.Ссылка,Организация);
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
					ЗаписатьВРегистрСопоставленияАксапты12(Строка.CUSTNUM,"19",КонтрагентОбъект.Ссылка,Организация, Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041"));
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
				КонецЕсли;
				Если ЗначениеЗаполнено(Строка.VENDNUM) Тогда 
					ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"60",КонтрагентОбъект.Ссылка,Организация);
					ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"62",КонтрагентОбъект.Ссылка,Организация);
					ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"76",КонтрагентОбъект.Ссылка,Организация);
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
					ЗаписатьВРегистрСопоставленияАксапты12(Строка.VENDNUM,"19",КонтрагентОбъект.Ссылка,Организация, Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041"));
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
				КонецЕсли;
				
				
			Иначе 	  
				КонтрагентОбъект = КотрагентСсылка.ПолучитьОбъект();
				Если ЗначениеЗаполнено(Строка.VENDNUM) Тогда 
					КонтрагентОбъект.НомДокИмпорт = Строка.VENDNUM;
				КонецЕсли;
				Если ЗначениеЗаполнено( Строка.CUSTNUM) Тогда 
					КонтрагентОбъект.НомДокИмпорт2 = Строка.CUSTNUM;
					
				КонецЕсли;  			
				Если ЗначениеЗаполнено(ГруппаКлиентов) Тогда 
					КонтрагентОбъект.бит_ГруппаКлиентов = ГруппаКлиентов;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ГруппаПоставщиков) Тогда 
					КонтрагентОбъект.бит_ГруппаПоставщиков= ГруппаПоставщиков;
				КонецЕсли;
				
				//ОК+ Аверьянова 15.03.17 корректировска - чтобы не дублировались записи с конт.информацией, если она уже есть
				
				////ОК+ Аверьянова 28.08.15   дозаполним Внешний код и эл адрес
				//Если Не ЗначениеЗаполнено(КонтрагентОбъект.бит_ВнешнийКодSoftSolution) И ЗначениеЗаполнено(Строка.CodeSS) Тогда 
				//	КонтрагентОбъект.бит_ВнешнийКодSoftSolution= Строка.CodeSS;
				//КонецЕсли;
				//
				//Если ЗначениеЗаполнено(Строка.EMAILFINANCE) Тогда  //Заполняем адрес эл.почты 
				//	//Адрес электронной почты-Бухгалтерия
				//	ЗаписьЕмайл 				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				//	ЗаписьЕмайл.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				//	//ЗаписьЕмайл.Вид 			= Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00034"); 
				//	ЗаписьЕмайл.Вид 			= Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Бухгалтерия",Истина,,);     //ОК+ Аверьянова 21.02.2017
				//	ЗаписьЕмайл.Представление 	= Строка.EMAILFINANCE;
				//КонецЕсли;
				//
				//Если ЗначениеЗаполнено(Строка.EMAILPURCHORDER) Тогда
				//	//Адрес электронной почты-Заявка
				//	ЗаписьЕмайл 				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				//	ЗаписьЕмайл.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				//	//ЗаписьЕмайл.Вид 			= Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00035");   
				//	ЗаписьЕмайл.Вид 			= Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Заявка",Истина,,);        //ОК+ Аверьянова 21.02.2017
				//	ЗаписьЕмайл.Представление 	= Строка.EMAILPURCHORDER;
				//КонецЕсли;

				//Если ЗначениеЗаполнено(Строка.ADDRESS) Тогда    //Заполняем адрес если он не пустой
				//	// Юридический адрес
				//	ЗаписьЮА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				//	ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				//	ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				//	ЗаписьЮА.Представление 		= Строка.ADDRESS;
				//	
				//	// Фактический адрес
				//	ЗаписьФА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				//	ЗаписьФА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				//	ЗаписьФА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				//	ЗаписьФА.Представление 		= Строка.ADDRESS;
				//КонецЕсли;
				//ОК-
				
				Если Не ЗначениеЗаполнено(КонтрагентОбъект.бит_ВнешнийКодSoftSolution) И ЗначениеЗаполнено(Строка.CodeSS) Тогда 
					КонтрагентОбъект.бит_ВнешнийКодSoftSolution= Строка.CodeSS;
				КонецЕсли;
				
				ЗапросКИ = Новый Запрос;     //получим конт.информацию КА
				ЗапросКИ.Текст = 
					"ВЫБРАТЬ
					|	Контрагенты.Ссылка КАК КА,
					|	КИ_ЮрАдрес.ЮрАдрес КАК ЮрАдрес,
					|	КИ_ФактАдрес.Представление КАК ФактАдрес,
					|	КИ_Заявка.Представление КАК Заявка,
					|	КИ_Бухгалтерия.Представление КАК Бухгалтерия
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			КонтрагентыКонтактнаяИнформация.Представление КАК ЮрАдрес,
					|			КонтрагентыКонтактнаяИнформация.Ссылка.Код КАК Код
					|		ИЗ
					|			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
					|		ГДЕ
					|			КонтрагентыКонтактнаяИнформация.Вид = &ВидЮрАдрес) КАК КИ_ЮрАдрес
					|		ПО (КИ_ЮрАдрес.Код = Контрагенты.КонтактнаяИнформация.Ссылка.Код)
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			КонтрагентыКонтактнаяИнформация.Ссылка.Код КАК Код,
					|			КонтрагентыКонтактнаяИнформация.Представление КАК Представление
					|		ИЗ
					|			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
					|		ГДЕ
					|			КонтрагентыКонтактнаяИнформация.Вид = &ВидФактАдрес) КАК КИ_ФактАдрес
					|		ПО (КИ_ФактАдрес.Код = Контрагенты.КонтактнаяИнформация.Ссылка.Код)
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			КонтрагентыКонтактнаяИнформация.Ссылка.Код КАК Код,
					|			КонтрагентыКонтактнаяИнформация.Представление КАК Представление
					|		ИЗ
					|			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
					|		ГДЕ
					|			КонтрагентыКонтактнаяИнформация.Вид = &ВидЗаявка) КАК КИ_Заявка
					|		ПО (КИ_Заявка.Код = Контрагенты.КонтактнаяИнформация.Ссылка.Код)
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			КонтрагентыКонтактнаяИнформация.Ссылка.Код КАК Код,
					|			КонтрагентыКонтактнаяИнформация.Представление КАК Представление
					|		ИЗ
					|			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
					|		ГДЕ
					|			КонтрагентыКонтактнаяИнформация.Вид = &ВидБухгалтерия) КАК КИ_Бухгалтерия
					|		ПО (КИ_Бухгалтерия.Код = Контрагенты.КонтактнаяИнформация.Ссылка.Код)
					|ГДЕ
					|	Контрагенты.Ссылка = &КА";
				
				ЗапросКИ.УстановитьПараметр("КА", КонтрагентОбъект.Ссылка);
				ЗапросКИ.УстановитьПараметр("ВидЮрАдрес",Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				ЗапросКИ.УстановитьПараметр("ВидФактАдрес",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
				ЗапросКИ.УстановитьПараметр("ВидЗаявка", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Заявка",истина,Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты.Ссылка));
				ЗапросКИ.УстановитьПараметр("ВидБухгалтерия", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Бухгалтерия",истина,Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты.Ссылка));
				
				Результат = ЗапросКИ.Выполнить();
				КИ_КА = Результат.Выбрать();
				Если КИ_КА.Количество() = 0 Тогда
				    Сообщить("у контрагента "+КонтрагентОбъект.Наименование+" отсутствует конт.информация");				
				КонецЕсли; 
						
				Если КИ_КА.Следующий() Тогда
					Если ЗначениеЗаполнено(Строка.ADDRESS) Тогда    
						// Юридический адрес  - если он пустой- заполняем, иначе - перезапишем данными АХ (консультация с банк.группой)  
						Если Не Значениезаполнено(КИ_КА.ЮрАдрес) Тогда    
							ЗаписьЮА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
							ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
							ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
							ЗаписьЮА.Представление 		= Строка.ADDRESS;
						иначе  
							КонтрагентОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "Вид").Представление = Строка.ADDRESS;
						КонецЕсли;     										
						
						// Фактический адрес
						Если Не Значениезаполнено(КИ_КА.ФактАдрес) Тогда   
							ЗаписьЮА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
							ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
							ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
							ЗаписьЮА.Представление 		= Строка.ADDRESS;
						иначе  
							КонтрагентОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "Вид").Представление = Строка.ADDRESS;
						КонецЕсли;     
					КонецЕсли;
					Если ЗначениеЗаполнено(Строка.EMAILFINANCE) Тогда   
						//Адрес электронной почты-Бухгалтерия  - если он пустой- заполняем, иначе - перезапишем данными АХ
						Если Не Значениезаполнено(КИ_КА.Бухгалтерия) Тогда   
							ЗаписьЕмайл 				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
							ЗаписьЕмайл.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
							ЗаписьЕмайл.Вид 			= Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Бухгалтерия"); 					
							ЗаписьЕмайл.Представление 	= Строка.EMAILFINANCE;
						иначе  
							КонтрагентОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Бухгалтерия"), "Вид").Представление = Строка.EMAILFINANCE;
						КонецЕсли; 
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.EMAILPURCHORDER) Тогда
						//Адрес электронной почты-Заявка
						Если Не Значениезаполнено(КИ_КА.Заявка) Тогда   
							ЗаписьЕмайл 				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
							ЗаписьЕмайл.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
							ЗаписьЕмайл.Вид 			= Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Заявка");   
							ЗаписьЕмайл.Представление 	= Строка.EMAILPURCHORDER;
						иначе  
							КонтрагентОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Заявка"), "Вид").Представление = Строка.EMAILPURCHORDER;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
				//ОК-
				
				Если  Строка.CLOSED = "1" Тогда 
					
					ВыборкаДетальныеЗаписи = ПолуичтьДоговораКонтрагента(КонтрагентОбъект.Ссылка,Организация);
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Если ВыборкаДетальныеЗаписи.Ссылка.бит_СтадияДоговора <> Перечисления.бит_ВидыСтадийДоговоров.Закрыт Тогда 
							ДогОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
							ДогОбъект.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Закрыт;
							ДогОбъект.Записать();
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;	
				Если  Строка.BLOCKEDPAYMENTORDER = "1" Тогда 
					
					ВыборкаДетальныеЗаписи = ПолуичтьДоговораКонтрагента(КонтрагентОбъект.Ссылка,Организация);	
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Если ВыборкаДетальныеЗаписи.Ссылка.бит_СтадияДоговора <> Перечисления.бит_ВидыСтадийДоговоров.Замечания Тогда 
							ДогОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
							ДогОбъект.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Замечания;
							ДогОбъект.Записать();
						КонецЕсли;
						
					КонецЦикла;
					
					
				КонецЕсли;
				
				Если  Строка.BLOCKEDPAYMENTORDER = "0" и  Строка.CLOSED = "0" и Строка.FINANCEMANAGERBLOCKED = "0" Тогда 
					
					Если КонтрагентОбъект.бит_Статус  = Перечисления.бит_СтатусыПоставщиковAX.БлокированоВсе Тогда 
						КонтрагентОбъект.бит_Статус = Перечисления.бит_СтатусыПоставщиковAX.Рабочий
					КонецЕсли;
					
				КонецЕсли;
				
				//Заполняем адрес если он не пустой
				
				//ОК+ Аверьянова 21.02.2017 дублирование строк адреса
				//Если ЗначениеЗаполнено(Строка.ADDRESS) Тогда 
				//	// Юридический адрес
				//	ЗаписьЮА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				//	ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				//	ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				//	ЗаписьЮА.Представление 		= Строка.ADDRESS;
				//	
				//	// Фактический адрес
				//	ЗаписьФА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				//	ЗаписьФА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				//	ЗаписьФА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				//	ЗаписьФА.Представление 		= Строка.ADDRESS;
				//КонецЕсли;
				//ОК-
				
				КонтрагентОбъект.Записать();
				
			КонецЕсли;	 
			
			Если ЗначениеЗаполнено(Строка.CUSTNUM) Тогда 
				ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"60",КонтрагентОбъект.Ссылка,Организация);
				ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"62",КонтрагентОбъект.Ссылка,Организация);
				ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"76",КонтрагентОбъект.Ссылка,Организация);
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
				ЗаписатьВРегистрСопоставленияАксапты12(Строка.CUSTNUM,"19",КонтрагентОбъект.Ссылка,Организация, Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041"));
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.VENDNUM) Тогда 
				ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"60",КонтрагентОбъект.Ссылка,Организация);
				ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"62",КонтрагентОбъект.Ссылка,Организация);
				ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"76",КонтрагентОбъект.Ссылка,Организация);
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
				ЗаписатьВРегистрСопоставленияАксапты12(Строка.VENDNUM,"19",КонтрагентОбъект.Ссылка,Организация, Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041"));
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
			КонецЕсли;
			
			УдалитьЗаписьВТаблице(Строка.RecId,СоединениеАДО);

		КонецЦикла;
		
		СоединениеАДО.Close();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьВРегистрСопоставления(НомерПоставщика,Счет,Контрагент,Организация)
	
	ЗаписьРегистра = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Организация = Организация;
	ЗаписьРегистра.СчетАксапты = Счет;
	ЗаписьРегистра.КодАналитикиАксапты = НомерПоставщика ;
	ЗаписьРегистра.Аналитика1С = Контрагент;
	ЗаписьРегистра.Тип1С = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041");
    ЗаписьРегистра.Записать();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
	ЗаписатьВРегистрСопоставленияАксапты12(НомерПоставщика, Счет, Контрагент, Организация, ЗаписьРегистра.Тип1С);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
Процедура ЗаписатьВРегистрСопоставленияАксапты12(КодАналитикиАксапты, Счет, Аналитика1С, Организация, Тип1С)
	
	МассивОрганизацийАксапта12 = Новый Массив;
	МассивОрганизацийАксапта12.Добавить(бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"));
	
	Если МассивОрганизацийАксапта12.Найти(Организация) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Организация 			= Организация;
	ЗаписьРегистра.СчетАксапты 			= Счет;
	ЗаписьРегистра.КодАналитикиАксапты 	= КодАналитикиАксапты;
	ЗаписьРегистра.Аналитика1С 			= Аналитика1С;
	ЗаписьРегистра.Тип1С 				= Тип1С;
	ЗаписьРегистра.Записать();

КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)

функция ПолуичтьДоговораКонтрагента(Контрагент,Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.бит_СтадияДоговора КАК бит_СтадияДоговора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487)
	|	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Возврат  Результат.Выбрать();

КонецФункции

Процедура ПолучитьЗапросДдяЗагрузкиКонтрагентов(Запрос,База)
	
	Запрос = "
			  |  SELECT  [CODE1C]
			  |	,[VENDNUM]
			  |	,[CUSTNUM]
			  |	,[NAMEALIAS]
			  |	,[NAME]
			  |	,[ADDRESS]
			  |	,[INN]
			  |	,[KPP]
			  |	,[PHONE]
			  |	,[TELEFAX]
			  |	,[EMAILFINANCE]
			  |	,[EMAILPURCHORDER]
			  |	,[ACCOUNTSTATUS1C]
			  |	,[BLOCKED]
			  |	,[CLOSED]
			  |	,[FINANCEMANAGERBLOCKED]
			  |	,[BLOCKEDPAYMENTORDER]
			  |	,[CodeSS]
			  |	,[Source]
			  |	,[VENDGroup]
			  |	,[CustGroup]
			  |	,[DATEMODNAME]
			  |	,[DateModNameAlias]
			  //|,[DATEMODALIASNAME]
			  |	,[DATEMODINN]
			  |	,[DATEMODKPP]
			  |	,[DATEMODADDRESS]
			  |	,[MODIFIEDDATE]
			  |	,[OrganizationType]
			  |	,[RecId]
			  |FROM "+База+".[dbo].[CustVendTable_IMP]
			  | where source = 'Ax' order by RecId";
  	
КонецПроцедуры

Процедура бит_ЗагрузкаОткликаОтSQLДляДоговоров() Экспорт
		
	Перем Выборка;
	
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487)
	Возврат;
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
	
	ЗаписьЖурналаРегистрации("Загрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Начало загрузки договоров");
	
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
   	СоединениеАДО.ConnectionTimeOut = 600; 
    СоединениеАДО.CommandTimeOut = 600; 
    СоединениеАДО.CursorLocation = 3; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВариантЗагрузки.Значение КАК Источник
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ВариантЗагрузки
	|ГДЕ
	|	ВариантЗагрузки.ИмяНастройки = ""Источник загрузки""
	|	И ВариантЗагрузки.Группа = ""ПараметрыЗагрузкиАксапты""";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	ИсточникЗагрузки = ВыборкаДетальныеЗаписи.Источник;

	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("000000045"));
	МассивОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("000000056"));
	
	Для Каждого Организация из МассивОрганизаций Цикл 
		
		Если Организация = Справочники.Организации.НайтиПоКоду("000000045") Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресСервера.Значение КАК АдресСервера,
			|	БазаДанных.Значение КАК БазаДанных,
			|	ИмяПользователя.Значение КАК ИмяПользователя,
			|	Пароль.Значение КАК Пароль
			|ИЗ
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
			|ГДЕ
			|	АдресСервера.ИмяНастройки = ""АдресСервера""
			|	И БазаДанных.ИмяНастройки = ""БазаДанных""
			|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя""
			|	И Пароль.ИмяНастройки = ""Пароль""
			|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
			|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
			|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
			|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
			
		ИначеЕсли Организация = Справочники.Организации.НайтиПоКоду("000000056") Тогда 		
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресСервера.Значение КАК АдресСервера,
			|	БазаДанных.Значение КАК БазаДанных,
			|	ИмяПользователя.Значение КАК ИмяПользователя,
			|	Пароль.Значение КАК Пароль
			|ИЗ
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
			|ГДЕ
			|	АдресСервера.ИмяНастройки = ""АдресСервера Лоджистикс""
			|	И БазаДанных.ИмяНастройки = ""БазаДанных Лоджистикс""
			|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя Лоджистикс""
			|	И Пароль.ИмяНастройки = ""Пароль Лоджистикс""
			|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
			|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
			|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
			|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
			
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий(); 
		Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
		ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
		Пароль = ВыборкаДетальныеЗаписи.Пароль;
		База = ВыборкаДетальныеЗаписи.БазаДанных;
		
		СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 
		
		Попытка
			СоединениеАДО.Open(СтрокаСоединения); 
		Исключение 
			ЗаписьЖурналаРегистрации("Загрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Не удалось выполнить подключение к базе "+ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		Запрос = "";
		
		ПолучитьЗапросДляЗагрузкиДоговоров(Запрос,База);
		// ОКЕЙ Гиль А.В.(Софтлаб) Начало 03.10.2019 (#3497) 
		Если Организация = Справочники.Организации.НайтиПоКоду("000000056") Тогда
			Запрос = СтрЗаменить(Запрос, ",[UE]", "");
		КонецЕсли;
		// ОКЕЙ Гиль А.В.(Софтлаб) Конец 03.10.2019 (#3497)
		
		ЗапросВыполенен = ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка);
		
		Если НЕ ЗапросВыполенен Тогда 
			Продолжить;
		КонецЕсли;                                                     
		
		таб = Новый ТаблицаЗначений;
		
		таб.Колонки.Добавить("Code1C");
		таб.Колонки.Добавить("ExpCompanyId");
		таб.Колонки.Добавить("ContractRecId");
		таб.Колонки.Добавить("RContractPartnerType");
		таб.Колонки.Добавить("RContractPartnerCode");
		таб.Колонки.Добавить("RContractCode");
		таб.Колонки.Добавить("RContractAccount");
		таб.Колонки.Добавить("RContractNumber");
		таб.Колонки.Добавить("ContractDate");
		таб.Колонки.Добавить("ContractEndDate");
		таб.Колонки.Добавить("RContractSubject");
		таб.Колонки.Добавить("RContractStatus");
		таб.Колонки.Добавить("CurrencyCode");
		таб.Колонки.Добавить("ContractIdExt");                  
		таб.Колонки.Добавить("ContractStartDate");
		таб.Колонки.Добавить("CONTRACTPOSTINGPROGILE");
		таб.Колонки.Добавить("RecId");
		// ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
		таб.Колонки.Добавить("UE");
		// ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)
		
		Пока Не Выборка.EOF() Цикл 
			fields=FieldsСтруктура(Выборка.Fields);
			нов=таб.Добавить();
			ЗаполнитьЗначенияСвойств(нов,fields);	
			Выборка.MoveNext(); 
		КонецЦикла;	
		
		Для Каждого Строка Из  таб Цикл 
			
			//ДоговорСсылка = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("бит_НомерАХ",Строка.RContractAccount);
			ДоговорСсылка =  Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Строка.Code1C);
			Если НЕ ЗначениеЗаполнено(ДоговорСсылка) Тогда 
				
				//Доп поиск по реквизитам Аксапты
				КонтрагентНайден = Ложь;
				
				Если ЗначениеЗаполнено(Строка.ContractRecId) Тогда 
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ДоговорыКонтрагентов.Ссылка
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ
					|	ДоговорыКонтрагентов.бит_RECID = &бит_RECID";
					
					Запрос.УстановитьПараметр("бит_RECID", Строка.ContractRecId);
					//Запрос.УстановитьПараметр("бит_НомерАХ", бит_НомерАХ);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Если НЕ РезультатЗапроса.Пустой() Тогда 
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						ВыборкаДетальныеЗаписи.Следующий();
						
						ДоговорСсылка  = ВыборкаДетальныеЗаписи.Ссылка;
						КонтрагентНайден = Истина;
						
					КонецЕсли;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(Строка.RContractAccount)и не КонтрагентНайден  Тогда 
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ДоговорыКонтрагентов.Ссылка
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ
					|	ДоговорыКонтрагентов.бит_НомерАХ = &бит_НомерАХ";
					
					Запрос.УстановитьПараметр("бит_НомерАХ", Строка.RContractAccount);
					//Запрос.УстановитьПараметр("бит_НомерАХ", бит_НомерАХ);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Если НЕ РезультатЗапроса.Пустой() Тогда 
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						ВыборкаДетальныеЗаписи.Следующий();
						
						ДоговорСсылка  = ВыборкаДетальныеЗаписи.Ссылка;
						КонтрагентНайден = Истина;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;

			Если ЗначениеЗаполнено(ДоговорСсылка) Тогда 
				
				Договор = ДоговорСсылка.ПолучитьОбъект();
				Договор.бит_RECID = Строка.ContractRecId;
				Договор.бит_НомерАХ =Строка.RContractAccount;
				Договор.ДополнительныеСвойства.Вставить("ЗагруженИзАксапты");
				
				Если  Строка.RContractStatus = "" Тогда 
					Договор.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Подготовка;
				ИначеЕсли  Строка.RContractStatus = "1" Тогда 
					Договор.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Исполнение;
				ИначеЕсли  Строка.RContractStatus = "2" Тогда 
					Договор.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Закрыт;
				ИначеЕсли  Строка.RContractStatus = "3" Тогда 
					Договор.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Замечания;
				КонецЕсли;
				
				// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487) 
				//Договор.Записать();		  
				// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
				
			Иначе 				
				
				Если ИсточникЗагрузки = "SS" Тогда 
					Сообщить("Договор с номером АХ = "+	Строка.RContractAccount+" не найден");
					Продолжить;
				КонецЕсли;
				
				Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				//Валюта
				Юань = Справочники.Валюты.НайтиПоКоду("156");
				Евро = Справочники.Валюты.НайтиПоКоду("978");
				Доллары = Справочники.Валюты.НайтиПоКоду("840");
				Рубли = Справочники.Валюты.НайтиПоКоду("643");
				
				Если Строка.CurrencyCode = Лев(Рубли.Наименование, 3) Тогда
					Договор.ВалютаВзаиморасчетов = Рубли;
				ИначеЕсли Строка.CurrencyCode = Евро.Наименование Тогда
					Договор.ВалютаВзаиморасчетов = Евро;
				ИначеЕсли Строка.CurrencyCode = Доллары.Наименование Тогда
					Договор.ВалютаВзаиморасчетов = Доллары;
				ИначеЕсли Строка.CurrencyCode = Юань.Наименование Тогда
					Договор.ВалютаВзаиморасчетов = Юань;
				КонецЕсли;
				
				Договор.Комментарий = "Загружено из АХ";
				Договор.Организация = Организация;
				
				Если Строка.RContractPartnerType = "" Тогда 
					ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				ИначеЕсли Строка.RContractPartnerType = "1" Тогда 
					ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				Иначе 
					ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
				КонецЕсли;
				
				Договор.ВидДоговора = ВидДоговора;
				//Договор.ВидВзаиморасчетов = 
				Договор.Дата = ?(Строка.ContractDate = "01.01.1900 0:00:00", Дата('00010101'), Строка.ContractDate);
				Договор.Номер = Строка.RContractNumber;
				ДатаСрокДействия =  ?(Строка.ContractEndDate = "01.01.1900 0:00:00", Дата('00010101'), Строка.ContractEndDate);
				Договор.СрокДействия = ДатаСрокДействия;
				Договор.бит_ПредметДоговора = Строка.RContractSubject;
				
				НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.НайтиПоНаименованию(Строка.RContractCode);
				Если НЕ(ЗначениеЗаполнено(НаправлениеДоговора)) Тогда
					НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.СоздатьЭлемент();
					НаправлениеДоговора.Наименование = Строка.RContractCode;
					НаправлениеДоговора.Записать();
					НаправлениеДоговора = НаправлениеДоговора.Ссылка;
				КонецЕсли;
				Договор.бит_НаправлениеДоговора = НаправлениеДоговора;
				
				КонтрагентВладелец = НайтиКонтрагентаВладельца(Строка,ВидДоговора);
				
				Если КонтрагентВладелец = Неопределено  Тогда 
					//Сообщить("Не найден контрагент с НомДокИмпорт"+?(ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,"2: ",": ")+Строка.RContractPartnerCode);
					ЗаписьЖурналаРегистрации("Загрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Не найден контрагент с НомДокИмпорт"+?(ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,"2: ",": ")+Строка.RContractPartnerCode);
					Продолжить;
				КонецЕсли;
				
				Договор.Владелец = КонтрагентВладелец;
				Договор.Наименование = Договор.Номер;
				Договор.бит_НомерАХ = Строка.RContractAccount;
				Договор.бит_RECID = Строка.ContractRecId;
				Договор.бит_ВнешнийКодКонтракта = Строка.ContractIdExt;
				Договор.ДополнительныеСвойства.Вставить("ЗагруженИзАксапты");
				Если  Строка.RContractStatus = "" Тогда 
					Договор.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Подготовка;
				ИначеЕсли  Строка.RContractStatus = "1" Тогда 
					Договор.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Исполнение;
				ИначеЕсли  Строка.RContractStatus = "2" Тогда 
					Договор.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Закрыт;
				ИначеЕсли  Строка.RContractStatus = "3" Тогда 
					Договор.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Замечания;
				КонецЕсли;
				Договор.ДатаВозникновенияОбязательства = Строка.ContractStartDate;
				Договор.ДатаПогашенияОбязательства = Строка.ContractEndDate;
				Договор.СБ_ПрофильРазноски = Строка.CONTRACTPOSTINGPROGILE;
				
				// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487) 
				//Попытка
				//	Договор.Записать();
				//	//Сообщить("Записан новый договор "+Строка.RContractNumber +" для контагента "+Договор.Владелец);
				//	ЗаписьЖурналаРегистрации("Загрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Записан новый договор "+Строка.RContractNumber +" для контагента "+Договор.Владелец);
				//Исключение
				//	ЗаписьЖурналаРегистрации("Загрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Не удалось записать договор "+Строка.RContractNumber +" для контагента "+Договор.Владелец+","+ОписаниеОшибки());
				//	Продолжить;
				//КонецПопытки;
				// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
			КонецЕсли;
			
			// ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
			Если ЗначениеЗаполнено(Строка.UE) Тогда
				Договор.ок_ПересчетКурса = Число(Строка.UE);	
			КонецЕсли;
			// ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)
			
			// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487) 
			// обновляем историю статусов договора
			ок_ОбновитьИсториюСтатусов(Договор);
			
			Попытка
				Договор.Записать();
				//Сообщить("Записан новый договор "+Строка.RContractNumber +" для контагента "+Договор.Владелец);
				ЗаписьЖурналаРегистрации("Загрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Записан новый договор "+Строка.RContractNumber +" для контагента "+Договор.Владелец);
			Исключение
				ЗаписьЖурналаРегистрации("Загрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Не удалось записать договор "+Строка.RContractNumber +" для контагента "+Договор.Владелец+","+ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
			
			ЗаписьРегистра = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Организация = Договор.Организация;
			ЗаписьРегистра.СчетАксапты = "76";
			ЗаписьРегистра.КодАналитикиАксапты = Строка.ContractRecId;
			ЗаписьРегистра.Аналитика1С = Договор.Ссылка;
			
			ЗаписьРегистра.Тип1С = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов");
			ЗаписьРегистра.Записать();
			Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
				Или Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда 
				
				ЗаписьРегистра = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.Организация =Договор.Организация;
				Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда 
					ЗаписьРегистра.СчетАксапты = "62"
				ИначеЕсли Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда  
					ЗаписьРегистра.СчетАксапты = "60";
				КонецЕсли;
				ЗаписьРегистра.КодАналитикиАксапты = Строка.ContractRecId;
				ЗаписьРегистра.Аналитика1С = Договор.Ссылка;
				ЗаписьРегистра.Тип1С =Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов");
				ЗаписьРегистра.Записать();
			КонецЕсли;
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
			ЗаписатьВРегистрСопоставленияАксапты12(Строка.RContractAccount, "76", Договор.Ссылка, Договор.Организация, Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов"));

			Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
				Или Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда 
				
				Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда 
					ЗаписатьВРегистрСопоставленияАксапты12(Строка.RContractAccount, "62", Договор.Ссылка, Договор.Организация, Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов"));
				ИначеЕсли Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда  
					ЗаписатьВРегистрСопоставленияАксапты12(Строка.RContractAccount, "60", Договор.Ссылка, Договор.Организация, Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов"));
				КонецЕсли;
				
			КонецЕсли;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
	
			//ОК+ Аверьянова 08.12.19 исправление ошибки
			//УдалитьЗаписьВТаблице(Строка.RecId,СоединениеАДО);
			УдалитьЗаписьВТаблицеДоговоров(Строка.RecId,СоединениеАДО);
			//ОК-
		КонецЦикла;
		СоединениеАДО.Close();
	КонецЦикла;
	ЗаписьЖурналаРегистрации("Загрузка договоров",УровеньЖурналаРегистрации.Информация,,,"Окончание загрузки договоров");
КонецПроцедуры

Процедура ПолучитьЗапросДляЗагрузкиДоговоров(Запрос,База)
	
	Запрос = "  select
			  | [Code1C]
			  |,[RContractAccount]
			  |,[CurrencyCode]
			  |,[Dimension2]
			  |,[ContractRecId]
			  |,[ContractPostingProgile]
			  |,[RContractCode]
			  |,[RContractPartnerType]
			  |,[RContractNumber]
			  |,[ContractDate]
			  |,[ContractStartDate]
			  |,[ContractEndDate]
			  |,[RContractPartnerCode]
			  |,[RContractPartnerCode1C]
			  |,[RContractStatus]
			  |,[RContractSubject]
			  |,[ContractIdExt]
			  |,[Source]
			  |,[ModifiedDate]
			  // ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
			  |,[UE]
			  // ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)
			  |,[RecId]
			  |FROM ["+База+"].[dbo].[ContractTable_IMP] where Source = 'Ax'";
		
КонецПроцедуры

Функция  ПолучитьИННКПП (Строка,Что)
	
	 НомерПозицииРазделителя = Найти(Строка,"/.");
	 ОбщееКоличествоСимволов = СтрДлина(Строка);
	 ЧислоПосле = ОбщееКоличествоСимволов - НомерПозицииРазделителя;
	 Если Что ="ИНН" Тогда 
		 Возврат Лев(Строка,НомерПозицииРазделителя-1);
	 иначе
		 Возврат Прав(Строка,ЧислоПосле);
	 КонецЕсли;
	
КонецФункции

Функция НайтиКонтрагентаВладельца (Строка,ВидДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.НомДокИмпорт = &НомДокИмпорт";
	
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487)
	//Если  ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	Если ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)	
		Запрос.Текст  = СтрЗаменить(Запрос.Текст,"Контрагенты.НомДокИмпорт","Контрагенты.НомДокИмпорт2");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомДокИмпорт", Строка.RCONTRACTPARTNERCODE);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка; 
	
КонецФункции

Процедура УдалитьЗаписьВТаблице(Номер,Соединение)
	
	    ТекстЗапросаДляУдаления = "
		|	DELETE [dbo].[CustVendTable_IMP]
		|Where [RecId]="+Номер;
		ЗапросАДО = Новый COMОбъект("ADODB.Command");
		ЗапросАДО.CommandTimeout = 600;
		ЗапросАДО.ActiveConnection=Соединение; 	
		ЗапросАДО.CommandText=ТекстЗапросаДляУдаления; 
		
		Попытка                                                 
			РезультатЗагрузки = ЗапросАДО.Execute(); 
		Исключение	
		КонецПопытки;	 
	
КонецПроцедуры

//ОК+ Аверьянова 08.12.19 исправление ошибки
Процедура УдалитьЗаписьВТаблицеДоговоров(Номер,Соединение)
	
	    ТекстЗапросаДляУдаления = "
		|	DELETE [dbo].[ContractTable_IMP]
		|Where [RecId]="+Номер;
		ЗапросАДО = Новый COMОбъект("ADODB.Command");
		ЗапросАДО.CommandTimeout = 600;
		ЗапросАДО.ActiveConnection=Соединение; 	
		ЗапросАДО.CommandText=ТекстЗапросаДляУдаления; 
		
		Попытка                                                 
			РезультатЗагрузки = ЗапросАДО.Execute(); 
		Исключение	
		КонецПопытки;		
КонецПроцедуры
//ОК-

//ОК+ Аверьянова 13.11.15
Процедура ОК_ПроведениеСписанийТекущегоДня() Экспорт
	
	Перем Выборка;
	
	ЗаписьЖурналаРегистрации("Проведение списаний с расчетного счета ОКЕЙ за текущий день",УровеньЖурналаРегистрации.Информация,,,"Начало группового проведения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеСРасчетногоСчета.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|ГДЕ
		|	СписаниеСРасчетногоСчета.Организация = &Организация
		|	И СписаниеСРасчетногоСчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И НЕ СписаниеСРасчетногоСчета.Проведен
		|	И НЕ СписаниеСРасчетногоСчета.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоКоду("000000045"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекДок = Выборка.Ссылка;
		ТекДокОбъект = ТекДок.ПолучитьОбъект();
		Попытка
		     ТекДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			 //ЗаписьЖурналаРегистрации("Проведение",УровеньЖурналаРегистрации.Информация,,,ТекДок);
		Исключение
			Сообщить(ОписаниеОшибки());
			продолжить;
		КонецПопытки;
	КонецЦикла;
	ЗаписьЖурналаРегистрации("Проведение списаний с р/счета счета ОКЕЙ за текущий день",УровеньЖурналаРегистрации.Информация,,,"групповое проведение завершено");

КонецПроцедуры

// БИТ_YK_н Доработка #2478 17.06.16
Процедура ТрансляцияОперацийАксаптыВРегистрыБК() Экспорт
	
	Перем Выборка;	
	
	ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК",УровеньЖурналаРегистрации.Информация,,,"Начало задания");

	// Получим данные из внешнего источника для заполнения регистра сведений бит_ДополнительныеДанныеПоОперациямАксапты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресСервера.Значение КАК АдресСервера,
	|	БазаДанных.Значение КАК БазаДанных,
	|	ИмяПользователя.Значение КАК ИмяПользователя,
	|	Пароль.Значение КАК Пароль
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
	|ГДЕ
	|	АдресСервера.ИмяНастройки = ""АдресСервера""
	|	И БазаДанных.ИмяНастройки = ""БазаДанных""
	|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя""
	|	И Пароль.ИмяНастройки = ""Пароль""
	|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
	|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
	|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
	|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
	ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
	Пароль = ВыборкаДетальныеЗаписи.Пароль;
	База = ВыборкаДетальныеЗаписи.БазаДанных;
	
	СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 
	
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
	СоединениеАДО.ConnectionTimeOut = 600; 
	СоединениеАДО.CommandTimeOut = 600; 
	СоединениеАДО.CursorLocation = 3; 	

	Запрос = "
	|SELECT 
	|[E1COrderId]
	|,[SourceDate]
    |,[Voucher]
	|FROM ["+База+"].[dbo].[ExportDataTo1COrderTrans]
	// ++ БоровинскаяОА (СофтЛаб) 04.02.19 #3198
	//|where [Action] = '1' OR  [Action] = '3'  ";
	|where ([Action] = '1' OR  [Action] = '3') and [Voucher]<>'' ";
	// -- БоровинскаяОА (СофтЛаб) 04.02.19 #3198

	Попытка
		СоединениеАДО.Open(СтрокаСоединения); 
	Исключение 
		ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК",УровеньЖурналаРегистрации.Информация,,,"Не удалось выполнить подключение к базе "+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗапросВыполенен = ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка);
	
	КС = Новый КвалификаторыСтроки(20);
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ПромежуточнаяТаблица = Новый ТаблицаЗначений;
	ПромежуточнаяТаблица.Колонки.Добавить("Документ",Новый ОписаниеТипов("Строка",,КС));
	ПромежуточнаяТаблица.Колонки.Добавить("Месяц",Новый ОписаниеТипов("Дата",,,КД));
    ПромежуточнаяТаблица.Колонки.Добавить("НомерЗаявки",Новый ОписаниеТипов("Строка",,КС));
	
	Пока Не Выборка.EOF() Цикл 
		
		fields=FieldsСтруктура(Выборка.Fields);
			
		Если СтрДлина(fields.E1COrderId)>2 Тогда 
			
			Строка = ПромежуточнаяТаблица.Добавить();
			Строка.Месяц 		= НачалоМесяца(fields.SourceDate);
			Строка.НомерЗаявки 	= fields.E1COrderId;
			Строка.Документ		= fields.Voucher;
			
		КонецЕсли;
			
		Выборка.MoveNext(); 
		
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТЗ.Документ,
	                      |	ТЗ.НомерЗаявки,
	                      |	ТЗ.Месяц
	                      |ПОМЕСТИТЬ ВнешнийИсточникВрем
	                      |ИЗ
	                      |	&ТЗ КАК ТЗ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(бит_ФормаВводаБюджета.Ссылка) КАК НомерЗаявки,
	                      |	бит_ок_ОперацияАксапты.Ссылка КАК Документ,
	                      |	МАКСИМУМ(ВнешнийИсточникВрем.Месяц) КАК Месяц
	                      |ИЗ
	                      |	ВнешнийИсточникВрем КАК ВнешнийИсточникВрем
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	                      |		ПО ВнешнийИсточникВрем.НомерЗаявки = бит_ФормаВводаБюджета.Номер
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
	                      |		ПО ВнешнийИсточникВрем.Документ = бит_ок_ОперацияАксапты.Ваучер
	                      |ГДЕ
	                      |	ЕСТЬNULL(бит_ок_ОперацияАксапты.Ссылка, 0) <> 0
						  //|  И бит_ок_ОперацияАксапты.ОК_ID_Разноска >= ""8000-0000"" // вви 20160930
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	бит_ок_ОперацияАксапты.Ссылка");
	
	Запрос.УстановитьПараметр("ТЗ", ПромежуточнаяТаблица);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.бит_ДополнительныеДанныеПоОперациямАксапты.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(ТаблицаРезультат);
	НаборЗаписей.Записать();
	
	// Теперь нужно найти документы Операция аксапты, не оттранслированные в регистр Обороты по бюджетам
	
	// Анализируем данные за текущий месяц и 3 предыдущих, по организации Окей, по определенным счетам затрат.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -3), МЕСЯЦ) КАК НачалоПериода,
	|	КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ) КАК КонецПериода";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	ВыборкаДата = Запрос.Выполнить().Выбрать();
	ВыборкаДата.Следующий();
					  
	Запрос = Новый Запрос;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-16 (#3101)	
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументБУ
	//|ПОМЕСТИТЬ ВТ_СписокБУ
	//|ИЗ
	////|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&СписокСчетовДт), , СчетКт В ИЕРАРХИИ (&СписокСчетовКт), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	//// вви 201060921  +
	//| РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В ИЕРАРХИИ (&СписокСчетовДт), , СчетКт В ИЕРАРХИИ (&СписокСчетовКт), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт 
	//// вви 201060921
	//|ГДЕ	
	//|	ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.бит_ок_ОперацияАксапты
	//|   И ХозрасчетныйОборотыДтКт.Регистратор.ОК_ID_Разноска >= ""8000-0000"" // вви 20160930	
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_СписокБУ.ДокументБУ КАК ДокументБУ,            	
	//|	ВЫБОР
	//|		КОГДА бит_ОборотыПоБюджетамОбороты.Регистратор ЕСТЬ NULL 
	//|			ТОГДА 1
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Неоттранслированно
	//|ПОМЕСТИТЬ ВТ_Сопоставление
	//|ИЗ
	//|	ВТ_СписокБУ КАК ВТ_СписокБУ
	////|		Левое СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(Регистратор.Дата, Регистратор.Дата, Регистратор, ) КАК бит_ОборотыПоБюджетамОбороты   // вви 20160930
	//|		Левое СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(,, Регистратор, ) КАК бит_ОборотыПоБюджетамОбороты     // вви 20160930
	//|		ПО ВТ_СписокБУ.ДокументБУ = бит_ОборотыПоБюджетамОбороты.Регистратор
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_Сопоставление.ДокументБУ
	//|ИЗ
	//|	ВТ_Сопоставление КАК ВТ_Сопоставление
	//|ГДЕ
	//|	ВТ_Сопоставление.Неоттранслированно = 1";	
	//Заменено на:
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-11 (#3202)  доработки по 3101
	
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	бит_ок_ОперацияАксапты.Ссылка КАК ДокументБУ
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	//|			ПО бит_ок_ОперацияАксапты.Ссылка = бит_ОборотыПоБюджетам.Регистратор И бит_ОборотыПоБюджетам.Активность = Истина
	//|		ПО ((ВЫРАЗИТЬ(Хозрасчетный.Регистратор КАК Документ.бит_ок_ОперацияАксапты)) = бит_ок_ОперацияАксапты.Ссылка)
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеДанныеПоОперациямАксапты КАК бит_ДополнительныеДанныеПоОперациямАксапты
	//|		ПО (Выразить(Хозрасчетный.Регистратор КАК Документ.бит_ок_ОперацияАксапты) = бит_ДополнительныеДанныеПоОперациямАксапты.Документ)
	//|ГДЕ
	//|	бит_ОборотыПоБюджетам.Регистратор ЕСТЬ NULL
	//|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	//|	И Хозрасчетный.Активность
	//|	И Хозрасчетный.Организация = &Организация
	//|	И бит_ок_ОперацияАксапты.Проведен
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	бит_ок_ОперацияАксапты.Ссылка";	
	
	//Заменено на:
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_ДополнительныеДанныеПоОперациямАксапты.Документ КАК ДокументБУ
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеДанныеПоОперациямАксапты КАК бит_ДополнительныеДанныеПоОперациямАксапты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО бит_ДополнительныеДанныеПоОперациямАксапты.Документ = Хозрасчетный.Регистратор
	|			И (Хозрасчетный.Активность = ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	|		ПО бит_ДополнительныеДанныеПоОперациямАксапты.Документ = бит_ОборотыПоБюджетам.Регистратор
	|ГДЕ
	|	бит_ОборотыПоБюджетам.Регистратор ЕСТЬ NULL
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
	|	И бит_ДополнительныеДанныеПоОперациямАксапты.Документ ССЫЛКА Документ.бит_ок_ОперацияАксапты
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
	|	И Хозрасчетный.Организация = &Организация
	|	И бит_ДополнительныеДанныеПоОперациямАксапты.Документ.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ДополнительныеДанныеПоОперациямАксапты.Документ";
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-11 (#3202) доработки по 3101
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-16 (#3101)
	Запрос.УстановитьПараметр("НачалоПериода",ВыборкаДата.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ВыборкаДата.КонецПериода);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-15 (#3101)
	//СписокСчетовДт = Новый СписокЗначений;
	//// вви 201060921  +
	//СписокСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.Материалы);   
	//СписокСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	//// вви 201060921
	//СписокСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	//СписокСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	//СписокСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	//СписокСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	//СписокСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
	//СписокСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходы);
	//СписокСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	//
	//Запрос.УстановитьПараметр("СписокСчетовДт", СписокСчетовДт);
	//
	//СписокСчетовКт = Новый СписокЗначений;
	//СписокСчетовКт.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	//СписокСчетовКт.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	//
	//Запрос.УстановитьПараметр("СписокСчетовКт", СписокСчетовКт);
	//// Использование поиска организации по коду для данной конфигурации типично.	
	//Запрос.УстановитьПараметр("Организация",Справочники.Организации.НайтиПоКоду("000000045"));
	//Заменено на:	
	ПредопределенныеОрганизации = СБ_КазначействоСервер.ПредопределенныеОрганизации();
	Запрос.УстановитьПараметр("Организация"	,	ПредопределенныеОрганизации["Организация ОКЕЙ"]);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-15 (#3101)
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		// Есть документы для трансляции, обработаем их.
		ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК",УровеньЖурналаРегистрации.Информация,,,"Начало выполнения групповой трансляции");
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-16 (#3101)
		//ВыборкаОперацииАксапты = Результат.Выбрать();
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-16 (#3101)
		
		// Есть ограничения по регистрам, участвующим в обработке
		МассивИсточники = Новый Массив;
		Источник = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное","РегистрНакопления.бит_ок_ОборотыАксапты");
		Если ЗначениеЗаполнено(Источник) Тогда
			МассивИсточники.Добавить(Источник);
		КонецЕсли;
		МассивПриемники = Новый Массив;
		Приемник = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное","РегистрНакопления.бит_ОборотыПоБюджетам");
		Если ЗначениеЗаполнено(Приемник) Тогда
			МассивПриемники.Добавить(Приемник);
		КонецЕсли;
		Приемник = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное","РегистрНакопления.бит_КонтрольныеЗначенияБюджетов");
		Если ЗначениеЗаполнено(Приемник) Тогда
			МассивПриемники.Добавить(Приемник);
		КонецЕсли;

		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-16 (#3101)		
		//Пока ВыборкаОперацииАксапты.Следующий() Цикл
		//	ОбъектСсылка   = ВыборкаОперацииАксапты.ДокументБУ;
		//	ДокументОбъект = ОбъектСсылка.ПолучитьОбъект();
		//	
			//// Если объект не проведён
			//Если Не ОбъектСсылка.Проведен Тогда
			//	Продолжить;		
			//КонецЕсли;			
			////Довбешка 22.09.2016 +
			//НаборОАх = РегистрыСведений.бит_ДополнительныеДанныеПоОперациямАксапты.СоздатьНаборЗаписей();
			//НаборОАх.Отбор.Документ.Установить(ОбъектСсылка);
			//НаборОАх.Прочитать();  // вви 20160930
			//Если НаборОАх.Количество() = 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			////Довбешка 22.09.2016			
			//Отказ = Ложь;
			//
			//Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда			
			//	// При наличиии механизма контроля закрытого периода сохраним движения для последующего анализа
			//	бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
			//КонецЕсли;
			//
			//РезДанные = бит_МеханизмТрансляции.ВыполнитьТрансляцию(ДокументОбъект, МассивИсточники, МассивПриемники, Истина, Перечисления.бит_РежимыТрансляции.Ручной);
			//
			//Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда			
			//	// При наличиии механизма контроля закрытого периода сформируем корректирующие проводки			
			//	бит_КонтрольЗакрытогоПериода.КонтрольПриОбработкеПроведения(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, Истина);	
			//КонецЕсли;	
			//
			//Если ДокументОбъект.Заблокирован() Тогда	
			//	ДокументОбъект.Разблокировать(); 	
			//КонецЕсли;		
		//КонецЦикла;
		//Заменено на:
		//Проверки выше вынес в запрос, а код по трансляции в отдельную процедуру
		ОК_ОбщегоНазначения.ВыполнитьТрансляциюОперацийАксаптыВРегистрыБК(Результат.Выгрузить().ВыгрузитьКолонку("ДокументБУ"), МассивИсточники, МассивПриемники);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-16 (#3101)
		ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК",УровеньЖурналаРегистрации.Информация,,,"Окончание выполнения групповой трансляции");
	Иначе
		ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК",УровеньЖурналаРегистрации.Информация,,,"Документов к обработке нет");
	КонецЕсли;
	ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК",УровеньЖурналаРегистрации.Информация,,,"Окончание задания");	

	
КонецПроцедуры // БИТ_YK_к

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-23 (#3621)
Процедура ТрансляцияОперацийАксаптыВРегистрыБК_БезУстановкиСвязиПоФВБ() Экспорт
	
	Перем Выборка;	
	
	ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК ( (без установки связи по ФВБ)",УровеньЖурналаРегистрации.Информация,,,"Начало задания");
	
	// Анализируем данные за текущий месяц и 3 предыдущих, по организации Окей, по определенным счетам затрат.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -3), МЕСЯЦ) КАК НачалоПериода,
	|	КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ) КАК КонецПериода";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	ВыборкаДата = Запрос.Выполнить().Выбрать();
	ВыборкаДата.Следующий();
					  
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_ДополнительныеДанныеПоОперациямАксапты.Документ КАК ДокументБУ
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеДанныеПоОперациямАксапты КАК бит_ДополнительныеДанныеПоОперациямАксапты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО бит_ДополнительныеДанныеПоОперациямАксапты.Документ = Хозрасчетный.Регистратор
	|			И (Хозрасчетный.Активность = ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	|		ПО бит_ДополнительныеДанныеПоОперациямАксапты.Документ = бит_ОборотыПоБюджетам.Регистратор
	|ГДЕ
	|	бит_ОборотыПоБюджетам.Регистратор ЕСТЬ NULL
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
	|	И бит_ДополнительныеДанныеПоОперациямАксапты.Документ ССЫЛКА Документ.бит_ок_ОперацияАксапты
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода	
	|	И Хозрасчетный.Организация = &Организация
	|	И бит_ДополнительныеДанныеПоОперациямАксапты.Документ.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ДополнительныеДанныеПоОперациямАксапты.Документ";
	
	Запрос.УстановитьПараметр("НачалоПериода",ВыборкаДата.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ВыборкаДата.КонецПериода);

	ПредопределенныеОрганизации = СБ_КазначействоСервер.ПредопределенныеОрганизации();
	Запрос.УстановитьПараметр("Организация"	,	ПредопределенныеОрганизации["Организация ОКЕЙ"]);	
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		// Есть документы для трансляции, обработаем их.
		ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК",УровеньЖурналаРегистрации.Информация,,,"Начало выполнения групповой трансляции");
		
		// Есть ограничения по регистрам, участвующим в обработке
		МассивИсточники = Новый Массив;
		Источник = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное","РегистрНакопления.бит_ок_ОборотыАксапты");
		Если ЗначениеЗаполнено(Источник) Тогда
			МассивИсточники.Добавить(Источник);
		КонецЕсли;
		МассивПриемники = Новый Массив;
		Приемник = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное","РегистрНакопления.бит_ОборотыПоБюджетам");
		Если ЗначениеЗаполнено(Приемник) Тогда
			МассивПриемники.Добавить(Приемник);
		КонецЕсли;
		Приемник = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное","РегистрНакопления.бит_КонтрольныеЗначенияБюджетов");
		Если ЗначениеЗаполнено(Приемник) Тогда
			МассивПриемники.Добавить(Приемник);
		КонецЕсли;

		//Проверки выше вынес в запрос, а код по трансляции в отдельную процедуру
		ОК_ОбщегоНазначения.ВыполнитьТрансляциюОперацийАксаптыВРегистрыБК(Результат.Выгрузить().ВыгрузитьКолонку("ДокументБУ"), МассивИсточники, МассивПриемники);
		ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК ( (без установки связи по ФВБ)",УровеньЖурналаРегистрации.Информация,,,"Окончание выполнения групповой трансляции");
	Иначе
		ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК ( (без установки связи по ФВБ)",УровеньЖурналаРегистрации.Информация,,,"Документов к обработке нет");
	КонецЕсли;
	ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК ( (без установки связи по ФВБ)",УровеньЖурналаРегистрации.Информация,,,"Окончание задания");	
	
КонецПроцедуры

Процедура СвязкаОперацийАксаптыСФВБ(МассивДокументовОА = Неопределено) Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-19 (#3415)
	
	Перем Выборка;	
	
	ЗаписьЖурналаРегистрации("Уставнока связи операций аксапты с ФВБ",УровеньЖурналаРегистрации.Информация,,,"Начало задания");

	// Получим данные из внешнего источника для заполнения регистра сведений бит_ДополнительныеДанныеПоОперациямАксапты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресСервера.Значение КАК АдресСервера,
	|	БазаДанных.Значение КАК БазаДанных,
	|	ИмяПользователя.Значение КАК ИмяПользователя,
	|	Пароль.Значение КАК Пароль
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
	|ГДЕ
	|	АдресСервера.ИмяНастройки = ""АдресСервера""
	|	И БазаДанных.ИмяНастройки = ""БазаДанных""
	|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя""
	|	И Пароль.ИмяНастройки = ""Пароль""
	|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
	|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
	|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
	|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
	ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
	Пароль = ВыборкаДетальныеЗаписи.Пароль;
	База = ВыборкаДетальныеЗаписи.БазаДанных;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-19 (#3415)
	ТекстОтбораДанных = "";
	Если МассивДокументовОА <> Неопределено Тогда 
		Для Каждого ТекущийДокумент Из МассивДокументовОА Цикл 
			Если ЗначениеЗаполнено(ТекущийДокумент.Ваучер) Тогда
				
				ТекстОтбораДанных = ТекстОтбораДанных + ?(ТекстОтбораДанных = "", "", " or ") + "[Voucher]='" + ТекущийДокумент.Ваучер + "'";
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-19 (#3415)
	
	СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 
	
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
	СоединениеАДО.ConnectionTimeOut = 600; 
	СоединениеАДО.CommandTimeOut = 600; 
	СоединениеАДО.CursorLocation = 3; 	

	Запрос = "
	|SELECT 
	|[E1COrderId]
	|,[SourceDate]
    |,[Voucher]
	|FROM ["+База+"].[dbo].[ExportDataTo1COrderTrans]
	|where ([Action] = '1' OR  [Action] = '3') and [Voucher]<>'' ";
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-19 (#3415)
	Если ТекстОтбораДанных <> "" Тогда
		Запрос = Запрос + " and (" + ТекстОтбораДанных + ")";
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-19 (#3415)

	Попытка
		СоединениеАДО.Open(СтрокаСоединения); 
	Исключение 
		ЗаписьЖурналаРегистрации("Уставнока связи операций аксапты с ФВБ",УровеньЖурналаРегистрации.Информация,,,"Не удалось выполнить подключение к базе "+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗапросВыполенен = ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка);
	
	КС = Новый КвалификаторыСтроки(20);
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ПромежуточнаяТаблица = Новый ТаблицаЗначений;
	ПромежуточнаяТаблица.Колонки.Добавить("Документ",Новый ОписаниеТипов("Строка",,КС));
	ПромежуточнаяТаблица.Колонки.Добавить("Месяц",Новый ОписаниеТипов("Дата",,,КД));
    ПромежуточнаяТаблица.Колонки.Добавить("НомерЗаявки",Новый ОписаниеТипов("Строка",,КС));
	
	Пока Не Выборка.EOF() Цикл 
		
		fields=FieldsСтруктура(Выборка.Fields);
			
		Если СтрДлина(fields.E1COrderId)>2 Тогда 
			
			Строка = ПромежуточнаяТаблица.Добавить();
			Строка.Месяц 		= НачалоМесяца(fields.SourceDate);
			Строка.НомерЗаявки 	= fields.E1COrderId;
			Строка.Документ		= fields.Voucher;
			
		КонецЕсли;
			
		Выборка.MoveNext(); 
		
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТЗ.Документ,
	                      |	ТЗ.НомерЗаявки,
	                      |	ТЗ.Месяц
	                      |ПОМЕСТИТЬ ВнешнийИсточникВрем
	                      |ИЗ
	                      |	&ТЗ КАК ТЗ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(бит_ФормаВводаБюджета.Ссылка) КАК НомерЗаявки,
	                      |	бит_ок_ОперацияАксапты.Ссылка КАК Документ,
	                      |	МАКСИМУМ(ВнешнийИсточникВрем.Месяц) КАК Месяц
	                      |ИЗ
	                      |	ВнешнийИсточникВрем КАК ВнешнийИсточникВрем
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	                      |		ПО ВнешнийИсточникВрем.НомерЗаявки = бит_ФормаВводаБюджета.Номер
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
	                      |		ПО ВнешнийИсточникВрем.Документ = бит_ок_ОперацияАксапты.Ваучер
	                      |ГДЕ
	                      |	ЕСТЬNULL(бит_ок_ОперацияАксапты.Ссылка, 0) <> 0
						  //|  И бит_ок_ОперацияАксапты.ОК_ID_Разноска >= ""8000-0000"" // вви 20160930
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	бит_ок_ОперацияАксапты.Ссылка");
	
	Запрос.УстановитьПараметр("ТЗ", ПромежуточнаяТаблица);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-19 (#3415)
	Если МассивДокументовОА <> Неопределено Тогда 
		Для Каждого СтрокаТЗ Из ТаблицаРезультат Цикл 
			МенеджерЗаписи = РегистрыСведений.бит_ДополнительныеДанныеПоОперациямАксапты.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	Иначе
		НаборЗаписей = РегистрыСведений.бит_ДополнительныеДанныеПоОперациямАксапты.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ТаблицаРезультат);
		НаборЗаписей.Записать();
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-19 (#3415)

	ЗаписьЖурналаРегистрации("Уставнока связи операций аксапты с ФВБ",УровеньЖурналаРегистрации.Информация,,,"Окончание задания");	

КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-23 (#3621)

// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487) 
Процедура ок_ВыгрузкаКонтрагентовДоговоровАксапта() Экспорт
	
	// зафиксируем начало работы РЗ
	СинонимРЗ = Метаданные.РегламентныеЗадания.ок_ВыгрузкаКонтрагентовДоговоровАксапта.Синоним;
	ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,, "Начало выгрузки");
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ок_ВыгрузкаКонтрагентовДоговоровАксапта);
	
	ИсточникЗагрузки = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты", "Источник загрузки");	
	Если Не ЗначениеЗаполнено(ИсточникЗагрузки) Тогда 
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru = 'В настройках не указан источник загрузки. Задание прервано.'"));
		Возврат;
	КонецЕсли;   	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	РегистрацияИзмененийОбъектов.Объект КАК Контрагент,
	|	NULL КАК Договор,
	|	РегистрацияИзмененийОбъектов.Новый КАК Новый,
	|	РегистрацияИзмененийОбъектов.ок_БлокировкаОплаты КАК БлокировкаОплаты
	|ПОМЕСТИТЬ втОрганизацииКонтрагентыДоговоры
	|ИЗ
	|	РегистрСведений.бит_РегистрацияИзмененийОбъектов КАК РегистрацияИзмененийОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО РегистрацияИзмененийОбъектов.Объект = ДоговорыКонтрагентов.Владелец
	|			И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|ГДЕ
	|	РегистрацияИзмененийОбъектов.Объект ССЫЛКА Справочник.Контрагенты
	|	И РегистрацияИзмененийОбъектов.ДатаИзменения > ДАТАВРЕМЯ(2019, 9, 1)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-20 (#МДМ)
	|	И (НЕ &ИнтеграцияКонтрагентовИДоговоровВключена_МДМ 
	|		ИЛИ ДоговорыКонтрагентов.Организация <> &Окей)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-20 (#МДМ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Организация,
	|	РегистрацияИзмененийОбъектов.Объект.Владелец,
	|	ДоговорыКонтрагентов.Ссылка,
	|	РегистрацияИзмененийОбъектов.Новый,
	|	РегистрацияИзмененийОбъектов.ок_БлокировкаОплаты
	|ИЗ
	|	РегистрСведений.бит_РегистрацияИзмененийОбъектов КАК РегистрацияИзмененийОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО РегистрацияИзмененийОбъектов.Объект = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	РегистрацияИзмененийОбъектов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|	И РегистрацияИзмененийОбъектов.ДатаИзменения > ДАТАВРЕМЯ(2019, 9, 1)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-20 (#МДМ)
	|	И (НЕ &ИнтеграцияКонтрагентовИДоговоровВключена_МДМ 
	|		ИЛИ ДоговорыКонтрагентов.Организация <> &Окей)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-20 (#МДМ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОрганизацииКонтрагентыДоговоры.Организация КАК Организация,
	|	втОрганизацииКонтрагентыДоговоры.Контрагент КАК Контрагент,
	|	втОрганизацииКонтрагентыДоговоры.Договор КАК Договор,
	|	втОрганизацииКонтрагентыДоговоры.Новый КАК Новый,
	|	втОрганизацииКонтрагентыДоговоры.БлокировкаОплаты КАК БлокировкаОплаты,
	|	ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаНаименование КАК ДатаНаименование,
	|	ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаНаименованиеПолное КАК ДатаНаименованиеПолное,
	|	ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаЮридическийАдрес КАК ДатаЮридическийАдрес,
	|	ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаИНН КАК ДатаИНН,
	|	ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаКПП КАК ДатаКПП,
	|	Контрагенты.Код КАК КодКонтрагента,
	|	Контрагенты.НомДокИмпорт КАК НомДокИмпорт,
	|	Контрагенты.НомДокИмпорт2 КАК НомДокИмпорт2,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	ТабКонтактнаяИнформация.Адрес КАК Адрес,
	|	ТабКонтактнаяИнформация.Телефон КАК Телефон,
	|	ВЫБОР
	|		КОГДА втОрганизацииКонтрагентыДоговоры.Организация = &ОкейЛоджистикс
	|				И ЕСТЬNULL(втОрганизацииКонтрагентыДоговоры.БлокировкаОплаты, ЛОЖЬ)
	|			ТОГДА 3
	|		КОГДА Контрагенты.бит_Статус = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.Проверено)
	|			ТОГДА 0
	|		КОГДА Контрагенты.бит_Статус = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.Рабочий)
	|			ТОГДА 1
	|		КОГДА Контрагенты.бит_Статус = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе)
	|			ТОГДА 2
	|		КОГДА Контрагенты.бит_Статус = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.БлокированыОплаты)
	|			ТОГДА 3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Статус,
	|	""1C"" КАК Источник,
	|	ЕСТЬNULL(ТабКонтактнаяИнформация.ЭлАдресБух, """") КАК ЭлАдресБух,
	|	ЕСТЬNULL(ТабКонтактнаяИнформация.ЭлАдресЗаказ, """") КАК ЭлАдресЗаказ,
	|	ЕСТЬNULL(ТабКонтактнаяИнформация.Факс, """") КАК Факс,
	|	Контрагенты.бит_ГруппаПоставщиков КАК ГруппаПоставщиков,
	|	Контрагенты.бит_ГруппаКлиентов КАК ГруппаКлиентов,
	|	Контрагенты.бит_ВнешнийКодSoftSolution КАК ВнешнийКодSoftSolution,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮрФизЛицо,
	|	ДоговорыКонтрагентов.Код КАК КодДоговора,
	|	ПОДСТРОКА(ДоговорыКонтрагентов.ВалютаВзаиморасчетов.Наименование, 1, 3) КАК ВалютаРасчетов,
	|	КодАксапты.КодАналитикиАксапты КАК КодАналитикиАксапты,
	|	ДоговорыКонтрагентов.СБ_ПрофильРазноски КАК СБ_ПрофильРазноски,
	|	ДоговорыКонтрагентов.бит_НаправлениеДоговора КАК НаправлениеДоговора,
	|	ДоговорыКонтрагентов.бит_НаправлениеДоговора.Наименование КАК НаправлениеДоговораНаименование,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ТОГДА 0
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА 1
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)
	|			ТОГДА 2
	|	КОНЕЦ КАК ВидДоговора,
	|	ДоговорыКонтрагентов.Дата КАК Дата,
	|	ДоговорыКонтрагентов.Номер КАК Номер,
	|	ДоговорыКонтрагентов.ДатаВозникновенияОбязательства КАК ДатаВозникновенияОбязательства,
	|	ДоговорыКонтрагентов.ДатаПогашенияОбязательства КАК ДатаПогашенияОбязательства,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ТОГДА втОрганизацииКонтрагентыДоговоры.Контрагент.НомДокИмпорт
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА втОрганизацииКонтрагентыДоговоры.Контрагент.НомДокИмпорт2
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)
	|			ТОГДА втОрганизацииКонтрагентыДоговоры.Контрагент.НомДокИмпорт
	|	КОНЕЦ КАК ВладелецКодАксапта,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.бит_СтадияДоговора = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Подготовка)
	|			ТОГДА 0
	|		КОГДА ДоговорыКонтрагентов.бит_СтадияДоговора = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Исполнение)
	|			ТОГДА 1
	|		КОГДА ДоговорыКонтрагентов.бит_СтадияДоговора = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Закрыт)
	|			ТОГДА 2
	|		КОГДА ДоговорыКонтрагентов.бит_СтадияДоговора = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Замечания)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтадияДоговора,
	|	ДоговорыКонтрагентов.бит_ПредметДоговора КАК бит_ПредметДоговора,
	|	ДоговорыКонтрагентов.бит_ВнешнийКодКонтракта КАК бит_ВнешнийКодКонтракта,
	|	ДоговорыКонтрагентов.бит_НомерАХ КАК НомерАХ,
	|	ДоговорыКонтрагентов.Ок_ПересчетКурса КАК ПересчетКурса,
	|	ДоговорыКонтрагентов.бит_RECID КАК RECID
	|ИЗ
	|	втОрганизацииКонтрагентыДоговоры КАК втОрганизацииКонтрагентыДоговоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				КонтактнаяИнформация.Объект КАК Объект,
	|				КонтактнаяИнформация.Адрес КАК Адрес,
	|				КонтактнаяИнформация.Телефон КАК Телефон,
	|				КонтактнаяИнформация.ЭлАдресБух КАК ЭлАдресБух,
	|				КонтактнаяИнформация.ЭлАдресЗаказ КАК ЭлАдресЗаказ,
	|				КонтактнаяИнформация.Факс КАК Факс
	|			ИЗ
	|				(ВЫБРАТЬ
	|					КИ.Объект КАК Объект,
	|					МАКСИМУМ(КИ.Адрес) КАК Адрес,
	|					МАКСИМУМ(КИ.Телефон) КАК Телефон,
	|					МАКСИМУМ(КИ.ЭлАдресБух) КАК ЭлАдресБух,
	|					МАКСИМУМ(КИ.ЭлАдресЗаказ) КАК ЭлАдресЗаказ,
	|					МАКСИМУМ(КИ.Факс) КАК Факс
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ВЫРАЗИТЬ(Адрес.Представление КАК СТРОКА(250)) КАК Адрес,
	|						Адрес.Ссылка КАК Объект,
	|						NULL КАК Телефон,
	|						NULL КАК ЭлАдресБух,
	|						NULL КАК ЭлАдресЗаказ,
	|						NULL КАК Факс
	|					ИЗ
	|						Справочник.Контрагенты.КонтактнаяИнформация КАК Адрес
	|					ГДЕ
	|						Адрес.Тип = &ТипАдрес
	|						И Адрес.Вид = &ВидАдрес
	|					
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						NULL,
	|						Телефон.Ссылка,
	|						ВЫРАЗИТЬ(Телефон.Представление КАК СТРОКА(20)),
	|						NULL,
	|						NULL,
	|						NULL
	|					ИЗ
	|						Справочник.Контрагенты.КонтактнаяИнформация КАК Телефон
	|					ГДЕ
	|						Телефон.Тип = &ТипТелефон
	|						И Телефон.Вид = &ВидТелефон
	|					
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						NULL,
	|						ЭлПочтаБух.Ссылка,
	|						NULL,
	|						ВЫРАЗИТЬ(ЭлПочтаБух.Представление КАК СТРОКА(150)),
	|						NULL,
	|						NULL
	|					ИЗ
	|						Справочник.Контрагенты.КонтактнаяИнформация КАК ЭлПочтаБух
	|					ГДЕ
	|						ЭлПочтаБух.Тип = &ТипЭлПочта
	|						И ЭлПочтаБух.Вид = &ВидЭлПочтаБух
	|					
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						NULL,
	|						ЭлПочтаЗаказ.Ссылка,
	|						NULL,
	|						NULL,
	|						ВЫРАЗИТЬ(ЭлПочтаЗаказ.Представление КАК СТРОКА(150)),
	|						NULL
	|					ИЗ
	|						Справочник.Контрагенты.КонтактнаяИнформация КАК ЭлПочтаЗаказ
	|					ГДЕ
	|						ЭлПочтаЗаказ.Тип = &ТипЭлПочта
	|						И ЭлПочтаЗаказ.Вид = &ВидЭлПочтаЗаказ
	|					
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						NULL,
	|						КонтактнаяИнформация.Ссылка,
	|						NULL,
	|						NULL,
	|						NULL,
	|						ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(20))
	|					ИЗ
	|						Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
	|					ГДЕ
	|						КонтактнаяИнформация.Тип = &ТипТелефон
	|						И КонтактнаяИнформация.Вид = &ВидФакс) КАК КИ
	|				
	|				СГРУППИРОВАТЬ ПО
	|					КИ.Объект) КАК КонтактнаяИнформация) КАК ТабКонтактнаяИнформация
	|			ПО Контрагенты.Ссылка = ТабКонтактнаяИнформация.Объект
	|		ПО втОрганизацииКонтрагентыДоговоры.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ИсторияИзмененияРеквизитовКонтрагентов.СрезПоследних(
	|				,
	|				Контрагент В
	|					(ВЫБРАТЬ
	|						втОрганизацииКонтрагентыДоговоры.Контрагент
	|					ИЗ
	|						втОрганизацииКонтрагентыДоговоры КАК втОрганизацииКонтрагентыДоговоры)) КАК ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних
	|		ПО втОрганизацииКонтрагентыДоговоры.Контрагент = ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СтатьиРегДДС.Ссылка КАК Ссылка,
	|				СопоставлениеАналитикиОтбор51счет.КодАналитикиАксапты КАК КодАналитикиАксапты
	|			ИЗ
	|				(ВЫБРАТЬ
	|					СтатьиБДДС.Ссылка КАК Ссылка,
	|					бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл КАК СтатьяРегл
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ДоговорыКонтрагентовбит_СтатьиОборотов.СтатьяОборотов КАК СтатьяОборотов,
	|						ДоговорыКонтрагентовбит_СтатьиОборотов.Ссылка КАК Ссылка
	|					ИЗ
	|						Справочник.ДоговорыКонтрагентов.бит_СтатьиОборотов КАК ДоговорыКонтрагентовбит_СтатьиОборотов
	|					ГДЕ
	|						ДоговорыКонтрагентовбит_СтатьиОборотов.СтатьяОборотов.ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДДС)) КАК СтатьиБДДС
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	|						ПО СтатьиБДДС.СтатьяОборотов = бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов) КАК СтатьиРегДДС
	|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						бит_ок_СопоставлениеАналитики.СчетАксапты КАК СчетАксапты,
	|						бит_ок_СопоставлениеАналитики.КодАналитикиАксапты КАК КодАналитикиАксапты,
	|						бит_ок_СопоставлениеАналитики.Организация КАК Организация,
	|						бит_ок_СопоставлениеАналитики.Аналитика1С КАК Аналитика1С,
	|						бит_ок_СопоставлениеАналитики.Тип1С КАК Тип1С
	|					ИЗ
	|						РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
	|					ГДЕ
	|						бит_ок_СопоставлениеАналитики.СчетАксапты = ""51"") КАК СопоставлениеАналитикиОтбор51счет
	|					ПО СтатьиРегДДС.Ссылка.Организация = СопоставлениеАналитикиОтбор51счет.Организация
	|						И СтатьиРегДДС.СтатьяРегл = СопоставлениеАналитикиОтбор51счет.Аналитика1С) КАК КодАксапты
	|			ПО (КодАксапты.Ссылка = ДоговорыКонтрагентов.Ссылка)
	|		ПО втОрганизацииКонтрагентыДоговоры.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	втОрганизацииКонтрагентыДоговоры.Организация В
	|			(ВЫБРАТЬ
	|				бит_ок_НастройкиМеханизмаИмпортаДанных.Значение КАК Значение
	|			ИЗ
	|				РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	|			ГДЕ
	|				бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа
	|				И бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки В (&СписокИменНастроекОтбора))
	|	И ВЫБОР
	|			КОГДА втОрганизацииКонтрагентыДоговоры.Организация = &ОкейЛоджистикс
	|					И ЕСТЬNULL(втОрганизацииКонтрагентыДоговоры.БлокировкаОплаты, ЛОЖЬ)
	|				ТОГДА 3
	|			КОГДА Контрагенты.бит_Статус = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.Проверено)
	|				ТОГДА 0
	|			КОГДА Контрагенты.бит_Статус = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.Рабочий)
	|				ТОГДА 1
	|			КОГДА Контрагенты.бит_Статус = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе)
	|				ТОГДА 2
	|			КОГДА Контрагенты.бит_Статус = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.БлокированыОплаты)
	|				ТОГДА 3
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ <> НЕОПРЕДЕЛЕНО
	|ИТОГИ ПО
	|	Организация,
	|	Контрагент,
	|	Договор";
	
	Организация_Окей 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	Организация_ОкейЛоджистикс	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Лоджистикс");
	НастройкиПодключения		= РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.ок_ПолучитьНастройкиПодключенияАксапта();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-20 (#МДМ)
	ИнтеграцияКонтрагентовИДоговоровВключена_МДМ = ок_ВыгрузкаВАксапту.ИнтеграцияКонтрагентовИДоговоровВключена_МДМ();
	Запрос.УстановитьПараметр("ИнтеграцияКонтрагентовИДоговоровВключена_МДМ", ИнтеграцияКонтрагентовИДоговоровВключена_МДМ);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-20 (#МДМ)
	
	Запрос.УстановитьПараметр("ТипАдрес",					ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	Запрос.УстановитьПараметр("ВидАдрес", 					ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	Запрос.УстановитьПараметр("ТипТелефон",					ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	Запрос.УстановитьПараметр("ВидТелефон",					ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"));
	Запрос.УстановитьПараметр("ВидФакс",					Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00033"));
	Запрос.УстановитьПараметр("ТипЭлПочта",					ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	Запрос.УстановитьПараметр("ВидЭлПочтаЗаказ",			Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Заявка"));
	Запрос.УстановитьПараметр("ВидЭлПочтаБух",				Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Бухгалтерия"));
	Запрос.УстановитьПараметр("Группа", 					"Организации");
	Запрос.УстановитьПараметр("СписокИменНастроекОтбора", 	бит_Общий.ПолучитьСписокИменНастроекДляОтбораПоГруппеОрганизации());
	Запрос.УстановитьПараметр("ОкейЛоджистикс", 			Организация_ОкейЛоджистикс);
	Запрос.УстановитьПараметр("Окей", 						Организация_Окей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
		СоединениеАДО.ConnectionTimeOut = 20; 
		СоединениеАДО.ConnectionTimeOut = 600; 
		СоединениеАДО.CommandTimeOut = 600; 
		СоединениеАДО.CursorLocation = 3;
		
		ЗапросАДО = Новый COMОбъект("ADODB.Command");
		
		НаправлениеНЕУТВ = Справочники.бит_НаправленияДоговоров.НайтиПоНаименованию("НЕУТВ");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИсточникЗагрузки", 		бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты", "Источник загрузки"));
		СтруктураПараметров.Вставить("СинонимРЗ", 				СинонимРЗ);
		СтруктураПараметров.Вставить("Организация_Окей", 		Организация_Окей);
	    СтруктураПараметров.Вставить("ОбработатьПолеUE", 		бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты", "Обрабатывать поле ПересчетУЕ в договорах", Ложь));
	
	КонецЕсли;
	
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		Организация 		= ВыборкаОрганизация.Организация;
		
		СтруктураПараметров.Вставить("Организация", 			Организация);
		СтруктураПараметров.Вставить("НастройкиПодключения", 	НастройкиПодключения[Организация]);
		
		Если Не ок_ПодключитьВнешнийИсточникДанных(Организация, СтруктураПараметров, СоединениеАДО) Тогда
			Возврат; // не удалось подключиться, прерываем задание
		КонецЕсли;	
	
		ЗапросАДО.ActiveConnection = СоединениеАДО;	
		
		ВыборкаКонтрагент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			КонрагентВыгружен = Ложь;
			
			ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговор.Следующий() Цикл
				
				Выборка = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка.Следующий() Цикл
					
					// выгружаем контрагента тут, так как на уровне детальных записей все колонки заполнены
					Если Не КонрагентВыгружен Тогда
						Если ок_ВыгрузитьКонтрагентаВАксапта(Выборка, ЗапросАДО, СтруктураПараметров.НастройкиПодключения.БазаДанных) Тогда
							КонрагентВыгружен = Истина;
						Иначе
							ТекстСообщения = НСтр("ru = 'Неудачная выгрузка контрагента %1, 
							|причина: %2'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Контрагент, ОписаниеОшибки()); 
							ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
							// прерываем выгрузку
							Прервать;
						КонецЕсли;	
					КонецЕсли;	
					
					Если НЕ ЗначениеЗаполнено(Выборка.Договор) Тогда
						Продолжить;
					КонецЕсли;
					
					//Если Врег(ИсточникЗагрузки) = "AX" Тогда 
					//	
					//	Если ЗначениеЗаполнено(НаправлениеНЕУТВ) И Выборка.НаправлениеДоговора = НаправлениеНЕУТВ Тогда
					//		Если Выборка.ГруппаПоставщиков = ПредопределенноеЗначение("Перечисление.бит_ГруппаПоставщиков.ПМат") И Выборка.СБ_ПрофильРазноски = "60.01.02" Тогда
					//		Иначе	
					//			Продолжить; // не выгружаем договор
					//		КонецЕсли;	
					//	КонецЕсли;
					//	
					//КонецЕсли;
					
					// выгружаем договор
					Если ок_ВыгрузитьДоговорыКонтрагентаВАксапта(Выборка, ЗапросАДО, СтруктураПараметров, Организация_Окей) Тогда
						// удаляем договор из РС "бит_РегистрацияИзмененийОбъектов"
						РегистрыСведений.бит_РегистрацияИзмененийОбъектов.УдалитьЗапись(Выборка.Договор);
					Иначе
						// сообщить о пробелеме и прервать
						ТекстСообщения = НСтр("ru = 'Неудачная выгрузка договора %1, 
						|причина: %2'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Договор, ОписаниеОшибки()); 
						ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
					КонецЕсли;	
					
				КонецЦикла;
				
				Если Не КонрагентВыгружен Тогда
					Прервать;
				КонецЕсли;	
				
			КонецЦикла; 
			
			Если КонрагентВыгружен Тогда 
				// удалям контрагента из РС "бит_РегистрацияИзмененийОбъектов"
				РегистрыСведений.бит_РегистрацияИзмененийОбъектов.УдалитьЗапись(ВыборкаКонтрагент.Контрагент);
			КонецЕсли;	
			
		КонецЦикла; 
		
		СоединениеАДО.Close();
		
	КонецЦикла; 
	
	// зафиксируем окончание работы РЗ
	ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,,"Окончание выгрузки");
	
КонецПроцедуры

Функция ок_ВыгрузитьКонтрагентаВАксапта(Выборка, ЗапросАДО, База)
	
	ШапкаЗапросаSQLПоДоКонтрагентам	= "Insert into ["+База+"].[dbo].[CustVendTable_IMP] (
	|[CODE1C]
	|,[VendNum]
	|,[CustNum]
	|,[NAMEALIAS]
	|,[NAME]
	|,[ADDRESS]
	|,[INN]
	|,[KPP]
	|,[PHONE]
	|,[TELEFAX]
	|,[EMAILFINANCE]
	|,[EMAILPURCHORDER]
	|,[ACCOUNTSTATUS1C]
	|,[CodeSS]
	|,[Source]
	|,[VENDGroup]
	|,[CustGroup]
	|,[DATEMODNAME]
	|,[DateModNameAlias]
	|,[DATEMODINN]
	|,[DATEMODKPP]
	|,[DATEMODADDRESS]
	|,[OrganizationType])
	|VALUES";
	
	Код 				= Выборка.КодКонтрагента;
	Наименование 		= СтрЗаменить(Выборка.Наименование,"'","''");
	ПолнНаим 			= Лев(Выборка.НаименованиеПолное,140);
	ПолноеНаименование 	= СтрЗаменить(ПолнНаим,"'","''");
	ЮридическийАдрес 	= СтрЗаменить(Выборка.Адрес,"'","''");
	ИНН 				= Выборка.ИНН;
	КПП 				= Выборка.КПП;
	Телефон 			= Выборка.Телефон;
	Факс 				= Выборка.Факс; 
	ЭлПочатБух 			= Выборка.ЭлАдресБух;
	ЭлПочтаЗаказ 		= Выборка.ЭлАдресЗаказ;
	Статус 				= Формат(Выборка.Статус,"ЧН=0");
	НомДокИмпорт 		= Выборка.НомДокИмпорт;
	НомДокИмпорт2 		= Выборка.НомДокИмпорт2;
	ВнешнийКод 			= СтрЗаменить(Выборка.ВнешнийКодSoftSolution,"'","''");
	Источник 			= СтрЗаменить(Выборка.Источник,"'","''");
	Если ЗначениеЗаполнено(Выборка.ГруппаПоставщиков) Тогда 
		ЗначениеПеречисления 		= Выборка.ГруппаПоставщиков;
		ИмяПеречисления 			= ЗначениеПеречисления.Метаданные().Имя;
		ИндексЗначенияПеречисления 	= Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		ИмяЗначенияПеречисления 	= Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	Иначе 
		ИмяЗначенияПеречисления = "";
	КонецЕсли;
	
	ГруппаПоставщиков = ИмяЗначенияПеречисления ;
	Если ЗначениеЗаполнено(Выборка.ГруппаКлиентов) Тогда 
		ЗначениеПеречисления 		= Выборка.ГруппаКлиентов;
		ИмяПеречисления 			= ЗначениеПеречисления.Метаданные().Имя;
		ИндексЗначенияПеречисления 	= Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		ИмяЗначенияПеречисления 	= Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	Иначе 
		ИмяЗначенияПеречисления = "";
	КонецЕсли;
	
	ГруппаКлиентов 			= ИмяЗначенияПеречисления;
	ДатаНаименования 		= Формат(Выборка.ДатаНаименование, "ДФ=yyyy-MM-dd");
	ДатаНаименованиеПолное 	= Формат(Выборка.ДатаНаименованиеПолное, "ДФ=yyyy-MM-dd"); 
	ДатаИНН 				= Формат(Выборка.ДатаИНН, "ДФ=yyyy-MM-dd"); 
	ДатаКПП 				= Формат(Выборка.ДатаКПП, "ДФ=yyyy-MM-dd");
	ДатаАдреса 				= Формат(Выборка.ДатаЮридическийАдрес, "ДФ=yyyy-MM-dd");
	
	Если Выборка.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда 
		ТипОрганизации = 0;
	ИначеЕсли Выборка.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда  
		ТипОрганизации = 1;
	Иначе 
		ТипОрганизации = 2;
	КонецЕсли;
	
	СтрокиЗначений = ШапкаЗапросаSQLПоДоКонтрагентам+ "
	
	|('"+Код+"'
	|,'"+НомДокИмпорт +"'
	|,'"+НомДокИмпорт2 +"'
	|,'"+Наименование+"' 
	|,'"+ПолноеНаименование+"' 
	|,'"+ЮридическийАдрес+"' 
	|,'"+ИНН+"' 
	|,'"+КПП+"' 
	|,'"+Телефон+"'
	|,'"+Факс+"'
	|,'"+ЭлПочатБух+"'
	|,'"+ЭлПочтаЗаказ+"'
	|,"+Статус+"
	|,'"+ВнешнийКод+"'
	|,'"+Источник+"'
	|,'"+ГруппаПоставщиков+"'
	|,'"+ГруппаКлиентов+"'
	|,'"+ДатаНаименования+"'
	|,'"+ДатаНаименованиеПолное+"'
	|,'"+ДатаИНН+"'
	|,'"+ДатаКПП+"'
	|,'"+ДатаАдреса+"'
	|,"+ТипОрганизации+")"; 
	
	ЗапросАДО.CommandText = СтрокиЗначений;
	Попытка                                                 
		
		КолСтрок = 1;
		
		//Если Выборка.Новый Тогда
			КолСтрок = 2; // всегда пока два раза, так как могут сначала как новый записать, а потом добавят договор и перетрется новый	
		//КонецЕсли;
		
		Для НомерСтроки = 1 По КолСтрок Цикл
			РезультатЗагрузки = ЗапросАДО.Execute(); 
		КонецЦикла;
			
	Исключение
		Возврат Ложь;	
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ок_ВыгрузитьДоговорыКонтрагентаВАксапта(Выборка, ЗапросАДО, СтруктураПараметров, ОрганизацияОкей)
	
	База = СтруктураПараметров.НастройкиПодключения.БазаДанных;
	
	ШапкаЗапросаSQL	= "INSERT INTO "+База+".[dbo].[ContractTable_IMP] (
	| [CODE1C]
	|,[RContractAccount]
	|,[ContractRecId]
	|,[CURRENCYCODE]
	|,[DIMENSION2]
	|,[CONTRACTPOSTINGPROGILE]
	|,[RCONTRACTCODE]
	|,[RContractPartnerType]
	|,[RCONTRACTNUMBER]
	|,[CONTRACTDATE]
	|,[CONTRACTSTARTDATE]
	|,[CONTRACTENDDATE]
	|,[RCONTRACTPARTNERCODE]
	|,[RContractPartnerCode1C]
	|,[RCONTRACTSTATUS]
	|,[RCONTRACTSUBJECT]
	|,[CONTRACTIDEXT]" + 
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 03.10.2019 (#3497) 
	?(Выборка.Организация = ОрганизацияОкей И СтруктураПараметров.ОбработатьПолеUE, Символы.ПС + ",[UE]", "")
	+ "
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 03.10.2019 (#3497)
	|,[Source])
	|VALUES";
	
	СтрокиЗначений		= "";
	КодДоговора 		= Выборка.КодДоговора;
	ВалютаКод 			= Выборка.ВалютаРасчетов;
	СтатьяОборотов 		= Лев(Выборка.КодАналитикиАксапты,20);   
	ПрофильРазноски 	= Лев(Выборка.СБ_ПрофильРазноски,10);                     
	НаправлениеДоговора = Лев(Выборка.НаправлениеДоговора,10);         
	ВидДоговора 		= Выборка.ВидДоговора;            
	Номер 				= Выборка.Номер;			
	НомерАХ 			= Выборка.НомерАХ;
	RecId 				= Выборка.RECID;
	Если Не ЗначениеЗаполнено(Выборка.Дата) Тогда 
		ДатаОт = Дата(1,1,1);
	Иначе 
		ДатаОт = Дата(Выборка.Дата);
	КонецЕсли;
	От  = Формат(ДатаОт,"ДФ=yyyy-MM-dd");
	Если  Не ЗначениеЗаполнено(Выборка.ДатаВозникновенияОбязательства)Тогда 
		ДатаВозникновения = Дата(1,1,1);
	Иначе 
		ДатаВозникновения = Дата(Выборка.ДатаВозникновенияОбязательства);
	КонецЕсли;
	ДатаВозникновенияОбяз = Формат(ДатаВозникновения,"ДФ=yyyy-MM-dd");
	ВладелецКод = Лев(Выборка.КодКонтрагента,9);
	
	Если Не ЗначениеЗаполнено(Выборка.ДатаПогашенияОбязательства) Тогда 
		ДатаПогашения = Дата(1,1,1);
	Иначе 
		ДатаПогашения = Дата(Выборка.ДатаПогашенияОбязательства);
	КонецЕсли;
	
	ДатаПогашенияОбяз 		= Формат(ДатаПогашения,"ДФ=yyyy-MM-dd");
	ВладелецНомДокИмпорта 	= Выборка.ВладелецКодАксапта;
	СтадияДоговора 			= Формат(Выборка.СтадияДоговора,"ЧН=0");
	ПредметДоговора 		= Выборка.бит_ПредметДоговора;
	ВнешнийКодКонтракта 	= Выборка.бит_ВнешнийКодКонтракта;
	Иcточник 				= "1C";  
	
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 03.10.2019 (#3497) 
	ПересчетКурса = Число(Выборка.ПересчетКурса);
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 03.10.2019 (#3497)
	
	СтрокиЗначений = СтрокиЗначений + "
	|('"+ КодДоговора+
	"','"+НомерАХ+
	"','"+RecId+
	"','"+ВалютаКод+
	"','"+СтатьяОборотов+
	"','"+ПрофильРазноски+
	"','"+НаправлениеДоговора+
	"','"+ВидДоговора+
	"','"+Номер+
	"','"+От+
	"','"+ДатаВозникновенияОбяз+                  
	"','"+ДатаПогашенияОбяз+
	"','"+ВладелецНомДокИмпорта+
	"','"+ВладелецКод+
	"',"+СтадияДоговора +
	",'"+ПредметДоговора+
	"','"+ВнешнийКодКонтракта+
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 03.10.2019 (#3497) 
	?(Выборка.Организация = ОрганизацияОкей И СтруктураПараметров.ОбработатьПолеUE, "'," + ПересчетКурса, "'") + 
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 03.10.2019 (#3497)
	",'"+Иcточник+"'
	|)";	
	
	ЗапросАДО.CommandText = ШапкаЗапросаSQL + СтрокиЗначений;  
	
	Попытка
		РезультатЗагрузки = ЗапросАДО.Execute(); 
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Загрузка КА из Аксапта, используется для РЗ "бит_ЗагрузкаКонтрагентов"
//
Процедура ок_ЗагрузкаКонтрагентовИзАксапта() Экспорт
	
	// зафиксируем начало работы РЗ
	СинонимРЗ = Метаданные.РегламентныеЗадания.бит_ЗагрузкаКонтрагентов.Синоним;
	ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,, "Начало загрузки");
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.бит_ЗагрузкаКонтрагентов);
	
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
	СоединениеАДО.ConnectionTimeOut = 600; 
	СоединениеАДО.CommandTimeOut 	= 600; 
	СоединениеАДО.CursorLocation 	= 3;
	
	Организация_ОкейЛоджистикс 	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Лоджистикс");
	Организация_Окей 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	НастройкиПодключения		= РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.ок_ПолучитьНастройкиПодключенияАксапта();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникЗагрузки", 		бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты", "Источник загрузки"));
	СтруктураПараметров.Вставить("СинонимРЗ", 				СинонимРЗ);
	
	Если ЗначениеЗаполнено(Организация_ОкейЛоджистикс) Тогда
		
		СтруктураПараметров.Вставить("ПапкаПоискаКонтрагентов", бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Предопределенные группы", "Группа контрагентов Поставщики Лоджистикс"));
		
		// подключаемся к внешнему источнику данных
		// выполняем запрос и получаем данные
		СтруктураПараметров.Вставить("НастройкиПодключения", НастройкиПодключения[Организация_ОкейЛоджистикс]);		
		
		
		Если ок_ПодключитьВнешнийИсточникДанных(Организация_ОкейЛоджистикс, СтруктураПараметров, СоединениеАДО) Тогда
			ТабРезультат = Новый ТаблицаЗначений;
			// получим данные из внешнего источника в ТЗ
			Если ок_ПолучитьДанныеТаблицыКонтрагентов(СтруктураПараметров, СоединениеАДО, ТабРезультат) Тогда
				// обрабатываем данные	
				ок_ОбработатьДанныеКонтрагентовВнешнегоИсточникаДанных(ТабРезультат, СоединениеАДО, Организация_ОкейЛоджистикс, СтруктураПараметров);
				СоединениеАДО.Close();
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-21 (#МДМ)
	//Если ЗначениеЗаполнено(Организация_Окей) Тогда
	ИнтеграцияКонтрагентовИДоговоровВключена_МДМ = ок_ВыгрузкаВАксапту.ИнтеграцияКонтрагентовИДоговоровВключена_МДМ();
	Если ЗначениеЗаполнено(Организация_Окей) 
		И НЕ ИнтеграцияКонтрагентовИДоговоровВключена_МДМ Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-21 (#МДМ)
		
		СтруктураПараметров.Вставить("ПапкаПоискаКонтрагентов", бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Предопределенные группы", "Группа контрагентов Поставщики"));
		
		// подключаемся к внешнему источнику данных
		// выполняем запрос и получаем данные
		СтруктураПараметров.Вставить("НастройкиПодключения", НастройкиПодключения[Организация_Окей]);
			
		Если ок_ПодключитьВнешнийИсточникДанных(Организация_Окей, СтруктураПараметров, СоединениеАДО) Тогда
			ТабРезультат = Новый ТаблицаЗначений;
			// получим данные из внешнего источника в ТЗ
			Если ок_ПолучитьДанныеТаблицыКонтрагентов(СтруктураПараметров, СоединениеАДО, ТабРезультат) Тогда
				// обрабатываем данные	
				ок_ОбработатьДанныеКонтрагентовВнешнегоИсточникаДанных(ТабРезультат, СоединениеАДО, Организация_Окей, СтруктураПараметров);
				СоединениеАДО.Close();
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,, "Окончание загрузки");
	
КонецПроцедуры

Функция ок_ПодключитьВнешнийИсточникДанных(Организация, СтруктураПараметров, СоединениеАДО)
	
	СинонимРЗ				= СтруктураПараметров.СинонимРЗ;
	
	// получим параметры подключения
	Если Не ТипЗнч(СтруктураПараметров.НастройкиПодключения) = Тип("Структура") Тогда	
		ТекстСообщения = НСтр("ru = 'Нет настроек для подключения к Акспата для организации %1. Задание прервано.");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация); 
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураПараметров.НастройкиПодключения.СтрокаСоединения) Тогда
		ТекстСообщения = НСтр("ru = 'Некорректные настройки для подключения к Акспата для организации %1. Не удалось определить строку соединения. Задание прервано.");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация); 
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		Возврат Ложь;	
	КонецЕсли;	 
	
	Попытка
		СоединениеАДО.Open(СтруктураПараметров.НастройкиПодключения.СтрокаСоединения);			
	Исключение 
		ТекстСообщения = НСтр("ru = 'Неудачная попытка соединения с внешним источником данных,
		|строка соединения: %1, 
		|причина: %2'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураПараметров.НастройкиПодключения.СтрокаСоединения, ОписаниеОшибки()); 
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

Функция ок_ПолучитьДанныеТаблицыКонтрагентов(СтруктураПараметров, СоединениеАДО, ТабРезультат)
	Перем Выборка;
	
	СинонимРЗ				= СтруктураПараметров.СинонимРЗ;
	ИсточникЗагрузки		= СтруктураПараметров.ИсточникЗагрузки;
	База 					= СтруктураПараметров.НастройкиПодключения.БазаДанных;
	СтрокаСоединения 		= СтруктураПараметров.НастройкиПодключения.СтрокаСоединения;
	
	СтруктураПараметров.Вставить("ИмяТаблицы", "CustVendTable_IMP");
	
	ТекстЗапроса = "
	|  SELECT  [CODE1C]
	|	,[VENDNUM]
	|	,[CUSTNUM]
	|	,[NAMEALIAS]
	|	,[NAME]
	|	,[ADDRESS]
	|	,[INN]
	|	,[KPP]
	|	,[PHONE]
	|	,[TELEFAX]
	|	,[EMAILFINANCE]
	|	,[EMAILPURCHORDER]
	|	,[ACCOUNTSTATUS1C]
	|	,[BLOCKED]
	|	,[CLOSED]
	|	,[FINANCEMANAGERBLOCKED]
	|	,[BLOCKEDPAYMENTORDER]
	|	,[CodeSS]
	|	,[Source]
	|	,[VENDGroup]
	|	,[CustGroup]
	|	,[DATEMODNAME]
	|	,[DateModNameAlias]
	//|,[DATEMODALIASNAME]
	|	,[DATEMODINN]
	|	,[DATEMODKPP]
	|	,[DATEMODADDRESS]
	|	,[MODIFIEDDATE]
	|	,[OrganizationType]
	|	,[RecId]
	|FROM "+База+".[dbo].[" + СтруктураПараметров.ИмяТаблицы + "]
	| where source = '" + ИсточникЗагрузки + "' order by RecId";	

	// выполняем запрос к внешнему источнику данных,
	// заполняем таблицу значений	
	ЗапросВыполенен = ВыполнитьЗапросADO(ТекстЗапроса, СоединениеАДО, Выборка);
	
	Если НЕ ЗапросВыполенен Тогда
		ТекстСообщения = НСтр("ru = 'Неудачная попытка выполнения запроса к внешнему источнику данных,
		|строка соединения: %1");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСоединения);
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		 			 
		СоединениеАДО.Close();
		Возврат Ложь;
	КонецЕсли;
	
	// инициализация ТЗ
	ТабРезультат.Колонки.Добавить("CODE1C");
	ТабРезультат.Колонки.Добавить("VENDNUM");
	ТабРезультат.Колонки.Добавить("CUSTNUM");
	ТабРезультат.Колонки.Добавить("NAMEALIAS");
	ТабРезультат.Колонки.Добавить("NAME");
	ТабРезультат.Колонки.Добавить("Address");
	ТабРезультат.Колонки.Добавить("INN");
	ТабРезультат.Колонки.Добавить("KPP");
	ТабРезультат.Колонки.Добавить("PHONE");
	ТабРезультат.Колонки.Добавить("TELEFAX");
	ТабРезультат.Колонки.Добавить("EMAILFINANCE");
	ТабРезультат.Колонки.Добавить("EMAILPURCHORDER");
	ТабРезультат.Колонки.Добавить("ACCOUNTSTATUS1C");
	ТабРезультат.Колонки.Добавить("BLOCKED");
	ТабРезультат.Колонки.Добавить("CLOSED");
	ТабРезультат.Колонки.Добавить("FINANCEMANAGERBLOCKED");
	ТабРезультат.Колонки.Добавить("BLOCKEDPAYMENTORDER");
	ТабРезультат.Колонки.Добавить("CodeSS");
	ТабРезультат.Колонки.Добавить("Source");
	ТабРезультат.Колонки.Добавить("VENDGroup");
	ТабРезультат.Колонки.Добавить("CustGroup");
	ТабРезультат.Колонки.Добавить("DATEMODNAME");
	ТабРезультат.Колонки.Добавить("DATEMODALIASNAME");
	ТабРезультат.Колонки.Добавить("DATEMODINN");
	ТабРезультат.Колонки.Добавить("DATEMODKPP");
	ТабРезультат.Колонки.Добавить("DATEMODADDRESS");
	ТабРезультат.Колонки.Добавить("MODIFIEDDATE");
	ТабРезультат.Колонки.Добавить("OrganizationType");
	ТабРезультат.Колонки.Добавить("RecId");  
	
	Пока Не Выборка.EOF() Цикл 
		fields = FieldsСтруктура(Выборка.Fields);
		СтрокаТаб = ТабРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, fields);	
		Выборка.MoveNext(); 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	

Процедура ок_ОбновитьИсториюСтатусов(Объект)
	//ОКЕЙ Наумов А.Н.(Софтлаб) Начало 25.12.2019 (#3597)
	Перем НоваяСтрокаИстории;
	//ОКЕЙ Наумов А.Н.(Софтлаб) Начало 25.12.2019 (#3597)
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Контрагенты") Тогда
		ИмяРеквизита = "бит_Статус";
	Иначе
		ИмяРеквизита = "бит_СтадияДоговора";
	КонецЕсли;
	
	Если Объект.ок_ИсторияСтатусов.Количество() > 0 Тогда
		
		ПоследняяСтрока = Объект.ок_ИсторияСтатусов[Объект.ок_ИсторияСтатусов.Количество()-1];
		//ОКЕЙ Наумов А.Н.(Софтлаб) Начало 25.12.2019 (#3597)
		//Если ПоследняяСтрока.Статус = Объект[ИмяРеквизита] Тогда
		//	НоваяСтрокаИстории = Неопределено;
		//Иначе	
		//	НоваяСтрокаИстории = Объект.ок_ИсторияСтатусов.Добавить();	
		//КонецЕсли;
		Если Не ПоследняяСтрока.Статус = Объект[ИмяРеквизита] Тогда	
			НоваяСтрокаИстории = Объект.ок_ИсторияСтатусов.Добавить();	
		КонецЕсли;
		//ОКЕЙ Наумов А.Н.(Софтлаб) Конец 25.12.2019 (#3597)	
	Иначе		
		НоваяСтрокаИстории = Объект.ок_ИсторияСтатусов.Добавить();					
	КонецЕсли;
	
	//ОКЕЙ Наумов А.Н.(Софтлаб) Начало 25.12.2019 (#3597)
	//Если ЗначениеЗаполнено(НоваяСтрокаИстории) Тогда
	Если Не НоваяСтрокаИстории = Неопределено Тогда
	//ОКЕЙ Наумов А.Н.(Софтлаб) Конец 25.12.2019 (#3597)
		НоваяСтрокаИстории.Период 			= ТекущаяДата();	
		НоваяСтрокаИстории.Статус 			= Объект[ИмяРеквизита];	
		НоваяСтрокаИстории.Ответственный 	= Пользователи.АвторизованныйПользователь();	
		НоваяСтрокаИстории.Описание 		= НСтр("ru = 'Загружено из АХ'");	
	КонецЕсли;
				
КонецПроцедуры

Процедура ок_УдалитьЗаписьВнешнегоИсточникаДанных(СоединениеАДО, СтруктураПараметров, НомерЗаписи)
	
	СинонимРЗ		= СтруктураПараметров.СинонимРЗ;
	База 			= СтруктураПараметров.НастройкиПодключения.БазаДанных;
	ИмяТаблицы      = СтруктураПараметров.ИмяТаблицы;
	
	ТекстЗапросаДляУдаления = "
	|	DELETE " + База + ".[dbo].[" + ИмяТаблицы + "]
	|Where [RecId]=" + НомерЗаписи;
	
	ЗапросАДО = Новый COMОбъект("ADODB.Command");
	ЗапросАДО.CommandTimeout = 600;
	ЗапросАДО.ActiveConnection	= СоединениеАДО; 	
	ЗапросАДО.CommandText		= ТекстЗапросаДляУдаления; 
	
	Попытка                                                 
		РезультатЗагрузки = ЗапросАДО.Execute(); 
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось удалить строку %1 внешнего источника данных: %2, 
		|причина: %3'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерЗаписи, СтруктураПараметров.НастройкиПодключения.СтрокаСоединения, ОписаниеОшибки()); 
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;	 
	
КонецПроцедуры

Процедура ок_ИзменитьСтатусКонтрагента(Данные, Объект)
	
	//ОКЕЙ Рычаков А.С.(Софтлаб) Начало 25.12.2019 (#3597)
	//Если  Данные.BLOCKED = "0" Тогда // и Данные.BLOCKEDPAYMENTORDER = "0" и  Данные.CLOSED = "0" и Данные.FINANCEMANAGERBLOCKED = "0" 
	//	
	//	Если Объект.бит_Статус  = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе") Тогда
	//		Объект.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.Рабочий");
	//		// обновим таблицу историй статусов контрагента
	//		ок_ОбновитьИсториюСтатусов(Объект);
	//	КонецЕсли;
	//	
	//ИначеЕсли Данные.BLOCKED = "2" Тогда
	//	
	//	// установим статус и обновим историю статусов
	//	Объект.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе");
	//	ок_ОбновитьИсториюСтатусов(Объект);
	//	
	//	
	//ИначеЕсли Данные.BLOCKEDPAYMENTORDER = "1" Тогда 
	//	
	//	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487) 
	//	Объект.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированыОплаты");
	//	// обновим таблицу историй статусов контрагента
	//	ок_ОбновитьИсториюСтатусов(Объект);
	//	
	//КонецЕсли; 
		
	Если Данные.BLOCKED = "2" Тогда	
		
		// установим статус и обновим историю статусов
		Объект.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе");
		ок_ОбновитьИсториюСтатусов(Объект);
		
	ИначеЕсли Данные.BLOCKEDPAYMENTORDER = "1" Тогда 
		
		// установим статус и обновим историю статусов
		Объект.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированыОплаты");
		ок_ОбновитьИсториюСтатусов(Объект);
		
	//ОКЕЙ Наумов А.Н.(Софтлаб) Начало 25.12.2019 (#3597)
	//ИначеЕсли  Данные.BLOCKED = "0" Тогда
	ИначеЕсли  Данные.BLOCKED = "0" ИЛИ Данные.BLOCKED = "" Тогда
	//ОКЕЙ Наумов А.Н.(Софтлаб) Конец 25.12.2019 (#3597)
	
		// установим статус и обновим историю статусов
		Объект.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.Рабочий");
		ок_ОбновитьИсториюСтатусов(Объект);
			
	КонецЕсли;
	//ОКЕЙ Рычаков А.С.(Софтлаб) Конец 25.12.2019 (#3597)
	
КонецПроцедуры

Процедура ок_ОбработатьДанныеКонтрагентовВнешнегоИсточникаДанных(ТабРезультат, СоединениеАДО, Организация, СтруктураПараметров)
	
	ПапкаПоискаКонтрагентов = СтруктураПараметров.ПапкаПоискаКонтрагентов;
	ИсточникЗагрузки 		= СтруктураПараметров.ИсточникЗагрузки;
	СинонимРЗ				= СтруктураПараметров.СинонимРЗ;
	
	ВидФакс				 	= Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00033");
	ВидПочтыБухгалтерия 	= Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00034"); //Адрес электронной почты-Бухгалтерия		
	ВидПочтыЗаявка 			= Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00035");   //Адрес электронной почты-Заявка
	
	// перебор строк и перезаполнение контрагентов и договоров
	Для Каждого Строка Из  ТабРезультат Цикл
		
		ВыборкаПоДоговорам = Неопределено;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-12-12 (#3575)
		ГруппаКлиентов = Неопределено;
		ГруппаПоставщиков = Неопределено;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-12-12 (#3575)

		Если ЗначениеЗаполнено(Строка.CustGroup) Тогда
			Попытка
				ГруппаКлиентов = Перечисления.бит_ГруппаКлиентов[Строка.CustGroup];
			Исключение
				ГруппаКлиентов = "";
			КонецПопытки;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Строка.VENDGroup) Тогда
			Попытка
				ГруппаПоставщиков = Перечисления.бит_ГруппаПоставщиков[Строка.VENDGroup];
			Исключение
				ГруппаПоставщиков ="";
			КонецПопытки;
		КонецЕсли;	
		
		// контрагент есть в 1С
		Если ЗначениеЗаполнено(Строка.CODE1C) Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Родитель В ИЕРАРХИИ(&Родитель)
			|	И НЕ Контрагенты.ЭтоГруппа
			|	И Контрагенты.Код = &Код";
			
			Запрос.УстановитьПараметр("Родитель", ПапкаПоискаКонтрагентов);
			Запрос.УстановитьПараметр("Код", Строка.CODE1C);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
				КонтрагентСсылка = ВыборкаДетальныеЗаписи.ссылка;
			Иначе 
				КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
			
			//КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(Строка.CODE1C);
			
			Если Не ЗначениеЗаполнено(КонтрагентСсылка) Тогда 
				Продолжить;
			КонецЕсли;
			
			КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
			КонтрагентОбъект.НомДокИмпорт = Строка.VENDNUM;
			КонтрагентОбъект.НомДокИмпорт2 = Строка.CUSTNUM;
			Если ЗначениеЗаполнено(ГруппаКлиентов) Тогда 
				КонтрагентОбъект.бит_ГруппаКлиентов = ГруппаКлиентов;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ГруппаПоставщиков) Тогда 
				КонтрагентОбъект.бит_ГруппаПоставщиков = ГруппаПоставщиков;
			КонецЕсли;
			
			//Изменение по статусам
			ок_ИзменитьСтатусКонтрагента(Строка, КонтрагентОбъект);
			 				
			Попытка
				// ОКЕЙ Наумов А.Н.(Софтлаб) Начало 29.10.2019 (#3515)
				//КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
				КонтрагентОбъект.ДополнительныеСвойства.Вставить("ВыгрузитьКонтрагента", Ложь); // чтобы не писать в РС для выгрузки в Аксапта
				// ОКЕЙ Наумов А.Н.(Софтлаб) Конец 29.10.2019 (#3515)
				КонтрагентОбъект.Записать();
			Исключение
				
				ТекстСообщения = НСтр("ru = 'Неудачная запись(обновление) контрагента с кодом 1С = %1,
				|ошибка: %2");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.CODE1C, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				
			КонецПопытки;
			
			Если ЗначениеЗаполнено(Строка.CUSTNUM) Тогда 
				ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"60",КонтрагентОбъект.Ссылка,Организация);
				ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"62",КонтрагентОбъект.Ссылка,Организация);
				ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"76",КонтрагентОбъект.Ссылка,Организация);
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
				ЗаписатьВРегистрСопоставленияАксапты12(Строка.CUSTNUM,"19",КонтрагентОбъект.Ссылка,Организация, Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041"));
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.VENDNUM) Тогда 
				ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"60",КонтрагентОбъект.Ссылка,Организация);
				ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"62",КонтрагентОбъект.Ссылка,Организация);
				ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"76",КонтрагентОбъект.Ссылка,Организация);
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
				ЗаписатьВРегистрСопоставленияАксапты12(Строка.VENDNUM,"19",КонтрагентОбъект.Ссылка,Организация, Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041"));
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
			КонецЕсли;
			ок_УдалитьЗаписьВнешнегоИсточникаДанных(СоединениеАДО, СтруктураПараметров, Строка.RecId);
			
			Продолжить; // ниже не спускаемся, контрагента отработали
		КонецЕсли;
		
		// во внешнем источнике нет кода 1с, надо создать контрагента,
		// предварительно попытаемся найти через служебные реквизиты
		КонтрагентЕстьВБазе1С = Ложь;
		Если ЗначениеЗаполнено(Строка.VENDNUM) Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Родитель В ИЕРАРХИИ(&Родитель) 
			|	и Контрагенты.НомДокИмпорт = &НомДокИмпорт";
			
			Запрос.УстановитьПараметр("НомДокИмпорт", Строка.VENDNUM);
			Запрос.УстановитьПараметр("Родитель", ПапкаПоискаКонтрагентов);
			
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда 
				
			Иначе 	  
				КонтрагентЕстьВБазе1С = Истина;
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				КотрагентСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.CUSTNUM) и не КонтрагентЕстьВБазе1С Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Родитель В ИЕРАРХИИ(&Родитель)
			|	и Контрагенты.НомДокИмпорт2 = &НомДокИмпорт";
			
			Запрос.УстановитьПараметр("НомДокИмпорт", Строка.CUSTNUM);
			Запрос.УстановитьПараметр("Родитель", ПапкаПоискаКонтрагентов);
			
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда 
				
			Иначе 	  
				КонтрагентЕстьВБазе1С = Истина;
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				КотрагентСсылка = ВыборкаДетальныеЗаписи.Ссылка; 
			КонецЕсли;
			
			
		КонецЕсли;
		
		// контрагента нет в 1С, создание элемента
		Если Не КонтрагентЕстьВБазе1С Тогда 
			
			Если ИсточникЗагрузки = "SS" Тогда 
				//Сообщить("Контрагент с НомДокИмпорт ="+Строка.VENDNUM +" или НомДокИмпорт2 ="+ Строка.CUSTNUM+ " не найден.");
				ок_УдалитьЗаписьВнешнегоИсточникаДанных(СоединениеАДО, СтруктураПараметров, Строка.RecId);
				Продолжить;
			КонецЕсли;
			
			//Создаем нового контрагента
			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонтрагентОбъект.Наименование = Строка.NAMEALIAS;
			КонтрагентОбъект.НаименованиеПолное = Строка.NAME;
			КонтрагентОбъект.НомДокИмпорт = Строка.VENDNUM;
			КонтрагентОбъект.НомДокИмпорт2 = Строка.CUSTNUM;
			КонтрагентОбъект.ИНН = Строка.INN;
			КонтрагентОбъект.КПП = Строка.KPP;
			Если Строка.OrganizationType = "" Тогда 
				КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			ИначеЕсли Строка.OrganizationType = "1" Тогда
				КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			КонецЕсли;
			КонтрагентОбъект.бит_ГруппаКлиентов 		= ГруппаКлиентов;  					
			КонтрагентОбъект.бит_ГруппаПоставщиков		= ГруппаПоставщиков;
			КонтрагентОбъект.Родитель 					= ПапкаПоискаКонтрагентов;
			
			// заполнить адреса после записи объекта
			// Юридический адрес
			ЗаписьЮА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
			ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			ЗаписьЮА.Представление 		= Строка.ADDRESS;
			
			// Фактический адрес
			ЗаписьФА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			ЗаписьФА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
			ЗаписьФА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			ЗаписьФА.Представление 		= Строка.ADDRESS;
			
			// Телефон
			ЗаписьТел 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			ЗаписьТел.Тип 				= Перечисления.ТипыКонтактнойИнформации.Телефон;
			ЗаписьТел.Вид 				= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			ЗаписьТел.Представление 	= Строка.PHONE;
			
			// Факс
			Если ЗначениеЗаполнено(ВидФакс) Тогда
				ЗаписьТел 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаписьТел.Тип 				= Перечисления.ТипыКонтактнойИнформации.Телефон;
				ЗаписьТел.Вид 				= ВидФакс;
				ЗаписьТел.Представление 	= Строка.TELEFAX;
			КонецЕсли;
			
			//ОК+ Аверьянова 28.08.15   дозаполним Внешний код и эл адрес
			//эл.почта
			Если ЗначениеЗаполнено(ВидПочтыБухгалтерия) Тогда 
				ЗаписьЕмайл 				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаписьЕмайл.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				ЗаписьЕмайл.Вид 			= ВидПочтыБухгалтерия; //Адрес электронной почты-Бухгалтерия
				ЗаписьЕмайл.Представление 	= Строка.EMAILFINANCE;
			КонецЕсли;
			
			//эл.почта
			Если ЗначениеЗаполнено(ВидПочтыЗаявка) Тогда
				ЗаписьЕмайл 				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаписьЕмайл.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				ЗаписьЕмайл.Вид 			= ВидПочтыЗаявка;   //Адрес электронной почты-Заявка
				ЗаписьЕмайл.Представление 	= Строка.EMAILPURCHORDER;
			КонецЕсли;
			
			КонтрагентОбъект.бит_ВнешнийКодSoftSolution= Строка.CodeSS;
			//ОК-
					
		Иначе // нашли контрагента в 1С	по служетным реквизитам
			
			КонтрагентОбъект = КотрагентСсылка.ПолучитьОбъект();
			Если ЗначениеЗаполнено(Строка.VENDNUM) Тогда 
				КонтрагентОбъект.НомДокИмпорт = Строка.VENDNUM;
			КонецЕсли;
			Если ЗначениеЗаполнено( Строка.CUSTNUM) Тогда 
				КонтрагентОбъект.НомДокИмпорт2 = Строка.CUSTNUM;
				
			КонецЕсли;  			
			Если ЗначениеЗаполнено(ГруппаКлиентов) Тогда 
				КонтрагентОбъект.бит_ГруппаКлиентов = ГруппаКлиентов;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ГруппаПоставщиков) Тогда 
				КонтрагентОбъект.бит_ГруппаПоставщиков= ГруппаПоставщиков;
			КонецЕсли;
			
						
			Если Не ЗначениеЗаполнено(КонтрагентОбъект.бит_ВнешнийКодSoftSolution) И ЗначениеЗаполнено(Строка.CodeSS) Тогда 
				КонтрагентОбъект.бит_ВнешнийКодSoftSolution= Строка.CodeSS;
			КонецЕсли;
			
			ЗапросКИ = Новый Запрос;     //получим конт.информацию КА
			ЗапросКИ.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК КА,
			|	КИ_ЮрАдрес.ЮрАдрес КАК ЮрАдрес,
			|	КИ_ФактАдрес.Представление КАК ФактАдрес,
			|	КИ_Заявка.Представление КАК Заявка,
			|	КИ_Бухгалтерия.Представление КАК Бухгалтерия
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КонтрагентыКонтактнаяИнформация.Представление КАК ЮрАдрес,
			|			КонтрагентыКонтактнаяИнформация.Ссылка.Код КАК Код
			|		ИЗ
			|			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
			|		ГДЕ
			|			КонтрагентыКонтактнаяИнформация.Вид = &ВидЮрАдрес) КАК КИ_ЮрАдрес
			|		ПО (КИ_ЮрАдрес.Код = Контрагенты.КонтактнаяИнформация.Ссылка.Код)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КонтрагентыКонтактнаяИнформация.Ссылка.Код КАК Код,
			|			КонтрагентыКонтактнаяИнформация.Представление КАК Представление
			|		ИЗ
			|			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
			|		ГДЕ
			|			КонтрагентыКонтактнаяИнформация.Вид = &ВидФактАдрес) КАК КИ_ФактАдрес
			|		ПО (КИ_ФактАдрес.Код = Контрагенты.КонтактнаяИнформация.Ссылка.Код)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КонтрагентыКонтактнаяИнформация.Ссылка.Код КАК Код,
			|			КонтрагентыКонтактнаяИнформация.Представление КАК Представление
			|		ИЗ
			|			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
			|		ГДЕ
			|			КонтрагентыКонтактнаяИнформация.Вид = &ВидЗаявка) КАК КИ_Заявка
			|		ПО (КИ_Заявка.Код = Контрагенты.КонтактнаяИнформация.Ссылка.Код)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КонтрагентыКонтактнаяИнформация.Ссылка.Код КАК Код,
			|			КонтрагентыКонтактнаяИнформация.Представление КАК Представление
			|		ИЗ
			|			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
			|		ГДЕ
			|			КонтрагентыКонтактнаяИнформация.Вид = &ВидБухгалтерия) КАК КИ_Бухгалтерия
			|		ПО (КИ_Бухгалтерия.Код = Контрагенты.КонтактнаяИнформация.Ссылка.Код)
			|ГДЕ
			|	Контрагенты.Ссылка = &КА";
			
			ЗапросКИ.УстановитьПараметр("КА", КонтрагентОбъект.Ссылка);
			ЗапросКИ.УстановитьПараметр("ВидЮрАдрес",Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			ЗапросКИ.УстановитьПараметр("ВидФактАдрес",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			ЗапросКИ.УстановитьПараметр("ВидЗаявка", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Заявка",истина,Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты.Ссылка));
			ЗапросКИ.УстановитьПараметр("ВидБухгалтерия", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Бухгалтерия",истина,Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты.Ссылка));
			
			Результат = ЗапросКИ.Выполнить();
			КИ_КА = Результат.Выбрать();
			Если КИ_КА.Количество() = 0 Тогда
				Сообщить("у контрагента "+КонтрагентОбъект.Наименование+" отсутствует конт.информация");				
			КонецЕсли; 
			
			Если КИ_КА.Следующий() Тогда
				Если ЗначениеЗаполнено(Строка.ADDRESS) Тогда    
					// Юридический адрес  - если он пустой- заполняем, иначе - перезапишем данными АХ (консультация с банк.группой)  
					Если Не Значениезаполнено(КИ_КА.ЮрАдрес) Тогда    
						ЗаписьЮА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
						ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
						ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
						ЗаписьЮА.Представление 		= Строка.ADDRESS;
					иначе  
						КонтрагентОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "Вид").Представление = Строка.ADDRESS;
					КонецЕсли;     										
					
					// Фактический адрес
					Если Не Значениезаполнено(КИ_КА.ФактАдрес) Тогда   
						ЗаписьЮА 					= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
						ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
						ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
						ЗаписьЮА.Представление 		= Строка.ADDRESS;
					иначе  
						КонтрагентОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "Вид").Представление = Строка.ADDRESS;
					КонецЕсли;     
				КонецЕсли;
				Если ЗначениеЗаполнено(Строка.EMAILFINANCE) Тогда   
					//Адрес электронной почты-Бухгалтерия  - если он пустой- заполняем, иначе - перезапишем данными АХ
					Если Не Значениезаполнено(КИ_КА.Бухгалтерия) И ЗначениеЗаполнено(ВидПочтыБухгалтерия) Тогда   
						ЗаписьЕмайл 				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
						ЗаписьЕмайл.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
						ЗаписьЕмайл.Вид 			= ВидПочтыБухгалтерия; 					
						ЗаписьЕмайл.Представление 	= Строка.EMAILFINANCE;
					Иначе  
						СтрокаТабЧастиКИ = КонтрагентОбъект.КонтактнаяИнформация.Найти(ВидПочтыБухгалтерия, "Вид");
						Если Не СтрокаТабЧастиКИ = Неопределено Тогда
							СтрокаТабЧастиКИ.Представление = Строка.EMAILFINANCE;
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка.EMAILPURCHORDER) Тогда
					//Адрес электронной почты-Заявка
					Если Не Значениезаполнено(КИ_КА.Заявка) И ЗначениеЗаполнено(ВидПочтыЗаявка) Тогда   
						ЗаписьЕмайл 				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
						ЗаписьЕмайл.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
						ЗаписьЕмайл.Вид 			= ВидПочтыЗаявка;   
						ЗаписьЕмайл.Представление 	= Строка.EMAILPURCHORDER;
					Иначе  
						СтрокаТабЧастиКИ = КонтрагентОбъект.КонтактнаяИнформация.Найти(ВидПочтыЗаявка, "Вид");
						Если Не СтрокаТабЧастиКИ = Неопределено Тогда
							СтрокаТабЧастиКИ.Представление = Строка.EMAILPURCHORDER;
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			//ОК-
		КонецЕсли;
		
		// статусы контрагента
		ок_ИзменитьСтатусКонтрагента(Строка, КонтрагентОбъект);
		
		// записываем контрагента
		Попытка
			// ОКЕЙ Наумов А.Н.(Софтлаб) Начало 29.10.2019 (#3515)
			//КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
			КонтрагентОбъект.ДополнительныеСвойства.Вставить("ВыгрузитьКонтрагента", Ложь); // чтобы не писать в РС для выгрузки в Аксапта
			// ОКЕЙ Наумов А.Н.(Софтлаб) Конец 29.10.2019 (#3515)
			КонтрагентОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Неудачная запись(обновление) контрагента с НомДокИмпорт = %1 и НомДокИмпорт2 = %2,
			|ошибка: %3");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.VENDNUM, Строка.CUSTNUM, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);	
		КонецПопытки;
		
		Если ЗначениеЗаполнено(КонтрагентОбъект.Ссылка) Тогда
			
			//Заполняем регистр изменения реквизитоы контрагентов
			Запись = РегистрыСведений.бит_ИсторияИзмененияРеквизитовКонтрагентов.СоздатьМенеджерЗаписи();
			Запись.Контрагент = КонтрагентОбъект.Ссылка;
			Запись.ИНН = КонтрагентОбъект.ИНН;
			Запись.КПП = КонтрагентОбъект.КПП;
			Запись.НаименованиеПолное 		= КонтрагентОбъект.НаименованиеПолное;
			Запись.Наименование 			= КонтрагентОбъект.Наименование;
			Запись.ЮридическийАдрес 		= Строка.ADDRESS;			
			Запись.ДатаМодификации 	= ТекущаяДата();
			Запись.Период			= '19800101';
			Запись.ДатаНаименование = '19800101';
			Запись.ДатаНаименованиеПолное = '19800101';
			Запись.ДатаИНН = '19800101';
			Запись.ДатаКПП = '19800101';
			Запись.ДатаЮридическийАдрес ='19800101';
			Запись.Записать();
				//Сообщить("Новый контрагент "+КонтрагентОбъект.Наименование +",записан в базу");
				
			Если ЗначениеЗаполнено(Строка.CUSTNUM) Тогда 
				ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"60", КонтрагентОбъект.Ссылка,	Организация);
				ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"62", КонтрагентОбъект.Ссылка,	Организация);
				ЗаписатьВРегистрСопоставления(Строка.CUSTNUM,"76", КонтрагентОбъект.Ссылка,	Организация);
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
				ЗаписатьВРегистрСопоставленияАксапты12(Строка.CUSTNUM,"19",КонтрагентОбъект.Ссылка,Организация, Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041"));
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.VENDNUM) Тогда 
				ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"60", КонтрагентОбъект.Ссылка,	Организация);
				ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"62", КонтрагентОбъект.Ссылка,	Организация);
				ЗаписатьВРегистрСопоставления(Строка.VENDNUM,"76", КонтрагентОбъект.Ссылка,	Организация);
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
				ЗаписатьВРегистрСопоставленияАксапты12(Строка.VENDNUM,"19",КонтрагентОбъект.Ссылка,Организация, Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041"));
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
			КонецЕсли;
			
			// удаление записи из внешнего источника данных
			ок_УдалитьЗаписьВнешнегоИсточникаДанных(СоединениеАДО, СтруктураПараметров, Строка.RecId);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ок_ЗагрузкаДоговоровИзАксапта() Экспорт
		
	// зафиксируем начало работы РЗ
	СинонимРЗ = Метаданные.РегламентныеЗадания.бит_ЗагрузкаОткликаОтSQLДляДоговоров.Синоним;
	ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,, "Начало загрузки");
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.бит_ЗагрузкаКонтрагентов);
	
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
	СоединениеАДО.ConnectionTimeOut = 600; 
	СоединениеАДО.CommandTimeOut 	= 600; 
	СоединениеАДО.CursorLocation 	= 3;
	
	Организация_ОкейЛоджистикс 	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Лоджистикс");
	Организация_Окей 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	НастройкиПодключения		= РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.ок_ПолучитьНастройкиПодключенияАксапта();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникЗагрузки", 		бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты", "Источник загрузки"));
	СтруктураПараметров.Вставить("СинонимРЗ", 				СинонимРЗ);
	СтруктураПараметров.Вставить("Организация_Окей", 		Организация_Окей);
	СтруктураПараметров.Вставить("ОбработатьПолеUE", 		бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты", "Обрабатывать поле ПересчетУЕ в договорах", Ложь));
	
	Если ЗначениеЗаполнено(Организация_ОкейЛоджистикс) Тогда
		
		СтруктураПараметров.Вставить("ПапкаПоискаКонтрагентов", бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Предопределенные группы", "Группа контрагентов Поставщики Лоджистикс"));
		СтруктураПараметров.Вставить("Организация", 		Организация_ОкейЛоджистикс);
		// подключаемся к внешнему источнику данных
		// выполняем запрос и получаем данные
		СтруктураПараметров.Вставить("НастройкиПодключения", НастройкиПодключения[Организация_ОкейЛоджистикс]);		
		
		
		Если ок_ПодключитьВнешнийИсточникДанных(Организация_ОкейЛоджистикс, СтруктураПараметров, СоединениеАДО) Тогда
			ТабРезультат = Новый ТаблицаЗначений;
			// получим данные из внешнего источника в ТЗ
			Если ок_ПолучитьДанныеТаблицыДоговоровКонтрагентов(СтруктураПараметров, СоединениеАДО, ТабРезультат) Тогда
				// обрабатываем данные	
				ок_ОбработатьДанныеДоговоровВнешнегоИсточникаДанных(ТабРезультат, СоединениеАДО, Организация_ОкейЛоджистикс, СтруктураПараметров);
				СоединениеАДО.Close();
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-21 (#МДМ)
	//Если ЗначениеЗаполнено(Организация_Окей) Тогда
	ИнтеграцияКонтрагентовИДоговоровВключена_МДМ = ок_ВыгрузкаВАксапту.ИнтеграцияКонтрагентовИДоговоровВключена_МДМ();
	Если ЗначениеЗаполнено(Организация_Окей) 
		И НЕ ИнтеграцияКонтрагентовИДоговоровВключена_МДМ Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-21 (#МДМ)
		
		СтруктураПараметров.Вставить("ПапкаПоискаКонтрагентов", бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Предопределенные группы", "Группа контрагентов Поставщики"));
		СтруктураПараметров.Вставить("Организация", 		Организация_Окей);
		
		// подключаемся к внешнему источнику данных
		// выполняем запрос и получаем данные
		СтруктураПараметров.Вставить("НастройкиПодключения", НастройкиПодключения[Организация_Окей]);
			
		Если ок_ПодключитьВнешнийИсточникДанных(Организация_Окей, СтруктураПараметров, СоединениеАДО) Тогда
			ТабРезультат = Новый ТаблицаЗначений;
			// получим данные из внешнего источника в ТЗ
			Если ок_ПолучитьДанныеТаблицыДоговоровКонтрагентов(СтруктураПараметров, СоединениеАДО, ТабРезультат) Тогда
				// обрабатываем данные	
				ок_ОбработатьДанныеДоговоровВнешнегоИсточникаДанных(ТабРезультат, СоединениеАДО, Организация_Окей, СтруктураПараметров);
				СоединениеАДО.Close();
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,, "Окончание загрузки");
	
КонецПроцедуры

Функция ок_ПолучитьДанныеТаблицыДоговоровКонтрагентов(СтруктураПараметров, СоединениеАДО, ТабРезультат)
	Перем Выборка;
	
	СинонимРЗ				= СтруктураПараметров.СинонимРЗ;
	ИсточникЗагрузки		= СтруктураПараметров.ИсточникЗагрузки;
	База 					= СтруктураПараметров.НастройкиПодключения.БазаДанных;
	СтрокаСоединения 		= СтруктураПараметров.НастройкиПодключения.СтрокаСоединения;
	Организация				= СтруктураПараметров.Организация;
	Организация_Окей		= СтруктураПараметров.Организация_Окей;
	
	СтруктураПараметров.Вставить("ИмяТаблицы", "ContractTable_IMP");
	
	ТекстЗапроса = 
	"select
	| [Code1C]
	|,[RContractAccount]
	|,[CurrencyCode]
	|,[Dimension2]
	|,[ContractRecId]
	|,[ContractPostingProgile]
	|,[RContractCode]
	|,[RContractPartnerType]
	|,[RContractNumber]
	|,[ContractDate]
	|,[ContractStartDate]
	|,[ContractEndDate]
	|,[RContractPartnerCode]
	|,[RContractPartnerCode1C]
	|,[RContractStatus]
	|,[RContractSubject]
	|,[ContractIdExt]
	|,[Source]
	|,[ModifiedDate]
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
	|,[UE]
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)
	|,[RecId]
	|FROM "+База+".[dbo].[" + СтруктураПараметров.ИмяТаблицы + "]
	| where source = '" + ИсточникЗагрузки + "' 
	| "; // order by RecId
	
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 03.10.2019 (#3497) 
	Если Не Организация = Организация_Окей ИЛИ Не СтруктураПараметров.ОбработатьПолеUE Тогда // поле UE, только для организации Окей	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",[UE]", "");
	КонецЕсли;
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 03.10.2019 (#3497)

	// выполняем запрос к внешнему источнику данных,
	// заполняем таблицу значений	
	ЗапросВыполенен = ВыполнитьЗапросADO(ТекстЗапроса, СоединениеАДО, Выборка);
	
	Если НЕ ЗапросВыполенен Тогда
		ТекстСообщения = НСтр("ru = 'Неудачная попытка выполнения запроса к внешнему источнику данных,
		|строка соединения: %1");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСоединения);
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		 			 
		СоединениеАДО.Close();
		Возврат Ложь;
	КонецЕсли;
	
	// инициализация ТЗ
	ТабРезультат.Колонки.Добавить("Code1C");
	ТабРезультат.Колонки.Добавить("ExpCompanyId");
	ТабРезультат.Колонки.Добавить("ContractRecId");
	ТабРезультат.Колонки.Добавить("RContractPartnerType");
	ТабРезультат.Колонки.Добавить("RContractPartnerCode");
	ТабРезультат.Колонки.Добавить("RContractCode");
	ТабРезультат.Колонки.Добавить("RContractAccount");
	ТабРезультат.Колонки.Добавить("RContractNumber");
	ТабРезультат.Колонки.Добавить("ContractDate");
	ТабРезультат.Колонки.Добавить("ContractEndDate");
	ТабРезультат.Колонки.Добавить("RContractSubject");
	ТабРезультат.Колонки.Добавить("RContractStatus");
	ТабРезультат.Колонки.Добавить("CurrencyCode");
	ТабРезультат.Колонки.Добавить("ContractIdExt");                  
	ТабРезультат.Колонки.Добавить("ContractStartDate");
	ТабРезультат.Колонки.Добавить("CONTRACTPOSTINGPROGILE");
	ТабРезультат.Колонки.Добавить("RecId");
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
	ТабРезультат.Колонки.Добавить("UE");
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)  
	
	Пока Не Выборка.EOF() Цикл 
		fields = FieldsСтруктура(Выборка.Fields);
		СтрокаТаб = ТабРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, fields);	
		Выборка.MoveNext(); 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ок_ОбработатьДанныеДоговоровВнешнегоИсточникаДанных(ТабРезультат, СоединениеАДО, Организация, СтруктураПараметров)
	
	СинонимРЗ				= СтруктураПараметров.СинонимРЗ;
	ИсточникЗагрузки		= СтруктураПараметров.ИсточникЗагрузки;
	Организация_Окей		= СтруктураПараметров.Организация_Окей;
	
	//Валюты
	Юань 	= Справочники.Валюты.НайтиПоКоду("156");
	Евро 	= Справочники.Валюты.НайтиПоКоду("978");
	Доллары = Справочники.Валюты.НайтиПоКоду("840");
	Рубли 	= Справочники.Валюты.НайтиПоКоду("643");
			
	Для Каждого Строка Из  ТабРезультат Цикл 
		
		//ДоговорСсылка = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("бит_НомерАХ",Строка.RContractAccount);
		ДоговорСсылка =  Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Строка.Code1C);
		Если НЕ ЗначениеЗаполнено(ДоговорСсылка) Тогда 
			
			//Доп поиск по реквизитам Аксапты
			КонтрагентНайден = Ложь;
			
			Если ЗначениеЗаполнено(Строка.ContractRecId) Тогда	
				СтруктураРеквизитов = Новый Структура("бит_RECID, Организация, ЭтоГруппа", Строка.ContractRecId, Организация, Ложь);
				ДоговорСсылка = ОК_ОбщегоНазначения.СсылкаНаОбъектПоРеквизитам("Справочник.ДоговорыКонтрагентов", СтруктураРеквизитов);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Строка.RContractAccount)и не ЗначениеЗаполнено(ДоговорСсылка)  Тогда 
				СтруктураРеквизитов = Новый Структура("бит_НомерАХ, Организация, ЭтоГруппа", Строка.RContractAccount, Организация, Ложь);
				ДоговорСсылка = ОК_ОбщегоНазначения.СсылкаНаОбъектПоРеквизитам("Справочник.ДоговорыКонтрагентов", СтруктураРеквизитов);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорСсылка) Тогда // найден в 1с
			
			Договор = ДоговорСсылка.ПолучитьОбъект();
			Договор.бит_RECID 	= Строка.ContractRecId;
			Договор.бит_НомерАХ = Строка.RContractAccount;
						
		Иначе // не нашли в 1с, создание 				
			
			Если ИсточникЗагрузки = "SS" Тогда 
				Сообщить("Договор с номером АХ = "+	Строка.RContractAccount+" не найден");
				Продолжить;
			КонецЕсли;
			
			Если Строка.RContractPartnerType = "" Тогда 
				ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
			ИначеЕсли Строка.RContractPartnerType = "1" Тогда 
				ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем");
			Иначе 
				ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее");
			КонецЕсли;
			
			// поиск контрагента-владельца
			КонтрагентВладелец = НайтиКонтрагентаВладельца(Строка, ВидДоговора);
			
			Если КонтрагентВладелец = Неопределено Тогда // не найден контрагент-владелец
				
				ТекстСообщения = НСтр("ru = 'Не найден контрагент с НомДокИмпорт%1 = %2, договор с RContractAccount = %3 не записан.");
				ТекстСуффикса = ?(ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"),"2","");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстСуффикса, Строка.RContractPartnerCode, Строка.RContractAccount);
				ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				Продолжить; // не записываем договор
			КонецЕсли;
			
			// создание нового договора
			Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		
			Если Строка.CurrencyCode = Лев(Рубли.Наименование, 3) Тогда
				Договор.ВалютаВзаиморасчетов = Рубли;
			ИначеЕсли Строка.CurrencyCode = Евро.Наименование Тогда
				Договор.ВалютаВзаиморасчетов = Евро;
			ИначеЕсли Строка.CurrencyCode = Доллары.Наименование Тогда
				Договор.ВалютаВзаиморасчетов = Доллары;
			ИначеЕсли Строка.CurrencyCode = Юань.Наименование Тогда
				Договор.ВалютаВзаиморасчетов = Юань;
			КонецЕсли;
			
			Договор.Комментарий = "Загружено из АХ";
			Договор.Организация = Организация;
			
		
			Договор.ВидДоговора = ВидДоговора;
			//Договор.ВидВзаиморасчетов = 
			Договор.Дата = ?(Строка.ContractDate = "01.01.1900 0:00:00", Дата('00010101'), Строка.ContractDate);
			Договор.Номер = Строка.RContractNumber;
			ДатаСрокДействия =  ?(Строка.ContractEndDate = "01.01.1900 0:00:00", Дата('00010101'), Строка.ContractEndDate);
			Договор.СрокДействия = ДатаСрокДействия;
			Договор.бит_ПредметДоговора = Строка.RContractSubject;
			
			НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.НайтиПоНаименованию(Строка.RContractCode);
			Если НЕ ЗначениеЗаполнено(НаправлениеДоговора) Тогда
				НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.СоздатьЭлемент();
				НаправлениеДоговора.Наименование = Строка.RContractCode;
				НаправлениеДоговора.Записать();
				НаправлениеДоговора = НаправлениеДоговора.Ссылка;
			КонецЕсли;
			Договор.бит_НаправлениеДоговора = НаправлениеДоговора;
			
			Договор.Владелец = КонтрагентВладелец;
			Договор.Наименование = Договор.Номер;
			Договор.бит_НомерАХ = Строка.RContractAccount;
			Договор.бит_RECID = Строка.ContractRecId;
			Договор.бит_ВнешнийКодКонтракта = Строка.ContractIdExt;
						
			Договор.ДатаВозникновенияОбязательства = Строка.ContractStartDate;
			Договор.ДатаПогашенияОбязательства = Строка.ContractEndDate;
			Договор.СБ_ПрофильРазноски = Строка.CONTRACTPOSTINGPROGILE;
			
		КонецЕсли;
		
		// ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
		Если Организация = Организация_Окей И СтруктураПараметров.ОбработатьПолеUE Тогда
			Договор.ок_ПересчетКурса = ОбщегоНазначения.ОписаниеТипаЧисло(1).ПривестиЗначение(Строка.UE);	
		КонецЕсли;
		// ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)
		
		// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487) 
		// обновляем статус и историю статусов договора
		Если  Строка.RContractStatus = "" Тогда 
			Договор.бит_СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Подготовка");
		ИначеЕсли  Строка.RContractStatus = "1" Тогда 
			Договор.бит_СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Исполнение");
		ИначеЕсли  Строка.RContractStatus = "2" Тогда 
			Договор.бит_СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Закрыт");
		ИначеЕсли  Строка.RContractStatus = "3" Тогда 
			Договор.бит_СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Замечания");
		КонецЕсли;
		ок_ОбновитьИсториюСтатусов(Договор);
		
		Попытка
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-01 (#ПроектИнтеграцияАксапта12) //надо ли добавлять проверку? Добавлено по проекты 3_8, но при переносе в предраб закомментировал.
			//Если ЗначениеЗаполнено(ДоговорСсылка) Тогда
			//	Договор.ОбменДанными.Загрузка = Истина;
			//КонецЕсли;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-01 (#ПроектИнтеграцияАксапта12)
			Договор.ДополнительныеСвойства.Вставить("ЗагруженИзАксапты");
			Договор.Записать();	
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать договор %1 для конрагента %2,
			|строка соединения: %3, 
			|причина: %4'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.ContractRecId, Договор.Владелец, СтруктураПараметров.НастройкиПодключения.СтрокаСоединения, ОписаниеОшибки()); 
			ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецПопытки;
		// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)
		
		ЗаписьРегистра = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Организация = Договор.Организация;
		ЗаписьРегистра.СчетАксапты = "76";
		ЗаписьРегистра.КодАналитикиАксапты = Строка.ContractRecId;
		ЗаписьРегистра.Аналитика1С = Договор.Ссылка;
		
		ЗаписьРегистра.Тип1С = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов");
		ЗаписьРегистра.Записать();
		Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			Или Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда 
			
			ЗаписьРегистра = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Организация =Договор.Организация;
			Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда 
				ЗаписьРегистра.СчетАксапты = "62"
			ИначеЕсли Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда  
				ЗаписьРегистра.СчетАксапты = "60";
			КонецЕсли;
			ЗаписьРегистра.КодАналитикиАксапты = Строка.ContractRecId;
			ЗаписьРегистра.Аналитика1С = Договор.Ссылка;
			ЗаписьРегистра.Тип1С =Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов");
			ЗаписьРегистра.Записать();
		КонецЕсли;
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
		ЗаписатьВРегистрСопоставленияАксапты12(Строка.RContractAccount, "76", Договор.Ссылка, Договор.Организация, Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов"));

		Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			Или Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда 
			
			Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда 
				ЗаписатьВРегистрСопоставленияАксапты12(Строка.RContractAccount, "62", Договор.Ссылка, Договор.Организация, Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов"));
			ИначеЕсли Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда  
				ЗаписатьВРегистрСопоставленияАксапты12(Строка.RContractAccount, "60", Договор.Ссылка, Договор.Организация, Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов"));
			КонецЕсли;
			
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
		
		//ОК+ Аверьянова 08.12.19 исправление ошибки
		//УдалитьЗаписьВТаблице(Строка.RecId,СоединениеАДО);
		ок_УдалитьЗаписьВнешнегоИсточникаДанных(СоединениеАДО, СтруктураПараметров, Строка.RecId);
		//ОК-
	КонецЦикла;
	
КонецПроцедуры		
//ОКЕЙ Рычаков А.С. (СофтЛаб) Начало 2019-09-24 (#3492)
Процедура ок_ФормированиеПисемДляИнициаторовПоОтрицательномуЗакрытиюОстатков() Экспорт
	
	ГлубинаФормированияОтчета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Закрытие остатков","ГлубинаФормированияОтчетаПоОтрицательнымЗакрытиямОстатков");
	ОповещениеДляОтправкиОтчета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Закрытие остатков","ОповещениеДляОтправкиОтчетаПоОтрицательнымЗакрытиямОстатков");
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-04 (#4150)
	МинимальнаяСумма = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Закрытие остатков", "Минимальная сумма для получения остатков");
	
	Если ТипЗнч(МинимальнаяСумма) <> Тип("Число") Тогда
		МинимальнаяСумма = 10;
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-05 (#4150)
	
	Если ГлубинаФормированияОтчета = Неопределено Или ОповещениеДляОтправкиОтчета = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Формирование отчета по закрытию остатков по бюджету", УровеньЖурналаРегистрации.Ошибка,,, "Не указаны настройки");
		Возврат;
	КонецЕсли;	
	
	ТекущаяДата = ТекущаяДата();
	НачалоПериодаОтбора = ТекущаяДата - ГлубинаФормированияОтчета*86400;
	КонецПериодаОтбора = ТекущаяДата;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-05 (#4150)
	//ДеревоЗначений = Новый ДеревоЗначений;
	ТабличныйДокументРезультат = Новый ТабличныйДокумент;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-05 (#4150)

    СхемаКомпоновкиДанных = Отчеты.ок_ЗакрытияОстатковПоБюджету.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ВариантНастроек = Неопределено;
	Для Каждого ТекВариантНастроек Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-05 (#4150)
		//Если ТекВариантНастроек.Имя = "ДляРЗ" Тогда
		Если ТекВариантНастроек.Имя = "ДляРЗ_Новый" Тогда
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-05 (#4150)
			ВариантНастроек = ТекВариантНастроек;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВариантНастроек = Неопределено Тогда
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-05 (#4150)
		//ЗаписьЖурналаРегистрации("Формирование отчета по закрытию остатков по бюджету", УровеньЖурналаРегистрации.Ошибка,,, "Не найден вариант отчета ""ДляРЗ""");
		ЗаписьЖурналаРегистрации("Формирование отчета по закрытию остатков по бюджету", УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru = 'Не найден вариант отчета ""ДляРЗ_Новый""'"));
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-05 (#4150)
		Возврат;
	КонецЕсли;
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек.ЗагрузитьНастройки(ВариантНастроек.Настройки);
    Настройки = КомпоновщикНастроек.Настройки;
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериодаОтбора",НачалоПериодаОтбора);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериодаОтбора",КонецПериодаОтбора); 
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-05 (#4150)
	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сумма");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = МинимальнаяСумма;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-05 (#4150)
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-05 (#4150)
    // МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-05 (#4150)
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-05 (#4150)
    //ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки); 
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    //ПроцессорВывода.УстановитьОбъект(ДеревоЗначений);
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки); 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТабличныйДокументРезультат);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-05 (#4150)
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-05 (#4150)
	//Для Каждого СтрокаИнициатор Из ДеревоЗначений.Строки Цикл 
	//	
	//	Если Не СтрокаИнициатор.Строки.Количество() Тогда 
	//		Продолжить;
	//	КонецЕсли;	
	//			
	//	ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
	//	
	//	ЭтоИнициатор = ?(СтрокаИнициатор.ОЦР = Неопределено, Истина, Ложь);
	//	
	//	Заголовок = "Уменьшение доступного лимита бюджета на сумму перерасхода по заявкам " 
	//	            + Формат(НачалоПериодаОтбора,"ДФ=dd.MM.yyyy") + " - " + Формат(КонецПериодаОтбора,"ДФ=dd.MM.yyyy");
	//	
	//	ЗаголовокИнициатор = ?(ЭтоИнициатор, 
	//							"Инициатор: " 	+ СтрокаИнициатор.Инициатор,
	//							"ОЦР: " 		+ СтрокаИнициатор.ОЦР);
	//	
	//	ТекстHTML = "<HTML><HEAD>
	//				|<STYLE type=text/css>
	//				|TH {OVERFLOW: hidden; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; FONT-FAMILY: Arial; BORDER-RIGHT: #a0a0a0 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: #a0a0a0 1px solid; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 2px; BORDER-LEFT: #a0a0a0 1px solid; PADDING-RIGHT: 0px}
	//				|TD {OVERFLOW: hidden; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; FONT-FAMILY: Arial; BORDER-RIGHT: #a0a0a0 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: #a0a0a0 1px solid; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 2px; BORDER-LEFT: #a0a0a0 1px solid; PADDING-RIGHT: 0px}
	//				|TABLE {FONT-SIZE: 8pt; FONT-FAMILY: Arial; VERTICAL-ALIGN: bottom; BORDER-COLLAPSE: collapse; TABLE-LAYOUT: fixed; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 2px; PADDING-RIGHT: 0px}
	//				|</STYLE>
	//				|</HEAD><BODY>
	//				|<SPAN style=""WHITE-SPACE: nowrap""><FONT size=4><STRONG>" + Заголовок + "</STRONG></FONT></SPAN> 
	//				|<BR><BR>
	//				|<SPAN style=""WHITE-SPACE: nowrap""><FONT size=2>" + ЗаголовокИнициатор + "</FONT></SPAN> 
	//				|<TABLE table-layout=fixed>
	//				|<COL WIDTH=80  align=left>" + 
	//				?(ЭтоИнициатор, "", "<COL WIDTH=200  align=left>") + "
	//				|<COL WIDTH=250>
	//				|<COL WIDTH=80  align=right>
	//					|<TR style=""BACKGROUND-COLOR: #d6e5cb"">
	//	            	|<TH WIDTH=80  align=left>№ Заявки</TH>" + 
	//					?(ЭтоИнициатор, "", "<TH WIDTH=200  align=left>Инициатор заявки</TH>") + " 
	//					|<TH WIDTH=250  align=left>Цель расхода</TH>
	//			    	|<TH WIDTH=80  align=right>Сумма</th></TR>";
	//	
	//	Для Каждого ДетальнаяЗапись Из СтрокаИнициатор.Строки Цикл 
	//		
	//		ТекстHTML = ТекстHTML + "<TR>";
	//		//ТекстHTML = ТекстHTML + "<td>" + ДетальнаяЗапись.ФВБ.Номер + " " + Формат(ДетальнаяЗапись.ФВБ.Дата, "ДФ=dd.MM.yyyy") +"</td>";
	//		ТекстHTML = ТекстHTML + "<TD WIDTH=80  align=left>" + ДетальнаяЗапись.ФВБ.Номер 		+ "</TD>";
	//		Если НЕ ЭтоИнициатор Тогда
	//			ТекстHTML = ТекстHTML + "<TD WIDTH=200  align=left>" + ДетальнаяЗапись.Инициатор 	+ "</TD>";
	//		КонецЕсли;
	//		ТекстHTML = ТекстHTML + "<TD WIDTH=250>" + ДетальнаяЗапись.ЦельРасхода 	+ "</TD>";
	//		ТекстHTML = ТекстHTML + "<TD WIDTH=80  align=right>" + ДетальнаяЗапись.Сумма 			+ "</TD>";
	//		ТекстHTML = ТекстHTML + "</TR>";
	//		
	//		Если НЕ ЗначениеЗаполнено(СтрокаИнициатор.Инициатор)
	//			И НЕ ЗначениеЗаполнено(СтрокаИнициатор.ОЦР) Тогда
	//			ЗаписьЖурналаРегистрации("Формирование отчета по закрытию остатков по бюджету", УровеньЖурналаРегистрации.Информация,,, "Не найден получатель для отправки оповещения по ФВБ """ + ДетальнаяЗапись.ФВБ + """");
	//		КонецЕсли;
	//		
	//	КонецЦикла;	
	//	
	//	//ТекстHTML = ТекстHTML + "<TR style=""BACKGROUND-COLOR: #d6e5cb"">
	//	//							|<TH align=left>Итого</TH>
	//	//							|<TH></TH>" + 
	//	//							?(ЭтоИнициатор, "", "<TH></TH>") + " 
	//	//					    	|<TH WIDTH=100  align=right>" + СтрокаИнициатор.Сумма + "</TH></TR>";
	//	
	//	Если НЕ ЗначениеЗаполнено(СтрокаИнициатор.Инициатор)
	//		И НЕ ЗначениеЗаполнено(СтрокаИнициатор.ОЦР) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ТекстHTML = ТекстHTML + "</TABLE></BODY></HTML>";		
	//	
	//	
	//	СтруктураКонтекст = Новый Структура();
	//	СтруктураКонтекст.Вставить("Получатель",			?(ЭтоИнициатор, СтрокаИнициатор.Инициатор, СтрокаИнициатор.ОЦР));
	//	СтруктураКонтекст.Вставить("Пользователь",			?(ЭтоИнициатор, СтрокаИнициатор.Инициатор, СтрокаИнициатор.ОЦР));
	//	
	//	СтруктураКонтекст.Вставить("Текст",					ТекстHTML);
	//	СтруктураКонтекст.Вставить("ТекущийОбъект",			Документы.бит_ФормаВводаБюджета.ПустаяСсылка());
	//	СтруктураКонтекст.Вставить("ИдентификаторЗаписи",	ИдентификаторЗаписи);
	//	
	//	КэшАдресов = Новый ТаблицаЗначений;
	//	КэшАдресов.Колонки.Добавить("Получатель",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	//	КэшАдресов.Колонки.Добавить("ВидКонтактнойИнформации");
	//	КэшАдресов.Колонки.Добавить("Адрес");
	//	КэшАдресов.Индексы.Добавить("Получатель,ВидКонтактнойИнформации");
	//	
	//	//Создание вложения в оповещение			
	//	Если ЭтоИнициатор Тогда
	//		
	//		ТабДок = Новый ТабличныйДокумент;
	//		ТабДок.Область("C1").ШиринаКолонки = 16;
	//		ТабДок.Область("C2").ШиринаКолонки = 80;
	//		ТабДок.Область("C3").ШиринаКолонки = 15;
	//		
	//		ТабДок.Область("C1").ГоризонтальноеПоложение 	= ГоризонтальноеПоложение.Центр;
	//		ТабДок.Область("C1").ВертикальноеПоложение 		= ВертикальноеПоложение.Верх;
	//		ТабДок.Область("C2").РазмещениеТекста 			= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	//		ТабДок.Область("C3").ГоризонтальноеПоложение 	= ГоризонтальноеПоложение.Право;
	//		ТабДок.Область("C3").ВертикальноеПоложение 		= ВертикальноеПоложение.Верх;
	//		
	//		ТабДок.Область("C1").Шрифт = Новый Шрифт("Arial", 10);
	//		ТабДок.Область("C2").Шрифт = Новый Шрифт("Arial", 10);
	//		ТабДок.Область("C3").Шрифт = Новый Шрифт("Arial", 10);
	//		
	//		ТабДок.Область("R1"+"C1").Текст = Заголовок;
	//		ТабДок.Область("R1"+"C1").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R1"+"C1").Шрифт = Новый Шрифт("Arial", 14, Истина);
	//		
	//		ТабДок.Область("R2"+"C1").Текст = ?(СтрокаИнициатор.ОЦР = Неопределено, "Инициатор: " + СтрокаИнициатор.Инициатор, "ОЦР: " + СтрокаИнициатор.ОЦР);
	//		ТабДок.Область("R2"+"C1").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R3"+"C1").Текст = "№ Заявки";
	//		ТабДок.Область("R3"+"C2").Текст = "Цель расхода";
	//		ТабДок.Область("R3"+"C3").Текст = "Сумма";
	//		
	//		ТабДок.Область("R3"+"C1").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R3"+"C2").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R3"+"C3").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		
	//		ТабДок.Область("R3"+"C1").ЦветФона = Новый Цвет(214, 229, 203);
	//		ТабДок.Область("R3"+"C2").ЦветФона = Новый Цвет(214, 229, 203);
	//		ТабДок.Область("R3"+"C3").ЦветФона = Новый Цвет(214, 229, 203);
	//		
	//		ТабДок.Область("R3"+"C1").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R3"+"C2").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R3"+"C3").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		
	//		Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	//		ТабДок.Область("R3"+"C1").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		ТабДок.Область("R3"+"C2").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		ТабДок.Область("R3"+"C3").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		
	//		ИндексСтроки = 3;
	//		Для Каждого ДетальнаяЗапись Из СтрокаИнициатор.Строки Цикл 
	//			
	//			ИндексСтроки = ИндексСтроки + 1;
	//			ВремСтрока   =  Формат(ИндексСтроки, "ЧГ="); // Видяйкин В. 20201207
	//			// Видяйкин В. 20201207 +
	//			//ТабДок.Область("R" + ИндексСтроки + "C1").Текст = "" + ДетальнаяЗапись.ФВБ.Номер + " " + Формат(ДетальнаяЗапись.ФВБ.Дата, "ДФ=dd.MM.yyyy");
	//			//ТабДок.Область("R" + ИндексСтроки + "C1").Текст = "" + ДетальнаяЗапись.ФВБ.Номер;
	//			//ТабДок.Область("R" + ИндексСтроки + "C2").Текст = ДетальнаяЗапись.ЦельРасхода;
	//			//ТабДок.Область("R" + ИндексСтроки + "C3").Текст = ДетальнаяЗапись.Сумма;
	//			//
	//			//ТабДок.Область("R" + ИндексСтроки + "C1").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			//ТабДок.Область("R" + ИндексСтроки + "C2").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			//ТабДок.Область("R" + ИндексСтроки + "C3").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			//
	//			//ТабДок.Область("R" + ИндексСтроки + "C3").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	//			ТабДок.Область("R" + ВремСтрока + "C1").Текст = "" + ДетальнаяЗапись.ФВБ.Номер;
	//			ТабДок.Область("R" + ВремСтрока + "C2").Текст = ДетальнаяЗапись.ЦельРасхода;
	//			ТабДок.Область("R" + ВремСтрока + "C3").Текст = ДетальнаяЗапись.Сумма;
	//			
	//			ТабДок.Область("R" + ВремСтрока + "C1").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			ТабДок.Область("R" + ВремСтрока + "C2").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			ТабДок.Область("R" + ВремСтрока + "C3").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			
	//			ТабДок.Область("R" + ВремСтрока + "C3").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;				
	//			// Видяйкин В. 20201207 -
	//		КонецЦикла;																		  
	//		
	//		ИндексСтроки = ИндексСтроки + 1;
	//		ВремСтрока   =  Формат(ИндексСтроки, "ЧГ="); // Видяйкин В. 20201207
	//		// Видяйкин В. 20201207 +
	//		//ТабДок.Область("R" + ИндексСтроки + "C1").Текст = "Итого";
	//		//ТабДок.Область("R" + ИндексСтроки + "C2").Текст = "";
	//		//ТабДок.Область("R" + ИндексСтроки + "C3").Текст = СтрокаИнициатор.Сумма;
	//		//
	//		//ТабДок.Область("R" + ИндексСтроки + "C1").Обвести(Рамка,Рамка,,Рамка);
	//		//ТабДок.Область("R" + ИндексСтроки + "C2").Обвести(,Рамка,Рамка,Рамка);
	//		//ТабДок.Область("R" + ИндексСтроки + "C3").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		//
	//		//ТабДок.Область("R" + ИндексСтроки + "C1").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		//ТабДок.Область("R" + ИндексСтроки + "C3").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	//		//
	//		//ТабДок.Область("R" + ИндексСтроки + "C1").ЦветФона = Новый Цвет(214, 229, 203);
	//		//ТабДок.Область("R" + ИндексСтроки + "C2").ЦветФона = Новый Цвет(214, 229, 203);
	//		//ТабДок.Область("R" + ИндексСтроки + "C3").ЦветФона = Новый Цвет(214, 229, 203);
	//		//
	//		//ТабДок.Область("R" + ИндексСтроки + "C1").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		//ТабДок.Область("R" + ИндексСтроки + "C2").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		//ТабДок.Область("R" + ИндексСтроки + "C3").Шрифт = Новый Шрифт("Arial", 10, Истина);

	//		ТабДок.Область("R" + ВремСтрока + "C1").Текст = "Итого";
	//		ТабДок.Область("R" + ВремСтрока + "C2").Текст = "";
	//		ТабДок.Область("R" + ВремСтрока + "C3").Текст = СтрокаИнициатор.Сумма;
	//		
	//		ТабДок.Область("R" + ВремСтрока + "C1").Обвести(Рамка,Рамка,,Рамка);
	//		ТабДок.Область("R" + ВремСтрока + "C2").Обвести(,Рамка,Рамка,Рамка);
	//		ТабДок.Область("R" + ВремСтрока + "C3").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		
	//		ТабДок.Область("R" + ВремСтрока + "C1").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R" + ВремСтрока + "C3").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	//		
	//		ТабДок.Область("R" + ВремСтрока + "C1").ЦветФона = Новый Цвет(214, 229, 203);
	//		ТабДок.Область("R" + ВремСтрока + "C2").ЦветФона = Новый Цвет(214, 229, 203);
	//		ТабДок.Область("R" + ВремСтрока + "C3").ЦветФона = Новый Цвет(214, 229, 203);
	//		
	//		ТабДок.Область("R" + ВремСтрока + "C1").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R" + ВремСтрока + "C2").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R" + ВремСтрока + "C3").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		// Видяйкин В. 20201207 -
	//	Иначе
	//		
	//		ТабДок = Новый ТабличныйДокумент;
	//		ТабДок.Область("C1").ШиринаКолонки = 16;
	//		ТабДок.Область("C2").ШиринаКолонки = 40;
	//		ТабДок.Область("C3").ШиринаКолонки = 80;
	//		ТабДок.Область("C4").ШиринаКолонки = 15;
	//	
	//		ТабДок.Область("C1").ГоризонтальноеПоложение 	= ГоризонтальноеПоложение.Центр;
	//		ТабДок.Область("C1").ВертикальноеПоложение 		= ВертикальноеПоложение.Верх;
	//		ТабДок.Область("C2").РазмещениеТекста 			= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	//		ТабДок.Область("C3").РазмещениеТекста 			= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	//		ТабДок.Область("C4").ГоризонтальноеПоложение 	= ГоризонтальноеПоложение.Право;
	//		ТабДок.Область("C4").ВертикальноеПоложение 		= ВертикальноеПоложение.Верх;
	//		
	//		ТабДок.Область("C1").Шрифт = Новый Шрифт("Arial", 10);
	//		ТабДок.Область("C2").Шрифт = Новый Шрифт("Arial", 10);
	//		ТабДок.Область("C3").Шрифт = Новый Шрифт("Arial", 10);
	//		ТабДок.Область("C4").Шрифт = Новый Шрифт("Arial", 10);
	//		
	//		ТабДок.Область("R1"+"C1").Текст = Заголовок;
	//		ТабДок.Область("R1"+"C1").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R1"+"C1").Шрифт = Новый Шрифт("Arial", 14, Истина);
	//		
	//		ТабДок.Область("R2"+"C1").Текст = ?(ЭтоИнициатор, "Инициатор: " + СтрокаИнициатор.Инициатор, "ОЦР: " + СтрокаИнициатор.ОЦР);
	//		ТабДок.Область("R2"+"C1").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R3"+"C1").Текст = "№ Заявки";
	//		ТабДок.Область("R3"+"C2").Текст = "Инициатор заявки";
	//		ТабДок.Область("R3"+"C3").Текст = "Цель расхода";
	//		ТабДок.Область("R3"+"C4").Текст = "Сумма";
	//		
	//		ТабДок.Область("R3"+"C1").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R3"+"C2").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R3"+"C3").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R3"+"C4").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		
	//		ТабДок.Область("R3"+"C1").ЦветФона = Новый Цвет(214, 229, 203);
	//		ТабДок.Область("R3"+"C2").ЦветФона = Новый Цвет(214, 229, 203);
	//		ТабДок.Область("R3"+"C3").ЦветФона = Новый Цвет(214, 229, 203);
	//		ТабДок.Область("R3"+"C4").ЦветФона = Новый Цвет(214, 229, 203);
	//		
	//		ТабДок.Область("R3"+"C1").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R3"+"C2").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R3"+"C3").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R3"+"C4").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		
	//		Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	//		ТабДок.Область("R3"+"C1").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		ТабДок.Область("R3"+"C2").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		ТабДок.Область("R3"+"C3").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		ТабДок.Область("R3"+"C4").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		
	//		ИндексСтроки = 3;
	//		Для Каждого ДетальнаяЗапись Из СтрокаИнициатор.Строки Цикл 
	//			
	//			ИндексСтроки = ИндексСтроки + 1;
	//			ВремСтрока   =  Формат(ИндексСтроки, "ЧГ="); // Видяйкин В. 20201207
	//			//ТабДок.Область("R" + ИндексСтроки + "C1").Текст = "" + ДетальнаяЗапись.ФВБ.Номер + " " + Формат(ДетальнаяЗапись.ФВБ.Дата, "ДФ=dd.MM.yyyy");
	//			// Видяйкин В. 20201207 +
	//			//ТабДок.Область("R" + ИндексСтроки + "C1").Текст = "" + ДетальнаяЗапись.ФВБ.Номер;
	//			//ТабДок.Область("R" + ИндексСтроки + "C2").Текст = ДетальнаяЗапись.Инициатор;
	//			//ТабДок.Область("R" + ИндексСтроки + "C3").Текст = ДетальнаяЗапись.ЦельРасхода;
	//			//ТабДок.Область("R" + ИндексСтроки + "C4").Текст = ДетальнаяЗапись.Сумма;
	//			//
	//			//ТабДок.Область("R" + ИндексСтроки + "C1").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			//ТабДок.Область("R" + ИндексСтроки + "C2").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			//ТабДок.Область("R" + ИндексСтроки + "C3").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			//ТабДок.Область("R" + ИндексСтроки + "C4").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			//
	//			//ТабДок.Область("R" + ИндексСтроки + "C4").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	//			ТабДок.Область("R" + ВремСтрока + "C1").Текст = "" + ДетальнаяЗапись.ФВБ.Номер;
	//			ТабДок.Область("R" + ВремСтрока + "C2").Текст = ДетальнаяЗапись.Инициатор;
	//			ТабДок.Область("R" + ВремСтрока + "C3").Текст = ДетальнаяЗапись.ЦельРасхода;
	//			ТабДок.Область("R" + ВремСтрока + "C4").Текст = ДетальнаяЗапись.Сумма;
	//			
	//			ТабДок.Область("R" + ВремСтрока + "C1").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			ТабДок.Область("R" + ВремСтрока + "C2").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			ТабДок.Область("R" + ВремСтрока + "C3").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			ТабДок.Область("R" + ВремСтрока + "C4").Обвести(Рамка,Рамка,Рамка,Рамка);
	//			
	//			ТабДок.Область("R" + ВремСтрока + "C4").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	//			// Видяйкин В. 20201207 -
	//		КонецЦикла;																		  
	//		
	//		ИндексСтроки = ИндексСтроки + 1;
	//   		ВремСтрока   =  Формат(ИндексСтроки, "ЧГ="); // Видяйкин В. 20201207
	//		// Видяйкин В. 20201207 +
	//		//ИндексСтроки = ИндексСтроки + 1;
	//		//ТабДок.Область("R" + ИндексСтроки + "C1").Текст = "Итого";
	//		//ТабДок.Область("R" + ИндексСтроки + "C2").Текст = "";
	//		//ТабДок.Область("R" + ИндексСтроки + "C3").Текст = "";
	//		//ТабДок.Область("R" + ИндексСтроки + "C4").Текст = СтрокаИнициатор.Сумма;
	//		//
	//		//ТабДок.Область("R" + ИндексСтроки + "C1").Обвести(Рамка,Рамка,,Рамка);
	//		//ТабДок.Область("R" + ИндексСтроки + "C2").Обвести(,Рамка,,Рамка);
	//		//ТабДок.Область("R" + ИндексСтроки + "C3").Обвести(,Рамка,Рамка,Рамка);
	//		//ТабДок.Область("R" + ИндексСтроки + "C4").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		//
	//		//ТабДок.Область("R" + ИндексСтроки + "C1").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		//ТабДок.Область("R" + ИндексСтроки + "C4").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	//		//
	//		//ТабДок.Область("R" + ИндексСтроки + "C1").ЦветФона = Новый Цвет(214, 229, 203);
	//		//ТабДок.Область("R" + ИндексСтроки + "C2").ЦветФона = Новый Цвет(214, 229, 203);
	//		//ТабДок.Область("R" + ИндексСтроки + "C3").ЦветФона = Новый Цвет(214, 229, 203);
	//		//ТабДок.Область("R" + ИндексСтроки + "C4").ЦветФона = Новый Цвет(214, 229, 203);
	//		//
	//		//ТабДок.Область("R" + ИндексСтроки + "C1").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		//ТабДок.Область("R" + ИндексСтроки + "C2").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		//ТабДок.Область("R" + ИндексСтроки + "C3").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		//ТабДок.Область("R" + ИндексСтроки + "C4").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R" + ВремСтрока + "C1").Текст = "Итого";
	//		ТабДок.Область("R" + ВремСтрока + "C2").Текст = "";
	//		ТабДок.Область("R" + ВремСтрока + "C3").Текст = "";
	//		ТабДок.Область("R" + ВремСтрока + "C4").Текст = СтрокаИнициатор.Сумма;
	//		
	//		ТабДок.Область("R" + ВремСтрока + "C1").Обвести(Рамка,Рамка,,Рамка);
	//		ТабДок.Область("R" + ВремСтрока + "C2").Обвести(,Рамка,,Рамка);
	//		ТабДок.Область("R" + ВремСтрока + "C3").Обвести(,Рамка,Рамка,Рамка);
	//		ТабДок.Область("R" + ВремСтрока + "C4").Обвести(Рамка,Рамка,Рамка,Рамка);
	//		
	//		ТабДок.Область("R" + ВремСтрока + "C1").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	//		ТабДок.Область("R" + ВремСтрока + "C4").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	//		
	//		ТабДок.Область("R" + ВремСтрока + "C1").ЦветФона = Новый Цвет(214, 229, 203);
	//		ТабДок.Область("R" + ВремСтрока + "C2").ЦветФона = Новый Цвет(214, 229, 203);
	//		ТабДок.Область("R" + ВремСтрока + "C3").ЦветФона = Новый Цвет(214, 229, 203);
	//		ТабДок.Область("R" + ВремСтрока + "C4").ЦветФона = Новый Цвет(214, 229, 203);
	//		
	//		ТабДок.Область("R" + ВремСтрока + "C1").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R" + ВремСтрока + "C2").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R" + ВремСтрока + "C3").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		ТабДок.Область("R" + ВремСтрока + "C4").Шрифт = Новый Шрифт("Arial", 10, Истина);
	//		// Видяйкин В. 20201207 -
	//		
	//	КонецЕсли;
	//	//Прервать; Видяйкин В. (Исправление ошибки) 01.02.2021г.
	//	                                                                       
	//	Каталог = КаталогВременныхФайлов();
	//	ПолныйПутьКФайлу = Каталог + ИмяФайла;
	//	Попытка
	//		ТабДок.Записать(ПолныйПутьКФайлу,ТипФайлаТабличногоДокумента.XLS);
	//		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПолныйПутьКФайлу);
	//		УдалитьФайлы(ПолныйПутьКФайлу);
	//	Исключение
	//		ЗаписьЖурналаРегистрации("Формирование отчета по закрытию остатков по бюджету", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	//		Продолжить;
	//	КонецПопытки;
	//	
	//	СтруктураФайла = Новый Структура;
	//	СтруктураФайла.Вставить("ИмяФайла", ИмяФайла);
	//	СтруктураФайла.Вставить("Файл", 	ДвоичныеДанныеФайла);
	//	СписокФайлов = Новый Массив;
	//	СписокФайлов.Добавить(СтруктураФайла);
	//	
	//	Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.СохранитьВременныеФайлыВложений(ИдентификаторЗаписи, СписокФайлов);
	//	
	//	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//	//Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.ЗаписатьОповещение(Справочники.ВидыКонтактнойИнформации.EmailИнициатора,
	//	Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.СформироватьИЗаписатьСообщение(Справочники.ВидыКонтактнойИнформации.EmailИнициатора,
	//	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	//	                                                                          ОповещениеДляОтправкиОтчета.ШаблонСообщения,
	//																			  ОповещениеДляОтправкиОтчета.НастройкаДоставки,
	//																			  СтруктураКонтекст,КэшАдресов);
	//				
	//КонецЦикла;
	
	ВысотаТабличногоДокумента = ТабличныйДокументРезультат.ВысотаТаблицы;

	ОчереднойПолучатель = Неопределено;
	НачалоОбласти = 1;
	Заголовок = "";
	
	ДатаНачалаСтрокой = Формат(НачалоПериодаОтбора, "ДФ=dd.MM.yyyy");
	ДатаОкончанияСтрокой = Формат(КонецПериодаОтбора, "ДФ=dd.MM.yyyy");
	
	Для НомерСтроки = 1 По ВысотаТабличногоДокумента Цикл
		
		ЗначениеЗаголовка = ПолучитьЗначениеЯчейкиТабличногоДокумента(ТабличныйДокументРезультат, НомерСтроки, 1);
		
		Если СтрНачинаетсяС(ЗначениеЗаголовка, "Уменьшение доступного лимита") Тогда // Это заголовок таблицы
			
			Если ОчереднойПолучатель <> Неопределено Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("ЗаголовокФайла", Заголовок);
				Параметры.Вставить("ДатаНачала", ДатаНачалаСтрокой);
				Параметры.Вставить("ДатаОкончания", ДатаОкончанияСтрокой);
				Параметры.Вставить("ОчереднойПолучатель", ОчереднойПолучатель);
				Параметры.Вставить("ОповещениеДляОтправкиОтчета", ОповещениеДляОтправкиОтчета);
				Параметры.Вставить("ПерваяСтрока", НачалоОбласти);
				Параметры.Вставить("ПоследняяСтрока", НомерСтроки - 1);
				
				СформироватьОповещениеПоДаннымДокумента(ТабличныйДокументРезультат, Параметры);
				
			КонецЕсли;
			
			// запоминаем данные для получения диапазона ячеек и формирования оповещения
			ОчереднойПолучатель = ПолучитьРасшифровкуЯчейкиТабличногоДокумента(ТабличныйДокументРезультат, ДанныеРасшифровки, НомерСтроки, 1);
			Заголовок = ЗначениеЗаголовка;
			НачалоОбласти = НомерСтроки; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОчереднойПолучатель <> Неопределено Тогда // Для последней таблицы формируем отдельно
		
		Параметры = Новый Структура;
		Параметры.Вставить("ЗаголовокФайла", Заголовок);
		Параметры.Вставить("ДатаНачала", ДатаНачалаСтрокой);
		Параметры.Вставить("ДатаОкончания", ДатаОкончанияСтрокой);
		Параметры.Вставить("ОчереднойПолучатель", ОчереднойПолучатель);
		Параметры.Вставить("ОповещениеДляОтправкиОтчета", ОповещениеДляОтправкиОтчета);
		Параметры.Вставить("ПерваяСтрока", НачалоОбласти);
		Параметры.Вставить("ПоследняяСтрока", НомерСтроки - 1);
		
		СформироватьОповещениеПоДаннымДокумента(ТабличныйДокументРезультат, Параметры);
		
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-05 (#4150)
	
КонецПроцедуры
//ОКЕЙ Рычаков А.С. (СофтЛаб) Конец 2019-09-24 (#3492)

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-05 (#4150)
Функция ПолучитьЗначениеЯчейкиТабличногоДокумента(ТабличныйДокумент, НомерСтроки, НомерКолонки)
	
	Возврат ТабличныйДокумент.ПолучитьОбласть("R" + Формат(НомерСтроки, "ЧГ=0") + "C" + НомерКолонки).ТекущаяОбласть.Текст;
	
КонецФункции

Функция ПолучитьРасшифровкуЯчейкиТабличногоДокумента(ТабличныйДокумент, ДанныеРасшифровки, НомерСтроки, НомерКолонки)
	
	ИдентификаторРасшифровки = ТабличныйДокумент.ПолучитьОбласть("R" + Формат(НомерСтроки, "ЧГ=0") + "C" + НомерКолонки).ТекущаяОбласть.Расшифровка;
	
	ПоляРасшифровки = ДанныеРасшифровки.Элементы[ИдентификаторРасшифровки].ПолучитьПоля();
	ЗначениеПоля = ПоляРасшифровки.Найти("Получатель");
	
	Если ЗначениеПоля <> Неопределено Тогда
		Возврат ЗначениеПоля.Значение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СформироватьОповещениеПоДаннымДокумента(ТабличныйДокумент, Параметры)
	
	ТабличныйДокументПолучателя = ТабличныйДокумент.ПолучитьОбласть(Параметры.ПерваяСтрока, , Параметры.ПоследняяСтрока);
	
	Попытка
		
		ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла("xls");
		
		ТабличныйДокументПолучателя.Записать(ПолныйПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПолныйПутьКФайлу);
		
		УдалитьФайлы(ПолныйПутьКФайлу);
		
		ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла("html");
		
		ТабличныйДокументПолучателя.Записать(ПолныйПутьКФайлу, ТипФайлаТабличногоДокумента.HTML5);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПолныйПутьКФайлу);
		ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
		
		УдалитьФайлы(ПолныйПутьКФайлу);
		
	Исключение
		ЗаписьЖурналаРегистрации("Формирование отчета по закрытию остатков по бюджету", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
	
	СтруктураКонтекст = Новый Структура();
	СтруктураКонтекст.Вставить("Получатель",			Параметры.ОчереднойПолучатель);
	СтруктураКонтекст.Вставить("Пользователь",			Параметры.ОчереднойПолучатель);
	СтруктураКонтекст.Вставить("Текст",					ТекстHTML);
	СтруктураКонтекст.Вставить("ЗаголовокФайла", 		Параметры.ЗаголовокФайла);
	СтруктураКонтекст.Вставить("ДатаНачала",			Параметры.ДатаНачала);
	СтруктураКонтекст.Вставить("ДатаОкончания",			Параметры.ДатаОкончания);
	СтруктураКонтекст.Вставить("ТекущийОбъект",			Документы.бит_ФормаВводаБюджета.ПустаяСсылка());
	СтруктураКонтекст.Вставить("ИдентификаторЗаписи",	ИдентификаторЗаписи);
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("ИмяФайла", Параметры.ЗаголовокФайла + ".xls");
	СтруктураФайла.Вставить("Файл", 	ДвоичныеДанныеФайла);
	СписокФайлов = Новый Массив;
	СписокФайлов.Добавить(СтруктураФайла);
	
	КэшАдресов = Новый ТаблицаЗначений;
	КэшАдресов.Колонки.Добавить("Получатель",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КэшАдресов.Колонки.Добавить("ВидКонтактнойИнформации");
	КэшАдресов.Колонки.Добавить("Адрес");
	КэшАдресов.Индексы.Добавить("Получатель,ВидКонтактнойИнформации");
	
	Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.СохранитьВременныеФайлыВложений(ИдентификаторЗаписи, СписокФайлов);
			
	Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.СформироватьИЗаписатьСообщение(Справочники.ВидыКонтактнойИнформации.EmailИнициатора,
																										Параметры.ОповещениеДляОтправкиОтчета.ШаблонСообщения,
																										Параметры.ОповещениеДляОтправкиОтчета.НастройкаДоставки,
																										СтруктураКонтекст,КэшАдресов);
	
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-05 (#4150)

//ОК-// 1c-izhtc spawn 03.08.15 (
// документ отклонен
//Процедура ЗаполнитьТабличныеЧастиДокумента(док,строка,СтавкаНДСДокумента,СуммаСНДСВсего,СтрокаДляЗаписиПолученныхСтрока,ДопЗапись = Ложь)
//	
//	СтрокаКонтроляБюджета = Док.КонтрольБюджета.Добавить();
//	СтрокаКонтроляБюджета.Период =НачалоМесяца(Строка.IssuePeriod1C);
//	СтрокаКонтроляБюджета.ПредставлениеПериодаРегистрации = Формат(СтрокаКонтроляБюджета.Период,"ДФ='ММММ гггг'"); 
//	
//	
//	ОбъектСтроительства = ПолучитьАналитикуПоКодуАксапты(Строка.Dim1);
//	
//	Если ОбъектСтроительства <> Неопределено Тогда 
//		СтрокаКонтроляБюджета.Аналитика_2 =  ОбъектСтроительства;
//	КонецЕсли; 
//	
//	ЦФО = ПолучитьАналитикуПоКодуАксапты(строка.Dim4);
//	
//	Если ЦФО <> Неопределено Тогда 
//		СтрокаКонтроляБюджета.ЦФО =  ЦФО;
//	КонецЕсли; 
//	
//	СтатьяРег = ПолучитьАналитикуПоКодуАксапты(Строка.Dim3);
//	
//	Если СтатьяРег <> Неопределено Тогда 
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов
//		|ИЗ
//		|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
//		|ГДЕ
//		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл = &СтатьяРегл";
//		
//		Запрос.УстановитьПараметр("СтатьяРегл", СтатьяРег);
//		
//		Результат = Запрос.Выполнить();
//		
//		Выборка = Результат.Выбрать();
//		
//		Если  Выборка.Следующий() Тогда 
//			СтрокаКонтроляБюджета.СтатьяОборотов = Выборка.СтатьяОборотов;
//		КонецЕсли;
//		
//		Если СтрокаКонтроляБюджета.СтатьяОборотов.ВидСтатьи = Справочники.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность Тогда 
//			ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный
//		ИначеЕсли СтрокаКонтроляБюджета.СтатьяОборотов.ВидСтатьи = Справочники.бит_ВидыСтатейОборотов.Выручка Тогда 	
//			ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный
//		КонецЕсли;
//		
//		Док.ВидОперации = ВидОперации;
//		
//	КонецЕсли;
//	
//	Если  ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный Тогда 
//		СтрокаКонтроляБюджета.Сценарий = Справочники.СценарииПланирования.Факт_Инвест
//	ИначеЕсли 	ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный Тогда 
//		Если ЗначениеЗаполнено(Док.НомерЗаявки) Тогда 
//			СтрокаКонтроляБюджета.Сценарий = Справочники.СценарииПланирования.Факт_У
//		Иначе 
//			СтрокаКонтроляБюджета.Сценарий = Справочники.СценарииПланирования.Факт_А;
//		КонецЕсли;
//	КонецЕсли; 
//	
//	СтрокаКонтроляБюджета.НомерЗаявки = строка.E1COrderId;
//	СтавкаНДССтроки = ПолучитьСтавкуНДС(Строка.TaxValue); 
//	Если ДопЗапись Тогда 
//		СтрокаКонтроляБюджета.СуммаСНДС = -Строка.AmountInclTax;
//	Иначе 
//		СтрокаКонтроляБюджета.СуммаСНДС = Строка.AmountInclTax;
//	КонецЕсли;
//	СтрокаКонтроляБюджета.СтавкаНДС = СтавкаНДССтроки;
//	//СтрокаКонтроляБюджета.СуммаБезНДС=РассчитьСуммуБезНДС(СтрокаКонтроляБюджета.СуммаСНДС,СтавкаНДССтроки);
//	СтрокаКонтроляБюджета.НДС = бит_ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаКонтроляБюджета.СуммаСНДС, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаКонтроляБюджета.СтавкаНДС));
//	СтрокаКонтроляБюджета.СуммаБезНДС = СтрокаКонтроляБюджета.СуммаСНДС - СтрокаКонтроляБюджета.НДС;
//	//СуммаВВалютеБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаКонтроляБюджета.СуммаБезНДС,
//	//мВалютаРегламентированногоУчета,
//	//Док.ВалютаДокумента,
//	//1,
//	//Док.КурсДокумента,
//	//1,
//	//Док.КратностьДокумента);
//	
//	СтрокаКонтроляБюджета.НДС = СтрокаКонтроляБюджета.СуммаСНДС-СтрокаКонтроляБюджета.СуммаБезНДС;
//	
//	СтрокаУправленческаяАналитика = Док.УправленческаяАналитика.Добавить();
//	ЗаполнитьЗначенияСвойств(СтрокаУправленческаяАналитика,СтрокаКонтроляБюджета);
//	СтрокаУправленческаяАналитика.Сценарий = Справочники.СценарииПланирования.Факт_УУ;
//	
//	СуммаСНДСВсего = СуммаСНДСВсего + СтрокаКонтроляБюджета.СуммаСНДС;
//	
//	Если НЕ ЗначениеЗаполнено(СтрокаДляЗаписиПолученныхСтрока) Тогда 
//		СтрокаДляЗаписиПолученныхСтрока = " [RecNo]="+Строка.RecNo;
//	Иначе 
//		СтрокаДляЗаписиПолученныхСтрока = СтрокаДляЗаписиПолученныхСтрока + " or [RecNo]="+Строка.RecNo; 
//	КонецЕсли;
//	Если СтавкаНДСДокумента <> СтавкаНДССтроки Тогда 
//		Док.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
//	КонецЕсли;
//	
//
//КонецПроцедуры

//Процедура ПометитьНаУдалениеДокументы (ID_Разнесения)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	бит_БК_РазнесениеОборотов.Ссылка
//		|ИЗ
//		|	Документ.бит_БК_РазнесениеОборотов КАК бит_БК_РазнесениеОборотов
//		|ГДЕ
//		|	бит_БК_РазнесениеОборотов.ID_Разнесения = &ID_Разнесения";
//
//	Запрос.УстановитьПараметр("ID_Разнесения", ID_Разнесения);
//
//	Результат = Запрос.Выполнить();
//
//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
//
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		
//		Док = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
//		Если Док.ПометкаУдаления Тогда 
//			Продолжить;
//		КонецЕсли;
//		
//		 
//		Док.ПометкаУдаления = Истина;
//		Если Док.Проведен Тогда 
//			Док.Записать(РежимЗаписиДокумента.ОтменаПроведения)
//		Иначе 
//			Док.Записать();
//		КонецЕсли;
//		Сообщить("Документ" + Док.Ссылка + "  был помечен на удаление. Создан новый документ",СтатусСообщения.ОченьВажное);
//		
//
//    КонецЦикла;
//
//	
//КонецПроцедуры	
// 1c-izhtc spawn 03.08.15 ) 

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-11-05 (#ПроектИнтеграцияАксапта12)
Процедура ЗагрузкаДанныхИзАксапты12() Экспорт
	
	НачалоЗагрузкиДанных = ТекущаяДата();

	//Загрузка данных из Аксапты	
    ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало загрузки");
	
	Обработка = Обработки.ОК_ЗагрузкаДанныхИзАксапты12.Создать();
	Обработка.ЗагрузитьГруппу("");

    ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение загрузки");

	//Трансляция загруженных данных из Аксапты							 
    ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты 12. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало трансляции");
							 
	Обработка = Обработки.ОК_ТрансляцияОперацииАксапты12.Создать();
	Обработка.РучнаяТрансляцияЗагруженныхДанныхИзАксапты();

	
    ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты 12. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение трансляции");
							 
	//Снятие лишних флагов "Загружено с ошибкой"							 
    ЗаписьЖурналаРегистрации("Снятие лишних флагов Загружено с ошибкой 12. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало");
							 
	Обработка = Обработки.ОК_СнятиеЛишнихЗагруженоСОшибкойОперацияАксапты12.Создать();
	Обработка.СнятьФлаги();

	
    ЗаписьЖурналаРегистрации("Снятие лишних флагов Загружено с ошибкой 12. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение");

	ОкончаниеЗагрузкиДанных = ТекущаяДата();
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-11-05 (#ПроектИнтеграцияАксапта12)

// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-28 (#4391)
Процедура ок_ОбновлениеИнформацииОбУвольненииИнициаторовИзБОСС() Экспорт
	УстановитьПривилегированныйРежим(Истина); 
	
	СинонимРЗ = Метаданные.РегламентныеЗадания.ок_ОбновлениеИнформацииОбУвольненииИнициаторовИзБОСС.Синоним;
	ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,, "Начало обновления");
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ок_ОбновлениеИнформацииОбУвольненииИнициаторовИзБОСС);

	ОбработкаЗагрузкиБОСС = Обработки.ОК_ЗагрузкаИнициатораБОСС.Создать();
	ПодключениеУстановлено = ОбработкаЗагрузкиБОСС.ПодключениеКБазе();
	Если Не ПодключениеУстановлено Тогда 
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, "Не удалось подключиться к базе инициаторов БОСС");
		Возврат;
	КонецЕсли;	
	
	ОбработкаЗагрузкиБОСС.ЗагрузитьИзБОССУволенныхИнициаторов();
	
	ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,, "Окончание обновления");
		
КонецПроцедуры
// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-28 (#4391)