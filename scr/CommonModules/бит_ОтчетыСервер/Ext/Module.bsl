
#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСКомпоновщикомИПараметрамиЗапроса

// Процедура устанавливает параметр компоновщика.
// 
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных.
//  Значение	 		- Произвольное значение.
//  ИмяПараметра  	 	- Строка.
//  ИмяКлюча 			- Строка (необязательный).
// 
Процедура УстановитьЗначениеПараметраКомпоновщика(КомпоновщикНастроек, Значение, ИмяПараметра, ИмяКлюча = Неопределено) Экспорт

	НовыйПараметрКД =  Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(НовыйПараметрКД);
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИдНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ЗначениеПараметра);
	
	ПараметрСКД = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдНастройки);
	
	Если ПараметрСКД = Неопределено Тогда
		ТекстСообщения = СтрШаблон(Нстр("ru = 'Ошибка. Не найден параметр СКД: &1'", ИмяПараметра));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрСКД.Использование = Истина;
	
	Если ИмяКлюча = Неопределено Тогда
		ПараметрСКД.Значение = Значение;
	Иначе	
	    ПараметрСКД.Значение[ИмяКлюча] = Значение;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПараметраКомпоновщика()

// Процедура устанавливает фиксированные параметры компоновщика по списку.
// 
// Параметры:
//  ТекущийОбъект 			 - ОтчетОбъект.	
//  СписокПараметровНаФорме  - Список значений.
//  СтруктураПараметров  	 - Струткура (По умолчанию = Неопределено).
// 
Процедура УстановитьЗначенияФиксированныхПараметровКомпоновщикаПоСписку(ТекущийОбъект, СписокПараметровНаФорме, СтруктураПараметров = Неопределено) Экспорт

	Если СтруктураПараметров = Неопределено Тогда	
		СтруктураПараметров = Новый Структура;  	
	КонецЕсли;
	ЗначениеПараметра = Неопределено;
	
	
	// Заполним струкуру параметров.
	Для каждого ЭлементСписка Из СписокПараметровНаФорме Цикл
		
		ИмяПараметра = ЭлементСписка.Значение;
		СтруктураПараметров.Вставить(ИмяПараметра, ТекущийОбъект[ИмяПараметра]);
		
	КонецЦикла;
	
	// Установим фиксированные параметры.
	КоллекцияФиксПараметров = ТекущийОбъект.КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы;
	Для каждого ФиксПараметр Из КоллекцияФиксПараметров Цикл
		
		ИмяПараметра = Строка(ФиксПараметр.Параметр);
		
		ПараметрНайден = СтруктураПараметров.Свойство(ИмяПараметра, ЗначениеПараметра);
		Если ПараметрНайден Тогда
			ФиксПараметр.Значение 	   = ЗначениеПараметра;
			ФиксПараметр.Использование = Истина;
		КонецЕсли;                                     	
		
	КонецЦикла;

КонецПроцедуры // УстановитьЗначенияФиксированныхПараметровКомпоновщикаПоСписку()
														 
// Процедура получает параметр компоновщика.
// 
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных.
//  ИмяПараметра  	 	- Строка.
//  ИмяКлюча 			- Строка (необязательный).
// 
// Возвращаемое значение:
//  Произвольное значение.
// 
Функция ПолучитьЗначениеПараметраКомпоновщика(КомпоновщикНастроек, ИмяПараметра, ИмяКлюча = Неопределено) Экспорт

	НовыйПараметрКД =  Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(НовыйПараметрКД);
	
	ИдНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ЗначениеПараметра);
	
	ПараметрСКД = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдНастройки);
	
	Если ИмяКлюча = Неопределено Тогда
		Значение = ПараметрСКД.Значение;
	Иначе	
	    Значение = ПараметрСКД.Значение[ИмяКлюча];
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьЗначениеПараметраКомпоновщика()

// Процедура обновляет предопределенные варианты отчетов.
// 
// Параметры:
//  КлючОбъекта - Строка(По умолчанию = Неопределено).
// 
Процедура ОбновитьПредопределенныеВарианты(КлючОбъекта   = Неопределено, РежимСообщений = "Все") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	// Описание типов строка.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов(МассивТипов,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока256 = Новый ОписаниеТипов(МассивТипов,, Новый КвалификаторыСтроки(256));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.бит_ТипыВариантовОтчетов"));
	ОписаниеТипаТипыВариантов = Новый ОписаниеТипов(МассивТипов);
	
	// Таблица вариантов для проверки.
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов.Колонки.Добавить("КлючОбъекта" , ОписаниеТипаСтрока256);
	ТаблицаВариантов.Колонки.Добавить("КлючВарианта", ОписаниеТипаСтрока256);
	ТаблицаВариантов.Колонки.Добавить("Наименование", ОписаниеТипаСтрока50);
	ТаблицаВариантов.Колонки.Добавить("ТипВарианта" , ОписаниеТипаТипыВариантов);
	ТаблицаВариантов.Колонки.Добавить("Настройки");
	ТаблицаВариантов.Колонки.Добавить("СписокПользователей");
	
	Если КлючОбъекта <> Неопределено Тогда
		
		ИмяОтчета = СтрЗаменить(КлючОбъекта, "Отчет.", "");
		Попытка
			МетаОтчет = Метаданные.Отчеты[ИмяОтчета];		
		Исключение
			УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		КонецПопытки;		
		
		ДополнитьТаблицуВариантовДляОтчета(ТаблицаВариантов, КлючОбъекта, ИмяОтчета, МетаОтчет, Ложь);
		
	Иначе
		
		Для каждого МетаОтчет Из Метаданные.Отчеты Цикл
			
			// Проверка имени отчета (Обрабатываются только отчеты БИТ).
			ИмяОтчета = МетаОтчет.Имя;
			Если ЛЕВ(ИмяОтчета, 4) <> "бит_" 
				ИЛИ ИмяОтчета = "бит_ШаблонУправляемыхОтчетов" Тогда
				Продолжить;
			КонецЕсли;
						
			КлючОбъекта = "Отчет." + СокрЛП(ИмяОтчета);
			
			ДополнитьТаблицуВариантовДляОтчета(ТаблицаВариантов, КлючОбъекта, ИмяОтчета, МетаОтчет, Ложь);
				
		КонецЦикла;
	
	КонецЕсли;

	/////////////////////////////////////////////////
	// ЗАПИСЬ ВАРИАНТОВ

	Если ТаблицаВариантов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаВариантов", ТаблицаВариантов);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МетаТаблицаВариантов.КлючОбъекта,
		|	МетаТаблицаВариантов.КлючВарианта,
		|	МетаТаблицаВариантов.ТипВарианта,
		|   МетаТаблицаВариантов.Наименование
		|ПОМЕСТИТЬ ТабВариантов
		|ИЗ
		|	&ТаблицаВариантов КАК МетаТаблицаВариантов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабВариантов.КлючОбъекта,
		|	ТабВариантов.КлючВарианта,
		|	ТабВариантов.ТипВарианта,
		|	ТабВариантов.Наименование
		|ИЗ
		|	ТабВариантов КАК ТабВариантов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ВариантыОтчетов КАК бит_ВариантыОтчетов
		|		ПО ТабВариантов.КлючОбъекта = бит_ВариантыОтчетов.КлючОбъекта
		|		И ТабВариантов.КлючВарианта = бит_ВариантыОтчетов.КлючВарианта
		|ГДЕ
		|	бит_ВариантыОтчетов.Ссылка ЕСТЬ NULL
		|";
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЭлемСправочника = Справочники.бит_ВариантыОтчетов.СоздатьЭлемент();
			// Заполнение реквизитов: Наименование, КлючОбъекта, КлючВарианта, ТипВарианта.
			ЗаполнитьЗначенияСвойств(ЭлемСправочника, Выборка);
			ЭлемСправочника.Ответственный = ТекущийПользователь;
					
			ОтборСтрок = Новый Структура("КлючОбъекта, КлючВарианта", 
											Выборка.КлючОбъекта, 
											Выборка.КлючВарианта);
			МассивСтрок = ТаблицаВариантов.НайтиСтроки(ОтборСтрок);
			Если МассивСтрок.Количество() > 0 Тогда
				
				// Настройки компоновки данных для варианта.
				НастройкиВарианта = МассивСтрок[0].Настройки;
				
				// Дополнительные свойства.
				Если Выборка.КлючОбъекта = "Отчет.бит_ПланФактныйАнализУниверсальный" Тогда
					НастройкиВарианта.ДополнительныеСвойства.Вставить("ВидОтчета", "ПоСтатьямОборотов");
				КонецЕсли;
				
				ЭлемСправочника.ХранилищеВарианта = Новый ХранилищеЗначения(НастройкиВарианта);
										
			КонецЕсли;
			
			бит_ОбщегоНазначения.ЗаписатьСправочник(ЭлемСправочника,,РежимСообщений);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ОбновитьПредопределенныеВарианты()

// Процедура заполняет значения параметров на форме из настроек.
// 
// Параметры:
//  ДополнительныеСвойства - Структура.
// 
Процедура ЗаполнитьПараметрыНаФормеИзНастроек(Отчет, Настройки, СписокПараметровНаФорме) Экспорт
	
	Для каждого ЭлПараметр Из Настройки.Элементы Цикл
		
		Если ТипЗнч(ЭлПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			ИмяПараметра = Строка(ЭлПараметр.Параметр);
			НайденныйПараметр = СписокПараметровНаФорме.НайтиПоЗначению(ИмяПараметра);
			Если НайденныйПараметр <> Неопределено Тогда
				
				Если Отчет[ИмяПараметра] = Неопределено
					ИЛИ ТипЗнч(Отчет[ИмяПараметра]) = ТипЗнч(ЭлПараметр.Значение) Тогда
				
					Отчет[ИмяПараметра] = ЭлПараметр.Значение;
					
				ИначеЕсли ТипЗнч(Отчет[ИмяПараметра]) = Тип("СписокЗначений") Тогда
					
					СписокЗн = Новый СписокЗначений;
					СписокЗн.Добавить(ЭлПараметр.Значение);
					Отчет[ИмяПараметра] = СписокЗн;

				КонецЕсли;  				
											
			КонецЕсли;
					
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПараметрыНаФормеИзНастроек()

// Процедура загружает дополнительные настройки.
// 
// Параметры:
//  ДополнительныеСвойства - Структура.
// 
Процедура ЗагрузитьДополнительныеСвойства(Отчет, ДополнительныеСвойства, СписокДопСвойств) Экспорт
	
	Для каждого ДополнительноеСвойство Из СписокДопСвойств Цикл
		
		ИмяСвойства = ДополнительноеСвойство.Значение;
		
		Если ТипЗнч(Отчет[ИмяСвойства]) = Тип("ДанныеФормыКоллекция") Тогда

			Если ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
				
				
				ТаблицаТч = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ДополнительныеСвойства[ИмяСвойства]);
				Если ТаблицаТч <> Неопределено Тогда
					// Загружается табличная часть.
					Отчет[ИмяСвойства].Загрузить(ТаблицаТч);
				Иначе
					// Очистка табличной чатси.
					Отчет[ИмяСвойства].Очистить();
				КонецЕсли;                                                            				
				
			Иначе
				
				// Очистка табличной чатси.
				Отчет[ИмяСвойства].Очистить();
				
			КонецЕсли;
				
		Иначе
			
			ЕстьДопСвойство = ДополнительныеСвойства.Свойство(ИмяСвойства);
			Если ЕстьДопСвойство Тогда
				Отчет[ИмяСвойства] = ДополнительныеСвойства[ИмяСвойства];			
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла; 
		
КонецПроцедуры // ЗагрузитьДополнительныеСвойства()

// Процедура заполняет дополнительные свойства в настройке отчета.
// 
Процедура ЗаполнитьДополнительныеСвойстваДляНастройки(Отчет, ДополнительныеСвойства, СписокДопСвойств) Экспорт
	
	Для каждого ДополнительноеСвойство Из СписокДопСвойств Цикл
		
		ИмяСвойства = ДополнительноеСвойство.Значение;
		
		Если ТипЗнч(Отчет[ИмяСвойства]) = Тип("ДанныеФормыКоллекция") Тогда // Если табличная часть.
			
			ТаблицаТч = Отчет[ИмяСвойства].Выгрузить();
			ХранилищеТч = бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаТч);
			ДополнительныеСвойства.Вставить(ИмяСвойства, ХранилищеТч);
			
		Иначе
			
			ДополнительныеСвойства.Вставить(ИмяСвойства, Отчет[ИмяСвойства]);	
		
		КонецЕсли; 	
		
	КонецЦикла;
		 	
КонецПроцедуры // ЗаполнитьДополнительныеСвойстваДляНастройки()

// Процедура устанавливает стандартные настройки варианта 
// и обновляет по ним элементы формы.
// Заменяет типовую команду "СтандартныеНастройки".
// 
// Параметры:
//  Отчет 					 - ДанныеФормыСтруктура.
//  ВосстанавливатьНастройки - Булево.
//  СписокПараметровНаФорме  - СписокЗначений (по умолчанию - Неопределено).
// 
Процедура УстановитьСтандартныеНастройкиСервер(Отчет, ВосстанавливатьНастройки, СписокПараметровНаФорме = Неопределено) Экспорт
	
	ТекПользНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	СтандартныеНастройкиВарианта = Отчет.КомпоновщикНастроек.Настройки;
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СтандартныеНастройкиВарианта);

	Если ВосстанавливатьНастройки Тогда		
		Если ТекПользНастройки.ДополнительныеСвойства.Свойство("КлючНастройки") <> Неопределено Тогда
			ТекПользНастройки.ДополнительныеСвойства.Удалить("КлючНастройки");
		КонецЕсли;
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ТекПользНастройки);
	Иначе
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Количество();	
	КонецЕсли;
	
	Если СписокПараметровНаФорме <> Неопределено Тогда
		бит_ОтчетыСервер.ЗаполнитьПараметрыНаФормеИзНастроек(Отчет, ТекПользНастройки, СписокПараметровНаФорме);
	КонецЕсли;	
	
	Отчет.КомпоновщикНастроек.Восстановить();
															
КонецПроцедуры // УстановитьСтандартныеНастройкиСервер() 

#КонецОбласти

#Область НастройкиДоступностиИспользоватьПриОткрытии

// Процедура проверяет наличие признака "Использовать при открытии"
// для других настроек по этому же ключу.
// 
// Параметры:
//  ТекВариантНастройка - СправочникСсылка.бит_ВариантыОтчетов, СправочникСсылка.бит_СохраненныеНастройки.
// 	ТекПользователь     - СправочникСсылка.ГруппыПользователей, СправочникСсылка.Пользователи.
//  
Процедура СброситьИспользоватьПриОткрытии(ТекВариантНастройка, ТекПользователь) Экспорт

	// КлючОбъекта = СформироватьКлючОбъекта(ТекВариантНастройка.НастраиваемыйОбъект);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючОбъекта"	       , ТекВариантНастройка.КлючОбъекта);
	Запрос.УстановитьПараметр("Пользователь"       , ТекПользователь);
	Запрос.УстановитьПараметр("ТекВариантНастройка", ТекВариантНастройка);	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НастройкиДоступности.ВариантНастройка
	|ИЗ
	|	РегистрСведений.бит_НастройкиДоступностиВариантовОтчетов КАК НастройкиДоступности
	|ГДЕ
	|	НастройкиДоступности.ВариантНастройка.КлючОбъекта = &КлючОбъекта
	|	И НастройкиДоступности.Пользователь = &Пользователь
	|	И НастройкиДоступности.ВариантНастройка <> &ТекВариантНастройка
	|	И НастройкиДоступности.ИспользоватьПриОткрытии
	|";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 	
		НаборЗаписей = РегистрыСведений.бит_НастройкиДоступностиВариантовОтчетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВариантНастройка.Установить(Выборка.ВариантНастройка);
		НаборЗаписей.Отбор.Пользователь.Установить(ТекПользователь);
		НаборЗаписей.Прочитать();
		НаборЗаписей[0].ИспользоватьПриОткрытии = Ложь;
		бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей, "Ошибки");	
	КонецЦикла; 	

КонецПроцедуры // СброситьИспользоватьПриОткрытии()

// Процедура изменяет признак "ИспользоватьПриОткрытии" у указнанного варианта/настройки.
// При установке признака в "Истина" выполняется проверка в рамках варианта у других настроек 
// признак сбрасывается в "Ложь".
// 
// Параметры:
//  ВариантНастройка  		- СправочникСсылка.бит_ВариантОтчета или СправочникСсылка.бит_СохраненныеНастройки.
//  ИспользоватьПриОткрытии - Булево.
//  ТекПользователь			- СправочникСсылка.Пользователи.
// 
Процедура ИзменитьИспользоватьПриОткрытии(ВариантНастройка, ИспользоватьПриОткрытии, ТекПользователь = Неопределено) Экспорт

	Если ТекПользователь = Неопределено Тогда
		ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	НастройкаЗаписана = Ложь;
	
	// Поиск записей в регистре бит_НастройкиДоступностиВариантовОтчетов по пользователю и варианте/настройке.
	НаборЗаписей = РегистрыСведений.бит_НастройкиДоступностиВариантовОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВариантНастройка.Установить(ВариантНастройка);
	НаборЗаписей.Отбор.Пользователь.Установить(ТекПользователь);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		// Если в регистре нет записей, но нужно установить признак "Использовать при открытии".
		Если ИспользоватьПриОткрытии Тогда
		 	Запись = НаборЗаписей.Добавить();
			Запись.Пользователь     = ТекПользователь;
			Запись.ВариантНастройка = ВариантНастройка;
			Запись.Просмотр  		= Истина;
			Запись.Изменение 		= Истина;
			Запись.ИспользоватьПриОткрытии = ИспользоватьПриОткрытии;
			НастройкаЗаписана = бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей, "Ошибки");
		КонецЕсли;
		
	Иначе
		
		// Если в регистре есть записи и признак "Использовать при открытии" в ней нужно изменить.
		Если НаборЗаписей[0].ИспользоватьПриОткрытии <> ИспользоватьПриОткрытии Тогда
			НаборЗаписей[0].ИспользоватьПриОткрытии = ИспользоватьПриОткрытии;		
			НастройкаЗаписана = бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей, "Ошибки");
		КонецЕсли;                                                            		
		
	КонецЕсли;
	
	// Если записана настройка в регистр с признаком "Использовать при открытии" равным истине
	// , то нужно сбросить все признаки у настроек совпадающих по ключу объекта и пользователю с текущей записью.
	Если НастройкаЗаписана И ИспользоватьПриОткрытии Тогда
		СброситьИспользоватьПриОткрытии(ВариантНастройка, ТекПользователь);			
	КонецЕсли; 
	
КонецПроцедуры // ИзменитьОткрыватьПоУмолчанию()

// Процедура записывает настройку доступности в
// регистр сведений бит_НастройкиДоступностиВариантовОтчетов.
// 
// Параметры:
//  ВариантНастройка   - СправочникСсылка.бит_ВариантыОтчетов ИЛИ СправочникСсылка.бит_СохраненныеНастройки.
//  ПользовательГруппа - СправочникСсылка.Пользователи или СправочникСсылка.ГруппаПользователей.
//  Просмотр           - Булево.
//  Изменение          - Булево.
// 
Процедура ЗаписатьНастройкуДоступности(ВариантНастройка, ПользовательГруппа, Просмотр, Изменение) Экспорт

	Запись = РегистрыСведений.бит_НастройкиДоступностиВариантовОтчетов.СоздатьМенеджерЗаписи();
    
    Запись.ВариантНастройка = ВариантНастройка;
	Запись.Пользователь 	= ПользовательГруппа;
	Запись.Просмотр 	    = Просмотр;
	Запись.Изменение 		= Изменение;
    
    Попытка
	 	Запись.Записать();					
	Исключение
		Стоп = Истина;
	КонецПопытки;	

КонецПроцедуры // ЗаписатьНастройкуДоступности()

// Процедура записывает настройки доступности в
// регистр сведений бит_НастройкиДоступностиВариантовОтчетов.
// 
// Параметры:
//  ВариантНастройка   - СправочникСсылка.бит_ВариантыОтчетов ИЛИ СправочникСсылка.бит_СохраненныеНастройки.
//  ПользовательГруппа - СправочникСсылка.Пользователи или СправочникСсылка.ГруппаПользователей.
// 
Процедура ЗаписьНабораНастроекДоступности(ВариантНастройка, ПользовательГруппа) Экспорт

	ГруппаВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	   	
	Если ТипЗнч(ПользовательГруппа) = Тип("СписокЗначений") Тогда
		
		// Список пользователей.
		
		СписокПользователей = ПользовательГруппа;
		Если СписокПользователей.Количество() > 0 Тогда
				
			Если СписокПользователей.НайтиПоЗначению(ГруппаВсеПользователи) = Неопределено Тогда
				ЗаписатьНастройкуДоступности(ВариантНастройка, ГруппаВсеПользователи, Ложь, Ложь);
			КонецЕсли;

			Для каждого ПользовательНастройки Из СписокПользователей Цикл
				ЗаписатьНастройкуДоступности(ВариантНастройка, ПользовательНастройки.Значение, Истина, ПользовательНастройки.Пометка);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		// Один пользователь.
		
		Если ПользовательГруппа <> ГруппаВсеПользователи Тогда 		
			ЗаписатьНастройкуДоступности(ВариантНастройка, ГруппаВсеПользователи, Ложь, Ложь);		
		КонецЕсли;
		
		ЗаписатьНастройкуДоступности(ВариантНастройка, ПользовательГруппа, Истина, Истина);
	
	КонецЕсли;
	
КонецПроцедуры // ЗаписьНабораНастроекДоступности()

// Функция проверяет подходит ли настройка по умолчанию.
// 
// Параметры:
//  ИспользуемаяПоУмолчаниюНастройка - СправочникСсылка.бит_СохраненныеНастройки.
//  СтруктураПроверки		  - Структура проверки данных для определения возможности
// 								установки в качестве настройки по умолчанию.
//  
// Возвращаемое значение:
//   Булево - настройка подходит.
// 
Функция НастройкаПоУмолчаниюПодходит(ИспользуемаяПоУмолчаниюНастройка, СтруктураПроверки) Экспорт
	
	ДанныеПодходят = Истина;
	
	// Если нужно проверить данные настройки на возможность установки по умолчанию.
	Если СтруктураПроверки <> Неопределено Тогда
		
		// Данные из хранилища настроек.
		ДанныеНастройки = ИспользуемаяПоУмолчаниюНастройка.ХранилищеНастроек.Получить();					
		Если ДанныеНастройки <> Неопределено Тогда
			
			Для каждого КлЗнч Из СтруктураПроверки Цикл
				
				ИмяРеквизита 	  = КлЗнч.Ключ;
				ЗначениеРеквизита = КлЗнч.Значение;
				Если ДанныеНастройки[ИмяРеквизита] <> ЗначениеРеквизита Тогда
					// Значение реквизита в настройках не подходит.
					ДанныеПодходят = Ложь;
					Прервать;
				КонецЕсли;  							
			
			КонецЦикла;     							
		
		КонецЕсли;	
	
	КонецЕсли;
		
	Возврат ДанныеПодходят;
	
КонецФункции // НастройкаПоУмолчаниюПодходит()

// Функция проверяет доступность вариантов и настроек, формирует вспомогательные структуры.
// 
// Параметры:
//  НастраиваемыйОбъект				   - Строка.
//  ЗаполнятьСтруктуруНастроекСсылками - Булево (По умолчанию = Ложь).
// 	СтруктураДоступности			   - Структура (По умолчанию = Неопределено).
//  
// Возвращаемое значение:
//   СправочникСсылка.бит_СохраненныеНастройки.
// 
Функция НайтиНастройкуПоУмолчаниюДляОбъекта(НастраиваемыйОбъект, ПолучитьКлюч = Ложь, СтруктураДоступности = Неопределено) Экспорт

	// Используемые при открытии.
	ИспользуемаяПриОткрытииНастройка = Неопределено;
	МассивНедоступныхНастроек = ?(СтруктураДоступности = Неопределено, Новый Массив, СтруктураДоступности.МассивИсключений);
		
	ИмяТчСоставГруппПользователей = ?(Метаданные.Справочники.ГруппыПользователей.ТабличныеЧасти.Найти("Состав") = Неопределено
		, "ПользователиГруппы"
		, "Состав");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь"	   , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("ГруппаПоУмолчанию"  , Справочники.ГруппыПользователей.ВсеПользователи);
	Запрос.УстановитьПараметр("Настройка"		   , ПланыВидовХарактеристик.бит_НастройкиПользователей.ОсновнаяГруппаПользователя);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Пользователь КАК ПользовательГруппа,
	|	0 КАК Приоритет
	|ПОМЕСТИТЬ МассивПользователейГрупп
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	бит_НастройкиПользователей.ЗначениеНастройки,
	|	1
	|ИЗ
	|	РегистрСведений.бит_НастройкиПользователей КАК бит_НастройкиПользователей
	|ГДЕ
	|	бит_НастройкиПользователей.Пользователь = &Пользователь
	|	И бит_НастройкиПользователей.Настройка = &Настройка
    |
	|СГРУППИРОВАТЬ ПО
	|	бит_НастройкиПользователей.ЗначениеНастройки
    |
	|ОБЪЕДИНИТЬ ВСЕ  
	|ВЫБРАТЬ
	|	&ГруппаПоУмолчанию,
	|	2
    |
	|ОБЪЕДИНИТЬ ВСЕ 
	|ВЫБРАТЬ
	|	ГруппыПользователей.Ссылка,
	|	3
	|ИЗ
	|	Справочник.ГруппыПользователей." + ИмяТчСоставГруппПользователей + " КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Пользователь = &Пользователь
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(МассивПользователейГрупп.Приоритет) КАК Приоритет,
	|	РегСвНастройки.ВариантНастройка
	|ПОМЕСТИТЬ АктуальныеПриоритеты
	|ИЗ
	|	МассивПользователейГрупп КАК МассивПользователейГрупп
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиДоступностиВариантовОтчетов КАК РегСвНастройки
	|		ПО (РегСвНастройки.Пользователь = МассивПользователейГрупп.ПользовательГруппа)
	|ГДЕ
	|	РегСвНастройки.ВариантНастройка.КлючОбъекта = &НастраиваемыйОбъект
	|
	|СГРУППИРОВАТЬ ПО
	|	РегСвНастройки.ВариантНастройка
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегСвНастройки.ВариантНастройка						КАК ВариантНастройка,
	|	РегСвНастройки.Просмотр,
	|	РегСвНастройки.Изменение,
	|	МАКСИМУМ(МассивПользователейГрупп.Приоритет) 		КАК Приоритет, 
	|	МАКСИМУМ(РегСвНастройки.ИспользоватьПриОткрытии) 	КАК ИспользоватьПриОткрытии, 
	|	РегСвНастройки.ВариантНастройка.КлючОбъекта			КАК КлючОбъекта,
	|	РегСвНастройки.ВариантНастройка.КлючНастройки       КАК КлючНастройки
	|	
	|ИЗ
	|	МассивПользователейГрупп КАК МассивПользователейГрупп
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиДоступностиВариантовОтчетов КАК РегСвНастройки
	|			ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеПриоритеты КАК АктуальныеПриоритеты
	|			ПО РегСвНастройки.ВариантНастройка = АктуальныеПриоритеты.ВариантНастройка
	|		ПО (РегСвНастройки.Пользователь = МассивПользователейГрупп.ПользовательГруппа)
	|ГДЕ
	|	АктуальныеПриоритеты.Приоритет = МассивПользователейГрупп.Приоритет
	|	И РегСвНастройки.ВариантНастройка.КлючОбъекта = &НастраиваемыйОбъект
	|
	|СГРУППИРОВАТЬ ПО
	|	РегСвНастройки.Просмотр,
	|	РегСвНастройки.Изменение,
	|	РегСвНастройки.ВариантНастройка,
	|	РегСвНастройки.ВариантНастройка.КлючОбъекта,
	|	РегСвНастройки.ВариантНастройка.КлючНастройки
    |
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(МассивПользователейГрупп.Приоритет),
	|	РегСвНастройки.ВариантНастройка
	|";
	Результат = Запрос.Выполнить();
			 
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
			
		Если Выборка.Просмотр Тогда
			// Используемая при открытии.
			Если Выборка.ИспользоватьПриОткрытии И МассивНедоступныхНастроек.Найти(Выборка.КлючНастройки) = Неопределено Тогда
				ИспользуемаяПриОткрытииНастройка = ?(ПолучитьКлюч, Выборка.КлючНастройки, Выборка.ВариантНастройка);
				Прервать;					
			КонецЕсли;
		КонецЕсли;	
	
	КонецЦикла; 									 
	
	Возврат ИспользуемаяПриОткрытииНастройка;
	
КонецФункции // НайтиНастройкуПоУмолчаниюДляОбъекта()

#КонецОбласти

#Область ВыводРезультатаДополниетльныеОпции

// Процедура выводит копию результата в отдельном окне.
// 
// Параметры:
//  Результат - ТабличныйДокумент.
// 
Функция СформироватьКопиюРезультата(Результат) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.Вывести(Результат);
	
	ТабДок.ОтображатьЗаголовки 			= Ложь;
	ТабДок.ОтображатьСетку 				= Ложь;
	ТабДок.СохранятьСвойстваОтображения = Истина;
	
	Возврат ТабДок;
		
КонецФункции // СформироватьКопиюРезультата()

#КонецОбласти

#Область РаботаСПанельюВыбораСохраненныхНастроек

// Процедура добавляет элемент сохраненной настройки на панель.
// 
// Параметры:
//  Элементы  			- ВсеЭлементыФормы.
//  ГруппаПанели        - ГруппаФормы.	
//  СтруктураСвойств 	- Структура.
//  Сч 					- Число.
// 
Процедура ДобавитьЭлементСохраненнойНастройки(Элементы, ГруппаПанели, ИмяЭлемента, СтруктураСвойств, Сч) Экспорт

	Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
	 	Возврат;	
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаПанели);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Высота = 3;
		                               	
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктураСвойств);
		
	НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_ДекорацияСохраненнойНастройкиНажатие");
		       	
КонецПроцедуры // ДобавитьЭлементСохраненнойНастройки()

// Функция формирует ключ варианта.
// 
// Параметры:
//  ПолныйКлючОбъекта - Строка.
//  
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьТекКлючВарианта(ПолныйКлючОбъекта) Экспорт

	НомерРазделителя = Найти(ПолныйКлючОбъекта, "/");
	ДлинаСправа      = СтрДлина(ПолныйКлючОбъекта) - НомерРазделителя;
	ТекКлючВарианта  = Прав(ПолныйКлючОбъекта, ДлинаСправа);
	
	Возврат ТекКлючВарианта;
	
КонецФункции // ПолучитьТекКлючВарианта()

// Функция формирует ключ структуры настроек по ключу варианта.
// 
// Параметры:
//  ТекКлючОбъекта - Строка.
//  
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьКлючСтруктурыНастроек(ТекКлючОбъекта) Экспорт

	Результат = ТекКлючОбъекта;
	
	Результат = СтрЗаменить(Результат, "Отчет."	   , "");
	Результат = СтрЗаменить(Результат, "Обработка.", "");
	Результат = СтрЗаменить(Результат, " ", "_");
	Результат = СтрЗаменить(Результат, "-", "_");
	
	Результат = "_" + Результат;
	
	
	Возврат Результат;
	
КонецФункции // ПолучитьКлючСтруктурыНастроек()

// Функция проверяет доступность вариантов и настроек, формирует вспомогательные структуры.
// 
// Параметры:
//  ПолноеИмяОтчета 	 - Строка.
//  ИспользуютсяВарианты - Булево (Используется ли для отчета механизм работы с вариантами).
//  СтруктураПроверки	 - Структура (По умолчанию = Неопределено).
//  
// Возвращаемое значение:
//   Структура.
// 
Функция ПроверитьДоступностьВариантовНастроек(ПолноеИмяОтчета, ИспользуютсяВарианты, СтруктураПроверки = Неопределено) Экспорт

	// Просмотр.
	МассивИсключений			= Новый Массив;	
	МассивДоступныхНастроек 	= Новый Массив;
	МассивДоступныхВариантов 	= Новый Массив;
	МассивНеДоступныхВариантов	= Новый Массив;
	СписокНеДоступныхВариантов 	= Новый СписокЗначений;
	СписокНеДоступныхНастроек   = Новый СписокЗначений;
	// Изменение.
	СписокНеИзменяемыхВариантов = Новый СписокЗначений;
	СписокНеИзменяемыхНастроек  = Новый СписокЗначений;
	// Используемые при открытии.
	ИспользуемыйПриОткрытииВариант   = Неопределено;
		
	ОбщийКлюч = ?(ИспользуютсяВарианты, ПолноеИмяОтчета + "/%_%", ПолноеИмяОтчета);
	
	ИмяТчСоставГруппПользователей = ?(Метаданные.Справочники.ГруппыПользователей.ТабличныеЧасти.Найти("Состав") = Неопределено
		, "ПользователиГруппы"
		, "Состав");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь"	 , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("ГруппаПоУмолчанию", Справочники.ГруппыПользователей.ВсеПользователи);
	Запрос.УстановитьПараметр("Настройка"		 , ПланыВидовХарактеристик.бит_НастройкиПользователей.ОсновнаяГруппаПользователя);
	Запрос.УстановитьПараметр("ПолноеИмяОтчета"	 , ПолноеИмяОтчета);
	Запрос.УстановитьПараметр("ОбщийКлюч"		 , ОбщийКлюч);   		
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Пользователь КАК ПользовательГруппа,
	|	0 КАК Приоритет
	|ПОМЕСТИТЬ МассивПользователейГрупп
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	бит_НастройкиПользователей.ЗначениеНастройки,
	|	1
	|ИЗ
	|	РегистрСведений.бит_НастройкиПользователей КАК бит_НастройкиПользователей
	|ГДЕ
	|	бит_НастройкиПользователей.Пользователь = &Пользователь
	|	И бит_НастройкиПользователей.Настройка = &Настройка
    |
	|СГРУППИРОВАТЬ ПО
	|	бит_НастройкиПользователей.ЗначениеНастройки      
    |
	|ОБЪЕДИНИТЬ ВСЕ 
	|ВЫБРАТЬ
	|	ГруппыПользователей.Ссылка,
	|	2
	|ИЗ
	|	Справочник.ГруппыПользователей." + ИмяТчСоставГруппПользователей + " КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Пользователь = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ  
	|ВЫБРАТЬ
	|	&ГруппаПоУмолчанию,
	|	3
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(МассивПользователейГрупп.Приоритет) КАК Приоритет,
	|	РегСвНастройки.ВариантНастройка
	|ПОМЕСТИТЬ АктуальныеПриоритеты
	|ИЗ
	|	МассивПользователейГрупп КАК МассивПользователейГрупп
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиДоступностиВариантовОтчетов КАК РегСвНастройки
	|		ПО (РегСвНастройки.Пользователь = МассивПользователейГрупп.ПользовательГруппа)
	|ГДЕ
	|	(РегСвНастройки.ВариантНастройка.КлючОбъекта = &ПолноеИмяОтчета
	|			ИЛИ РегСвНастройки.ВариантНастройка.КлючОбъекта ПОДОБНО &ОбщийКлюч)
    |
	|СГРУППИРОВАТЬ ПО
	|	РегСвНастройки.ВариантНастройка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ВариантыОтчетов.Ссылка 			КАК ВариантНастройка,
	|	ВЫБОР
	|		КОГДА бит_ВариантыОтчетов.ТипВарианта = ЗНАЧЕНИЕ(Перечисление.бит_ТипыВариантовОтчетов.Предопределенный)
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ 								КАК Приоритет,
	|	бит_ВариантыОтчетов.КлючОбъекта 	КАК КлючОбъекта,
	|	бит_ВариантыОтчетов.КлючВарианта 	КАК КлючВарианта
	|ПОМЕСТИТЬ ОстальныеВарианты
	|ИЗ
	|	Справочник.бит_ВариантыОтчетов КАК бит_ВариантыОтчетов
	|ГДЕ
	|	бит_ВариантыОтчетов.КлючОбъекта = &ПолноеИмяОтчета
	|	И НЕ бит_ВариантыОтчетов.Ссылка В
	|				(ВЫБРАТЬ
	|					ТаблицаАкт.ВариантНастройка
	|				ИЗ
	|					АктуальныеПриоритеты КАК ТаблицаАкт)
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_СохраненныеНастройки.Ссылка 		КАК ВариантНастройка,
	|	4 КАК Приоритет,
	|	бит_СохраненныеНастройки.КлючОбъекта 	КАК КлючОбъекта,
	|	бит_СохраненныеНастройки.КлючНастройки 	КАК КлючНастройки
	|ПОМЕСТИТЬ ОстальныеНастройки
	|ИЗ
	|	Справочник.бит_СохраненныеНастройки КАК бит_СохраненныеНастройки
	|ГДЕ
	|	бит_СохраненныеНастройки.КлючОбъекта ПОДОБНО &ОбщийКлюч
	|	И НЕ бит_СохраненныеНастройки.Ссылка В
	|				(ВЫБРАТЬ
	|					ТаблицаАкт.ВариантНастройка
	|				ИЗ
	|					АктуальныеПриоритеты КАК ТаблицаАкт)
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегСвНастройки.ВариантНастройка 			КАК ВариантНастройка,
	|	РегСвНастройки.Просмотр,
	|	РегСвНастройки.Изменение,
	|	МассивПользователейГрупп.Приоритет 			КАК Приоритет,
	|	РегСвНастройки.ИспользоватьПриОткрытии 		КАК ИспользоватьПриОткрытии,
	|	РегСвНастройки.ВариантНастройка.КлючОбъекта КАК КлючОбъекта,
	|	ВЫБОР
	|		КОГДА РегСвНастройки.ВариантНастройка.КлючВарианта ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВариант,
	|	РегСвНастройки.ВариантНастройка.КлючВарианта КАК КлючВарианта,
	|	РегСвНастройки.ВариантНастройка.КлючНастройки КАК КлючНастройки
	|ПОМЕСТИТЬ ТаблРезультат
	|ИЗ
	|	МассивПользователейГрупп КАК МассивПользователейГрупп
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиДоступностиВариантовОтчетов КАК РегСвНастройки
	|			ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеПриоритеты КАК АктуальныеПриоритеты
	|			ПО РегСвНастройки.ВариантНастройка = АктуальныеПриоритеты.ВариантНастройка
	|		ПО (РегСвНастройки.Пользователь = МассивПользователейГрупп.ПользовательГруппа)
	|ГДЕ
	|	АктуальныеПриоритеты.Приоритет = МассивПользователейГрупп.Приоритет
	|	И (РегСвНастройки.ВариантНастройка.КлючОбъекта = &ПолноеИмяОтчета
	|			ИЛИ РегСвНастройки.ВариантНастройка.КлючОбъекта ПОДОБНО &ОбщийКлюч)
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ОстальныеВарианты.ВариантНастройка,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ОстальныеВарианты.Приоритет,
	|	ЛОЖЬ,
	|	ОстальныеВарианты.КлючОбъекта,
	|	ИСТИНА,
	|	ОстальныеВарианты.КлючВарианта,
	|	NULL
	|ИЗ
	|	ОстальныеВарианты КАК ОстальныеВарианты
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ОстальныеНастройки.ВариантНастройка,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ОстальныеНастройки.Приоритет,
	|	ЛОЖЬ,
	|	ОстальныеНастройки.КлючОбъекта,
	|	ЛОЖЬ,
	|	NULL,
	|	ОстальныеНастройки.КлючНастройки
	|ИЗ
	|	ОстальныеНастройки КАК ОстальныеНастройки
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблРезультат.ВариантНастройка 	  				КАК ВариантНастройка,
	|	ТаблРезультат.Просмотр,
	|	ТаблРезультат.Изменение,
	|	МАКСИМУМ(ТаблРезультат.Приоритет) 				КАК Приоритет,
	|	МАКСИМУМ(ТаблРезультат.ИспользоватьПриОткрытии) КАК ИспользоватьПриОткрытии,
	|	ТаблРезультат.КлючОбъекта,
	|	ТаблРезультат.ЭтоВариант,
	|	ТаблРезультат.КлючВарианта,
	|	ТаблРезультат.КлючНастройки
	|ИЗ
	|	ТаблРезультат КАК ТаблРезультат
    |
	|СГРУППИРОВАТЬ ПО
	|	ТаблРезультат.Просмотр,
	|	ТаблРезультат.Изменение,
	|	ТаблРезультат.ВариантНастройка,
	|	ТаблРезультат.КлючОбъекта,
	|	ТаблРезультат.ЭтоВариант,
	|	ТаблРезультат.КлючВарианта,
	|	ТаблРезультат.КлючНастройки
	|	
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ТаблРезультат.Приоритет)
	|";
	Результат = Запрос.Выполнить();
			 
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоВариант Тогда
			
			КлючОбъектВариант = Выборка.КлючОбъекта + "/" + Выборка.КлючВарианта;
			Если Выборка.Просмотр Тогда
				// Доступные варианты.
				МассивДоступныхВариантов.Добавить(Выборка.КлючВарианта);
				// Используемый при открытии.
				Если Выборка.ИспользоватьПриОткрытии И ИспользуемыйПриОткрытииВариант = Неопределено Тогда
					ИспользуемыйПриОткрытииВариант = Выборка.КлючВарианта;
				КонецЕсли;
			Иначе
				// Недоступные настройки и варианты.
				МассивИсключений.Добавить(КлючОбъектВариант);
				// Недоступные варианты.
				МассивНеДоступныхВариантов.Добавить(Выборка.КлючВарианта);
			КонецЕсли;
			Если Не Выборка.Изменение Тогда
				СписокНеИзменяемыхВариантов.Добавить(Выборка.КлючВарианта);			
			КонецЕсли;			
							
		Иначе	
			
			Если Выборка.Просмотр И НастройкаПоУмолчаниюПодходит(Выборка.ВариантНастройка, СтруктураПроверки) Тогда
				// Доступные настройки.
			    МассивДоступныхНастроек.Добавить(Выборка.КлючНастройки);
				// Доступные варианты
				ТекКлючВарианта = ПолучитьТекКлючВарианта(Выборка.КлючОбъекта);
			Иначе
				// Недоступные настройки и варианты. 
				МассивИсключений.Добавить(Выборка.КлючНастройки);
				СписокНеДоступныхНастроек.Добавить(Выборка.КлючНастройки);
			КонецЕсли;
			Если Не Выборка.Изменение Тогда
				СписокНеИзменяемыхНастроек.Добавить(Выборка.КлючНастройки);			
			КонецЕсли; 		
			
		КонецЕсли; 		
	
	КонецЦикла; 

	Для каждого ЭлНеДоступных Из МассивНеДоступныхВариантов Цикл
		Если МассивДоступныхВариантов.Найти(ЭлНеДоступных) = Неопределено Тогда
			СписокНеДоступныхВариантов.Добавить(ЭлНеДоступных);		
		КонецЕсли; 		
	КонецЦикла;
	
	// Проверка наличия варианта по умолчанию.
	Если ИспользуютсяВарианты 
		И ИспользуемыйПриОткрытииВариант = Неопределено Тогда
		
		Если МассивДоступныхВариантов.Количество() > 0 Тогда
			ИспользуемыйПриОткрытииВариант = МассивДоступныхВариантов[0];
		КонецЕсли;    		 	
		
		Если ИспользуемыйПриОткрытииВариант = Неопределено Тогда 			
			ТекстСообщения = Нстр("ru = 'Не найден доступный вариант. Список вариантов можно обновить в справочнике ""Варианты отчетов (БИТ)"" по кнопке ""Обновить предопределенные"".'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 		
		КонецЕсли;
		
	КонецЕсли;
	
	СтрукутраРезультата = Новый Структура("МассивИсключений, МассивДоступныхНастроек, 
										 |СписокНеДоступныхВариантов, СписокНеДоступныхНастроек,
										 |СписокНеИзменяемыхВариантов, СписокНеИзменяемыхНастроек,
										 |ИспользуемыйПриОткрытииВариант"
										 , МассивИсключений 
										 , МассивДоступныхНастроек 
										 , СписокНеДоступныхВариантов
										 , СписокНеДоступныхНастроек
										 , СписокНеИзменяемыхВариантов 
										 , СписокНеИзменяемыхНастроек
										 , ИспользуемыйПриОткрытииВариант);
																				 
	
	Возврат СтрукутраРезультата;
	
КонецФункции // ПроверитьДоступностьВариантовНастроек()

// Процедура обновляет панель сохраненных настроек.
// 
// Параметры:
//  Элементы  					 - ВсеЭлементыФормы.
//  ГруппаПанели  				 - ГруппаФормы.
//  КлючОбъекта     			 - Строка.
//  СтруктураСохраненныхНастроек - Структура.
//  СтруктураДоступности     	 - Структура.
//  Фильтровать					 - Булево.
//  ИмяТекущего					 - Строка.
// 
Процедура ОбновитьПанельСохраненныхНастроек(Элементы, ГруппаПанели, КлючОбъекта, СтруктураСохраненныхНастроек, СтруктураДоступности, Фильтровать = Ложь, ИмяТекущего = Неопределено) Экспорт
	
	СтруктураСохраненныхНастроек = Новый Структура;
	
	СтруктураСвойств = Новый Структура("Гиперссылка, Рамка, Видимость, ТекстНевыбраннойКартинки");
	СтруктураСвойств.Вставить("Гиперссылка"	, Истина);
	
	РамкаОбычного = Новый Рамка(ТипРамкиЭлементаУправления.Выпуклая  , 2);
	РамкаТекущего = Новый Рамка(ТипРамкиЭлементаУправления.Вдавленная, 2);	              	
	
	НомерРазделителя = Найти(КлючОбъекта, "/"); 	
	ОбщийКлюч = ?(НомерРазделителя = 0, КлючОбъекта, Лев(КлючОбъекта, НомерРазделителя) + "%_%");
	
	МассивИсключений   		   = СтруктураДоступности.МассивИсключений;
	МассивДоступныхНастроек    = СтруктураДоступности.МассивДоступныхНастроек;
		     	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбщийКлюч"  			   		, ОбщийКлюч);
	Запрос.УстановитьПараметр("МассивИсключений"			, МассивИсключений);
	Запрос.УстановитьПараметр("МассивДоступныхНастроек"		, МассивДоступныхНастроек);
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	бит_СохраненныеНастройки.Наименование,
	|	бит_СохраненныеНастройки.КлючОбъекта,
	|	бит_СохраненныеНастройки.КлючНастройки
 	|ИЗ
 	|	Справочник.бит_СохраненныеНастройки КАК бит_СохраненныеНастройки
	|ГДЕ
	|	бит_СохраненныеНастройки.КлючОбъекта ПОДОБНО(&ОбщийКлюч)
	|	И (бит_СохраненныеНастройки.КлючНастройки НЕ В(&МассивИсключений)
	|		И (
	|            бит_СохраненныеНастройки.КлючОбъекта НЕ В(&МассивИсключений)
	|            ИЛИ бит_СохраненныеНастройки.КлючНастройки В (&МассивДоступныхНастроек)
	|		   )
	|	   )
	|УПОРЯДОЧИТЬ ПО
	|	КлючОбъекта, Наименование
	|";

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Сч = 1;
		
	Пока Выборка.Следующий() Цикл
		
		ИмяЭлемента = "ДекорацияНастройки" + Сч;
		
		ВидимостьНастройки = ?(Фильтровать, КлючОбъекта = Выборка.КлючОбъекта, Истина);
		СтруктураСвойств.Вставить("Видимость", ВидимостьНастройки);
		СтруктураСвойств.Вставить("ТекстНевыбраннойКартинки", Выборка.Наименование);
		СтруктураСвойств.Вставить("Подсказка", Выборка.Наименование);
		
		Если ИмяЭлемента = ИмяТекущего Тогда
			СтруктураСвойств.Вставить("Рамка", РамкаТекущего);
		Иначе	
		    СтруктураСвойств.Вставить("Рамка", РамкаОбычного);
		КонецЕсли;
				
		Если Выборка.Количество() > 9 Тогда
			СтруктураСвойств.Вставить("Ширина", 8);
		Иначе
			СтруктураСвойств.Вставить("Ширина", 0);
		КонецЕсли; 
		
		ДобавитьЭлементСохраненнойНастройки(Элементы, ГруппаПанели, ИмяЭлемента, СтруктураСвойств, Сч);
		
		СтруктураНастроек = Новый Структура("КлючОбъекта, КлючНастройки", Выборка.КлючОбъекта, Выборка.КлючНастройки);
		СтруктураСохраненныхНастроек.Вставить(ИмяЭлемента, СтруктураНастроек);
		
		Сч = Сч + 1;		
				
	КонецЦикла; 
	 
КонецПроцедуры // ОбновитьпанельСохраненныхНастроек()

// Процедура управляет видимостью сохраненных настроек на панели.
// 
// Параметры:
//  Элементы  					 - ВсеЭлементыФормы.
//  СтруктураСохраненныхНастроек - Структура.
//  КлючОбъекта 				 - Строка.
//  Фильтровать					 - Булево.
//  ОчиститьРамки				 - Булево.
// 
Процедура ИзменитьВидимостьСохраненныхНастроек(Элементы, СтруктураСохраненныхНастроек, КлючОбъекта, Фильтровать, ОчиститьРамки = Ложь) Экспорт

	Если СтруктураСохраненныхНастроек = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	РамкаОбычного = Новый Рамка(ТипРамкиЭлементаУправления.Выпуклая	 , 2);
	
	Для каждого КлЗнч Из СтруктураСохраненныхНастроек Цикл
		
		ИмяДекорации 		= КлЗнч.Ключ;
		СтруктураНастроек 	= КлЗнч.Значение;
		
		ВидимостьНастройки = ?(Фильтровать, КлючОбъекта = СтруктураНастроек.КлючОбъекта, Истина);
		Элементы[ИмяДекорации].Видимость = ВидимостьНастройки;
		
		Если ОчиститьРамки Тогда
			Элементы[ИмяДекорации].Рамка = РамкаОбычного;		
		КонецЕсли;
								
	КонецЦикла;	

КонецПроцедуры // ИзменитьВидимостьСохраненныхНастроек()

// Процедура выделяет на пенели сохраненных настроек текущую.
// 
// Параметры:
//  Элементы  					   - ВсеЭлементыФормы.
//  СтруктураСохраненныхНастроек   - Структура.
//  ИмяЭлемента_ВыбраннаяНастройка - Строка.
//  Фильтровать					   - Булево.
//  КлючОбъекта 				   - Строка (По умолчанию = Неопределено).
// 
Процедура ВыделитьТекущуюСохраненнуюНастройку(Элементы, СтруктураСохраненныхНастроек, ИмяЭлемента_ВыбраннаяНастройка, Фильтровать = Ложь, КлючНастройки = Неопределено) Экспорт

	Если СтруктураСохраненныхНастроек = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	РамкаТекущего = Новый Рамка(ТипРамкиЭлементаУправления.Вдавленная, 2);
	РамкаОбычного = Новый Рамка(ТипРамкиЭлементаУправления.Выпуклая	 , 2);
			
	Если КлючНастройки = Неопределено Тогда
	
	 	ИмяЭлемента_ВыбраннаяНастройка = "";
		
		Для каждого КлЗнч Из СтруктураСохраненныхНастроек Цикл
			
			ИмяДекорации 		= КлЗнч.Ключ;
			Элементы[ИмяДекорации].Рамка = РамкаОбычного;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого КлЗнч Из СтруктураСохраненныхНастроек Цикл
		
			ИмяДекорации 		= КлЗнч.Ключ;
			СтруктураНастроек 	= КлЗнч.Значение;
							
			Если КлючНастройки = СтруктураНастроек.КлючНастройки Тогда
				Элементы[ИмяДекорации].Рамка 	= РамкаТекущего;
				ИмяЭлемента_ВыбраннаяНастройка 	= ИмяДекорации;
			Иначе
				Элементы[ИмяДекорации].Рамка 	= РамкаОбычного;
			КонецЕсли;
				
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры // ВыделитьТекущуюСохраненнуюНастройку()

// Функция получает Пользовательские настройки компоновки данных
// по ключу объекта и ключу настроек.
// 
// Параметры:
//  СтруктураНастроек  - Структура.
//  
// Возвращаемое значение:
//   ПользовательскиеНастройкиКомпоновкиДанных.
// 
Функция ПолучитьНастройкиОтчета(СтруктураНастроек) Экспорт
 		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	бит_СохраненныеНастройки.ХранилищеНастроек
 	|ИЗ
 	|	Справочник.бит_СохраненныеНастройки КАК бит_СохраненныеНастройки
	|ГДЕ
	|	бит_СохраненныеНастройки.КлючОбъекта 	 = &КлючОбъекта
	|	И бит_СохраненныеНастройки.КлючНастройки = &КлючНастройки 
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КлючОбъекта"  , СтруктураНастроек.КлючОбъекта);
	Запрос.УстановитьПараметр("КлючНастройки", СтруктураНастроек.КлючНастройки);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Настройки 						= Выборка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат Настройки;

КонецФункции // ПолучитьНастройкиОтчета()

#КонецОбласти

#Область ПроверкиПользовательскихНастроек

// Процедура проверяет отборы
//
// Параметры:
//  КомпоновщикНастроек.
//
Процедура ПроверитьОтборы(КомпоновщикНастроек) Экспорт

	Для каждого ЭлПН Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлПН) = Тип("ОтборКомпоновкиДанных") Тогда
			
			ПроверитьГруппуЭлементовОтбора(ЭлПН.Элементы, КомпоновщикНастроек);
						
		КонецЕсли; 		
	
	КонецЦикла;

КонецПроцедуры // ПроверитьОтборы()
	     	
#КонецОбласти

#Область Расшифровки

// Процедура управляет видом элементов формы.
// 
// Параметры:
//  Элементы - Все элементы формы.
// 
Процедура УправлениеВидомЭлементовТакси(Элементы) Экспорт
	          		                                                         
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ВключенРежимТакси") Тогда
			
		// Период.
		Если Элементы.Найти("ПериодДатаНачала") <> Неопределено Тогда
			Элементы.ПериодДатаНачала.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		Если Элементы.Найти("ПериодДатаОкончания") <> Неопределено Тогда
			Элементы.ПериодДатаОкончания.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		
	КонецЕсли;
	          	
КонецПроцедуры // УправлениеВидомЭлементовТакси()

// Процедура управляет видимостью элементов формы.
// 
// Параметры:
//  Элементы 				- Все элементы формы.
//  КлючВарианта 			- Строка.
//  ПредставлениеВарианта 	- Строка.
//  ВозможенВыборВариантов 	- Булево (По умолчанию = Истина).
// 
Процедура УстановитьВидимостьДоступностьЭлементов(Элементы, КлючВарианта, ПредставлениеВарианта, ВозможенВыборВариантов = Истина) Экспорт
	
	ЭтоРасшифровка = КлючВарианта = Неопределено И ПредставлениеВарианта = "Расшифровка"; 	
	
	Если Элементы.Найти("ГруппаПанельВыбораСохраненныхНастроек") <> Неопределено Тогда
		Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не ЭтоРасшифровка И Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка;
	КонецЕсли;
	Если Элементы.Найти("ГруппаПанельНастроек") <> Неопределено Тогда
		Элементы.ГруппаПанельНастроек.Видимость = Элементы.ФормаКомандаПанельНастроек.Пометка;
	КонецЕсли;

	Если Элементы.Найти("ФормаКомандаПанельСохраненныхНастроек") <> Неопределено Тогда
		Элементы.ФормаКомандаПанельСохраненныхНастроек.Видимость = Не ЭтоРасшифровка;
	КонецЕсли;
	Если Элементы.Найти("КомандаОбновитьПанельСохраненныхНастроек") <> Неопределено Тогда
		Элементы.КомандаОбновитьПанельСохраненныхНастроек.Видимость = Не ЭтоРасшифровка;
	КонецЕсли;
	Если Элементы.Найти("ГруппаКомПан_Настройка") <> Неопределено Тогда
		Элементы.ГруппаКомПан_Настройка.Видимость = Не ЭтоРасшифровка;
	КонецЕсли;
	
	// Для элементов, относящихся к вариантам.
	ПоказатьЭлементыПоВариантам = ?(ВозможенВыборВариантов, Не ЭтоРасшифровка, Ложь);
	Если Элементы.Найти("КомандаФильтроватьНастройкиПоВариантам") <> Неопределено Тогда
		Элементы.КомандаФильтроватьНастройкиПоВариантам.Видимость = ПоказатьЭлементыПоВариантам;
	КонецЕсли; 	
	Если Элементы.Найти("ЗагрузитьВариант") <> Неопределено Тогда
		Элементы.ЗагрузитьВариант.Доступность = ПоказатьЭлементыПоВариантам;
	КонецЕсли;
	Если Элементы.Найти("ГруппаКомПан_Вариант") <> Неопределено Тогда
		Элементы.ГруппаКомПан_Вариант.Видимость = ПоказатьЭлементыПоВариантам;
	КонецЕсли;
	                                                         
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ВключенРежимТакси") Тогда
		
		Если Элементы.Найти("ГруппаКоманднаяПанельОтчетаПравая") <> Неопределено Тогда
			ЕстьПанельСохрНастроек = Не ЭтоРасшифровка 
						И Элементы.Найти("ФормаКомандаПанельСохраненныхНастроек") <> Неопределено;						
			Элементы.ГруппаКоманднаяПанельОтчетаПравая.Ширина = ?(ЕстьПанельСохрНастроек, ?(ВозможенВыборВариантов, 16, 12), 4);
			Элементы.ГруппаКоманднаяПанельОтчетаПравая.РастягиватьПоГоризонтали = Ложь;
		КонецЕсли;
		
		// Период.
		Если Элементы.Найти("ПериодДатаНачала") <> Неопределено Тогда
			Элементы.ПериодДатаНачала.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		Если Элементы.Найти("ПериодДатаОкончания") <> Неопределено Тогда
			Элементы.ПериодДатаОкончания.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		Если Элементы.Найти("КомандаНастроитьПериод") <> Неопределено Тогда
			Элементы.КомандаНастроитьПериод.Ширина = 3;
		КонецЕсли;
		
		// Период.
		Если Элементы.Найти("ПериодПриемникаДатаНачала") <> Неопределено Тогда
			Элементы.ПериодПриемникаДатаНачала.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		Если Элементы.Найти("ПериодПриемникаДатаОкончания") <> Неопределено Тогда
			Элементы.ПериодПриемникаДатаОкончания.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		Если Элементы.Найти("КомандаНастроитьПериодПриемника") <> Неопределено Тогда
			Элементы.КомандаНастроитьПериодПриемника.Ширина = 3;
		КонецЕсли;
		
		Если Лев(бит_ОбщегоНазначения.ПолучитьВерсиюПлатформы(), 6) = "8.3.6." Тогда
		 		
			Если Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройки") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.КомпоновщикНастроекПользовательскиеНастройки);
			КонецЕсли;
			Если Элементы.Найти("ТаблицаОтбор") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ТаблицаОтбор);
			КонецЕсли;
			Если Элементы.Найти("ТаблицаСортировки") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ТаблицаСортировки);
			КонецЕсли;
			Если Элементы.Найти("ТаблицаГруппировки") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ТаблицаГруппировки);
			КонецЕсли;
			Если Элементы.Найти("ТаблицаГруппировки") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ТаблицаГруппировки);
			КонецЕсли;
			Если Элементы.Найти("ДетализацияСчета") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ДетализацияСчета);
			КонецЕсли;
			Если Элементы.Найти("ПравилаВыводаИтогов") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ПравилаВыводаИтогов);
			КонецЕсли; 
			Если Элементы.Найти("ТаблицаКорСубконто") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ТаблицаКорСубконто);
			КонецЕсли;
			Если Элементы.Найти("Сценарии") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.Сценарии);
			КонецЕсли;
			
			Если Элементы.Найти("ДеревоВыводимыхДанных") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ДеревоВыводимыхДанных);
			КонецЕсли;
			Если Элементы.Найти("ОтборВОтчете") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ОтборВОтчете);
			КонецЕсли;
			Если Элементы.Найти("ТаблицаОформленияУровней") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ТаблицаОформленияУровней);
			КонецЕсли;
			Если Элементы.Найти("ТаблицаПараметры") <> Неопределено Тогда
				УстановитьМелкийШрифтЭлементу(Элементы.ТаблицаПараметры);
			КонецЕсли;
		
		КонецЕсли;
	
	Иначе 
		
		Если Элементы.Найти("ГруппаКоманднаяПанельОтчетаПравая") <> Неопределено Тогда
			Элементы.ГруппаКоманднаяПанельОтчетаПравая.Ширина = ?(ЭтоРасшифровка, 3, ?(ВозможенВыборВариантов, 13, 9));
			Элементы.ГруппаКоманднаяПанельОтчетаПравая.РастягиватьПоГоризонтали = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	          	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

// Процедура устанавливает мелкий шрифт элементу формы.
//
// Параметры:
//  ЭлементФормы - Элемент формы.
//
Процедура УстановитьМелкийШрифтЭлементу(ЭлементФормы) Экспорт

	ЭлементФормы.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;

КонецПроцедуры // УстановитьМелкийШрифтЭлементу()

// Процедура скрывает или показывает панель настроек.
//
// Параметры:
//  ЭлементыКнопка 				- КнопкаФормы.
//  ЭлементГруппаПанельНастроек - ГруппаФормы.
//  В8_СкрытьПанельНастроек 	- Булево.
//  Т1_ОткрытьПанельНастроек 	- Булево.
//
Процедура УстановитьВидимостьПанелиНастроек(ЭлементыКнопка, ЭлементГруппаПанельНастроек, В8_СкрытьПанельНастроек, Т1_ОткрытьПанельНастроек) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ВключенРежимТакси") Тогда
		
		ЭлементыКнопка.Пометка = Т1_ОткрытьПанельНастроек;
		ЭлементГруппаПанельНастроек.Видимость = Т1_ОткрытьПанельНастроек;
		
		В8_СкрытьПанельНастроек = Не Т1_ОткрытьПанельНастроек;
		
	Иначе
		
		ЭлементыКнопка.Пометка = Не В8_СкрытьПанельНастроек;
		ЭлементГруппаПанельНастроек.Видимость = Не В8_СкрытьПанельНастроек;
		
		Т1_ОткрытьПанельНастроек = Не В8_СкрытьПанельНастроек;
		
	КонецЕсли;	

КонецПроцедуры // УстановитьВидимостьПанелиНастроек() 

// Процедура скрывает или показывает панель настроек.
//
// Параметры:
//  ЭлементыКнопка 				- КнопкаФормы.
//  ЭлементГруппаПанельНастроек - ГруппаФормы.
//  В8_СкрытьПанельНастроек 	- Булево.
//  Т1_ОткрытьПанельНастроек 	- Булево.
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
Процедура ОбработкаКомандыПанелиНастроек(ЭлементыКнопка, ЭлементГруппаПанельНастроек, В8_СкрытьПанельНастроек, Т1_ОткрытьПанельНастроек, СкрытьПанельПриФормировании = Ложь) Экспорт

	Если СкрытьПанельПриФормировании Тогда
		В8_СкрытьПанельНастроек  = Истина;	
		Т1_ОткрытьПанельНастроек = Ложь;
	Иначе
		В8_СкрытьПанельНастроек  = Не В8_СкрытьПанельНастроек;
		Т1_ОткрытьПанельНастроек = Не Т1_ОткрытьПанельНастроек;	
	КонецЕсли;
	
	УстановитьВидимостьПанелиНастроек(ЭлементыКнопка
									, ЭлементГруппаПанельНастроек
									, В8_СкрытьПанельНастроек
									, Т1_ОткрытьПанельНастроек);	

КонецПроцедуры // ОбработкаКомандыПанелиНастроек() 

// Процедура устанавливает видимость панели настроек.
//
// Параметры:
//  ЭлементыКнопка 				- КнопкаФормы.
//  ЭлементГруппаПанельНастроек - ГруппаФормы.
//  В8_СкрытьПанельНастроек 	- Булево.
//  Т1_ОткрытьПанельНастроек 	- Булево.
//
Процедура УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(ЭлементыКнопка, ЭлементГруппаПанельНастроек, В8_СкрытьПанельНастроек, Т1_ОткрытьПанельНастроек) Экспорт

	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ВключенРежимТакси") Тогда
		
		ЭлементыКнопка.Пометка = Т1_ОткрытьПанельНастроек;
		ЭлементГруппаПанельНастроек.Видимость = Т1_ОткрытьПанельНастроек;
		
		В8_СкрытьПанельНастроек = Не Т1_ОткрытьПанельНастроек;
		
	КонецЕсли;	

КонецПроцедуры // УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси()

// Функция формирует массив, по которому следует расшифровать отчет.
// 
// Параметры:
//  Расшифровка 	  - ИдентификаторРасшифровкиКомпоновкиДанных.
//  ДанныеРасшифровки - Строка. 
// 	ВключатьРесурсы   - Булево.
// 
// Возвращаемое значение:
//   Массив. 
// 
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
		И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
		
	// Добавим поля родительских группировок.
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ДанныеРасшифровки, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете.
	Для каждого ЭлементОтбора Из ДанныеРасшифровки.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции // ПолучитьМассивПолейРасшифровки()

// Функция получает пользовательские настройки отчета - расшифровки.
// 
// Параметры:
//  ИмяОтчета  	 - Строка.
//  ДопПараметры - Структура.
//  
// Возвращаемое значение:
//   ПользовательскиеНастройкиКомпоновщикаДанных.
// 
Функция ПолучитьПользовательскиеНастройкиОтчета(ИмяОтчета, ДопПараметры) Экспорт
    
    Расшифровка 	   	    = ДопПараметры.Расшифровка;
    ДанныеРасшифровки  	    = ДопПараметры.ДанныеРасшифровки;
    ПолеРасшифровки    	    = ДопПараметры.ПолеРасшифровки;
    ДополнительныеПараметры = ДопПараметры.ДополнительныеПараметры;
        
	ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
	
	ДанныеРасшифр 		   = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифр);
		
	КомпоновщикОтчета 				  = ОтчетОбъект.КомпоновщикНастроек;
	КоллекцияДоступныхПолейОтбора 	  = КомпоновщикОтчета.Настройки.ДоступныеПоляОтбора.Элементы;
	КоллекцияПользовательскихНастроек = КомпоновщикОтчета.ПользовательскиеНастройки.Элементы;
 	
	Для каждого ЭлементПН Из КоллекцияПользовательскихНастроек Цикл
		
		Если ТипЗнч(ЭлементПН) = Тип("ОтборКомпоновкиДанных") Тогда
			
			ЭлементыОтбора = ЭлементПН.Элементы;
			ЭлементыОтбора.Очистить();
			
			ДобавитьОтборыРасшифровки(ЭлементыОтбора, МассивПолейРасшифровки, КоллекцияДоступныхПолейОтбора);
            
        ИначеЕсли ТипЗнч(ЭлементПН) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
            
            Если ИмяОтчета = "бит_ДанныеБюджета_ОстаткиПоСчетам" Тогда
                Для каждого ВыбПоле Из ЭлементПН.Элементы Цикл
                    ИмяПоля = Строка(ВыбПоле.Поле);
                    Если ИмяПоля = СтрЗаменить(ПолеРасшифровки, "НарастающийИтог", "") ИЛИ ИмяПоля = "Комментарий" Тогда
                        ВыбПоле.Использование = Истина;
                    Иначе	
                        ВыбПоле.Использование = Ложь;
                    КонецЕсли;          
                КонецЦикла;
            КонецЕсли;
            
		ИначеЕсли ТипЗнч(ЭлементПН) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			Если ДополнительныеПараметры <> Неопределено Тогда
				Если ЭлементПН.Параметр = Новый ПараметрКомпоновкиДанных("Период") И  ДополнительныеПараметры.Свойство("Период") Тогда
					// Для расшифровки бит_ОтчетПоБюджету_ОстаткиПоСчетам -> бит_ДанныеБюджета_ОстаткиПоСчетам.
					ЭлементПН.Значение = ДополнительныеПараметры.Период;		
				ИначеЕсли ЭлементПН.Параметр = Новый ПараметрКомпоновкиДанных("Периодичность") И  ДополнительныеПараметры.Свойство("Периодичность") Тогда
					// Для расшифровки бит_ОтчетПоБюджету_ОстаткиПоСчетам -> бит_ДанныеБюджета_ОстаткиПоСчетам.
					ЭлементПН.Значение = ДополнительныеПараметры.Периодичность;		
				ИначеЕсли ЭлементПН.Параметр = Новый ПараметрКомпоновкиДанных("Бюджет") И  ДополнительныеПараметры.Свойство("Бюджет") Тогда
					// Для расшифровки бит_ОтчетПоБюджету_ОстаткиПоСчетам -> бит_ДанныеБюджета_ОстаткиПоСчетам.
					ЭлементПН.Значение = ДополнительныеПараметры.Бюджет;		
				КонецЕсли;
			КонецЕсли;      			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("Сценарий") Тогда
			// Для расшифровки бит_ПланФактныйАнализ -> бит_ДанныеБюджета.
			НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 			
		   	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Сценарий");
			НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ДополнительныеПараметры.Сценарий;
		КонецЕсли;  			
	КонецЕсли;

	Возврат КомпоновщикОтчета.ПользовательскиеНастройки;
	
КонецФункции // ПолучитьПользовательскиеНастройкиОтчета()

// Функция получает ссылку для обработки расшифровки.
// 
// Параметры:
//  Расшифровка 	  - ИдентификаторРасшифровкиКомпоновкиДанных.
//  ДанныеРасшифровки - Строка.
//  
// Возвращаемое значение:
//   Любое значение.
// 
Функция ПолучитьСсылкуРасшифровки(Расшифровка, ДанныеРасшифровки) Экспорт
	
	ДанныеРасшифр = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);	
	ЗначениеРасшифровки = ДанныеРасшифр.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;	

	Если бит_ОбщегоНазначения.ЭтоПримитивныйТип(ЗначениеРасшифровки) 
		ИЛИ бит_ОбщегоНазначения.ОпределитьИмяКоллекции(ЗначениеРасшифровки.Метаданные()) = "Перечисления" Тогда
		ЗначениеРасшифровки = Неопределено;	
	КонецЕсли;
	
	Возврат ЗначениеРасшифровки;
	
КонецФункции // ПолучитьСсылкуРасшифровки()

// Функция получает данные расшифровки.
// 
// Параметры:
//  Расшифровка 			 - ИдентификаторРасшифровкиКомпоновкиДанных.
//  ДанныеРасшифровки 		 - Строка.
//  ДополнительныеПунктыМеню - Список значений или Неопределено.
//  
// Возвращаемое значение:
//   Любое значение.
// 
Функция ПолучитьДанныеРасшифровки(Расшифровка, ДанныеРасшифровки, ДополнительныеПунктыМеню) Экспорт
	
	СтруктураРасшифровки = Новый Структура;
	
	МассивПолейРасшифровки = Новый Массив;
		
	ДанныеРасшифр 		= ПолучитьИзВременногоХранилища(ДанныеРасшифровки);	
	ЭлементРасшифровки 	= ДанныеРасшифр.Элементы[Расшифровка];
			
	ПараметрРасшифровки = ЭлементРасшифровки.ПолучитьПоля()[0];	
	ЗначениеРасшифровки = ПараметрРасшифровки.Значение;
	ПолеРасшифровки 	= ПараметрРасшифровки.Поле;

	Если ТипЗнч(ЗначениеРасшифровки) <> Тип("Массив") Тогда
		Если НЕ ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеРасшифровки) 
			ИЛИ (ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеРасшифровки)
			И бит_ОбщегоНазначения.ОпределитьИмяКоллекции(ЗначениеРасшифровки.Метаданные()) = "Перечисления") Тогда
			ЗначениеРасшифровки = Неопределено;	
		КонецЕсли;
		Если ЗначениеРасшифровки = Неопределено Тогда
			МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифр);
		КонецЕсли;
	КонецЕсли;
	
	// Обработаем дополнительные пункты меню - уберем лишние.
	Если ДополнительныеПунктыМеню = Неопределено Тогда
		ДополнительныеПунктыМеню = Новый СписокЗначений();
	Иначе
		// Если есть пункт "бит_ОплатаЗаявок".
		ИскомыйПункт = ДополнительныеПунктыМеню.НайтиПоЗначению("бит_ОплатаЗаявок"); 
		Если ИскомыйПункт <> Неопределено Тогда
			Для каждого ЭлементМассива Из МассивПолейРасшифровки Цикл
				// Не расшифровываем отчетом "бит_ОплатаЗаявок" если ВидОплаты <> "Оплата по заявке".
				Если ТипЗнч(ЭлементМассива) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") 
					И ЭлементМассива.Поле = "ВидОплаты" И ЭлементМассива.Значение <> "Оплата по заявке" Тогда
					ДополнительныеПунктыМеню.Удалить(ИскомыйПункт);
					Прервать;					
				КонецЕсли; 		
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	// Структура расшифровки.
	СтруктураРасшифровки.Вставить("ЗначениеРасшифровки"	, ЗначениеРасшифровки);
	СтруктураРасшифровки.Вставить("ПолеРасшифровки"		, ПолеРасшифровки);
			                            			
	Возврат СтруктураРасшифровки;
	
КонецФункции // ПолучитьДанныеРасшифровки()

// Процедура получает настройки компоновщика для расшифровки отчета.
// 
// Параметры:
//  Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных.
// 
// Возвращаемое значение:
//  НастройкиКомпоновкиДанных.
// 
Процедура ПолучитьНастройкиКомпоновщикаДляРасшифровки(Расшифровка, КомпоновщикНастроек) Экспорт
		
	ДанныеРасшифр 	= ПолучитьИзВременногоХранилища(Расшифровка.Данные);
	
	КоллекцияПользовательскихНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	НастройкиОтчета = КомпоновщикНастроек.Настройки;
	
	ИдРасшифровки 		= Расшифровка.Идентификатор;
	ЭлементРасшифровки 	= ДанныеРасшифр.Элементы[ИдРасшифровки];
		
	// Установка показателей и отборов. 	
	
	МассивПоказателей = ПолучитьМассивПоказателей(ЭлементРасшифровки);
	МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(ИдРасшифровки, ДанныеРасшифр);
		  	
	КоллекцияОтборов = НастройкиОтчета.Отбор.Элементы;
	КоллекцияОтборов.Очистить();   	
	
	Для каждого ЭлементПН Из КоллекцияПользовательскихНастроек Цикл
		
		Если ТипЗнч(ЭлементПН) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
			
			ВыбранныеПоля = ЭлементПН.Элементы;
			ВыделитьВыбранныеПоляРасшифровки(ВыбранныеПоля, МассивПоказателей);
			
		ИначеЕсли ТипЗнч(ЭлементПН) = Тип("ОтборКомпоновкиДанных") Тогда
			
			ЭлементыОтбора = ЭлементПН.Элементы;
			ЭлементыОтбора.Очистить();
			
			ДобавитьОтборыРасшифровки(ЭлементыОтбора, МассивПолейРасшифровки);
						
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ПолучитьНастройкиКомпоновщикаДляРасшифровки()

#КонецОбласти

#Область КонвертацияИПростойПереносНастроек

// Функция формирует соответствие макетов оформления.
//  
// Возвращаемое значение:
//   Соответствие.
// 
Функция СформироватьСоответствиеМакетовОформленияКд() Экспорт

	СоответствиеМакетовОформления = Новый Соответствие;
	СоответствиеМакетовОформления.Вставить("БезОформления", "None");
	СоответствиеМакетовОформления.Вставить("Основной"	  , "Main");
	СоответствиеМакетовОформления.Вставить("Яркий"		  , "Gaudy");
	СоответствиеМакетовОформления.Вставить("Море"		  , "Sea");
	СоответствиеМакетовОформления.Вставить("Арктика"	  , "Arctic");
	СоответствиеМакетовОформления.Вставить("Зеленый"	  , "Green");
	СоответствиеМакетовОформления.Вставить("Античный"	  , "Antique");
	
	Возврат СоответствиеМакетовОформления;
	
КонецФункции // СформироватьСоответствиеМакетовОформленияКд()

// Функция формирует вспомогательные таблицы значений.
// 
// Параметры:
//  ИмяТиповогоСпрСохНастроек    - Строка.
//  СформироватьТаблицуСравнения - Булево.
//  
// Возвращаемое значение:
//   Структура (ТаблицаВариантов, ТаблицаНастроек).
// 
Функция ВНО_ПолучитьВспомогательныеТаблицы(ИмяТиповогоСпрСохНастроек, СформироватьТаблицуСравнения = Ложь) Экспорт

	СтруктураТаблиц = Новый Структура;
	
	// Описание типов строка.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов(МассивТипов,,Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока100 = Новый ОписаниеТипов(МассивТипов,,Новый КвалификаторыСтроки(100));
	ОписаниеТипаСтрока256 = Новый ОписаниеТипов(МассивТипов,,Новый КвалификаторыСтроки(256));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.бит_ТипыВариантовОтчетов"));
	ОписаниеТипаТипыВариантов = Новый ОписаниеТипов(МассивТипов);
	
	// Таблица вариантов для проверки.
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов.Колонки.Добавить("КлючОбъекта" , ОписаниеТипаСтрока256);
	ТаблицаВариантов.Колонки.Добавить("КлючВарианта", ОписаниеТипаСтрока256);
	ТаблицаВариантов.Колонки.Добавить("Наименование", ОписаниеТипаСтрока50);
	ТаблицаВариантов.Колонки.Добавить("ТипВарианта" , ОписаниеТипаТипыВариантов);
	ТаблицаВариантов.Колонки.Добавить("Настройки");
	ТаблицаВариантов.Колонки.Добавить("СписокПользователей");
	ТаблицаВариантов.Колонки.Добавить("ДополнительныеСвойства");
	
	СтруктураТаблиц.Вставить("ТаблицаВариантов", ТаблицаВариантов);
	
	// Таблица настроек для проверки.
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта"  , ОписаниеТипаСтрока256);
	ТаблицаНастроек.Колонки.Добавить("КлючНастройки", ОписаниеТипаСтрока256);
	ТаблицаНастроек.Колонки.Добавить("Наименование" , ОписаниеТипаСтрока50);
	ТаблицаНастроек.Колонки.Добавить("Настройки");
	ТаблицаНастроек.Колонки.Добавить("Пользователь");
	      	
	СтруктураТаблиц.Вставить("ТаблицаНастроек" , ТаблицаНастроек);

	// Таблица сравнения.
	Если СформироватьТаблицуСравнения Тогда
		
		ИмяТиповогоСпрСохНастроек = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСохраненныхНастроек();
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка." + ИмяТиповогоСпрСохНастроек));
		ОписаниеТипаСпрНастройки = Новый ОписаниеТипов(МассивТипов);
	
		ТаблицаСравнения = Новый ТаблицаЗначений;
		ТаблицаСравнения.Колонки.Добавить("КлючОбъекта" , ОписаниеТипаСтрока256);
		ТаблицаСравнения.Колонки.Добавить("ИмяНастройки", ОписаниеТипаСтрока100);
		ТаблицаСравнения.Колонки.Добавить("СсылкаНО"	, ОписаниеТипаСпрНастройки);
		ТаблицаСравнения.Колонки.Добавить("ИмяВарианта" , ОписаниеТипаСтрока100);
		ТаблицаСравнения.Колонки.Добавить("ТипВарианта" , ОписаниеТипаТипыВариантов);
		ТаблицаСравнения.Колонки.Добавить("КлючВарианта", ОписаниеТипаСтрока256);
		ТаблицаСравнения.Колонки.Добавить("СтрокаСравнения");
		ТаблицаСравнения.Колонки.Добавить("НастройкиКомпоновщика");
		ТаблицаСравнения.Колонки.Добавить("СписокПользователей");
		ТаблицаСравнения.Колонки.Добавить("ДополнительныеСвойства");
		                            		
	    СтруктураТаблиц.Вставить("ТаблицаСравнения", ТаблицаСравнения);
		
		ТаблицаПредопределенных = Новый ТаблицаЗначений;
		ТаблицаПредопределенных.Колонки.Добавить("КлючОбъекта" , ОписаниеТипаСтрока256);
		ТаблицаПредопределенных.Колонки.Добавить("ИмяВарианта");
		ТаблицаПредопределенных.Колонки.Добавить("КлючВарианта");
		ТаблицаПредопределенных.Колонки.Добавить("СтрокаСравнения");
		
		СтруктураТаблиц.Вставить("ТаблицаПредопределенных", ТаблицаПредопределенных);
	
	КонецЕсли; 
	
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ВНО_ПолучитьВспомогательныеТаблицы()
  
// Процедура добавляет строки в таблицу настроек по ключу объекта и ключу варианта.
// 
// Параметры:
//  ТаблицаНастроек  - ТаблицаЗначений.
//  КлючОбъекта  	 - Строка.
//  КлючВарианта 	 - Строка.
// 
Процедура ВНО_ДобавитьСтрокиТаблицеНастроек(ТаблицаНастроек, КлючОбъекта, КлючВарианта) Экспорт

	КлючОбъектаДляНастройки = КлючОбъекта + "/" + КлючВарианта;
	
	СписокНастроек = ХранилищеПользовательскихНастроекОтчетов.ПолучитьСписок(КлючОбъектаДляНастройки);
	Для каждого ЭлНастройка Из СписокНастроек Цикл
		
		КлючНастройки = ЭлНастройка.Значение;
		
		Попытка
			ТекНастройки = ХранилищеПользовательскихНастроекОтчетов.Загрузить(КлючОбъектаДляНастройки, КлючНастройки);
		Исключение
			Продолжить;
		КонецПопытки;
		
		СтрокаНастроек = ТаблицаНастроек.Добавить();
			
		СтрокаНастроек.КлючОбъекта   = КлючОбъектаДляНастройки;
		СтрокаНастроек.КлючНастройки = КлючНастройки;
		СтрокаНастроек.Наименование  = ЭлНастройка.Представление;
		
		СтрокаНастроек.Настройки     = ТекНастройки;
		
		// Установим дополнительное свойство "КлючНастройки".
		СтрокаНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючНастройки", КлючНастройки);		
			
	КонецЦикла;

КонецПроцедуры // ВНО_ДобавитьСтрокиТаблицеНастроек()

// Процедура добавляет выбранные поля в настройки колонок.
// 
// Параметры:
//  ЭлементыСтруктуры  - ВыбранныеПоляКомпоновкиДанных или ГруппаВыбранныхПолейКомпоновкиДанных. 
//  Колонка  		   - ГруппировкаТаблицыКомпоновкиДанных или ГруппаВыбранныхПолейКомпоновкиДанных.
// 
Процедура ВНО_ДобавитьВыбранныеПоляКолонке(ЭлементыСтруктуры, КолонкаГруппа) Экспорт

	Для каждого ВыбранноеПолеГруппа Из ЭлементыСтруктуры.Элементы Цикл
		
		// Поля.
		Если ТипЗнч(ВыбранноеПолеГруппа) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			
			ПолеВыбора = КолонкаГруппа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ПолеВыбора, ВыбранноеПолеГруппа);
			
		// Группы.
		ИначеЕсли ТипЗнч(ВыбранноеПолеГруппа) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			
			ГруппаВыбора = КолонкаГруппа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ГруппаВыбора, ВыбранноеПолеГруппа);
			
			ВНО_ДобавитьВыбранныеПоляКолонке(ВыбранноеПолеГруппа, ГруппаВыбора);
			
		КонецЕсли;
		
	КонецЦикла;   

КонецПроцедуры // ВНО_ДобавитьВыбранныеПоляКолонке()

// Процедура модифицирует настройки компоновщика для соответствия новой схеме работы.
// 
// Параметры:
//  ТекущаяНастройкаКД    			- НастройкиКомпоновкиДанных.
//  НастройкиПоУмолчанию  			- НастройкиКомпоновкиДанных.
//  СоответствиеМакетовОформления 	- Соответствие.
//  ИмяОтчета 					    - Строка (По умолчанию = Неопределено).
//  КлючВарианта 					- Строка (По умолчанию = Неопределено).
//  НаименованиеВарианта 			- Строка (По умолчанию = Неопределено).
// 
Процедура ВНО_ПреобразоватьНастройкиКомпоновщика(ТекущаяНастройкаКД, НастройкиПоУмолчанию, СоответствиеМакетовОформления, ИмяОтчета = Неопределено, КлючВарианта = Неопределено, НаименованиеВарианта = Неопределено) Экспорт

	// Добавим необходимые параметры в пользовательские настройки.
	ВНО_ПреобразоватьНастройкиКомпоновщика_ПараметрыДанных(ТекущаяНастройкаКД, НастройкиПоУмолчанию); 
	
	// Добавим в текущий вариант идентификаторы пользовательских настроек.
	ТекущаяНастройкаКД.Выбор.ИдентификаторПользовательскойНастройки 			 
					= НастройкиПоУмолчанию.Выбор.ИдентификаторПользовательскойНастройки;
	ТекущаяНастройкаКД.Отбор.ИдентификаторПользовательскойНастройки 			 
					= НастройкиПоУмолчанию.Отбор.ИдентификаторПользовательскойНастройки;
	ТекущаяНастройкаКД.Порядок.ИдентификаторПользовательскойНастройки 			 
					= НастройкиПоУмолчанию.Порядок.ИдентификаторПользовательскойНастройки;
	ТекущаяНастройкаКД.УсловноеОформление.ИдентификаторПользовательскойНастройки 
					= НастройкиПоУмолчанию.УсловноеОформление.ИдентификаторПользовательскойНастройки;					
					
					
	// Структура.
	Для каждого ЭлСтруктуры Из ТекущаяНастройкаКД.Структура Цикл
		
		Если ТипЗнч(ЭлСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
			ЭлСтруктуры.ИдентификаторПользовательскойНастройки 			= Строка(Новый УникальныйИдентификатор);
			ЭлСтруктуры.Выбор.ИдентификаторПользовательскойНастройки 	= Строка(Новый УникальныйИдентификатор);
			ЭлСтруктуры.Колонки.ИдентификаторПользовательскойНастройки 	= Строка(Новый УникальныйИдентификатор);
			ЭлСтруктуры.Строки.ИдентификаторПользовательскойНастройки 	= Строка(Новый УникальныйИдентификатор);
			ЭлСтруктуры.УсловноеОформление.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
			
			Заголовок = ЭлСтруктуры.ПараметрыВывода.Элементы.Найти("Заголовок");
			Если Заголовок <> Неопределено Тогда
				ТекЗаголовок = "Таблица: " + Заголовок.Значение;
				ЭлСтруктуры.Имя = ТекЗаголовок;
				ЭлСтруктуры.ПредставлениеПользовательскойНастройки = ТекЗаголовок;
			КонецЕсли;
			
			Для каждого Колонка Из ЭлСтруктуры.Колонки Цикл   				
				ВНО_ДобавитьВыбранныеПоляКолонке(ЭлСтруктуры.Выбор, Колонка.Выбор); 				
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// Параметры вывода.
	ИзменяемыйПараметр  = ТекущаяНастройкаКД.ПараметрыВывода.Элементы.Найти("Заголовок");
	ПараметрПоУмолчанию = НастройкиПоУмолчанию.ПараметрыВывода.Элементы.Найти("Заголовок");
	Если ИзменяемыйПараметр <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ИзменяемыйПараметр, ПараметрПоУмолчанию,,"Значение");
		Если Не ЗначениеЗаполнено(ИзменяемыйПараметр.Значение) Тогда 			
			Если КлючВарианта <> Неопределено Тогда 					
				ИзменяемыйПараметр.Значение = Метаданные.Отчеты[ИмяОтчета].Синоним + " [" + НаименованиеВарианта + "]";					
			КонецЕсли;						
		КонецЕсли;
	КонецЕсли;	
	
	// Макет оформления.
	ИзменяемыйПараметр  = ТекущаяНастройкаКД.ПараметрыВывода.Элементы.Найти("МакетОформления");
	ПараметрПоУмолчанию = НастройкиПоУмолчанию.ПараметрыВывода.Элементы.Найти("МакетОформления");	
	Если ИзменяемыйПараметр <> Неопределено И ЗначениеЗаполнено(ИзменяемыйПараметр.Значение) Тогда		
		ЗаполнитьЗначенияСвойств(ИзменяемыйПараметр, ПараметрПоУмолчанию,,"Значение");
		НайденноеЗначение = СоответствиеМакетовОформления.Получить(ИзменяемыйПараметр.Значение);
		Если НайденноеЗначение <> Неопределено Тогда
			ИзменяемыйПараметр.Значение = НайденноеЗначение;					
		КонецЕсли; 
	КонецЕсли;
						
КонецПроцедуры // ВНО_ПреобразоватьНастройкиКомпоновщика()

// Процедура записывает варианты и настройки отчетов в справочники БИТ.
// 
Процедура ВНО_ОбновитьВариантыНастройкиОтчетовИзТиповогоСправочника() Экспорт
	
	МассивКлючейОбъектов = Новый Массив;
	МассивИмен 			 = Новый Массив;

	// 13.06.2012
	МассивКлючейОбъектов.Добавить("Отчет.бит_АктивныеШаблоныДвижений");
	МассивКлючейОбъектов.Добавить("Отчет.бит_АктивныеПравилаТрансляции");	
	МассивКлючейОбъектов.Добавить("Отчет.бит_му_ВыработкаВНА");
	МассивКлючейОбъектов.Добавить("Отчет.бит_му_ПараметрыНМА");
	МассивКлючейОбъектов.Добавить("Отчет.бит_му_ПараметрыОС");
	МассивКлючейОбъектов.Добавить("Отчет.бит_ОтчетПраваДоступа");
	МассивКлючейОбъектов.Добавить("Отчет.бит_ПланФактныйАнализУниверсальный");
				
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивКлючейОбъектов", МассивКлючейОбъектов);
	Запрос.УстановитьПараметр("ТипВарианта", Перечисления.бит_ТипыВариантовОтчетов.Пользовательский);
	Запрос.Текст = "	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_ВариантыОтчетов.КлючОбъекта,
	|	бит_ВариантыОтчетов.КлючОбъекта + ""/"" + бит_ВариантыОтчетов.КлючВарианта КАК КлючОбъектаВарианта
	|ПОМЕСТИТЬ ТаблВарианты
	|ИЗ
	|	Справочник.бит_ВариантыОтчетов КАК бит_ВариантыОтчетов
	|ГДЕ
	|	бит_ВариантыОтчетов.КлючОбъекта В(&МассивКлючейОбъектов)
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблВарианты.КлючОбъекта,
	|	МАКСИМУМ(бит_СохраненныеНастройки.КлючОбъекта) КАК КлючОбъектаИзСправочника
	|ПОМЕСТИТЬ ТаблВрем
	|ИЗ
	|	ТаблВарианты КАК ТаблВарианты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_СохраненныеНастройки КАК бит_СохраненныеНастройки
	|		ПО ТаблВарианты.КлючОбъектаВарианта = бит_СохраненныеНастройки.КлючОбъекта
	|СГРУППИРОВАТЬ ПО
	|	ТаблВарианты.КлючОбъекта
	|	
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблВрем.КлючОбъекта,
	|	ТаблВрем.КлючОбъектаИзСправочника
	|ИЗ
	|	ТаблВрем КАК ТаблВрем
	|ГДЕ
	|	ТаблВрем.КлючОбъектаИзСправочника ЕСТЬ NULL
	|";
	Результат = Запрос.Выполнить();	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивИмен.Добавить(СтрЗаменить(Выборка.КлючОбъекта, "Отчет.", ""));
	КонецЦикла;
	
	ИмяТиповогоСпрСохНастроек = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСохраненныхНастроек(); 
	ВНО_ОбновитьВариантыНастройкиОтчетовИзТиповогоСправочникаДляОтчетов(МассивИмен, ИмяТиповогоСпрСохНастроек);                                                              	
				
КонецПроцедуры // ВНО_ОбновитьВариантыНастройкиОтчетовИзТиповогоСправочника()

// Процедура записывает варианты и настройки отчетов в справочники БИТ.
// 
// Параметры:
//  МассивИменОбъектов - Массив.
//  Постфикс           - Строка.
// 
Процедура ВНО_ПеренестиНастройкиМассиваОтчетовКакЕстьИзТиповогоСправочника(МассивИменОбъектов, Постфикс) Экспорт
	
	МассивКлючейОбъектовБит = Новый Массив;
	МассивКлючейОбъектовТип = Новый Массив;
	Для каждого ИмяОбъекта Из МассивИменОбъектов Цикл
		МассивКлючейОбъектовБит.Добавить("Отчет." + ИмяОбъекта + Постфикс);
		МассивКлючейОбъектовТип.Добавить("ОтчетОбъект." + ИмяОбъекта);	
	КонецЦикла; 	
	
	ИмяТиповогоСпрСохНастроек = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСохраненныхНастроек();
	
	ТипНстрОтчеты = Перечисления.бит_ТипыСохраненныхНастроек.Отчеты;
	
	ТекущийПользователь   = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	ГруппаВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	 	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтроки = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100));
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("НастраиваемыйОбъект", ОписаниеТиповСтроки);
	ТаблицаНастроек.Колонки.Добавить("Наименование"		  , ОписаниеТиповСтроки);
	        	
	
	// ----------------------------------------------------------------------
	// Настройки Бит.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивКлючейОбъектов", МассивКлючейОбъектовБит);
	Запрос.Текст = "	
	|ВЫБРАТЬ
	|	бит_СохраненныеНастройки.ТипНастройки,
	|	бит_СохраненныеНастройки.КлючОбъекта,
	|	бит_СохраненныеНастройки.НастраиваемыйОбъект,
	|	бит_СохраненныеНастройки.КлючНастройки,
	|	бит_СохраненныеНастройки.Наименование
	|ИЗ
	|	Справочник.бит_СохраненныеНастройки КАК бит_СохраненныеНастройки
	|ГДЕ
	|	бит_СохраненныеНастройки.НастраиваемыйОбъект В(&МассивКлючейОбъектов)
	|";
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		
		ТиповойКлюч = СтрЗаменить(Выборка.КлючОбъекта, "Отчет."		 , "ОтчетОбъект.");
		ТиповойКлюч = СтрЗаменить(ТиповойКлюч		 , Постфикс, "");
		СтрокаТаблицы = ТаблицаНастроек.Добавить();
		СтрокаТаблицы.НастраиваемыйОбъект = ТиповойКлюч;
		СтрокаТаблицы.Наименование 		  = Выборка.Наименование;
				
	КонецЦикла;
	
	
	// ----------------------------------------------------------------------
	// Типовые натройки.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивКлючейОбъектов"		  , МассивКлючейОбъектовТип);
	Запрос.УстановитьПараметр("ТаблицаНастроек"				  , ТаблицаНастроек);
	Запрос.УстановитьПараметр("ТипНастройки"				  , Перечисления.ТипыНастроек.НастройкиОтчета);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВремТаблицаНастроек.НастраиваемыйОбъект КАК НастраиваемыйОбъект,
	|	ВремТаблицаНастроек.Наименование 		КАК Наименование
	|ПОМЕСТИТЬ ТаблБитСохрНастройки
    |ИЗ 
	|	&ТаблицаНастроек КАК ВремТаблицаНастроек
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СохрНастройки.Ссылка,
	|	СохрНастройки.Наименование,
	|	СохрНастройки.НастраиваемыйОбъект
	|ПОМЕСТИТЬ ТаблСохрНастройки
	|ИЗ
	|	Справочник." + ИмяТиповогоСпрСохНастроек + " КАК СохрНастройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблБитСохрНастройки КАК ТаблБитСохрНастройки
	|			ПО СохрНастройки.НастраиваемыйОбъект = ТаблБитСохрНастройки.НастраиваемыйОбъект
	|			И СохрНастройки.Наименование = ТаблБитСохрНастройки.Наименование
	|ГДЕ
	|	СохрНастройки.НастраиваемыйОбъект В(&МассивКлючейОбъектов)
	|	И (ТаблБитСохрНастройки.Наименование ЕСТЬ NULL)
	|   И СохрНастройки.ТипНастройки = &ТипНастройки
    |
	|СГРУППИРОВАТЬ ПО
	|	СохрНастройки.Ссылка,
	|	СохрНастройки.Наименование,
	|	СохрНастройки.НастраиваемыйОбъект
	|;
    |
	|ВЫБРАТЬ
	|	ТаблСохрНастройки.Ссылка 				 КАК Ссылка,
	|	ТаблСохрНастройки.Наименование 			 КАК Наименование,
	|	ТаблСохрНастройки.НастраиваемыйОбъект 	 КАК НастраиваемыйОбъект,
	|	СохрНастройки.ИспользоватьПриОткрытии 	 КАК ИспользоватьПриОткрытии,
	|	СохрНастройки.Описание 					 КАК Описание,
	|	СохрНастройки.ХранилищеНастроек 		 КАК ХранилищеНастроек,
	|	СохрНастройки.Представление 			 КАК Представление,
	|	СохрНастройкиПользователи.Пользователь 	 КАК Ответственный,
	|	СохрНастройкиПользователи.ПравоИзменения КАК ПравоИзменения,
	|	СохрНастройкиПользователи.НомерСтроки    КАК НомерПользователя
	|ИЗ
	|	ТаблСохрНастройки КАК ТаблСохрНастройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяТиповогоСпрСохНастроек + " КАК СохрНастройки
	|			ПО ТаблСохрНастройки.Ссылка = СохрНастройки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяТиповогоСпрСохНастроек + ".Пользователи КАК СохрНастройкиПользователи
	|			ПО ТаблСохрНастройки.Ссылка = СохрНастройкиПользователи.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерПользователя
	|
	|ИТОГИ
	|ПО
	|	Ссылка
	|";	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	
	// ----------------------------------------------------------------------
	// Перенос настроек в справочник бит_СохраненныеНастройки без конвертации.
	Пока ВыборкаСсылка.Следующий() Цикл		
		
		// Создание элемента справочника бит_СохраненныеНастройки.
		ЭлемСправочника 	= Справочники.бит_СохраненныеНастройки.СоздатьЭлемент();		                           		
		СписокПользователей = Новый СписокЗначений;
		
		Выборка = ВыборкаСсылка.Выбрать();
		КоличествоПользователей = Выборка.Количество();
		Если Выборка.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(ЭлемСправочника, Выборка);
			БитКлюч = СокрЛП(СтрЗаменить(Выборка.НастраиваемыйОбъект, "ОтчетОбъект.", "Отчет.")) + Постфикс;
			ЭлемСправочника.НастраиваемыйОбъект = БитКлюч;
			ЭлемСправочника.КлючОбъекта   	  	= БитКлюч;
			ЭлемСправочника.КлючНастройки 		= Строка(Новый УникальныйИдентификатор);
			ЭлемСправочника.ТипНастройки  		= ТипНстрОтчеты;
			
			Если КоличествоПользователей > 1 Тогда
				Выборка.Сбросить();
				Пока Выборка.Следующий() Цикл
					СписокПользователей.Добавить(Выборка.Ответственный, , Выборка.ПравоИзменения);
				КонецЦикла;			
			КонецЕсли;		
			
		КонецЕсли;
		
		ЭлементЗаписан = бит_ОбщегоНазначения.ЗаписатьСправочник(ЭлемСправочника, , "Ошибки");
		
		// Запись настроек доступности ваиантов отчетов в регистр сведений.
		Если ЭлементЗаписан И СписокПользователей.Количество() > 1 Тогда
			бит_ОтчетыСервер.ЗаписьНабораНастроекДоступности(ЭлемСправочника.Ссылка, СписокПользователей)		
		КонецЕсли; 		
		
	КонецЦикла;
	
КонецПроцедуры // ВНО_ПеренестиНастройкиМассиваОтчетовКакЕстьИзТиповогоСправочника()

// Процедура записывает варианты и настройки отчетов в справочники БИТ.
// 
Процедура ВНО_ПеренестиНастройкиОтчетовНаПостроителеИзТиповогоСправочника() Экспорт
	
	// Массив имен объектов.
	МассивИменОбъектов = Новый Массив;
	МассивИменОбъектов.Добавить("бит_АнализСубконто_Бюджетирование");
	МассивИменОбъектов.Добавить("бит_АнализСчета_Бюджетирование");
	МассивИменОбъектов.Добавить("бит_КарточкаСубконто_Бюджетирование");
	МассивИменОбъектов.Добавить("бит_КарточкаСчета_Бюджетирование");
	МассивИменОбъектов.Добавить("бит_ОборотноСальдоваяВедомость_Бюджетирование");
	МассивИменОбъектов.Добавить("бит_ОборотноСальдоваяВедомостьПоСчету_Бюджетирование");
	МассивИменОбъектов.Добавить("бит_ОборотыСчета_Бюджетирование");
	МассивИменОбъектов.Добавить("бит_ОтчетПоПроводкам_Бюджетирование");
	МассивИменОбъектов.Добавить("бит_АнализСубконто_Управленческий");
	МассивИменОбъектов.Добавить("бит_АнализСчета_Управленческий");
	МассивИменОбъектов.Добавить("бит_КарточкаСубконто_Управленческий");
	МассивИменОбъектов.Добавить("бит_КарточкаСчета_Управленческий");
	МассивИменОбъектов.Добавить("бит_ОборотноСальдоваяВедомость_Управленческий");
	МассивИменОбъектов.Добавить("бит_ОборотноСальдоваяВедомостьПоСчету_Управленческий");
	МассивИменОбъектов.Добавить("бит_ОборотыСчета_Управленческий");
	МассивИменОбъектов.Добавить("бит_ОтчетПоПроводкам_Управленческий");
	
		
	ВНО_ПеренестиНастройкиМассиваОтчетовКакЕстьИзТиповогоСправочника(МассивИменОбъектов, "_Построитель");
	
КонецПроцедуры // ВНО_ПеренестиНастройкиОтчетовНаПостроителеИзТиповогоСправочника()

// Процедура записывает варианты и настройки отчетов в справочники БИТ.
// 
Процедура ВНО_ПеренестиНастройкиОтчетовНаСкдИзТиповогоСправочника() Экспорт
	
	// Массив имен объектов.
	МассивИменОбъектов = Новый Массив;
	МассивИменОбъектов.Добавить("бит_УниверсальныйОтчетИсточникиДанных");
	МассивИменОбъектов.Добавить("бит_ПроизвольныйОтчет");
	
	ВНО_ПеренестиНастройкиМассиваОтчетовКакЕстьИзТиповогоСправочника(МассивИменОбъектов, "_Скд");
	
КонецПроцедуры // ВНО_ПеренестиНастройкиОтчетовНаСкдИзТиповогоСправочника()

// Процедура записывает варианты и настройки отчетов в справочники БИТ.
// 
Процедура ВНО_ПеренестиНастройкиОтчетовТиповогоСправочникаБезКонвертации() Экспорт
	
	ВНО_ПеренестиНастройкиОтчетовНаПостроителеИзТиповогоСправочника();
	ВНО_ПеренестиНастройкиОтчетовНаСкдИзТиповогоСправочника();
	
КонецПроцедуры // ВНО_ПеренестиНастройкиОтчетовТиповогоСправочникаБезКонвертации()

// Процедура конвертирует непредопределенные варианты отчетов.
// 
// Параметры:
//  МассивКлючейОбъекта - Массив (По умолчанию = Неопределено).
// 
Процедура КНВ_КонвертироватьНеПредопределенныеВариантыОтчетов(МассивКлючейОбъекта = Неопределено) Экспорт

	Если МассивКлючейОбъекта = Неопределено Тогда 
		МассивКлючейОбъекта = Новый Массив;
		МассивКлючейОбъекта.Добавить("Отчет.бит_ПланФактныйАнализПоБюджету_ОстаткиПоСчетам");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивКлючейОбъекта", МассивКлючейОбъекта);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_ВариантыОтчетов.Ссылка,
	|	бит_ВариантыОтчетов.КлючОбъекта,
	|	бит_ВариантыОтчетов.КлючВарианта,
	|	бит_ВариантыОтчетов.ХранилищеВарианта
	|ИЗ
	|	Справочник.бит_ВариантыОтчетов КАК бит_ВариантыОтчетов
	|ГДЕ
	|	бит_ВариантыОтчетов.КлючОбъекта В(&МассивКлючейОбъекта)
	|	И бит_ВариантыОтчетов.Предопределенный = ЛОЖЬ
	|";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КлючОбъекта = "Отчет.бит_ПланФактныйАнализПоБюджету_ОстаткиПоСчетам" Тогда
			КНВ_КонвертироватьНеПредопределенныйВариантОтчета_бит_ПланФактныйАнализПоБюджету_ОстаткиПоСчетам(Выборка);		
		КонецЕсли; 		
	
	КонецЦикла; 		

КонецПроцедуры // КНВ_КонвертироватьНеПредопределенныеВариантыОтчетов()

Процедура ПеренестиНастройкиФормыВСохраненныеБит(ИмяОтчета, КлючФормы) Экспорт
	
	Если ХранилищеНастроекДанныхФорм.ПолучитьСписок(КлючФормы).Количество() = 0 Тогда		
		// Настройки не найдены.
		Возврат;	
	КонецЕсли;
	
	// Массив ключей настроек уже записанных в справочник бит_СохраненныеНастройки.
	МассивЗаписанныхКлючей = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючОбъекта", ИмяОтчета);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_СохраненныеНастройки.Ссылка,
	|	бит_СохраненныеНастройки.КлючНастройки
	|ИЗ
	|	Справочник.бит_СохраненныеНастройки КАК бит_СохраненныеНастройки
	|ГДЕ
	|	бит_СохраненныеНастройки.КлючОбъекта = &КлючОбъекта
	|";
	ВыборкаБит = Запрос.Выполнить().Выбрать();
	Пока ВыборкаБит.Следующий() Цикл
		МассивЗаписанныхКлючей.Добавить(ВыборкаБит.КлючНастройки);
	КонецЦикла;
	
	ТипНстрОтчеты = Перечисления.бит_ТипыСохраненныхНастроек.Отчеты;
	
	ОтборНастроек = Новый Структура("КлючОбъекта", "Отчет.бит_СоответствиеЗаписейТрансляции.Форма.ФормаОтчетаУправляемая");
	ВыборкаНастроек = ХранилищеНастроекДанныхФорм.Выбрать(ОтборНастроек);
	Пока ВыборкаНастроек.Следующий() Цикл
		
		Если МассивЗаписанныхКлючей.Найти(ВыборкаНастроек.КлючНастроек) <> Неопределено Тогда
			Продолжить;		
		КонецЕсли;
		
		// Создание элемента справочника бит_СохраненныеНастройки.
		ЭлемСправочника 	= Справочники.бит_СохраненныеНастройки.СоздатьЭлемент();		                           		
			
		ЭлемСправочника.Наименование 		= ВыборкаНастроек.Представление;
		ЭлемСправочника.НастраиваемыйОбъект = ИмяОтчета;
		ЭлемСправочника.КлючОбъекта   	  	= ИмяОтчета;
		ЭлемСправочника.КлючНастройки 		= ВыборкаНастроек.КлючНастроек;
		ЭлемСправочника.ТипНастройки  		= ТипНстрОтчеты;
		
		// Преобразуем настройки.
		ТекНастройки = ВыборкаНастроек.Настройки;
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ПравилаЗаполненияПолейПриТрансляции", ТекНастройки.Получить("Отчет.ПравилаЗаполненияПолейПриТрансляции"));
		СтруктураНастроек.Вставить("ПользовательскиеНастройки"			, ТекНастройки.Получить("Отчет.НастройкиКомпоновщикаНастроек"));
		ЭлемСправочника.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураНастроек);
		
		// Пользователь, создавший настройку.
		НайденныйПользователь = Справочники.Пользователи.НайтиПоНаименованию(ВыборкаНастроек.Пользователь);
		Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
			ЭлемСправочника.Ответственный = НайденныйПользователь;
		КонецЕсли;		
		
		ЭлементЗаписан = бит_ОбщегоНазначения.ЗаписатьСправочник(ЭлемСправочника, , "Ошибки");
		
		// Запись настроек доступности ваиантов отчетов в регистр сведений.
		Если ЭлементЗаписан И ЗначениеЗаполнено(НайденныйПользователь) Тогда
			бит_ОтчетыСервер.ЗаписьНабораНастроекДоступности(ЭлемСправочника.Ссылка, НайденныйПользователь)		
		КонецЕсли;	
	
	КонецЦикла;
	
КонецПроцедуры // ПеренестиНастройкиФормыВСохраненныеБит()

#КонецОбласти

// Возвращает текущий режим формирования отчетов.
// 
// Параметры:
//   ИмяПолное     - Строка.
//   ТипРезультата - Строка.
// 
// Возвращаемое значение:
//  Рез - Строка, ПеречислениеСсылка.бит_РежимыФормированияОтчетов.
// 
Функция РежимФормированияОтчетов(ИмяПолное, ТипРезультата = "Строка")  Экспорт
	
	ПеречислениеРежимы = Перечисления.бит_РежимыФормированияОтчетов;
	
	Если бит_ОбщегоНазначенияКлиентСервер.ЭтоФайловаяИБ() Тогда
		
		Режим = ПеречислениеРежимы.Непосредственно;
		
	Иначе	
		
		Режим = Константы.бит_РежимФормированияОтчетов.Получить();
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Режим) Тогда
		
		Режим = ПеречислениеРежимы.Непосредственно;
		
	КонецЕсли; 
	
	Если ВРег(ТипРезультата) = ВРег("Перечисление") Тогда
		
		Рез = Режим;
		
	Иначе	
		
		Рез = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(ПеречислениеРежимы, Режим);
		
	КонецЕсли; 
	
	Возврат Рез;
	
КонецФункции // РежимФормированияОтчетов()

// Возвращает текущий режим формирования отчетов и расшифровок.
// 
// Параметры:
//   ИмяПолное     - Строка.
//   ТипРезультата - Строка.
// 
// Возвращаемое значение:
//  Рез - Структура.
// 
Функция РежимыОтчетов(ИмяПолное, ТипРезультата = "Строка") Экспорт

	ПеречислениеРежимы = Перечисления.бит_РежимыФормированияОтчетов;	
	
	рОтчеты = РежимФормированияОтчетов(ИмяПолное, "Перечисление");
	
	Если рОтчеты = ПеречислениеРежимы.ВыборПользователя Тогда
		рРасшифровки = ПеречислениеРежимы.Непосредственно;
	Иначе
		рРасшифровки = рОтчеты;
	КонецЕсли;	
	
	Рез = Новый Структура("Отчеты, Расшифровки");	
	Если ВРег(ТипРезультата) = ВРег("Перечисление") Тогда
		
		Рез.Отчеты      = рОтчеты;
		Рез.Расшифровки = рРасшифровки;
		
	Иначе	
		
		Рез.Отчеты      = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(ПеречислениеРежимы, рОтчеты);
		Рез.Расшифровки = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(ПеречислениеРежимы, рРасшифровки);
		
	КонецЕсли; 
	
	Возврат Рез;
	
КонецФункции // РежимыОтчетов()
             
// Процедура устанавливает значения параметров, задающих период в отчете границами. 
// Программная установка необходима, т.к. в самой СКД границы установить невозможно. 
// Значения дат берутся из стандартного периода.
// 
// Параметры:
//  Компоновщик            - КомпоновщикНастроекКомпоновкиДанных.
//  ИмяСтандартногоПериода - Строка.
//  ИмяНачалоПериода       - Строка.
//  ИмяКонецПериода        - Строка.
// 
Процедура УстановитьГраницыПериода(Компоновщик
	                                , ИмяСтандартныйПериод = "Период"
									, ИмяНачалоПериода = "НачалоПериода"
									, ИмяКонецПериода = "КонецПериода" ) Экспорт
	
	// Найдем стандартный период.
	СтПериод = Неопределено;
	Для каждого Элемент Из Компоновщик.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И Строка(Элемент.Параметр) = ИмяСтандартныйПериод Тогда
			
			СтПериод = Элемент.Значение;
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Начало периода.
	Параметр =	Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти(ИмяНачалоПериода);
	
	Если НЕ Параметр = Неопределено Тогда
		
		Если ТипЗнч(СтПериод) = Тип("СтандартныйПериод") И ЗначениеЗаполнено(СтПериод.ДатаНачала) Тогда
			
			Граница = Новый Граница(НачалоДня(СтПериод.ДатаНачала), ВидГраницы.Включая);
			Параметр.Значение      = Граница;
			Параметр.Использование = Истина;
			
		Иначе
			
			Параметр.Значение = Дата('00010101');
			Параметр.Использование = Истина;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Конец периода.
	Параметр =	Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти(ИмяКонецПериода);
	
	Если ТипЗнч(СтПериод) = Тип("СтандартныйПериод") И НЕ Параметр = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтПериод.ДатаОкончания) Тогда
			
			Граница = Новый Граница(КонецДня(СтПериод.ДатаОкончания), ВидГраницы.Включая);
			Параметр.Значение      = Граница;
			Параметр.Использование = Истина;
			
		Иначе	
			
			Параметр.Значение = Дата('00010101');
			Параметр.Использование = Истина;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьГраницыПериодов()

Процедура УстановитьЗаголовкиПолейСумма(ЭлементыНастроек, СценарийЭталон, Сценарий) Экспорт
	
	Для каждого Элемент Из ЭлементыНастроек Цикл
		
		Если СтрНайти(ВРег(Элемент.Поле), ВРег("эталон"))>0 Тогда 
			
			Элемент.Заголовок = СценарийЭталон;
			
		ИначеЕсли СтрНайти(ВРег(Элемент.Поле), ВРег("Сумма"))>0
			И СтрНайти(ВРег(Элемент.Поле), ВРег("абс"))=0
			И СтрНайти(ВРег(Элемент.Поле), ВРег("отн"))=0 Тогда 
			
			Элемент.Заголовок = Сценарий;
			
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Копия. См. БухгалтерскиеОтчетыВызовСервера.ОбработкаПроверкиЗаполнения()
//
Процедура ОбработкаПроверкиЗаполнения(ОтчетОбъект, Отказ, Проверки = Неопределено) Экспорт
	
	Если Проверки = Неопределено Тогда
		Проверки = Новый Структура("КорректностьПериода", Истина); 
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Период", ОтчетОбъект.Метаданные()) Тогда
		Поле = "Отчет.Период.ДатаНачала";
		НачалоПериода = ОтчетОбъект.Период.ДатаНачала;
		КонецПериода  = ОтчетОбъект.Период.ДатаОкончания;
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("НачалоПериода", ОтчетОбъект.Метаданные()) Тогда	
		Поле = "Отчет.НачалоПериода";
		НачалоПериода = ОтчетОбъект.НачалоПериода;
		КонецПериода  = ОтчетОбъект.КонецПериода;
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если Проверки.Свойство("КорректностьПериода") И Проверки.КорректностьПериода Тогда
		Если ЗначениеЗаполнено(КонецПериода) И НачалоПериода > КонецПериода Тогда
			ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты конца периода'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обновляет варианты для отчета.
// 
// Параметры:
//  ТаблицаВариантов - ТаблицаЗначений.
//  КлючОбъекта  	 - Строка.
//  ИмяОтчета		 - Строка.
//  МетаОтчет 		 - Матеденные объекта.
//  ЭтоУппКа		 - Булево.
// 
Процедура ДополнитьТаблицуВариантовДляОтчета(ТаблицаВариантов, КлючОбъекта, ИмяОтчета, МетаОтчет, ЭтоУппКа)
	
	// Проверка того, что отчет работает с хранилищем вариантов.
	Если МетаОтчет.ХранилищеВариантов = Неопределено Тогда
		Возврат;			
	КонецЕсли;
		
	// Макеты отчета.
	МетаМакеты = МетаОтчет.Макеты;
	Для каждого МетаМакет Из МетаМакеты Цикл
		
		// Рассматриваем только макеты типа СКД.
		Если МетаМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			
			ИмяСКД = МетаМакет.Имя;
			// Обрабатываем только новые СКД.
			Если Найти(ИмяСКД, "_Старая") <> 0 Тогда
			 	Продолжить;				
			КонецЕсли;
			
			Если ИмяОтчета = "бит_ПлатежныйКалендарь" ИЛИ ИмяОтчета = "бит_СверкаВГО_Произвольный" Тогда
				Если ЭтоУппКа И ИмяСКД <> "СКД_УппКа" 
				ИЛИ (Не ЭтоУппКа И ИмяСКД = "СКД_УппКа") Тогда
				
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
					
			Макет = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяСКД);
			
			// Предопределенные варианты.
			Для каждого ПредопределенныйВариант Из Макет.ВариантыНастроек Цикл
					 	
				СтрокаТаблицы = ТаблицаВариантов.Добавить();
				КлючВарианта = ПредопределенныйВариант.Имя;
				
				СтрокаТаблицы.КлючОбъекта  = КлючОбъекта;
				СтрокаТаблицы.КлючВарианта = КлючВарианта;
				СтрокаТаблицы.Наименование = ПредопределенныйВариант.Представление;
				СтрокаТаблицы.ТипВарианта  = Перечисления.бит_ТипыВариантовОтчетов.Предопределенный;
				
				НастройкиВарианта = ПредопределенныйВариант.Настройки;
							
				СтрокаТаблицы.Настройки = НастройкиВарианта;
							
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЦикла;	

КонецПроцедуры // ОбновитьВариантыДляОтчета()

// Функция выполняет поиск доступного поля отбора
//
// Параметры:
//  ЛевоеЗначение.
//  КомпоновщикНастроек.
//  
// Возвращаемое значение:
//   НайденноеПоле.
//
Функция НайтиДоступноеПолеОтбора(ЛевоеЗначение, КомпоновщикНастроек)

	МассивПути = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ЛевоеЗначение, ".", Истина);
	ДоступныеПоляОтбораКД = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы;
						
	Для каждого ЭлМас Из МассивПути Цикл
		НайденноеПоле = ДоступныеПоляОтбораКД.Найти(ЭлМас); 	
		ДоступныеПоляОтбораКД = НайденноеПоле.Элементы;		
	КонецЦикла;
	
	Возврат НайденноеПоле;
	
КонецФункции // НайтиДоступноеПолеОтбора()

// Процедура проверяет группу элементов отбора.
//
// Параметры:
//  ГруппаЭлементов.
//  КомпоновщикНастроек.
//
Процедура ПроверитьГруппуЭлементовОтбора(ГруппаЭлементов, КомпоновщикНастроек)
	
	Для каждого ЭлОтбора Из ГруппаЭлементов Цикл
		
		Если ЭлОтбора.Использование Тогда // Проверка только элементов, включенных в отбор.
			
			Если ТипЗнч(ЭлОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				
				// Это группа.
				ПроверитьГруппуЭлементовОтбора(ЭлОтбора.Элементы, КомпоновщикНастроек);
				
			Иначе
				
				ЛевоеЗначение  = ЭлОтбора.ЛевоеЗначение; 			
				
				Если Найти(ЛевоеЗначение, ".") <> 0 Тогда // Проверка только дочерних (в пути есть точка).
					
					ПравоеЗначение = ЭлОтбора.ПравоеЗначение;
					Если ТипЗнч(ПравоеЗначение) = Тип("Строка") Тогда // Проверка только строковых.
						                                      						
						ЭлементДО = НайтиДоступноеПолеОтбора(ЛевоеЗначение, КомпоновщикНастроек);
						
						// У полней типа Строка неограниченой длины не может быть вида сравнения "Равно".
						Если ЭлементДО.ТипЗначения.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная Тогда
							Если ЭлОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
								ЭлОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;								
							КонецЕсли;                                 
						КонецЕсли;
					
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ПроверитьГруппуЭлементовОтбора()

// Функция получает доступное поле по полю компоновки.
// 
// Параметры:
//  ПолеКомпоновкиДанных    - ПолеКомпоновкиДанных.
//  ОбластьПоиска 			- ДанныеРасшифровкаКомпоновкиДанных 
// 								ИЛИ КомпоновщикНастроекКомпоновкиДанных 
// 								ИЛИ НастройкиВложенногоОбъектаКомпоновкиДанных 
// 								ИЛИ ДоступныеПоляКомпоновкиДанных.
//  
// Возвращаемое значение:
//   ДоступноеПолеКомпоновкиДанных. 
// 
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска)
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции // ПолучитьДоступноеПолеПоПолюКомпоновкиДанных()

// Процедура наполняет массив полей расшифровки.
// 
// Параметры:
//  ЭлементРасшифровки     - ПолеКомпоновкиДанных.
//  ДанныеРасшифровки  	   - ДанныеРасшифровкиКомпоновкиДанных.
//  МассивПолейРасшифровки - Массив.
//  ВключатьРесурсы  	   - Булево.
// 
Процедура ДобавитьРодителей(ЭлементРасшифровки, ДанныеРасшифровки, МассивПолейРасшифровки, ВключатьРесурсы = Ложь) 
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ДанныеРасшифровки);
			
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			
			МассивПолейРасшифровки.Добавить(Поле);
			
		КонецЦикла;   
		
	КонецЕсли;
	
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ДанныеРасшифровки, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьРодителей()
          
// Процедура обрабатывает группы и элементы отборов компоновки данных.
// 
// Параметры:
//  ЭлементыОтбора  					- КоллекцияЭлементовОтбораКомпоновкиДанных.
//  ЭлементМассива  					- ГруппаЭлементовОтбораКомпоновкиДанных ИЛИ ЭлементОтбораКомпоновкиДанных.
//  КоллекцияДоступныхПолейОтбора 		- КоллекцияДоступныхПолейКомпоновкиДанных (По умолчанию = Неопределено).
//  ДобавлятьИдПользовательскихНастроек - Булево (По умолчанию = Ложь).
// 
Процедура ОбработатьГруппыЭлементыОтбораКомпоновкиДанных(ЭлементыОтбора, ЭлементМассива, КоллекцияДоступныхПолейОтбора = Неопределено, ДобавлятьИдПользовательскихНастроек = Ложь)

	Если ТипЗнч(ЭлементМассива) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		ИмяПоля = Строка(ЭлементМассива.ЛевоеЗначение);
		Если КоллекцияДоступныхПолейОтбора <> Неопределено
			И КоллекцияДоступныхПолейОтбора.Найти(ИмяПоля) = Неопределено Тогда
			Возврат;				
		КонецЕсли;
		
		НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйОтбор, ЭлементМассива);
		Если ДобавлятьИдПользовательскихНастроек Тогда
			НовыйОтбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		
		НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйОтбор, ЭлементМассива);
		
		Для каждого ЭлементГруппы Из ЭлементМассива.Элементы Цикл
			ОбработатьГруппыЭлементыОтбораКомпоновкиДанных(НовыйОтбор.Элементы, ЭлементГруппы, КоллекцияДоступныхПолейОтбора)
 		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры // ОбработатьГруппыЭлементыОтбораКомпоновкиДанных()

// Процедура добавляет отборы в настройки компоновки данных.
// 
// Параметры:
//  ЭлементыОтбора 					    - КоллекцияЭлементовОтбораКомпоновкиДанных.
//  МассивПолейРасшифровки 			    - Массив.
//  КоллекцияДоступныхПолейОтбора 	    - КоллекцияДоступныхПолейКомпоновкиДанных (По умолчанию = Неопределено).
//  ДобавлятьИдПользовательскихНастроек - Булево (По умолчанию = Ложь).
// 
Процедура ДобавитьОтборыРасшифровки(ЭлементыОтбора, МассивПолейРасшифровки, КоллекцияДоступныхПолейОтбора = Неопределено, ДобавлятьИдПользовательскихНастроек = Ложь) 
	
	Для каждого ЭлементМассива Из МассивПолейРасшифровки Цикл
				
		Если ТипЗнч(ЭлементМассива) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			
			ИмяПоля = ЭлементМассива.Поле;
			Если КоллекцияДоступныхПолейОтбора <> Неопределено 
				И КоллекцияДоступныхПолейОтбора.Найти(ИмяПоля) = Неопределено Тогда
				Продолжить;				
			КонецЕсли;
								
			НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 			
		   	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЭлементМассива.Поле);
			НовыйОтбор.ВидСравнения   = ?(ЭлементМассива.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
			НовыйОтбор.ПравоеЗначение = ЭлементМассива.Значение;
			Если ДобавлятьИдПользовательскихНастроек Тогда
				НовыйОтбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);			
			КонецЕсли;
			
		Иначе
			
			ОбработатьГруппыЭлементыОтбораКомпоновкиДанных(ЭлементыОтбора,
														ЭлементМассива, 
														КоллекцияДоступныхПолейОтбора,
														ДобавлятьИдПользовательскихНастроек);  			
			
		КонецЕсли;
													
	КонецЦикла;	

КонецПроцедуры // ДобавитьОтборыРасшифровки()

// Функция формирует массив показателей.
// 
// Параметры:
//  ЭлементРасшифровки - ЭлементРасшифровкиКомпоновкиДанныхПоля.
//  
// Возвращаемое значение:
//   Массив.
// 
Функция ПолучитьМассивПоказателей(ЭлементРасшифровки) 

	МассивПоказателей = Новый Массив;
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		
		Показатели = ЭлементРасшифровки.ПолучитьПоля();
		
		Если Показатели.Количество() > 0 Тогда
			ИмяПоказателя = Показатели[0].Поле;
			НовыйПоказатель = Новый ПолеКомпоновкиДанных(ИмяПоказателя);
			МассивПоказателей.Добавить(НовыйПоказатель);			
		КонецЕсли; 	
		
	КонецЕсли;

	Возврат МассивПоказателей;
	
КонецФункции // ПолучитьМассивПоказателей()

// Процедура выделяет выбранные поля расшифровки.
// 
// Параметры:
//  ЭлементыВыбора    - ГруппаВыбранныхПолейКомпоновкиДанных ИЛИ ЗначениеВыбранныхПолейКомпоновкиДанных.
//  МассивПоказателей - Массив.
// 
Процедура ВыделитьВыбранныеПоляРасшифровки(ЭлементыВыбора, МассивПоказателей) 

	Для каждого ЭлементВыбора Из ЭлементыВыбора Цикл
		
		Если ТипЗнч(ЭлементВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				
			ВыделитьВыбранныеПоляРасшифровки(ЭлементВыбора.Элементы, МассивПоказателей);	
			
		Иначе
			
			НайденныйПоказатель = МассивПоказателей.Найти(ЭлементВыбора.Поле);
			Если НайденныйПоказатель = Неопределено Тогда
				ЭлементВыбора.Использование = Ложь;	
			Иначе
				ЭлементВыбора.Использование = Истина;
			КонецЕсли;
							
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры // ВыделитьВыбранныеПоляРасшифровки()

// Функция сериализует настройки компоновщика.
// 
// Параметры:
//  НастройкиКомпоновщика - ТаблицаКомпоновкиДанных.
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ВНО_СериализоватьНастройкиКомпоновщика(НастройкиКомпоновщика)

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	Сериализатор.ЗаписатьXML(ЗаписьXML,НастройкиКомпоновщика);
	
	
	xmlString = ЗаписьXML.Закрыть();

	Возврат xmlString;
	
КонецФункции // ВНО_СериализоватьНастройкиКомпоновщика()

// Функция формирует строку сравнения структуры настроек.
// 
// Параметры:
//  СтруктураНастроек - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных.
//  
// Возвращаемое значение:
//   Строка.
// 
Функция ВНО_СформироватьСтрокуСравнения(СтруктураНастроек)

	СтрокаСравнения = "";
	Для каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		ПодстрокаСравнения = ВНО_СериализоватьНастройкиКомпоновщика(ЭлементСтруктуры);
		СтрокаСравнения = ?(СтрокаСравнения = "", ПодстрокаСравнения, СтрокаСравнения + Символы.ПС + ПодстрокаСравнения); 				
	КонецЦикла;

	Возврат СтрокаСравнения;
	
КонецФункции // ВНО_СформироватьСтрокуСравнения()

// Процедура модифицирует настройки компоновщика (ПараметрыДанных).
// 
// Параметры:
//  ТекущаяНастройкаКД   - НастройкиКомпоновкиДанных.
//  НастройкиПоУмолчанию - НастройкиКомпоновкиДанных.
// 
Процедура ВНО_ПреобразоватьНастройкиКомпоновщика_ПараметрыДанных(ТекущаяНастройкаКД, НастройкиПоУмолчанию)

	НаборЭлементов = ТекущаяНастройкаКД.ПараметрыДанных.Элементы;
	
	// Добавим необходимые параметры в пользовательские настройки.
	Для каждого ЭлементПараметр Из НастройкиПоУмолчанию.ПараметрыДанных.Элементы Цикл
	
		ПараметрСКД = НаборЭлементов.Найти(ЭлементПараметр.Параметр);
        Если ПараметрСКД = Неопределено Тогда
			ПараметрСКД = НаборЭлементов.Добавить();
			ЗаполнитьЗначенияСвойств(ПараметрСКД, ЭлементПараметр);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрСКД, ЭлементПараметр,,"Значение");
		КонецЕсли;			
		
	КонецЦикла; 
							
КонецПроцедуры // ВНО_ПреобразоватьНастройкиКомпоновщика_ПараметрыДанных()
            
// Процедура добаляет настройки из варианта к настройкам пользователей.
// 
// Параметры:
//  НастройкаПользователяКД  - НастройкиКомпоновщикаДанных.
//  НастройкиВарианта  		 - НастройкиКомпоновщикаДанных.
// 
Процедура ВНО_ДобавитьНастройкиВарианта(ТекущаяНастройкаКД, НастройкиВарианта)

	// Условное оформление.
	ИсточникУо  		 = НастройкиВарианта.УсловноеОформление.Элементы;
	КоллекцияУо 		 = ТекущаяНастройкаКД.УсловноеОформление.Элементы;
	
	Если КоллекцияУо.Количество() = 0 И ИсточникУо.Количество() <> 0 Тогда
	
		Для каждого ЭлементУо Из ИсточникУо Цикл   		
			
			// Новый элемент условного оофрмления.
			НовоеУо = КоллекцияУо.Добавить();
			
			// Оформление.
			ИсточникОформление = ЭлементУо.Оформление.Элементы;
			Для каждого ОформлениеИсточникаУо Из ИсточникОформление Цикл
				Если ОформлениеИсточникаУо.Использование Тогда				
					НовоеУо.Оформление.УстановитьЗначениеПараметра(ОформлениеИсточникаУо.Параметр, 
															   ОформлениеИсточникаУо.Значение);
				КонецЕсли;
			КонецЦикла; 
			  			
			// Условие.
			ИсточникУсловие = ЭлементУо.Отбор.Элементы;
			Для каждого УсловиеИсточникаУо Из ИсточникУсловие Цикл
				УсловиеУо = НовоеУо.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(УсловиеУо, УсловиеИсточникаУо);
			КонецЦикла;
			
			// Оформляемые поля.	
			ИсточникПоля = ЭлементУо.Поля.Элементы;
			Для каждого ПолеИсточникаУо Из ИсточникПоля Цикл
				ПолеУо 	 = НовоеУо.Поля.Элементы.Добавить();
				ЗаполнитьЗначенияСвойств(ПолеУо, ПолеИсточникаУо);
			КонецЦикла;
			
		КонецЦикла; 
	
	КонецЕсли;
	
	ТекПараметр = ТекущаяНастройкаКД.ПараметрыВывода.Элементы.Найти("Заголовок");
	Если ТекПараметр <> Неопределено И Не ЗначениеЗаполнено(ТекПараметр.Значение) Тогда
		ТекПараметр.Значение = НастройкиВарианта.ПараметрыВывода.Элементы.Найти("Заголовок").Значение;	
	КонецЕсли;

КонецПроцедуры // ВНО_ДобавитьНастройкиВарианта()

// Процедура записывает варианты и настройки отчетов в справочники БИТ для определенного отчета.
// 
// Параметры:
//  МассивИмен 				  - Массив.
//  ИмяТиповогоСпрСохНастроек - Строка.
// 
Процедура ВНО_ОбновитьВариантыНастройкиОтчетовИзТиповогоСправочникаДляОтчетов(МассивИмен, ИмяТиповогоСпрСохНастроек)
	
	// Массив настраиваемых объектов.
	МассивНастраиваемых = Новый Массив;
	Для каждого ИмяОтчета Из МассивИмен Цикл
		МассивНастраиваемых.Добавить("ОтчетОбъект." + СокрЛП(ИмяОтчета));
	КонецЦикла; 
		                                  
	ПериодЭтотГод = Новый СтандартныйПериод;
	ПериодЭтотГод.Вариант = ВариантСтандартногоПериода.ЭтотГод;
	
	ТипНстрОтчеты = Перечисления.бит_ТипыСохраненныхНастроек.Отчеты;
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	ГруппаВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	
	СоответствиеМакетовОформления = СформироватьСоответствиеМакетовОформленияКд();
	
	/////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ ВСПОМОГАТЕЛЬНЫХ ТАБЛИЦ ДЛЯ ПОИСКА ВАРИАНТОВ И НАСТРОЕК.
	
	ТипыВариантов = Перечисления.бит_ТипыВариантовОтчетов;
	ТипНстрОтчеты = Перечисления.бит_ТипыСохраненныхНастроек.Отчеты;
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	СтруктураТаблиц 		= ВНО_ПолучитьВспомогательныеТаблицы(ИмяТиповогоСпрСохНастроек, Истина);
	ТаблицаВариантов 		= СтруктураТаблиц.ТаблицаВариантов;
	// ТаблицаНастроек  		= СтруктураТаблиц.ТаблицаНастроек;
	ТаблицаСравнения 		= СтруктураТаблиц.ТаблицаСравнения;	
	ТаблицаПредопределенных = СтруктураТаблиц.ТаблицаПредопределенных;
		
	/////////////////////////////////////////////////
	// ПРЕДОПРЕДЕЛЕННЫЕ ВАРИАНТЫ ОТЧеТА.
	
	Для каждого ИмяОтчета Из МассивИмен Цикл
        				
		КлючОбъекта = "Отчет." + СокрЛП(ИмяОтчета);
		
		МетаданныеОтчета = Метаданные.Отчеты[ИмяОтчета];		
		МетаМакеты = МетаданныеОтчета.Макеты;
		
		ПроверятьПоСтаромуСКД = ?(МетаданныеОтчета.ОсновнаяСхемаКомпоновкиДанных = Неопределено
								, Истина
								, МетаМакеты.Найти(МетаданныеОтчета.ОсновнаяСхемаКомпоновкиДанных.Имя + "_Старая") <> Неопределено);
			
		Для каждого МетаМакет Из МетаМакеты Цикл
			
			// Рассматриваем только макеты типа СКД.
			Если МетаМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
				
				ИмяСКД = МетаМакет.Имя;
				
				Если (ПроверятьПоСтаромуСКД И Найти(ИмяСКД, "_Старая") = 0) Тогда
					// Обрабатываем только старые СКД.
					Продолжить;
				КонецЕсли;
								
				Если ИмяОтчета = "бит_ПлатежныйКалендарь" Тогда
					Если (Ложь И Найти(ИмяСКД, "ОсновнаяСхемаКомпоновкиДанных") <> 0) 
						ИЛИ (Не Ложь И Найти(ИмяСКД, "СКД_УппКа") <> 0) Тогда
						Продолжить;
					КонецЕсли;				
				КонецЕсли;
				
				Макет = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяСКД);
				
				// Предопределенные варианты.
				Для каждого ПредопределенныйВариант Из Макет.ВариантыНастроек Цикл
					     	
					НастройкиКомпоновщика = ПредопределенныйВариант.Настройки;
					СтруктураНастроек = НастройкиКомпоновщика.Структура;
					СтрокаСравнения = ВНО_СформироватьСтрокуСравнения(СтруктураНастроек);
					
					СтрокаТС = ТаблицаПредопределенных.Добавить(); 
					СтрокаТС.КлючОбъекта     		= КлючОбъекта;
					СтрокаТС.ИмяВарианта     		= ПредопределенныйВариант.Представление;
					СтрокаТС.СтрокаСравнения 		= СтрокаСравнения;
					СтрокаТС.КлючВарианта 			= ПредопределенныйВариант.Имя;
					
				КонецЦикла;
				
			КонецЕсли;	
		
		КонецЦикла;
	
	КонецЦикла;
	
	/////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ ТАБЛИЦЫ СРАВНЕНИЯ.

	// (для выявления вариантов и настроек из настроек КД).
	
	// Варианты из типового справочника  сохраненных настроек.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНастраиваемых", МассивНастраиваемых);
	Запрос.УстановитьПараметр("ТипНастройки"	   , Перечисления.ТипыНастроек.НастройкиОтчета);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СохрНастройки.Ссылка 					 						КАК Ссылка,	
	|	СохрНастройки.Ссылка.НастраиваемыйОбъект 						КАК КлючОбъекта,
	|	СохрНастройки.Ссылка.Наименование,
	|	ЕСТЬNULL(СохрНастройки.Ссылка.ХранилищеНастроек, Неопределено)  КАК ХранилищеНастроек,
	|	СохрНастройки.Ссылка.ИспользоватьПриОткрытии,
	|	СохрНастройки.Пользователь,
	|	СохрНастройки.ПравоИзменения
	|ИЗ
	|	Справочник." + ИмяТиповогоСпрСохНастроек + ".Пользователи КАК СохрНастройки
	|ГДЕ
	|	СохрНастройки.Ссылка.НастраиваемыйОбъект В(&МассивНастраиваемых)
	|	И СохрНастройки.Ссылка.ТипНастройки = &ТипНастройки
	|	И СохрНастройки.Ссылка.Предопределенный = ЛОЖЬ
	|ИТОГИ ПО
	|   КлючОбъекта,
	|	Ссылка
	|";
	Результат = Запрос.Выполнить();
		
	// ВыборкаКлючОбъекта.
	ВыборкаКлючОбъекта = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаКлючОбъекта.Следующий() Цикл
		
		// Счетчик вариантов.
		СчВар = 1;
		
		
		НастраиваемыйОбъект = ВыборкаКлючОбъекта.КлючОбъекта;
		ИмяОтчета   = СтрЗаменить(НастраиваемыйОбъект, "ОтчетОбъект.", "");
		КлючОбъекта = "Отчет." + СокрЛП(ИмяОтчета);
				
		// ВыборкаВариант.
		ВыборкаВариант = ВыборкаКлючОбъекта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаВариант.Следующий() Цикл
			
			ИмяВарианта  = "";
			ИмяНастройки = ВыборкаВариант.Наименование;
			
			Попытка
				ХранилищеНастроек = ВыборкаВариант.ХранилищеНастроек.Получить();			
			Исключение
			 	Продолжить;
			КонецПопытки; 			
			Если ХранилищеНастроек = Неопределено Тогда
				Продолжить;					
			КонецЕсли;
			НастройкиКомпоновщика = ХранилищеНастроек.НастройкиКомпоновщика;
			СтруктураНастроек = НастройкиКомпоновщика.Структура;
			СтрокаСравнения = ВНО_СформироватьСтрокуСравнения(СтруктураНастроек);
			
			// Установка имени и типа варианта.
			Отбор = Новый Структура("КлючОбъекта", КлючОбъекта);
			Отбор.Вставить("СтрокаСравнения", СтрокаСравнения);
			ПредопределенныйВариантНайден = Ложь;
			Если ИмяОтчета <> "бит_ПланФактныйАнализУниверсальный" Тогда
				НайденныеСтроки = ТаблицаПредопределенных.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИмяВарианта  = НайденныеСтроки[0].ИмяВарианта;
					ТипВарианта  = ТипыВариантов.Предопределенный;
					КлючВарианта = НайденныеСтроки[0].КлючВарианта;
					ПредопределенныйВариантНайден = Истина;
				КонецЕсли;
			КонецЕсли;     			
			Если Не ПредопределенныйВариантНайден Тогда
				НайденныеСтроки = ТаблицаСравнения.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИмяВарианта = НайденныеСтроки[0].ИмяВарианта;
					ТипВарианта = ТипыВариантов.Пользовательский;
					КлючВарианта = НайденныеСтроки[0].КлючВарианта;
				Иначе
					ИмяВарианта = "Пользовательский вариант " + СчВар;
					ТипВарианта = ТипыВариантов.Пользовательский;
					КлючВарианта = Строка(Новый УникальныйИдентификатор);
					СчВар = СчВар + 1;
				КонецЕсли; 				
			КонецЕсли;
			
			// Заполнение строк таблицы сравнения.
			СтрокаТС = ТаблицаСравнения.Добавить();
			СтрокаТС.КлючОбъекта 	 = КлючОбъекта;
			СтрокаТС.ИмяНастройки 	 = ИмяНастройки;
			СтрокаТС.ИмяВарианта     = ИмяВарианта;
			СтрокаТС.ТипВарианта     = ТипВарианта;
			СтрокаТС.КлючВарианта    = КлючВарианта;
			СтрокаТС.СсылкаНО   	 = ВыборкаВариант.Ссылка;
			СтрокаТС.СтрокаСравнения = СтрокаСравнения;
	        СтрокаТС.НастройкиКомпоновщика = НастройкиКомпоновщика;
			// Только для отчета бит_ПланФактныйАнализУниверсальный.
			Если ИмяОтчета = "бит_ПланФактныйАнализУниверсальный" Тогда
				СтруктураДопСвойств = Новый Структура;
				СтруктураДопСвойств.Вставить("ВидОтчета"		, ХранилищеНастроек.ВидОтчета);
				СтруктураДопСвойств.Вставить("СценарииСравнения", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ХранилищеНастроек.СценарииСравнения));
				СтрокаТС.ДополнительныеСвойства = СтруктураДопСвойств;			
			КонецЕсли;
			
			СписокПользователей = Новый СписокЗначений;
			// ВыборкаПользователей.
			ВыборкаПользователей = ВыборкаВариант.Выбрать();
			Пока ВыборкаПользователей.Следующий() Цикл
				СписокПользователей.Добавить(ВыборкаПользователей.Пользователь, , ВыборкаПользователей.ПравоИзменения);		
			КонецЦикла;
			СтрокаТС.СписокПользователей = СписокПользователей;
			
		КонецЦикла; // ВыборкаВариант.
		
	КонецЦикла; // ВыборкаКлючОбъекта.		
	
	// Сортировка таблицы по имени варианта.
	ТаблицаСравнения.Сортировать("КлючОбъекта, ИмяВарианта");
	
	
	/////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ ТАБЛИЦЫ ВАРИАНТОВ.


	ТекущийКлючОбъекта = "";
	ТекущееИмяВарианта = "";
	КоличествоВариантовВсего = 0;
	Для каждого СтрТабл Из ТаблицаСравнения Цикл
		
		// Добавим варианты в таблицу вариантов для дальнейшего поиска в справочнике бит_ВариантыОтчетов.
		Если ТекущийКлючОбъекта <> СтрТабл.КлючОбъекта
			ИЛИ ТекущееИмяВарианта <> СтрТабл.ИмяВарианта Тогда
			
			ТекущийКлючОбъекта = СтрТабл.КлючОбъекта;
			ТекущееИмяВарианта = СтрТабл.ИмяВарианта;
			КоличествоВариантовВсего = КоличествоВариантовВсего + 1;
			
			Если СтрТабл.ТипВарианта = ТипыВариантов.Пользовательский Тогда
				                          				
				// Получим доступ к стандартным настройкам СКД.
				ИмяОтчета   = СтрЗаменить(ТекущийКлючОбъекта, "Отчет.", "");
				Если ИмяОтчета = "бит_ПлатежныйКалендарь" Тогда
					ИмяСКД = "ОсновнаяСхемаКомпоновкиДанных";
				Иначе
					ИмяСКД = "ОсновнаяСхемаКомпоновкиДанных";
				КонецЕсли;
				СКД = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяСКД);
				НастройкиПоУмолчанию = СКД.НастройкиПоУмолчанию;
		
				// Текущая настройка компоновщика (вариант).
				ТекущаяНастройкаКД = СтрТабл.НастройкиКомпоновщика;
				// Преобразуем настройки компоновщика.
				Если ТекущаяНастройкаКД <> Неопределено Тогда
					ВНО_ПреобразоватьНастройкиКомпоновщика(ТекущаяНастройкаКД, НастройкиПоУмолчанию, СоответствиеМакетовОформления, ИмяОтчета, КлючОбъекта, СтрТабл.ИмяНастройки);																
				КонецЕсли;   
				
				СтрокаТаблицы = ТаблицаВариантов.Добавить();
										
				СтрокаТаблицы.КлючОбъекта  = ТекущийКлючОбъекта;
				СтрокаТаблицы.КлючВарианта = СтрТабл.КлючВарианта;
				СтрокаТаблицы.Наименование = СтрТабл.ИмяНастройки;
				СтрокаТаблицы.ТипВарианта  = ТипыВариантов.Пользовательский;
								
				СтрокаТаблицы.Настройки    = ТекущаяНастройкаКД;
				СтрокаТаблицы.СписокПользователей = СтрТабл.СписокПользователей;
				
				СтрокаТаблицы.ДополнительныеСвойства = СтрТабл.ДополнительныеСвойства;
				
			КонецЕсли;
			
		КонецЕсли;  
		
	КонецЦикла;
	

	/////////////////////////////////////////////////
	// ЗАПИСЬ ВАРИАНТОВ.

	Если ТаблицаВариантов.Количество() <> 0 Тогда
	  	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаВариантов", ТаблицаВариантов);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МетаТаблицаВариантов.КлючОбъекта,
		|	МетаТаблицаВариантов.КлючВарианта,
		|	МетаТаблицаВариантов.ТипВарианта,
		|   МетаТаблицаВариантов.Наименование
		|ПОМЕСТИТЬ ТабВариантов
		|ИЗ
		|	&ТаблицаВариантов КАК МетаТаблицаВариантов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабВариантов.КлючОбъекта,
		|	ТабВариантов.КлючВарианта,
		|	ТабВариантов.ТипВарианта,
		|	ТабВариантов.Наименование
		|ИЗ
		|	ТабВариантов КАК ТабВариантов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ВариантыОтчетов КАК бит_ВариантыОтчетов
		|		ПО ТабВариантов.КлючОбъекта = бит_ВариантыОтчетов.КлючОбъекта
		|		И ТабВариантов.Наименование = бит_ВариантыОтчетов.Наименование
		|ГДЕ
		|	бит_ВариантыОтчетов.Ссылка ЕСТЬ NULL
		|";
		Результат = Запрос.Выполнить(); 
					
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЭлемСправочника = Справочники.бит_ВариантыОтчетов.СоздатьЭлемент();
			// Заполнение реквизитов: Наименование, КлючОбъекта, КлючВарианта, ТипВарианта.
			ЗаполнитьЗначенияСвойств(ЭлемСправочника, Выборка);
			ЭлемСправочника.Ответственный = ТекущийПользователь;
			
			// Поиск настроек варианта.
			КлючОбъекта  		 = Выборка.КлючОбъекта;
			КлючВарианта 		 = Выборка.КлючВарианта;
			НаименованиеВарианта = Выборка.Наименование;
			ОтборСтрок = Новый Структура("КлючОбъекта, КлючВарианта", 
											КлючОбъекта, 
											КлючВарианта);
			МассивСтрок = ТаблицаВариантов.НайтиСтроки(ОтборСтрок);
			Если МассивСтрок.Количество() > 0 Тогда
				
				// Настройки компоновки данных для варианта.
				НастройкиВарианта = МассивСтрок[0].Настройки;
				// Дополнительные настройки.
				Для каждого ДопСвойство Из МассивСтрок[0].ДополнительныеСвойства Цикл
					НастройкиВарианта.ДополнительныеСвойства.Вставить(ДопСвойство.Ключ, ДопСвойство.Значение);
				КонецЦикла;				
				
				// Запись варианта в справочник.
				ЭлемСправочника.ХранилищеВарианта = Новый ХранилищеЗначения(НастройкиВарианта);
				
			КонецЕсли;
			
			// Запись элемента справочника бит_ВариантыОтчетов.
			бит_ОбщегоНазначения.ЗаписатьСправочник(ЭлемСправочника, , "Ошибки");
			
			// Запись настроек доступности вариантов отчетов в регистр сведений.
			Если МассивСтрок.Количество() > 0 Тогда
					
				СписокПользователей = МассивСтрок[0].СписокПользователей;
				
				// Запись настроек доступности вариантов отчетов в регистр сведений.
				бит_ОтчетыСервер.ЗаписьНабораНастроекДоступности(ЭлемСправочника.Ссылка, СписокПользователей);
							
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	

	/////////////////////////////////////////////////
	// ЗАПИСЬ НАСТРОЕК.


	Если КоличествоВариантовВсего = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСравнения", ТаблицаСравнения);
	Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета);  
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаСравнения.КлючОбъекта,
	|	ТаблицаСравнения.СсылкаНО КАК НастраиваемыйОбъект,
	|	ТаблицаСравнения.ИмяНастройки,
	|	ТаблицаСравнения.КлючВарианта
	|ПОМЕСТИТЬ ТаблСравнения
	|ИЗ
	|	&ТаблицаСравнения КАК ТаблицаСравнения
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблСравнения.КлючОбъекта,
	|	ТаблСравнения.НастраиваемыйОбъект,
	|	ТаблСравнения.ИмяНастройки,
	|	ТаблСравнения.КлючВарианта,
	|	СохраненныеНП.Пользователь,
	|	СохраненныеНП.Ссылка.ИспользоватьПриОткрытии,
	|	ЕСТЬNULL(СохраненныеНП.Ссылка.ХранилищеНастроек, Неопределено) КАК ХранилищеНастроек
	|ИЗ
	|	ТаблСравнения КАК ТаблСравнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяТиповогоСпрСохНастроек + ".Пользователи КАК СохраненныеНП
	|		ПО ТаблСравнения.НастраиваемыйОбъект = СохраненныеНП.Ссылка.НастраиваемыйОбъект
	|		И СохраненныеНП.Ссылка.ТипНастройки = &ТипНастройки
	|";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КлючОбъекта 			= Выборка.КлючОбъекта;
		НаименованиеНастройки  	= Выборка.ИмяНастройки;
		ПользовательНастройки 	= Выборка.Пользователь; 			
	    ИспользоватьПриОткрытии = Выборка.ИспользоватьПриОткрытии;
		
		НастройкиВарианта 	  = Неопределено;
		ЕстьСтандартныйПериод = Ложь;
		
		// ----------------------------------------------------------------------
		// Получим доступ к стандартным настройкам СКД.
		ИмяОтчета   = СтрЗаменить(КлючОбъекта, "Отчет.", "");
		Если ИмяОтчета = "бит_ПлатежныйКалендарь" Тогда
			ИмяСКД = "ОсновнаяСхемаКомпоновкиДанных";
		Иначе
			ИмяСКД = "ОсновнаяСхемаКомпоновкиДанных";
		КонецЕсли;
		СКД = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяСКД);
		
		НастройкиПоУмолчанию = СКД.НастройкиПоУмолчанию;
		АдресХранилищаСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
		
		// Получим настройки варианта.
		ОтборСтрок = Новый Структура("КлючОбъекта, СсылкаНО", 
										Выборка.КлючОбъекта, 
										Выборка.НастраиваемыйОбъект);									
		МассивСтрок = ТаблицаСравнения.НайтиСтроки(ОтборСтрок);
		Если МассивСтрок.Количество() > 0 Тогда  			
			// Настройки компоновки данных для варианта.
			НастройкиВарианта = МассивСтрок[0].НастройкиКомпоновщика;  												
		КонецЕсли;
		
		// ----------------------------------------------------------------------
	    // Текущая настройка компоновщика (настройка).
		ХранилищеНастроек = Выборка.ХранилищеНастроек;
		Если ХранилищеНастроек = Неопределено Тогда
			
			Если НастройкиВарианта = Неопределено Тогда
				Продолжить;			
			КонецЕсли;
			НастройкаПользователяКД = НастройкиВарианта;
			
		Иначе
			
			СоответствиеНастроек = ХранилищеНастроек.Получить();
			ЗначенияНастроекПанелиПользователя = СоответствиеНастроек["ЗначенияНастроекПанелиПользователя"];
			НастройкаПользователяКД = ЗначенияНастроекПанелиПользователя.НастройкиКомпоновщика;
			ЕстьСтандартныйПериод = ЗначениеЗаполнено(ЗначенияНастроекПанелиПользователя.СтандартныйПериод);
			
		КонецЕсли;
	               
		// ----------------------------------------------------------------------
		// Преобразуем настройки компоновщика.
		Если НастройкаПользователяКД <> Неопределено Тогда
			ВНО_ПреобразоватьНастройкиКомпоновщика(НастройкаПользователяКД, НастройкиПоУмолчанию, СоответствиеМакетовОформления);
			Если НастройкиВарианта <> Неопределено Тогда
				ВНО_ДобавитьНастройкиВарианта(НастройкаПользователяКД, НастройкиВарианта);
			КонецЕсли;
		КонецЕсли;
		// Стандартный период.
		Если ЕстьСтандартныйПериод Тогда
			ПараметрСКД = НастройкаПользователяКД.ПараметрыДанных.Элементы.Найти("Период");
            Если ПараметрСКД <> Неопределено Тогда
				ПараметрСКД.Значение = ЗначенияНастроекПанелиПользователя.СтандартныйПериод;				
			КонецЕсли;
		КонецЕсли;  

		// ----------------------------------------------------------------------
		// Инициализация компоновщика настроек для формирования пользовательских настроек.
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД);
		
		КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроекКД.Инициализировать(Неопределено);
		КомпоновщикНастроекКД.Инициализировать(ИсточникНастроек);
		КомпоновщикНастроекКД.ЗагрузитьНастройки(НастройкаПользователяКД);
		
		// Перезаполним выбранные поля компоновщика настроек.
		КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы.Количество();
		
		// Установим дополнительное свойство "КлючНастройки".
		ПользовательскиеНастройки = КомпоновщикНастроекКД.ПользовательскиеНастройки;
		
		КлючНастройки = Строка(Новый УникальныйИдентификатор);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КлючНастройки", КлючНастройки);
				
		КлючОбъектаНастройки = КлючОбъекта + "/" + Выборка.КлючВарианта;
		
		// ----------------------------------------------------------------------
		// Создание элемента справочника бит_СохраненныеНастройки.  			
		ЭлемСправочника = Справочники.бит_СохраненныеНастройки.СоздатьЭлемент();
		ЭлемСправочника.Наименование 		= НаименованиеНастройки;
		ЭлемСправочника.КлючОбъекта 		= КлючОбъектаНастройки;
		ЭлемСправочника.КлючНастройки 		= КлючНастройки;
		ЭлемСправочника.ТипНастройки 		= ТипНстрОтчеты;
		ЭлемСправочника.НастраиваемыйОбъект = КлючОбъектаНастройки;
		ЭлемСправочника.Ответственный 		= ПользовательНастройки;
				
		// Настройки компоновки данных для варианта.
		ЭлемСправочника.ХранилищеНастроек = Новый ХранилищеЗначения(ПользовательскиеНастройки);
				
		бит_ОбщегоНазначения.ЗаписатьСправочник(ЭлемСправочника, , "Ошибки");
		
		// ----------------------------------------------------------------------
		// Запись настроек доступности вариантов отчетов в регистр сведений.
		бит_ОтчетыСервер.ЗаписьНабораНастроекДоступности(ЭлемСправочника.Ссылка, ПользовательНастройки);
	
	КонецЦикла;
						
КонецПроцедуры // ВНО_ОбновитьВариантыНастройкиОтчетовИзТиповогоСправочникаДляОтчетов()

// Процедура конвертирует непредопределенные варианты отчета 
// бит_ПланФактныйАнализПоБюджету_ОстаткиПоСчетам.
// 
// Параметры:
//  Выборка из результата запроса.
// 
Процедура КНВ_КонвертироватьНеПредопределенныйВариантОтчета_бит_ПланФактныйАнализПоБюджету_ОстаткиПоСчетам(Выборка)
	
	ИмяОтчета = СтрЗаменить(Выборка.КлючОбъекта, "Отчет.", "");
	ИмяСКД    = "ОсновнаяСхемаКомпоновкиДанных";
	
	// Текущая настройка компоновщика (вариант).
	ТекущаяНастройкаКД = Выборка.ХранилищеВарианта.Получить();
	
	// Настройка СКД по умолчанию.
	МакетСКД = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяСКД);
	НастройкиПоУмолчанию = МакетСКД.НастройкиПоУмолчанию;
	
	Если ТекущаяНастройкаКД <> Неопределено 
		И ТекущаяНастройкаКД.ПараметрыДанных.Элементы.Количество() <> НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Количество() Тогда
		
		// Преобразуем настройки компоновщика.	
		ВНО_ПреобразоватьНастройкиКомпоновщика_ПараметрыДанных(ТекущаяНастройкаКД, НастройкиПоУмолчанию);
	                                      
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ХранилищеВарианта = Новый ХранилищеЗначения(ТекущаяНастройкаКД);

		// Запись элемента справочника бит_ВариантыОтчетов.
		бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОбъект, , "Ошибки");
		
	КонецЕсли;
	           
КонецПроцедуры // КНВ_КонвертироватьНеПредопределенныеВариантыОтчета_бит_ПланФактныйАнализПоБюджету_ОстаткиПоСчетам()

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-02-16 (#3591)
Функция СокрЛПСКД(Строка) Экспорт
    Возврат СокрЛП(Строка);
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-02-16 (#3591)

#КонецОбласти
