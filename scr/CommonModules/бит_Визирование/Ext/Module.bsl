
////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры/функции механизма визирования.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция получает список объектов системы, на которые распространяется механизм визирования.
// 
// Возвращаемое значение:
//  СписокЗначений
// 
Функция ВизируемыеОбъектыСистемы() Экспорт

	СписокОбъектовСистемы = Новый СписокЗначений;
	
	МассивТипов = Метаданные.ОпределяемыеТипы.бит_ОбъектыВизирования.Тип.Типы();
	
	Для каждого ТекущийТип Из МассивТипов Цикл
		
		МетаОбъект = Метаданные.НайтиПоТипу(ТекущийТип);
		
		Если МетаОбъект <> Неопределено Тогда
			
			ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
			Если ЗначениеЗаполнено(ОбъектСистемы) Тогда			
				СписокОбъектовСистемы.Добавить(ОбъектСистемы);			
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; // По массиву типов
	
	Возврат СписокОбъектовСистемы;
	
КонецФункции // ПолучитьСписокВизируемыхОбъектов()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//  Добавляет визу в таб. часть при условии, что таб. часть еще не содержит такой визы.
// 
// Параметры:
//  Выборка  - ВыборкаИзРезультатаЗапроса.
//  ТабЧастьВизы - Табличная часть "Визы".
// 
Процедура ДобавитьВизу(НаборЗаписей, ТекущийОбъект, СтруктураПараметров)  Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("Виза") Тогда	
		Возврат;	
	КонецЕсли; 
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Виза   = СтруктураПараметров.Виза;
	НоваяЗапись.Объект = ТекущийОбъект;
	НоваяЗапись.ИД     = Строка(Новый УникальныйИдентификатор);	
	
	Если СтруктураПараметров.Свойство("Алгоритм") Тогда		
		НоваяЗапись.Алгоритм = СтруктураПараметров.Алгоритм;		
	КонецЕсли;
	
	флЗаполнитьКрайнююДату = Ложь;
	Если СтруктураПараметров.Свойство("ТочкаАлгоритма") Тогда
		НоваяЗапись.ТочкаАлгоритма   = СтруктураПараметров.ТочкаАлгоритма;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-01 (#2873)
		//Устанавливаем для доступных этапов
		//НоваяЗапись.ВремяНаУстановку = СтруктураПараметров.ВремяНаУстановку;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-01 (#2873)
		// Заполняем крайнюю дату только для свободных точек или точек привязанных к точке старта.
		КоличествоВходящих = СтруктураПараметров.ТочкаАлгоритма.ВходящиеТочки.Количество();
		
		Если КоличествоВходящих = 0 Тогда
			флЗаполнитьКрайнююДату   = Истина;
			НоваяЗапись.АктивнаяВиза = Истина;
		Иначе
			ДопПараметрыПроверкиУсловий = Новый Структура;
			ДопПараметрыПроверкиУсловий.Вставить("ТекущийОбъект", ТекущийОбъект);
			ДопПараметрыПроверкиУсловий.Вставить("Визы"         , НаборЗаписей);
			ДопПараметрыПроверкиУсловий.Вставить("Алгоритм"     , СтруктураПараметров.Алгоритм);
	
			ЭтоПервоеДействие = бит_уп_Сервер.ВышеНетТочекДействия(СтруктураПараметров.ТочкаАлгоритма, ДопПараметрыПроверкиУсловий);			
			Если ЭтоПервоеДействие Тогда			
				флЗаполнитьКрайнююДату   = Истина;
				НоваяЗапись.АктивнаяВиза = Истина;
			КонецЕсли;
		КонецЕсли; 
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-04 (#3997) 
		Если (СтруктураПараметров.Виза = ПредопределенноеЗначение("Справочник.бит_Визы.ок_ФД")
			ИЛИ СтруктураПараметров.Виза = ПредопределенноеЗначение("Справочник.бит_Визы.ок_Инициатор"))
				И ЗначениеЗаполнено(СтруктураПараметров.ТочкаАлгоритма.ПользовательскоеДействие) Тогда
			НоваяЗапись.АктивнаяВиза = Истина;
			флЗаполнитьКрайнююДату   = Истина;
			НоваяЗапись.ВремяНаУстановку = СтруктураПараметров.ТочкаАлгоритма.ПользовательскоеДействие.ВремяНаУстановку;	
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-04 (#3997) 
		

	Иначе
		// Для виз не входящих в алгоритм крайнюю дату заполняем сразу.
		НоваяЗапись.ВремяНаУстановку = СтруктураПараметров.ВремяНаУстановку;
		флЗаполнитьКрайнююДату   = Истина;
		НоваяЗапись.АктивнаяВиза = Истина;
	КонецЕсли; 
	
	Если флЗаполнитьКрайнююДату И ЗначениеЗаполнено(НоваяЗапись.ВремяНаУстановку) Тогда
		ДатаКрайняя = ТекущаяДата() + НоваяЗапись.ВремяНаУстановку*60; 
		НоваяЗапись.ДатаКрайняя = ПолучитьКрайнююДату(ТекущийОбъект, ТекущаяДата(), ДатаКрайняя);
	КонецЕсли; 
	
	
	Если СтруктураПараметров.Свойство("Статус") Тогда		
		НоваяЗапись.Статус = СтруктураПараметров.Статус;		
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("КодСортировки") Тогда	
		НоваяЗапись.КодСортировки = СтруктураПараметров.КодСортировки;		
	Иначе		
		// По умолчанию визы сортируются в порядке добавления.
		НоваяЗапись.КодСортировки = НаборЗаписей.Количество(); 	
	КонецЕсли; 
	
	Если НоваяЗапись.Виза.ВидСвязи = Перечисления.бит_ВидыСвязиВиз.ЦФО  Тогда
		НоваяЗапись.ФизическоеЛицо  = СтруктураПараметров.ОбъектСвязи;
		НоваяЗапись.Должность       = "";
	Иначе 
		НоваяЗапись.ФизическоеЛицо  = СтруктураПараметров.ОбъектСвязи;
		НоваяЗапись.Должность       = ?(бит_ОбщегоНазначения.ЭтоСемействоERP()
										, ""
										, ПолучитьДолжностиФизЛица(СтруктураПараметров.ОбъектСвязи
																	, СтруктураПараметров.ДатаЗаполнения
																	, СтруктураПараметров.СтруктурноеПодразделение));	 																
	КонецЕсли; 
	
	//+СБ Пискунова #2691 22.12.2016
	Если СтруктураПараметров.Свойство("ДобавленаВручную") Тогда
		НоваяЗапись.ДобавленаВручную = СтруктураПараметров.ДобавленаВручную;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("Решение") Тогда
		НоваяЗапись.Решение = СтруктураПараметров.Решение;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("КодСортировки") Тогда
		НоваяЗапись.КодСортировки = СтруктураПараметров.КодСортировки;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("Пользователь") Тогда
		НоваяЗапись.Пользователь = СтруктураПараметров.Пользователь;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ВремяНаУстановку") Тогда
		НоваяЗапись.ВремяНаУстановку = СтруктураПараметров.ВремяНаУстановку;
	КонецЕсли;
	Если  ЗначениеЗаполнено(НоваяЗапись.ВремяНаУстановку) Тогда
		ДатаКрайняя = ТекущаяДата() + НоваяЗапись.ВремяНаУстановку*60;
		НоваяЗапись.ДатаКрайняя = ПолучитьКрайнююДату(ТекущийОбъект, ТекущаяДата(), ДатаКрайняя);
	КонецЕсли;
	//+СБ Пискунова #2691 22.12.2016
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-23 (#3231)
	Если СтруктураПараметров.Свойство("РасшифровкаУсловияОпределенияВизы") Тогда 
		НоваяЗапись.ок_РасшифровкаУсловияОпределенияВизы = СтруктураПараметров.РасшифровкаУсловияОпределенияВизы;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-23 (#3231)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-03 (#3393)
	Если СтруктураПараметров.Свойство("ОК_ВидРасхода") Тогда 
		НоваяЗапись.ОК_ВидРасхода = СтруктураПараметров.ОК_ВидРасхода;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-03 (#3393)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-18 (#3997)
	Если ТипЗнч(ТекущийОбъект) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") 
		И (НЕ СтруктураПараметров.Свойство("ДобавленаВручную") 
			ИЛИ НЕ СтруктураПараметров.ДобавленаВручную) Тогда
			
		Запрос = Новый Запрос;
		Если СтруктураПараметров.Виза = ПредопределенноеЗначение("Справочник.бит_Визы.ок_Инициатор") Тогда
		
			Запрос.Текст = 
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-19 (#4054)
			//"ВЫБРАТЬ
			//|	ЭлектронныйДокументВходящийок_Инициаторы.Инициатор КАК ФизическоеЛицо,
			//|	ЭлектронныйДокументВходящийок_Инициаторы.Инициатор.Пользователь КАК Пользователь
			//|ИЗ
			//|	Документ.ЭлектронныйДокументВходящий.ок_Инициаторы КАК ЭлектронныйДокументВходящийок_Инициаторы
			//|ГДЕ
			//|	ЭлектронныйДокументВходящийок_Инициаторы.Ссылка = &Ссылка"; 
			"ВЫБРАТЬ
			|	ЭлектронныйДокументВходящийок_Инициаторы.Инициатор КАК ФизическоеЛицо,
			|	ЭлектронныйДокументВходящийок_Инициаторы.Инициатор.Пользователь КАК Пользователь,
			|	ЭлектронныйДокументВходящийок_Инициаторы.ИД КАК ИД
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящий.ок_Инициаторы КАК ЭлектронныйДокументВходящийок_Инициаторы
			|ГДЕ
			|	ЭлектронныйДокументВходящийок_Инициаторы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭлектронныйДокументВходящийок_Инициаторы.НомерСтроки";
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-19 (#4054)
			
		ИначеЕсли СтруктураПараметров.Виза = ПредопределенноеЗначение("Справочник.бит_Визы.ок_ФД") Тогда 
			
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЭлектронныйДокументВходящий.ок_ФункциональныйДиректор КАК ФизическоеЛицо,
			|	ЭлектронныйДокументВходящий.ок_ФункциональныйДиректор.Пользователь КАК Пользователь
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
			|ГДЕ
			|	ЭлектронныйДокументВходящий.Ссылка = &Ссылка";
						
			ШаблонСообщения = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Шаблон согласования входящего электронного документа ФД");	
			Если Не ЗначениеЗаполнено(ШаблонСообщения) Тогда
				ИнформацияОбОшибке = "Не заполнена настройка: Согласование по почте/Шаблон согласования входящего электронного документа ФД"; 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке);
				ЗаписьЖурналаРегистрации("бит_Визирование", УровеньЖурналаРегистрации.Ошибка, ,ТекущийОбъект ,ИнформацияОбОшибке);
			КонецЕсли;
			
			СообщениеОбОшибке = "";
			
			Результат = ок_ОбменСКонтрагентамиВнутренний.ОтправитьПисьмоПоВходящемуЭлектронномуДокументу(ТекущийОбъект,СтруктураПараметров.Виза,,СообщениеОбОшибке,,ШаблонСообщения);
						 
			Если НЕ Результат Тогда	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
				ЗаписьЖурналаРегистрации("бит_Визирование", УровеньЖурналаРегистрации.Ошибка,,ТекущийОбъект, СообщениеОбОшибке);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект);
			Выборка = Запрос.Выполнить().Выбрать();	
			
			ПерваяСтрока = Истина;	
			Пока Выборка.Следующий() Цикл		
				
				Если ПерваяСтрока Тогда
					РабочаяЗапись = НоваяЗапись;													
					ПерваяСтрока = Ложь;
				Иначе
					
					РабочаяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(РабочаяЗапись,НоваяЗапись);
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-19 (#4054)
					//РабочаяЗапись.ИД = Строка(Новый УникальныйИдентификатор);				
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-19 (#4054) 								
					РабочаяЗапись.КодСортировки = НаборЗаписей.Количество();	
				КонецЕсли; 																													
				
				РабочаяЗапись.ФизическоеЛицо  = Выборка.ФизическоеЛицо;
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-10 (#4054)
				//РабочаяЗапись.Пользователь 	= Выборка.Пользователь;
				Если СтруктураПараметров.Виза = ПредопределенноеЗначение("Справочник.бит_Визы.ок_Инициатор") Тогда
					РабочаяЗапись.ИД = Выборка.ИД;	
				КонецЕсли;	
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-10 (#4054) 
				РабочаяЗапись.Должность       = ?(бит_ОбщегоНазначения.ЭтоСемействоERP()
											, ""
											, ПолучитьДолжностиФизЛица(Выборка.ФизическоеЛицо
																		, СтруктураПараметров.ДатаЗаполнения
																		, СтруктураПараметров.СтруктурноеПодразделение));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-18 (#3997)
	
КонецПроцедуры

// Функция получает должности сотрудника, соответствующего данному  физическому лицу.
// 
// Параметры:
//  ФизЛицо  - СправочникСсылка.ФизическиеЛица.
//  ДатаЗапроса - Дата.
//  Организация - СправочникСсылка.Организации.
// 
// Возвращаемое значение:
//   ТекстДолжности   - Строка - Текстовое представление должностей физ. лица.
// 
Функция ПолучитьДолжностиФизЛица(ФизЛицо,ДатаЗапроса,Организация = Неопределено) Экспорт

	ТекстДолжности = "";
	
	ЕстьФильтрПоОрганизации = ?(ТипЗнч(Организация)=Тип("СправочникСсылка.Организации"),Истина,Ложь);	
	
	Если НЕ Метаданные.РегистрыСведений.Найти("РаботникиОрганизаций") = Неопределено Тогда
		// В УПП и КА данные регистр сохранился.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизацийСрезПоследних.Должность
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|			&ДатаЗапроса,
			|			Сотрудник.Физлицо = &ФизЛицо
			|				И ВЫБОР
			|					КОГДА &ЕстьФильтрПоОрганизации
			|						ТОГДА Организация = &Организация
			|					ИНАЧЕ ИСТИНА
			|				КОНЕЦ) КАК РаботникиОрганизацийСрезПоследних";
		
		Запрос.УстановитьПараметр("ФизЛицо",	 ФизЛицо);
		Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
		
		Запрос.УстановитьПараметр("Организация",			 Организация);
		Запрос.УстановитьПараметр("ЕстьФильтрПоОрганизации", ЕстьФильтрПоОрганизации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстДолжности = ТекстДолжности + ?(ПустаяСтрока(ТекстДолжности), "", "; ") + Выборка.Должность;
		КонецЦикла;
		
	ИначеЕсли бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		// В БП 3.0 определяем должность по справочнику сотрудники.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		Запрос.УстановитьПараметр("Организация",			 Организация);
		Запрос.УстановитьПараметр("ЕстьФильтрПоОрганизации", ЕстьФильтрПоОрганизации);
				
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК Должность
		               |ИЗ
		               |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		               |ГДЕ
		               |	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = &ФизЛицо
		               |	И ВЫБОР
		               |			КОГДА &ЕстьФильтрПоОрганизации = ИСТИНА
		               |				ТОГДА ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = &Организация
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ";
					   
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстДолжности = ТекстДолжности + ?(ПустаяСтрока(ТекстДолжности), "", "; ") + Выборка.Должность;
		КонецЦикла;
					   
	ИначеЕсли бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда	
		// в УТ нет должностей
	КонецЕсли; 
	
	Возврат ТекстДолжности;
	 
КонецФункции

#Область ФункцииВызываемыеВПользовательскихУсловиях

// Проверяет получены ли все утверждающие визы по данному объекту для перехода в данный статус. 
// Если статус не заполнен проверяется заполнение всех утверждающих виз. 
// Может вызываться при вычислении пользовательских условий.
// 
// Параметры:
//  ТекущийОбъект  - ДокументСсылка.
//  Статус         - СправочникСсылка.СтатусыОбъектов.
// 
// Возвращаемое значение:
//   флВизыПолучены   - Булево.
// 
Функция ВизыПолучены(ТекущийОбъект, Статус=Неопределено, ВизыПолучены = Ложь) Экспорт

	флРезультат = ВизыПолучены;
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект",ТекущийОбъект.Ссылка);
	НаборВизы = ПрочитатьНаборВиз(Отбор);
	
	флЕстьВизы      = Ложь;
	флВизыПолучены = Истина;
	Для Каждого СтрокаВизы Из НаборВизы Цикл
		// Если указан статус - проверяем заполнение виз на конкретный статус.
		Если ЗначениеЗаполнено(Статус) И СтрокаВизы.Статус <> Статус Тогда
			Продолжить;
		КонецЕсли; 
		
		// Если вид визы "Утверждающая", тогда устанавливаем флаг "флВизыПолучены" 
		// в зависимости от заполненности "Пользователя".
		Если СтрокаВизы.Виза.Вид = Перечисления.бит_ВидыВиз.Утверждающая Тогда
			флЕстьВизы = Истина;
			Если НЕ СтрокаВизы.Решение = Справочники.бит_ВидыРешенийСогласования.Согласовано Тогда
				флВизыПолучены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Если флЕстьВизы Тогда
		 флРезультат = ФлВизыПолучены;
	КонецЕсли; 
	
	Возврат флРезультат;
	
КонецФункции

// Функция определяет есть ли решение определенного вида.
// Может вызываться при вычислении пользовательских условий.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект,ДокументСсылка.
//  НаборВизы      - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы,ТаблицаЗначений.
//  Решение        - СправочникСсылка.бит_ВидыРешенийСогласования.
// 
// Возвращаемое значение:
//   флРешениеПринято   - Булево.
// 
Функция ПринятоРешение(ТекущийОбъект,НаборВизы = Неопределено,Решение) Экспорт

	флРешениеПринято = Ложь;
	
	Если НаборВизы = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",ТекущийОбъект);
		НаборВизы = ПрочитатьНаборВиз(Отбор);
	КонецЕсли; 

	Для Каждого Запись Из НаборВизы Цикл
		Если Запись.Решение = Решение Тогда
			флРешениеПринято = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат флРешениеПринято;
	
КонецФункции

// Функция определяет, какое решение было принято по визе.
// Может вызываться при вычислении пользовательских условий.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект,ДокументСсылка.
//  НаборВизы      - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы,ТаблицаЗначений.
//  Виза           - СправочникСсылка.бит_Визы.
// 
// Возвращаемое значение:
//  Решение        - СправочникСсылка.бит_ВидыРешенийСогласования.
// 
Функция ПринятоРешениеПоВизе(ТекущийОбъект,НаборВизы = Неопределено,Виза) Экспорт

	Решение = Справочники.бит_ВидыРешенийСогласования.ПустаяСсылка();
	
	Если НаборВизы = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",ТекущийОбъект);
		НаборВизы = ПрочитатьНаборВиз(Отбор);
	КонецЕсли; 
	
	Для Каждого Запись Из НаборВизы Цикл
		Если Запись.Виза = Виза Тогда
			Решение = Запись.Решение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Решение;
	
КонецФункции

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-18 (#3997) 
// Проверяет все ли решения по визе совпадают с указанным.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект,ДокументСсылка.
//  Виза           - СправочникСсылка.бит_Визы.
//  Решение        - СправочникСсылка.бит_ВидыРешенийСогласования.
//  НаборВизы      - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы,ТаблицаЗначений.
// 
// Возвращаемое значение:
//  флПринятоРешение - Булево.
// 
Функция ПринятоВыбранноеРешениеПоВизе(ТекущийОбъект, Виза, Решение, НаборВизы = Неопределено)  Экспорт
	
	Если НаборВизы = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",ТекущийОбъект.Ссылка);
		Отбор.Вставить("Виза",Виза);
		НаборВизы = ПрочитатьНаборВиз(Отбор);
	КонецЕсли; 
	
	Если НаборВизы.Количество() = 0 Тогда
		Возврат	Ложь;
	КонецЕсли;
	
	флПринятоРешение = Истина;
  	Для Каждого СтрокаВизы Из НаборВизы Цикл
	 	Если НЕ СтрокаВизы.Решение = Решение Тогда
			флПринятоРешение = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат флПринятоРешение;
	
КонецФункции 

// Проверяет все ли решения по визе совпадают с указанным.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект,ДокументСсылка.
//  Виза           - СправочникСсылка.бит_Визы.
//  Решение        - СправочникСсылка.бит_ВидыРешенийСогласования.
//  НаборВизы      - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы,ТаблицаЗначений.
// 
// Возвращаемое значение:
//  флПринятоРешение - Булево.
// 
Функция ВсеРешенияПринятыПоВизе(ТекущийОбъект, Виза, НаборВизы = Неопределено)  Экспорт
	
	Если НаборВизы = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",ТекущийОбъект.Ссылка);
		Отбор.Вставить("Виза",Виза);
		НаборВизы = ПрочитатьНаборВиз(Отбор);
	КонецЕсли; 
	
	Если НаборВизы.Количество() = 0 Тогда
		Возврат	Ложь;
	КонецЕсли;
	
	ВсеРешенияПриняты = Истина;
  	Для Каждого СтрокаВизы Из НаборВизы Цикл
	 	Если НЕ ЗначениеЗаполнено(СтрокаВизы.Решение) Тогда
			ВсеРешенияПриняты = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ВсеРешенияПриняты;
	
КонецФункции
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-18 (#3997) 

// Проверяет все ли решения по вышестоящим визам совпадают с указанным.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект,ДокументСсылка.
//  Виза           - СправочникСсылка.бит_Визы.
//  Решение        - СправочникСсылка.бит_ВидыРешенийСогласования.
//  НаборВизы      - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы,ТаблицаЗначений.
// 
// Возвращаемое значение:
//  флПринятоРешение - Булево.
// 
Функция ПринятоРешениеПоВышестоящимВизам(ТекущийОбъект, Виза, Решение, НаборВизы = Неопределено)  Экспорт

	флПринятоРешение = Ложь;
	
	Если НаборВизы = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",ТекущийОбъект);
		НаборВизы = ПрочитатьНаборВиз(Отбор);
	КонецЕсли; 
	
	ТабВизы = НаборВизы.Выгрузить();
	СтрОтбор = Новый Структура("Виза", Виза);
	МассивСтрок = ТабВизы.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		 МаксКод = МассивСтрок[0].КодСортировки;
		 ТабВизы.Сортировать("КодСортировки");
	     флПринятоРешение = Истина;		 
		 Для Каждого СтрокаВизы Из ТабВизы Цикл
		 	Если СтрокаВизы.КодСортировки < МаксКод Тогда
				Если НЕ СтрокаВизы.Решение = Решение Тогда
					флПринятоРешение = Ложь;
					Прервать;
				КонецЕсли; 
			Иначе
				Прервать;
			КонецЕсли; 
		 КонецЦикла;  // ТабВизы.
	КонецЕсли; // Нашли строку с визой.

	Возврат флПринятоРешение;
	
КонецФункции

// Проверяет приняты ли хоть какие-то решения по вышестоящим визам.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект,ДокументСсылка - документ.
//  Виза           - СправочникСсылка.бит_Визы - виза.
//  Решение        - СправочникСсылка.бит_ВидыРешенийСогласования.
// 
// Возвращаемое значение:
//  флПринятоРешение - Булево.
// 
Функция ПринятыРешенияПоВышестоящимВизам(ТекущийОбъект, Виза, НаборВизы = Неопределено)  Экспорт

	флПринятоРешение = Ложь;
	
	Если НаборВизы = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",ТекущийОбъект);
		НаборВизы = ПрочитатьНаборВиз(Отбор);
	КонецЕсли; 
	
	ТабВизы = НаборВизы.Выгрузить();
	СтрОтбор = Новый Структура("Виза", Виза);
	МассивСтрок = ТабВизы.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		 МаксКод = МассивСтрок[0].КодСортировки;
		 ТабВизы.Сортировать("КодСортировки");
	     флПринятоРешение = Истина;		 
		 Для Каждого СтрокаВизы Из ТабВизы Цикл
		 	Если СтрокаВизы.КодСортировки < МаксКод Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаВизы.Решение) Тогда
					флПринятоРешение = Ложь;
					Прервать;
				КонецЕсли; 
			Иначе
				Прервать;
			КонецЕсли; 
		 КонецЦикла;  // ТабВизы.
	КонецЕсли; // Нашли строку с визой.

	Возврат флПринятоРешение;
	
КонецФункции

// Функция проверяет достуна ли текущему пользователю определенная роль исполнителя.
// 
// Параметры:
//  ТекущийОбъект   - ЛюбаяСсылка.
//  РольИсполнителя - СправочникСсылка.бит_РолиИсполнителей.
// 
// Возвращаемое значение:
//  флДоступна - Булево.
// 
Функция ДоступнаРольИсполнителя(ТекущийОбъект, РольИсполнителя, вхПользователь = Неопределено) Экспорт

	флДоступна = Ложь;
	
	Если ЗначениеЗаполнено(вхПользователь) Тогда
		ТекущийПользователь = вхПользователь;
	Иначе	
		ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	КонецЕсли; 

	Результат = ВыполнитьЗапросДляПолученияРолевыхВиз(ТекущийПользователь, РольИсполнителя);
	
	Выборка     = Результат.Выбрать();
	МетаОбъект  = ТекущийОбъект.Метаданные();
	КолОбъектов = 3;
	
	Пока Выборка.Следующий() Цикл
		 флПодходит = ПроверитьПринадлежностьОбъектаВизирования(ТекущийОбъект, МетаОбъект, Выборка, КолОбъектов);
		 Если флПодходит Тогда
		 	флДоступна = Истина;
			Прервать;
		 КонецЕсли; 
	КонецЦикла; 
	
	Возврат флДоступна;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеИНазначениеВиз

// Процедура создает и назначает визы объектам визирования.
// 
// Параметры:
//  НазначатьВизы - Булево, по умолчанию Истина.
//  ВыполнятьВТранзакции - Булево.
//  ВыводитьСообщения    - Булево.
// 
Процедура СоздатьИНазначитьВизы(НазначатьВизы = Истина, ВыполнятьВТранзакции = Ложь, ВыводитьСообщения = Ложь) Экспорт
	
	// Настройки виз по-умолчанию
	Макет = Справочники.бит_Визы.ПолучитьМакет("ВизыПоУмолчанию");
	РезСтруктура = бит_ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст());
	ТабДанные    = РезСтруктура.Данные;
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли; 
	
	ГруппаДействия = Справочники.бит_ПользовательскиеДействия.СоздатьГруппуДействий("Визирование.ДействияПоУмолчанию");
	ПараметрыВизы  = Новый Соответствие;
	
	// Создание виз и пользовательских действий.
	Для Каждого СтрокаТаблицы Из ТабДанные Цикл
		ТекВиза = СоздатьВизу(СтрокаТаблицы.Виза, СтрокаТаблицы.Литера);
		Если ЗначениеЗаполнено(ТекВиза) Тогда
			ТекДействие = Справочники.бит_ПользовательскиеДействия.СоздатьДействиеВизирования(ТекВиза, ГруппаДействия);
		Иначе
			ТекДействие = Справочники.бит_ПользовательскиеДействия.ПустаяСсылка();
		КонецЕсли; 
		ТекОбСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", СтрокаТаблицы.ОбъектСистемы);
		ТекОписаниеВизы = Новый Структура("Виза,Действие,ОбъектСистемы", ТекВиза, ТекДействие, ТекОбСистемы);
		ПараметрыВизы.Вставить(СтрокаТаблицы.Имя, ТекОписаниеВизы);
	КонецЦикла; 
	
	// Настройки алгоритмов по-умолчанию.
	Макет = Справочники.бит_уп_Алгоритмы.ПолучитьМакет("АлгоритмыПоУмолчанию");
	РезСтруктура = бит_ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст());
	ТабДанные    = РезСтруктура.Данные;
	
	ГруппаАлгоритмы = Справочники.бит_уп_Алгоритмы.СоздатьГруппуАлгоритмов("Алгоритмы визирования по умолчанию");
	
	ТабВрем = ТабДанные.Скопировать();
	ТабВрем.Свернуть("Алгоритм,ОбъектСистемы");
	
	// Создание алгоритмов.
	Алгоритмы = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТабВрем Цикл
		ТекАлгоритм = Справочники.бит_уп_Алгоритмы.СоздатьАлгоритм(СтрокаТаблицы.Алгоритм, ГруппаАлгоритмы, Перечисления.бит_уп_ВидыАлгоритмов.Визирование);
		Алгоритмы.Вставить(СтрокаТаблицы.Алгоритм, ТекАлгоритм);
	КонецЦикла; 
	
	// Создание точек алгоритмов.
	Для Каждого СтрокаТаблицы Из ТабДанные Цикл
		Алгоритм        = Алгоритмы[СтрокаТаблицы.Алгоритм];
		ТекОписаниеВизы = ПараметрыВизы[СтрокаТаблицы.ДействиеКлюч];
		Если ЗначениеЗаполнено(Алгоритм) И ТипЗнч(ТекОписаниеВизы) = Тип("Структура") Тогда
			флДействиеВходит = Справочники.бит_уп_Алгоритмы.ДействиеВАлгоритме(Алгоритм, ТекОписаниеВизы.Действие);
			
			Если флДействиеВходит Тогда
				Продолжить;
			КонецЕсли;
			
			ПоследняяТочка = Справочники.бит_уп_Алгоритмы.НайтиПоследнююТочку(Алгоритм);
			Если ЗначениеЗаполнено(ПоследняяТочка) Тогда
				СтрРеквизиты = Новый Структура("Наименование, ПользовательскоеДействие", Строка(ТекОписаниеВизы.Виза), ТекОписаниеВизы.Действие);
				СтрПар       = Новый Структура("Реквизиты", СтрРеквизиты);
				бит_уп_Сервер.ДобавитьТочкуАлгоритма(Алгоритм
													, ПоследняяТочка
													, Перечисления.бит_уп_Направление.Вертикаль
													, Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие
													, 0
													, "Ошибки"
													, СтрПар );
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	
	Справочники.бит_уп_Алгоритмы.ЗаполнитьКартуМаршрутаXMLПриПереходеНаНовуюВерсию(Истина);
	
	Если ВыводитьСообщения Тогда
		ТекстСообщения =  НСтр("ru='Созданы алгоритмы визирования по-умолчанию.';en='Default visa algorithms created.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли; 
	
	// Назначение алгоритмов.
	Если НазначатьВизы Тогда
	    ДатаУстановки = Дата('19800101');
		Для Каждого СтрокаТаблицы Из ТабВрем Цикл
			Алгоритм      = Алгоритмы[СтрокаТаблицы.Алгоритм];
			ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", СтрокаТаблицы.ОбъектСистемы);
			Если ЗначениеЗаполнено(Алгоритм) И ЗначениеЗаполнено(ОбъектСистемы) Тогда
				Справочники.бит_уп_Алгоритмы.НазначитьАлгоритм(Алгоритм, ОбъектСистемы, ДатаУстановки); 
			КонецЕсли; 
		КонецЦикла; 
		
		Если ВыводитьСообщения Тогда
			ТекстСообщения =  НСтр("ru='Назначены алгоритмы визирования по-умолчанию.';en='Default signing algorithms set'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ВыполнятьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область АлгоритмыПроцессовВизирования

// Процедура выполняет заполнение виз согласно алгоритму визирования.
// 
// Параметры:
//  СтруктураПараметров  - Структура.
// 
Процедура ЗаполнитьВизыПоАлгоритму(СтруктураПараметров) Экспорт

	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ТекущийОбъект) Тогда
		Возврат;
	КонецЕсли; 

	// Получим алгоритм визирования, если необходимо.
	Если НЕ СтруктураПараметров.Свойство("Алгоритм") Тогда
		РезАлгоритмы        = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(СтруктураПараметров.ТекущийОбъект,Перечисления.бит_уп_ВидыАлгоритмов.Визирование); 
		Если ТипЗнч(РезАлгоритмы.Визирование) = Тип("Массив") Тогда
			АлгоритмВизирования      = РезАлгоритмы.Визирование[0];
		Иначе	
			АлгоритмВизирования      = РезАлгоритмы.Визирование;
		КонецЕсли; 
	Иначе
		АлгоритмВизирования = СтруктураПараметров.Алгоритм;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(АлгоритмВизирования) Тогда
		Возврат;
	КонецЕсли; 
	
	// Считаем набор виз, если необходимо.
	Если НЕ СтруктураПараметров.Свойство("НаборВизы") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",СтруктураПараметров.ТекущийОбъект.Ссылка);	
		НаборЗаписейВизы = ПрочитатьНаборВиз(Отбор);
		Если СтруктураПараметров.ОчищатьНабор Тогда
			НаборЗаписейВизы.Очистить();
		КонецЕсли; 
	Иначе	
		НаборЗаписейВизы = СтруктураПараметров.НаборВизы;
	КонецЕсли; 
	
    // Заполним визы согласно алгоритму визирования.
	СтруктураКонтекст = Новый Структура;
	СтруктураКонтекст.Вставить("ТекущийОбъект",СтруктураПараметров.ТекущийОбъект);
	СтруктураКонтекст.Вставить("Визы"         ,НаборЗаписейВизы);
	
	КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
									бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
		
	РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");				
	
	бит_уп_Сервер.ВыполнитьАлгоритм(АлгоритмВизирования,СтруктураКонтекст,РежимСообщений);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-18 (#3393)
	//Прервем выполнение процесса, если найдено свойство ЗакрытьЗаявку
	//Передадим выше
	Если СтруктураКонтекст.Свойство("ЗакрытьЗаявку")
		И СтруктураКонтекст.ЗакрытьЗаявку = Истина
	Тогда
		СтруктураПараметров.Вставить("ЗакрытьЗаявку", СтруктураКонтекст.ЗакрытьЗаявку);
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-18 (#3393)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-04 (#3997)
	//УпорядочитьНаборВиз(НаборЗаписейВизы, АлгоритмВизирования);
	Если ТипЗнч(СтруктураПараметров.ТекущийОбъект.Ссылка) <> Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2021-06-16 (#4223)
		УдалитьПовторяющиесяВизы(НаборЗаписейВизы);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2021-06-16 (#4223)
		
		УпорядочитьНаборВиз(НаборЗаписейВизы, АлгоритмВизирования);

	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-04 (#3997) 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)
	Если СтруктураПараметров.Свойство("бит_ОтключитьРегистрациюОповещений") Тогда 
		НаборЗаписейВизы.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений",СтруктураПараметров.бит_ОтключитьРегистрациюОповещений);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
	
	Если СтруктураПараметров.ЗаписыватьНабор Тогда
		Попытка
			НаборЗаписейВизы.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли; 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-18 (#2971)
	Если СтруктураКонтекст.Свойство("ИнициированныеВизы") Тогда 
		СтруктураПараметров.Вставить("ИнициированныеВизы", СтруктураКонтекст.ИнициированныеВизы);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-18 (#2971)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-23 (#3231)
	Если СтруктураКонтекст.Свойство("СообщениеПользователюПоМаршрутуСогласования") Тогда 
		СтруктураПараметров.Вставить("СообщениеПользователюПоМаршрутуСогласования", СтруктураКонтекст.СообщениеПользователюПоМаршрутуСогласования);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-23 (#3231)
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Начало (#3499)
	Если СтруктураКонтекст.Свойство("СообщениеПользователюПоМаршрутуСогласованияНаАнглийскомЯзыке") Тогда 
		СтруктураПараметров.Вставить("СообщениеПользователюПоМаршрутуСогласованияНаАнглийскомЯзыке", СтруктураКонтекст.СообщениеПользователюПоМаршрутуСогласованияНаАнглийскомЯзыке);
	КонецЕсли;
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Конец (#3499)	
	
КонецПроцедуры

// Функция получает алгоритм визирования исходя из текущего набора виз для объекта.
// 
// Параметры:
//  НаборВизы  - РегистрыСведенийНаборЗаписей.бит_УстановленныеВизы.
// 
// Возвращаемое значение:
//  Алгоритм   - СправочникСсылка.бит_уп_Алгоритмы.
// 
Функция ПолучитьАлгоритмПоНаборуВиз(НаборВизы) Экспорт

	Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
	Для Каждого СтрокаВизы Из НаборВизы Цикл
		Если ЗначениеЗаполнено(СтрокаВизы.Алгоритм) Тогда
			Алгоритм = СтрокаВизы.Алгоритм;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Алгоритм;
	
КонецФункции

// Процедура довыполняет алгоритм визирования.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект.
//  НаборВизы      - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы.
// 
Процедура ДовыполнитьАлгоритмВизирования(ТекущийОбъект,НаборВизы = Неопределено,ЗаписыватьВизы = Истина) Экспорт

	Если НаборВизы = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",ТекущийОбъект.Ссылка);
		
		НаборВизы = ПрочитатьНаборВиз(Отбор);	
	КонецЕсли; 
	
	Алгоритм = ПолучитьАлгоритмПоНаборуВиз(НаборВизы);
	
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);
	
	Если НЕ флВыполнятьПоэтапно Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураКонтекст = Новый Структура;
	СтруктураКонтекст.Вставить("ТекущийОбъект",ТекущийОбъект);
	СтруктураКонтекст.Вставить("Визы"         ,НаборВизы);
	
	КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
		
	РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");				
	
	бит_уп_Сервер.ВыполнитьАлгоритм(Алгоритм,СтруктураКонтекст,РежимСообщений);

	ТаблицаВизы = НаборВизы.Выгрузить();
	ТаблицаВизы.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
    ТаблицаВизы.ЗаполнитьЗначения(Истина, "ДоступностьВизы");
	
	ТаблицаТочек = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы);
	
	УдалитьНижестоящиеВизы(ТаблицаТочек,НаборВизы);
	
	бит_уп_Сервер.ОпределитьДоступностьТочек(ТаблицаТочек,флВыполнятьПоэтапно);

	// Устанавливаем крайние даты и признак активности.
	Для каждого Запись Из НаборВизы Цикл		
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
		//СтрокаТаблицы = ТаблицаТочек.Найти(Запись.ИД,"ИД");
		Если Запись.Виза = ПредопределенноеЗначение("Справочник.бит_Визы.ок_Инициатор") Тогда
			СтрокаТаблицы = ТаблицаТочек.Найти(Запись.Виза,"Виза");
		Иначе		
			СтрокаТаблицы = ТаблицаТочек.Найти(Запись.ИД,"ИД");
		КонецЕсли;			
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 
				
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;			
		КонецЕсли;
		
		Если Запись.ВремяНаУстановку > 0 Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение) И Не СтрокаТаблицы.Доступность Тогда
				Запись.ДатаКрайняя = Дата("00010101");
			ИначеЕсли СтрокаТаблицы.Доступность И НЕ ЗначениеЗаполнено(Запись.ДатаКрайняя) Тогда
				ДатаКрайняя = ТекущаяДата()+Запись.ВремяНаУстановку*60;
				Запись.ДатаКрайняя = ПолучитьКрайнююДату(ТекущийОбъект, ТекущаяДата(), ДатаКрайняя);
			КонецЕсли;
		КонецЕсли;
		
		Если Запись.АктивнаяВиза <> СтрокаТаблицы.АктивнаяВиза Тогда
			Запись.АктивнаяВиза = СтрокаТаблицы.АктивнаяВиза;
		КонецЕсли;
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
		Если НЕ Запись.АктивнаяВиза И НЕ ЗначениеЗаполнено(Запись.Решение) Тогда
			Запись.АктивнаяВиза = Истина;
		КонецЕсли;		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 
		
	КонецЦикла;
    	
	Если ЗаписыватьВизы И НаборВизы.Модифицированность() Тогда
		Если НаборВизы.ПроверитьЗаполнение() Тогда
			НаборВизы.Записать();
		КонецЕсли; 
	КонецЕсли; 	

КонецПроцедуры

#КонецОбласти

Процедура бит_ВизированиеПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	 // ++ БП 
	Совместимо = Истина; // Удалить в совместимо.
	// -- БП 
	
КонецПроцедуры

// Функция определяет используется ли внешнее визирование для данного объекта.
//
// Параметры:
//  МетаОбъект - ОбъектМетаданных
//
// Возвращаемое значение:
//  флИспользуетсяВнешнее - Булево.
//
Функция ИспользуетсяВнешнееВизирование(МетаОбъект) Экспорт

	 // ++ БП 
	Возврат Ложь;
	// -- БП 
	
КонецФункции

// Процедура устанавливает статус для объектов, на которых распространяется внешнее визирование.
//
// Параметры:
//  Источник - СправочникОбъект, ДокументОбъект.
//
Процедура УстановитьСтатусВнешний(Источник, Действие = Неопределено) Экспорт

	// ++ БП 
	Совместимо = Истина; // Удалить в совместимо.
	// -- БП 
	
КонецПроцедуры

// Процедура устанавливает статус договора контрагента. 
//
// Параметры:
//  ТекущийОбъект - СправочникСсылка.ДоговорыКонтрагентов
//
Процедура ДоговорКонтрагента_УстановитьСтатус(ТекущийОбъект) Экспорт
	
	// ++ БП 
	Совместимо = Истина; // Удалить в совместимо.
	// -- БП 
	
КонецПроцедуры

// Процедура устанавливает статус договора контрагента. 
//
// Параметры:
//  ТекущийОбъект - СправочникСсылка.ДоговорыКонтрагентов
//
Процедура ДоговорКонтрагента_УстановитьСтатусВнешний(ТекущийОбъект) Экспорт
	
	// ++ БП 
	Совместимо = Истина; // Удалить в совместимо.
	// -- БП 
		
КонецПроцедуры

// Функция определяет статус ДоговораКонтрагента.
//
// Параметры:
//    ТекущийОбъект - СправочникСсылка.ДоговорыКонтрагентов
//    ТекущийСтатус - СправочникСсылка.бит_СтатусыОбъектов
//    ВсеВизыПолучены - Булево
//    ЕстьОтклонено - Булево
//
// Возвращаемое значение:
//  РезСтатус - СправочникСсылка.бит_СтатусыОбъектов
//
Функция ДоговорКонтрагента_ОпределитьСтатус(ТекущийОбъект, ТекущийСтатус, ВсеВизыПолучены, ЕстьОтклонено) Экспорт

    // ++ БП 
	Возврат Справочники.бит_СтатусыОбъектов.ПустаяСсылка(); // Удалить в совместимо.
	// -- БП 
	
КонецФункции

Процедура бит_ВизированиеПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	 // ++ БП 
	Совместимо = Истина; // Удалить в совместимо.
	// -- БП 
	
КонецПроцедуры

Процедура ЗакрытьОткрытьДоговор(ДоговорСсылка) Экспорт

	// ++ БП 
	Совместимо = Истина; // Удалить в совместимо.
	// -- БП 
																	
КонецПроцедуры

// Процедура заполняет первоначальное значение служебного реквизита РежимПринятияКУчету для документов бюджетирования,
// в зависимости от значения константы ПроводитьПослеУтверждения.
//
Процедура ЗаполнитьВерсиюПринятийКУчету() Экспорт
	
	ПроводитьПослеУтверждения = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения");
	Если ПроводитьПослеУтверждения = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АктуализацияБюджета.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.бит_АктуализацияБюджета КАК АктуализацияБюджета
	|ГДЕ
	|	АктуализацияБюджета.РежимПринятияКУчету = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаБюджета.Ссылка
	|ИЗ
	|	Документ.бит_КорректировкаБюджета КАК КорректировкаБюджета
	|ГДЕ
	|	КорректировкаБюджета.РежимПринятияКУчету = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормаВводаБюджета.Ссылка
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета КАК ФормаВводаБюджета
	|ГДЕ
	|	ФормаВводаБюджета.РежимПринятияКУчету = 1";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	АктуализацияБюджета.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.бит_АктуализацияБюджета КАК АктуализацияБюджета
		|ГДЕ
		|	АктуализацияБюджета.Проведен
		|	И АктуализацияБюджета.ОтправленНаСогласование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаБюджета.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.бит_КорректировкаБюджета КАК КорректировкаБюджета
		|ГДЕ
		|	КорректировкаБюджета.Проведен
		|	И КорректировкаБюджета.ОтправленНаСогласование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФормаВводаБюджета.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.бит_ФормаВводаБюджета КАК ФормаВводаБюджета
		|ГДЕ
		|	ФормаВводаБюджета.Проведен
		|	И ФормаВводаБюджета.ОтправленНаСогласование";
		
		РезультатПакета = Запрос.ВыполнитьПакет();
	
		НачатьТранзакцию();
		// Обработка документов "Актуализация бюджета".
		ВыборкаАктуализацияБюджета = РезультатПакета[0].Выбрать();
		Пока ВыборкаАктуализацияБюджета.Следующий() Цикл
			ДокументСсылка = ВыборкаАктуализацияБюджета.Ссылка;
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РежимПринятияКУчету	= 1;
			ДокументОбъект.ОбменДанными.Загрузка= Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь, РежимЗаписиДокумента.Запись);
		КонецЦикла;
		
		// Обработка документов "Корректировка бюджета (БИТ)".
		ВыборкаКорректировкаБюджета = РезультатПакета[1].Выбрать();
		Пока ВыборкаКорректировкаБюджета.Следующий() Цикл
			ДокументСсылка = ВыборкаКорректировкаБюджета.Ссылка;
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РежимПринятияКУчету	= 1;
			ДокументОбъект.ОбменДанными.Загрузка= Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь, РежимЗаписиДокумента.Запись);
		КонецЦикла;
		
		// Обработка документов "Форма ввода бюджета".
		ВыборкаФормаВводаБюджета = РезультатПакета[2].Выбрать();
		Пока ВыборкаФормаВводаБюджета.Следующий() Цикл
			ДокументСсылка = ВыборкаФормаВводаБюджета.Ссылка;
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РежимПринятияКУчету	= 1;
			ДокументОбъект.ОбменДанными.Загрузка= Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь, РежимЗаписиДокумента.Запись);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет запрос, исходя из результата которого будет сформирован список виз пользователя.
// 
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи - текущий пользователь.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ВыполнитьЗапросДляПолученияВизПользователя(ТекущийПользователь)  Экспорт
	
	ИмяТабЧасти = бит_ОбщегоНазначения.ИмяТабЧастиГруппыПользователей();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь",ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА бит_ПраваУстановкиВиз.Виза ССЫЛКА Справочник.бит_ГруппыВиз
	|			ТОГДА ВЫБОР
	|					КОГДА бит_ПраваУстановкиВиз.Виза = ЗНАЧЕНИЕ(Справочник.бит_ГруппыВиз.ВсеВизы)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ГруппыВиз.ВсеВизы)
	|					ИНАЧЕ ЕСТЬNULL(бит_ГруппыВизВизыГруппы.Виза, ЗНАЧЕНИЕ(Справочник.бит_Визы.ПустаяСсылка))
	|				КОНЕЦ
	|		ИНАЧЕ бит_ПраваУстановкиВиз.Виза
	|	КОНЕЦ КАК Виза,
	|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие
	|ИЗ
	|	РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
	|		ПО бит_ПраваУстановкиВиз.Виза = бит_ГруппыВизВизыГруппы.Ссылка
	|ГДЕ
	|	(бит_ПраваУстановкиВиз.Пользователь В
	|				(ВЫБРАТЬ
	|					ГруппыПользователейПользователиГруппы.Ссылка
	|				ИЗ
	|					Справочник.ГруппыПользователей.%ИмяТабЧасти% КАК ГруппыПользователейПользователиГруппы
	|				ГДЕ
	|					ГруппыПользователейПользователиГруппы.Пользователь = &ТекущийПользователь)
	|			ИЛИ бит_ПраваУстановкиВиз.Пользователь = &ТекущийПользователь
	|			ИЛИ бит_ПраваУстановкиВиз.Пользователь = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТабЧасти%", ИмяТабЧасти);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

// Функция выполняет запрос для получения перечня виз, связанных с ролями исполнителей.
// 
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи - пользователь.
//  РольИсполнителя - СправочникСсылка.бит_РолиПользователей - роль.
// 
// Возвращаемое значение:
//  Результат - РезультатЗапроса.
// 
Функция ВыполнитьЗапросДляПолученияРолевыхВиз(ТекущийПользователь, РольИсполнителя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РольИсполнителя"      , РольИсполнителя);
	Запрос.УстановитьПараметр("ТекущийПользователь"  , ТекущийПользователь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ИсполнителиЗадач.РольИсполнителя,
	               |	бит_ИсполнителиЗадач.Исполнитель,
	               |	ОбъектыАдресации_1.Вид КАК ВидОбъекта_1,
	               |	ОбъектыАдресации_1.Вид.Код КАК ИмяВида_1,
	               |	ОбъектыАдресации_1.Вид.СпособПроверкиПринадлежности КАК СпособПроверки_1,
	               |	бит_ИсполнителиЗадач.ОбъектАдресации_1,
	               |	ОбъектыАдресации_2.Вид КАК ВидОбъекта_2,
	               |	ОбъектыАдресации_2.Вид.Код КАК ИмяВида_2,
	               |	ОбъектыАдресации_2.Вид.СпособПроверкиПринадлежности КАК СпособПроверки_2,
	               |	бит_ИсполнителиЗадач.ОбъектАдресации_2,
	               |	ОбъектыАдресации_3.Вид КАК ВидОбъекта_3,
	               |	ОбъектыАдресации_3.Вид.Код КАК ИмяВида_3,
	               |	ОбъектыАдресации_3.Вид.СпособПроверкиПринадлежности КАК СпособПроверки_3,
	               |	бит_ИсполнителиЗадач.ОбъектАдресации_3
	               |ИЗ
	               |	РегистрСведений.бит_ИсполнителиЗадач КАК бит_ИсполнителиЗадач
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_РолиИсполнителей.ОбъектыАдресации КАК ОбъектыАдресации_1
	               |		ПО бит_ИсполнителиЗадач.РольИсполнителя = ОбъектыАдресации_1.Ссылка
	               |			И (ОбъектыАдресации_1.Имя = ""ОбъектАдресации_1"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_РолиИсполнителей.ОбъектыАдресации КАК ОбъектыАдресации_2
	               |		ПО бит_ИсполнителиЗадач.РольИсполнителя = ОбъектыАдресации_2.Ссылка
	               |			И (ОбъектыАдресации_2.Имя = ""ОбъектАдресации_2"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_РолиИсполнителей.ОбъектыАдресации КАК ОбъектыАдресации_3
	               |		ПО бит_ИсполнителиЗадач.РольИсполнителя = ОбъектыАдресации_3.Ссылка
	               |			И (ОбъектыАдресации_3.Имя = ""ОбъектАдресации_3"")
	               |ГДЕ
	               |	бит_ИсполнителиЗадач.Исполнитель = &ТекущийПользователь
	               |	И бит_ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

//  Возвращает список виз, доступных для установки данному  пользователю, либо группе пользователей.
// 
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи,СправочникСсылка.ГруппыПользователей 
// 						- Пользователь для которого получаем список виз.
//  ТекущийОбъект       - ДокументОбъект, ДокументСсылка - объект.
//  РезультатОбщий      - РезультатЗапроса - Результат содержит список доступных виз пользователя 
//        									 без фильтрации по пользовательским условиям.
// 
//  РезультатРолевыеВизы - РезультатЗапроса - ролевые визы.
// 
// Возвращаемое значение:
//   СписокВиз   -СписокЗначений -Список виз пользователя.
// 
Функция ПолучитьВизыПользователя(ТекущийПользователь,ТекущийОбъект, Знач РезультатОбщий = Неопределено, РежимСообщений="Нет") Экспорт

	// Обычные визы, доступ к которым назначается в РС.бит_ПраваУстановкиВиз.
	Если РезультатОбщий = Неопределено Тогда
		Результат = ВыполнитьЗапросДляПолученияВизПользователя(ТекущийПользователь);
	Иначе	
		Результат = РезультатОбщий;
	КонецЕсли;
	
	СписокВиз = Новый СписокЗначений;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ПользовательскоеУсловие) И НЕ ТекущийОбъект = Неопределено Тогда
			ПараметрыУсловия = Новый Структура;
			ПараметрыУсловия.Вставить("ТекущийОбъект",ТекущийОбъект);
			ПараметрыУсловия.Вставить("ТекущийПользователь", ТекущийПользователь);
			флДобавлять = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(Выборка.ПользовательскоеУсловие
					                                                     ,ПараметрыУсловия
																		 ,
																		 ,
																		 ,РежимСообщений);
		Иначе	
			флДобавлять = Истина;
		КонецЕсли; 
		
		Если флДобавлять Тогда
			СписокВиз.Добавить(Выборка.Виза);	
		КонецЕсли; 
	КонецЦикла; 
			   
   Возврат СписокВиз;

КонецФункции

// Процедура выполняет обновление набора виз для объекта.
// 
// Параметры:
//  ТекущийОбъект  - ДокументСсылка.
//  ДатаЗаполнения - Дата.
//  СтруктураПараметров - Структура.
// 
Процедура ОбновитьПереченьВиз(ТекущийОбъект,ДатаЗаполнения,СтруктураПараметров)  Экспорт

	Если НЕ СтруктураПараметров.Свойство("Алгоритм") Тогда
		РезАлгоритмы  = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ТекущийОбъект,Перечисления.бит_уп_ВидыАлгоритмов.Визирование); 
		Если ТипЗнч(РезАлгоритмы.Визирование) = Тип("Массив") Тогда
			Алгоритм      = РезАлгоритмы.Визирование[0];
		Иначе	
			Алгоритм      = РезАлгоритмы.Визирование;
		КонецЕсли; 
	Иначе
		Алгоритм = СтруктураПараметров.Алгоритм;
	КонецЕсли; 												
	
	// Заполнение виз по алгоритму.												
	СтруктураПараметровАлгоритм = Новый Структура;
	СтруктураПараметров.Вставить("ТекущийОбъект"  ,ТекущийОбъект);
	СтруктураПараметров.Вставить("Алгоритм"       ,Алгоритм);
	СтруктураПараметров.Вставить("ОчищатьНабор"   ,Истина);
	СтруктураПараметров.Вставить("ЗаписыватьНабор",Истина);
	
	// BIT AMerkulov 11-02-2015 ++
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-13 (#3997)
	//Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда	
	Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета")
		ИЛИ ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-13 (#3997)	
		МассивСохраняемых = Новый Массив;	
		СохранитьСписокУстановленныхВручнуюВиз(ТекущийОбъект.Ссылка, МассивСохраняемых);
	КонецЕсли;
	// BIT AMerkulov 11-02-2015 --
	
	бит_Визирование.ЗаполнитьВизыПоАлгоритму(СтруктураПараметров);

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-18 (#3393)
	//Прервем выполнение процесса, если найдено свойство ЗакрытьЗаявку
	//Передадим выше
	Если СтруктураПараметров.Свойство("ЗакрытьЗаявку")
		И СтруктураПараметров.ЗакрытьЗаявку = Истина
	Тогда		
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-18 (#3393)
	
	// BIT AMerkulov 25-03-2015 ++ /Заполнение ответственных лиц по визам
	Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета")
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-13 (#3997)
		 ИЛИ ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-13 (#3997)
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-12 (#3393)
	 ИЛИ ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета")
	   И ЗначениеЗаполнено(ТекущийОбъект.ок_ВидКорректировки)
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-12 (#3393)
	Тогда
		Массив = Новый Массив;
		НаборЗаписей = ПрочитатьНаборВиз(Новый Структура("Объект", ТекущийОбъект.Ссылка));
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-14 (#3393)
		мДоступныхТочекАлгоритма = ПолучитьДоступныеТочкиАлгоритма(НаборЗаписей.Выгрузить());
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-14 (#3393)
		
		Для Каждого СтрокаЗаписи Из НаборЗаписей Цикл
			Массив.Добавить(СтрокаЗаписи.Виза);	
		КонецЦикла;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)
		Если СтруктураПараметров.Свойство("бит_ОтключитьРегистрациюОповещений") Тогда 
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений",СтруктураПараметров.бит_ОтключитьРегистрациюОповещений);
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
		
		ТаблицаПоПравам = бит_Визирование.ВыполнитьЗапросДляПолученияПравПоЗаявке(Массив);	
		
		Для Каждого СтрокаЗаписи Из НаборЗаписей Цикл
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-14 (#3393)
			Если мДоступныхТочекАлгоритма.Найти(СтрокаЗаписи.ТочкаАлгоритма) = Неопределено	Тогда 							
				СтрокаЗаписи.ДатаКрайняя = Дата('00010101');
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЗаписи.ДатаКрайняя) Тогда 
				ДатаКрайняя = ТекущаяДата() + СтрокаЗаписи.Виза.ВремяНаУстановку*60; 
				СтрокаЗаписи.ДатаКрайняя = бит_Визирование.ПолучитьКрайнююДату(ТекущийОбъект, ТекущаяДата(), ДатаКрайняя); 
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-14 (#3393)
									
			СтрокиПоПравам = ТаблицаПоПравам.НайтиСтроки(Новый Структура("Виза", СтрокаЗаписи.Виза));
			
			Для Каждого НайденнаяСтрока Из СтрокиПоПравам Цикл
				Если ЗначениеЗаполнено(НайденнаяСтрока.Инициатор) Тогда
					
					Если ЗначениеЗаполнено(НайденнаяСтрока.ПользовательскоеУсловие) Тогда
						
						ПараметрыУсловия = Новый Структура;
						ПараметрыУсловия.Вставить("ТекущийОбъект",ТекущийОбъект);
						флДобавлять = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(НайденнаяСтрока.ПользовательскоеУсловие
							,ПараметрыУсловия
							,
							,
							,);
						
					Иначе	
						
						флДобавлять = Истина;
						
					КонецЕсли; 
					
					Если флДобавлять Тогда
						СтрокаЗаписи.ФизическоеЛицо =  НайденнаяСтрока.Инициатор;
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-14 (#3393)
						Если Не ЗначениеЗаполнено(СтрокаЗаписи.ДатаКрайняя)
						   И мДоступныхТочекАлгоритма.Найти(СтрокаЗаписи.ТочкаАлгоритма)<>Неопределено
						Тогда 							
							ДатаКрайняя = ТекущаяДата() + СтрокаЗаписи.Виза.ВремяНаУстановку*60; 
							СтрокаЗаписи.ДатаКрайняя = бит_Визирование.ПолучитьКрайнююДату(ТекущийОбъект, ТекущаяДата(), ДатаКрайняя);  
						КонецЕсли;
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-14 (#3393)
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Попытка
			
			НаборЗаписей.Записать();
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать набор виз по причине' ")+ОписаниеОшибки();
			бит_ОбщегоНазначения.бит_Сообщить(ТекстСообщения,СтатусСообщения.Важное);
			
		КонецПопытки;
		
	КонецЕсли;
	// BIT AMerkulov 25-03-2015 --	
	
	// BIT AMerkulov 11-02-2015 ++
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-13 (#3997)
	//Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда	
	Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета")
		ИЛИ ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-13 (#3997)		
		ВосстановитьСписокУстановленныхВручнуюВиз(ТекущийОбъект.Ссылка, МассивСохраняемых);	
	КонецЕсли;
	// BIT AMerkulov 11-02-2015 --	
	
КонецПроцедуры

// Читает набор записей регистра сведений бит_УстановленныеВизы согласно установленного отбора.
// 
// Параметры:
//  СтруктураОтбор  - Структура.
// 
// Возвращаемое значение:
//   НаборЗаписей   - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы.
// 
Функция ПрочитатьНаборВиз(СтруктураОтбор) Экспорт
	
	Если СтруктураОтбор.Свойство("Объект") Тогда
		
		ИмяПолное 		= СтруктураОтбор.Объект.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяПолное);
		ПустаяСсылка 	= МенеджерОбъекта.ПустаяСсылка();

		Если Метаданные.РегистрыСведений.бит_УстановленныеВизы.Измерения.Объект.Тип.СодержитТип(ТипЗнч(ПустаяСсылка)) Тогда
		     НаборЗаписей = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(СтруктураОтбор,"бит_УстановленныеВизы");
		Иначе	
			ВызватьИсключение НСтр("ru = 'Установленные визы: неизвестный тип объекта.'");			
		КонецЕсли;	
	Иначе
		НаборЗаписей = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(СтруктураОтбор,"бит_УстановленныеВизы");
	КонецЕсли; 
	
	Возврат НаборЗаписей;
	
КонецФункции

// Процедура устанавливает доступные пользователю визы в наборе записей регистра бит_УстановленныеВизы.
// 
// Параметры:
//  СтруктураОтбор  - Структура.
//  ТекущийПользователь - СправочникСсылка.Пользователи.
//  ДатаУстановки - Дата.
//  СписокВизПользователя - СписокЗначений.
//  Безусловно - Булево.
//  Решение    - СправочникСсылка.бит_уп_ТочкиАлгоритмов.
// 
Процедура УстановитьВизы(СтруктураОтбор
	                      ,ТекущийПользователь
						  ,ДатаУстановки
						  ,СписокВизПользователя
						  ,Безусловно = Ложь
						  ,Решение    = Неопределено)   Экспорт

	
	РежимПоискаДоступных = ОпределитьРежимПоискаВиз(СписокВизПользователя);
	флЕстьВсеВизы        = ?(СписокВизПользователя.НайтиПоЗначению(Справочники.бит_ГруппыВиз.ВсеВизы)=Неопределено,Ложь,Истина);	
	НаборЗаписей         = ПрочитатьНаборВиз(СтруктураОтбор);
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если флЕстьВсеВизы Тогда
			Нашли = Истина;
		Иначе	
			Если ВРег(РежимПоискаДоступных) = "ИД" Тогда
				Нашли = СписокВизПользователя.НайтиПоЗначению(Запись.ИД);
			Иначе	
				Нашли = СписокВизПользователя.НайтиПоЗначению(Запись.Виза);
			КонецЕсли;
		КонецЕсли; 
		
		Если Нашли <> Неопределено ИЛИ Безусловно Тогда
			Если Решение = Неопределено Тогда
				ТекРешение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновноеРешениеСогласования", ТекущийПользователь);
				Если НЕ ЗначениеЗаполнено(ТекРешение) Тогда
					ТекРешение = Справочники.бит_ВидыРешенийСогласования.Согласовано;
				КонецЕсли; 
			Иначе	
				ТекРешение = Решение;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ТекРешение)  Тогда
				// Устанавливает только если значение еще не установлено.
				Если НЕ ЗначениеЗаполнено(Запись.Решение) Тогда
					Запись.Решение       = ТекРешение;
					Запись.Пользователь  = ТекущийПользователь;
					Запись.ДатаУстановки = ДатаУстановки;
				КонецЕсли; 
			Иначе   
				// Очищаем безусловно.
				Запись.Решение       = ТекРешение;
				Запись.Пользователь  = Справочники.Пользователи.ПустаяСсылка();
				Запись.ДатаУстановки = Дата("00010101");
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей);
	

КонецПроцедуры

// Функция определяет режим виз.
// 
// Параметры:
//  СписокВизПользователя  - Список.
// 
// Возвращаемое значение:
//   РежимПоискаДоступных   - Строка.
// 
Функция ОпределитьРежимПоискаВиз(СписокВизПользователя) Экспорт

	РежимПоискаДоступных = "Визы";
	Если СписокВизПользователя.Количество()>0 
		 И ТипЗнч(СписокВизПользователя[0].Значение) = Тип("Строка") Тогда
		РежимПоискаДоступных = "Ид";
	КонецЕсли; 

	Возврат РежимПоискаДоступных;

КонецФункции

// Функция определяет количество виз, удовлетворяющих отбору.
// 
// Параметры:
//  СтруктураОтбор  - Структура.
// 
// Возвращаемое значение:
//   КоличествоВиз   - Число.
// 
Функция ОпределитьКоличествоВиз(СтруктураОтбор) Экспорт
	
	НаборЗаписей = ПрочитатьНаборВиз(СтруктураОтбор);
	КоличествоВиз = НаборЗаписей.Количество();
	
	Возврат КоличествоВиз;
	
КонецФункции

// Функция выполняет установку статуса для объекта.
// 
// Параметры:
//  ТекущийОбъект  - ДокументСсылка,СправочникСсылка.
//  ВидСтатуса     - ПеречислениеСсылка.бит_ВидыСтатусовОбъектов.
//  Статус         - СпрвочникСсылка.бит_СтатусыОбъектов.
//  ТекущийПользователь - СправочникСсылка.Пользователи.
//  ДатаУстановки  - Дата.
//  РежимСообщений - Строка: "Нет","Все","Ошибки".
// 
// Возвращаемое значение:
//   ДействиеВыполнено   - Булево.
// 
Функция УстановитьСтатусОбъекта(ТекущийОбъект,ВидСтатуса,Статус,СтатусПредыдущий,ТекущийПользователь,ДатаУстановки,РежимСообщений="Все") Экспорт
	
	ДействиеВыполнено = Ложь;
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект) Тогда
		Возврат ДействиеВыполнено;
	КонецЕсли;
	
	ВыводитьОшибки     = ?(РежимСообщений="Все" ИЛИ РежимСообщений="Ошибки",Истина,Ложь);
	ВыводитьИнформацию = ?(РежимСообщений="Все",Истина,Ложь);
	
	МенеджерЗаписи = РегистрыСведений.бит_СтатусыОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект               = ТекущийОбъект;
	МенеджерЗаписи.ВидСтатуса           = ВидСтатуса;
	МенеджерЗаписи.Статус               = Статус;
	МенеджерЗаписи.СтатусПредыдущий     = СтатусПредыдущий;	
	МенеджерЗаписи.Пользователь         = ТекущийПользователь;
	МенеджерЗаписи.ДатаИзмененияСтатуса = ДатаУстановки;
	
	//+СБ Пискунова #2691 10.03.2017  - повторные записи в РС
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_СтатусыОбъектов.Объект
	|ИЗ
	|	РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	|ГДЕ
	|	бит_СтатусыОбъектов.Объект = &Объект
	|	И бит_СтатусыОбъектов.ВидСтатуса = &ВидСтатуса
	|	И бит_СтатусыОбъектов.Статус = &Статус
	|	И бит_СтатусыОбъектов.СтатусПредыдущий = &СтатусПредыдущий";
	
	Запрос.УстановитьПараметр("ВидСтатуса", ВидСтатуса);
	Запрос.УстановитьПараметр("Объект", ТекущийОбъект);
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("СтатусПредыдущий", СтатусПредыдущий);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		лОтправить = Истина;
	Иначе
		лОтправить = Ложь;
	КонецЕсли;
	//-СБ Пискунова #2691 10.03.2017  - повторные записи в РС
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-02 (#2986)
	Если Не лОтправить Тогда 
		Возврат Истина;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-02 (#2986)
	
	Попытка
		МенеджерЗаписи.Записать();
		ДействиеВыполнено = Истина;
	Исключение
		Если ВыводитьОшибки Тогда
			ТекстСообщения = "Не удалось установить статус ""%1"" для объекта ""%2"" %3";
			ТекстСообщения = СтрШаблон(ТекстСообщения, Статус, ТекущийОбъект, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
		КонецЕсли; 
		ЗаписьЖурналаРегистрации("бит_Визирование", 
								УровеньЖурналаРегистрации.Ошибка,, 
								ТекущийОбъект, 
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ДействиеВыполнено = Ложь;
	КонецПопытки;
	
	//+СБ Пискунова #2691 10.03.2017
	//При изменении статуса на "согласовано" отправим письмо инициатору  
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-17 (#2873)
	//ВидОперацииПодходит = ?(ТекущийОбъект.Ссылка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный или  ТекущийОбъект.Ссылка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный или  ТекущийОбъект.Ссылка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, Истина, Ложь);
	//КнокаЗапускаПроцессаПоДатеПодходит = бит_БК_Общий.РеквизитыДляМуршрутовВидимы(ТекущийОбъект.Ссылка); 
    //
	//	Если Статус <> СтатусПредыдущий и ТипЗнч(ТекущийОбъект) = ТипЗнч(Документы.бит_ФормаВводаБюджета.ПустаяСсылка()) и Статус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована и КнокаЗапускаПроцессаПоДатеПодходит и ВидОперацииПодходит Тогда		
	//Заменено на:
	Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда 
		ВидОперацииПодходит = ?(ТекущийОбъект.Ссылка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный или  ТекущийОбъект.Ссылка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный или  ТекущийОбъект.Ссылка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, Истина, Ложь);
		КнокаЗапускаПроцессаПоДатеПодходит = бит_БК_Общий.РеквизитыДляМуршрутовВидимы(ТекущийОбъект.Ссылка); 
		Если Статус <> СтатусПредыдущий И
			Статус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована И
			КнокаЗапускаПроцессаПоДатеПодходит И
			ВидОперацииПодходит 
			Тогда		
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-17 (#2873)
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-01 (#2986)
			//Если лОтправить Тогда	                              			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-01 (#2986)	
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-09 (#2931)
				//НастройкиДоставки = Новый Структура;
				//бит_БК_Общий.ЗаполнитьНастройкиДоставки(НастройкиДоставки);              
				//бит_ФормаВводаБюджетаВызовСервера.СБ_ОтправитьСообщениеКлиентОЦРОСтатусе(ТекущийОбъект, НастройкиДоставки, ТекущийОбъект.бит_БК_Инициатор);
				//Заменено на:
				бит_ФормаВводаБюджетаВызовСервера.СБ_ОтправитьСообщениеКлиентОЦРОСтатусе(ТекущийОбъект);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-09 (#2931)
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-01 (#2986)
			//КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-01 (#2986)
		КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-17 (#2873)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-17 (#2873)
	//-СБ Пискунова #2691 10.03.2017	
	
	Возврат ДействиеВыполнено;
	
КонецФункции

// Записывает новый статус в регистр и изменяет дополнитеьные свойства объекта.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект - см. определямый тип "бит_ОбъектыСоСтатусами".
//  ВидСтатуса     - ПеречислениеСсылка.бит_ВидыСтатусовОбъектов.
//  Статус         - СпрвочникСсылка.бит_СтатусыОбъектов.
//  ТекущийПользователь - СправочникСсылка.Пользователи.
//  ДатаУстановки  - Дата.
//  РежимСообщений - Строка: "Нет","Все","Ошибки".
// 
Процедура ИзменитьСтатусОбъекта(ТекущийОбъект, ВидСтатуса, НовыйСтатус, ТекущийСтатус, 
			Пользователь, ДатаУстановки, РежимСообщений = "Все") Экспорт

	Если НовыйСтатус = ТекущийСтатус Тогда
		Возврат;
	КонецЕсли; 		
	
	ДействиеВыполнено = УстановитьСтатусОбъекта(ТекущийОбъект.Ссылка, ВидСтатуса, НовыйСтатус, 
							ТекущийСтатус, Пользователь, ДатаУстановки, РежимСообщений);
	
	Если ДействиеВыполнено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекущийСтатус", НовыйСтатус);
	КонецЕсли; 	

КонецПроцедуры
 
// Функция получает статусы данного добъекта.
// 
// Параметры:
//  ТекущийОбъект  - ДокументСсылка.
//  ВидСтатуса     - ПеречислениеСсылка.бит_ВидыСтатусовОбъектов.
// 
// Возвращаемое значение:
//   РезСтруктура   - Структура("Статус,Пользователь,Дата,ОплатаСтатус,ОплатаПользователь,ОплатаДата").
// 
Функция ПолучитьСтатусОбъекта(ТекущийОбъект, ВидСтатуса = Неопределено) Экспорт

	РезСтруктура = НовыеПараметрыСтатуса();
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект) Тогда
		Возврат РезСтруктура;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СтатусыОбъектов.ВидСтатуса,
	|	бит_СтатусыОбъектов.Статус,
	|	бит_СтатусыОбъектов.СтатусПредыдущий,
	|	бит_СтатусыОбъектов.Пользователь,
	|	бит_СтатусыОбъектов.ДатаИзмененияСтатуса
	|ИЗ
	|	РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	|ГДЕ
	|	бит_СтатусыОбъектов.Объект = &Объект";
				   
	Если ЗначениеЗаполнено(ВидСтатуса) Тогда
		Запрос.Текст = Запрос.Текст +" И бит_СтатусыОбъектов.ВидСтатуса = &ВидСтатуса ";
	    Запрос.УстановитьПараметр("ВидСтатуса",ВидСтатуса);
	КонецЕсли; 	
	
	Запрос.УстановитьПараметр("Объект", ТекущийОбъект);			   

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидСтатуса = Перечисления.бит_ВидыСтатусовОбъектов.Статус Тогда
			 РезСтруктура.Статус           = Выборка.Статус;
			 РезСтруктура.СтатусПредыдущий = Выборка.СтатусПредыдущий;			 
			 РезСтруктура.Пользователь     = Выборка.Пользователь;
			 РезСтруктура.Дата             = Выборка.ДатаИзмененияСтатуса;
		ИначеЕсли  Выборка.ВидСтатуса = Перечисления.бит_ВидыСтатусовОбъектов.СостояниеОплаты Тогда	
			РезСтруктура.ОплатаСтатус           = Выборка.Статус;
			РезСтруктура.ОплатаСтатусПредыдущий = Выборка.СтатусПредыдущий;
			РезСтруктура.ОплатаПользователь     = Выборка.Пользователь;
			РезСтруктура.ОплатаДата             = Выборка.ДатаИзмененияСтатуса;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат РезСтруктура;
	
КонецФункции

// Заполняет дополнительные свойства объектов со статусами.
//
// Параметры:
//  Источник	 - ДокументОбъект - см. определямый тип "бит_ОбъектыСоСтатусами".
//  СтатусНового - СправочникСсылка.бит_СтатусыОбъектов - статус незаписанного документа.
//
Процедура ЗаполнитьТекущийСтатус(Источник, СтатусНового = Неопределено) Экспорт

	Если СтатусНового = Неопределено Тогда
		СтатусНового = Справочники.бит_СтатусыОбъектов.ПустаяСсылка();	
	КонецЕсли; 
	
	Если Источник.ЭтоНовый() Тогда
		Статус = СтатусНового;	
	Иначе	
		Статус = ПолучитьСтатусОбъекта(Источник.Ссылка).Статус;
	КонецЕсли; 
	
	Источник.ДополнительныеСвойства.Вставить("ТекущийСтатус", Статус);
	
КонецПроцедуры
 
// Функция определяет текущий статус заявки на расходование средств.
// 
// Параметры:
//  ТекущийОбъект    - ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств.
//  НачальныйСтатус  - текущее значение статуса.
//  ВсеВизыПолучены  - Булево.
//  ЕстьОтклонено    - Булево.
//  СтруктураОплаты  - Структура.
// 
// Возвращаемое значение:
//   РезСтатус   - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция ОпределитьСтатусЗаявки(ТекущийОбъект, НачальныйСтатус, РежимЗаписи, ВсеВизыПолучены, ЕстьОтклонено, СтруктураОплаты) Экспорт

	// +СБ. Широков Николай. 2014-09-04. ТЗ "Казначейство" 2.2.1.3.	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДокументЗагруженСОшибкой") Тогда
		Возврат СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатусЗаявки_Ошибка", Справочники.бит_СтатусыОбъектов.Заявка_Черновик);	
	КонецЕсли; 
	// -СБ. Широков Николай
	
	РезСтатус = НачальныйСтатус;
	
	СуммаОплата = СтруктураОплаты.СуммаОплата + СтруктураОплаты.СуммаЗакрыта;
	
	// Установим статус по оплате
	Если СуммаОплата>0 
		 И СуммаОплата>=СтруктураОплаты.СуммаПлан Тогда
		 РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Оплачена;
	 Иначе
		 РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Рабочая;
	КонецЕсли; 
	
	Если НЕ РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Оплачена Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
			ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Запись И ТекущийОбъект.Проведен) Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Рабочая;
		Иначе
			РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Черновик;
		КонецЕсли; 
		
		Если РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Рабочая 
			ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Утверждена
			ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Отклонена Тогда
			
			Если ЕстьОтклонено Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Отклонена;
			Иначе	
				Если ВсеВизыПолучены Тогда
					РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Утверждена;
				Иначе	
					РезСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Рабочая;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
  Возврат РезСтатус;
КонецФункции

// Функция определяет состояние оплаты заявки.
// 
// Параметры:
//  СтруктураОплаты  - Структура.
// 
// Возвращаемое значение:
//   РезСостояние   - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция ОпределитьСостояниеОплаты(СтруктураОплаты) Экспорт
	
	РезСостояние = Справочники.бит_СтатусыОбъектов.ПустаяСсылка();
	ПараметрКоридор = 1.01;
	
	СуммаОплата = СтруктураОплаты.СуммаОплата + СтруктураОплаты.СуммаЗакрыта;
	
	Если СуммаОплата >0 Тогда
		Если СуммаОплата >=СтруктураОплаты.СуммаПлан И СуммаОплата<=ПараметрКоридор*СтруктураОплаты.СуммаПлан Тогда
			РезСостояние = Справочники.бит_СтатусыОбъектов.Оплата;
		ИначеЕсли СуммаОплата < СтруктураОплаты.СуммаПлан Тогда
			РезСостояние = Справочники.бит_СтатусыОбъектов.ЧастичнаяОплата;
		ИначеЕсли СуммаОплата >ПараметрКоридор*СтруктураОплаты.СуммаПлан Тогда
			РезСостояние = Справочники.бит_СтатусыОбъектов.Переплата;
		КонецЕсли;	
	Иначе	
		РезСостояние = Справочники.бит_СтатусыОбъектов.ПустаяСсылка();
	КонецЕсли; 
	
	
	Возврат РезСостояние;	 
КонецФункции

// Процедура обновляет визы для объекта.
// 
// Параметры;
//  ТекОбъект - ДокументСсылка, СправочникСсылка.
// 		
Процедура ОбновитьВизыДляОбъекта(ТекОбъект) Экспорт
	
	МетаданныеОбъекта = ТекОбъект.Метаданные();
	
	ЕстьОрганизация = бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаданныеОбъекта);
	ЕстьЦФО			= бит_РаботаСМетаданными.ЕстьРеквизит("ЦФО"		  , МетаданныеОбъекта);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", ?(ЕстьОрганизация, ТекОбъект.Организация, Неопределено));
	СтруктураПараметров.Вставить("ЦФО"					   , ?(ЕстьЦФО		  , ТекОбъект.ЦФО		 , Неопределено));
	
	ДатаОбъекта = ?(бит_РаботаСМетаданными.ЕстьРеквизит("Дата", МетаданныеОбъекта), ТекОбъект.Дата, Дата('00010101'));
	
	ОбновитьПереченьВиз(ТекОбъект, ДатаОбъекта, СтруктураПараметров);
	
КонецПроцедуры

//  Очищает все визы в таб. части Визы независимо от наличия доступа у пользователя.
// 
// Параметры:
//  ТекущийОбъект  - ДокументСсылка.
// 
Процедура ОчиститьВсеВизыБезусловно(ТекущийОбъект) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("Объект",ТекущийОбъект);
	
	НаборВизы = ПрочитатьНаборВиз(Отбор);
	НаборВизы.Очистить();
	
	бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборВизы);

КонецПроцедуры

// Функция получает список возможных решений при визировании.
// 
// Возвращаемое значение:
//   СписокРешений   - СписокЗначений.
// 
Функция ПолучитьСписокВозможныхРешений(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	
	Если СтруктураПараметров.Свойство("Организация") Тогда
		Запрос.УстановитьПараметр("Организация",СтруктураПараметров.Организация);
	Иначе	
		Запрос.УстановитьПараметр("Организация",Справочники.Организации.ПустаяСсылка());
	КонецЕсли; 
	
	Если СтруктураПараметров.Свойство("ОбъектСистемы") Тогда
		Запрос.УстановитьПараметр("ОбъектСистемы",СтруктураПараметров.ОбъектСистемы);
	Иначе	
		Запрос.УстановитьПараметр("ОбъектСистемы",Справочники.бит_ОбъектыСистемы.ПустаяСсылка());
	КонецЕсли; 
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	НазначениеВидовРешений.ВидРешения КАК ВидРешения,
	|	МАКСИМУМ(НазначениеВидовРешений.КодСортировки) КАК КодСортировки,
	|	НазначениеВидовРешений.ВидРешения.Представление КАК ВидРешенияПредставление
	|ИЗ
	|	РегистрСведений.бит_НазначениеВидовРешенийСогласования КАК НазначениеВидовРешений
	|ГДЕ
	|	(НазначениеВидовРешений.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ НазначениеВидовРешений.Организация = &Организация)
	|	И (НазначениеВидовРешений.ОбъектСистемы = ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	|			ИЛИ НазначениеВидовРешений.ОбъектСистемы = &ОбъектСистемы)
	|	И НЕ НазначениеВидовРешений.ВидРешения.Отключено
	|	И НЕ НазначениеВидовРешений.ВидРешения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	НазначениеВидовРешений.ВидРешения
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСортировки";
	
	СписокРешений = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокРешений.Добавить(Выборка.ВидРешения, Выборка.ВидРешенияПредставление);
	КонецЦикла; 	 

	Возврат СписокРешений;
	
КонецФункции

// Функция определяет цвет визы в зависимости от вида визы и способа добавления визы.
// 
// Параметры:
//  ВидВизы  - ПеречислениеСсылка.бит_ВидыВиз.
//  ДобавленаВручную  - Булево.
// 
// Возвращаемое значение:
//   ЦветВизы   - Цвет.
// 
Функция ОпределитьЦветВизы(ВидВизы,ДобавленаВручную) Экспорт

	Если ВидВизы = Перечисления.бит_ВидыВиз.Утверждающая Тогда
		Если ДобавленаВручную Тогда
			ЦветВизы  = WebЦвета.КрасноФиолетовый;
		Иначе	
			ЦветВизы  = WebЦвета.Красный;
		КонецЕсли; 
	Иначе
		Если ДобавленаВручную Тогда
			ЦветВизы  = WebЦвета.Зеленый;
		Иначе	
			ЦветВизы  = Новый Цвет(0,125,255);
		КонецЕсли; 
	КонецЕсли;

	Возврат ЦветВизы;
	
КонецФункции

// Процедура устанавливает крайние даты визирования.
// 
// Параметры:
//  ТекущийОбъект  - ДокументСсылка.
// 
Процедура УстановитьКрайниеДатыВизирования(ТекущийОбъект,НаборВизы = Неопределено,Записывать = Истина) Экспорт

	Если НаборВизы = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",ТекущийОбъект.Ссылка);
		НаборВизы = ПрочитатьНаборВиз(Отбор);
	КонецЕсли; 
	
	ТаблицаВизы = НаборВизы.Выгрузить();
	
	ТаблицаВизы.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
	ТаблицаВизы.ЗаполнитьЗначения(Истина, "ДоступностьВизы");
	
	Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
	
	Для Каждого СтрокаВизы Из ТаблицаВизы Цикл
		Если ЗначениеЗаполнено(СтрокаВизы.Алгоритм) Тогда
			Алгоритм = СтрокаВизы.Алгоритм;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	локТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы);
	
	// Определяем, какие точки алгоритма доступны.
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);	
	бит_уп_Сервер.ОпределитьДоступностьТочек(локТаблицаТочкиВизы,флВыполнятьПоэтапно);

	флЕстьИзменения = Ложь;
	// Устанавливаем крайние даты и признак активности.
	Для каждого Запись Из НаборВизы Цикл
		СтрокаТаблицы = локТаблицаТочкиВизы.Найти(Запись.ИД,"ИД");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Запись.ВремяНаУстановку > 0 Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение) И НЕ СтрокаТаблицы.Доступность Тогда
				Запись.ДатаКрайняя = Дата("00010101");
				флЕстьИзменения    = Истина;
			ИначеЕсли СтрокаТаблицы.Доступность И НЕ ЗначениеЗаполнено(Запись.ДатаКрайняя) Тогда
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-17 (#2880)	
				//При записи набора производим установку дат
				//ДатаКрайняя = ТекущаяДата()+Запись.ВремяНаУстановку*60;
				//Запись.ДатаКрайняя = ПолучитьКрайнююДату(ТекущийОбъект, ТекущаяДата(), ДатаКрайняя);
				//флЕстьИзменения    = Истина;
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-17 (#2880)
			КонецЕсли;
		КонецЕсли;
		
		Если Запись.АктивнаяВиза <> СтрокаТаблицы.АктивнаяВиза Тогда
			Запись.АктивнаяВиза = СтрокаТаблицы.АктивнаяВиза;
			флЕстьИзменения     = Истина;
		КонецЕсли;
	КонецЦикла; // По набору виз.

	Если флЕстьИзменения И Записывать Тогда
		бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборВизы);
	КонецЕсли; 	
	
КонецПроцедуры

// Функция выполняет проведение/отмену проведения документа в зависимости от статуса документа. 
// Используется в режиме "ПроводитьПослеУтверждения".
// 
// Параметры:
//  ДокОбъект - ДокументОбъект.
//  МетаОбъект - ОбъектМетаданных.
//  ПроводитьПослеУтверждения - Булево.
//  РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция ПровестиВСтатусеУтверждено(ДокОбъект, МетаОбъект, ПроводитьПослеУтверждения, РежимСообщений) Экспорт
	
	флВыполнено = Ложь;
	Если ПроводитьПослеУтверждения 
		И бит_РаботаСМетаданными.ЕстьРеквизит("ОтправленНаСогласование", МетаОбъект)
		И ДокОбъект.ОтправленНаСогласование Тогда
		
		ПараметрыСтатуса = бит_Визирование.ПолучитьСтатусОбъекта(ДокОбъект.Ссылка);
		
		СтатусыОтклонения = Новый Массив;
		СтатусыОтклонения.Добавить(Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Отклонен);
		СтатусыОтклонения.Добавить(Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Отклонена);
		СтатусыОтклонения.Добавить(Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Отклонен);
		СтатусыОтклонения.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_Отклонен);
		
		СтатусыУтверждения = Новый Массив;
		СтатусыУтверждения.Добавить(Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Утвержден);
		СтатусыУтверждения.Добавить(Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Утверждена);
		СтатусыУтверждения.Добавить(Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Утвержден);
		СтатусыУтверждения.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_Утвержден);
		
		// ++ NB Отказ от экспортных свойств объектов со статусами.
		ТекущийСтатус = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДокОбъект.ДополнительныеСвойства,
							"ТекущийСтатус", ДокОбъект.мТекущийСтатус);
		
		Отклонен	= СтатусыОтклонения.Найти(ТекущийСтатус) <> Неопределено;
		Утвержден	= СтатусыУтверждения.Найти(ТекущийСтатус) <> Неопределено;
		БылУтвержден= СтатусыУтверждения.Найти(ПараметрыСтатуса.СтатусПредыдущий) <> Неопределено;
		
		ОбновитьДвижения = Ложь;
		Если ДокОбъект.Проведен И (Отклонен ИЛИ Утвержден ИЛИ БылУтвержден) Тогда
			ОбновитьДвижения = Истина;
		ИначеЕсли НЕ ДокОбъект.Проведен И НЕ Отклонен Тогда
			ОбновитьДвижения = Истина;
		КонецЕсли;
		
		Если ОбновитьДвижения Тогда
			флВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОбъект, РежимЗаписиДокумента.Проведение, "", РежимСообщений, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат флВыполнено;
	
КонецФункции

// Процедура выполняет первоначальное заполнение регистра сведений бит_ОбъектыМобильногоВизирования.
// 
// Параметры:
//  Нет.
// 
Процедура ЗаполнитьОбъектыМобильногоВизирования() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_ОбъектыМобильногоВизирования.ОбъектСистемы КАК ОбъектСистемы
	|ИЗ
	|	РегистрСведений.бит_ОбъектыМобильногоВизирования КАК бит_ОбъектыМобильногоВизирования";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбъектыВизирования =  ВизируемыеОбъектыСистемы();
		// ++ БП 
		НеиспользуемыеОбъекты = Новый Массив();
		НеиспользуемыеОбъекты.Добавить(Метаданные.Документы.бит_удалить_ВалютныйСвоп.ПолноеИмя());
		НеиспользуемыеОбъекты.Добавить(Метаданные.Документы.бит_СправкаОВалютныхОперациях.ПолноеИмя());
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ОбъектыВизирования);
		Запрос.УстановитьПараметр("НеиспользуемыеОбъекты", НеиспользуемыеОбъекты);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	бит_ОбъектыСистемы.Ссылка КАК ОбъектСистемы,
		|	бит_ОбъектыСистемы.Наименование КАК Синоним
		|ИЗ
		|	Справочник.бит_ОбъектыСистемы КАК бит_ОбъектыСистемы
		|ГДЕ
		|	бит_ОбъектыСистемы.Ссылка В(&Ссылка)
		|	И НЕ бит_ОбъектыСистемы.ИмяОбъектаПолное В (&НеиспользуемыеОбъекты)";
		// -- БП 
		
		Выборка = Запрос.Выполнить().Выбрать();
		НаборЗаписей = РегистрыСведений.бит_ОбъектыМобильногоВизирования.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьТекущийСтатус(ТиповойСтатус)

	// Удалить в совместимо.
	// ++ БП 
	Возврат Справочники.бит_СтатусыОбъектов.ПустаяСсылка();
	// -- БП 
	
КонецФункции

// Функция проверяет удовлетворяет ли объект визирования настройкам адресации роли. 
// Используется при формировании перечня ролевых виз.
// 
// Параметры:
//  ТекущийОбъект - ДокументСсылка, ДокументОбъект.
//  МетаОбъект    - ОбъектМетаданных.
//  Выборка       - ВыборкаИзРезультатаЗапроса.
//  КолОбъектов   - Число.
// 
// Возвращаемое значение:
//  флПодходит - Булево.
// 
Функция ПроверитьПринадлежностьОбъектаВизирования(ТекущийОбъект, МетаОбъект,  Выборка, КолОбъектов) 
	
	флПодходит = Истина;
	Для н = 1 По КолОбъектов Цикл
		
		Имя = Выборка["ИмяВида_"+н];
		ОбъектАдресации = Выборка["ОбъектАдресации_"+н];
		
		Если ЗначениеЗаполнено(Имя) Тогда
			
			СпособПроверки = Выборка["СпособПроверки_"+н];
			СпособПроверки = ?(НЕ ЗначениеЗаполнено(СпособПроверки), Перечисления.бит_СпособыПроверкиПринадлежностиОбъектаАдресации.Шапка, СпособПроверки);
			флПроверятьШапку = ?(СпособПроверки = Перечисления.бит_СпособыПроверкиПринадлежностиОбъектаАдресации.Шапка 
			                      ИЛИ СпособПроверки = Перечисления.бит_СпособыПроверкиПринадлежностиОбъектаАдресации.ШапкаТабличныеЧасти, Истина, Ложь);
			
			флПроверятьТабЧасть = ?(СпособПроверки = Перечисления.бит_СпособыПроверкиПринадлежностиОбъектаАдресации.ТабличныеЧасти 
			                         ИЛИ СпособПроверки = Перечисления.бит_СпособыПроверкиПринадлежностиОбъектаАдресации.ШапкаТабличныеЧасти, Истина, Ложь);					  
			
			Если флПроверятьШапку Тогда
				// Проверка в реквизитах шапки.
				Если бит_РаботаСМетаданными.ЕстьРеквизит(Имя, МетаОбъект) Тогда
					//флШапкаПодходит = ?(ТекущийОбъект[Имя] = Выборка["ОбъектАдресации_"+н], Истина, Ложь);
					Реквизит = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект, Имя);
					флШапкаПодходит = ?(Реквизит = Выборка["ОбъектАдресации_"+н], Истина, Ложь);
				Иначе
					флШапкаПодходит = Ложь;
				КонецЕсли; 
			КонецЕсли; // ФлПроверятьШапку. 						 
			
			// Проверка в табличных частях.
			флТабЧастьПодходит = Ложь;
			
			Если флПроверятьТабЧасть Тогда
				Для Каждого МетаТабЧасть Из МетаОбъект.ТабличныеЧасти Цикл
					Если бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(Имя ,МетаОбъект ,МетаТабЧасть.Имя) Тогда
						СтрОтбор = Новый Структура(Имя, ОбъектАдресации);
						//МассивСтрок = ТекущийОбъект[МетаТабЧасть.Имя].НайтиСтроки(СтрОтбор);
						ТЧ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект, МетаТабЧасть.Имя).Выгрузить();
						МассивСтрок = ТЧ.НайтиСтроки(СтрОтбор);
						флТабЧастьПодходит = ?(МассивСтрок.Количество() > 0, Истина, Ложь);
						Если флТабЧастьПодходит Тогда
							Прервать;
						КонецЕсли; 
					КонецЕсли; 
				КонецЦикла;  // МетаОбъект.ТабличныеЧасти.
			КонецЕсли; // ФлПроверятьТабЧасть.
			
			// Определяем удовлетворено ли условие проверки в зависимости от способа проверки.
			Если флПроверятьШапку И НЕ флПроверятьТабЧасть Тогда
				флПодходит = флШапкаПодходит;
			ИначеЕсли НЕ флПроверятьШапку И флПроверятьТабЧасть Тогда
				флПодходит = флТабЧастьПодходит;
			ИначеЕсли флПроверятьШапку И флПроверятьТабЧасть Тогда	
				флПодходит = флШапкаПодходит ИЛИ флТабЧастьПодходит;
			КонецЕсли; 
			
			Если НЕ флПодходит Тогда
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; // По объектам адресации.
	
	Возврат флПодходит;
	
КонецФункции

// Функция вычисляет крайнюю дату установки визы на основании данных производственного календаря.
// 
// Параметры:
// 	ТекущийОбъект - 
// 	ТекущаяДата - Дата. 
// 	ДатаКрайняя - Дата - дата, полученная на основании текущей даты 
//  					и времени на установку визы, без учета данных календаря.
// 
// Возвращаемое значение:
// 	Дата - дата полученная из каледаря или ДатаКрайняя.
// 
Функция ПолучитьКрайнююДату(ТекущийОбъект, ТекущаяДата, ДатаКрайняя)
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-01 (#2873)
Экспорт
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-01 (#2873)

	МетаОбъект = ТекущийОбъект.Метаданные();
	
	ЕстьОрганизация = бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаОбъект);
	ЕстьЦФО			= бит_РаботаСМетаданными.ЕстьРеквизит("ЦФО", МетаОбъект);
	
	// Получим настройки программы.
	СтруктураПараметров = Новый Структура;
	
	Если ЕстьОрганизация Тогда
		СтруктураПараметров.Вставить("Организация", ТекущийОбъект.Организация);
	КонецЕсли;
	Если ЕстьЦФО Тогда
		СтруктураПараметров.Вставить("ЦФО", ТекущийОбъект.ЦФО);
	КонецЕсли;

	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ТекущийОбъект.Дата,,СтруктураПараметров,"Ошибки");
	
	ИмяНастройкиКалендарь	 = ПланыВидовХарактеристик.бит_НастройкиПрограммы.Календарь;
	ИмяНастройкиИспользовать = ПланыВидовХарактеристик.бит_НастройкиПрограммы.ИспользоватьКалендарьДляРасчетаКрайнейДаты;
	
	ИспользоватьКалендарь = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ИмяНастройкиИспользовать);
	
	Календарь = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ИмяНастройкиКалендарь);
	
	Если НЕ ИспользоватьКалендарь
		ИЛИ НЕ ЗначениеЗаполнено(Календарь) Тогда
		
		Возврат ДатаКрайняя;
	КонецЕсли;
	
	РабочиеДни = Новый Массив;
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Календарь"		, Календарь);
	Запрос.УстановитьПараметр("РабочиеДни"		, РабочиеДни);
	Запрос.УстановитьПараметр("МинимальнаяДата"	, НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("МаксимальнаяДата", ДобавитьМесяц(ДатаКрайняя, 1));
			
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &Календарь
	|	И ДанныеПроизводственногоКалендаря.ВидДня В(&РабочиеДни)
	|	И ДанныеПроизводственногоКалендаря.Дата >= &МинимальнаяДата
	|	И ДанныеПроизводственногоКалендаря.Дата <= &МаксимальнаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
		
	Результат = Запрос.Выполнить();
	
	// Количество дней на установку визы, включая текущую дату
	// причем следует иметь ввиду, что если для визы время на установку составляет 1 час
	// 	а текущее время 23:40:31, то количество дней будет 2, т.к. крайняя дата перешла на следующий день.
	КоличествоДней = ((НачалоДня(ДатаКрайняя) - НачалоДня(ТекущаяДата)) /60/60/24) +1;
	
	ТаблицаДат = Результат.Выгрузить();
	
	// Данные календаря не охватывают интересующий нас промежуток времени.
	Если ТаблицаДат.Количество() < КоличествоДней Тогда
		// Оставляем все как есть.
		Возврат ДатаКрайняя;
	КонецЕсли;
	
	ДатаКрайняяПоКалендарю = ТаблицаДат[КоличествоДней-1].Дата;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-31 (#3020)
	//// Переносим только даты, время оставляем прежним.
	//ВремяОтНачалаДня = ДатаКрайняя - НачалоДня(ДатаКрайняя);
	//
	//ДатаКрайняяПоКалендарю = ДатаКрайняяПоКалендарю + ВремяОтНачалаДня;

	Если ТаблицаДат.Найти(НачалоДня(ТекущаяДата)) = Неопределено Тогда 
		ДатаКрайняяПоКалендарю = НачалоДня(ДатаКрайняяПоКалендарю);
	Иначе 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-31 (#3020)
		// Переносим только даты, время оставляем прежним.
		ВремяОтНачалаДня = ДатаКрайняя - НачалоДня(ДатаКрайняя);
		
		ДатаКрайняяПоКалендарю = ДатаКрайняяПоКалендарю + ВремяОтНачалаДня;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-31 (#3020)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-31 (#3020	
	
	Возврат ДатаКрайняяПоКалендарю;
	
КонецФункции

// Функция создает элемент справочника визы.
// 
Функция СоздатьВизу(НаименованиеВизы,Литера)
	
	НайденныйСпр = Справочники.бит_Визы.НайтиПоНаименованию(НаименованиеВизы);
	Если НЕ ЗначениеЗаполнено(НайденныйСпр) Тогда
		СпрОбъект = Справочники.бит_Визы.СоздатьЭлемент();
		СпрОбъект.Вид = Перечисления.бит_ВидыВиз.Утверждающая;
		СпрОбъект.ВидСвязи     = Перечисления.бит_ВидыСвязиВиз.ФизическоеЛицо;
		СпрОбъект.ОбъектСвязи  = Справочники.ФизическиеЛица.ПустаяСсылка();
		СпрОбъект.Наименование = НаименованиеВизы;
		СпрОбъект.Литера       = Литера;
		СпрОбъект.РежимПечати  = Перечисления.бит_РежимПечатиВиз.Виза;
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		СпрОбъект.УстановитьНовыйКод();
		СпрОбъект.Записать();	
		ТекущаяВиза = СпрОбъект.Ссылка;
	Иначе
		ТекущаяВиза = НайденныйСпр;
	КонецЕсли; 
	
	Возврат ТекущаяВиза;
	
КонецФункции

// Процедура выполняет сортировку набора 
// записей виз в соответствии с порядком виз в алгоритме визирования.
// 
// Параметры:
//  НаборЗаписейВизы - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы.
//  АлгоритмВизирования - СправочникСсылка.бит_уп_АлгоритмыПроцессов.
// 
Процедура УпорядочитьНаборВиз(НаборЗаписейВизы, АлгоритмВизирования)
	
	ТаблицаВизы = НаборЗаписейВизы.Выгрузить();
	
	ТаблицаВизы.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
	локТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(АлгоритмВизирования,ТаблицаВизы);
	
	// Таблица для расположения точек алгоритма в порядке отрисовки.
	ТаблицаПозиций = Новый ТаблицаЗначений;
	// Соответсвие для хранения местаположения точек в ТаблицеПозиций.
	Позиции = Новый Соответствие;
	
	// Разместим точки алгоритма в ТаблицеПозиций.
	бит_уп_Сервер.РазместитьТочкиАлгоритма(локТаблицаТочкиВизы,ТаблицаПозиций,Позиции,АлгоритмВизирования.РазмещениеСвободныхТочек);		
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-23 (#3393)
	СоотВизаПорядок = Новый Соответствие;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-23 (#3393)
	
	// Выполним обход ТаблицыПозиций сверху -> вниз слева -> направо 
	// и запомним порядок виз для последующей установки.
	номПорядка = 1;  // Начальное значение ставим большим, чтобы свободные визы были тоже отсортированы.
	Порядок = Новый Соответствие;
	Для Каждого СтрокаПоз Из ТаблицаПозиций Цикл
		Для Каждого КолонкаПоз Из ТаблицаПозиций.Колонки Цикл
			Тчк = СтрокаПоз[КолонкаПоз.Имя];
			Если ЗначениеЗаполнено(Тчк) Тогда
				СтрОтбор = Новый Структура;
				СтрОтбор.Вставить("Точка", Тчк);
				МассивНайденных = локТаблицаТочкиВизы.НайтиСтроки(СтрОтбор);
				Если МассивНайденных.Количество() > 0 Тогда
					СтрТочкиВизы = МассивНайденных[0];
					Если ЗначениеЗаполнено(СтрТочкиВизы.Виза) Тогда
						// Запоминаем порядок для визы.
						Порядок.Вставить(СтрТочкиВизы.ИД, номПорядка);
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-23 (#3393)
						СоотВизаПорядок.Вставить(СтрТочкиВизы.Виза, номПорядка);
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-23 (#3393)						
						номПорядка = номПорядка+1;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; // Заполнена точка в таблице позиций.
		КонецЦикла; // ТаблицаПозиций.Колонки.
	КонецЦикла; // ТаблицаПозиций.
	
	// Установка кодов сортировки в набор записей.
	Для Каждого Запись Из НаборЗаписейВизы Цикл
		Запись.КодСортировки = Порядок[Запись.ИД];
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-23 (#3393)		
		Если Запись.КодСортировки = 0 Тогда 
			Запись.КодСортировки = СоотВизаПорядок.Получить(Запись.Виза);
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-23 (#3393)		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура удаляет из набора визы, подчиненные визам по которым не принято решение.
// 
// Параметры:
//  ТаблицаТочкиВизы  - ТаблицаЗначений.
//  НаборВизы         - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы.
// 
Процедура УдалитьНижестоящиеВизы(ТаблицаТочкиВизы,НаборВизы)

	Для Каждого СтрокаТаблицы Из ТаблицаТочкиВизы Цикл
		Если СтрокаТаблицы.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие 
			 И ЗначениеЗаполнено(СтрокаТаблицы.Виза) 
			 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение) Тогда
		
			 // Нужно очистить визы соответствующие нижестоящим точкам.
			 МассивВиз = Новый Массив;
			 УрРек = 0;
			 НайтиНижестоящиеВизы(ТаблицаТочкиВизы,СтрокаТаблицы.Точка,МассивВиз,УрРек);
			 Если МассивВиз.Количество()>0 Тогда
				 УдалитьВизыПоМассиву(НаборВизы,МассивВиз);
			 КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; // По строкам таблицы точек.

КонецПроцедуры

// Процедура выполняет поиск виз, соответствующих нижестоящим точкам.
// 
// Параметры:
//  ТаблицаТочек    - ТаблицаЗначений.
//  ТочкаСтарт      - СправочникСсылка.бит_уп_ТочкиАлгоритмов.
//  МассивВиз       - Массив.
//  УровеньРекурсии - Число.
// 
Процедура НайтиНижестоящиеВизы(ТаблицаТочек,ТочкаСтарт,МассивВиз,УровеньРекурсии)
	
	Если УровеньРекурсии > 1000 Тогда
		ТекстСообщения = НСтр("ru = 'Превышен уровень рекурсии в процедуре НайтиНижестоящиеВизы().'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;	

	Для Каждого СтрокаИсходящие Из ТочкаСтарт.ИсходящиеТочки Цикл
		Если СтрокаИсходящие.Точка.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие Тогда
			СтрокаТаблицы = ТаблицаТочек.Найти(СтрокаИсходящие.Точка,"Точка");
			Если НЕ СтрокаТаблицы = Неопределено Тогда
				 Если ЗначениеЗаполнено(СтрокаТаблицы.Виза) Тогда
					 // Т.к. визы могут повторяться для обработки необходим ИД.
				 	МассивВиз.Добавить(СтрокаТаблицы.ИД);					
					СтрокаТаблицы.Виза = Справочники.бит_Визы.ПустаяСсылка();
				 КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		НайтиНижестоящиеВизы(ТаблицаТочек,СтрокаИсходящие.Точка,МассивВиз,УровеньРекурсии);
	КонецЦикла; // По исходящим точкам. 

КонецПроцедуры

// Процедура удаляет из набора визы, указанные в массиве.
// 
// Параметры:
//  НаборВизы  - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы.
//  МассивВиз  - Массив.
// 
Процедура УдалитьВизыПоМассиву(НаборВизы,МассивВиз)

	КоличествоНабор = НаборВизы.Количество();
	
	Для Сч = 1 По КоличествоНабор  Цикл
		 // Индекс с конца.
		 ЧислоЙ = КоличествоНабор-Сч;
		 ЗаписьВизы = НаборВизы[ЧислоЙ];
		 Для Каждого Элемент Из МассивВиз Цикл
			// Поиск по ИД, т.к. одна виза может встречаться несколько раз.
		 	Если Элемент = ЗаписьВизы.ИД Тогда
				НаборВизы.Удалить(ЗаписьВизы);
				Прервать;
			КонецЕсли; 
		 КонецЦикла; // По массиву виз.
	КонецЦикла; // По набору виз. 

КонецПроцедуры

Функция НовыеПараметрыСтатуса()

	ПараметрыСтатуса = Новый Структура;
	
	ПараметрыСтатуса.Вставить("Статус",			  Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	ПараметрыСтатуса.Вставить("СтатусПредыдущий", Справочники.бит_СтатусыОбъектов.ПустаяСсылка());	
	ПараметрыСтатуса.Вставить("Пользователь",	  Справочники.Пользователи.ПустаяСсылка());
	ПараметрыСтатуса.Вставить("Дата",			  Дата('00010101'));
	
	ПараметрыСтатуса.Вставить("ОплатаСтатус",		   	Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	ПараметрыСтатуса.Вставить("ОплатаСтатусПредыдущий",	Справочники.бит_СтатусыОбъектов.ПустаяСсылка());	
	ПараметрыСтатуса.Вставить("ОплатаПользователь",	   	Справочники.Пользователи.ПустаяСсылка());
	ПараметрыСтатуса.Вставить("ОплатаДата",				Дата('00010101'));
	
	Возврат ПараметрыСтатуса;

КонецФункции

//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103
//нужна для тестирования
Функция УстановитьРешениеЭкспортируемая(Ссылка, Пользователь, Решение, Комментарий = "") Экспорт
	Возврат УстановитьРешение(Ссылка, Пользователь, Решение, Комментарий);
КонецФункции	
//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103

#КонецОбласти

//+СБ Пискунова 01.03.2017 #2691 
Процедура СБ_УстановитьВизы(СтруктураОтбор
	                      ,ТекущийПользователь
						  ,ДатаУстановки
						  ,СписокВизПользователя
						  ,Безусловно = Ложь
						  ,Решение    = Неопределено,Инициатор
						//ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-03-29 (#3003)
						  ,Комментарий = "")   Экспорт
						//ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-03-29 (#3003)
	

	
						  РежимПоискаДоступных = ОпределитьРежимПоискаВиз(СписокВизПользователя);
						  флЕстьВсеВизы        = ?(СписокВизПользователя.НайтиПоЗначению(Справочники.бит_ГруппыВиз.ВсеВизы)=Неопределено,Ложь,Истина);	
						  НаборЗаписей         = ПрочитатьНаборВиз(СтруктураОтбор);
						  						  
							//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-02-22 (#3103)
							Если ТипЗнч(Комментарий) = Тип("Структура") Тогда
								 Если Комментарий.Свойство("ТекстНомераЗаявки") Тогда
									НаборЗаписей.ДополнительныеСвойства.Вставить("ТекстНомераЗаявки", Комментарий.ТекстНомераЗаявки);
								КонецЕсли;
								Комментарий.Свойство("Комментарий", Комментарий);
							КонецЕсли;	
							//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-02-22 (#3103)
	
						  Для каждого Запись Из НаборЗаписей Цикл
							  
							  Если флЕстьВсеВизы Тогда
								  Нашли = Истина;
							  Иначе	
								  Если ВРег(РежимПоискаДоступных) = "ИД" Тогда
									  Нашли = СписокВизПользователя.НайтиПоЗначению(Запись.ИД);
								  Иначе	
									  Нашли = СписокВизПользователя.НайтиПоЗначению(Запись.Виза);
								  КонецЕсли;
							  КонецЕсли; 
							  
							  Если Нашли <> Неопределено ИЛИ Безусловно Тогда
								  
								  Если Решение = Неопределено Тогда
									  ТекРешение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновноеРешениеСогласования", ТекущийПользователь);
									  Если НЕ ЗначениеЗаполнено(ТекРешение) Тогда
										  
										  ТекРешение = Справочники.бит_ВидыРешенийСогласования.Согласовано;
										  
									  КонецЕсли; 
								  Иначе	
									  ТекРешение = Решение;
								  КонецЕсли; 
								  
								  Если ЗначениеЗаполнено(ТекРешение)  Тогда
									  
									  // Устанавливает только если значение еще не установлено.
									  Если НЕ ЗначениеЗаполнено(Запись.Решение) и Запись.ФизическоеЛицо = Инициатор Тогда
										  
										  Запись.Решение       = ТекРешение;
										  Запись.Пользователь  = ТекущийПользователь;
										  Запись.ДатаУстановки = ДатаУстановки;
										  //ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-03-29 (#3003)
										  Запись.Комментарий 	 = Комментарий;
										  //ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-03-29 (#3003)
									  КонецЕсли; 
									  
										//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-03-23 (#3103)
										Если Безусловно И Запись.ФизическоеЛицо = Инициатор Тогда
											Запись.Комментарий 	 = Комментарий;
											Запись.Решение       = ТекРешение;
										КонецЕсли;	
										//ОКЕЙ Наумов А.Н. (СофтЛаб) Конец 2019-03-23 (#3103)
										
								  Иначе   
									  Если  Запись.ФизическоеЛицо = Инициатор Тогда
										  // Очищаем безусловно
										  Запись.Решение       = ТекРешение;
										  Запись.Пользователь  = Справочники.Пользователи.ПустаяСсылка();
										  Запись.ДатаУстановки = Дата("00010101");
									  КонецЕсли;
								  КонецЕсли; 
								  
							  КонецЕсли; 
							  
						  КонецЦикла; 
						  бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей);
						  
						  //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)
						  РанееПринятыеРешения = НаборЗаписей.Выгрузить(,"ФизическоеЛицо,Решение,Пользователь");
						  РанееПринятыеРешения.Свернуть("ФизическоеЛицо,Решение,Пользователь");
						  ИндексРешений = РанееПринятыеРешения.Количество()-1;
						  Пока ИндексРешений >=0 Цикл 
							  Если Не ЗначениеЗаполнено(РанееПринятыеРешения[ИндексРешений].ФизическоеЛицо) ИЛИ
								  Не ЗначениеЗаполнено(РанееПринятыеРешения[ИндексРешений].Решение) ИЛИ
								  Не ЗначениеЗаполнено(РанееПринятыеРешения[ИндексРешений].Пользователь)
								  Тогда 
								  РанееПринятыеРешения.Удалить(ИндексРешений); 				
							  КонецЕсли;
							  ИндексРешений = ИндексРешений - 1;
						  КонецЦикла;      
						  //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-15 (#2873)
						  
						  //Добавим отдельно визы заместителя 
						  Запрос = Новый Запрос;
						  Запрос.Текст = 
						  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	бит_НазначенныеЗаместители.Состояние КАК Состояние,
						  |	ВЫБОР
						  |		КОГДА бит_НазначенныеЗаместители.Виза ССЫЛКА Справочник.бит_Визы
						  |			ТОГДА бит_НазначенныеЗаместители.Виза
						  |		ИНАЧЕ бит_ГруппыВизВизыГруппы.Виза
						  |	КОНЕЦ КАК Виза,
						  |	бит_НазначенныеЗаместители.Заместитель КАК Заместитель,
						  |	бит_НазначенныеЗаместители.ДатаНачала КАК ДатаНачала,
						  |	бит_НазначенныеЗаместители.ДатаОкончания КАК ДатаОкончания,
						  |	бит_НазначенныеЗаместители.Пользователь КАК Пользователь,
						  |	бит_БК_Инициаторы.Ссылка КАК Инициатор
						  |ПОМЕСТИТЬ ВТ_ЗаместителиИВизы
						  |ИЗ
						  |	РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
						  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
						  |		ПО бит_НазначенныеЗаместители.Виза = бит_ГруппыВизВизыГруппы.Ссылка
						  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
						  |		ПО бит_НазначенныеЗаместители.Заместитель = бит_БК_Инициаторы.Пользователь
						  |ГДЕ
						  |	бит_НазначенныеЗаместители.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен)
						  |	И бит_НазначенныеЗаместители.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
						  |	И бит_НазначенныеЗаместители.ДатаНачала <= &ДатаДок
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
						  |	ВТ_ЗаместителиИВизы.Виза КАК Виза,
						  |	бит_УстановленныеВизы.ФизическоеЛицо КАК ФизическоеЛицо,
						  |	бит_УстановленныеВизы.Объект КАК Объект,
						  |	бит_УстановленныеВизы.Решение КАК Решение,
						  |	бит_УстановленныеВизы.КодСортировки КАК КодСортировки,
						  |	бит_УстановленныеВизы.ИД
						  |ИЗ
						  |	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
						  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
						  |		ПО бит_УстановленныеВизы.Виза = ВТ_ЗаместителиИВизы.Виза
						  |			И бит_УстановленныеВизы.ФизическоеЛицо.Пользователь = ВТ_ЗаместителиИВизы.Пользователь
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_РегистрацияСобытийОповещений.СрезПоследних(, Объект = &Объект) КАК бит_фн_РегистрацияСобытийОповещенийСрезПоследних
						  |		ПО бит_УстановленныеВизы.Виза = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Виза
						  |			И бит_УстановленныеВизы.Объект = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Объект
						  |ГДЕ
						  |	(ВТ_ЗаместителиИВизы.Инициатор = &ФизическоеЛицо
						  |			ИЛИ ВТ_ЗаместителиИВизы.Заместитель = &ФизическоеЛицо)
						  |	И бит_УстановленныеВизы.Объект = &Объект
						  //ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-08 (#3997)
						  //|	И бит_фн_РегистрацияСобытийОповещенийСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза)
						  | И (&ЭтоВходящийДокумент ИЛИ бит_фн_РегистрацияСобытийОповещенийСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза))
						  //ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-08 (#3997) 
						  |	И бит_УстановленныеВизы.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.)";
						  
						  //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-13 (#2873)						  
						  //Запрос.УстановитьПараметр("ДатаДок", СтруктураОтбор.Объект.Ссылка.Дата);
						  //Заменено на:
						  Запрос.УстановитьПараметр("ДатаДок", ТекущаяДата());
						  //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-13 (#2873)
						  Запрос.УстановитьПараметр("Объект", СтруктураОтбор.Объект.Ссылка);
						  Запрос.УстановитьПараметр("ФизическоеЛицо", Инициатор);
						  //ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
						  Запрос.УстановитьПараметр("ЭтоВходящийДокумент", ТипЗнч(Запрос.Параметры.Объект) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий"));
						  //ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 
						  
						  РезультатЗапроса = Запрос.Выполнить();
						  
						  ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						  
						  
						  Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							  //СтруктураОтборЗам = Новый Структура;
							  //СтруктураОтборЗам.Вставить("Виза",ВыборкаДетальныеЗаписи.Виза);
							  //СтруктураОтборЗам.Вставить("ИД",ВыборкаДетальныеЗаписи.ИД);
							  //СтруктураОтборЗам.Вставить("Объект",СтруктураОтбор.Объект);
							  
							  НаборЗаписей         = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
							  НаборЗаписей.Отбор.Виза.Установить(ВыборкаДетальныеЗаписи.Виза);
							  НаборЗаписей.Отбор.ИД.Установить(ВыборкаДетальныеЗаписи.ИД);
							  НаборЗаписей.Отбор.Объект.Установить(СтруктураОтбор.Объект);
							  НаборЗаписей.Прочитать();
							  
							  //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)
						  	  НаборЗаписей.ДополнительныеСвойства.Вставить("РанееПринятыеРешения",РанееПринятыеРешения);
							  //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)
							  
							  Для каждого Запись Из НаборЗаписей Цикл
								  Если Запись.Виза = ВыборкаДетальныеЗаписи.Виза и Запись.ФизическоеЛицо = ВыборкаДетальныеЗаписи.ФизическоеЛицо Тогда
									  Если ЗначениеЗаполнено(ТекРешение)  Тогда
										  
										  // Устанавливает только если значение еще не установлено.
										  Если НЕ ЗначениеЗаполнено(Запись.Решение) и Запись.ФизическоеЛицо = ВыборкаДетальныеЗаписи.ФизическоеЛицо Тогда
											  
											  Запись.Решение       = ТекРешение;
											  Запись.Пользователь  = ТекущийПользователь;
											  Запись.ДатаУстановки = ДатаУстановки;
											  
										  КонецЕсли; 
										  
									  Иначе   
										  
										  // Очищаем безусловно
										  Запись.Решение       = ТекРешение;
										  Запись.Пользователь  = Справочники.Пользователи.ПустаяСсылка();
										  Запись.ДатаУстановки = Дата("00010101");
										  
									  КонецЕсли;
									  //ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-03-29 (#3003)
									  Запись.Комментарий = Комментарий;
									  //ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-03-29 (#3003)
									  НаборЗаписей.Записать();
								  КонецЕсли;
							  КонецЦикла;
							  

						  КонецЦикла;	
						  
						  НаборЗаписей         = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
						  //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-18 (#2873)
						  НаборЗаписей.ДополнительныеСвойства.Вставить("ПерезаписатьПринудительно", Истина);
						  //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-18 (#2873)
						  НаборЗаписей.Отбор.Объект.Установить(СтруктураОтбор.Объект);
						  НаборЗаписей.Прочитать();
						  НаборЗаписей.Записать();
							  //
	
КонецПроцедуры // УстановитьВизы()
//-СБ Пискунова 01.03.2017 #2691 
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-15 (#3393)
//Функция ПроверитьОтклоненияПоВизам(ОбъектВизирования) Экспорт 
//Заменено на:
Функция ПроверитьОтклоненияПоВизам(ОбъектВизирования, НеОтбиратьПоТочкамИсключениям = Истина) Экспорт 
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-15 (#3393)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-15 (#3393)
	//"ВЫБРАТЬ
	//Заменено на:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-15 (#3393)	
	|	бит_УстановленныеВизы.Виза
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-15 (#3393)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_уп_ТочкиАлгоритмов.ПараметрыПроцесса КАК бит_уп_ТочкиАлгоритмовПараметрыПроцесса
	|		ПО бит_УстановленныеВизы.ТочкаАлгоритма = бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Ссылка
	|			И (бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Имя = ""НеОстанавливатьМаршрутПоОтклонено""
	|				И бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Значение = ИСТИНА)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-15 (#3393)
	|ГДЕ
	|	бит_УстановленныеВизы.Объект = &Объект
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-15 (#3393)
	|	И (&НеОтбиратьПоТочкамИсключениям
	|		ИЛИ бит_уп_ТочкиАлгоритмовПараметрыПроцесса.Ссылка ЕСТЬ NULL)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-15 (#3393)
	|	И бит_УстановленныеВизы.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.Отклонено)";
	
	Запрос.УстановитьПараметр("Объект", ОбъектВизирования);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-15 (#3393)
	Запрос.УстановитьПараметр("НеОтбиратьПоТочкамИсключениям", НеОтбиратьПоТочкамИсключениям);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-15 (#3393)
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат  НЕ РезультатЗапроса.Пустой();
КонецФункции

Процедура ВосстановитьСписокУстановленныхВручнуюВиз(Ссылка, МассивСохраняемых)
	
	НаборЗаписей = ПрочитатьНаборВиз(Новый Структура("Объект", Ссылка));
	
	Для Каждого СтрокаЗаписи Из МассивСохраняемых Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаЗаписи);
	КонецЦикла;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.Виза = Справочники.бит_Визы.бит_БК_Бюджетодержатель И НЕ ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
			Запись.ФизическоеЛицо = Ссылка.ОК_ОЦР;	
		КонецЕсли;
	КонецЦикла;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-08 (#2873)
	Если НЕ НаборЗаписей.Модифицированность() Тогда 
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-08 (#2873)		
	
	Попытка
		
		НаборЗаписей.Записать();
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать набор виз по причине' ")+ОписаниеОшибки();
		бит_ОбщегоНазначения.бит_Сообщить(ТекстСообщения,СтатусСообщения.Важное);
		
	КонецПопытки;
	
	
КонецПроцедуры

// BIT AMerkulov 25032015 ++
Функция ВыполнитьЗапросДляПолученияПравПоЗаявке(СписокВиз)  Экспорт

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	бит_ПраваУстановкиВиз.ПользовательскоеУсловие,
		               |	бит_ПраваУстановкиВиз.Виза,
		               |	бит_ПраваУстановкиВиз.Инициатор,
					   //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-17 (#3393)
					   |	бит_ПраваУстановкиВиз.Инициатор.Email,
					   //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-17 (#3393)
		               |	бит_ПраваУстановкиВиз.Пользователь
		               |ИЗ
		               |	РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
		               |ГДЕ
		               |	бит_ПраваУстановкиВиз.Виза В (&СписокВиз)";
		
		
		Запрос.УстановитьПараметр("СписокВиз",СписокВиз);
		
		Результат = Запрос.Выполнить().Выгрузить();
	

	Возврат Результат;
	
КонецФункции // ВыполнитьЗапросДляПолученияВизПользователя()

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-22 (#3393)
Функция ПолучитьНазначенногоИнициатора(СписокВиз) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие КАК ПользовательскоеУсловие,
	|	бит_ПраваУстановкиВиз.Виза КАК Виза,
	|	бит_ПраваУстановкиВиз.Инициатор КАК Инициатор,
	|	бит_ПраваУстановкиВиз.Инициатор.Email КАК ИнициаторEmail,
	|	бит_ПраваУстановкиВиз.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_ПраваУстановкиВиз
	|ИЗ
	|	РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
	|ГДЕ
	|	бит_ПраваУстановкиВиз.Виза В(&СписокВиз)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ПраваУстановкиВиз.Инициатор КАК Инициатор
	|ПОМЕСТИТЬ ВТ_ФинДир
	|ИЗ
	|	ВТ_ПраваУстановкиВиз КАК ВТ_ПраваУстановкиВиз
	|ГДЕ
	|	ВТ_ПраваУстановкиВиз.Инициатор <> ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_БК_Инициаторы.Ссылка КАК Инициатор,
	|	бит_БК_Инициаторы.Email КАК ИнициаторEmail,
	|	бит_НазначенныеЗаместители.Заместитель КАК Пользователь
	|ИЗ
	|	РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФинДир КАК ВТ_ФинДир
	|		ПО бит_НазначенныеЗаместители.Пользователь = ВТ_ФинДир.Инициатор.Пользователь
	|			И (бит_НазначенныеЗаместители.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
	|		ПО бит_НазначенныеЗаместители.Заместитель = бит_БК_Инициаторы.Пользователь
	|ГДЕ
	|	бит_НазначенныеЗаместители.Виза В(&СписокВиз)
	|	И бит_НазначенныеЗаместители.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	|	И бит_НазначенныеЗаместители.ДатаНачала <= &ТекущаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ФинДир.Инициатор,
	|	ВТ_ФинДир.Инициатор.Email,
	|	ВТ_ФинДир.Инициатор.Пользователь
	|ИЗ
	|	ВТ_ФинДир КАК ВТ_ФинДир";
	
	Запрос.УстановитьПараметр("СписокВиз"	,	СписокВиз);
	Запрос.УстановитьПараметр("ТекущаяДата"	,	ТекущаяДата());
	
	Результат = Запрос.Выполнить().Выгрузить();
		
	Возврат Результат;
	  
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-22 (#3393)

// BIT AMerkulov 11-02-2015 ++
Процедура СохранитьСписокУстановленныхВручнуюВиз(Ссылка, МассивСохраняемых)
	
	НаборЗаписей = ПрочитатьНаборВиз(Новый Структура("Объект", Ссылка));
	
	Для Каждого СтрокаЗаписи Из НаборЗаписей Цикл
		Если СтрокаЗаписи.ДобавленаВручную Тогда
			МассивСохраняемых.Добавить(СтрокаЗаписи);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-22 (#2877)
&НаСервере
Функция ПолучитьДоступныеТочкиАлгоритма(ТаблицаЗаписей) Экспорт
		
	ТаблицаЗаписей.Колонки.Добавить("Реквизит4", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписей.ЗаполнитьЗначения("ИСТИНА"  , "Реквизит4");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	ТаблицаЗаписей.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаписей.ЗаполнитьЗначения("ИСТИНА"  , "ДоступностьВизы");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )

	Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
	
	Для каждого СтрокаВизы Из ТаблицаЗаписей Цикл
		
		Если ЗначениеЗаполнено(СтрокаВизы.Алгоритм) Тогда
			
			Алгоритм = СтрокаВизы.Алгоритм;
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла; 
		
	Если Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка() Тогда 
		Возврат Новый Массив;
	КонецЕсли;
	
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);		
	
	локТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаЗаписей);		
	бит_уп_Сервер.ОпределитьДоступностьТочек(локТаблицаТочкиВизы,флВыполнятьПоэтапно);
			
	ТаблицаДоступныхТочек = локТаблицаТочкиВизы.Скопировать(Новый Структура("Доступность",Истина));

	Возврат ТаблицаДоступныхТочек.ВыгрузитьКолонку("Точка");	
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-22 (#2877)

//ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-03-29 (#3003)
//
Функция ОбработатьСообщениеОВыполненииЗадачи(Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения, ТаблицаДокументов)
	
	ДокументСсылка 	= ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
	//ВизаСсылка 		= ПредопределенноеЗначение("Справочник.бит_Визы.ПустаяСсылка");
	
	НачатьТранзакцию();
		
	Попытка
		
		// получаем документ
		ИдентификаторыДокумента = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(Сообщение, "*Задача:", 36);
		Если ИдентификаторыДокумента.Количество() = 0 Тогда // нет идентификатора
			
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
			Сообщение,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторДокумента,,
			ДокументСсылка);
			
			ОтправитьУведомлениеОбОшибке(
			Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторДокумента,
			ДокументСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		Если ИдентификаторыДокумента.Количество() > 1 Тогда // больше одного идентификатора
			
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
			Сообщение,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовДокумента,,
			ДокументСсылка);
			
			ОтправитьУведомлениеОбОшибке(
			Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовДокумента,
			ДокументСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		// вид документа
		ВидДокумента = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(Сообщение, "*МетаданныеЗадача:", 100);
		Если Не ВидДокумента.Количество() = 1 Тогда // некорректный вид документа
			
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
			Сообщение,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНекорректноУказанВидДокумента,,
			ДокументСсылка);
			
			ОтправитьУведомлениеОбОшибке(
			Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНекорректноУказанВидДокумента,
			ДокументСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		// необходимо строку ограничить, в ней не должно быть пробелов
		ВидДокумента = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВидДокумента[0], "_@");
		ВидДокумента = ВидДокумента[0];
		//Позиция = СтрНайти(ВидДокумента, " ");	
		//Если Позиция <> 0 Тогда
		//	ВидДокумента = Сред(ВидДокумента, 1, Позиция-1);
		//КонецЕсли;
		ДокументПоИдентификатору = Документы[СокрЛП(ВидДокумента)].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторыДокумента[0]));
		
		Если Не ОбщегоНазначения.СсылкаСуществует(ДокументПоИдентификатору) Тогда
			
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ДокументНеНайден,,
				ДокументСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
				Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ДокументНеНайден,
				ДокументСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		ДокументСсылка = ДокументПоИдентификатору;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-11 (#4054)
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
			И ДокументСсылка.ок_Статус <> ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-09 (#4123)
			мТекстСообщения = "Документ не находится на согласовании, решение инициатора не требуется :" + ДокументСсылка;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТекстСообщения);
			ЗаписьЖурналаРегистрации("ОбработатьСообщениеОВыполненииЗадачи", УровеньЖурналаРегистрации.Информация, , ,мТекстСообщения);
			ЗафиксироватьТранзакцию();
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-09 (#4123) 			
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-06 (#4235)
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, Перечисления.ок_РезультатВыполненияЗадачиПоПочте.СтатусДокументаНеИзменен,
				"Документ не находится на согласовании, решение инициатора не требуется",
				ДокументСсылка);
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-06 (#4235) 
			Возврат Истина;
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-11 (#4054) 
			
		//// проверка визы
		//ИдентификаторыВизы = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(Сообщение, "*Виза:", 36);
		//Если ИдентификаторыВизы.Количество() = 0 Тогда // нет идентификатора
		//	
		//	РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
		//	Сообщение,
		//	Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторВизы,,
		//	ДокументСсылка, ВизаСсылка);
		//	
		//	ОтправитьУведомлениеОбОшибке(
		//	Сообщение,
		//	Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторВизы,
		//	ДокументСсылка,
		//	КодЯзыкаИсполнителя);
		//	
		//	ЗафиксироватьТранзакцию();
		//	Возврат Истина;
		//	
		//КонецЕсли;
		//
		//Если ИдентификаторыВизы.Количество() > 1 Тогда // больше одного идентификатора
		//	
		//	РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
		//	Сообщение,
		//	Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовВизы,,
		//	ДокументСсылка, ВизаСсылка);
		//	
		//	ОтправитьУведомлениеОбОшибке(
		//	Сообщение,
		//	Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовВизы,
		//	ЗадачаСсылка,
		//	КодЯзыкаИсполнителя);
		//	
		//	ЗафиксироватьТранзакцию();
		//	Возврат Истина;
		//	
		//КонецЕсли;
		//
		//// получаем ссылку и проверяем ее наличие в базе
		//ВизаПоИдентификатору = Справочники.бит_Визы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторыВизы[0]));
		//
		//Если Не СсылкаСуществует(ВизаПоИдентификатору) Тогда
		//	
		//	РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
		//		Сообщение, Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВизаНеНайдена,,
		//		ДокументСсылка);
		//		
		//	ОтправитьУведомлениеОбОшибке(
		//		Сообщение,
		//		Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВизаНеНайдена,
		//		ЗадачаСсылка,
		//		КодЯзыкаИсполнителя);
		//	
		//	ЗафиксироватьТранзакцию();
		//	Возврат Истина;
		//	
		//КонецЕсли;
		//
		//ВизаСсылка = ВизаПоИдентификатору;
		
		// проверка ответа
		ИдентификаторыОтвета = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(Сообщение, "*Ответ:", 36);
		Если ИдентификаторыОтвета.Количество() = 0 Тогда
			
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторОтвета,,
				ДокументСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
				Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторОтвета,
				ДокументСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		Если ИдентификаторыОтвета.Количество() > 1 Тогда
			
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовОтвета,,
				ДокументСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
				Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовОтвета,
				ДокументСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		// получаем ссылку и проверяем ее наличие в базе
		ОтветПоИдентификатору = Справочники.бит_ВидыРешенийСогласования.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторыОтвета[0]));
		
		Если Не ОбщегоНазначения.СсылкаСуществует(ОтветПоИдентификатору) Тогда
			
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ОтветНеНайден,,
				ДокументСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
				Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ОтветНеНайден,
				ДокументСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		ОтветСсылка = ОтветПоИдентификатору;
		
		// инициатор
		ИдентификаторыИнициатора = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(Сообщение, "*Инициатор:", 36);
		Если Не ИдентификаторыИнициатора.Количество() = 1 Тогда // некорректный вид документа
			
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
			Сообщение,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНекорректноУказанИнициатор,,
			ДокументСсылка);
			
			ОтправитьУведомлениеОбОшибке(
			Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНекорректноУказанИнициатор,
			ДокументСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		// получаем ссылку и проверяем ее наличие в базе
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
		//ИнициаторПоИдентификатору = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторыИнициатора[0]));
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			ИнициаторПоИдентификатору = Справочники.бит_БК_Инициаторы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторыИнициатора[0]));	
		Иначе	
			ИнициаторПоИдентификатору = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторыИнициатора[0]));
		КонецЕсли;	
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
				
		Если Не ОбщегоНазначения.СсылкаСуществует(ИнициаторПоИдентификатору) Тогда
			
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ИнициаторНеНайден,,
				ДокументСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
				Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ИнициаторНеНайден,
				ДокументСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
		//Иначе
		//	ИнициаторПоИдентификатору = Справочники.бит_БК_Инициаторы.НайтиПоРеквизиту("Пользователь", ИнициаторПоИдентификатору);
		//	
		//	Если Не ОбщегоНазначения.СсылкаСуществует(ИнициаторПоИдентификатору) Тогда
		//	
		//		РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
		//			Сообщение, Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ИнициаторНеНайден,,
		//			ДокументСсылка);
		//			
		//		ОтправитьУведомлениеОбОшибке(
		//			Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
		//			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ИнициаторНеНайден,
		//			ДокументСсылка);
		//		
		//		ЗафиксироватьТранзакцию();
		//		Возврат Истина;
		//		
		//	КонецЕсли;
			
		КонецЕсли;
		
		ИнициаторСсылка = ИнициаторПоИдентификатору;
		
		// документ, ответ, инициатор найдены
		// попытка установить решение
		ТекстОкончанияКомментария = "________________________________________________";
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-19 (#4235)
		//НачальнаяПозицияКомментария = СтрНайти(Сообщение.Текст, "Комментарий:") + СтрДлина("Комментарий:");
		НачальнаяПозицияКомментария = 0;
		ПозицияКомментария = СтрНайти(Сообщение.Текст, "Комментарий:");
		Если ПозицияКомментария > 0 Тогда
			НачальнаяПозицияКомментария = ПозицияКомментария + СтрДлина("Комментарий:");
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-19 (#4235)
		КонечнаяПозицияКомментария = Найти(Сообщение.Текст, ТекстОкончанияКомментария);
		КоличествоСимволов = КонечнаяПозицияКомментария - НачальнаяПозицияКомментария;
		КомментарийВСообщении = Сред(Сообщение.Текст, НачальнаяПозицияКомментария, КоличествоСимволов);
		
		КомментарийВСообщении = СокрЛП(КомментарийВСообщении);
		
		Комментарий = КомментарийВСообщении + ?(ЗначениеЗаполнено(КомментарийВСообщении), "
		|", "") + " Решение установлено по почте.";
		
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-02-22 (#3103)
		ТекстНомерФВБ = "";
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-03 (#3997)
		НайденнаяФВБ = Неопределено;
		Если ОтветСсылка <> ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено")
			И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") 
			И Не ЗначениеЗаполнено(ДокументСсылка.ок_НомерЗаявки) Тогда 
	
			НомерФВБОбязательно = Ложь;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-03 (#3997) 
			
			НачальнаяПозицияНомерФВБ = СтрНайти(Сообщение.Текст, "Номер заявки:");
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-20 (#3780)
			Если НачальнаяПозицияНомерФВБ = 0 Тогда
				НачальнаяПозицияНомерФВБ = СтрНайти(Сообщение.Текст, "Номер заявки (ОБЯЗАТЕЛЬНО):");
				
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-03 (#3997)
				Если НачальнаяПозицияНомерФВБ > 0 Тогда
					НомерФВБОбязательно = Истина;
				КонецЕсли;			
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-03 (#3997) 
				
				НачальнаяПозицияНомерФВБ = НачальнаяПозицияНомерФВБ + СтрДлина(" (ОБЯЗАТЕЛЬНО)");
			КонецЕсли; 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-20 (#3780)
			Если Не НачальнаяПозицияНомерФВБ = 0 Тогда 
				НачальнаяПозицияНомерФВБ 	= НачальнаяПозицияНомерФВБ + СтрДлина("Номер заявки:");
				КонечнаяПозицияНомерФВБ		= СтрНайти(Сообщение.Текст, "Комментарий:", , НачальнаяПозицияНомерФВБ);
				КоличествоСимволов 			= КонечнаяПозицияНомерФВБ - НачальнаяПозицияНомерФВБ;
				ТекстНомерФВБ				= СокрЛП(Сред(Сообщение.Текст, НачальнаяПозицияНомерФВБ, КоличествоСимволов));
				ТекстНомерФВБ				= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("[]", ТекстНомерФВБ, "");
				//МассивНомерДатаФВБ			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстНомерФВБ, "\");
					
			КонецЕсли;
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-20 (#3780)
			// Если забыли указать номер заявки для ЭДВ с признаком "ок_ТребуетсяЗаявка1С", то необходимо отправить повторное письмо по шаблону.
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-21 (#3997)
			НайденнаяФВБ = Неопределено;
			Если ЗначениеЗаполнено(ТекстНомерФВБ)
				И НРег(ТекстНомерФВБ) <> НРег("ВвестиНомерЗаявки") Тогда
				
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-02 (#3997) 
				//НайденнаяФВБ = Документы.бит_ФормаВводаБюджета.НайтиПоНомеру(ТекстНомерФВБ);
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	бит_ФормаВводаБюджета.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
				|ГДЕ
				|	бит_ФормаВводаБюджета.Номер ПОДОБНО &Номер";
				
				Запрос.УстановитьПараметр("Номер", ТекстНомерФВБ + "%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НайденнаяФВБ = Выборка.Ссылка;
				КонецЕсли;			
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-02 (#3997) 
				
			КонецЕсли;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-21 (#3997)
					
			Если (НЕ ЗначениеЗаполнено(ТекстНомерФВБ)
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-21 (#3997)
					ИЛИ НайденнаяФВБ = Неопределено
					ИЛИ НайденнаяФВБ = ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка")
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-21 (#3997)	
					ИЛИ НРег(ТекстНомерФВБ) = НРег("ВвестиНомерЗаявки"))
				И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") 
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-03 (#3997) 
				И НомерФВБОбязательно
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-03 (#3997) 
				И ДокументСсылка.ок_ТребуетсяЗаявка1С Тогда
				
				Шаблон_НеУказанНомерЗаявки = ок_ОбменСКонтрагентамиВнутренний.УниверсальнаяНастройка("Согласование по почте", "Шаблон повторного согласования входящего электронного документа (Не указан номер заявки)");	
				Если Не ЗначениеЗаполнено(Шаблон_НеУказанНомерЗаявки) Тогда
					мТекстСообщения = "Не заполнена настройка: Согласование по почте/Шаблон повторного согласования входящего электронного документа (Не указан номер заявки)";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТекстСообщения);
					ЗаписьЖурналаРегистрации("ОбработатьСообщениеОВыполненииЗадачи", УровеньЖурналаРегистрации.Информация, , ,мТекстСообщения);
				Иначе
					
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-14 (#3997) 
					// проверка визы
					ИдентификаторыВизы = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(Сообщение, "*Виза:", 36);
					Если ИдентификаторыВизы.Количество() = 0 Тогда // нет идентификатора
						
						РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
						Сообщение,
						Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторВизы,,
						ДокументСсылка);
						
						ОтправитьУведомлениеОбОшибке(
						Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
						Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторВизы,
						ДокументСсылка);
												
						ЗафиксироватьТранзакцию();
						Возврат Истина;
						
					КонецЕсли;
					
					Если ИдентификаторыВизы.Количество() > 1 Тогда // больше одного идентификатора
						
						РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
						Сообщение,
						Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовВизы,,
						ДокументСсылка);
						
						ОтправитьУведомлениеОбОшибке(
						Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
						Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовВизы,
						ДокументСсылка);
												
						ЗафиксироватьТранзакцию();
						Возврат Истина;
						
					КонецЕсли;
					
					// получаем ссылку и проверяем ее наличие в базе
					ВизаПоИдентификатору = Справочники.бит_Визы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторыВизы[0]));
					
					Если Не ОбщегоНазначения.СсылкаСуществует(ВизаПоИдентификатору) Тогда
						
						РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
							Сообщение, Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВизаНеНайдена,,
							ДокументСсылка);
							
						ОтправитьУведомлениеОбОшибке(
							Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
							Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВизаНеНайдена,
							ДокументСсылка);
						
						ЗафиксироватьТранзакцию();
						Возврат Истина;
						
					КонецЕсли;
					
					ВизаСсылка = ВизаПоИдентификатору;
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-14 (#3997)

					//РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(ДокументСсылка, ИнициаторСсылка, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Полученное"), ИдентификаторыДокумента[0], Комментарий + Символы.ПС + "Инициатор не указал № заявки", , Сообщение.Тема, -1);
									
					Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ок_КомментарийДляСогласующего, ок_Комментатор");
					РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(ДокументСсылка, Реквизиты.ок_Комментатор, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Полученное"), ИдентификаторыДокумента[0], Комментарий + Символы.ПС + "Инициатор не указал № заявки", ОтветСсылка, Сообщение.Тема, -1, ИнициаторСсылка);			
					СообщениеОбОшибки = "";	
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
					//Отправлено = ок_ОбменСКонтрагентамиВнутренний.ОтправитьНаСогласованиеВходящийЭлектронныйДокумент(ДокументСсылка, Реквизиты.ок_КомментарийДляСогласующего, , Реквизиты.ок_Комментатор, Шаблон_НеУказанНомерЗаявки, "Отправлено автоматически РЗ");	
					Отправлено = ок_ОбменСКонтрагентамиВнутренний.ОтправитьПисьмоПоВходящемуЭлектронномуДокументу(ДокументСсылка, ВизаСсылка, Реквизиты.ок_КомментарийДляСогласующего, СообщениеОбОшибки, , Шаблон_НеУказанНомерЗаявки, "Отправлено автоматически РЗ", ИнициаторСсылка);	
					Если Не Отправлено Тогда
						ЗаписьЖурналаРегистрации("ОбработатьСообщениеОВыполненииЗадачи", УровеньЖурналаРегистрации.Ошибка, , ,СообщениеОбОшибки);
					КонецЕсли;					
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 
					
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-22 (#4235)
					РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
						Сообщение, Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанОбязательныйНомерЗаявки,
						"В сообщении не указан обязательный номер заявки",
						ДокументСсылка);
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-22 (#4235)
					ЗафиксироватьТранзакцию();
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли; 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-20 (#3780)
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-03 (#3997) 
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-03 (#3997) 
		
		КомментарийДляВизы = Новый Структура("Комментарий, ТекстНомераЗаявки", Комментарий, ТекстНомерФВБ);
		
		// установка решения
		//ВизыУстановлены = УстановитьРешение(ДокументСсылка, ИнициаторСсылка, ОтветСсылка, Комментарий);
		ВизыУстановлены = УстановитьРешение(ДокументСсылка, ИнициаторСсылка, ОтветСсылка, КомментарийДляВизы);
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-02-22 (#3103)
		
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
		// обновление переписки по ЭД и файлов вложений для пакета
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			// история переписки, запишем полученное письмо
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-14 (#3997) 
			//РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(ДокументСсылка, ИнициаторСсылка, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Полученное"), ИдентификаторыДокумента[0], Комментарий, , Сообщение.Тема);
			РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(ДокументСсылка, ИнициаторСсылка, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Полученное"), ИдентификаторыДокумента[0], Комментарий, ОтветСсылка, Сообщение.Тема,,ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ок_Комментатор"));
			
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("Объект",ДокументСсылка);

			НаборВизы = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);	
			ДовыполнитьАлгоритмВизирования(ДокументСсылка, НаборВизы, Ложь);					    
			НаборВизы.Записать();
	
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ЗаписатьДокумент = Ложь;
			
			Если ЗначениеЗаполнено(КомментарийВСообщении) И ОтветСсылка = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено") Тогда
				ДокументОбъект.ок_ПричинаОтклоненияСогласования = ДокументОбъект.ок_ПричинаОтклоненияСогласования + Строка(ИнициаторСсылка) + " : " + КомментарийВСообщении + Символы.ПС;
				ЗаписатьДокумент = Истина;
			КонецЕсли;
						
			Если Не ЗначениеЗаполнено(ДокументОбъект.ок_НомерЗаявки) И ЗначениеЗаполнено(НайденнаяФВБ) Тогда
				ДокументОбъект.ок_НомерЗаявки = НайденнаяФВБ;
				ЗаписатьДокумент = Истина;
			КонецЕсли;
			
			// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
			ДокументОбъект.Заблокировать();
			// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
			
			ДокументОбъект.УстановитьСтатус();
			
			Если ДокументОбъект.ок_Статус <> ДокументСсылка.Ок_Статус Тогда
				ЗаписатьДокумент = Истина;				
			КонецЕсли;			
			
			Если ЗаписатьДокумент Тогда
				ДокументОбъект.Записать();
			КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-14 (#3997)
			
			// запишем вложения
			Если Сообщение.Вложения.Количество() > 0 Тогда
				// получим номер и дату версии
				НомерВерсии = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(Сообщение, "*НомерВерсии:", 3);
				Если Не НомерВерсии.Количество() = 1 Тогда // некорректный вид документа
					                   
					РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.ок_РезультатВыполненияЗадачиПоПочте.Ошибка,,
					ДокументСсылка);
					
					ОтправитьУведомлениеОбОшибке(
					Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
					Перечисления.ок_РезультатВыполненияЗадачиПоПочте.Ошибка,
					ДокументСсылка);
					
					ЗафиксироватьТранзакцию();
					Возврат Истина;
					
				КонецЕсли;
				
				НомерВерсии = Число(НомерВерсии[0]);
				
				ДатаВерсии = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(Сообщение, "*ДатаВерсии:", 14);
				Если Не ДатаВерсии.Количество() = 1 Тогда // некорректный вид документа
					
					РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.ок_РезультатВыполненияЗадачиПоПочте.Ошибка,,
					ДокументСсылка);
					
					ОтправитьУведомлениеОбОшибке(
					Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
					Перечисления.ок_РезультатВыполненияЗадачиПоПочте.Ошибка,
					ДокументСсылка);
					
					ЗафиксироватьТранзакцию();
					Возврат Истина;
					
				КонецЕсли;
				
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
				//небезопасный код, поправлю...
				//ДатаВерсии = Дата(СокрЛП(ДатаВерсии[0]));
				ВремДатаВерсии = ДатаВерсии[0];
				ДатаВерсии = '00010101';
				Если Не ПустаяСтрока(ВремДатаВерсии) Тогда
					Попытка
						ДатаВерсии = Дата(СокрЛП(ВремДатаВерсии));
					Исключение
					КонецПопытки;	
				КонецЕсли;	
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
				
				// сохраним файлы от инициатора
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЭлектронныйДокумент", ДокументСсылка);
				СтруктураПараметров.Вставить("ДатаВерсии", ДатаВерсии);
				СтруктураПараметров.Вставить("НомерВерсии", НомерВерсии);
				СтруктураПараметров.Вставить("Пользователь", ИнициаторСсылка.Пользователь);
				ок_ОбменСКонтрагентамиВнутренний.ДобавитьФайлыОтИнициатора(Сообщение, СтруктураПараметров); 
				
			КонецЕсли;	
		КонецЕсли;	
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
		
		Если ВизыУстановлены Тогда
			
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение, 
					Перечисления.ок_РезультатВыполненияЗадачиПоПочте.Выполнена,
					Комментарий,
					ДокументСсылка);
					
					
			// фиксация транзакции
			ЗафиксироватьТранзакцию();
			// дошли до корректного выполнения визирования
			// необходимо обновить статус документа (если виза последняя)
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-02-22 (#3103)
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-02-22 (#3103)
				Если ЗначениеЗаполнено(ДокументСсылка) И ТаблицаДокументов.Найти(ДокументСсылка, "Документ") = Неопределено Тогда
					ТаблицаДокументов.Добавить().Документ = ДокументСсылка;
				КонецЕсли;
			
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-23 (#3003)
				бит_ФормаВводаБюджетаВызовСервера.ОтправитьСообщениеИнициаторуОСменеСтатуса(ДокументСсылка);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-23 (#3003)
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-02-22 (#3103)
			КонецЕсли;
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-02-22 (#3103)
			Возврат Истина;
			
		Иначе // для пользовтеля не нашли визы
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВизаНеНайдена,,
				ДокументСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
				Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВизаНеНайдена,
				ДокументСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
		КонецЕсли;	
			
	Исключение
		ОтменитьТранзакцию();
		РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
			Сообщение, 
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.Ошибка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ДокументСсылка);
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-19 (#4235)
		//Возврат Ложь;
		Возврат Истина; // Ошибки фиксируются в ЖР и в РС "ок_ПротоколВизированияПоПочте". Нет необходимости оставлять письмо с ошибкой в неопрочитанных, чтоб каждый раз натыкаться на это ошибку.
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-19 (#4235)
	КонецПопытки;
	
КонецФункции
	
Процедура РегламентноеЗаданиеПарсингПочтыСогласований() Экспорт
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-06 (#4235)
	ДатаНачалаРЗ = ТекущаяДата();
	СтруктураДляИнформацииПоРЗ = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
															Метаданные.РегламентныеЗадания.ОК_ПарсингПочтыСогласований.Синоним,
															Истина,
															Ложь,
															0);
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляИнформацииПоРЗ, Истина);
	
	ДополнительнаяИнформация = Новый Структура;
	ДополнительнаяИнформация.Вставить("КоличествоПолученныхПисем", 0);
	ДополнительнаяИнформация.Вставить("МассивИдентификаторовСообщений", Новый Массив);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-06 (#4235)
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОК_ПарсингПочтыСогласований);
	
	ДокументСсылка 	= ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
	ВизаСсылка 		= ПредопределенноеЗначение("Справочник.бит_Визы.ПустаяСсылка");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// очистим протокол от старых записей
	РегистрыСведений.ок_ПротоколВизированияПоПочте.ОчиститьРегистрОтУстаревшихЗаписей();
	
	// проверка настроек системы
	ИспользоватьСогласованияПоПочте = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Использовать согласования по почте", Ложь);
	Если НЕ ИспользоватьСогласованияПоПочте Тогда
		Возврат;
	КонецЕсли;
	
	АдресаУведомленийПротоколаИсполнения = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Список получателей протокола выполнения РЗ");
	Если ТипЗнч(АдресаУведомленийПротоколаИсполнения) = Тип("Строка") Тогда
		// распарсим
		АдресаУведомленийПротоколаИсполнения = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресаУведомленийПротоколаИсполнения);
	КонецЕсли;
	
	УчетнаяЗаписьПочты = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Учетная запись почты согласований");
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
	ПараметрыЧтенияПисем = Новый Структура;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-11-25 (#3548)
	//ПараметрыЧтенияПисем.Вставить("ГлубинаПоиска", 2);
	//ПараметрыЧтенияПисем.Вставить("МаксимальныйРазмерПисьма", 5); // в Мб
	//Заменено на:
	ПараметрыЧтенияПисем.Вставить("ГлубинаПоиска", бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Глубина поиска писем", 2));
	ПараметрыЧтенияПисем.Вставить("МаксимальныйРазмерПисьма", бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Максимальный размер письма (Мб)", 5));
	ПараметрыЧтенияПисем.Вставить("АдресаУведомленийПротоколаИсполнения", АдресаУведомленийПротоколаИсполнения);
		
	Если ЗначениеЗаполнено(УчетнаяЗаписьПочты) Тогда
		
		// получим настройку
		Если ТипЗнч(УчетнаяЗаписьПочты) = Тип("СправочникСсылка.бит_фн_НастройкиДоставкиОповещений") Тогда
			УчетнаяЗаписьПочты = Справочники.бит_фн_НастройкиДоставкиОповещений.ПолучитьЗначениеНастройки(УчетнаяЗаписьПочты, "EMAILУчетнаяЗапись");
		КонецЕсли;	

		Если ЗначениеЗаполнено(УчетнаяЗаписьПочты) Тогда
			ПараметрыЧтенияПисем.Вставить("УчетнаяЗапись", УчетнаяЗаписьПочты);
			// получим письма и их распарсим
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-06 (#4235)
			//ПолучитьОбработатьПисьмаПоСогласованию(ПараметрыЧтенияПисем);
			ПолучитьОбработатьПисьмаПоСогласованию(ПараметрыЧтенияПисем, ДополнительнаяИнформация);
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-06 (#4235)
		КонецЕсли;	
	КонецЕсли;
	
	// согласование ЭДО
	УчетнаяЗаписьПочты = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Учетная запись почты согласований ЭДО");
	Если ЗначениеЗаполнено(УчетнаяЗаписьПочты) Тогда
		
		// получим настройку
		Если ТипЗнч(УчетнаяЗаписьПочты) = Тип("СправочникСсылка.бит_фн_НастройкиДоставкиОповещений") Тогда
			УчетнаяЗаписьПочты = Справочники.бит_фн_НастройкиДоставкиОповещений.ПолучитьЗначениеНастройки(УчетнаяЗаписьПочты, "EMAILУчетнаяЗапись");
		КонецЕсли;

		Если ЗначениеЗаполнено(УчетнаяЗаписьПочты) Тогда
			ПараметрыЧтенияПисем.Вставить("УчетнаяЗапись", УчетнаяЗаписьПочты);
			// получим письма и их распарсим
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-06 (#4235)
			//ПолучитьОбработатьПисьмаПоСогласованию(ПараметрыЧтенияПисем);
			ПолучитьОбработатьПисьмаПоСогласованию(ПараметрыЧтенияПисем, ДополнительнаяИнформация);
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-06 (#4235)
		КонецЕсли;
		
	КонецЕсли;	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)	
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-07-22 (#3787)
	//теперь в отдельном регзадании
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	//ок_ОбменСКонтрагентамиВнутренний.ОтправитьПовторныеПисьмаНаСогласованиеВходящихЭлектронныхДокументов();
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-07-22 (#3787)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-06 (#4235)
	ДополнитьДополнительнуюИнформациюИзПротоколаВизирования(ДополнительнаяИнформация);
	
	ТекстИнформации = "Количество полученных писем: %1"
					"|Количество прочитанных писем: %2"
					"|Количество писем с ошибками: %3"
					"|Количество писем Спам: %4";
	
	ТекстИнформации = СтрШаблон(ТекстИнформации, ДополнительнаяИнформация.КоличествоПолученныхПисем, 
												ДополнительнаяИнформация.КоличествоПрочитанных,
												ДополнительнаяИнформация.КоличествоСОшибками,
												ДополнительнаяИнформация.КоличествоСпам);

	СтруктураДляИнформацииПоРЗ = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
															Метаданные.РегламентныеЗадания.ОК_ПарсингПочтыСогласований.Синоним,
															Истина,
															Ложь,
															ДополнительнаяИнформация.КоличествоПолученныхПисем);

	СтруктураДляИнформацииПоРЗ.Вставить("ДопИнформация", ТекстИнформации);
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляИнформацииПоРЗ, Ложь);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-06 (#4235)
	
КонецПроцедуры

//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-06 (#4235)
//Процедура ПолучитьОбработатьПисьмаПоСогласованию(ПараметрыЧтенияПисем)
Процедура ПолучитьОбработатьПисьмаПоСогласованию(ПараметрыЧтенияПисем, ДополнительнаяИнформация)
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-06 (#4235)
	
	УчетнаяЗаписьПочты 						= ПараметрыЧтенияПисем.УчетнаяЗапись; 
	АдресаУведомленийПротоколаИсполнения	= ПараметрыЧтенияПисем.АдресаУведомленийПротоколаИсполнения;
	// получение почты
	Письма = ЗагрузкаПочтовыхСообщений.ПрочитатьПисьма(ПараметрыЧтенияПисем);
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-06 (#4235)
	Если НЕ ДополнительнаяИнформация.Свойство("КоличествоПолученныхПисем")
		 ИЛИ ТипЗнч(ДополнительнаяИнформация.КоличествоПолученныхПисем) <> Тип("Число") Тогда
		ДополнительнаяИнформация.Вставить("КоличествоПолученныхПисем", 0);
	КонецЕсли;
	
	ДополнительнаяИнформация.КоличествоПолученныхПисем = ДополнительнаяИнформация.КоличествоПолученныхПисем + Письма.Количество();
	
	Если НЕ ДополнительнаяИнформация.Свойство("МассивИдентификаторовСообщений")
		 ИЛИ ТипЗнч(ДополнительнаяИнформация.МассивИдентификаторовСообщений) <> Тип("Массив") Тогда
		ДополнительнаяИнформация.Вставить("МассивИдентификаторовСообщений", Новый Массив);
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-06 (#4235)
	
	// дополним таблицу колонками
	Письма.Колонки.Добавить("Текст");
		
	БылиИзменения = Ложь;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ");
	ТаблицаДокументов.Индексы.Добавить("Документ");
	
	МассивСообщенийКУдалению = Новый Массив;
	
	Для Каждого Сообщение ИЗ Письма Цикл // обход писем на служебной почте
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-08 (#4235)
		ДополнительнаяИнформация.МассивИдентификаторовСообщений.Добавить(Сообщение.ИдентификаторСообщения);
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-08 (#4235)
		
		// обработаем текст письма
		ТекстПисьма = "";
		Для Каждого ОчереднойТекст ИЗ Сообщение.Тексты Цикл
			
			ТипТекста = ОчереднойТекст.Получить("ТипТекста");
			
			Если Не ТипТекста = Неопределено Тогда
				Если ТипЗнч(ТипТекста) = Тип("Строка") Тогда
					Если      ТипТекста = "HTML" Тогда
						ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
					ИначеЕсли ТипТекста = "RichText" Тогда
						ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
					Иначе
						ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
					КонецЕсли;
				ИначеЕсли ТипЗнч(ТипТекста) = Тип("ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем") Тогда
					Если      ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
						ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
						ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
					ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
						ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
					Иначе
						ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
					КонецЕсли;
				Иначе
					ТипТекста = ТипТекста;
				КонецЕсли;
			Иначе
				ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
			
			Если ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
				ТекстПисьма = ПолучитьТекстИзHTML(ОчереднойТекст.Получить("Текст"));
			Иначе
				ТекстПисьма = ОчереднойТекст.Получить("Текст");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстПисьма) Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Сообщение.Текст = ТекстПисьма;
		
		Если ОбработатьСообщениеОВыполненииЗадачи(Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения, ТаблицаДокументов) Тогда
			МассивСообщенийКУдалению.Добавить(Сообщение.Идентификатор);
		КонецЕсли;	
					
	КонецЦикла;	
		
	//изменение статуса документа
	Для Каждого СтрокаДок Из ТаблицаДокументов Цикл
		Попытка
			СтрокаДок.Документ.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Запись);
		Исключение
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
			,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.СтатусДокументаНеИзменен,,
			СтрокаДок.Документ);
			
			ОтправитьУведомлениеОбОшибке(
			Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.СтатусДокументаНеИзменен,
			СтрокаДок.Документ);
		КонецПопытки;
	КонецЦикла;
	
	// для исключения повторного чтения писем необходимо их удалить из почтового ящика
	Если МассивСообщенийКУдалению.Количество() > 0 Тогда
		Попытка
			РегистрыСведений.ок_ПротоколВизированияПоПочте.УдалитьСообщенияИнтернетПочта(УчетнаяЗаписьПочты, МассивСообщенийКУдалению);
		Исключение
			РегистрыСведений.ок_ПротоколВизированияПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
			,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.Ошибка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			);
			
			ОтправитьУведомлениеОбОшибке(
			Сообщение, УчетнаяЗаписьПочты, АдресаУведомленийПротоколаИсполнения,
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.СтатусДокументаНеИзменен,
			ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)

// Возвращает строку в тексте сообщения после строки ЗаголовокПоля.
// 
Функция ПолучитьСтрокиСообщенияПоЗаголовкуПоля(Сообщение, ЗаголовокПоля, ДлинаСтроки)
	
	Результат 		= Новый Массив;
	НомерВхождения 	= 1;
	ТекстСообщения 	= СокрЛП(Сообщение.Текст);
	
	Пока НомерВхождения > 0 Цикл
		
		Позиция = СтрНайти(ТекстСообщения, ЗаголовокПоля,,, НомерВхождения);
		
		Если Позиция <> 0 Тогда
			ПодСтрока = СокрЛП(Сред(ТекстСообщения, Позиция + СтрДлина(ЗаголовокПоля), ДлинаСтроки));
			Если Не ПустаяСтрока(ПодСтрока) Тогда
				Результат.Добавить(ПодСтрока);
			КонецЕсли;	
			НомерВхождения = НомерВхождения + 1;
		Иначе
			НомерВхождения = -1; // Прекращение поиска - выход из цикла.
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразовывает HTML текст в текст
Функция ПолучитьТекстИзHTML(ТекстHTML) Экспорт
	
	Попытка
		
		HTMLФайл = Новый COMОбъект("htmlfile");
		HTMLФайл.Open("text/html");
		HTMLФайл.write(ТекстHTML);
		
		Текст = HTMLФайл.documentElement.document.body.innerText;
		
		Возврат Текст;
		
	Исключение
	КонецПопытки;
	
КонецФункции

//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
//Функция УстановитьРешение(Ссылка, Пользователь, Решение, Комментарий = "")
Функция УстановитьРешение(Ссылка, Ответственный, Решение, Комментарий = "")
//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)	
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.бит_БК_Инициаторы") Тогда
		Пользователь = Ответственный.Пользователь;
	Иначе 
		Пользователь = Ответственный;
	КонецЕсли;	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_НазначенныеЗаместители.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА бит_НазначенныеЗаместители.Виза ССЫЛКА Справочник.бит_Визы
	|			ТОГДА бит_НазначенныеЗаместители.Виза
	|		ИНАЧЕ бит_ГруппыВизВизыГруппы.Виза
	|	КОНЕЦ КАК Виза,
	|	бит_НазначенныеЗаместители.Заместитель КАК Заместитель,
	|	бит_НазначенныеЗаместители.ДатаНачала КАК ДатаНачала,
	|	бит_НазначенныеЗаместители.ДатаОкончания КАК ДатаОкончания,
	|	бит_НазначенныеЗаместители.Пользователь КАК Пользователь,
	|	бит_БК_Инициаторы.Ссылка КАК Инициатор
	|ПОМЕСТИТЬ ВТ_ЗаместителиИВизы
	|ИЗ
	|	РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
	|		ПО бит_НазначенныеЗаместители.Виза = бит_ГруппыВизВизыГруппы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
	|		ПО бит_НазначенныеЗаместители.Заместитель = бит_БК_Инициаторы.Пользователь
	|ГДЕ
	|	бит_НазначенныеЗаместители.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен)
	|	И бит_НазначенныеЗаместители.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	|	И бит_НазначенныеЗаместители.ДатаНачала <= &ДатаДок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_УстановленныеВизы.Виза КАК Виза,
	|	бит_УстановленныеВизы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	бит_УстановленныеВизы.Пользователь КАК Пользователь,
	|	бит_УстановленныеВизы.Объект КАК Объект,
	|	бит_УстановленныеВизы.Решение КАК Решение,
	|	бит_УстановленныеВизы.КодСортировки КАК КодСортировки
	|ПОМЕСТИТЬ ВТ_Визы
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	(бит_УстановленныеВизы.ФизическоеЛицо = &ФизическоеЛицо
	|			ИЛИ ВЫРАЗИТЬ(бит_УстановленныеВизы.ФизическоеЛицо КАК Справочник.бит_БК_Инициаторы).Пользователь = &ФизическоеЛицо)
	|	И бит_УстановленныеВизы.Объект = &Объект
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-26 (#3997) 
	|	И бит_УстановленныеВизы.Решение = Значение(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка)
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-26 (#3997) 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗаместителиИВизы.Виза,
	|	бит_УстановленныеВизы.ФизическоеЛицо,
	|	бит_УстановленныеВизы.Пользователь,
	|	бит_УстановленныеВизы.Объект,
	|	бит_УстановленныеВизы.Решение,
	|	бит_УстановленныеВизы.КодСортировки
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
	|		ПО бит_УстановленныеВизы.Виза = ВТ_ЗаместителиИВизы.Виза
	|			И (ВЫРАЗИТЬ(бит_УстановленныеВизы.ФизическоеЛицо КАК Справочник.бит_БК_Инициаторы).Пользователь = ВТ_ЗаместителиИВизы.Пользователь)
	|ГДЕ
	|	(ВТ_ЗаместителиИВизы.Инициатор = &ФизическоеЛицо
	|			ИЛИ ВТ_ЗаместителиИВизы.Заместитель = &ФизическоеЛицо)
	|	И бит_УстановленныеВизы.Объект = &Объект
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-26 (#3997) 
	|	И бит_УстановленныеВизы.Решение = Значение(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка)
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-26 (#3997) 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗаместителиИВизы.Виза,
	|	бит_УстановленныеВизы.ФизическоеЛицо,
	|	бит_УстановленныеВизы.Пользователь,
	|	бит_УстановленныеВизы.Объект,
	|	бит_УстановленныеВизы.Решение,
	|	бит_УстановленныеВизы.КодСортировки
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиЗаместителей
	|			ПО ВТ_ЗаместителиИВизы.Заместитель = ВТ_ЗаместителиЗаместителей.Пользователь
	|				И ВТ_ЗаместителиИВизы.Виза = ВТ_ЗаместителиЗаместителей.Виза
	|		ПО бит_УстановленныеВизы.Виза = ВТ_ЗаместителиИВизы.Виза
	|			И (ВЫРАЗИТЬ(бит_УстановленныеВизы.ФизическоеЛицо КАК Справочник.бит_БК_Инициаторы).Пользователь = ВТ_ЗаместителиИВизы.Пользователь)
	|			И (бит_УстановленныеВизы.Объект = &Объект)
	|			И (бит_УстановленныеВизы.Пользователь = ВТ_ЗаместителиИВизы.Инициатор.Пользователь
	|				ИЛИ бит_УстановленныеВизы.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|ГДЕ
	|	(ВТ_ЗаместителиЗаместителей.Инициатор = &ФизическоеЛицо
	|			ИЛИ ВТ_ЗаместителиЗаместителей.Заместитель = &ФизическоеЛицо)
	|	И бит_УстановленныеВизы.Объект = &Объект
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-26 (#3997) 
	|	И бит_УстановленныеВизы.Решение = Значение(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка)
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-26 (#3997) 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Визы.Виза КАК Виза,
	|	ВТ_Визы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Визы.Объект КАК Объект,
	|	ВТ_Визы.Решение КАК Решение,
	|	ВТ_Визы.КодСортировки КАК КодСортировки,
	|	бит_фн_РегистрацияСобытийОповещенийСрезПоследних.ВидСобытия КАК ВидСобытия,
	|	бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Пользователь КАК Пользователь
	|ИЗ
	|	ВТ_Визы КАК ВТ_Визы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_РегистрацияСобытийОповещений.СрезПоследних(
	|				,
	|				Объект = &Объект
	|					И ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза)) КАК бит_фн_РегистрацияСобытийОповещенийСрезПоследних
	|		ПО ВТ_Визы.Виза = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Виза
	|			И ВТ_Визы.Объект = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Объект
	|			И (ВЫРАЗИТЬ(ВТ_Визы.ФизическоеЛицо КАК Справочник.бит_БК_Инициаторы).Пользователь = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Пользователь)
	|ИТОГИ ПО
	|	ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", Пользователь);
	Запрос.УстановитьПараметр("ДатаДок", ТекущаяДата());	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Результат = Запрос.Выполнить();
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Объект",Ссылка);
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;	
	Иначе	
		
		//ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-25 (#3379)
		ЭтоФормаВводаБюджета = ТипЗнч(Ссылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета");
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-11-15 (#3393)
		//Если ЭтоФормаВводаБюджета Тогда
		//Заменено на:
		ЭтоККЗБ = ТипЗнч(Ссылка) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета");
		Если ЭтоФормаВводаБюджета 
		 ИЛИ ЭтоККЗБ
		Тогда     			
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-11-15 (#3393)		
		
			
			НаборВизы = ПрочитатьНаборВиз(СтруктураОтбор);			
			ТаблицаВизы = НаборВизы.Выгрузить();
			
			// Реквизит4 определяет доступность визы. Текст, т.к. в упр. форме нельзя сменить тип.
			ТаблицаВизы.Колонки.Добавить("Реквизит4",Новый ОписаниеТипов("Строка"));
			ТаблицаВизы.ЗаполнитьЗначения("ИСТИНА","Реквизит4");
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
			ТаблицаВизы.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
			ТаблицаВизы.ЗаполнитьЗначения("ИСТИНА"  , "ДоступностьВизы");
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
		
			Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
			
			Для каждого СтрокаВизы Из ТаблицаВизы Цикл
				
				Если ЗначениеЗаполнено(СтрокаВизы.Алгоритм) Тогда
					
					Алгоритм = СтрокаВизы.Алгоритм;
					Прервать;
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			локТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы);
			
			// Определяем, какие точки алгоритма доступны.
			флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);	
			бит_уп_Сервер.ОпределитьДоступностьТочек(локТаблицаТочкиВизы,флВыполнятьПоэтапно);
		КонецЕсли;
		//ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-25 (#3379)
		
		
		ВыборкаИнициаторы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИнициаторы.Следующий() Цикл 
			
			Выборка = ВыборкаИнициаторы.Выбрать();
			
			СписокВизПользователя = Новый  СписокЗначений;
			
			Пока Выборка.Следующий() Цикл
				//ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-25 (#3379)
				//СписокВизПользователя.Добавить(Выборка.Виза);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-11-15 (#3393)
				//Если ЭтоФормаВводаБюджета Тогда
				//Заменено на:
				Если ЭтоФормаВводаБюджета 
				 ИЛИ ЭтоККЗБ
				Тогда
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-11-15 (#3393)
				
					СтрокаТаблицы = локТаблицаТочкиВизы.Найти(Выборка.Виза,"Виза");
					Если НЕ СтрокаТаблицы = Неопределено Тогда
						Если СтрокаТаблицы.Доступность Тогда
							СписокВизПользователя.Добавить(Выборка.Виза);
						КонецЕсли;
					КонецЕсли;
				Иначе
					СписокВизПользователя.Добавить(Выборка.Виза);
				КонецЕсли;
				//ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-25 (#3379)
			КонецЦикла;
			
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-03-23 (#3103)
			//СБ_УстановитьВизы(СтруктураОтбор, Пользователь, ТекущаяДатаСеанса(), СписокВизПользователя, Ложь, Решение, ВыборкаИнициаторы.ФизическоеЛицо, Комментарий);
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-26 (#3997) 
			//Безусловно = ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий");
			//СБ_УстановитьВизы(СтруктураОтбор, Пользователь, ТекущаяДатаСеанса(), СписокВизПользователя, Безусловно, Решение, ВыборкаИнициаторы.ФизическоеЛицо, Комментарий);
			СБ_УстановитьВизы(СтруктураОтбор, Пользователь, ТекущаяДатаСеанса(), СписокВизПользователя, Ложь, Решение, ВыборкаИнициаторы.ФизическоеЛицо, Комментарий);
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-26 (#3997)
			
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-03-23 (#3103)
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции	

Процедура ОтправитьУведомлениеОбОшибке(Сообщение, УчетнаяЗаписьЭП, АдресаУведомленийПротоколаИсполнения, РезультатВизированияПоПочте, Документ)
	
	Если ТипЗнч(РезультатВизированияПоПочте) <>
		Тип("ПеречислениеСсылка.ок_РезультатВыполненияЗадачиПоПочте") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Документ)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(АдресаУведомленийПротоколаИсполнения) = Тип("Массив") Тогда
		Возврат; // не тот параметр
	ИначеЕсли АдресаУведомленийПротоколаИсполнения.Количество() = 0 Тогда
		Возврат; // отправлять не кому	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭП) Тогда
		Возврат;
	КонецЕсли;
	
	ТемаУведомления = НСтр("ru = 'Ошибка исполнения визирования по почте: '");
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ТемаУведомления = ТемаУведомления + Строка(Документ);
	Иначе
		ТемаУведомления = ТемаУведомления + НСтр("ru = 'документ не определен'");	
	КонецЕсли;
	
	Если РезультатВизированияПоПочте =
		Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ДокументНеНайден Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма о визировании возникла ошибка.
			|Не найден документ в базе данных.'");
			
	ИначеЕсли РезультатВизированияПоПочте =
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ИнициаторНеНайден
		ИЛИ РезультатВизированияПоПочте =
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНекорректноУказанИнициатор Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма о визировании возникла ошибка.
			|Не удалось определить исполнителя по визам.'");
			
	ИначеЕсли РезультатВизированияПоПочте =
		Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВизаНеНайдена Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма о визировании возникла ошибка.
			|Не найдены визы для исполнителя.'");
		
	ИначеЕсли РезультатВизированияПоПочте =
		Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ОтветНеНайден
		ИЛИ РезультатВизированияПоПочте =
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторОтвета
		ИЛИ РезультатВизированияПоПочте =
			Перечисления.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииУказаноНесколькоИдентификаторовОтвета Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма о визировании возникла ошибка.
			|Не удалось определить ответ-решение в письме от пользователя.'");
	Иначе
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма о визировании возникла ошибка.'");
		
	КонецЕсли;
	
	//ПоляЗаголовка = Новый Массив;
	//
	//Для Каждого Заголовок ИЗ Сообщение.ПоляЗаголовка Цикл
	//	Если Заголовок.Имя = "Message-Id" Тогда
	//		ЗаголовокInReplyTo = Новый Структура("ИмяПоля, ЗначениеПоля, СпособКодирования",
	//			"In-Reply-To",
	//			Заголовок.Значение,
	//			СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
	//			
	//		ПоляЗаголовка.Добавить(ЗаголовокInReplyTo);
	//	КонецЕсли;
	//КонецЦикла; 
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", ТемаУведомления);
	ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
	ПараметрыПисьма.Вставить("Кому", АдресаУведомленийПротоколаИсполнения);
	ПараметрыПисьма.Вставить("ТипТекста", ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст"));
	//ПараметрыПисьма.Вставить("ПоляЗаголовка", ПоляЗаголовка);
	ПараметрыПисьма.Вставить("ИдентификаторСообщения", Сообщение.ИдентификаторСообщения);
	
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗаписьЭП, ПараметрыПисьма, Неопределено);
	
	
КонецПроцедуры
//ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-03-29 (#3003)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-12 (#3393)
Процедура ИнициироватьВизуМаршрута(МассивИнициаторов, Документ, Виза, Алгоритм, ТаблицаНабора, СоотИнициаторВидРасхода = Неопределено) Экспорт
	
	Если СоотИнициаторВидРасхода = Неопределено Тогда 
		
		СоотИнициаторВидРасхода = Новый Соответствие;
		
	КонецЕсли;
	
	МассивСтрокНабора = ТаблицаНабора.НайтиСтроки(Новый Структура("Виза",Виза));
	
	Если МассивСтрокНабора.Количество() >0 Тогда
	
		ДобавитьВПервыйЗапись = МассивСтрокНабора.Количество() >= 1;
			
		сч = 0;
		Для Каждого Инициатор Из МассивИнициаторов Цикл 
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				МассивСтрокНабора[0].ФизическоеЛицо	= Инициатор; 
				МассивСтрокНабора[0].ОК_ВидРасхода = СоотИнициаторВидРасхода.Получить(Инициатор);				
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",Алгоритм);
				СтруктураПараметров.Вставить("КодСортировки",МассивСтрокНабора[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",МассивСтрокНабора[0].ТочкаАлгоритма); 
				СтруктураПараметров.Вставить("РасшифровкаУсловияОпределенияВизы",МассивСтрокНабора[0].ок_РасшифровкаУсловияОпределенияВизы); 
				СтруктураПараметров.Вставить("ОК_ВидРасхода", СоотИнициаторВидРасхода.Получить(Инициатор)); 
				
				ДобавитьВизу(ТаблицаНабора,Документ,СтруктураПараметров);
			КонецЕсли;
  	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСообщениеИнициаторуОСменеСтатуса_ККЗБ(Ссылка) Экспорт
	
	Шаблон = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Оповещения ККЗБ", "Шаблон оповещения инициатора");
		
    СтруктураКонтекста = ПолучитьСтруктуруКонтекстаДляПисьма_ККЗБ(Ссылка, Шаблон);
	
	ВыполнитьОтправкуОповещенияОСогласовании(СтруктураКонтекста);
										   
КонецПроцедуры
									   
Функция ПолучитьСтруктуруКонтекстаДляПисьма_ККЗБ(Ссылка, Шаблон, СтруктураКонтекста = Неопределено) Экспорт
	
	Перем СтруктураЗаполнения;
	
	Если СтруктураКонтекста = Неопределено Тогда 
		
		СтруктураКонтекста = Новый Структура("ФизическоеЛицоОЦР,РешениеОЦР,ФизическоеЛицо,Решение,Пользователь,Получатель,ТипТекстаСообщения,Статус,ИнициаторEmail,Шаблон,Комментарий");
		СтруктураКонтекста.Вставить("Период"       	,ТекущаяДата());
	    СтруктураКонтекста.Вставить("ТекущийОбъект"	,Ссылка);         				
		
		СтруктураЗаполнения = Новый Структура("Бюджет,ВидКорректировки,Сумма,Номер,Дата,Инициатор,ФизическоеЛицоОЦР,РешениеОЦР,ФизическоеЛицо,Решение,Пользователь,Получатель,ТипТекстаСообщения,Статус,ИнициаторEmail,Шаблон,Комментарий");
		
	КонецЕсли;

	Если СтруктураЗаполнения = Неопределено Тогда 
		СтруктураЗаполнения = Новый Структура("Бюджет,ВидКорректировки,Сумма,Номер,Дата,Инициатор,Комментарий");
	КонецЕсли;
	
	СтруктураЗаполнения.Вставить("Шаблон"		,Шаблон);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"	,	Ссылка);
	Запрос.УстановитьПараметр("Шаблон"	,	Шаблон);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ККЗБ.Ссылка КАК Документ,
	|	МАКСИМУМ(бит_фн_ШаблоныСообщений.ТипТекстаСообщения) КАК ТипТекстаСообщения,
	|	МАКСИМУМ(ККЗБ.Дата) КАК Дата,
	|	МАКСИМУМ(бит_БК_Инициаторы.Ссылка) КАК Инициатор,
	|	МАКСИМУМ(бит_БК_Инициаторы.Email) КАК ИнициаторEmail,
	|	МАКСИМУМ(ККЗБ.Номер) КАК Номер,
	|	МАКСИМУМ(ЕСТЬNULL(бит_СтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка))) КАК Статус,
	|	МАКСИМУМ(ККЗБ.Ответственный) КАК Пользователь,
	|	МАКСИМУМ(ККЗБ.Ответственный) КАК Получатель,
	|	МАКСИМУМ(ЕСТЬNULL(УстановленныеВизы_ОЦР.Решение, ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка))) КАК РешениеОЦР,
	|	МАКСИМУМ(ЕСТЬNULL(УстановленныеВизы_ОЦР.ФизическоеЛицо, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка))) КАК ФизическоеЛицоОЦР,
	|	МАКСИМУМ(ЕСТЬNULL(УстановленныеВизы_ФК.ФизическоеЛицо, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка))) КАК ФизическоеЛицо,
	|	МАКСИМУМ(ЕСТЬNULL(УстановленныеВизы_ФК.Решение, ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка))) КАК Решение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ККЗБ.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Бюджет_У)
	|				ТОГДА ""Операционный""
	|			КОГДА ККЗБ.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Бюджет_Инвест)
	|				ТОГДА ""Инвестиционный""
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК Бюджет,
	|	ККЗБ.ок_ВидКорректировки КАК ВидКорректировки,
	|	СУММА(ТЧ.Сумма) КАК Сумма,
	|	бит_фн_ШаблоныСообщений.Ссылка КАК Шаблон,
	|	ВЫРАЗИТЬ(ККЗБ.Комментарий КАК СТРОКА(250)) КАК Комментарий
	|ИЗ
	|	Документ.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета КАК ККЗБ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_фн_ШаблоныСообщений КАК бит_фн_ШаблоныСообщений
	|		ПО (бит_фн_ШаблоныСообщений.Ссылка = &Шаблон)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	|		ПО ККЗБ.Ссылка = бит_СтатусыОбъектов.Объект
	|			И (бит_СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
	|		ПО ККЗБ.Ответственный = бит_БК_Инициаторы.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_УстановленныеВизы КАК УстановленныеВизы_ОЦР
	|		ПО ККЗБ.Ссылка = УстановленныеВизы_ОЦР.Объект
	|			И (УстановленныеВизы_ОЦР.Виза = ЗНАЧЕНИЕ(Справочник.бит_Визы.бит_БК_Бюджетодержатель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_УстановленныеВизы КАК УстановленныеВизы_ФК
	|		ПО ККЗБ.Ссылка = УстановленныеВизы_ФК.Объект
	|			И (УстановленныеВизы_ФК.Виза = ЗНАЧЕНИЕ(Справочник.бит_Визы.бит_БК_ФинКонтролер))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.СуммыКорректировок КАК ТЧ
	|		ПО ККЗБ.Ссылка = ТЧ.Ссылка
	|			И (ТЧ.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход))
	|ГДЕ
	|	ККЗБ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ККЗБ.Ссылка,
	|	ККЗБ.ок_ВидКорректировки,
	|	бит_фн_ШаблоныСообщений.Ссылка,
	|	ВЫРАЗИТЬ(ККЗБ.Комментарий КАК СТРОКА(250))";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
	
	СтруктураЗаполнения.Вставить("ДатаДокумента"		,Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"));
			
	Если ВРЕГ(Лев(Выборка.Номер,1)) = "W" Тогда 	
		СтруктураЗаполнения.Вставить("ТелоНомер", "Служебный код:      "+Выборка.Номер);
		СтруктураЗаполнения.Вставить("ЗаголовокНомер", "");
	Иначе 
		СтруктураЗаполнения.Вставить("ТелоНомер", "");
		СтруктураЗаполнения.Вставить("ЗаголовокНомер", " № "+Выборка.Номер);
	КонецЕсли; 
			
	бит_ФормаВводаБюджетаВызовСервера.ДополнитьСтруктураКонтекстаПисьма(Ссылка,СтруктураЗаполнения);
	
	Для Каждого ЭлПараметр Из СтруктураЗаполнения Цикл 
		СтруктураКонтекста.Вставить(ЭлПараметр.Ключ, ЭлПараметр.Значение);
	КонецЦикла;
	
	Возврат СтруктураКонтекста;   
	
КонецФункции

Процедура ВыполнитьОтправкуОповещенияОСогласовании(СтруктураКонтекста, КэшАдресов = Неопределено) Экспорт 
	
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода("Нет");			
		
	Если КэшАдресов = Неопределено Тогда  
		
		КэшАдресов = Новый ТаблицаЗначений;
		КэшАдресов.Колонки.Добавить("Получатель"             ,Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		КэшАдресов.Колонки.Добавить("ВидКонтактнойИнформации");
		КэшАдресов.Колонки.Добавить("Адрес"                  );
		
		КэшАдресов.Индексы.Добавить("Получатель,ВидКонтактнойИнформации");       
		
		СтрокаКэш = КэшАдресов.Добавить();
		СтрокаКэш.Получатель = СтруктураКонтекста.Получатель;
		СтрокаКэш.Адрес	     = СтруктураКонтекста.ИнициаторEmail;

	КонецЕсли;
	
	СтруктураКонтекста.Вставить("НеПроверятьНаличиеЗаписи" , Истина);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.ЗаписатьОповещение(Неопределено
	Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.СформироватьИЗаписатьСообщение(Неопределено
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )	
								,СтруктураКонтекста.Шаблон
								,СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаДоставки_ДляОтправкиПисем")
								,СтруктураКонтекста
								,КэшАдресов
								,РежимыВывода.ВыводитьОшибки);
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-12 (#3393)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-17 (#3393)
Функция ПолучитьАдресатовФинОтдела(Ссылка, КэшАдресов = Неопределено) Экспорт
	
	Если КэшАдресов = Неопределено Тогда 
		КэшАдресов = Новый ТаблицаЗначений;
		КэшАдресов.Колонки.Добавить("Получатель"             ,Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		КэшАдресов.Колонки.Добавить("ВидКонтактнойИнформации");
		КэшАдресов.Колонки.Добавить("Адрес"                  );
		
		КэшАдресов.Индексы.Добавить("Получатель,ВидКонтактнойИнформации"); 
	КонецЕсли;
		
	СпАдресатов = Новый СписокЗначений;
	     	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_БК_КорректировкаКонтрольныхЗначенийИБюджетаСуммыКорректировок.ЦФО КАК ЦФО,
	|	ВЫБОР
	|		КОГДА бит_БК_КорректировкаКонтрольныхЗначенийИБюджетаСуммыКорректировок.Ссылка.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Бюджет_У)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.Выручка)
	|		КОГДА бит_БК_КорректировкаКонтрольныхЗначенийИБюджетаСуммыКорректировок.Ссылка.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Бюджет_Инвест)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|	КОНЕЦ КАК ВидРасхода
	|ПОМЕСТИТЬ ВТ_ЦФО_ВидРасхода
	|ИЗ
	|	Документ.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.СуммыКорректировок КАК бит_БК_КорректировкаКонтрольныхЗначенийИБюджетаСуммыКорректировок
	|ГДЕ
	|	бит_БК_КорректировкаКонтрольныхЗначенийИБюджетаСуммыКорректировок.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЦФО,
	|	ВидРасхода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ок_Соответствие_ЦФО_ВидРасхода.СотрудникФинансовогоДепартамента КАК СотрудникФД,
	|	ок_Соответствие_ЦФО_ВидРасхода.СотрудникФинансовогоДепартамента.Пользователь КАК Получатель,
	|	ок_Соответствие_ЦФО_ВидРасхода.СотрудникФинансовогоДепартамента.Email КАК Адрес
	|ИЗ
	|	ВТ_ЦФО_ВидРасхода КАК ВТ_ЦФО_ВидРасхода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ок_Соответствие_ЦФО_ВидРасхода КАК ок_Соответствие_ЦФО_ВидРасхода
	|		ПО ВТ_ЦФО_ВидРасхода.ЦФО = ок_Соответствие_ЦФО_ВидРасхода.ЦФО
	|			И ВТ_ЦФО_ВидРасхода.ВидРасхода = ок_Соответствие_ЦФО_ВидРасхода.ВидРасхода";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпАдресатов.Добавить(ВыборкаДетальныеЗаписи.Получатель);
		
		СтрокаКэш = КэшАдресов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКэш, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	  	
	Возврат СпАдресатов;
		
КонецФункции

Процедура РазместитьПечатнуюФормуВоВременныеФайлы(Ссылка, ИД) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ок_ВременныеФайлыПисем.Идентификатор КАК Идентификатор,
	|	ок_ВременныеФайлыПисем.Файл КАК Файл1,
	|	ок_ВременныеФайлыПисем.ПолноеИмяФайла КАК ПолноеИмяФайла
	|ИЗ
	|	РегистрСведений.ок_ВременныеФайлыПисем КАК ок_ВременныеФайлыПисем
	|ГДЕ
	|	ок_ВременныеФайлыПисем.Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор" , ИД);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	МДРСВрФ = Метаданные.РегистрыСведений.ок_ВременныеФайлыПисем;
	
	ТабДок = ПолучитьТабДокументВложенияККЗБ(Ссылка);

	Если ТабДок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-05-27 Начало (#3752)
	ТабДокENG = ПолучитьТабДокументВложенияККЗБ(Ссылка, "Печатная форма ККЗБ eng");
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-05-27 Конец (#3752)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-04-06 (#3691)
	//типФайла=ТипФайлаТабличногоДокумента.HTML;
	//Заменено на:
	типФайла = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Визирование", "ФорматВложенийПечатныхФорм", "PDF"); 
	Попытка
		типФайла = ТипФайлаТабличногоДокумента[типФайла];
	Исключение 
		типФайла = ТипФайлаТабличногоДокумента.PDF;
	КонецПопытки;      
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-04-06 (#3691)
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-05-27 Начало (#3752)
	//ИмяФайла = "Корректировка бюджета № " + СокрЛП(Ссылка.Номер) + " от " + Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy")+"."+(строка(типФайла));
	ИмяФайла = " Корректировка бюджета № " + СокрЛП(Ссылка.Номер) + " от " + Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy")+"."+(строка(типФайла));
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-05-27 Конец (#3752)
	имяФайлаСвложением = КаталогВременныхФайлов()+ПараметрыСеанса.бит_ИдентификаторСеанса+ИмяФайла+"."+(строка(типФайла));			
	ТабДок.Записать(имяФайлаСвложением,типФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаСвложением);
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-07-20 (#3817)
	УдалитьФайлы(имяФайлаСвложением);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-07-20 (#3817)
	
	спВложений = Новый Массив;
	спВложений.Добавить(Новый Структура("Файл,ИмяФайла", ДвоичныеДанные, ИмяФайла));
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-05-27 Начало (#3752)
	Если ТипЗнч(ТабДокENG) = Тип("ТабличныйДокумент") Тогда  
		ИмяФайлаENG = "Корректировка бюджета № " + СокрЛП(Ссылка.Номер) + " от " + Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy") + " eng." + (строка(типФайла));
		ИмяФайлаСвложениемENG = КаталогВременныхФайлов() + ПараметрыСеанса.бит_ИдентификаторСеанса + ИмяФайлаENG + "." + (строка(типФайла));			
		ТабДокENG.Записать(ИмяФайлаСвложениемENG,типФайла);
		ДвоичныеДанныеENG = Новый ДвоичныеДанные(ИмяФайлаСвложениемENG);
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-07-20 (#3817)
		УдалитьФайлы(ИмяФайлаСвложениемENG);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-07-20 (#3817)
		
		спВложений.Добавить(Новый Структура("Файл,ИмяФайла", ДвоичныеДанныеENG, ИмяФайлаENG));
	КонецЕсли;
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-05-27 Конец (#3752)
	
	бит_ФормаВводаБюджетаВызовСервера.СохранитьВременныеФайлыВложений(ИД,спВложений);
		
КонецПроцедуры

//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-05-27 Начало (#3752)
//Функция ПолучитьТабДокументВложенияККЗБ(Ссылка) Экспорт
Функция ПолучитьТабДокументВложенияККЗБ(Ссылка, ИмяНастройки = Неопределено) Экспорт
//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-05-27 Конец (#3752)

	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-05-27 Начало (#3752)
	//ВнешнийИсточник = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Оповещения ККЗБ", "Печатная форма ККЗБ");
	Если ИмяНастройки = Неопределено Тогда
		ВнешнийИсточник = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Оповещения ККЗБ", "Печатная форма ККЗБ");
	Иначе 
		ВнешнийИсточник = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Оповещения ККЗБ", ИмяНастройки);
	КонецЕсли;	
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-05-27 Конец (#3752)
	
	Если Не ЗначениеЗаполнено(ВнешнийИсточник) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ВнешняяОбработкаОбъект = бит_БК_Общий.ПолучитьОбъектВнешнейОбработки(ВнешнийИсточник, Ложь);
	
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(Ссылка);
	
	ТабДок = ВнешняяОбработкаОбъект.СформироватьПечатнуюФорму(МассивОбъектов);
	
	Возврат ТабДок;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-17 (#3393)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2021-06-16 (#4223)
Процедура УдалитьПовторяющиесяВизы(НаборЗаписейВизы)
	
	//Т.к. визы попадают еще не отсортированными по алгоритму, то здесь они в порядке возникновения в алгоритме
	//удаляем все, кроме первой встретившейся	
	УжеВНаборе		 = Новый Соответствие;
		
	КоличествоЗаписейВНаборе = НаборЗаписейВизы.Количество()-1;
	Счетчик = 0;
	
	Пока Счетчик <= КоличествоЗаписейВНаборе Цикл 
		
		Если УжеВНаборе[НаборЗаписейВизы[Счетчик].Виза] <> Неопределено Тогда 
			НаборЗаписейВизы.Удалить(Счетчик);
			КоличествоЗаписейВНаборе = КоличествоЗаписейВНаборе - 1;
			Продолжить;
		КонецЕсли;	
		
		УжеВНаборе.Вставить(НаборЗаписейВизы[Счетчик].Виза,НаборЗаписейВизы[Счетчик].ИД);
		
		Счетчик = Счетчик + 1;		
		
	КонецЦикла;
		
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2021-06-16 (#4223)

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-12 (#4235)
Процедура ДополнитьДополнительнуюИнформациюИзПротоколаВизирования(ДополнительнаяИнформация)
	
	ДополнительнаяИнформация.Вставить("КоличествоПрочитанных", 0);
	ДополнительнаяИнформация.Вставить("КоличествоСОшибками", 0);
	ДополнительнаяИнформация.Вставить("КоличествоСпам", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ок_ПротоколВизированияПоПочте.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ок_ПротоколВизированияПоПочте.РезультатВыполнения <> ЗНАЧЕНИЕ(Перечисление.ок_РезультатВыполненияЗадачиПоПочте.Выполнена)
		|					И ок_ПротоколВизированияПоПочте.РезультатВыполнения <> ЗНАЧЕНИЕ(Перечисление.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторДокумента)
		|					И ок_ПротоколВизированияПоПочте.РезультатВыполнения <> ЗНАЧЕНИЕ(Перечисление.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанОбязательныйНомерЗаявки)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Ошибка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ок_ПротоколВизированияПоПочте.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.ок_РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторДокумента)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Спам
		|ПОМЕСТИТЬ Письма
		|ИЗ
		|	РегистрСведений.ок_ПротоколВизированияПоПочте КАК ок_ПротоколВизированияПоПочте
		|ГДЕ
		|	ок_ПротоколВизированияПоПочте.ИдентификаторСообщения В(&МассивИдентификаторовСообщений)
		|
		|СГРУППИРОВАТЬ ПО
		|	ок_ПротоколВизированияПоПочте.ИдентификаторСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Письма.ИдентификаторСообщения) КАК КоличествоПрочитанных,
		|	СУММА(Письма.Ошибка) КАК КоличествоСОшибками,
		|	СУММА(Письма.Спам) КАК КоличествоСпам
		|ИЗ
		|	Письма КАК Письма";
	
	Запрос.УстановитьПараметр("МассивИдентификаторовСообщений", ДополнительнаяИнформация.МассивИдентификаторовСообщений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДополнительнаяИнформация.КоличествоПрочитанных = ВыборкаДетальныеЗаписи.КоличествоПрочитанных;
		ДополнительнаяИнформация.КоличествоСОшибками = ВыборкаДетальныеЗаписи.КоличествоСОшибками;
		ДополнительнаяИнформация.КоличествоСпам = ВыборкаДетальныеЗаписи.КоличествоСпам;
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-12 (#4235)