#Область ПрограммныйИнтерфейс

// Выполняет инициализацию и заполнение параметров сканирования по переданному контексту.
// Параметры сканирования необходимы для анализа и обработки штрихкодов маркируемой продукции.
//
// Параметры:
//  Контекст - Неопределено, ДокументСсылка, ФормаКлиентскогоПриложения - Источник данных для формирования параметров сканирования.
//  ФормаВыбора - Неопределено - Описание
//  ВидПродукции - Неопределено - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы.
// * КонтрольРасхожденийСДокументомОснованием - Булево - Истина, если необходимо выполнять контроль и сообщать
//                                                       об ошибках в случае несоответствия документу-основанию.
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// * ТолькоМаркируемаяПродукция - Булево - Истина, если документ поддерживает работу только с маркируемой продукцией.
// * ДопустимыеВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции,
//                                                                                                 которые поддерживает контекст.
// * ВозможнаЗагрузкаТСД - Булево - Истина, если контекст поддерживает работу с ТСД.
// * ДокументОснование - Неопределено, ДокументСсылка - Документ основание.
// * СоздаватьШтрихкодУпаковки - Булево - Истина, если необходимо создавать элемент справочника штрихкоды упаковок.
// * АдресСоответствияАкцизныхМарок - Строка - адрес во временном хранилище, где хранятся обработанные данные по штрихкодам.
// * АдресДанныхДокументаОснования - Строка - адрес во временном хранилище, где хранятся данные документа основания.
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Булево - Истина, если реквизит на форме СоответствиеШтрихкодовСтрокДерева.
// * ДанныеВыбораПоМаркируемойПродукции - Структура - последние данные выбора, которые требовалось запомнить для последующего сканирования.
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево - Истина, если данные выбора по маркируемой продукции используются.
// * ДополнительныеПараметры - Структура - Параметры необходимые для переопределения обработки прикладных объектов.
// * ОперацияКонтроляАкцизныхМарок - Строка - Доступные типы: "Продажа", "Возврат". "Продажа" - для документов, которые
//                                            отражает расход по складу, "Возврат" - для документов, отражающих приход.
Функция ПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования();
	ШтрихкодированиеИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляОбувнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

// Показывает форму ввода штрихкода.
// 
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - Оповещение, которое будет выполнено по завершению.
Процедура ПоказатьВводШтрихкода(ОписаниеОповещения) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ШтрихкодированиеИСКлиентПереопределяемый.ПоказатьВводШтрихкода(ОписаниеОповещения, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Введите штрихкод'");
	
	ДополнительныеПараметры = Новый Структура(
		"ОповещениеУспешногоВвода, Количество",
		ОписаниеОповещения,
		Неопределено);
	Оповещение = Новый ОписаниеОповещения(
		"ПоказатьВводШтрихкодаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		ПоказатьВводЗначения(Оповещение, "", Заголовок);
	
КонецПроцедуры

// Выполняет обработку штрихкода. Вызывается из формы проверки и подбора маркируемой продукции.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - оповещение, которое произойдет при завершении обработки.
//  Форма - ФормаКлиентскогоПриложения - форма, в которой отсканирован штрихкод.
//  ДанныеШтрихкода - Структура - структура с ключами:
//   * Штрихкод - Строка - считанный штрихкод,
//   * Количество - Число - количество упаковок.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//
Процедура ОбработатьДанныеШтрихкода(ОповещениеПриЗавершении, Форма, ДанныеШтрихкода, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(Форма);
	КонецЕсли;
	
	ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования);
	
	ДанныеШтрихкода.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИСВызовСервера.ОбработатьШтрихкод(
		ДанныеШтрихкода.Штрихкод, ПараметрыСканирования, Неопределено, Форма.УникальныйИдентификатор);
	
	Если РезультатОбработкиШтрихкода <> Неопределено Тогда
		
		Если ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
			И РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
			
			Если Форма.СоответствиеШтрихкодовСтрокДерева.Получить(ДанныеШтрихкода.Штрихкод) <> Неопределено Тогда
				РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатОбработкиШтрихкода.ЕстьОшибкиВДеревеУпаковок
			Или РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры
			Или Не ПустаяСтрока(РезультатОбработкиШтрихкода.ТекстОшибки)
			Или ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования) Тогда
			
			ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияОбработкиВводаШтрихкода();
			ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода; 
			ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении     = ОповещениеПриЗавершении;
			ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
			ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
			ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = ДанныеШтрихкода;
			ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента       = Ложь;
			
			ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
			
		Иначе
			
			ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработкиШтрихкода.АдресДанныхШтрихкода);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ДанныеШтрихкода);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
	
// Инициализирует структуру для завершения обработки штрихкода.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
// * ВызовИзФормыДокумента - Булево - Истина, в случае выполнения вызова из формы документа, Ложь - из формы обработки
// проверки и подбора.
// * ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// * ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение, которое необходимо выполнить при завершении обработки.
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// * РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
// * Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка.
Функция ПараметрыЗавершенияОбработкиШтрихкода() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Форма");
	Параметры.Вставить("РезультатОбработкиШтрихкода");
	Параметры.Вставить("КэшированныеЗначения");
	Параметры.Вставить("ПараметрыСканирования");
	Параметры.Вставить("ДанныеШтрихкода");
	Параметры.Вставить("ОповещениеОбработкиШтрихкода");
	Параметры.Вставить("ОповещениеВыполнитьДействие");
	Параметры.Вставить("ОповещениеЗавершениеОбработки");
	
	Возврат Параметры;
	
КонецФункции

// Выполняет завершение обработки штрихкода. На основании ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода
// выполняет необходимые действия.
//
// Параметры:
//  ПараметрыЗавершенияВводаШтрихкода - (См. ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиВводаШтрихкода).
Процедура ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода   = ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода;
	ВидыПродукцииШтрихкода        = ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода.ВидыПродукции;
	Форма                         = ПараметрыЗавершенияОбработкиШтрихкода.Форма;
	ПараметрыСканирования         = ПараметрыЗавершенияОбработкиШтрихкода.ПараметрыСканирования;
	ОповещениеОбработкиШтрихкода  = ПараметрыЗавершенияОбработкиШтрихкода.ОповещениеОбработкиШтрихкода;
	ОповещениеЗавершениеОбработки = ПараметрыЗавершенияОбработкиШтрихкода.ОповещениеЗавершениеОбработки;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры
		Или РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки Тогда
		
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуУточненияДанных", 0.1, Истина);
		
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОбщаяОшибка = Истина Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.Штрихкод    = РезультатОбработкиШтрихкода.Штрихкод;
		ПараметрыОткрытия.ТекстОшибки = РезультатОбработкиШтрихкода.ТекстОшибки;
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОшибкаДопустимостиВидовПродукции Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.АдресДереваУпаковок = РезультатОбработкиШтрихкода.АдресДереваУпаковок;
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукцииШтрихкода) Тогда
		
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		Если МодульОбработки.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(ВидыПродукцииШтрихкода) Тогда
		
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		Если МодульОбработки.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ПрисутствуетОбувнаяПродукция(ВидыПродукцииШтрихкода) Тогда
		
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
		Если МодульОбработки.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УточненияДанныхЗавершение", ЭтотОбъект, ПараметрыЗавершенияОбработкиШтрихкода);
		УточнитьДанныеУПользователя(
			Форма, РезультатОбработкиШтрихкода.ПараметрыУточненияДанных, ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если ОповещениеЗавершениеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки, РезультатОбработкиШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

// Устарела. См. ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода
// Выполняет обработку штрихкода. Вызывается из формы документа.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ИсходныеДанные - Структура - Исходные данные, включающие только значение штрихкода и количество,
//  	либо уже полноценные заполненные данные штрихкода, которые нуждаются в обработке.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//                                       и ШтрихкодированиеИС.ПараметрыСканирования).
//  Оповещение - ОписаниеОповещения - будет выполнена обработка оповещения с результатом обработки кода маркировки.
Процедура ОбработатьВводШтрихкода(Форма, ИсходныеДанные, КэшированныеЗначения, ПараметрыСканирования = Неопределено, Оповещение = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Или ТипЗнч(ИсходныеДанные) <> Тип("Структура") Тогда	
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	ДанныеШтрихкода = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ИсходныеДанные, Ложь);
	Если Не ДанныеШтрихкода.Свойство("ШтрихкодыПреобразованы") Тогда
		ДанныеШтрихкода.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = Форма.Подключаемый_ОбработатьВводШтрихкода(
		ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияОбработкиВводаШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
	ПараметрыЗавершенияВводаШтрихкода.КэшированныеЗначения        = КэшированныеЗначения;
	ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = ДанныеШтрихкода;
	ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента       = Истина;
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении     = Оповещение;
	
	ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет завершение после показа формы ввода штрихкода.
// 
// Параметры:
//  Штрихкод - Строка - штрихкод строкой.
//  ДополнительныеПараметры - Структура - Параметры описания оповещения.
Процедура ПоказатьВводШтрихкодаЗавершение(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ОповещениеУспешногоВвода = ДополнительныеПараметры.ОповещениеУспешногоВвода;
	Количество = ДополнительныеПараметры.Количество;
	
	Если Штрихкод = Неопределено Или ПустаяСтрока(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Если Количество = Неопределено Тогда
		Количество = 1;
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) > 200 Тогда
		ТекстСообщения = НСтр("ru='Длина штрихкода не должна быть больше 200 символов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ОповещениеУспешногоВвода,
		Новый Структура("Штрихкод, Количество", Штрихкод, Количество));
	
КонецПроцедуры

// В случае успешного сопоставления номенклатуры неизвестным штрихкодам выполняет повторную попытку обработки штрихкода.
// 
// Параметры:
//  Результат - Произвольный - результат сопоставления неизветсной номенклатуры штрихкодам формата EAN.
//  ДополнительныеПараметры - параметры описания оповещения.
Процедура СопоставлениеНоменклатурыШтрихкодамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(
			ДополнительныеПараметры.ПараметрыСканирования.КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПовторнойОбработки, ДополнительныеПараметры.ИсходныеДанные);
	
КонецПроцедуры

#Область РаботаСФормойКодаМаркировки

//Структура параметров, необходимых для открытия формы считывания кода маркировки.
//
//Возвращаемое значение:
//  Структура - требуемые параметры:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// * МаркируемаяПродукция - Булево - Истина, если продукция маркируемая.
// * ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
// * ДанныеШтрихкода - См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода.
// * Документ - Произвольный - .
// * РазрешатьДобавлениеБезКодаМарки - Булево - разрешать добавление строки при отказе от ввода кода маркировки.
//
Функция ПараметрыОткрытияФормыВводаКодаМаркировки() Экспорт
	
	Возврат ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыВводаКодаМаркировки();
	
КонецФункции

//Открывает форму ввода кода маркировки.
//
//Параметры:
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой необходимо выполнить открытие.
//   ПараметрыОткрытия - См. ПараметрыОткрытияФормыВводаКодаМаркировки.
//   ОповещениеОЗавершении - ОписаниеОповещения, Неопределено - действие после закрытия формы ввода кода маркировки
//
Процедура ОткрытьФормуСчитыванияКодаМаркировки(ФормаВладелец, ПараметрыОткрытия, ОповещениеОЗавершении = Неопределено) Экспорт
	
	Если Не ПараметрыОткрытия.МаркируемаяПродукция Тогда
		
		ПоказатьПредупреждение(
			Неопределено, НСтр("ru = 'Для данной строки не указываются акцизные марки'"));
		
		Возврат;
	КонецЕсли;
	
	Если ОповещениеОЗавершении = Неопределено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ФормаВладелец, ОповещениеОЗавершении);
	КонецЕсли;
	
	Если ПараметрыОткрытия.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда

		ОткрытьФорму(
			"Обработка.РаботаСАкцизнымиМаркамиЕГАИС.Форма.ФормаВводаАкцизнойМарки",
			ПараметрыОткрытия, ФормаВладелец,,,,ОповещениеОЗавершении);
			
	ИначеЕсли ПараметрыОткрытия.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная") Тогда

		ОткрытьФорму(
			"Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ФормаВводаКодаМаркировки",
			ПараметрыОткрытия, ФормаВладелец,,,,ОповещениеОЗавершении);
			
	ИначеЕсли ПараметрыОткрытия.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная") Тогда
			
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ФормаВводаКодаМаркировки",
			ПараметрыОткрытия, ФормаВладелец,,,,ОповещениеОЗавершении);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойУточненияДанных

// Возвращает параметры открытия формы уточнения данных у пользователя, таких как "Номенклатура", "Характеристика", "Серия".
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// * Склад - ОпределяемыйТип.Склад - Склад, используемый для серий.
// * ПараметрыУказанияСерий - Структура - данные для расчета серий.
// * ШтрихкодEAN - Строка - Штрихкода формата EAN.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатура - Элемент Характеристика.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Элемент Номенклатура.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
// * КодМаркировки - Строка - Код маркировки.
Функция ПараметрыОткрытияФормыУточненияДанных() Экспорт
	
	Возврат ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	
КонецФункции

// Открывает форму уточнения номенклатуры и серии.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма владелец.
//  ПараметрыОткрытияФормы - (См. ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных)
//  ОписаниеОповещения - ОписаниеОвещения - Оповещение после закрытия формы.
Процедура УточнитьДанныеУПользователя(ФормаВладелец, ПараметрыОткрытияФормы, ОповещениеПовторнойОбработки) Экспорт
	
	Если ПараметрыОткрытияФормы.Операция = "СопоставлениеНоменклатуры" Тогда
		
		ШтрихкодыКСопоставлению = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ШтрихкодыКСопоставлению;
		ИсходныеДанные          = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ИсходныеДанные;
		ДополнительныеПараметры = Новый Структура("ОповещениеПовторнойОбработки, ИсходныеДанные, ПараметрыСканирования",
			ОповещениеПовторнойОбработки, ИсходныеДанные, ПараметрыСканирования(ФормаВладелец));
		ОповещениеОЗавершенииСопоставления = Новый ОписаниеОповещения("СопоставлениеНоменклатурыШтрихкодамЗавершение", ШтрихкодированиеИСКлиент, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ШтрихкодыКСопоставлению, ФормаВладелец, ОповещениеОЗавершенииСопоставления);
		
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "ОткрытьФормуВводаКодаМаркировки" Тогда
		
		ОткрытьФормуСчитыванияКодаМаркировки(ФормаВладелец, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ОповещениеПовторнойОбработки);
		
	Иначе
		
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму(
			"ОбщаяФорма.ФормаУточненияДанныхИС", ПараметрыОткрытияФормы, ФормаВладелец,,,, ОповещениеПовторнойОбработки, РежимОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру данных, собранных после уточнения сведений у пользователя.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
// * ИсходныеДанные - Структура
//    * Штрихкод - Строка - Штрихкод.
//    * Количество - Число - Количество.
// * КэшированныеЗначения - Произвольный - кэш обработанных ранее штрихкодов.
// * РезультатВыбора - Произвольный - результат уточнения данных пользователем.
// * РезультатОбработкиШтрихкода - См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.
// * Действие - Строка - Действие, которое необходимо выполнить с данными.
Функция ИнициализацияРезультатаУточненияДанныхДляВыполненияДальнейшихДействий() Экспорт
	
	РезультатУточненияДанных = Новый Структура;
	
	РезультатУточненияДанных.Вставить("Действие");
	РезультатУточненияДанных.Вставить("РезультатОбработкиШтрихкода");
	РезультатУточненияДанных.Вставить("РезультатВыбора");
	РезультатУточненияДанных.Вставить("КэшированныеЗначения");
	РезультатУточненияДанных.Вставить("ИсходныеДанные");
	РезультатУточненияДанных.Вставить("ПараметрыСканирования");
	РезультатУточненияДанных.Вставить("ДанныеШтрихкода");
	
	Возврат РезультатУточненияДанных;
	
КонецФункции

// Выполняет обработку оповещения "ОповещениеВыполнитьДействие" и передает результат уточнения данных у пользователя.
// 
// Параметры:
//  РезультатВыбора - Произвольный - результат уточнения данных у пользователя.
//  ДополнительныеПараметры - дополнительные параметры описания оповещения.
Процедура УточненияДанныхЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеВыполнитьДействие <> Неопределено Тогда
		
		РезультатУточненияДанных = ИнициализацияРезультатаУточненияДанныхДляВыполненияДальнейшихДействий();
		РезультатУточненияДанных.Действие                    = "ОбработатьУточнениеДанных";
		РезультатУточненияДанных.РезультатОбработкиШтрихкода = ДополнительныеПараметры.РезультатОбработкиШтрихкода;
		РезультатУточненияДанных.РезультатВыбора             = РезультатВыбора;
		РезультатУточненияДанных.КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
		РезультатУточненияДанных.ИсходныеДанные              = ДополнительныеПараметры.ДанныеШтрихкода;
		РезультатУточненияДанных.ПараметрыСканирования       = ДополнительныеПараметры.ПараметрыСканирования;
		РезультатУточненияДанных.ДанныеШтрихкода             = ДополнительныеПараметры.ДанныеШтрихкода;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВыполнитьДействие, РезультатУточненияДанных);
		
	ИначеЕсли ДополнительныеПараметры.ВызовИзФормыДокумента Тогда //Ветка для старого механизма.
		
		Форма = ДополнительныеПараметры.Форма;
		
		Действие = "ОбработатьУточнениеДанных";
		РезультатОбработкиШтрихкода = Форма.Подключаемый_ВыполнитьДействие(
			Действие,
			РезультатВыбора,
			ДополнительныеПараметры.РезультатОбработкиШтрихкода,
			ДополнительныеПараметры.КэшированныеЗначения);
		
		ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиВводаШтрихкода();
		ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
		ПараметрыЗавершенияВводаШтрихкода.КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
		ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
		ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении", ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении);
		ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
		
	Иначе
		
		ШтрихкодированиеИСВызовСервера.ОбработатьУточнениеДанныхДляФормыПроверкиИПодбора(
			РезультатВыбора,
			ДополнительныеПараметры.РезультатОбработкиШтрихкода,
			ДополнительныеПараметры.ПараметрыСканирования,
			ДополнительныеПараметры.КэшированныеЗначения);
			
		ОбработатьДанныеШтрихкода(
			ДополнительныеПараметры.ОповещениеПриЗавершении,
			ДополнительныеПараметры.Форма,
			ДополнительныеПараметры.ДанныеШтрихкода,
			ДополнительныеПараметры.ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойНевозможностиДобавленияОтсканированного

// Инициализирует параметры открытия формы невозможности добавления отсканированного.
//
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид маркируемой продукции.
// Возвращаемое значение:
// 	Структура - Описание:
// * АдресДереваУпаковок - АдресВременногоХранилища - адрес хранилища, где находится дерево упаковок.
// * АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - алкогольная продукция.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// * ТекстОшибки - Строка - Описание причины невозможности обработки отсканированного штрихкода.
// * Штрихкод - Строка - Штрихкод строкой.
// * ПредставлениеНоменклатуры - Строка - Представление маркируемой продукции.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид маркируемой продукции.
Функция ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(ВидПродукции = Неопределено) Экспорт

	ИнформацияПроблемы = Новый Структура;
	
	ИнформацияПроблемы.Вставить("ВидПродукции",              ВидПродукции);
	//Информация по маркированному товару.
	ИнформацияПроблемы.Вставить("ПредставлениеНоменклатуры", Неопределено);
	ИнформацияПроблемы.Вставить("Штрихкод",                  Неопределено);
	ИнформацияПроблемы.Вставить("ТекстОшибки",               Неопределено);
	ИнформацияПроблемы.Вставить("ТипШтрихкода",              Неопределено);
	ИнформацияПроблемы.Вставить("АлкогольнаяПродукция",      Неопределено);
	//Информация по дереву упаковок.
	ИнформацияПроблемы.Вставить("АдресДереваУпаковок",       Неопределено);

	Возврат ИнформацияПроблемы;

КонецФункции

// Открывает форму с описанием ошибки о невозможности обработать отсканированный штрихкод.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ПараметрыОткрытияФормы - (См. ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного).
Процедура ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	Если ПараметрыОткрытияФормы.ВидПродукции = Неопределено Тогда
		
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы, Форма);
		
	ИначеЕсли ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		
		МодульШтрихкодированиеЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		МодульШтрихкодированиеЕГАИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы, ОповещениеОЗакрытии);
		
	ИначеЕсли ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная") Тогда
		
		МодульШтрихкодированиеМОТПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		МодульШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы, ОповещениеОЗакрытии);
		
	ИначеЕсли ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная") Тогда

		МодульШтрихкодированиеИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
		МодульШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы, ОповещениеОЗакрытии);

	КонецЕсли;
	
КонецПроцедуры

// Получает данные из кэша, необходимые для уточнения сведений у пользователя. Открывает форму уточнения сведений.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  ОписаниеОповещенияОЗавершении - ОписаниеОповещения - оповещение, которое будет выполнено после получения сведений.
Процедура Подключаемый_ОткрытьФормуУточненияДанных(Форма, ОписаниеОповещенияОЗавершении) Экспорт
	
	ДанныеДляУточненияСведений = ШтрихкодированиеИСВызовСервера.ДанныеДляУточненияСведенийПользователя(Форма.КэшМаркируемойПродукции);
	
	Если ПустаяСтрока(ДанныеДляУточненияСведений.Операция) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормыУточненияДанных = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыУточненияДанных();
	ПараметрыОткрытияФормыУточненияДанных.Операция = ДанныеДляУточненияСведений.Операция;
	ПараметрыОткрытияФормыУточненияДанных.ДанныеДляУточненияСведенийПользователя = ДанныеДляУточненияСведений.Данные;
	
	УточнитьДанныеУПользователя(Форма, ПараметрыОткрытияФормыУточненияДанных, ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаВидовПродукции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента алкогольной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления алкогольная продукция.
Функция ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Экспорт
	
	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")) <> Неопределено;
	
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления табачная продукция.
Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт
	
	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная")) <> Неопределено;
	
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента обувной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления обувная продукция.
Функция ПрисутствуетОбувнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная")) <> Неопределено;

КонецФункции

#КонецОбласти

// Показывает окно оповещения об окончании обработки данных ТСД.
//
// Параметры:
Процедура ОповеститьОбОкончанииОбработкиДанныхТСД() Экспорт
	
	ПоказатьОповещениеПользователя(
		ЗаголовокОповещенияТСД(),,
		НСтр("ru = 'Закончена обработка полученных из ТСД данных.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Показывает окно оповещения о начале обработки данных ТСД.
//
// Параметры:
Процедура ОповеститьОНачалеОбработкиДанныхТСД() Экспорт
	
	ПоказатьОповещениеПользователя(
		ЗаголовокОповещенияТСД(),,
		НСтр("ru = 'Начата обработка полученных из ТСД данных.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Преобразует массив штрихкодов в формат Base64.
// 
// Параметры:
//  ШтрихкодыТСД - Массив из Строка - список штрихкодов.
Процедура ПреобразоватьШтрихкодыТСДВBase64(ШтрихкодыТСД) Экспорт
	
	Для Каждого ЭлементМассива Из ШтрихкодыТСД Цикл
		Если ЭлементМассива.Свойство("ШтрихкодыПреобразованы") Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементМассива.Штрихкод) Тогда
			ЭлементМассива.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ЭлементМассива.Штрихкод);
		КонецЕсли;
		Если ЭлементМассива.Свойство("ШтрихкодУпаковки") И ЗначениеЗаполнено(ЭлементМассива.ШтрихкодУпаковки) Тогда
			ЭлементМассива.ШтрихкодУпаковки = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ЭлементМассива.ШтрихкодУпаковки);
		КонецЕсли;
		ЭлементМассива.Вставить("ШтрихкодыПреобразованы");
	КонецЦикла;
	
КонецПроцедуры

// Выполняется после сопоставления неизвестных штрихкодов EAN с номенклатурой.
//
// Параметры:
//  РезультатВыполнения - Структура - Описание:
// * ЗарегистрированныеШтрихкоды - Массив - коллекция штрихкодов, которые удалось зарегистрировать в ИБ.
//  ДополнительныеПараметры - Структура - Описание:
// * Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
Процедура ОбработатьНеизвестныеШтрихкодыЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если (РезультатВыполнения = Неопределено
		Или РезультатВыполнения.ЗарегистрированныеШтрихкоды.Количество() = 0) Тогда
		
		ПараметрыСканирования = ПараметрыСканирования(ДополнительныеПараметры.Форма);
		Если ПараметрыСканирования.КэшМаркируемойПродукции <> Неопределено Тогда
			ОчиститьОтложенныеКодыМаркировки(ПараметрыСканирования.КэшМаркируемойПродукции);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ДополнительныеПараметры.Форма, "Обработка.ПроверкаИПодборПродукцииИСМП")
		Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ДополнительныеПараметры.Форма, "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП") Тогда
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ДополнительныеПараметры.Форма);
		ОбработатьДанныеШтрихкода(
			ОповещениеПриЗавершении,
			ДополнительныеПараметры.Форма,
			РезультатВыполнения.ЗарегистрированныеШтрихкоды[0]);
		
	Иначе
		
		ОбработатьВводШтрихкода(
			ДополнительныеПараметры.Форма,
			РезультатВыполнения.ЗарегистрированныеШтрихкоды[0],
			ДополнительныеПараметры.КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Следует использовать УточнитьДанныеУПользователя
// Открывает форму уточнения номенклатуры и серии.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма владелец.
//  ПараметрыОткрытияФормы - (См. ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных)
//  ОписаниеОповещения - ОписаниеОвещения - Оповещение после закрытия формы.
Процедура ОткрытьФормуУточненияДанных(ФормаВладелец, ПараметрыОткрытияФормы, ОписаниеОповещения) Экспорт
	
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(
		"ОбщаяФорма.ФормаУточненияДанныхИС", ПараметрыОткрытияФормы, ФормаВладелец,,,, ОписаниеОповещения, РежимОткрытия);
	
КонецПроцедуры

// Инициализирует структуру сохраненных данных в документе
// 
// Параметры:
//  Режим - Строка - Описание
// Возвращаемое значение:
//  Структура - Описание:
// * ДанныеВыбора 
Функция ИнициализацияСтруктурыДанныхСохраненногоВыбора() Экспорт
	
	ДанныеВыбора = Новый Структура;
	ДанныеВыбора.Вставить("Номенклатура",   Неопределено);
	ДанныеВыбора.Вставить("Характеристика", Неопределено);
	ДанныеВыбора.Вставить("Серия",          Неопределено);
	ДанныеВыбора.Вставить("GTIN",           "");
	// Для документов, печатающих коды маркировки
	ДанныеВыбора.Вставить("СразуНаПринтер",   Ложь);
	ДанныеВыбора.Вставить("ШаблонЭтикетки",   Неопределено);
	ДанныеВыбора.Вставить("ШаблонМаркировки", Неопределено);
	// Индивидуально перемаркирова
	ДанныеВыбора.Вставить("ПричинаПеремаркировки", Неопределено);
	ДанныеВыбора.Вставить("НоваяНоменклатура",     Неопределено);
	ДанныеВыбора.Вставить("НоваяХарактеристика",   Неопределено);
	// Для формы проверки и подбора
	ДанныеВыбора.Вставить("ДобавлятьНовуюУпаковку", Ложь);
	
	ДанныеВыбора.Вставить("ЭтоКодВводаОстатков",    Ложь);
	
	СтруктурыДанных = Новый Структура;
	СтруктурыДанных.Вставить("ЗапомнитьВыбор", Ложь);
	СтруктурыДанных.Вставить("ДанныеВыбора",   ДанныеВыбора);
	
	Возврат СтруктурыДанных;
	
КонецФункции

// Устарела. Использовать СопоставлениеНоменклатурыШтрихкодамЗавершение.
// Выполняется после сопоставления номенклатуры штрихкодам. В случае успешного сопоставления штрихкодов запускает заново
// процесс обработки штрихкодов.
//
// Параметры:
//  РезультатВыбора
//  ДополнительныеПараметры
Процедура СопоставлениеНоменклатурыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		Если ДополнительныеПараметры.ВызовИзФормыДокумента Тогда
		
			ОбработатьВводШтрихкода(
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.ДанныеШтрихкода,
				ДополнительныеПараметры.КэшированныеЗначения);
			
		Иначе
			
			ОбработатьДанныеШтрихкода(
				ДополнительныеПараметры.ОповещениеПриЗавершении,
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.ДанныеШтрихкода,
				ДополнительныеПараметры.ПараметрыСканирования)
			
		КонецЕсли;
			
	КонецЕсли;
	
	ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(
		ДополнительныеПараметры.ПараметрыСканирования.КэшМаркируемойПродукции);
		
КонецПроцедуры

// Устарела. Следует использовать ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода.
// Инициализирует структуру для завершения обработки штрихкода.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
// * ВызовИзФормыДокумента - Булево - Истина, в случае выполнения вызова из формы документа, Ложь - из формы обработки
// проверки и подбора.
// * ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// * ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// * ОповещениеПриЗавершении - ОписениеОповещения - Оповещение, которое необходимо выполнить при завершении обработки.
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// * РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
// * Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка.
Функция ПараметрыЗавершенияОбработкиВводаШтрихкода() Экспорт
	
	Параметры = ПараметрыЗавершенияОбработкиШтрихкода();
	Параметры.Вставить("ОповещениеПриЗавершении");
	Параметры.Вставить("ВызовИзФормыДокумента");
	
	Возврат Параметры;
	
КонецФункции

// Устарела. Следует использовать "ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода".
// Выполняет завершение обработки штрихкода. На основании ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода
// выполняет необходимые действия.
//
// Параметры:
//  ПараметрыЗавершенияВводаШтрихкода - (См. ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиВводаШтрихкода).
Процедура ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода = ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода;
	ВидыПродукцииШтрихкода      = ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода.ВидыПродукции;
	Форма                       = ПараметрыЗавершенияВводаШтрихкода.Форма;
	ПараметрыСканирования       = ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования;
	Оповещение                  = ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СопоставлениеНоменклатурыЗавершение", ЭтотОбъект, ПараметрыЗавершенияВводаШтрихкода);
		
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			РезультатОбработкиШтрихкода.ШтрихкодыПродукцииДляСопоставления, Форма, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыВводаКодаМаркировки();
		ПараметрыОткрытия.ВидПродукции = ВидыПродукцииШтрихкода[0];
		ПараметрыОткрытия.МаркируемаяПродукция   = Истина;
		ПараметрыОткрытия.ПараметрыСканирования  = ПараметрыСканирования;
		ПараметрыОткрытия.Номенклатура           = РезультатОбработкиШтрихкода.ДополнительныеПараметры.Номенклатура;
		ПараметрыОткрытия.Характеристика         = РезультатОбработкиШтрихкода.ДополнительныеПараметры.Характеристика;
		ПараметрыОткрытия.ДанныеШтрихкода        = РезультатОбработкиШтрихкода.ИсходныеДанные;
		ПараметрыОткрытия.Документ               = Форма.Объект.Ссылка;
		
		ОткрытьФормуСчитыванияКодаМаркировки(Форма, ПараметрыОткрытия, Оповещение);
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПослеОбработкиШтрихкодов", 0.1, Истина);
		
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОбщаяОшибка = Истина Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.Штрихкод    = РезультатОбработкиШтрихкода.Штрихкод;
		ПараметрыОткрытия.ТекстОшибки = РезультатОбработкиШтрихкода.ТекстОшибки;
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОшибкаДопустимостиВидовПродукции Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.АдресДереваУпаковок = РезультатОбработкиШтрихкода.АдресДереваУпаковок;
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукцииШтрихкода) Тогда
		
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		Если МодульОбработки.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(ВидыПродукцииШтрихкода) Тогда
		
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		Если МодульОбработки.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ПрисутствуетОбувнаяПродукция(ВидыПродукцииШтрихкода) Тогда
		
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
		Если МодульОбработки.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УточненияДанныхЗавершение", ЭтотОбъект, ПараметрыЗавершенияВводаШтрихкода);
		ШтрихкодированиеИСКлиент.ОткрытьФормуУточненияДанных(
			Форма, РезультатОбработкиШтрихкода.ПараметрыУточненияДанных, ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Оповещение, РезультатОбработкиШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Анализирует результат проверки на необходимость уточнения каких-либо данных у пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
// Возвращаемое значение:
//  Булево - Истина, если требуется уточнить какие-либо данные у пользователя.
Функция ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования)
	
	Если РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПрисутствуетАлкогольнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		Возврат МодульШтрихкодированиеЕГАИСКлиент.ТребуетсяУточнениеДанныхУПользователя(РезультатОбработкиШтрихкода);
		
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		Возврат МодульШтрихкодированиеМОТПКлиент.ТребуетсяУточнениеДанныхУПользователя(РезультатОбработкиШтрихкода);
		
	КонецЕсли;

	Если ПрисутствуетОбувнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда

		МодульШтрихкодированиеИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
		Возврат МодульШтрихкодированиеИСМПКлиент.ТребуетсяУточнениеДанныхУПользователя(РезультатОбработкиШтрихкода, ПараметрыСканирования);

	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// Обновляет отображение адреса данных документа основания на форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняется обработка штрихкода(ов).
//  ПараметрыСканирования - (см. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования)
	
	Если Не ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;

	ФормаСоЗначением = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресДанныхДокументаОснования") Тогда
		ФормаСоЗначением = Форма;
	ИначеЕсли Форма.ВладелецФормы <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.ВладелецФормы, "АдресДанныхДокументаОснования") Тогда
		ФормаСоЗначением = Форма.ВладелецФормы;
	КонецЕсли;
	
	Если ФормаСоЗначением = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаСоЗначением["АдресДанныхДокументаОснования"] <> ПараметрыСканирования.АдресДанныхДокументаОснования Тогда
		ФормаСоЗначением["АдресДанныхДокументаОснования"] = ПараметрыСканирования.АдресДанныхДокументаОснования
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст заголовка оповещения для ТСД.
//
// Параметры:
// Возвращаемое значение:
//  Строка - Текст заголовка.
Функция ЗаголовокОповещенияТСД()
	
	Возврат НСтр("ru = 'Загрузка из ТСД'");
	
КонецФункции

// Очищает отложенные коды маркировки из кэша.
// 
// Параметры:
//  АдресКэшаМаркируемойПродукции - Строка - Адрес временного хранилища кэша маркируемой продукции.
Процедура ОчиститьОтложенныеКодыМаркировки(АдресКэшаМаркируемойПродукции)
	
	Если Не ЭтоАдресВременногоХранилища(АдресКэшаМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(АдресКэшаМаркируемойПродукции);
	КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Очистить();
	
КонецПроцедуры

#Область ЗаполнениеПараметровСканирования

// Включает поддержку алкогольной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
			Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		МодульШтрихкодированиеЕГАИСКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная")
			Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку обувной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканированияДляОбувнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная")
			Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеИСМПКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
		МодульШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ФормаВыбора, ВидПродукции, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
