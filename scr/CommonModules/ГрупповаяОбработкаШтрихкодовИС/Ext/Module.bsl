#Область ПрограммныйИнтерфейс

//Серверная часть обработки штрихкодов при их загрузке из ТСД в формы документов (без иерархической проверки)
//
//Параметры:
//   Форма                 - ФормаКлиентскогоПриложения    - источник вызова
//   ШтрихкодыТСД          - Массив Из Структура - данные ТСД с преобразованными в Base64 штрихкодами
//   ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования - настройки обработки штрихкодов
//
// Возвращаемое значение:
//   См. РезультатЗагрузкиШтрихкодовИзТСД - результат обработки
//
Функция ОбработатьПолученныеДанныеТСДВДокументе(Форма, ШтрихкодыТСД, ПараметрыСканирования) Экспорт
	
	Результат = РезультатЗагрузкиШтрихкодовИзТСД();
	
	ИдентификаторРезультатаОбработки = Новый УникальныйИдентификатор;
	
	ДополнитьУпорядочитьДанныеТСД(ШтрихкодыТСД);
	
	МассивШтрихкодов = Новый Массив;
	Для Каждого СтрокаДанныхТСД Из ШтрихкодыТСД Цикл
		СтрокаДанныхТСД.Вставить("НормализованныйШтрихкод",
			ШтрихкодированиеИС.НормализованныйШтрихкод(
				СтрокаДанныхТСД.Штрихкод, ПараметрыСканирования));
		МассивШтрихкодов.Добавить(СтрокаДанныхТСД.НормализованныйШтрихкод);
	КонецЦикла;
	
	ПараметрыСканированияДляГрупповойОбработки = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыСканирования, Ложь);
	ПараметрыСканированияДляГрупповойОбработки.ПроверятьДублиКодовМаркировки = Истина;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИСВызовСервера.ОбработатьШтрихкоды(
		МассивШтрихкодов, ПараметрыСканированияДляГрупповойОбработки, Неопределено, ИдентификаторРезультатаОбработки);
	ТребуетсяАвторизация = Ложь;
	//1. Авторизация.
	Если ДанныеПоШтрихкодам.РезультатыОбработки.Количество() Тогда
		Для Каждого РезультатОбработки Из ДанныеПоШтрихкодам.РезультатыОбработки Цикл
			РезультатОбработки = РезультатОбработки.Значение;
			ВидПродукции       = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
			ТребуетсяАвторизация = (ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная
					И РезультатОбработки.Свойство("ТребуетсяАвторизацияИСМП")
					И РезультатОбработки.ТребуетсяАвторизацияИСМП)
				ИЛИ (ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная
					И РезультатОбработки.Свойство("ТребуетсяАвторизацияМОТП")
					И РезультатОбработки.ТребуетсяАвторизацияМОТП);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Результат.ТребуетсяАвторизация = ТребуетсяАвторизация;
	Если ТребуетсяАвторизация Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого СтрокаШтрихкод Из ШтрихкодыТСД Цикл
		РезультатОбработкиШтрихкода = ДанныеПоШтрихкодам.РезультатыОбработки.Получить(СтрокаШтрихкод.НормализованныйШтрихкод);
		СтрокаШтрихкод.Вставить("РезультатОбработки", РезультатОбработкиШтрихкода);
	КонецЦикла;
	
	ШтрихкодыДляСопоставления = Новый Массив;
	Для Каждого СтрокаШтрихкод Из ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления Цикл
		ШтрихкодКоличество = Новый Структура("Штрихкод, Количество", СтрокаШтрихкод, 1);
		ШтрихкодыДляСопоставления.Добавить(ШтрихкодКоличество);
	КонецЦикла;
	
	//2. Ошибки.
	Результат.ШтрихкодыДляСопоставления = ШтрихкодыДляСопоставления;
	Результат.ШтрихкодыТСД              = ШтрихкодыТСД;
	ПроверитьНаОшибкиРезультатОбработкиДаныхТСД(Результат, ПараметрыСканирования);
	
	Если Результат.ЕстьОшибкиВДереве Или Результат.ОбщаяОшибка Или Результат.ШтрихкодыДляСопоставления.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	//3. Обработка всех строк, не требующих вмешательства пользователя.
	ШтрихкодыТребующиеОбработкиПользователем = Новый Массив;
	
	ДеревоУпаковокОбработано  = Ложь;
	ОбработанныеШтрихкоды     = Новый Массив;
	МенеджерОбработки         = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
	
	Для Каждого СтрокаШтрихкод Из ШтрихкодыТСД Цикл
		Если СтрокаШтрихкод.РезультатОбработки.ТребуетсяУточнениеДанных Тогда
			ШтрихкодыТребующиеОбработкиПользователем.Добавить(СтрокаШтрихкод);
		ИначеЕсли ОбработанныеШтрихкоды.Найти(СтрокаШтрихкод.НормализованныйШтрихкод) <> Неопределено Тогда
			Продолжить;
		Иначе
			
			ОбработанныеШтрихкоды.Добавить(СтрокаШтрихкод.НормализованныйШтрихкод);
			
			ДанныеВДеревеУпаковок = ЗначениеЗаполнено(СтрокаШтрихкод.РезультатОбработки.АдресДереваУпаковок);
			Если ДанныеВДеревеУпаковок И Не ДеревоУпаковокОбработано Тогда
				
				ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
				ВложенныеШтрихкоды.ДеревоУпаковок = ПолучитьИзВременногоХранилища(СтрокаШтрихкод.РезультатОбработки.АдресДереваУпаковок);
				ДанныеШтрихкода = ПолучитьИзВременногоХранилища(СтрокаШтрихкод.РезультатОбработки.АдресДанныхШтрихкода);
				РезультатДобавления = МенеджерОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
				ДеревоУпаковокОбработано = Истина;
				
				Если РезультатДобавления <> Неопределено Тогда
					ПеренестиДобавленныеИзмененныеСтроки(Результат, РезультатДобавления);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ДанныеВДеревеУпаковок Тогда
				
				ДанныеШтрихкода = ПолучитьИзВременногоХранилища(СтрокаШтрихкод.РезультатОбработки.АдресДанныхШтрихкода);
				РезультатДобавления = МенеджерОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
				
				Если РезультатДобавления <> Неопределено Тогда
					ПеренестиДобавленныеИзмененныеСтроки(Результат, РезультатДобавления);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Результат.ШтрихкодыТСД = ШтрихкодыТребующиеОбработкиПользователем;
	Результат.Всего        = ШтрихкодыТребующиеОбработкиПользователем.Количество();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Результат серверной обработки полученных из ТСД штрихкодов.
//
//Возвращаемое значение:
//   Структура - результат обработки:
//    * ТребуетсяАвторизация      - Булево - Если Истина, то обработка не выполнена: требуется авторизация во внешнем сервисе
//    * ШтрихкодыДляСопоставления - Массив - Если заполнен, то обработка не выполнена: обнаружены неизвестные штрихкоды номенклатуры
//    * ЕстьОшибкиВДереве         - Булево - Если Истина, то обработка не выполнена: модуль штрихкодирования вернул эту ошибку
//    * АдресДереваУпаковок       - Строка, Неопределено - адрес дерева упаковок для отображения ошибки
//    * ОбщаяОшибка               - Булево - Если Истина, то обработка не выполнена: модуль штрихкодирования вернул эту ошибку
//    * Обработано                - Число  - Количество штрихкодов обработанных на сервере (при необходимости последовательной обработки)
//    * Всего                     - Число  - Количество штрихкодов требующих обработки
//    * ШтрихкодыТСД              - Массив из Структура - Штрихкоды требующие обработки
//    * ДобавленныеСтроки         - Массив - Добавленные строки документа
//    * ИзмененныеСтроки          - Массив - Измененные строки документа
//
Функция РезультатЗагрузкиШтрихкодовИзТСД()
	
	Результат = Новый Структура;
	//Результат: ошибка загрузки
	Результат.Вставить("ТребуетсяАвторизация",      Ложь);
	Результат.Вставить("ШтрихкодыДляСопоставления", Новый Массив);
	Результат.Вставить("ЕстьОшибкиВДереве",         Ложь);
	Результат.Вставить("АдресДереваУпаковок",       Неопределено);
	Результат.Вставить("ОбщаяОшибка",               Ложь);
	Результат.Вставить("ТекстОбщейОшибки",          "");
	//Результат: произведена частичная или полная загрузка
	Результат.Вставить("Обработано",                0);
	Результат.Вставить("Всего",                     0);
	Результат.Вставить("ШтрихкодыТСД",              Новый Массив);
	Результат.Вставить("ДобавленныеСтроки",         Новый Массив);
	Результат.Вставить("ИзмененныеСтроки",          Новый Массив);
	Возврат Результат;
	
КонецФункции

//При необходимости изменяет данные поступившие из ТСД по правилам: вложение упаковки всегда должно 
//   быть в массиве после строки самой упаковки; если строки с штрихкодом упаковки нет - она добавляется.
//
//Параметры:
//   ДанныеТСД - Массив - данные поступившие с ТСД (изменяемый параметр)
//
//Возвращаемое значение:
//   Булево - в данных ТСД есть иерархия
//
Функция ДополнитьУпорядочитьДанныеТСД(ДанныеТСД)
	
	// 1. Дополнить данные поступившие из ТСД / внешних источников (в формате ТСД)
	ВсеШтрихкоды = Новый Массив;
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		ВсеШтрихкоды.Добавить(ЭлементМассива.Штрихкод);
	КонецЦикла;
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		ШтрихкодУпаковки = "";
		Если Не ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли ВсеШтрихкоды.Найти(ШтрихкодУпаковки) = Неопределено Тогда
			ВсеШтрихкоды.Добавить(ШтрихкодУпаковки);
			НовыйЭлемент = ОбщегоНазначения.СкопироватьРекурсивно(ЭлементМассива, Ложь);
			Для Каждого КлючИЗначение Из НовыйЭлемент Цикл
				НовыйЭлемент[КлючИЗначение.Ключ] = Неопределено;
			КонецЦикла;
			НовыйЭлемент.Штрихкод = ШтрихкодУпаковки;
			НовыйЭлемент.ШтрихкодУпаковки = "";
			ДанныеТСД.Добавить(НовыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	// 2. Сортировать данные
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("ШтрихкодУпаковки");
	ТаблицаСоответствия.Колонки.Добавить("Штрихкод");
	ТаблицаСоответствия.Колонки.Добавить("Уровень");
	ТаблицаСоответствия.Колонки.Добавить("Элемент");
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		ШтрихкодУпаковки = "";
		ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки);
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ШтрихкодУпаковки = ШтрихкодУпаковки;
		НоваяСтрока.Штрихкод         = ЭлементМассива.Штрихкод;
		НоваяСтрока.Уровень          = 0;
		НоваяСтрока.Элемент          = ЭлементМассива;
		
	КонецЦикла;
	
	ТаблицаСоответствия.Индексы.Добавить("Уровень");
	ТаблицаСоответствия.Индексы.Добавить("Уровень, Штрихкод");
	
	Уровень = 0;
	СчитатьИерархию = Истина;
	СтрокТаблицы    = ТаблицаСоответствия.Количество();
	Пока СчитатьИерархию И Уровень <= СтрокТаблицы Цикл
		СчитатьИерархию = Ложь;
		Для Каждого СтрокаТЧ Из ТаблицаСоответствия.НайтиСтроки(Новый Структура("Уровень", Уровень)) Цикл
			Если СтрокаТЧ.ШтрихкодУпаковки = "" Тогда
				Продолжить;
			КонецЕсли;
			Упаковки = ТаблицаСоответствия.НайтиСтроки(Новый Структура("Уровень, Штрихкод", Уровень, СтрокаТЧ.ШтрихкодУпаковки));
			Если Упаковки.Количество() Тогда
				СчитатьИерархию = Истина;
				СтрокаТЧ.Уровень = Уровень + 1;
			КонецЕсли;
		КонецЦикла;
		Уровень = Уровень + 1;
	КонецЦикла;
	
	Если Уровень = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (Уровень > СтрокТаблицы) Тогда
		ДанныеТСД = Новый Массив;
		ВызватьИсключение НСтр("ru = 'Получены некорректные данные из ТСД или внешнего файла: обнаружено зацикливание упаковок'");
	КонецЕсли;
	
	ТаблицаСоответствия.Сортировать("Уровень");
	
	СортированныйМассив = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблицаСоответствия Цикл
		СортированныйМассив.Добавить(СтрокаТЧ.Элемент);
	КонецЦикла;
	ДанныеТСД = СортированныйМассив;
	
	Возврат Истина;
	
КонецФункции

//Переносит массивы добавленных и измененных строк по обработанному штрихкоду в общие массивы.
//
//Параметры:
//   Приемник - См. РезультатЗагрузкиШтрихкодовИзТСД                           - общие массивы
//   Источник - См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода - результат обработки строки
//
Процедура ПеренестиДобавленныеИзмененныеСтроки(Приемник, Источник)
	
	Для Каждого СтрокаТовары Из Источник.ДобавленныеСтроки Цикл
		Если Приемник.ДобавленныеСтроки.Найти(СтрокаТовары) = Неопределено Тогда
			Приемник.ДобавленныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из Источник.ИзмененныеСтроки Цикл
		Если Приемник.ДобавленныеСтроки.Найти(СтрокаТовары) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Приемник.ИзмененныеСтроки.Найти(СтрокаТовары) = Неопределено Тогда
			Приемник.ИзмененныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Переносит ошибки при обработке отдельных штрихкодов в общую ошибку
//
//Параметры:
//   РезультатОбработки - См. РезультатЗагрузкиШтрихкодовИзТСД - структура с штрихкодами после получения данных
//
Процедура ПроверитьНаОшибкиРезультатОбработкиДаныхТСД(РезультатОбработки, ПараметрыСканирования)
	
	ШтрихкодыДляСопоставления = Новый Массив;
	
	Для Каждого Элемент Из РезультатОбработки.ШтрихкодыТСД Цикл
		
		Если Элемент.РезультатОбработки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент.РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры Тогда
			ДанныеШтрихкода = ПолучитьИзВременногоХранилища(Элемент.РезультатОбработки.АдресДанныхШтрихкода);
			ШтрихкодКоличество = Новый Структура("Штрихкод, Количество", ДанныеШтрихкода.Штрихкод, 1);
			ШтрихкодыДляСопоставления.Добавить(ШтрихкодКоличество);
		КонецЕсли;
		
		Если Элемент.РезультатОбработки.ОшибкаДопустимостиВидовПродукции
			Или Элемент.РезультатОбработки.ОбщаяОшибка Тогда
			РезультатОбработки.ОбщаяОшибка = Истина;
			РезультатОбработки.ТекстОбщейОшибки = Элемент.РезультатОбработки.ТекстОшибки;
		КонецЕсли;
		
		Если Элемент.РезультатОбработки.ЕстьОшибкиВДеревеУпаковок Тогда
			РезультатОбработки.АдресДереваУпаковок = Элемент.РезультатОбработки.АдресДереваУпаковок;
			РезультатОбработки.ЕстьОшибкиВДереве = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатОбработки.ОбщаяОшибка Тогда
		Возврат;
	КонецЕсли;
	
	Если ШтрихкодыДляСопоставления.Количество() > 0 Тогда
		РезультатОбработки.ШтрихкодыДляСопоставления = ШтрихкодыДляСопоставления;
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкодовСОшибками = Новый Массив;
	Для Каждого Элемент Из РезультатОбработки.ШтрихкодыТСД Цикл
		
		Если Элемент.РезультатОбработки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.РезультатОбработки.ТекстОшибки)
			И ЭтоАдресВременногоХранилища(Элемент.РезультатОбработки.АдресДанныхШтрихкода) Тогда
				ДанныеШтрихкодовСОшибками.Добавить(
					ПолучитьИзВременногоХранилища(Элемент.РезультатОбработки.АдресДанныхШтрихкода));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеШтрихкодовСОшибками.Количество() = 0 И Не РезультатОбработки.ЕстьОшибкиВДереве Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработки.ЕстьОшибкиВДереве И ДанныеШтрихкодовСОшибками.Количество() > 0 Тогда
		
		ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);

		Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодовСОшибками Цикл
			НоваяСтрокаДерева = ДеревоУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ДанныеШтрихкода);
			НоваяСтрокаДерева.ЕстьОшибки = Истина;
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(ДеревоУпаковок, РезультатОбработки.АдресДереваУпаковок);
		
	ИначеЕсли ДанныеШтрихкодовСОшибками.Количество() > 0 Тогда
		
		РезультатОбработки.ЕстьОшибкиВДереве = Истина;
		ДеревоУпаковок = ИнициализироватьДеревоУпаковок(ПараметрыСканирования);
		
		Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодовСОшибками Цикл
			НоваяСтрокаДерева = ДеревоУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ДанныеШтрихкода);
			НоваяСтрокаДерева.ЕстьОшибки = Истина;
		КонецЦикла;
		
		РезультатОбработки.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДеревоУпаковок, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьДеревоУпаковок(ПараметрыСканирования)
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
	Если ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, Перечисления.ВидыПродукцииИС.Обувная) Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный")
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, Перечисления.ВидыПродукцииИС.Табачная) Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП")
	КонецЕсли;
	Возврат Модуль.ИнициализироватьДеревоУпаковок();
	
КонецФункции


#КонецОбласти
