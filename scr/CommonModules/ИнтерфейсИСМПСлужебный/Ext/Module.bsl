#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру данных кода маркировки.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * Статус - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статус кода маркировки.
//   * ИННВладельца - Строка - ИНН владельца кода маркировки.
//   * GTIN - Строка - GTIN продукции.
//   * НаименованиеПродукции - Строка - Наименование продукции.
Функция ИнициализироватьПараметрыКодаМаркировки(ЭлементДанных = Неопределено) Экспорт
	
	ПараметрыКодаМаркировки = Новый Структура;
	ПараметрыКодаМаркировки.Вставить("Статус");
	ПараметрыКодаМаркировки.Вставить("ОсобоеСостояние");
	ПараметрыКодаМаркировки.Вставить("ИННВладельца");
	ПараметрыКодаМаркировки.Вставить("GTIN");
	ПараметрыКодаМаркировки.Вставить("НаименованиеПродукции");
	
	Если ЭлементДанных = Неопределено Тогда
		Возврат ПараметрыКодаМаркировки;
	КонецЕсли;
	
	ПараметрыКодаМаркировки.Статус          = ИнтерфейсИСМПСлужебный.СтатусКодаМаркировки(ЭлементДанных["status"]);
	ПараметрыКодаМаркировки.ОсобоеСостояние = ИнтерфейсИСМПСлужебный.СтатусКодаМаркировки(ЭлементДанных["statusEx"]);
	
	ПараметрыКодаМаркировки.ИННВладельца          = ЭлементДанных["ownerInn"];
	ПараметрыКодаМаркировки.GTIN                  = ЭлементДанных["gtin"];
	ПараметрыКодаМаркировки.НаименованиеПродукции = ЭлементДанных["productName"];
	
	Возврат ПараметрыКодаМаркировки;
	
КонецФункции

// Возвращает структуру данных кода маркировки.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * Статус - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статус кода маркировки.
//   * ИННВладельца - Строка - ИНН владельца кода маркировки.
//   * НаименованиеВладельца - Строка - Наименование владельца.
//   * НаименованиеПроизводителя - Строка - Наименование производителя.
//   * ИННПроизводителя - Строка - ИНН производителя кода маркировки.
//   * ДатаЭмиссии - Дата - Дата эмиссии.
//   * GTIN - Строка - GTIN продукции.
//   * НаименованиеПродукции - Строка - Наименование продукции.
Функция ИнициализироватьПараметрыСредстваИдентификации(ЭлементДанных = Неопределено) Экспорт
	
	ПараметрыСредстваИдентификации = Новый Структура;
	ПараметрыСредстваИдентификации.Вставить("Статус");
	ПараметрыСредстваИдентификации.Вставить("СпособВводаВОборот");
	ПараметрыСредстваИдентификации.Вставить("ОсобоеСостояние");
	ПараметрыСредстваИдентификации.Вставить("ИННВладельца");
	ПараметрыСредстваИдентификации.Вставить("GTIN");
	
	ПараметрыСредстваИдентификации.Вставить("ИдентификаторДокумента");
	ПараметрыСредстваИдентификации.Вставить("НаименованиеПродукции");
	ПараметрыСредстваИдентификации.Вставить("ДатаЭмиссии");
	ПараметрыСредстваИдентификации.Вставить("ДатаПроизводства");
	ПараметрыСредстваИдентификации.Вставить("КодТНВЭД");
	
	ПараметрыСредстваИдентификации.Вставить("ДатаСписания");
	ПараметрыСредстваИдентификации.Вставить("ПричинаСписания");
	ПараметрыСредстваИдентификации.Вставить("ПредыдущийКодМаркировки");
	ПараметрыСредстваИдентификации.Вставить("КодУпаковки");
	
	ПараметрыСредстваИдентификации.Вставить("ВложенныеУпаковки");
	
	Если ЭлементДанных = Неопределено Тогда
		Возврат ПараметрыСредстваИдентификации;
	КонецЕсли;
	
	ПараметрыСредстваИдентификации.Статус             = ИнтерфейсИСМПСлужебный.СтатусКодаМаркировки(ЭлементДанных["status"]);
	ПараметрыСредстваИдентификации.СпособВводаВОборот = ИнтерфейсИСМПСлужебный.СпособВыпускаВОборот(ЭлементДанных["emissionType"]);
	
	Если ЭлементДанных["receiptDate"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ДатаСписания    = ИнтеграцияИС.ДатаИзСтроки(ЭлементДанных["receiptDate"]);
	КонецЕсли;
	Если ЭлементДанных["withdrawReason"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ПричинаСписания = ИнтерфейсИСМПСлужебный.ПричинаСписанияКодаМаркировкиДляПеремаркировки(ЭлементДанных["withdrawReason"]);
	КонецЕсли;
	Если ЭлементДанных["statusEx"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ОсобоеСостояние = ИнтерфейсИСМПСлужебный.СтатусКодаМаркировки(ЭлементДанных["statusEx"]);
	КонецЕсли;
	Если ЭлементДанных["prevCis"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ПредыдущийКодМаркировки = ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(ЭлементДанных["prevCis"]);
	КонецЕсли;
	Если ЭлементДанных["parent"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.КодУпаковки = ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(ЭлементДанных["parent"]);
	КонецЕсли;
	Если ЭлементДанных["emissionDate"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ДатаЭмиссии      = ИнтеграцияИС.ДатаИзСтроки(ЭлементДанных["emissionDate"]);
	КонецЕсли;
	Если ЭлементДанных["producedDate"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ДатаПроизводства = ИнтеграцияИС.ДатаИзСтроки(ЭлементДанных["producedDate"]);
	КонецЕсли;
	
	ПараметрыСредстваИдентификации.ИННВладельца           = ЭлементДанных["ownerInn"];
	ПараметрыСредстваИдентификации.ИдентификаторДокумента = ЭлементДанных["lastDocId"];
	ПараметрыСредстваИдентификации.КодТНВЭД               = ЭлементДанных["tnVedEaes"];
	ПараметрыСредстваИдентификации.GTIN                   = ЭлементДанных["gtin"];
	ПараметрыСредстваИдентификации.НаименованиеПродукции  = ЭлементДанных["productName"];
	
	Если ЭлементДанных["countChildren"] <> Неопределено
		И ЭлементДанных["children"] <> Неопределено
		И ЭлементДанных["countChildren"] > 0 Тогда
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("GTIN",                  NULL);
		ДанныеСтроки.Вставить("НаименованиеПродукции", NULL);
		
		ПараметрыСредстваИдентификации.ВложенныеУпаковки = Новый Соответствие;
		Для Каждого СвойстваВложеннойУпаковки Из ЭлементДанных["children"] Цикл
			
			ПараметрыКодаМаркировки = ИнициализироватьПараметрыКодаМаркировки(СвойстваВложеннойУпаковки);
			
			ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, ПараметрыКодаМаркировки, "GTIN");
			ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, ПараметрыКодаМаркировки, "НаименованиеПродукции");
			
			КодМаркировки = СвойстваВложеннойУпаковки["cis"];
			ПараметрыСредстваИдентификации.ВложенныеУпаковки.Вставить(
				ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(КодМаркировки),
				ПараметрыКодаМаркировки);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.GTIN) Тогда
			ПараметрыСредстваИдентификации.GTIN = ДанныеСтроки.GTIN;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеСтроки.НаименованиеПродукции) Тогда
			ПараметрыСредстваИдентификации.НаименованиеПродукции = ДанныеСтроки.НаименованиеПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыСредстваИдентификации;
	
КонецФункции

// Возвращает структуру данных кода маркировки.
//
// Возвращаемое значение:
//  Структура - Описание:
//   * Статус - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статус кода маркировки.
//   * ИННВладельца - Строка - ИНН владельца кода маркировки.
//   * НаименованиеВладельца - Строка - Наименование владельца.
//   * НаименованиеПроизводителя - Строка - Наименование производителя.
//   * ИННПроизводителя - Строка - ИНН производителя кода маркировки.
//   * ДатаЭмиссии - Дата - Дата эмиссии.
//   * ИдентификаторДокумента - Строка - Идентификатор документа.
//   * КодТНВЭД - Строка - Код ТНВЭД продукции.
//   * ДанныеПродукции - (См. ИнициализироватьДанныеПродукции).
Функция ИнициализироватьПараметрыМаркированногоТовара(ЭлементДанных = Неопределено) Экспорт
	
	СтатусКодаМаркировки = Новый Структура;
	
	СтатусКодаМаркировки.Вставить("Статус");
	СтатусКодаМаркировки.Вставить("ДанныеПродукции");
	СтатусКодаМаркировки.Вставить("СпособВводаВОборот");
	СтатусКодаМаркировки.Вставить("ОсобоеСостояние");
	СтатусКодаМаркировки.Вставить("ДатаЭмиссии");
	СтатусКодаМаркировки.Вставить("ПредыдущийКодМаркировки");
	СтатусКодаМаркировки.Вставить("КодУпаковки");
	
	Если ЭлементДанных <> Неопределено Тогда
		
		СтатусКодаМаркировки.Вставить("ДанныеПродукции", ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ЭлементДанных));
		
		Если ЭлементДанных["status"] <> Неопределено Тогда
			СтатусКодаМаркировки.Вставить("Статус", ИнтерфейсИСМПСлужебный.СтатусКодаМаркировки(ЭлементДанных["status"]));
		КонецЕсли;
		
		Если ЭлементДанных["emissionType"] <> Неопределено Тогда
			СтатусКодаМаркировки.Вставить("СпособВводаВОборот", ИнтерфейсИСМПСлужебный.СпособВыпускаВОборот(ЭлементДанных["emissionType"]));
		КонецЕсли;
		
		Если ЭлементДанных["statusEx"] <> Неопределено Тогда
			СтатусКодаМаркировки.Вставить("ОсобоеСостояние", ИнтерфейсИСМПСлужебный.СтатусКодаМаркировки(ЭлементДанных["statusEx"]));
		КонецЕсли;
		
		Если ЭлементДанных["emissionDate"] <> Неопределено Тогда
			СтатусКодаМаркировки.Вставить("ДатаЭмиссии", ИнтеграцияИС.ДатаИзСтроки(ЭлементДанных["emissionDate"]));
		КонецЕсли;
		
		Если ЭлементДанных["prevCis"] <> Неопределено Тогда
			СтатусКодаМаркировки.Вставить("ПредыдущийКодМаркировки", ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(ЭлементДанных["prevCis"]));
		КонецЕсли;
		
		Если ЭлементДанных["uitu"] <> Неопределено Тогда
			СтатусКодаМаркировки.Вставить("КодУпаковки", ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(ЭлементДанных["uitu"]));
		КонецЕсли;
		
	КонецЕсли;
	
	СтатусКодаМаркировки.Вставить("НаименованиеВладельца");
	СтатусКодаМаркировки.Вставить("ИННВладельца");
	СтатусКодаМаркировки.Вставить("НаименованиеПроизводителя");
	СтатусКодаМаркировки.Вставить("ИННПроизводителя");
	СтатусКодаМаркировки.Вставить("ИдентификаторДокумента");
	СтатусКодаМаркировки.Вставить("КодТНВЭД");
	
	Если ЭлементДанных <> Неопределено Тогда
		СтатусКодаМаркировки.НаименованиеВладельца     = ЭлементДанных["ownerName"];
		СтатусКодаМаркировки.ИННВладельца              = ЭлементДанных["ownerInn"];
		СтатусКодаМаркировки.НаименованиеПроизводителя = ЭлементДанных["producerName"];
		СтатусКодаМаркировки.ИННПроизводителя          = ЭлементДанных["producerInn"];
		СтатусКодаМаркировки.ИдентификаторДокумента    = ЭлементДанных["lastDocId"];
		СтатусКодаМаркировки.КодТНВЭД                  = ЭлементДанных["tnvd"];
	КонецЕсли;
	
	Если ЭлементДанных["countChildren"] <> Неопределено
		И ЭлементДанных["children"] <> Неопределено
		И ЭлементДанных["countChildren"] > 0 Тогда
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("GTIN", NULL);
		
		СтатусКодаМаркировки.Вставить("ВложенныеУпаковки", Новый Соответствие);
		Для Каждого СвойстваВложеннойУпаковки Из ЭлементДанных["children"] Цикл
			
			ПараметрыКодаМаркировки = ИнициализироватьПараметрыКодаМаркировки(СвойстваВложеннойУпаковки);
			
			ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, ПараметрыКодаМаркировки, "GTIN");
			
			КодМаркировки = СвойстваВложеннойУпаковки["cis"];
			СтатусКодаМаркировки.ВложенныеУпаковки.Вставить(
				ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(КодМаркировки),
				ПараметрыКодаМаркировки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтатусКодаМаркировки;
	
КонецФункции

// Инициализировать структуру данных участника.
//
// Параметры:
//  ДанныеОбработки - Структура - Данные из сервиса ИС МП.
// Возвращаемое значение:
//  Структура - Описание:
//   * АдресЭлектроннойПочты - Строка - Адрес электронной почты
//   * Адрес  - Строка - Адрес
//   * ОГРН  - Строка - ОГРН
//   * КПП  - Строка - КПП
//   * ИНН  - Строка - ИНН
//   * ОКПО  - Строка - ОКПО
//   * НаименованиеПолное  - Строка - Полное наименование
//   * Наименование  - Строка - Наименование
//   * Идентификатор - Строка - Идентификатор
Функция ИнициализироватьДанныеКонтрагента(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ДанныеПродукции = Новый Структура;
		ДанныеПродукции.Вставить("Идентификатор");
		ДанныеПродукции.Вставить("Наименование");
		ДанныеПродукции.Вставить("НаименованиеПолное");
		ДанныеПродукции.Вставить("ОКПО");
		ДанныеПродукции.Вставить("ИНН");
		ДанныеПродукции.Вставить("КПП");
		ДанныеПродукции.Вставить("ОГРН");
		ДанныеПродукции.Вставить("Адрес");
		ДанныеПродукции.Вставить("АдресЭлектроннойПочты");
		
	Иначе
		
		ДанныеПродукции = ИнициализироватьДанныеКонтрагента();
		
		ДанныеОбработки.Свойство("id",           ДанныеПродукции.Идентификатор);
		ДанныеОбработки.Свойство("name",         ДанныеПродукции.Наименование);
		ДанныеОбработки.Свойство("fullName",     ДанныеПродукции.НаименованиеПолное);
		ДанныеОбработки.Свойство("okpo",         ДанныеПродукции.ОКПО);
		ДанныеОбработки.Свойство("inn",          ДанныеПродукции.ИНН);
		ДанныеОбработки.Свойство("kpp",          ДанныеПродукции.КПП);
		ДанныеОбработки.Свойство("ogrn",         ДанныеПродукции.ОГРН);
		ДанныеОбработки.Свойство("legalAddress", ДанныеПродукции.Адрес);
		ДанныеОбработки.Свойство("email",        ДанныеПродукции.АдресЭлектроннойПочты);
		
	КонецЕсли;
	
	Возврат ДанныеПродукции;
	
КонецФункции

// Инициализировать структуру данных продукции.
//
// Возвращаемое значение:
//  Структура - Реквизиты продукции:
//   * Идентификатор             - Строка - Идентификатор продукции.
//   * Наименование              - Строка - Наименование продукции.
//   * НаименованиеПолное        - Строка - Наименование продукции.
//   * GTIN                      - Строка - GTIN.
//   * ТорговаяМарка             - Строка - Торговая марка.
//   * ТипУпаковки               - Строка - Тип упаковки.
//   * КоличествоВложенныхЕдиниц - Строка - Количество вложенных единиц.
//   * Модель                    - Строка - Модель производителя.
//   * ДатаПубликации            - Дата   - Дата публикации.
//   * ИННПроизводителя          - Строка - ИНН производителя (импортера).
//   * СтранаПроизводства        - Строка - Страна производства.
//   * ТипПродукции              - Строка - Вид обуви (код).
//   * ТипПродукцииНаименование  - Строка - Вид обуви (наименование).
//   * Цвет              - Строка - Цвет.
//   * Размер            - Строка - Размер.
//   * МатериалВерха     - Строка - Материал верха.
//   * МатериалНиза      - Строка - Материал низа.
//   * МатериалПодкладки - Строка - Материал подкладки.
Функция ИнициализироватьДанныеПродукции(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ДанныеПродукции = Новый Структура;
		ДанныеПродукции.Вставить("Идентификатор");
		ДанныеПродукции.Вставить("Наименование");
		ДанныеПродукции.Вставить("НаименованиеПолное");
		ДанныеПродукции.Вставить("GTIN");
		ДанныеПродукции.Вставить("ТорговаяМарка");
		ДанныеПродукции.Вставить("ТипУпаковки");
		ДанныеПродукции.Вставить("КоличествоВложенныхЕдиниц");
		
		ДанныеПродукции.Вставить("Модель");
		ДанныеПродукции.Вставить("ДатаПубликации");
		ДанныеПродукции.Вставить("ИННПроизводителя");
		ДанныеПродукции.Вставить("СтранаПроизводства");
		
		ДанныеПродукции.Вставить("ТипПродукции");
		ДанныеПродукции.Вставить("ТипПродукцииНаименование");
		ДанныеПродукции.Вставить("Цвет");
		ДанныеПродукции.Вставить("Размер");
		ДанныеПродукции.Вставить("МатериалВерха");
		ДанныеПродукции.Вставить("МатериалНиза");
		ДанныеПродукции.Вставить("МатериалПодкладки");
		
	Иначе
		
		ДанныеПродукции = ИнициализироватьДанныеПродукции();
		
		Если ТипЗнч(ДанныеОбработки) = Тип("Структура") Тогда
			
			ДанныеОбработки.Свойство("id",              ДанныеПродукции.Идентификатор);
			ДанныеОбработки.Свойство("name",            ДанныеПродукции.Наименование);
			ДанныеОбработки.Свойство("name",            ДанныеПродукции.НаименованиеПолное);
			ДанныеОбработки.Свойство("gtin",            ДанныеПродукции.GTIN);
			ДанныеОбработки.Свойство("brand",           ДанныеПродукции.ТорговаяМарка);
			ДанныеОбработки.Свойство("packageType",     ДанныеПродукции.ТипУпаковки);
			ДанныеОбработки.Свойство("innerUnitCount",  ДанныеПродукции.КоличествоВложенныхЕдиниц);
			ДанныеОбработки.Свойство("model",           ДанныеПродукции.Модель);
			ДанныеОбработки.Свойство("inn",             ДанныеПродукции.ИННПроизводителя);
			ДанныеОбработки.Свойство("country",         ДанныеПродукции.СтранаПроизводства);
			ДанныеОбработки.Свойство("productType",     ДанныеПродукции.ТипПродукции);
			ДанныеОбработки.Свойство("productTypeDesc", ДанныеПродукции.ТипПродукцииНаименование);
			ДанныеОбработки.Свойство("color",           ДанныеПродукции.Цвет);
			ДанныеОбработки.Свойство("productSize",     ДанныеПродукции.Размер);
			ДанныеОбработки.Свойство("materialUpper",   ДанныеПродукции.МатериалВерха);
			ДанныеОбработки.Свойство("materialDown",    ДанныеПродукции.МатериалНиза);
			ДанныеОбработки.Свойство("materialLining",  ДанныеПродукции.МатериалПодкладки);
			
			Если ДанныеОбработки.Свойство("publicationDate") Тогда
				ДанныеПродукции.ДатаПубликации = ИнтеграцияИС.ДатаИзСтрокиUNIX(ДанныеОбработки.publicationDate);
			КонецЕсли;
			
		Иначе
			
			ДанныеПродукции.Идентификатор             = ДанныеОбработки["id"];
			ДанныеПродукции.Наименование              = ДанныеОбработки["name"];
			ДанныеПродукции.НаименованиеПолное        = ДанныеОбработки["name"];
			ДанныеПродукции.GTIN                      = ДанныеОбработки["gtin"];
			ДанныеПродукции.ТорговаяМарка             = ДанныеОбработки["brand"];
			ДанныеПродукции.ТипУпаковки               = ДанныеОбработки["packageType"];
			ДанныеПродукции.КоличествоВложенныхЕдиниц = ДанныеОбработки["innerUnitCount"];
			ДанныеПродукции.Модель                    = ДанныеОбработки["model"];
			ДанныеПродукции.ИННПроизводителя          = ДанныеОбработки["inn"];
			ДанныеПродукции.СтранаПроизводства        = ДанныеОбработки["country"];
			ДанныеПродукции.ТипПродукции              = ДанныеОбработки["productType"];
			ДанныеПродукции.ТипПродукцииНаименование  = ДанныеОбработки["productTypeDesc"];
			ДанныеПродукции.Цвет                      = ДанныеОбработки["color"];
			ДанныеПродукции.Размер                    = ДанныеОбработки["productSize"];
			ДанныеПродукции.МатериалВерха             = ДанныеОбработки["materialUpper"];
			ДанныеПродукции.МатериалНиза              = ДанныеОбработки["materialDown"];
			ДанныеПродукции.МатериалПодкладки         = ДанныеОбработки["materialLining"];
			
			Если ДанныеОбработки["publicationDate"] <> Неопределено Тогда
				ДанныеПродукции.ДатаПубликации = ИнтеграцияИС.ДатаИзСтрокиUNIX(ДанныеОбработки["publicationDate"]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПродукции;
	
КонецФункции

// Инициализировать структуру данных шапки документа ИС МП.
// 
// Параметры:
//  ДанныеОбработки - Структура - Данные из сервиса ИС МП.
// Возвращаемое значение:
//  Структура - Описание:
//   * PDF - Ссылка на PDF.
//   * СтатусЗагрузкиОписание - Строка - Описание статуса загрузки документа.
//   * СтатусЗагрузки - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
//   * ДатаЗагрузки - Дата - Дата загрузки документа в ИС МП.
//   * СуммаНДС - Число - Сумма НДС.
//   * Сумма - Число - Сумма документа.
//   * ПолучательНаименование - Строка - Наименование получателя.
//   * ОтправительНаименование - Строка - Наименование отправителя.
//   * Статус - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
//   * Тип - ПеречислениеСсылка.ТипыДокументовИСМП - Тип документа.
//   * Входящий - Булево - Признак входящего документа
//   * Дата - Дата - Дата документа
//   * Идентификатор - Строка - Идентификатор документа.
Функция ИнициализироватьДанныеШапкиДокумента(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ДанныеПродукции = Новый Структура;
		ДанныеПродукции.Вставить("Идентификатор");
		ДанныеПродукции.Вставить("Дата");
		ДанныеПродукции.Вставить("Входящий");
		ДанныеПродукции.Вставить("Тип");
		ДанныеПродукции.Вставить("Статус");
		ДанныеПродукции.Вставить("ОтправительНаименование");
		ДанныеПродукции.Вставить("ПолучательНаименование");
		ДанныеПродукции.Вставить("Сумма");
		ДанныеПродукции.Вставить("СуммаНДС");
		
		ДанныеПродукции.Вставить("ДатаЗагрузки");
		ДанныеПродукции.Вставить("СтатусЗагрузки");
		ДанныеПродукции.Вставить("СтатусЗагрузкиОписание");
		ДанныеПродукции.Вставить("PDF");
		
	Иначе
		
		ДанныеПродукции = ИнициализироватьДанныеШапкиДокумента();
		
		ДанныеОбработки.Свойство("number",             ДанныеПродукции.Идентификатор);
		ДанныеОбработки.Свойство("input",              ДанныеПродукции.Входящий);
		ДанныеОбработки.Свойство("status",             ДанныеПродукции.Статус);
		ДанныеОбработки.Свойство("senderName",         ДанныеПродукции.ОтправительНаименование);
		ДанныеОбработки.Свойство("receiverName",       ДанныеПродукции.ПолучательНаименование);
		ДанныеОбработки.Свойство("total",              ДанныеПродукции.Сумма);
		ДанныеОбработки.Свойство("vat",                ДанныеПродукции.СуммаНДС);
		ДанныеОбработки.Свойство("downloadStatus",     ДанныеПродукции.СтатусЗагрузки);
		ДанныеОбработки.Свойство("downloadStatusDesc", ДанныеПродукции.СтатусЗагрузкиОписание);
		ДанныеОбработки.Свойство("pdfFile",            ДанныеПродукции.PDF);
		ДанныеОбработки.Свойство("type",               ДанныеПродукции.Тип);
		
		Если ДанныеОбработки.Свойство("status") Тогда
			ДанныеПродукции.Статус = ИнтерфейсИСМПСлужебный.СтатусДокумента(ДанныеОбработки.status);
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("downloadStatus") Тогда
			ДанныеПродукции.СтатусЗагрузки = ИнтерфейсИСМПСлужебный.СтатусДокумента(ДанныеОбработки.downloadStatus);
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("docDate") Тогда
			ДанныеПродукции.Дата = ИнтеграцияИС.ДатаИзСтроки(ДанныеОбработки.docDate);
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("receivedAt") Тогда
			ДанныеПродукции.ДатаЗагрузки = ИнтеграцияИС.ДатаИзСтроки(ДанныеОбработки.receivedAt);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПродукции;
	
КонецФункции

// Инициализировать структуру данных шапки документа ИС МП.
// 
// Параметры:
//  ДанныеОбработки - Структура - Данные из сервиса ИС МП.
// Возвращаемое значение:
//  Структура - Описание:
//   * PDF - Ссылка на PDF.
//   * СтатусЗагрузкиОписание - Строка - Описание статуса загрузки документа.
//   * СтатусЗагрузки - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
//   * ДатаЗагрузки - Дата - Дата загрузки документа в ИС МП.
//   * СуммаНДС - Число - Сумма НДС.
//   * Сумма - Число - Сумма документа.
//   * ПолучательНаименование - Строка - Наименование получателя.
//   * ОтправительНаименование - Строка - Наименование отправителя.
//   * Статус - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
//   * Тип - ПеречислениеСсылка.ТипыДокументовИСМП - Тип документа.
//   * Входящий - Булево - Признак входящего документа
//   * Дата - Дата - Дата документа
//   * Идентификатор - Строка - Идентификатор документа.
Функция ИнициализироватьДанныеШапкиЗаказаНаЭмиссиюКодовМаркировки(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("Идентификатор");
		Данные.Вставить("ИННВладельца");
		Данные.Вставить("НаименованиеВладельца");
		Данные.Вставить("КоличествоGTIN");
		Данные.Вставить("КоличествоКодовМаркировки");
		Данные.Вставить("НаименованиеВладельца");
		Данные.Вставить("Дата");
		Данные.Вставить("Статус");
		
	Иначе
		
		Данные = ИнициализироватьДанныеШапкиЗаказаНаЭмиссиюКодовМаркировки();
		
		ДанныеОбработки.Свойство("order_id",            Данные.Идентификатор);
		ДанныеОбработки.Свойство("participant_inn",     Данные.ИННВладельца);
		ДанныеОбработки.Свойство("participant_name",    Данные.НаименованиеВладельца);
		ДанныеОбработки.Свойство("gtin_total_quantity", Данные.КоличествоGTIN);
		ДанныеОбработки.Свойство("code_total_quantity", Данные.КоличествоКодовМаркировки);
		
		Если ДанныеОбработки.Свойство("order_status") Тогда
			Данные.Статус = СтатусЗаказаНаЭмиссиюКодовМаркировки(ДанныеОбработки.order_status);
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("order_creation_date") Тогда
			Данные.Дата = ИнтеграцияИС.ДатаИзСтрокиUNIX(ДанныеОбработки.order_creation_date);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ИнициализироватьИнтервал() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НачалоПериода");
	ПараметрыОтбора.Вставить("КонецПериода");
	
	Возврат ПараметрыОтбора;
	
КонецФункции

Функция ИнициализироватьПараметрыОтбораДокументов() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Идентификатор");
	ПараметрыОтбора.Вставить("ИНН");
	ПараметрыОтбора.Вставить("Интервал");
	ПараметрыОтбора.Вставить("ТипЗапроса");
	ПараметрыОтбора.Вставить("ТипДокумента");
	ПараметрыОтбора.Вставить("СтатусДокумента");
	ПараметрыОтбора.Вставить("ФорматДокумента");
	
	Возврат ПараметрыОтбора;
	
КонецФункции

Функция ИнициализироватьПараметрыОтбораСредствИдентификации() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КодМаркировки");
	ПараметрыОтбора.Вставить("ИННПроизводителя");
	ПараметрыОтбора.Вставить("СерийныйНомер");
	ПараметрыОтбора.Вставить("GTIN");
	ПараметрыОтбора.Вставить("СерийныйНомер");
	ПараметрыОтбора.Вставить("Статус");
	ПараметрыОтбора.Вставить("Интервал");
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Преобразовывает текстовое представление статуса кода маркировки МОТП в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, Строка - статус кода маркировки.
Функция СтатусКодаМаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Неопределено Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "EMITTED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Эмитирован;
		ИначеЕсли ЗначениеПоиска = "APPLIED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Нанесен;
		ИначеЕсли ЗначениеПоиска = "INTRODUCED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборот;
		ИначеЕсли ЗначениеПоиска = "RECYCLED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Утилизирован;
		ИначеЕсли ЗначениеПоиска = "RETIRED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота;
		ИначеЕсли ЗначениеПоиска = "RESERVED_NOT_USED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
		ИначеЕсли ЗначениеПоиска = "INTRODUCED_RETURNED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате;
		ИначеЕсли ЗначениеПоиска = "DISAGGREGATED" Или ЗначениеПоиска = "DISAGGREGATION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Разагрегирован;
		ИначеЕсли ЗначениеПоиска = "EXPORTED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Экспортирован;
		ИначеЕсли ЗначениеПоиска = "ELIMINATED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.НеИспользован;
		
		// Расширенные статусы
		ИначеЕсли ЗначениеПоиска = "WAIT_REMARK" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПовторнойМаркировки;
		ИначеЕсли ЗначениеПоиска = "WAIT_SHIPMENT" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки;
		ИначеЕсли ЗначениеПоиска = "WAIT_TRANSFER_TO_OWNER" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПередачуСобственнику;
		
		ИначеЕсли ЗначениеПоиска = "REMARK_RETIRED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриПеремаркировке;
		ИначеЕсли ЗначениеПоиска = "LOAN_RETIRED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки;
		ИначеЕсли ЗначениеПоиска = "RETIRED_CANCELLATION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания;
		ИначеЕсли ЗначениеПоиска = "RETIRED_RETAIL" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа;
		ИначеЕсли ЗначениеПоиска = "RETIRED_EEC_EXPORT" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС;
		ИначеЕсли ЗначениеПоиска = "RETIRED_BEYOND_EEC_EXPORT" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС;
		ИначеЕсли ЗначениеПоиска = "RETIRED_RETURN" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу;
		ИначеЕсли ЗначениеПоиска = "RETIRED_DAMAGE_LOSS" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении;
		ИначеЕсли ЗначениеПоиска = "RETIRED_DESTRUCTION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУничтожении;
		ИначеЕсли ЗначениеПоиска = "RETIRED_CONFISCATION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация;
		ИначеЕсли ЗначениеПоиска = "RETIRED_LIQUIDATION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия;
		ИначеЕсли ЗначениеПоиска = "RETIRED_ENTERPRISE_USE" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Эмитирован Тогда
			Возврат "EMITTED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Нанесен Тогда
			Возврат "APPLIED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборот Тогда
			Возврат "INTRODUCED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Утилизирован Тогда
			Возврат "RECYCLED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота Тогда
			Возврат "RETIRED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
			Возврат "RESERVED_NOT_USED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате Тогда
			Возврат "INTRODUCED_RETURNED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Разагрегирован Тогда
			Возврат "DISAGGREGATED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Экспортирован Тогда
			Возврат "EXPORTED";
		
		// Расширенные статусы
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПовторнойМаркировки Тогда
			Возврат "WAIT_REMARK";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки Тогда
			Возврат "WAIT_SHIPMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПередачуСобственнику Тогда
			Возврат "WAIT_TRANSFER_TO_OWNER";
		
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриПеремаркировке Тогда
			Возврат "REMARK_RETIRED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки Тогда
			Возврат "LOAN_RETIRED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания Тогда
			Возврат "RETIRED_CANCELLATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа Тогда
			Возврат "RETIRED_RETAIL";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС Тогда
			Возврат "RETIRED_EEC_EXPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС Тогда
			Возврат "RETIRED_BEYOND_EEC_EXPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу Тогда
			Возврат "RETIRED_RETURN";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении Тогда
			Возврат "RETIRED_DAMAGE_LOSS";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУничтожении Тогда
			Возврат "RETIRED_DESTRUCTION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация Тогда
			Возврат "RETIRED_CONFISCATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия Тогда
			Возврат "RETIRED_LIQUIDATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия Тогда
			Возврат "RETIRED_ENTERPRISE_USE";
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус кода маркировки: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление статуса документа в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.СтатусыДокументовИСМП, Строка - значение для перекодировки
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыДокументовИСМП, Строка - статус документа.
Функция СтатусДокумента(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "CHECKED_OK" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Проверен;
		ИначеЕсли ЗначениеПоиска = "CHECKED_NOT_OK" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.ЕстьОшибки;
		ИначеЕсли ЗначениеПоиска = "IN_PROGRESS" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Обрабатывается;
		ИначеЕсли ЗначениеПоиска = "PROCESSING_ERROR" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Ошибка;
		ИначеЕсли ЗначениеПоиска = "UNDEFINED" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Неопределен;
		КонецЕсли;
	Иначе
		Если ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Проверен Тогда
			Возврат "CHECKED_OK";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки Тогда
			Возврат "CHECKED_NOT_OK";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
			Возврат "IN_PROGRESS";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
			Возврат "PROCESSING_ERROR";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Неопределен Тогда
			Возврат "UNDEFINED";
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус документа: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление статуса заказа на эмиссию кодов маркировки в значение перечисления и наоборот.
//  NEW:                           Первичный статус-маркер о новом запросе на создание нового заказа
//  NOT_ACCEPTED:                  Контрольная проверка формата заказа не пройдена. Заказ не принят. Конечный статус.
//  ACCEPTED:                      Контрольная проверка формата заказа успешно завершена. Заказ принят.
//  DRAFT:                         Черновик (@Deprecated)
//  READY_TO_VALIDATE:             Внутренний промежуточный статус-маркер, заказ готов к проверке
//  VALIDATING:                    Проверка заказа выполняется
//  VALIDATION_FAILED:             Контрольно-логическая проверка заказа не пройдена.
//                                 Конечный статус до обновления параметров заказа.
//  VALIDATED:                     Контрольно-логическая проверка заказа успешно завершена.
//                                 Заказ готов к рассмотрению оператором.
//  PENDING_REVIEW:                На рассмотрении оператором
//  REJECTED:                      Отказано оператором при проверки данных участника в ЕГРЮЛ/ЕГРИП/РАФП. Конечный статус.
//  APPROVED:                      Согласовано оператором
//  PAYMENT:                       Ожидается оплата - с UI
//  ANNULLED:                      Аннулирован - по истечению срока оплаты. Конечный статус.
//  READY_TO_PROCESS:              Внутренний промежуточный статус-маркер, заказ готов к обработке 
//  PROCESSING:                    Обработка заказа выполняется 
//  PROCESSING_FAILED:             Обработка заказа завершилась с ошибкой. Конечный статус.
//  PROCESSED:                     Обработка заказа успешно завершена
//  READY_FOR_EXTERNAL_PROCESSING: Принят и готов к обработке внешней системой (СУЗ).
//                                 Заказ в этом статусе будет передаваться внешней системе в обработку
//  EXTERNAL_PROCESSING:           Принят к обработке внешней системой (СУЗ). Обработка внешней системой - в процессе.
//                                 Заказ в этом статусе не будет повторно передаваться в обработку внешней системе.
//  PRODUCTION:                    Принят и передан в производство - оплата выполнена - с UI
//  MK_EMITTED:                    КМ Эмитирован - при POOL_STATUS.EXHAUSTED
//  MK_PARTLY_EMITTED:             КМ частично эмитирован
//  IO_EMITTED:                    СИ эмитировано - при подтверждении в ЦЭМ на UI
//  IO_SHIPPED:                    СИ отгружено заказчику - при подтверждении в ЦЭМ на UI
//  COMPLETED:                     Исполнен - при подтверждении принятия заказа участником оборота на UI. Конечный статус.
//  ERROR:                         Произошла ошибка на производстве. Конечный статус до исправления ошибки.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП, Строка - значение для перекодировки
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП, Строка - статус документа.
Функция СтатусЗаказаНаЭмиссиюКодовМаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "NEW" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКПроверкеФормата;
		ИначеЕсли ЗначениеПоиска = "NOT_ACCEPTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаПроверкаФорматаНеПройдена;
		ИначеЕсли ЗначениеПоиска = "ACCEPTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМППроверкаФорматаПройдена;
		ИначеЕсли ЗначениеПоиска = "DRAFT" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Черновик;
		ИначеЕсли ЗначениеПоиска = "READY_TO_VALIDATE" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПККонтрольноЛогическойПроверке;
		ИначеЕсли ЗначениеПоиска = "VALIDATING" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПВыполняетсяКонтрольноЛогическаяПроверка;
		ИначеЕсли ЗначениеПоиска = "VALIDATION_FAILED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаКонтрольноЛогическаяПроверкаНеПройдена;
		ИначеЕсли ЗначениеПоиска = "VALIDATED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКРассмотрениюОператором;
		ИначеЕсли ЗначениеПоиска = "PENDING_REVIEW" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПНаРассмотренииОператором;
		ИначеЕсли ЗначениеПоиска = "REJECTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОтклоненОператором;
		ИначеЕсли ЗначениеПоиска = "APPROVED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПСогласованОператором;
		ИначеЕсли ЗначениеПоиска = "PAYMENT" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.КОплате;
		ИначеЕсли ЗначениеПоиска = "ANNULLED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Аннулирован;
		ИначеЕсли ЗначениеПоиска = "READY_TO_PROCESS" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКОбработке;
		ИначеЕсли ЗначениеПоиска = "PROCESSING" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбрабатывается;
		ИначеЕсли ЗначениеПоиска = "PROCESSING_FAILED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОбработки;
		ИначеЕсли ЗначениеПоиска = "PROCESSED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбработан;
		ИначеЕсли ЗначениеПоиска = "READY_FOR_EXTERNAL_PROCESSING" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКПередачеВСУЗ;
		ИначеЕсли ЗначениеПоиска = "EXTERNAL_PROCESSING" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
		ИначеЕсли ЗначениеПоиска = "PRODUCTION" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКПроизводству;
		ИначеЕсли ЗначениеПоиска = "MK_EMITTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы;
		ИначеЕсли ЗначениеПоиска = "MK_PARTLY_EMITTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично;
		ИначеЕсли ЗначениеПоиска = "IO_EMITTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиЭмитированы;
		ИначеЕсли ЗначениеПоиска = "IO_SHIPPED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиОтгружены;
		ИначеЕсли ЗначениеПоиска = "COMPLETED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Выполнен;
		ИначеЕсли ЗначениеПоиска = "ERROR" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус заказа на эмиссию кодов маркировки: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление статуса строки заказа на эмиссию кодов маркировки в значение перечисления и наоборот.
//  DRAFT:                         // Черновик
//  READY_TO_PROCESS:              // начальный статус - готов к обработке
//  PROCESSING:                    // обработка началась
//  PROCESSED:                     // обработка закончилась
//  READY_FOR_EXTERNAL_PROCESSING: // Принят и готов к обработке внешней системой (СУЗ)
//  EXTERNAL_PROCESSING:           // Подзаказ принят внешней системой в обработку.
//  PRODUCTION:                    // КМ заказаны и готовы к использованию (или уже используются)
//  EMITTED:                       // Все КМ из пула заказа запрошены на использование в печать
//  VERIFIED:                      // Распечатанный КМ проверен верификатором
//  COMPLETED:                     // Исполнен - при подтверждении принятия заказа участником оборота на UI
//  ERROR:                         // Произошла ошибка
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП, Строка - значение для перекодировки
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП, Строка - статус документа.
Функция СтатусСтрокиЗаказаНаЭмиссиюКодовМаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "DRAFT" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.Черновик;
		ИначеЕсли ЗначениеПоиска = "READY_TO_PROCESS" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКОбработке;
		ИначеЕсли ЗначениеПоиска = "PROCESSING" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбрабатывается;
		ИначеЕсли ЗначениеПоиска = "PROCESSED" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбработан;
		ИначеЕсли ЗначениеПоиска = "READY_FOR_EXTERNAL_PROCESSING" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКПередачеВСУЗ;
		ИначеЕсли ЗначениеПоиска = "EXTERNAL_PROCESSING" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
		ИначеЕсли ЗначениеПоиска = "PRODUCTION" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКПроизводству;
		ИначеЕсли ЗначениеПоиска = "EMITTED" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыЭмитированы;
		ИначеЕсли ЗначениеПоиска = "VERIFIED" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыВерифицированы;
		ИначеЕсли ЗначениеПоиска = "COMPLETED" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.Выполнен;
		ИначеЕсли ЗначениеПоиска = "ERROR" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус строки заказа на эмиссию кодов маркировки: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Перекодирует способ выпуска товаров в для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.СпособыВводаВОборотСУЗ - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.СпособыВводаВОборотСУЗ - Результат перекодирования.
Функция СпособВыпускаВОборот(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "LOCAL" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.Производство;
	ИначеЕсли ЗначениеПоиска = "FOREIGN" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.Импорт;
	ИначеЕсли ЗначениеПоиска = "REMAINS" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	ИначеЕсли ЗначениеПоиска = "CROSSBORDER" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля;
		
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.Производство Тогда
		Результат = "LOCAL";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.Импорт Тогда
		Результат = "FOREIGN";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		Результат = "REMAINS";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля Тогда
		Результат = "CROSSBORDER";
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный способ выпуска в оборот: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует вид документа сертификации для обмена с ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИСМП - Результат перекодирования.
Функция ВидДокументаСертификации(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "CONFORMITY_DECLAR" Тогда
		Результат = Перечисления.ВидыДокументовОбязательнойСертификацииИСМП.ДекларацияСоответствия;
	ИначеЕсли ЗначениеПоиска = "CONFORMITY_CERT" Тогда
		Результат = Перечисления.ВидыДокументовОбязательнойСертификацииИСМП.СертификатСоответствия;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИСМП.ДекларацияСоответствия Тогда
		Результат = "CONFORMITY_DECLAR";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИСМП.СертификатСоответствия Тогда
		Результат = "CONFORMITY_CERT";
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный вид документа сертификации: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует вид средства идентификации для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ВидыСредствИдентификацииСУЗ - Значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ВидыСредствИдентификацииСУЗ - Результат перекодирования.
Функция ВидСредстваИдентификации(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "GLUED" Тогда
		Результат = Перечисления.ВидыСредствИдентификацииСУЗ.Клеевой;
	ИначеЕсли ЗначениеПоиска = "PRINTED" Тогда
		Результат = Перечисления.ВидыСредствИдентификацииСУЗ.Печатный;
	ИначеЕсли ЗначениеПоиска = "HINGED" Тогда
		Результат =  Перечисления.ВидыСредствИдентификацииСУЗ.Навесной;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыСредствИдентификацииСУЗ.Клеевой Тогда
		Результат =  "GLUED";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыСредствИдентификацииСУЗ.Печатный Тогда
		Результат =  "PRINTED";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыСредствИдентификацииСУЗ.Навесной Тогда
		Результат =  "HINGED";
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный вид средства идентификации: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует вид маркировки для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ВидыМаркировкиСУЗ - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ВидыМаркировкиСУЗ - Результат перекодирования.
Функция ВидМаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "ON_PRODUCT" Тогда
		Результат = Перечисления.ВидыМаркировкиСУЗ.НаТовар;
	ИначеЕсли ЗначениеПоиска = "ON_PRODUCT_LABEL" Тогда
		Результат = Перечисления.ВидыМаркировкиСУЗ.НаТоварныйЯрлык;
	ИначеЕсли ЗначениеПоиска = "ON_PACKAGE" Тогда
		Результат =  Перечисления.ВидыМаркировкиСУЗ.НаПотребительскуюУпаковку;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыМаркировкиСУЗ.НаТовар Тогда
		Результат =  "ON_PRODUCT";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыМаркировкиСУЗ.НаПотребительскуюУпаковку Тогда
		Результат =  "ON_PACKAGE";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыМаркировкиСУЗ.НаТоварныйЯрлык Тогда
		Результат =  "ON_PRODUCT_LABEL";
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный вид вид маркировки: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует принятое решение для обмена с ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ПринятыеРешенияИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ПринятыеРешенияИСМП - Результат перекодирования.
Функция ПринятоеРешение(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.ВыпускТоваровРазрешен Тогда
		Результат = 10;
	ИначеЕсли ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.ВыпускТоваровПриУсловииИсполненияОбязательств Тогда
		Результат = 11;
	ИначеЕсли ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.ВыпускТоваровПоСтатье121 Тогда
		Результат = 12;
	ИначеЕсли ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.ВыпускТоваровПоСтатье122 Тогда
		Результат = 13;
	ИначеЕсли ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.ВыпускТоваровПоСтатье123 Тогда
		Результат = 14;
	ИначеЕсли ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.УсловныйВыпускТоваров Тогда
		Результат = 20;
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестное решение: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует причину перемаркировки для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ПричиныПеремаркировкиТоваровИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ПричиныПеремаркировкиТоваровИСМП - Результат перекодирования.
Функция ПричинаПеремаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "DAMAGED_OR_LOST" Тогда
		Результат = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтраченоСИКМ;
	ИначеЕсли ЗначениеПоиска = "ERROR_DETECTED" Тогда
		Результат = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтраченоСИКМ Тогда
		Результат = "DAMAGED_OR_LOST";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара Тогда
		Результат = "ERROR_DETECTED";
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестная причина перемаркировки: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует вид маркировки для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ПричиныСписанияКодовМаркировкиИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ПричиныСписанияКодовМаркировкиИСМП - Результат перекодирования.
Функция ПричинаСписанияКодаМаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "KM_SPOILED" Тогда
		Результат = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Испорчен;
	ИначеЕсли ЗначениеПоиска = "KM_LOST" Тогда
		Результат = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Утерян;
	ИначеЕсли ЗначениеПоиска = "KM_DESTROYED" Тогда
		Результат =  Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Уничтожен;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Испорчен Тогда
		Результат = "KM_SPOILED";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Утерян Тогда
		Результат = "KM_LOST";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Уничтожен Тогда
		Результат = "KM_DESTROYED";
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестная причина списания: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует причину перемаркировки для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.ПричиныПеремаркировкиТоваровИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ПричиныСписанияКодовМаркировкиИСМП - Результат перекодирования.
Функция ПричинаСписанияКодаМаркировкиДляПеремаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтраченоСИКМ Тогда
		Результат = "KM_SPOILED";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара Тогда
		Результат = "KM_DESTROYED";
	ИначеЕсли ЗначениеПоиска = "DAMAGED_OR_LOST" Тогда
		Результат = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтраченоСИКМ;
	ИначеЕсли ЗначениеПоиска = "ERROR_DETECTED" Тогда
		Результат = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара;
	
	ИначеЕсли ЗначениеПоиска = "CANCELLATION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания;
	ИначеЕсли ЗначениеПоиска = "RETAIL" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа;
	ИначеЕсли ЗначениеПоиска = "EEC_EXPORT" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС;
	ИначеЕсли ЗначениеПоиска = "BEYOND_EEC_EXPORT" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС;
	ИначеЕсли ЗначениеПоиска = "RETURN" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу;
	ИначеЕсли ЗначениеПоиска = "DAMAGE_LOSS" Или ЗначениеПоиска = "KM_SPOILED" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении;
	ИначеЕсли ЗначениеПоиска = "DESTRUCTION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУничтожении;
	ИначеЕсли ЗначениеПоиска = "CONFISCATION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация;
	ИначеЕсли ЗначениеПоиска = "LIQUIDATION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия;
	ИначеЕсли ЗначениеПоиска = "ENTERPRISE_USE" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия;
	
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестная причина списания: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, ИмяПоля, ТолькоЗаполненность = Ложь) Экспорт
	
	Значение = ДанныеСтроки[ИмяПоля];
	ЗначениеДерева = СтрокаДерева[ИмяПоля];
	
	Если Значение = NULL Тогда
		Значение = ЗначениеДерева;
	ИначеЕсли Значение <> Неопределено
		И Значение <> ЗначениеДерева Тогда
		Значение = ?(ТолькоЗаполненность, Ложь, Неопределено);
	КонецЕсли;
	
	ДанныеСтроки[ИмяПоля] = Значение;
	
КонецПроцедуры

Процедура ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировки, КешКодовМаркировки) Экспорт
	
	СтрокаДереваИзКеша = КешКодовМаркировки[КодМаркировки];
	Если СтрокаДереваИзКеша <> Неопределено Тогда
		Если СтрокаДереваИзКеша.Родитель = Неопределено Тогда
			// Код маркировки уже был добавлен в корень дерева упаковок.
			// Требуется удаление упаковки-дубля из дерева упаковок.
			СтрокаДереваИзКеша.Владелец().Строки.Удалить(СтрокаДереваИзКеша);
			КешКодовМаркировки.Удалить(КодМаркировки);
		Иначе
			ВызватьИсключение
				СтрШаблон(
					НСтр("ru = 'В процессе построения дерева упаковок произошла внутренняя ошибка при обработке кода маркировки %1'"),
					КодМаркировки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Преобразовывает текстовое представление типа документа в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.ВидыОперацийИСМП, Строка - значение для перекодировки
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыОперацийИСМП, Строка - Тип документа.
Функция ВидОперации(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "LP_INTRODUCE_GOODS" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ;
		ИначеЕсли ЗначениеПоиска = "LP_GOODS_IMPORT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС;
		ИначеЕсли ЗначениеПоиска = "LK_CONTRACT_COMMISSIONING" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору;
		ИначеЕсли ЗначениеПоиска = "LK_INDI_COMMISSIONING" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц;
		ИначеЕсли ЗначениеПоиска = "LP_INTRODUCE_OST" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков;
		ИначеЕсли ЗначениеПоиска = "CROSSBORDER" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля;
		ИначеЕсли ЗначениеПоиска = "LP_SHIP_GOODS" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_CANCEL_SHIPMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_ACCEPT_GOODS" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LK_REMARK" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.Перемаркировка;
		ИначеЕсли ЗначениеПоиска = "LK_KM_CANCELLATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки;
		ИначеЕсли ЗначениеПоиска = "LK_APPLIED_KM_CANCELLATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки;
		ИначеЕсли ЗначениеПоиска = "AGGREGATION_DOCUMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияСоздание;
		ИначеЕсли ЗначениеПоиска = "DISAGGREGATION_DOCUMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияУдаление;
		ИначеЕсли ЗначениеПоиска = "REAGGREGATION_DOCUMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияИзменение;
		ИначеЕсли ЗначениеПоиска = "OST_DESCRIPTION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки;
		КонецЕсли;
	Иначе
		Если ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ Тогда
			Возврат "LP_INTRODUCE_GOODS";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС Тогда
			Возврат "LP_GOODS_IMPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
			Возврат "LK_CONTRACT_COMMISSIONING";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц Тогда
			Возврат "LK_INDI_COMMISSIONING";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
			Возврат "LP_INTRODUCE_OST";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля Тогда
			Возврат "CROSSBORDER";
		ИначеЕсли ЗначениеПоиска = "НоваяОперацияОтгрузка" Тогда
			Возврат "LP_SHIP_GOODS";
		ИначеЕсли ЗначениеПоиска = "НоваяОперацияОтменаОтгрузки" Тогда
			Возврат "LP_CANCEL_SHIPMENT";
		ИначеЕсли ЗначениеПоиска = "НоваяОперацияПодтверждениеПолучения" Тогда
			Возврат "LP_ACCEPT_GOODS";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.Перемаркировка Тогда
			Возврат "LK_REMARK";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки Тогда
			Возврат "LK_KM_CANCELLATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки Тогда
			Возврат "LK_APPLIED_KM_CANCELLATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание Тогда
			Возврат "AGGREGATION_DOCUMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			Возврат "DISAGGREGATION_DOCUMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение Тогда
			Возврат "REAGGREGATION_DOCUMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
			Возврат "OST_DESCRIPTION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа Тогда
			Возврат "LK_RECEIPT";
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный вид операции: %1'"),
			ЗначениеПоиска);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти