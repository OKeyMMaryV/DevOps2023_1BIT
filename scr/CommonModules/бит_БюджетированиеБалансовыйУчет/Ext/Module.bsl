
#Область СлужебныйПрограммныйИнтерфейс
	
// Процедура формирует проводки по регистру бухгалтерии бюджетирование.
// 
// Параметры:
//  ТаблицаДанные              - ТаблицаЗначений - Таблица по которой формируются движения 
// 								 				   по регистру бит_ОборотыПоБюджетам
//  НаборЗаписейБюджетирование - РегистрБухгалтерииНаборЗаписей.бит_Бюджетирование
//  ОчищатьНаборЗаписей		   - Булево (По умолчанию = Истина)
//  ДатаСторно                 - Дата (По умолчанию = Неопределено).
// 
Процедура СформироватьПроводкиБюджетирования(ТаблицаДанные, НаборЗаписейБюджетирование, ОчищатьНаборЗаписей = Истина, ДатаСторно = Неопределено) Экспорт

	Если ОчищатьНаборЗаписей Тогда
		НаборЗаписейБюджетирование.Очистить();
		НаборЗаписейБюджетирование.Записывать = Истина;	
	КонецЕсли;	
	
	// Получим массив шаблонов проводок для данного набора статей.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_СтатьиОборотовШаблоныПроводок.Ссылка КАК СтатьяОборотов,
	               |	бит_СтатьиОборотовШаблоныПроводок.СчетДТ,
	               |	бит_СтатьиОборотовШаблоныПроводок.СчетКТ,
	               |	бит_СтатьиОборотовШаблоныПроводок.КоэффициентСумма,
	               |	бит_СтатьиОборотовШаблоныПроводок.КоэффициентКоличество,
	               |	бит_СтатьиОборотовШаблоныПроводок.СпособЗаполненияСуммы,
	               |	бит_СтатьиОборотовШаблоныПроводок.Содержание,
	               |	бит_СтатьиОборотовШаблоныПроводок.НомерЖурнала
	               |ИЗ
	               |	Справочник.бит_СтатьиОборотов.ШаблоныПроводок КАК бит_СтатьиОборотовШаблоныПроводок
	               |ГДЕ
	               |	бит_СтатьиОборотовШаблоныПроводок.Ссылка В(&МассивСтатей)
	               |ИТОГИ ПО
	               |	СтатьяОборотов";
				   
	МассивСтатей = ТаблицаДанные.ВыгрузитьКолонку("СтатьяОборотов");	
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	Запрос.УстановитьПараметр("МассивСтатей",МассивСтатей);			   

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда	
		Возврат; 	
	КонецЕсли; 
	
	ОписаниеСчет    = Новый ОписаниеТипов("ПланСчетовСсылка.бит_Бюджетирование");
	ОписаниеЧисло   = Новый ОписаниеТипов("Число"); 
	ОписаниеСтрока  = Новый ОписаниеТипов("Строка");
	ОписаниеСпособ  = Новый ОписаниеТипов("ПеречислениеСсылка.бит_СпособыЗаполненияСуммПроводокБюджетирования");
	
	// Заполним соответствие статья - таблица шаблонов проводок.
	ШаблоныПроводок = Новый Соответствие;
	
	ВыборкаСтатьи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтатьи.Следующий() Цикл
		
		Шаблон = Новый ТаблицаЗначений;
		Шаблон.Колонки.Добавить("СчетДТ",ОписаниеСчет);
		Шаблон.Колонки.Добавить("СчетКТ",ОписаниеСчет);
		Шаблон.Колонки.Добавить("КоэффициентСумма"     ,ОписаниеЧисло);
		Шаблон.Колонки.Добавить("КоэффициентКоличество",ОписаниеЧисло);
		Шаблон.Колонки.Добавить("Содержание"           ,ОписаниеСтрока);
		Шаблон.Колонки.Добавить("НомерЖурнала"         ,ОписаниеСтрока);
		Шаблон.Колонки.Добавить("СпособЗаполненияСуммы",ОписаниеСпособ);
		
		Выборка = ВыборкаСтатьи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Шаблон.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			
		КонецЦикла; // По выборке записей
		
		ШаблоныПроводок.Вставить(ВыборкаСтатьи.СтатьяОборотов,Шаблон);
		
	КонецЦикла; // По выборке статей
	
	// Подготовим данные, необходимые для формирования проводок.
	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","имя");
	ИмяОрганизация = бит_МеханизмДопИзмерений.ИмяДопИзмененияОрганизация();
	
	Постфиксы = Новый Массив;
	Постфиксы.Добавить("Регл");
	Постфиксы.Добавить("Упр");
	Постфиксы.Добавить("Сценарий");
	
	КоличествоСубконтоБюдж = Метаданные.ПланыСчетов.бит_Бюджетирование.МаксКоличествоСубконто;
	
	// Формируем проводки
	Для каждого СтрокаДанные Из ТаблицаДанные Цикл
		
		// Заполним соответствие аналитик для установки субконто.
		АналитикиУчета = Новый Соответствие;
		
		Для каждого КлючИЗначение Из Измерения Цикл
		
			ЗначениеИзмерения = СтрокаДанные[КлючИЗначение.Ключ];
			Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
				АналитикиУчета.Вставить(ТипЗнч(ЗначениеИзмерения),ЗначениеИзмерения);
			КонецЕсли; 
		
		КонецЦикла; // По аналитикам учета
		
		Шаблон = ШаблоныПроводок[СтрокаДанные.СтатьяОборотов];
		Если Шаблон <> Неопределено Тогда
		
			 Для каждого СтрокаШаблон Из Шаблон Цикл
			 
			 	Проводка = НаборЗаписейБюджетирование.Добавить();
				Проводка.Активность = Истина;				
				Проводка.Период     = СтрокаДанные.Период;
				
				// Измерения
				Проводка.Сценарий   = СтрокаДанные.Сценарий;
				Если ЗначениеЗаполнено(ИмяОрганизация) Тогда					
					Проводка.Организация = СтрокаДанные[ИмяОрганизация];					
				КонецЕсли;	
				Проводка.ЦФО = СтрокаДанные.ЦФО;
				
				// Счета, субконто, небалансовые ресурсы
				ЗаполнитьНебалансовыеСвойства(СтрокаДанные,СтрокаШаблон,АналитикиУчета,Проводка,КоличествоСубконтоБюдж,"Дт");
				ЗаполнитьНебалансовыеСвойства(СтрокаДанные,СтрокаШаблон,АналитикиУчета,Проводка,КоличествоСубконтоБюдж,"Кт");
				
				// Балансовые ресурсы				
				Для каждого Постфикс Из Постфиксы Цикл
					Если СтрокаШаблон.СпособЗаполненияСуммы = Перечисления.бит_СпособыЗаполненияСуммПроводокБюджетирования.НДС Тогда
			            // Для совместимости с предыдущими настройками.
						СуммаКУстановке = СтрокаДанные["Сумма"+Постфикс];
					ИначеЕсли СтрокаШаблон.СпособЗаполненияСуммы = Перечисления.бит_СпособыЗаполненияСуммПроводокБюджетирования.СуммаБезНДС Тогда
			            // Для совместимости с предыдущими настройками.
						СуммаКУстановке = СтрокаДанные["Сумма"+Постфикс];
					Иначе	
						СуммаКУстановке = СтрокаДанные["Сумма"+Постфикс];
					КонецЕсли; 
				    Проводка["Сумма"+Постфикс] = СуммаКУстановке*СтрокаШаблон.КоэффициентСумма;
				КонецЦикла; 
				
				// Реквизиты
				Проводка.СтатьяОборотов = СтрокаДанные.СтатьяОборотов;
				Проводка.НомерЖурнала   = СтрокаШаблон.НомерЖурнала;
				Проводка.Содержание     = СтрокаШаблон.Содержание;
                
                // Движения сторно, если необходимо
                Если ЗначениеЗаполнено(ДатаСторно) Тогда
                    ПроводкаСторно = НаборЗаписейБюджетирование.Добавить();
                    ЗаполнитьЗначенияСвойств(ПроводкаСторно, Проводка);
                    ПроводкаСторно.Период = ДатаСторно;
                    // Ресурсы с минусом
                    Для каждого Постфикс Из Постфиксы Цикл
        				ПроводкаСторно["Сумма" + Постфикс] = - Проводка["Сумма" + Постфикс];
    				КонецЦикла;
               КонецЕсли;               
			 
			 КонецЦикла; // По таблице шаблонов
		
		КонецЕсли; // Есть шаблон
	
	КонецЦикла; // По таблица данных
	
КонецПроцедуры // СформироватьПроводкиБюджетирования()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет небалансовый свойства (счета,субконто,валюту,небалансовые ресурсы) 
// проводки бюджетирования.
// 
// Параметры:
//  СтрокаДанные  - СтрокаТаблицыЗначений
//  СтрокаШаблон  - СтрокаТаблицыЗначений
//  АналитикиУчета- Соответствие
//  Проводка      - РегистрБухгалтериибит_Бюджетирование.Запись
//  КоличествоСубконтоБюджетирование - Число
//  ДтКт                             - Строка - "Дт";"Кт".
// 
Процедура ЗаполнитьНебалансовыеСвойства(СтрокаДанные,СтрокаШаблон,АналитикиУчета,Проводка,КоличествоСубконтоБюдж,ДтКт)

	ИмяСчета         = "Счет"+ДтКт;
	ИмяКоличество    = "Количество"+ДтКт;
	ИмяСубконто      = "Субконто"+ДтКт;
	ИмяВалюты        = "Валюта"+ДтКт;
	ИмяВалютнойСуммы = "ВалютнаяСумма"+ДтКт;
	
	// Счета
	Проводка[ИмяСчета] = СтрокаШаблон[ИмяСчета];
	СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка[ИмяСчета]);
    
	// Субконто
	Для Ном = 1 По КоличествоСубконтоБюдж Цикл
        
        Если Ном <= СвСч.КоличествоСубконто Тогда
            
            ВидСубконто = СвСч["ВидСубконто" + Ном];
            ТипЗнчСуб   = СвСч["ВидСубконто" + Ном + "ТипЗначения"];
            
            Если ТипЗнчСуб.Типы().Количество() > 1  Тогда
				// Установка значения для составных типов
				Для каждого КиЗ Из АналитикиУчета Цикл
					Если ТипЗнчСуб.СодержитТип(КиЗ.Ключ) Тогда
						 Проводка[ИмяСубконто][ВидСубконто] = ТипЗнчСуб.ПривестиЗначение(КиЗ.Значение);
						 Прервать;
					КонецЕсли;	
				КонецЦикла; 
			Иначе	
				ТипЗнчСубконто   = ТипЗнч(ТипЗнчСуб.ПривестиЗначение());
				ЗначениеСубконто = АналитикиУчета[ТипЗнчСубконто];
				Проводка[ИмяСубконто][ВидСубконто] = ТипЗнчСуб.ПривестиЗначение(ЗначениеСубконто);
            КонецЕсли; 
        КонецЕсли;
	КонецЦикла;	
	
	// Количество
	Если СвСч.Количественный Тогда
		Проводка[ИмяКоличество] = СтрокаДанные.Количество*СтрокаШаблон.КоэффициентКоличество;
	КонецЕсли; 

	// Валюта, валютные суммы
	Если СвСч.Валютный Тогда
		Проводка[ИмяВалюты] = СтрокаДанные.Валюта;		
		Если СтрокаШаблон.СпособЗаполненияСуммы = Перечисления.бит_СпособыЗаполненияСуммПроводокБюджетирования.НДС Тогда
			// Для совместимости с предыдущими настройками.
			СуммаКУстановке = СтрокаДанные["Сумма"];
		ИначеЕсли СтрокаШаблон.СпособЗаполненияСуммы = Перечисления.бит_СпособыЗаполненияСуммПроводокБюджетирования.СуммаБезНДС Тогда
			// Для совместимости с предыдущими настройками.
			СуммаКУстановке = СтрокаДанные["Сумма"];
		Иначе	
			СуммаКУстановке = СтрокаДанные["Сумма"];
		КонецЕсли; 		
		Проводка[ИмяВалютнойСуммы] = СуммаКУстановке;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
