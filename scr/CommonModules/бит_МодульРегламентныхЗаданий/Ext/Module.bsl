////////////////////////////////////////////////////////////////////////////////
// 1С:Бухучет и торговля
//  ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ РЕГЛАМЕНТНЫХ ЗАДАНИЙ
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область КазначействоУчетДоговоров
	
// Процедура выполняет создание документов планирования,
// вызывается регламентным заданием "бит_СозданиеДокументовПланирования".
// 
// Параметры:
//  Нет.
// 
Процедура СозданиеДокументовПланирования() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
    ЗаписьЖурналаРегистрации("Начало создания документов планирования" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало создания документов планирования");
                             
	//////////////////////////////////////////////////////////////////////////////////
    // СОЗДАНИЕ ДОКУМЕНТОВ ПЛАНИРОВАНИЯ "ПЛАНИРУЕМОЕ ПОСТУПЛЕНИЕ ДЕНЕЖЭНЫХ СРЕДСТВ".
	
	ОбработкаСозданияДокументов = Обработки.бит_СозданиеПланируемыхПоступлений.Создать();
	ОбработкаСозданияДокументов.НастроитьОбработкуДляРегламентнойОперацииИСоздатьДокументыПланирования();
        
	ЗаписьЖурналаРегистрации("Создание документов планирования завершено" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Создание документов планирования завершено");
    
КонецПроцедуры // СозданиеДокументовПланирования()

// Процедура выполняет закрытие документов планирования,
// вызывается регламентным заданием "бит_ЗакрытиеДокументовПланирования".
// 
// Параметры:
//  Нет.
// 
Процедура ЗакрытиеДокументовПланирования() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
    ЗаписьЖурналаРегистрации("Начало закрытия документов планирования" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало закрытия документов планирования");
                             


	//////////////////////////////////////////////////////////////////////////////////
    // ЗАКРЫТИЕ ДОКУМЕНТОВ ПЛАНИРОВАНИЯ "Заявка на расходование денежных средств (Общая)".



    
	ОбработкаЗакрытия = Обработки.бит_ЗакрытиеДокументовПланирования.Создать();
    ОбработкаЗакрытия.мСинонимДокументаДляЗакрытия = "Заявка на расходование денежных средств (Общая)";
	ОбработкаЗакрытия.НастроитьОбработкуДляРегламентнойОперацииИЗакрытьДокументыПланирования(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая"));
    


    //////////////////////////////////////////////////////////////////////////////////
    // ЗАКРЫТИЕ ДОКУМЕНТОВ ПЛАНИРОВАНИЯ "Заявка на расходование денежных средств".



    
	ОбработкаЗакрытия = Обработки.бит_ЗакрытиеДокументовПланирования.Создать();
    ОбработкаЗакрытия.мСинонимДокументаДляЗакрытия = "Заявка на расходование денежных средств";
	ОбработкаЗакрытия.НастроитьОбработкуДляРегламентнойОперацииИЗакрытьДокументыПланирования(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств"));
    


    //////////////////////////////////////////////////////////////////////////////////
    // ЗАКРЫТИЕ ДОКУМЕНТОВ ПЛАНИРОВАНИЯ "Платежная позиция".



    
	ОбработкаЗакрытия = Обработки.бит_ЗакрытиеДокументовПланирования.Создать();
    ОбработкаЗакрытия.мСинонимДокументаДляЗакрытия = "Платежная позиция";
	ОбработкаЗакрытия.НастроитьОбработкуДляРегламентнойОперацииИЗакрытьДокументыПланирования(Тип("ДокументСсылка.бит_ПлатежнаяПозиция"));
    
	ЗаписьЖурналаРегистрации("Закрытие документов планирования завершено" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Закрытие документов планирования завершено");
    
КонецПроцедуры // ЗакрытиеДокументовПланирования()

// Процедура записывает в регистр "Регистрация оповещений" документы подлежащие визированию.
// 
Процедура бит_фн_ЗарегистрироватьНапоминанияПоДоговорам() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	СписокВидовСобытий = Новый СписокЗначений;
	СписокВидовСобытий.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуНачислений);
	СписокВидовСобытий.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуПлатежей);
    СписокВидовСобытий.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений.ОкончаниеСрокаДействияДоговора);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_фн_НазначениеОповещений.Оповещение,
		|	бит_фн_НазначениеОповещений.ВидСобытия
		|ИЗ
		|	РегистрСведений.бит_фн_НазначениеОповещений КАК бит_фн_НазначениеОповещений
		|ГДЕ
		|	бит_фн_НазначениеОповещений.ВидСобытия В(&СписокЗначений)";
	
	Запрос.УстановитьПараметр("СписокЗначений", СписокВидовСобытий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуПлатежей Тогда
				ВыполнитьРегистрациюСобытийПоГрафикуПлатежейНачислений(Выборка.Оповещение, "ГрафикПлатежей");
				
			ИначеЕсли Выборка.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуНачислений Тогда
				ВыполнитьРегистрациюСобытийПоГрафикуПлатежейНачислений(Выборка.Оповещение, "ГрафикНачислений");

			ИначеЕсли Выборка.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ОкончаниеСрокаДействияДоговора Тогда
				ВыполнитьРегистрациюСобытийПриОцончанииСрокаДействияДоговора(Выборка.Оповещение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти 

#Область Оповещения

// Процедура выполняет отправку оповещений.
// 
Процедура ОтправкаОповещений() Экспорт
	 
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.бит_фн_ОтправкаОповещений);
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьМеханизмОповещений") Тогда
		ВызватьИсключение НСтр("ru = 'Регламентное задание недоступно по функциональным опциям.'");
	КонецЕсли;
 
	ТекстСообщения = НСтр("ru = 'Начало отправки оповещений.'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	 
	 
	Обработки.бит_фн_ОбработкаЗаписейРегистраОповещений.ОтправитьОповещения();
	
	ТекстСообщения = НСтр("ru = 'Отправка оповещений завершена.'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	 
	 
 КонецПроцедуры // ОтправкаОповещений()

// Процедура выполняет удаление отправленных оповещений.
// 
Процедура УдалениеОповещений() Экспорт
	 
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.бит_фн_УдалениеОповещений);
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьМеханизмОповещений") Тогда
		ВызватьИсключение НСтр("ru = 'Регламентное задание недоступно по функциональным опциям.'");
	КонецЕсли;
 
	ТекстСообщения = НСтр("ru = 'Начало удаления отправленных оповещений.'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	 
	 
	Обработки.бит_фн_ОбработкаЗаписейРегистраОповещений.УдалитьОповещения();
	
	ТекстСообщения = НСтр("ru = 'Удаление отправленных оповещений завершено.'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	 
	 
 КонецПроцедуры // УдалениеОповещений()

// Процедура обрабатывает записи регистра бит_фн_РегистрацияСобытийОповещений и 
// формирует оповещения по зарегистрированным событиям.
// 
Процедура ОбработкаСобытийОповещений() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.бит_фн_ОбработкаСобытийОповещений);
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьМеханизмОповещений") Тогда
		ВызватьИсключение НСтр("ru = 'Регламентное задание недоступно по функциональным опциям.'");
	КонецЕсли;

	ТекстСообщения = НСтр("ru = 'Начало обработки зарегистрированных событий оповещений.'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	 
	 
	Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.ОбработатьСобытияОповещений();
	
	ТекстСообщения = НСтр("ru = 'Обработка зарегистрированных событий оповещений завершена.'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);


КонецПроцедуры // ОбработкаСобытийОповещений() 
						 
// Процедура удаляет обработанные записи регистра бит_фн_РегистрацияСобытийОповещений. 
// 
Процедура УдалениеОбработанныхЗаписейРегистрацииОповещений() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.бит_фн_УдалениеОбработанныхЗаписиРегистрацииОповещений);
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьМеханизмОповещений") Тогда
		ВызватьИсключение НСтр("ru = 'Регламентное задание недоступно по функциональным опциям.'");
	КонецЕсли;

	ТекстСообщения = НСтр("ru = 'Начало удаления обработанных записей регистрации оповещений.'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	 
	 
	Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.УдалитьОбработанныеЗаписи();
	
	ТекстСообщения = НСтр("ru = 'Завершено удаление обработанных записей регистрации оповещений.'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);


КонецПроцедуры // УдалениеОбработанныхЗаписейРегистрацииОповещений()

#КонецОбласти

#Область МеханизмТрансляции

// Процедура выполняет отложенную трансляцию движений.
// 
// 
Процедура ОтложеннаяТрансляция() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ТекстСообщения = НСтр("ru = 'Начало выполнения отложенной трансляции.'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ОчередьТрансляции.Статус,
	               |	бит_ОчередьТрансляции.Организация,
	               |	бит_ОчередьТрансляции.Объект КАК Объект,
	               |	бит_ОчередьТрансляции.Источник,
	               |	бит_ОчередьТрансляции.Приемник,
	               |	бит_ОчередьТрансляции.ПоставленоВОчередь КАК ПоставленоВОчередь,
	               |	бит_ОчередьТрансляции.Протокол,
	               |	бит_ОчередьТрансляции.ДатаТрансляции
	               |ИЗ
	               |	РегистрСведений.бит_ОчередьТрансляции КАК бит_ОчередьТрансляции
	               |ГДЕ
	               |	бит_ОчередьТрансляции.Статус = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыВыполненияОтложеннойТрансляции.Ожидание)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПоставленоВОчередь
	               |ИТОГИ ПО
	               |	Объект
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Результат = Запрос.Выполнить();
	
	ВыборкаДокумент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		Отказ        = Ложь;
		флЕстьОшибки = Ложь;
		Протокол     = "";
		
		// Прочитаем набор регистра-очереди
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("Объект",ВыборкаДокумент.Объект);
		НаборОчередь = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(СтруктураОтбор,"бит_ОчередьТрансляции");
		
		// Заполним перечень источников и приемников.
		МассивИсточники = Новый Массив;
		МассивПриемники = Новый Массив;
		флВсеИсточники  = Ложь;
		флВсеПриемники  = Ложь;
		
		Выборка = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		
		Пока Выборка.Следующий() Цикл
		
			Если ЗначениеЗаполнено(Выборка.Источник) Тогда
			   МассивИсточники.Добавить(Выборка.Источник);
			Иначе	
			   флВсеИсточники = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Приемник) Тогда
			   МассивПриемники.Добавить(Выборка.Приемник);
			Иначе	
			   флВсеПриемники = Истина;
			КонецЕсли; 
			
		КонецЦикла; // По детальным записям
		
		Если флВсеИсточники Тогда
			
			МассивИсточники = Неопределено;			
			
		КонецЕсли; 
		
		Если флВсеПриемники Тогда
			
			МассивПриемники = Неопределено;
			
		КонецЕсли; 
		
		ДокументОбъект = ВыборкаДокумент.Объект.ПолучитьОбъект();
		
		Если НЕ бит_ОбщегоНазначения.ЗаблокироватьОбъект(ДокументОбъект,Строка(ВыборкаДокумент.Объект),,"Все") Тогда
			
			Протокол     = Протокол+НСтр("ru = 'Не удалось заблокировать объект ""%1%""!'");
			Протокол     = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Протокол,Строка(ВыборкаДокумент.Объект));
			флЕстьОшибки = Истина;
			
		КонецЕсли; 
		
		Если НЕ флЕстьОшибки Тогда
		
			Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
				
				// При наличиии механизма контроля закрытого периода сохраним движения для последующего анализа.
				бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект,Отказ,РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				
			КонецЕсли; 
			
			// Выполним трансляцию движений.
			РезДанные = бит_МеханизмТрансляции.ВыполнитьТрансляцию(ДокументОбъект
																				, МассивИсточники
																				, МассивПриемники
																				, Истина
																				, Перечисления.бит_РежимыТрансляции.Отложенный);
																				
			Протокол = Протокол + РезДанные.Протокол;
			Если РезДанные.ЕстьОшибки = Истина Тогда
			
				флЕстьОшибки = Истина;
			
			КонецЕсли; 
			
			Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
				
				// При наличиии механизма контроля закрытого периода сформируем корректирующие проводки.
				бит_КонтрольЗакрытогоПериода.КонтрольПриОбработкеПроведения(ДокументОбъект,Отказ,РежимЗаписиДокумента.Проведение,Истина);
				
			КонецЕсли; 
			
			Если ДокументОбъект.Заблокирован() Тогда
				
				ДокументОбъект.Разблокировать();
				
			КонецЕсли; 		
		
		КонецЕсли; // Нет ошибок
		
		КоличествоЗаписей = НаборОчередь.Количество();
		
		Для инд = 1 По КоличествоЗаписей Цикл
			
			ИндСтр = КоличествоЗаписей-инд;
			
			ЗаписьОчередь = НаборОчередь[ИндСтр];
			
			// Удалим строки, которые могут помешать записи набора.
			флУдалитьЗапись = Ложь;
			Если  ЗаписьОчередь.Статус = Перечисления.бит_СтатусыВыполненияОтложеннойТрансляции.Ошибка 
				ИЛИ ЗаписьОчередь.Статус = Перечисления.бит_СтатусыВыполненияОтложеннойТрансляции.Выполнено Тогда
				
				флУдалитьЗапись = Истина;
				
			КонецЕсли; 
			
			Если НЕ флУдалитьЗапись Тогда
				
		        // Изменим статус обработанных записей				
				Если флЕстьОшибки Тогда
					ЗаписьОчередь.Статус   = Перечисления.бит_СтатусыВыполненияОтложеннойТрансляции.Ошибка;
				Иначе	
					ЗаписьОчередь.Статус   = Перечисления.бит_СтатусыВыполненияОтложеннойТрансляции.Выполнено;
				КонецЕсли; 
				ЗаписьОчередь.Протокол = Протокол;
				ЗаписьОчередь.ДатаТрансляции = ТекущаяДата();
				
			Иначе	
				
				НаборОчередь.Удалить(ЗаписьОчередь);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборОчередь);
		
	КонецЦикла; // По документам

	ТекстСообщения = НСтр("ru = 'Завершено выполнение отложенной трансляции.'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	
	
КонецПроцедуры // ОтложеннаяТрансляция()

// Процедура удаляет из очереди трансляции обработанные записи.
// 
// 
Процедура ОчисткаОчередиТрансляции()  Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ТекстСообщения = НСтр("ru = 'Начало удаления обработанных записей очереди трансляции.'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	 
	 
	Обработки.бит_ОбработкаЗаписейРегистраОчередьТрансляции.УдалитьОбработанныеЗаписи();
	
	ТекстСообщения = НСтр("ru = 'Завершено удаление обработанных записей очереди трансляции.'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);


КонецПроцедуры // ОчисткаОчередиТрансляции()

#КонецОбласти

#Область ПрочиеЗадания

// Процедура записывает в регистр "Регистрация оповещений" документы подлежащие визированию.
// 
Процедура бит_фн_ЗарегистрироватьДокументыПодлежащиеВизированию(СтруктураПараметров) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	// Проверим корректность переданых параметров.
	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Оповещение") Тогда
		Оповещение = СтруктураПараметров.Оповещение;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("НастройкаОбработкиВизирования") Тогда
		НастройкаОбработкиВизирования = СтруктураПараметров.НастройкаОбработкиВизирования;
	Иначе
		НастройкаОбработкиВизирования = Неопределено;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СогласующиеЛица") Тогда
		СогласующиеЛица = СтруктураПараметров.СогласующиеЛица;
	Иначе
		Возврат;
	КонецЕсли;
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных; 
	Обработки.бит_РабочееМестоВизирования.ИнициализироватьКомпоновщик(Компоновщик, Новый УникальныйИдентификатор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СогласующиеЛица.Пользователь,
	|	СогласующиеЛица.НастройкаОбработкиВизирования
	|ПОМЕСТИТЬ СогласующиеЛица
	|ИЗ
	|	&СогласующиеЛица КАК СогласующиеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	// Добавление кода. Начало. 21.08.2015{{
	|		КОГДА СогласующиеЛица.Пользователь = &ВсеПользователи
	|			ТОГДА СпрПользователи.Ссылка
	// Добавление кода. Конец. 21.08.2015}}
	|		КОГДА ТИПЗНАЧЕНИЯ(СогласующиеЛица.Пользователь) = ТИП(Справочник.ГруппыПользователей)
	|			ТОГДА ПользователиГруппы.Пользователь
	|		ИНАЧЕ СогласующиеЛица.Пользователь
	|	КОНЕЦ КАК Пользователь,
	|	СогласующиеЛица.НастройкаОбработкиВизирования
	|ИЗ
	|	СогласующиеЛица КАК СогласующиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.%ИмяТабЧасти% КАК ПользователиГруппы
	|		ПО СогласующиеЛица.Пользователь = ПользователиГруппы.Ссылка,
	// Добавление кода. Начало. 21.08.2015{{
	|	Справочник.Пользователи КАК СпрПользователи
	// Добавление кода. Конец. 21.08.2015}}
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	// Добавление кода. Начало. 21.08.2015{{
	|		КОГДА СогласующиеЛица.Пользователь = &ВсеПользователи
	|			ТОГДА СпрПользователи.Ссылка
	// Добавление кода. Конец. 21.08.2015}}
	|		КОГДА ТИПЗНАЧЕНИЯ(СогласующиеЛица.Пользователь) = ТИП(Справочник.ГруппыПользователей)
	|			ТОГДА ПользователиГруппы.Пользователь
	|		ИНАЧЕ СогласующиеЛица.Пользователь
	|	КОНЕЦ,
	|	СогласующиеЛица.НастройкаОбработкиВизирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СогласующиеЛица";
	
	Запрос.УстановитьПараметр("ВсеПользователи", Справочники.ГруппыПользователей.ВсеПользователи);
	
	Запрос.УстановитьПараметр("СогласующиеЛица", СогласующиеЛица);
	
	ИмяТабЧасти = бит_ОбщегоНазначения.ИмяТабЧастиГруппыПользователей();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТабЧасти%", ИмяТабЧасти);	
	
	Результат = Запрос.Выполнить();
	
	// Для каждого пользователя укажем настройку обработки визирования.
	ТаблицаПользователей = Результат.Выгрузить();
	
	Для Каждого СтрокаПользователя Из ТаблицаПользователей Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаПользователя.НастройкаОбработкиВизирования) Тогда
			СтрокаПользователя.НастройкаОбработкиВизирования = НастройкаОбработкиВизирования;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивНастроек = ТаблицаПользователей.ВыгрузитьКолонку("НастройкаОбработкиВизирования");
	МассивНастроек = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивНастроек);
	
	// Для каждой настройки получим таблицу документов.
	СоотНастроекИДокументов = Новый Соответствие;
	
	Для Каждого ТекущаяНастройка Из МассивНастроек Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущаяНастройка) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураНастроек = ТекущаяНастройка.ХранилищеНастроек.Получить();
		ВизаФильтр = Неопределено;
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			Компоновщик.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ПараметрыПолучения = Обработки.бит_РабочееМестоВизирования.НовыеПараметрыПолученияТаблицыДокументов();
			ПараметрыПолучения.НастройкиКомпоновщика = Компоновщик.ПолучитьНастройки();
			АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, Новый УникальныйИдентификатор); 
			Обработки.бит_РабочееМестоВизирования.ПолучитьТаблицуДокументов(ПараметрыПолучения, АдресВХранилище);
			ТаблицаДокументов = ПолучитьИзВременногоХранилища(АдресВХранилище);
			СоотНастроекИДокументов.Вставить(ТекущаяНастройка, ТаблицаДокументов);
			
			ВизаФильтр = СтруктураНастроек.Виза;
		КонецЕсли;
		
	КонецЦикла;
	
	ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ДокументыДляВизирования;                  
	
	// Для каждого пользователя определим доступные ему документы.
	Для Каждого СтрокаПользователя Из ТаблицаПользователей Цикл
		
		ТабДокументов = СоотНастроекИДокументов[СтрокаПользователя.НастройкаОбработкиВизирования];
		
		Если НЕ ТабДокументов = Неопределено Тогда
			ДокументыПользователя = ТабДокументов.Скопировать();
			
			ОбработатьТаблицуДокументов(ДокументыПользователя, СтрокаПользователя.Пользователь);
			
			Обработки.бит_РабочееМестоВизирования.ВыполнитьФильтрациюТаблицыДокументов(ДокументыПользователя, 
				СтрокаПользователя.Пользователь, 3, Ложь, ВизаФильтр);
			
			// Зарегистрируем для отправки оповещений документы для визирования по пользователям.
			Для Каждого СтрокаДокумента Из ДокументыПользователя Цикл
				
				Если СтрокаДокумента.ДоступныеНеустановленныеВизы.Количество() = 1 Тогда
					ДоступнаяВиза = СтрокаДокумента.ДоступныеНеустановленныеВизы[0].Значение;
				Иначе
					ДоступнаяВиза = Неопределено;
				КонецЕсли;
				
				ЗарегистрироватьСобытиеДляОповещений(ВидСобытия,Оповещение,СтрокаДокумента.Ссылка,
					СтрокаДокумента.Статус,ДоступнаяВиза,СтрокаПользователя.Пользователь);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает документы плаинрования из доп. условий по договору.
// 
Процедура бит_СоздатьДокументыПланированияИзДопУсловий(СтруктураПараметров) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	// Проверим корректность переданых параметров.
	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СоздаватьЗаявкаНаРасходованиеДС") Тогда
		СоздаватьЗаявкиДС               = СтруктураПараметров.СоздаватьЗаявкаНаРасходованиеДС;
		ЗаявкаНаРасходованиеДСДни       = СтруктураПараметров.ЗаявкаДни;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СоздаватьЗаявкаНаЗатраты") Тогда
		СоздаватьЗаявкиНаЗатраты        = СтруктураПараметров.СоздаватьЗаявкаНаЗатраты;
		ЗаявкаНаЗатратыДни              = СтруктураПараметров.ЗаявкаНаЗатратыДни;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СоздаватьПланируемоеПоступлениеДС") Тогда
		СоздаватьПланируемоеПоступление = СтруктураПараметров.СоздаватьПланируемоеПоступлениеДС;
		ПланируемоеПоступлениеДни       = СтруктураПараметров.ПланируемоеПоступлениеДни;
	Иначе
		Возврат;
	КонецЕсли;
		
	Если СтруктураПараметров.Свойство("СоздаватьПрогнозПлатежа") Тогда
		СоздаватьПрогнозПлатежа         = СтруктураПараметров.СоздаватьПрогнозПлатежа;
		ПрогнозПлатежаДни               = СтруктураПараметров.ПрогнозПлатежаДни;
	Иначе
		Возврат;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("РежимЗаписи") Тогда
		РежимЗаписи = СтруктураПараметров.РежимЗаписи;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ДатаНачала") Тогда
		ДатаНачала = СтруктураПараметров.ДатаНачала;
	Иначе
		Возврат;
	КонецЕсли;

	Если СоздаватьЗаявкиДС Тогда
		ВидДокументаЗаявка =  "бит_ЗаявкаНаРасходованиеСредств"; 
		КоличествоДней     = ЗаявкаНаРасходованиеДСДни;
	ИначеЕсли Не СоздаватьЗаявкиДС И СоздаватьПрогнозПлатежа Тогда
		ВидДокументаЗаявка = "бит_ЗаявкаНаРасходованиеСредствОбщая";
        КоличествоДней     = ПрогнозПлатежаДни;
	Иначе
		ВидДокументаЗаявка = ""
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ДополнительныеУсловияПоДоговору.Ссылка КАК ДокДУ
	|ИЗ
	|	РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ДополнительныеУсловияПоДоговору КАК бит_ДополнительныеУсловияПоДоговору
	|		ПО бит_СтатусыОбъектов.Объект = бит_ДополнительныеУсловияПоДоговору.Ссылка
	|ГДЕ
	|	бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Утвержден)
	|	И бит_ДополнительныеУсловияПоДоговору.Дата >= &ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДокументов = Результат.Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокДопУсловие = ВыборкаДокументов.ДокДУ;
		
		ДокОбъект = ДокДопУсловие.ПолучитьОбъект();
				
		Если СоздаватьЗаявкиДС ИЛИ СоздаватьПрогнозПлатежа ИЛИ СоздаватьПланируемоеПоступление Тогда
	
	        СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ДокументПланирования", Неопределено);
			
			МассивСтроксОтбором = ДокДопУсловие.ГрафикПлатежей.НайтиСтроки(СтруктураОтбора);

			МассивСтрок = Новый Массив;
			
			Для Инд = 0 ПО МассивСтроксОтбором.ВГраница() Цикл
				Если МассивСтроксОтбором[Инд].РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
					Если ТекущаяДатаСеанса() >= МассивСтроксОтбором[Инд].Период  - КоличествоДней *24*60*60 Тогда
						МассивСтрок.Добавить(МассивСтроксОтбором[Инд]);
					КонецЕсли;
				Иначе
					Если ТекущаяДатаСеанса() >= МассивСтроксОтбором[Инд].Период - ПланируемоеПоступлениеДни *24*60*60 Тогда
						МассивСтрок.Добавить(МассивСтроксОтбором[Инд]);
					КонецЕсли;
				КонецЕсли;
				Инл = Инд +1;
			КонецЦикла;
			
			// Проверим заполненность реквизитов шапки документа.
			Если ДокОбъект.РеквизитыЗаполненыДляСозданияДокументовПланирования("ГрафикПлатежей", ВидДокументаЗаявка, МассивСтрок, "Ошибки") Тогда
				Если МассивСтрок.Количество() > 0  Тогда 
					ДокОбъект.СоздатьДокументыПланирования("ГрафикПлатежей", МассивСтрок, ВидДокументаЗаявка, РежимЗаписиДокумента[РежимЗаписи], "Ошибки");
				КонецЕсли;
			КонецЕсли;
				  
		КонецЕсли;
		
		// обработаем график начислений
		Если СоздаватьЗаявкиНаЗатраты Тогда
						
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ДокументПланирования", Документы.бит_ЗаявкаНаЗатраты.ПустаяСсылка());
			
			МассивСтроксОтбором = ДокДопУсловие.ГрафикНачислений.НайтиСтроки(СтруктураОтбора);

			МассивСтрок = Новый Массив;
			
			Для Инд = 0 По МассивСтроксОтбором.ВГраница() Цикл
				Если ТекущаяДатаСеанса() >= МассивСтроксОтбором[Инд].Период - ЗаявкаНаЗатратыДни *24*60*60 Тогда
					МассивСтрок.Добавить(МассивСтроксОтбором[Инд]);
				КонецЕсли;
				Инл = Инд +1;
			КонецЦикла;
			
			// Проверим заполненность реквизитов шапки документа.
			Если ДокОбъект.РеквизитыЗаполненыДляСозданияДокументовПланирования("ГрафикНачислений", "бит_ЗаявкаНаЗатраты", МассивСтрок, "Ошибки") Тогда
				Если МассивСтрок.Количество() > 0  Тогда 
					ДокОбъект.СоздатьДокументыПланирования("ГрафикНачислений", МассивСтрок, "бит_ЗаявкаНаЗатраты", РежимЗаписиДокумента[РежимЗаписи], "Ошибки");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
							
	КонецЦикла;
			
КонецПроцедуры

// Процедура выполняет назначение/удаление назначения заместителей в регистрах бит_ПраваУстановкиВиз,
// бит_ИсполнителиЗадач.
// 
Процедура бит_ОбработкаНазначенияЗаместителей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ТекстСообщения = НСтр("ru = 'Начало выполнения обработки назначения заместителей.'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);

	// Завершение замещения
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата",       НачалоДня(ТекущаяДата())); // Снимаем заместителей, которые вчера закончились.
	Запрос.УстановитьПараметр("СостояниеНазначен", Перечисления.бит_СостоянияЗаместителей.Назначен);
	Запрос.УстановитьПараметр("СостояниеОжидание", Перечисления.бит_СостоянияЗаместителей.Ожидание);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НазначенныеЗаместители.Пользователь КАК Пользователь,
	               |	НазначенныеЗаместители.Состояние КАК Состояние,
	               |	НазначенныеЗаместители.Виза КАК Виза,
	               |	НазначенныеЗаместители.ПользовательскоеУсловие КАК ПользовательскоеУсловие,
	               |	НазначенныеЗаместители.РольИсполнителя КАК РольИсполнителя,
	               |	НазначенныеЗаместители.ОбъектАдресации_1 КАК ОбъектАдресации_1,
	               |	НазначенныеЗаместители.ОбъектАдресации_2 КАК ОбъектАдресации_2,
	               |	НазначенныеЗаместители.ОбъектАдресации_3 КАК ОбъектАдресации_3,
	               |	НазначенныеЗаместители.Заместитель КАК Заместитель,
	               |	НазначенныеЗаместители.ДатаНачала КАК ДатаНачала,
	               |	НазначенныеЗаместители.ДатаОкончания КАК ДатаОкончания,
	               |	НазначенныеЗаместители.ПередаватьПраваРЛС КАК ПередаватьПраваРЛС,
	               |	0 КАК ВидЗамещения
	               |ИЗ
	               |	РегистрСведений.бит_НазначенныеЗаместители КАК НазначенныеЗаместители
	               |ГДЕ
	               |	НазначенныеЗаместители.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И НазначенныеЗаместители.ДатаОкончания < &ТекущаяДата
	               |	И (НазначенныеЗаместители.Состояние = &СостояниеНазначен
	               |			ИЛИ НазначенныеЗаместители.Состояние = &СостояниеОжидание)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаместителиПоЗадачам.Пользователь,
	               |	ЗаместителиПоЗадачам.Состояние,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	ЗаместителиПоЗадачам.Заместитель,
	               |	ЗаместителиПоЗадачам.ДатаНачала,
	               |	ЗаместителиПоЗадачам.ДатаОкончания,
	               |	NULL,
	               |	1
	               |ИЗ
	               |	РегистрСведений.бит_ЗаместителиПоЗадачам КАК ЗаместителиПоЗадачам
				   |ГДЕ
	               |	ЗаместителиПоЗадачам.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И ЗаместителиПоЗадачам.ДатаОкончания < &ТекущаяДата
	               |	И (ЗаместителиПоЗадачам.Состояние = &СостояниеНазначен
	               |			ИЛИ ЗаместителиПоЗадачам.Состояние = &СостояниеОжидание)";
				   
    Результат = Запрос.Выполнить();				   
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидЗамещения = 0 Тогда
			МенеджерЗаписи = РегистрыСведений.бит_НазначенныеЗаместители.СоздатьМенеджерЗаписи();
		Иначе
			МенеджерЗаписи = РегистрыСведений.бит_ЗаместителиПоЗадачам.СоздатьМенеджерЗаписи();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Состояние = Перечисления.бит_СостоянияЗаместителей.ЗамещениеЗавершено;
		
		Попытка
		
			МенеджерЗаписи.Записать();
		
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось завершить замещение пользователя ""%1"" пользователем ""%2""! Описание ошибки: %3.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Пользователь, Выборка.Заместитель, ОписаниеОшибки());
			
	        ЗаписьЖурналаРегистрации( НСтр("ru = 'Ошибка обработки назначения заместителей.'") 
                        	 ,УровеньЖурналаРегистрации.Ошибка 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);

			
		КонецПопытки;
				
	КонецЦикла; // Завершение замещения
	
	// Назначение заместителей
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата",       ТекущаяДата());
	Запрос.УстановитьПараметр("СостояниеОжидание", Перечисления.бит_СостоянияЗаместителей.Ожидание);

	Запрос.Текст = "ВЫБРАТЬ
	               |	НазначенныеЗаместители.Состояние КАК Состояние,
	               |	НазначенныеЗаместители.Виза КАК Виза,
	               |	НазначенныеЗаместители.ПользовательскоеУсловие КАК ПользовательскоеУсловие,
	               |	НазначенныеЗаместители.РольИсполнителя КАК РольИсполнителя,
	               |	НазначенныеЗаместители.ОбъектАдресации_1 КАК ОбъектАдресации_1,
	               |	НазначенныеЗаместители.ОбъектАдресации_2 КАК ОбъектАдресации_2,
	               |	НазначенныеЗаместители.ОбъектАдресации_3 КАК ОбъектАдресации_3,
	               |	НазначенныеЗаместители.Заместитель КАК Заместитель,
	               |	НазначенныеЗаместители.ДатаНачала КАК ДатаНачала,
	               |	НазначенныеЗаместители.ДатаОкончания КАК ДатаОкончания,
	               |	НазначенныеЗаместители.Пользователь КАК Пользователь,
	               |	НазначенныеЗаместители.ПередаватьПраваРЛС КАК ПередаватьПраваРЛС,
	               |	0 КАК ВидЗамещения
	               |ИЗ
	               |	РегистрСведений.бит_НазначенныеЗаместители КАК НазначенныеЗаместители
	               |ГДЕ
	               |	НазначенныеЗаместители.Состояние = &СостояниеОжидание
	               |	И НазначенныеЗаместители.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И НазначенныеЗаместители.ДатаНачала <= &ТекущаяДата
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаместителиПоЗадачам.Состояние,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	ЗаместителиПоЗадачам.Заместитель,
	               |	ЗаместителиПоЗадачам.ДатаНачала,
	               |	ЗаместителиПоЗадачам.ДатаОкончания,
	               |	ЗаместителиПоЗадачам.Пользователь,
	               |	NULL,
	               |	1
	               |ИЗ
	               |	РегистрСведений.бит_ЗаместителиПоЗадачам КАК ЗаместителиПоЗадачам
				   |ГДЕ
	               |	ЗаместителиПоЗадачам.Состояние = &СостояниеОжидание
	               |	И ЗаместителиПоЗадачам.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И ЗаместителиПоЗадачам.ДатаНачала <= &ТекущаяДата";
				   
    Результат = Запрос.Выполнить();				   
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.ВидЗамещения = 0 Тогда
			МенеджерЗаписи = РегистрыСведений.бит_НазначенныеЗаместители.СоздатьМенеджерЗаписи();
		Иначе
			МенеджерЗаписи = РегистрыСведений.бит_ЗаместителиПоЗадачам.СоздатьМенеджерЗаписи();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();		
		МенеджерЗаписи.Состояние = Перечисления.бит_СостоянияЗаместителей.Назначен;
		
		Попытка
		
			МенеджерЗаписи.Записать();
		
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось назначить заместителя ""%1"" пользователю ""%2""! Описание ошибки: %3.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Заместитель, Выборка.Пользователь, ОписаниеОшибки());
			
	        ЗаписьЖурналаРегистрации( НСтр("ru = 'Ошибка обработки назначения заместителей.'") 
                        	 ,УровеньЖурналаРегистрации.Ошибка 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);

			
		КонецПопытки;
							 		
	КонецЦикла; // Завершение замещения
	
	
	ТекстСообщения = НСтр("ru = 'Завершено выполнение обработки назначения заместителей.'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
							 
	
КонецПроцедуры

Процедура бит_УстановкаРешенийПоПросроченнымВизам(СтруктураПараметров) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Метаданные", "бит_УстановкаРешенийПоПросроченнымВизам");
	
	РеглЗадание = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураОтбора);
	
	Если РеглЗадание.Количество() < 0 Тогда 
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(РеглЗадание[0].ИмяПользователя) Тогда
		
		ТекстСообщения =  НСтр("ru = 'Не заполнен пользователь в настройках регламентного задания.'");
		
        ЗаписьЖурналаРегистрации( НСтр("ru = 'Ошибка выполнения регламентного задания.'") 
                    	 ,УровеньЖурналаРегистрации.Ошибка 
                    	 , 
                    	 ,
                    	 ,ТекстСообщения);

		ВызватьИсключение("Не заполнен пользователь в настройках регламентного задания.");
		
	КонецЕсли;
	
	// Проверим корректность переданых параметров.
	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если СтруктураПараметров.Свойство("Решение") Тогда
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Решение) Тогда
			РешениеВизирования = СтруктураПараметров.Решение;
			
		Иначе
			ТекстСообщения =  НСтр("ru = 'Не заполнено решения визирования в настройках регламентного задания.'");
		
	        ЗаписьЖурналаРегистрации( НСтр("ru = 'Ошибка выполнения регламентного задания.'") 
	                    	 ,УровеньЖурналаРегистрации.Ошибка 
	                    	 , 
	                    	 ,
	                    	 ,ТекстСообщения);

			ВызватьИсключение("Не заполнено решения визирования в настройках регламентного задания.");
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(РеглЗадание[0].ИмяПользователя);
	ПользовательВизирования = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_УстановленныеВизы.Объект,
		|	бит_УстановленныеВизы.Виза,
		|	бит_УстановленныеВизы.ИД,
		|	бит_УстановленныеВизы.Пользователь,
		|	бит_УстановленныеВизы.ФизическоеЛицо,
		|	бит_УстановленныеВизы.ДобавленаВручную,
		|	бит_УстановленныеВизы.ДатаУстановки,
		|	бит_УстановленныеВизы.КодСортировки,
		|	бит_УстановленныеВизы.Должность,
		|	бит_УстановленныеВизы.Комментарий,
		|	бит_УстановленныеВизы.Статус,
		|	бит_УстановленныеВизы.Решение,
		|	бит_УстановленныеВизы.Маршрут,
		|	бит_УстановленныеВизы.Алгоритм,
		|	бит_УстановленныеВизы.ТочкаАлгоритма,
		|	бит_УстановленныеВизы.ДатаКрайняя,
		|	бит_УстановленныеВизы.ВремяНаУстановку,
		|	бит_УстановленныеВизы.ПодписанЭП,
		|	бит_УстановленныеВизы.ЭПДействительна
		|ИЗ
		|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
		|ГДЕ
		|	бит_УстановленныеВизы.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И бит_УстановленныеВизы.ДатаКрайняя < &ТекущаяДата
		|	И бит_УстановленныеВизы.ДатаКрайняя > ДАТАВРЕМЯ(1, 1, 1)
		|	И бит_УстановленныеВизы.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка)";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ИмяОбъектаПолное = "";
	Если СтруктураПараметров.Свойство("ОбъектСистемы") И ЗначениеЗаполнено(СтруктураПараметров.ОбъектСистемы) Тогда
		ИмяОбъектаПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ОбъектСистемы, "ИмяОбъектаПолное");
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("бит_УстановленныеВизы.Объект Ссылка "+ ИмяОбъектаПолное);
	КонецЕсли;
	Если СтруктураПараметров.Свойство("Организация") И ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Если ПустаяСтрока(ИмяОбъектаПолное) Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаПолное);
			Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеОбъекта) Тогда
				СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("бит_УстановленныеВизы.Объект.Организация = &Организация");
				Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
			КонецЕсли;
		Иначе
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("бит_УстановленныеВизы.Объект.Организация = &Организация");
			Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		КонецЕсли;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("Статус") И ЗначениеЗаполнено(СтруктураПараметров.Статус) Тогда
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("бит_УстановленныеВизы.Статус = &Статус");
		Запрос.УстановитьПараметр("Статус", СтруктураПараметров.Статус);
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи(); 

	Пока Выборка.Следующий() Цикл 
		
        Запись.Объект = Выборка.Объект; 
        Запись.Виза   = Выборка.Виза; 
        Запись.ИД     = Выборка.ИД;
        
        Запись.Прочитать(); 
		Если Запись.Выбран() Тогда 
			Запись.ДатаУстановки = ТекущаяДатаСеанса();
			Запись.Пользователь  = ПользовательВизирования;
            Запись.Решение       = РешениеВизирования;
			Запись.Комментарий   = НСтр("ru = 'Решение установлено с помощью регламентного задания ""Установить решения по просроченным визам"".'");
			
			Если Запись.ПроверитьЗаполнение() Тогда
				Запись.Записать(); 
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла; 
			
КонецПроцедуры

Процедура УстановкаКонтрольныхЗначений(ПараметрыЗадания) Экспорт

	Если ТипЗнч(ПараметрыЗадания) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Документы.бит_УстановкаКонтрольныхЗначений.ФоновоеПроведение(ПараметрыЗадания);
	
КонецПроцедуры

#КонецОбласти

#Область МДМ

// Процедура готовит объекты обмена для выполнения обмена.
// 
Процедура бит_мдм_ПодготовкаОбмена() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьПодключениеКВнешнимБазам") Тогда
		ВызватьИсключение НСтр("ru = 'Регламентное задание недоступно по функциональным опциям.'");
	КонецЕсли;
	
	бит_мдм.ВыполнитьПодготовкуОбмена();
	
КонецПроцедуры

// Процедура отправляет обекты обмена во внешние базы.
// 
Процедура бит_мдм_ВыполнениеОбмена() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьПодключениеКВнешнимБазам") Тогда
		ВызватьИсключение НСтр("ru = 'Регламентное задание недоступно по функциональным опциям.'");
	КонецЕсли;
	
	бит_мдм_Транспорт.ОтправитьИзмененные();
	
КонецПроцедуры

// Процедура выполняет в фоне полный цикл обмена: регистрация изменений 
// - подготовку к обмену - отправку данных во внешние базы.
// 
// Параметры:
//  Источник - СправочникСсылка.
//  Настройки - Структура.
// 
Процедура бит_мдм_ФоновыйОбмен(Источник, Настройки) Экспорт
	
	МассивОтправки = Новый Массив;
	
	// Регистрация изменений
	КэшОбработанных = Новый Соответствие;
	КэшОбработки    = Новый Соответствие;	
	СсылкаХранения  = бит_мдм.ВыполнитьРегистрациюИзмененийЭлементаСправочника(Источник, Настройки, КэшОбработанных, КэшОбработки, Истина);
	
	// Подготовка объектов для обмена
	Если ЗначениеЗаполнено(СсылкаХранения) Тогда
		
		РезДанные = РегистрыСведений.бит_мдм_ПравилаПодготовкиОбмена.ПолучитьПравила();
		Правила = РезДанные.Правила;
		
		МассивПравил = Правила[СсылкаХранения.ОписаниеОбъекта];
		
		Если НЕ МассивПравил = Неопределено Тогда
			
			Для каждого ТекПравило Из МассивПравил Цикл
				
				КэшОбработанных = Новый Соответствие;
				КэшОбработки    = Новый Соответствие;	
				
				СсылкаОтправки = бит_мдм.ВыполнитьПодготовкуОбменаЭлементаСправочника(СсылкаХранения, ТекПравило, , Правила, КэшОбработанных, КэшОбработки);
				
				Если ЗначениеЗаполнено(СсылкаОтправки) Тогда
				
					МассивОтправки.Добавить(СсылкаОтправки);
				
				КонецЕсли; 
				
			КонецЦикла;  // По правилам 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Выполнение обмена
	Для каждого СсылкаОтправки Из МассивОтправки Цикл
	
		бит_мдм_Транспорт.ОтправитьОбъект(СсылкаОтправки);
	
	КонецЦикла; 
	
КонецПроцедуры // бит_мдм_ФоновыйОбмен()

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьРегистрациюСобытийПоГрафикуПлатежейНачислений(Оповещение, График)
	
	Если ВРег(График) = ВРег("ГрафикПлатежей") Тогда
		ТекстЗапроса = ТекстЗапросаПоГрафикуПлатежей();
	Иначе
		ТекстЗапроса = ТекстЗапросаПоГрафикуНачислений();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = бит_МеханизмПолученияДанных.СоздатьСхемуКомпоновкиПоЗапросу(ТекстЗапроса);
	АдресКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	
    // Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;        
    ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресКомпоновки);
    Попытка
		Компоновщик.Инициализировать(ИсточникНастроек);
    Исключение
		ТекстСообщения =  НСтр("ru = 'Не удалось инициализировать компоновщик для отбора! Попробуйте обновить текст запроса. Описание ошибки: %1%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецПопытки;
	
    Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    
    // Выполняем компановку макета МакетСКД
    // (настройки берутся из схемы компановки данных и из пользовательских настроек).
    Настройки = бит_фн_ОповещенияСервер.ПолучитьНастройкиКомпоновщика(Оповещение.НастройкиКомпоновщика);
    бит_МеханизмПолученияДанных.КопироватьКоллекциюЭлементовОтбора(Настройки.НастройкиКомпоновщика.Отбор.Элементы, Компоновщик.Настройки.Отбор.Элементы);

	// Выполняем компановку макета МакетСКД
	// (настройки берутся из схемы компановки данных и из пользовательских настроек).
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки());
	
	// Получаем запрос макета компановки данных
	Запрос = Новый Запрос(МакетСКД.НаборыДанных.НаборДанныхОсновной.Запрос);
		
	// Устанавливаем параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		
		Если ВРег(ОписаниеПараметраЗапроса.Имя) = ВРег("ДнейДляПроверки") ИЛИ ВРег(ОписаниеПараметраЗапроса.Имя) = ВРег("ТекущаяДата") Тогда
			Продолжить;
		Иначе
			Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
		КонецЕсли;
		
	КонецЦикла;

	Запрос.УстановитьПараметр("ДнейДляПроверки", Оповещение.КоличествоДнейДляПроверки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	    ЗарегистрироватьСобытиеДляОповещений(Оповещение.ВидСобытия, Оповещение, Выборка.Ссылка, 
			Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Справочники.бит_Визы.ПустаяСсылка(), 
			Справочники.Пользователи.ПустаяСсылка());
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьРегистрациюСобытийПоГрафикуПлатежей()

Процедура ВыполнитьРегистрациюСобытийПриОцончанииСрокаДействияДоговора(Оповещение)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.СрокДействия КАК СрокДействия,
	|	ДоговорыКонтрагентов.бит_ПроектДоговора КАК бит_ПроектДоговора
	|ПОМЕСТИТЬ ДанныеПоДоговорам
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.бит_СтадияДоговора <> ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Закрыт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияСобытийОповещений.Объект КАК Объект
	|ПОМЕСТИТЬ НеРегистрироватьПовторно
	|ИЗ
	|	РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК РегистрацияСобытийОповещений
	|ГДЕ
	|	РегистрацияСобытийОповещений.Оповещение.НеРегистрироватьПовторно
	|	И РегистрацияСобытийОповещений.Оповещение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ОкончаниеСрокаДействияДоговора)
	|	И РегистрацияСобытийОповещений.Объект В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ДанныеПоДоговорам.ДоговорКонтрагента КАК ОбъектРегистрации
	|			ИЗ
	|				ДанныеПоДоговорам КАК ДанныеПоДоговорам
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				ДанныеПоДоговорам.бит_ПроектДоговора
	|			ИЗ
	|				ДанныеПоДоговорам КАК ДанныеПоДоговорам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоДоговорам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеПоДоговорам.СрокДействия КАК СрокДействия,
	|	ДанныеПоДоговорам.бит_ПроектДоговора КАК бит_ПроектДоговора
	|ИЗ
	|	ДанныеПоДоговорам КАК ДанныеПоДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ НеРегистрироватьПовторно КАК НеРегистрироватьПовторно
	|		ПО ДанныеПоДоговорам.ДоговорКонтрагента = НеРегистрироватьПовторно.Объект
	|			ИЛИ ДанныеПоДоговорам.бит_ПроектДоговора = НеРегистрироватьПовторно.Объект
	|ГДЕ
	|	НеРегистрироватьПовторно.Объект ЕСТЬ NULL";
		
	СхемаКомпоновкиДанных = бит_МеханизмПолученияДанных.СоздатьСхемуКомпоновкиПоЗапросу(ТекстЗапроса);
	АдресКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	
    // Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;        
    ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресКомпоновки);
    Попытка
		Компоновщик.Инициализировать(ИсточникНастроек);
    Исключение
		ТекстСообщения =  НСтр("ru = 'Не удалось инициализировать компоновщик для отбора! Попробуйте обновить текст запроса. Описание ошибки: %1%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецПопытки;
	
    Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    
    // Выполняем компановку макета МакетСКД
    // (настройки берутся из схемы компановки данных и из пользовательских настроек).
    Настройки = бит_фн_ОповещенияСервер.ПолучитьНастройкиКомпоновщика(Оповещение.НастройкиКомпоновщика);
    
    бит_МеханизмПолученияДанных.КопироватьКоллекциюЭлементовОтбора(Настройки.НастройкиКомпоновщика.Отбор.Элементы, Компоновщик.Настройки.Отбор.Элементы);

	// Выполняем компановку макета МакетСКД
	// (настройки берутся из схемы компановки данных и из пользовательских настроек).
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки());
	
	// Получаем запрос макета компановки данных
	Запрос = Новый Запрос(МакетСКД.НаборыДанных.НаборДанныхОсновной.Запрос);
	
	// Устанавливаем параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ДатаДляПроверки = ТекущаяДата() + Оповещение.КоличествоДнейДляПроверки * 3600 * 24;

	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.бит_ПроектДоговора) Тогда
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.бит_ПроектДоговора, "СтадияДоговора") = Перечисления.бит_ВидыСтадийДоговоров.Закрыт Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПоПроекту = бит_ДоговораСервер.ВычислитьКонтрольныеДатыПоПроектам(Выборка.бит_ПроектДоговора);
			СрокДействия      = ДанныеПоПроекту.ДатаДо;
			ОбъектРегистрации = ДанныеПоПроекту.ПроектДоговора;
			
		Иначе
			СрокДействия      = Выборка.СрокДействия;
			ОбъектРегистрации = Выборка.ДоговорКонтрагента;
		КонецЕсли;
		
		Если СрокДействия > Дата(1,1,1) И СрокДействия < ДатаДляПроверки Тогда
	        ЗарегистрироватьСобытиеДляОповещений(Оповещение.ВидСобытия, Оповещение, ОбъектРегистрации,
				Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Справочники.бит_Визы.ПустаяСсылка(), 
				Справочники.Пользователи.ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПоГрафикуПлатежей()

	ТекстЗапроса = 
			"ВЫБРАТЬ
			|	бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ТабДок
			|ИЗ
			|	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикПлатежей КАК бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей
			|ГДЕ
			|	бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.Ссылка.Проведен = ИСТИНА
			|	И бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.Период < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, &ДнейДляПроверки)
			|	И (бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования = ЗНАЧЕНИЕ(Документ.бит_ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
			|			ИЛИ бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования = ЗНАЧЕНИЕ(Документ.бит_ЗаявкаНаРасходованиеСредствОбщая.ПустаяСсылка)
			|			ИЛИ бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования = НЕОПРЕДЕЛЕНО)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистрацияСобытийОповещений.Объект КАК Объект
			|ПОМЕСТИТЬ НеРегистрироватьПовторно
			|ИЗ
			|	РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК РегистрацияСобытийОповещений
			|ГДЕ
			|	РегистрацияСобытийОповещений.Оповещение.НеРегистрироватьПовторно
			|	И РегистрацияСобытийОповещений.Оповещение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуПлатежей)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабДок.Ссылка КАК Ссылка
			|ИЗ
			|	ТабДок КАК ТабДок
			|		ЛЕВОЕ СОЕДИНЕНИЕ НеРегистрироватьПовторно КАК НеРегистрироватьПовторно
			|		ПО ТабДок.Ссылка = НеРегистрироватьПовторно.Объект
			|ГДЕ
			|	НеРегистрироватьПовторно.Объект ЕСТЬ NULL";
	
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаПоГрафикуНачислений()

	ТекстЗапроса = 
			"ВЫБРАТЬ
			|	бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ТабДок
			|ИЗ
			|	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикНачислений КАК бит_ДополнительныеУсловияПоДоговоруГрафикНачислений
			|ГДЕ
			|	бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.Ссылка.Проведен = ИСТИНА
			|	И бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.Период < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, &ДнейДляПроверки)
			|	И бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.ДокументПланирования = ЗНАЧЕНИЕ(Документ.бит_ЗаявкаНаЗатраты.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистрацияСобытийОповещений.Объект КАК Объект
			|ПОМЕСТИТЬ НеРегистрироватьПовторно
			|ИЗ
			|	РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК РегистрацияСобытийОповещений
			|ГДЕ
			|	РегистрацияСобытийОповещений.Оповещение.НеРегистрироватьПовторно
			|	И РегистрацияСобытийОповещений.Оповещение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуПлатежей)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабДок.Ссылка КАК Ссылка
			|ИЗ
			|	ТабДок КАК ТабДок
			|		ЛЕВОЕ СОЕДИНЕНИЕ НеРегистрироватьПовторно КАК НеРегистрироватьПовторно
			|		ПО ТабДок.Ссылка = НеРегистрироватьПовторно.Объект
			|ГДЕ
			|	НеРегистрироватьПовторно.Объект ЕСТЬ NULL";
	
	Возврат ТекстЗапроса;
	
КонецФункции 

// Процедура регистрирует событие в регистре сведений бит_фн_РегистрацияСобытийОповещений 
// для последующей обработки и создания оповещений.
// 
// Параметры:
//  ВидСобытия  - ПеречислениеСсылка.бит_фн_ВидыСобытийОповещений.
//  Оповещение  - СправочникСсылка.бит_фн_Оповещения.
//  ИсточникСсылка  - СправочникСсылка, ДокументСсылка.
// 
Процедура ЗарегистрироватьСобытиеДляОповещений(ВидСобытия, Оповещение, Объект, Статус, Виза, Пользователь)
	
	бит_фн_ОповещенияСервер.ЗарегистрироватьСобытиеДляОповещений(ВидСобытия, Оповещение, Объект, Пользователь, Виза, Статус);
		
КонецПроцедуры

Процедура ОбработатьТаблицуДокументов(ТаблицаДокументов, Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("Пользователь",      Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТабДок
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацияСобытийОповещений.Объект КАК ОбъектРегистрации
		|ИЗ
		|	РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК РегистрацияСобытийОповещений
		|ГДЕ
		|	РегистрацияСобытийОповещений.Оповещение.НеРегистрироватьПовторно
		|	И РегистрацияСобытийОповещений.Оповещение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДокументыДляВизирования)
		|	И РегистрацияСобытийОповещений.Объект В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ТабДок.Ссылка КАК Ссылка
		|			ИЗ
		|				ТабДок КАК ТабДок)
		|	И РегистрацияСобытийОповещений.Пользователь = &Пользователь";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Ссылка", Выборка.ОбъектРегистрации);
		МассивСтрок = ТаблицаДокументов.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			ТаблицаДокументов.Удалить(СтрокаТаблицы);
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//***БИТ***ДА***(
//БИТ Тртилек 01.12.2011 Дополнительно получаем параметр Очередность
Процедура ФоноваяТрансляция(ТаблицаДокументов, НомерПотока, Очередность, СторноДДС = Ложь) Экспорт

	ТекстСообщения = НСтр("ru = 'Фоновая трансляция. Начало выполнения. Поток " + НомерПотока + "'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	

	Для каждого Стр из ТаблицаДокументов Цикл
		
		Отказ        = Ложь;
		флЕстьОшибки = Ложь;
		Протокол     = "";
		
		// заполним перечень источников и приемников
		МассивИсточники = Новый Массив;
		МассивПриемники = Новый Массив;
		флВсеИсточники  = Ложь;
		флВсеПриемники  = Ложь;
		
		флВсеИсточники = Истина;
		флВсеПриемники = Истина;
			
		МассивИсточники = Неопределено;			
		МассивПриемники = Неопределено;
		
		ДокументОбъект = Стр.Объект.ПолучитьОбъект();
				
		//БИТ Тртилек 20022014 передадим в дополнительные свойства сторноддс
		Если НЕ СторноДДС = Ложь Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("СторноДДС", СторноДДС);
		КонецЕсли;
		///БИТ Тртилек
		
		Если НЕ бит_ОбщегоНазначения.ЗаблокироватьОбъект(ДокументОбъект,Строка(Стр.Объект),,"Все") Тогда
			
			Протокол     = Протокол+НСтр("Не удалось заблокировать объект ""%1%""!");
			Протокол     = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Протокол,Строка(Стр.Объект));
			флЕстьОшибки = Истина;
			
		КонецЕсли; 
		
		Если НЕ флЕстьОшибки Тогда
					
			Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
				
				// при наличии механизма контроля закрытого периода сохраним движения для последующего анализа
				бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект,Отказ,РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				
				//Начало изменений Широков Н. <SoftBalance> 16/10/13-17:57 
				ДокументОбъект.ДополнительныеСвойства.Вставить("Трансляция");
				
				СБ_МеханизмКонтроляТрансляцииСервер.СБ_МеханизмКонтроляТрансляцииПередЗаписьюПередЗаписью(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				//Конец изменений Широков Н. 
				
			КонецЕсли; 
			
			Если СторноДДС = "Сторно" Тогда				
				КоличествоУдаленныхСторноЗаписей = УдалениеЗаписейСторно(Стр.Объект);	
			ИначеЕсли СторноДДС = "ДДС" Тогда 	
				УдалениеЗаписейДДС(Стр.Объект)
			КонецЕсли;
			
			
			
			// Выполним трансляцию движений.
			Протокол = бит_МеханизмТрансляции.ВыполнитьТрансляцию(ДокументОбъект
																	, МассивИсточники
																	, МассивПриемники
																	, Истина
																	, Перечисления.бит_РежимыТрансляции.Ручной
																	, Ложь
																	, Очередность);

			Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
				
				// при наличиии механизма контроля закрытого периода сформируем корректирующие проводки			
				бит_КонтрольЗакрытогоПериода.КонтрольПриОбработкеПроведения(ДокументОбъект,Отказ,РежимЗаписиДокумента.Проведение,Истина);
				
				//Начало изменений Широков Н. <SoftBalance> 16/10/13-17:58 
				СБ_МеханизмКонтроляТрансляцииСервер.СБ_МеханизмКонтроляТрансляцииПриЗаписиПриЗаписи(ДокументОбъект, Отказ);
				//Конец изменений Широков Н. 
				
			КонецЕсли; 
			
			Если ДокументОбъект.Заблокирован() Тогда
				
				ДокументОбъект.Разблокировать();
				
			КонецЕсли; 		
			
			Стр.Обработано = Истина;
		Иначе
			Стр.Обработано = Ложь;
			
		КонецЕсли;
				
	КонецЦикла; // по документам
	
	ТекстСообщения = НСтр("ru = 'Фоновая трансляция. Завершение выполнения. Поток " + НомерПотока + "'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	
	
КонецПроцедуры // ФоноваяТрансляция()

Процедура бит_ок_ЗагрузкаДанныхИзАксапты() Экспорт
	//// Обратиться к регистру настроек и проверить, нужно ли выполнять автоматическую загрузку						 
	НастройкаЗагружатьАвтоматом = ПолучитьНастройку("ПараметрыАвтоматическойЗагрузки", "АвтоматическиЗагружать");
	Если НастройкаЗагружатьАвтоматом = Неопределено ИЛИ НастройкаЗагружатьАвтоматом = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// оставить след
	ТекстСообщения = НСтр("ru = 'Начало загрузки данных из Аксапты.'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	
	
	//// получить обработку
	//Обработка = Обработки.бит_ок_ЗагрузкаДанныхИзАксапты.Создать();
	//
	//// получить параметры 
	//// период - текущий квартал
	//ДатаНачала = НачалоКвартала(ТекущаяДата());
	//ДатаОкончания = КонецКвартала(ТекущаяДата());
	//// остальное из регистра настроек
	//ТипыОпераций
	//Порция
	//// вызвать процедуру загрузки
	//Обработка.Загрузка(Истина, ДатаНачала, ДатаОкончания, ТипыОпераций, Порция);
	
	// оставить след
	ТекстСообщения = НСтр("ru = 'Завершена загрузка данных из Аксапты.'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	
	
КонецПроцедуры

Функция ПолучитьНастройку(Группа, ИмяНастройки)

	Возврат РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.Получить(Новый Структура("Группа, ИмяНастройки", Группа, ИмяНастройки)).Значение;
	
КонецФункции
						 
// бит_Тртилек 20.06.2012 Процедура выполняет отложенную трансляцию движений в цикле.
//
//
Процедура ОтложеннаяТрансляцияЦикл(СписокОчередностей) Экспорт

	ТекстСообщения = НСтр("ru = 'Начало выполнения отложенной трансляции.'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ОчередьТрансляции.Статус,
	               |	бит_ОчередьТрансляции.Организация,
	               |	бит_ОчередьТрансляции.Объект КАК Объект,
	               |	бит_ОчередьТрансляции.Источник,
	               |	бит_ОчередьТрансляции.Приемник,
	               |	бит_ОчередьТрансляции.ПоставленоВОчередь КАК ПоставленоВОчередь,
	               |	бит_ОчередьТрансляции.Протокол,
	               |	бит_ОчередьТрансляции.ДатаТрансляции
	               |ИЗ
	               |	РегистрСведений.бит_ОчередьТрансляции КАК бит_ОчередьТрансляции
	               |ГДЕ
	               |	бит_ОчередьТрансляции.Статус = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыВыполненияОтложеннойТрансляции.Ожидание)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПоставленоВОчередь
	               |ИТОГИ ПО
	               |	Объект
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Результат = Запрос.Выполнить();
	
	Для Каждого СтрокаОчередности ИЗ СписокОчередностей Цикл 
		
	ВыборкаДокумент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		Отказ        = Ложь;
		флЕстьОшибки = Ложь;
		Протокол     = "";
		
		// прочитаем набор регистра-очереди
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("Объект",ВыборкаДокумент.Объект);
		НаборОчередь = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(СтруктураОтбор,"бит_ОчередьТрансляции");
		
		// заполним перечень источников и приемников
		МассивИсточники = Новый Массив;
		МассивПриемники = Новый Массив;
		флВсеИсточники  = Ложь;
		флВсеПриемники  = Ложь;
		
		Выборка = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		
		Пока Выборка.Следующий() Цикл
		
			Если ЗначениеЗаполнено(Выборка.Источник) Тогда
			   МассивИсточники.Добавить(Выборка.Источник);
			Иначе	
			   флВсеИсточники = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Приемник) Тогда
			   МассивПриемники.Добавить(Выборка.Приемник);
			Иначе	
			   флВсеПриемники = Истина;
			КонецЕсли; 
			
		КонецЦикла; //по детальным записям
		
		Если флВсеИсточники Тогда
			
			МассивИсточники = Неопределено;			
			
		КонецЕсли; 
		
		Если флВсеПриемники Тогда
			
			МассивПриемники = Неопределено;
			
		КонецЕсли; 
		
		ДокументОбъект = ВыборкаДокумент.Объект.ПолучитьОбъект();
		
		Если НЕ бит_ОбщегоНазначения.ЗаблокироватьОбъект(ДокументОбъект,Строка(ВыборкаДокумент.Объект),,"Все") Тогда
			
			Протокол     = Протокол+НСтр("ru = 'Не удалось заблокировать объект ""%1%""!'");
			Протокол     = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Протокол,Строка(ВыборкаДокумент.Объект));
			флЕстьОшибки = Истина;
			
		КонецЕсли; 
		
		Если НЕ флЕстьОшибки Тогда
		
			Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
				
				// при наличиии механизма контроля закрытого периода сохраним движения для последующего анализа
				бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект,Отказ,РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				
			КонецЕсли; 
			
			// Выполним трансляцию движений.
			Протокол = Протокол + бит_МеханизмТрансляции.ВыполнитьТрансляцию(ДокументОбъект
																				, МассивИсточники
																				, МассивПриемники
																				, Истина
																				, Перечисления.бит_РежимыТрансляции.Отложенный
																				,,
																				СтрокаОчередности.Значение);
			
			Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
				
				// при наличиии механизма контроля закрытого периода сформируем корректирующие проводки			
				бит_КонтрольЗакрытогоПериода.КонтрольПриОбработкеПроведения(ДокументОбъект,Отказ,РежимЗаписиДокумента.Проведение,Истина);
				
			КонецЕсли; 
			
			Если ДокументОбъект.Заблокирован() Тогда
				
				ДокументОбъект.Разблокировать();
				
			КонецЕсли; 		
		
		КонецЕсли; // нет ошибок
		
		КоличествоЗаписей = НаборОчередь.Количество();
		
		Для н = 1 По КоличествоЗаписей Цикл
			
			й = КоличествоЗаписей-н;
			
			ЗаписьОчередь = НаборОчередь[й];
			
			// удалим строки, которые могут помешать записи набора
			флУдалитьЗапись = Ложь;
			Если  ЗаписьОчередь.Статус = Перечисления.бит_СтатусыВыполненияОтложеннойТрансляции.Ошибка 
				ИЛИ ЗаписьОчередь.Статус = Перечисления.бит_СтатусыВыполненияОтложеннойТрансляции.Выполнено Тогда
				
				флУдалитьЗапись = Истина;
				
			КонецЕсли; 
			
			Если НЕ флУдалитьЗапись Тогда
				
		        // изменим статус обработанных записей				
				Если флЕстьОшибки Тогда
					ЗаписьОчередь.Статус   = Перечисления.бит_СтатусыВыполненияОтложеннойТрансляции.Ошибка;
				Иначе	
					ЗаписьОчередь.Статус   = Перечисления.бит_СтатусыВыполненияОтложеннойТрансляции.Выполнено;
				КонецЕсли; 
				ЗаписьОчередь.Протокол = Протокол;
				ЗаписьОчередь.ДатаТрансляции = ТекущаяДата();
				
			Иначе	
				
				НаборОчередь.Удалить(ЗаписьОчередь);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборОчередь);
		
	КонецЦикла; // по документам
	
	КонецЦикла;

	ТекстСообщения = НСтр("ru = 'Завершено выполнение отложенной трансляции.'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,ТекстСообщения);
	
	
КонецПроцедуры // ОтложеннаяТрансляция()
						 
//БИТ Тртилек 20.06.2012 Процедура анализирует регистр сведений "Настройки МСФО"
//на предмет наличия последовательности трансляции. В зависимости от от этого запускает одну из
//процедур отложенной трансляии (в цикле или без)
Процедура ЗапускОтложеннойТрансляции() Экспорт  
	
	НаборЗаписейОчередность = РегистрыСведений.бит_му_Настройки.СоздатьНаборЗаписей();
	НаборЗаписейОчередность.Отбор.ИмяНастройки.Установить("Последовательность трансляции");
	НаборЗаписейОчередность.Прочитать();
	
	Если НаборЗаписейОчередность.Количество() > 0 Тогда 
		СтрокаОчередностей = НаборЗаписейОчередность[0].Значение;
	КонецЕсли;
	
	Если СтрокаОчередностей = Неопределено тогда
		ОтложеннаяТрансляция();
		Возврат;
	КонецЕсли;
	
	СписокОчередностей = Новый СписокЗначений;
	
	Пока СтрокаОчередностей <> "" Цикл
		ЗапятаяПорядок = Найти(СтрокаОчередностей, ",");
		Если ЗапятаяПорядок <> 0 Тогда
			Номер = Число(СокрЛП(Лев(СтрокаОчередностей,ЗапятаяПорядок-1)));
			СтрокаОчередностей = Сред(СтрокаОчередностей, ЗапятаяПорядок+1, 100);
		Иначе
			Номер = Число(СокрЛП(СтрокаОчередностей));
			СтрокаОчередностей = "";
		КонецЕсли;		
		СписокОчередностей.Добавить(Номер, Строка(Номер));
	КонецЦикла;
	
	Если СписокОчередностей.Количество() > 0 Тогда
		СписокОчередностей.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		ОтложеннаяТрансляцияЦикл(СписокОчередностей);
	Иначе
		ОтложеннаяТрансляция();
	КонецЕсли;

КонецПроцедуры

//БИТ Тртилек 20.02.2014 функция удаляет проводки сторноРСБУ
Функция УдалениеЗаписейСторно(Документ = Неопределено)
	Если Документ <> Неопределено Тогда
		
		НаборЗаписей = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		НаборЗаписей.Прочитать();
		
		МетаданныеОбъекта = Документ.Метаданные();
		
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеОбъекта) Тогда
			
			Организация = Документ.Организация;
			
		Иначе
			
			Организация = Неопределено;
			
		КонецЕсли; 
		
		НашРегистрОбъект = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024");
		
		РегистрыКонтроля = бит_КонтрольЗакрытогоПериода.ПолучитьДатыОткрытогоПериода(Организация, НашРегистрОбъект);		
		
		Для Каждого КиЗ Из РегистрыКонтроля Цикл
			
			ДатаОткрытогоПериода = КиЗ.Значение;
			
		КонецЦикла;

		КоличествоДоУдаления = НаборЗаписей.Количество();
		Таблица = НаборЗаписей.Выгрузить();                                         
		НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("ВидДвиженияМСФО", Перечисления.БИТ_ВидыДвиженияМСФО.СторноРСБУ));
		КоличествоСторноСтрок = НайденныеСтроки.Количество();
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если (РегистрыКонтроля.Количество() = 0 ИЛИ Строка.Период >= ДатаОткрытогоПериода) И НЕ ЗначениеЗаполнено(Строка.ВидПроводки) Тогда
				Таблица.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Загрузить(Таблица);
		Если НаборЗаписей.Количество() <> КоличествоДоУдаления Тогда
			НаборЗаписей.Записать();		
		КонецЕсли;
	КонецЕсли;
	
	Возврат КоличествоСторноСтрок;
	
КонецФункции

//БИТ Тртилек 20022014 процедура удаляет проводки "ДДС"
Процедура  УдалениеЗаписейДДС(Документ = Неопределено)
	Если Документ <> Неопределено Тогда
		
		МетаданныеОбъекта = Документ.Метаданные();
		
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеОбъекта) Тогда
			
			Организация = Документ.Организация;
			
		Иначе
			
			Организация = Неопределено;
			
		КонецЕсли; 
		
		НашРегистрОбъект = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024");
		
		РегистрыКонтроля = бит_КонтрольЗакрытогоПериода.ПолучитьДатыОткрытогоПериода(Организация, НашРегистрОбъект);		
		
		Для Каждого КиЗ Из РегистрыКонтроля Цикл
			
			ДатаОткрытогоПериода = КиЗ.Значение;
			
		КонецЦикла;
		
		НаборЗаписей = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		НаборЗаписей.Прочитать();
		КоличествоДоУдаления = НаборЗаписей.Количество();
		Таблица = НаборЗаписей.Выгрузить();
		КоличествоЗаписей = Таблица.Количество();
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-03 (#4320)
		СчетРодитель = ПланыСчетов.бит_Дополнительный_2.СчетаУчетаДДС;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-03 (#4320)
		Для Строка =1 По КоличествоЗаписей Цикл
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-03 (#4320)
			//Если (Сред(НаборЗаписей[КоличествоЗаписей-Строка].СчетКт, 1, 1) = "9" ИЛИ Сред(НаборЗаписей[КоличествоЗаписей-Строка].СчетДт, 1, 1) = "9") И НЕ ЗначениеЗаполнено(НаборЗаписей[КоличествоЗаписей-Строка].ВидПроводки) Тогда
			Если НаборЗаписей[КоличествоЗаписей-Строка].СчетКт.ПринадлежитЭлементу(СчетРодитель)
				Или НаборЗаписей[КоличествоЗаписей-Строка].СчетДт.ПринадлежитЭлементу(СчетРодитель)
				Или НЕ ЗначениеЗаполнено(НаборЗаписей[КоличествоЗаписей-Строка].ВидПроводки) Тогда
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-03 (#4320)
				НаборЗаписей.Удалить(КоличествоЗаписей-Строка);
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-03 (#4320)
				КоличествоЗаписей = КоличествоЗаписей - 1;
				Строка = Строка - 1;
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-03 (#4320)
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Загрузить(Таблица);
		Если НаборЗаписей.Количество() <> КоличествоДоУдаления Тогда
			НаборЗаписей.Записать();		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
