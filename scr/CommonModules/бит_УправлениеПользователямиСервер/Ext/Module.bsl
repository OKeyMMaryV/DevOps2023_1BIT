
#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтерфейсыКМетодамТиповыхКонфигураций

// Получает настройки пользователя, установленные в механизмах типовой конфигурации.
// 
// Параметры:
//  Настройка - Строка
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  ЗначениеНастройки - Произвольный.
// 
Функция ЗначениеПоУмолчаниюТиповой(Настройка, Пользователь = Неопределено) Экспорт
	
	// ++ БП 
	ЗначениеНастройки = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь);                
	// -- БП 
	Если ЗначениеНастройки = Неопределено Тогда
		// Попробуем получить настройку из имитации типовых настроек.
		НастройкиПоУмолчанию = ТиповыеНастройкиПоУмолчанию();
		ЗначениеНастройки    = НастройкиПоУмолчанию[Настройка];
	КонецЕсли; 
	
	Возврат ЗначениеНастройки;
	
КонецФункции // ЗначениеПоУмолчаниюТиповой()
	
// Устанавливает типовые настройки пользователя.  
// 
// Параметры:
//  Настройка 	 - Строка.
//  Значение 	 - Произвольный
//  Пользователь - СправочникСсылка.Пользователи.
// 
Процедура УстановитьЗначениеПоУмолчаниюТиповой(Настройка, Значение, Пользователь = Неопределено) Экспорт
	
	// ++ БП 
	ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь);  
	// -- БП 

КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройкамиПользователейБитфинанс

// Функция получает настройку пользователя из кэша настроек.
// 
// Параметры:
//  Настройка     - Строка,ПланВидовХарактеристикСсылка.бит_НастройкиПользователей
//  Пользователь  - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//   ЗначениеНастройки   - Произвольный.
// 
Функция ПолучитьЗначениеПоУмолчанию(Настройка, Знач Пользователь = Неопределено) Экспорт

	ЗначениеНастройки = Неопределено;
	
	Если Пользователь = Неопределено
		ИЛИ Пользователь = Пользователи.ТекущийПользователь() Тогда
		
		Если Пользователь = Неопределено Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли; 
		
		КэшНастроекПользователей = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЗначенияНастроекПользователей");
		НастройкаСсылка   = ПолучитьСсылкуНастройки(Настройка);
		ЗначениеНастройки = КэшНастроекПользователей[НастройкаСсылка];
		Если ЗначениеНастройки = Неопределено Тогда
			ЗначениеНастройки = ПолучитьНастройкуПользователя(Настройка,Пользователь);
			КэшНастроекПользователей[НастройкаСсылка] = ЗначениеНастройки;
		КонецЕсли;	
		
	Иначе
		ЗначениеНастройки = ПолучитьНастройкуПользователя(Настройка, Пользователь);
	КонецЕсли; 
	
	Возврат ЗначениеНастройки;
	
КонецФункции // ПолучитьЗначениеПоУмолчанию()

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
// 
// Параметры:
//  Пользователь - Текущий пользователь программы
//  Настройка    - Строка
//  Значение     - Значение по умолчанию.
// 
// Возвращаемое значение:
//  Нет
// 
Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь = Неопределено) Экспорт

	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли; 
		 
	СсылкаНастройки = ПолучитьСсылкуНастройки(Настройка);
		
	МенеджерЗаписи = РегистрыСведений.бит_НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь 	 = Пользователь;
	МенеджерЗаписи.Настройка 		 = СсылкаНастройки;
	МенеджерЗаписи.ЗначениеНастройки = Значение;
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

// Функция получает настройку пользователя из регистра сведений бит_НастройкиПользователей.
// 
// Параметры:
//  Настройка     - Строка, ПланВидовХарактеристикСсылка.бит_НастройкиПользователей
//  Пользователь  - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//   ЗначениеНастройки   - Произвольный.
// 
Функция ПолучитьНастройкуПользователя(Настройка, Знач Пользователь = Неопределено) Экспорт
	
	Пользователь    = ?(Пользователь = Неопределено, 
						Пользователи.ТекущийПользователь(), Пользователь);
	НастройкаСсылка = ПолучитьСсылкуНастройки(Настройка);
	
	// Значение по-умолчанию
	ЗначениеНастройки = НастройкаСсылка.ТипЗначения.ПривестиЗначение();
	
	ПвхНастроекБит = ПланыВидовХарактеристик.бит_НастройкиПользователей;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь"		   , Пользователь);
	Запрос.УстановитьПараметр("Настройка"   		   , НастройкаСсылка);
	Запрос.УстановитьПараметр("НастройкаОсновнаяГруппа", ПвхНастроекБит.ОсновнаяГруппаПользователя);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РегСвНастройки.ЗначениеНастройки) ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|		ИНАЧЕ МАКСИМУМ(РегСвНастройки.ЗначениеНастройки)
	|	КОНЕЦ КАК Группа
	|ПОМЕСТИТЬ ТабГруппы
	|ИЗ
	|	РегистрСведений.бит_НастройкиПользователей КАК РегСвНастройки
	|ГДЕ
	|	РегСвНастройки.Пользователь = &Пользователь
	|	И РегСвНастройки.Настройка  = &НастройкаОсновнаяГруппа
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК Приоритет,
	|	РегСвНастройки.Пользователь КАК ПользовательИлиГруппа,
	|	РегСвНастройки.ЗначениеНастройки
	|ИЗ
	|	РегистрСведений.бит_НастройкиПользователей КАК РегСвНастройки
	|ГДЕ
	|	РегСвНастройки.Пользователь = &Пользователь
	|	И РегСвНастройки.Настройка  = &Настройка
    |
	|ОБЪЕДИНИТЬ ВСЕ  
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	РегСвНастройкиГруппы.Пользователь,
	|	РегСвНастройкиГруппы.ЗначениеНастройки
	|ИЗ
	|	РегистрСведений.бит_НастройкиПользователей КАК РегСвНастройкиГруппы
	|ГДЕ
	|	РегСвНастройкиГруппы.Пользователь В
	|			(ВЫБРАТЬ
	|				ТабГруппы.Группа
	|			ИЗ
	|				ТабГруппы КАК ТабГруппы)
	|	И РегСвНастройкиГруппы.Настройка = &Настройка
    |
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		// Настройки, для которых значение по умолчанию = Истина.
		Если НастройкаСсылка 	= ПвхНастроекБит.ПоказыватьДополнительнуюИнформациюБит 
			ИЛИ (Метаданные.Обработки.Найти("бит_ПанельФункций") <> Неопределено И НастройкаСсылка = ПвхНастроекБит.ОткрыватьПриЗапускеПанельФункцийБИТ) Тогда
			ЗначениеНастройки = Истина;		
		КонецЕсли;
			
	Иначе	
		
		Выборка = Результат.Выбрать();		
		Пока Выборка.Следующий() Цикл
			
			ТекущееЗначение = Выборка.ЗначениеНастройки;
			Если ЗначениеЗаполнено(ТекущееЗначение) Или бит_ОбщегоНазначения.ЭтоПримитивныйТип(ТекущееЗначение) Тогда
				ЗначениеНастройки = ТекущееЗначение;
				Прервать;
			КонецЕсли;	
		
		КонецЦикла; 
		
	КонецЕсли;
				   
	Возврат ЗначениеНастройки;
	
КонецФункции // ПолучитьНастройкуПользователя()

// Функция получает ссылку ПВХ бит_НастройкиПользователей по имени либо возвращает ссылку,
// если передан ссылочный тип.
// 
// Параметры:
//  Настройка  -    Строка,ПланВидовХарактеристикСсылка.бит_НастройкиПользователей.
// 
// Возвращаемое значение:
//   НастройкаСсылка   - ПланВидовХарактеристикСсылка.бит_НастройкиПользователей.
// 
Функция ПолучитьСсылкуНастройки(Настройка) Экспорт
	
	Если ТипЗнч(Настройка) = Тип("Строка") Тогда
		НастройкаСсылка = ПланыВидовХарактеристик.бит_НастройкиПользователей[Настройка];
	Иначе
		НастройкаСсылка = Настройка;
	КонецЕсли; 	
	
	Возврат НастройкаСсылка;
	
КонецФункции // ПолучитьСсылкуНастройки()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
// Заполняет значения типовых настроек по-умолчанию, 
// которые присутствовали в БП 2.0, но отсутствуют в БП 3.0.
// 
// Возвращаемое значение:
//  Соответствие.
// 
Функция ТиповыеНастройкиПоУмолчанию()

	Настройки = Новый Соответствие;
	
	Настройки.Вставить("ОсновнойОтветственный"				 		 , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"));
	Настройки.Вставить("ОсновнойКаталогФайлов"				 		 , "");
	Настройки.Вставить("ТипДетализацииСтандартныхОтчетов"	 		 , Неопределено);
	Настройки.Вставить("ЗапрашиватьВидОперацииПриВводеНового"		 , Истина);
	Настройки.Вставить("ОсновнаяСтавкаНДС"					 		 , Перечисления.СтавкиНДС.НДС20);
	Настройки.Вставить("ПоказыватьВПроводкахДанныеНУ"		 		 , Истина);
	Настройки.Вставить("ПечатьДокументовБезПредварительногоПросмотра", Ложь);

	Возврат Настройки;
	
КонецФункции // ТиповыеНастройкиПоУмолчанию()

#КонецОбласти
