
// ОКЕЙ Гиль А.В.(Софтлаб) Начало 26.01.2020 (#3591) 

//ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ
Процедура ок_ОбработкаПроведения_ФормаВводаБюджетаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-07 (#3788)
	ФиксироватьЗаявкиПриПроведенииВСтатусеНаСогласовании = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Начисление аккруалов", "Фиксировать заявки при проведении в статусе ""На согласовании""");
	
	Если ФиксироватьЗаявкиПриПроведенииВСтатусеНаСогласовании = Истина Тогда 
		ок_НачислениеАккруалов.ФиксироватьЗаявкиПриПроведенииВСтатусеНаСогласовании(Источник, Отказ, РежимПроведения);
	КонецЕсли;	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-07 (#3788)
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ок_ДетализацияЗатратНаРемонтОС) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьУчетЗатратНаРемонтОС = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Детализация затрат на ремонт ОС", "Использовать учет затрат на ремонт ОС");
	
	Если ИспользоватьУчетЗатратНаРемонтОС <> Истина Тогда 
		Возврат;
	КонецЕсли;	
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-01 (#3768)
	Если НЕ ВидимостьГиперСсылкиНаДокументДетализацииОС(Источник.ВидОперации) Тогда
		Возврат;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-01 (#3768)
	
	НеобходимаРасшифровкаЗатратОС = ПроверитьНеобходимостьРасшифровкиЗатратНаОС(Источник.Ссылка);
	
	Если НеобходимаРасшифровкаЗатратОС Тогда
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-22 (#3876)
		УстановитьПривилегированныйРежим(Истина);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-22 (#3876)
	
		ДокументРасшифровки = ПолучитьДокументДетализацииЗатратНаРемонтОС(Источник.Ссылка);
		
		Если Источник.Ссылка.Проведен И НЕ ЗначениеЗаполнено(ДокументРасшифровки) Тогда
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-22 (#3876)
			УстановитьПривилегированныйРежим(Ложь);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-22 (#3876)
			Отказ = Истина;
			ВызватьИсключение "Не удалось провести документ: " + Источник + Символы.ПС + "Для данного документа необходимо внести детализацию.";
		КонецЕсли;
		
		Если НЕ Отказ Тогда	
			
			Попытка
				ОбъектРасшифровки = ДокументРасшифровки.ПолучитьОбъект();
				ОбъектРасшифровки.Записать(РежимЗаписиДокумента.Проведение);	
			Исключение
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-22 (#3876)
				УстановитьПривилегированныйРежим(Ложь);
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-22 (#3876)
				Отказ = Истина;
				ВызватьИсключение "Не удалось провести документ: " + Источник;
			КонецПопытки;
			
		КонецЕсли;
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-22 (#3876)
		УстановитьПривилегированныйРежим(Ложь);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-22 (#3876)
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ок_ПередЗаписьюДокументаФормаВводаБюджетаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ЭтоНовый() Или Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-07 (#3788)
	ФиксироватьЗаявкиПриПроведенииВСтатусеНаСогласовании = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Начисление аккруалов", "Фиксировать заявки при проведении в статусе ""На согласовании""");
	
	Если ФиксироватьЗаявкиПриПроведенииВСтатусеНаСогласовании = Истина Тогда 
		ок_НачислениеАккруалов.ФиксироватьЗаявкиПередЗаписьюВСтатусеНаСогласовании(Источник, Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-07 (#3788)
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ок_ДетализацияЗатратНаРемонтОС) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьУчетЗатратНаРемонтОС = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Детализация затрат на ремонт ОС", "Использовать учет затрат на ремонт ОС");
	
	Если ИспользоватьУчетЗатратНаРемонтОС <> Истина Тогда 
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-01 (#3768)
	Если НЕ ВидимостьГиперСсылкиНаДокументДетализацииОС(Источник.ВидОперации) Тогда
		Возврат;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-01 (#3768)
	
	ДокументРасшифровки = ПолучитьДокументДетализацииЗатратНаРемонтОС(Источник.Ссылка);
	
	Если ЗначениеЗаполнено(ДокументРасшифровки) Тогда 
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-22 (#3876)
		УстановитьПривилегированныйРежим(Истина);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-22 (#3876)
		
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ДокументРасшифровки.Проведен Тогда
			ОбъектРасшифровки = ДокументРасшифровки.ПолучитьОбъект();
			ОбъектРасшифровки.ДополнительныеСвойства.Вставить("КонтролироватьСоответствиеСуммРасшифровки",Ложь);
			ОбъектРасшифровки.Записать(РежимЗаписиДокумента.ОтменаПроведения);			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И ДокументРасшифровки.ПометкаУдаления <> Источник.ПометкаУдаления Тогда
			ОбъектРасшифровки = ДокументРасшифровки.ПолучитьОбъект();
			ОбъектРасшифровки.ДополнительныеСвойства.Вставить("КонтролироватьСоответствиеСуммРасшифровки",Ложь);
			ОбъектРасшифровки.ПометкаУдаления = Источник.ПометкаУдаления;
			ОбъектРасшифровки.Записать(РежимЗаписиДокумента.Запись);			
		КонецЕсли;
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-22 (#3876)
		УстановитьПривилегированныйРежим(Ложь);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-22 (#3876)
		
	КонецЕсли;
	
КонецПроцедуры


// ПРОГРАММНЫЕ МЕТОДЫ

// ВидОперации - реквизит документа ФВБ 
Функция ВидимостьГиперСсылкиНаДокументДетализацииОС(ВидОперации) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ок_ДетализацияЗатратНаРемонтОС) Тогда
		Возврат Ложь; // нет доступа к документу, то показывать не надо
	КонецЕсли;
	
	ВидыОпераций = Новый Соответствие;
	ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный"), Истина);
	ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный"), Истина);
	ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный"), Истина);
	
	Возврат ВидыОпераций[ВидОперации] = Истина;
	
КонецФункции	

Функция ПолучитьДокументДетализацииЗатратНаРемонтОС(ДокументОснование) Экспорт
	Перем ДокументРасшифровки;	
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ок_ДетализацияЗатратНаРемонтОС) Тогда
		Возврат ДокументРасшифровки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ок_ДетализацияЗатратНаРемонтОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ок_ДетализацияЗатратНаРемонтОС КАК ок_ДетализацияЗатратНаРемонтОС
	|ГДЕ
	|	ок_ДетализацияЗатратНаРемонтОС.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДокументРасшифровки = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ДокументРасшифровки;
	
КонецФункции

Процедура СформироватьНаОснованииЗаявкиРасшифровкуЗатратНаРемонтОС(Заявка, ДанныеФормыРасшифровки, ДанныеСформированы=Ложь) Экспорт
	
	Если Не ПроверитьНеобходимостьРасшифровкиЗатратНаОС(Заявка) Тогда 
		Сообщить("Детализация затрат по ОС не требуется");
		Возврат;
	КонецЕсли;	
	
	Если ПроверитьВозможностьРасшифровкиЗатратНаОС(Заявка) Тогда
		
		ДокументРасшифровки = Документы.ок_ДетализацияЗатратНаРемонтОС.СоздатьДокумент();
		ДокументРасшифровки.Заполнить(Заявка);
		
		ЗначениеВДанныеФормы(ДокументРасшифровки, ДанныеФормыРасшифровки);
		
		ДанныеСформированы = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьРасшифровкиЗатратНаОС(Заявка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Заявка) Тогда
		Сообщить("Не передана заявка!");
		Возврат Ложь;		  
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заявка.бит_БК_Организация) Тогда
		Сообщить("Заполните поле ""Компания-плательщик"" и запишите документ.");
		Возврат Ложь;		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьНеобходимостьРасшифровкиЗатратНаОС(Заявка) Экспорт
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-22 (#3876)
	//УстановитьПривилегированныйРежим(Истина);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-22 (#3876)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СоответствияАналитик.ЛеваяАналитика_1 КАК ЛеваяАналитика_1,
	|	бит_СоответствияАналитик.ЛеваяАналитика_2 КАК ЛеваяАналитика_2,
	|	бит_СоответствияАналитик.ЛеваяАналитика_3 КАК ЛеваяАналитика_3,
	|	бит_СоответствияАналитик.ПраваяАналитика_1 КАК ПраваяАналитика_1,
	|	бит_СоответствияАналитик.ПраваяАналитика_2 КАК ПраваяАналитика_2,
	|	бит_СоответствияАналитик.ПраваяАналитика_3 КАК ПраваяАналитика_3
	|ПОМЕСТИТЬ втСоответствияАналитик
	|ИЗ
	|	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|ГДЕ
	|	бит_СоответствияАналитик.ВидСоответствия = &ВидСоответствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_ФормаВводаБюджетаБДДС.ЦФО КАК ЦФО,
	|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов КАК СтатьяОборотов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоответствияАналитик КАК втСоответствияАналитик
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = втСоответствияАналитик.ЛеваяАналитика_1
	|			И бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = втСоответствияАналитик.ПраваяАналитика_1
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_ФормаВводаБюджетаБДДС.ЦФО,
	|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоответствияАналитик КАК втСоответствияАналитик
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = втСоответствияАналитик.ЛеваяАналитика_2
	|			И бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = втСоответствияАналитик.ПраваяАналитика_2
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_ФормаВводаБюджетаБДДС.ЦФО,
	|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоответствияАналитик КАК втСоответствияАналитик
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = втСоответствияАналитик.ЛеваяАналитика_3
	|			И бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = втСоответствияАналитик.ПраваяАналитика_3
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ВидСоответствия", Справочники.бит_ВидыСоответствийАналитик.ЦФО_СтатьяОборотов);
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-22 (#3876)
	//Если Запрос.Выполнить().Пустой() Тогда
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-22 (#3876)
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеЗаявкиДляРасшифровкиЗатратОС(ДокументЗаявки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ФормаВводаБюджетаБДДС.ЦФО КАК ЦФО,
	|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_2 КАК Объект,
	|	бит_ФормаВводаБюджетаБДДС.Период КАК ПериодЗатрат,
	|	СУММА(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС) КАК Сумма
	|ПОМЕСТИТЬ втДанныеЗаявки
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &ДокументЗаявки
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов,
	|	бит_ФормаВводаБюджетаБДДС.ЦФО,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_2,
	|	бит_ФормаВводаБюджетаБДДС.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СоответствияАналитик.ЛеваяАналитика_1 КАК ЛеваяАналитика_1,
	|	бит_СоответствияАналитик.ЛеваяАналитика_2 КАК ЛеваяАналитика_2,
	|	бит_СоответствияАналитик.ЛеваяАналитика_3 КАК ЛеваяАналитика_3,
	|	бит_СоответствияАналитик.ПраваяАналитика_1 КАК ПраваяАналитика_1,
	|	бит_СоответствияАналитик.ПраваяАналитика_2 КАК ПраваяАналитика_2,
	|	бит_СоответствияАналитик.ПраваяАналитика_3 КАК ПраваяАналитика_3
	|ПОМЕСТИТЬ втСоотстветствияАналитик
	|ИЗ
	|	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|ГДЕ
	|	бит_СоответствияАналитик.ВидСоответствия = &ВидСоответствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаявка.ЦФО КАК ЦФО,
	|	втЗаявка.СтатьяОборотов КАК СтатьяОборотов,
	|	втЗаявка.Объект КАК Объект,
	|	втЗаявка.Сумма КАК Сумма,
	|	втЗаявка.ПериодЗатрат КАК ПериодЗатрат
	|ИЗ
	|	втДанныеЗаявки КАК втЗаявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоотстветствияАналитик КАК втСоотстветствияАналитик
	|		ПО втЗаявка.ЦФО = втСоотстветствияАналитик.ЛеваяАналитика_1
	|			И втЗаявка.СтатьяОборотов = втСоотстветствияАналитик.ПраваяАналитика_1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втЗаявка.ЦФО,
	|	втЗаявка.СтатьяОборотов,
	|	втЗаявка.Объект,
	|	втЗаявка.Сумма,
	|	втЗаявка.ПериодЗатрат
	|ИЗ
	|	втДанныеЗаявки КАК втЗаявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоотстветствияАналитик КАК втСоотстветствияАналитик
	|		ПО втЗаявка.ЦФО = втСоотстветствияАналитик.ЛеваяАналитика_2
	|			И втЗаявка.СтатьяОборотов = втСоотстветствияАналитик.ПраваяАналитика_2
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втЗаявка.ЦФО,
	|	втЗаявка.СтатьяОборотов,
	|	втЗаявка.Объект,
	|	втЗаявка.Сумма,
	|	втЗаявка.ПериодЗатрат
	|ИЗ
	|	втДанныеЗаявки КАК втЗаявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоотстветствияАналитик КАК втСоотстветствияАналитик
	|		ПО втЗаявка.ЦФО = втСоотстветствияАналитик.ЛеваяАналитика_3
	|			И втЗаявка.СтатьяОборотов = втСоотстветствияАналитик.ПраваяАналитика_3";
	
	Запрос.УстановитьПараметр("ДокументЗаявки", ДокументЗаявки);
	Запрос.УстановитьПараметр("ВидСоответствия", Справочники.бит_ВидыСоответствийАналитик.ЦФО_СтатьяОборотов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьОбновитьЗатратыРасшифровки(ДокументОбъектРасшифровки) Экспорт
	
	ДанныеЗаявки = ПолучитьДанныеЗаявкиДляРасшифровкиЗатратОС(ДокументОбъектРасшифровки.ДокументОснование);
	
	ДетализацияЗатратСтарый = ДокументОбъектРасшифровки.ДетализацияЗатрат.Выгрузить();
	ДетализацияЗатратНовый = ДетализацияЗатратСтарый.СкопироватьКолонки();
	ДетализацияЗатратБуфер = ДетализацияЗатратСтарый.СкопироватьКолонки();
	
	Для каждого СтрокаЗаявки Из ДанныеЗаявки Цикл
		
		СтруктураПоиска = Новый Структура("ЦФО, СтатьяОборотов, Объект, ПериодЗатрат");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаЗаявки);
		
		НайденныеСтроки = ДетализацияЗатратСтарый.НайтиСтроки(СтруктураПоиска);
		
		Если НЕ НайденныеСтроки.Количество() Тогда
			
			ЗаполнитьЗначенияСвойств(ДетализацияЗатратНовый.Добавить(), СтрокаЗаявки);	
			
		ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
			
			НайденнаяСтрокаЗатрат = НайденныеСтроки[0]; 
			
			НоваяСтрокаЗатрат = ДетализацияЗатратНовый.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗатрат, НайденнаяСтрокаЗатрат);
			
			РазницаСумм = СтрокаЗаявки.Сумма - НайденнаяСтрокаЗатрат.Сумма;
			
			Если РазницаСумм < 0 Тогда
				
				НоваяСтрокаЗатрат.Сумма = СтрокаЗаявки.Сумма;	
				
			ИначеЕсли РазницаСумм > 0 Тогда
				
				Если ЗначениеЗаполнено(НайденнаяСтрокаЗатрат.ОсновноеСредство) Тогда
					
					НоваяСтрокаЗатрат = ДетализацияЗатратНовый.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаЗатрат, СтрокаЗаявки,, "Сумма");
					НоваяСтрокаЗатрат.Сумма = РазницаСумм;
					НоваяСтрокаЗатрат.ОсновноеСредство = Неопределено;
					
				Иначе
					
					НоваяСтрокаЗатрат.Сумма = НоваяСтрокаЗатрат.Сумма + РазницаСумм;
					
				КонецЕсли;
								
			КонецЕсли;
			
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			
			ДетализацияЗатратБуфер.Очистить();
			
			СуммаЗатратБезОС = 0;
			СуммаЗатратОС = 0;
			СуммаЗатратОбщая = 0;
			СтрокаБуфераБезОС = Неопределено;
			
			Для каждого НайденнаяСтрокаЗатрат Из НайденныеСтроки Цикл
				
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаЗатрат.ОсновноеСредство) Тогда
					
					Если СтрокаБуфераБезОС = Неопределено Тогда
						
						НоваяСтрокаБуфера = ДетализацияЗатратБуфер.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаБуфера, НайденнаяСтрокаЗатрат);	
						СтрокаБуфераБезОС = НоваяСтрокаБуфера;
						
					Иначе
						
						СтрокаБуфераБезОС.Комментарий = "";
						
					КонецЕсли;
					
					СуммаЗатратБезОС = СуммаЗатратБезОС + НайденнаяСтрокаЗатрат.Сумма;
					
				Иначе
					
					НоваяСтрокаБуфера = ДетализацияЗатратБуфер.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаБуфера, НайденнаяСтрокаЗатрат);	
					СтрокаБуфераОС = НоваяСтрокаБуфера;
					СуммаЗатратОС = СуммаЗатратОС + НайденнаяСтрокаЗатрат.Сумма;
					
				КонецЕсли;
				
				СуммаЗатратОбщая = СуммаЗатратОбщая + НайденнаяСтрокаЗатрат.Сумма;
				
			КонецЦикла;
			
			РазницаСуммОбщая = СтрокаЗаявки.Сумма - СуммаЗатратОбщая;
			РазницаСуммОС = СтрокаЗаявки.Сумма - СуммаЗатратОС;
			
			КоличествоСтрокОС = ДетализацияЗатратБуфер.Количество() - ДетализацияЗатратБуфер.НайтиСтроки(Новый Структура("ОсновноеСредство",Справочники.ОсновныеСредства.ПустаяСсылка())).Количество();
			
			Если РазницаСуммОбщая > 0 Тогда
					
				Если НЕ СтрокаБуфераБезОС = Неопределено Тогда
					
					//СтрокаБуфераБезОС.Сумма = СуммаЗатратОбщая + РазницаСуммОбщая;
					  СтрокаБуфераБезОС.Сумма = СтрокаБуфераБезОС.Сумма + РазницаСуммОбщая;
					  
				ИначеЕсли СуммаЗатратОС > 0 Тогда
					
					НоваяСтрокаЗатрат = ДетализацияЗатратБуфер.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаЗатрат, СтрокаЗаявки,, "Сумма");
					НоваяСтрокаЗатрат.Сумма = РазницаСуммОбщая;
					НоваяСтрокаЗатрат.ОсновноеСредство = Неопределено;
					
				КонецЕсли;
				
			ИначеЕсли РазницаСуммОбщая < 0 Тогда
				
				СуммаБезОС = ?(СтрокаБуфераБезОС = Неопределено,0,СтрокаБуфераБезОС.Сумма); 
				
				Если КоличествоСтрокОС > 1 И СуммаБезОС < -РазницаСуммОбщая  Тогда
										
					ТекстСообщения = "Сумма детализации по аналитикам: 
					                 |Период - %1 
							         |ЦФО - %2 
							         |Объект - %3 
							         |Статья оборотов - %4 
							         |превышает сумму заявки на %5. Внесите изменения.";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,СтрокаЗаявки.ПериодЗатрат,СтрокаЗаявки.ЦФО,СтрокаЗаявки.Объект,СтрокаЗаявки.СтатьяОборотов,-РазницаСуммОбщая - СуммаБезОС);
					Сообщить(ТекстСообщения);
					
					Если СтрокаБуфераБезОС <> Неопределено Тогда  
						ДетализацияЗатратБуфер.Удалить(СтрокаБуфераБезОС);
					КонецЕсли;
					
				Иначе
					
					т = Мин(СтрокаБуфераБезОС.Сумма,-РазницаСуммОбщая); 
					
					СтрокаБуфераБезОС.Сумма = СтрокаБуфераБезОС.Сумма - т;
					
					Если СтрокаБуфераБезОС.Сумма <= 0 Тогда
						
						ДетализацияЗатратБуфер.Удалить(СтрокаБуфераБезОС);							
						
					КонецЕсли;
					
					СтрокаБуфераОС.Сумма = СтрокаБуфераОС.Сумма + РазницаСуммОбщая + т; 
					
				КонецЕсли;
				
			КонецЕсли;
			
			Для каждого СтрокаБуфера Из ДетализацияЗатратБуфер Цикл
				
				ЗаполнитьЗначенияСвойств(ДетализацияЗатратНовый.Добавить(), СтрокаБуфера);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъектРасшифровки.ДетализацияЗатрат.Очистить();
	ДокументОбъектРасшифровки.ДетализацияЗатрат.Загрузить(ДетализацияЗатратНовый);
	
	ДокументОбъектРасшифровки.ДетализацияЗатрат.Сортировать("ЦФО, Объект, СтатьяОборотов, ПериодЗатрат");
	
	ДокументОбъектРасшифровки.Организация = ДокументОбъектРасшифровки.ДокументОснование.бит_БК_Организация; 
	
КонецПроцедуры

Функция ПолучитьСоответствиеСтатьиЗатратГруппеОС(СтатьяОборотов) Экспорт
	
	ГруппаОС = Справочники.бит_му_КлассыОсновныхСредств.ПустаяСсылка();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_СоответствияАналитик.ЛеваяАналитика_1 КАК ГруппаОС,
	|	бит_СоответствияАналитик.ЛеваяАналитика_3 КАК СтатьяОборотов
	|ИЗ
	|	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|ГДЕ
	|	бит_СоответствияАналитик.ВидСоответствия = &ВидСоответствия
	|	И бит_СоответствияАналитик.ПраваяАналитика_1 = &СтатьяОборотов";
	
	Запрос.УстановитьПараметр("СтатьяОборотов", СтатьяОборотов);
	Запрос.УстановитьПараметр("ВидСоответствия", Справочники.бит_ВидыСоответствийАналитик.КлассОС_СтатьяОборотов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();;
		Выборка.Следующий();
		
		ГруппаОС = Выборка.ГруппаОС;
		
	КонецЕсли;
	
	Возврат ГруппаОС;	
	
КонецФункции
// ОКЕЙ Гиль А.В.(Софтлаб) Конец 26.01.2020 (#3591)
