////////////////////////////////////////////////////////////////////////////////
// Модуль содержит серверные методы сервиса электронных трудовых книжек
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") И СервисЭлектронныхТрудовыхКнижекДоступен();
	
КонецФункции

Функция СервисЭлектронныхТрудовыхКнижекДоступен() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено() Или РежимОтладкиСервисаЭлектронныхТрудовыхКнижек();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек() Тогда
		Параметры.Вставить("РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек", Истина);
		Параметры.Вставить("ЗаголовокПриложения", НСтр("ru = '1С:Электронные трудовые книжки'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПодключаемыеНаправленияСдачиОтчетности(Направления) Экспорт
	
	Для каждого Направление ИЗ Направления Цикл
		Если Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			Направление.Доступен   = Истина;
			Направление.Подключить = Истина;
		Иначе
			Направление.Доступен   = Ложь;
			Направление.Подключить = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеОбъекта = ТаблицаОписания.Добавить();
	ОписаниеОбъекта.ТипОбъекта = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД");
	ОписаниеОбъекта.ВидКонтролирующегоОргана           = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеОбъекта.ГруппаВДереве                      = "Отчетность по физлицам";
	ОписаниеОбъекта.ВидДокумента                       = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеОбъекта.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеОбъекта.ЯвляетсяАктуальным                 = Истина;
	ОписаниеОбъекта.ИмяОсновногоМакетаДляПечати        = "ПФ_MXL_ФормаСЗВ_ТД";
	ОписаниеОбъекта.ВидЭлектронногоПредставления       = Справочники.ВидыОтправляемыхДокументов.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД;
	
КонецПроцедуры

// Возвращает список наименований отчетов используемых сервисом электронных трудовых книжек.
//
// Параметры:
//   СписокРегламентированныхОтчетов - список наименований регламентированных отчетов (синоним основной формы отчета),
//    в представление списка значений вносится список ФО через запятую, если требуются ограничения в зависимости от ФО
//
// Пример:
//   СписокРегламентированныхОтчетов = Новый СписокЗначений;
//   СписокРегламентированныхОтчетов.Добавить("Реестр по акцизам: Приложение 01", "Импорт");
//   Возврат СписокРегламентированныхОтчетов;
//
Процедура ПолучитьНазванияРегламентированныхОтчетовСервисаЭТК(СписокРегламентированныхОтчетов) Экспорт
	
	СписокРегламентированныхОтчетов = Новый СписокЗначений;
	
	// Отчетность по физическим лицам
	СписокРегламентированныхОтчетов.Добавить("Сведения о трудовой деятельности работников, СЗВ-ТД", "");
	
КонецПроцедуры

#Область ДоработкаФормОбъектов

// Дополняет функционал обработчика "ПриСозданииНаСервере" общей формы "Регламентированная отчетность",
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, общая форма "Регламентированная отчетность".
//
// Пример:
//  ГруппаКоманды = Форма.Элементы["ОтчетыГруппа3"];
//  
//  ИмяКоманды = "ОтчетыПоказатьДополнительнуюИнформацию";
//  Команда = Форма.Команды.Добавить(ИмяКоманды);
//  Команда.Подсказка = НСтр("ru = 'Показать дополнительную информацию'");
//  Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
//  Команда.Картинка = БиблиотекаКартинок.Лупа;
//  Команда.Действие = "Подключаемый_ВыполнитьНазначаемуюКоманду";
//  
//  Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКоманды);
//  Кнопка.Заголовок = НСтр("ru = 'Инфо'");
//  Команда.ИзменяетСохраняемыеДанные = Ложь;
//  Кнопка.ИмяКоманды = ИмяКоманды;
//
Процедура ФормаРегламентированнойОтчетности_ПриСозданииНаСервере(Форма) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Заголовок = НСтр("ru = 'Отчетность в ПФР'");
	
	Элементы = Форма.Элементы;
	
	// Баннер
	Если НЕ Форма.ЭлектронныйДокументооборотДоступен Тогда
		
		Шрифт = Новый Шрифт(ШрифтыСтиля.ШрифтТекстаБаннера, , 11);
		
		ГруппаБаннер = Элементы.Добавить("Баннер", Тип("ГруппаФормы"),);
		ГруппаБаннер.Вид                                = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаБаннер.Отображение                        = ОтображениеОбычнойГруппы.Нет;
		ГруппаБаннер.Группировка                        = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаБаннер.РастягиватьПоГоризонтали           = Истина;
		ГруппаБаннер.РастягиватьПоВертикали             = Ложь;
		ГруппаБаннер.ЦветФона                           = ЦветаСтиля.ЦветФонаБаннер;
		ГруппаБаннер.ГоризонтальныйИнтервал             = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаБаннер.ОтображатьЗаголовок                = Ложь;
		ГруппаБаннер.ВертикальноеПоложениеПодчиненных   = ВертикальноеПоложениеЭлемента.Центр;

		ГруппаБаннерСФоном = Элементы.Добавить("БаннерСФоном", Тип("ГруппаФормы"), ГруппаБаннер);
		ГруппаБаннерСФоном.Вид                          = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаБаннерСФоном.Отображение                  = ОтображениеОбычнойГруппы.Нет;
		ГруппаБаннерСФоном.Группировка                  = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаБаннерСФоном.РастягиватьПоГоризонтали     = Истина;
		ГруппаБаннерСФоном.РастягиватьПоВертикали       = Ложь;
		ГруппаБаннерСФоном.ВертикальныйИнтервал         = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаБаннерСФоном.ОтображатьЗаголовок          = Ложь;
		ГруппаБаннерСФоном.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
		ГруппаБаннерСТекстом = Элементы.Добавить("ГруппаБаннерСТекстом", Тип("ГруппаФормы"), ГруппаБаннерСФоном);
		ГруппаБаннерСТекстом.Вид                        = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаБаннерСТекстом.Отображение                = ОтображениеОбычнойГруппы.Нет;
		ГруппаБаннерСТекстом.Группировка                = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаБаннерСТекстом.РастягиватьПоГоризонтали   = Истина;
		ГруппаБаннерСТекстом.РастягиватьПоВертикали     = Ложь;
		ГруппаБаннерСТекстом.ГоризонтальныйИнтервал     = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаБаннерСТекстом.ОтображатьЗаголовок        = Ложь;
		
		ТекстБаннера1 = Элементы.Добавить("ТекстБаннера1", Тип("ДекорацияФормы"), ГруппаБаннерСТекстом);
		ТекстБаннера1.Вид                               = ВидДекорацииФормы.Надпись;
		ТекстБаннера1.РастягиватьПоГоризонтали          = Ложь;
		ТекстБаннера1.РастягиватьПоВертикали            = Ложь;
		ТекстБаннера1.Заголовок                         = НСтр("ru=' Подготовьте отчет СЗВ-ТД'");
		ТекстБаннера1.Шрифт     = Шрифт;
		
		ТекстБаннера2 = Элементы.Добавить("ТекстБаннера2", Тип("ДекорацияФормы"), ГруппаБаннерСТекстом);
		ТекстБаннера2.Вид                               = ВидДекорацииФормы.Надпись;
		ТекстБаннера2.РастягиватьПоГоризонтали          = Ложь;
		ТекстБаннера2.РастягиватьПоВертикали            = Ложь;
		ТекстБаннера2.Заголовок                         = НСтр("ru='в Пенсионный Фонд бесплатно!'");
		ТекстБаннера2.Шрифт                             = Шрифт;
		
		ТекстБаннера3 = Элементы.Добавить("ТекстБаннера3", Тип("ДекорацияФормы"), ГруппаБаннерСТекстом);
		ТекстБаннера3.Вид                               = ВидДекорацииФормы.Надпись;
		ТекстБаннера3.РастягиватьПоГоризонтали          = Ложь;
		ТекстБаннера3.РастягиватьПоВертикали            = Ложь;
		ТекстБаннера3.Заголовок                         = НСтр("ru='Его можно распечатать или выгрузить в файл.'");
		ТекстБаннера3.Шрифт                             = Шрифт;
		
		ГруппаБаннерСКнопкой = Элементы.Добавить("ГруппаБаннерСКнопкой", Тип("ГруппаФормы"), ГруппаБаннерСФоном);
		ГруппаБаннерСКнопкой.Вид                        = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаБаннерСКнопкой.Отображение                = ОтображениеОбычнойГруппы.Нет;
		ГруппаБаннерСКнопкой.Группировка                = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаБаннерСКнопкой.РастягиватьПоГоризонтали   = Истина;
		ГруппаБаннерСКнопкой.РастягиватьПоВертикали     = Ложь;
		ГруппаБаннерСКнопкой.ГоризонтальныйИнтервал     = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаБаннерСКнопкой.ОтображатьЗаголовок        = Ложь;
		
		ТекстБаннера4 = Элементы.Добавить("ТекстБаннера4", Тип("ДекорацияФормы"), ГруппаБаннерСКнопкой);
		ТекстБаннера4.Вид                               = ВидДекорацииФормы.Надпись;
		ТекстБаннера4.РастягиватьПоГоризонтали          = Ложь;
		ТекстБаннера4.РастягиватьПоВертикали            = Ложь;
		ТекстБаннера4.Заголовок                         = НСтр("ru=' Для отправки в электронном виде'");
		ТекстБаннера4.Шрифт                             = Шрифт;
		
		ИмяКоманды = "ОткрытьФормуМастераЗаявленияНаПодключение";
		Команда                                         = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Действие                                = "Подключаемый_ВыполнитьНазначаемуюКоманду";
		Кнопка                                          = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаБаннерСКнопкой);
		Команда.ИзменяетСохраняемыеДанные               = Ложь;
		Кнопка.ИмяКоманды                               = ИмяКоманды;
		Кнопка.Заголовок                                = "подключите 1С-Отчетность";
		Кнопка.Вид                                      = ВидКнопкиФормы.Гиперссылка;
		Кнопка.Шрифт                                    = Шрифт;
		
		ТекстБаннера5 = Элементы.Добавить("ТекстБаннера5", Тип("ДекорацияФормы"), ГруппаБаннерСКнопкой);
		ТекстБаннера5.Вид                               = ВидДекорацииФормы.Надпись;
		ТекстБаннера5.РастягиватьПоГоризонтали          = Ложь;
		ТекстБаннера5.РастягиватьПоВертикали            = Ложь;
		ТекстБаннера5.Заголовок                         = НСтр("ru='(от 249 руб. в месяц)'");
		ТекстБаннера5.Шрифт                             = Шрифт;
		
		КартинкаБаннера = Элементы.Добавить("КартинкаБаннера", Тип("ДекорацияФормы"), ГруппаБаннер);
		КартинкаБаннера.Вид                             = ВидДекорацииФормы.Картинка;
		КартинкаБаннера.РастягиватьПоГоризонтали        = Ложь;
		КартинкаБаннера.РастягиватьПоВертикали          = Ложь;
		КартинкаБаннера.Картинка                        = БиблиотекаКартинок.КотВажноеСообщение;
		
		Элементы.Переместить(ГруппаБаннер, Форма, Элементы.ГруппаГлавногоМеню);
		Элементы.ГруппаСсылокРазделы.Видимость = Ложь;
		
	КонецЕсли;
	
	// Отключаем видимость элементов, недоступных в данном режиме
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтчетыПечатьОтчетШтрих",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтчетыПечатьОтчетШтрих1",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтборВидОтчета",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтчетыОтправитьПакетСДопДокументамиДляФНС",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтчетыГруппаЕще",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПоказатьКонтекстныеНовости",
		"Видимость",
		Ложь);
		
	// Корректируем пользовательское представление отдельных элементов
	Элементы.ОтчетыПечатьОтчет.Заголовок  = НСтр("ru = 'Форма отчета'");
	Элементы.ОтчетыПечатьОтчет1.Заголовок = НСтр("ru = 'Форма отчета'");
	
	ВидОтчета = "Сведения о трудовой деятельности работников, СЗВ-ТД";
	Форма.ВидОтчета = ВидОтчета;
	МассивВидовОтчетов = Новый Массив;
	МассивВидовОтчетов.Добавить(ВидОтчета);
	Элементы.ОтборВидОтчета.СписокВыбора.ЗагрузитьЗначения(МассивВидовОтчетов);
	
	УстановитьОтборыПоОтчетам(Форма);
	
КонецПроцедуры

// Настройка реквизитов формы организации (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура Организация_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = НСтр("ru='Настройки'");
	
	Элементы = Форма.Элементы;
	
	// Отключаем видимость элементов, недоступных в данном режиме
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодменюПечать",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтправитьПоЭлектроннойПочте",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИсторияРегистрацийВНалоговомОрганеКПП",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СнятьСУчета",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НаименованиеРегистрирующегоОргана",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЦифровойИндексОбособленногоПодразделения",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СистемаНалогообложенияПредставление",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИностраннаяОрганизация",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОсновнойБанковскийСчет",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоставитьНаУчетПоНовомуАдресу",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияИсторияРуководитель",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаГлавныйБухгалтер",
		"Видимость",
		Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаКассир",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияОтветственныеОтчеты",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЛоготипИПечатьСвернуто",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЛоготипИПечатьРазвернуто",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаНалоговыйОрган",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПлатежныеРеквизитыПФРПредставление",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаФОМС",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаФСС",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаКоды",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаКрупнейшийНалогоплательщик",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаНекредитнаяФинансоваяОрганизация",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаИностраннаяОрганизация",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаСкопировать",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаУстановитьПометкуУдаления",
		"Видимость",
		Ложь);
		
КонецПроцедуры

// Настройка реквизитов формы списка организаций (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура ОрганизацииСписок_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.Список.ИзменятьСоставСтрок = Ложь;
	
КонецПроцедуры

// Настройка реквизитов формы сотрудника (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура Сотрудник_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КадровыеДокументы",
		"Заголовок",
		НСтр("ru = 'Приказы'"));
		
КонецПроцедуры

// Настройка реквизитов формы списка сотрудников (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура СотрудникиСписок_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = НСтр("ru = 'Приказы'");
	Если Форма.Параметры.Свойство("Заголовок") Тогда
		Форма.Заголовок = Форма.Параметры.Заголовок + НСтр("ru = ': Приказы'");
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаСоздатьПриемНаРаботу",
		"Заголовок",
		НСтр("ru = 'Прием'"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаСоздатьКадровыйПеревод",
		"Заголовок",
		НСтр("ru = 'Перевод'"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокСоздатьПриемНаРаботу",
		"Заголовок",
		НСтр("ru = 'Прием'"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокСоздатьКадровыйПеревод",
		"Заголовок",
		НСтр("ru = 'Перевод'"));
		
КонецПроцедуры

// Настройка реквизитов формы должности (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура Должность_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НаименованиеКраткое",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Склонения",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтраховыеВзносыВФонды",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаУсловийТруда",
		"Видимость",
		Ложь);
	
КонецПроцедуры

// Настройка реквизитов формы приема на работу (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура ПриемНаРаботу_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтразитьВТрудовойКнижке",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеТрудовыеКнижки_ОтразитьВТрудовойКнижке",
		"Видимость",
		Истина);
		
	Если Форма.Объект.Начисления.Количество() = 0 Тогда
		ПовременныеНачисления = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(
			Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Форма.Объект.Начисления, ПовременныеНачисления, "Начисление");
	КонецЕсли;
	Если Форма.Объект.Начисления.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Оклад",
			"Видимость",
			Ложь);
	Иначе
		Форма.Оклад = Форма.Объект.Начисления[0].Размер;
	КонецЕсли;
		
	Форма.Модифицированность = Ложь;
	
КонецПроцедуры

// Настройка реквизитов формы перевода (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура КадровыйПеревод_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИзменитьПодразделениеИДолжность",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтразитьВТрудовойКнижке",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеТрудовыеКнижки_ОтразитьВТрудовойКнижке",
		"Видимость",
		Истина);
		
	Форма.Объект.ИзменитьНачисления = Истина;
	Если Форма.Объект.Начисления.Количество() = 0 Тогда
		ПовременныеНачисления = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(
		Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Форма.Объект.Начисления, ПовременныеНачисления, "Начисление");
	КонецЕсли;
	Если Форма.Объект.Начисления.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Оклад",
			"Видимость",
			Ложь);
	Иначе
		Форма.Оклад = Форма.Объект.Начисления[0].Размер;
	КонецЕсли;
	
	Форма.Модифицированность = Ложь;
		
КонецПроцедуры

// Настройка реквизитов формы увольнения (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура Увольнение_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтразитьВТрудовойКнижке",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеТрудовыеКнижки_ОтразитьВТрудовойКнижке",
		"Видимость",
		Истина);
	
КонецПроцедуры

// Настройка реквизитов формы ЗаявлениеОПредоставленииСведенийОТрудовойДеятельности (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура ЗаявлениеОПредоставленииСведенийОТрудовойДеятельности_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	
	МассивПараметровВыбораСотрудника = Новый Массив;
	МассивПараметровВыбораСотрудника.Добавить(Новый ПараметрВыбора("ДоступныВсеСотрудники", Истина));
	МассивПараметровВыбораСотрудника.Добавить(Новый ПараметрВыбора("Отбор.ВАрхиве", Ложь));
	
	Элементы.СотрудникиСотрудник.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораСотрудника);
	
КонецПроцедуры

// Настройка реквизитов формы СведенияОТрудовойДеятельностиРаботникаСТД_Р (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура СведенияОТрудовойДеятельностиРаботникаСТД_Р_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	
	МассивПараметровВыбораСотрудника = Новый Массив;
	Для Каждого ПараметрВыбора ИЗ Элементы.Сотрудник.СвязиПараметровВыбора Цикл
		Если ПараметрВыбора.Имя = "Отбор.Организация" Тогда
			МассивПараметровВыбораСотрудника.Добавить(Новый СвязьПараметраВыбора("Отбор.ГоловнаяОрганизация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Сотрудник.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораСотрудника);
	
КонецПроцедуры

// Настройка реквизитов формы СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД (установка ограничений)
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, форма элемента справочника "Организации".
//  Отказ - Булево, признак отказа от создания формы.
//  СтандартнаяОбработка - Булево,  признак выполнения стандартной обработки события.
//
Процедура СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриемНаРаботу.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КадровыйПеревод.Ссылка
	|ИЗ
	|	Документ.КадровыйПеревод КАК КадровыйПеревод
	|ГДЕ
	|	КадровыйПеревод.Проведен";
	
	ЕстьКадровыеМероприятия = НЕ Запрос.Выполнить().Пустой();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СотрудникиПодбор",
		"Видимость",
		ЕстьКадровыеМероприятия);
	
	МассивПараметровВыбораСотрудника = Новый Массив;
	Для Каждого ПараметрВыбора ИЗ Элементы.СотрудникиСотрудник.СвязиПараметровВыбора Цикл
		Если ПараметрВыбора.Имя = "Отбор.Организация" Тогда
			МассивПараметровВыбораСотрудника.Добавить(Новый СвязьПараметраВыбора("Отбор.ГоловнаяОрганизация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.НеИзменять));
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СотрудникиСотрудник.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораСотрудника);
	
КонецПроцедуры

// Процедура дополняет форму ПечатьДокументов элементами управления.
//
// Параметры:
//  Форма - Управляемая форма.
//
Процедура ПечатьДокументовПриСозданииНаСервере(Форма) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаРедактированиеМакета",
		"Видимость",
		Ложь);
	
КонецПроцедуры

#КонецОбласти

Процедура НастроитьПараметрыОтбораСотрудников(Форма) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы  = Форма.Элементы;
	Параметры = Форма.Параметры;
	Отбор     = Параметры.Отбор;
	
	Форма.ОтборТекущееПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Форма.Параметры.Отбор.Вставить("ТекущееПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	Если ТипЗнч(Отбор)<> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ДоступныВсеСотрудники", Форма.ДоступныПринятыеИУволенные);
	
	Если Форма.ДоступныПринятыеИУволенные Тогда
		НовыйОтбор = Новый Структура;
		Если Отбор.Свойство("ТекущаяОрганизация") Тогда
			НовыйОтбор.Вставить("ТекущаяОрганизация", Отбор.ТекущаяОрганизация);
		КонецЕсли;
		НовыйОтбор.Вставить("ТекущееПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		Форма.Параметры.Отбор = НовыйОтбор;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТекущаяОрганизация",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГоловнаяОрганизация",
		"Видимость",
		Ложь);
	
КонецПроцедуры

Процедура УстановитьРежимКомандногоИнтерфейса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИнтерфейсЭлектронныхТрудовыхКнижек.Установить(Истина);
	
	// Сбросим интерфейсные константы
	Константы.ИнтерфейсТаксиБазовый.Установить(Ложь);
	Константы.ИнтерфейсТакси.Установить(Ложь);
	Константы.ИнтерфейсТаксиПростой.Установить(Ложь);
	Константы.ИнтерфейсВерсии77.Установить(Ложь);
	Константы.ИнтерфейсИнтеграцииСБанком.Установить(Ложь);
	Константы.ПоказыватьИнформационнуюПанель.Установить(Ложь);
	
	// Сбросим функциональные константы
	Константы.ИспользоватьДокументыРеализации.Установить(Ложь);
	Константы.ИспользоватьДокументыПоступления.Установить(Ложь);
	Константы.ОтображатьРазделыДокументыТоварыКонтрагенты.Установить(Ложь);
	Константы.ИспользоватьНесколькоОрганизаций.Установить(Ложь);
	Константы.ВестиУчетПоОрганизациям.Установить(Ложь);
	Константы.НеВестиУчетПоОрганизациям.Установить(Ложь);
	Константы.ВедетсяУчетЗарплатыКадров.Установить(Ложь);
	
	// Сбросим доступ к сервисам
	ОбменСКонтрагентами.УстановитьЗначенияКонстантЭДО(Ложь);
	
	// Оставим только то что надо
	ВключитьПодсистемуЭлектронныхТрудовыхКнижек();
	
	// Настройка Начальной страницы
	ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейсДляВсехпользователей();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьРежимКомандногоИнтерфейсаПриСменеТарифа() Экспорт
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчетЗарплаты.ВключитьИспользованияПодсистемыЗарплатаИКадрыПриСменеТарифа();
	
	ЭлектронноеВзаимодействиеБП.УстановитьЗначенияКонстантЭДОПриОбновлении();
	
	Константы.НеВестиУчетПоОрганизациям.Установить(Истина);
	
	ОбщегоНазначенияБП.УстановитьОпциюПоказыватьИнформационнуюПанель();
	
	РегистрыСведений.НастройкиСистемыНалогообложения.ОбновитьИспользуемыеСистемыНалогообложения(Истина);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейсДляВсехпользователей();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВключитьПодсистемуЭлектронныхТрудовыхКнижек() Экспорт
	
	Константы.ИспользоватьНесколькоПодразделений.Установить(Истина);
	Константы.ПоддержкаСовместительства.Установить(Истина);
	Константы.ИспользоватьКадровыйУчет.Установить(Истина);
	
КонецПроцедуры

Процедура УстановитьОтборыПоОтчетам(Форма)
	
	ОтборДинамическогоСписка = Форма.Отчеты.КомпоновщикНастроек.Настройки.Отбор;
	
	ДобавляемыеЭлементыОтбора          = Новый Массив;
	ДобавляемыеЭлементыОтбораВидОтчета = Новый Массив;
	
	ПолеКомпоновкиНаименованиеОтчета = Новый ПолеКомпоновкиДанных("НаименованиеОтчета");
	
	// Отбираем в массив пользовательские элементы отбора.
	Для Каждого ЭлементПользовательскойНастройки Из Форма.Отчеты.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ОтборКомпоновкиДанных")
			И ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки
				= ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки Тогда
			Для Каждого ЭлементОтбора Из ЭлементПользовательскойНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиНаименованиеОтчета
							И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						Продолжить;
					КонецЕсли;
					Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиНаименованиеОтчета Тогда
						ДобавляемыеЭлементыОтбораВидОтчета.Добавить(ЭлементОтбора);
					Иначе
						ДобавляемыеЭлементыОтбора.Добавить(ЭлементОтбора);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СписокОтбораВидОтчета = Новый СписокЗначений;
	СписокОтбораВидОтчета.Добавить(Строка(Форма.ВидОтчета));
	
	// Формируем фиксированные элементы отбора.
	ОтборДинамическогоСписка.Элементы.Очистить();
	
	ОтборГруппа = Неопределено;
	ОтборВидОтчета = Неопределено;
	
	ОтборВидОтчета = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборВидОтчета.ЛевоеЗначение = ПолеКомпоновкиНаименованиеОтчета;
	
	Если НЕ ЗначениеЗаполнено(Форма.ВидОтчета)
		ИЛИ (ТипЗнч(Форма.ВидОтчета) = Тип("СписокЗначений")
			И Форма.ВидОтчета.Количество() = 1 И Форма.ВидОтчета[0].Значение = "") Тогда
		Если ОтборГруппа <> Неопределено Тогда
			ОтборДинамическогоСписка.Элементы.Удалить(ОтборГруппа);
		ИначеЕсли ОтборВидОтчета <> Неопределено Тогда
			ОтборДинамическогоСписка.Элементы.Удалить(ОтборВидОтчета);
		КонецЕсли;
	Иначе
		Если ОтборВидОтчета <> Неопределено Тогда
			ОтборВидОтчета.Использование = Истина;
			ОтборВидОтчета.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборВидОтчета.ПравоеЗначение = СписокОтбораВидОтчета;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем пользовательские элементы отбора "Вид отчета".
	Для Каждого ДобавляемыйЭлементОтбораВидОтчета Из ДобавляемыеЭлементыОтбораВидОтчета Цикл
		НовыйЭлементОтбора = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ДобавляемыйЭлементОтбораВидОтчета, , "ИдентификаторПользовательскойНастройки");
		// Сохраним идентификатор пользовательской настройки элемента в его пользовательском представлении.
		НовыйЭлементОтбора.ПредставлениеПользовательскойНастройки = ДобавляемыйЭлементОтбораВидОтчета.ИдентификаторПользовательскойНастройки;
	КонецЦикла;
	
	// Добавляем пользовательские элементы отбора.
	Для Каждого ДобавляемыйЭлементОтбора Из ДобавляемыеЭлементыОтбора Цикл
		НовыйЭлементОтбора = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ДобавляемыйЭлементОтбора, , "ИдентификаторПользовательскойНастройки");
		// Сохраним идентификатор пользовательской настройки элемента в его пользовательском представлении.
		НовыйЭлементОтбора.ПредставлениеПользовательскойНастройки = ДобавляемыйЭлементОтбора.ИдентификаторПользовательскойНастройки;
	КонецЦикла;
	
	ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
	// Назначаем идентификаторы пользовательских настроек для элементов установленного отбора (быстрые отборы в форме).
	Для Каждого ЭлементПользовательскойНастройки Из Форма.Отчеты.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ОтборКомпоновкиДанных")
			И ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки
				= ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки Тогда
			Для Каждого ЭлементОтбора Из ЭлементПользовательскойНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если ЗначениеЗаполнено(ЭлементОтбора.ПредставлениеПользовательскойНастройки) Тогда
						ЭлементОтбора.ИдентификаторПользовательскойНастройки = ЭлементОтбора.ПредставлениеПользовательскойНастройки;
						ДоступноеПолеОтбора = ЭлементПользовательскойНастройки.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
						ЭлементОтбора.ПредставлениеПользовательскойНастройки =
							?(ДоступноеПолеОтбора = Неопределено, Строка(ЭлементОтбора.ЛевоеЗначение), ДоступноеПолеОтбора.Заголовок);
					КонецЕсли
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//Очищаем для удаления элементов пользовательского отбора при установке стандартных настроек.
	ОтборДинамическогоСписка.Элементы.Очистить();
	ОтборДинамическогоСписка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

Процедура ПолучитьСобственныеПредставленияОбъектов(СобственныеПредставленияОбъектов) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Возврат;
	КонецЕсли;

	СобственныеПредставленияОбъектов.Вставить("Документы.ПриемНаРаботу",   НСтр("ru = 'Прием'"));
	СобственныеПредставленияОбъектов.Вставить("Документы.КадровыйПеревод", НСтр("ru = 'Перевод'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РежимОтладкиСервисаЭлектронныхТрудовыхКнижек()
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
		Возврат СтрНайти(ВРег(ПараметрЗапускаПриложения), "ИНТЕРФЕЙСЭЛЕКТРОННЫХТРУДОВЫХКНИЖЕК") > 0;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

