#Область ПрограммныйИнтерфейс


// Возвращает признак того, что сеанс запущен в режиме отладки тарификации
//
// Возвращаемое значение:
//   Булево - Истина, если установлен режим отладки
//
Функция РежимОтладки() Экспорт
	
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	
	Возврат СтрНайти(ПараметрЗапускаПриложения, ПрефиксПараметраОтладки()) > 0;
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета юр.лица
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенУчетЮридическогоЛица() Экспорт
	
	Возврат РазрешенаУСН() Или РазрешенаОбщаяСистемаНалогообложения();
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета ИП
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенУчетФизическогоЛица() Экспорт
	
	Возврат РазрешенНалогНаПрофессиональныйДоход()
		Или РазрешенаПатентнаяСистемаНалогообложения()
		Или РазрешенаУСН()
		Или РазрешенНДФЛИП();
	
КонецФункции

// Возвращает признак того, что тариф допускает учет зарплаты
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенУчетЗарплаты() Экспорт
	
	Если РазрешенУчетЮридическогоЛица() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не РазрешенДополнительныйФункционал() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем, чтобы был установлен лимит хотя бы на одного сотрудника 
	Возврат РезультатПроверкиУсловийТарификацииПоСотрудникам(1).УсловияВыполнены;
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета юр.лица на ОСНО
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенаОбщаяСистемаНалогообложения() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиОбщаяСистемаНалогообложения();
	
	Возврат УслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета ИП на ОСНО
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенНДФЛИП() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиНДФЛИП();
	
	Возврат УслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета организации на УСН
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенаУСН() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиУСН();
	
	Возврат УслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета ИП на Патентной системе налогообложения
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенаПатентнаяСистемаНалогообложения() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиПатентнаяСистемаНалогообложения();
	
	Возврат УслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета организации на ЕНВД
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенЕНВД() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета плательщика Налога на профессиональный доход
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенНалогНаПрофессиональныйДоход() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиНалогНаПрофессиональныйДоход();
	
	Возврат УслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает использование Полного интерфейса
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенПолныйИнтерфейс() Экспорт
	
	Если Не ТарифицируетсяФункциональность() Тогда
		// Ограничение доступности интерфейса в первую очередь связано с ограничением доступа к функциональности 
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиПолныйИнтерфейс();
	
	Возврат УслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает использование функционала отличного от Основного
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенДополнительныйФункционал() Экспорт
	
	Если Не ТарифицируетсяФункциональность() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиДополнительныйФункционал();
	
	Возврат УслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что функциональность ограничена ведением ЭТК
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек() Экспорт
	
	Если Не СервисЭлектронныхТрудовыхКнижек.СервисЭлектронныхТрудовыхКнижекДоступен() Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Не РазрешенБухгалтерскийУчет() И РазрешенКадровыйУчет();
	
КонецФункции

// Возвращает признак того, что тариф предусматривает работу со всем функционалом бухгалтерского и налогового учета
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенБухгалтерскийУчет() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.РежимОтладки() Тогда
			Возврат Ложь; // Позволяет вести отладку вне режима сервиса
		Иначе
			Возврат Истина; // Использование локальной версии предполагает учет регулярной деятельности
		КонецЕсли;
		
	Иначе
		
		Возврат ЗарегистрированаЛицензияБезлимитнойУслуги(
			ИдентификаторУслугиБухгалтерскийУчет());
		
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, что тариф предусматривает возможность кадрового учета
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенКадровыйУчет() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.РежимОтладки() Тогда
			Возврат Ложь; // Позволяет вести отладку вне режима сервиса
		Иначе
			Возврат Истина; // Использование локальной версии предполагает учет регулярной деятельности
		КонецЕсли;
		
	Иначе
		
		Возврат ЗарегистрированаЛицензияБезлимитнойУслуги(
			ИдентификаторУслугиКадровыйУчет());
		
	КонецЕсли;
	
КонецФункции


// Возвращает имена функциональных опций, доступных для определенных систем налогообложения
//
// Возвращаемое значение:
//   Массив из Строка - массив имен доступных функциональных опций. Доступность опции определяется по доступности СНО
//
Функция ФункциональностьДоступнаяСНО() Экспорт
	
	ДоступныеФункциональныеОпции = Новый Массив;
	
	Если РазрешенаОбщаяСистемаНалогообложения() Или РазрешенНДФЛИП() Или РазрешенаУСН() Тогда
		ДоступныеФункциональныеОпции.Добавить("ИспользоватьДокументыПоступления");
		ДоступныеФункциональныеОпции.Добавить("ИспользоватьДокументыРеализации");
	КонецЕсли;
	
	Возврат ДоступныеФункциональныеОпции;
	
КонецФункции

// Проверяет использование систем налогообложения, отсутствующих в тарифе абонента.
// 
// Возвращаемое значение:
//   Булево - Истина, если в информационной базе используются системы налогообложения,
// которые не входят в тариф абонента.
//
Функция ИспользуетсяНедоступнаяСистемаНалогообложения() Экспорт
	//
	//УстановитьПривилегированныйРежим(Истина);
	//
	//ИспользуетсяНедоступнаяСНО =
	//	РегистрыСведений.НастройкиСистемыНалогообложения.ЕстьИспользуемыеСистемыНалогообложенияБезТарифа();
	//	
	//УстановитьПривилегированныйРежим(Ложь);
	
	ИспользуетсяНедоступнаяСНО = Ложь;
	
	Возврат ИспользуетсяНедоступнаяСНО;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДополнитьОписаниеТарифицируемыхУслуг(ПоставщикиУслуг) Экспорт
	
	НовыйПоставщик = Новый Структура;
	НовыйПоставщик.Вставить("Идентификатор", ИдентификаторПоставщикаУслугБухгалтерияПредприятия());
	НовыйПоставщик.Вставить("Наименование",  НСтр("ru = 'Конфигурация ""Бухгалтерия предприятия"", редакция 3.0'"));
	НовыйПоставщик.Вставить("Услуги",        Новый Массив);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиРегулярнаяДеятельность());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Возможность учитывать регулярную деятельность бизнеса и предоставлять ненулевую отчетность'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиТолькоИнтерфейсИнтеграцииСБанком());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Только интерфейс интеграции с банком'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиОбособленныеПодразделения());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Обособленные подразделения'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиОбратноеНачислениеНДС());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Обратное начисление НДС'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиРасширенныйФункционал());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Расширенный функционал'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиВестиУчетПоОрганизациям());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Учет по нескольким организациям'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиГособоронзаказ());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Контракты государственного заказа'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиУведомленияОКонтролируемыхСделках());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Контролируемые сделки'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиБухгалтерскийУчет());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Возможность вести бухгалтерский и налоговый учет и предоставлять отчетность'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиКадровыйУчет());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Возможность вести кадровый учет и регистрировать записи трудовых книжек'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиНачинатьРаботуСоСравненияРежимовНалогообложения());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Начинать работу с программой со сравнения режимов налогообложения'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиСервисРегистрации());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Сервис регистрации'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиКонсультацииБухОбслуживание());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Оказываются консультации партнерами 1С:БухОбслуживание'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиОбщаяСистемаНалогообложения());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: ОСНО'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиНДФЛИП());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: НДФЛ ИП'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиУСН());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: УСН'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиПатентнаяСистемаНалогообложения());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: Патент'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиНалогНаПрофессиональныйДоход());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: Налог на профессиональный доход'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиПолныйИнтерфейс());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Функциональность: Полный интерфейс'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиДополнительныйФункционал());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Функциональность: Настраиваемая'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиДоступноеКоличествоСотрудников());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Количество сотрудников'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Лимитированная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	ПоставщикиУслуг.Добавить(НовыйПоставщик);
	
КонецПроцедуры

Процедура ДополнитьОписаниеТарифицируемыхУслуг1СОтчетность(ПоставщикиУслуг) Экспорт
	
	ПоставщикПортал1СИТС = Неопределено;
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для каждого ЗначениеМассива Из ПоставщикиУслуг Цикл
		Если ЗначениеМассива.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			ПоставщикПортал1СИТС = ЗначениеМассива;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоставщикПортал1СИТС = Неопределено Тогда
		ПоставщикПортал1СИТС = Новый Структура;
		ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
		ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
		ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
		ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	КонецЕсли;
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслуги1СОтчетность());
	НоваяУслуга.Вставить("Наименование",  НСтр("ru = 'Лицензия для сдачи отчетности одного юридического лица'"));
	НоваяУслуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	ПоставщикПортал1СИТС.Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры

Процедура РазместитьИнформациюОбОграничении(Форма) Экспорт
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Обработка.ФункциональностьПрограммы.Форма.ФормаФункциональностьПрограммы" Тогда
		
		НаложитьОграничениеНаГруппуФормы(Форма, "ГруппаОсновное", "ТолькоПросмотр");
		
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.НалогиИОтчеты"
		ИЛИ Форма.ИмяФормы = "РегистрСведений.НастройкиСистемыНалогообложения.Форма.ФормаЗаписи" Тогда
		
		НаложитьОграничениеНаГруппуФормы(Форма, "ГруппаСпецрежим", "ТолькоПросмотр");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(Форма) Экспорт
	
	Если НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		
		Элементы = Форма.Элементы;
		Фон = РазместитьГруппуОграничениеТарифа(Элементы);







		
		КоличествоПредметов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ОграничениеКоличестваОбъектов(),
			НСтр("ru = 'документа, документов, документов'"), Истина);
		ТекстПредупреждения = НСтр("ru='Можно ввести не больше %1 всех видов. На платном тарифе — сколько угодно.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, КоличествоПредметов);
		
		ВставитьДекорациюПредупреждения(Элементы, "ОграничениеТарифа", Фон, ТекстПредупреждения);
		
	ИначеЕсли РегламентированнаяОтчетностьБП.Используется1СОтчетность()
		И НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенЭлектронныйДокументообротСКонтролирующимиОрганами() Тогда
		
		Элементы = Форма.Элементы;
		Фон = РазместитьГруппуОграничениеТарифа(Элементы);



		




		ТекстПредупреждения = НСтр("ru='Отправляйте отчетность через Интернет! Эта возможность доступна только на платном тарифе.'");
		
		ВставитьДекорациюПредупреждения(Элементы, "ОграничениеТарифа", Фон, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПроверкаТарифныхОграниченийДокументов.
// Если тарифные ограничения нарушены, будет вызвано исключение.
//	
Процедура ПроверкаТарифныхОграниченийДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПроверитьОграничениеОбъекта(Источник, Отказ);
	
КонецПроцедуры

Функция УстановитьРазрешенУчетРегулярнойДеятельности(РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешенУчетРегулярнойДеятельности = ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности();
	
	МенеджерКонстанты = Константы.РазрешенУчетРегулярнойДеятельности.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Прочитать();
	
	Если МенеджерКонстанты.Значение = РазрешенУчетРегулярнойДеятельности Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МенеджерКонстанты.Значение = РазрешенУчетРегулярнойДеятельности;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты, РегистрироватьНаУзлахПлановОбмена);
	
	УстановитьЗависимыеКонстантыРазрешенУчетРегулярнойДеятельности(МенеджерКонстанты.Значение);
	
	Возврат Истина;
	
КонецФункции

// Устанавливает значения общих констант загрузке данных из сервиса
//
Процедура УстановитьЗначенияКонстантПоставкиПослеЗагрузкиДанных() Экспорт
	
	Если Не РаботаВМоделиСервиса.РазделениеВключено() Тогда
		// При переходе в локальную версию значение общей константы не наследуется:
		// локальная версия не может иметь тарифных ограничений
		Константы.УчетРегулярнойДеятельностиОпределяетсяТарифом.Установить(Ложь);
		ОбновитьПовторноИспользуемыеЗначения();
		УстановитьРазрешенУчетРегулярнойДеятельности(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОбновленииДоступныхЛицензий(ИдентификаторУслуги) Экспорт
	
	// Непосредственно после загрузки данных в сервис информация о тарифах и лицензиях может отсутствовать
	// в области. Она будет будут загружена позже.
	// По мере загрузки следует обновить значения констант, которые могут зависеть от тарифов.
	
	Если ИдентификаторУслуги = ТарификацияБП.ИдентификаторУслугиРегулярнаяДеятельность() Тогда
		ОбновитьПовторноИспользуемыеЗначения(); // Исключаем выбор значения из кеша
		УстановитьРазрешенУчетРегулярнойДеятельности(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Получает идентификатор актуального тарифа.
// В случае, если в текущем сеансе работы пользователь выбрал тариф,
// актуальным считается выбранный тариф.
// В противном случае актуальным считается тариф первой найденной платной подписки.
// При отсутствии платных подписок возвращается пустая строка.
//
// Возвращаемое значение:
//  Строка - идентификатор актуального тарифа, или пустая строка, если тариф тестовый.


//
Функция ИдентификаторАктуальногоТарифа() Экспорт
	
	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		// В сервисе ЭТК счета не выставляются
		Возврат "СервисЭлектронныхТрудовыхКнижек";
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСеанса.ВыбранныйТариф) Тогда
		ОписаниеТарифа = ПрограммныйИнтерфейсСервиса.ТарифСервиса(ПараметрыСеанса.ВыбранныйТариф);
		Возврат ОписаниеТарифа.Наименование;
	Иначе
		ПодпискиАбонента = ПрограммныйИнтерфейсСервиса.ПодпискиАбонента();
		Для каждого Подписка Из ПодпискиАбонента Цикл
			Если Подписка.ДатаПодключения > ТекущаяДатаСеанса()
				ИЛИ Подписка.ДатаОтключения < ТекущаяДатаСеанса() Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеТарифа = ПрограммныйИнтерфейсСервиса.ТарифСервиса(Подписка.КодТарифа);
			Если ОписаниеТарифа.Платный Тогда
				Возврат ОписаниеТарифа.Наименование;
			КонецЕсли;
		КонецЦикла;
		
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает Истина, если в текущем сеансе работы пользователь выбрал тариф.
//
// Возвращаемое значение:
//  Булево - признак наличия выбранного тарифа
//
Функция ЕстьВыставленныйСчетНаОплатуСервиса() Экспорт
	
	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		// В сервисе ЭТК счета не выставляются
		Возврат Истина;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(ПараметрыСеанса.ВыбранныйТариф);
	
КонецФункции

// Обработчик подписки на событие ПроверкаИспользованияФункциональностиБезТарифа.
// Если используется функциональность, не входящая в тариф, будет вызвано исключение.
//
Процедура ПроверкаИспользованияФункциональностиБезТарифаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;


	КонецЕсли;
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНедоступнаяФункциональность = ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступнаяФункциональность();
	//ЕстьНедоступнаяСистемаНалогообложения =
	//	ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступнаяСистемаНалогообложения() И Источник.ЭтоНовый();
	ЕстьНедоступнаяСистемаНалогообложения = Ложь;
	
	Если ЕстьНедоступнаяФункциональность И ЕстьНедоступнаяСистемаНалогообложения Тогда
		Отказ = Истина;
		ТекстИсключения = НСтр("ru='В программе используется функциональность и система налогообложения, не входящие в используемый тариф.
			|Проведение документов заблокировано.
			|
			|Восстановить возможность проведения документов можно, изменив систему налогообложения в ""Настройках налогов и отчетов"", и отказавшись от недоступной функциональности в настройках ""Функциональности"".'");
	ИначеЕсли ЕстьНедоступнаяФункциональность Тогда
		Отказ = Истина;
		ТекстИсключения = НСтр("ru='В программе используется функциональность, не входящая в используемый тариф.
			|Проведение документов заблокировано.
			|
			|Восстановить возможность проведения документов можно отказавшись от недоступной функциональности в настройках ""Функциональности"".'");
	ИначеЕсли ЕстьНедоступнаяСистемаНалогообложения Тогда
		
		Отказ = Истина;


		
		СистемыНалогообложения = 
			РегистрыСведений.НастройкиСистемыНалогообложения.ПредставлениеИспользуемыхСистемНалогообложения(ТекущаяДатаСеанса());
		
		Если СистемыНалогообложения.Количество() > 1 Тогда
			ТекстИсключения = СтрШаблон(НСтр("ru='Системы налогообложения %1 не входят в используемый тариф.
				|Проведение документов заблокировано.
				|
				|Изменить систему налогообложения и восстановить возможность проведения документов можно в ""Настройках налогов и отчетов"".'"),
				СтрСоединить(СистемыНалогообложения, ", "));


		Иначе
			ТекстИсключения = СтрШаблон(НСтр("ru='Система налогообложения %1 не входит в используемый тариф.
				|Проведение документов заблокировано.
				|
				|Изменить систему налогообложения и восстановить возможность проведения документов можно в ""Настройках налогов и отчетов"".'"),
				СтрСоединить(СистемыНалогообложения, ", "));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ И ТекстИсключения <> Неопределено  Тогда
		ВызватьИсключение ТекстИсключения;






	КонецЕсли;
	
КонецПроцедуры

Процедура КонстантаФункциональностиПередЗаписью(Имя, Значение, Отказ) Экспорт
	
	//// Если новое значение константы не отличается от старого значения, то проверка на соответствие
	//// условиям тарифа выполняться не будет. Иногда функциональность устанавливается в значение Истина,
	//// потому что она была включена ранее и отключение ее невозможно - в этом случае повторная запись со значением Истина
	//// не должна приводить к ошибке при записи
	//Если Константы[Имя].Получить() = Значение Тогда
	//	Возврат;
	//КонецЕсли;

	//Если Значение И Не Обработки.ФункциональностьПрограммы.РазрешеноИспользоватьФункциональностьВДоступномИнтерфейсе(Имя) 
	//	И ФункциональностьДоступнаяСНО().Найти(Имя) = Неопределено Тогда
	//	Отказ = Истина;
	//	ВызватьИсключение СтрШаблон(НСтр(
	//		"ru = 'Использование функции ""%1"" запрещено условиями текущего тарифа'"),
	//		Метаданные.Константы[Имя].Синоним);
	//КонецЕсли;	
	
КонецПроцедуры




Процедура КонстантаИспользуемойСистемыНалогообложенияПриЗаписи(Имя, Значение, Отказ) Экспорт
	
	Если Значение Тогда
		ОпцияДоступна = Неопределено;
		Если ДоступностьИспользуемыхСистемНалогообложения().Свойство(Имя, ОпцияДоступна) И Не ОпцияДоступна Тогда
			Отказ = Истина;
			ВызватьИсключение СтрШаблон(
				"ru = 'Использование выбранной системы налогообложения запрещено условиями текущего тарифа'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сравнивает сохраненные значения тарифицируемых опций с текущими значениями
// 
// Параметры:
//  АдресЗначенийТарифицируемыхОпций - Строка - Адрес значений во временном хранилище




//
// Возвращаемое значение:
//  Булево - Истина, если было изменено значение хотя бы одной опции
//
Функция ТарифицируемыеОпцииИзменены(АдресЗначенийТарифицируемыхОпций) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(АдресЗначенийТарифицируемыхОпций) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗначенияТарифицируемыхОпцийДоОплаты = ПолучитьИзВременногоХранилища(АдресЗначенийТарифицируемыхОпций);
	Если ТипЗнч(ЗначенияТарифицируемыхОпцийДоОплаты) <> Тип("Структура") Тогда
		УдалитьИзВременногоХранилища(ЗначенияТарифицируемыхОпцийДоОплаты);
		Возврат Истина;
	КонецЕсли;
	
	ДействующиеЗначенияТарифицируемыхОпций = ЗначенияТарифицируемыхОпций();
	Если ОбщегоНазначения.КоллекцииИдентичны(ЗначенияТарифицируемыхОпцийДоОплаты, ДействующиеЗначенияТарифицируемыхОпций) Тогда
		Возврат Ложь;





	Иначе
		УдалитьИзВременногоХранилища(АдресЗначенийТарифицируемыхОпций);
		Возврат Истина;


	КонецЕсли;
	


КонецФункции

// Возвращает текущие значения тарифицируемых опций

// 
// Возвращаемое значение:
//  Структура
//
Функция ЗначенияТарифицируемыхОпций() Экспорт
	
	ЗначенияОпций = Новый Структура;
	
	ЗначенияОпций.Вставить(
		"РазрешенаОбщаяСистемаНалогообложения",
		РазрешенаОбщаяСистемаНалогообложения());
	
	ЗначенияОпций.Вставить(
		"РазрешенНДФЛИП",
		РазрешенНДФЛИП());
		
	ЗначенияОпций.Вставить(
		"РазрешенаУСН",
		РазрешенаУСН());
	
	ЗначенияОпций.Вставить(
		"РазрешенаПатентнаяСистемаНалогообложения",
		РазрешенаПатентнаяСистемаНалогообложения());
	
	ЗначенияОпций.Вставить(
		"РазрешенНалогНаПрофессиональныйДоход",
		РазрешенНалогНаПрофессиональныйДоход());
	
	ЗначенияОпций.Вставить(
		"РазрешенноеКоличествоСотрудников",
		РазрешенноеКоличествоСотрудников());
	
	ЗначенияОпций.Вставить(
		"РазрешенДополнительныйФункционал",
		РазрешенДополнительныйФункционал());
	
	ЗначенияОпций.Вставить(
		"РазрешенПолныйИнтерфейс",
		РазрешенПолныйИнтерфейс());



	
	Возврат ЗначенияОпций;
	
КонецФункции

// Возвращает результат проверки условия тарифного ограничения на число сотрудников
//
// Параметры:
//  КоличествоСотрудников - Число - текущее количество сотрудников организации
//
// Возвращаемое значение:
//  Структура - см. НовыйРезультатПроверкиУсловийТарификацииПоСотрудникам
//
Функция РезультатПроверкиУсловийТарификацииПоСотрудникам(КоличествоСотрудников) Экспорт
	
	РезультатПроверки = НовыйРезультатПроверкиУсловийТарификацииПоСотрудникам();
	
	РезультатПроверки.ТекущееКоличествоСотрудников = КоличествоСотрудников;
	
	Если Не ТарифицируетсяЧислоСотрудников() Тогда
		Возврат РезультатПроверки;





	КонецЕсли;
	
	РазрешенноеКоличествоСотрудников = РазрешенноеКоличествоСотрудников();
	Если РазрешенноеКоличествоСотрудников >= 0 Тогда
		РезультатПроверки.КоличествоСотрудниковПоТарифу = РазрешенноеКоличествоСотрудников;
		РезультатПроверки.УсловияВыполнены = КоличествоСотрудников <= РазрешенноеКоличествоСотрудников;  
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции



















#КонецОбласти

#Область ИдентификаторыТарифныхОпций

Функция ИдентификаторУслугиРегулярнаяДеятельность() Экспорт
	Возврат "РегулярнаяДеятельность";
КонецФункции

Функция ИдентификаторУслуги1СОтчетность() Экспорт
	Возврат "1C-reporting-1";
КонецФункции

Функция ИдентификаторУслугиТолькоИнтерфейсИнтеграцииСБанком() Экспорт
	
	Возврат "ТолькоИнтерфейсИнтеграцииСБанком";
	
КонецФункции

Функция ИдентификаторУслугиОбособленныеПодразделения() Экспорт
	Возврат "ОбособленныеПодразделения";
КонецФункции

Функция ИдентификаторУслугиОбратноеНачислениеНДС() Экспорт
	Возврат "ОбратноеНачислениеНДС";
КонецФункции

Функция ИдентификаторУслугиРасширенныйФункционал() Экспорт
	Возврат "РасширенныйФункционал";
КонецФункции

Функция ИдентификаторУслугиДополнительныйФункционал() Экспорт
	Возврат "ДополнительныйФункционал";
КонецФункции

Функция ИдентификаторУслугиВестиУчетПоОрганизациям() Экспорт
	Возврат "ВестиУчетПоОрганизациям";
КонецФункции

Функция ИдентификаторУслугиГособоронзаказ() Экспорт
	Возврат "Гособоронзаказ";
КонецФункции

Функция ИдентификаторУслугиУведомленияОКонтролируемыхСделках() Экспорт
	Возврат "УведомленияОКонтролируемыхСделках";
КонецФункции

Функция ИдентификаторУслугиУчетЗарплатыИКадровВоВнешнейПрограмме() Экспорт
	Возврат "УчетЗарплатыИКадровВоВнешнейПрограмме";
КонецФункции

Функция ИдентификаторУслугиБухгалтерскийУчет() Экспорт
	
	Возврат "БухгалтерскийУчет";
	
КонецФункции

Функция ИдентификаторУслугиКадровыйУчет() Экспорт
	
	Возврат "КадровыйУчет";
	
КонецФункции

Функция ИдентификаторУслугиНачинатьРаботуСоСравненияРежимовНалогообложения() Экспорт
	
	Возврат "НачинатьРаботуСоСравненияРежимовНалогообложения";
	
КонецФункции

Функция ИдентификаторУслугиСервисРегистрации() Экспорт
	
	Возврат "СервисРегистрации";
	
КонецФункции

Функция ИдентификаторУслугиКонсультацииБухОбслуживание() Экспорт
	
	Возврат "КонсультацииБухОбслуживание";
	
КонецФункции

Функция ИдентификаторУслугиОбщаяСистемаНалогообложения()
	
	Возврат "ОбщаяСистемаНалогообложения";
	
КонецФункции

Функция ИдентификаторУслугиНДФЛИП()
	
	Возврат "НДФЛИП";
	
КонецФункции

Функция ИдентификаторУслугиУСН()
	
	Возврат "УСН";
	
КонецФункции

Функция ИдентификаторУслугиПатентнаяСистемаНалогообложения()
	
	Возврат "ПатентнаяСистемаНалогообложения";
	
КонецФункции

Функция ИдентификаторУслугиНалогНаПрофессиональныйДоход()
	
	Возврат "НалогНаПрофессиональныйДоход";
	
КонецФункции

Функция ИдентификаторУслугиПолныйИнтерфейс()
	
	Возврат "ПолныйИнтерфейс";
	
КонецФункции

Функция ИдентификаторУслугиДоступноеКоличествоСотрудников()
	
	Возврат "КоличествоСотрудников";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТарифицируютсяСистемыНалогообложения()
	
	Возврат ЭтоБизнесСтартВРазделенномРежиме() Или РежимОтладки();
	
КонецФункции

Функция ТарифицируетсяЧислоСотрудников()
	
	Возврат ЭтоБизнесСтартВРазделенномРежиме() Или РежимОтладки();
	
КонецФункции

Функция ТарифицируетсяФункциональность()
	
	Возврат ЭтоБизнесСтартВРазделенномРежиме() Или РежимОтладки();
	
КонецФункции

Функция ЭтоБизнесСтартВРазделенномРежиме()
	
	Возврат ОбщегоНазначенияБП.ЭтоБизнесСтарт() // Это 1С:БизнесСтарт в сервисе
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() // Выполнен вход в область
		И Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь); // Не администратор системы
	
КонецФункции

Процедура УстановитьЗависимыеКонстантыРазрешенУчетРегулярнойДеятельности(Разрешен)
	//УчетКассовыхЧековПодотчетныхЛиц.УстановитьЗависимыеКонстантыРазрешенУчетРегулярнойДеятельности(Разрешен);
КонецПроцедуры

Функция ОграничениеКоличестваОбъектов()
	
	Если РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек() Тогда
		Возврат 0;
	Иначе
		Возврат 50;
	КонецЕсли;
	
КонецФункции

Функция ЦветФонаОграниченнойФункциональности()
	
	Возврат Новый Цвет(240, 240, 240);
	
КонецФункции

Процедура ПроверитьОграничениеОбъекта(Объект, Отказ)
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("НеПроверятьОграничения") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЖурналОпераций.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
	|ГДЕ
	|	НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.РегламентнаяОперация";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СлагаемоеНовогоОбъекта = ?(ЗначениеЗаполнено(Объект.Ссылка), 0, 1);
	
	Если Выборка.Следующий()
		И Выборка.КоличествоОбъектов + СлагаемоеНовогоОбъекта > ОграничениеКоличестваОбъектов() Тогда
		
		СообщениеДляЖурналаРегистрации = Новый Структура;
		СообщениеДляЖурналаРегистрации.Вставить("ИмяСобытия",          СобытиеЖурналаРегистрацииСообщение());
		СообщениеДляЖурналаРегистрации.Вставить("Комментарий",         Строка(Объект));
		СообщениеДляЖурналаРегистрации.Вставить("ПредставлениеУровня", "Информация");
		СообщенияДляЖурналаРегистрации = Новый СписокЗначений;
		СообщенияДляЖурналаРегистрации.Добавить(СообщениеДляЖурналаРегистрации);
		ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
		
		Отказ = Истина;
		ВызватьИсключение ТарификацияБПКлиентСервер.ПолучитьТекстПредупреждения(
			НСтр("ru='Достигнуто ограничение бесплатного тарифа.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НаложитьОграничениеНаГруппуФормы(Форма, ИмяГруппы, СпособОграничения)
	
	Элементы = Форма.Элементы;
	
	Элемент = Элементы[ИмяГруппы];
	
	Для каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			ПодчиненныйЭлемент[СпособОграничения] = ?(СпособОграничения = "ТолькоПросмотр", Истина, Ложь);
		КонецЕсли;
	КонецЦикла;
	Элемент.ЦветФона = ЦветФонаОграниченнойФункциональности();
	
	ТекстПредупреждения = НСтр("ru='Эти возможности доступны на платном тарифе.'");
	ВставитьДекорациюПредупреждения(Элементы, "ОграничениеТарифа", Элемент, ТекстПредупреждения);
	
КонецПроцедуры

Процедура ВставитьДекорациюПредупреждения(Элементы, ИмяЭлемента, Родитель, ТекстПредупреждения)
	
	Декорация =  Элементы.Найти(ИмяЭлемента);
	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		
		// Декорация вставляется всегда перед первым элементом.
		Если Родитель.ПодчиненныеЭлементы.Количество() > 0 Тогда
			ПервыйЭлементРодителя = Родитель.ПодчиненныеЭлементы[0];
		Иначе
			ПервыйЭлементРодителя = Неопределено;
		КонецЕсли;
		
		Декорация = Элементы.Вставить(
			ИмяЭлемента,
			Тип("ДекорацияФормы"),
			Родитель,
			ПервыйЭлементРодителя);
			
	КонецЕсли;
	
	Декорация.Заголовок = ТарификацияБПКлиентСервер.ПолучитьТекстПредупреждения(ТекстПредупреждения);
	Декорация.АвтоМаксимальнаяШирина = Ложь;
	Декорация.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрацииСообщение()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ШаблонТекста = НСтр("ru='%1.Достигнуто ограничение по количеству объектов'", КодЯзыка);
	Возврат СтрШаблон(ШаблонТекста, ТарификацияБПКлиентСервер.ГруппаСобытийЖурналаРегистрации());
	
КонецФункции

Функция НовыйРезультатПроверкиУсловийТарификацииПоСотрудникам()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("УсловияВыполнены", Истина);
	РезультатПроверки.Вставить("КоличествоСотрудниковПоТарифу", 0);
	РезультатПроверки.Вставить("ТекущееКоличествоСотрудников", 0);
	
	Возврат РезультатПроверки;
	
КонецФункции 

Функция РазрешенноеКоличествоСотрудников()
	
	ИдентификаторУслуги = ИдентификаторУслугиДоступноеКоличествоСотрудников();
	
	ОписаниеЛицензий = КоличествоЛицензийЛимитированнойУслуги(ИдентификаторУслуги);
		
	Возврат ОписаниеЛицензий.ДоступноЛицензий;
	
КонецФункции

Функция РазместитьГруппуОграничениеТарифа(Элементы)
	
	Если Элементы.Найти("ГруппаБыстрыеОтборы") <> Неопределено Тогда
		Фон = Элементы.Вставить(
			"ГруппаОграничениеТарифа",
			Тип("ГруппаФормы"), ,
			ВерхнийРодительЭлементаФормы(Элементы.ГруппаБыстрыеОтборы));
	Иначе
		Фон = Элементы.Вставить(
			"ГруппаОграничениеТарифа",
			Тип("ГруппаФормы"), ,
			Элементы.Список);
	КонецЕсли;
	
	Фон.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	Фон.ЦветФона            = ЦветаСтиля.ЦветФонаНедоступногоСервиса;
	Фон.ОтображатьЗаголовок = Ложь;
	
	Возврат Фон;
	
КонецФункции

Функция ВерхнийРодительЭлементаФормы(ЭлементФормы)
	
	Если Тип(ЭлементФормы.Родитель) = Тип("ГруппаФормы") Тогда
		Возврат ВерхнийРодительЭлементаФормы(ЭлементФормы.Родитель);
	КонецЕсли;
	
	Возврат ЭлементФормы;


	
КонецФункции

#КонецОбласти

#Область ПереходНаПлатныйТариф

Процедура ПолучитьКонтактныйТелефонВФоне(СтруктураПараметров, АдресРезультата = Неопределено) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат");
	СтруктураРезультата.Вставить("Телефон", "");
	
	Прокси = ПроксиВебСервиса();
	
	КлючОбласти = Константы.КлючОбластиДанных.Получить();
	РазделительСеанса = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	Телефон = "";
	Результат = Неопределено;
	
	Попытка
		Результат = Прокси.GetContactPhone(РазделительСеанса, КлючОбласти, Телефон);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	СтруктураРезультата.Телефон   = Телефон;
	СтруктураРезультата.Результат = Результат;
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресРезультата);
	
КонецПроцедуры

Процедура ЗапросНаСменуТарифа(ПараметрыЗапроса, АдресРезультата = Неопределено) Экспорт
	
	Прокси = ПроксиВебСервиса();
	
	РазделительСеанса = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КлючОбласти = Константы.КлючОбластиДанных.Получить();
	
	Попытка
		
		Результат = Прокси.SwitchTariffReq(
			РазделительСеанса,
			КлючОбласти,
			ПараметрыЗапроса.Телефон,
			ПараметрыЗапроса.ИНН
			);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'ТарификацияБП'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ПроксиВебСервиса()
	
	Адрес        = РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса() + "/ws/PrivateAPI?wsdl";
	Пользователь = РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса();
	Пароль       = РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса();
	
	Определения             = Новый WSОпределения(Адрес, Пользователь, Пароль);
	ПространствоИменСервиса = "http://www.1c.ru/1cFresh/PrivateAPI/1.0";
	Прокси                  = Новый WSПрокси(Определения, ПространствоИменСервиса, "PrivateAPI", "PrivateAPISoap");
	Прокси.Пользователь     = Пользователь;
	Прокси.Пароль           = Пароль;
	Возврат Прокси;
	
КонецФункции

#КонецОбласти



































































































#Область Тарификация

Функция ЗарегистрированаЛицензияБезлимитнойУслуги(ИдентификаторУслуги) Экспорт
	
	ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Возврат Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(ПоставщикУслуг, ИдентификаторУслуги);
	
КонецФункции

Функция ЗарегистрированаЛицензияБезлимитнойНегативнойУслуги(ИдентификаторУслуги) Экспорт
	
	// Для "позитивной" услуги (т.е. услуга, которая разрешает что-то, если она доступна у пользователя),
	// если она не тарифицируется в менедежере сервиса, то считается, что услуга доступна.
	// См.Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги.
	// Т.е. если "позитивная" услуга не тарифицируется, то считается, что она есть у всех пользователей.
	// Для "негативной" услуги (т.е. услуга, которая запрещает что-то, если она доступна у пользователя)
	// если она не тарифицируется, то нужно считать, что услуги нет и ничего не запрещать.
	// Т.к. БТС такое поведение не поддерживает, то нужно проверить тарифицируемость услуги самостоятельно,
	// и вернуть Ложь, если услуга не тарифицируется.
	
	ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Услуга = Тарификация.УслугаПоИдентификаторуИИдентификаторуПоставщика(ИдентификаторУслуги, ПоставщикУслуг, Ложь);
	Если Услуга = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УслугаТарифицируется = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Услуга, "Тарифицируется");
	Если Не УслугаТарифицируется Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(ПоставщикУслуг, ИдентификаторУслуги);
	
КонецФункции

Функция ИдентификаторПоставщикаУслугБухгалтерияПредприятия()
	
	Возврат "БухгалтерияПредприятия";
	
КонецФункции

Функция КоличествоЛицензийУслугиФункциональности(ИдентификаторУслуги) Экспорт
	
	Попытка
		ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
		Возврат Тарификация.КоличествоЛицензийУникальнойУслуги(ПоставщикУслуг, ИдентификаторУслуги);
	Исключение
		// Записывать ошибку в журнал не требуется, она и так записывается в Тарификация.КоличествоЛицензийУникальнойУслуги.
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция КоличествоЛицензийЛимитированнойУслуги(ИдентификаторУслуги) Экспорт
	
	ИдентификаторПоставщика = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Возврат Тарификация.КоличествоЛицензийЛимитированнойУслуги(ИдентификаторПоставщика, ИдентификаторУслуги);
	
КонецФункции

Функция ЗарегистрированаЛицензияУслугиФункциональности(ИдентификаторУслуги) Экспорт
	
	ИмяЛицензии = Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0");
	ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Возврат Тарификация.ЗарегистрированаЛицензияУникальнойУслуги(ПоставщикУслуг, ИдентификаторУслуги, ИмяЛицензии);
	
КонецФункции

Функция ЗанятьЛицензиюУслугиФункциональности(ИдентификаторУслуги, УникальныйИдентификаторОперации) Экспорт
	
	ИмяЛицензии = Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0");
	ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Возврат Тарификация.ЗанятьЛицензиюУникальнойУслуги(ПоставщикУслуг, ИдентификаторУслуги, ИмяЛицензии, УникальныйИдентификаторОперации);
	
КонецФункции

Функция ОсвободитьЛицензиюУслугиФункциональности(ИдентификаторУслуги, УникальныйИдентификаторОперации) Экспорт
	
	ИмяЛицензии = Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0");
	ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Возврат Тарификация.ОсвободитьЛицензиюУникальнойУслуги(ПоставщикУслуг, ИдентификаторУслуги, ИмяЛицензии, УникальныйИдентификаторОперации);
	
КонецФункции

Функция УслугаСервисаДоступна(ИдентификаторУслуги)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат ЗарегистрированаЛицензияБезлимитнойУслуги(ИдентификаторУслуги);
	Иначе
		Возврат Не РежимОтладки() Или РежимОтладки_УслугаДоступна(ИдентификаторУслуги);
	КонецЕсли;
	
КонецФункции

Функция РежимОтладки_УслугаДоступна(ИмяУслуги)
	
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	МассивПараметров = СтрРазделить(ПараметрЗапускаПриложения, " ");
	
	Для Каждого ОписаниеТарифа Из РежимОтладки_ОписаниеТарифов() Цикл
		ИмяПараметра = ПрефиксПараметраОтладки() + ОписаниеТарифа.Ключ;
		Если МассивПараметров.Найти(ИмяПараметра) <> Неопределено 
			И ОписаниеТарифа.Значение.Найти(ИмяУслуги) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция РежимОтладки_ОписаниеТарифов()
	
	ТарифСамозанятые = СтрРазделить("ПатентнаяСистемаНалогообложения,НалогНаПрофессиональныйДоход", ",");
	ТарифОптимальный = ОбщегоНазначения.СкопироватьРекурсивно(ТарифСамозанятые);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТарифОптимальный,
		СтрРазделить("УСН,УчетЗарплаты,ДополнительныйФункционал", ","));
	
	ТарифПлюс = ОбщегоНазначения.СкопироватьРекурсивно(ТарифОптимальный);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТарифПлюс,
		СтрРазделить("ОбщаяСистемаНалогообложения,НДФЛИП,КадровыйУчетБезОграничения", ","));
	
	ТарифПлюсПолныйИнтерфейс = ОбщегоНазначения.СкопироватьРекурсивно(ТарифПлюс);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТарифПлюсПолныйИнтерфейс,
		СтрРазделить("ПолныйИнтерфейс", ","));
	
	СоставТарифов = Новый Структура;
	СоставТарифов.Вставить("Самозанятые", ТарифСамозанятые);
	СоставТарифов.Вставить("Оптимальный", ТарифОптимальный);
	СоставТарифов.Вставить("Плюс", ТарифПлюс);
	СоставТарифов.Вставить("ПлюсПолныйИнтерфейс", ТарифПлюсПолныйИнтерфейс);
	
	Возврат СоставТарифов;
	
КонецФункции

Функция ПрефиксПараметраОтладки()
	
	Возврат "ОтладкаТарифа";
	
КонецФункции

#КонецОбласти

#Область ТарификацияФункциональности

Функция УстановитьРазрешенныйРежимКомандногоИнтерфейса() Экспорт
	
	Если ОбщегоНазначенияБП.ЭтоПолныйИнтерфейс() И Не РазрешенПолныйИнтерфейс() Тогда
		
		Если ТарификацияБПВызовСервераПовтИсп.РазрешенТолькоИнтерфейсИнтеграцииСБанком() Тогда
			ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса("ИнтерфейсИнтеграцииСБанком");
		ИначеЕсли РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек() Тогда
			ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса("ИнтерфейсЭлектронныхТрудовыхКнижек");
		Иначе
			ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса("ИнтерфейсТаксиПростой");
		КонецЕсли;
		
		Обработки.ФункциональностьПрограммы.УстановитьФункциональностьПоОпцииРазрешенПолныйИнтерфейс();
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ФункциональностьОграничиваетсяТарифом() Экспорт
	
	Если РаботаВМоделиСервиса.РазделениеВключено()
		Или ОбщегоНазначения.РежимОтладки() Тогда
		
		Возврат Константы.ФункциональностьОграничиваетсяТарифом.Получить();
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДоступностьИспользуемыхСистемНалогообложения()
	
	ЗначенияОпций = Новый Структура;
	ЗначенияОпций.Вставить("ИспользуетсяЕНВД", РазрешенЕНВД());
	ЗначенияОпций.Вставить("ИспользуетсяНалогНаПрофессиональныйДоход", РазрешенНалогНаПрофессиональныйДоход());
	ЗначенияОпций.Вставить("ИспользуетсяНДФЛИП", РазрешенНДФЛИП());
	ЗначенияОпций.Вставить("ИспользуетсяОСНО", РазрешенаОбщаяСистемаНалогообложения());
	ЗначенияОпций.Вставить("ИспользуетсяУСН", РазрешенаУСН());
	ЗначенияОпций.Вставить("ИспользуетсяУСНПатент", РазрешенаПатентнаяСистемаНалогообложения());
	
	Возврат ЗначенияОпций;
	
КонецФункции

#КонецОбласти