#Область ПрограммныйИнтерфейс

#Область ДлительныеОперации

// Подготавливает сообщения к передаче в сервис ИСМП.
//
// Параметры:
//  ВходящиеДанные - Массив Из (См. ИнтерфейсИСМПКлиентСервер.ПараметрыОбработкиДокументов)
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - см. функцию ПодготовитьСообщенияКПередаче().
//
Функция ПодготовитьКПередаче(ВходящиеДанные, УникальныйИдентификатор = Неопределено) Экспорт
	
	Организации = Неопределено;
	
	ПараметрыОбмена = ИнтеграцияИСМП.ПараметрыОбмена(Организации, УникальныйИдентификатор);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ВходящиеДанные",    ВходящиеДанные);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ПодготовитьКПередачеДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьОбмен(Организации = Неопределено, УникальныйИдентификатор = Неопределено, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ПараметрыОбмена = ИнтеграцияИСМП.ПараметрыОбмена(Организации, УникальныйИдентификатор);
	
	ИнтеграцияИСМПСлужебный.ПостроитьОчередьСообщений(ПараметрыОбмена, СообщениеИлиДокумент);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ВыполнитьОбменДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ВыполнитьОбменУниверсально(ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбмена(ПодписанныеДанныеПоОрганизациям, АдресВоВременномХранилище) Экспорт
	
	ПараметрыОбмена = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	// Установка параметров сеанса выполняется НЕ в фоновом задании.
	ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено;
	ПодписанныеСообщенияПоОрганизациям     = Неопределено;
	Если ПодписанныеДанныеПоОрганизациям <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПодписанныеДанныеПоОрганизациям Цикл
			
			Организация = КлючИЗначение.Ключ;
			Сообщения   = КлючИЗначение.Значение;
			
			ЗапроситьУстановитьКлючСессии = Новый Массив;
			ПодписанныеСообщения          = Новый Массив;
			
			Для Каждого Сообщение Из Сообщения Цикл
				Если Сообщение.Свойство("ПараметрыАвторизации") Тогда
					ЗапроситьУстановитьКлючСессии.Добавить(Сообщение);
				Иначе
					ПодписанныеСообщения.Добавить(Сообщение);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗапроситьУстановитьКлючСессии.Количество() > 0 Тогда
				Если ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено Тогда
					ТребуетсяЗапроситьУстановитьКлючСессии = Новый Соответствие;
				КонецЕсли;
				ТребуетсяЗапроситьУстановитьКлючСессии.Вставить(Организация, ЗапроситьУстановитьКлючСессии);
			КонецЕсли;
			
			Если ПодписанныеСообщения.Количество() > 0 Тогда
				Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
					ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
				КонецЕсли;
				ПодписанныеСообщенияПоОрганизациям.Вставить(Организация, ПодписанныеСообщения);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ИнтеграцияИСМПСлужебный.ЗапроситьУстановитьКлючСессии(
		ТребуетсяЗапроситьУстановитьКлючСессии,
		ПодписанныеСообщенияПоОрганизациям);
	
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыОбмена.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПодписанныеСообщенияПоОрганизациям", ПодписанныеСообщенияПоОрганизациям);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",                    ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС",                  ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ПродолжитьВыполнениеОбменаДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ПродолжитьВыполнениеОбменаУниверсально(
			ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет на тестовый период текущую дату сеанса.
// 
// Возвращаемое значение:
//  Булево - Истина, если текущая дата сеанса находится в тестовом периоде.
Функция ЭтоТестовыйПериод() Экспорт
		
	Возврат ИнтеграцияИСМП.ЭтоТестовыйПериод();
	
КонецФункции

#КонецОбласти

// Удаляет неотправленную операцию из очереди передачи данных в ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ИнтеграцияИСМПСлужебный.СтруктураИзменения(), или Неопределено (если в очереди нет сообщений).
//
Функция ОтменитьПередачу(ДокументСсылка) Экспорт
	
	Изменения = Новый Массив;
	
	ДанныеПоследнегоСообщения = Справочники.ИСМППрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "ВОчереди");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		
		ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(ДанныеПоследнегоСообщения.Сообщение, Истина);
	
	ТекстОшибки = "";
	НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать();
		НовыйСтатус = ИнтеграцияИС.ОтменитьОперацию(ДокументСсылка, ДанныеПоследнегоСообщения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ИнтеграцияИСМПСлужебный.СтруктураИзменения();
	СтрокаРезультата.Организация       = ДанныеПоследнегоСообщения.Организация;
	СтрокаРезультата.Операция          = ДанныеПоследнегоСообщения.Операция;
	СтрокаРезультата.Объект            = ДокументСсылка;
	СтрокаРезультата.ДокументОснование = ДокументОснование;
	СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;
	
КонецФункции

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ИнтеграцияИСМПСлужебный.СтруктураИзменения().
//
Функция ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	Изменения = Новый Массив;
	
	ДанныеПоследнегоСообщения = Справочники.ИСМППрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "Передано");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	Попытка
		НовыйСтатус = ИнтеграцияИС.ОтменитьОперацию(ДокументСсылка, ДанныеПоследнегоСообщения);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ИнтеграцияИСМПСлужебный.СтруктураИзменения();
	СтрокаРезультата.Организация       = ДанныеПоследнегоСообщения.Организация;
	СтрокаРезультата.Операция          = ДанныеПоследнегоСообщения.Операция;
	СтрокаРезультата.Объект            = ДокументСсылка;
	СтрокаРезультата.ДокументОснование = ДокументОснование;
	СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// В озвращает виды продукции, по которым доступно заполнение документа ИСМП
//
// Параметры:
//   ПолноеИмяДокумента - Строка - создаваемый вводом на основании документ
//   Ссылка - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документ по которому происходит обработка заполнения
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИС - различные виды продукции в документе ИСМП, заполненном 
//     по основанию без фильтра по виду продукции.
Функция ВидыПродукцииДанныхЗаполнения(ПолноеИмяДокумента, Ссылка) Экспорт
	
	ДоступныеВидыПродукции = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП") Тогда
		ДоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетОбувнойПродукцииИСМП") Тогда
		ДоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Обувная);
	КонецЕсли;
	Если ДоступныеВидыПродукции.Количество() < 2 Тогда
		Возврат ДоступныеВидыПродукции;
	КонецЕсли;
	
	ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
	Предзаполнение = Документы[ИмяДокумента].СоздатьДокумент();
	Предзаполнение.Заполнить(Ссылка);
	Запрос = Новый Запрос;
	Товары = Предзаполнение.Товары.Выгрузить(, "Номенклатура");
	Товары.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	Запрос.УстановитьПараметр("Товары", Предзаполнение.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Возврат ИнтеграцияИСМП.ВидыПродукцииПоТаблицеНоменклатуры(Товары);
	
КонецФункции

// 
// Параметры:
// 	Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
// Возвращаемое значение:
// 	СправочникСсылка.ВидыАлкогольнойПродукции
//
Функция ВидПродукцииПоНоменклатуре(Номенклатура) Экспорт
	Возврат ИнтеграцияИСМП.ВидПродукцииПоНоменклатуре(Номенклатура);
КонецФункции

// Возвращает признак необходимости контроля статусов кодов маркировок ИС МП.
//
// Параметры:
// Возвращаемое значение:
//  Произвольный - Истина, в случае необходимости контроля статусов.
Функция КонтролироватьСтатусыКодовМаркировки() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("КонтролироватьСтатусыКодовМаркировкиИСМП");
	
КонецФункции

// Возвращает признак необходимости контроля статусов кодов маркировок при розничной торговле.
//
// Параметры:
// Возвращаемое значение:
//  Булево - Истина, в случае необходимости контроля статусов.
Функция КонтролироватьСтатусыКодовМаркировкиВРознице() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП");
	
КонецФункции

// Возвращает признак наличия типа метаданных конфигурации в типе реквизита "ДокументОснование"
// Наличие типа означает то, что документ может иметь документ-основание
// 
// Параметры:
// Возвращаемое значение:
// 	Булево - Истина, в случае необходимости контроля статусов.
//
Функция ДокументМожетИметьДокументОснование(ПолноеИмяМетаданных) Экспорт
	
	ЭлементМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	
	Если ЭлементМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизит = ЭлементМетаданных.Реквизиты.Найти("ДокументОснование");
	
	Если Реквизит = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТип Из Реквизит.Тип.Типы() Цикл
		Если Метаданные.НайтиПоТипу(СтрокаТип) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Восстанавливает статус документа по данным протокола обмена.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется восстановить статус.
//
Процедура ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка) Экспорт
	
	ИнтеграцияИСМП.РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
	
КонецПроцедуры

// Функция - Документы ИСМП по документу основанию
//
// Параметры:
//  ДокументОснование - ДокументСсылка - основание по которому надо получить документы ИСМП
// 
// Возвращаемое значение:
//  Структура - (см. ИнтеграцияИС.ДокументыИСПоДокументуОснованию)
//
Функция ДокументыИСМППоДокументуОснованию(ДокументОснование) Экспорт
	
	ДокументыИСМП = ИнтеграцияИС.ДокументыИСПоДокументуОснованию(
		ДокументОснование,
		Метаданные.РегистрыСведений.СтатусыДокументовИСМП);
	
	Возврат ДокументыИСМП;
	
КонецФункции

// Возвращает имена документов ИСМП, основанием для которых может являться указанный документ.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документ-основание для документа ИСМП
//
// Возвращаемое значение:
//   Массив из Строка - имена документов ИСМП
//
Функция ИменаДокументовДляДокументаОснования(ДокументОснование) Экспорт
	
	ИменаДокументов = Новый Массив;
	
	Для Каждого ТипДокумента Из Метаданные.ОпределяемыеТипы.ДокументыИСМППоддерживающиеСтатусыОформления.Тип.Типы() Цикл
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
		ТипыОснования       = ИнтеграцияИСМП.ДокументыОснованияПоМетаданным(МетаданныеДокумента);
		
		Если ТипыОснования.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			ИменаДокументов.Добавить(МетаданныеДокумента.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИменаДокументов;
	
КонецФункции

Функция АрхивироватьДокументы(ДокументыКАрхивированию) Экспорт
	
	Возврат РегистрыСведений.СтатусыДокументовИСМП.Архивировать(ДокументыКАрхивированию);
	
КонецФункции

// Архивирует (убирает из интерфейса к обработке) записи из регистра по переданным документам.
//
// Параметры:
//   Основания - Массив Из ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - массив распоряжений
//   Документ  - ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления - документ, данные по которому
//      необходимо архивировать
//
Функция АрхивироватьРаспоряженияКОформлению(Основания, Документ) Экспорт
	
	Возврат РегистрыСведений.СтатусыОформленияДокументовИСМП.АрхивироватьРаспоряженияКОформлению(Основания, Документ);
	
КонецФункции

Функция ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Знач ДокументОснование) Экспорт
	
	ТекстНадписи = "";
	
	// Получим структуру вида ИмяДокументаИСМП - Статус
	СтатусыОформления = РегистрыСведений.СтатусыОформленияДокументовИСМП.СтатусыДокументовИСМППоДокументуОснованию(ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(СтатусыОформления) Тогда
		Возврат ТекстНадписи;
	КонецЕсли;
	
	// Получим структуру вида ИмяДокументаИСМП - Массив(ДокументыИСМПДанногоВида)
	ДокументыИСМП = ДокументыИСМППоДокументуОснованию(ДокументОснование);
	
	ТекстыНадписиПоДокументам = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтатусыОформления Цикл
		
		МетаданныеДокумента = Метаданные.Документы[КлючИЗначение.Ключ];
		
		Если ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента).Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			
			// Получим структуру с ключами "Представление, МассивДокументов, СтатусОформления, МетаданныеДокумента"
			Описание = ИнтеграцияИСМП.ОписаниеОформленныхДокументов(МетаданныеДокумента, ДокументОснование, ДокументыИСМП, СтатусыОформления);
			
			Если Описание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекстыНадписиПоДокументам.Количество() > 0 Тогда
				ТекстыНадписиПоДокументам.Добавить(", ");
			КонецЕсли;
			
			ТекстыНадписиПоДокументам.Добавить(Описание.ТекстНадписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстыНадписиПоДокументам);
	Возврат ТекстНадписи;
	
КонецФункции

// Получает ТН ВЭД
//
// Параметры:
//  КодТНВЭД - Строка - Код по классификатору товарной номенклатуры внешнеэкономической деятельности
//
// Возвращаемое значение:
//   Произвольный - элемент классификатора (если он определен в конфигурации)
//
Функция КлассификаторТНВЭДПоКоду(КодТНВЭД) Экспорт
	
	ТНВЭД = Неопределено;
	
	ИнтеграцияИСМППереопределяемый.КлассификаторТНВЭД(КодТНВЭД, ТНВЭД);
	
	Возврат ТНВЭД;
	
КонецФункции

#КонецОбласти