//ОК(СофтЛаб) Вдовиченко Г.В. 20181101

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьКоманду(Форма, Команда, ДополнительныеПараметры = Неопределено) Экспорт
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//Если Форма.ИмяФормы = "Справочник.ПрофилиНастроекЭДО.Форма.ФормаСписка" Тогда
	Если Форма.ИмяФормы = "РегистрСведений.УчетныеЗаписиЭДО.Форма.ФормаСписка" Тогда
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
		
		Если Команда.Имя = "ок_ОткрытьПомощникПодключенияКСервисуСбис" Тогда
			ок_ОбменСКонтрагентамиКлиент.ПомощникПодключенияКСервисуЭДОСбис();
		ИначеЕсли Команда.Имя = "ок_ОткрытьПомощникПодключенияКСервисуДиадок" Тогда
			ок_ОбменСКонтрагентамиКлиент.ПомощникПодключенияКСервисуЭДОДиадок();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[Итератор]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

Процедура ОповеститьПользователяОбУстановкеСтатуса(СписокДокументов, КоличествоОбработанных, КоличествоВсего, Статус) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
		
		Если СписокДокументов <> Неопределено Тогда
			СписокДокументов.Обновить();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);

	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭлектронныйДокументВходящий_ФормаПросмотраЭД_УстановитьТекущуюСтраницуЭД(Форма, Строка) Экспорт
	
	//Элементы.СтраницыЭД.ТекущаяСтраница = Элементы["Страница" + ТекСтрока.ИмяРеквизита];
	ТекущаяСтраницаУстановлена = Ложь;
	
	//если не удалось распознать документ, то подчиненный элемент с табличным документом на странице со снятым признаком Видимость
	ВидимостьПодчиненных = Ложь;
	Для каждого ПодчиненныйЭлемент из Форма.Элементы["Страница" + Строка.ИмяРеквизита].ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Видимость Тогда
			ВидимостьПодчиненных = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ВидимостьПодчиненных Тогда //вывод страницы со ссылкой на присоединенный файл
		СтраницаПроизвольный = Форма.Элементы.Найти("СтраницаТабличныйДокументВходящийПроизвольныйПервичныйЭД");
		Если СтраницаПроизвольный <> Неопределено Тогда
			Форма.Элементы.СтраницыЭД.ТекущаяСтраница = СтраницаПроизвольный;
			ТекущаяСтраницаУстановлена = Ложь;
			//ЭлементПредставление = Форма.Элементы.Найти("ок_Представление");
			//Если ЭлементПредставление <> Неопределено Тогда
			//	Форма.ок_Представление = "";
			//	ЭлементПредставление.Видимость = Ложь;
			//	Если УстановленаПрограммаОтображенияПредставленияHTML() Тогда
			//		Форма.ок_Представление = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.HTMLПредставлениеФайлаЭД(Строка.Ссылка);
			//		ЭлементПредставление.Видимость = Не ПустаяСтрока(Форма.ок_Представление);
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ТекущаяСтраницаУстановлена Тогда
		Форма.Элементы.СтраницыЭД.ТекущаяСтраница = Форма.Элементы["Страница" + Строка.ИмяРеквизита];
	КонецЕсли;	
	
КонецПроцедуры

Функция УстановленаПрограммаОтображенияПредставленияHTML() Экспорт
	
	Возврат Истина; //пока так
	
	//Об = Новый COMОбъект("Excel.Application");
	Результат = Ложь;
	Попытка
		Экземпляр = Новый COMОбъект("AcroPDF.PDF");
		Результат = Истина;
		Экземпляр = Неопределено;
	Исключение
		
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции

Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЭлектронныйДокументВходящий.Форма.ФормаПросмотраЭД" Тогда
		
		Форма.ок_УстановленаПрограммаОтображенияПредставленияHTML = УстановленаПрограммаОтображенияПредставленияHTML();
		
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-10 (#3395)
	
	ИначеЕсли Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбора" Тогда
		
		ФормаВладельца = ПолучитьФормуВладельца(Форма);
		Если ФормаВладельца <> Неопределено Тогда
			
			Попытка 
				
				Организация = ФормаВладельца.Объект.Организация;
				Форма.ок_Организация = Организация;
				Форма.ок_УстановитьПараметрОрганизацияКлиент();
				
				Элемент = Форма.Элементы.Найти("ок_Организация");
				Если Элемент <> Неопределено Тогда
					Элемент.Видимость = ЗначениеЗаполнено(Форма.ок_Организация);
				КонецЕсли;	
				
			Исключение
				
			КонецПопытки;	
		КонецЕсли;
		
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-10 (#3395)
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
	ИначеЕсли Форма.ИмяФормы = "Документ.ЭлектронныйДокументВходящий.Форма.ФормаДокумента" Тогда
		
		ЭлектронныйДокументВходящий_ФормаДокумента_УправлениеЭлементами(Форма);
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-27 (#4227)
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаЗаписатьИЗакрыть", "Видимость", Ложь); // всегда скрыта, т.к. создана команда формы с обработчиком
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-27 (#4227)
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	ИначеЕсли Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента" Тогда 
		
		ЭлектронныйДокументВходящий_ФормаДокумента_УправлениеЭлементами(Форма);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-06 (#4209)
	ИначеЕсли Форма.ИмяФормы = "Документ.бит_ЗаявкаНаРасходованиеСредств.Форма.ФормаДокумента" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаПровестиИЗакрыть", "Видимость",  Ложь); // всегда скрыта, т.к. создана команда формы с обработчиком
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-06 (#4209)
	
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-02-20 (#3591)
	Если Лев(Форма.ИмяФормы, 6) = "Отчет." Тогда
		ПереопределениеФормыОтчета(Форма.ИмяФормы, Отказ);
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) 2020-02-20 (#3591)
		
Конецпроцедуры

Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
	Если Форма.ИмяФормы = "Документ.ПоступлениеДопРасходов.Форма.ФормаДокумента" Тогда
		
		ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭД(Форма, Отказ, ПараметрыЗаписи);	
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПоступлениеНМА.Форма.ФормаДокумента" Тогда
		
		ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭД(Форма, Отказ, ПараметрыЗаписи);	
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаОбщая" Тогда
		
		ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭД(Форма, Отказ, ПараметрыЗаписи);	
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаТовары" Тогда
		
		ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭД(Форма, Отказ, ПараметрыЗаписи);	
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаУслуги" Тогда
		
		ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭД(Форма, Отказ, ПараметрыЗаписи);	
		
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	ИначеЕсли Форма.ИмяФормы = "Документ.КорректировкаПоступления.Форма.ФормаДокумента" Тогда
		
		ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭД(Форма, Отказ, ПараметрыЗаписи);	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)
	
КонецПроцедуры	

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-06 (#4209)
Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Если Форма.ИмяФормы = "Документ.бит_ЗаявкаНаРасходованиеСредств.Форма.ФормаДокумента" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаПровестиИЗакрыть", "Видимость",  Ложь); // всегда скрыта, т.к. создана команда формы с обработчиком
		
	КонецЕсли;
		
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-06 (#4209)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-22 (#3332)
Процедура ЭлектронныйДокументВходящий_ФормаПросмотраЭД_ДеревоПодчиненныеЭДПослеАктивизацииСтроки(Форма, ПрисоединенныйФайл) Экспорт
	
	Форма.ок_Представление = "";
	Расширение = "";
	Данные = ПолучитьИзВременногоХранилища(ок_ОбменСКонтрагентамиСлужебныйВызовСервера.АдресДанныхПрисоединенныйФайл(ПрисоединенныйФайл, Форма.УникальныйИдентификатор, Расширение));
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		ок_ОбменСКонтрагентамиКлиент.ОчиститьВременныйФайл(Форма.ок_ИмяВременногоФайла);
		Форма.ок_ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		Данные.Записать(Форма.ок_ИмяВременногоФайла);
		Форма.ок_Представление = ок_ОбменСКонтрагентамиКлиент.HTMLПредставлениеФайлаЭД(Форма.ок_ИмяВременногоФайла, Расширение);
	КонецЕсли;	
	ЭлементПредставление = Форма.Элементы.Найти("ок_Представление");
	Если ЭлементПредставление <> Неопределено Тогда
		ЭлементПредставление.Видимость = Ложь;
		Если Форма.ок_УстановленаПрограммаОтображенияПредставленияHTML Тогда
			ЭлементПредставление.Видимость = Не ПустаяСтрока(Форма.ок_Представление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-22 (#3332)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-10 (#3395)
	
Функция ПолучитьФормуВладельца(Форма) 
	
	ВладелецФормы = Форма.ВладелецФормы;
	
	Счетчик = 0;
	Пока Счетчик < 100 Цикл
		
		//Если Не ЗначениеЗаполнено(ВладелецФормы) Тогда
		//	Возврат Неопределено;
		//КонецЕсли;	
		
		ТипЗначения = ТипЗнч(ВладелецФормы);
		Если ТипЗначения = Тип("УправляемаяФорма") Тогда
			
			Возврат ВладелецФормы;
			
		ИначеЕсли ТипЗначения = Тип("ПолеФормы") 
			Или ТипЗначения = Тип("ГруппаФормы")
			Или ТипЗначения = Тип("ТаблицаФормы") Тогда
			
			ВладелецФормы = ВладелецФормы.Родитель;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;	
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	
		
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-10 (#3395)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
Процедура ОбработатьИзменениеФлажкаЗагружаемыеДокументы(Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ок_ЗагружаемыеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Формировать Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ок_ОбменСКонтрагентамиКлиентСервер.ВидЗагружаемогоДокументаЯвляетсяПоступлением(ТекущиеДанные.ВидЗагружаемогоДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка из Форма.ок_ЗагружаемыеДокументы Цикл
		
		Если Строка.ВидЗагружаемогоДокумента = ТекущиеДанные.ВидЗагружаемогоДокумента Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ок_ОбменСКонтрагентамиКлиентСервер.ВидЗагружаемогоДокументаЯвляетсяПоступлением(Строка.ВидЗагружаемогоДокумента) Тогда
			Строка.Формировать = Ложь;
		КонецЕсли;	
		
	КонецЦикла;	
			
КонецПроцедуры	

Функция ОписаниеТипаПоВидуЗагружаемогоДокументаЭД(Вид = Неопределено, ЕстьОграничение = Ложь, ТипДокумента = Неопределено) 
	
	ЕстьОграничение = Ложь;	
	ТипДокумента = Неопределено;
	Результат = Новый ОписаниеТипов;
	
	Если Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеУслуги") 
		Или Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеОборудование")
		Или Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеТовары")
		Или Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеТоварыУслугиКомиссия")
		Или Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеОбъектыСтроительства") Тогда
		
		Результат = Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг");
		ЕстьОграничение = Истина;
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
		
	ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеДопрасходы") Тогда
		
		Результат = Новый ОписаниеТипов("ДокументСсылка.ПоступлениеДопРасходов");
		ЕстьОграничение = Истина;
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов");
		
	ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеНМА") Тогда
		
		Результат = Новый ОписаниеТипов("ДокументСсылка.ПоступлениеНМА");
		ЕстьОграничение = Истина;	
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеНМА");
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ИмяФормыВыбораДокументаКопированияЗагружаемогоДокументаЭД(Форма) Экспорт
	
	ТипДокумента = Неопределено;
	
	ОграничениеТипа = ОписаниеТипаПоВидуЗагружаемогоДокументаЭД(ок_ОбменСКонтрагентамиКлиентСервер.ВидЗагружаемогоДокументаПоступленияПоТабличнойЧасти(Форма.ок_ЗагружаемыеДокументы), , ТипДокумента);
	Если ТипДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Возврат "Документ.ПоступлениеТоваровУслуг.ФормаВыбора";
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		Возврат "Документ.ПоступлениеНМА.ФормаВыбора";
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Возврат "Документ.ПоступлениеДопРасходов.ФормаВыбора";
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЭлектронныйДокументВходящий_ФормаДокумента_УправлениеЭлементами(Форма) Экспорт
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	//ДокументФормы = Форма.Объект;
	//ВидимостьЭлементов = ДокументФормы.ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования;
	Если Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента" Тогда
		ДокументФормы = Форма.Документ;
		ВидимостьЭлементов = Истина
	Иначе
		ДокументФормы = Форма.Объект;
		ВидимостьЭлементов = ДокументФормы.ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования;
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	Имена = Новый Массив;
	Имена.Добавить("ок_ГруппаЗагружаемыеДокументы");
	Имена.Добавить("ок_СоздаватьУчетныйДокументКопированием");
	Имена.Добавить("ок_ДокументКопирования");
	Имена.Добавить("ок_ДокументОснование");
	Имена.Добавить("ок_ДокументОснованиеСчетФактура");
	Имена.Добавить("ок_ВидОперацииКорректировкаПоступления");
	
	Для каждого Имя из Имена Цикл
		
		Элемент = Форма.Элементы.Найти(Имя);
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;	
		
	КонецЦикла;
	
	Имена = Новый Массив;
	Имена.Добавить("ок_ГруппаЗагружаемыеДокументы");
	
	Для каждого Имя из Имена Цикл
		
		Элемент = Форма.Элементы.Найти(Имя);
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = ВидимостьЭлементов;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Не ВидимостьЭлементов Тогда
		Возврат;
	КонецЕсли;
	
	ок_ВидЗагружаемогоДокумента = ок_ОбменСКонтрагентамиКлиентСервер.ВидЗагружаемогоДокументаПоступленияПоТабличнойЧасти(Форма.ок_ЗагружаемыеДокументы);
	
	ВидимостьСоздаватьУчетныйДокументКопированием = Ложь;
	ВидимостьДокументОснование = Ложь;
	ВидимостьДокументОснованиеСчетФактура = Ложь;
	Если ок_ВидЗагружаемогоДокумента <> Неопределено Тогда
		
		Элемент = Форма.Элементы.Найти("ок_СоздаватьУчетныйДокументКопированием");
		Если Элемент <> Неопределено Тогда
			
			Видимость = Ложь;
			Если ок_ВидЗагружаемогоДокумента <> ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.КорректировкаПоступления") 
				И ок_ВидЗагружаемогоДокумента <> ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеДопрасходы") Тогда
				Видимость = Истина;
			КонецЕсли;	
			Элемент.Видимость = Видимость;
			ВидимостьСоздаватьУчетныйДокументКопированием = Элемент.Видимость;
			
		КонецЕсли;	
		
		Элемент = Форма.Элементы.Найти("ок_ДокументОснование");
		Если Элемент <> Неопределено Тогда
			Видимость = Ложь;
			Если ок_ВидЗагружаемогоДокумента = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.КорректировкаПоступления") 
				Или ок_ВидЗагружаемогоДокумента = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеДопрасходы") Тогда
				Видимость = Истина;
			КонецЕсли;	
			Элемент.Видимость = Видимость;
			ВидимостьДокументОснование = Элемент.Видимость;
		КонецЕсли;	
		
		Элемент = Форма.Элементы.Найти("ок_ВидОперацииКорректировкаПоступления");
		Если Элемент <> Неопределено Тогда
			Видимость = Ложь;
			Если ок_ВидЗагружаемогоДокумента = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.КорректировкаПоступления") Тогда
				Видимость = Истина;
			КонецЕсли;	
			Элемент.Видимость = Видимость;
		КонецЕсли;	
	
	Иначе	
		
		Элемент = Форма.Элементы.Найти("ок_ДокументОснованиеСчетФактура");
		Если Элемент <> Неопределено Тогда
			Видимость = Ложь;
			Если ок_ОбменСКонтрагентамиКлиентСервер.УказанВидЗагружаемогоДокументаСчетФактураПоТабличнойЧасти(Форма.ок_ЗагружаемыеДокументы) И ок_ВидЗагружаемогоДокумента = Неопределено Тогда
				Видимость = Истина;
			КонецЕсли;	
			Элемент.Видимость = Видимость;
			ВидимостьДокументОснованиеСчетФактура = Элемент.Видимость;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Элемент = Форма.Элементы.Найти("ок_ДокументКопирования");
	Если Элемент <> Неопределено Тогда
		
		Элемент.Видимость = ВидимостьСоздаватьУчетныйДокументКопированием И ДокументФормы.ок_СоздаватьУчетныйДокументКопированием;
		
		ЕстьОграничение = Ложь;
		ОграничениеТипа = ОписаниеТипаПоВидуЗагружаемогоДокументаЭД(ок_ВидЗагружаемогоДокумента, ЕстьОграничение);
		
		Элемент.ОграничениеТипа = ОграничениеТипа;
		//Если Не Форма.ТолькоПросмотр Тогда
		//	Если (Не ЕстьОграничение ИЛИ Не ОграничениеТипа.СодержитТип(ТипЗнч(ДокументФормы.ок_ДокументКопирования))) 
		//		И ДокументФормы.ок_ДокументКопирования <> Неопределено Тогда
		//		ДокументФормы.ок_ДокументКопирования = Неопределено;
		//	КонецЕсли;	
		//КонецЕсли;	
		
	КонецЕсли;	
	
	//Если Не Форма.ТолькоПросмотр Тогда
	//	
	//	Если Не ВидимостьСоздаватьУчетныйДокументКопированием 
	//		И (ДокументФормы.ок_СоздаватьУчетныйДокументКопированием ИЛИ ДокументФормы.ок_ДокументКопирования <> Неопределено) Тогда
	//			ДокументФормы.ок_СоздаватьУчетныйДокументКопированием = Ложь;	
	//			ДокументФормы.ок_ДокументКопирования = Неопределено;
	//	КонецЕсли;	
	//	
	//	Если Не ВидимостьДокументОснование 
	//		И ЗначениеЗаполнено(ДокументФормы.ок_ДокументОснование) Тогда
	//			ДокументФормы.ок_ДокументОснование = Неопределено;
	//	КонецЕсли;	
	//	
	//	Если Не ВидимостьДокументОснованиеСчетФактура 
	//		И ЗначениеЗаполнено(ДокументФормы.ок_ДокументОснованиеСчетФактура) Тогда
	//			ДокументФормы.ок_ДокументОснованиеСчетФактура = Неопределено;
	//	КонецЕсли;	
	//		
	//КонецЕсли;	
	
КонецПроцедуры

Процедура ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭД(Форма, Отказ, ПараметрыЗаписи)
	
	Если Отказ ИЛИ ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;	
	
	УчетныйДокумент = Форма.Объект;
	Если УчетныйДокумент.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("УчетныйДокумент", УчетныйДокумент.Ссылка);
	
	ТипЗначения = ТипЗнч(УчетныйДокумент.Ссылка);
	Параметры.Вставить("ТипЗначенияУчетныйДокумент", ТипЗначения);
	Параметры.Вставить("ФВБУчетныйДокумент", Неопределено);

	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	ЕстьСуммаВШапке = Ложь;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	ТабличныеЧасти = Новый Массив;
	Если ТипЗначения = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ТабличныеЧасти.Добавить("Товары");
		ТабличныеЧасти.Добавить("Услуги");
		ТабличныеЧасти.Добавить("Оборудование");
		ТабличныеЧасти.Добавить("ОбъектыСтроительства");
		ТабличныеЧасти.Добавить("ОсновныеСредства");
		ТабличныеЧасти.Добавить("АгентскиеУслуги");
		Параметры.Вставить("ФВБУчетныйДокумент", УчетныйДокумент.ок_НомерЗаявки);
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		ТабличныеЧасти.Добавить("НематериальныеАктивы");
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		//ТабличныеЧасти.Добавить("Товары");
		ЕстьСуммаВШапке = Истина;
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ТабличныеЧасти.Добавить("Товары");
		ТабличныеЧасти.Добавить("Услуги");
		ТабличныеЧасти.Добавить("АгентскиеУслуги");
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	//Параметры.Вставить("СуммаУчетныйДокумент", ПолучитьСуммуДокументаСНДС(УчетныйДокумент, ТабличныеЧасти));
	Параметры.Вставить("СуммаУчетныйДокумент", ПолучитьСуммуДокументаСНДС(УчетныйДокумент, ТабличныеЧасти, ЕстьСуммаВШапке, ЕстьСуммаВШапке));
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
	Параметры.Вставить("ОрганизацияУчетныйДокумент", УчетныйДокумент.Организация);
	Параметры.Вставить("КонтрагентУчетныйДокумент", УчетныйДокумент.Контрагент);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-01-21 (#3612)
	
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ДополнитьПараметрыПроверкиСоответствияУчетногоДокументаИВходящегоЭД(Параметры); 
	
	Если Не Параметры.Свойство("ЭлектронныйДокумент") Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	//на совпадение ФВБ не проверяем
	Если ТипЗначения = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Параметры.Вставить("ФВБУчетныйДокумент", Параметры.ФВБЭлектронныйДокумент);
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	ОписаниеОшибки = "";
	Если Параметры.СуммаЭлектронныйДокумент <> 0 
		И Параметры.СуммаУчетныйДокумент <> Параметры.СуммаЭлектронныйДокумент Тогда
	
		ОписаниеОшибки = "Итоговая сумма с НДС документа не совпадает с итоговой суммой с НДС входящего ЭД " + Параметры.ЭлектронныйДокумент + ".";
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		Если Параметры.ЭтоБумажныйДокумент Тогда 
			ОписаниеОшибки = "Итоговая сумма с НДС документа не совпадает с итоговой суммой с НДС входящего бумажного документа " + Параметры.ЭлектронныйДокумент + ".";
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		
	ИначеЕсли Параметры.ФВБУчетныйДокумент <> Параметры.ФВБЭлектронныйДокумент Тогда
	
		ОписаниеОшибки = "В документе номер заявки отличается от данных входящего ЭД  " + Параметры.ЭлектронныйДокумент + ".";
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		Если Параметры.ЭтоБумажныйДокумент Тогда 
			ОписаниеОшибки = "В документе номер заявки отличается от данных входящего бумажного документа  " + Параметры.ЭлектронныйДокумент + ".";
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
	ИначеЕсли Параметры.ОрганизацияУчетныйДокумент <> Параметры.ОрганизацияЭлектронныйДокумент Тогда
	
		ОписаниеОшибки = "В документе организация отличается от данных входящего " + ?(Параметры.ЭтоБумажныйДокумент, "бумажного документа ", "ЭД ") + Параметры.ЭлектронныйДокумент + ".";
		
	ИначеЕсли Параметры.КонтрагентУчетныйДокумент <> Параметры.КонтрагентЭлектронныйДокумент Тогда
	
		ОписаниеОшибки = "В документе контрагент отличается от данных входящего " + ?(Параметры.ЭтоБумажныйДокумент, "бумажного документа ", "ЭД ") + Параметры.ЭлектронныйДокумент + ".";
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-01-21 (#3612)
	
	КонецЕсли;	
	
	Если ОписаниеОшибки <> "" Тогда
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭДЗавершение2020", ЭтотОбъект, Новый Структура), ОписаниеОшибки, РежимДиалогаВопрос.ОК);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
		//ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭДЗавершение", ЭтотОбъект, Новый Структура("Отказ", Отказ)), ОписаниеОШибки + " Провести документ?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
	
КонецПроцедуры	

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
Процедура ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭДЗавершение2020(Результат, Параметры) Экспорт
	
КонецПроцедуры	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)

//Процедура ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭДЗавершение(Результат, Параметры) Экспорт
//	
//	Если Результат <> КодВозвратаДиалога.Да Тогда
//		Параметры.Отказ = Истина;
//	КонецЕсли;	
//	
//КонецПроцедуры	

Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ТабличныеЧасти, ЕстьСуммаВШапке = Ложь, ЕстьСуммаНДСВШапке = Ложь) 

	ЕстьСуммаВключаетНДС = Истина;

	СуммаДокумента = 0;
	Для каждого Имя Из ТабличныеЧасти Цикл
		
		ЕстьСумма       = Истина;
		ЕстьСуммаНДС    = Истина;
		
		ДанныеТабличнойЧасти = ДокументОбъект[Имя];
		
		Если ЕстьСумма Тогда
			СуммаДокумента = СуммаДокумента + ДанныеТабличнойЧасти.Итог("Сумма");
			Если ЕстьСуммаВключаетНДС
				И ЕстьСуммаНДС
				И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента + ДанныеТабличнойЧасти.Итог("СуммаНДС");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	Если ЕстьСуммаВШапке Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект.Сумма;
		Если ЕстьСуммаВключаетНДС
			И ЕстьСуммаНДСВШапке
			И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект.СуммаНДС;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции
	
	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-13 (#3533)
// проверим связку документа с ЗнРДС, если есть, то запретим изменение документа
Процедура ОбновлениеКомандПриАктивацииСтрокиВФормеСписка(Форма) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма")
		И Форма.ПодчиненныеЭлементы <> Неопределено
		И Форма.ПодчиненныеЭлементы.Найти("Список") <> Неопределено
		И ТипЗнч(Форма.ПодчиненныеЭлементы.Список) = Тип("ТаблицаФормы")
		И Форма.ПодчиненныеЭлементы.Список.ПодчиненныеЭлементы <> Неопределено
		И Форма.ПодчиненныеЭлементы.Список.ПодчиненныеЭлементы.Найти("Ссылка")  <> Неопределено
		И Форма.ПодчиненныеЭлементы.Список.ТекущиеДанные <> Неопределено
		И Форма.ПодчиненныеЭлементы.Список.ТекущиеДанные.Свойство("Ссылка") Тогда
		
		СсылкаДляПроверки = Форма.ПодчиненныеЭлементы.Список.ТекущиеДанные.Ссылка;
		Если ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.КорректировкаПоступления")
			ИЛИ ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.ОперацияБух")
			ИЛИ ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.ПоступлениеДопРасходов")
			ИЛИ ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.ПоступлениеНМА")
			ИЛИ ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.бит_ВалютныйСвоп")
			ИЛИ ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор")
			ИЛИ ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
			ИЛИ ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.бит_ок_ОперацияАксапты12")
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
			ИЛИ ТипЗнч(СсылкаДляПроверки) = Тип("ДокументСсылка.бит_ок_ОперацияАксапты")Тогда
			
			Если ОК_ОбщегоНазначения.ПроверитьНаличиеСозданногоДокументаЗнРДСВСтатусе(СсылкаДляПроверки) Тогда
				Для каждого ЭлементФормы Из Форма.Элементы Цикл
					Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы")
						И (СтрНайти(НРег(ЭлементФормы.Имя), НРег("Провести")) <> 0
							ИЛИ СтрНайти(НРег(ЭлементФормы.Имя), НРег("ОтменаПроведения")) <> 0
							ИЛИ СтрНайти(НРег(ЭлементФормы.Имя), НРег("УстановитьПометкуУдаления")) <> 0)
						И ЭлементФормы.Доступность = Истина Тогда
						ЭлементФормы.Доступность = Ложь;
					КонецЕсли; 
				КонецЦикла; 
			Иначе
				Для каждого ЭлементФормы Из Форма.Элементы Цикл
					Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы")
						И (СтрНайти(НРег(ЭлементФормы.Имя), НРег("Провести")) <> 0
							ИЛИ СтрНайти(НРег(ЭлементФормы.Имя), НРег("ОтменаПроведения")) <> 0
							ИЛИ СтрНайти(НРег(ЭлементФормы.Имя), НРег("УстановитьПометкуУдаления")) <> 0)
						И ЭлементФормы.Доступность = Ложь Тогда
						ЭлементФормы.Доступность = Истина;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
			
			//Если ОК_ОбщегоНазначения.ПроверитьНаличиеСозданногоДокументаЗнРДСВСтатусе(СсылкаДляПроверки) Тогда 
			//	Форма.ТолькоПросмотр = Истина;
			//Иначе 
			//	Форма.ТолькоПросмотр = Ложь;
			//КонецЕсли;	
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-13 (#3533)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-02-20 (#3591)
Процедура ПереопределениеФормыОтчета(ИмяФормы, Отказ)
	
	Имя = СтрПолучитьСтроку(СтрЗаменить(ИмяФормы, ".", Символы.ПС), 2);
	
	Реквизиты = ок_УправлениеФормамиВызовСервера.ДанныеПереопределеннияОтчета(Имя);
	Если Не ЗначениеЗаполнено(Реквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняемаяКоманда = Новый Структура(
	"Ссылка, Представление,
	|Идентификатор, ВариантЗапуска, ПоказыватьОповещение, 
	|Модификатор, ОбъектыНазначения, ЭтоОтчет, Вид");
	
	ВыполняемаяКоманда.Ссылка = Реквизиты.Ссылка;
	ВыполняемаяКоманда.Вид = Реквизиты.Вид;
	ВыполняемаяКоманда.ЭтоОтчет = (Реквизиты.Вид = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет") Или Реквизиты.Вид = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет"));
	
	ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьОткрытиеФормыОбработки(ВыполняемаяКоманда, Неопределено, Неопределено);
	
	Отказ = Истина;
	
Конецпроцедуры
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-02-20 (#3591)
	
#КонецОбласти
