//Ванюков К. + // для пользователей ОКЕЯ, в документах покупки и реализации, реквизит «Зачет авансов» автоматически принимет значение «Не зачитывать» // 2012-01-25
Процедура УстановитьСпособЗачетаАвансов(СпособЗачетаАвансов) Экспорт 

	ГруппыПользователя									= ГруппыПользователя(ПараметрыСеанса.ТекущийПользователь);
	ПраваНаОкей                                         = (ГруппыПользователя.Найти(Справочники.ГруппыПользователей.НайтиПоКоду("58")) <> Неопределено) или (ГруппыПользователя.Найти(Справочники.ГруппыПользователей.НайтиПоКоду("59")) <> Неопределено);
	ПраваНаДоринду										= (ГруппыПользователя.Найти(Справочники.ГруппыПользователей.НайтиПоКоду("2")) <> Неопределено) или (ГруппыПользователя.Найти(Справочники.ГруппыПользователей.НайтиПоКоду("3")) <> Неопределено);
	
	Если ПраваНаОкей и  не (ПраваНаДоринду или РольДоступна("ПолныеПрава")) Тогда 
		СпособЗачетаАвансов.СпособЗачетаАвансов.Значение = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	КонецЕсли;

КонецПроцедуры

//Ванюков К. + // При вводе ID разноски программа должна найти документ разнесения оборотов // 2012-02-13
Функция НайтиРазнесениеОборотовПоID(ID) Экспорт 
	
	//	Документ.бит_БК_РазнесениеОборотов не используется
	Если Не (ID = "    -    ") Тогда 
		Запрос 						= Новый Запрос;
		Запрос.Текст 				= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             				  |	бит_БК_РазнесениеОборотов.Ссылка
		             				  |ИЗ
		             				  |	Документ.УдалитьИжтиси_бит_БК_РазнесениеОборотов КАК бит_БК_РазнесениеОборотов
		             				  |ГДЕ
		             				  |	бит_БК_РазнесениеОборотов.ID_Разнесения = &ID_Разнесения
		             				  |
		             				  |ОБЪЕДИНИТЬ ВСЕ
		             				  |
		             				  |ВЫБРАТЬ
		             				  |	рс_ЗаявкаНаДоговор.Ссылка
		             				  |ИЗ
		             				  |	Документ.рс_ЗаявкаНаДоговор КАК рс_ЗаявкаНаДоговор
		             				  |ГДЕ
		             				  |	рс_ЗаявкаНаДоговор.ID = &ID_Разнесения";
		
		Запрос.УстановитьПараметр("ID_Разнесения", ID);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			ОК_РазнесениеОборотов 	= Выборка.Ссылка;
		Иначе 	
			//ОК_РазнесениеОборотов 	= ПредуДокументы.бит_БК_РазнесениеОборотов.ПустаяСсылка();
			//#Если Клиент Тогда
			//	Предупреждение("Номер ID разноски неверный!");
			//#КонецЕсли
			Возврат Неопределено;
		КонецЕсли;
	Иначе 
		ОК_РазнесениеОборотов = ПредопределенноеЗначение("Документ.УдалитьИжтиси_бит_БК_РазнесениеОборотов.ПустаяСсылка");//Документы.бит_БК_РазнесениеОборотов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОК_РазнесениеОборотов;
	
КонецФункции

//Ванюков К. + // Проверка заполненности ОК_РазнесениеОборотов при проведении документов// 2012-02-13
Процедура ПроверитьЗаполнениеОК_РазнесениеОборотов(Объект, РежимЗаписи, Отказ) Экспорт
//izhtc alena 09.10.2015 ОК_РазнесениеОборотов - не используется(
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
	//	
	//	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда 
	//		Если Объект.ОК_ID_ВТЧ Тогда 
	//			Для Каждого СтрокаТЧ из Объект.Услуги Цикл 
	//				Если (((СтрокаТЧ.ОК_ID_Разноска = "    -    ") или не ЗначениеЗаполнено(СтрокаТЧ.ОК_ID_Разноска))и ЗначениеЗаполнено(СтрокаТЧ.ОК_РазнесениеОборотов))
	//					Или (Не ((СтрокаТЧ.ОК_ID_Разноска = "    -    ") или не ЗначениеЗаполнено(СтрокаТЧ.ОК_ID_Разноска)) и Не ЗначениеЗаполнено(СтрокаТЧ.ОК_РазнесениеОборотов))
	//					Тогда 
	//					Отказ = Истина;
	//					ВыводСтатусаСообщения(,"ТЧ Услуги, строка " + СтрокаТЧ.НомерСтроки + ": Номер ID разноски неверный!");
	//				КонецЕсли;
	//				
	//			КонецЦикла;
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	
	//	Если (((Объект.ОК_ID_Разноска = "    -    ") или не ЗначениеЗаполнено(Объект.ОК_ID_Разноска))и ЗначениеЗаполнено(Объект.ОК_РазнесениеОборотов))
	//		Или (Не ((Объект.ОК_ID_Разноска = "    -    ") или не ЗначениеЗаполнено(Объект.ОК_ID_Разноска)) и Не ЗначениеЗаполнено(Объект.ОК_РазнесениеОборотов))
	//		Тогда 
	//		Отказ = Истина;
	//		ВыводСтатусаСообщения(,"Номер ID разноски неверный!");
	//	КонецЕсли;
	//КонецЕсли;
//izhtc alena 09.10.2015 ОК_РазнесениеОборотов - не используется)	

КонецПроцедуры

Процедура ВыводСтатусаСообщения(Статус = Неопределено, Сообщение = Неопределено, ПроверятьПрерывение = Ложь) Экспорт 
	
	//ижтиси, шадрин, 12.08.2015(
	//#Если Клиент Тогда
		//Если Статус <> Неопределено Тогда 
		//	Состояние(Статус);
		//КонецЕсли;
		
		Если Сообщение <> Неопределено Тогда 
			Сообщить(Сообщение);
		КонецЕсли;
		
		//Если ПроверятьПрерывение Тогда 
		//	ОбработкаПрерыванияПользователя();
		//КонецЕсли;
	//#КонецЕсли 
	//ижтиси, шадрин, 12.08.2015)
	
КонецПроцедуры

//Калинин М.П. 02.08.2012
//Возвращает объект строительства для подразделения
Функция ОбъектСтроительстваПоПодразделению(подразделение) Экспорт
	ОбъектСтроительства = Справочники.ОбъектыСтроительства.ПустаяСсылка();
	
	
	если ЗначениеЗаполнено(подразделение) тогда //найдем объект строительства для подразделения
		ГоловноеПодразделение=подразделение;			
		пока ЗначениеЗаполнено(ГоловноеПодразделение.Родитель) 
			цикл                                                         			 			 
			Если не ЗначениеЗаполнено(ГоловноеПодразделение.ОК_ОбъектСтроительства) тогда				
				ГоловноеПодразделение=ГоловноеПодразделение.Родитель;
			иначе
				прервать;
			конецесли;   			 			
		конеццикла;	
		
		Если не ЗначениеЗаполнено(ОбъектСтроительства) тогда
			ОбъектСтроительства =ГоловноеПодразделение.ОК_ОбъектСтроительства;
		конецесли;		
	конецесли;
	
	
	возврат ОбъектСтроительства; 
конецфункции

//ОК Ванюков К. +// Проверяет все ли симфолы строки являются цифрами // 2012-11-09
Функция ПроверитьСтрокаВЧисло(Текст) Экспорт

	Длинна	= СтрДлина(Текст);
	
	Для Инд = 1 по Длинна Цикл 
		Символ	= Сред(Текст, Инд, 1);
		Если КодСимвола(Символ) < 48 или КодСимвола(Символ) > 57 Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	

КонецФункции // ПроверитьСтрокаВЧисло()

//ОК Ванюков К. +// при расчете суммы амортизации к начислению остаточный СПИ был равен как СПИ, заведенный в документе «принятие к учету ОС (МСФО) – кол-во месяцев между «датой принятия к учету», указанной в документе «Принятие к учету ОС (МСФО)» и датой начисления амортиза // 2012-11-29
				// Настройка работы галочки "Начислять амортизацию с текщего периода // 2013-01-25
Функция СкорректироватьСПИПриАмортизацииОС(ТаблицаПараметров, ПериодРасчета, Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "выбрать *
					|Поместить ВТ_ТаблицаПараметров
					|из &ТаблицаПараметров как ТаблицаПараметров
					|;
					|Выбрать * , 
					|	ТаблицаПараметров.СрокПолезногоИспользования - РАЗНОСТЬДАТ(ТаблицаПараметров.ДатаПринятияКУчету, &Период, МЕСЯЦ) + 
					|	ВЫБОР КОГДА НачислятьАмортизациюСТекущегоПериода тогда 0
					|		ИНАЧЕ  
					|			ВЫБОР КОГДА НАЧАЛОПЕРИОДА(ТаблицаПараметров.ДатаПринятияКУчету, Месяц) = НАЧАЛОПЕРИОДА(&Период, Месяц) ТОГДА 0
					|				ИНАЧЕ 1 
					|			КОНЕЦ
					|	КОНЕЦ КАК ОстаточныйСрокАмортизации
					|из ВТ_ТаблицаПараметров как ТаблицаПараметров
					|";
	
	Запрос.УстановитьПараметр("ТаблицаПараметров", ТаблицаПараметров);
	Если ТипЗнч(ПериодРасчета) = Тип("МоментВремени") Тогда 
		Запрос.УстановитьПараметр("Период", КонецМесяца(ПериодРасчета.Дата));
	ИначеЕсли ТипЗнч(ПериодРасчета) = Тип("Дата") Тогда 
		Запрос.УстановитьПараметр("Период", КонецМесяца(ПериодРасчета));
	ИначеЕсли ТипЗнч(ПериодРасчета) = Тип("Граница") Тогда 
		Запрос.УстановитьПараметр("Период", КонецМесяца(ПериодРасчета.Значение));
	Иначе
		Возврат ТаблицаПараметров;
	КонецЕсли;
		
	
	ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
	
    Возврат ТаблицаПараметров;
КонецФункции // СкорректироватьСПИПриАмортизацииОС()

//ОК Ванюков К. +// Копия типовой функции с добавлением параметра РАЗРЕШЕННЫЕ // 2013-01-17
// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то в имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция ПолучитьЗначенияРеквизитов(Ссылка, Реквизиты) Экспорт

	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",", Истина);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

//ОК Ванюков К. +// Копия типовой функции модуля бит_ОбщегоНазначения. Используется в док. бит_му_ПринятиеКУчетуНМА. В Доринде есть НМА с неограниченным СПИ // 2013-01-25
// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то в имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении. 
// В значении структуры существует возможность указать условие необходимости выполнения проверки
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура - ключ: имя поля; значение: условие необходимости выполнения проверки.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект
	                                         , ИмяТабличнойЧасти
											 , СтруктураОбязательныхПолей
											 , Отказ
											 , Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	ТабличнаяЧасть      = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
			
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
//ОК Ванюков К. +// изменения типового модуля // 2013-01-25
            Если КлючЗначение.Ключ = "СрокПолезногоИспользования" Тогда 
				Если СтрокаТаблицы.СрокПолезногоИспользования = 0 и Не СтрокаТаблицы.НачислятьАмортизацию Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
//ОК Ванюков К. -			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 

				// При наличии критерия для проверки проверим соответствие условия проверки критерию
				ТекстКритерия = КлючЗначение.Значение; 
				Если ТипЗнч(ТекстКритерия) = Тип("Строка") И НЕ ПустаяСтрока(ТекстКритерия)  Тогда
						
						Критерий = Вычислить(ТекстКритерия);
						
						Если НЕ Критерий Тогда
							
							Продолжить;
							
						КонецЕсли; 
						
				КонецЕсли; 
				
					
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";

				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,,,, Отказ);

			КонецЕсли;

		КонецЦикла; // по проверяемым полям

	КонецЦикла; // по табличным частям

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()


//ОК Калинин М. 300113  Вызывается из комнады интерфейсной для открытия отчета PL из внешних отчетов (справочника)
Процедура ОткрытьОтчетPL() Экспорт
	имяотчета_="Отчет PL";
	попытка
		//ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		//Справочники.ВнешниеОбработки.НайтиПоНаименованию(имяотчета_).ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		ВнешняяОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(имяотчета_);
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВнешняяОбработкаСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	
//ОК Калинин М.	

//+СБ Титова Наталья. 2013.12.18  Вызывается из комнады интерфейсной для открытия отчета "Отчет о фин. положении" из внешних отчетов (справочника)
Процедура ОткрытьОтчетОФинПоложении() Экспорт
	имяотчета_="Отчет о финансовом положении";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");
		// СофтБаланс Начало Кузнецова С. [31.01.2014] 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//// СофтБаланс Окончание Кузнецова С. [31.01.2014]
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли			
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	
//-СБ. Титова Наталья. Окончание изменений	

//+СБ Титова Наталья. 2013.12.25 Вызывается из комнады интерфейсной для открытия отчета "Отчет о совокупном доходе" из внешних отчетов (справочника)
Процедура ОткрытьОтчетОСовокупномДоходе() Экспорт
	имяотчета_="Отчет о совокупном доходе";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");	
		// СофтБаланс Начало Кузнецова С. [31.01.2014] 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//// СофтБаланс Окончание Кузнецова С. [31.01.2014]
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	
//-СБ. Титова Наталья. Окончание изменений	

//+СБ Титова Наталья. 2013.12.26 Вызывается из комнады интерфейсной для открытия отчета "Отчет об изменениях капитала" из внешних отчетов (справочника)
Процедура ОткрытьОтчетОбИзмененияхКапитала() Экспорт
	имяотчета_="Отчет об изменении собственного капитала";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		// СофтБаланс Начало Кузнецова С. [31.01.2014] 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//// СофтБаланс Окончание Кузнецова С. [31.01.2014]
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	
//-СБ. Титова Наталья. Окончание изменений	

// СофтБаланс Начало Кузнецова С. [07.04.2014] 
Процедура ОткрытьОтчетОсновныеПоказателиДеятельности() Экспорт
	имяотчета_="Основные показатели деятельности";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетEBITDA() Экспорт
	имяотчета_="EBITDA";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетВыручка() Экспорт
	имяотчета_="Выручка";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетОбщиеАдминистративныеРасходы() Экспорт
	имяотчета_="Общие, административные расходы и расходы на продажу";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетПрочиеОперационныеДоходыРасходы() Экспорт
	имяотчета_="Прочие операционные доходы и расходы";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетЗатратыНаПерсонал() Экспорт
	имяотчета_="Затраты на персонал";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетФинансовыеДоходыРасходы() Экспорт
	имяотчета_="Финансовые доходы и расходы";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетПрочиеВнеоборотныеАктивы() Экспорт
	имяотчета_="Прочие внеоборотные активы";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетЗапасы() Экспорт
	имяотчета_="Запасы";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетДенежныеСредстваИИхЭквиваленты() Экспорт
	имяотчета_="Денежные средства и их эквиваленты";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетТорговаяИПрочаяДебиторскаяЗадолженность() Экспорт
	имяотчета_="Торговая и прочая дебиторская задолженность";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетТорговаяИПрочаяКредиторскаяЗадолженность() Экспорт
	имяотчета_="Торговая и прочая кредиторская задолженность";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетКредитыИЗаймы() Экспорт
	имяотчета_="Кредиты и займы";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетПодверженностьКредитномуРиску() Экспорт
	имяотчета_="Подверженность кредитному риску";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетПодверженностьВалютномуРиску() Экспорт
	имяотчета_="Подверженность валютному риску";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетСвязанныеСтороныВыручка() Экспорт
	имяотчета_="Связанные стороны / Выручка";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетСвязанныеСтороныРасходы() Экспорт
	имяотчета_="Связанные стороны / Расходы";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	

Процедура ОткрытьОтчетСвязанныеСтороныЗаймы() Экспорт
	имяотчета_="Связанные стороны / Займы";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	
// СофтБаланс Окончание Кузнецова С. [07.04.2014]

// +СБ. Полякова Ирина. 2014-08-08.  
Процедура ОткрытьОтчетАктивыПереданныеВЗалог() Экспорт
	имяотчета_="Активы, переданные в залог";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	// -СБ. Полякова Ирина

// +СБ. Полякова Ирина. 2014-10-12.  
Процедура ОткрытьОтчетРискЛиквидности() Экспорт
	имяотчета_="Риск ликвидности";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	// -СБ. Полякова Ирина

// +СБ. Полякова Ирина. 2014-08-16.  
Процедура ОткрытьОтчетФинансовыеАктивыИОбязательства() Экспорт
	имяотчета_="Финансовые активы и обязательства";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	// -СБ. Полякова Ирина

// +СБ. Кузнецова С. 2014-12-12 
Процедура ОткрытьОтчетАнализЧувствительностиПотоковДенежныхСредств() Экспорт
	имяотчета_="Анализ чувствительности потоков денежных средств по финансовым инструментам с плавающей ставкой";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Отчет "+имяотчета_+" не найден!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	
// -СБ. Кузнецова С.

//ОК Т.Довбешка 25.11.2014 
Процедура ОткрытьОбработкуАнализЗаявокНаРасходованиеДС() Экспорт
	имяотчета_="Анализ заявок на расходование ДС (Axapta)";
	попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("epf");		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", имяотчета_);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			#Если Клиент Тогда
			предупреждение("Обработка "+имяотчета_+" не найдена!");
			#КонецЕсли
			//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОбработок();
			Возврат;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ОтчетСсылка = Выборка.Ссылка;
		КонецЕсли;
		//ОтчетСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОбработки.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ОтчетСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Обработка "+имяотчета_+" не найдена!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОбработок();
	конецпопытки;	
КонецПроцедуры	// ОК Т.Довбешка

//ОК Калинин М. 180213  Вызывается из комнады интерфейсной для открытия отчета "Выполнение плана(расширенный) с контролирующей статьей" из внешних отчетов (справочника)
Процедура ОткрытьОтчетВыполнениеПлана() Экспорт
	имяотчета_="Выполнение плана(расширенный) с контролирующей статьей";
	попытка
		//ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
		//Справочники.ВнешниеОбработки.НайтиПоНаименованию(имяотчета_).ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		//Отчет.ПолучитьФорму().Открыть();
		ВнешняяОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(имяотчета_);
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВнешняяОбработкаСсылка);
		#Если Клиент Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма");			
		#КонецЕсли						
	исключение
		#Если Клиент Тогда
		предупреждение("Отчет "+имяотчета_+" не найден!");
		#КонецЕсли
		//УниверсальныеМеханизмы.ОткрытьСписокВнешнихОтчетов();
	конецпопытки;	
КонецПроцедуры	
//ОК Калинин М.	

Процедура ПроверкаУказанныхОбъектовСтроительстваВДокументе(ПроверямаяСтруктура, Отказ, Заголовок,псеводнимПодразделения="подразделении") Экспорт
	
	ЗагловокПроверки="Проверка указанных объектов строительства: ";
	
	// ОКЕЙ Цветков А.(СофтЛаб) Начало 2018-06-06 (#3014)
	//Подразделение=ПроверямаяСтруктура.Подразделение;
	//Способ=ПроверямаяСтруктура.СпособОтраженияРасходов;	
	//
	//
	////Проверяем объект в подразделении
	//ОбъектВПодразделении=ПроверямаяСтруктура.Подразделение.ОК_ОбъектСтроительства;
	//Если не ЗначениеЗАполнено(ОбъектВПодразделении) тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗагловокПроверки+"Не указан объект строительства в подразделении "+строка(Подразделение),,,, Отказ)
	//иначе
	//	//Проверяем объект в способе
	//	Если не ЗначениеЗаполнено(ПроверямаяСтруктура.СпособОтраженияРасходов.Способы) тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗагловокПроверки+"Способ отражения не указан! Дальнейшая проверка невозможна.",,,, Отказ)
	//	иначе	
	//	таб_=ПроверямаяСтруктура.СпособОтраженияРасходов.Способы.Выгрузить(,"Субконто2");
	//	Если Таб_.Количество()=0 тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗагловокПроверки+"Табличная часть "+строка(Способ)+" пуста! Дальнейшая проверка невозможна.",,,, Отказ)
	//	иначе
	//		
	//		таб_.Свернуть("Субконто2");
	//		строкаВСпособе=1;
	//		ОбъектыВСпособе=таб_[строкаВСпособе-1].Субконто2;
	//		
	//		Если не ЗначениеЗАполнено(ОбъектыВСпособе) тогда
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗагловокПроверки+"Не задан объект в строке "+строка(строкаВСпособе)+" табличной части способа отражения "+строка(Способ)+ " Дальнейшая проверка невозможна.",,,, Отказ)
	//		иначе	
	//			//Сравним объекты подразделения и способа
	//			Если  ОбъектВПодразделении<>ОбъектыВСпособе тогда
	//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗагловокПроверки+"Объект не совпадает в "+псеводнимПодразделения+" и способе отражения расходов. Выберите корректный способ отражения расходов",,,, Отказ)
	//			иначеЕсли ПроверямаяСтруктура.ТаблицаОС<>неопределено тогда
	//				//Сравним объекты подразделения и таблицы ос
	//				для каждого стр из ПроверямаяСтруктура.ТаблицаОС
	//				цикл	
	//				Если  ОбъектВПодразделении<>стр.объект тогда
	//						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗагловокПроверки+"Объект не совпадает в "+псеводнимПодразделения+" и строке "+строка(стр.номерстроки)+" табличной части.",,,, Отказ)
	//					КонецЕсли;	
	//				конеццикла;
	//			КонецЕсли;	

	//		конецЕсли;	
	//	конецЕсли;	
	//	конецЕсли;	
	//конецЕсли;
	Если ПроверямаяСтруктура.Свойство("ТаблицаОС") И ТипЗнч(ПроверямаяСтруктура.ТаблицаОС) = Тип("ТаблицаЗначений") Тогда
		ПроверямаяСтруктура.ТаблицаОС.Колонки.Добавить("ОбъектСтроительства", Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства"));
		Для каждого СтрокаТаблицы Из ПроверямаяСтруктура.ТаблицаОС Цикл
			ОбъектСтроительства = СтрокаТаблицы.Объект;
			Пока ЗначениеЗаполнено(ОбъектСтроительства.Родитель) Цикл
				ОбъектСтроительства = ОбъектСтроительства.Родитель;
			КонецЦикла;
			СтрокаТаблицы.ОбъектСтроительства = ОбъектСтроительства;
		КонецЦикла;
	КонецЕсли;
	
	РезультатПроверки = Истина;
	
	ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
	ПредставлениеПодразделения = ?(ПроверямаяСтруктура.Свойство("Подразделение"), Строка(ПроверямаяСтруктура.Подразделение), "");
	ПредставлениеСпособОтраженияРасходов = ?(ПроверямаяСтруктура.Свойство("СпособОтраженияРасходов"), Строка(ПроверямаяСтруктура.СпособОтраженияРасходов), "");	
	
	//Проверяем объект в подразделении
	Если ПроверямаяСтруктура.Свойство("Подразделение") И Не ЗначениеЗаполнено(ПроверямаяСтруктура.Подразделение.ОК_ОбъектСтроительства) тогда
		ТекстСообщения = СтрШаблон("Не указан объект строительства в подразделении %1.", 
			ПредставлениеПодразделения);
		РезультатПроверки = Ложь;
	ИначеЕсли ПроверямаяСтруктура.Свойство("СпособОтраженияРасходов") И ПроверямаяСтруктура.СпособОтраженияРасходов.Способы.Количество() = 0 тогда
		ТекстСообщения = СтрШаблон("Табличная часть способа отражения расходов %1 пуста! Дальнейшая проверка невозможна.", 
			ПредставлениеСпособОтраженияРасходов);
		РезультатПроверки = Ложь;
	//Иначе
	//	РезультатПроверки = ПроверямаяСтруктура.Свойство("Подразделение") И ПроверямаяСтруктура.Свойство("СпособОтраженияРасходов");
	КонецЕсли;
	
	Если РезультатПроверки Тогда
		
		ОбъектСтроительстваВПодразделении = ПроверямаяСтруктура.Подразделение.ОК_ОбъектСтроительства;
		Пока ЗначениеЗаполнено(ОбъектСтроительстваВПодразделении.Родитель) Цикл
			ОбъектСтроительстваВПодразделении = ОбъектСтроительстваВПодразделении.Родитель;
		КонецЦикла;
		
		Если ПроверямаяСтруктура.Свойство("СпособОтраженияРасходов") Тогда
			Для каждого СтрокаСпособа Из ПроверямаяСтруктура.СпособОтраженияРасходов.Способы Цикл
				
				СтрокаВидаСубконто = СтрокаСпособа.СчетЗатрат.ВидыСубконто.Найти(ВидСубконто, "ВидСубконто");
				Если СтрокаВидаСубконто = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИндексСтроки = СтрокаСпособа.СчетЗатрат.ВидыСубконто.Индекс(СтрокаВидаСубконто);
				НомерСторки = ИндексСтроки + 1;
				
				ИмяРеквизитаСубконто = СтрШаблон("Субконто%1", НомерСторки);
				ЗначениеСубконто = СтрокаСпособа[ИмяРеквизитаСубконто];
				Если Не ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					ТекстСообщения = СтрШаблон("Не задан объект в строке %1 табличной части способа отражения %2 Дальнейшая проверка невозможна.", 
						НомерСторки, ПредставлениеСпособОтраженияРасходов);
					РезультатПроверки = Ложь;
					Прервать;
				КонецЕсли;
				
				ОбъектСтроительства = ЗначениеСубконто;
				Пока ЗначениеЗаполнено(ОбъектСтроительства.Родитель) Цикл
					ОбъектСтроительства = ОбъектСтроительства.Родитель;
				КонецЦикла;
				
				Если Не ОбъектСтроительстваВПодразделении = ОбъектСтроительства Тогда
					ТекстСообщения = СтрШаблон("Объект не совпадает в %1 и способе отражения расходов. Выберите корректный способ отражения расходов.", 
						ПсеводнимПодразделения);
					РезультатПроверки = Ложь;	
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;	
		
		Если Не РезультатПроверки Тогда
			ТекстСообщения = СтрШаблон("%1%2", ЗагловокПроверки, ТекстСообщения);
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		Если ПроверямаяСтруктура.Свойство("ТаблицаОС") И ТипЗнч(ПроверямаяСтруктура.ТаблицаОС) = Тип("ТаблицаЗначений") Тогда
			
			Для каждого СтрокаТаблицыОС Из ПроверямаяСтруктура.ТаблицаОС Цикл	
				Если Не ОбъектСтроительстваВПодразделении = СтрокаТаблицыОС.ОбъектСтроительства Тогда
					ТекстСообщения = СтрШаблон("Объект не совпадает в %1 и строке %2 табличной части.", 
					ПсеводнимПодразделения, Строка(СтрокаТаблицыОС.НомерСтроки));
					РезультатПроверки = Ложь;
					ТекстСообщения = СтрШаблон("%1%2", ЗагловокПроверки, ТекстСообщения);
		    		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;		
	
	КонецЕсли;
	// ОКЕЙ Цветков А.(СофтЛаб) Конец 2018-06-06 (#3014)
	
КонецПроцедуры	
//ОК Калинин М. 

//ОК Калинин М. 290413
Процедура ПроверитьЗаполненостьАналитикСчетаВТабличнойЧастиДокумента(ДокументОбъект, ИмяТабличнойЧасти,СчетИмя,ИмяСубконто,Отказ, Заголовок) Экспорт
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	ТабличнаяЧасть      = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;

	
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл

		СтрокаНачалаСообщенияОбОшибке = "Строка номер "+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               " табличной части """ + ПредставлениеТабличнойЧасти + """: ";
									   
		Счет= СтрокаТаблицы[СчетИмя];									   
		СтруктураОбязательныхПолей=новый Структура;		
		для сч=1 по  Счет.ВидыСубконто.Количество()  цикл
			СтруктураОбязательныхПолей.Вставить(ИмяСубконто+строка(сч));
		КонецЦикла;
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 

				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """.";

				Иначе
					СтрокаСообщения = КлючЗначение.Значение;

				КонецЕсли;

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,,,, Отказ)

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	
//ОК Калинин М. 

//ОК Калинин М. 040613 
Процедура ЗапускОбработкиУниверсальнаяВыгрузкаВSQL()  Экспорт
	имяОбработки_="ВыгрузкаВSQL(заявки, план-факт и др.)";
	попытка
		//ИмяФайла = ПолучитьИмяВременногоФайла("epf");		
		//Справочники.ВнешниеОбработки.НайтиПоНаименованию(имяОбработки_).ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
		//Обработка = ВнешниеОбработки.Создать(ИмяФайла,ложь);
		ВнешняяОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(имяОбработки_);
		Обработка = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ВнешняяОбработкаСсылка);
		Обработка.ВыполнитьЭкспортВРегламентномЗадании();
	исключение
		ЗаписьЖурналаРегистрации("Неудачный запуск обработки" 
                        	 ,УровеньЖурналаРегистрации.Ошибка
                        	 , 
							 ,
                        	 ,ОписаниеОшибки());
	
	конецпопытки;	
КонецПроцедуры	
//ОК Калинин М. 

//ОК Калинин М. 090713
Функция ПринадлежитКоллекции(значение,коллекция)
	рез=ложь;
	Если типЗнч(коллекция)=тип("СписокЗначений") тогда
		рез=не коллекция.НайтиПоЗначению(значение)=неопределено;
	ИначеЕсли типЗнч(коллекция)=тип("Массив") тогда
		рез=не коллекция.Найти(значение)=неопределено;
	Иначе
		рез=значение=коллекция;
	КонецЕсли;
	
	Возврат рез;	
КонецФункции

Процедура УстановитьЗначениеСубконто(НаборИсточник,Отбор,СторонаПроводки,УстанавливаемоеЗначение,ВыводитьСообщения=ложь) Экспорт	
	
	Если НаборИсточник.Количество()=0 тогда
		НаборИсточник.Прочитать();
	КонецЕсли;	
	Счет="стр.Счет"+СторонаПроводки;
	Субконто="стр.Субконто"+СторонаПроводки;
	ИмяСубконто="УстанавливаемоеЗначение.ИмяСубконто";
	ЗначениеСубконто="УстанавливаемоеЗначение.ЗначениеСубконто";
	Для каждого стр из НаборИсточник
	Цикл   
	
		СтрокаСоответствуетОтбору=истина;
		Для каждого отб из Отбор
		Цикл
			Если не ПринадлежитКоллекции(стр[отб.ключ],отб.Значение) тогда
				СтрокаСоответствуетОтбору=Ложь;
				прервать;				
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСоответствуетОтбору тогда
			Выполнить("БухгалтерскийУчет.УстановитьСубконто("+Счет+", "+Субконто+", "+ИмяСубконто+","+ ЗначениеСубконто+")"); 	
			Сообщить(?(ВыводитьСообщения,"Подставлено субконто "+вычислить(ИмяСубконто)+"	"+вычислить(ЗначениеСубконто),""));
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

// BIT Amerkulov 30062014 ++ 
Процедура бит_ПеремещениеОС_УстановкаОбъектаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Для Каждого СтрокаОС Из Источник.ОС Цикл
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-04-11 (#2994)
		//Если ЗначениеЗаполнено(Источник.ПодразделениеПолучатель.ОК_ОбъектСтроительства) И  СтрокаОс.ОсновноеСредство.Объект <> Источник.ПодразделениеПолучатель.ОК_ОбъектСтроительства Тогда
		Если ЗначениеЗаполнено(Источник.ОбъектПолучатель) И СтрокаОс.ОсновноеСредство.Объект <> Источник.ОбъектПолучатель Тогда
			Попытка 
				ОбъектОС = СтрокаОс.ОсновноеСредство.ПолучитьОбъект();
				//ОбъектОС.Объект = Источник.ПодразделениеПолучатель.ОК_ОбъектСтроительства;
				ОбъектОС.Объект = Источник.ОбъектПолучатель;
				// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-04-11 (#2994)
				ОбъектОС.Записать();
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Обновлен объект в карточке ОС: " + СтрокаОс.ОсновноеСредство;
				Сообщение.Сообщить();
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось обновить объект в карточке ОС: " + СтрокаОс.ОсновноеСредство;
				Сообщение.Сообщить();				
			КонецПопытки;	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
// BIT Amerkulov 30062014 --

// +СБ. Кузнецова С. 2014-09-05 
Процедура ЗаполнитьПроектДоговораПоДоговору(ПроектДоговора, Договор, Записать = Истина) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.бит_ВключатьВРеестрДоговоров КАК ВключатьВРеестрДоговоров,
	|	ДоговорыКонтрагентов.Номер КАК НомерДоговора,
	|	ДоговорыКонтрагентов.Дата КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.СрокДействия,
	|	ДоговорыКонтрагентов.Наименование,
	|	ДоговорыКонтрагентов.бит_ТипДоговора КАК ТипДоговора,
	|	ДоговорыКонтрагентов.бит_НаправлениеДоговора КАК НаправлениеДоговора,
	|	ДоговорыКонтрагентов.бит_ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДоговорыКонтрагентов.бит_ЦФО КАК ЦФО,
	|	ДоговорыКонтрагентов.бит_Проект КАК Проект,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентов.бит_СуммаДоговора КАК СуммаВзаиморасчеты,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах,
	|	ДоговорыКонтрагентов.бит_СостояниеДоговора КАК СостояниеДоговора,
	|	ДоговорыКонтрагентов.бит_СтадияДоговора КАК СтадияДоговора,
	|	ДоговорыКонтрагентов.бит_НачалоПлановое КАК НачалоПлановое,
	|	ДоговорыКонтрагентов.бит_ОкончаниеПлановое КАК ОкончаниеПлановое,
	|	ДоговорыКонтрагентов.бит_ФактическоеНачало КАК ФактическоеНачало,
	|	ДоговорыКонтрагентов.бит_ФактическоеОкончание КАК ФактическоеОкончание,
	|	ДоговорыКонтрагентов.бит_БазовыйПериодИсчисленияПериода КАК БазовыйПериодИсчисленияПериода,
	|	ДоговорыКонтрагентов.бит_ШтрафнойПроцентОтСуммыЗаПериод КАК ШтрафнойПроцентОтСуммыЗаПериод,
	|	ДоговорыКонтрагентов.бит_ШтрафнаяСуммаЗаПериод КАК ШтрафнаяСуммаЗаПериод,
	|	ДоговорыКонтрагентов.бит_ПредметДоговора КАК ПредметДоговора,
	|	ДоговорыКонтрагентов.бит_ОписаниеРабот КАК ОписаниеРабот,
	|	ДоговорыКонтрагентов.бит_ДержательДоговора КАК ДержательДоговора,
	|	ДоговорыКонтрагентов.бит_КураторДоговора КАК КураторДоговора,
	|	ДоговорыКонтрагентов.бит_КураторДоговораСоСтороныКонтрагента КАК КураторДоговораСоСтороныКонтрагента,
	|	ДоговорыКонтрагентов.бит_му_ТипКредитногоДоговора КАК СБ_ТипКредитногоДоговора,
	|	ДоговорыКонтрагентов.СБ_Захеджировано,
	|	ДоговорыКонтрагентов.СБ_КонтрагентХеджирования,
	|	ДоговорыКонтрагентов.бит_СпособРасчетаФинПлатежей КАК СпособРасчетаФинПлатежей,
	|	&Договор КАК СБ_ДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентовбит_СтатьиОборотов.РасходДоход,
	|	ДоговорыКонтрагентовбит_СтатьиОборотов.СтатьяОборотов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.бит_СтатьиОборотов КАК ДоговорыКонтрагентовбит_СтатьиОборотов
	|ГДЕ
	|	ДоговорыКонтрагентовбит_СтатьиОборотов.Ссылка = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентовбит_му_Обеспечители.Обеспечитель,
	|	ДоговорыКонтрагентовбит_му_Обеспечители.Комментарий
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.бит_му_Обеспечители КАК ДоговорыКонтрагентовбит_му_Обеспечители
	|ГДЕ
	|	ДоговорыКонтрагентовбит_му_Обеспечители.Ссылка = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентовбит_му_ОсновныеСредстваВЗалоге.ОсновноеСредство,
	|	ДоговорыКонтрагентовбит_му_ОсновныеСредстваВЗалоге.Комментарий
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.бит_му_ОсновныеСредстваВЗалоге КАК ДоговорыКонтрагентовбит_му_ОсновныеСредстваВЗалоге
	|ГДЕ
	|	ДоговорыКонтрагентовбит_му_ОсновныеСредстваВЗалоге.Ссылка = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентовбит_му_ПрочиеАктивыВЗалоге.Комментарий
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.бит_му_ПрочиеАктивыВЗалоге КАК ДоговорыКонтрагентовбит_му_ПрочиеАктивыВЗалоге
	|ГДЕ
	|	ДоговорыКонтрагентовбит_му_ПрочиеАктивыВЗалоге.Ссылка = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентовСБ_ДоговорыХеджирования.ДоговорХеджирования
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.СБ_ДоговорыХеджирования КАК ДоговорыКонтрагентовСБ_ДоговорыХеджирования
	|ГДЕ
	|	ДоговорыКонтрагентовСБ_ДоговорыХеджирования.Ссылка = &Договор";
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("Проект", ПроектДоговора);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	СтруктураКурсаВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Договор.Дата, Новый Структура("Валюта", Договор.ВалютаВзаиморасчетов));
	
	Если Записать Тогда
		Если ПроектДоговора.Пустая() Тогда
			ПроектОбъект = Документы.бит_ПроектДоговора.СоздатьДокумент();
		Иначе
			ПроектОбъект = ПроектДоговора.ПолучитьОбъект();
		КонецЕсли;
		Попытка
			ПроектОбъект.Заблокировать();
		Исключение
			//#Если Клиент Тогда
				Сообщить("Не удалось заблокировать проект договора!" + ОписаниеОшибки());
			//#КонецЕсли
			Возврат;
		КонецПопытки; 
	Иначе
		ПроектОбъект = ПроектДоговора;
	КонецЕсли;
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Реквизиты = Результаты[0].Выбрать();
	Реквизиты.Следующий();
	ТЧ_СтатьиОборотов = Результаты[1].Выгрузить();
	ТЧ_Обеспечители = Результаты[2].Выгрузить();
	ТЧ_ОсновныеСредстваВЗалоге = Результаты[3].Выгрузить();
	ТЧ_ПрочиеАктивыВЗалоге = Результаты[4].Выгрузить();
	ТЧ_ДоговорыХеджирования = Результаты[5].Выгрузить();
	
	СписокРеквизитовДляСопоставления = "Организация, Контрагент, ВидДоговора, ВключатьВРеестрДоговоров, НомерДоговора, ДатаДоговора, СрокДействия,
	|Наименование, ТипДоговора, НаправлениеДоговора, ПодразделениеОрганизации, ЦФО, Проект, ВалютаВзаиморасчетов, СуммаВзаиморасчеты,
	|РасчетыВУсловныхЕдиницах, СостояниеДоговора, СтадияДоговора, НачалоПлановое, ОкончаниеПлановое, ФактическоеНачало, ФактическоеОкончание,
	|БазовыйПериодИсчисленияПериода, ШтрафнойПроцентОтСуммыЗаПериод, ШтрафнаяСуммаЗаПериод, ПредметДоговора, ОписаниеРабот, ДержательДоговора,
	|КураторДоговора, КураторДоговораСоСтороныКонтрагента, СБ_ТипКредитногоДоговора, СБ_ДоговорКонтрагента, СБ_Захеджировано, 
	|СБ_КонтрагентХеджирования, СпособРасчетаФинПлатежей";
	ЗаполнитьЗначенияСвойств(ПроектОбъект, Реквизиты);
	ПроектОбъект.КурсВзаиморасчетов = СтруктураКурсаВалюты.Курс;
	ПроектОбъект.КратностьВзаиморасчетов = СтруктураКурсаВалюты.Кратность;
	ПроектОбъект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	ПроектОбъект.СуммаНДСВзаиморасчеты = 0;
	ПроектОбъект.СБ_ДоговорКонтрагента = Договор;
	ПроектОбъект.Дата = Договор.Дата;
	
	ПроектОбъект.СтатьиОборотов.Загрузить(ТЧ_СтатьиОборотов);
	ПроектОбъект.СБ_Обеспечители.Загрузить(ТЧ_Обеспечители);
	ПроектОбъект.СБ_ОсновныеСредстваВЗалоге.Загрузить(ТЧ_ОсновныеСредстваВЗалоге);
	ПроектОбъект.СБ_ПрочиеАктивыВЗалоге.Загрузить(ТЧ_ПрочиеАктивыВЗалоге);
	ПроектОбъект.СБ_ДоговорыХеджирования.Загрузить(ТЧ_ДоговорыХеджирования);
	
	Если Записать Тогда
		Попытка
			ПроектОбъект.Записать();
		Исключение
			//#Если Клиент Тогда
				Сообщить("Не удалось записать проект договора!" + ОписаниеОшибки());
			//#КонецЕсли
		КонецПопытки;
		Если ПроектДоговора.Пустая() Тогда
			ПроектДоговора = ПроектОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияПараметровФинансовогоДоговора(ПроектОбъект.Ссылка, Договор);
	
КонецПроцедуры

Процедура ЗаполнитьДоговорПоПроектуДоговора(Договор, ПроектДоговора, Записать = Истина) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	бит_ПроектДоговора.Организация,
	|	бит_ПроектДоговора.Контрагент КАК Владелец,
	|	бит_ПроектДоговора.ВидДоговора,
	|	бит_ПроектДоговора.ВключатьВРеестрДоговоров КАК бит_ВключатьВРеестрДоговоров,
	|	бит_ПроектДоговора.НомерДоговора КАК Номер,
	|	бит_ПроектДоговора.ДатаДоговора КАК Дата,
	|	бит_ПроектДоговора.СрокДействия,
	|	бит_ПроектДоговора.Наименование,
	|	бит_ПроектДоговора.ТипДоговора КАК бит_ТипДоговора,
	|	бит_ПроектДоговора.НаправлениеДоговора КАК бит_НаправлениеДоговора,
	|	бит_ПроектДоговора.ПодразделениеОрганизации КАК бит_ПодразделениеОрганизации,
	|	бит_ПроектДоговора.ЦФО КАК бит_ЦФО,
	|	бит_ПроектДоговора.Проект КАК бит_Проект,
	|	бит_ПроектДоговора.ВалютаВзаиморасчетов,
	|	бит_ПроектДоговора.СуммаВзаиморасчеты КАК бит_СуммаДоговора,
	|	бит_ПроектДоговора.РасчетыВУсловныхЕдиницах,
	|	бит_ПроектДоговора.СостояниеДоговора КАК бит_СостояниеДоговора,
	|	бит_ПроектДоговора.СтадияДоговора КАК бит_СтадияДоговора,
	|	бит_ПроектДоговора.НачалоПлановое КАК бит_НачалоПлановое,
	|	бит_ПроектДоговора.ОкончаниеПлановое КАК бит_ОкончаниеПлановое,
	|	бит_ПроектДоговора.ФактическоеНачало КАК бит_ФактическоеНачало,
	|	бит_ПроектДоговора.ФактическоеОкончание КАК бит_ФактическоеОкончание,
	|	бит_ПроектДоговора.БазовыйПериодИсчисленияПериода КАК бит_БазовыйПериодИсчисленияПериода,
	|	бит_ПроектДоговора.ШтрафнойПроцентОтСуммыЗаПериод КАК бит_ШтрафнойПроцентОтСуммыЗаПериод,
	|	бит_ПроектДоговора.ШтрафнаяСуммаЗаПериод КАК бит_ШтрафнаяСуммаЗаПериод,
	|	бит_ПроектДоговора.ПредметДоговора КАК бит_ПредметДоговора,
	|	бит_ПроектДоговора.ОписаниеРабот КАК бит_ОписаниеРабот,
	|	бит_ПроектДоговора.ДержательДоговора КАК бит_ДержательДоговора,
	|	бит_ПроектДоговора.КураторДоговора КАК бит_КураторДоговора,
	|	бит_ПроектДоговора.КураторДоговораСоСтороныКонтрагента КАК бит_КураторДоговораСоСтороныКонтрагента,
	|	бит_ПроектДоговора.СБ_ТипКредитногоДоговора КАК бит_му_ТипКредитногоДоговора,
	|	бит_ПроектДоговора.СБ_Захеджировано,
	|	бит_ПроектДоговора.СБ_КонтрагентХеджирования,
	|	бит_ПроектДоговора.СпособРасчетаФинПлатежей КАК бит_СпособРасчетаФинПлатежей,
	|	&Проект КАК бит_ПроектДоговора
	|ИЗ
	|	Документ.бит_ПроектДоговора КАК бит_ПроектДоговора
	|ГДЕ
	|	бит_ПроектДоговора.Ссылка = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ПроектДоговораСтатьиОборотов.РасходДоход,
	|	бит_ПроектДоговораСтатьиОборотов.СтатьяОборотов
	|ИЗ
	|	Документ.бит_ПроектДоговора.СтатьиОборотов КАК бит_ПроектДоговораСтатьиОборотов
	|ГДЕ
	|	бит_ПроектДоговораСтатьиОборотов.Ссылка = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ПроектДоговораСБ_Обеспечители.Обеспечитель,
	|	бит_ПроектДоговораСБ_Обеспечители.Комментарий
	|ИЗ
	|	Документ.бит_ПроектДоговора.СБ_Обеспечители КАК бит_ПроектДоговораСБ_Обеспечители
	|ГДЕ
	|	бит_ПроектДоговораСБ_Обеспечители.Ссылка = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ПроектДоговораСБ_ОсновныеСредстваВЗалоге.ОсновноеСредство,
	|	бит_ПроектДоговораСБ_ОсновныеСредстваВЗалоге.Комментарий
	|ИЗ
	|	Документ.бит_ПроектДоговора.СБ_ОсновныеСредстваВЗалоге КАК бит_ПроектДоговораСБ_ОсновныеСредстваВЗалоге
	|ГДЕ
	|	бит_ПроектДоговораСБ_ОсновныеСредстваВЗалоге.Ссылка = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ПроектДоговораСБ_ПрочиеАктивыВЗалоге.Комментарий
	|ИЗ
	|	Документ.бит_ПроектДоговора.СБ_ПрочиеАктивыВЗалоге КАК бит_ПроектДоговораСБ_ПрочиеАктивыВЗалоге
	|ГДЕ
	|	бит_ПроектДоговораСБ_ПрочиеАктивыВЗалоге.Ссылка = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ПроектДоговораСБ_ДоговорыХеджирования.ДоговорХеджирования
	|ИЗ
	|	Документ.бит_ПроектДоговора.СБ_ДоговорыХеджирования КАК бит_ПроектДоговораСБ_ДоговорыХеджирования
	|ГДЕ
	|	бит_ПроектДоговораСБ_ДоговорыХеджирования.Ссылка = &Проект";
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("Проект", ПроектДоговора);
	
	Если Записать Тогда
		ДоговорОбъект = Договор.ПолучитьОбъект();
		Попытка
			ДоговорОбъект.Заблокировать();
		Исключение
			//#Если Клиент Тогда
				Сообщить("Не удалось заблокировать договор контрагента!" + ОписаниеОшибки());
			//#КонецЕсли
			Возврат;
		КонецПопытки; 
	Иначе
		ДоговорОбъект = Договор;
	КонецЕсли;
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Реквизиты = Результаты[0].Выбрать();
	Реквизиты.Следующий();
	ТЧ_СтатьиОборотов = Результаты[1].Выгрузить();
	ТЧ_Обеспечители = Результаты[2].Выгрузить();
	ТЧ_ОсновныеСредстваВЗалоге = Результаты[3].Выгрузить();
	ТЧ_ПрочиеАктивыВЗалоге = Результаты[4].Выгрузить();
	ТЧ_ДоговорыХеджирования = Результаты[5].Выгрузить();
	
	СписокРеквизитовДляСопоставления = "Организация,Владелец, ВидДоговора, бит_ВключатьВРеестрДоговоров, Номер, Дата, СрокДействия,
	|Наименование, бит_ТипДоговора, бит_НаправлениеДоговора, бит_ПодразделениеОрганизации, бит_ЦФО, бит_Проект, ВалютаВзаиморасчетов,
	|бит_СуммаДоговора, РасчетыВУсловныхЕдиницах, бит_СостояниеДоговора, бит_СтадияДоговора, бит_НачалоПлановое, бит_ОкончаниеПлановое,
	|бит_ФактическоеНачало, бит_ФактическоеОкончание, бит_БазовыйПериодИсчисленияПериода, бит_ШтрафнойПроцентОтСуммыЗаПериод,
	|бит_ШтрафнаяСуммаЗаПериод, бит_ПредметДоговора, бит_ОписаниеРабот, бит_ДержательДоговора, бит_КураторДоговора, бит_КураторДоговораСоСтороныКонтрагента,
	|бит_му_ТипКредитногоДоговора, СБ_Захеджировано, СБ_КонтрагентХеджирования, бит_СпособРасчетаФинПлатежей";
	ЗаполнитьЗначенияСвойств(ДоговорОбъект, Реквизиты, СписокРеквизитовДляСопоставления);
	
	ДоговорОбъект.бит_СтатьиОборотов.Загрузить(ТЧ_СтатьиОборотов);
	ДоговорОбъект.бит_му_Обеспечители.Загрузить(ТЧ_Обеспечители);
	ДоговорОбъект.бит_му_ОсновныеСредстваВЗалоге.Загрузить(ТЧ_ОсновныеСредстваВЗалоге);
	ДоговорОбъект.бит_му_ПрочиеАктивыВЗалоге.Загрузить(ТЧ_ПрочиеАктивыВЗалоге);
	ДоговорОбъект.СБ_ДоговорыХеджирования.Загрузить(ТЧ_ДоговорыХеджирования);
	
	Если Записать Тогда
		Попытка
			ДоговорОбъект.Записать();
		Исключение
			//#Если Клиент Тогда
				Сообщить("Не удалось записать договор контрагента!" + ОписаниеОшибки());
			//#КонецЕсли
		КонецПопытки;
	КонецЕсли;
	
	ЗаполнитьЗначенияПараметровФинансовогоДоговора(ДоговорОбъект.Ссылка, ПроектДоговора);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметровФинансовогоДоговора(Договор, ПроектДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.Организация,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.Контрагент,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.СоставляющаяПлатежа,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.Параметр,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
	|ГДЕ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента = &ПроектДоговора";
	
	Запрос.УстановитьПараметр("ПроектДоговора", ПроектДоговора);
	
	Результат = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.бит_ЗначенияПараметровФинансовыхДоговоров.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(Договор, Истина);
	
	НаборЗаписей.Прочитать();
	
	ТаблицаДляЗагрузки = Результат.Выгрузить();
	ТаблицаДляЗагрузки.ЗаполнитьЗначения(Договор, "ДоговорКонтрагента");
	
	НаборЗаписей.Загрузить(ТаблицаДляЗагрузки);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры	
// -СБ. Кузнецова С.

// 1С-ИжТиСи Полина 16.07.2015 (
Функция ГруппыПользователя(Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПользователейПользователиГруппы.ГруппаПользователей КАК Группа
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК ГруппыПользователейПользователиГруппы
	|ГДЕ
	|	ГруппыПользователейПользователиГруппы.Пользователь = &Пользователь
	|	И ГруппыПользователейПользователиГруппы.ГруппаПользователей ССЫЛКА Справочник.ГруппыПользователей";
	
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Группа");
	
КонецФункции
// 1С-ИжТиСи Полина 16.07.2015 )

//ижтиси, шадрин, 18.08.2015(
// ОКЕЙ Цветков А.(СофтЛаб) Начало 2018-06-06 (#3014)
//Функция ПолучитьКодМассив(объект) Экспорт
Функция ПолучитьСпособыОтраженияРасходовПоАмортизации(Организация, Знач ОбъектСтроительства) Экспорт
// ОКЕЙ Цветков А.(СофтЛаб) Конец 2018-06-06 (#3014)	

	// ОКЕЙ Цветков А.(СофтЛаб) Начало 2018-06-06 (#3014)
	//Запрос=новый Запрос("ВЫБРАТЬ
	//					|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка.Код
	//					|ИЗ
	//					|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	//					|ГДЕ
	//					|	СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 = &Субконто2
	//					|
	//					|СГРУППИРОВАТЬ ПО
	//					|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка.Код");
	//Запрос.УстановитьПараметр("Субконто2",объект);
	//
	//Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	
	Пока ЗначениеЗаполнено(ОбъектСтроительства.Родитель) Цикл
		ОбъектСтроительства = ОбъектСтроительства.Родитель;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыСубконто.Ссылка КАК Счет,
	|	ВидыСубконто.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВтНомераСубконтоПоСчету
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Способы.Ссылка.Код КАК Код,
	|	Способы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК Способы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтНомераСубконтоПоСчету КАК НомераСубконтоПоСчету
	|		ПО Способы.СчетЗатрат = НомераСубконтоПоСчету.Счет
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НомераСубконтоПоСчету.НомерСтроки = 1
	|				ТОГДА Способы.Субконто1 В ИЕРАРХИИ (&ОбъектСтроительства)
	|			КОГДА НомераСубконтоПоСчету.НомерСтроки = 2
	|				ТОГДА Способы.Субконто2 В ИЕРАРХИИ (&ОбъектСтроительства)
	|			КОГДА НомераСубконтоПоСчету.НомерСтроки = 3
	|				ТОГДА Способы.Субконто3 В ИЕРАРХИИ (&ОбъектСтроительства)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И Способы.Ссылка.Организация В(&Организация)"
	;	
	Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СписокСпособов = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСпособов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокСпособов;
	// ОКЕЙ Цветков А.(СофтЛаб) Конец 2018-06-06 (#3014)
	
КонецФункции

//izhtc_РазработанаФункцияПроцедура_шадрин_18.08.2015
Процедура НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(ЭлементФормы, Организация, СтандартнаяОбработка,Объект, ТекущийСпособОтражения = Неопределено) Экспорт
	//удалить процедуру при завершении проекта (шадрин)
	Сообщить("Вызов данной функции перенесен в общий модуль бит_БК_ОбщийКлиент. Обратить внимание, что добавлен параметр 'ТекущийСпособОтражения'");
КонецПроцедуры
//ижтиси, шадрин, 18.08.2015)

// Ок Видяйкин 20161216 +
Функция ОтправитьСообщениеНовая(СообщениеСтруктура, НастройкиДоставки, СтруктураПараметров, ПротоколОтправки="") 
	
	флДействиеВыполнено = Ложь;			
	Отказ = Ложь;
		
	Если НЕ Отказ Тогда
		
		// сформируем почтовый профиль
		ИПП 					= Новый ИнтернетПочтовыйПрофиль;
		ИПП.АдресСервераSMTP 	= НастройкиДоставки.АдресSMTP;   
		ИПП.ПортSMTP 			= НастройкиДоставки.ПортSMTP;
		Если НЕ ПустаяСтрока(СокрЛП(НастройкиДоставки.SMTPАутентификация)) Тогда
			ИПП.АутентификацияSMTP 	= СпособSMTPАутентификации[СокрЛП(НастройкиДоставки.SMTPАутентификация)];
		КонецЕсли; 
		ИПП.ПользовательSMTP 	= НастройкиДоставки.ПользовательSMTP;
		ИПП.ПарольSMTP 			= НастройкиДоставки.ПарольSMTP;
		//ИПП.АдресСервераPOP3    = НастройкиДоставки.АдресPOP3;
		//ИПП.ПортPOP3            = НастройкиДоставки.ПортPOP3;
		//Если НЕ ПустаяСтрока(СокрЛП(НастройкиДоставки.POPАутентификация)) Тогда
		//	
		//	ИПП.АутентификацияPOP3  = СпособPOP3Аутентификации[СокрЛП(НастройкиДоставки.POPАутентификация)];
		//	
		//КонецЕсли; 
		//ИПП.Пользователь        = НастройкиДоставки.ПользовательPOP3;
		//ИПП.Пароль              = НастройкиДоставки.ПарольPOP3;
		
		// Создадим сообщение 
		Сообщение = Новый ИнтернетПочтовоеСообщение; 
		Сообщение.Отправитель.Адрес = НастройкиДоставки.EMailАдресОтправителя;
		Сообщение.ОбратныйАдрес.Добавить(НастройкиДоставки.EMailАдресОтправителя);
		//Для шаг = 1 По 10 Цикл
		//	Попытка
		//		времЗнач = "АдресПолучателя"+СокрЛП(Строка(шаг));
		//		Если СтруктураПараметров.Свойство(времЗнач) Тогда 
		//			Сообщение.Получатели.Добавить(времЗнач);
		//			Сообщение.Получатели.Добавить(СтруктураПараметров.АдресПолучателяКопии2);
		//		Иначе	
		//			Прервать;
		//		КонецЕсли;
		//	Исключение	
		//		Прервать;
		//	КонецПопытки	
		//КонецЦикла;
		//шаг=1;
		ВремСтрока="";
		Для Каждого Элемент из СтруктураПараметров Цикл 
			Сообщение.Получатели.Добавить(Элемент.Значение);
			ВремСтрока=ВремСтрока+" ; "+СокрЛП(Элемент.Значение);
			//шаг=шаг+1;
		КонецЦикла; 
		
		Сообщение.Тема = СообщениеСтруктура.Заголовок; 
		Сообщение.Тексты.Добавить(СообщениеСтруктура.Текст + Символы.ПС + СообщениеСтруктура.Подпись); 
		
		// Подключимся и отправим сформированное сообщение
		Попытка
			
			Почта = Новый ИнтернетПочта; 
			Почта.Подключиться(ИПП); 
			Почта.Послать(Сообщение); 
			флДействиеВыполнено = Истина;
			ПротоколОтправки    = "Сообщение отправлено по адресу "
			                       +ВремСтрока
								   +"  "
								   +ТекущаяДата()
								   +".";
			
		Исключение
			
			флДействиеВыполнено = Ложь;
			ПротоколОтправки    = "Сообщение  не удалось отправить по адресу "
			                       +ВремСтрока
								   +"  "
								   +ТекущаяДата()
								   +" по причине "
								   +ОписаниеОшибки()
								   +".";
			
		КонецПопытки;
		
		Почта.Отключиться(); 
		
	КонецЕсли; 
	
	Возврат флДействиеВыполнено;
	
КонецФункции

Функция ЗапуститьОтправкуСообщения(вхСообщение_Заголовок="", вхТипТекстаСообщения="", вхСообщение_Подпись="", вхСписокПолучателей="", вхКодСпрНастройки="") Экспорт
	//времСообщение_Заголовок = "Информация по загрузке данных";
	//времТипТекстаСообщения  = "Загрузка данных произведена. Загружено: "+КоличествоЗагруженных+" документов ""Операция Аксапты""";
	//времСообщение_Подпись   = "Информация о работе обработки ""Загрузка данных из Аксапты"". Пользователь: "+ПользователиИнформационнойБазы.ТекущийПользователь();
	ФлагвхСписокПолучателей = 0;
	Если вхСписокПолучателей=""	Тогда
		ФлагвхСписокПолучателей = 0;
	ИначеЕсли ТипЗнч(вхСписокПолучателей) = Тип("СписокЗначений") Тогда
		Если вхСписокПолучателей.Количество() > 0 Тогда
			ФлагвхСписокПолучателей = 1;
		КонецЕсли;	
	КонецЕсли;	
    Если ФлагвхСписокПолучателей = 0 Тогда
		 вхСписокПолучателей = Новый СписокЗначений();
		 вхСписокПолучателей.Добавить("valeriy.vidyaykin@okmarket.ru");
		 вхСписокПолучателей.Добавить("Tatyana.Dovbeshka@okmarket.ru");
		 вхСписокПолучателей.Добавить("Svetlana.Averyanova@okmarket.ru");
		 //вхСписокПолучателей.Добавить("valeriy.vidyaykin@okmarket.ru");
	КонецЕсли;	
	
	ПротоколОтправки        = "";
	// Подготовим структуру параметров настройки электронной почты для отправки.
	времКодСпрбит_фн_НастройкиДоставкиОповещений="000000001";
	НастройкиДоставки = Новый Структура;
	ТекСтрокаСпрНастройкиДоставкиОповещений = Справочники.бит_фн_НастройкиДоставкиОповещений.НайтиПоКоду(времКодСпрбит_фн_НастройкиДоставкиОповещений);    	
	Если ТекСтрокаСпрНастройкиДоставкиОповещений = Неопределено  Тогда
		Сообщить("ОШИБКА! Не найден элемент справочника бит_фн_НастройкиДоставкиОповещений с кодом:"""+времКодСпрбит_фн_НастройкиДоставкиОповещений+"""");
		Возврат 0;
	ИначеЕсли ТекСтрокаСпрНастройкиДоставкиОповещений.НастройкиДоставки.Количество()=0	Тогда 
		Сообщить("ОШИБКА! У элемента справочника бит_фн_НастройкиДоставкиОповещений с кодом:"""+времКодСпрбит_фн_НастройкиДоставкиОповещений+""" не заполнена табличная часть!");
		Возврат 0;
	КонецЕсли;	
	
	Для Каждого ТекущаяСтрока Из ТекСтрокаСпрНастройкиДоставкиОповещений.НастройкиДоставки Цикл 
		НастройкиДоставки.Вставить(ТекущаяСтрока.ИмяНастройки, ТекущаяСтрока.ЗначениеНастройки); 
	КонецЦикла;
	
	// Подготовим структуру сообщений и структуру параметров для отправки.
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("Заголовок", вхСообщение_Заголовок);
	СтруктураСообщения.Вставить("Текст"    , вхТипТекстаСообщения);
	СтруктураСообщения.Вставить("Подпись"  , вхСообщение_Подпись);
	
	СтруктураПараметров = Новый Структура;
	шаг=1;
	Для Каждого Элемент Из вхСписокПолучателей Цикл
	    СтруктураПараметров.Вставить("АдресПолучателя"+СокрЛП(Строка(шаг)), Элемент.Значение);
		шаг=шаг+1;
	КонецЦикла;
	
	ПротоколОтправки    = "";
			
	флДействиеВыполнено = ОтправитьСообщениеНовая(СтруктураСообщения
																,НастройкиДоставки
																,СтруктураПараметров
																,ПротоколОтправки);

	Возврат флДействиеВыполнено;															
КонецФункции
// Ок Видяйкин 20161216 -

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-27 (#3045)
Функция ПроверитьУникальностьФВБПоКонтрактам(ФВБКонтракт) Экспорт
	
	пЗапрос = Новый Запрос;
	пЗапрос.УстановитьПараметр("ФВБКонтракт"		,	ФВБКонтракт);
			
	пТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_ФормаВводаБюджета.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК ФВБ_Контракт
	|		ПО (ФВБ_Контракт.Ссылка = &ФВБКонтракт)
	|			И бит_ФормаВводаБюджета.Ссылка <> ФВБ_Контракт.Ссылка
	|			И (бит_ФормаВводаБюджета.Проведен)
	|			И (бит_ФормаВводаБюджета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт))
	|			И (ФВБ_Контракт.ДоговорКонтрагента = бит_ФормаВводаБюджета.ДоговорКонтрагента)
	|			И (ФВБ_Контракт.бит_БК_НомерЗаявки = бит_ФормаВводаБюджета.бит_БК_НомерЗаявки)";
	
	пЗапрос.Текст = пТекст;
	
	пРезультат = пЗапрос.Выполнить();
	
	Если пРезультат.Пустой() Тогда 
		Возврат ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
	КонецЕсли;
	
	Выборка = пРезультат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;	
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-27 (#3045)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-10 (#3052)
Процедура УстановитьУсловноеОформлениеДопАналитик(Форма,ИмяТЧ) Экспорт
	
	Перем пНомерЗаявки;
	
	Форма.фКэшЗначений.Свойство("НомерЗаявки", пНомерЗаявки);
	Если Не ЗначениеЗаполнено(пНомерЗаявки) Тогда 
		пНомерЗаявки = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Форма.Объект.Ссылка,
			Форма.фКэшЗначений.АналитикаНомерЗаявки, ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
		Если ЗначениеЗаполнено(пНомерЗаявки) Тогда 
		  	Форма.фКэшЗначений.Вставить("НомерЗаявки",пНомерЗаявки);
		КонецЕсли;
	КонецЕсли;
	
	пИменаРеквизитов = "ок_Период,ок_ЦФО,ок_СтатьяОборотов,ок_Проект,Аналитика_2";
	мИменаРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пИменаРеквизитов);
	Для Каждого пИмяРеквизита Из мИменаРеквизитов Цикл 
		
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();  
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ИмяТЧ+пИмяРеквизита);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект."+ИмяТЧ+"."+?(пИмяРеквизита = "Аналитика_2", "ок_","")+пИмяРеквизита, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда 
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Иначе 
			
			
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", ЗначениеЗаполнено(пНомерЗаявки));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-10 (#3052)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3065)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
//Функция СоздатьЗаявкиРасходованияДСНаСервере(Ссылка,УчитыватьРанееСозданныеЗаявки = Ложь) Экспорт
Функция СоздатьЗаявкиРасходованияДСНаСервере(Ссылка,УчитыватьРанееСозданныеЗаявки = Ложь, ВариантЗаполнения = "") Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)
	мСозданныеДокументы = Новый Массив;
	пОшибки = "";
	
	ЗапросТЧ = Новый Запрос;
	ЗапросТЧ.УстановитьПараметр("Ссылка"							, Ссылка);
	ЗапросТЧ.УстановитьПараметр("ОперационныйСценарийПланирования"  , СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования"));
	ЗапросТЧ.УстановитьПараметр("ИнвестиционныйСценарийПланирования", СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования"));
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-15 (#3236)
	ЗапросТЧ.УстановитьПараметр("ОперативныйСценарийПланирования", СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ОперативныйСценарийПланирования"));	
	ЗапросТЧ.УстановитьПараметр("ДействуетСтараяСхема" 			 , СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ДатаНачалаРаботыНовойЦелевойСхемыДвиженийПоБК",Дата('00010101'))>ТекущаяДата());		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-15 (#3236)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
	ЗапросТЧ.УстановитьПараметр("ВариантЗаполнения", ВариантЗаполнения);
	ЗапросТЧ.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)
	
	ЗапросТЧ.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СоответствияАналитик.ПраваяАналитика_1 КАК СтатьяОборотов,
	|	ТЧ_ФВБ.СтатьяОборотов КАК Ок_СтатьяОборотовБДР,
	|	ТЧ_ФВБ.ЦФО КАК ЦФО,
	|	ТЧ_ФВБ.Контрагент КАК Контрагент,
	|	ТЧ_ФВБ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТЧ_ФВБ.ДоговорКонтрагента.СБ_ПрофильРазноски КАК СБ_ПрофильРазноски,
	|	ТЧ_ФВБ.ДоговорКонтрагента.Номер КАК НомерДоговораКонтрагента,
	|	ТЧ_ФВБ.ДоговорКонтрагента.Ок_ПересчетКурса КАК Ок_ПересчетКурса,
	|	ТЧ_ФВБ.Проект КАК Проект,
	|	ТЧ_ФВБ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТЧ_ФВБ.БанковскийСчет КАК БанковскийСчет,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-18 (#3145)
	//|	ТЧ_ФВБ.Аналитика_1 КАК Аналитика_1,	
	//Заменено на:
	|	ВЫБОР
	|		КОГДА бит_ФормаВводаБюджета.Ссылка ЕСТЬ NULL
	|			ТОГДА ТЧ_ФВБ.Аналитика_1
	|		ИНАЧЕ бит_ФормаВводаБюджета.бит_БК_НомерЗаявки
	|	КОНЕЦ КАК Аналитика_1,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-18 (#3145)
	|	ТЧ_ФВБ.Аналитика_2 КАК Аналитика_2,
	|	СУММА(ТЧ_ФВБ.Количество) КАК Количество,
	|	СУММА(ТЧ_ФВБ.Сумма) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ТЧ_ФВБ.бит_БК_СуммаБезНДС, 0)) КАК СуммаБезНДС,
	|	ТЧ_ФВБ.бит_СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТЧ_ФВБ.БИТ_СуммаСверхБюджета > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СверхБюджета,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ВариантЗаполнения = ""ИсполнителемИзТонкойФормы""
	|				ТОГДА ТЧ_ФВБ.бит_БК_ВалютаДоговора
	|			ИНАЧЕ &ВалютаРегламентированногоУчета
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ВариантЗаполнения = ""ИсполнителемИзТонкойФормы""
	|				ТОГДА ТЧ_ФВБ.бит_БК_Курс
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КурсДокумента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ВариантЗаполнения = ""ИсполнителемИзТонкойФормы""
	|				ТОГДА ТЧ_ФВБ.бит_БК_Кратность
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КратностьДокумента,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)
	|	ВЫБОР
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-15 (#3236)
	|		КОГДА &ДействуетСтараяСхема
	|			ТОГДА &ОперативныйСценарийПланирования
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-15 (#3236)
	|		КОГДА ТЧ_ФВБ.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.Выручка)
	|			ТОГДА &ОперационныйСценарийПланирования
	|		КОГДА ТЧ_ФВБ.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА &ИнвестиционныйСценарийПланирования
	|	КОНЕЦ КАК Сценарий,
	|	ТЧ_ФВБ.Ссылка.бит_БК_Инициатор КАК бит_БК_Инициатор,
	|	ТЧ_ФВБ.Ссылка КАК ФВБ,
	|	ВЫБОР
	|		КОГДА ТЧ_ФВБ.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ТЧ_ФВБ.Ссылка.бит_БК_Организация
	|		ИНАЧЕ ТЧ_ФВБ.ДоговорКонтрагента.Организация
	|	КОНЕЦ КАК Организация,
	|	"""" КАК ОК_ID_Разноска_ДокОснования
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-02 (#3274)
	|ПОМЕСТИТЬ ВТ_Итоговая
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-02 (#3274)
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК ТЧ_ФВБ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|		ПО ТЧ_ФВБ.СтатьяОборотов = бит_СоответствияАналитик.ЛеваяАналитика_1
	|			И (бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-18 (#3145)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	|		ПО ТЧ_ФВБ.Аналитика_1 = бит_ФормаВводаБюджета.Ссылка
	|			И (бит_ФормаВводаБюджета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт))
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-18 (#3145)
	|ГДЕ
	|	ТЧ_ФВБ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧ_ФВБ.ДоговорКонтрагента,
	|	бит_СоответствияАналитик.ПраваяАналитика_1,
	|	ТЧ_ФВБ.СтатьяОборотов,
	|	ТЧ_ФВБ.ЦФО,
	|	ТЧ_ФВБ.Контрагент,
	|	ТЧ_ФВБ.НоменклатурнаяГруппа,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-18 (#3145)
	//|	ТЧ_ФВБ.Аналитика_1,
	//Заменено на:
	|	ВЫБОР
	|		КОГДА бит_ФормаВводаБюджета.Ссылка ЕСТЬ NULL
	|			ТОГДА ТЧ_ФВБ.Аналитика_1
	|		ИНАЧЕ бит_ФормаВводаБюджета.бит_БК_НомерЗаявки
	|	КОНЕЦ,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-18 (#3145)	
	|	ТЧ_ФВБ.Аналитика_2,
	|	ТЧ_ФВБ.бит_СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТЧ_ФВБ.БИТ_СуммаСверхБюджета > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТЧ_ФВБ.Проект,
	|	ТЧ_ФВБ.БанковскийСчет,
	|	ТЧ_ФВБ.Ссылка,
	|	ВЫБОР
	|		КОГДА ТЧ_ФВБ.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ТЧ_ФВБ.Ссылка.бит_БК_Организация
	|		ИНАЧЕ ТЧ_ФВБ.ДоговорКонтрагента.Организация
	|	КОНЕЦ,
	|	ТЧ_ФВБ.ДоговорКонтрагента.СБ_ПрофильРазноски,
	|	ТЧ_ФВБ.ДоговорКонтрагента.Номер,
	|	ТЧ_ФВБ.ДоговорКонтрагента.Ок_ПересчетКурса,
	|	ВЫБОР
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-15 (#3236)
	|		КОГДА &ДействуетСтараяСхема
	|			ТОГДА &ОперативныйСценарийПланирования
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-15 (#3236)
	|		КОГДА ТЧ_ФВБ.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.Выручка)
	|			ТОГДА &ОперационныйСценарийПланирования
	|		КОГДА ТЧ_ФВБ.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА &ИнвестиционныйСценарийПланирования
	|	КОНЕЦ,
	|	ТЧ_ФВБ.Ссылка.бит_БК_Инициатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_СоответствияАналитик.ПраваяАналитика_1,
	|	ВТ0_ТЧ_БО.СтатьяОборотов,
	|	ВТ0_ТЧ_БО.ЦФО,
	|	ВТ0_ТЧ_БО.Контрагент,
	|	ВТ0_ТЧ_БО.ДоговорКонтрагента,
	|	ВТ0_ТЧ_БО.ДоговорКонтрагента.СБ_ПрофильРазноски,
	|	ВТ0_ТЧ_БО.ДоговорКонтрагента.Номер,
	|	ВТ0_ТЧ_БО.ДоговорКонтрагента.Ок_ПересчетКурса,
	|	ВТ0_ТЧ_БО.Проект,
	|	ВТ0_ТЧ_БО.НоменклатурнаяГруппа,
	|	ВТ0_ТЧ_БО.БанковскийСчет,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-18 (#3145)
	//|	ВТ0_ТЧ_БО.Аналитика_1,
	//Заменено на:
	|	ВЫБОР
	|		КОГДА ФВБ_Контракт.Ссылка ЕСТЬ NULL
	|			ТОГДА ВТ0_ТЧ_БО.Аналитика_1
	|		ИНАЧЕ ФВБ_Контракт.бит_БК_НомерЗаявки
	|	КОНЕЦ,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-18 (#3145)	
	|	ВТ0_ТЧ_БО.Аналитика_2,
	|	СУММА(ВТ0_ТЧ_БО.Количество),
	|	СУММА(ВТ0_ТЧ_БО.Сумма + ВТ0_ТЧ_БО.СуммаНДС),
	|	СУММА(ВТ0_ТЧ_БО.Сумма),
	|	ВТ0_ТЧ_БО.СтавкаНДС,
	|	ВТ0_ТЧ_БО.Ссылка.СверхБюджета,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	1 КАК КурсДокумента,
	|	1 КАК КратностьДокумента,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)
	|	ВЫБОР   
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-15 (#3236)
	|		КОГДА &ДействуетСтараяСхема
	|			ТОГДА &ОперативныйСценарийПланирования
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-15 (#3236)
	|		КОГДА ВТ0_ТЧ_БО.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.Выручка)
	|			ТОГДА &ОперационныйСценарийПланирования
	|		КОГДА ВТ0_ТЧ_БО.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА &ИнвестиционныйСценарийПланирования
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ФВБ_БО.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
	|		ИНАЧЕ ФВБ_БО.бит_БК_Инициатор
	|	КОНЕЦ,
	|	ЕСТЬNULL(ФВБ_БО.Ссылка, ЗНАЧЕНИЕ(Документ.бит_ФормаВводаБюджета.ПустаяСсылка)),
	|	ВТ0_ТЧ_БО.Ссылка.бит_Организация,
	|	ВТ0_ТЧ_БО.Ссылка.ОК_ID_Разноска
	|ИЗ
	|	Документ.бит_БюджетнаяОперация.БДДС КАК ВТ0_ТЧ_БО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|		ПО ВТ0_ТЧ_БО.СтатьяОборотов = бит_СоответствияАналитик.ЛеваяАналитика_1
	|			И (бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК ФВБ_БО
	|		ПО ВТ0_ТЧ_БО.Ссылка.НомерЗаявки = ФВБ_БО.Ссылка
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-18 (#3145)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК ФВБ_Контракт
	|		ПО ВТ0_ТЧ_БО.Аналитика_1 = ФВБ_Контракт.Ссылка
	|			И (ФВБ_Контракт.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт))
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-18 (#3145)
	|ГДЕ
	|	ВТ0_ТЧ_БО.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ0_ТЧ_БО.Ссылка.СверхБюджета,
	|	ЕСТЬNULL(ФВБ_БО.Ссылка, ЗНАЧЕНИЕ(Документ.бит_ФормаВводаБюджета.ПустаяСсылка)),
	|	ВТ0_ТЧ_БО.Аналитика_2,
	|	бит_СоответствияАналитик.ПраваяАналитика_1,
	|	ВТ0_ТЧ_БО.Проект,
	|	ВТ0_ТЧ_БО.НоменклатурнаяГруппа,
	|	ВТ0_ТЧ_БО.БанковскийСчет,
	|	ВТ0_ТЧ_БО.СтатьяОборотов,
	|	ВТ0_ТЧ_БО.ЦФО,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-18 (#3145)
	//|	ВТ0_ТЧ_БО.Аналитика_1,
	//Заменено на:
	|	ВЫБОР
	|		КОГДА ФВБ_Контракт.Ссылка ЕСТЬ NULL
	|			ТОГДА ВТ0_ТЧ_БО.Аналитика_1
	|		ИНАЧЕ ФВБ_Контракт.бит_БК_НомерЗаявки
	|	КОНЕЦ,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-18 (#3145)	
	|	ВТ0_ТЧ_БО.Контрагент,
	|	ВТ0_ТЧ_БО.ДоговорКонтрагента,
	|	ВТ0_ТЧ_БО.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ФВБ_БО.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)
	|		ИНАЧЕ ФВБ_БО.бит_БК_Инициатор
	|	КОНЕЦ,
	|	ВТ0_ТЧ_БО.Ссылка.ОК_ID_Разноска,
	|	ВТ0_ТЧ_БО.Ссылка.бит_Организация,
	|	ВТ0_ТЧ_БО.ДоговорКонтрагента.СБ_ПрофильРазноски,
	|	ВТ0_ТЧ_БО.ДоговорКонтрагента.Номер,
	|	ВТ0_ТЧ_БО.ДоговорКонтрагента.Ок_ПересчетКурса,
	|	ВЫБОР
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-15 (#3236)
	|		КОГДА &ДействуетСтараяСхема
	|			ТОГДА &ОперативныйСценарийПланирования
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-15 (#3236)
	|		КОГДА ВТ0_ТЧ_БО.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.Выручка)
	|			ТОГДА &ОперационныйСценарийПланирования
	|		КОГДА ВТ0_ТЧ_БО.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА &ИнвестиционныйСценарийПланирования
	|	КОНЕЦ
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-02 (#3274)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-29 (#3842)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_СоответствияАналитик.ПраваяАналитика_1,
	|	ТЧ_ЗаявкаНаДоговор.СтатьяОборотов,
	|	ТЧ_ЗаявкаНаДоговор.ФункцияЦФО,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.Контрагент,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.ДоговорКонтрагента,
	|	"""",
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.ДоговорКонтрагента.Номер,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.ДоговорКонтрагента.Ок_ПересчетКурса,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ТЧ_ЗаявкаНаДоговор.Объект,
	|	0,
	|	0,
	|	СУММА(ТЧ_ЗаявкаНаДоговор.СуммаБезНДС),
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.СтавкаНДС,
	|	ЛОЖЬ,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	1 КАК КурсДокумента,
	|	1 КАК КратностьДокумента,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)
	|	&ОперативныйСценарийПланирования,
	|	NULL,
	|	NULL,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.Организация,
	|	""""
	|ИЗ
	|	Документ.рс_ЗаявкаНаДоговор.База КАК ТЧ_ЗаявкаНаДоговор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|		ПО ТЧ_ЗаявкаНаДоговор.СтатьяОборотов = бит_СоответствияАналитик.ЛеваяАналитика_1
	|			И (бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
	|ГДЕ
	|	ТЧ_ЗаявкаНаДоговор.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_СоответствияАналитик.ПраваяАналитика_1,
	|	ТЧ_ЗаявкаНаДоговор.СтатьяОборотов,
	|	ТЧ_ЗаявкаНаДоговор.ФункцияЦФО,
	|	ТЧ_ЗаявкаНаДоговор.Объект,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.Контрагент,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.ДоговорКонтрагента,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.ДоговорКонтрагента.Номер,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.ДоговорКонтрагента.Ок_ПересчетКурса,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.СтавкаНДС,
	|	ТЧ_ЗаявкаНаДоговор.Ссылка.Организация
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-29 (#3842)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итоговая.СтатьяОборотов КАК СтатьяОборотов,
	|	ВТ_Итоговая.Ок_СтатьяОборотовБДР КАК Ок_СтатьяОборотовБДР,
	|	ВТ_Итоговая.ЦФО КАК ЦФО,
	|	ВТ_Итоговая.Контрагент КАК Контрагент,
	|	ВТ_Итоговая.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_Итоговая.СБ_ПрофильРазноски КАК СБ_ПрофильРазноски,
	|	ВТ_Итоговая.НомерДоговораКонтрагента КАК НомерДоговораКонтрагента,
	|	ВТ_Итоговая.Ок_ПересчетКурса КАК Ок_ПересчетКурса,
	|	ВТ_Итоговая.Проект КАК Проект,
	|	ВТ_Итоговая.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВТ_Итоговая.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_Итоговая.Аналитика_1 КАК Аналитика_1,	
	|	ВТ_Итоговая.Аналитика_2 КАК Аналитика_2,
	|	СУММА(ВТ_Итоговая.Количество) КАК Количество,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
	//|	СУММА(ВТ_Итоговая.Сумма) КАК Сумма,
	//|	СУММА(ВТ_Итоговая.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА &ВариантЗаполнения = ""ИсполнителемИзТонкойФормы""
	|				ТОГДА 0
	|			ИНАЧЕ ВТ_Итоговая.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА &ВариантЗаполнения = ""ИсполнителемИзТонкойФормы""
	|				ТОГДА 0
	|			ИНАЧЕ ВТ_Итоговая.СуммаБезНДС
	|		КОНЕЦ) КАК СуммаБезНДС,
	|	МАКСИМУМ(ВТ_Итоговая.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(ВТ_Итоговая.КурсДокумента) КАК КурсДокумента,
	|	МАКСИМУМ(ВТ_Итоговая.КратностьДокумента) КАК КратностьДокумента,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)
	|	ВТ_Итоговая.СтавкаНДС КАК СтавкаНДС,
	|	МАКСИМУМ(ВТ_Итоговая.СверхБюджета) КАК СверхБюджета,
	|	ВТ_Итоговая.Сценарий КАК Сценарий,
	|	ВТ_Итоговая.бит_БК_Инициатор КАК бит_БК_Инициатор,
	|	ВТ_Итоговая.ФВБ КАК ФВБ,
	|	ВТ_Итоговая.Организация КАК Организация,
	|	ВТ_Итоговая.ОК_ID_Разноска_ДокОснования КАК ОК_ID_Разноска_ДокОснования
	|ИЗ
	|	ВТ_Итоговая КАК ВТ_Итоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Итоговая.СтатьяОборотов,
	|	ВТ_Итоговая.Ок_СтатьяОборотовБДР,
	|	ВТ_Итоговая.ЦФО,
	|	ВТ_Итоговая.Контрагент,
	|	ВТ_Итоговая.ДоговорКонтрагента,
	|	ВТ_Итоговая.СБ_ПрофильРазноски,
	|	ВТ_Итоговая.НомерДоговораКонтрагента,
	|	ВТ_Итоговая.Ок_ПересчетКурса,
	|	ВТ_Итоговая.Проект,
	|	ВТ_Итоговая.НоменклатурнаяГруппа,
	|	ВТ_Итоговая.БанковскийСчет,
	|	ВТ_Итоговая.Аналитика_1,
	|	ВТ_Итоговая.Аналитика_2,
	|	ВТ_Итоговая.СтавкаНДС,
	|	ВТ_Итоговая.Сценарий,
	|	ВТ_Итоговая.бит_БК_Инициатор,
	|	ВТ_Итоговая.ФВБ,
	|	ВТ_Итоговая.Организация,
	|	ВТ_Итоговая.ОК_ID_Разноска_ДокОснования
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-02 (#3274)
	|ИТОГИ
	|	МАКСИМУМ(Ок_СтатьяОборотовБДР),
	|	МАКСИМУМ(ЦФО),
	|	МАКСИМУМ(СБ_ПрофильРазноски),
	|	МАКСИМУМ(НомерДоговораКонтрагента),
	|	МАКСИМУМ(Ок_ПересчетКурса),
	|	МАКСИМУМ(Проект),
	|	МАКСИМУМ(Аналитика_1),
	|	СУММА(Сумма),
	|	СУММА(СуммаБезНДС),
	|	МАКСИМУМ(СверхБюджета),
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(КурсДокумента),
	|	МАКСИМУМ(КратностьДокумента),
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)
	|	МАКСИМУМ(бит_БК_Инициатор),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(ОК_ID_Разноска_ДокОснования)
	|ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	Сценарий,
	|	СтатьяОборотов,
	|	СтавкаНДС";
			
	ВыборкаКонтрагент = ЗапросТЧ.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагент.Следующий() Цикл 
		ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДоговорКонтрагента.Следующий() Цикл 
			ВыборкаСценарий = ВыборкаДоговорКонтрагента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСценарий.Следующий() Цикл 
				ВыборкаСтатьяБДДС = ВыборкаСценарий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСтатьяБДДС.Следующий() Цикл 
					ВыборкаСтавкаНДС = ВыборкаСтатьяБДДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);				
					Пока ВыборкаСтавкаНДС.Следующий() Цикл 
						
						ДокЗаявка = Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
						//ОКЕЙ Рычаков А.С.(СофтЛаб) 2019-10-29 Начало (#3423)
						ДокЗаявка.ок_СпособСоздания = 4;
						//ОКЕЙ Рычаков А.С.(СофтЛаб) 2019-10-29 Конец (#3423)
						ДокЗаявка.ДокументОснование    = Ссылка;
						ДокЗаявка.Дата 				   = ТекущаяДата();
						ДокЗаявка.Сценарий			   = ВыборкаСтавкаНДС.Сценарий;
						ДокЗаявка.ДатаРасхода 		   = бит_Общий.СледующаяРабочаяДата(ДокЗаявка.Дата);			
						ДокЗаявка.ТипПлатежа 		   = Справочники.бит_ТипыПлатежей.НайтиПоНаименованию("Оплата");
						ДокЗаявка.Контрагент 		   = ВыборкаСтавкаНДС.Контрагент;		
						ДокЗаявка.ДоговорКонтрагента   = ВыборкаСтавкаНДС.ДоговорКонтрагента;		
						ДокЗаявка.СБ_ПрофильРазноски   = ВыборкаСтавкаНДС.СБ_ПрофильРазноски;		 
						ДокЗаявка.Организация		   = ВыборкаСтавкаНДС.Организация;		 
						ДокЗаявка.СБ_Инициатор 		   = ВыборкаСтавкаНДС.бит_БК_Инициатор;				    
						ДокЗаявка.ВидОперации 		   = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику");
						ДокЗаявка.ФормаОплаты 		   = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные");
						ДокЗаявка.ТипЗаявки 		   = ПредопределенноеЗначение("Перечисление.бит_ТипыЗаявокНаРасходованиеСредств.Плановая");
						ДокЗаявка.Важность 			   = ПредопределенноеЗначение("Перечисление.бит_Важность.Средняя"); 
						ДокЗаявка.СуммаВключаетНДС 	   = Истина;
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
						//ДокЗаявка.ВалютаДокумента	   = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
						//ДокЗаявка.КурсДокумента		   = 1;
						//ДокЗаявка.КратностьДокумента   = 1;
						ДокЗаявка.ВалютаДокумента	   = ВыборкаСтавкаНДС.ВалютаДокумента;
						ДокЗаявка.КурсДокумента		   = ВыборкаСтавкаНДС.КурсДокумента;
						ДокЗаявка.КратностьДокумента   = ВыборкаСтавкаНДС.КратностьДокумента;
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)
						ДокЗаявка.Аналитика_1 		   = ВыборкаСтавкаНДС.Аналитика_1; // № Заявки, ссылка на Форму ввода бюджета
						ДокЗаявка.ЦФО 				   = ВыборкаСтавкаНДС.ЦФО;				
						ДокЗаявка.СтатьяОборотов	   = ВыборкаСтавкаНДС.СтатьяОборотов;
						ДокЗаявка.Проект			   = ВыборкаСтавкаНДС.Проект;
						ДокЗаявка.Ок_СтатьяОборотовБДР = ВыборкаСтавкаНДС.Ок_СтатьяОборотовБДР;
						ДокЗаявка.Ок_ПересчетКурса     = ВыборкаСтавкаНДС.Ок_ПересчетКурса;
						
						ДокЗаявка.ОК_ID_Разноска_ДокОснования = ВыборкаСтавкаНДС.ОК_ID_Разноска_ДокОснования;
						
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
						Если ВариантЗаполнения = "ИсполнителемИзТонкойФормы" Тогда 
							
							ДокЗаявка.ТипПлатежа 	= Справочники.бит_ТипыПлатежей.НайтиПоНаименованию("Аванс");
							КалендарьОплат 			= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_КалендарьОплат");
							ДатаРасхода 			= БлижайшаяРабочаяДатаПоГрафику(ДокЗаявка.Дата, КалендарьОплат);
							ДокЗаявка.ДатаРасхода 	= ДатаРасхода;
							
						КонецЕсли;
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)
						
						ВыборкаДетали = ВыборкаСтавкаНДС.Выбрать();
											
						Пока ВыборкаДетали.Следующий() Цикл 
							НоваяСтр 					  = ДокЗаявка.Распределение.Добавить();
							НоваяСтр.ЦФО 				  = ВыборкаДетали.ЦФО;				
							НоваяСтр.Проект 			  = ВыборкаДетали.Проект;
							НоваяСтр.СтатьяОборотов 	  = ВыборкаДетали.СтатьяОборотов;		
							НоваяСтр.Ок_СтатьяОборотовБДР = ВыборкаДетали.Ок_СтатьяОборотовБДР;
							НоваяСтр.ДоговорКонтрагента   = ВыборкаДетали.ДоговорКонтрагента;
							НоваяСтр.Аналитика_1 		  = ВыборкаДетали.Аналитика_1;
							НоваяСтр.Аналитика_2 		  = ВыборкаДетали.Аналитика_2;
							НоваяСтр.СтавкаНДС 			  = ВыборкаДетали.СтавкаНДС;
							НоваяСтр.СуммаБезНДС          = ВыборкаДетали.СуммаБезНДС;
							НоваяСтр.Сумма 				  = ВыборкаДетали.Сумма;
							НоваяСтр.НДС  				  = ВыборкаДетали.Сумма-ВыборкаДетали.СуммаБезНДС;
							
							//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-30 (#3842)
							Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
								СтавкаНДСЧисло 	= бит_БухгалтерияСервер.ПолучитьСтавкуНДС(ВыборкаСтавкаНДС.СтавкаНДС);				
								НоваяСтр.Сумма	= НоваяСтр.СуммаБезНДС / 100* (100 + СтавкаНДСЧисло);
								НоваяСтр.НДС  	= НоваяСтр.Сумма - НоваяСтр.СуммаБезНДС;
							КонецЕсли;
							//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-30 (#3842)
							
							//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-19 (#3276)
							ДокЗаявка.УстановитьИДСтроки(НоваяСтр);
							//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-19 (#3276)
							
						КонецЦикла;//ВыборкаДетали
						
						ДокЗаявка.Сумма 					= ВыборкаСтавкаНДС.Сумма;
						ДокЗаявка.СуммаВзаиморасчеты 		= ДокЗаявка.Сумма;
						ДокЗаявка.СуммаРегл 				= ДокЗаявка.Сумма; 
						ДокЗаявка.СуммаУпр 					= ДокЗаявка.Сумма; 
						ДокЗаявка.СуммаДокумента 			= ДокЗаявка.Сумма; 
						ДокЗаявка.НДС 						= ВыборкаСтавкаНДС.Сумма - ВыборкаСтавкаНДС.СуммаБезНДС;
						
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-30 (#3842)
						Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
							ДокЗаявка.СуммаБезНДС			= ВыборкаСтавкаНДС.СуммаБезНДС;
							СтавкаНДСЧисло 					= бит_БухгалтерияСервер.ПолучитьСтавкуНДС(ВыборкаСтавкаНДС.СтавкаНДС);				
							ДокЗаявка.Сумма					= ДокЗаявка.СуммаБезНДС / 100* (100 + СтавкаНДСЧисло);
							ДокЗаявка.НДС  					= ДокЗаявка.Сумма - ДокЗаявка.СуммаБезНДС;
							
							ДокЗаявка.СуммаВзаиморасчеты 	= ДокЗаявка.Сумма;
							ДокЗаявка.СуммаРегл 			= ДокЗаявка.Сумма;
							ДокЗаявка.СуммаУпр 				= ДокЗаявка.Сумма;
							ДокЗаявка.СуммаДокумента 		= ДокЗаявка.Сумма;
						КонецЕсли;
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-30 (#3842)
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-04 (#3065)
						ДокЗаявка.СуммаБезНДС				= ВыборкаСтавкаНДС.СуммаБезНДС;
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-04 (#3065)
						ДокЗаявка.НДСВзаиморасчеты 			= ДокЗаявка.НДС;
						ДокЗаявка.НДСУпр 					= ДокЗаявка.НДС;
						ДокЗаявка.НДСРегл 					= ДокЗаявка.НДС;
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
						
						//ДокЗаявка.НазначениеПлатежа 		= "Оплата по договору №"+ДокЗаявка.ДоговорКонтрагента.Номер +" по счет № , в т.ч. НДС " + ДокЗаявка.НДС;
						СтруктураПараметров = Новый Структура();
						СтруктураПараметров.Вставить("ДокументОснование", 	ДокЗаявка.ДокументОснование);
						СтруктураПараметров.Вставить("ДоговорКонтрагента", 	ДокЗаявка.ДоговорКонтрагента);
						СтруктураПараметров.Вставить("СтатьяОборотов", 		ДокЗаявка.СтатьяОборотов);
						СтруктураПараметров.Вставить("НДС", 				ДокЗаявка.НДС);
						// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-08 (#4337)
						СтруктураПараметров.Вставить("ДокументОбъект", ДокЗаявка);
						// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-08 (#4337)
						
						ДокЗаявка.НазначениеПлатежа 		= Документы.бит_ЗаявкаНаРасходованиеСредств.СформироватьНазначениеПлатежа(СтруктураПараметров);
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
						ДокЗаявка.НазначениеПлатежаУпр		= ДокЗаявка.НазначениеПлатежа;						
						ДокЗаявка.Аналитика_2 				= ДокЗаявка.Распределение[0].Аналитика_2;
						ДокЗаявка.СтавкаНДС 				= ВыборкаСтавкаНДС.СтавкаНДС; 
						
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-29 (#3842)
						Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
							
							ДокЗаявка.ДатаРасхода 					= Неопределено;
							ДокЗаявка.СБ_БанковскийСчетКонтрагента 	= Справочники.ДоговорыКонтрагентов.ПолучитьБанковскийСчетКонтрагента(ДокЗаявка.ДоговорКонтрагента, ДокЗаявка.Контрагент);
							ДокЗаявка.ВалютаДокумента				= ДокЗаявка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
							
							Результат = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокЗаявка.ВалютаДокумента, ДокЗаявка.Дата);
							ДокЗаявка.КурсДокумента      	= Результат.Курс;
							ДокЗаявка.КратностьДокумента 	= Результат.Кратность;
							
							ДокЗаявка.СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДокЗаявка.Сумма
																			 , ДокЗаявка.ВалютаДокумента
																			 , ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
																			 , ДокЗаявка.КурсДокумента
																			 , 1
																			 , ДокЗаявка.КратностьДокумента
																			 , 1);
							ДокЗаявка.НДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДокЗаявка.НДС
																			 , ДокЗаявка.ВалютаДокумента
																			 , ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
																			 , ДокЗаявка.КурсДокумента
																			 , 1
																			 , ДокЗаявка.КратностьДокумента
																			 , 1);
							
						КонецЕсли; 
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-29 (#3842)
						
						Попытка
							ДокЗаявка.Записать();
							//ДокЗаявка.Записать(РежимЗаписиДокумента.ОтменаПроведения); //надо разбираться зачем в исходном алгоритме это
							мСозданныеДокументы.Добавить(ДокЗаявка.Ссылка);
						Исключение
							
							пТекстОшибки = НСтр("ru = 'Не удалось создать документ по статье оборотов %1 и ставке НДС %2 по причине: %3'");
							пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ВыборкаСтавкаНДС.СтатьяОборотов,
																												 ВыборкаСтавкаНДС.СтавкаНДС,
																												 ОписаниеОшибки());
							пОшибки = пОшибки + ?(ПустаяСтрока(пОшибки), "", Символы.ПС) + пТекстОшибки																												 
																												 
						КонецПопытки;						
						
					КонецЦикла;//ВыборкаСтавкаНДС
				КонецЦикла;//ВыборкаСтатьяБДДС
			КонецЦикла;//ВыборкаСценарий
		КонецЦикла;//ВыборкаДоговорКонтрагента
	КонецЦикла;//ВыборкаКонтрагент
	
	Возврат Новый Структура("СозданныеДокументы,Ошибки",мСозданныеДокументы,пОшибки);
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3065)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-30 (#3076)
Функция ПолучитьСтатьюОборотовНаСервере(СтатьяЗатрат) Экспорт
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-18 (#3791)
	СтатьяПДиР = ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-18 (#3791)
	
	пСтруктураВозврата = Новый Структура;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
	|ИЗ
	|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	|ГДЕ
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-18 (#3791)
	//|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.СтатьиЗатрат 
	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА " + ?(СтатьяПДиР, "Справочник.ПрочиеДоходыИРасходы", "Справочник.СтатьиЗатрат") + "
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-18 (#3791)
	| И бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл = &Статья";					   
	Запрос.УстановитьПараметр("Статья",СтатьяЗатрат);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.Количество()>1 Тогда 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-18 (#3791)
			//пТекстОшибки = НСтр("ru = 'Найдено более одной статьи оборотов по соответствию с указанной статьей затрат %1!'");
			//пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, СтатьяЗатрат); 
			пТекстОшибки = НСтр("ru = 'Найдено более одной статьи оборотов по соответствию с указанной статьей %2 %1!'");
			пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, СтатьяЗатрат, ?(СтатьяПДиР, "прочих доходов и расходов", "затрат")); 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-18 (#3791)
			пСтруктураВозврата.Вставить("Ошибки", пТекстОшибки);			
			Возврат пСтруктураВозврата;
		Иначе
			пСтруктураВозврата.Вставить("СтатьяОборотов"	,	Выборка.СтатьяОборотов);
			Возврат пСтруктураВозврата;
		КонецЕсли;	
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-18 (#3791)
	//пТекстОшибки = НСтр("ru = 'Не найдено статьи оборотов по соответствию с указанной статьей затрат %1!'");
	//пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, СтатьяЗатрат); 
	пТекстОшибки = НСтр("ru = 'Не найдено статьи оборотов по соответствию с указанной статьей %2 %1!'");
	пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, СтатьяЗатрат, ?(СтатьяПДиР, "прочих доходов и расходов", "затрат")); 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-18 (#3791)
	пСтруктураВозврата.Вставить("Ошибки", пТекстОшибки);			
	
	Возврат пСтруктураВозврата;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-30 (#3076)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-21 (#3051)
Процедура ПересчитатьСуммыОпБПоСуммеРегл(пТекДанные, мИсключенияИзПересчета, ВалютаСценария, ВалютаУпрУчета, Дата) Экспорт
	
	Если мИсключенияИзПересчета.Найти("СуммаУпр") = Неопределено Тогда 
		
		Если ВалютаУпрУчета <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда 
			пТекДанные.СуммаУпр = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пТекДанные.СуммаРегл, Дата, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),ВалютаУпрУчета);
		Иначе
			пТекДанные.СуммаУпр = пТекДанные.СуммаРегл;
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(пТекДанные.СтавкаНДС) Тогда 
			СуммаНДСТекКолонки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
																	пТекДанные.СуммаУпр,
																	Ложь,
																	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пТекДанные.СтавкаНДС));
		Иначе 
			СуммаНДСТекКолонки = 0;
		КонецЕсли;

		пТекДанные.СуммаСНДСУпр = пТекДанные.СуммаУпр + СуммаНДСТекКолонки;		
		
	КонецЕсли;
	
	Если мИсключенияИзПересчета.Найти("СуммаСценарий") = Неопределено Тогда 
		
		Если ВалютаСценария <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда 
			пТекДанные.СуммаСценарий = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пТекДанные.СуммаРегл, Дата, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),ВалютаСценария);
		Иначе
			пТекДанные.СуммаСценарий = пТекДанные.СуммаРегл;
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(пТекДанные.СтавкаНДС) Тогда 
			СуммаНДСТекКолонки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
																	пТекДанные.СуммаСценарий,
																	Ложь,
																	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пТекДанные.СтавкаНДС));
		Иначе 
			СуммаНДСТекКолонки = 0;
		КонецЕсли;

		пТекДанные.СуммаСНДССценарий = пТекДанные.СуммаСценарий + СуммаНДСТекКолонки;		
		
	КонецЕсли;
	
	Если мИсключенияИзПересчета.Найти("Сумма") = Неопределено Тогда 
		
		Если пТекДанные.Валюта <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда 
			пТекДанные.Сумма = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пТекДанные.СуммаРегл, Дата, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),пТекДанные.Валюта);
		Иначе
			пТекДанные.Сумма = пТекДанные.СуммаРегл;
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(пТекДанные.СтавкаНДС) Тогда 
			СуммаНДСТекКолонки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
																	пТекДанные.Сумма,
																	Ложь,
																	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пТекДанные.СтавкаНДС));
		Иначе 
			СуммаНДСТекКолонки = 0;
		КонецЕсли;

		пТекДанные.СуммаСНДС = пТекДанные.Сумма + СуммаНДСТекКолонки;		
		
	КонецЕсли;
	
	Если мИсключенияИзПересчета.Найти("СуммаСНДСРегл") = Неопределено Тогда 
			
		Если ЗначениеЗаполнено(пТекДанные.СтавкаНДС) Тогда 
			СуммаНДСТекКолонки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
																	пТекДанные.СуммаРегл,
																	Ложь,
																	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пТекДанные.СтавкаНДС));
		Иначе 
			СуммаНДСТекКолонки = 0;
		КонецЕсли;

		пТекДанные.СуммаСНДСРегл = пТекДанные.СуммаРегл + СуммаНДСТекКолонки;		
		
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-21 (#3051)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-16 (#3101)
// Выполняет трансляцию движений с отбором по мИсточники в движения с отбором по мПриемники переданного массива документов 
//
// Параметры:
//   мОперацииАксапты - массив - массив ссылок на документ бит_ок_ОперацияАксапты
//   мИсточники - массив - массив элементов справочника бит_ОбъектыСистемы
//   мПриемники - массив - массив элементов справочника бит_ОбъектыСистемы
//
Процедура ВыполнитьТрансляциюОперацийАксаптыВРегистрыБК(мОперацииАксапты, мИсточники, мПриемники) Экспорт
	
	мдОперацияАксапты = Метаданные.Документы.бит_ок_ОперацияАксапты;
	
	Для Каждого ОперацияАксапты Из мОперацииАксапты Цикл 
		
		ДокументОбъект = ОперацияАксапты.ПолучитьОбъект();
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-18 (#3182)
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОК_ИзменениеРеквизитовОбъектаБезПроведения", Истина);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-18 (#3182)
		
		//Перезаписываем документ для актуализации признака ок_НеНайденКонтракт
		Попытка
		
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Исключение
			
			пТекстОшибки = НСтр("ru = 'Не удалось перезаписать документ для актуализации признака ""Не найден контракт"", по причине %1'");
			пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
			
			ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК",УровеньЖурналаРегистрации.Ошибка,мдОперацияАксапты,ОперацияАксапты,пТекстОшибки);
			
			Продолжить;
			
		КонецПопытки;		
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-18 (#3182)
		//Необходимо вернуть для выполнения процедур трансляции
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-18 (#3182)
		
		//Трансляция		
		Отказ = Ложь;
		
		Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда			
			// При наличиии механизма контроля закрытого периода сохраним движения для последующего анализа
			бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
		КонецЕсли;
		
		РезДанные = бит_МеханизмТрансляции.ВыполнитьТрансляцию(ДокументОбъект, мИсточники, мПриемники, Истина, ПредопределенноеЗначение("Перечисление.бит_РежимыТрансляции.Ручной"));
		
		Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда			
			// При наличиии механизма контроля закрытого периода сформируем корректирующие проводки			
			бит_КонтрольЗакрытогоПериода.КонтрольПриОбработкеПроведения(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, Истина);	
		КонецЕсли;	
		
		Если ДокументОбъект.Заблокирован() Тогда	
			ДокументОбъект.Разблокировать(); 	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-16 (#3101)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-11-06 (#ПроектИнтеграцияАксапта12)
Процедура ВыполнитьТрансляциюОперацийАксапты12ВРегистрыБК(мОперацииАксапты, мИсточники, мПриемники) Экспорт
	
	мдОперацияАксапты12 = Метаданные.Документы.бит_ок_ОперацияАксапты12;
	
	Для Каждого ОперацияАксапты Из мОперацииАксапты Цикл 
		
		ДокументОбъект = ОперацияАксапты.ПолучитьОбъект();
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОК_ИзменениеРеквизитовОбъектаБезПроведения", Истина);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		//Перезаписываем документ для актуализации признака ок_НеНайденКонтракт
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			пТекстОшибки = НСтр("ru = 'Не удалось перезаписать документ для актуализации признака ""Не найден контракт"", по причине %1'");
			пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
			
			ЗаписьЖурналаРегистрации("Трансляция операций аксапты в регистры БК",УровеньЖурналаРегистрации.Ошибка,мдОперацияАксапты12,ОперацияАксапты,пТекстОшибки);
			
			Продолжить;
		КонецПопытки;		
		
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		
		//Трансляция		
		Отказ = Ложь;
		
		// При наличиии механизма контроля закрытого периода сохраним движения для последующего анализа
		Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда			
			бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
		КонецЕсли;
		
		РезДанные = бит_МеханизмТрансляции.ВыполнитьТрансляцию(ДокументОбъект, мИсточники, мПриемники, Истина, ПредопределенноеЗначение("Перечисление.бит_РежимыТрансляции.Ручной"));
		
		// При наличиии механизма контроля закрытого периода сформируем корректирующие проводки			
		Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда			
			бит_КонтрольЗакрытогоПериода.КонтрольПриОбработкеПроведения(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, Истина);	
		КонецЕсли;	
		
		Если ДокументОбъект.Заблокирован() Тогда	
			ДокументОбъект.Разблокировать(); 	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-11-06 (#ПроектИнтеграцияАксапта12)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-15 (#3156)
Функция ОпределитьОбъектСтроительстваОтносительноАналитикиБК(ОбъектСтроительства,Аналитика_БК) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектСтроительства) Тогда 
		Возврат Аналитика_БК;
	КонецЕсли;
	
	Если ОбъектСтроительства.Родитель = ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка") Тогда 
		
		ВерхнийРодитель = ОбъектСтроительства;
		
	Иначе
		
		пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыСтроительства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
		|ГДЕ
		|	ОбъектыСтроительства.Ссылка = &ОбъектЗаполнения
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ");
		
		пЗапрос.УстановитьПараметр("ОбъектЗаполнения"		,	ОбъектСтроительства);
		
		Выборка = пЗапрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ВерхнийРодитель = Выборка.Ссылка;
		
	КонецЕсли;
	
	Если Аналитика_БК <> ВерхнийРодитель И
		НЕ Аналитика_БК.ПринадлежитЭлементу(ВерхнийРодитель)
	Тогда 
	
		 Возврат Аналитика_БК;					
	
	КонецЕсли;
	
	Возврат ОбъектСтроительства;

КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-15 (#3156)

/////////////////////////////////////////////////////////
//	ПОЛУЧЕНИЕ ЗНАЧЕНИЯ НАСТРОЙКИ ИЗ РЕГИСТРА ок_УниверсальныеНастройки

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-17 (#3273)
//Возвращает значение по группе и имени настройки
//ТипВозвращаемогоЗначения = СписокЗначений, Массив или Значение,т.е возврат, как есть
//ГруппаНастроек, Настройка - Измерения регистра, Строка
// ЗначениеПоУмолчанию - Возвращается если не нашли значения в регистре
Функция ПолучитьЗначениеУниверсальнойНастройки(ГруппаНастроек, Настройка, ЗначениеПоУмолчанию = Неопределено, ТипВозвращаемогоЗначения = "Значение") Экспорт
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-02-04 (#3632)
	УстановитьПривилегированныйРежим(Истина);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-02-04 (#3632)
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-11 (#4276)
	//ВозвращаемоеЗначение = РегистрыСведений.ок_УниверсальныеНастройки.Получить(Новый Структура("ГруппаНастроек,Настройка",ГруппаНастроек,Настройка)).ЗначениеНастройки;
	ДанныеНастройки = РегистрыСведений.ок_УниверсальныеНастройки.Получить(Новый Структура("ГруппаНастроек,Настройка",ГруппаНастроек,Настройка));
	
	Если ДанныеНастройки.ЗначениеВХранилище Тогда
		
		ЗначениеХранилища = ДанныеНастройки.ХранилищеЗначения.Получить();
		
		Если ТипЗнч(ЗначениеХранилища) = Тип("СписокЗначений") Тогда
			ВозвращаемоеЗначение = ЗначениеХранилища.ВыгрузитьЗначения();
		Иначе
			ВозвращаемоеЗначение = ЗначениеХранилища;
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение = ДанныеНастройки.ЗначениеНастройки;
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-11 (#4276)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-02-04 (#3632)
	УстановитьПривилегированныйРежим(Ложь);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-02-04 (#3632)
	
	Если ВозвращаемоеЗначение = Неопределено Тогда 
		Значение = ЗначениеПоУмолчанию;
	иначе
		Значение = ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если ТипВозвращаемогоЗначения = "Значение" Тогда
		Возврат Значение;
	ИначеЕсли ТипВозвращаемогоЗначения = "СписокЗначений" Тогда 
		Если НЕ ТипЗнч(Значение) = Тип("СписокЗначений") Тогда 
			Список = Новый СписокЗначений;
			Список.Добавить(Значение);
			Возврат Список;
		Иначе 
			Возврат Значение;
		КонецЕсли;
	ИначеЕсли ТипВозвращаемогоЗначения = "Массив" Тогда 
		Если НЕ ТипЗнч(Значение) = Тип("Массив") Тогда 
			Массив = Новый Массив;
			Массив.Добавить(Значение);
			Возврат Массив;
		Иначе 
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-17 (#3273)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-10 (#3348)
//Перенесено из формы ФВБ 
// Проверяет необходимость закрытия остатков по зависимому сценарию для текущего документа по оперативным данным регистра
//Параметры:
//парЗаявка - ссылка на заявку в шапке 
//парДата - дата документа 
//парСсылаНаДокуменЗакрытия - возвращает ссылку на документ закрытия, если таковой будет создан
//ПытатьсяЗакрыватьФВБ - Необходимо ли вызывать механизм установки статуса Закрыт в случае, если не получилось создать документ закрытия
Процедура НеобходимостьИЗакрытиеОстаткаСервер(знач парЗаявка, парСсылаНаДокуменЗакрытия, ПытатьсяЗакрыватьФВБ = Ложь) Экспорт
	
	пТекущийСтатусПривилегированногоРежима  = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
		
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = 
	 	
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования) КАК Сценарий,
	|	МАКСИМУМ(ВЫРАЗИТЬ(бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Справочник.СценарииПланирования)) КАК СценарийКонтролирующий
	|ПОМЕСТИТЬ СценарииБКОК
	|ИЗ
	|	РегистрСведений.бит_БК_НастройкиБК КАК бит_БК_НастройкиБК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|		ПО ((ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования)) = (ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.СценарииПланирования)))
	|ГДЕ
	|	бит_БК_НастройкиБК.Группа = ""Контроль бюджета""
	|	И бит_СоответствияАналитик.ВидСоответствия.Код = ""бит_БК_СценарийВСценарийКонтролируемый""
	|	И ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования) В (&пзКонтролируемыеСценарии)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования)
	|;
	|
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-22 (#3800)
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БДДС.Период КАК Период,
	|	БДДС.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ИнвестСтрокиСПериодом
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК БДДС
	|ГДЕ
	|	БДДС.Ссылка = &пзЗаявка
	|	И БДДС.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ_ИнвестСтрокиСПериодом.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_МинИнвестСтрока
	|ИЗ
	|	ВТ_ИнвестСтрокиСПериодом КАК ВТ_ИнвестСтрокиСПериодом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИнвестСтрокиСПериодом.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ПерваяИнвестСтрокаБДДС
	|ИЗ
	|	ВТ_ИнвестСтрокиСПериодом КАК ВТ_ИнвестСтрокиСПериодом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МинИнвестСтрока КАК ВТ_МинИнвестСтрока
	|		ПО ВТ_ИнвестСтрокиСПериодом.НомерСтроки = ВТ_МинИнвестСтрока.НомерСтроки
	|;
	|
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-22 (#3800)
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов КАК СтатьяОборотов,
	|	НАЧАЛОПЕРИОДА(бит_КонтрольныеЗначенияБюджетовОбороты.Период, МЕСЯЦ) КАК Период,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий КАК Сценарий,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО КАК ЦФО,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Проект КАК Проект,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый КАК СценарийКонтролируемый,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольОборот - бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот КАК Разница,
	|	ВЫРАЗИТЬ(бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1 КАК Документ.бит_ФормаВводаБюджета) КАК Аналитика_1,
	|	ВЫРАЗИТЬ(бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_2 КАК Справочник.ОбъектыСтроительства) КАК Аналитика_2
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-22 (#3800)
	|	,бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольОборот КАК СуммаКонтроль,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Период КАК ПериодИсх
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-22 (#3800)
	|ПОМЕСТИТЬ Подготовка
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
	|			,
	|			,
	|			Месяц,
	|			Аналитика_1 = &пзЗаявка
	|				И (Сценарий, СценарийКонтролируемый) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СценарииБКОК.СценарийКонтролирующий,
	|						СценарииБКОК.Сценарий
	|					ИЗ
	|						СценарииБКОК)) КАК бит_КонтрольныеЗначенияБюджетовОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СценарииБКОК КАК СценарииБКОК
	|		ПО бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий = СценарииБКОК.СценарийКонтролирующий
	|			И бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый = СценарииБКОК.Сценарий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяОборотов,
	|	Сценарий,
	|	ЦФО,
	|	Проект,
	|	Аналитика_1,
	|	Аналитика_2,
	|	СценарийКонтролируемый,
	|	Период
	|;
	|
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-22 (#3800)
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подготовка.СтатьяОборотов КАК СтатьяОборотов,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Подготовка.ПериодИсх, МЕСЯЦ)) КАК Период,
	|	Подготовка.Сценарий КАК Сценарий,
	|	Подготовка.ЦФО КАК ЦФО,
	|	Подготовка.Проект КАК Проект,
	|	Подготовка.СценарийКонтролируемый КАК СценарийКонтролируемый,
	|	Подготовка.Аналитика_1 КАК Аналитика_1,
	|	Подготовка.Аналитика_2 КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_МинимальныеПериодыКонтракт
	|ИЗ
	|	Подготовка КАК Подготовка
	|ГДЕ
	|	Подготовка.СценарийКонтролируемый = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Контракт_Инвест)
	|	И Подготовка.СуммаКонтроль > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Подготовка.СтатьяОборотов,
	|	Подготовка.Сценарий,
	|	Подготовка.СценарийКонтролируемый,
	|	Подготовка.ЦФО,
	|	Подготовка.Проект,
	|	Подготовка.Аналитика_1,
	|	Подготовка.Аналитика_2
	|;
	|
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-22 (#3800)
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подготовка.СтатьяОборотов,
	|	Подготовка.Период,
	|	Подготовка.Сценарий КАК Сценарий,
	|	Подготовка.ЦФО,
	|	Подготовка.Проект,
	|	Подготовка.СценарийКонтролируемый,
	|	Подготовка.Аналитика_1,
	|	Подготовка.Аналитика_2,
	|	СУММА(Подготовка.Разница) КАК СуммаОстаток,
	|	СУММА(Подготовка.Разница) КАК СуммаКонтроль
	|ПОМЕСТИТЬ втПредфинал
	|ИЗ
	|	Подготовка КАК Подготовка
	|
	|СГРУППИРОВАТЬ ПО
	|	Подготовка.Аналитика_1,
	|	Подготовка.СтатьяОборотов,
	|	Подготовка.Проект,
	|	Подготовка.СценарийКонтролируемый,
	|	Подготовка.Сценарий,
	|	Подготовка.ЦФО,
	|	Подготовка.Аналитика_2,
	|	Подготовка.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредфинал.СтатьяОборотов,
	|	втПредфинал.Период,
	|	втПредфинал.Сценарий,
	|	втПредфинал.ЦФО,
	|	втПредфинал.Проект,
	|	втПредфинал.СценарийКонтролируемый,
	|	втПредфинал.Аналитика_1,
	|	втПредфинал.Аналитика_2,
	|	втПредфинал.СуммаОстаток,
	|	втПредфинал.СуммаКонтроль
	|ИЗ
	|	втПредфинал КАК втПредфинал
	|ГДЕ
	|	втПредфинал.СуммаОстаток > 0
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-23 (#3800)
	|	И втПредфинал.СценарийКонтролируемый <> ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Контракт_Инвест)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПредфинал.СтатьяОборотов,
	|	ЕСТЬNULL(ВТ_МинимальныеПериодыКонтракт.Период, ВТ_ПерваяИнвестСтрокаБДДС.Период),
	|	втПредфинал.Сценарий,
	|	втПредфинал.ЦФО,
	|	втПредфинал.Проект,
	|	втПредфинал.СценарийКонтролируемый,
	|	втПредфинал.Аналитика_1,
	|	втПредфинал.Аналитика_2,
	|	втПредфинал.СуммаОстаток,
	|	втПредфинал.СуммаКонтроль
	|ИЗ
	|	втПредфинал КАК втПредфинал
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПерваяИнвестСтрокаБДДС КАК ВТ_ПерваяИнвестСтрокаБДДС
	|			ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МинимальныеПериодыКонтракт КАК ВТ_МинимальныеПериодыКонтракт
	|		ПО ВТ_МинимальныеПериодыКонтракт.СтатьяОборотов = втПредфинал.СтатьяОборотов
	|			И ВТ_МинимальныеПериодыКонтракт.Сценарий = втПредфинал.Сценарий
	|			И ВТ_МинимальныеПериодыКонтракт.ЦФО = втПредфинал.ЦФО
	|			И ВТ_МинимальныеПериодыКонтракт.Проект = втПредфинал.Проект
	|			И ВТ_МинимальныеПериодыКонтракт.СценарийКонтролируемый = втПредфинал.СценарийКонтролируемый
	|			И ВТ_МинимальныеПериодыКонтракт.Аналитика_1 = втПредфинал.Аналитика_1
	|			И ВТ_МинимальныеПериодыКонтракт.Аналитика_2 = втПредфинал.Аналитика_2
	|ГДЕ
	|	втПредфинал.СуммаОстаток > 0
	|	И втПредфинал.СценарийКонтролируемый = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Контракт_Инвест)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-23 (#3800)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Подготовка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПредфинал
	|;
	|
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-23 (#3800)
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_МинимальныеПериодыКонтракт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПерваяИнвестСтрокаБДДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_МинИнвестСтрока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИнвестСтрокиСПериодом
	|;
	|
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-23 (#3800)
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СценарииБКОК";
		
	пЗапрос.Текст = бит_БК_Общий.КорректировкаТекстаЗапросаЗакрытия(пЗапрос.Текст);
	пЗапрос.УстановитьПараметр("пзЗаявка", парЗаявка);
	пЗапрос.УстановитьПараметр("пзКонтролируемыеСценарии", ПолучитьМассивУникальныхКонтролируемыхСценариев(парЗаявка.БДДС));  //*Дремов*перенес не перенесенную строку из тестовой 20.07.2017
	
	пТЗОстатковКЗакрытию = пЗапрос.Выполнить().Выгрузить();
	
	парСсылаНаДокуменЗакрытия = Неопределено;
	
	//Получение сценариев с "аномально широкими" периодами ключевых аналитик более месяца (год и "без периода")
	пНастройкиВыбораКЗБПоСценариям = бит_БК_общий.СценариПланированияНастройкиВыбораСумм();
	пМассивАномальныхСценариев = Новый Массив();
	пМассивСценариевПериодГод = Новый Массив();
	
	Для каждого пЭлементНастройкиПоСценарию Из пНастройкиВыбораКЗБПоСценариям Цикл
		
		пСписокКлючевыхАналитикСценария = пЭлементНастройкиПоСценарию.Значение;
		Если пСписокКлючевыхАналитикСценария.НайтиПоЗначению(Перечисления.бит_БК_ДопИзмеренияКонтроля.ПериодВсе) <> Неопределено или
			пСписокКлючевыхАналитикСценария.НайтиПоЗначению(Перечисления.бит_БК_ДопИзмеренияКонтроля.ПериодГод) <> Неопределено Тогда  
			
			пМассивАномальныхСценариев.Добавить(Справочники.СценарииПланирования[пЭлементНастройкиПоСценарию.Ключ]);
		КонецЕсли;
		
		Если пСписокКлючевыхАналитикСценария.НайтиПоЗначению(Перечисления.бит_БК_ДопИзмеренияКонтроля.ПериодГод) <> Неопределено Тогда  
			
			пМассивСценариевПериодГод.Добавить(Справочники.СценарииПланирования[пЭлементНастройкиПоСценарию.Ключ]);
		КонецЕсли;
	КонецЦикла; 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-23 (#3800)
	мИсключаемыхИзАномальных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест"));	
	пМассивАномальныхСценариев = ОбщегоНазначенияКлиентСервер.РазностьМассивов(пМассивАномальныхСценариев, мИсключаемыхИзАномальных);		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-23 (#3800)
	
	Если  пТЗОстатковКЗакрытию.Количество() > 0 Тогда  //есть незакрытые остатки, материал закрытия готов
		
		пДокументЗакрытия = Документы.бит_БК_ЗакрытиеОстатков.СоздатьДокумент();
		пДокументЗакрытия.Дата = ТекущаяДата();
		пДокументЗакрытия.Комментарий = "Сформирован обработкой закрытия остатков " + ТекущаяДата();
		пДокументЗакрытия.Ответственный = Пользователи.ТекущийПользователь();
		пТабличнаяЧасть = пДокументЗакрытия.ТабличнаяЧасть;
		
		Для Каждого пТекСтрока Из пТЗОстатковКЗакрытию Цикл
					
			Если пМассивАномальныхСценариев.Найти(пТекСтрока.Сценарий) <> Неопределено Тогда // требуется распределение по периодам т.к. период планирования (месяц) явно не соответствует периоду ключевой аналитики сценария
				
				//Формирование структуры параметра для запроса распределения
				пСтруктураОтбора = Новый Структура("СтатьяОборотов, СценарийКонтролируемый, ЦФО, Проект, Аналитика_1, Аналитика_2"); 
				ЗаполнитьЗначенияСвойств(пСтруктураОтбора, пТекСтрока);
				
				пПериодНачало = Неопределено;
				пПериодКонец = Неопределено;
				
				Если пМассивСценариевПериодГод.Найти(пТекСтрока.СценарийКонтролируемый) <> Неопределено  Тогда 
					
					пПериодНачало = НачалоГода(пТекСтрока.Период);
					пПериодКонец = КонецГода(пТекСтрока.Период);
				КонецЕсли;
				
				пТЗРаспределения = бит_БК_Общий.ПолучитьРаспределениеПоПериодамПланированияСверхМесячныхКлАН(пСтруктураОтбора, пТекСтрока.СуммаОстаток, пПериодНачало, пПериодКонец);
				
				Если пТЗРаспределения <> Неопределено и пТЗРаспределения.Количество() <>  0 Тогда  //выполняем заполнение по данным распределения 
					
					Для каждого пСтрокаРаспределения Из пТЗРаспределения Цикл
						
						пНоваяСтрока = пТабличнаяЧасть.Добавить();
						ЗаполнитьЗначенияСвойств(пНоваяСтрока, пСтрокаРаспределения);
						
						пНоваяСтрока.ПричинаЗакрытия = Справочники.бит_ПричиныЗакрытияДокументовПланированияПлатежа.РешениеОЦР;
						пНоваяСтрока.СуммаБезНДС = пСтрокаРаспределения.СуммаОстаток;
						пНоваяСтрока.СтавкаНДС= Перечисления.СтавкиНДС.НДС18;			
						Если пДокументЗакрытия.Дата >= Дата('20190101') Тогда 
							пНоваяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
						КонецЕсли;						
						пНоваяСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(пНоваяСтрока.СуммаБезНДС, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пНоваяСтрока.СтавкаНДС));
						пНоваяСтрока.СуммаСНДС = пНоваяСтрока.СуммаБезНДС + пНоваяСтрока.НДС;			
					КонецЦикла; 
					
					Продолжить; //завершена итерация "распределения", выполнение старого сценария заполнения прерывается для текущей строки данных закрытия
				КонецЕсли;
				
				//если распределение не удалось, продолжаем выполнение заполнения закрытия "как есть", что есть ошибка по периодам, но правильно по балансу БК
				пТекСтрока.Период = НачалоГода(ТекущаяДата()); //период закрытия ставим в начало текущего года - тоже неверно, но лучше, чем ничего, вообще это недопустимы
			КонецЕсли;
			
			пНоваяСтрока = пТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(пНоваяСтрока, пТекСтрока);
			
			пНоваяСтрока.ПричинаЗакрытия = Справочники.бит_ПричиныЗакрытияДокументовПланированияПлатежа.РешениеОЦР;
			пНоваяСтрока.СуммаБезНДС = пТекСтрока.СуммаОстаток;
			пНоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
					
			Если пДокументЗакрытия.Дата >= Дата('20190101') Тогда 
				пНоваяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
			КонецЕсли;			
			
			пНоваяСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(пНоваяСтрока.СуммаБезНДС, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пНоваяСтрока.СтавкаНДС));
			пНоваяСтрока.СуммаСНДС = пНоваяСтрока.СуммаБезНДС + пНоваяСтрока.НДС;			
		КонецЦикла;
		
		Если пТабличнаяЧасть.Количество() = 0 Тогда
			Если Не ПытатьсяЗакрыватьФВБ Тогда 
				Сообщить("Документ не создан: нет остатков для закрытия.", СтатусСообщения.Важное);
			Иначе
				//бит_БК_Общий.ПопыткаЗакрытияИлиВозвратаСтатусаЗаявокПоДаннымБК(пНаборЗаписей.Выгрузить(), пРегистратор, "ПослеПроведения");
			КонецЕсли;
			УстановитьПривилегированныйРежим(пТекущийСтатусПривилегированногоРежима);
			Возврат;
		КонецЕсли;		 
		
		Попытка
			
			пДокументЗакрытия.Записать(РежимЗаписиДокумента.Проведение);
			Успешно = Истина;
		Исключение					
			Сообщить("Документ не удалось провести по причине:", СтатусСообщения.Важное);
			Сообщить(ОписаниеОшибки());
			Успешно = Ложь;
		КонецПопытки;
		
		Если НЕ Успешно Тогда 
			Попытка
				
				пДокументЗакрытия.Записать(РежимЗаписиДокумента.Запись);
				Успешно = Истина;
			Исключение
				
				Сообщить("Документ не удалось записать по причине:",СтатусСообщения.Важное);
				Сообщить(ОписаниеОшибки());
				Успешно = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Если Успешно Тогда 
			
			Сообщить("Создан документ: " + пДокументЗакрытия.Ссылка);
			парСсылаНаДокуменЗакрытия = пДокументЗакрытия.Ссылка;
		КонецЕсли; 
	Иначе
		
		Если Не ПытатьсяЗакрыватьФВБ Тогда 
			Сообщить("Документ не создан: нет остатков для закрытия.", СтатусСообщения.Важное);
		Иначе
			//бит_БК_Общий.ПопыткаЗакрытияИлиВозвратаСтатусаЗаявокПоДаннымБК(пНаборЗаписей.Выгрузить(), пРегистратор, "ПослеПроведения");
		КонецЕсли;
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(пТекущийСтатусПривилегированногоРежима);
	
КонецПроцедуры // НеобходимостьИЗакрытиеОстаткаСервер()

Функция ПолучитьМассивУникальныхКонтролируемыхСценариев(знач парТЧБДДС)

	пМассивСценариев = парТЧБДДС.Выгрузить(, "Сценарий");
	Если пМассивСценариев.Количество() = 0 Тогда  
		
		Возврат Неопределено;
	Иначе
		
		пЗапрос = Новый Запрос;
		пЗапрос.Текст = 
		" ВЫБРАТЬ
		|	ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования) КАК СценарийКонтролируемый,
		|	МАКСИМУМ(ВЫРАЗИТЬ(бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Справочник.СценарииПланирования)) КАК СценарийКонтролирующий
		|ИЗ
		|	РегистрСведений.бит_БК_НастройкиБК КАК бит_БК_НастройкиБК
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
		|		ПО ((ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования)) = (ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.СценарииПланирования)))
		|ГДЕ
		|	бит_БК_НастройкиБК.Группа = ""Контроль бюджета""
		|	И бит_СоответствияАналитик.ВидСоответствия.Код = ""бит_БК_СценарийВСценарийКонтролируемый""
		|	И ВЫРАЗИТЬ(бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Справочник.СценарииПланирования) В (&пзКонтролирующиеСценарии)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования)";
		
		пЗапрос.УстановитьПараметр("пзКонтролирующиеСценарии", пМассивСценариев);
		
		пТЗРез = пЗапрос.Выполнить().Выгрузить();
		
		Если пТЗРез.Количество() = 0 Тогда  
			
			Возврат Неопределено;
		КонецЕсли;
		
		пСписокЗначений = Новый СписокЗначений;
		пСписокЗначений.ЗагрузитьЗначения(пТЗРез.ВыгрузитьКолонку("СценарийКонтролируемый"));
		Возврат пСписокЗначений;
	КонецЕсли;
КонецФункции // ПолучитьМассивУникальныхКонтролируемыхСценариев() }bit_SVKushnirenko 04.04.2017 #2816 

Функция ЕстьДвиженияПоФВБПоИсполнениюПлана(НомерЗаявки) Экспорт 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-14 (#3478)
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	//|	бит_КонтрольныеЗначенияБюджетов.Регистратор КАК Регистратор
	//|ИЗ
	//|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК бит_КонтрольныеЗначенияБюджетов
	//|ГДЕ
	//|	бит_КонтрольныеЗначенияБюджетов.Сценарий В(&СписокСценариев)
	//|	И бит_КонтрольныеЗначенияБюджетов.Активность
	//|	И бит_КонтрольныеЗначенияБюджетов.Аналитика_1 = &НомерЗаявки
	//|	И бит_КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение <> 0
	//|	И бит_КонтрольныеЗначенияБюджетов.СценарийКонтролируемый <> &СценарийНеСопоставлено
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	//|	бит_КонтрольныеЗначенияБюджетов.Регистратор
	//|ИЗ
	//|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК бит_КонтрольныеЗначенияБюджетов
	//|ГДЕ
	//|	бит_КонтрольныеЗначенияБюджетов.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)
	//|	И бит_КонтрольныеЗначенияБюджетов.Активность
	//|	И бит_КонтрольныеЗначенияБюджетов.Аналитика_1 = &НомерЗаявки
	//|	И бит_КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение <> 0
	//|	И бит_КонтрольныеЗначенияБюджетов.СценарийКонтролируемый = &СценарийНеСопоставлено");	
	//Заменено на:
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий КАК Сценарий,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО КАК ЦФО,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Контрагент КАК Контрагент,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Проект КАК Проект,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.БанковскийСчет КАК БанковскийСчет,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый КАК СценарийКонтролируемый,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1 КАК Аналитика_1,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_2 КАК Аналитика_2,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_3 КАК Аналитика_3,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_4 КАК Аналитика_4,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_5 КАК Аналитика_5,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_6 КАК Аналитика_6,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_7 КАК Аналитика_7,
	|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот) КАК СуммаСценарийИсполнениеОборот
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
	|			,
	|			,
	|			,
	|			Сценарий В (&СписокСценариев)
	|				И Аналитика_1 = &НомерЗаявки
	|				И СценарийКонтролируемый <> &СценарийНеСопоставлено) КАК бит_КонтрольныеЗначенияБюджетовОбороты
	|ГДЕ
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Контрагент,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ДоговорКонтрагента,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Проект,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.НоменклатурнаяГруппа,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.БанковскийСчет,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_6,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_4,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_7,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_2,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_5,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Контрагент,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ДоговорКонтрагента,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Проект,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.НоменклатурнаяГруппа,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.БанковскийСчет,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_2,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_3,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_4,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_5,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_6,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_7,
	|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот)
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
	|			,
	|			,
	|			,
	|			Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)
	|				И Аналитика_1 = &НомерЗаявки
	|				И СценарийКонтролируемый = &СценарийНеСопоставлено) КАК бит_КонтрольныеЗначенияБюджетовОбороты
	|ГДЕ
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_КонтрольныеЗначенияБюджетовОбороты.БанковскийСчет,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_3,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Проект,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ДоговорКонтрагента,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_5,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_4,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.НоменклатурнаяГруппа,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Контрагент,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_6,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_2,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_7");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-14 (#3478)
	
	мСценариев = Новый Массив;
	мСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_У"));
	мСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест"));
	мСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Контракт_Инвест"));
	сцНеСопоставлено = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Служебные элементы Не сопоставлено", "Сценарии", ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка"));
	Если ЗначениеЗаполнено(сцНеСопоставлено) Тогда 
		мСценариев.Добавить(сцНеСопоставлено);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("СписокСценариев" 		, мСценариев);
	Запрос.УстановитьПараметр("НомерЗаявки"				, НомерЗаявки);	
	Запрос.УстановитьПараметр("СценарийНеСопоставлено"  , сцНеСопоставлено);
	
	Результат = Запрос.Выполнить();
		
	Возврат НЕ Результат.Пустой();
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-10 (#3348)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-02 (#3393)
Функция ЗаполнитьВидРасхода(СтруктураКонтекст, Опер = Истина) Экспорт
	
	СтруктураКонтекст.Вставить("ОК_ВидРасхода", ?(Опер,ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка"),ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность")));
	
	Возврат Истина;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-02 (#3393)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-19 (#3231)
Функция ДополнитьОпределениеВизы(СтруктураКонтекст, Знач СтрокаШаблона) Экспорт
	
		Перем РасшифровкаУсловия, ЗнПараметра;
	
	Если Не СтруктураКонтекст.Свойство("РасшифровкаУсловияОпределенияВизы", РасшифровкаУсловия) Тогда 
		РасшифровкаУсловия = "";
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-01 (#3393)
	мСпецСимволов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" ,;,№,:,?,*,(,),!,+,=,/,\,<,>,',$,#,@,~",",");
	мСпецСимволов.Добавить(",");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-01 (#3393)
	
	СтрокаПоиска = СтрокаШаблона;
	НачальныйСимволПараметра = СтрНайти(СтрокаПоиска,"%");
	Пока НачальныйСимволПараметра>0 Цикл 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-01 (#3393)	
		//КонечныйСимволПараметра = СтрНайти(Сред(СтрокаПоиска,НачальныйСимволПараметра+1), "%")+НачальныйСимволПараметра;
		//Заменено на:
		КонечныйСимволПараметра = СтрНайти(Сред(СтрокаПоиска,НачальныйСимволПараметра+1), "%");
		Если КонечныйСимволПараметра = 0 Тогда 
			Прервать;
		КонецЕсли;
		КонечныйСимволПараметра = КонечныйСимволПараметра+НачальныйСимволПараметра;
		
		//Если служебный символ встречается раньше, то ищем следующий символ %
		Для Каждого спецСимвол Из мСпецСимволов Цикл 
			ПоложениеСпецСимвола = СтрНайти(Сред(СтрокаПоиска,НачальныйСимволПараметра+1), спецСимвол);
			Если ПоложениеСпецСимвола=0 Тогда 
				Продолжить;
			КонецЕсли;
			ПоложениеСпецСимвола = ПоложениеСпецСимвола + НачальныйСимволПараметра; 
			Если ПоложениеСпецСимвола<КонечныйСимволПараметра Тогда
				НачальныйСимволПараметра = КонечныйСимволПараметра;
				СтрокаПоиска = Сред(СтрокаПоиска,КонечныйСимволПараметра);
				НачальныйСимволПараметра = 1;
				КонечныйСимволПараметра  = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НачальныйСимволПараметра = КонечныйСимволПараметра Тогда 
			Продолжить;
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-01 (#3393)
			
		ПараметрРасшифровки = СокрЛП(Сред(СтрокаПоиска,НачальныйСимволПараметра+1, КонечныйСимволПараметра-НачальныйСимволПараметра-1));
		СтрокаПоиска = Сред(СтрокаПоиска,КонечныйСимволПараметра+1);
			
		СтруктураКонтекст.Свойство(ПараметрРасшифровки,ЗнПараметра);
			
		СтрокаШаблона = СтрЗаменить(СтрокаШаблона, "%"+ПараметрРасшифровки+"%", ЗнПараметра);
		
		НачальныйСимволПараметра = СтрНайти(СтрокаПоиска,"%");
		
	КонецЦикла;
	
	СтруктураКонтекст.Вставить("РасшифровкаУсловияОпределенияВизы", РасшифровкаУсловия + СтрокаШаблона);
	
	Возврат Истина;

КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-08-26 (#3432)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-08-26 (#3432)
Функция ТекущийИнициаторОЦР(Инициатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ОК_БК_ОтветственныеЗаЦентрРезультата.СтатьяОборотов КАК СтатьяОборотов,
	|	ОК_БК_ОтветственныеЗаЦентрРезультата.ОбъектСтроительства КАК ОбъектСтроительства,
	|	ОК_БК_ОтветственныеЗаЦентрРезультата.ЦФО КАК ЦФО,
	|	ОК_БК_ОтветственныеЗаЦентрРезультата.Инициатор КАК Инициатор
	|ИЗ
	|	РегистрСведений.ОК_БК_ОтветственныеЗаЦентрРезультата КАК ОК_БК_ОтветственныеЗаЦентрРезультата
	|ГДЕ
	|	ОК_БК_ОтветственныеЗаЦентрРезультата.Инициатор = &Инициатор";
	
	Запрос.УстановитьПараметр("Инициатор", Инициатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Следующий(); 
	
КонецФункции

&НаСервере
Процедура ДобавитьКомандуФормы(Команды, Имя, Заголовок, Действие) Экспорт
	
	Если Команды.Найти(Имя) = Неопределено Тогда 
		Команда = Команды.Добавить(Имя);
		Команда.Заголовок 			   	   = Заголовок;
		Команда.Действие 				   = Действие;
		Команда.ИзменяетСохраняемыеДанные  = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКомандуНаФорму(Форма, Имя, ИмяКоманды, Заголовок, Родитель, Картинка = Неопределено, Элемент = Неопределено) Экспорт
	
	Если Форма.Элементы.Найти(Имя) = Неопределено Тогда 	
		Если Элемент = Неопределено Тогда 
			Кнопка = Форма.Элементы.Добавить(Имя, Тип("КнопкаФормы"), Родитель);
		Иначе
			Кнопка = Форма.Элементы.Вставить(Имя, Тип("КнопкаФормы"), Родитель, Элемент);
		КонецЕсли;
			
		Кнопка.ИмяКоманды = ИмяКоманды; 
		Кнопка.Заголовок  = Заголовок;		
		Кнопка.ТолькоВоВсехДействиях = Ложь;
		Если Картинка <> Неопределено Тогда           
			Кнопка.Картинка = Картинка;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-08-26 (#3432)


// ОКЕЙ Гиль А.В. (Софтлаб) Начало 2019-10-02 (#3497)
//Функция позволяет найти ссылку на объект любого типа. 
//Поиск может выполняться по реквизитам основной таблицы, 
//значениям дополнительных реквизитов по табличной части «Дополнительные реквизиты», 
//значениям доп. сведений (регистр сведений «ДополнительныеСведения»).
//
//ИмяТаблицы	Строка	Имя таблицы, по которой осуществляется поиск. Пример: «Справочник.Номенклатура»
//СтруктураРеквизитов	Структура	В качестве ключа передается имя реквизита основной таблицы, в качестве значения — значение реквизита
//СоответствиеДопРеквизитов	Соответствие	В качестве ключа передается ссылка на доп. реквизит — элемент плана вида характеристик «ДополнительныеРеквизитыИСведения», в качестве значения — значение реквизита
//СоответствиеДопСведений	Соответствие	В качестве ключа передается ссылка на доп. сведение — элемент плана вида характеристик «ДополнительныеРеквизитыИСведения», в качестве значения — значение доп. сведения
Функция СсылкаНаОбъектПоРеквизитам(ИмяТаблицы, СтруктураРеквизитов = Неопределено, СоответствиеДопРеквизитов = Неопределено, СоответствиеДопСведений = Неопределено) Экспорт 
 
    ИмяТаблицыВЗапросе = СтрЗаменить(ИмяТаблицы, ".", "");
 
    СхемаЗапроса = Новый СхемаЗапроса;
 
    ЗапросПакета    = СхемаЗапроса.ПакетЗапросов[0];
    ОператорВыбора    = ЗапросПакета.Операторы[0];
 
    Если СтруктураРеквизитов <> Неопределено Тогда
 
        ИсточникСправочник    = ОператорВыбора.Источники.Добавить(ИмяТаблицы, ИмяТаблицыВЗапросе);
 
        ОператорВыбора.ВыбираемыеПоля.Добавить(ИмяТаблицыВЗапросе + ".Ссылка");
 
        Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
            ОператорВыбора.Отбор.Добавить(ИмяТаблицыВЗапросе + "." + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ);
        КонецЦикла;
 
        Если СоответствиеДопРеквизитов <> Неопределено
            ИЛИ СоответствиеДопСведений <> Неопределено Тогда
 
            ЗапросПакета.ТаблицаДляПомещения = "ОсновнаяТаблица";
 
            ЗапросПакета    = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
            ОператорВыбора    = ЗапросПакета.Операторы[0];
 
        КонецЕсли;
 
    КонецЕсли;
 
    Если СоответствиеДопРеквизитов <> Неопределено Тогда
 
        Для Сч = 0 По СоответствиеДопРеквизитов.Количество()-1 Цикл
 
            ИсточникСправочник    = ОператорВыбора.Источники.Добавить(ИмяТаблицы + ".ДополнительныеРеквизиты", ИмяТаблицыВЗапросе + "ДополнительныеРеквизиты");
 
            ОператорВыбора.ВыбираемыеПоля.Добавить(ИмяТаблицыВЗапросе + "ДополнительныеРеквизиты.Ссылка");
 
            ОператорВыбора.Отбор.Добавить(ИмяТаблицыВЗапросе + "ДополнительныеРеквизиты.Свойство = &Свойство" + Формат(Сч+1, "ЧГ=0"));
            ОператорВыбора.Отбор.Добавить(ИмяТаблицыВЗапросе + "ДополнительныеРеквизиты.Значение = &Значение" + Формат(Сч+1, "ЧГ=0"));
 
            Если СтруктураРеквизитов <> Неопределено Тогда
 
                ИсточникОсновнаяТаблица = ОператорВыбора.Источники.Добавить("ОсновнаяТаблица", "ОсновнаяТаблица");
 
                Соединение = ИсточникОсновнаяТаблица.Соединения.Добавить(ИсточникСправочник);
                ИсточникОсновнаяТаблица.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
 
            КонецЕсли;
 
            Если СоответствиеДопРеквизитов.Количество()> 1
                ИЛИ СоответствиеДопСведений <> Неопределено Тогда
 
                ЗапросПакета.ТаблицаДляПомещения = "ДопРеквизит" + Формат(Сч+1, "ЧГ=0");
 
                ЗапросПакета    = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
                ОператорВыбора    = ЗапросПакета.Операторы[0];
 
            КонецЕсли;
 
        КонецЦикла;
 
    КонецЕсли;
 
    Если СоответствиеДопСведений <> Неопределено Тогда
 
        Для Сч = 0 По СоответствиеДопСведений.Количество()-1 Цикл
 
            ИсточникРегистр    = ОператорВыбора.Источники.Добавить("РегистрСведений.ДополнительныеСведения", "ДополнительныеСведения");
 
            ОператорВыбора.ВыбираемыеПоля.Добавить("ДополнительныеСведения.Объект");
            ЗапросПакета.Колонки[0].Псевдоним = "Ссылка";
 
            ОператорВыбора.Отбор.Добавить("ДополнительныеСведения.Свойство = &Сведение" + Формат(Сч+1, "ЧГ=0"));
            ОператорВыбора.Отбор.Добавить("ДополнительныеСведения.Значение = &ЗначениеСведения" + Формат(Сч+1, "ЧГ=0"));
 
            Если СтруктураРеквизитов <> Неопределено Тогда
 
                ИсточникОсновнаяТаблица = ОператорВыбора.Источники.Добавить("ОсновнаяТаблица", "ОсновнаяТаблица");
 
                Соединение = ИсточникОсновнаяТаблица.Соединения.Добавить(ИсточникРегистр, "ОсновнаяТаблица.Ссылка = ДополнительныеСведения.Объект");
                ИсточникОсновнаяТаблица.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
 
            КонецЕсли;
 
            Если СоответствиеДопСведений.Количество()> 1
                ИЛИ СоответствиеДопРеквизитов <> Неопределено Тогда
 
                ЗапросПакета.ТаблицаДляПомещения = "ДопСведение" + Формат(Сч+1, "ЧГ=0");
 
                ЗапросПакета    = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
                ОператорВыбора    = ЗапросПакета.Операторы[0];
 
            КонецЕсли;
 
        КонецЦикла;
 
    КонецЕсли;
 
    Если СоответствиеДопРеквизитов <> Неопределено
        И (СоответствиеДопРеквизитов.Количество() <> 1 ИЛИ СоответствиеДопСведений <> Неопределено) Тогда
 
        ИсточникВТ1 = ОператорВыбора.Источники.Добавить("ДопРеквизит1", "ДопРеквизит1");
 
        ОператорВыбора.ВыбираемыеПоля.Добавить("ДопРеквизит1.Ссылка");
 
        Для Сч = 1 По СоответствиеДопРеквизитов.Количество()-1 Цикл
 
            СчСтрока = Формат(Сч+1, "ЧГ=0");
 
            ИсточникВТ = ОператорВыбора.Источники.Добавить("ДопРеквизит" + СчСтрока, "ДопРеквизит" + СчСтрока);
            Соединение = ИсточникВТ1.Соединения.Добавить(ИсточникВТ, "ДопРеквизит1.Ссылка = ДопРеквизит" + СчСтрока + ".Ссылка");
            ИсточникВТ1.Соединения[ИсточникВТ1.Соединения.Количество()-1].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
 
        КонецЦикла;
 
    КонецЕсли;
 
    Если СоответствиеДопСведений <> Неопределено
        И (СоответствиеДопСведений.Количество()> 1 ИЛИ СоответствиеДопРеквизитов <> Неопределено) Тогда
 
        Если СоответствиеДопРеквизитов = Неопределено Тогда
 
            ИсточникВТ1 = ОператорВыбора.Источники.Добавить("ДопСведение1", "ДопСведение1");
 
            ОператорВыбора.ВыбираемыеПоля.Добавить("ДопСведение1.Ссылка");
 
            СтартовыйИндекс        = 1;
            ИмяПервойТаблицы    = "ДопСведение1";
 
        Иначе
 
            СтартовыйИндекс        = 0;
            ИмяПервойТаблицы    = "ДопРеквизит1";
 
        КонецЕсли;
 
        Для Сч = СтартовыйИндекс По СоответствиеДопСведений.Количество()-1 Цикл
 
            СчСтрока = Формат(Сч+1, "ЧГ=0");
 
            ИсточникВТ = ОператорВыбора.Источники.Добавить("ДопСведение" + СчСтрока, "ДопСведение" + СчСтрока);
            Соединение = ИсточникВТ1.Соединения.Добавить(ИсточникВТ, ИмяПервойТаблицы + ".Ссылка = ДопСведение" + СчСтрока + ".Ссылка");
            ИсточникВТ1.Соединения[ИсточникВТ1.Соединения.Количество()-1].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
 
        КонецЦикла;
 
    КонецЕсли;
 
    Запрос = Новый Запрос;
 
    Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
 
    Если СтруктураРеквизитов <> Неопределено Тогда
 
        Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
            Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
        КонецЦикла;
 
    КонецЕсли;
 
    Если СоответствиеДопРеквизитов <> Неопределено Тогда
 
        Сч = 1;
 
        Для Каждого КлючИЗначение Из СоответствиеДопРеквизитов Цикл
 
            СчСтрока = Формат(Сч, "ЧГ=0");
 
            Запрос.УстановитьПараметр("Свойство" + СчСтрока, КлючИЗначение.Ключ);
            Запрос.УстановитьПараметр("Значение" + СчСтрока, КлючИЗначение.Значение);
 
            Сч = Сч + 1;
 
        КонецЦикла;
 
    КонецЕсли;
 
    Если СоответствиеДопСведений <> Неопределено Тогда
 
        Сч = 1;
 
        Для Каждого КлючИЗначение Из СоответствиеДопСведений Цикл
 
            СчСтрока = Формат(Сч, "ЧГ=0");
 
            Запрос.УстановитьПараметр("Сведение" + СчСтрока, КлючИЗначение.Ключ);
            Запрос.УстановитьПараметр("ЗначениеСведения" + СчСтрока, КлючИЗначение.Значение);
 
            Сч = Сч + 1;
 
        КонецЦикла;
 
    КонецЕсли;
 
    РезультатЗапроса = Запрос.Выполнить();
 
    Если РезультатЗапроса.Пустой() Тогда
        Возврат Неопределено;
    КонецЕсли;
 
    Выборка = РезультатЗапроса.Выбрать(); 
	Выборка.Следующий();
 
    Возврат Выборка.Ссылка;
 
КонецФункции
// ОКЕЙ Гиль А.В. (Софтлаб) Конец 2019-10-02 (#3497)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-19 (#3443)
Функция ВыполнитьПроверкуОднозначногоСоответствияСтатьиОборотовИСтавкиНДСКСчету(Объект, Счет, Отказ) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-11-22 (#3547)
	МассивСчетов = Новый Массив;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-11-22 (#3547)
	
	Если (ТипОбъекта = Тип("ДокументОбъект.ПоступлениеТоваровУслуг")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
		И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги")) Тогда
						 
		ТЧ_Оборудование 		= Объект.Оборудование.Выгрузить(,"СчетУчета, ок_СтатьяОборотов, СтавкаНДС");
		ТЧ_ОбъектыСтроительства = Объект.ОбъектыСтроительства.Выгрузить(,"СчетУчета, ок_СтатьяОборотов, СтавкаНДС");
		ТЧ_Товары 				= Объект.Товары.Выгрузить(,"СчетУчета, ок_СтатьяОборотов, СтавкаНДС");
		ТЧ_Услуги 				= Объект.Услуги.Выгрузить(,"СчетЗатрат, ок_СтатьяОборотов, СтавкаНДС");
		
		Счета = ТЧ_Оборудование.Скопировать(,"СчетУчета");
		ПроверкаСтатьиОборотовПоСчету = ТЧ_Оборудование.Скопировать(,"СчетУчета, ок_СтатьяОборотов");
		ПроверкаСтавкиНДСПоСчету = ТЧ_Оборудование.Скопировать(,"СчетУчета, СтавкаНДС");
		
		Для каждого СтрокаТЧ Из ТЧ_ОбъектыСтроительства Цикл
		
			Счета_НоваяСтрока = Счета.Добавить();
			Счета_НоваяСтрока.СчетУчета = СтрокаТЧ.СчетУчета;
			
			ПроверкаСтатьиОборотовПоСчету_НоваяСтрока = ПроверкаСтатьиОборотовПоСчету.Добавить();
			ПроверкаСтатьиОборотовПоСчету_НоваяСтрока.СчетУчета 		= СтрокаТЧ.СчетУчета;
			ПроверкаСтатьиОборотовПоСчету_НоваяСтрока.ок_СтатьяОборотов = СтрокаТЧ.ок_СтатьяОборотов;
			
			ПроверкаСтавкиНДСПоСчету_НоваяСтрока = ПроверкаСтавкиНДСПоСчету.Добавить();
			ПроверкаСтавкиНДСПоСчету_НоваяСтрока.СчетУчета 	= СтрокаТЧ.СчетУчета;
			ПроверкаСтавкиНДСПоСчету_НоваяСтрока.СтавкаНДС	= СтрокаТЧ.СтавкаНДС;
			
		КонецЦикла; 
		
		Для каждого СтрокаТЧ Из ТЧ_Товары Цикл
		
			Счета_НоваяСтрока = Счета.Добавить();
			Счета_НоваяСтрока.СчетУчета = СтрокаТЧ.СчетУчета;
			
			ПроверкаСтатьиОборотовПоСчету_НоваяСтрока = ПроверкаСтатьиОборотовПоСчету.Добавить();
			ПроверкаСтатьиОборотовПоСчету_НоваяСтрока.СчетУчета 		= СтрокаТЧ.СчетУчета;
			ПроверкаСтатьиОборотовПоСчету_НоваяСтрока.ок_СтатьяОборотов = СтрокаТЧ.ок_СтатьяОборотов;
			
			ПроверкаСтавкиНДСПоСчету_НоваяСтрока = ПроверкаСтавкиНДСПоСчету.Добавить();
			ПроверкаСтавкиНДСПоСчету_НоваяСтрока.СчетУчета 	= СтрокаТЧ.СчетУчета;
			ПроверкаСтавкиНДСПоСчету_НоваяСтрока.СтавкаНДС	= СтрокаТЧ.СтавкаНДС;
			
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из ТЧ_Услуги Цикл
		
			Счета_НоваяСтрока = Счета.Добавить();
			Счета_НоваяСтрока.СчетУчета = СтрокаТЧ.СчетЗатрат;
			
			ПроверкаСтатьиОборотовПоСчету_НоваяСтрока = ПроверкаСтатьиОборотовПоСчету.Добавить();
			ПроверкаСтатьиОборотовПоСчету_НоваяСтрока.СчетУчета 		= СтрокаТЧ.СчетЗатрат;
			ПроверкаСтатьиОборотовПоСчету_НоваяСтрока.ок_СтатьяОборотов = СтрокаТЧ.ок_СтатьяОборотов;
			
			ПроверкаСтавкиНДСПоСчету_НоваяСтрока = ПроверкаСтавкиНДСПоСчету.Добавить();
			ПроверкаСтавкиНДСПоСчету_НоваяСтрока.СчетУчета 	= СтрокаТЧ.СчетЗатрат;
			ПроверкаСтавкиНДСПоСчету_НоваяСтрока.СтавкаНДС	= СтрокаТЧ.СтавкаНДС;
			
		КонецЦикла;
		
		Счета.Свернуть("СчетУчета");
		МассивСчетов = Счета.ВыгрузитьКолонку("СчетУчета");
		ПроверкаСтатьиОборотовПоСчету.Свернуть("СчетУчета, ок_СтатьяОборотов");
		Для Каждого ТекСтрока Из ПроверкаСтатьиОборотовПоСчету Цикл 
			ТекСтрока.ок_СтатьяОборотов = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС,ТекСтрока.ок_СтатьяОборотов);
		КонецЦикла;
		ПроверкаСтатьиОборотовПоСчету.Свернуть("СчетУчета, ок_СтатьяОборотов");
		ПроверкаСтавкиНДСПоСчету.Свернуть("СчетУчета, СтавкаНДС");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПоступлениеДопРасходов")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Счета = Объект.Товары.Выгрузить(,"СчетУчета");
		Счета.Свернуть("СчетУчета");
		МассивСчетов = Счета.ВыгрузитьКолонку("СчетУчета");
		ПроверкаСтатьиОборотовПоСчету = Объект.Товары.Выгрузить(,"СчетУчета, ок_СтатьяОборотов");
		ПроверкаСтатьиОборотовПоСчету.Свернуть("СчетУчета, ок_СтатьяОборотов");
		Для Каждого ТекСтрока Из ПроверкаСтатьиОборотовПоСчету Цикл 
			ТекСтрока.ок_СтатьяОборотов = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС,ТекСтрока.ок_СтатьяОборотов);
		КонецЦикла;
		ПроверкаСтатьиОборотовПоСчету.Свернуть("СчетУчета, ок_СтатьяОборотов");
		ПроверкаСтавкиНДСПоСчету = Объект.Товары.Выгрузить(,"СчетУчета");
		ПроверкаСтавкиНДСПоСчету.Свернуть("СчетУчета");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПоступлениеНМА")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		Счета = Объект.НематериальныеАктивы.Выгрузить(,"СчетУчета");
		Счета.Свернуть("СчетУчета");
		МассивСчетов = Счета.ВыгрузитьКолонку("СчетУчета");
		ПроверкаСтатьиОборотовПоСчету = Объект.НематериальныеАктивы.Выгрузить(,"СчетУчета, ок_СтатьяОборотов");
		ПроверкаСтатьиОборотовПоСчету.Свернуть("СчетУчета, ок_СтатьяОборотов");
		Для Каждого ТекСтрока Из ПроверкаСтатьиОборотовПоСчету Цикл 
			ТекСтрока.ок_СтатьяОборотов = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС,ТекСтрока.ок_СтатьяОборотов);
		КонецЦикла;	
		ПроверкаСтатьиОборотовПоСчету.Свернуть("СчетУчета, ок_СтатьяОборотов");
		ПроверкаСтавкиНДСПоСчету = Объект.НематериальныеАктивы.Выгрузить(,"СчетУчета, СтавкаНДС");
		ПроверкаСтавкиНДСПоСчету.Свернуть("СчетУчета, СтавкаНДС");
	
	КонецЕсли; 
	
	СтруктураОтбора = Новый Структура("СчетУчета");
		
	ТекстСообщения = "";
	Для каждого ТекущийСчет Из МассивСчетов Цикл
		
		Если НЕ (ТекущийСчет.ПринадлежитЭлементу(Счет)
			ИЛИ ТекущийСчет = Счет) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураОтбора.СчетУчета = ТекущийСчет;
		
		Если СтрНайти(ТекстСообщения, "Статьи оборотов по " + Счет + " счету не совпадают") = 0 Тогда
			НайденныеСтроки = ПроверкаСтатьиОборотовПоСчету.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", Символы.ПС) + "Статьи оборотов по " + Счет + " счету не совпадают!";
			КонецЕсли; 
		КонецЕсли;
		
		Если СтрНайти(ТекстСообщения, "Ставки НДС по " + Счет + " счету не совпадают") = 0 Тогда
			НайденныеСтроки = ПроверкаСтавкиНДСПоСчету.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", Символы.ПС) + "Ставки НДС по " + Счет + " счету не совпадают!";
			КонецЕсли; 
		КонецЕсли;
		
		Если СтрНайти(ТекстСообщения, "Статьи оборотов по " + Счет + " счету не совпадают") <> 0
			И СтрНайти(ТекстСообщения, "Ставки НДС по " + Счет + " счету не совпадают") <> 0 Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ТекстСообщения <> "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения ,,,, Отказ);
	КонецЕсли;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-19 (#3443)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-13 (#3533)
Функция ПроверитьНаличиеСозданногоДокументаЗнРДСВСтатусе(ТекущийОбъект) Экспорт
	
	// проверим связку документа с ЗнРДС, если есть, то запретим изменение документа
	МетаданныеДокумента = ТекущийОбъект.Ссылка.Метаданные();
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеДокумента) 
		И ЗначениеЗаполнено(ТекущийОбъект.Ссылка) 
		И (ТекущийОбъект.Проведен
			ИЛИ МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить) Тогда
		
		МассивДокументовРасчета = Новый Массив();
		МассивДокументовРасчета.Добавить(ТекущийОбъект.Ссылка);
		Возврат РегистрыБухгалтерии.Хозрасчетный.ПроверитьНаличиеСозданногоДокументаЗнРДСВСтатусе(МассивДокументовРасчета);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-13 (#3533)

//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-17 (#3267)
Функция ОпределитьСценарийПоСтатьеОборотов(СтатьяОборотов, СтруктураНеСопоставлено = Неопределено, УровеньСценарияПланирования = 0) Экспорт
	
	Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
	
	Если СтруктураНеСопоставлено = Неопределено Тогда
		СтруктураНеСопоставлено = Новый Структура("Сценарий, СтатьяОборотов");	
	 	СтруктураНеСопоставлено.Сценарий 		= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Служебные элементы Не сопоставлено", "Сценарии", Сценарий);
	 	СтруктураНеСопоставлено.СтатьяОборотов 	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Служебные элементы Не сопоставлено", "Статьи оборотов", ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка"));	
	КонецЕсли;
	
	Если СтатьяОборотов = СтруктураНеСопоставлено.СтатьяОборотов Тогда
			Сценарий = СтруктураНеСопоставлено.Сценарий;		
	ИначеЕсли УровеньСценарияПланирования = 0 Тогда
		Если СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
			Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У");
		ИначеЕсли СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест");		
		КонецЕсли;
	Иначе
		// найдем сценарии по уровню
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
		//Если УровеньСценарияПланирования = 1 Тогда
		//Заменено на:
		Если УровеньСценарияПланирования = 4 Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)		
			Если СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
				Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У");
			ИначеЕсли СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
				Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест");		
			КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
		//ИначеЕсли УровеньСценарияПланирования = 2 Тогда
		//Заменено на:
		ИначеЕсли УровеньСценарияПланирования = 6 Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)			
			Если СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
				Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ФактОплат_У");
			ИначеЕсли СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
				Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ФактОплат_И");		
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Сценарий;
	
КонецФункции
//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-17 (#3267)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-19 (#3443)
Функция УровеньСценарияПоДвижениямДокумента(Документ) Экспорт
	
	УровеньСценария = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_КонтрольныеЗначенияБюджетов.СценарийКонтролируемый.ок_УровеньСценария КАК УровеньСценария
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК бит_КонтрольныеЗначенияБюджетов
	|ГДЕ
	|	бит_КонтрольныеЗначенияБюджетов.Регистратор = &Регистратор
	|	И бит_КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	бит_КонтрольныеЗначенияБюджетов.СценарийКонтролируемый.ок_УровеньСценария УБЫВ"
	;
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		УровеньСценария = Выборка.УровеньСценария;
	КонецЕсли;
	
	Возврат УровеньСценария;
	
КонецФункции	
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-19 (#3443)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
Процедура ОчиститьТаблицуСоответствияОтЗаписейПоВидамСтатейВОПБ(ОбСистемы_ОПБ, пТаблицаСоответствия) Экспорт
	
	пИндекс = пТаблицаСоответствия.Количество()-1;
	Пока пИндекс>=0 Цикл 
		
		Если пТаблицаСоответствия[пИндекс].Источник = ОбСистемы_ОПБ 
		   И пТаблицаСоответствия[пИндекс].Приемник = ОбСистемы_ОПБ
		Тогда 
		 	пТаблицаСоответствия.Удалить(пИндекс);
		КонецЕсли;
			
		пИндекс = пИндекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
Функция ОпределитьСценарий(ВидСтатьи,УровеньСценария) Экспорт
	
	Сценарий = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ПустаяСсылка");
	
	Если ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") 
		И УровеньСценария = 1 Тогда
		Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У");
	ИначеЕсли ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") 
		И УровеньСценария = 2 Тогда
		Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ФактОплат_У");			
	ИначеЕсли ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность")
		И УровеньСценария = 1 Тогда
		Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест");			
	ИначеЕсли ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность")
		И УровеньСценария = 2 Тогда
		Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ФактОплат_И");			
	КонецЕсли;
	
	Возврат Сценарий;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)		

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-16 (#3795)
Функция ПолучитьКодВидаДоходовПоЗнРДС(ЗаявкаНаРасходованиеДС, ТекстОшибки = "")  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов КАК СтатьяБДДС,
		|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ок_СтатьяОборотовБДР КАК СтатьяБДР
		|ПОМЕСТИТЬ ВТ_ДанныеТЧ
		|ИЗ
		|	Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
		|ГДЕ
		|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка = &ЗнРДС
		|
		|СГРУППИРОВАТЬ ПО
		|	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов,
		|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ок_СтатьяОборотовБДР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ЕСТЬNULL(СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.КодВидовДоходов, СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.КодВидовДоходов), 0) КАК КодВидовДоходов
		|ИЗ
		|	ВТ_ДанныеТЧ КАК ДанныеТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СоответствиеКодовВидовДоходовИСтатейБДДСиБДР КАК СоответствиеКодовВидовДоходовИСтатейБДДСиБДР
		|		ПО ДанныеТЧ.СтатьяБДДС = СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.СтатьяБДДС
		|			И ДанныеТЧ.СтатьяБДР = СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.СтатьяБДР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СоответствиеКодовВидовДоходовИСтатейБДДСиБДР КАК СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР
		|		ПО (ДанныеТЧ.СтатьяБДДС = СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.СтатьяБДДС)
		|			И (СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.СтатьяБДР = ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЕСТЬNULL(СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.КодВидовДоходов, СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.КодВидовДоходов), 0)";
	
	Запрос.УстановитьПараметр("ЗнРДС", ЗаявкаНаРасходованиеДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
		ТекстОшибки = "Код назначения платежа не заполнен, т.к полученные значения кода из РС «ок_СоответствиеКодовВидовДоходовИСтатейБДДСиБДР» различны";
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат ВыборкаДетальныеЗаписи[0].КодВидовДоходов;
	
КонецФункции

Функция ПолучитьКодВидаДоходовПоТаблицеСтатей(ТаблицаРаспределение, ТекстОшибки = "")  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРаспределение.СтатьяОборотов КАК СтатьяБДДС,
		|	ТаблицаРаспределение.Ок_СтатьяОборотовБДР КАК СтатьяБДР
		|ПОМЕСТИТЬ ВТ_ДанныеТЧ
		|ИЗ
		|	&ТаблицаРаспределение КАК ТаблицаРаспределение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ЕСТЬNULL(СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.КодВидовДоходов, СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.КодВидовДоходов), 0) КАК КодВидовДоходов
		|ИЗ
		|	ВТ_ДанныеТЧ КАК ДанныеТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СоответствиеКодовВидовДоходовИСтатейБДДСиБДР КАК СоответствиеКодовВидовДоходовИСтатейБДДСиБДР
		|		ПО ДанныеТЧ.СтатьяБДДС = СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.СтатьяБДДС
		|			И ДанныеТЧ.СтатьяБДР = СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.СтатьяБДР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СоответствиеКодовВидовДоходовИСтатейБДДСиБДР КАК СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР
		|		ПО (ДанныеТЧ.СтатьяБДДС = СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.СтатьяБДДС)
		|			И (СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.СтатьяБДР = ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЕСТЬNULL(СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.КодВидовДоходов, СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.КодВидовДоходов), 0)";
	
	Запрос.УстановитьПараметр("ТаблицаРаспределение", ТаблицаРаспределение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
		ТекстОшибки = "Код назначения платежа не заполнен, т.к полученные значения кода из РС «ок_СоответствиеКодовВидовДоходовИСтатейБДДСиБДР» различны";
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат ВыборкаДетальныеЗаписи[0].КодВидовДоходов;
	
КонецФункции

Функция ПолучитьКодВидаДоходовПоСтруктуреПараметров(СтруктураПараметров, ТекстОшибки = "")  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&СтатьяБДДС КАК СтатьяБДДС,
		|	&СтатьяБДР КАК СтатьяБДР
		|ПОМЕСТИТЬ ВТ_ДанныеТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ЕСТЬNULL(СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.КодВидовДоходов, СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.КодВидовДоходов), 0) КАК КодВидовДоходов
		|ИЗ
		|	ВТ_ДанныеТЧ КАК ДанныеТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СоответствиеКодовВидовДоходовИСтатейБДДСиБДР КАК СоответствиеКодовВидовДоходовИСтатейБДДСиБДР
		|		ПО ДанныеТЧ.СтатьяБДДС = СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.СтатьяБДДС
		|			И ДанныеТЧ.СтатьяБДР = СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.СтатьяБДР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СоответствиеКодовВидовДоходовИСтатейБДДСиБДР КАК СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР
		|		ПО (ДанныеТЧ.СтатьяБДДС = СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.СтатьяБДДС)
		|			И (СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.СтатьяБДР = ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЕСТЬNULL(СоответствиеКодовВидовДоходовИСтатейБДДСиБДР.КодВидовДоходов, СоответствиеКодовВидовДоходовИСтатейБДДСиБДР_БезСтатьиБДР.КодВидовДоходов), 0)";
	
	Запрос.УстановитьПараметр("СтатьяБДДС", СтруктураПараметров.СтатьяБДДС);
	Запрос.УстановитьПараметр("СтатьяБДР", СтруктураПараметров.СтатьяБДР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
		ТекстОшибки = "Код назначения платежа не заполнен, т.к полученные значения кода из РС «ок_СоответствиеКодовВидовДоходовИСтатейБДДСиБДР» различны";
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат ВыборкаДетальныеЗаписи[0].КодВидовДоходов;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-16 (#3795)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-24 (#3820)
Функция ПроверитьГраницыПериодов(ДатаПроверки, Организация, Раздел) Экспорт

	// Получить Границу запрета изменения данных
	
	ПериодОткрыт = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
		|ПОМЕСТИТЬ ВТ_ДатыЗапретаИзменения
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	ДатыЗапретаИзменения.Объект = &Организация
		|	И ДатыЗапретаИзменения.Раздел = &Раздел
		|	И ДатыЗапретаИзменения.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ДатыЗапретаИзменения.ДатаЗапрета
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|		ПО СоставыГруппПользователей.ГруппаПользователей = ДатыЗапретаИзменения.Пользователь
		|			И (СоставыГруппПользователей.ГруппаПользователей <> СоставыГруппПользователей.Пользователь)
		|			И (ДатыЗапретаИзменения.Объект = &Организация)
		|			И (ДатыЗапретаИзменения.Раздел = &Раздел)
		|			И (СоставыГруппПользователей.Пользователь = &Пользователь)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ДатыЗапретаИзменения.ДатаЗапрета
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	ДатыЗапретаИзменения.Объект = &Организация
		|	И ДатыЗапретаИзменения.Раздел = &Раздел
		|	И ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДатыЗапретаИзменения.Приоритет КАК Приоритет,
		|	МИНИМУМ(ДатыЗапретаИзменения.ДатаЗапрета) КАК ДатаЗапрета
		|ИЗ
		|	ВТ_ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыЗапретаИзменения.Приоритет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Пользователь",	бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("Раздел", 		Раздел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Если ДатаПроверки < ВыборкаДетальныеЗаписи.ДатаЗапрета Тогда
			ПериодОткрыт = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПериодОткрыт;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-24 (#3820)
	
КонецФункции

Функция ПроверитьГраницыПериодовМСФО(ДатаПроверки, Организация) Экспорт
	
	ПериодОткрыт = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектСистемы 	= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрБухгалтерии.бит_Дополнительный_2");
	ТаблицаДат 		= бит_ОбщегоНазначения.ПолучитьЗначениеПеременной("бит_НачалоОткрытогоПериода");
		
	Если ТаблицаДат.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаДат.Организация КАК Организация,
			|	ТаблицаДат.ДатаОткрытогоПериода КАК ДатаОткрытогоПериода
			|ПОМЕСТИТЬ ТаблицаДат
			|ИЗ
			|	&ТаблицаДат КАК ТаблицаДат
			|ГДЕ
			|	ТаблицаДат.ОбъектСистемы = &ОбъектСистемы
			|	И ТаблицаДат.ДатаОткрытогоПериода <> &ПустаяДата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	1 КАК Приоритет,
			|	ТаблицаДат.ДатаОткрытогоПериода КАК ДатаОткрытогоПериода
			|ПОМЕСТИТЬ ВТ_ДатыОткрытогоПериода
			|ИЗ
			|	ТаблицаДат КАК ТаблицаДат
			|ГДЕ
			|	ТаблицаДат.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	0,
			|	ТаблицаДат.ДатаОткрытогоПериода
			|ИЗ
			|	ТаблицаДат КАК ТаблицаДат
			|ГДЕ
			|	ТаблицаДат.Организация = &Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаДат
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДатыОткрытогоПериода.Приоритет КАК Приоритет,
			|	МИНИМУМ(ДатыОткрытогоПериода.ДатаОткрытогоПериода) КАК ДатаОткрытогоПериода
			|ИЗ
			|	ВТ_ДатыОткрытогоПериода КАК ДатыОткрытогоПериода
			|
			|СГРУППИРОВАТЬ ПО
			|	ДатыОткрытогоПериода.Приоритет
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет";

		Запрос.УстановитьПараметр("ТаблицаДат"       ,ТаблицаДат);
		Запрос.УстановитьПараметр("Организация"      ,Организация);
		Запрос.УстановитьПараметр("ОбъектСистемы"    ,ОбъектСистемы);
		Запрос.УстановитьПараметр("ПустаяДата"       ,Дата('00010101'));
		
		РезультатЗапроса = Запрос.Выполнить();
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Если ДатаПроверки < ВыборкаДетальныеЗаписи.ДатаОткрытогоПериода Тогда
				ПериодОткрыт = Ложь;
			КонецЕсли;

		КонецЕсли; 
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПериодОткрыт;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-24 (#3820)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-11-16 (#3842)
Функция НайтиЗаявкуНаДоговорДляЗнРДС(ЗнРДС) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ЗнРДС)
		ИЛИ НЕ ТипЗнч(ЗнРДС) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств")
		ИЛИ НЕ ЗначениеЗаполнено(ЗнРДС.ДокументОснование) Тогда
		
		Возврат ПредопределенноеЗначение("Документ.рс_ЗаявкаНаДоговор.ПустаяСсылка");
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкаНаРасходованиеСредств.Ссылка КАК ЗнРДС,
		|	МАКСИМУМ(ЗаявкаиНаДоговор.Ссылка) КАК ЗаявкаНаДоговор
		|ИЗ
		|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.рс_ЗаявкаНаДоговор КАК ЗаявкаиНаДоговор
		|		ПО ЗаявкаНаРасходованиеСредств.ДокументОснование.ОК_ID_Разноска = ЗаявкаиНаДоговор.ID
		|			И (НЕ ЗаявкаиНаДоговор.ПометкаУдаления)
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредств.Ссылка = &ЗнРДС
		|	И НЕ ЗаявкаиНаДоговор.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаРасходованиеСредств.Ссылка";
	
	Запрос.УстановитьПараметр("ЗнРДС", ЗнРДС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаявкаНаДоговор = Выборка.ЗаявкаНаДоговор;
	Иначе 	
		ЗаявкаНаДоговор = ПредопределенноеЗначение("Документ.рс_ЗаявкаНаДоговор.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ЗаявкаНаДоговор;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-11-16 (#3842)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-19 (#МДМ)
// Функция получает массив ролей, которые предоставляют переданное право доступа
//
// Параметры:
//  <ПравоДоступа>  		- <Строка> - название права доступа к объекту метаданных
//  <ОбъектМетаданных>  	- <ОбъектМетаданных>, <Строка> - Если передана строка, то формат следующий "Справочники.Контрагенты"
//  <Пользователь>  		- <Справочник.Пользователи> - Необязательный параметр, если заполнен, то выполняется проверка на наличие у пользователя роли.
//  <МассивРолейИсключение> - <Массив>, <Строка> - Если передана строка, то формат следующий "Роль1;Роль2;Роль3"
//
// Возвращаемое значение:
//   <Массив>   - Массив ролей с указанным правом доступа на объект метаданных с возможным отбором по пользователю и исключающим ролям.
//
Функция ПолучитьМассивРолейПоПравуДляОбъекта(ПравоДоступа, Знач ОбъектМетаданных, Пользователь = Неопределено, Знач МассивРолейИсключение = Неопределено) Экспорт

	МассивРолей = Новый Массив;
	
	Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
		
		МассивПутиКОбъектуМетаданных = СтрРазделить(ОбъектМетаданных, ".", Ложь);
		Если МассивПутиКОбъектуМетаданных.Количество() <> 2 Тогда
			Возврат МассивРолей;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные[МассивПутиКОбъектуМетаданных[0]][МассивПутиКОбъектуМетаданных[1]];
		
	КонецЕсли;
	
	Если ТипЗнч(МассивРолейИсключение) = Тип("Строка")Тогда
	
		МассивРолейИсключение = СтрРазделить(МассивРолейИсключение, ";", Ложь);
		Счетчик = 0;
		Пока Счетчик <> МассивРолейИсключение.Количество() Цикл
			МассивРолейИсключение[Счетчик] = СокрЛП(МассивРолейИсключение[Счетчик]);
			Счетчик = Счетчик + 1;
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(МассивРолейИсключение) = Тип("Массив")Тогда
	
		Счетчик = 0;
		Пока Счетчик <> МассивРолейИсключение.Количество() Цикл
			Если ТипЗнч(МассивРолейИсключение[Счетчик]) = Тип("Строка") Тогда
				МассивРолейИсключение[Счетчик] = СокрЛП(МассивРолейИсключение[Счетчик]);
			Иначе
				МассивРолейИсключение[Счетчик] = СокрЛП(МассивРолейИсключение[Счетчик].Имя);
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЕсли; 
	
	Для каждого ТекущаяРоль Из Метаданные.Роли Цикл
		
		Если МассивРолейИсключение = Неопределено
			ИЛИ ТипЗнч(МассивРолейИсключение) = Тип("Массив")
				И МассивРолейИсключение.Найти(ТекущаяРоль.Имя) <> Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Если ПравоДоступа(ПравоДоступа, ОбъектМетаданных, ТекущаяРоль)
			И (Пользователь = Неопределено
				ИЛИ УправлениеДоступомСлужебныйПовтИсп.ЕстьРоль(ТекущаяРоль.Имя,, Пользователь, Ложь)) Тогда
		
			МассивРолей.Добавить(ТекущаяРоль);
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат МассивРолей;
	
КонецФункции 
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-19 (#МДМ)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-06-16 (#4191)
Функция DecToAny(Знач тЗначение, тОснование, АлфавитСистемыСчислений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ") Экспорт
	
	тРезультат = "";

	Пока тЗначение > 0 Цикл
		
		тРезультат = Сред(АлфавитСистемыСчислений, тЗначение%тОснование + 1, 1) + тРезультат;
		тЗначение = Цел(тЗначение/тОснование);
		
	КонецЦикла;

	Возврат тРезультат;
	
КонецФункции

Функция AnyToDec(Знач тЗначение, тОснование, АлфавитСистемыСчислений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ") Экспорт
	
	тРезультат = 0;

	тДлина = СтрДлина(тЗначение);
	Для тСимвол = 1 По СтрДлина(тЗначение) Цикл
		
		тМножитель = 1;
		Для тСчет = 1 По тДлина - тСимвол Цикл 
			тМножитель = тМножитель * тОснование;
		КонецЦикла;

		тРезультат = тРезультат + (Найти(АлфавитСистемыСчислений, Сред(тЗначение, тСимвол, 1)) - 1) * тМножитель;
		
	КонецЦикла;

	Возврат Окр(тРезультат);
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-06-16 (#4191)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
Функция ПолучитьМассивЗнРДСпоФВБ(ФВБ, Параметры = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бит_ПланируемыйРасходДенежныхСредств.ДокументПланирования КАК ДокументПланирования
		|ИЗ
		|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств КАК бит_ПланируемыйРасходДенежныхСредств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|		ПО бит_ПланируемыйРасходДенежныхСредств.ДокументПланирования = бит_СтатусыОбъектов.Объект
		|			И (бит_СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
		|ГДЕ
		|	бит_ПланируемыйРасходДенежныхСредств.ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредств
		|	И бит_ПланируемыйРасходДенежныхСредств.Аналитика_1 = &ФВБ
		|	И ИСТИНА";
	
	Запрос.УстановитьПараметр("ФВБ", ФВБ);
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		
		Для каждого ЭлементСтруктуры Из Параметры Цикл
			
			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда
				
				ТекстЗамены = "	И " + ЭлементСтруктуры.Ключ + " В (&" + ЭлементСтруктуры.Ключ + ")
							|	И ИСТИНА";
				
			Иначе
				
				ТекстЗамены = "	И " + ЭлементСтруктуры.Ключ + " = &" + ЭлементСтруктуры.Ключ + "
							|	И ИСТИНА";
				
			КонецЕсли;  
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И ИСТИНА", ТекстЗамены);
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		
		КонецЦикла; 
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивЗнРДС = РезультатЗапроса.ВыгрузитьКолонку("ДокументПланирования");

	Возврат МассивЗнРДС;
	
КонецФункции

Функция БлижайшаяРабочаяДатаПоГрафику(ТекущаяДата, График = Неопределено, ПолучатьПредшествующие = Ложь) Экспорт
	
	Если График = Неопределено Тогда
		График = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	КонецЕсли; 
	
	Если ПолучатьПредшествующие Тогда
		БлижайшаяДата = НачалоДня(ТекущаяДата) - 60 * 60 * 24;
	Иначе
		БлижайшаяДата = НачалоДня(ТекущаяДата) + 60 * 60 * 24;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(График) Тогда
	
		ВызыватьИсключение 					= Ложь;
		ИгнорироватьНезаполненностьГрафика 	= Истина;
		
		НачальныеДаты = Новый Массив;
		НачальныеДаты.Добавить(БлижайшаяДата);
		
		СоответствиеДатБлижайшихРабочихДней = КалендарныеГрафики.ДатыБлижайшихРабочихДней(График, НачальныеДаты, ПолучатьПредшествующие, ВызыватьИсключение, ИгнорироватьНезаполненностьГрафика);
		БлижайшаяРабочаяДата =  СоответствиеДатБлижайшихРабочихДней[БлижайшаяДата];
		
	Иначе
		
		БлижайшаяРабочаяДата = БлижайшаяДата;
		
	КонецЕсли;
	
	Возврат БлижайшаяРабочаяДата;
	
КонецФункции

Процедура УстановитьПараметрыСеанса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Инициализация параметров системы при старте значениями по умолчанию
	
	ПараметрыСеанса.бит_БК_ТекущийИнициатор = Справочники.бит_БК_Инициаторы.ПустаяСсылка();
	ПараметрыСеанса.ок_РаботаСДокументомЗнРДСВОграниченномРежиме = 0;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-02 (#4234)
	ПараметрыСеанса.ок_ИдентификаторСеанса = Новый УникальныйИдентификатор;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-02 (#4234)
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьЗначениеПараметраСеанса(ИмяПараметраСеанса) Экспорт
	
	ЗначениеПараметраСеанса = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
	
		ЗначениеПараметраСеанса = ПараметрыСеанса[ИмяПараметраСеанса];
	
	Исключение
		ТекстСообщения = НСтр("ru = 'Получение параметра сеанса ""%1"". Ошибка: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
							ИмяПараметраСеанса, 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации("Данные.Получение", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеПараметраСеанса;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)

// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-19 (#4390)
Функция ТребуетсяЗаполнениеПроектаПоСценарию(НаДату, ПоСценарию, ПроверятьДатуПринудительно = Ложь) Экспорт
	//Заполнение обязательно, если для сценария, указанного в шапке документа (Бюджет У или Бюджет Инвест) в группе настроек “Измерения контроля бюджета” присутствует измерение “Проект”. 
	//Для сценария “Бюджет У” помимо этого устанавливается дополнительное условие: дата документа>= значению настройки «ДатаНачалаЗаполненияПроектаОпер» РС “Настройки БК”.
	
	ТребуетсяЗаполнение = Ложь;
	НастройкаИзмерений = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", ПоСценарию);
	Если НастройкаИзмерений <> Неопределено Тогда
		ТребуетсяЗаполнение = НастройкаИзмерений.НайтиПоЗначению(Перечисления.бит_БК_ИзмеренияКонтроляБюджета.Проект) <> Неопределено;
		Если ПоСценарию = Справочники.СценарииПланирования.Бюджет_У Или ПроверятьДатуПринудительно = Истина Тогда 
			НастройкаДатаОпер = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Общие настройки БК", "ДатаНачалаЗаполненияПроектаОпер");
			Если НастройкаДатаОпер = Неопределено Или НастройкаДатаОпер > НаДату Тогда 
				ТребуетсяЗаполнение = Ложь;
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
	
	Возврат ТребуетсяЗаполнение;
КонецФункции	

Функция ПроектПоУмолчаниюЗаПериод(НаДату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Проекты.Ссылка КАК Проект
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.ок_ПроектПоУмолчанию
		|	И Проекты.ок_Период = &ок_Период
		|	И НЕ Проекты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ок_Период", НачалоГода(НаДату));
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Проект;
	
КонецФункции	
// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-19 (#4390)

// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-27 (#4382)
Функция ПолучитьСчетаВидимостиКомандыСоздатьРБП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет97)";
	
	Запрос.УстановитьПараметр("Счет97", ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции	
// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-27 (#4382)

//ОКЕЙ Василенко В.В. (СофтЛаб) Начало 2021-11-08 (#4429)
Функция БанковскиеСчетаОрганизации(ВладелецСчета, ВалютаСчета = Неопределено, ДатаФормирования = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаСчета
	|	И (БанковскиеСчета.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ БанковскиеСчета.ДатаОткрытия <= &ДатаФормирования)
	|	И (БанковскиеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ БанковскиеСчета.ДатаЗакрытия >= &ДатаФормирования)";
	
	Запрос.УстановитьПараметр("ВладелецСчета", ВладелецСчета);
	
	Если ЗначениеЗаполнено(ВалютаСчета) Тогда
		Запрос.УстановитьПараметр("ВалютаСчета", ВалютаСчета);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаСчета", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаФормирования) Тогда
		Запрос.УстановитьПараметр("ДатаФормирования", ДатаФормирования);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (БанковскиеСчета.ДатаОткрытия = Неопределено Или БанковскиеСчета.ДатаОткрытия <= &ДатаФормирования)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (БанковскиеСчета.ДатаЗакрытия = Неопределено Или БанковскиеСчета.ДатаЗакрытия >= &ДатаФормирования)", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
//ОКЕЙ Василенко В.В. (СофтЛаб) Конец 2021-11-08 (#4429)
