
#Область СлужебныйПрограммныйИнтерфейс

// Процедура проверяет завершение сверки ВГО.
// 
// Параметры:
//  Отказ  - Булево
// 
Процедура ПроверитьЗавершениеСверкиВГО(СтруктураПараметров, СсылкаДок, Отказ) Экспорт
 	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"			, СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"		, КонецДня(СтруктураПараметров.ДатаОкончания));
	Запрос.УстановитьПараметр("СсылкаДок"			, СсылкаДок);
    Запрос.УстановитьПараметр("РегистрБухгалтерии"	, СтруктураПараметров.РегистрБухгалтерии);
	Запрос.УстановитьПараметр("Сценарий"			, СтруктураПараметров.Сценарий);
    Запрос.УстановитьПараметр("Организация1"		, СтруктураПараметров.Организация1);
	Запрос.УстановитьПараметр("Контрагент2"			, СтруктураПараметров.Контрагент2);
	
	Организация2 = бит_ОбщегоНазначения.ПолучитьСобственнуюОрганизациюПоКонтрагенту(СтруктураПараметров.Контрагент2);
	Контрагент1  = ?(СтруктураПараметров.Свойство("Контрагент1")
					, СтруктураПараметров.Контрагент1
					, бит_ОбщегоНазначения.ПолучитьСписокСобственныхКонтрагентовПоОрганизации(СтруктураПараметров.Организация1));
					
	Запрос.УстановитьПараметр("Контрагент1" , Контрагент1);
	Запрос.УстановитьПараметр("Организация2", Организация2);
	
	Если ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.бит_вго_ПодтверждениеСверкиВГО") Тогда
	 	ТекстУсловия = "
		|	И СтатусыСверкиВГО.Организация1 = &Организация1
		|	И СтатусыСверкиВГО.Контрагент1 = &Контрагент1
		|	И СтатусыСверкиВГО.Контрагент2 = &Контрагент2";
	Иначе	
	    ТекстУсловия = "
		|	И ((СтатусыСверкиВГО.Организация1 = &Организация1 И СтатусыСверкиВГО.Контрагент2 = &Контрагент2)
		|	ИЛИ (СтатусыСверкиВГО.Организация1 = &Организация2 И СтатусыСверкиВГО.Контрагент2 В(&Контрагент1)))";
	КонецЕсли;
		
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыСверкиВГО.ДатаНачала,
	|	СтатусыСверкиВГО.ДатаОкончания,
	|ВЫБОР
	|	КОГДА СтатусыСверкиВГО.Организация1 = &Организация1
	|		ТОГДА 1
	|	ИНАЧЕ 2
	|КОНЕЦ КАК Приоритет,
	|	СтатусыСверкиВГО.Регистратор
	|
	|ИЗ
	|	РегистрСведений.бит_вго_СтатусыСверкиВГО КАК СтатусыСверкиВГО
	|ГДЕ
	|	СтатусыСверкиВГО.РегистрБухгалтерии = &РегистрБухгалтерии
	|	И СтатусыСверкиВГО.Сценарий = &Сценарий
	|	" + ТекстУсловия + "
	|	И СтатусыСверкиВГО.Регистратор <> &СсылкаДок
	|	И НЕ (&ДатаНачала > СтатусыСверкиВГО.ДатаОкончания)
	|	И НЕ (&ДатаОкончания < СтатусыСверкиВГО.ДатаНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|
	|";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ТекстСообщения = Нстр("ru = 'Сверка ВГО подтверждена документом %1%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.Регистратор);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,, Отказ);
			
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗавершениеСверкиВГО()

// Функция получает дату запрета редактирования документов сверки ВГО.
// 
// Параметры:
//  ПараметрыСверки - Структура
//  
// Возвращаемое значение:
//   Дата
// 
Функция ПолучитьДатуЗапретаРедактированияДокументовСверкиВГО(ПараметрыСверки)

	ДатаЗапрета = Дата('00010101');
	
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	Организация1 = ?(ПараметрыСверки.Свойство("Организация1"), ПараметрыСверки.Организация1, ПустаяОрганизация);
	Если ПараметрыСверки.Свойство("Организация2") Тогда
		Организация2 = ПараметрыСверки.Организация2;
	ИначеЕсли ПараметрыСверки.Свойство("Контрагент2") Тогда
		Организация2 = бит_ОбщегоНазначения.ПолучитьСобственнуюОрганизациюПоКонтрагенту(ПараметрыСверки.Контрагент2);
	Иначе
		Организация2 = ПустаяОрганизация;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация1", Организация1);
	Запрос.УстановитьПараметр("Организация2", Организация2);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗакрытиеРедактированияСверкиВГО.Организация1 КАК Организация1,
	|	ЗакрытиеРедактированияСверкиВГО.Организация2 КАК Организация2,
	|	ЗакрытиеРедактированияСверкиВГО.ДатаЗапретаРедактирования
	|ИЗ
	|	РегистрСведений.бит_вго_ЗакрытиеРедактированияСверкиВГО КАК ЗакрытиеРедактированияСверкиВГО
	|ГДЕ
	|	(ЗакрытиеРедактированияСверкиВГО.Организация1 = &Организация1
	|			ИЛИ ЗакрытиеРедактированияСверкиВГО.Организация1 = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И (ЗакрытиеРедактированияСверкиВГО.Организация2 = &Организация2
	|			ИЛИ ЗакрытиеРедактированияСверкиВГО.Организация2 = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
    |
	|УПОРЯДОЧИТЬ ПО
	|	Организация1 УБЫВ,
	|	Организация2 УБЫВ
	|";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Организация1 = Организация1 И Выборка.Организация2 = Организация2 Тогда
			ДатаЗапрета = Выборка.ДатаЗапретаРедактирования;
			Прервать;
		Иначе
			ДатаЗапрета = Макс(ДатаЗапрета, Выборка.ДатаЗапретаРедактирования);
		КонецЕсли; 		
	
	КонецЦикла;			

	Возврат ДатаЗапрета;
	
КонецФункции // ПолучитьДатуЗапретаРедактированияДокументовСверкиВГО()

// Процедура проверяет дату запрета редактирования документов сверки ВГО с переданной.
// 
// Параметры:
//  ДатаДокумента  	 - Дата
//  ПараметрыСверки  - Структура
//  Отказ 			 - Булево
// 
Процедура ПроверитьВозможностьРедактированияДокументовСверкиВГО(ДатаДокумента, ПараметрыСверки, Отказ) Экспорт

	ДатаЗапрета = ПолучитьДатуЗапретаРедактированияДокументовСверкиВГО(ПараметрыСверки);
	
	Если ДатаДокумента <= ДатаЗапрета Тогда
		
		ТекстСообщения = Нстр("ru = 'Редактирование данных этого периода запрещено.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		Отказ = Истина;
		
	КонецЕсли;	

КонецПроцедуры // ПроверитьВозможностьРедактированияДокументовСверкиВГО()

// Функция получает периодичность сверки ВГО.
// 
// Параметры:
//  ДатаНачала 		    - Дата
//  ИспользоватьТекущую - Истина
//  
// Возвращаемое значение:
//   ПеречислениеСсылка.бит_ПериодичностьПланирования.
// 
Функция ПолучитьПериодичностьСверкиВГО(ДатаНачала, ИспользоватьТекущую = Истина) Экспорт

	ПериодичностьСверкиВГО = Перечисления.бит_ПериодичностьПланирования.Месяц;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) И ИспользоватьТекущую Тогда
		ДатаНачала = ТекущаяДатаСеанса();
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(НастройкиСверкиВГО.Значение.Ссылка, ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.Месяц)) КАК ЗначениеНастройки
		|ИЗ
		|	РегистрСведений.бит_вго_НастройкиПроведенияСверкиВГО.СрезПоследних(
		|								&ДатаНачала, 
		|								Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_вго_ВидыНастроекСверкиВГО.ПериодичностьСверкиВГО)) КАК НастройкиСверкиВГО
		|";
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПериодичностьСверкиВГО = Выборка.ЗначениеНастройки;
		КонецЕсли;
		
	КонецЕсли; 	

	Возврат ПериодичностьСверкиВГО;
	
КонецФункции // ПолучитьПериодичностьСверкиВГО()

// Функция формирует список управленческих регистров бухгалтерии.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СписокЗначений
// 
Функция СформироватьСписокДоступныхРегистровБухгалтерииДляСверкиВГО() Экспорт

	СписокОбъектовСистемы = Новый СписокЗначений;
	       		
	РегистрыМета = Новый Массив;
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Бюджетирование);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_1);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_3);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_4);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_5);
	
	Для каждого МетаОбъект Из РегистрыМета Цикл
		
		ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
		Если ЗначениеЗаполнено(ОбъектСистемы) Тогда
			
			СписокОбъектовСистемы.Добавить(ОбъектСистемы)
			
		КонецЕсли; 
		
	КонецЦикла; 
		
	Возврат СписокОбъектовСистемы;
	
КонецФункции // СформироватьСписокДоступныхРегистровБухгалтерии()

// Функция получает структуру массивов доступных счетов для установки отборов.
// 
// Параметры:
//  НастройкаАктаСверки - СправочникСсылка.бит_вго_НастройкиАктовСверкиВГО.
// 
// Возвращаемое значение:
//  СтруктураСчетов - Структура.
// 
Функция СчетаФильтрации(НастройкаАктаСверки) Экспорт
	
	МассивСчетовРасчетов  = Новый Массив;
	МассивСчетовОборотов  = Новый Массив;
	МассивСчетовОплаты    = Новый Массив;
	МассивДоступныхСчетов = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаАктаСверки", НастройкаАктаСверки);
	Запрос.Текст = "
	|ВЫБРАТЬ	
	|	СчетаПоНастройке.Счет,
	|	МАКСИМУМ(СчетаПоНастройке.ЭтоСчетРасчетов) КАК ЭтоСчетРасчетов,	
	|	МАКСИМУМ(СчетаПоНастройке.ЭтоСчетОборотов) КАК ЭтоСчетОборотов,	
	|	МАКСИМУМ(СчетаПоНастройке.ЭтоСчетОплаты)   КАК ЭтоСчетОплаты 
	|ИЗ
	|	Справочник.бит_вго_НастройкиАктовСверкиВГО.Счета КАК СчетаПоНастройке
	|ГДЕ
	|	СчетаПоНастройке.Ссылка = &НастройкаАктаСверки
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаПоНастройке.Счет
 	|";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		 		
		Если Выборка.ЭтоСчетРасчетов Тогда
			МассивДоступныхСчетов.Добавить(Выборка.Счет);
			МассивСчетовРасчетов.Добавить(Выборка.Счет);
		КонецЕсли;
		
		Если Выборка.ЭтоСчетОборотов Тогда
			МассивДоступныхСчетов.Добавить(Выборка.Счет);
			МассивСчетовОборотов.Добавить(Выборка.Счет);
		КонецЕсли;
		
		Если Выборка.ЭтоСчетОплаты Тогда
			МассивДоступныхСчетов.Добавить(Выборка.Счет);
			МассивСчетовОплаты.Добавить(Выборка.Счет);
		КонецЕсли; 	
		
	КонецЦикла;
	
	СтруктураСчетов = Новый Структура;
	СтруктураСчетов.Вставить("МассивСчетовРасчетов" , МассивСчетовРасчетов);
	СтруктураСчетов.Вставить("МассивСчетовОборотов" , МассивСчетовОборотов);
	СтруктураСчетов.Вставить("МассивСчетовОплаты"   , МассивСчетовОплаты);
	СтруктураСчетов.Вставить("МассивДоступныхСчетов", МассивДоступныхСчетов);
	
	Возврат СтруктураСчетов;
	
КонецФункции

// Функция готовит структуру параметров трансляции для выполнения подбора счетов по правилам трансляции.
// 
// Параметры:
//  Организация  - СправочникСсылка.Организация.
//  ДатаПравил   - Дата.
//  МетаРегистрИсточник - Метаданные регистра.
//  МетаРегистрИсточник - Метаданные регистра.
// 
// Возвращаемое значение:
//   СтруктураПараметров   - Структура.
// 
Функция ПодготовитьСтруктуруПараметровДляПодбораСчетов(Организация, ДатаПравил, МетаРегистрИсточник, МетаРегистрПриемник)

	РегистрИсточник = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегистрИсточник);	
	РегистрПриемник = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегистрПриемник);
	
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить(Перечисления.бит_НазначенияПравилТрансляции.ПодборСчетовДляСверкиВГО);	
	
	МассивПравил    = бит_МеханизмТрансляции.ПолучитьПравилаТрансляцииДляПодбораСчетов(Организация
	                                                                                   ,ДатаПравил
	                                                                                   ,МассивНазначений
																					   ,РегистрИсточник
																					   ,РегистрПриемник);
	
	СтруктураПараметров = бит_МеханизмТрансляции.КонструкторСтруктурыПараметровТрансляции();														
	
	СтруктураПараметров.ВестиПротокол           = Истина;
	СтруктураПараметров.ВидыРегистров           = бит_МеханизмТрансляции.КонструкторСтруктурыВидыРегистров(Истина,Ложь,Ложь, Истина);
	СтруктураПараметров.ДополнительныеАналитики = Новый Соответствие;
	СтруктураПараметров.ЗаписыватьДвижения      = Ложь;
	СтруктураПараметров.МетаданныеИсточника     = МетаРегистрИсточник;
	СтруктураПараметров.МетаданныеПриемника     = МетаРегистрПриемник;
	СтруктураПараметров.МетаданныеРегистратора  = Метаданные.Документы.бит_вго_АктСверкиВГО;
	СтруктураПараметров.ОбязательныеПоля  		= Новый Структура;
	СтруктураПараметров.ПараметрыАвтозаполнения = Новый Структура;
	СтруктураПараметров.ПользовательскиеФункции = Новый Соответствие;	
	СтруктураПараметров.ПравилаТрансляции 		= МассивПравил;
	СтруктураПараметров.ПравилоЗаполнения 		= Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.ПустаяСсылка();
	СтруктураПараметров.ПризнакиУчета           = бит_МеханизмТрансляции.ЗаполнитьПризнакиУчета(РегистрПриемник);
	СтруктураПараметров.СтруктураШапкиДокумента = Новый Структура;
	
	Возврат СтруктураПараметров;

КонецФункции

// Процедура выполняет подбор счетов для различных приемника и источника.
// 
// Параметры:
//  СтруктураПараметров  		- Структура - Ключи: {Счет,Субконто<i>} или {СчетДт,СчетКт,СубконтоДт<i>,СубконтоКт<i>}.
//  Организация          		- СправочникСсылка.Организации.
//  ДатаПравил           		- Дата.
// 
// Возвращаемое значение:
// 	РезСтруктура - Структура - Ключи: {Счет,Субконто<i>} или {СчетДт,СчетКт,СубконтоДт<i>,СубконтоКт<i>}.
// 
Функция ВыполнитьПодборСчетов(СтруктураПараметров
							   , ОбъектСсылка
	                           , Организация
							   , ДатаПравил) Экспорт
							   
	ИмяРегистраБухгалтерии     = СтруктураПараметров.ИмяРегистраБухгалтерии;
	ИмяПланаСчетовИсточник     = СтруктураПараметров.ИмяПланаСчетовИсточник;
	КоличествоСубконтоИсточник = СтруктураПараметров.КоличествоСубконтоИсточник;
	КоличествоСубконтоПриемник = СтруктураПараметров.КоличествоСубконтоПриемник;
	
	
	// Создаем наборы источник и приемник
	НаборИсточник = РегистрыБухгалтерии[ИмяРегистраБухгалтерии].СоздатьНаборЗаписей();
	НаборПриемник = РегистрыНакопления.бит_вго_ДанныеКорректировок.СоздатьНаборЗаписей();
				
	РезСтруктура = Новый Структура("ОперацияВГО");
	         	
	// Заполним набор записей источник по переданной стуктуре.
	ЗаписьИсточник = НаборИсточник.Добавить();		
	ЗаписьИсточник.СчетДт = СтруктураПараметров.СчетДт;
	ЗаписьИсточник.СчетКт = СтруктураПараметров.СчетКт;
	        	
	// Заполним аналитику
	Для й = 1 По КоличествоСубконтоИсточник Цикл
		
		ИмяСубконтоДт = "СубконтоДт"+й;
		ИмяСубконтоКт = "СубконтоКт"+й;
				
		Если СтруктураПараметров.Свойство(ИмяСубконтоДт) Тогда		
			бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетДт,ЗаписьИсточник.СубконтоДт,й,СтруктураПараметров[ИмяСубконтоДт]);
	    КонецЕсли; 
	    Если СтруктураПараметров.Свойство(ИмяСубконтоКт) Тогда   		
			бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетКт,ЗаписьИсточник.СубконтоКт,й,СтруктураПараметров[ИмяСубконтоКт]);		
		КонецЕсли; 
		
	КонецЦикла; 
             	
	Протокол = "";
	
	МетаИсточник = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	МетаПриемник = Метаданные.РегистрыНакопления.бит_вго_ДанныеКорректировок;
	
	ПараметрыТрансляции = ПодготовитьСтруктуруПараметровДляПодбораСчетов(Организация
										, ДатаПравил
										, МетаИсточник
										, МетаПриемник);
		
	// Выполним подбор счетов по правилам трансляции.
	бит_МеханизмТрансляции.ВыполнитьТрансляциюДвижений(ОбъектСсылка, НаборИсточник, НаборПриемник, ПараметрыТрансляции, Протокол);
	
	// Заполним результирующую структуру исходя из сформированного набора приемника.
	Если НаборПриемник.Количество() > 0 Тогда
	
		 ЗаписьПриемник = НаборПриемник[0];
		 
		 РезСтруктура.Вставить("ОперацияВГО", ЗаписьПриемник.ОперацияВГО);
	
	КонецЕсли; // Набор приемник содержит записи
	
	Возврат РезСтруктура;

КонецФункции

#КонецОбласти

