#Область ПрограммныйИнтерфейс

#Область Интеграции

// Функция сравнивает две таблицы значений
//
// Параметры:
//  ТаблицаЗначений1 - ТаблицаЗначений	 - Первая таблица значений
//  ТаблицаЗначений2 - ТаблицаЗначений	 - Вторая таблица значений
// 
// Возвращаемое значение:
//  Булево - Таблицы значений равны
//
Функция ТаблицыЗначенийРавны(ТаблицаЗначений1, ТаблицаЗначений2) Экспорт

    Если Не ТипЗнч(ТаблицаЗначений1) = Тип("ТаблицаЗначений") ИЛИ Не ТипЗнч(ТаблицаЗначений2) = Тип("ТаблицаЗначений") Тогда
        Возврат Ложь;
    КонецЕсли; 
    
    Если Не ТаблицаЗначений1.Количество() = ТаблицаЗначений2.Количество() Тогда
        Возврат Ложь;
    КонецЕсли; 

    Если Не ТаблицаЗначений1.Колонки.Количество() = ТаблицаЗначений2.Колонки.Количество() Тогда
        Возврат Ложь;
    КонецЕсли;
    
   // Проверим поля.
    Для Каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
        Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла; 
    Для Каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
        Если ТаблицаЗначений1.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла; 
    
   // Сформируем строку индекса для оптимизации поиска по таблице значений.
    СтрокаИндекса = "";
    Для Каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
        Если СтрокаИндекса = "" Тогда
            СтрокаИндекса = Колонка.Имя;
        Иначе
            СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
        КонецЕсли;
	КонецЦикла;
	
   // Добавим индекс.
    ТаблицаЗначений2.Индексы.Добавить(СтрокаИндекса);
    
   // Проверим записи.
    Для Каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
        СтруктураПоиска = Новый Структура;
        Для Каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
            СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
        КонецЦикла;
        СтрокиТаблицы2 = ТаблицаЗначений2.НайтиСтроки(СтруктураПоиска);
        Если Не СтрокиТаблицы2.Количество() = 1 Тогда
            Возврат Ложь;
        КонецЕсли; 
    КонецЦикла;
    
   // Сформируем строку индекса для оптимизации поиска по таблице значений.
    СтрокаИндекса = "";
    Для Каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
        Если СтрокаИндекса = "" Тогда
            СтрокаИндекса = Колонка.Имя;
        Иначе
            СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
        КонецЕсли;
	КонецЦикла;
	
   // Добавим индекс.
    ТаблицаЗначений1.Индексы.Добавить(СтрокаИндекса);
    
    Для Каждого СтрокаТаблицы Из ТаблицаЗначений2 Цикл
        СтруктураПоиска = Новый Структура;
        Для Каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
            СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
        КонецЦикла;
        СтрокиТаблицы1 = ТаблицаЗначений1.НайтиСтроки(СтруктураПоиска);
        Если Не СтрокиТаблицы1.Количество() = 1 Тогда
            Возврат Ложь;
        КонецЕсли; 
    КонецЦикла;
    
    Возврат Истина;
    
КонецФункции// СравнитьТаблицыЗначений()

// Функция получает имя настройки "Организация ОКЕЙ"
// 
// Возвращаемое значение:
//  Строка - Имя настройки
//
Функция ПолучитьИмяНастройкиОрганизацияОКЕЙ() Экспорт
	Возврат "Организация ОКЕЙ";	
КонецФункции

// Функция получает имя настройки "ИмяДопСведенияЗагружатьПовторно"
// 
// Возвращаемое значение:
//  Строка - Имя настройки
//
Функция ПолучитьИмяНастройкиЗагружатьПовторно() Экспорт
	Возврат "ИмяДопСведенияЗагружатьПовторно";	
КонецФункции

// Функция получает имя настройки "ИмяДопСведенияОтправленоНаОбъект"
// 
// Возвращаемое значение:
//  Строка - Имя настройки
//
Функция ПолучитьИмяНастройкиОтправленоНаОбъект() Экспорт
	Возврат "ИмяДопСведенияОтправленоНаОбъект";	
КонецФункции

// Функция получает идентификатор настройки "ИмяДопСведенияЗагружатьПовторно"
// 
// Возвращаемое значение:
//  Строка - Имя настройки
//
Функция ПолучитьИдентификаторНастройкиЗагружатьПовторно() Экспорт
	Возврат "ИдентификаторНастройкиЗагружатьПовторно";	
КонецФункции

// Функция получает идентификатор настройки "ИдентификаторНастройкиОтправленоНаОбъект"
// 
// Возвращаемое значение:
//  Строка - Имя настройки
//
Функция ПолучитьИдентификаторНастройкиОтправленоНаОбъект() Экспорт
	Возврат "ИдентификаторНастройкиОтправленоНаОбъект";	
КонецФункции

// Функция получает имя группы настроек параметров загрузки Аксапты 12
// 
// Возвращаемое значение:
//  Строка - Имя группы настроек
//
Функция ПолучитьИмяГруппыНастроекПараметрыЗагрузкиАксапты12() Экспорт
	Возврат "ПараметрыЗагрузкиАксапты12";
КонецФункции

// Функция получает имя группы настроек загрузки данных из Кристалл
// 
// Возвращаемое значение:
//  Строка - Имя группы настроек
//
Функция ПолучитьИмяГруппыНастроекЗагрузкаДанныхИзКристалл() Экспорт
	Возврат "ЗагрузкаДанныхИзКристалл";
КонецФункции

// Функция получает имя группы настроек загрузки данных из УТ
// 
// Возвращаемое значение:
//  Строка - Имя группы настроек
//
Функция ПолучитьИмяГруппыНастроекЗагрузкаДанныхИзУТ() Экспорт
	Возврат "ЗагрузкаДанныхИзУТ";
КонецФункции

// Функция получает организацию по имени настройки
//
// Параметры:
//  ИмяНастройки - Строка	 - Имя настройки
// 
// Возвращаемое значение:
//  СправочникСсылка.Организации - Организация
//
Функция ПолучитьОрганизацию(ИмяНастройки) Экспорт
	Возврат бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", ИмяНастройки);
КонецФункции

// Функция получает отбор по объекту в интегрируемой системе
//
// Параметры:
//  ОбъектСсылка			 - СправочникСсылка.ОбъектыСтроительства - Объект
//  Источник				 - Строка								 - Имя источника
//  ПреобразовыватьВЧисло	 - Булево								 - Преобразовывать возвращаемое значение в число
// 
// Возвращаемое значение:
//  Строка, число, неопределено - Строковое или числовое представление объекта в интегрируемой системе
//
Функция ПолучитьОтборПоОбъекту(ОбъектСсылка, Источник, ПреобразовыватьВЧисло = Ложь) Экспорт
	
	ИмяНастройкиОрганизация	=	ПолучитьИмяНастройкиОрганизацияОКЕЙ();
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("Источник",		Источник);
	Запрос.УстановитьПараметр("Организация",	ПолучитьОрганизацию(ИмяНастройкиОрганизация));
	Запрос.УстановитьПараметр("Объект",			ОбъектСсылка);
	Запрос.Текст	=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ок_СопоставлениеАналитикиДляИнтеграций.АналитикаИсточника КАК АналитикаИсточника
	|ИЗ
	|	РегистрСведений.ок_СопоставлениеАналитикиДляИнтеграций КАК ок_СопоставлениеАналитикиДляИнтеграций
	|ГДЕ
	|	ок_СопоставлениеАналитикиДляИнтеграций.Источник = &Источник
	|	И ок_СопоставлениеАналитикиДляИнтеграций.Организация = &Организация
	|	И ок_СопоставлениеАналитикиДляИнтеграций.Аналитика1С = &Объект
	|	И ок_СопоставлениеАналитикиДляИнтеграций.Тип1С.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОбъектовСистемы.Справочник)
	|	И ок_СопоставлениеАналитикиДляИнтеграций.Тип1С.ИмяОбъекта = ""ОбъектыСтроительства""
	|	И НЕ ок_СопоставлениеАналитикиДляИнтеграций.Тип1С.ПометкаУдаления";
	
	Результат	=	Запрос.Выполнить();
	
	ОбъектСтрокаЧисло	=	Неопределено;
	
	Если Результат.Пустой() Тогда
		Возврат ОбъектСтрокаЧисло;	
	Иначе
		Выборка	=	Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Если ТипЗнч(ПреобразовыватьВЧисло) = Тип("Булево") И ПреобразовыватьВЧисло Тогда
				Попытка
					ОбъектСтрокаЧисло	=	Число(Выборка.АналитикаИсточника);
				Исключение
					ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
					ОбъектСтрокаЧисло	=	Неопределено;	
				КонецПопытки;
			Иначе
				ОбъектСтрокаЧисло	=	Выборка.АналитикаИсточника;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ОбъектСтрокаЧисло;
	
КонецФункции

// Функция выгружает помеченные значения списка в массив
//
// Параметры:
//  СписокЗначений	 - СписокЗначений	 - Список значений
// 
// Возвращаемое значение:
//  Массив - Массив помеченных значений
//
Функция ВыгрузитьПомеченныеЗначенияСписка(СписокЗначений) Экспорт
	
	Массив	=	Новый Массив;
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		Если ЭлементСписка.Пометка Тогда
			Массив.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив; 
	
КонецФункции

// Функция получает параметры регламентных заданий для интеграций
// 
// Возвращаемое значение:
//  Структура - Параметры регламентного задания
//
Функция ПолучитьПараметрыРегламентногоЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачала		=	Неопределено;
	ДатаОкончания	=	Неопределено;
	
	ИмяНастройки	=	Новый Массив;
	ИмяНастройки.Добавить("Начало Периода");
	ИмяНастройки.Добавить("Конец Периода");
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("Группа", 		ПолучитьИмяГруппыНастроекПараметрыЗагрузкиАксапты12());
	Запрос.УстановитьПараметр("ИмяНастройки", 	ИмяНастройки);
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение КАК Значение,
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки КАК ИмяНастройки
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	|ГДЕ
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа
	|	И бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки В(&ИмяНастройки)";
	Результат	=	Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка	=	Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ИмяНастройки = "Начало Периода" Тогда
				ДатаНачала		=	Выборка.Значение;
			КонецЕсли;
			Если Выборка.ИмяНастройки = "Конец Периода" Тогда
				ДатаОкончания	=	Выборка.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Параметры	=	Новый Структура;
	Параметры.Вставить("ДатаНачала", 	ДатаНачала);
	Параметры.Вставить("ДатаОкончания",	ДатаОкончания);
	
	Возврат Параметры;
	
КонецФункции

// Преобразует число формата ГГГГММЧЧ в дату в запросе.
//
// Параметры:
//  Поле - Строка	 - Наименование таблицы и поля таблицы. Например, "Таблица.ДатаЧисло"
// 
// Возвращаемое значение:
//  Строка - Преобразование числа в строку.
//
Функция ПреобразованиеЧислаВДатуДляЗапроса(Поле) Экспорт
	
	// Может вернуть 1, а может 1753. Зависит от настроек сервера.
	СмещениеДат					=	"ГОД(ДАТАВРЕМЯ(1, 1, 1))";
	
	Строка	=	"ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, 
				|(ВЫРАЗИТЬ(Таблица.Дата / 10000 КАК ЧИСЛО(4, 0))) - " + СмещениеДат + "), МЕСЯЦ, 
				|(ВЫРАЗИТЬ((Таблица.Дата - 10000 * (ВЫРАЗИТЬ(Таблица.Дата / 10000 КАК ЧИСЛО(4, 0)))) / 100 КАК ЧИСЛО(2, 0))) - 1), ДЕНЬ, 
				|Таблица.Дата - 100 * (ВЫРАЗИТЬ(Таблица.Дата / 100 КАК ЧИСЛО(6, 0))) - 1)";
	
	Возврат Строка;
	
КонецФункции

#КонецОбласти

#КонецОбласти