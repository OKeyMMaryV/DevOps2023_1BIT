#Область ПроверкаИПодборПродукции

// Предназначена для определения факта наличия в данных документа номенклатуры, являющейся маркируемой продукцией.
// 
// Параметры:
//  Коллекция                - ДанныеФормыКоллекция - состав номенклатуры документа
//  ВидМаркируемойПродукции  - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции, наличие которой необходимо определить.
//  ЕстьМаркируемаяПродукция - Булево - признак наличия маркируемой продукции.
//
Процедура ЕстьМаркируемаяПродукцияВКоллекции(Коллекция, ВидМаркируемойПродукции, ЕстьМаркируемаяПродукция) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ
	|	ВремТаблТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьМаркируемаяПродукция
	|ИЗ
	|	ВремТаблТовары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	&УсловиеМаркируемаяПродукция
	|";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаТовары", Коллекция.Выгрузить(, "Номенклатура"));
	Результат = Запрос.Выполнить();
	
	ЕстьМаркируемаяПродукция = НЕ Результат.Пустой();
	
КонецПроцедуры

// Заполняет переданную таблицу товарами переданного документа, являющимися маркируемой продукцией требуемого вида.
// 
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - документ, маркируемую продукцию которого необходимо получить.
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции, которую необходимо получить.
//  ТаблицаМаркируемойПродукции - ТаблицаЗначений - таблица маркируемой продукции документа. (См. ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента())
//
Процедура ЗаполнитьМаркируемуюПродукциюДокумента(Контекст, ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции) Экспорт
	
	Если ТаблицаМаркируемойПродукции.Количество() > 0 Тогда
		РезультатЗапроса = ЗапросGTINпоТаблицеМаркируемойПродукции(ТаблицаМаркируемойПродукции);
		ТаблицаМаркируемойПродукции.Очистить();
	ИначеЕсли ЭтоДокументПоНаименованию(Контекст, "РеализацияТоваровУслуг") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииРеализацияТоваровУслуг(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ЭтоДокументПоНаименованию(Контекст, "ПоступлениеТоваровУслуг") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииПоступлениеТоваровУслуг(Контекст, ВидМаркируемойПродукции);
	//ИначеЕсли ЭтоДокументПоНаименованию(Контекст, "ВозвратТоваровОтПокупателя") Тогда
	//	
	//ИначеЕсли ЭтоДокументПоНаименованию(Контекст, "ВозвратТоваровПоставщику") Тогда
	//	
	//ИначеЕсли ЭтоДокументПоНаименованию(Контекст, "ЧекККМ")
	//	Или ЭтоДокументПоНаименованию(Контекст, "ЧекККМВозврат") Тогда
	//
	//ИначеЕсли ЭтоДокументПоНаименованию(Контекст, "КорректировкаРеализации") Тогда
	//
	Иначе
		Возврат;
	КонецЕсли;
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристика.Следующий() Цикл
			ПродукцияПоGTIN = ТаблицаМаркируемойПродукции.СкопироватьКолонки();
			ДлинаСтрокиGTIN = 0;
			
			ВыборкаGTIN = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаGTIN.Следующий() Цикл
				Если ПродукцияПоGTIN.Количество() = 0 Тогда
					Выборка = ВыборкаGTIN.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(ПродукцияПоGTIN.Добавить(), Выборка,, "GTIN");
					КонецЦикла;
				КонецЕсли;
				
				Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(ВыборкаGTIN.GTIN)
					И СтрДлина(ВыборкаGTIN.GTIN) > ДлинаСтрокиGTIN Тогда
					ПродукцияПоGTIN.ЗаполнитьЗначения(ВыборкаGTIN.GTIN, "GTIN");
					ДлинаСтрокиGTIN = СтрДлина(ВыборкаGTIN.GTIN);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаПродукцииПоGTIN Из ПродукцияПоGTIN Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаМаркируемойПродукции.Добавить(), СтрокаПродукцииПоGTIN);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросGTINпоТаблицеМаркируемойПродукции(ТаблицаМаркируемойПродукции)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МаркируемаяПродукция.Номенклатура КАК Номенклатура,
	|	МаркируемаяПродукция.Характеристика КАК Характеристика,
	|	МаркируемаяПродукция.Серия КАК Серия,
	|	МаркируемаяПродукция.Количество КАК Количество
	|ПОМЕСТИТЬ ВТМаркируемаяПродукция
	|ИЗ
	|	&МаркируемаяПродукция КАК МаркируемаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ВТ_ШтрихкодыНоменклатуры
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМаркируемаяПродукция КАК ВТМаркируемаяПродукция
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = ВТМаркируемаяПродукция.Номенклатура
	|ГДЕ
	|	НЕ ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыНоменклатуры.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	МаркируемаяПродукция.Номенклатура КАК Номенклатура,
	|	МаркируемаяПродукция.Характеристика КАК Характеристика,
	|	МаркируемаяПродукция.Серия КАК Серия,
	|	МаркируемаяПродукция.Количество КАК Количество
	|ИЗ
	|	ВТМаркируемаяПродукция КАК МаркируемаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО МаркируемаяПродукция.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МаркируемаяПродукция", ТаблицаМаркируемойПродукции);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииПоступлениеТоваровУслуг(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	ПоступлениеТоваровУслугТовары.Номенклатура     КАК Номенклатура,
	|	""""                                           КАК Характеристика,
	|	""""                                           КАК Серия,
	|	ПоступлениеТоваровУслугТовары.Количество       КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN
	|";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииРеализацияТоваровУслуг(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	РеализацияТоваровУслугТовары.Номенклатура      КАК Номенклатура,
	|	""""                                           КАК Характеристика,
	|	""""                                           КАК Серия,
	|	РеализацияТоваровУслугТовары.Количество        КАК Количество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN
	|";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗаполнения

// Зполняет переданную таблицу данные из ТЧ документа.
// 
// Параметры:
//   Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
//   ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//   ВидыМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив - вид(ы) маркируемой продукции, которым(и) необходимо заполнить таблицу.
//
Процедура СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидыМаркируемойПродукции) Экспорт
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		Или ТипДокумента = Тип("ДокументСсылка.СписаниеТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")
		Или ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ, "Продукция");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ, "Возвраты");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Формирование таблицы маркируемой продукции указанного документа не определено'");
		
	КонецЕсли;
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидыМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу маркированный товаров по выбранным документам. Требуется обеспечить формирование временной таблицы
//   "МаркированныеТоварыОснований" с колонками по порядку:
//   ДокументОснование,Номенклатура,Характеристика,Шаблон,СпособВводаВОборот,Количество.
// Текст запроса уже содержит выбираемые данные во временную таблицу "ТоварыПредварительно",
// поэтому должен начинаться с конструкции: ОБЪЕДИНИТЬ ВСЕ и для присоединения к существующему тексту запроса.
// Параметры:
//  Запрос - Запрос - запрос, в котором требуется сформировать временную таблицу.
//  ИсточникОснований - Строка - Имя временной таблицы с колонкой "ДокументОснование".
Процедура СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИсточникОснований) Экспорт
	
	ТекстЗапроса = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПредварительно.Ссылка             КАК ДокументОснование,
	|	ТоварыПредварительно.Организация        КАК Организация,
	|	ТоварыПредварительно.Номенклатура       КАК Номенклатура,
	|	ТоварыПредварительно.Характеристика     КАК Характеристика,
	|	ТоварыПредварительно.Шаблон             КАК Шаблон,
	|	ТоварыПредварительно.СпособВводаВОборот КАК СпособВводаВОборот,
	|	СУММА(ТоварыПредварительно.Количество)  КАК Количество
	|ПОМЕСТИТЬ МаркированныеТоварыОснований
	|ИЗ
	|	ТоварыПредварительно КАК ТоварыПредварительно
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО ТоварыПредварительно.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПредварительно.Ссылка,
	|	ТоварыПредварительно.Организация,
	|	ТоварыПредварительно.Номенклатура,
	|	ТоварыПредварительно.Характеристика,
	|	ТоварыПредварительно.Шаблон,
	|	ТоварыПредварительно.СпособВводаВОборот
	|";
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаВыводИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара) КАК Операция,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовВыводаИзОборотаИСМП.Прочее)      КАК ВидПервичногоДокумента
		|ИЗ
		|	Документ.СписаниеТоваров КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "СписаниеТоваров");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаМаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
		|ИЗ
		|	Документ.ОтчетПроизводстваЗаСмену КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Продукция", ""));
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ОтчетПроизводстваЗаСмену", ТабличныеЧасти);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ОприходованиеТоваров");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
		ФильтрВидПродукции = ?(ЗначениеЗаполнено(ДокументОбъект.ВидПродукции), ДокументОбъект.ВидПродукции, Неопределено);
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ИнвентаризацияТоваровНаСкладе", 
			,, ФильтрВидПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаПеремаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьЭтикетокИСМП
// В данной процедуре определяется метод печати этикеток ИС МП
// 
// Параметры:
// 	ТаблицаДляПечати - Массив - Массив строк таблицы (см. РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток)
// 	ТабличныйДокумент - ТабличныйДокумент - результат печати
// 	СтруктураНастроек - Структура - Дополнительне параметры для печати
// 	СтандартнаяОбработка - Булево - Признак использования бублиотечной печати
Процедура ПечатьЭтикетокИСМП(ТаблицаДляПечати, ТабличныйДокумент, СтруктураНастроек, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	ТабличныйДокумент.Очистить();
	
	СписокНоменклатурыПоШаблонам = РазобратьНоменклатуруПоШаблонам(ТаблицаДляПечати);
	Для каждого ЭлементСписка Из СписокНоменклатурыПоШаблонам Цикл
		
		МассивНоменклатуры = ЭлементСписка.Значение.ВыгрузитьКолонку("Номенклатура");
	
		ТабличныйДокументЭтикетка = Обработки.ПечатьЭтикеток.ТабличныйДокументЭтикетка(
			МассивНоменклатуры, 
			ЭлементСписка.Ключ, 
			ЭлементСписка.Значение, 
			СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте);
			
		Если ТабличныйДокумент.ВысотаТаблицы <> 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
			
		ТабличныйДокумент.Вывести(ТабличныйДокументЭтикетка);
		
	КонецЦикла;
КонецПроцедуры

Функция РазобратьНоменклатуруПоШаблонам(ТаблицаДляПечати)
	Результат = Новый Соответствие;
	
	Для каждого ОписаниеЭтикетки Из ТаблицаДляПечати Цикл
	
		Если Результат.Получить(ОписаниеЭтикетки.ШаблонЭтикетки) = Неопределено Тогда
			Результат.Вставить(ОписаниеЭтикетки.ШаблонЭтикетки, Обработки.ПечатьЭтикеток.НовыйШтрихкодыМаркируемойПродукции());
		КонецЕсли; 
		
		НоваяСтрока = Результат[ОписаниеЭтикетки.ШаблонЭтикетки].Добавить();
		
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		НоваяСтрока.Организация  = ОписаниеЭтикетки.Организация;
		НоваяСтрока.Номенклатура = ОписаниеЭтикетки.Номенклатура;
		НоваяСтрока.Количество   = ОписаниеЭтикетки.Количество;
		
		НоваяСтрока.ТипШтрихкода = ОписаниеЭтикетки.ТипШтрихкода;
		НоваяСтрока.Штрихкод     = ОписаниеЭтикетки.Штрихкод;
		
		Если ОписаниеЭтикетки.ЗаказНаЭмиссию.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
			СоставКодаМаркировки = ШтрихкодированиеМОТПКлиентСервер.СоставКодаМаркировки(ОписаниеЭтикетки.КодМаркировки);
		Иначе
			СоставКодаМаркировки = ШтрихкодированиеИСМПКлиентСервер.СоставКодаМаркировки(ОписаниеЭтикетки.КодМаркировки);
		КонецЕсли; 
		
		Если СоставКодаМаркировки <> Неопределено Тогда
			НоваяСтрока.СерийныйНомер = СоставКодаМаркировки.СерийныйНомер;
			НоваяСтрока.GTIN          = СоставКодаМаркировки.GTIN;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции 

Процедура ПодготовитьФормуПечатьЭтикетокИСМП(Форма) Экспорт
	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.МаркированнаяПродукция", Истина));
	
	Форма.Элементы.ДеревоАгрегированныхКодовШаблонПотребительскойЭтикетки.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	Форма.Элементы.СписокКодовМаркировкиШаблонЭтикетки.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
	ДанныеЗаполнения = Новый Структура("ШаблонПотребительскойЭтикетки", Справочники.ХранилищеШаблонов.ШаблонЭтикеткаОбувь);
	ТабличныеЧасти = Новый Структура("ДеревоАгрегированныхКодов,СписокКодовМаркировки");
	
	ЗаполнитьЗначенияСвойств(ТабличныеЧасти, Форма);
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Значение <> Неопределено Тогда
			Если ТипЗнч(ТабличнаяЧасть.Значение) = Тип("ДанныеФормыДерево") Тогда
				ОбойтиДеревоРекурсивно(ТабличнаяЧасть.Значение, ДанныеЗаполнения);
			Иначе
				Для каждого СтрокаТаблицы Из ТабличнаяЧасть.Значение Цикл
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеЗаполнения);
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
 
Процедура ОбойтиДеревоРекурсивно(ДеревоЗначений, ДанныеЗаполнения)
	ЭлементыДерева = ДеревоЗначений.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		ЗаполнитьЗначенияСвойств(ЭлементДерева, ДанныеЗаполнения);
		ОбойтиДеревоРекурсивно(ЭлементДерева, ДанныеЗаполнения);
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти 

// Получает GTIN для таблицы переданных товаров
//
// Параметры:
//  Товары - ТаблицаЗначений - таблица товаров с колонками
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура (маркируемый товар).
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры (маркируемого товара).
//
// Возвращаемое значение:
//   Соответствие - данные возможных GTIN:
//    * Ключ     - Строка    - GTIN всех товаров входящей таблицы
//    * Значение - Структура - пара (номенклатура,характеристика) к которой относится GTIN
//
Функция GTINМаркированныхТоваров(Товары) Экспорт
	Результат = Новый Соответствие;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|ГДЕ
	|	НЕ Штрихкоды.Штрихкод ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары", Товары);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(Выборка.Штрихкод);
		
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN) Тогда
			Результат.Вставить(GTIN, 
				Новый Структура("Номенклатура,Характеристика", Выборка.Номенклатура, Выборка.Характеристика));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает в тексте запроса условие отбора по маркируемой продукции требуемого вида.
// Текст запроса должен содержать строку вида "&УсловиеМаркируемаяПродукция" в условии соединения или условии отбора
// и таблицу с синонимом "СправочникНоменклатура", которой как правило является таблица справочника "Номенклатура".
// Параметры:
//   ТекстЗапроса - Строка - строка с текстом запроса, удовлетворяющая приведенным выше условиям.
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид или виды маркируемой продукции, условие отбора по которым необходимо установить.
Процедура УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, Знач ВидМаркируемойПродукции) Экспорт
	
	Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		УсловиеМаркируемаяПродукция = "СправочникНоменклатура.ТабачнаяПродукция";
	ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
		УсловиеМаркируемаяПродукция = "СправочникНоменклатура.ОбувнаяПродукция";
	ИначеЕсли (ТипЗнч(ВидМаркируемойПродукции) = Тип("Массив")) Тогда
		МассивУсловийМаркируемойПродукции = Новый Массив;
		Если ВидМаркируемойПродукции.Найти(Перечисления.ВидыПродукцииИС.Табачная) <> Неопределено Тогда
			МассивУсловийМаркируемойПродукции.Добавить("СправочникНоменклатура.ТабачнаяПродукция")
		КонецЕсли;
		Если ВидМаркируемойПродукции.Найти(Перечисления.ВидыПродукцииИС.Обувная) <> Неопределено Тогда
			МассивУсловийМаркируемойПродукции.Добавить("СправочникНоменклатура.ОбувнаяПродукция")
		КонецЕсли;
		УсловиеМаркируемаяПродукция = СтрСоединить(МассивУсловийМаркируемойПродукции, " ИЛИ ");
		Если УсловиеМаркируемаяПродукция <> "" Тогда
			УсловиеМаркируемаяПродукция = СтрШаблон("(%1)", УсловиеМаркируемаяПродукция);
		Иначе
			УсловиеМаркируемаяПродукция = "ЛОЖЬ";
		КонецЕсли;
	Иначе
		УсловиеМаркируемаяПродукция = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеМаркируемаяПродукция", УсловиеМаркируемаяПродукция);
	
КонецПроцедуры

Функция УсловиеПоВидуПродукции(ВидПродукции)
	
	Условие = "(СправочникНоменклатура.ТабачнаяПродукция ИЛИ СправочникНоменклатура.ОбувнаяПродукция)";
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		Условие = "СправочникНоменклатура.ТабачнаяПродукция";
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
		Условие = "СправочникНоменклатура.ОбувнаяПродукция";
	КонецЕсли;
	Возврат Условие;
	
КонецФункции

//Определяет соответствие переданного документа проверяемому типу.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - Контекст для определения типа документа.
//  Имя      - Строка - имя объекта метаданного документа.
//
//Возвращаемое значение:
//   Булево - это документ
Функция ЭтоДокументПоНаименованию(Контекст, Имя) Экспорт

	Результат = Ложь;

	ТипКонтекста = ТипЗнч(Контекст);
	ТипДокумента = Тип(СтрШаблон("ДокументСсылка.%1", Имя));

	Если ТипКонтекста = Тип("ФормаКлиентскогоПриложения") Тогда
		Если СтрНачинаетсяС(Контекст.ИмяФормы, СтрШаблон("Документ.%1", Имя)) Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ТипКонтекста = ТипДокумента Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ТекстЗапросаМаркируемойПродукции(ДокументСсылка, ИмяТабЧастиТовары = Неопределено)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если ИмяТабЧастиТовары = Неопределено Тогда
		ИмяТабЧастиТовары = "Товары";
	КонецЕсли;
	
	ТекстЗапросаШаблон = "ВЫБРАТЬ
	|	Товары.Номенклатура      КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество
	|ИЗ
	|	Документ.%1.%2 КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|	И &УсловиеМаркируемаяПродукция
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапросаШаблон, МетаданныеДокумента.Имя, ИмяТабЧастиТовары);
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОпределитьТипОснования(Знач ДанныеЗаполнения)
	
	ОснованиеЗаполнения = ДанныеЗаполнения;
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("Структура") И ОснованиеЗаполнения.Свойство("Основание") Тогда
		ОснованиеЗаполнения = ОснованиеЗаполнения.Основание;
	КонецЕсли;
	Возврат ТипЗнч(ОснованиеЗаполнения);
	
КонецФункции

Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьШапку") Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
			
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТабличнаяЧасть, РезультатЗапроса, ДанныеЗаполнения, ДополнительныеПараметры = Неопределено)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаполнениеНеобязательно = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ВозможноПустая");
	
	Если Выборка.Количество() = 0 И Не ЗаполнениеНеобязательно Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru='В %1 отсутствует продукция для заполнения.'"),
			ДанныеЗаполнения);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента)
	
	Возврат СтрШаблон(
	"ВЫБРАТЬ
	|	Таблица.ШтрихкодУпаковки,
	|	Таблица.ЗначениеШтрихкода
	|ИЗ
	|	Документ.%1.ШтрихкодыУпаковок КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка",
	ИмяДокумента);
	
КонецФункции

//Вывод из оборота

Процедура ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.ШтрихкодыУпаковок.Очистить();
	
	ТаблицыТоваров = Новый Массив;
	ТаблицыТоваров.Добавить(Новый Структура("Товары, ПолеСумма", "Товары", "0"));
	
	Основание = ДанныеЗаполнения;
	ФильтрВидПродукции = Перечисления.ВидыПродукцииИС.Обувная;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
		ФильтрВидПродукции = Основание.ЗаполнениеСВидомПродукции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ТаблицыТоваров, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ВыводИзОборотаИСМП.КонечныеСтатусы());
	
	Пакет = Запрос.ВыполнитьПакет();
	ИндексТовары    = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], ДанныеЗаполнения);
	
	Если ФильтрВидПродукции = Неопределено Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если Штрихкоды <> Неопределено Тогда
		ИндексШтрихкоды = Пакет.Количество() - 1;
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.ШтрихкодыУпаковок, Пакет[ИндексШтрихкоды], ДанныеЗаполнения, Новый Структура("ВозможноПустая"));
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ТаблицыТоваров, ТабличнаяЧастьШтрихкоды)
	
	УсловиеВидПродукции = УсловиеПоВидуПродукции(ВидПродукции);
	
	ТоварыПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТабличнаяЧастьТовары Из ТаблицыТоваров Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	""""                            КАК Характеристика,
		|	""""                            КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(&ПолеСумма)               КАК Сумма
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И %1
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура
		|;";
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТТовары", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТабличнаяЧастьТовары.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТабличнаяЧастьТовары.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТабличнаяЧастьТовары.ПолеСумма)
			И ТабличнаяЧастьТовары.ПолеСумма <> "0" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма", СтрШаблон("ТаблицаТовары.%1",ТабличнаяЧастьТовары.ПолеСумма));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма", "0");
		КонецЕсли;
		
		ТоварыПоТабличнымЧастям.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	
	ТекстЗапроса = СтрСоединить(ТоварыПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество,
	|	Товары.Сумма          КАК Сумма
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ВТТовары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	ВЫБОР КОГДА СУММА(ТоварыКОформлению.Количество) > 0 И СУММА(ТоварыКОформлению.Сумма) > 0
	|		ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|	ИНАЧЕ 0 КОНЕЦ                       КАК Цена
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|";
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Штрихкоды.%3.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
		|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|		И ОформленныеШтрихкоды.Ссылка.Проведен
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И %4
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		УсловиеВидПродукции);
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, УсловиеВидПродукции);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Маркировка товаров

Процедура ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, ЕстьШтрихкодыУпаковок = Ложь, ФильтрВидПродукции = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыСерии = Неопределено Тогда
		ТоварыСерии = Новый Массив;
		ТоварыСерии.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Основание = ДанныеЗаполнения;
	Если ФильтрВидПродукции = Неопределено
		И ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
		ФильтрВидПродукции = Основание.ЗаполнениеСВидомПродукции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ТоварыСерии);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.МаркировкаТоваровИСМП.КонечныеСтатусы());
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения);
	
	Если ЕстьШтрихкодыУпаковок Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента);
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		ДокументОбъект.ШтрихкодыУпаковок.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если ФильтрВидПродукции = Неопределено Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ТабличныеЧастиТоварыСерии)
	
	УсловиеВидПродукции = УсловиеПоВидуПродукции(ВидПродукции);
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	""""    КАК Характеристика,
		|	""""             КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И %1
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура
		|";
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, УсловиеВидПродукции);
	
	Возврат ТекстЗапроса;
	
КонецФункции
