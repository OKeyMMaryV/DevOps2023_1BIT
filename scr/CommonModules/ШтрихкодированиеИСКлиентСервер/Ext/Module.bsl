#Область ПрограммныйИнтерфейс

// Возвращает сокращенное представление штрихкода маркируемой продукции.
// 
// Параметры:
//  Штрихкод - Строка - Штрихкод.
// Возвращаемое значение:
//  Строка - Краткое представление штрихкода маркируемой продукции.
Функция ПредставлениеШтрихкода(Штрихкод) Экспорт
	
	ПредставлениеШтрихкода = Штрихкод;
	Если СтрДлина(ПредставлениеШтрихкода) > 40 Тогда
		Если СтрНайти(Штрихкод, "(") = 1 Тогда
			ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 37) + "...";
		Иначе
			ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 5) + "....." + Прав(ПредставлениеШтрихкода, 8);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//Структура параметров, необходимых для открытия формы считывания кода маркировки.
//
//Возвращаемое значение:
//  Структура - требуемые параметры:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.Характеристика - Характеристика номенклатуры.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// * МаркируемаяПродукция - Булево - Истина, если продукция маркируемая.
// * ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
// * ДанныеШтрихкода - См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода.
// * Документ - Произвольный - .
// * РазрешатьДобавлениеБезКодаМарки - Булево - разрешать добавление строки при отказе от ввода кода маркировки.
//
Функция ПараметрыОткрытияФормыВводаКодаМаркировки() Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Номенклатура",                    Неопределено);
	ПараметрыОткрытияФормы.Вставить("Характеристика",                  Неопределено);
	ПараметрыОткрытияФормы.Вставить("ВидПродукции",                    Неопределено);
	ПараметрыОткрытияФормы.Вставить("МаркируемаяПродукция",            Истина);
	ПараметрыОткрытияФормы.Вставить("ПараметрыСканирования",           Неопределено);
	ПараметрыОткрытияФормы.Вставить("ДанныеШтрихкода",                 Неопределено);
	ПараметрыОткрытияФормы.Вставить("Документ",                        Неопределено);
	ПараметрыОткрытияФормы.Вставить("РазрешатьДобавлениеБезКодаМарки", Истина);
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

// Инициализирует и возвращает общие параметры сканирования для всех видов продукции.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ИмяКолонкиШтрихкодУпаковки - Строка -
// * ИмяТабличнойЧастиШтрихкодыУпаковок - Строка - Наименование табличной части, где хранятся элементы штрихкодов упаковок.
// * Склад - ОпределяемыйТип.Склад - Место хранения.
// * ПараметрыУказанияСерий - Структура -
// * ОперацияКонтроляАкцизныхМарок - Строка -
// * ДополнительныеПараметры - Структура -
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево -
// * ДанныеВыбораПоМаркируемойПродукции - Неопределено -
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Булево -
// * АдресДанныхДокументаОснования - Неопределено -
// * КонтрольРасхожденийСДокументомОснованием - Булево -
// * КэшированныеЗначения - Неопределено -
// * ТолькоМаркируемаяПродукция - Булево -
// * ВозможнаЗагрузкаТСД - Булево -
// * ДокументОснование - Неопределено -
// * СоздаватьШтрихкодУпаковки - Булево -
// * АдресСоответствияАкцизныхМарок - Неопределено -
// * ДопустимыеВидыПродукции - Массив -
Функция БазовыеПараметрыСканирования() Экспорт
	
	БазовыеПараметры = Новый Структура;
	
	БазовыеПараметры.Вставить("ДопустимыеВидыПродукции",                        Новый Массив);
	БазовыеПараметры.Вставить("КэшМаркируемойПродукции",                        Неопределено);
	БазовыеПараметры.Вставить("СоздаватьШтрихкодУпаковки",                      Истина);
	БазовыеПараметры.Вставить("ДокументОснование",                              Неопределено);
	БазовыеПараметры.Вставить("ВозможнаЗагрузкаТСД",                            Ложь);
	БазовыеПараметры.Вставить("ТолькоМаркируемаяПродукция",                     Ложь);
	БазовыеПараметры.Вставить("КэшированныеЗначения",                           Неопределено);
	БазовыеПараметры.Вставить("АдресДанныхДокументаОснования",                  Неопределено);
	БазовыеПараметры.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева",  Ложь);
	БазовыеПараметры.Вставить("ДанныеВыбораПоМаркируемойПродукции",             Неопределено);
	БазовыеПараметры.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции", Ложь);
	БазовыеПараметры.Вставить("ДополнительныеПараметры",                        Новый Структура);
	БазовыеПараметры.Вставить("ОперацияКонтроляАкцизныхМарок",                  "");
	БазовыеПараметры.Вставить("ПараметрыУказанияСерий",                         Неопределено);
	БазовыеПараметры.Вставить("Склад",                                          Неопределено);
	БазовыеПараметры.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок",             "АкцизныеМарки");
	БазовыеПараметры.Вставить("ИмяКолонкиШтрихкодУпаковки",                     "АкцизнаяМарка");
	БазовыеПараметры.Вставить("КонтрольРасхожденийСДокументомОснованием",       Ложь);
	БазовыеПараметры.Вставить("РазрешенаОбработкаБезУказанияМарки",             Ложь);
	БазовыеПараметры.Вставить("КонтрольПустыхУпаковок",                         Истина);
	БазовыеПараметры.Вставить("СопоставлятьНоменклатуру",                       Истина);
	БазовыеПараметры.Вставить("Организация",                                    Неопределено);
	БазовыеПараметры.Вставить("ДоступнаПечатьЭтикеток",                         Ложь);
	БазовыеПараметры.Вставить("ДопустимыйСпособВводаВОборот",                   Неопределено);
	БазовыеПараметры.Вставить("ИдентификаторФормы",                             Неопределено);
	БазовыеПараметры.Вставить("Владелец",                                       Неопределено);
	БазовыеПараметры.Вставить("СтатусКодаМаркировкиПоУмолчанию",                Неопределено);
	БазовыеПараметры.Вставить("ПроверятьДублиКодовМаркировки",                  Ложь);
	БазовыеПараметры.Вставить("ДанныеТаблицыТовары",                            Неопределено);
	БазовыеПараметры.Вставить("СсылкаНаОбъект",                                 Неопределено);
	БазовыеПараметры.Вставить("КонтрольУникальностиКодовМаркировки",            Истина);
	
	Возврат БазовыеПараметры;
	
КонецФункции

// Выполняет заполнение базовых параметров сканирования на основании данных контекста.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - ФормаКлиентскогоПриложения, СсылкаНаОбъект - контекст, данные которого будут использованы для заполнения параметров сканирования.
Процедура ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		ПараметрыСканирования.Вставить("ИдентификаторФормы", Контекст.УникальныйИдентификатор);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ДанныеВыбораПоМаркируемойПродукции") Тогда
			ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Контекст.ДанныеВыбораПоМаркируемойПродукции;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "КэшМаркируемойПродукции") Тогда
			ПараметрыСканирования.КэшМаркируемойПродукции = Контекст.КэшМаркируемойПродукции;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыУказанияСерий") Тогда
			ПараметрыСканирования.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
		КонецЕсли;
		
		ИсточникДанных = Контекст;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
			ИсточникДанных = Контекст.Объект;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Склад") Тогда
			ПараметрыСканирования.Склад = ИсточникДанных.Склад;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
			ПараметрыСканирования.Владелец = ИсточникДанных.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Выполняет обработку и кэширование выбора данных после уточнения информации по продукции в диалоговом окне.
//
//Параметры:
//  Форма           - ФормаКлиентскогоПриложения - источник вызова.
//  ДанныеШтрихкода - Структура        - полученные данные по отсканированному штрихкоду.
//
Процедура ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода) Экспорт

	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ДанныеШтрихкода.ДополнительныеПараметры;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЗапомнитьВыбор") 
		И ДополнительныеПараметры.ЗапомнитьВыбор Тогда
		
		Если ДополнительныеПараметры.Свойство("ДанныеВыбора")
			И ТипЗнч(ДополнительныеПараметры.ДанныеВыбора) = Тип("Структура") 
			И ДополнительныеПараметры.ДанныеВыбора.Количество() > 0 Тогда
		
			Форма.ДанныеВыбораПоМаркируемойПродукции = ДополнительныеПараметры.ДанныеВыбора;
			Форма.ДанныеВыбораПоМаркируемойПродукции.Вставить("АлкогольнаяПродукция", ДанныеШтрихКода.АлкогольнаяПродукция);
			Форма.ДанныеВыбораПоМаркируемойПродукции.Вставить("ТипШтрихКода", ДанныеШтрихКода.ТипШтрихКода);
			Форма.СохраненВыборПоМаркируемойПродукции = Истина;
			
			ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
			
		КонецЕсли;
		
	ИначеЕсли Форма.ДанныеВыбораПоМаркируемойПродукции <> Неопределено Тогда
		
		ТребуетсяСбросВыбора = Ложь;
		
		Если Форма.ДанныеВыбораПоМаркируемойПродукции.ТипШтрихкода <> ДанныеШтрихкода.ТипШтрихкода Тогда
			
			ТребуетсяСбросВыбора = Истина;
			
		ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417")
		          И ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция)
		          И ДанныеШтрихкода.АлкогольнаяПродукция <> Форма.ДанныеВыбораПоМаркируемойПродукции.АлкогольнаяПродукция Тогда
			
			ТребуетсяСбросВыбора = Истина;
			
		КонецЕсли;
		
		Если ТребуетсяСбросВыбора Тогда
		
			Форма.ДанныеВыбораПоМаркируемойПродукции  = Неопределено;
			Форма.СохраненВыборПоМаркируемойПродукции = Ложь;
			ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Формирует представление сохраненного выбора маркируемой продукции после уточнения информации в диалоговом окне.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма для отображения настроек
Процедура ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма) Экспорт

	Элементы     = Форма.Элементы;
	ДанныеВыбора = Форма.ДанныеВыбораПоМаркируемойПродукции;
	
	Если Не Форма.СохраненВыборПоМаркируемойПродукции Тогда
		
		Элементы.ГруппаПредставлениеСохраненногоВыбора.Видимость = Ложь;
		
	Иначе
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Сохранен выбор:'"));
		МассивСтрок.Добавить(" ");
		
		ТребуетсяЗапятая = Ложь;
		Если ДанныеВыбора.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеВыбора.Номенклатура) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Номенклатура), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьНоменклатуру"));
			ТребуетсяЗапятая = Истина;
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеВыбора.Характеристика) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Характеристика), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьХарактеристику"));
			ТребуетсяЗапятая = Истина;
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Серия") И ЗначениеЗаполнено(ДанныеВыбора.Серия) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Серия), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьСерию"));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ПричинаПеремаркировки")
			И ЗначениеЗаполнено(ДанныеВыбора.ПричинаПеремаркировки) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			ТекстПредставления = СтрШаблон("причина: %1", ДанныеВыбора.ПричинаПеремаркировки);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстПредставления,,));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ДобавлятьНовуюУпаковку") И ДанныеВыбора.ДобавлятьНовуюУпаковку Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'добавлять пустые упаковки'"),,));
		КонецЕсли;
				
		Если ДанныеВыбора.Свойство("ШаблонЭтикетки") И ЗначениеЗаполнено(ДанныеВыбора.ШаблонЭтикетки) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			ТекстПредставления = СтрШаблон("шаблон этикетки: %1", ДанныеВыбора.ШаблонЭтикетки);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ТекстПредставления,, Форма.ЦветТекстаПоля,, "ОткрытьШаблонЭтикетки"));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("СразуНаПринтер") И ДанныеВыбора.СразуНаПринтер Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'сразу на принтер'"),,));
		КонецЕсли;
		
		МассивСтрок.Добавить(". (");
		
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Сбросить'"),
					Новый Шрифт(,,,,Истина),
					Форма.ЦветГиперссылки,,
					"СброситьСохраненныеДанныеВыбораПоМаркируемойПродукции"));
		
		МассивСтрок.Добавить(")");
		
		Форма.ПредставлениеСохраненногоВыбора = Новый ФорматированнаяСтрока(МассивСтрок);
		
		Элементы.ГруппаПредставлениеСохраненногоВыбора.Видимость = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Определяет принадлежность имени объекта к контексту.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправчникСсылка, Обработка - контекст.
//  ИмяОбъекта - Строка - Имя объекта.
// Возвращаемое значение:
//  Булево - Истина, если имя объекта принадлежит контексту.
Функция ЭтоКонтекстОбъекта(Контекст, Знач ИмяОбъекта) Экспорт
	
	ЭтоСсылка   = Ложь;
	ЭтоФорма    = Ложь;
	Разделитель = ".";
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		ЭтоФорма       = Истина;
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Контекст.ИмяФормы, Разделитель);
		ИмяФормы       = МассивПодстрок[0] + Разделитель + МассивПодстрок[1];
		
	Иначе
		
		ЭтоСсылка         = Истина;
		МассивПодстрок    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОбъекта, Разделитель);
		
		Если МассивПодстрок[0] <> "Документ" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивПодстрок[0] = МассивПодстрок[0] + "Ссылка";
		ИмяОбъекта = СтрСоединить(МассивПодстрок, Разделитель);
		
	КонецЕсли;
	
	Возврат ЭтоФорма И ИмяФормы = ИмяОбъекта Или ЭтоСсылка И ТипЗнч(Контекст) = Тип(ИмяОбъекта);

КонецФункции

// Определяет допустимость обработки вида продукции по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования)
// Возвращаемое значение:
//  Булево - Истина, если вид продукции допустим.
Функция ДопустимВидПродукции(ПараметрыСканирования, ВидПродукцииИС) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
КонецФункции

// Выполняет проверку на формат GS1. Если штрихкод является штрихкодом GS1 - приводит к формату со скобками.
//
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - Значение штрихкода.
Функция ШтрихкодВФорматеGS1(Штрихкод) Экспорт
	
	ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
	Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
		
		Если ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
			
			ШтрихкодGS1 = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		ИначеЕсли ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128")
			Или ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked") Тогда
			
			ШтрихкодGS1 = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Выполняет проверку на соответствие алфавиту кода маркировки.
//
// Параметры:
//  Код - Строка - Код маркировки.
//  Алфавит - Строка - перечень допустимых символов.
// Возвращаемое значение:
//  Булево - Истина, если код соответствует алфавиту.
Функция КодСоответствуетАлфавиту(Код, Алфавит) Экспорт
	
	ДлинаКода = СтрДлина(Код);
	
	Индекс = 1;
	Пока Индекс < ДлинаКода Цикл
		
		ПроверяемыйСимвол = Сред(Код, Индекс, 1);
		
		Если СтрНайти(Алфавит, ПроверяемыйСимвол) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
//
// Параметры:
//  GTIN - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(GTIN) Экспорт

	// Пытаемся получить штрихкод EAN8 или EAN13 из GTIN.
	Пока Лев(GTIN, 1) = "0" И СтрДлина(GTIN) > 8 Цикл
		GTIN = Сред(GTIN, 2);
	КонецЦикла;

	Возврат GTIN;

КонецФункции

// Дополняет штрихкод EAN лидирующими нулями.
//
// Параметры:
//  ШтрихкодEAN - Строка - Значение штрихкода EAN.
// Возвращаемое значение:
//  Строка - GTIN.
Функция GTINПоШтрихкодуEAN(Знач ШтрихкодEAN) Экспорт

	GTIN = ШтрихкодEAN;
	Пока СтрДлина(GTIN) < 14 Цикл
		GTIN = "0" + GTIN;
	КонецЦикла;

	Возврат GTIN;

КонецФункции

// Вычисляет штрихкод GTIN по коду маркировки.
//
// Параметры:
//  КодМаркировки - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Неопределено, Строка - Неопределено, если вычислить штрихкод GTIN не удалось.
Функция GTINПоКодуМаркировки(Знач КодМаркировки) Экспорт

	РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);

	Если Не РезультатРазбора.Разобран Тогда
		Возврат Неопределено
	КонецЕсли;

	ДанныеШтрихкода01 = РезультатРазбора.ДанныеШтрихкода.Получить("01");
	Если ДанныеШтрихкода01 = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	GTIN = ДанныеШтрихкода01.Значение;

	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN);
	Если Не ЭтоGTIN Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат GTIN;

КонецФункции

// Декодирует штрихкод по алгоритму Base64 в строковый формат.
// 
// Параметры:
//  ШтрихкодВBase64 - Строка - закодированный штрихкод.
// Возвращаемое значение:
//  Строка - Декодированный штрихкод.
Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Кодирует значение штрихкода по алгоритму Base64.
// 
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - штрихкод закодированный по алгоритму Base64.
Функция ШтрихкодВBase64(Штрихкод) Экспорт
	
	ДвоичныеДанные  = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
	ШтрихкодВBase64 = ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(ДвоичныеДанные);
	
	Возврат ШтрихкодВBase64;
	
КонецФункции

// Получает значение перечисления типа штрихкода по строке 
// 
// Параметры:
// 	ТипШтрихкодаСтрокой - Строка - тип штрихкода (например, Code128Формат1, GS1128, GS1DataBarExpandedStacked)
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыШтрихкодов - тип шаблона
Функция ТипШтрихкодаПоСтроке(ТипШтрихкодаСтрокой) Экспорт
	
	Если ТипШтрихкодаСтрокой = "SSCC" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC");
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
				Или ТипШтрихкодаСтрокой = "Code128Формат2" 
				Или ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128");	
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1_DataBarExpandedStacked" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked");
	ИначеЕсли ТипШтрихкодаСтрокой = "PDF417" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417");
	ИначеЕсли ТипШтрихкодаСтрокой = "QR" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.QR");
	ИначеЕсли ТипШтрихкодаСтрокой = "DataMatrix" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix");
	ИначеЕсли ТипШтрихкодаСтрокой = "EAN13" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.EAN13");
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1128" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128");
	Иначе
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

// Возвращает параметры открытия формы уточнения данных у пользователя, таких как "Номенклатура", "Характеристика", "Серия".
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// * Склад - ОпределяемыйТип.Склад - Склад, используемый для серий.
// * ПараметрыУказанияСерий - Структура - данные для расчета серий.
// * ШтрихкодEAN - Строка - Штрихкода формата EAN.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатура - Элемент Характеристика.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Элемент Номенклатура.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
// * КодМаркировки - Строка - Код маркировки.
// * ХешСуммаКодаМаркировки - Строка - Хэш кода маркировки.
Функция ПараметрыОткрытияФормыУточненияДанных() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Операция",                               Неопределено);
	ПараметрыОткрытия.Вставить("ПараметрыСканирования",                  Неопределено);
	ПараметрыОткрытия.Вставить("ПараметрыУказанияСерий",                 Неопределено);
	ПараметрыОткрытия.Вставить("ДанныеДляУточненияСведенийПользователя", Неопределено);
	
	ПараметрыОткрытия.Вставить("КодМаркировки",             Неопределено);
	ПараметрыОткрытия.Вставить("ТипШтрихкода",              Неопределено);
	ПараметрыОткрытия.Вставить("Номенклатура",              Неопределено);
	ПараметрыОткрытия.Вставить("Характеристика",            Неопределено);
	ПараметрыОткрытия.Вставить("ШтрихкодEAN",               Неопределено);
	ПараметрыОткрытия.Вставить("Склад",                     Неопределено);
	ПараметрыОткрытия.Вставить("Серия",                     Неопределено);
	ПараметрыОткрытия.Вставить("РежимПечатиЭтикеток",       Ложь);
	ПараметрыОткрытия.Вставить("ШаблонКодаМаркировки",      Неопределено);
	ПараметрыОткрытия.Вставить("ШаблонЭтикетки",            Неопределено);
	ПараметрыОткрытия.Вставить("СразуНаПринтер",            Ложь);
	ПараметрыОткрытия.Вставить("Шаблоны",                   Неопределено);
	ПараметрыОткрытия.Вставить("Документ",                  Неопределено);
	ПараметрыОткрытия.Вставить("ХешСуммаКодаМаркировки",    Неопределено);

	Возврат ПараметрыОткрытия;
	
КонецФункции

// Определяет является ли штрихкод кодом ввода остатков.
// 
// Параметры:
//  Штрихкод - Строка - штрихкод в формате EAN, GTIN или код маркировки.
// Возвращаемое значение:
//  Булево - Истина, если штрихкод является штрихкодов ввода остатков.
Функция ЭтоШтрихкодВводаОстатков(Штрихкод) Экспорт
	
	НачалоGTIN = "029";
	
	Если СтрНачинаетсяС(Штрихкод, "(") Тогда
		Возврат Сред(Штрихкод,5,3) = НачалоGTIN; //Код маркировки со скобками
	КонецЕсли;
	
	Возврат Лев(Штрихкод, 2) = "29"       // Штрихкод EAN.
		Или Лев(Штрихкод, 3) = НачалоGTIN // Штрихкод GTIN.
		Или Лев(Штрихкод, 5) = "01029";   // Код маркировки без скобок.
	
КонецФункции

#КонецОбласти