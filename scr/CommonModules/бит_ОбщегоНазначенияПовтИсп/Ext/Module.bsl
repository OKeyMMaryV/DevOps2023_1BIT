////////////////////////////////////////////////////////////////////////////////
// Модуль содержит функции с повторным использованием возвращаемых значений механизма общих переменных.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает значение общей переменной.
// 
// Параметры:
//  ИмяПеременной - Строка.
// 
// Возвращаемое значение:
//  Произвольный.
// 
Функция ЗначениеПеременной(ИмяПараметра) Экспорт
	
	НайденноеЗначение = Неопределено;
	ИмяПараметраВР 	  = ВРег(ИмяПараметра);
	ЭтоУппКа 		  = бит_ОбщегоНазначения.ЭтоСемействоУПП();
		
	Если ИмяПараметраВР = ВРег("глТекущийПользователь") Или ИмяПараметраВР = ВРег("ТекущийПользователь") Тогда
		Если ЭтоУппКа Тогда
			ИмяПараметра = "глТекущийПользователь";
			Модуль = ОбщегоНазначения.ОбщийМодуль("РаботаСОбщимиПеременными");
			НайденноеЗначение = Модуль.ПолучитьЗначениеПеременной(ИмяПараметра);                
		Иначе
			Модуль = ОбщегоНазначения.ОбщийМодуль("Пользователи");
			НайденноеЗначение = Модуль.ТекущийПользователь();
		КонецЕсли;
	ИначеЕсли ИмяПараметраВР = ВРег("ТекущийПользовательИД")  Тогда	
		
		ТекПользователь = ЗначениеПеременной("ТекущийПользователь");
		Если ЗначениеЗаполнено(ТекПользователь) Тогда
			НайденноеЗначение = ТекПользователь.УникальныйИдентификатор();
		Иначе	
			НайденноеЗначение = Неопределено;
		КонецЕсли; 
		
	ИначеЕсли ИмяПараметраВР = ВРег("ОсновнаяОрганизация")  Тогда		
		НайденноеЗначение = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой(ИмяПараметра);
		
	ИначеЕсли ВРег(ИмяПараметраВР) = ВРег("УчетПоВсемОрганизациям") Тогда
		Если ЭтоУппКа Тогда
			НайденноеЗначение = Истина;
		Иначе	
			НайденноеЗначение = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметраВР = ВРег("ИспользоватьУправляемыеБлокировки") Тогда		
			
		Если ЭтоУппКа Тогда
			СтрокаСоединенияИб = "Srvr=";
			Выполнить("НайденноеЗначение = Метаданные.РежимУправленияБлокировкойДанных <> Метаданные.СвойстваОбъектов.РежимУправленияБлокировкойДанныхПоУмолчанию.Автоматический
								|И Найти(СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияИб) = 1");							
		ИначеЕсли бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
			НайденноеЗначение = Истина;
		Иначе
			НайденноеЗначение = Ложь;
		КонецЕсли;
			
	ИначеЕсли ИмяПараметраВР = ВРег("бит_НастройкиПрограммы") Тогда		
		НайденноеЗначение = бит_ОбщегоНазначения.ЗаполнениеНастроекПрограммы();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_РежимФункционированияЗащиты") Тогда 		
		НайденноеЗначение = Константы.бит_РежимФункционированияЗащиты.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_НастройкиДополнительныхИзмерений") Тогда 		
		НайденноеЗначение = бит_МеханизмДопИзмерений.ПолучитьНастройкиДополнительныхИзмерений();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_му_УчетнаяПолитика") Тогда 		
		НайденноеЗначение = бит_ОбщегоНазначения.ЗаполнениеУчетнойПолитикиМУ();	
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_НачалоОткрытогоПериода") Тогда		
		НайденноеЗначение = бит_ОбщегоНазначения.ЗаполнениеДатОткрытогоПериода();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_НастройкиВидовОбластейДоступа") Тогда		
		НайденноеЗначение = бит_рлс_Основной.ПолучитьНастройкиВидовОбластейДоступа();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_фн_АктивныеОповещения") Тогда 		
		НайденноеЗначение = бит_фн_ОповещенияСервер.ПолучитьАктивныеОповещения();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_фн_ИспользоватьМеханизмОповещений") Тогда		
		НайденноеЗначение = ПолучитьФункциональнуюОпцию("бит_ИспользоватьМеханизмОповещений");
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_ЗначенияНастроекПользователей") Тогда		
		НайденноеЗначение = Новый Соответствие;
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_му_ВестиПартионныйУчетПоСкладам") Тогда		
		НайденноеЗначение = Константы.бит_му_ВестиПартионныйУчетПоСкладам.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_му_ИспользоватьСерииНоменклатуры") Тогда		
		НайденноеЗначение = Константы.бит_му_ИспользоватьСерииНоменклатуры.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_му_ИспользоватьХарактеристикиНоменклатуры") Тогда		
		НайденноеЗначение = Константы.бит_му_ИспользоватьХарактеристикиНоменклатуры.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_ВестиУчетПоТипамПроводок") Тогда		
		НайденноеЗначение = Константы.бит_ВестиУчетПоТипамПроводок.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_НастройкиТрансляции") Тогда		
		НайденноеЗначение = бит_ОбщегоНазначения.ЗаполнениеНастроекРежимовТрансляции();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_РежимАвтоЗаполненияАналитик") Тогда		
		НайденноеЗначение = Константы.бит_РежимАвтоЗаполненияАналитик.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("КодЯзыка") Тогда	
		НайденноеЗначение = бит_ПолныеПрава.ПолучитьКодЯзыка();
		
	ИначеЕсли ИмяПараметраВР = ВРег("ВалютаРегламентированногоУчета") Тогда		
		НайденноеЗначение = Константы.ВалютаРегламентированногоУчета.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_ПроводитьДокументыПослеУтверждения") Тогда
		НайденноеЗначение = Константы.бит_ПроводитьДокументыПослеУтверждения.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_СинхронизироватьПодразделенияРеглЦФО") Тогда
		НайденноеЗначение = Константы.бит_СинхронизироватьПодразделенияРеглЦФО.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_кзн_РежимОтображенияОстатковДС") Тогда		
		НайденноеЗначение = Константы.бит_кзн_РежимОтображенияОстатковДС.Получить();
		
    ИначеЕсли ИмяПараметраВР = ВРег("бит_ЭтоЧужойПодчиненныйУзел") Тогда
		
		НайденноеЗначение = бит_ПолныеПрава.ЭтоЧужойПодчиненныйУзел();
		
    ИначеЕсли ИмяПараметраВР = ВРег("бит_ИдентификаторСеанса") Тогда
		НайденноеЗначение = ПараметрыСеанса.бит_ИдентификаторСеанса;
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_ВестиУчетПоТипамПроводок") Тогда		
		НайденноеЗначение = Константы.бит_ВестиУчетПоТипамПроводок.Получить();
		
    ИначеЕсли ИмяПараметраВР = ВРег("бит_мдм_Использовать") Тогда
		НайденноеЗначение = Константы.бит_мдм_Использовать.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("бит_пз_ЗатратыПланируютсяСНДС") Тогда	
		НайденноеЗначение = Константы.бит_пз_ЗатратыПланируютсяСНДС.Получить();
		
    ИначеЕсли ИмяПараметраВР = ВРег("бит_БДРПланируетсяСНДС") Тогда
		НайденноеЗначение = Константы.бит_БДРПланируетсяСНДС.Получить();
		
    ИначеЕсли ИмяПараметраВР = ВРег("бит_ук_УчаствоватьВПрограммеУлучшенияКачества") Тогда
		НайденноеЗначение = Константы.бит_ук_УчаствоватьВПрограммеУлучшенияКачества.Получить();
		
    ИначеЕсли ИмяПараметраВР = ВРег("бит_ИдентификаторБазы") Тогда
		НайденноеЗначение = Константы.бит_ИдентификаторБазы.Получить();
		
	ИначеЕсли ИмяПараметраВР = ВРег("ВключенРежимТакси") Тогда
		НайденноеЗначение = бит_ОбщегоНазначения.ВключенРежимТакси();
		
	КонецЕсли;
    	
	Возврат НайденноеЗначение;
	
КонецФункции

// Функция получает сведения о текущей кофигурации.
// 
// Возвращаемое значение:
//   Структура.
// 
Функция ПолучитьСведенияОПрограмме()  Экспорт
	
	Сведения = Новый Структура;
	
	КодЯзыкаПоУмолчанию = "ru";
	Язык     			= ПользователиИнформационнойБазы.ТекущийПользователь().Язык;
	КодЯзыка 			= ?(Язык = Неопределено, "ru", Язык.КодЯзыка);
		
	РезСтруктура = бит_ОбщегоНазначения.ПрочитатьXMLВТаблицу(ПолучитьОбщийМакет("бит_СведенияОПрограмме").ПолучитьТекст());
	ТабДанные    = РезСтруктура.Данные;
	
	ТабВрем = ТабДанные.Скопировать();
	ТабВрем.Свернуть("Ключ");
	Ключи = ТабВрем.ВыгрузитьКолонку("Ключ");
	
	Для каждого ТекКлюч Из Ключи Цикл
		
		СтрОтбор = Новый Структура("Ключ, Язык", ТекКлюч, КодЯзыка);
		НайденныеСтроки = ТабДанные.НайтиСтроки(СтрОтбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Сведения.Вставить(ТекКлюч, НайденныеСтроки[0].Значение);
			
		Иначе	
			
			СтрОтбор = Новый Структура("Ключ, Язык", ТекКлюч, КодЯзыкаПоУмолчанию);
			НайденныеСтроки = ТабДанные.НайтиСтроки(СтрОтбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
			
			  Сведения.Вставить(ТекКлюч, НайденныеСтроки[0].Значение);
			
			КонецЕсли; 
			
		КонецЕсли;    		
		
	КонецЦикла; 
		
	Возврат Сведения;
	
КонецФункции // ПолучитьСведенияОПрограмме()

// Функция определяет, что текущее решение это "Бухгалтерия предприятия".
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоБухгалтерияПредприятия() Экспорт
	
	Возврат ЭтоСемействоБП();
	
КонецФункции // ЭтоБухгалтерияПредприятия()

// Функция определяет, что текущее решение это "Бухгалтерия КОРП".
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоКОРП() Экспорт
	
	Сведения  = ПолучитьСведенияОПрограмме();
	Результат = Сведения.Имя_1С = "БухгалтерияПредприятияКОРП";
	
	Возврат Результат;
	
КонецФункции // ЭтоКОРП()

// Функция определяет, что текущее решение это "Бухгалтерия предприятия".
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоБП() Экспорт
	
	Сведения  = ПолучитьСведенияОПрограмме();
	Результат = Сведения.Имя_1С = "БухгалтерияПредприятия";
	
	Возврат Результат;
	
КонецФункции // ЭтоБП()

// Функция определяет, что текущее решение "Бухгалтерия предприятия" 
// или "Бухгалтерия предприятия КОРП".
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоСемействоБП() Экспорт
	
	Результат = ЭтоБП() ИЛИ ЭтоКОРП();
	
	Возврат Результат;
	
КонецФункции // ЭтоСемействоБП()

// Функция определяет, что текущее решение УПП ИЛИ КА. 
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоСемействоУПП() Экспорт
		
	Возврат Ложь;
	
КонецФункции // ЭтоСемействоУПП()

// Функция определяет, что текущее решение УТ. 
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоУТ() Экспорт
	
	Сведения  = ПолучитьСведенияОПрограмме();
	Результат = Сведения.Имя_1С = "УправлениеТорговлей";
	
	Возврат Результат;
	
КонецФункции // ЭтоСемействоУПП()

// Функция определяет, что текущее решение ERP.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоERP() Экспорт

	Сведения  = ПолучитьСведенияОПрограмме();
	Результат = Сведения.Имя_1С = "УправлениеПредприятием";
	
	Возврат Результат;
	
КонецФункции // ЭтоERP()

Функция ЭтоКомплекснаяАвтоматизация() Экспорт

	Сведения  = ПолучитьСведенияОПрограмме();
	Результат = Сведения.Имя_1С = "КомплекснаяАвтоматизация";
	
	Возврат Результат;
	
КонецФункции // ЭтоERP()

// Функция определяет, что текущее решение ERP ИЛИ УТ.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоСемействоERP() Экспорт

	Результат = ЭтоУТ() ИЛИ ЭтоERP() ИЛИ ЭтоКомплекснаяАвтоматизация();
	
	Возврат Результат;
	
КонецФункции // ЭтоСемействоERP()

// Функция определяет, содержит ли данная поставка дополнительные интерфейсы.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоИнтернационаяПоставка() Экспорт

	// Изменение кода. Начало. 05.08.2013{{
	// БИТ.СДЕЛАТЬ!!! Убрать в интернациональной поставке
	// флЭтоИнт = ?(Метаданные.Языки.Найти("Английский") = Неопределено, Ложь, Истина);	
	флЭтоИНТ = Ложь;
	// Изменение кода. Конец. 05.08.2013}}
	
	Возврат флЭтоИнт;
	
КонецФункции // ЭтоИнтернационаяПоставка()

//Возвращеает пустую ссылку на объект метаданных соответствующего типа
//
// Параметры:
//  ОбъектСистемы - СправочникСсылка.бит_ОбъектыСистемы
Функция ПустоеЗначениеОбъектаСистемы(ОбъектСистемы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектСистемы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеТипЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСистемы, "ТипЗначенияОбъекта");
	ТипОбъекта           = ХранилищеТипЗначения.Получить();
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипОбъекта);
	
КонецФункции

Функция ПроводитьДокументыПослеУтверждения() Экспорт

	Возврат Константы.бит_ПроводитьДокументыПослеУтверждения.Получить();	

КонецФункции
 
#КонецОбласти
