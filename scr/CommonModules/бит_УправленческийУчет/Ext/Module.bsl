
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыИФункцииПолученияСпискаОбъектовДляВыбораВИнтерфейсе

// Функция формирует список дополнительных объектов управленческого учета:
// ПланыВидовХарактеристик, ПланыСчетов, РегистрыБухгалтерии - от 1 до 5.
// 
// Параметры:
//  ВидОбъекта - "ПеречислениеСсылка.бит_ВидыОбъектовСистемы".
//  ИмяОбъекта - Строка, имя объекта коллекции метаданных.
// 
// Возвращаемое значение:
//   СписокОбъектов - СписокЗначений.
// 
Функция СформироватьСписокОбъектовДляВыбора(ВидОбъекта, ИмяОбъекта) Экспорт

	МассивИменОбъектов = Новый Массив;
	
	// Заполняем массив имен объектов метаданных.
	Для Ном = 1 По 5 Цикл
		МассивИменОбъектов.Добавить(ИмяОбъекта + "_" + Ном);
	КонецЦикла;
	
	// Получаем массив объектов системы.
	МассивОбъектов = бит_ПраваДоступа.ПолучитьМассивОбъектовСистемыПоВидуИМассивуИмен(ВидОбъекта, МассивИменОбъектов);
	
	// Получаем список значений объектов для выбора.
	СписокВыбора = бит_ПраваДоступа.ПолучитьСписокЗначенийОбъектовСистемыДляВыбора(МассивОбъектов);
	
	Возврат СписокВыбора;
	
КонецФункции // СформироватьСписокОбъектовДляВыбора()

#КонецОбласти

#Если Клиент Тогда

#Область ПроцедурыРаботыСоСчетамиИСубконто

// Процедура устанавливает отборы в формах выбора субконто, такие как
// Организация, Контрагент и др.
// 
// Параметры:
//  Элемент              - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                         в элементе формы.
//  Организация          - СправочникСсылка.Организации.
//  СписокПараметров     - Структура, в котором передаются параметры
//                         отбора для форм выбора партий, документов расчетов
//                         с контрагентами.
// 
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                            типов элемента управления.
// 
Процедура ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация = Неопределено, СписокПараметров = Неопределено, ОграничениеТипаЭлемента = Неопределено) Экспорт
    
    Если НЕ ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ТипЭлемента = Неопределено Тогда
		    Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ?(ТипЭлемента = Неопределено, Истина, не ОграничениеТипаЭлемента.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
    
    ОткрытьФормуВыбора = Истина;
    
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(, Элемент, );
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

        Если Организация <> Неопределено Тогда
			ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = бит_ОбщегоНазначения.ГоловнаяОрганизация(Организация);
			ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
			ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
			
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		КонецЕсли;
        
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			Если СписокПараметров.Свойство("Контрагент") Тогда
				
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = СписокПараметров.Контрагент;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 

	КонецЕсли;

    Если ОткрытьФормуВыбора
        И НЕ СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()

#КонецОбласти

#Область ПроцедурыОткрытияФормыСпискаРегистраСведенийВалютныеНеденежныеСтатьи

// Процедура открывает список регистра сведений "Валютные неденежные статьи бюджетирования".
// 
// Параметры:
//  Нет.
// 
Процедура ОткрытьСписокВалютныхНеденежныхСтатейБюджетирования() Экспорт
	
	ОткрытьСписокВалютныхНеденежныхСтатей("бит_Бюджетирование");
	
КонецПроцедуры // ОткрытьСписокВалютныхНеденежныхСтатейБюджетирования()

// Процедура открывает список регистра сведений "Валютные неденежные статьи МСФО".
// 
// Параметры:
//  Нет.
// 
Процедура ОткрытьСписокВалютныхНеденежныхСтатейМСФО() Экспорт
	
	ОткрытьСписокВалютныхНеденежныхСтатей("бит_Дополнительный_2");
	
КонецПроцедуры // ОткрытьСписокВалютныхНеденежныхСтатейМСФО()

#КонецОбласти

#Область ПроцедурыОткрытияФормыСпискаДокументаПереоценкаВалютныхДенежныхСтатей

// Процедура открывает список документов "Переоценка валютных денежных статей бюджетирования".
// 
// Параметры:
//  Нет.
// 
Процедура ОткрытьСписокДокументовПереоценкиВалютныхДенежныхСтатейБюджетирования() Экспорт
	
	ОткрытьСписокДокументовПереоценкиВалютныхДенежныхСтатей("бит_Бюджетирование");
	
КонецПроцедуры // ОткрытьСписокДокументовПереоценкиВалютныхДенежныхСтатейБюджетирования()

// Процедура открывает список документов "Переоценка валютных денежных статей МСФО".
// 
// Параметры:
//  Нет.
// 
Процедура ОткрытьСписокДокументовПереоценкиВалютныхДенежныхСтатейМСФО() Экспорт
	
	ОткрытьСписокДокументовПереоценкиВалютныхДенежныхСтатей("бит_Дополнительный_2");
	
КонецПроцедуры // ОткрытьСписокДокументовПереоценкиВалютныхДенежныхСтатейМСФО()

#КонецОбласти

#КонецЕсли

#Область КлассификацияПроводокПоТипамПроводок

// Процедура заполняет запись регистра бит_ОборотыПоТипамПроводок по проводке регистра бухгалтерии.
// 
// Параметры:
//  ЗаписьИсточник - РегистрБухгалтерииЗапись.
//  ЗаписьПриемник - РегистрНакопления.бит_ОборотыПоТипамПроводок.
//  ОбъектСистемыИсточник - СправочникСсылка.бит_ОбъектыСистемы.
//  СтрПар - Структура.
// 
Процедура ЗаполнитьЗаписьРегистраТипыПроводок(ЗаписьИсточник, ЗаписьПриемник, ОбъектСистемыИсточник, СтрПар) Экспорт
	
	ЗаписьПриемник.Активность  = ЗаписьИсточник.Активность;
	ЗаписьПриемник.Период      = ЗаписьИсточник.Период;
	ЗаписьПриемник.РегистрБухгалтерии = ОбъектСистемыИсточник;
	ЗаписьПриемник.Организация = ЗаписьИсточник.Организация;
	ЗаписьПриемник.ТипПроводки = ЗаписьИсточник.ТипПроводки;
    
    // Счета
	ЗаписьПриемник.СчетДт = ЗаписьИсточник.СчетДт;
    ЗаписьПриемник.СчетКт = ЗаписьИсточник.СчетКт;
    
    СвСчИсДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ЗаписьИсточник.СчетДт);
    СвСчИсКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ЗаписьИсточник.СчетКт);
    
    // Субконто Дт
	Для Сч = 1 По СвСчИсДт.КоличествоСубконто Цикл
        Если Сч > СтрПар.КолвоСубконтоПриемник Тогда
			Прервать;
		КонецЕсли;
    	ИмяИзмерения = "СубконтоДт"+Сч;
        ЗаписьПриемник[ИмяИзмерения] = ЗаписьИсточник.СубконтоДт[СвСчИсДт["ВидСубконто" + Сч]];
    КонецЦикла; 
	
	// Субконто Кт
    Для Сч = 1 По СвСчИсКт.КоличествоСубконто Цикл
        Если Сч > СтрПар.КолвоСубконтоПриемник Тогда
			Прервать;
		КонецЕсли;
    	ИмяИзмерения = "СубконтоКт"+Сч;
        ЗаписьПриемник[ИмяИзмерения] = ЗаписьИсточник.СубконтоКт[СвСчИсКт["ВидСубконто" + Сч]];
    КонецЦикла;    
    
	// Суммы
	ЗаписьПриемник.СуммаРегл = ЗаписьИсточник.СуммаРегл;
	ЗаписьПриемник.СуммаУпр  = ЗаписьИсточник.СуммаУпр;
	
	Если СтрПар.ЕстьСуммаМУ Тогда
		ЗаписьПриемник.СуммаМУ = ЗаписьИсточник.СуммаМУ;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗаписьРегистраТипыПроводок()

// Функция готовит структуру параметров трансляции для выполнения подбора типов проводок по 
// правилам трансляции.
// 
// Параметры:
//  Организация  - СправочникСсылка.Организация.
//  ДатаПравил   - Дата.
// 
// Возвращаемое значение:
//   СтруктураПараметров   - Структура.
// 
Функция ПодготовитьСтруктуруПараметровДляПодбораТиповПроводок(Организация,Регистратор,МетаРегистрИсточник,МетаРегистрПриемник)  Экспорт

	РегистрИсточник = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегистрИсточник);	
	РегистрПриемник = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегистрПриемник);
	ДатаПравил = Регистратор.Дата;
	Назначения = Новый Структура;
	Назначения.Вставить("ПодборТиповПроводок", Перечисления.бит_НазначенияПравилТрансляции.ПодборТиповПроводок);
	
	МассивПравил    = бит_МеханизмТрансляцииПовтИсп.ПолучитьПравилаТрансляцииПоНазначению(Организация
		                                                                                   ,ДатаПравил
		                                                                                   ,Назначения
																						   ,РегистрИсточник
																						   ,РегистрПриемник);
	
	СтруктураПараметров = бит_МеханизмТрансляции.КонструкторСтруктурыПараметровТрансляции();														
														
	СтруктураПараметров.ОбязательныеПоля  = Новый Структура;
	СтруктураПараметров.ПравилоЗаполнения = Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.СоздатьЭлемент();
	СтруктураПараметров.ПравилоЗаполнения.КодПередФормированиемЗаписи = "
	        |бит_УправленческийУчет.ЗаполнитьЗаписьРегистраТипыПроводок(ЗаписьИсточник, ЗаписьПриемник, СтруктураПараметров.ОбъектСистемыИсточник, СтруктураПараметров.СтрПарЗапись);
			|";
			
	// Если ТипПроводки был изменен трансляцие, необходимо установить такое же значение и в РБ.Источнике.
	СтруктураПараметров.ПравилоЗаполнения.КодПослеФормированияЗаписи = "
	        |Если ЗаписьПриемник.ТипПроводки <> ЗаписьИсточник.ТипПроводки Тогда
			|  ЗаписьИсточник.ТипПроводки = ЗаписьПриемник.ТипПроводки;
			|КонецЕсли;
			|";
			
	СтруктураПараметров.ПравилаТрансляции = МассивПравил;
	СтруктураПараметров.СтруктураШапкиДокумента = Новый Структура;
	СтруктураПараметров.ПользовательскиеФункции = Новый Соответствие;
	СтруктураПараметров.ДополнительныеАналитики = Новый Соответствие;
	СтруктураПараметров.ВидыРегистров           = бит_МеханизмТрансляции.КонструкторСтруктурыВидыРегистров(Истина,Ложь,Ложь,Истина);
	СтруктураПараметров.ОбъектСистемыИсточник   = РегистрИсточник;
	СтруктураПараметров.ОбъектСистемыПриемник   = РегистрПриемник;
	СтруктураПараметров.МетаданныеРегистратора  = Регистратор.Метаданные();
	СтруктураПараметров.МетаданныеИсточника     = МетаРегистрИсточник;
	СтруктураПараметров.МетаданныеПриемника     = МетаРегистрПриемник;
	СтруктураПараметров.ЗаписыватьДвижения      = Ложь;
	СтруктураПараметров.ВестиПротокол           = Истина;
	СтруктураПараметров.ОчиститьПриемник        = Ложь;	
	
	Возврат СтруктураПараметров;

КонецФункции // ПодготовитьСтруктуруПараметровДляПодбораТиповПроводок()

// Процедура заполняет заполняет тип проводки в записях набора записей регистра бухгалтерии
// 	и переносит проводки в регистр накопления, чтобы с ними можно было работать при формировании отчетности
// 	по типам проводок.
// 
// Параметры:
// 	НаборЗаписей.
// 	Регистратор.
// 
Процедура ОбработатьПроводкиПоТипамПроводок(НаборЗаписей, Регистратор, ОчиститьРегистрПриемник = Истина) Экспорт
    
    Если Метаданные.РегистрыНакопления.Найти("бит_ОборотыПоТипамПроводок") = Неопределено Тогда
        Возврат;    
    КонецЕсли;
	
	ВестиУчетПоТипамПроводок = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ВестиУчетПоТипамПроводок");
	Если НЕ ВестиУчетПоТипамПроводок Тогда
		Возврат;
	КонецЕсли;

	МетаРегистрПриемник = Метаданные.РегистрыНакопления.бит_ОборотыПоТипамПроводок;
	МетаРегистрИсточник = НаборЗаписей.Метаданные();
	МетаРегистратор		= Регистратор.Метаданные();
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаРегистратор) Тогда
		Организация = Регистратор.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;	
		
	// Сначала в исходном наборе записей определим тип проводки если потребуется.
	
	ТипыПроводокПоТипамДокументов = Новый Соответствие;
	
	ТипыПроводокПоТипамДокументов.Вставить(Тип("ДокументСсылка.бит_му_Элиминация")						  , Справочники.бит_ТипыПроводок.КонсолидационныеКорректировки);
	ТипыПроводокПоТипамДокументов.Вставить(Тип("ДокументСсылка.бит_му_КонсолидационныеКорректировки")	  , Справочники.бит_ТипыПроводок.КонсолидационныеКорректировки);
	ТипыПроводокПоТипамДокументов.Вставить(Тип("ДокументСсылка.бит_му_КонсолидационныеКорректировкиНовый"), Справочники.бит_ТипыПроводок.КонсолидационныеКорректировки);
	ТипыПроводокПоТипамДокументов.Вставить(Тип("ДокументСсылка.бит_му_СторноЭлиминационныхНачислений")    , Справочники.бит_ТипыПроводок.КонсолидационныеКорректировки);
	
	Если ТипыПроводокПоТипамДокументов[ТипЗнч(Регистратор)] = Неопределено Тогда
		ТипПроводкиПоУмолчанию = Справочники.бит_ТипыПроводок.ПараллельныйУчет;
	Иначе
		ТипПроводкиПоУмолчанию = ТипыПроводокПоТипамДокументов[ТипЗнч(Регистратор)];
	КонецЕсли;
	
	Для Каждого Проводка Из НаборЗаписей Цикл
		
		Если НЕ ЗначениеЗаполнено(Проводка.ТипПроводки) Тогда
			Проводка.ТипПроводки = ТипПроводкиПоУмолчанию;
		КонецЕсли;
		
	КонецЦикла;
		
	// Перенесем проводки в регистр накопления бит_ОборотыПоТипамПроводок.
	Если НЕ РегистраторУстановленПравильно(МетаРегистрИсточник, МетаРегистрПриемник, МетаРегистратор) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим количество субконто доступных в регистре приемнике.
	МаксКолСубконто = МетаРегистрИсточник.ПланСчетов.МаксКоличествоСубконто;
	КолвоСубконтоПриемник = 0;
	Для Ном=1 по МаксКолСубконто Цикл
		ИмяИзмерения = "СубконтоДт"+Ном;
		НайденноеИзмерение = МетаРегистрПриемник.Измерения.Найти(ИмяИзмерения);
		Если НайденноеИзмерение = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КолвоСубконтоПриемник = КолвоСубконтоПриемник + 1;
	КонецЦикла;
	
	ОбъектСистемыИсточник = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегистрИсточник);
	
	ЕстьСуммаМУ = НЕ МетаРегистрИсточник.Ресурсы.Найти("СуммаМУ") = Неопределено;
	
	// Параметры, используемые для формирования записи.
	СтрПарЗапись = Новый Структура;
	СтрПарЗапись.Вставить("ЕстьСуммаМУ", ЕстьСуммаМУ);
	СтрПарЗапись.Вставить("КолвоСубконтоПриемник", КолвоСубконтоПриемник); 
	
	НаборПриемник = РегистрыНакопления.бит_ОборотыПоТипамПроводок.СоздатьНаборЗаписей();
	НаборПриемник.Отбор.Регистратор.Установить(Регистратор);
	НаборПриемник.Прочитать();
	Если ОчиститьРегистрПриемник Тогда
	
		 НаборПриемник.Очистить();
	
	КонецЕсли; 
	
	// Подбор типов проводок трансляцией, если правила установлены.
	ПараметрыТрансляции = ПодготовитьСтруктуруПараметровДляПодбораТиповПроводок(Организация, 
							Регистратор, МетаРегистрИсточник, МетаРегистрПриемник);
																						  
	Если ПараметрыТрансляции.ПравилаТрансляции.Количество() > 0 Тогда
		// Вызов трансляции
		Протокол = "";
		ПараметрыТрансляции.Вставить("СтрПарЗапись", СтрПарЗапись);
	    бит_МеханизмТрансляции.ВыполнитьТрансляциюДвижений(Регистратор, НаборЗаписей, НаборПриемник, ПараметрыТрансляции, Протокол);
	Иначе
		Для Каждого Проводка Из НаборЗаписей Цикл
			НоваяЗапись = НаборПриемник.Добавить();
			ЗаполнитьЗаписьРегистраТипыПроводок(Проводка, НоваяЗапись, ОбъектСистемыИсточник, СтрПарЗапись);
		КонецЦикла;
	КонецЕсли; 																					  
	
	бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборПриемник, "Ошибки");
	
КонецПроцедуры
 
#КонецОбласти

// Функция получает таблицу переоценки денежных статей.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 						Обязательные ключи:
//                         ДатаПереоценки 	   - Дата.
//                         ИмяРегБухгалтерии   - Строка.
//                         МассивСчетов        - Массив.
//                         СтруктураКурсыВалют - Структура. Возможные имена ключей: / "Упр" / "МУ" / "Сценарий" /.
//                      Дополнительные ключи:
//                         Организация      	   - СправочникСсылка.Организации. По умолчанию Неопределено.
//                         Сценарий      		   - СправочникСсылка.СценарииПланирования. По умолчанию Неопределено.
//                         ПереоценкаСуммаУпр      - Булево. По умолчанию Ложь.
//                         ПереоценкаСуммаСценарий - Булево. По умолчанию Ложь.
//                         ПереоценкаСуммаМУ       - Булево. По умолчанию Ложь.
// 
// Возвращаемое значение:
//  ТаблицаПереоценки - ТаблицаЗначений.
// 
Функция ПолучитьТаблицуПереоценкиВалютныхДенежныхСтатей(СтруктураПараметров) Экспорт
	
	ТаблицаПереоценки = Новый ТаблицаЗначений;
	
	// Получим значения для выполнения переоценки.
	ДатаПереоценки	  = СтруктураПараметров.ДатаПереоценки;
	ИмяРегБухгалтерии = СтруктураПараметров.ИмяРегБухгалтерии;
	МассивСчетов	  = СтруктураПараметров.МассивСчетов;
	
	Если СтруктураПараметров.Свойство("Организация") Тогда
		Организация = СтруктураПараметров.Организация;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Сценарий") Тогда
		Сценарий = СтруктураПараметров.Сценарий;
	Иначе
		Сценарий = Неопределено;
	КонецЕсли;
	
	МатаданныеПланаСчетов	   = Метаданные.РегистрыБухгалтерии[ИмяРегБухгалтерии].ПланСчетов;
	ИмяПланаСчетов			   = МатаданныеПланаСчетов.Имя;
	ИмяПланаВидовХарактеристик = МатаданныеПланаСчетов.ВидыСубконто.Имя;
	КоличествоСубконто	   	   = МатаданныеПланаСчетов.МаксКоличествоСубконто;
	
	// Получим структура курсов валют.
	СтруктураКурсыВалют = СтруктураПараметров.СтруктураКурсыВалют;
	
	РесурсыПереоценки = Новый Структура;
	
	Если СтруктураПараметров.Свойство("ПереоценкаСуммаУпр") Тогда
		
		ПереоценкаСуммаУпр = СтруктураПараметров.ПереоценкаСуммаУпр;
		
		Если ПереоценкаСуммаУпр Тогда
			РесурсыПереоценки.Вставить("СуммаУпр", СтруктураКурсыВалют.Упр);
		КонецЕсли;
		
	Иначе
		ПереоценкаСуммаУпр = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ПереоценкаСуммаРегл") Тогда
		
		ПереоценкаСуммаРегл = СтруктураПараметров.ПереоценкаСуммаРегл;
		
		Если ПереоценкаСуммаРегл Тогда
			РесурсыПереоценки.Вставить("СуммаРегл", СтруктураКурсыВалют.Регл);
		КонецЕсли;
		
	Иначе
		ПереоценкаСуммаРегл = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ПереоценкаСуммаСценарий") Тогда
		
		ПереоценкаСуммаСценарий = СтруктураПараметров.ПереоценкаСуммаСценарий;
		
		Если ПереоценкаСуммаСценарий Тогда
			РесурсыПереоценки.Вставить("СуммаСценарий", СтруктураКурсыВалют.Сценарий);
		КонецЕсли;
		
	Иначе
		ПереоценкаСуммаСценарий = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ПереоценкаСуммаМУ") Тогда
		
		ПереоценкаСуммаМУ = СтруктураПараметров.ПереоценкаСуммаМУ;
		
		Если ПереоценкаСуммаМУ Тогда
			РесурсыПереоценки.Вставить("СуммаМУ", СтруктураКурсыВалют.МУ);
		КонецЕсли;
		
	Иначе
		ПереоценкаСуммаМУ = Ложь;
	КонецЕсли;
	
	Если РесурсыПереоценки.Количество() = 0 Тогда
		// Не указаны ресурсы для переоценки.
		Возврат ТаблицаПереоценки;
	КонецЕсли;
	
	// Процедура удаляет счета с невалютной аналитикой.
	//БИТ Тртилек 08.02.2012
	Если СтруктураПараметров.Документ.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено
		И СтруктураПараметров.Документ.ВидОперации <> Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПереоценкаСуммыМеждународногоУчета Тогда
	///БИТ Тртилек	
	УдалитьСчетаСНевалютнойАналитикой(ИмяПланаСчетов, МассивСчетов);
	//БИТ Тртилек 08.02.2012
	КонецЕсли;
	///БИТ Тртилек
	
	// Получим таблицу счетов с ресурсами для переоценки.
	// С учетом настроек регистра сведений "Валютные неденежные статьи".
	ТаблицаСчетаРесурсы = ПолучитьТаблицуСчетовСРесурсамиДляПереоценки(ДатаПереоценки
																	  ,Организация
																	  ,ИмяПланаСчетов
																	  ,МассивСчетов
																	  ,ПереоценкаСуммаУпр
																	  ,ПереоценкаСуммаСценарий
																	  ,ПереоценкаСуммаМУ
																	  //,ПереоценкаСуммаРегл);
																	  ,ПереоценкаСуммаРегл
																	  ,СтруктураПараметров.Документ); //БИТ Тртилек 26.01.2012 Добавим параметр "СтруктураШапкиДокументов.Ссылка"
	Если ТаблицаСчетаРесурсы.Количество() = 0 Тогда
		// Нет счетов для переоценки.
		Возврат ТаблицаПереоценки;
	КонецЕсли;
	
    ЕстьОрганизацияБюдж = Ложь;
	Если ИмяРегБухгалтерии = "бит_Бюджетирование" Тогда
		Организация_Сценарий = Сценарий;
		ЕстьОрганизацияБюдж = ?(СтруктураПараметров.Свойство("Организация"), Истина, Ложь);
	Иначе
		Организация_Сценарий = Организация;
	КонецЕсли;
	
	ПараметрыПолученияОстатков = Новый Структура;
	ПараметрыПолученияОстатков.Вставить("ДатаПереоценки"      , ДатаПереоценки);
	ПараметрыПолученияОстатков.Вставить("Организация"         , Организация);
	ПараметрыПолученияОстатков.Вставить("ЦФО"                 , СтруктураПараметров.ЦФО);
	ПараметрыПолученияОстатков.Вставить("Сценарий"            , Сценарий);
	ПараметрыПолученияОстатков.Вставить("ИмяРегБухгалтерии"   , ИмяРегБухгалтерии);
	ПараметрыПолученияОстатков.Вставить("ТаблицаСчетаРесурсы" , ТаблицаСчетаРесурсы);
	ПараметрыПолученияОстатков.Вставить("КоличествоСубконто"  , КоличествоСубконто);
	ПараметрыПолученияОстатков.Вставить("ЕстьОрганизацияБюдж" , ЕстьОрганизацияБюдж);
	ПараметрыПолученияОстатков.Вставить("ПоВсемОрганизациям"  , СтруктураПараметров.ПоВсемОрганизациям);
	ПараметрыПолученияОстатков.Вставить("ПоВсемЦФО"           , СтруктураПараметров.ПоВсемЦФО);
	
	// Получим результат запроса остатков по счетам переоценки.
	РезультатОстатков = ПолучитьРезультатЗапросаОстатковПоСчетамДляПереоценки(ПараметрыПолученияОстатков);
	Если РезультатОстатков.Пустой() Тогда
		// Нет остатков для переоценки.
		Возврат ТаблицаПереоценки;
	КонецЕсли;
	
	// Сформируем заполняемые свойства для новых строк переоценки.
	ЗаполняемыеСвойства = "Счет, Организация";
	
	Если ИмяРегБухгалтерии = "бит_Бюджетирование" Тогда
		ЗаполняемыеСвойства = ЗаполняемыеСвойства + ", ЦФО";
	КонецЕсли;
	
	Для Ном = 1 По КоличествоСубконто Цикл
		ЗаполняемыеСвойства = ЗаполняемыеСвойства + ", Субконто" + Ном;
	КонецЦикла;
	
	ЗаполняемыеСвойства = ЗаполняемыеСвойства + ", Валюта, ВалютнаяСумма";
	
	// Добавим колонки результата в таблицу переоценки.
	ДобавитьКолонкиРезультатаВТаблицуПереоценки(ТаблицаПереоценки
											   ,ИмяРегБухгалтерии
											   ,ИмяПланаСчетов
											   ,ИмяПланаВидовХарактеристик
											   ,КоличествоСубконто);
	
	// Получим выборку из запроса по остаткам для выполнения переоценки.
	ВыборкаИзЗапроса = РезультатОстатков.Выбрать();
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		
		СтруктураДельтыСумм = Новый Структура;
		
		//БИТ Тртилек 07.02.2012 Для вида операции МСФО заполним валютную сумму
		Если СтруктураПараметров.Документ.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
			Если СтруктураПараметров.Документ.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПереоценкаСуммыМеждународногоУчета
				И СтруктураПараметров.СтруктураКурсыВалют.МУ.Валюта = Справочники.Валюты.НайтиПоКоду("840") Тогда 
				ВалютаСтроки = СтруктураПараметров.СтруктураКурсыВалют.МУ.Валюта;
				ВалСуммаСтроки = ВыборкаИзЗапроса.СуммаМУ;
			Иначе
				
				ВалютаСтроки   = ВыборкаИзЗапроса.Валюта;
				ВалСуммаСтроки = ВыборкаИзЗапроса.ВалютнаяСумма;
				
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтруктураПараметров.Документ) = Тип("ДокументСсылка.бит_ПересчетСтатейВВалютуПредставленияМСФО") Тогда
			ВалютаСтроки = СтруктураПараметров.СтруктураКурсыВалют.МУ.Валюта;
			ВалСуммаСтроки = ВыборкаИзЗапроса.СуммаМУ;
		Иначе
			ВалютаСтроки   = ВыборкаИзЗапроса.Валюта;
			ВалСуммаСтроки = ВыборкаИзЗапроса.ВалютнаяСумма;
		КонецЕсли;
		
		//ОК Аверьянова 11.02.2015 - данное условие действовало до 01.01.2015, пока оставим закомментированым
		
		////ОК+ Аверьянова #AT-1201261# 04.08.2014 - добавлено условие для Лоджистика
		//Если Организация = Справочники.Организации.НайтиПоКоду("000000056") ТОгда
		//	Если ВыборкаИзЗапроса.ВалютнаяСумма = 0 Тогда   //ОК+ Аверьянова 04.07.14 отключена проверка на нулевые валютные остатки, т.к. т.к. валютный учет в Лоджистике включен с мая 2014
		//		продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		////ОК-
		
		//ВалютаСтроки   = ВыборкаИзЗапроса.Валюта;
		//ВалСуммаСтроки = ВыборкаИзЗапроса.ВалютнаяСумма;
		///БИТ Тртилек
		
		КурсКратностьВалютыСтроки = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСтроки, ДатаПереоценки);
		//***БИТ***Теплова***(2012.04.09
		//КурсВалютыСтроки 		  = КурсКратностьВалютыСтроки.Курс;
		Если ЗначениеЗаполнено(ВалютаСтроки)  Тогда
			КурсВалютыСтроки = ?(ВалютаСтроки.бит_КурсыЕвропейскогоБанка = Истина,КурсКратностьВалютыСтроки.бит_КурсыЕБ, КурсКратностьВалютыСтроки.Курс);                        
		Иначе
			КурсВалютыСтроки = 0;
		КонецЕсли;
		//***БИТ***Теплова***)
		КратностьВалютыСтроки	  = КурсКратностьВалютыСтроки.Кратность;
		
		Для Каждого КлючЗначение Из РесурсыПереоценки Цикл
			
			ТекИмяРесурса  = КлючЗначение.Ключ;
			
			Если Не ВыборкаИзЗапроса["Переоценка" + ТекИмяРесурса] Тогда
				// Для текущего ресурса по текущему счету выполнение переоценки отключено.
				Продолжить;
			КонецЕсли;
			
			ТекКурсыВалюты = КлючЗначение.Значение;
			
			// Расчитаем значение суммы на дату переоценки.
			НоваеЗначениеСуммы = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ВалСуммаСтроки
																		    	,ВалютаСтроки		  , ТекКурсыВалюты.Валюта
																				,КурсВалютыСтроки	  , ТекКурсыВалюты.Курс
																				,КратностьВалютыСтроки, ТекКурсыВалюты.Кратность);
			// Расчитаем дельту сумм.
			ДельтаСумм = (НоваеЗначениеСуммы - ВыборкаИзЗапроса[ТекИмяРесурса]);
			
			Если Не ДельтаСумм = 0 Тогда
				СтруктураДельтыСумм.Вставить(ТекИмяРесурса, ДельтаСумм);
			КонецЕсли;
			
		КонецЦикла; // Для Каждого ТекИмяРесурса Из РесурсыПереоценки Цикл.
		
		// Если есть дельты сумм, тогда
		Если Не СтруктураДельтыСумм.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаПереоценки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИзЗапроса, ЗаполняемыеСвойства);
			
			// Заполним суммы переоценки.
			Для Каждого КлючЗначение Из СтруктураДельтыСумм Цикл
				НоваяСтрока[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла; // Пока ВыборкаИзЗапроса.Следующий() Цикл
	
	Возврат ТаблицаПереоценки;
	
КонецФункции // ПолучитьТаблицуПереоценкиВалютныхДенежныхСтатей()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииПоПолучениюТаблицыПереоценки

// Процедура удаляет из массива счета с невалютной аналитикой.
// 
// Параметры:
//  ИмяПланаСчетов - Строка.
//  МассивСчетов   - Массив. Возвращаемый.
// 
Процедура УдалитьСчетаСНевалютнойАналитикой(ИмяПланаСчетов, МассивСчетов)
	
	Если Метаданные.ПланыСчетов[ИмяПланаСчетов].ПризнакиУчетаСубконто.Найти("Валютный") = Неопределено Тогда
		// Валютный признак учета по субконто на плане счетов отсутствует.
		Возврат;
	КонецЕсли;
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	
	// Получим валютные счета с невалютной аналитикой.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланСчетовВидыСубконто.Ссылка КАК Счет,
	|	ПланСчетовВидыСубконто.ВидСубконто
	|ИЗ
	|	ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК ПланСчетовВидыСубконто
	|ГДЕ
	|	ПланСчетовВидыСубконто.Ссылка В(&МассивСчетов)
	|	И ПланСчетовВидыСубконто.Ссылка.Валютный
	|	И (НЕ ПланСчетовВидыСубконто.Валютный)
	|ИТОГИ ПО
	|	Счет";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		// Счета с невалютной аналитикой отсутствуют.
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "ru = 'Невозможно выполнить переоценку для счетов:'";
	// Сообщим пользователю.
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр(ТекстСообщения));
	
	ВыборкаПоСчетам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСчетам.Следующий() Цикл
		
		ТекущийСчет 		   = ВыборкаПоСчетам.Счет;
		ВыборкаПоВидамСубконто = ВыборкаПоСчетам.Выбрать();
		
		Пока ВыборкаПоВидамСубконто.Следующий() Цикл
			
			ТекстСообщения = "ru = '   - На валютном счете """ 
							 + Строка(ТекущийСчет)
							 + """ указано невалютное субконто """ 
							 + Строка(ВыборкаПоВидамСубконто.ВидСубконто)
							 + """.'";
			
			// Сообщим пользователю.
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр(ТекстСообщения));
			
		КонецЦикла; // Пока ВыборкаПоВидамСубконто.Следующий() Цикл.
		
		ИндексЭлемента = МассивСчетов.Найти(ТекущийСчет);
		
		Если Не ИндексЭлемента = Неопределено Тогда
			// Удалим счет из массива.
			МассивСчетов.Удалить(ИндексЭлемента);
		КонецЕсли;
		
	КонецЦикла; // Пока ВыборкаПоСчетам.Следующий() Цикл
	
КонецПроцедуры // УдалитьСчетаСНевалютнойАналитикой()

// Функция получает таблицу счето с ресурсами для переоценки.
// 
// Параметры:
//  ДатаПереоценки 			- Дата.
//  Организация 			- СправочникСсылка.Организации.
//  ИмяПланаСчетов 			- Строка.
//  МассивСчетов 			- Массив.
//  ПереоценкаСуммаУпр 		- Булево.
//  ПереоценкаСуммаСценарий - Булево.
//  ПереоценкаСуммаМУ 		- Булево.
// 
// Возвращаемое значение:
//  ТаблицаСчетаРесурсы - ТаблицаЗначений.
// 
Функция ПолучитьТаблицуСчетовСРесурсамиДляПереоценки(ДатаПереоценки
													,Организация
													,ИмяПланаСчетов
													,МассивСчетов
													,ПереоценкаСуммаУпр
													,ПереоценкаСуммаСценарий
													,ПереоценкаСуммаМУ
													//,ПереоценкаСуммаРегл)
													,ПереоценкаСуммаРегл
													,Документ)//БИТ Тртилек 26.01.2012 Добавим параметр "Документ"
													
	лЕстьОбъектыМСФО = бит_ОбщегоНазначения.ЕстьОбъектыМСФО();												
	
	//БИТ Тртилек 26.01.2012												
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.бит_ПересчетСтатейВВалютуПредставленияМСФО") Тогда													
	///БИТ Тртилек
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПереоценки"		   , ДатаПереоценки);
	Запрос.УстановитьПараметр("Организация"			   , Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация"	   , Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("МассивСчетов"		   , МассивСчетов);
	Запрос.УстановитьПараметр("ПереоценкаСуммаУпр"     , ПереоценкаСуммаУпр);
	Запрос.УстановитьПараметр("ПереоценкаСуммаСценарий", ПереоценкаСуммаСценарий);
	Запрос.УстановитьПараметр("ПереоценкаСуммаМУ"	   , ПереоценкаСуммаМУ);
	Запрос.УстановитьПараметр("ПереоценкаСуммаРегл"	   , ПереоценкаСуммаРегл);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	0 КАК Приоритет,
	|	ВалютныеНеденежныеСтатьи_ДляОрганизации.Счет,		
	|	ВалютныеНеденежныеСтатьи_ДляОрганизации.СуммаСценарий,";
	Если лЕстьОбъектыМСФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВалютныеНеденежныеСтатьи_ДляОрганизации.СуммаМУ,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ВалютныеНеденежныеСтатьи_ДляОрганизации.СуммаУпр,
	|	ВалютныеНеденежныеСтатьи_ДляОрганизации.СуммаРегл
	|ПОМЕСТИТЬ ВалютныеНеденежныеСтатьи_ПоПриоритетам
	|ИЗ
	|	РегистрСведений.бит_ВалютныеНеденежныеСтатьи.СрезПоследних(
	|			&ДатаПереоценки,
	|			Организация = &Организация
	|				И Счет В (&МассивСчетов)) КАК ВалютныеНеденежныеСтатьи_ДляОрганизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	1,
	|	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.Счет,		
	|	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.СуммаСценарий,";
	Если лЕстьОбъектыМСФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.СуммаМУ,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.СуммаУпр,
	|	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.СуммаРегл
	|ИЗ
	|	РегистрСведений.бит_ВалютныеНеденежныеСтатьи.СрезПоследних(
	|			&ДатаПереоценки,
	|			Организация = &ПустаяОрганизация
	|				И Счет В (&МассивСчетов)) КАК ВалютныеНеденежныеСтатьи_ПустаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВалютныеНеденежныеСтатьи_ПоПриоритетам.Приоритет) КАК Приоритет,
	|	ВалютныеНеденежныеСтатьи_ПоПриоритетам.Счет
	|ПОМЕСТИТЬ ВалютныеНеденежныеСтатьи_Группированные
	|ИЗ
	|	ВалютныеНеденежныеСтатьи_ПоПриоритетам КАК ВалютныеНеденежныеСтатьи_ПоПриоритетам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВалютныеНеденежныеСтатьи_ПоПриоритетам.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Счет,
	|	ВЫБОР 
	|		КОГДА ПланСчетов.Ссылка = ВалютныеНеденежныеСтатьи_ПоПриоритетам.Счет
	|			ТОГДА 
	|				ВЫБОР 
	|					КОГДА &ПереоценкаСуммаСценарий И (НЕ ВалютныеНеденежныеСтатьи_ПоПриоритетам.СуммаСценарий)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ &ПереоценкаСуммаСценарий
	|	КОНЕЦ КАК ПереоценкаСуммаСценарий,";
	Если лЕстьОбъектыМСФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|		КОГДА ПланСчетов.Ссылка = ВалютныеНеденежныеСтатьи_ПоПриоритетам.Счет
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА &ПереоценкаСуммаМУ И (НЕ ВалютныеНеденежныеСтатьи_ПоПриоритетам.СуммаМУ)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ &ПереоценкаСуммаМУ
		|	КОНЕЦ КАК ПереоценкаСуммаМУ,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБОР 
	|		КОГДА ПланСчетов.Ссылка = ВалютныеНеденежныеСтатьи_ПоПриоритетам.Счет
	|			ТОГДА 
	|				ВЫБОР 
	|					КОГДА &ПереоценкаСуммаУпр И (НЕ ВалютныеНеденежныеСтатьи_ПоПриоритетам.СуммаУпр)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ &ПереоценкаСуммаУпр
	|	КОНЕЦ КАК ПереоценкаСуммаУпр,
	|	ВЫБОР 
	|		КОГДА ПланСчетов.Ссылка = ВалютныеНеденежныеСтатьи_ПоПриоритетам.Счет
	|			ТОГДА 
	|				ВЫБОР 
	|					КОГДА &ПереоценкаСуммаРегл И (НЕ ВалютныеНеденежныеСтатьи_ПоПриоритетам.СуммаРегл)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ &ПереоценкаСуммаРегл
	|	КОНЕЦ КАК ПереоценкаСуммаРегл
	|ПОМЕСТИТЬ ТаблицаСчетаРесурсы
	|ИЗ
	|	ПланСчетов." + ИмяПланаСчетов + " КАК ПланСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютныеНеденежныеСтатьи_Группированные КАК ВалютныеНеденежныеСтатьи_Группированные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВалютныеНеденежныеСтатьи_ПоПриоритетам КАК ВалютныеНеденежныеСтатьи_ПоПриоритетам
	|			ПО ВалютныеНеденежныеСтатьи_Группированные.Счет = ВалютныеНеденежныеСтатьи_ПоПриоритетам.Счет
	|				И ВалютныеНеденежныеСтатьи_Группированные.Приоритет = ВалютныеНеденежныеСтатьи_ПоПриоритетам.Приоритет
	|		ПО ПланСчетов.Ссылка = ВалютныеНеденежныеСтатьи_Группированные.Счет
	|ГДЕ
	|	ПланСчетов.Ссылка В (&МассивСчетов)
	|			И ПланСчетов.Валютный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетаРесурсы.Счет,		
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаСценарий,";
	Если лЕстьОбъектыМСФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ТаблицаСчетаРесурсы.ПереоценкаСуммаМУ,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаУпр,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаРегл
	|ИЗ
	|	ТаблицаСчетаРесурсы КАК ТаблицаСчетаРесурсы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаСчетаРесурсы.ПереоценкаСуммаУпр
	|					ИЛИ ТаблицаСчетаРесурсы.ПереоценкаСуммаСценарий
	|					ИЛИ ТаблицаСчетаРесурсы.ПереоценкаСуммаРегл";
	Если лЕстьОбъектыМСФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|					ИЛИ ТаблицаСчетаРесурсы.ПереоценкаСуммаМУ";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВалютныеНеденежныеСтатьи_ПоПриоритетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВалютныеНеденежныеСтатьи_Группированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСчетаРесурсы
	|";
	
	//БИТ Тртилек 26.01.2012
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.бит_ПереоценкаВалютныхДенежныхСтатей")
		И Документ.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПереоценкаСуммыМеждународногоУчета Тогда													
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПланСчетов.Валютный", "");
	КонецЕсли;
	Иначе
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПереоценки"		   , ДатаПереоценки);
	Запрос.УстановитьПараметр("Организация"			   , Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация"	   , Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("МассивСчетов"		   , МассивСчетов);
	Запрос.УстановитьПараметр("ПереоценкаСуммаУпр"     , ПереоценкаСуммаУпр);
	Запрос.УстановитьПараметр("ПереоценкаСуммаСценарий", ПереоценкаСуммаСценарий);
	Запрос.УстановитьПараметр("ПереоценкаСуммаМУ"	   , ПереоценкаСуммаМУ);
	Запрос.УстановитьПараметр("ПереоценкаСуммаРегл"	   , ПереоценкаСуммаРегл);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	0 КАК Приоритет,
	               |	ВалютныеНеденежныеСтатьи_ДляОрганизации.Счет,
	               |	ВалютныеНеденежныеСтатьи_ДляОрганизации.СуммаУпр,
	               |	ВалютныеНеденежныеСтатьи_ДляОрганизации.СуммаСценарий,
	               |	ВалютныеНеденежныеСтатьи_ДляОрганизации.СуммаМУ,
	               |	ВалютныеНеденежныеСтатьи_ДляОрганизации.СуммаРегл КАК СуммаРегл
	               |ПОМЕСТИТЬ ВалютныеНеденежныеСтатьи_ПоПриоритетам
	               |ИЗ
	               |	РегистрСведений.бит_ВалютныеНеденежныеСтатьи.СрезПоследних(
	               |			&ДатаПереоценки,
	               |			Организация = &Организация
	               |				И Счет В
	               |					(ВЫБРАТЬ
	               |						ПланСчетов.Ссылка
	               |					ИЗ
	               |						ПланСчетов.бит_Дополнительный_2 КАК ПланСчетов)) КАК ВалютныеНеденежныеСтатьи_ДляОрганизации
	               |ГДЕ
	               |	ВалютныеНеденежныеСтатьи_ДляОрганизации.НеПодлежитПереоценке = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	1,
	               |	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.Счет,
	               |	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.СуммаУпр,
	               |	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.СуммаСценарий,
	               |	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.СуммаМУ,
	               |	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.СуммаРегл
	               |ИЗ
	               |	РегистрСведений.бит_ВалютныеНеденежныеСтатьи.СрезПоследних(
	               |			&ДатаПереоценки,
	               |			Организация = &ПустаяОрганизация
	               |				И Счет В
	               |					(ВЫБРАТЬ
	               |						ПланСчетов.Ссылка
	               |					ИЗ
	               |						ПланСчетов.бит_Дополнительный_2 КАК ПланСчетов)) КАК ВалютныеНеденежныеСтатьи_ПустаяОрганизация
	               |ГДЕ
	               |	ВалютныеНеденежныеСтатьи_ПустаяОрганизация.НеПодлежитПереоценке = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВалютныеНеденежныеСтатьи_ПоПриоритетам.Приоритет КАК Приоритет,
	               |	ВалютныеНеденежныеСтатьи_ПоПриоритетам.Счет,
	               |	ВЫБОР
	               |		КОГДА &ПереоценкаСуммаУпр
	               |				И ВалютныеНеденежныеСтатьи_ПоПриоритетам.СуммаУпр
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПереоценкаСуммаУпр,
	               |	ВЫБОР
	               |		КОГДА &ПереоценкаСуммаСценарий
	               |				И ВалютныеНеденежныеСтатьи_ПоПриоритетам.СуммаСценарий
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПереоценкаСуммаСценарий,
	               |	ВЫБОР
	               |		КОГДА &ПереоценкаСуммаМУ
	               |				И ВалютныеНеденежныеСтатьи_ПоПриоритетам.СуммаМУ
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПереоценкаСуммаМУ,
	               |	ВЫБОР
	               |		КОГДА &ПереоценкаСуммаРегл
	               |				И ВалютныеНеденежныеСтатьи_ПоПриоритетам.СуммаРегл
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПереоценкаСуммаРегл
	               |ИЗ
	               |	ВалютныеНеденежныеСтатьи_ПоПриоритетам КАК ВалютныеНеденежныеСтатьи_ПоПриоритетам";
	КонецЕсли;
	///БИТ Тртилек
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если РезультатЗапроса.Пустой() Тогда
		// Нет счетов для переоценки.
		ТаблицаСчетаРесурсы = Новый ТаблицаЗначений;
	Иначе
		ТаблицаСчетаРесурсы = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаСчетаРесурсы;
	
КонецФункции // ПолучитьТаблицуСчетовСРесурсамиДляПереоценки()

// Функция получает результат запроса остатков по счетам для переоценки.
// 
// Параметры:
//	ПараметрыПолученияОстатков - Структура.
//		Обязательные ключи:
//  		ДатаПереоценки 		 - Дата.
//  		Организация - СправочникСсылка.Организации
//  		Сценарий - СправочникСсылка.СценарииПланирования.
//  		ИмяРегБухгалтерии	 - Строка.
//  		ТаблицаСчетаРесурсы	 - ТаблицаЗначений.
//  		КоличествоСубконто	 - Число.
//  		ЕстьОрганизацияБюдж - Булево.
// 
// Возвращаемое значение:
//  РезультатЗапроса - РезультатЗапроса.
// 
Функция ПолучитьРезультатЗапросаОстатковПоСчетамДляПереоценки(ПараметрыПолученияОстатков)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаСчетаРесурсы.Счет,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаСценарий,
	|	&ТаблицаСчетаРесурсыПереоценкаСуммаМУ КАК ПереоценкаСуммаМУ,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаУпр,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаРегл
	|ПОМЕСТИТЬ ТаблицаСчетаРесурсы
	|ИЗ
	|	&ТаблицаСчетаРесурсы КАК ТаблицаСчетаРесурсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстДопПоля,
	|	&ТекстСубконто,
	|	&ТекстДопРесурсы,
	|	ТаблицаОстатков.Организация,
	|	ТаблицаОстатков.Счет,
	|	ТаблицаОстатков.Валюта,
	|	СУММА(ЕСТЬNULL(ТаблицаОстатков.ВалютнаяСуммаОстаток, 0)) КАК ВалютнаяСумма,
	|	СУММА(ЕСТЬNULL(ТаблицаОстатков.СуммаРеглОстаток, 0)) КАК СуммаРегл,
	|	СУММА(ЕСТЬNULL(ТаблицаОстатков.СуммаУпрОстаток, 0)) КАК СуммаУпр,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаСценарий,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаМУ,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаУпр,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаРегл
	|ИЗ
	|	// Регистр бухгалтреии заменяется ниже в зависимости от обрабатываемого
	|	РегистрБухгалтерии.бит_Бюджетирование.Остатки(
	|			&ГраницаПереоценки,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ТаблицаСчетаРесурсы.Счет
	|				ИЗ
	|					ТаблицаСчетаРесурсы КАК ТаблицаСчетаРесурсы),
	|			,
	|			&ТекстУсловие) КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаРесурсы КАК ТаблицаСчетаРесурсы
	|		ПО ТаблицаОстатков.Счет = ТаблицаСчетаРесурсы.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	&ТекстДопПоля,
	|	&ТекстСубконто,
	|	ТаблицаОстатков.Организация,
	|	ТаблицаОстатков.Счет,
	|	ТаблицаОстатков.Валюта,	
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаСценарий,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаМУ,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаУпр,
	|	ТаблицаСчетаРесурсы.ПереоценкаСуммаРегл";
	
	ИмяРегБухгалтерии = ПараметрыПолученияОстатков.ИмяРегБухгалтерии;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "бит_Бюджетирование", ПараметрыПолученияОстатков.ИмяРегБухгалтерии);
	
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаСчетаРесурсыПереоценкаСуммаМУ",
						"ТаблицаСчетаРесурсы.ПереоценкаСуммаМУ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаСчетаРесурсыПереоценкаСуммаМУ",
						"ЛОЖЬ");
	КонецЕсли;
	
	ТекстДопПоля = "";
	Если ИмяРегБухгалтерии = "бит_Бюджетирование" Тогда
		ТекстДопПоля 	= "ТаблицаОстатков.ЦФО,";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстДопПоля,", ТекстДопПоля);
	
	ТекстСубконто = "";
	Для НомерСубконтно = 1 По ПараметрыПолученияОстатков.КоличествоСубконто Цикл
		Если НомерСубконтно > 1 Тогда
			ТекстСубконто = ТекстСубконто + "
			|	";
		КонецЕсли;
		
		ТекстСубконто = ТекстСубконто + "ТаблицаОстатков.Субконто" + НомерСубконтно + ",";
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстСубконто,", ТекстСубконто);
	
	ТекстДопРесурсы = "";
	Если ИмяРегБухгалтерии = "бит_Бюджетирование" Тогда
		ТекстДопРесурсы = "СУММА(ЕСТЬNULL(ТаблицаОстатков.СуммаСценарийОстаток, 0)) КАК СуммаСценарий,";
	//БИТ Тртилек 01.02.2012		
	//ИначеЕсли бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(ИмяРегБухгалтерии) Тогда
	ИначеЕсли ИмяРегБухгалтерии = "бит_Дополнительный_2" ИЛИ ИмяРегБухгалтерии = "бит_Дополнительный_3" Тогда
	//БИТ Тртилек 01.02.2012		
		ТекстДопРесурсы = "СУММА(ЕСТЬNULL(ТаблицаОстатков.СуммаМУОстаток, 0)) КАК СуммаМУ,";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстДопРесурсы,", ТекстДопРесурсы);
	
	ТекстУсловие = "";
	Если НЕ ПараметрыПолученияОстатков.ПоВсемОрганизациям
		И (ИмяРегБухгалтерии <> "бит_Бюджетирование"
			ИЛИ ПараметрыПолученияОстатков.ЕстьОрганизацияБюдж) Тогда
		ДобавитьУсловиеЗапроса(ТекстУсловие, "Организация");
	КонецЕсли;
	Если ИмяРегБухгалтерии = "бит_Бюджетирование" Тогда
		ДобавитьУсловиеЗапроса(ТекстУсловие, "Сценарий");
		Если НЕ ПараметрыПолученияОстатков.ПоВсемЦФО Тогда
			ДобавитьУсловиеЗапроса(ТекстУсловие, "ЦФО");
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловие", ТекстУсловие);
	
	
	Запрос = Новый Запрос;
	ДатаПереоценки = ПараметрыПолученияОстатков.ДатаПереоценки;
	Запрос.УстановитьПараметр("ГраницаПереоценки"   , Новый Граница(ДатаПереоценки, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", ПараметрыПолученияОстатков.Организация);
	Запрос.УстановитьПараметр("ЦФО", ПараметрыПолученияОстатков.ЦФО);
	Запрос.УстановитьПараметр("Сценарий", ПараметрыПолученияОстатков.Сценарий);	
	Запрос.УстановитьПараметр("ТаблицаСчетаРесурсы" , ПараметрыПолученияОстатков.ТаблицаСчетаРесурсы);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ДобавитьУсловиеЗапроса(ТекстУсловие, ПолеОтбора, ПараметрОтбора = Неопределено)
	
	Если ПараметрОтбора = Неопределено Тогда
		ПараметрОтбора = ПолеОтбора;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстУсловие) Тогда
		ТекстУсловие = ТекстУсловие + "
						|	И ";
	КонецЕсли;
	
	ТекстУсловие = ТекстУсловие + ПолеОтбора + " = &" + ПараметрОтбора;
	
КонецПроцедуры

// Процедура добавляет колонки результата в таблицу переоценки.
// 
// Параметры:
//  ТаблицаПереоценки 		   - ТаблицаЗначений. Возвращаемый.
//  ИмяРегБухгалтерии 		   - Строка.
//  ИмяПланаСчетов 			   - Строка.
//  ИмяПланаВидовХарактеристик - Строка.
//  КоличествоСубконто 		   - Число.
// 
Процедура ДобавитьКолонкиРезультатаВТаблицуПереоценки(ТаблицаПереоценки
													 ,ИмяРегБухгалтерии
													 ,ИмяПланаСчетов
													 ,ИмяПланаВидовХарактеристик
													 ,КоличествоСубконто)
	
	// Получим массив типов субконто.
	МассивТипов 	= Новый Массив;
	ВыборкаСубконто = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристик].Выбрать();
	
	Пока ВыборкаСубконто.Следующий() Цикл
		
		ТекТипыСубконто = ВыборкаСубконто.ТипЗначения.Типы();
		
		Для Каждого ТекТип Из ТекТипыСубконто Цикл
			МассивТипов.Добавить(ТекТип);
		КонецЦикла; 
		
	КонецЦикла;
	
	ОписаниеСубконто = Новый ОписаниеТипов(МассивТипов);
	ОписаниеЧисло	 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	// Добавим колонки результата в таблицу переоценки.
	Если ИмяРегБухгалтерии = "бит_Бюджетирование" Тогда
		
		ИмяСправочникаЦФО = бит_ОбщегоНазначения.ПолучитьИмяСправочникаЦФО();
		ТаблицаПереоценки.Колонки.Добавить("ЦФО", Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаЦФО));
		
	КонецЕсли;
	
	ТаблицаПереоценки.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка." + ИмяПланаСчетов));
	
	// Добавляем колонки для субконто.
	Для Ном = 1 По КоличествоСубконто Цикл
		ТаблицаПереоценки.Колонки.Добавить("Субконто" + Ном, ОписаниеСубконто);
	КонецЦикла;
	
	ТаблицаПереоценки.Колонки.Добавить("Организация"  , Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПереоценки.Колонки.Добавить("Валюта"		  , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПереоценки.Колонки.Добавить("ВалютнаяСумма", ОписаниеЧисло);
	ТаблицаПереоценки.Колонки.Добавить("СуммаРегл"	  , ОписаниеЧисло);
	ТаблицаПереоценки.Колонки.Добавить("СуммаУпр"	  , ОписаниеЧисло);
	
	Если ИмяРегБухгалтерии = "бит_Бюджетирование" Тогда
		
		ТаблицаПереоценки.Колонки.Добавить("СуммаСценарий", ОписаниеЧисло);
		
	// Изменение кода. Начало. 04.06.2013{{
	// ИначеЕсли ИмяРегБухгалтерии = "бит_Дополнительный_2" Тогда
	//БИТ Тртилек 01.02.2012
	//ИначеЕсли бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(ИмяРегБухгалтерии) Тогда
	ИначеЕсли ИмяРегБухгалтерии = "бит_Дополнительный_2" ИЛИ ИмяРегБухгалтерии = "бит_Дополнительный_3" Тогда
	///БИТ Тртилек
	// Изменение кода. Конец. 04.06.2013}}            
	
		ТаблицаПереоценки.Колонки.Добавить("СуммаМУ", ОписаниеЧисло);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКолонкиРезультатаВТаблицуПереоценки()

#КонецОбласти

#Если Клиент Тогда

// Процедура открывает список регистра сведений "Валютные неденежные статьи"
// с установленным отбором по регистру.
// 
// Параметры:
//  ИмяРегистра - Строка.
// 
Процедура ОткрытьСписокВалютныхНеденежныхСтатей(ИмяРегистра)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяРегистра", ИмяРегистра);
	
	ОткрытьФорму("РегистрСведений.бит_ВалютныеНеденежныеСтатьи.ФормаСписка"
				,ПараметрыФормы
				,
				,"ОткрытиеФормыДля" + ИмяРегистра);
	
КонецПроцедуры // ОткрытьСписокВалютныхНеденежныхСтатей()

// Процедура открывает список документов "Переоценка валютных денежных статей"
// с установленным отбором по регистру.
// 
// Параметры:
//  ИмяРегистра - Строка.
// 
Процедура ОткрытьСписокДокументовПереоценкиВалютныхДенежныхСтатей(ИмяРегистра)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяРегистра", ИмяРегистра);
	
	ОткрытьФорму("Документ.бит_ПереоценкаВалютныхДенежныхСтатей.ФормаСписка"
				,ПараметрыФормы
				,
				,"ОткрытиеФормыДля" + ИмяРегистра);
	
КонецПроцедуры // ОткрытьСписокДокументовПереоценкиВалютныхДенежныхСтатей()

#КонецЕсли

Функция РегистраторУстановленПравильно(Источник, Приемник, Регистратор)

	Отказ = Ложь;
	Если НЕ Регистратор.Движения.Содержит(Приемник) Тогда
	
		ИсточникПредставление 	 = Источник.Синоним;
		ПриемникПредставление 	 = Приемник.Синоним;
		РегистраторПредставление = Регистратор.Синоним;
		
		ТекстСообщения = НСтр("ru='Ошибка переноса проводок из регистра ""%1"" в регистр ""%2"". Документ ""%3"" не является регистратором регистра накопления ""%2""'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИсточникПредставление, ПриемникПредставление, РегистраторПредставление); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);

	КонецЕсли; 

	Возврат НЕ Отказ;
	
КонецФункции

#КонецОбласти