//ОК(СофтЛаб) Вдовиченко Г.В. 20190901 (#3436)

#Область ПрограммныйИнтерфейс

//логика работы взята из формы документа СообщениеОбменСБанками
//реализован только блок для программы банка АсинхронныйОбмен.

Процедура ОбновитьСостояние(Документы) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(Документы);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ок_ОбменСБанкамиВызовСервера.ОставитьТолькоНевыгруженныеВБанкДокументы(МассивСсылок);
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//МассивСертификатов = ок_ОбменСБанкамиВызовСервера.ПолучитьДоступныеСертификаты();
	
	ИсходящиеПараметры = Новый Структура("МассивСсылок", МассивСсылок);
	
	//Если МассивСертификатов.Количество() > 0 Тогда
	//	ок_ОбменСКонтрагентамиКлиент.ВыполнитьЗапросСертификатаДляПодписания(ЭтотОбъект, "ОбновитьСостояниеЗавершение", ИсходящиеПараметры, МассивСертификатов, 
	//				"");
	//	
	//Иначе	
		
		ОбновитьСостояниеЗавершение(Неопределено, ИсходящиеПараметры);
		
	//КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьСостояниеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Сертификат = Неопределено;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
		Если Результат.Свойство("ВыбранныйСертификат") 
			И ТипЗнч(Результат.ВыбранныйСертификат) = Тип("Структура")
			И Результат.ВыбранныйСертификат.Свойство("Ссылка") Тогда
			
			Сертификат = Результат.ВыбранныйСертификат.Ссылка;
			
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда //вызов из продолжения
		
		Сертификат = Результат;
		
	КонецЕсли;	
	
	Данные = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбменаПоВладельцам(ДополнительныеПараметры.МассивСсылок);
	
	//ИнициироватьСчетчикОповещений("ок_ОбменСБанками.ЗапросСостояния");
	//
	//Для каждого Элемент из Данные Цикл
	//	
	//	Сообщение = Данные.Получить(Элемент.Ключ);
	//	
	//	Если Не ЗначениеЗаполнено(Сообщение) Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	
	//	ЗапроситьСостояниеЭД(Сообщение, Сертификат);
	//	
	//КонецЦикла;	
	
	ОбработатьДанныеСообщенийОбмена(Неопределено, Новый Структура("ок_СообщенияОбмена, ок_Сертификат", Данные, Сертификат)); 
			
КонецПроцедуры	

Процедура ОбработатьДанныеСообщенийОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено 
		ИЛИ Не ДополнительныеПараметры.Свойство("ок_СообщенияОбмена")
		ИЛИ ДополнительныеПараметры.ок_СообщенияОбмена.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Сообщение = Неопределено;
	
	Для каждого Элемент из ДополнительныеПараметры.ок_СообщенияОбмена Цикл
		
		Сообщение = ДополнительныеПараметры.ок_СообщенияОбмена.Получить(Элемент.Ключ);
		Прервать;
		
	КонецЦикла;	

	Если Сообщение <> Неопределено Тогда
		ДополнительныеПараметры.ок_СообщенияОбмена.Удалить(Элемент.Ключ);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Сообщение) Тогда
		
		ЗапроситьСостояниеЭД(Сообщение, ДополнительныеПараметры);
		
	Иначе
		
		ОбработатьДанныеСообщенийОбмена(Неопределено, ДополнительныеПараметры); 
		
	КонецЕсли;	
	
КонецПроцедуры	

//заимствованный блок 

//+
//Процедура ЗапроситьСостояниеЭД(Команда)
Процедура ЗапроситьСостояниеЭД(Сообщение, ПараметрыОбработки) Экспорт
//+	
	
	//Перем ДанныеАвторизации;
	
	ВидЭДЗапросОСостоянии = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД");
	
	ТребуетсяПодпись = Ложь;
	
	//+
	//ЕстьПоддержкаВидаЭД = ЕстьПоддержкаВидаЭД(НастройкаОбмена, ВидЭДЗапросОСостоянии, ТребуетсяПодпись);
	ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	НастройкаОбмена = Неопределено;
	ЕстьПоддержкаВидаЭД = ок_ОбменСБанкамиВызовСервера.ЕстьПоддержкаВидаЭД(Сообщение, ВидЭДЗапросОСостоянии, ТребуетсяПодпись, НастройкаОбмена);
	//+
	
	Если ПрограммаБанка <> ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн")
		И НЕ ЕстьПоддержкаВидаЭД Тогда
		//ТекстСообщения = НСтр("ru = 'Банк не поддерживает данный функционал'");
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяПодпись Тогда
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
			
			//+
			//Оповещение = Новый ОписаниеОповещения("СформироватьЗапросСостоянияЭДПослеПолученияОтпечатков", ЭтотОбъект);
			ПараметрыОповещения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОбработки);
			ПараметрыОповещения.Вставить("Ссылка", Сообщение);
			ПараметрыОповещения.Вставить("НастройкаОбмена", НастройкаОбмена);
			//ИзменитьСчетчикОповещений("ок_ОбменСБанками.ЗапросСостояния", 1);
			Оповещение = Новый ОписаниеОповещения("СформироватьЗапросСостоянияЭДПослеПолученияОтпечатков", ЭтотОбъект, ПараметрыОповещения);
			//+
			
			//++
			//ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
			//++
		//ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		//	ЗапросСостоянияЭД = Неопределено;
		//	МассивСертификатов = Неопределено;
		//	СформироватьЗапросСостоянияЭД(
		//		Объект.НастройкаОбмена, Объект.Ссылка, Истина, ЗапросСостоянияЭД, Неопределено, МассивСертификатов);
		//	Если Не ЗначениеЗаполнено(ЗапросСостоянияЭД) Тогда
		//		Возврат;
		//	КонецЕсли;
		//	СоответствиеСертификатов = Новый Соответствие;
		//	Для Каждого СертификатСсылка Из МассивСертификатов Цикл
		//		СоответствиеСертификатов.Вставить(СертификатСсылка, Новый Структура("ПарольПолучен", Ложь));
		//	КонецЦикла;
		//	ДополнительныеПараметры = Новый Структура;
		//	ДополнительныеПараметры.Вставить("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
		//	
		//	Если ОбменСБанкамиСлужебныйКлиент.ЕстьСертификатССохраненнымПаролем(СоответствиеСертификатов) Тогда
		//		Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
		//			ДанныеАутентификации = Новый Структура;
		//			ДанныеАутентификации.Вставить("ВыбранныйСертификат", КлючЗначение.Ключ);
		//			ДанныеАутентификации.Вставить("ПарольСертификата", КлючЗначение.Значение.ПарольСертификата);
		//			ПодписатьЗапросСостоянияПослеВводаПароляЧерезВК(ДанныеАутентификации, ДополнительныеПараметры);
		//		КонецЦикла;
		//	Иначе
		//		Оповещение = Новый ОписаниеОповещения(
		//			"ПодписатьЗапросСостоянияПослеВводаПароляЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		//		ВидОперации = НСтр("ru = 'Подписание электронного документа'");
		//		ОбменСБанкамиСлужебныйКлиент.ПолучитьПарольКСертификату(
		//			Оповещение, СоответствиеСертификатов, ВидОперации, ЗапросСостоянияЭД);
		//	КонецЕсли;
		КонецЕсли;
	//Иначе
	//	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
	//		Если ИспользуетсяКриптография(Объект.НастройкаОбмена) Тогда
	//			Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросСостоянияПослеАутентификацииНаСервереСбербанк", ЭтотОбъект);
	//			ОбменСБанкамиСлужебныйКлиент.УстановитьСоединениеИАутентифицироватьсяНаСервереСбербанк(Оповещение, Объект.НастройкаОбмена);
	//		Иначе
	//			Результат = ЗапускЗаданияОтправкиЗапросаСтатусаПлатежаСбербанк(Объект.НастройкаОбмена, Объект.Ссылка);
	//			ДополнительныеПараметры = Новый Структура("АутентификацияПроизводилась", Ложь);
	//			Если Результат.Статус = "Выполняется" Тогда
	//				ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	//				ПараметрыОжидания.ВыводитьСообщения = Истина;
	//				Оповещение = Новый ОписаниеОповещения(
	//					"ПослеОтправкиЗапросаСтатусаПлатежаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	//				ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	//			Иначе
	//				ПослеОтправкиЗапросаСтатусаПлатежаСбербанк(Результат, ДополнительныеПараметры)
	//			КонецЕсли;
	//		КонецЕсли;
	//	Иначе
	//		ЗапросСостоянияЭД = Неопределено;
	//		СформироватьЗапросСостоянияЭД(Объект.НастройкаОбмена, Объект.Ссылка, Ложь, ЗапросСостоянияЭД);
	//		Если ЗначениеЗаполнено(ЗапросСостоянияЭД) Тогда
	//			Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
	//				ОтправитьЗапросОСостоянииЭДВБанк(ЗапросСостоянияЭД);
	//			Иначе // обмен через ВК
	//				ДополнительныеПараметры = Новый Структура;
	//				ДополнительныеПараметры.Вставить("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
	//				ОтправитьЗапросСостоянияВБанкПослеПодписанияЧерезВК(Истина, ДополнительныеПараметры);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗапросСостоянияЭДПослеПолученияОтпечатков(ОтпечаткиСертификатов, ПараметрыОбработки) Экспорт
	
	//+
	//ИзменитьСчетчикОповещений("ок_ОбменСБанками.ЗапросСостояния", -1);
	//+
	
	МассивОтпечатковСертификатов = Новый Массив;
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	//++
	//Иначе
	ИначеЕсли Не ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере() Тогда
	//++
		Возврат;
	КонецЕсли;

	ТаблицаСертификатов = Неопределено;
	ЗапросСостоянияЭД = Неопределено;
	МассивСертификатов = Неопределено;
	
	//+
	//СформироватьЗапросСостоянияЭД(
	//	Объект.НастройкаОбмена, Объект.Ссылка, Истина, ЗапросСостоянияЭД, МассивОтпечатковСертификатов, МассивСертификатов);
	МассивДоступныхСертификатов = Неопределено;
	ПредставлениеИПрисоединенныйФайл = Неопределено;
	ок_ОбменСБанкамиВызовСервера.СформироватьЗапросСостоянияЭД(
		ПараметрыОбработки.НастройкаОбмена, ПараметрыОбработки.Ссылка, Истина, ЗапросСостоянияЭД, МассивОтпечатковСертификатов, 
			МассивДоступныхСертификатов, ИмяКомпьютера(), ПредставлениеИПрисоединенныйФайл);
		
	Если МассивДоступныхСертификатов <> Неопределено 
		И ПараметрыОбработки.ок_Сертификат <> Неопределено 
		И МассивДоступныхСертификатов.Найти(ПараметрыОбработки.ок_Сертификат) <> Неопределено Тогда
		МассивСертификатов = Новый Массив;
		
		МассивСертификатов.Добавить(ПараметрыОбработки.ок_Сертификат);
		
	Иначе
		
		МассивСертификатов = МассивДоступныхСертификатов;
		
	КонецЕсли;	
	//+
	
	Если ЗапросСостоянияЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//++
	//Операция = НСтр("ru = 'Подписание электронного документа'");
	//ОписаниеДанных = Новый Структура;
	//ОписаниеДанных.Вставить("Операция", Операция);
	//ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
	//ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	//ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	//НаборДанных = Новый Массив;
	//Данные = Новый Структура;
	//ПараметрыДляПолученияДД = Новый Структура("СообщениеОбмена, ОписаниеДанных", ЗапросСостоянияЭД, ОписаниеДанных);
	//СсылкаНаДД = Новый ОписаниеОповещения(
	//	"ПолучитьДвоичныеДанныеДляСообщенияОбмена", ОбменСБанкамиСлужебныйКлиент, ПараметрыДляПолученияДД);
	//Данные.Вставить("Данные", СсылкаНаДД);
	////+
	////ПредставлениеИПрисоединенныйФайл = ПредставлениеИПрисоединенныйФайл(ЗапросСостоянияЭД);
	////+
	//
	//Данные.Вставить("Объект", ПредставлениеИПрисоединенныйФайл.ПрисоединенныйФайл);
	//Представление = ПредставлениеИПрисоединенныйФайл.Представление;
	//ОбработчикОткрытияЭД = Новый ОписаниеОповещения(
	//	"ПриОткрытииЭлектронногоДокумента", ОбменСБанкамиСлужебныйКлиент, ЗапросСостоянияЭД);
	//ДанныеДляПредставления = Новый Структура("Представление, Значение", Представление, ОбработчикОткрытияЭД);
	//Данные.Вставить("Представление", ДанныеДляПредставления);
	//НаборДанных.Добавить(Данные);
	//ОписаниеДанных.Вставить("НаборДанных", НаборДанных);
	//
	////+
	////ПараметрыОбработчика = Новый Структура("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
	//ПараметрыОбработчика = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОбработки);
	//ПараметрыОбработчика.Вставить("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
	////ПараметрыОбработчика.Вставить("Ссылка", Неопределено);
	////ПараметрыОбработчика.Вставить("НастройкаОбмена", Неопределено);
	////ПараметрыОбработчика.Вставить("ок_СообщенияОбмена", Неопределено);
	////ПараметрыОбработчика.Вставить("ок_Сертификат", Неопределено);
	////ЗаполнитьЗначенияСвойств(ПараметрыОбработчика, ПараметрыОбработки); 
	//
	////ДанныеДляПодписания = ПолучитьСвойствоСчетчикаОповещений("ок_ОбменСБанками.ЗапросСостояния", "ДанныеДляПодписания", Новый Массив);
	////ДанныеДляПодписания.Добавить(Новый Структура("ОписаниеДанных, ПараметрыОбработчика", ОписаниеДанных, ПараметрыОбработчика));
	////ИзменитьСвойствоСчетчикаОповещений("ок_ОбменСБанками.ЗапросСостояния", "ДанныеДляПодписания", ДанныеДляПодписания);
	////Если ЭтоПоследнееОповещение("ок_ОбменСБанками.ЗапросСостояния") Тогда
	////	//запросить сертификты
	////КонецЕсли;	
	////+
	//
	//ОписаниеОповещения = Новый ОписаниеОповещения(
	//	"ПроверитьПодписиЗапросаСостоянияЭДПослеПодписания", ЭтотОбъект, ПараметрыОбработчика);
	//ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеОповещения);
	
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(ЗапросСостоянияЭД);
	//+
	//ПараметрыОбработчика = Новый Структура("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
	ПараметрыОбработчика = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОбработки);
	ПараметрыОбработчика.Вставить("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
	//+
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьЗапросСостоянияЭДПослеПодписания", ЭтотОбъект, ПараметрыОбработчика);
	ОбменСБанкамиСлужебныйКлиент.Подписать(ОписаниеОповещения, МассивСообщенийОбмена, МассивСертификатов);
	//++
	
КонецПроцедуры

//++
//Процедура ПроверитьПодписиЗапросаСостоянияЭДПослеПодписания(Результат, ПараметрыОбработки) Экспорт
//	
//	Если Результат.Успех Тогда
//		
//		//+
//		Если Результат.Свойство("ВыбранныйСертификат") 
//			И ТипЗнч(Результат.ВыбранныйСертификат) = Тип("Структура")
//			И Результат.ВыбранныйСертификат.Свойство("Ссылка") Тогда
//			ПараметрыОбработки.Вставить("ок_ВыбранныйСертификат", Результат.ВыбранныйСертификат.Ссылка);
//		КонецЕсли;	
//		//+
//		
//		ОписаниеОповещения = Новый ОписаниеОповещения(
//			"ОтправитьЗапросСостоянияЭДПослеПодписания", ЭтотОбъект, ПараметрыОбработки);
//		ОбменСБанкамиСлужебныйКлиент.ПроверитьПодписи(ОписаниеОповещения, ПараметрыОбработки.ЗапросСостоянияЭД);
//	КонецЕсли;
//	
//КонецПроцедуры
//++

Процедура ОтправитьЗапросСостоянияЭДПослеПодписания(Результат, ПараметрыОбработки) Экспорт

	//++
	//Если НЕ Результат Тогда
	Если НЕ Результат.Успех Тогда
	//++
		Возврат;
	КонецЕсли;
	
	//+
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ВыбранныйСертификат") 
		И ТипЗнч(Результат.ВыбранныйСертификат) = Тип("Структура")
		И Результат.ВыбранныйСертификат.Свойство("Ссылка") Тогда
		ПараметрыОбработки.Вставить("ок_ВыбранныйСертификат", Результат.ВыбранныйСертификат.Ссылка);
	КонецЕсли;	
	//+
	
	//+
	//ОтправитьЗапросОСостоянииЭДВБанк(ПараметрыОбработки.ЗапросСостоянияЭД);
	ОтправитьЗапросОСостоянииЭДВБанк(ПараметрыОбработки);
	//+

КонецПроцедуры

//+
//Процедура ОтправитьЗапросОСостоянииЭДВБанк(ЗапросСостоянияЭД)
//	
//	ПараметрыОбработки = Новый Структура;
//	ПараметрыОбработки.Вставить("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
Процедура ОтправитьЗапросОСостоянииЭДВБанк(ПараметрыОбработки)
//+
	//Если АутентификацияПоСертификату Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПолученияОтпечатковЗапроситьСостояниеЭД", ЭтотОбъект, ПараметрыОбработки);
		//++
		//ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина);
		ОбменСБанкамиСлужебныйКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
		//++
	//Иначе
	//	ДанныеАвторизации = Неопределено;
	//	Если ОбменСБанкамиСлужебныйКлиент.ПолученыДанныеАвторизации(Объект.НастройкаОбмена, ДанныеАвторизации) Тогда
	//		ОтправитьЗапросСтатусаЭДВБанк(ДанныеАвторизации, ПараметрыОбработки)
	//	Иначе
	//		Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросСтатусаЭДВБанк", ЭтотОбъект, ПараметрыОбработки);
	//		ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(Оповещение, Объект.НастройкаОбмена);
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ПослеПолученияОтпечатковЗапроситьСостояниеЭД(Отпечатки, ПараметрыОбработки) Экспорт
	
	МассивОтпечатковСертификатов = Новый Массив;
	
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	//++	
	ИначеЕсли Не ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере() Тогда
		Возврат;
	//++	
	КонецЕсли;
	
	Соответствие = ОбменСБанкамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
	//+
	//	МассивОтпечатковСертификатов, Объект.НастройкаОбмена);
		МассивОтпечатковСертификатов, ПараметрыОбработки.НастройкаОбмена);
	//+
	
	Сертификат = Неопределено;
	МассивСертификатов = Новый Массив;
	
	//+
	Если ПараметрыОбработки.Свойство("ок_ВыбранныйСертификат") Тогда
		МассивСертификатов.Добавить(ПараметрыОбработки.ок_ВыбранныйСертификат);
	Иначе	
	//+
	
	ПарольПолучен = Ложь;
	Для Каждого КлючЗначение Из Соответствие Цикл
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
		Если КлючЗначение.Значение.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен = Истина Тогда
			МассивСертификатов.Очистить();
			МассивСертификатов.Добавить(КлючЗначение.Ключ);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//+
	КонецЕсли;
	//+
	Если МассивСертификатов.Количество() Тогда
			
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
		ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
		
		//+
		//ПараметрыЗапросаМаркера = Новый Структура("НастройкаОбмена", Объект.НастройкаОбмена);
		ПараметрыЗапросаМаркера = Новый Структура("НастройкаОбмена", ПараметрыОбработки.НастройкаОбмена);
		//+
		
		ОбработчикПолученияМаркера = Новый ОписаниеОповещения(
			"ПолучитьЗашифрованныйИдентификаторСессии", ОбменСБанкамиСлужебныйКлиент, ПараметрыЗапросаМаркера);
		
		ОписаниеДанных.Вставить("Данные", ОбработчикПолученияМаркера);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеРасшифровкиМаркераБанкаОтправитьЗапросСостоянияЭД", ЭтотОбъект, ПараметрыОбработки);
					
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
			
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеРасшифровкиМаркераБанкаОтправитьЗапросСостоянияЭД(Результат, ПараметрыОбработки) Экспорт
	
	Если НЕ Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
		Результат.РасшифрованныеДанные);
		
	ПараметрыОбработки.Вставить("СообщениеОбмена", ПараметрыОбработки.ЗапросСостоянияЭД);
	//+
	//ПараметрыОбработки.Вставить("НастройкаОбмена", Объект.НастройкаОбмена);
	ПараметрыОбработки.Вставить("НастройкаОбмена", ПараметрыОбработки.НастройкаОбмена);
	//+
		
	ОтправитьЗапросСтатусаЭДВБанкПослеПолученияМаркера(ИдентификаторСессии, ПараметрыОбработки);
	
КонецПроцедуры

Процедура ОтправитьЗапросСтатусаЭДВБанкПослеПолученияМаркера(Маркер, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ИдентификаторСессии", Маркер);
	ДополнительныеПараметры.Вставить("ВидОперации", "ПолучениеСостоянияДокумента");

	//+
	//ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ДополнительныеПараметры);
	ПараметрыОповещения = Новый Структура("ок_СообщенияОбмена, ок_Сертификат");
	ЗаполнитьЗначенияСвойств(ПараметрыОповещения, ДополнительныеПараметры);
	Оповещение = Новый ОписаниеОповещения(
				"ОбработатьДанныеСообщенийОбмена", ЭтотОбъект, ПараметрыОповещения);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ДополнительныеПараметры, , , , , Оповещение);
	//+
	
КонецПроцедуры

//конец заимствованный блок 

Процедура ИзменитьСчетчикОповещений(ИмяРаздела, Количество, ИмяСчетчика = "КоличествоОповещений")
	
	Данные = ПараметрыПриложения.Получить(ИмяРаздела);
	Если Данные <> Неопределено Тогда
		Данные[ИмяСчетчика] = Данные[ИмяСчетчика] + Количество;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ИзменитьСвойствоСчетчикаОповещений(ИмяРаздела, ИмяСвойства, Значение)
	
	Данные = ПараметрыПриложения.Получить(ИмяРаздела);
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Данные.ДополнительныеСвойства.Вставить(ИмяСвойства, Значение);
	
КонецПроцедуры	

Функция ПолучитьСвойствоСчетчикаОповещений(ИмяРаздела, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено)
	
	Перем Значение;
	
	Данные = ПараметрыПриложения.Получить(ИмяРаздела);
	Если Данные = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если Не Данные.ДополнительныеСвойства.Свойство(ИмяСвойства, Значение) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Процедура ИнициироватьСчетчикОповещений(ИмяРаздела, ИмяСчетчика = "КоличествоОповещений")
	
	ПараметрыСчетчика = Новый Структура("ДополнительныеСвойства", Новый Структура);
	ПараметрыСчетчика.Вставить(ИмяСчетчика, 0);
	
	ПараметрыПриложения.Вставить(ИмяРаздела, ПараметрыСчетчика);
	
КонецПроцедуры	

Функция ЭтоПоследнееОповещение(ИмяРаздела, ИмяСчетчика = "КоличествоОповещений")
	
	Данные = ПараметрыПриложения.Получить(ИмяРаздела);
	Если Данные <> Неопределено Тогда
		Возврат Данные[ИмяСчетчика] = 0;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	
	
#КонецОбласти


