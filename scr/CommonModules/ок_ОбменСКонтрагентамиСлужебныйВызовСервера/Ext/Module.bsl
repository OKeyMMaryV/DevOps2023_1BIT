//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103

Функция РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО) Экспорт
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//Данные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Ссылка, ок_СпособОбменаЭД, ок_СпособОбменаОператораЭДО, ок_СпособАутентификацииОператораЭДО, Логин, Пароль, Организация, АдресСервера, ИдентификаторОрганизации");
	Данные = РегистрыСведений.УчетныеЗаписиЭДО.ПолучитьЗначенияРеквизитовУчетнойЗаписиЭДОПоИдентификатору(ПрофильНастроекЭДО, "Ссылка, ок_СпособОбменаЭД, ок_СпособОбменаОператораЭДО, ок_СпособАутентификацииОператораЭДО, Логин, Пароль, Организация, АдресСервера, ИдентификаторЭДО");
	Данные.Вставить("ИдентификаторОрганизации", Данные.ИдентификаторЭДО);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	Данные.Вставить("СпособОбменаЭД", Данные.ок_СпособОбменаЭД);
	//Если Данные.ок_СпособАутентификацииОператораЭДО = Перечисления.ок_СпособыАутентификацииОператораЭДО.ЛогинПароль Тогда
	//	Данные.Вставить("МаркерРасшифрованный", "#");
	//КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ЭтоДополнительныйСервисЭДО(ПрофильНастроекЭДО, СпособОбменаЭД = Неопределено) Экспорт
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-06-19 (#3381)
	//СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ПустаяСсылка();
	//Если Не ЗначениеЗаполнено(ПрофильНастроекЭДО) Тогда
	//	Возврат Ложь;
	//КонецЕсли;	
	//	
	//СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "ок_СпособОбменаЭД");
	//
	//Возврат ЗначениеЗаполнено(СпособОбменаЭД);
	Возврат ок_ОбменСКонтрагентамиВнутренний.ЭтоДополнительныйСервисЭДО(ПрофильНастроекЭДО, СпособОбменаЭД);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-19 (#3381)
	
КонецФункции

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-06-19 (#3381)
//Функция ЭтоДокументДополнительногоСервисаЭДО(Ссылка) Экспорт
	
	//Если Не ЗначениеЗаполнено(Ссылка) Тогда
	//	Возврат Ложь;
	//КонецЕсли;	
	//
	//ТипЗначения = ТипЗнч(Ссылка);
	//Если ТипЗначения = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") 
	//	ИЛИ ТипЗначения = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
	//		Возврат ЭтоДополнительныйСервисЭДО(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПрофильНастроекЭДО"));
	//КонецЕсли;
	//	
	//Возврат Ложь;
	
Функция ЭтоДокументДополнительногоСервисаЭДО(Ссылка, ЭлектронныйДокумент = Неопределено) Экспорт
		
	Возврат ок_ОбменСКонтрагентамиВнутренний.ЭтоДокументДополнительногоСервисаЭДО(Ссылка, ЭлектронныйДокумент);
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-19 (#3381)
	
КонецФункции

Функция ЭтоПараметрыДополнительногоСервисаЭДО(Параметры, ИмяСвойства = "ок_СпособОбменаЭД") Экспорт
	
	Значение = Неопределено;
	Если Не Параметры.Свойство(ИмяСвойства, Значение) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат ЗначениеЗаполнено(Значение);
	
КонецФункции

Функция ТестПодключения(ПрофильНастроекЭДО, Ответ = "") Экспорт
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.ТестПодключения(РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО), Ответ);
	
КонецФункции

Функция ПроверитьИдентификаторУчастникаОбмена(ПрофильНастроекЭДО, Параметры, Ответ = "") Экспорт
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.ПроверитьИдентификаторУчастникаОбмена(РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО), Параметры, Ответ);
	
КонецФункции

Функция ПолучитьПарольСертификата(Сертификат) Экспорт
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.ПолучитьПарольСертификата(Сертификат);
	
КонецФункции	

Функция ПолучитьТабличныйДокументФайлаЭД(ФайлЭД, УникальныйИдентификатор = Неопределено) Экспорт

	Возврат ок_ОбменСКонтрагентамиВнутренний.ПолучитьТабличныйДокументФайлаЭД(ФайлЭД, УникальныйИдентификатор);
	
КонецФункции		

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-22 (#3332)
Функция АдресДанныхПрисоединенныйФайл(ПрисоединенныйФайл, Идентификатор = Неопределено, Расширение = Неопределено) Экспорт
	
	Если Расширение <> Неопределено Тогда
		Расширение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "Расширение");
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл), Идентификатор);
		
КонецФункции
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-22 (#3332)

////////////////////////////////////////////////////////////////////////////////
// Процедуры входящего документооорота

Функция ДоступныеПользовательскиеПереходыСтатуса(ИсходныйСтатус) 

	ДоступныеПереходы  = Новый Массив;
	Если ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ПустаяСсылка") 
		Или ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование"));
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ЗавершенБезПодписания"));
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование"));
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"));
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен"));
	//исходящие
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Подписать") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Отправлен"));
	КонецЕсли;	
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-01 (#4181)
	ДоступныеПереходы.Добавить(Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ОтмененПоставщиком);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-01 (#4181)
	
	Возврат ДоступныеПереходы;
	
КонецФункции

Функция ПроверитьЭлектронныйДокументПередИзменениемСтатуса(ДанныеДокумента, НовыйСтатус, ТихийРежим = Ложь) Экспорт
	
	ШаблонОшибкиСтатусСовпадает   = НСтр("ru='Документу %Документ% уже присвоен статус ""%Статус%""'");
	ШаблонОшибкиПомеченНаУдаление = НСтр("ru='Документ %Документ% помечен на удаление. Невозможно изменить статус'");
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиНедоступенПереход = НСтр("ru='Документ %Документ% невозможно изменить статус ""%ИсходныйСтатус%"" на статус ""%Статус%"". Такое изменение статуса недоступно, возможно статус был изменен.'");
	
	// Универсальные проверки
	Если ДанныеДокумента.ПометкаУдаления Тогда
		Если Не ТихийРежим Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиПомеченНаУдаление, "%Документ%", ДанныеДокумента.Представление), ДанныеДокумента.Ссылка);
		КонецЕсли;	
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеДокумента.СтатусСовпадает Тогда
		
		Если Не ТихийРежим Тогда
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиСтатусСовпадает, "%Документ%", ДанныеДокумента.Представление);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ДанныеДокумента.ПредставлениеНовогоСтатуса);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеДокумента.Ссылка);
		КонецЕсли;	
		Возврат Ложь;
		
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3600)
	Если Не ЭтоБумажныйДокумент(ДанныеДокумента.Ссылка) Тогда
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3600)
	
	//так как статус может меняться не только пользователем (а к примеру регзаданиями), то добавим проверку на совпадение статуса
	ДоступныеСтатусы = ДоступныеПользовательскиеПереходыСтатуса(ДанныеДокумента.ИсходныйСтатус);
	Если ДоступныеСтатусы.Найти(НовыйСтатус) = Неопределено Тогда
		Если Не ТихийРежим Тогда
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиНедоступенПереход, "%Документ%", ДанныеДокумента.Представление);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ДанныеДокумента.ПредставлениеНовогоСтатуса);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИсходныйСтатус%", ДанныеДокумента.ПредставлениеИсходногоСтатуса);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеДокумента.Ссылка);
		КонецЕсли;	
		Возврат Ложь;
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3600)
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3600)
	
	// Захват объекта для редактирования
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ДанныеДокумента.Ссылка);
	Исключение
		Если Не ТихийРежим Тогда
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", ДанныеДокумента.Представление);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеДокумента.Ссылка);
		КонецЕсли;	
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьРезультатЗапросаДляПроверкиЭлектронногоДокументаПередИзменениемСтатуса(Документ, НовыйСтатус, ВидДокумента = "Входящий") Экспорт
	
	МассивДокументов = Документ;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Документ);
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Данные.Ссылка КАК Ссылка,
	|	Данные.ПометкаУдаления КАК ПометкаУдаления,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА Данные.ок_Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
	|	Данные.Организация КАК Организация,
	|	Данные.ок_ЦФО КАК ок_ЦФО,
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 
	|	Данные.Проведен КАК Проведен,
	|	Данные.ок_Статус КАК ИсходныйСтатус,
	|	ПРЕДСТАВЛЕНИЕ(Данные.ок_Статус) КАК ПредставлениеИсходногоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(Данные.Ссылка) КАК Представление
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК Данные
	|ГДЕ
	|	Данные.Ссылка В(&Документы)";
	
	Если ВидДокумента <> "Входящий" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭлектронныйДокументВходящий", "ЭлектронныйДокументИсходящий"); 
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Данные.ок_ЦФО КАК ок_ЦФО,", ""); 
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997)
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Статус", НовыйСтатус);
	Запрос.УстановитьПараметр("Документы", МассивДокументов);
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции	

Функция УстановитьСтатусВходящегоДокументооборота(Документ, Параметры, Комментарий = "") Экспорт
			
	НовыйСтатус = Параметры.Статус;
		
	// Получение шаблонов сообщений стандартных ошибок
	//ШаблонОшибкиСтатусСовпадает   = НСтр("ru='Документу %Документ% уже присвоен статус ""%Статус%""'");
	//ШаблонОшибкиПомеченНаУдаление = НСтр("ru='Документ %Документ% помечен на удаление. Невозможно изменить статус'");
	//ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиСогласовать 	  = НСтр("ru='Не удалось отправить на согласование %Документ%. %ОписаниеОшибки%'");
	//ШаблонОшибкиНедоступенПереход = НСтр("ru='Документ %Документ% невозможно изменить статус ""%ИсходныйСтатус%"" на статус ""%Статус%"". Такое изменение статуса недоступно, возможно статус был изменен.'");
	
	КоличествоОбработанных = 0;
		
	Результат = ПолучитьРезультатЗапросаДляПроверкиЭлектронногоДокументаПередИзменениемСтатуса(Документ, НовыйСтатус, "Входящий");
	
	//МассивДокументов = Документ;
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
	//	МассивДокументов = Новый Массив;
	//	МассивДокументов.Добавить(Документ);
	//КонецЕсли;	

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ЭлектронныйДокументВходящий.Ссылка КАК Ссылка,
	//|	ЭлектронныйДокументВходящий.ПометкаУдаления КАК ПометкаУдаления,
	//|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	//|	ВЫБОР
	//|		КОГДА ЭлектронныйДокументВходящий.ок_Статус = &Статус
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК СтатусСовпадает,
	//|	ЭлектронныйДокументВходящий.Проведен КАК Проведен,
	//|	ЭлектронныйДокументВходящий.ок_Статус КАК ИсходныйСтатус,
	//|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументВходящий.ок_Статус) КАК ПредставлениеИсходногоСтатуса,
	//|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументВходящий.Ссылка) КАК Представление
	//|ИЗ
	//|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	//|ГДЕ
	//|	ЭлектронныйДокументВходящий.Ссылка В (&Документы)";
	//
	//Запрос.УстановитьПараметр("Статус", НовыйСтатус);
	//Запрос.УстановитьПараметр("Документы", МассивДокументов);
	//УстановитьПривилегированныйРежим(Истина);
	//Результат = Запрос.Выполнить();
	//УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат КоличествоОбработанных;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-27 (#3997) 
		//Если Не ПроверитьЭлектронныйДокументПередИзменениемСтатуса(Выборка, НовыйСтатус, Ложь) Тогда
		Если НЕ НовыйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") 
			И Не ПроверитьЭлектронныйДокументПередИзменениемСтатуса(Выборка, НовыйСтатус, Ложь) Тогда
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-27 (#3997) 
			Продолжить;
		КонецЕсли;
		
		//// Универсальные проверки
		//Если Выборка.ПометкаУдаления Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиПомеченНаУдаление, "%Документ%", Выборка.Представление), Выборка.Ссылка);
		//	Продолжить;
		//КонецЕсли;
		//
		//Если Выборка.СтатусСовпадает Тогда
		//	
		//	ТекстОшибки = СтрЗаменить(ШаблонОшибкиСтатусСовпадает, "%Документ%", Выборка.Представление);
		//	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Выборка.ПредставлениеНовогоСтатуса);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		//	Продолжить;
		//	
		//КонецЕсли;
		//
		////так как статус может меняться не только пользователем (а к примеру регзаданиями), то добавим проверку на совпадение статуса
		//ДоступныеСтатусы = ДоступныеПользовательскиеПереходыСтатуса(Выборка.ИсходныйСтатус);
		//Если ДоступныеСтатусы.Найти(НовыйСтатус) = Неопределено Тогда
		//	ТекстОшибки = СтрЗаменить(ШаблонОшибкиНедоступенПереход, "%Документ%", Выборка.Представление);
		//	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Выборка.ПредставлениеНовогоСтатуса);
		//	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИсходныйСтатус%", Выборка.ПредставлениеИсходногоСтатуса);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		//	Продолжить;
		//КонецЕсли;
		//	
		//
		//// Захват объекта для редактирования
		//Попытка
		//	ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		//Исключение
		//	ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Выборка.Представление);
		//	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		//	Продолжить;
		//КонецПопытки;
		
		ВТранзакции = Ложь;
		СоздаватьДокументПоступления = Ложь;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-07 (#4376)
		ДокументПоступление = Неопределено;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-07 (#4376)
		// Получение объекта документа
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ок_Статус = НовыйСтатус;
		//
		Если Объект.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать Тогда
			Объект.ПричинаОтклонения = Комментарий;
						
			Если ПустаяСтрока(Объект.ПричинаОтклонения) Тогда
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
				//Если ЗначениеЗаполнено(Объект.НастройкаЭДО) И Объект.ДокументыОснования.Количество() = 0 Тогда
				//	СоздаватьДокументПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НастройкаЭДО, "ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования");
				//КонецЕсли;
				НаличиеФайлов = ок_ОбменСКонтрагентамиВнутренний.НаличиеУчетныхДокументовПоДаннымПрисоединенныхФайловВходящегоДокументаЭД(Объект.Ссылка);
				Если НаличиеФайлов.СчетФактура ИЛИ НаличиеФайлов.Поступление Тогда
					Если Объект.ДокументыОснования.Количество() = 0 Тогда
						СоздаватьДокументПоступления = Объект.ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования;
					КонецЕсли;	
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-07 (#4376)
				ИначеЕсли Объект.ок_СоздаватьУчетныйДокументКопированием Тогда
					ДокументПоступление = ок_ОбменСКонтрагентамиВнутренний.СоздатьПоступлениеКопированием(Объект.Ссылка);
					Если ДокументПоступление = Неопределено Тогда
						Продолжить;
					КонецЕсли;					
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-07 (#4376)	
				КонецЕсли;	
				Если СоздаватьДокументПоступления Тогда
					Если Объект.ок_ЗагружаемыеДокументы.Количество() = 0 Тогда
						СоздаватьДокументПоступления = Ложь;
						ТекстОшибки = СтрЗаменить(НСтр("ru='Не указан вид бухгалтерского документа в %Документ%'"), "%Документ%", Выборка.Представление);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
					КонецЕсли;	
				КонецЕсли;	
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)
				ВТранзакции = СоздаватьДокументПоступления;
			КонецЕсли;	
		ИначеЕсли Объект.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование Тогда
			СообщениеОбОшибке = "";
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
			//ОтправленоНаСогласование = ок_ОбменСКонтрагентамиВнутренний.ОтправитьНаСогласованиеВходящийЭлектронныйДокумент(Выборка.Ссылка, Комментарий, СообщениеОбОшибке);	
			Объект.ок_Комментатор = Пользователи.ТекущийПользователь();
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
			//ОтправленоНаСогласование = ок_ОбменСКонтрагентамиВнутренний.ОтправитьНаСогласованиеВходящийЭлектронныйДокумент(Выборка.Ссылка, Комментарий, СообщениеОбОшибке, Объект.ок_Комментатор);	
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Выборка.Организация);
			СтруктураПараметров.Вставить("ок_ЦФО",Выборка.ок_ЦФО);

			бит_Визирование.ОбновитьПереченьВиз(Выборка.Ссылка,ТекущаяДата(),СтруктураПараметров);
			ОтправленоНаСогласование = ок_ОбменСКонтрагентамиВнутренний.ОтправитьПисьмоПоВходящемуЭлектронномуДокументу(Выборка.Ссылка, ПредопределенноеЗначение("Справочник.бит_Визы.ок_Инициатор"), Комментарий, СообщениеОбОшибке, Объект.ок_Комментатор);	
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
			Если Не ОтправленоНаСогласование Тогда
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиСогласовать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", СообщениеОбОшибке);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				Продолжить;
			КонецЕсли;	
			Объект.ок_КомментарийДляСогласующего = Комментарий;
			// изменение ответсвенного, указывается тот, под которым отправляется на согласование
			Объект.Ответственный = Пользователи.ТекущийПользователь();
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-29 (#3997)
			бит_Визирование.УстановитьСтатусОбъекта(Объект.Ссылка, 
												Перечисления.бит_ВидыСтатусовОбъектов.Статус,
												Объект.ок_Статус,
												ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый"),
												Объект.Ответственный,
												ТекущаяДата());
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-29 (#3997) 
			
		ИначеЕсли Объект.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован Тогда
			Объект.ок_ПричинаОтклоненияСогласования = Комментарий;
		//ИначеЕсли Объект.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен Тогда
			//Если Не Параметры.Свойство("ДанныеДляПодписания") Тогда
			//	Продолжить;
			//ИначеЕсли Не ок_ОбменСКонтрагентамиВнутренний.УтвердитьОтклонить(Объект.Ссылка, Параметры.ДанныеДляПодписания, ?(ПустаяСтрока(Объект.ПричинаОтклонения), "Утвердить", "Отклонить"), Объект.ПричинаОтклонения) Тогда
			//	Продолжить;
			//КонецЕсли;	
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-02 (#4181)
		ИначеЕсли Объект.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ОтмененПоставщиком Тогда
			ВТранзакции = Истина;
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-02 (#4181)
		КонецЕсли;	
		
		// Запись документа
		Попытка
			Если ВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;	
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-07 (#4376)
			Если ЗначениеЗаполнено(ДокументПоступление) Тогда
				НоваяСтрока = Объект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = ДокументПоступление;
				НоваяСтрока.СпособОбработки = "Автоматически";
				
				ОбменСКонтрагентамиСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(ДокументПоступление, Объект.Ссылка);
			КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-07 (#4376)
			
			Объект.Записать(?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-15 (#3997)
			Если НЕ Выборка.СтатусСовпадает 
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-02 (#4181)
				//И Объект.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать") Тогда
				И (Объект.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать")
				Или Объект.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ОтмененПоставщиком) Тогда
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-02 (#4181)
					
				ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Объект.Ссылка,
									Перечисления.бит_ВидыСтатусовОбъектов.Статус, НовыйСтатус, Выборка.ИсходныйСтатус,
									Пользователи.ТекущийПользователь(), ТекущаяДата());
									
				Если Не ДействиеВыполнено Тогда					
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;						
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-15 (#3997)
			
			Если СоздаватьДокументПоступления Тогда
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
				//ок_ОбменСКонтрагентамиВнутренний.СоздатьДокументыУчетаЭлектронногоДокумента(Объект.Ссылка, , ВТранзакции)
				ок_ОбменСКонтрагентамиВнутренний.СоздатьДокументыУчетаЭлектронногоДокумента2019(Объект.Ссылка)
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)
			КонецЕсли;	
						
			Если ВТранзакции Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;	
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Выборка.Представление);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Если ВТранзакции Тогда
				ОтменитьТранзакцию();
			КонецЕсли;	
		КонецПопытки
		
	КонецЦикла; 
	
	Возврат КоличествоОбработанных;
	
КонецФункции 

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
//Функция ПолучитьДанныеВходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат = Неопределено) Экспорт
Функция ПолучитьДанныеВходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат = Неопределено, ДокументыКПодписанию = Неопределено) Экспорт
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849) 

	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
	//Возврат ок_ОбменСКонтрагентамиВнутренний.ПолучитьДанныеВходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат);
	Возврат ок_ОбменСКонтрагентамиВнутренний.ПолучитьДанныеВходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат, ДокументыКПодписанию);
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849)
	
	//Данные = Новый Соответствие;
	//Для каждого Документ из ВыделенныеСтроки Цикл
	//	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ПрофильНастроекЭДО,УникальныйИД,ПричинаОтклонения");
	//	Если не ЗначениеЗаполнено(Реквизиты.УникальныйИД) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ПараметрыЭДО = РеквизитыПрофиляНастроекЭДО(Реквизиты.ПрофильНастроекЭДО);
	//	Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
	//		ДанныеДляПодписания = ок_ОбменСКонтрагентамиВнутренний.сбисПолучитьДанныеДляПодписания(ПараметрыЭДО, Реквизиты.УникальныйИД, Сертификат, ?(ПустаяСтрока(Реквизиты.ПричинаОтклонения), "Утвердить", "Отклонить"), Реквизиты.ПричинаОтклонения);
	//		Если ДанныеДляПодписания = Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Данные.Вставить(Документ, ДанныеДляПодписания);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если Данные.Количество() = 0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//Возврат Данные;
	
КонецФункции

Функция УтвердитьОтклонитьВходящийДокумент(Документ, ДанныеДляПодписания, НеОповещатьПользователяОбОшибке = Ложь) Экспорт
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.УтвердитьОтклонитьВходящийДокумент(Документ, ДанныеДляПодписания, НеОповещатьПользователяОбОшибке);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры исходящего документооорота

Функция УстановитьСтатусИсходящегоДокументооборота(Документ, Параметры, Комментарий = "") Экспорт
			
	НовыйСтатус = Параметры.Статус;
	
	// Получение шаблонов сообщений стандартных ошибок
	//ШаблонОшибкиСтатусСовпадает   = НСтр("ru='Документу %Документ% уже присвоен статус ""%Статус%""'");
	//ШаблонОшибкиПомеченНаУдаление = НСтр("ru='Документ %Документ% помечен на удаление. Невозможно изменить статус'");
	//ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	//ШаблонОшибкиСогласовать 	  = НСтр("ru='Не удалось отправить на согласование %Документ%. %ОписаниеОшибки%'");
	
	КоличествоОбработанных = 0;
		
	Результат = ПолучитьРезультатЗапросаДляПроверкиЭлектронногоДокументаПередИзменениемСтатуса(Документ, НовыйСтатус, "Исходящий");
	
	//МассивДокументов = Документ;
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
	//	МассивДокументов = Новый Массив;
	//	МассивДокументов.Добавить(Документ);
	//КонецЕсли;	

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Данные.Ссылка КАК Ссылка,
	//|	Данные.ПометкаУдаления КАК ПометкаУдаления,
	//|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	//|	ВЫБОР
	//|		КОГДА Данные.ок_Статус = &Статус
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК СтатусСовпадает,
	//|	Данные.Проведен КАК Проведен,
	//|	ПРЕДСТАВЛЕНИЕ(Данные.Ссылка) КАК Представление
	//|ИЗ
	//|	Документ.ЭлектронныйДокументИсходящий КАК Данные
	//|ГДЕ
	//|	Данные.Ссылка В(&Документы)";
	//
	//Запрос.УстановитьПараметр("Статус", НовыйСтатус);
	//Запрос.УстановитьПараметр("Документы", МассивДокументов);
	//УстановитьПривилегированныйРежим(Истина);
	//Результат = Запрос.Выполнить();
	//УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	// Цикл обхода выборки
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ПроверитьЭлектронныйДокументПередИзменениемСтатуса(Выборка, НовыйСтатус, Ложь) Тогда
			Продолжить;
		КонецЕсли;
		
		//// Универсальные проверки
		//Если Выборка.ПометкаУдаления Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиПомеченНаУдаление, "%Документ%", Выборка.Представление), Выборка.Ссылка);
		//	Продолжить;
		//КонецЕсли;
		//
		//Если Выборка.СтатусСовпадает Тогда
		//	
		//	ТекстОшибки = СтрЗаменить(ШаблонОшибкиСтатусСовпадает, "%Документ%", Выборка.Представление);
		//	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Выборка.ПредставлениеНовогоСтатуса);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		//	Продолжить;
		//	
		//КонецЕсли;
		//
		//
		//// Захват объекта для редактирования
		//Попытка
		//	ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		//Исключение
		//	ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Выборка.Представление);
		//	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		//	Продолжить;
		//КонецПопытки;
		
		ВТранзакции = Ложь;
		// Получение объекта документа
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ок_Статус = НовыйСтатус;
		
		// Запись документа
		Попытка
			Если ВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;	
				
			Объект.Записать(?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
			Если ВТранзакции Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;	
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Выборка.Представление);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Если ВТранзакции Тогда
				ОтменитьТранзакцию();
			КонецЕсли;	
		КонецПопытки
		
	КонецЦикла; 
	
	Возврат КоличествоОбработанных;
	
КонецФункции 

Функция ПолучитьДанныеИсходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат = Неопределено) Экспорт
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИсходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат);
	
	//Данные = Новый Соответствие;
	//Для каждого Документ из ВыделенныеСтроки Цикл
	//	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ПрофильНастроекЭДО,УникальныйИД");
	//	
	//	ПараметрыЭДО = РеквизитыПрофиляНастроекЭДО(Реквизиты.ПрофильНастроекЭДО);
	//	ПараметрыЭДО.Вставить("Документ", Документ);
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//		|	Данные.ДокументОснование.Дата КАК Дата,
	//		|	Данные.ДокументОснование.Номер КАК Номер,
	//		|	Данные.ДокументОснование.СуммаДокумента КАК СуммаДокумента,
	//		|	Данные.Ссылка.Контрагент КАК Контрагент,
	//		|	Данные.Ссылка.Организация КАК Организация,
	//		|	Данные.Ссылка.НастройкаЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	//		|	Данные.Ссылка.НастройкаЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	//		|	Данные.Ссылка.Комментарий КАК Комментарий,
	//		|	Данные.Ссылка КАК Документ
	//		|ПОМЕСТИТЬ ВТ
	//		|ИЗ
	//		|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК Данные
	//		|ГДЕ
	//		|	Данные.Ссылка = &Документ
	//		|	И Данные.ДокументОснование <> НЕОПРЕДЕЛЕНО
	//		|
	//		|УПОРЯДОЧИТЬ ПО
	//		|	Данные.НомерСтроки
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	ЭДПрисоединенныеФайлы.Ссылка КАК Файл,
	//		|	ВТ.Дата КАК Дата,
	//		|	ВТ.Номер КАК Номер,
	//		|	ВТ.СуммаДокумента КАК СуммаДокумента,
	//		|	ВТ.Контрагент КАК Контрагент,
	//		|	ВТ.Организация КАК Организация,
	//		|	ВТ.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	//		|	ВТ.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	//		|	ВТ.Комментарий КАК Комментарий,
	//		|	ВТ.Документ КАК Документ,
	//		|	ЭДПрисоединенныеФайлы.НаименованиеФайла КАК ИмяФайла,
	//		|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение
	//		|ИЗ
	//		|	ВТ КАК ВТ
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	//		|		ПО ВТ.Документ = ЭДПрисоединенныеФайлы.ВладелецФайла
	//		|ГДЕ
	//		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипЭлементаВерсииЭД)";
	//	
	//	Запрос.УстановитьПараметр("Документ", Документ);
	//	
	//	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", ок_ОбменСКонтрагентамиВнутренний.ВыгружаемыеТипыЭлементовВерсииЭД());
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если РезультатЗапроса.Пустой() Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ДанныеЗапроса = РезультатЗапроса.Выгрузить();
	//	ДанныеФайлов = Новый Массив;
	//	Для каждого СтрокаДанных из ДанныеЗапроса Цикл
	//		ОписаниеФайла = Новый Структура;
	//		Для каждого Колонка из ДанныеЗапроса.Колонки Цикл
	//			ОписаниеФайла.Вставить(Колонка.Имя, Неопределено);
	//		КонецЦикла;	
	//	    ЗаполнитьЗначенияСвойств(ОписаниеФайла, СтрокаДанных);
	//		ДанныеФайлов.Добавить(ОписаниеФайла);
	//	КонецЦикла;	
	//	
	//	ПараметрыЭДО.Вставить("ДанныеФайлов", ДанныеФайлов);
	//	
	//	Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
	//		//Идентификатор = Строка(Документ.УникальныйИдентификатор());
	//		ДанныеДляПодписания = ок_ОбменСКонтрагентамиВнутренний.сбисПолучитьДанныеДляПодписания(ПараметрыЭДО, Реквизиты.УникальныйИД, Сертификат, "Отправить");
	//		Если ДанныеДляПодписания = Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Данные.Вставить(Документ, ДанныеДляПодписания);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если Данные.Количество() = 0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//Возврат Данные;
	
КонецФункции

Функция ОтправитьИсходящийДокумент(Документ, ДанныеДляПодписания, НеОповещатьПользователяОбОшибке = Ложь) Экспорт
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.ОтправитьИсходящийДокумент(Документ, ДанныеДляПодписания, НеОповещатьПользователяОбОшибке);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка служебных документов

Функция ПолучитьПрофилиДляОбработкиСлужебныхДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	ПрофилиНастроекЭДО.Ссылка КАК Ссылка
		//|ИЗ
		//|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		//|ГДЕ
		//|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления
		//|	И ПрофилиНастроекЭДО.ок_СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)";
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК Ссылка
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ок_СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)";
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
//Функция ПолучитьДанныеСлужебныхДокументовДляПодписания(Профиль, Сертификат = Неопределено, Продолжать = Ложь) Экспорт
//	
//	Возврат ок_ОбменСКонтрагентамиВнутренний.ПолучитьДанныеСлужебныхДокументовДляПодписания(Профиль, Сертификат, Продолжать);
//	
Функция ПолучитьДанныеСлужебныхДокументовДляПодписания(Профиль, Сертификат = Неопределено, Продолжать = Ложь, ДатаСеанса = '00010101') Экспорт
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.ПолучитьДанныеСлужебныхДокументовДляПодписания(Профиль, Сертификат, Продолжать, ДатаСеанса);
	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
	
КонецФункции

Функция УтвердитьСлужебныйДокумент(Документ, ДанныеДляПодписания) Экспорт
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.УтвердитьСлужебныйДокумент(Документ, ДанныеДляПодписания);
	
КонецФункции

Функция ПроверитьНаличиеНеобработанныхСлужебныхДокументов(Профиль, ПрекратитьЗапросы = Ложь, Количество = 0) Экспорт 
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.ПроверитьНаличиеНеобработанныхСлужебныхДокументов(РеквизитыПрофиляНастроекЭДО(Профиль), ПрекратитьЗапросы, Количество);

КонецФункции

Функция ПолучитьСертификатыПрофиля(Профиль) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	Данные.Сертификат КАК Сертификат
		//|ИЗ
		//|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Данные
		//|ГДЕ
		//|	Данные.Ссылка = &Профиль
		//|	И Данные.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)";
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СертификатыУчетныхЗаписейЭДО.Сертификат КАК Сертификат
		|ИЗ
		|	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|ГДЕ
		|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО = &Профиль
		|	И СертификатыУчетныхЗаписейЭДО.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)";
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	Запрос.УстановитьПараметр("Профиль", Профиль);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сертификат");
	
КонецФункции

Функция ПолучитьПрофильДокумента(Документ) Экспорт
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПрофильНастроекЭДО");
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ИдентификаторОрганизации");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// для клиентского "регзадания" подписания документов

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-22 (#4234)
//Функция ПолучитьДокументыНаПодписание() Экспорт
//Функция возвращает структуру документов к подписи
// Параметры:
// ПараметрыПодписанияДокументов - Параметры, Тип - Структура
Функция ПолучитьДокументыНаПодписание(ПараметрыПодписанияДокументов = Неопределено) Экспорт
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-22 (#4234)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//	"ВЫБРАТЬ
	//	|	""Входящий"" КАК ВидДокумента,
	//	|	Данные.Ссылка КАК Документ,
	//	|	Данные.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	//	|	Сертификаты.Сертификат КАК Сертификат,
	//	|	Сертификаты.НомерСтроки КАК СертификатНомерСтроки
	//	|ПОМЕСТИТЬ ВТ
	//	|ИЗ
	//	|	Документ.ЭлектронныйДокументВходящий КАК Данные
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
	//	|		ПО Данные.ПрофильНастроекЭДО = Сертификаты.Ссылка
	//	|ГДЕ
	//	|	НЕ Данные.ПометкаУдаления
	//	|	И Данные.ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать)
	//	|	И Сертификаты.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	""Исходящий"",
	//	|	Данные.Ссылка,
	//	|	Данные.ПрофильНастроекЭДО,
	//	|	Сертификаты.Сертификат,
	//	|	Сертификаты.НомерСтроки
	//	|ИЗ
	//	|	Документ.ЭлектронныйДокументИсходящий КАК Данные
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
	//	|		ПО Данные.ПрофильНастроекЭДО = Сертификаты.Ссылка
	//	|ГДЕ
	//	|	НЕ Данные.ПометкаУдаления
	//	|	И Данные.ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Подписать)
	//	|	И Сертификаты.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ.Документ КАК Документ,
	//	|	ВТ.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	//	|	МИНИМУМ(ВТ.СертификатНомерСтроки) КАК СертификатНомерСтроки
	//	|ПОМЕСТИТЬ ВТНомераСтрокСертификатов
	//	|ИЗ
	//	|	ВТ КАК ВТ
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ВТ.Документ,
	//	|	ВТ.ПрофильНастроекЭДО
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ.ВидДокумента КАК ВидДокумента,
	//	|	ВТ.Документ КАК Документ,
	//	|	ВТ.Сертификат КАК Сертификат
	//	|ПОМЕСТИТЬ ВТРезультат
	//	|ИЗ
	//	|	ВТ КАК ВТ
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрокСертификатов КАК ВТНомераСтрокСертификатов
	//	|		ПО ВТ.Документ = ВТНомераСтрокСертификатов.Документ
	//	|			И ВТ.ПрофильНастроекЭДО = ВТНомераСтрокСертификатов.ПрофильНастроекЭДО
	//	|			И ВТ.СертификатНомерСтроки = ВТНомераСтрокСертификатов.СертификатНомерСтроки
		"ВЫБРАТЬ
		|	""Входящий"" КАК ВидДокумента,
		|	Данные.Ссылка КАК Документ,
		|	Данные.ИдентификаторОрганизации КАК ПрофильНастроекЭДО
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-11 (#4234)
		//|	МАКСИМУМ(Сертификаты.Сертификат) КАК Сертификат
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-11 (#4234)
		|ПОМЕСТИТЬ ВТРезультат
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий КАК Данные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК Сертификаты
		|		ПО Данные.ИдентификаторОрганизации = Сертификаты.ИдентификаторЭДО
		|ГДЕ
		|	НЕ Данные.ПометкаУдаления
		|	И Данные.ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать)
		|	И Сертификаты.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-22 (#4234)
		|И Данные.Организация В (&МассивОрганизаций)
		|И НЕ Данные.Организация В (&МассивИсключенийОрганизаций)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-22 (#4234)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Ссылка,
		|	Данные.ИдентификаторОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Исходящий"",
		|	Данные.Ссылка,
		|	Данные.ИдентификаторОрганизации
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-11 (#4234)
		//|	МАКСИМУМ(Сертификаты.Сертификат)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-11 (#4234)
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий КАК Данные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК Сертификаты
		|		ПО Данные.ИдентификаторОрганизации = Сертификаты.ИдентификаторЭДО
		|ГДЕ
		|	НЕ Данные.ПометкаУдаления
		|	И Данные.ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Подписать)
		|	И Сертификаты.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-22 (#4234)
		|И Данные.Организация В (&МассивОрганизаций)
		|И НЕ Данные.Организация В (&МассивИсключенийОрганизаций)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-22 (#4234)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Ссылка,
		|	Данные.ИдентификаторОрганизации
		|
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-27 (#4227)
		//|	ВТРезультат.Сертификат КАК Сертификат
		| Сертификаты.Сертификат КАК Сертификат,
		| Сертификаты.Сертификат.ок_УсловиеВыбораСертификата КАК УсловиеВыбораСертификата,
		| Сертификаты.ИдентификаторЭДО КАК ПрофильНастроекЭДО
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-27 (#4227)
		|ИЗ
		|ВТРезультат КАК ВТРезультат
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-27 (#4227)
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК Сертификаты
		|	ПО ВТРезультат.ПрофильНастроекЭДО = Сертификаты.ИдентификаторЭДО
		|
		|УПОРЯДОЧИТЬ ПО
		|	УсловиеВыбораСертификата УБЫВ
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-27 (#4227)
		|
		|;
		|
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-27 (#4227)
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ВТРезультат.ВидДокумента КАК ВидДокумента
		//|ИЗ
		//|	ВТРезультат КАК ВТРезультат
		//|;
		//|
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-27 (#4227)
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРезультат.ВидДокумента КАК ВидДокумента,
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-27 (#4227)	
		//|	ВТРезультат.Документ КАК Документ
		|	ВТРезультат.Документ КАК Документ,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВТРезультат.Документ) КАК ДокументПредставление,
		|	ВТРезультат.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-27 (#4227)
		|ИЗ
		|	ВТРезультат КАК ВТРезультат";
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-22 (#4234)
	Если ТипЗнч(ПараметрыПодписанияДокументов) = Тип("Структура") Тогда
		
		Если ПараметрыПодписанияДокументов.Свойство("МассивОрганизаций") 
			И ТипЗнч(ПараметрыПодписанияДокументов.МассивОрганизаций) = Тип("Массив")
			И ПараметрыПодписанияДокументов.МассивОрганизаций.Количество() > 0 Тогда
			
			Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыПодписанияДокументов.МассивОрганизаций);
			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Данные.Организация В (&МассивОрганизаций)", "");
		КонецЕсли;
		
		Если ПараметрыПодписанияДокументов.Свойство("МассивИсключенийОрганизаций")
			И ТипЗнч(ПараметрыПодписанияДокументов.МассивИсключенийОрганизаций) = Тип("Массив")
			И ПараметрыПодписанияДокументов.МассивИсключенийОрганизаций.Количество() > 0 Тогда
			
			Запрос.УстановитьПараметр("МассивИсключенийОрганизаций", ПараметрыПодписанияДокументов.МассивИсключенийОрганизаций);
			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Данные.Организация В (&МассивИсключенийОрганизаций)", "");
		КонецЕсли;
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Данные.Организация В (&МассивОрганизаций)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Данные.Организация В (&МассивИсключенийОрганизаций)", "");
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-22 (#4234)
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-27 (#4227)
	//Данные = Новый Структура;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-07 (#3816)
	//Данные.Вставить("Сертификаты", РезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("Сертификат"));
	//Данные.Вставить("ВидыДокументов", РезультатыЗапроса[4].Выгрузить().ВыгрузитьКолонку("ВидДокумента"));
	//Данные.Вставить("Документы", ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатыЗапроса[5].Выгрузить()));
	
	//Данные.Вставить("Сертификаты", РезультатыЗапроса[1].Выгрузить().ВыгрузитьКолонку("Сертификат"));
	//Данные.Вставить("ВидыДокументов", РезультатыЗапроса[2].Выгрузить().ВыгрузитьКолонку("ВидДокумента"));
	//Данные.Вставить("Документы", ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатыЗапроса[3].Выгрузить()));

	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-07 (#3816)
	
	//Возврат Данные;

	ВыборкаСертификаты = РезультатыЗапроса[1].Выбрать();
	ВыборкаДокументы = РезультатыЗапроса[2].Выбрать();
	
	СертификатыИВходящиеДокументы 	= Новый Соответствие;
	СертификатыИИсходящиеДокументы 	= Новый Соответствие;
	КоличествоДокументовКПодписаниюВходящие  = 0;
	КоличествоДокументовКПодписаниюИсходящие = 0;
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		Если ВыборкаДокументы.ВидДокумента = "Входящий" Тогда
			КоличествоДокументовКПодписаниюВходящие = КоличествоДокументовКПодписаниюВходящие + 1;
		Иначе
			КоличествоДокументовКПодписаниюИсходящие = КоличествоДокументовКПодписаниюИсходящие + 1;
		КонецЕсли;
		
		ВыборкаСертификаты.Сбросить();
		Сертификат = Неопределено;
		
		СтруктураПоискаСертификата = Новый Структура("ПрофильНастроекЭДО", ВыборкаДокументы.ПрофильНастроекЭДО);
		
		Пока ВыборкаСертификаты.НайтиСледующий(СтруктураПоискаСертификата) Цикл
			
			Если ПолучитьПарольСертификата(ВыборкаСертификаты.Сертификат) = Неопределено Тогда // Пароль не сохранен, автоматическая подпись невозможна
				Продолжить;
			КонецЕсли;
			
			// 1.Сертификаты упорядочены по условию выбора, сертификат с пустым значением обрабатывается в последнюю очередь
			// 2.В первую очередь выбирается тот, у которого результат условия выбора = Истина
			// 3.Если сертификат не заполнен, он выбирается по умолчанию
			Если ЗначениеЗаполнено(ВыборкаСертификаты.УсловиеВыбораСертификата) Тогда
				
				Результат = бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункцию(ВыборкаСертификаты.УсловиеВыбораСертификата, 
																									ВыборкаДокументы.Документ, 
																									ВыборкаСертификаты.Сертификат);
				
				Если Результат = Истина Тогда
					Сертификат = ВыборкаСертификаты.Сертификат;
					Прервать;
				КонецЕсли;
				
			Иначе
				Сертификат = ВыборкаСертификаты.Сертификат;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Сертификат <> Неопределено Тогда
			
			Если ВыборкаДокументы.ВидДокумента = "Входящий" Тогда
				
				Если СертификатыИВходящиеДокументы[ВыборкаСертификаты.Сертификат] = Неопределено Тогда
					СертификатыИВходящиеДокументы.Вставить(ВыборкаСертификаты.Сертификат, Новый Массив);
				КонецЕсли;
				
				СертификатыИВходящиеДокументы[ВыборкаСертификаты.Сертификат].Добавить(ВыборкаДокументы.Документ);
				
			Иначе
				
				Если СертификатыИИсходящиеДокументы[ВыборкаСертификаты.Сертификат] = Неопределено Тогда
					СертификатыИИсходящиеДокументы.Вставить(ВыборкаСертификаты.Сертификат, Новый Массив);
				КонецЕсли;
				
				СертификатыИИсходящиеДокументы[ВыборкаСертификаты.Сертификат].Добавить(ВыборкаДокументы.Документ);
			КонецЕсли
			
		Иначе
			ЗаписьЖурналаРегистрации("Электронное взаимодействие.Ошибка получения сертификата", 
														УровеньЖурналаРегистрации.Ошибка, 
														ВыборкаДокументы.Документ.Метаданные(),
														ВыборкаДокументы.Документ,
														СтрШаблон(НСтр("ru = 'Не удалось получить сертификат для подписи к документу %1'"), 
																									ВыборкаДокументы.ДокументПредставление));
		КонецЕсли;
		
	КонецЦикла;

	ДанныеВходящихДокументов   	= Новый Массив;
	ДанныеИсходящихДокументов 	= Новый Массив;
	
	Для каждого СертификатДокумент Из СертификатыИВходящиеДокументы Цикл
		
		ИнформацияОДокументах = Новый Структура;
		ИнформацияОДокументах.Вставить("Сертификат", СертификатДокумент.Ключ);
		ИнформацияОДокументах.Вставить("Документы", СертификатДокумент.Значение);
		
		ДанныеВходящихДокументов.Добавить(ИнформацияОДокументах);
		
	КонецЦикла;
	
	Для каждого СертификатДокумент Из СертификатыИИсходящиеДокументы Цикл
		
		ИнформацияОДокументах = Новый Структура;
		ИнформацияОДокументах.Вставить("Сертификат", СертификатДокумент.Ключ);
		ИнформацияОДокументах.Вставить("Документы", СертификатДокумент.Значение);
		
		ДанныеИсходящихДокументов.Добавить(ИнформацияОДокументах);
		
	КонецЦикла;
	
	ИнформацияОВходящихДокументах = Новый Структура;
	ИнформацияОВходящихДокументах.Вставить("ВсегоДокументовВВыборке" , КоличествоДокументовКПодписаниюВходящие);
	ИнформацияОВходящихДокументах.Вставить("Данные"			 		 , ДанныеВходящихДокументов);
	
	ИнформацияОИсходящихДокументах = Новый Структура;
	ИнформацияОИсходящихДокументах.Вставить("ВсегоДокументовВВыборке", КоличествоДокументовКПодписаниюИсходящие);
	ИнформацияОИсходящихДокументах.Вставить("Данные"		 		 , ДанныеИсходящихДокументов);
	
	СтруктураРезультат = Новый Структура;
	
	СтруктураРезультат.Вставить("ВходящиеДокументы"					 , ИнформацияОВходящихДокументах);
	СтруктураРезультат.Вставить("ИсходящиеДокументы"				 , ИнформацияОИсходящихДокументах);
	
	Возврат СтруктураРезультат;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-02 (#4227)
	
КонецФункции

Функция ПолучитьПрофилиНаОбработкуСлужебныхДокументов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//	"ВЫБРАТЬ
	//	|	Данные.Ссылка КАК ПрофильНастроекЭДО,
	//	|	Сертификаты.Сертификат КАК Сертификат,
	//	|	Сертификаты.НомерСтроки КАК СертификатНомерСтроки
	//	|ПОМЕСТИТЬ ВТ
	//	|ИЗ
	//	|	Справочник.ПрофилиНастроекЭДО КАК Данные
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
	//	|		ПО Данные.Ссылка = Сертификаты.Ссылка
	//	|ГДЕ
	//	|	НЕ Данные.ПометкаУдаления
	//	|	И Сертификаты.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	//	|	МИНИМУМ(ВТ.СертификатНомерСтроки) КАК СертификатНомерСтроки
	//	|ПОМЕСТИТЬ ВТНомераСтрокСертификатов
	//	|ИЗ
	//	|	ВТ КАК ВТ
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ВТ.ПрофильНастроекЭДО
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	//	|	ВТ.Сертификат КАК Сертификат
	//	|ИЗ
	//	|	ВТ КАК ВТ
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрокСертификатов КАК ВТНомераСтрокСертификатов
	//	|		ПО ВТ.ПрофильНастроекЭДО = ВТНомераСтрокСертификатов.ПрофильНастроекЭДО
	//	|			И ВТ.СертификатНомерСтроки = ВТНомераСтрокСертификатов.СертификатНомерСтроки";
		 "ВЫБРАТЬ
		 |	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО КАК ПрофильНастроекЭДО,
		 |	МАКСИМУМ(СертификатыУчетныхЗаписейЭДО.Сертификат) КАК Сертификат
		 |ИЗ
		 |	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		 |ГДЕ
		 |	СертификатыУчетныхЗаписейЭДО.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		 |СГРУППИРОВАТЬ ПО
		 |	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО";
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить());
	
КонецФункции

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-22 (#4234)
//Функция СеансРегламентогоЗаданияПодписаниеЭДУжеЗапущен(ТД) Экспорт
Функция ПроверитьЗапускРегламентногоЗаданияПодписаниеЭД(ПараметрыПодписанияДокументов) Экспорт
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-22 (#4234)
// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-22 (#4234)

	СниматьПривилегированныйРежим = Ложь;
	
	Если Не ПривилегированныйРежим() Тогда
		
		СниматьПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(Истина);
		
	КонецЕсли;
	
	//СеансСуществует = Ложь;
	ЗапуститьПодписание = Истина;
	
	Если ПараметрыПодписанияДокументов.ВариантПоискаАктивногоСеанса = 1 Тогда
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-22 (#4234)
		Пользователь = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("РегламентноеЗаданияПодписаниеЭД", "Пользователь");
		Если ЗначениеЗаполнено(Пользователь) Тогда
			УникальныйИдентификатоПользователя = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
			СеансыИБ = ПолучитьСеансыИнформационнойБазы(); 
			НомерЭтогоСеанса = НомерСеансаИнформационнойБазы();
			МаксимальнаяДлительность = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("РегламентноеЗаданияПодписаниеЭД", "МаксимальноеВремяРаботы");
			ПроверятьПревышение = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("РегламентноеЗаданияПодписаниеЭД", "ПроверятьПревышение");
			Если Не ЗначениеЗаполнено(ПроверятьПревышение) ИЛИ ТипЗнч(ПроверятьПревышение) <> Тип("Булево") Тогда
				ПроверятьПревышение = Ложь;
			КонецЕсли;	
			Для каждого Сеанс из СеансыИБ Цикл
				Если Строка(Сеанс.Пользователь.УникальныйИдентификатор) <> УникальныйИдентификатоПользователя Тогда
					Продолжить;
				КонецЕсли;
				Если Сеанс.НомерСеанса = НомерЭтогоСеанса Тогда
					Продолжить;
				КонецЕсли;
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-23 (#4234)
				//Если ПроверятьПревышение И Сеанс.НачалоСеанса + МаксимальнаяДлительностьРегламентноеЗаданияПодписаниеЭД() + 90 < ТД Тогда //зависший сеанс, который должен был закрыться по таймауту, но продолжает висеть на сервере
				Если ПроверятьПревышение 
					И Сеанс.НачалоСеанса + МаксимальнаяДлительностьРегламентноеЗаданияПодписаниеЭД() + 90 < ПараметрыПодписанияДокументов.ТД Тогда //зависший сеанс, который должен был закрыться по таймауту, но продолжает висеть на сервере
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-23 (#4234)
					Продолжить;
				КонецЕсли;
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-23 (#4234)
				//СеансСуществует = Истина;
				ЗапуститьПодписание = Ложь;
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-23 (#4234)
				Прервать;
			КонецЦикла;	
		КонецЕсли;
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-22 (#4234)
	ИначеЕсли ПараметрыПодписанияДокументов.ВариантПоискаАктивногоСеанса = 2 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ок_ИнформацияПоРегламентномуЗаданиюСрезПоследних.НомерСеанса КАК НомерСеанса
		|ИЗ
		|	РегистрСведений.ок_ИнформацияПоРегламентномуЗаданию.СрезПоследних(
		|			,
		|			НаименованиеРЗ = ""Подписать ЭД (ОК)""
		|				И ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				И ЭтоРЗ = ИСТИНА
		|				И ПараметрыРЗ = &ПараметрЗапуска) КАК ок_ИнформацияПоРегламентномуЗаданиюСрезПоследних";
		
		Запрос.УстановитьПараметр("ПараметрЗапуска", ПараметрыПодписанияДокументов.ПараметрЗапуска);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ТаблицаЗначений = Новый ТаблицаЗначений;
			Отбор = Новый Структура("Сеанс", Выборка.НомерСеанса);
			
			ВыгрузитьЖурналРегистрации(ТаблицаЗначений, Отбор, "Дата", , 1);
			
			Если ТаблицаЗначений.Количество() > 0 Тогда
				
				ДанныеЖурналаРегистрации = ТаблицаЗначений[0];
				ВремяПростоя = ДанныеЖурналаРегистрации.Дата + ПараметрыПодписанияДокументов.ВремяПростояПодписанияДокументов;
				
				Если ВремяПростоя > ТекущаяДатаСеанса() Тогда
					
					МенеджерЗаписи = РегистрыСведений.ок_ИнформацияПоРегламентномуЗаданию.СоздатьМенеджерЗаписи();
					
					МенеджерЗаписи.Период 				= ПараметрыПодписанияДокументов.ДатаНачалаРЗ;
					МенеджерЗаписи.НаименованиеРЗ 		= ПараметрыПодписанияДокументов.ИмяРЗ;
					МенеджерЗаписи.НомерСеанса 			= ПараметрыПодписанияДокументов.НомерСеанса;
					МенеджерЗаписи.ПараметрыРЗ 			= ПараметрыПодписанияДокументов.ПараметрЗапуска;
					МенеджерЗаписи.ИдентификаторСеанса 	= ПараметрыПодписанияДокументов.ИдентификаторСеанса;
					МенеджерЗаписи.Пользователь 		= ПараметрыСеанса.ТекущийПользователь;
					МенеджерЗаписи.ЭтоРЗ 				= Истина;
					МенеджерЗаписи.ДатаОкончания 		= ТекущаяДатаСеанса();
					МенеджерЗаписи.ДопИнформация 		= НСтр("ru = 'Подписание прервано, работает предыдущий сеанс подписания'");
					МенеджерЗаписи.Записать();
					
					ЗапуститьПодписание = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапуститьПодписание Тогда 
		
		ЗаписьИнформации = РегистрыСведений.ок_ИнформацияПоРегламентномуЗаданию.СоздатьМенеджерЗаписи();
		
		ЗаписьИнформации.Период 				= ПараметрыПодписанияДокументов.ДатаНачалаРЗ;
		ЗаписьИнформации.НаименованиеРЗ 		= ПараметрыПодписанияДокументов.ИмяРЗ;
		ЗаписьИнформации.НомерСеанса 			= ПараметрыПодписанияДокументов.НомерСеанса;
		ЗаписьИнформации.ПараметрыРЗ		 	= ПараметрыПодписанияДокументов.ПараметрЗапуска;
		ЗаписьИнформации.ИдентификаторСеанса 	= ПараметрыПодписанияДокументов.ИдентификаторСеанса;
		ЗаписьИнформации.Пользователь 			= ПараметрыСеанса.ТекущийПользователь;
		ЗаписьИнформации.ЭтоРЗ 					= Истина;
		
		ЗаписьИнформации.Записать();
		
	КонецЕсли;
	
	Если СниматьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	//Возврат СеансСуществует;
	Возврат ЗапуститьПодписание;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-22 (#4234)
		
КонецФункции		

Функция МаксимальнаяДлительностьРегламентноеЗаданияПодписаниеЭД() Экспорт
	
	МаксимальнаяДлительность = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("РегламентноеЗаданияПодписаниеЭД", "МаксимальноеВремяРаботы");
	Если Не ЗначениеЗаполнено(МаксимальнаяДлительность) ИЛИ ТипЗнч(МаксимальнаяДлительность) <> Тип("Число") Тогда
		МаксимальнаяДлительность = 1800;
	КонецЕсли;	
	
	Возврат МаксимальнаяДлительность;
	
КонецФункции		


//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
Процедура ДополнитьПараметрыПроверкиСоответствияУчетногоДокументаИВходящегоЭД(Параметры) Экспорт
	
	Если Параметры.ТипЗначенияУчетныйДокумент = Тип("ДокументСсылка.ПоступлениеНМА") 
		Или Параметры.ТипЗначенияУчетныйДокумент = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
			Параметры.Вставить("ФВБУчетныйДокумент", бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Параметры.УчетныйДокумент,
										ок_ПодпискиНаСобытия.бит_ДополнительныхАналитикаНомерЗаявки(), ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка")));
	
	КонецЕсли;
									
	ЭлектронныйДокумент = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Данные.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК Данные
		|ГДЕ
		|	Данные.ДокументОснование = &ДокументОснование
		|	И НЕ Данные.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные.Ссылка.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументОснование", Параметры.УчетныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлектронныйДокумент = Выборка.Ссылка;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		////Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ок_Сумма,ок_НомерЗаявки");
		//Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ок_Сумма,ок_НомерЗаявки,ПрофильНастроекЭДО,СуммаДокумента");
		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		//ИменаРеквизитов = "ок_Сумма,ок_НомерЗаявки,ПрофильНастроекЭДО,СуммаДокумента";
		ИменаРеквизитов = "ок_Сумма,ок_НомерЗаявки,ИдентификаторОрганизации,СуммаДокумента";
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
		ИменаРеквизитов = ИменаРеквизитов + ",Организация,Контрагент";
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, ИменаРеквизитов);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-01-21 (#3612)
		
		Параметры.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Параметры.Вставить("ФВБЭлектронныйДокумент", Реквизиты.ок_НомерЗаявки);
		Параметры.Вставить("СуммаЭлектронныйДокумент", Реквизиты.ок_Сумма);
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
		Параметры.Вставить("ОрганизацияЭлектронныйДокумент", Реквизиты.Организация);
		Параметры.Вставить("КонтрагентЭлектронныйДокумент", Реквизиты.Контрагент);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-01-21 (#3612)
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		//Параметры.Вставить("ЭтоБумажныйДокумент", ок_ОбменСКонтрагентамиВнутренний.ЭтоБумажныйДокумент(, Реквизиты.ПрофильНастроекЭДО));
		Параметры.Вставить("ЭтоБумажныйДокумент", ок_ОбменСКонтрагентамиВнутренний.ЭтоБумажныйДокумент(, Реквизиты.ИдентификаторОрганизации));
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
		Если Параметры.ЭтоБумажныйДокумент Тогда
			Параметры.Вставить("СуммаЭлектронныйДокумент", Реквизиты.СуммаДокумента);
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	КонецЕсли;
	
КонецПроцедуры	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
Функция ЭтоБумажныйДокумент(Ссылка = Неопределено, Профиль = Неопределено) Экспорт
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.ЭтоБумажныйДокумент(Ссылка, Профиль);
	
КонецФункции	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
Процедура ОтразитьЗаписьЛогаОценкиПроизводительности(ТекстСообщения) Экспорт
	
	ок_ОбменСКонтрагентамиВнутренний.ОтразитьЗаписьЛогаОценкиПроизводительности(ТекстСообщения);
	
КОнецпроцедуры	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)

//ОКЕЙ Морозов А.В(СофтЛаб) Начало 2020-07-26 (#3816)
Функция ПолучитьHTML() Экспорт
	
  	HTML = СтрЗаменить(ПолучитьОбщийМакет("ок_МакетPDF").ПолучитьТекст(),"<TextScript111>",ПолучитьОбщийМакет("ок_СкриптБиблиотекаPDF").ПолучитьТекст());
  	HTML = СтрЗаменить(HTML,"<TextScript112>",ПолучитьОбщийМакет("ок_СкриптWorkerPDF").ПолучитьТекст());
	
	Возврат HTML;
	
КонецФункции
//ОКЕЙ Морозов А.В(СофтЛаб) Конец 2020-07-26 (#3816)		

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-15 (#3821)
Функция СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ, НаименованиеРЗ, ЭтоРЗ, ЕстьОшибки, КоличествоОбъектов) Экспорт
	
	СтруктураДляРС = Новый Структура;
	
	СтруктураДляРС.Вставить("Период", 						ДатаНачалаРЗ);
	СтруктураДляРС.Вставить("НаименованиеРЗ", 				НаименованиеРЗ);
	СтруктураДляРС.Вставить("Пользователь", 				ПараметрыСеанса.ТекущийПользователь);
	СтруктураДляРС.Вставить("ЭтоРЗ", 						ЭтоРЗ);
	СтруктураДляРС.Вставить("НомерСеанса", 					НомерСеансаИнформационнойБазы());
	СтруктураДляРС.Вставить("ДатаОкончания", 				ТекущаяДатаСеанса());
	СтруктураДляРС.Вставить("ЕстьОшибки", 					ЕстьОшибки);
	СтруктураДляРС.Вставить("ДопИнформация",				"");
	СтруктураДляРС.Вставить("КоличествоОбъектов",			КоличествоОбъектов);
	
	Возврат СтруктураДляРС;
	
КонецФункции

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-20 (#4175)
//Функция ЗафиксироватьИнформациюПоРЗ(СтруктураПараметров) Экспорт
Функция ЗафиксироватьИнформациюПоРЗ(СтруктураПараметров, Начало = Ложь) Экспорт
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-20 (#4175) 

	ОтключитьПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОтключитьПривилегированныйРежим = Истина;
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-20 (#4175)
	Если Начало Тогда
	
		ЗаписьИнформации = РегистрыСведений.ок_ИнформацияПоРегламентномуЗаданию.СоздатьМенеджерЗаписи();
			
		ЗаписьИнформации.Период 		= СтруктураПараметров.Период;
		ЗаписьИнформации.НаименованиеРЗ = СтруктураПараметров.НаименованиеРЗ;
		ЗаписьИнформации.Пользователь 	= СтруктураПараметров.Пользователь;
		ЗаписьИнформации.ЭтоРЗ 			= СтруктураПараметров.ЭтоРЗ;
		ЗаписьИнформации.НомерСеанса 	= СтруктураПараметров.НомерСеанса;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-30 (#4234)
		ЗаписьИнформации.ИдентификаторСеанса = ОК_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("ок_ИдентификаторСеанса");
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-30 (#4234)
		ЗаписьИнформации.Записать();
		
		Если ОтключитьПривилегированныйРежим Тогда
			УстановитьПривилегированныйРежим(Ложь);
			ОтключитьПривилегированныйРежим = Ложь;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли; 
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-20 (#4175) 
	
	ЕстьОшибки 					= СтруктураПараметров.ЕстьОшибки;
	ДатаОкончания 				= СтруктураПараметров.ДатаОкончания;
	НомерСеанса 				= СтруктураПараметров.НомерСеанса;
	КоличествоОшибокВсего 		= 0;
	КоличествоОбъектовСОшибками = 0;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-15 (#3849)
	КоличествоОтклоненныхДокументов = 0;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-15 (#3849)
	
	ОтборЖР = Новый Структура;
	ОтборЖР.Вставить("ДатаНачала", 		СтруктураПараметров.Период - 1);
	ОтборЖР.Вставить("ДатаОкончания", 	ДатаОкончания + 1);
	ОтборЖР.Вставить("Сеанс", 			НомерСеанса);
	ОтборЖР.Вставить("Уровень", 		УровеньЖурналаРегистрации.Ошибка);
	
	ТабЗаисиЖР = Новый ТаблицаЗначений;
	
	Таймаут = ТекущаяДатаСеанса() + 2;
	Пока ТекущаяДатаСеанса() < Таймаут Цикл
	КонецЦикла;
	
	ВыгрузитьЖурналРегистрации(ТабЗаисиЖР, ОтборЖР, "Данные, Событие");
	
	Для каждого СрокаЖР Из  ТабЗаисиЖР Цикл
		КоличествоОшибокВсего = КоличествоОшибокВсего + 1;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-12 (#4227)
		//Если ТипЗнч(СрокаЖР.Данные) = Тип("ДокументСсылка.ПакетЭД") И ЗначениеЗаполнено(СрокаЖР.Данные) Тогда
		Если ТипЗнч(СрокаЖР.Данные) = Тип("ДокументСсылка.ПакетЭД") И ЗначениеЗаполнено(СрокаЖР.Данные) 
			Или СрокаЖР.Событие = "Электронное взаимодействие.Ошибка получения сертификата" Тогда
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-12 (#4227)
			КоличествоОбъектовСОшибками = КоличествоОбъектовСОшибками + 1;
		КонецЕсли;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-15 (#3849)

		Если СрокаЖР.Событие = "Электронное взаимодействие.Отклонение версии ЭД" Тогда
			КоличествоОтклоненныхДокументов = КоличествоОтклоненныхДокументов + 1;
		КонецЕсли;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-15 (#3849)
		
	КонецЦикла;
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-22 (#3849)
	Если СтруктураПараметров.Свойство("КоличествоОбъектовСОшибками") Тогда
		КоличествоОбъектовСОшибками = СтруктураПараметров.КоличествоОбъектовСОшибками;
	КонецЕсли;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-22 (#3849)
	
	Если Не ЕстьОшибки Тогда
		ЕстьОшибки = КоличествоОшибокВсего > 0;
	КонецЕсли;
	
	Наборок_ИнформацияПоРегламентномуЗаданию = РегистрыСведений.ок_ИнформацияПоРегламентномуЗаданию.СоздатьНаборЗаписей();

	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-30 (#4234)
	ИдентификаторСеанса = ОК_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("ок_ИдентификаторСеанса");
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-30 (#4234)
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-30 (#4234)
	Если СтруктураПараметров.НаименованиеРЗ = "Подписать ЭД (ОК)" Тогда
		
		Наборок_ИнформацияПоРегламентномуЗаданию.Отбор.ИдентификаторСеанса.Установить(ИдентификаторСеанса);
		Наборок_ИнформацияПоРегламентномуЗаданию.Прочитать();
		
		Если Наборок_ИнформацияПоРегламентномуЗаданию.Количество() > 0 Тогда
			
			СтрокаНабора = Наборок_ИнформацияПоРегламентномуЗаданию[0];
			
			СтрокаНабора.ДатаОкончания 						= ДатаОкончания;
			СтрокаНабора.ЕстьОшибки 						= ЕстьОшибки;
			СтрокаНабора.ДопИнформация 						= СтруктураПараметров.ДопИнформация;
			СтрокаНабора.КоличествоОбъектов 				= СтруктураПараметров.КоличествоОбъектов;
			СтрокаНабора.КоличествоОбъектовСОшибками 		= КоличествоОбъектовСОшибками;
			СтрокаНабора.КоличествоОшибокВсего				= КоличествоОшибокВсего;
			СтрокаНабора.КоличествоОтклоненныхДокументов 	= КоличествоОтклоненныхДокументов;
			
		Иначе
			ЗаписьЖурналаРегистрации("Электронное взаимодействие.Ошибка записи результата по регламентному заданию", УровеньЖурналаРегистрации.Ошибка);
		КонецЕсли;
		
	Иначе
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-30 (#4234)
		Наборок_ИнформацияПоРегламентномуЗаданию.Отбор.Период.Установить(СтруктураПараметров.Период);
		Наборок_ИнформацияПоРегламентномуЗаданию.Отбор.НаименованиеРЗ.Установить(СтруктураПараметров.НаименованиеРЗ);
		Наборок_ИнформацияПоРегламентномуЗаданию.Отбор.Пользователь.Установить(СтруктураПараметров.Пользователь);
		Наборок_ИнформацияПоРегламентномуЗаданию.Отбор.ЭтоРЗ.Установить(СтруктураПараметров.ЭтоРЗ);
		
		СтрокаНабора = Наборок_ИнформацияПоРегламентномуЗаданию.Добавить();
		
		СтрокаНабора.Период 						= СтруктураПараметров.Период;
		СтрокаНабора.НаименованиеРЗ 				= СтруктураПараметров.НаименованиеРЗ;
		СтрокаНабора.Пользователь 					= СтруктураПараметров.Пользователь;
		СтрокаНабора.ЭтоРЗ 							= СтруктураПараметров.ЭтоРЗ;
		СтрокаНабора.НомерСеанса 					= НомерСеанса;
		СтрокаНабора.ДатаОкончания 					= ДатаОкончания;
		СтрокаНабора.ЕстьОшибки 					= ЕстьОшибки;
		СтрокаНабора.ДопИнформация 					= СтруктураПараметров.ДопИнформация;
		СтрокаНабора.КоличествоОбъектов 			= СтруктураПараметров.КоличествоОбъектов;
		СтрокаНабора.КоличествоОбъектовСОшибками 	= КоличествоОбъектовСОшибками;
		СтрокаНабора.КоличествоОшибокВсего			= КоличествоОшибокВсего;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-15 (#3849)
		СтрокаНабора.КоличествоОтклоненныхДокументов = КоличествоОтклоненныхДокументов;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-15 (#3849)
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-30 (#4234)
		СтрокаНабора.ИдентификаторСеанса			= ИдентификаторСеанса;
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-30 (#4234)
	
	Наборок_ИнформацияПоРегламентномуЗаданию.Записать();
	
	Если ОтключитьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
		ОтключитьПривилегированныйРежим = Ложь;
	КонецЕсли;
	
КонецФункции
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-15 (#3821)

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-09 (#3849)
Процедура ЗафиксироватьНеизвестнуюОшибкуПоНеподписанным(ДокументыКПодписанию) Экспорт
	
	Для Каждого ЭлементаМассива Из ДокументыКПодписанию Цикл
		ИмяСобытияЖР ="Электронное взаимодействие.Подписание ЭД";
		КомментарийЖР = "Неизвестная ошибка";
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЭлектронныйДокументВходящий, ЭлементаМассива, КомментарийЖР);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВходящиеДокументыПоИД(МассивИД) Экспорт
	
	МассивЭД = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящий.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|ГДЕ
		|	ЭлектронныйДокументВходящий.УникальныйИД В(&УникальныйИД)";
	
	Запрос.УстановитьПараметр("УникальныйИД", МассивИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивЭД.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат МассивЭД;
	
КонецФункции
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-09 (#3849)

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
Функция УчетнаяЗаписьПоКастомизированномуЭДО(ИдентификаторЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК КастомизированныйЭДО
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО = &ИдентификаторЭДО
		|	И УчетныеЗаписиЭДО.ок_СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)

//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
Функция ПроверитьРазмерФайловПередОтправкойНаСогласование(СписокЭД) Экспорт
	
	РезультатПроверки = Новый Структура;
	
	МаксимальныйРазмерПисьма =  бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Максимальный размер письма (Мб)", 5);
	МассивЭдСПревышениемРазмера = Новый Массив;
	РезультатПроверки.Вставить("МаксимальныйРазмерПисьма", МаксимальныйРазмерПисьма);
	
	Если СписокЭД.Количество() = 0 Тогда 
		РезультатПроверки.Вставить("МассивЭдСПревышениемРазмера", МассивЭдСПревышениемРазмера);
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ВладелецФайла = СписокЭД[0]; //в списке ЭД всегда одно значение
	ТаблицаФайловДляОтображения = ок_ОбменСКонтрагентамиВнутренний.ПолучитьПрисоединенныеФайлыВходящегоЭДДляОтправки(ВладелецФайла);
	
	Если ТаблицаФайловДляОтображения = Неопределено Тогда 
		РезультатПроверки.Вставить("МассивЭдСПревышениемРазмера", МассивЭдСПревышениемРазмера);
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ИтогРазмерФайлов = ТаблицаФайловДляОтображения.Итог("Размер");
	
	Если (ИтогРазмерФайлов / 1024 / 1024) <= МаксимальныйРазмерПисьма Тогда 
		Для Каждого СтрокаФайла Из ТаблицаФайловДляОтображения Цикл
			Если Не СтрокаФайла.ок_КОтправке И Не СтрокаФайла.ок_Неактуальный Тогда 
				УстановитьФлагКОтправкеФайлаЭД(СтрокаФайла.ПрисоединенныйФайл);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивЭдСПревышениемРазмера.Добавить(ВладелецФайла);
	КонецЕсли; 	
	
	РезультатПроверки.Вставить("МассивЭдСПревышениемРазмера", МассивЭдСПревышениемРазмера);
	Возврат РезультатПроверки;
	
КонецФункции

Процедура УстановитьФлагКОтправкеФайлаЭД(СсылкаНаФайл, КОтправке = Истина) Экспорт
	ОбъектФайла = СсылкаНаФайл.ПолучитьОбъект();
	ОбъектФайла.ок_КОтправке = КОтправке;
	ОбъектФайла.Записать();
КонецПроцедуры	
//ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-22 (#3997)
Процедура УстановитьРешениеНаСервере(Решение, ТекущийДокумент, Комментарий = "", НомерЗаявки = Неопределено) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Объект",ТекущийДокумент);
	
	СписокВизПользователя = Новый СписокЗначений;
	СписокВизПользователя.Добавить(ПредопределенноеЗначение("Справочник.бит_Визы.ок_Инициатор"));
	СписокВизПользователя.Добавить(ПредопределенноеЗначение("Справочник.бит_Визы.ок_ФД")); 
	
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	бит_Визирование.СБ_УстановитьВизы(СтруктураОтбор, ТекущийПользователь, ТекущаяДатаСеанса(), СписокВизПользователя, Ложь, Решение, ПараметрыСеанса.бит_БК_ТекущийИнициатор, Комментарий);
	
	НаборВизы = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);	
		
	бит_Визирование.ДовыполнитьАлгоритмВизирования(ТекущийДокумент, НаборВизы, Ложь);			
	НаборВизы.Записать();
	
	ДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
	
	ЗаписатьДокумент = Ложь;
		
	Если ЗначениеЗаполнено(ДокументОбъект.ИдентификаторОрганизации) И Решение = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено") Тогда
		ДокументОбъект.ок_ПричинаОтклоненияСогласования = ДокументОбъект.ок_ПричинаОтклоненияСогласования + Строка(ТекущийПользователь) + " : " + Комментарий + Символы.ПС;
		ЗаписатьДокумент = Истина;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ок_НомерЗаявки) И ЗначениеЗаполнено(НомерЗаявки) Тогда
		ДокументОбъект.Ок_НомерЗаявки = НомерЗаявки;	
	КонецЕсли;
	
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	ДокументОбъект.Заблокировать();
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	
	ДокументОбъект.УстановитьСтатус();
	
	Если ДокументОбъект.ок_Статус <> ТекущийДокумент.Ок_Статус
		ИЛИ ДокументОбъект.Ок_НомерЗаявки <> ТекущийДокумент.Ок_НомерЗаявки Тогда
		ЗаписатьДокумент = Истина;
	КонецЕсли;
	
	Если ЗаписатьДокумент Тогда
		ДокументОбъект.Записать();	
	КонецЕсли;
			
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

Функция ПроверитьНаличиеМаршрутаИПрисутствиеТекущегоИнициатора(ТекущийДокумент, Инициатор = Неопределено) Экспорт
	
	Если Инициатор = Неопределено Тогда
		Инициатор = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_УстановленныеВизы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	бит_УстановленныеВизы.Решение КАК Решение
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	бит_УстановленныеВизы.Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат "Маршрут не найден";
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФизическоеЛицо = Инициатор Тогда
			
			Если ЗначениеЗаполнено(Выборка.Решение) Тогда
				Возврат "Решение установлено";
			Иначе
				Возврат "Решение не установлено";
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат "Маршрут найден";
	
КонецФункции

Процедура УстановитьСтатусНаСервере(ТекущийДокумент, Статус) Экспорт
	
	ПрошлыйСтатус = ТекущийДокумент.ок_Статус;
	
	КоличествоОтработанных = УстановитьСтатусВходящегоДокументооборота(ТекущийДокумент, Новый Структура("Статус", Статус));
	Если КоличествоОтработанных = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось изменить статус документа",,,ТекущийДокумент);
		Возврат;
	КонецЕсли;
	
	бит_Визирование.УстановитьСтатусОбъекта(ТекущийДокумент, 
												Перечисления.бит_ВидыСтатусовОбъектов.Статус,
												ТекущийДокумент.ок_Статус,
												ПрошлыйСтатус,
												бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"),
												ТекущаяДата());
												
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Объект",ТекущийДокумент);
	
	НаборВизы = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборВизы.Количество() = 0 Тогда		
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Шаблон отмены входящего электронного документа");			
	Если Не ЗначениеЗаполнено(ШаблонСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена настройка: Согласование по почте/Шаблон отмены входящего электронного документа");
		Возврат;
	КонецЕсли;
	
	ВизаФД = ПредопределенноеЗначение("Справочник.бит_Визы.ок_ФД");
	Для Каждого СтрокаВизы Из НаборВизы Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаВизы.Решение) Тогда
			
			Если СтрокаВизы.Виза = ВизаФД Тогда
				Получатель = "";
			Иначе	
			    Получатель = СтрокаВизы.ФизическоеЛицо;
			КонецЕсли;
			
			СообщениеОбОшибке = "";
	
			Результат = ок_ОбменСКонтрагентамиВнутренний.ОтправитьПисьмоПоВходящемуЭлектронномуДокументу(СтрокаВизы.Объект,СтрокаВизы.Виза,,СообщениеОбОшибке,,ШаблонСообщения,,Получатель);
			Если НЕ Результат Тогда	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	НаборВизы.Очистить();
	НаборВизы.Записать();
		
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-22 (#3997)	

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-22 (#4234)
Процедура ДополнитьПараметрыПодписанияДокументовНаСервере(Параметры) Экспорт
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Вариант поиска активного сеанса - по умолчанию по активным сеансам ИБ
	ЗначениеНастройки = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЭДО", "Вариант поиска активного сеанса");
	
	Если ЗначениеНастройки = 2 Или ЗначениеНастройки = 1 Тогда // 1 - по активным сеансам ИБ, 2 - по записи регистра сведений и журналу регистрации
		ВариантПоискаАктивногоСеанса = ЗначениеНастройки;
	Иначе
		ВариантПоискаАктивногоСеанса = 1; // старый механизм, по  активным сеансам ИБ
	КонецЕсли;
	
	Параметры.Вставить("ВариантПоискаАктивногоСеанса", ВариантПоискаАктивногоСеанса);
	
	// 2. Время простоя подписания документов
	ЗначениеНастройки = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЭДО", "Максимальное время простоя подписания документов");
	
	Если ЗначениеЗаполнено(ЗначениеНастройки) 
		И ТипЗнч(ЗначениеНастройки) = Тип("Число") Тогда
		ВремяПростоя = ЗначениеНастройки;
	Иначе
		ВремяПростоя = 900; // 15 минут по умолчанию
	КонецЕсли;
	
	Параметры.Вставить("ВремяПростояПодписанияДокументов", ВремяПростоя);
	
	// 3. Номер текущего сеанса 
	Параметры.Вставить("НомерСеанса", НомерСеансаИнформационнойБазы());
	
	// 4. Пользовательские параметры 
	ПользовательскаяФункция = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЭДО", "ДополнительныеПараметрыПодписанияЭД");
	
	МассивОрганизаций = Новый Массив;
	МассивИсключенийОрганизаций = Новый Массив;
	ПодписаниеСлужебныхДокументов = Ложь;
	
	Если ЗначениеЗаполнено(ПользовательскаяФункция) 
		И ТипЗнч(ПользовательскаяФункция) = Тип("СправочникСсылка.бит_ПользовательскиеФункции") Тогда
		
		Результат = бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункцию(ПользовательскаяФункция, Параметры.ПараметрЗапуска);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("МассивОрганизаций") 
				И ТипЗнч(Результат.МассивОрганизаций) = Тип("Массив") Тогда
				
				МассивОрганизаций = Результат.МассивОрганизаций;
				
			КонецЕсли;
			
			Если Результат.Свойство("МассивИсключенийОрганизаций")
				И ТипЗнч(Результат.МассивИсключенийОрганизаций) = Тип("Массив")Тогда
				
				МассивИсключенийОрганизаций = Результат.МассивИсключенийОрганизаций;
				
			КонецЕсли;
			
			Если Результат.Свойство("ПодписаниеСлужебныхДокументов")
				И ТипЗнч(Результат.ПодписаниеСлужебныхДокументов) = Тип("Булево")  Тогда
				
				ПодписаниеСлужебныхДокументов = Результат.ПодписаниеСлужебныхДокументов;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры.Вставить("МассивОрганизаций", МассивОрганизаций);
	Параметры.Вставить("МассивИсключенийОрганизаций", МассивИсключенийОрганизаций);
	Параметры.Вставить("ПодписаниеСлужебныхДокументов", ПодписаниеСлужебныхДокументов);
	
	// 5. Уникальный идентификатор сеанса 
	Параметры.Вставить("ИдентификаторСеанса", ОК_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("ок_ИдентификаторСеанса"));
	
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-22 (#4234)

// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
Функция ДоступныеПользовательскиеПереходыСтатусаПоКнопкеИзменитьСтатус(ИсходныйСтатус, БумажныйДокумент = Ложь) Экспорт

	ДоступныеПереходы  = Новый Массив;
	Если ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ПустаяСсылка") 
		Или ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
		Если Не БумажныйДокумент Тогда 
			ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ЗавершенБезПодписания"));
		КонецЕсли;
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен"));
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
		Если Не БумажныйДокумент Тогда 
			ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ЗавершенБезПодписания"));
		КонецЕсли;
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен"));
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"));
		Если Не БумажныйДокумент Тогда 
			ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ЗавершенБезПодписания"));
		КонецЕсли;
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен"));
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"));
		Если Не БумажныйДокумент Тогда 
			ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ЗавершенБезПодписания"));
		КонецЕсли;
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен"));
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать") Тогда
		Если Не БумажныйДокумент Тогда 
			ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ЗавершенБезПодписания"));
		КонецЕсли;
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен"));
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен"));
	ИначеЕсли ИсходныйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ЗавершенБезПодписания") Тогда
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"));
		ДоступныеПереходы.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен"));
	КонецЕсли;	
	
	Возврат ДоступныеПереходы;
	
КонецФункции
// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
