#Область ПрограммныйИнтерфейс

#Область РеестрКодовМаркировки

// Построить дерево упаковок на основании данных о кодах маркировки.
// 
// Параметры:
//  Значение - Массив Из Строка, Строка - Коды маркировки для которых необходимо построить дерево упаковок.
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияПродукцииИСМП, Неопределено - Детализация хранения обувной продукции.
// Возвращаемое значение:
//  Структура - Описание:
//   * ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//   * ТекстОшибки                    - Строка - Текст ошибки.
//   * ДеревоУпаковок                 - ДеревоЗначений, Неопределено - Дерево упаковок, построенное по переданным кодам маркировки.
//   * GTIN - ТаблицаЗначений - Список GTIN в разрезе МРЦ:
//    ** GTIN - Строка - GTIN.
Функция ДеревоУпаковок(Значение, Детализация = Неопределено) Экспорт
	
	ДеревоУпаковок = Новый ДеревоЗначений;
	ДеревоУпаковок.Колонки.Добавить("Штрихкод",                          Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	ДеревоУпаковок.Колонки.Добавить("GTIN",                              Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	ДеревоУпаковок.Колонки.Добавить("Статус",                            Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП"));
	ДеревоУпаковок.Колонки.Добавить("ИННВладельца",                      Новый ОписаниеТипов("Строка"));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));
	ДеревоУпаковок.Колонки.Добавить("СодержимоеНедоступно",              Новый ОписаниеТипов("Булево"));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДеревоУпаковок",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("GTIN",                           Неопределено);
	
	ПотребительскиеУпаковки     = Новый Соответствие;
	СоответствиеКодовМаркировки = Новый Соответствие;
	
	ПакетыКодовМаркировки = Новый Массив;
	ПакетКодовМаркировки  = Неопределено;
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		КодМаркировкиДляПередачиИСМП = ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиДляПередачиИСМП(Значение);
		
		СоответствиеКодовМаркировки.Вставить(КодМаркировкиДляПередачиИСМП, Значение);
		
		GTIN = Неопределено;
		Если ШтрихкодированиеИСМПКлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировкиДляПередачиИСМП, GTIN) Тогда
			ПотребительскиеУпаковки.Вставить(КодМаркировкиДляПередачиИСМП, Новый Структура("GTIN", GTIN));
		КонецЕсли;
		
		ПакетКодовМаркировки = Новый Массив;
		ПакетКодовМаркировки.Добавить(КодМаркировкиДляПередачиИСМП);
		ПакетыКодовМаркировки.Добавить(ПакетКодовМаркировки);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		
		Для Каждого КодМаркировки Из Значение Цикл
			
			КодМаркировкиДляПередачиИСМП = ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиДляПередачиИСМП(КодМаркировки);
			
			СоответствиеКодовМаркировки.Вставить(КодМаркировкиДляПередачиИСМП, КодМаркировки);
			
			GTIN = Неопределено;
			Если ШтрихкодированиеИСМПКлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировкиДляПередачиИСМП, GTIN) Тогда
				ПотребительскиеУпаковки.Вставить(КодМаркировкиДляПередачиИСМП, Новый Структура("GTIN", GTIN));
			КонецЕсли;
			
			Если ПакетКодовМаркировки = Неопределено
				Или ПакетКодовМаркировки.Количество() >= 10 Тогда
				ПакетКодовМаркировки = Новый Массив();
				ПакетыКодовМаркировки.Добавить(ПакетКодовМаркировки);
			КонецЕсли;
			
			ПакетКодовМаркировки.Добавить(КодМаркировкиДляПередачиИСМП);
			
		КонецЦикла;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	СтатусыКодовМаркировки = Новый Соответствие;
	
	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
		
		РезультатЗапросаСтатусовКодовМаркировок = СтатусыКодовМаркировки(ПакетКодовМаркировки, СтатусыКодовМаркировки);
		
		Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатЗапросаСтатусовКодовМаркировок.СтатусыКодовМаркировки = Неопределено Тогда
		
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
		
			Возврат ВозвращаемоеЗначение;
		
		КонецЕсли;
		
	КонецЦикла;
	
	КешGTIN = Новый ТаблицаЗначений;
	КешGTIN.Колонки.Добавить("GTIN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	КешGTIN.Индексы.Добавить("GTIN");
	
	// Соответствие кодов маркировки и строк дерева
	Кеш = Новый Структура;
	Кеш.Вставить("КодыМаркировки", Новый Соответствие);
	Кеш.Вставить("GTIN",           КешGTIN);
	
	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
		
		Для Каждого КодМаркировки Из ПакетКодовМаркировки Цикл
			
			СтрокаДереваИзКеша = Кеш.КодыМаркировки[КодМаркировки];
			Если СтрокаДереваИзКеша <> Неопределено Тогда
				// Код маркировки уже добавлен в упаковку
				Продолжить;
			КонецЕсли;
			
			РеквизитыПотребительскойУпаковки = ПотребительскиеУпаковки.Получить(КодМаркировки);
			ЭтоКодМаркировкиПотребительскойУпаковки = (РеквизитыПотребительскойУпаковки <> Неопределено);
			
			Если ЭтоКодМаркировкиПотребительскойУпаковки Тогда
				
				ДанныеСтатуса = СтатусыКодовМаркировки[КодМаркировки];
				
				СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
				СтрокаДерева.Штрихкод                          = СоответствиеКодовМаркировки[КодМаркировки];
				СтрокаДерева.Статус                            = ДанныеСтатуса.Статус;
				СтрокаДерева.ИННВладельца                      = ДанныеСтатуса.ИННВладельца;
				СтрокаДерева.GTIN                              = РеквизитыПотребительскойУпаковки.GTIN;
				СтрокаДерева.КоличествоПотребительскихУпаковок = 1;
				
				Кеш.КодыМаркировки.Вставить(КодМаркировки, СтрокаДерева);
				ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
				
			Иначе
				
				ДанныеСтатуса = СтатусыКодовМаркировки[КодМаркировки];
				
				Если ДанныеСтатуса.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
					
					Результат = ПараметрыСредстваИдентификации(КодМаркировки);
					Если Результат.ПараметрыКодаМаркировки <> Неопределено
						И Результат.ПараметрыКодаМаркировки.ВложенныеУпаковки <> Неопределено
						И Результат.ПараметрыКодаМаркировки.ВложенныеУпаковки.Количество() > 0 Тогда
						
						ДанныеСтроки = Новый Структура;
						ДанныеСтроки.Вставить("GTIN",                              Неопределено);
						ДанныеСтроки.Вставить("КоличествоПотребительскихУпаковок", 0);
						ДанныеСтроки.Вставить("ИННВладельца",                      ДанныеСтатуса.ИННВладельца);
						ДанныеСтроки.Вставить("Статус",                            ДанныеСтатуса.Статус);
						
						Если Не ЗначениеЗаполнено(Детализация)
							Или Детализация = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная
							Или Детализация = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.КоробаПотребительскиеУпаковки Тогда
							
							СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
							СтрокаДерева.Штрихкод                          = СоответствиеКодовМаркировки[КодМаркировки];
							СтрокаДерева.Статус                            = ДанныеСтроки.Статус;
							СтрокаДерева.ИННВладельца                      = ДанныеСтроки.ИННВладельца;
							СтрокаДерева.GTIN                              = ДанныеСтроки.GTIN;
							СтрокаДерева.КоличествоПотребительскихУпаковок = ДанныеСтроки.КоличествоПотребительскихУпаковок;
							
							ЗаполнитьДеревоУпаковокРекурсивно(
								СтрокаДерева, СтрокаДерева,
								Результат.ПараметрыКодаМаркировки.ВложенныеУпаковки, Кеш, Детализация, ВозвращаемоеЗначение);
							
							ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
							
						Иначе
							
							ЗаполнитьДеревоУпаковокРекурсивно(
								ДеревоУпаковок, ДанныеСтроки,
								Результат.ПараметрыКодаМаркировки.ВложенныеУпаковки, Кеш, Детализация, ВозвращаемоеЗначение);
							
							ОбновитьКешGTIN(ДанныеСтроки, Кеш.GTIN);
							
						КонецЕсли;
						
					Иначе
						
						Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
							
							ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
							
							Возврат ВозвращаемоеЗначение;
							
						ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки)
							И Не Результат.СодержимоеНедоступно Тогда
							
							ВозвращаемоеЗначение.ТекстОшибки = Результат.ТекстОшибки;
							
							Возврат ВозвращаемоеЗначение;
							
						Иначе
							
							// Коробка без вложений или содержимое недоступно
							СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
							СтрокаДерева.Штрихкод     = СоответствиеКодовМаркировки[КодМаркировки];
							СтрокаДерева.Статус       = ДанныеСтатуса.Статус;
							СтрокаДерева.ИННВладельца = ДанныеСтатуса.ИННВладельца;
							
							СтрокаДерева.СодержимоеНедоступно = Результат.СодержимоеНедоступно;
							
							Кеш.КодыМаркировки.Вставить(КодМаркировки, СтрокаДерева);
							ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					// Статус неопределен => вложений не существует
					СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
					СтрокаДерева.Штрихкод     = СоответствиеКодовМаркировки[КодМаркировки];
					СтрокаДерева.Статус       = ДанныеСтатуса.Статус;
					СтрокаДерева.ИННВладельца = ДанныеСтатуса.ИННВладельца;
					
					Кеш.КодыМаркировки.Вставить(КодМаркировки, СтрокаДерева);
					ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.GTIN           = Кеш.GTIN;
	ВозвращаемоеЗначение.ДеревоУпаковок = ДеревоУпаковок;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос статусов для списка кодов маркировки.
// 
// Параметры:
//  КодыМаркировки - Массив Из Строка - Коды маркировки.
//  СтатусыКодовМаркировкиКеш - Соответствие, Неопределено - Кеш статусов кодов маркировки.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
//	* СтатусыКодовМаркировки - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - Строка - Код маркировки.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ПараметрыКодаМаркировки).
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СтатусыКодовМаркировки(КодыМаркировки, СтатусыКодовМаркировкиКеш = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СоответствиеКодовМаркировки = Новый Соответствие;
	
	ПараметрыЗапроса  = Новый Массив;
	ЗначениеДляПоиска = "";
	
	Для Каждого КодМаркировки Из КодыМаркировки Цикл
		ЗначениеДляПоиска = ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиДляПередачиИСМП(КодМаркировки);
		
		СоответствиеКодовМаркировки.Вставить(КодМаркировки, ЗначениеДляПоиска);
		
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"cis=%1",
				КодироватьСтроку(ЗначениеДляПоиска, СпособКодированияСтроки.КодировкаURL)));
	КонецЦикла;
	
	// Для обхода ошибки, если в составе серийного номера имеется символ ","
	Если КодыМаркировки.Количество() = 1
		И СтрНайти(ЗначениеДляПоиска, ",") Тогда
		ПараметрыЗапроса.Добавить("cis=");
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/facade/cis/cis_list?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				СтатусыПоЗначениямДляПоиска = Новый Соответствие;
				Для Каждого КлючИЗначение Из ДанныеОбработки Цикл
					
					СтатусыПоЗначениямДляПоиска.Вставить(
						КлючИЗначение.Ключ, ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыКодаМаркировки(КлючИЗначение.Значение));
					
				КонецЦикла;
				
				Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
					СтатусыКодовМаркировки = Новый Соответствие;
				Иначе
					СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
				КонецЕсли;
				
				Для Каждого КодМаркировки Из КодыМаркировки Цикл
					
					ЗначениеДляПоиска = СоответствиеКодовМаркировки[КодМаркировки];
					
					ПараметрыКодаМаркировки = СтатусыПоЗначениямДляПоиска[ЗначениеДляПоиска];
					Если ПараметрыКодаМаркировки = Неопределено Тогда
						ПараметрыКодаМаркировки = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыКодаМаркировки();
						ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
					КонецЕсли;
					
					СтатусыКодовМаркировки.Вставить(КодМаркировки, ПараметрыКодаМаркировки);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос статусов для списка кодов маркировки.
// 
// Параметры:
//	КодыМаркировки - Массив Из Строка - Коды маркировки.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
//	* ПараметрыКодаМаркировки - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - Строка - Код маркировки.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ПараметрыКодаМаркировки).
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ПараметрыСредстваИдентификации(КодМаркировки) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыКодаМаркировки",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"cis=%1",
				КодироватьСтроку(
					ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиДляПередачиИСМП(КодМаркировки),
					СпособКодированияСтроки.КодировкаURL)));
				
	URLЗапроса = СтрШаблон(
		"api/v3/facade/identifytools/info?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ПараметрыКодаМаркировки = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыСредстваИдентификации(ДанныеОбработки);
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
				ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос статусов для списка кодов маркировки.
// 
// Параметры:
//	КодыМаркировки - Массив Из Строка - Коды маркировки.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
//	* ПараметрыКодаМаркировки - (См. ИнтерфейсИСМПСлужебный.ПараметрыКодаМаркировки) - Параметры кодов маркировки:
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ПараметрыМаркированнойПродукции(КодМаркировки) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыКодаМаркировки",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"cis=%1",
				КодироватьСтроку(
					ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиДляПередачиИСМП(КодМаркировки),
					СпособКодированияСтроки.КодировкаURL)));
					
	URLЗапроса = СтрШаблон(
		"api/v3/facade/marked_products/info?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
		
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ПараметрыКодаМаркировки = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыМаркированногоТовара(ДанныеОбработки);
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Найти средства идентификации организации по отбору.
// 
// Параметры:
//	ПараметрыОтбора - Структура - Параметры отбора
//	 См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыОтбораСредствИдентификации.
//	НомерСтраницы - Число - Номер страницы.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
//	* КодыМаркировки - Соответствие Из КлючИЗначение - Соответствие кода маркировки и параметров статуса:
//		** Ключ     - Строка - Код маркировки.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ПараметрыКодаМаркировки). - Параметр статуса.
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СписокСредствИдентификации(ПараметрыОтбора = Неопределено, НомерСтраницы = 1) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("КодыМаркировки",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Если ПараметрыОтбора <> Неопределено Тогда
		Если ПараметрыОтбора.Свойство("ИННПроизводителя") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"producerInn=%1",
					ПараметрыОтбора.ИННПроизводителя));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("КодМаркировки") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"cis=%1",
					КодироватьСтроку(
						ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(ПараметрыОтбора.КодМаркировки),
						СпособКодированияСтроки.КодировкаURL)));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("СерийныйНомер") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"sn=%1",
					ПараметрыОтбора.СерийныйНомер));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("GTIN") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"gtin=%1",
					ПараметрыОтбора.GTIN));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("КодТНВЭД") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"tnVed10=%1",
					ПараметрыОтбора.КодТНВЭД));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Статус") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"cisStatus=%1",
					ИнтерфейсИСМПСлужебный.СтатусКодаМаркировки(ПараметрыОтбора.Статус)));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ТипЭмиссии") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"emissionType=%1",
					ПараметрыОтбора.ТипЭмиссии));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Интервал") Тогда
			Если ЗначениеЗаполнено(ПараметрыОтбора.НачалоПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"emissionDateFrom=%1",
						ИнтеграцияИС.ДатаСЧасовымПоясом(ПараметрыОтбора.НачалоПериода)));
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыОтбора.КонецПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"emissionDateTo=%1",
						ИнтеграцияИС.ДатаСЧасовымПоясом(ПараметрыОтбора.КонецПериода)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"page=%1",
			Формат(НомерСтраницы, "ЧН=0; ЧГ=0")));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			100));
	
	URLЗапроса = СтрШаблон(
		"api/v3/facade/identifytools/listV2?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				КодыМаркировки = Новый Соответствие;
				Для Каждого ЭлементДанных Из ДанныеОбработки["results"] Цикл
					
					ПараметрыСредстваИдентификации = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыСредстваИдентификации(ЭлементДанных);
					
					КодыМаркировки.Вставить(
						ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(ЭлементДанных["cis"]),
						ПараметрыСредстваИдентификации);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.КодыМаркировки = КодыМаркировки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Найти маркированные товары по отбору.
// 
// Параметры:
//	ПараметрыОтбора - Структура - Параметры отбора
//	 См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыОтбораСредствИдентификации.
//	НомерСтраницы - Число - Номер страницы.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
//	* КодыМаркировки - Соответствие Из КлючИЗначение - Соответствие кода маркировки и параметров статуса:
//		** Ключ     - Строка - Код маркировки.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ПараметрыМаркированногоТовара). - Параметр статуса.
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СписокМаркированнойПродукции(ПараметрыОтбора = Неопределено, НомерСтраницы = 1) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("КодыМаркировки",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Если ПараметрыОтбора <> Неопределено Тогда
		Если ПараметрыОтбора.Свойство("ИННПроизводителя") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"producerInn=%1",
					ПараметрыОтбора.ИННПроизводителя));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("КодМаркировки") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"cis=%1",
					КодироватьСтроку(
						ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(ПараметрыОтбора.КодМаркировки),
						СпособКодированияСтроки.КодировкаURL)));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("СерийныйНомер") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"sn=%1",
					ПараметрыОтбора.СерийныйНомер));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("GTIN") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"gtin=%1",
					ПараметрыОтбора.GTIN));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("КодТНВЭД") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"tnVed10=%1",
					ПараметрыОтбора.КодТНВЭД));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Статус") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"cisStatus=%1",
					ИнтерфейсИСМПСлужебный.СтатусКодаМаркировки(ПараметрыОтбора.Статус)));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ТипЭмиссии") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"emissionType=%1",
					ПараметрыОтбора.ТипЭмиссии));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Интервал") Тогда
			Если ЗначениеЗаполнено(ПараметрыОтбора.НачалоПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"emissionDateFrom=%1",
						ИнтеграцияИС.ДатаСЧасовымПоясом(ПараметрыОтбора.НачалоПериода)));
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыОтбора.КонецПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"emissionDateTo=%1",
						ИнтеграцияИС.ДатаСЧасовымПоясом(ПараметрыОтбора.КонецПериода)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"page=%1",
			Формат(НомерСтраницы, "ЧН=0; ЧГ=0")));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			100));
	
	URLЗапроса = СтрШаблон(
		"api/v3/facade/marked_products/listV2?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				КодыМаркировки = Новый Соответствие;
				Для Каждого ЭлементДанных Из ДанныеОбработки["results"] Цикл
					
					ПараметрыМаркированногоТовара = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыМаркированногоТовара(ЭлементДанных);
					
					КодыМаркировки.Вставить(
						ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(ЭлементДанных["cis"]),
						ПараметрыМаркированногоТовара);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.КодыМаркировки = КодыМаркировки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрПродукции

// Выполнить запрос карточки продукции по идентификатору.
// В результате успешного выполнения запроса в ответе вернется информация о продукте и ее производителе.
// Адрес URL запроса заканчивается идентификатором продукта из реестра продукции.
// 
// Параметры:
//	Идентификатор - Строка - Идентификатор карточки продукции в ИС МП.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
//	* ДанныеПродукции - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции). - Данные продукции
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьКарточкуПродукции(Идентификатор) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/product/%1",
		КодироватьСтроку(Идентификатор, СпособКодированияСтроки.КодировкаURL));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ДанныеОбработки);
				
				ВозвращаемоеЗначение.ДанныеПродукции = ДанныеПродукции;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные продукции по штрихкоду EAN.
// 
// Параметры:
// 	Значение - Массив Из Строка, Строка - GTIN для которых необходимо получить представление и прочие данные.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции) - Реквизиты продукции:
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция ДанныеПродукцииПоШтрихкодуEAN(Значение) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса              = Новый Массив;
	ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ДанныеПродукцииПоШтрихкодуEAN.Вставить(Значение, Неопределено);
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"gtins=%1",
				ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(Значение)));
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого ШтрихкодEAN Из Значение Цикл
			ДанныеПродукцииПоШтрихкодуEAN.Вставить(ШтрихкодEAN, Неопределено);
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"gtins=%1",
					ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN)));
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/product/info?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
					
					ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ЭлементДанных);
					
					ДанныеПродукцииПоШтрихкодуEAN.Вставить(
						ШтрихкодированиеИС.ШтрихкодEANИзGTIN(ДанныеПродукции.GTIN),
						ДанныеПродукции);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить наименования продукции по штрихкоду EAN.
// 
// Параметры:
// 	Значение - Массив Из Строка, Строка - GTIN для которых необходимо получить представление и прочие данные.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и наименования продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - Строка - Наименование продукции.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НаименованияПродукцииПоШтрихкодуEAN(Значение) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии",      КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",            Неопределено);
	ВозвращаемоеЗначение.Вставить("НаименованиеПродукцииПоШтрихкодуEAN", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                         "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса                    = Новый Массив;
	НаименованиеПродукцииПоШтрихкодуEAN = Новый Соответствие;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		НаименованиеПродукцииПоШтрихкодуEAN.Вставить(Значение, Неопределено);
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"gtins=%1",
				ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(Значение)));
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого ШтрихкодEAN Из Значение Цикл
			НаименованиеПродукцииПоШтрихкодуEAN.Вставить(ШтрихкодEAN, Неопределено);
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"gtins=%1",
					ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN)));
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/product/names?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Для Каждого КлючИЗначение Из ДанныеОбработки Цикл
					
					НаименованиеПродукцииПоШтрихкодуEAN.Вставить(
						ШтрихкодированиеИС.ШтрихкодEANИзGTIN(КлючИЗначение.Ключ),
						КлючИЗначение.Значение);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.НаименованиеПродукцииПоШтрихкодуEAN = НаименованиеПродукцииПоШтрихкодуEAN;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить список продукции по ИНН производителя.
// 
// Параметры:
// 	ИНН - Строка - ИНН производителя.
// 	НомерСтраницы - Число - Номер страницы.
// 
// Возвращаемое значение:
// 	Структура - Структура со свойствами:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции).
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НайтиПродукциюПоИННПроизводителя(ИНН, НомерСтраницы = 0) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"inn=%1",
			КодироватьСтроку(ИНН, СпособКодированияСтроки.КодировкаURL)));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"page=%1",
			Формат(НомерСтраницы, "ЧН=0; ЧГ=0")));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			100));
	
	URLЗапроса = СтрШаблон(
		"api/v3/product/search?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
				Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
					
					ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ЭлементДанных);
					
					ДанныеПродукцииПоШтрихкодуEAN.Вставить(
						ШтрихкодированиеИС.ШтрихкодEANИзGTIN(ДанныеПродукции.GTIN),
						ДанныеПродукции);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос списка продукции.
// В результате успешного выполнения запроса в ответе вернется список продукции,
// содержащие id - идентификатор продукта, gtin - международный товарный идентификатор и producerINN - ИНН производителя. 
// 
// Параметры:
// 	ПараметрыОтбора - Структура - Параметры отбора:
// 	 * Наименование  - Строка - Наименование.
// 	 * ИНН           - Строка - ИНН производителя.
// 	 * ТорговаяМарка - Строка - Наименование торговой марки.
// 	 * Модель        - Строка - Наименование модели производителя.
// 	 * ТипУпаковки   - Строка - ТипУпаковки.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции)
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НайтиПродукциюПоОтбору(ПараметрыОтбора) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = "api/v3/product/search";
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
				Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
					
					ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ЭлементДанных);
					
					ДанныеПродукцииПоШтрихкодуEAN.Вставить(
						ШтрихкодированиеИС.ШтрихкодEANИзGTIN(ДанныеПродукции.GTIN),
						ДанныеПродукции);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить список продукции по части наименования.
// 
// Параметры:
// 	СтрокаПоиска - Строка - Часть наименования продукции.
// 	НомерСтраницы - Число - Номер страницы.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции).
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НайтиПродукциюПоЧастиНаименования(СтрокаПоиска, НомерСтраницы = 1) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"text=%1",
			СтрокаПоиска));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"page=%1",
			Формат(НомерСтраницы, "ЧН=0; ЧГ=0")));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			100));
	
	URLЗапроса = СтрШаблон(
		"api/v3/product/suggestions?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
				Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
					
					ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ЭлементДанных);
					
					ДанныеПродукцииПоШтрихкодуEAN.Вставить(
						ШтрихкодированиеИС.ШтрихкодEANИзGTIN(ДанныеПродукции.GTIN),
						ДанныеПродукции);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрДокументов

// Получить список документов по отбору.
// 
// Параметры:
// 	* ПараметрыОтбора - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыОтбораДокументов)
// 	                  - Неопределено
// 	* НомерСтраницы - Число - Номер страницы.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
//	* НайденныеДокументы - Массив Из (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиДокумента). - Массив 
//	                       найденых документов.
//	                     - Неопределено - Если при получении данных возникла ошибка.
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция НайтиДокументыПоОтбору(ПараметрыОтбора = Неопределено, НомерСтраницы = 1) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("НайденныеДокументы",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Если ПараметрыОтбора <> Неопределено Тогда
		Если ПараметрыОтбора.Свойство("ИНН") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"participantInn=%1",
					ПараметрыОтбора.ИНН));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("СтатусДокумента") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"documentStatus=%1",
					ПараметрыОтбора.СтатусДокумента));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ФорматДокумента") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"documentFormat=%1",
					ПараметрыОтбора.ФорматДокумента));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ТипЗапроса") Тогда
			Если ПараметрыОтбора.ТипЗапроса = Перечисления.ТипыЗапросовИС.Входящий Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"inputFormat=%1",
						"true"));
			ИначеЕсли ПараметрыОтбора.ТипЗапроса = Перечисления.ТипыЗапросовИС.Исходящий Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"inputFormat=%1",
						"false"));
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ТипДокумента") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"documentType=%1",
					ПараметрыОтбора.ТипДокумента));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Идентификатор") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"number=%1",
					ПараметрыОтбора.Идентификатор));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Интервал") Тогда
			Если ЗначениеЗаполнено(ПараметрыОтбора.НачалоПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"DateFrom=%1",
						ИнтеграцияИС.ДатаСЧасовымПоясом(ПараметрыОтбора.НачалоПериода)));
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыОтбора.КонецПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"DateTo=%1",
						ИнтеграцияИС.ДатаСЧасовымПоясом(ПараметрыОтбора.КонецПериода)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"page=%1",
			Формат(НомерСтраницы, "ЧН=0; ЧГ=0")));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			100));
	
	URLЗапроса = СтрШаблон(
		"/api/v3/facade/doc/listV2?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Ложь);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				НайденныеДокументы = Новый Массив;
				
				Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
					НайденныеДокументы.Добавить(
						ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиДокумента(
							ЭлементДанных));
				КонецЦикла;
				
				ВозвращаемоеЗначение.НайденныеДокументы = НайденныеДокументы;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить документ по идентификатору.
// 
// Параметры:
// 	Идентификатор - Строка - Идентификатор документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* РеквизитыДокумента - Структура - Данные документа.
// 	                     - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция СтатусОбработкиДокументаПоИдентификатору(Идентификатор) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыДокументовИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/facade/doc/%1/body",
		Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Статус = ИнтерфейсИСМПСлужебный.СтатусДокумента(ДанныеОбработки.status);
				
				Если Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки 
					Или Статус = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
					
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
					
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "errors") Тогда
						ВозвращаемоеЗначение.ТекстОшибки = СтрСоединить(ДанныеОбработки.errors, Символы.ПС);
					Иначе
						ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = '<Описание ошибки отсутствует>'");
					КонецЕсли;
				
				ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
				ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Проверен Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				КонецЕсли;
				
				ВозвращаемоеЗначение.Статус          = Статус;
				ВозвращаемоеЗначение.СтатусОбработки = СтатусОбработки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ЗаказыНаЭмиссиюКодовМаркировки

// Получить список документов по отбору.
// 
// Параметры:
// 	* НомерСтраницы - Число - Номер страницы
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
//	* НайденныеДокументы - Массив Из 
//	  (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиЗаказаНаЭмиссиюКодовМаркировки). - Массив найденых
//	                                                                                            документов.
//	                     - Неопределено - Если при получении данных возникла ошибка.
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция НайтиЗаказыНаЭмиссиюКодовМаркировки(НомерСтраницы = 1) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("НайденныеДокументы",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"page=%1",
			Формат(НомерСтраницы, "ЧН=0; ЧГ=0")));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			100));
	
	URLЗапроса = СтрШаблон(
		"/api/v3/facade/order/all?%1",
		СтрСоединить(ПараметрыЗапроса, "&"));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Ложь);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				НайденныеДокументы = Новый Массив;
				
				Для Каждого ЭлементДанных Из ДанныеОбработки.subOrders Цикл
					НайденныеДокументы.Добавить(
						ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиЗаказаНаЭмиссиюКодовМаркировки(
							ЭлементДанных));
				КонецЦикла;
				
				ВозвращаемоеЗначение.НайденныеДокументы = НайденныеДокументы;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПодписатьЗаказНаЭмиссиюКодовМаркировки(Идентификатор, ТелоЗапроса) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("РеквизитыДокумента",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/facade/order/%1",
		Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапроса, КлючСессии, "PUT", ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.РеквизитыДокумента = Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗаказНаЭмиссиюКодовМаркировкиПоИдентификатору(Идентификатор) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("РеквизитыДокумента",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/facade/order/%1/details",
		Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.РеквизитыДокумента = Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить документ по идентификатору.
// 
// Параметры:
// 	Идентификатор - Строка - Идентификатор документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* РеквизитыДокумента - Структура - Данные документа.
// 	                     - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция СтатусОбработкиЗаказаКодовМаркировкиПоИдентификатору(Идентификатор) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиЗаказаНаЭмиссиюКодовМаркировки);
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/facade/order/%1/details",
		Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Статус = ИнтерфейсИСМПСлужебный.СтатусЗаказаНаЭмиссиюКодовМаркировки(ДанныеОбработки.order_status);
				
				Если    Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаПроверкаФорматаНеПройдена
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаКонтрольноЛогическаяПроверкаНеПройдена
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОтклоненОператором
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОбработки
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Аннулирован
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка Тогда
					
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
					
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "errors") Тогда
						ВозвращаемоеЗначение.ТекстОшибки = СтрСоединить(ДанныеОбработки.errors, Символы.ПС);
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "order_status_details") Тогда
						ВозвращаемоеЗначение.ТекстОшибки = ДанныеОбработки.order_status_details;
					Иначе
						ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = '<Описание ошибки отсутствует>'");
					КонецЕсли;
					
				ИначеЕсли Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Выполнен
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиОтгружены Тогда
					
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
					
				Иначе
					
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
					
				КонецЕсли;
				
				ВозвращаемоеЗначение.Статус          = Статус;
				ВозвращаемоеЗначение.СтатусОбработки = СтатусОбработки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами

Функция СоздатьДокументПоСообщению(Операция, ТекстСообщенияJSON, Подпись) Экспорт
	
	ДокументBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ТекстСообщенияJSON);
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("document",        ДокументBase64);
		ТелоЗапроса.Вставить("document_format", "MANUAL");
		ТелоЗапроса.Вставить("signature",       ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
		
		URLЗапроса = "api/v3/facade/order";
		
		Возврат СоздатьЗаказНаЭмиссиюКодовМаркировки(
			URLЗапроса, ТелоЗапроса, Операция);
		
	Иначе
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("product_document", ДокументBase64);
		ТелоЗапроса.Вставить("document_format",  "MANUAL");
		ТелоЗапроса.Вставить("signature",        ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
		ТелоЗапроса.Вставить("type",             ИнтерфейсИСМПСлужебный.ВидОперации(Операция));
		
		URLЗапроса = "api/v3/lk/documents/create?pg=shoes";
		
		Возврат СоздатьДокумент(URLЗапроса, ТелоЗапроса, Операция);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РеестрКонтрагентов

// Найти контрагентов по части наименования.
// 
// Параметры:
// 	Значение - Строка - Часть наименования контрагента.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* НайденныеКонтрагенты - Массив Из (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеКонтрагента).
// 	                       - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НайтиКонтрагентовПоЧастиНаименования(Значение) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("НайденныеКонтрагенты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/org/suggestions?name=%1",
		Значение);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				НайденныеКонтрагенты = Новый Массив;
				
				Для Каждого ЭлементДанных Из ДанныеОбработки Цикл
					
					ДанныеКонтрагента = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеКонтрагента(ЭлементДанных);
					
					НайденныеКонтрагенты.Добавить(ДанныеКонтрагента);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.НайденныеКонтрагенты = НайденныеКонтрагенты;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрСУЗ

// Выполнить запрос карточки продукции по идентификатору.
// В результате успешного выполнения запроса в ответе вернется информация о продукте и ее производителе.
// Адрес URL запроса заканчивается идентификатором продукта из реестра продукции.
// 
// Параметры:
//	Идентификатор - Строка - Идентификатор карточки продукции в ИС МП.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
//	* ДанныеСУЗ - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции). - Данные СУЗ
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьИдентификаторАктивногоСУЗ(Организация) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Идентификатор",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = "api/v3/facade/suz/registry";
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.Идентификатор = ДанныеОбработки.suz_id;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить документ по идентификатору.
// 
// Параметры:
// 	Идентификатор - Строка - Идентификатор документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезульатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* РеквизитыДокумента - Структура - Данные документа.
// 	                     - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция СоздатьДокумент(URLЗапроса, ТелоЗапроса, Операция)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Операция);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапроса, КлючСессии, "POST", ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200
			Или РезультатОтправкиЗапроса.КодСостояния = 201 Тогда
			
			Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON) Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки     = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				ВозвращаемоеЗначение.ИдентификаторЗаявки = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить документ по идентификатору.
// 
// Параметры:
// 	Идентификатор - Строка - Идентификатор документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* РеквизитыДокумента - Структура - Данные документа.
// 	                     - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция СоздатьЗаказНаЭмиссиюКодовМаркировки(URLЗапроса, ТелоЗапроса, Операция)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Операция);
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапроса, КлючСессии, "POST", ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 202 Тогда
			
			ВозвращаемоеЗначение.СтатусОбработки     = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
			ВозвращаемоеЗначение.ИдентификаторЗаявки = РезультатОтправкиЗапроса.Объект.order_id;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьДеревоУпаковокРекурсивно(ДеревоУпаковок, ДанныеВерхнегоУровня, КодыМаркировкиУпаковок, Кеш, Детализация, ВозвращаемоеЗначение)
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("GTIN",         NULL);
	ДанныеСтроки.Вставить("ИННВладельца", NULL);
	
	КоличествоПотребительскихУпаковок = 0;
	
	Для Каждого КлючИЗначение Из КодыМаркировкиУпаковок Цикл
		
		КодМаркировки           = КлючИЗначение.Ключ;
		ПараметрыКодаМаркировки = КлючИЗначение.Значение;
		
		GTIN = Неопределено;
		Если Не ШтрихкодированиеИСМПКлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки, GTIN) Тогда // Логистическая упаковка
			
			Результат = ПараметрыСредстваИдентификации(КодМаркировки);
			Если Результат.ПараметрыКодаМаркировки <> Неопределено
				И Результат.ПараметрыКодаМаркировки.ВложенныеУпаковки <> Неопределено
				И Результат.ПараметрыКодаМаркировки.ВложенныеУпаковки.Количество() > 0 Тогда
				
				Если Не ЗначениеЗаполнено(Детализация)
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.КоробаПотребительскиеУпаковки
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная Тогда
					
					ИнтерфейсИСМПСлужебный.ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировки, Кеш.КодыМаркировки);
					
					СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
					СтрокаДерева.Штрихкод     = ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(КодМаркировки);
					СтрокаДерева.Статус       = ПараметрыКодаМаркировки.Статус;
					СтрокаДерева.ИННВладельца = ПараметрыКодаМаркировки.ИННВладельца;
					
					ЗаполнитьДеревоУпаковокРекурсивно(
						СтрокаДерева, СтрокаДерева, Результат.ПараметрыКодаМаркировки.ВложенныеУпаковки,
						Кеш, Детализация, ВозвращаемоеЗначение);
					
					ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "GTIN");
					ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "ИННВладельца");
					
					КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок  + СтрокаДерева.КоличествоПотребительскихУпаковок;
					
					Кеш.КодыМаркировки.Вставить(КодМаркировки, СтрокаДерева);
					ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
					
				Иначе
					
					ДанныеСтроки = Новый Структура;
					ДанныеСтроки.Вставить("GTIN",                              "");
					ДанныеСтроки.Вставить("ИННВладельца",                      ПараметрыКодаМаркировки.ИННВладельца);
					ДанныеСтроки.Вставить("Статус",                            ПараметрыКодаМаркировки.Статус);
					ДанныеСтроки.Вставить("КоличествоПотребительскихУпаковок", 0);
					
					ЗаполнитьДеревоУпаковокРекурсивно(
						ДеревоУпаковок, ДанныеСтроки, Результат.ПараметрыКодаМаркировки.ВложенныеУпаковки,
						Кеш, Детализация, ВозвращаемоеЗначение);
					
					КоличествоПотребительскихУпаковок  = КоличествоПотребительскихУпаковок  + ДанныеСтроки.КоличествоПотребительскихУпаковок;
					
					ОбновитьКешGTIN(ДанныеСтроки, Кеш.GTIN);
					
				КонецЕсли;
				
			Иначе
				
				Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
					
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
					
				ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
					
					ВозвращаемоеЗначение.ТекстОшибки = Результат.ТекстОшибки;
					
				Иначе
					
					// Коробка без вложений?
					СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
					СтрокаДерева.Штрихкод     = КодМаркировки;
					СтрокаДерева.Статус       = Результат.ПараметрыКодаМаркировки.Статус;
					СтрокаДерева.ИННВладельца = Результат.ПараметрыКодаМаркировки.ИННВладельца;
					
					Кеш.КодыМаркировки.Вставить(КодМаркировки, СтрокаДерева);
					ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // Потребительская упаковка
			
			ИнтерфейсИСМПСлужебный.ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировки, Кеш.КодыМаркировки);
			
			Если Детализация = Неопределено
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.КоробаПотребительскиеУпаковки Тогда
				
				СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
				СтрокаДерева.Штрихкод     = ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(КодМаркировки);
				СтрокаДерева.Статус       = ПараметрыКодаМаркировки.Статус;
				СтрокаДерева.ИННВладельца = ПараметрыКодаМаркировки.ИННВладельца;
				СтрокаДерева.GTIN         = GTIN;
				
				СтрокаДерева.КоличествоПотребительскихУпаковок = 1;
				
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "ИННВладельца");
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "GTIN");
				
				Кеш.КодыМаркировки.Вставить(КодМаркировки, СтрокаДерева);
				ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
				
			Иначе
				
				СтрокаДереваВременная = Новый Структура;
				СтрокаДереваВременная.Вставить("GTIN",         GTIN);
				СтрокаДереваВременная.Вставить("ИННВладельца", ПараметрыКодаМаркировки.ИННВладельца);
				
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДереваВременная, "ИННВладельца");
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДереваВременная, "GTIN");
				
				ОбновитьКешGTIN(СтрокаДереваВременная, Кеш.GTIN);
				
			КонецЕсли;
			
			КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеВерхнегоУровня.ИННВладельца                      = ДанныеСтроки.ИННВладельца;
	ДанныеВерхнегоУровня.GTIN                              = ДанныеСтроки.GTIN;
	ДанныеВерхнегоУровня.КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок;
	
КонецПроцедуры

Процедура ОбновитьКешGTIN(СтрокаДерева, КешGTIN)
	
	Если ПустаяСтрока(СтрокаДерева.GTIN) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("GTIN", СтрокаДерева.GTIN);
	НайденныеСтроки = КешGTIN.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрокаКешаGTIN = КешGTIN.Добавить();
		НоваяСтрокаКешаGTIN.GTIN = СтрокаДерева.GTIN;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти