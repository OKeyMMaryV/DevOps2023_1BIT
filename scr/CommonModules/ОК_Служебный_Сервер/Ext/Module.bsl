Процедура ФоноваяТрансляция(ТаблицаДокументов, НомерПотока, Источники, Приемники, ВестиПротоколТрансляции) Экспорт

	ТекстСообщения = НСтр("ru = 'Фоновая трансляция. Начало выполнения'"); 
    ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Поток: " + НомерПотока);
	

	Для каждого Стр из ТаблицаДокументов Цикл
		
		Отказ        = Ложь;
		флЕстьОшибки = Ложь;
		Протокол     = "";
		
		// заполним перечень источников и приемников
		МассивИсточники = Новый Массив;
		МассивПриемники = Новый Массив;
		флВсеИсточники  = Ложь;
		флВсеПриемники  = Ложь;
		
		флВсеИсточники = Истина;
		флВсеПриемники = Истина;
			
		МассивИсточники = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Источники.ВыгрузитьКолонку("ОбъектСистемы"));
		МассивПриемники = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Приемники.ВыгрузитьКолонку("ОбъектСистемы"));
		КолВоИсточники  = МассивИсточники.Количество();
		КолВоПриемники  = МассивПриемники.Количество();
		
		Если КолВоИсточники = 0 Тогда
			МассивИсточники = Неопределено;
		КонецЕсли;
		
		Если КолВоПриемники = 0 Тогда
			МассивПриемники = Неопределено;
		КонецЕсли;
		
		ДокументОбъект = Стр.Объект.ПолучитьОбъект();
		
		Если НЕ бит_ОбщегоНазначения.ЗаблокироватьОбъект(ДокументОбъект,Строка(Стр.Объект),,"Все") Тогда
			
			Протокол     = Протокол+НСтр("Не удалось заблокировать объект ""%1%""!");
			Протокол     = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Протокол,Строка(Стр.Объект));
			флЕстьОшибки = Истина;
			
		КонецЕсли; 
		
		Если НЕ флЕстьОшибки Тогда
		
			Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
				
				// при наличиии механизма контроля закрытого периода сохраним движения для последующего анализа
				бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект,Отказ,РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				
			КонецЕсли; 
			
			// Выполним трансляцию движений.
			Протокол = бит_МеханизмТрансляции.ВыполнитьТрансляцию(ДокументОбъект
																	, МассивИсточники
																	, МассивПриемники
																	, Истина
																	, Перечисления.бит_РежимыТрансляции.Ручной
																	, ВестиПротоколТрансляции);

			Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
				
				// при наличиии механизма контроля закрытого периода сформируем корректирующие проводки			
				бит_КонтрольЗакрытогоПериода.КонтрольПриОбработкеПроведения(ДокументОбъект,Отказ,РежимЗаписиДокумента.Проведение,Истина);
				
			КонецЕсли; 
			
			Если ДокументОбъект.Заблокирован() Тогда
				
				ДокументОбъект.Разблокировать();
				
			КонецЕсли; 		
			
			Стр.Обработано = Истина;
		Иначе
			Стр.Обработано = Ложь;
			
		КонецЕсли;
		
		
	КонецЦикла;   
	
	Если ВестиПротоколТрансляции Тогда 
		;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Фоновая трансляция. Завершение выполнения'"); 
	ЗаписьЖурналаРегистрации(ТекстСообщения 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Поток: " + НомерПотока);
	
	
КонецПроцедуры // ФоноваяТрансляция()

Процедура ФоноваяОтменаТрансляции(ПереченьДокументов, НомерПотока, Источники, Приемники, ВестиПротоколТрансляции) Экспорт 

	Если ПереченьДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получим массив документов для выполнения отмены трансляции.
	МассивДокументов = ПереченьДокументов.ВыгрузитьКолонку("Документ");
	КолВоДокументов  = МассивДокументов.Количество();
	
	Если КолВоДокументов = 0 Тогда
		бит_ОбщегоНазначения.бит_Сообщить("Не указаны документы для отмены трансляции движений!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	МассивПриемники = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Приемники.ВыгрузитьКолонку("ОбъектСистемы"));
	КолВоПриемники  = МассивПриемники.Количество();
	
	Если КолВоПриемники = 0 Тогда
		бит_ОбщегоНазначения.бит_Сообщить("Не указаны приемники для отмены трансляции движений!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
		
    ЗаписьЖурналаРегистрации("Фоновая отмена трансляции. Начало выполнения" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 ,//Метаданные() 
                        	 ,
                        	 ,"Поток: " + НомерПотока);	
	
	Счетчик = 0;
	
	Для Каждого ТекДокумент Из МассивДокументов Цикл
		
		Счетчик = Счетчик + 1;
		Отказ   = Ложь;
		
		ДокументОбъект = ТекДокумент.ПолучитьОбъект();
		
		Если НЕ бит_ОбщегоНазначения.ЗаблокироватьОбъект(ДокументОбъект,Строка(ТекДокумент),,"Все") Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
			
			// при наличиии механизма контроля закрытого периода сохраним движения для последующего анализа
			Выполнить("бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект,Отказ,РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный)");
		
		КонецЕсли; 		
		
		// Выполним отмену трансляции движений.
		ОтменитьТрансляцию(ДокументОбъект.Ссылка, МассивПриемники, Счетчик);
		
		Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
			
			// при наличиии механизма контроля закрытого периода сформируем корректирующие проводки			
			Выполнить("бит_КонтрольЗакрытогоПериода.КонтрольПриУдаленииПроведения(ДокументОбъект,Отказ)");
		
		КонецЕсли; 
		
		Если ДокументОбъект.Заблокирован() Тогда
		
			 ДокументОбъект.Разблокировать();
		
		КонецЕсли; 
		
	КонецЦикла; // Для Каждого ТекДокумент Из МассивДокументов Цикл
	
    ЗаписьЖурналаРегистрации("Фоновая отмена трансляции. Завершение выполнения" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 ,//Метаданные() 
                        	 ,
                        	 ,"Поток: " + НомерПотока);	
	
	
КонецПроцедуры

Функция ОтменитьТрансляцию(ДокументСсылка, РегистрыПриемники, Позиция)
	
//	ОповеститьПользователя(Строка(Позиция) + ") По документу: " + Строка(ДокументСсылка));
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ДействиеВыполнено = Истина;
	
	Для Каждого ТекРегистр Из РегистрыПриемники Цикл
		
		Если ТекРегистр.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии Тогда
			МенеджерРегистра = бит_ОбщегоНазначения.ПолучитьМенеджер("РегистрыБухгалтерии");
			ПредставлеРегистра = "движения регистра бухгалтерии";
			
		ИначеЕсли ТекРегистр.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления Тогда
			МенеджерРегистра = бит_ОбщегоНазначения.ПолучитьМенеджер("РегистрыНакопления");
			ПредставлеРегистра = "движения регистра накопления";
			
		Иначе
			МенеджерРегистра = Неопределено;
		КонецЕсли;
		
		Если МенеджерРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НаборДляОчистки = МенеджерРегистра[ТекРегистр.ИмяОбъекта].СоздатьНаборЗаписей();
		НаборДляОчистки.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборДляОчистки.Прочитать();
		
		Если НаборДляОчистки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборДляОчистки.Очистить();
				
		// Запишем очищенный набор записей.
		флВыполненаЗапись = бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборДляОчистки);
		Если Не флВыполненаЗапись Тогда
			
			Если ДействиеВыполнено Тогда
				ДействиеВыполнено = Ложь;
			КонецЕсли;
			
			// Не успешная запись.
//			ОповеститьПользователя("	- не отменены " + ПредставлеРегистра + ": """ + ТекРегистр.Наименование + """.");
			
		Иначе
			// Успешная запись.
//			ОповеститьПользователя("	- отменены " + ПредставлеРегистра + ": """ + ТекРегистр.Наименование + """.");
			
			Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыСведений.бит_СоответствиеЗаписейТрансляции) Тогда
				
				// очистим соответствие номеров движений
				НаборСоответствие = РегистрыСведений.бит_СоответствиеЗаписейТрансляции.СоздатьНаборЗаписей();
				НаборСоответствие.Отбор.Регистратор.Установить(ДокументСсылка);
				НаборСоответствие.Прочитать();
				
				бит_МеханизмТрансляции.ОчиститьСоответствиеДвижений(НаборСоответствие,,ТекРегистр);
				
				бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборСоответствие);			
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДействиеВыполнено;
	
КонецФункции // ОтменитьТрансляцию()

Процедура ЗагрузкаДанныхИзАксапты() Экспорт

//Загрузка данных из Аксапты	
    ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало загрузки");
	
	Обработка		= Обработки.ОК_ЗагрузкаДанныхИзАксапты.Создать();
	Обработка.ЗагрузитьГруппу("");

    ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение загрузки");
							 
//Объект в сторно закупок
	// ЗаписьЖурналаРегистрации("Объект в сторно закупок. Начало" 
	//						 ,УровеньЖурналаРегистрации.Информация 
	//						 , 
	//						 ,
	//						 ,"Начало");
	//						 
	//Обработка		= Обработки.ОК_ОбъектВСторноЗакупок.Создать();
	//Обработка.ВыполнитьОбработку();

	//
	//ЗаписьЖурналаРегистрации("Объект в сторно закупок. Завершение" 
	//						 ,УровеньЖурналаРегистрации.Информация 
	//						 , 
	//						 ,
	//						 ,"Завершение");


//Трансляция загруженных данных из Аксапты							 
    ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало трансляции");
							 
	Обработка		= Обработки.ОК_ТрансляцияОперацииАксапты.Создать();
	Обработка.РучнаяТрансляцияЗагруженныхДанныхИзАксапты();

	
    ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение трансляции");
							 
//Снятие лишних флагов "Загружено с ошибкой"							 
    ЗаписьЖурналаРегистрации("Снятие лишних флагов Загружено с ошибкой. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало");
							 
	Обработка		= Обработки.ОК_СнятиеЛишнихЗагруженоСОшибкой.Создать();
	Обработка.СнятьФлаги();

	
    ЗаписьЖурналаРегистрации("Снятие лишних флагов Загружено с ошибкой. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение");

КонецПроцедуры //ЗагрузкаДанныхИзАксапты()

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-23 (#3621)
Процедура ЗагрузкаДанныхИзАксапты_СУстановкойСвязиПоФВБ() Экспорт
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-19 (#3415)
	НачалоЗагрузкиДанных = ТекущаяДата();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-19 (#3415)

	//Загрузка данных из Аксапты	
    ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало загрузки");
	
	Обработка		= Обработки.ОК_ЗагрузкаДанныхИзАксапты.Создать();
	Обработка.ЗагрузитьГруппу("");

    ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение загрузки");

//Трансляция загруженных данных из Аксапты							 
    ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало трансляции");
							 
	Обработка		= Обработки.ОК_ТрансляцияОперацииАксапты.Создать();
	Обработка.РучнаяТрансляцияЗагруженныхДанныхИзАксапты();

	
    ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение трансляции");
							 
//Снятие лишних флагов "Загружено с ошибкой"							 
    ЗаписьЖурналаРегистрации("Снятие лишних флагов Загружено с ошибкой. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало");
							 
	Обработка		= Обработки.ОК_СнятиеЛишнихЗагруженоСОшибкой.Создать();
	Обработка.СнятьФлаги();

	
    ЗаписьЖурналаРегистрации("Снятие лишних флагов Загружено с ошибкой. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение");

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-19 (#3415)
	ОкончаниеЗагрузкиДанных = ТекущаяДата();
	
	МассивДокументовОА = ПолучитьМассивДокументовОАПоДатеЗагрузки(НачалоЗагрузкиДанных, ОкончаниеЗагрузкиДанных);
	
	бит_РегламентныеЗадания.СвязкаОперацийАксаптыСФВБ(МассивДокументовОА);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-19 (#3415)
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-23 (#3621)

//ОКЕЙ Лобанов В.И. (СофтЛаб) Начало 2020-04-18 (#3532)
//Процедура ПересчетИтогов() Экспорт

//	Для Каждого Рег из Метаданные.РегистрыБухгалтерии Цикл 
//		#Если Клиент Тогда
//			ОбработкаПрерыванияПользователя();
//		#КонецЕсли
//	    ЗаписьЖурналаРегистрации("Пересчет итогов. Начало" 
//	                        	 ,УровеньЖурналаРегистрации.Информация 
//	                        	 , 
//	                        	 ,
//	                        	 ,"Регистр " + Рег.Имя);
//	
//		РегистрыБухгалтерии[Рег.Имя].ПересчитатьИтоги();
//		
//	    ЗаписьЖурналаРегистрации("Пересчет итогов. Завершение" 
//	                        	 ,УровеньЖурналаРегистрации.Информация 
//	                        	 , 
//	                        	 ,
//	                        	 ,"Регистр " + Рег.Имя);
//	КонецЦикла;

//	Для Каждого Рег из Метаданные.РегистрыНакопления Цикл 
//		
//		Если СокрЛП(Рег.ВидРегистра) = "Остатки" Тогда 
//		#Если Клиент Тогда
//			ОбработкаПрерыванияПользователя();
//		#КонецЕсли
//		    ЗаписьЖурналаРегистрации("Пересчет итогов. Начало" 
//		                        	 ,УровеньЖурналаРегистрации.Информация 
//		                        	 , 
//		                        	 ,
//		                        	 ,"Регистр " + Рег.Имя);
//		
//			РегистрыНакопления[Рег.Имя].ПересчитатьИтоги();
//			
//		    ЗаписьЖурналаРегистрации("Пересчет итогов. Завершение" 
//		                        	 ,УровеньЖурналаРегистрации.Информация 
//		                        	 , 
//		                        	 ,
//		                        	 ,"Регистр " + Рег.Имя);
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ПересчетТекущихИтогов() Экспорт

//	Для Каждого Рег из Метаданные.РегистрыБухгалтерии Цикл 
//		#Если Клиент Тогда
//			ОбработкаПрерыванияПользователя();
//		#КонецЕсли
//	    ЗаписьЖурналаРегистрации("Пересчет текущих итогов. Начало" 
//	                        	 ,УровеньЖурналаРегистрации.Информация 
//	                        	 , 
//	                        	 ,
//	                        	 ,"Регистр " + Рег.Имя);
//	
//		РегистрыБухгалтерии[Рег.Имя].ПересчитатьТекущиеИтоги();
//		
//	    ЗаписьЖурналаРегистрации("Пересчет текущих итогов. Завершение" 
//	                        	 ,УровеньЖурналаРегистрации.Информация 
//	                        	 , 
//	                        	 ,
//	                        	 ,"Регистр " + Рег.Имя);
//	КонецЦикла;

//	Для Каждого Рег из Метаданные.РегистрыНакопления Цикл 
//		
//		Если СокрЛП(Рег.ВидРегистра) = "Остатки" Тогда 
//		#Если Клиент Тогда
//			ОбработкаПрерыванияПользователя();
//		#КонецЕсли
//		    ЗаписьЖурналаРегистрации("Пересчет текущих итогов. Начало" 
//		                        	 ,УровеньЖурналаРегистрации.Информация 
//		                        	 , 
//		                        	 ,
//		                        	 ,"Регистр " + Рег.Имя);
//		
//			РегистрыНакопления[Рег.Имя].ПересчитатьТекущиеИтоги();
//			
//		    ЗаписьЖурналаРегистрации("Пересчет текущих итогов. Завершение" 
//		                        	 ,УровеньЖурналаРегистрации.Информация 
//		                        	 , 
//		                        	 ,
//		                        	 ,"Регистр " + Рег.Имя);
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры
//ОКЕЙ Лобанов В.И. (СофтЛаб) Конец 2020-04-18 (#3532)

Процедура ЗагрузкаДанныхИзАксаптыФМ() Экспорт

//Загрузка данных из Аксапты	
    ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало загрузки");
	
	Обработка		= Обработки.ОК_ЗагрузкаДанныхИзАксаптыФМ.Создать();
	Обработка.ПодключениеКБазе();
	Обработка.ЗагрузитьКонтрагентов();
	Обработка.ЗагрузитьДоговора();
	Обработка.ЗагрузитьНоменклатуру();
	Обработка.ЗагрузитьРБП();
	Обработка.ЗагрузитьОС();
	Обработка.ЗагрузитьГруппу("");

    ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение загрузки");
							 
//Трансляция загруженных данных из Аксапты							 
	ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты. Начало" 
							 ,УровеньЖурналаРегистрации.Информация 
							 , 
							 ,
							 ,"Начало трансляции");
							 
	Обработка		= Обработки.ОК_ТрансляцияОперацииАксаптыФМ.Создать();
	Обработка.РучнаяТрансляцияЗагруженныхДанныхИзАксапты();

	
	ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты. Завершение" 
							 ,УровеньЖурналаРегистрации.Информация 
							 , 
							 ,
							 ,"Завершение трансляции");
							 
//Снятие лишних флагов "Загружено с ошибкой"							 
	ЗаписьЖурналаРегистрации("Снятие лишних флагов Загружено с ошибкой. Начало" 
							 ,УровеньЖурналаРегистрации.Информация 
							 , 
							 ,
							 ,"Начало");
							 
	Обработка		= Обработки.ОК_СнятиеЛишнихЗагруженоСОшибкойФМ.Создать();
	Обработка.СнятьФлаги();

	
	ЗаписьЖурналаРегистрации("Снятие лишних флагов Загружено с ошибкой. Завершение" 
							 ,УровеньЖурналаРегистрации.Информация 
							 , 
							 ,
							 ,"Завершение");
							 

КонецПроцедуры //ЗагрузкаДанныхИзАксапты()

// Ок Видяйкин 20170808 (регламентное задание для Окей-Лоджистик) +
Процедура ОК_ЗагрузкаДанныхИзАксаптыЛоджистик() Экспорт
//Загрузка данных из Аксапты	
    ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты Лоджистикс. Начало" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Начало загрузки");
	
	Обработка		= Обработки.ОК_ЗагрузкаДанныхИзАксаптыЛоджистик.Создать();
	Обработка.ЗагрузитьГруппу("");

    ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты Лоджистикс. Завершение" 
                        	 ,УровеньЖурналаРегистрации.Информация 
                        	 , 
                        	 ,
                        	 ,"Завершение загрузки");
							 
//Трансляция загруженных данных из Аксапты							 
	ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты Лоджистикс. Начало" 
							 ,УровеньЖурналаРегистрации.Информация 
							 , 
							 ,
							 ,"Начало трансляции");
							 
	Обработка		= Обработки.ОК_ТрансляцияОперацииАксаптыЛоджистикс.Создать();
	Обработка.РучнаяТрансляцияЗагруженныхДанныхИзАксапты();
	
	ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты Лоджистикс. Завершение" 
							 ,УровеньЖурналаРегистрации.Информация 
							 , 
							 ,
							 ,"Завершение трансляции");
							 
//Снятие лишних флагов "Загружено с ошибкой"							 
	ЗаписьЖурналаРегистрации("Снятие лишних флагов Загружено с ошибкой Лоджистикс. Начало" 
							 ,УровеньЖурналаРегистрации.Информация 
							 , 
							 ,
							 ,"Начало");
							 
	Обработка		= Обработки.ОК_СнятиеЛишнихЗагруженоСОшибкойЛоджистикс.Создать();
	Обработка.СнятьФлаги();

	
	ЗаписьЖурналаРегистрации("Снятие лишних флагов Загружено с ошибкой Лоджистикс. Завершение" 
							 ,УровеньЖурналаРегистрации.Информация 
							 , 
							 ,
							 ,"Завершение");

КонецПроцедуры
// Ок Видяйкин 20170808 -

//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2019-02-26 (#3234)
Процедура ПересчетИтоговРегистровЗаПериод() Экспорт
	
	КонстантаПериода = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НачалоПериодаРасчетаИтоговДляРБ", (-1));
	
	Если КонстантаПериода > 0 Тогда
		КонстантаПериода = КонстантаПериода * (-1);
	КонецЕсли;
	
	НачалоПересчета = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, &Количество) КАК ПериодНачало";
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Количество", КонстантаПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ПериодНачало = НачалоМесяца(Выборка.ПериодНачало);
	ПериодКонец = КонецМесяца(ТекущаяДата());
	
	МассивРегистров = Новый Массив;
	МассивРегистров.Добавить("Хозрасчетный");
	МассивРегистров.Добавить("бит_Дополнительный_2");
	
	МассивОшибок = Новый Массив;

	Для Каждого СтрокаРегистра Из МассивРегистров Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	    ЗаписьЖурналаРегистрации("Пересчет текущих итогов за период. Начало" 
	                        	 ,УровеньЖурналаРегистрации.Информация 
	                        	 , 
	                        	 ,
	                        	 ,"Регистр " + СтрокаРегистра);
	
		Попытка 
			РегистрыБухгалтерии[СтрокаРегистра].ПересчитатьИтогиЗаПериод(ПериодНачало, ПериодКонец);
		Исключение
			ЗаписьЖурналаРегистрации("Пересчет текущих итогов за период. Ошибка расчета итогов." 
	                        	 ,УровеньЖурналаРегистрации.Ошибка 
	                        	 , 
	                        	 ,
	                        	 ,"Регистр " + СтрокаРегистра);	
								 
			МассивОшибок.Добавить(СтрокаРегистра);					 
								 
		КонецПопытки;	
		
	    ЗаписьЖурналаРегистрации("Пересчет текущих итогов за период. Завершение" 
	                        	 ,УровеньЖурналаРегистрации.Информация 
	                        	 , 
	                        	 ,
	                        	 ,"Регистр " + СтрокаРегистра);
		
	КонецЦикла;	
	
	Если МассивОшибок.Количество() > 0 Тогда
		
		СтрокаОшибки = "Пересчет итогов за период (с " + Формат(ПериодНачало,"ДФ=dd.MM.yyyy; ДЛФ=D") + " по " + Формат(ПериодКонец,"ДФ=dd.MM.yyyy; ДЛФ=D") + " прерван." + Символы.ПС + "Ошибки:" + Символы.ПС;
		Для Каждого Строка Из МассивОшибок Цикл		
			СтрокаОшибки = СтрокаОшибки + "Регистр бухгалтерии " + Строка + " - итоги за период не рассчитаны." + Символы.ПС;
		КонецЦикла;
		СтрокаОшибки = СтрокаОшибки + Символы.ПС + "Это автоматическое сообщение, отвечать на него не нужно.";
		Попытка
			ОтправитьУведомлениеОбОшибке(МассивОшибок, СтрокаОшибки, "Ошибка регл. задания: Пересчет итогов регистров бухгалтерии за период.");
		Исключение
			ЗаписьЖурналаРегистрации("Пересчет текущих итогов за период. Ошибка отправки уведомления." 
	                        	 ,УровеньЖурналаРегистрации.Ошибка 
	                        	 , 
	                        	 ,
	                        	 ,СтрокаОшибки);	
								  								 
		КонецПопытки;
							 
	Иначе
		
		СтрокаСообщения = "Пересчет итогов за период (с " + Формат(ПериодНачало,"ДФ=dd.MM.yyyy; ДЛФ=D") + " по " + Формат(ПериодКонец,"ДФ=dd.MM.yyyy; ДЛФ=D") + " выполнен." + Символы.ПС; 
		СтрокаСообщения = СтрокаСообщения + "Начало пересчета: " + НачалоПересчета + Символы.ПС;  
		СтрокаСообщения = СтрокаСообщения + "Конец пересчета: " + ТекущаяДата() + Символы.ПС;
		
		Попытка
			ОтправитьУведомлениеОбОшибке(МассивОшибок, СтрокаСообщения, "Выполнение регл. задания: Пересчет итогов регистров бухгалтерии за период.");
		Исключение
			ЗаписьЖурналаРегистрации("Пересчет текущих итогов за период. Ошибка отправки уведомления." 
	                        	 ,УровеньЖурналаРегистрации.Ошибка 
	                        	 , 
	                        	 ,
	                        	 ,СтрокаСообщения);	
								  								 
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьУведомлениеОбОшибке(МассивОшибок, ТелоСообщения, Тема)

	УчетнаяЗаписьПочты = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Учетная запись почты согласований");
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьПочты) Тогда
		Возврат;
	КонецЕсли;
	
	АдресаУведомленийПротоколаИсполнения = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Список получателей протокола выполнения РЗ");
	Если ТипЗнч(АдресаУведомленийПротоколаИсполнения) = Тип("Строка") Тогда
		// распарсим
		АдресаУведомленийПротоколаИсполнения = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресаУведомленийПротоколаИсполнения);
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", ТелоСообщения);
	ПараметрыПисьма.Вставить("Кому", АдресаУведомленийПротоколаИсполнения);
	ПараметрыПисьма.Вставить("ТипТекста", ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст"));
	//ПараметрыПисьма.Вставить("ИдентификаторСообщения", Сообщение.ИдентификаторСообщения);
	
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗаписьПочты, ПараметрыПисьма, Неопределено);
	
КонецПроцедуры
//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2019-02-26 (#3234)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-19 (#3415)
Функция ПолучитьМассивДокументовОАПоДатеЗагрузки(НачалоЗагрузкиДанных, ОкончаниеЗагрузкиДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_ок_ОперацияАксапты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
		|ГДЕ
		|	бит_ок_ОперацияАксапты.ДатаЗагрузки МЕЖДУ &НачалоЗагрузкиДанных И &ОкончаниеЗагрузкиДанных";
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-06-22 (#4137)
	//Запрос.УстановитьПараметр("НачалоЗагрузкиДанных", НачалоЗагрузкиДанных);
	НачалоПрошедшегоДня = НачалоДня(НачалоДня(НачалоЗагрузкиДанных) - 1);
	Запрос.УстановитьПараметр("НачалоЗагрузкиДанных", НачалоПрошедшегоДня);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-06-22 (#4137)
	Запрос.УстановитьПараметр("ОкончаниеЗагрузкиДанных", ОкончаниеЗагрузкиДанных);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-19 (#3415)
