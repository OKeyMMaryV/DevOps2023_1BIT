
#Область СлужебныйПрограммныйИнтерфейс

// Функция проверяет принадлежность статьи оборотов к ЦФО.
// 
// Параметры:
//  СтруктураПараметров  - Структура
//                                  ЦФО - СправочникСсылка.бит_ЦФО
//                                  СтатьяОборотов - СправочникСсылка.бит_СтатьиОборотов
//                                  СписокСтатейПринадлежность - СписокЗначений.
// 
// Возвращаемое значение:
//  флОчиститьСтатью - Булево.
// 
Функция СтатьяОборотовПринадлежитЦФО(СтруктураПараметров)  Экспорт
	
	флСтатьяПринадлежитЦФО = Истина;
	Если ЗначениеЗаполнено(СтруктураПараметров.СтатьяОборотов) И ЗначениеЗаполнено(СтруктураПараметров.ЦФО) Тогда
		
		Если ТипЗнч(СтруктураПараметров.СписокСтатейПринадлежность) = Тип("СписокЗначений") Тогда
			
			НайденноеЗначение = СтруктураПараметров.СписокСтатейПринадлежность.НайтиПоЗначению(СтруктураПараметров.СтатьяОборотов);
			Если НайденноеЗначение = Неопределено Тогда
				
				Если СтруктураПараметров.Свойство("ВыводитьСообщения") И СтруктураПараметров.ВыводитьСообщения Тогда
					
					ТекстСообщения = "Статья оборотов """ 
					                  +СтруктураПараметров.СтатьяОборотов 
									  +""" не принадлежит выбранному ЦФО """ 
									  +СтруктураПараметров.ЦФО 
									  +""" (регистре сведений ""Принадлежность статей оборотов"")."
									  +Символы.ПС
									  +"Значение реквизита ""Статья оборотов"" было очищено!";
									  
					Если СтруктураПараметров.Свойство("ИмяПоля") Тогда
						ИмяПоля = СтруктураПараметров.ИмяПоля;
					Иначе
						ИмяПоля = "Объект.СтатьяОборотов";
					КонецЕсли;
									  
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,ИмяПоля);				  
				 
				КонецЕсли; // Нужно выводить сообщения.
				флСтатьяПринадлежитЦФО = Ложь;
				
				
			КонецЕсли; // Не нашли статью в списке.
			
		КонецЕсли; // СписокСтатейПринадлежность инициализирован.
		
	КонецЕсли; // Заполнены СтатьяОборотов и ЦФО.
	
	Возврат флСтатьяПринадлежитЦФО;
	
КонецФункции

// Функция определяет доступен ли ввод в режиме табличной части для документа ЗаявкаНаРасходованиеСредств.
// 
// Возвращаемое значение:
//   ДоступенСписок   - Булево.
// 
Функция ДоступенСписокВЗаявке(ВидОперации) Экспорт
	
	//ДоступенСписок =?(ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику") 
	//				ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю")
	//				ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПрочиеРасчетыСКонтрагентами")
	//				,Истина,Ложь);
	//
	//Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
	//	
	//	//Если ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами")
	//	Если ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратЗайма") 
	//		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратКредита") 
	//		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаКонтрагенту")
	//		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП")
	//		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц") Тогда
	//		
	//		ДоступенСписок = Истина;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	// Устарела. в 43. NB.				
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьКлючВРасшифровке(СтрокаПлатеж) Экспорт

	СтрокаПлатеж.бит_КлючСтроки = Новый УникальныйИдентификатор(); 

КонецПроцедуры

// Функция формирует соответствие видов операций заявки и платежного документа.
// 
// Параметры:
//  ИмяДокумента - Строка - "РасходныйКассовыйОрдер", "ПлатежноеПоручениеИсходящее", "СписаниеСРасчетногоСчета".
// 
// Возвращаемое значение:
//   ВидовОпераций - Соответствие.
// 
Функция ВидыОперацийЗаявкиВидыОперацийРегл(ИмяДокумента) Экспорт

	ВидыОпераций = Новый Соответствие;
	
	Если ИмяДокумента = "РасходныйКассовыйОрдер" Тогда
		
		ОплатаПоставщику 				   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику");
		ВозвратПокупателю				   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю");	
		ВыдачаПодотчетномуЛицу			   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу");
		ВыплатаЗаработнойПлатыПоВедомостям = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям"); 
		ВыплатаЗаработнойПлатыРаботнику    = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику");
		ВзносНаличнымиВБанк 			   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк");
		ВозвратЗайма 					   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратЗайма");
		ВозвратКредита 					   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратКредита");
		ВыдачаЗаймаКонтрагенту 			   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту");
		Инкассация 						   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.Инкассация");
		ВыплатаДепонентов 				   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов");
		ВыдачаЗаймаРаботнику 			   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаРаботнику");
		ПрочийРасход 					   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход");
		ВыплатаСотрудникуПоДоговоруПодряда = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда");
		ВыплатаДивидендов				   = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДивидендов");
		
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику"), ОплатаПоставщику);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю"), ВозвратПокупателю);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику"), ВыдачаПодотчетномуЛицу);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП"), ВыплатаЗаработнойПлатыПоВедомостям);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаЗаработнойПлатыРаботнику"), ВыплатаЗаработнойПлатыРаботнику);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВзносНаличнымиВБанк"), ВзносНаличнымиВБанк);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратЗайма"), ВозвратЗайма);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратКредита"), ВозвратКредита);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаКонтрагенту"), ВыдачаЗаймаКонтрагенту);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ИнкассацияДенежныхСредств"),Инкассация);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаДепонентов"), ВыплатаДепонентов);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаРаботнику"), ВыдачаЗаймаРаботнику);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПрочееСписаниеБезналичныхДенежныхСредств"), ПрочийРасход);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеСотрудникуПоДоговоруПодряда"), ВыплатаСотрудникуПоДоговоруПодряда);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДивидендов"), ВыплатаДивидендов);
										
	ИначеЕсли ИмяДокумента = "СписаниеСРасчетногоСчета"
		ИЛИ	ИмяДокумента = "ПлатежноеПоручение" Тогда
		
		ОплатаПоставщику 					 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику");
		ВозвратПокупателю 					 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю");
		ПеречислениеНалога 					 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога");
		ВозвратЗайма 						 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма");
		ВозвратКредита 						 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита");
		ВыдачаЗаймаКонтрагенту 				 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту");
		ПрочиеРасчетыСКонтрагентами 		 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами");
		ПереводНаДругойСчет 				 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет");
		ПеречислениеПодотчетномуЛицу 		 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу");
		ПеречислениеЗП 						 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП");
		ПеречислениеЗаработнойПлатыРаботнику 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику");
		ПеречислениеДепонентов 				 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов");
		ВыдачаЗаймаРаботнику 				 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику");
		ПрочееСписание 							= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание");
		ПеречислениеСотрудникуПоДоговоруПодряда = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда");
		СнятиеНаличных 							= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных");
		ПеречислениеНалогаЗаТретьихЛиц 			= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц");
		ПеречислениеДивидендов 					= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов");
		
		
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику"), ОплатаПоставщику);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю"), ВозвратПокупателю);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалога"), ПеречислениеНалога);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратЗайма"),ВозвратЗайма);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратКредита"),ВозвратКредита);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаКонтрагенту"), ВыдачаЗаймаКонтрагенту);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПрочиеРасчетыСКонтрагентами"), ПрочиеРасчетыСКонтрагентами);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПереводНаДругойСчет"), ПереводНаДругойСчет);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику"), ПеречислениеПодотчетномуЛицу);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП"), ПеречислениеЗП);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаЗаработнойПлатыРаботнику"), ПеречислениеЗаработнойПлатыРаботнику);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаДепонентов"), ПеречислениеДепонентов);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаРаботнику"), ВыдачаЗаймаРаботнику);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПрочееСписаниеБезналичныхДенежныхСредств"), ПрочееСписание);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеСотрудникуПоДоговоруПодряда"), ПеречислениеСотрудникуПоДоговоруПодряда);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.СнятиеНаличных"), СнятиеНаличных);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц"), ПеречислениеНалогаЗаТретьихЛиц);
		ВидыОпераций.Вставить(ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДивидендов"), ПеречислениеДивидендов);
	КонецЕсли; 
	
	Возврат ВидыОпераций;
	
КонецФункции

// Возвращает вид договора с контрагентом по виду операции.
//
Функция ВидДоговораСКонтрагентомПоОперации(ВидОперации, ИмяДокумента) Экспорт
	
	ВидОперацииРегл = ВидыОперацийЗаявкиВидыОперацийРегл(ИмяДокумента)[ВидОперации];
	Если НЕ ЗначениеЗаполнено(ВидОперацииРегл) Тогда
		Возврат Новый Массив;
	КонецЕсли; 
	
	Возврат УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперацииРегл);
	
КонецФункции

// бит_Сундукова проверяем есть ли по данному основанию другие заявки на расходование ДС
&наСервере
Процедура ПроверитьИмеющиесяЗаявкиПоОснованию(Основание,ИмяДокументаДляПроверки,Объект,ОбъектВыводаСообщения=неопределено) экспорт
	
	// БИТ НАГолубева 29.03.2016 ++
	// Если Заявка создается без основания, то процедура вызывает ошибку. Добавлена проверка на наличие основания.
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// БИТ НАГолубева 29.03.2016 --
	
	//Проверка повторного создания документа на основании
	ПовторныйВводНаОсновании = Ложь;
	
	СписокОснование = Новый СписокЗначений;
	СписокОснование.Добавить(Основание.Ссылка);
	Если Основание.Метаданные().Реквизиты.Найти("ДокументОтгрузки") <> Неопределено И Основание.ДокументОтгрузки <> Неопределено Тогда
		СписокОснование.Добавить(Основание.ДокументОтгрузки);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", СписокОснование);
	Запрос.УстановитьПараметр("Ссылка"	 , Объект.Ссылка);
	Запрос.Текст = "
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-14 (#3443)
	//|ВЫБРАТЬ
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-14 (#3443)
	|	Документ.Ссылка						КАК Ссылка,
	|   Документ.Дата						КАК Дата,
	|   Документ.Номер						КАК Номер,
	|   Документ.ДокументОснование			КАК ДокументОснование,
	|   Документ.ДокументОснование.Дата		КАК ДатаДокОснование,
	|   Документ.ДокументОснование.Номер	КАК НомерДокОснование
	|ИЗ
	|	Документ." + ИмяДокументаДляПроверки + " КАК Документ
	|ГДЕ
	|	Документ.ДокументОснование В (&Основание)
	|	И Документ.Ссылка <> &Ссылка
	|	И не Документ.ПометкаУдаления
	|";
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		
		ПовторныйВводНаОсновании = Истина;	
		
		Выборка = Результат.Выбрать();
		ТекстСообщения 	= "Внимание!!!";
		Пока Выборка.Следующий() цикл			
			СуществующийДок 		= Выборка.Ссылка;
			ДатаСуществующегоДок 	= Формат(Выборка.Дата, "ДЛФ=Д");
			СтрокаСуществующийДок 	= Строка(" "" " + СуществующийДок.Метаданные().Синоним 
			+ " "" № " + Выборка.Номер 
			+ " от "   + ДатаСуществующегоДок);   
			
			ДокОснование			= Выборка.ДокументОснование;
			ДатаДокОснования	 	= Формат(Выборка.ДатаДокОснование, "ДЛФ=Д");
			СтрокаДокОснование		= Строка(" "" " + Выборка.ДокументОснование.Метаданные().Синоним 
			+ " "" № " + Выборка.НомерДокОснование 
			+ " от "   + ДатаДокОснования);
			
			
			//Сразу выводим сообщение об ошибке
			ТекстСообщения 	= ТекстСообщения+"
			|Существует документ " + СтрокаСуществующийДок
			+ ", 
			|введённый на основании документа " + СтрокаДокОснование;
			
		КонецЦикла;
		Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение  Тогда
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,ОбъектВыводаСообщения);		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти