
#Область СлужебныйПрограммныйИнтерфейс

// Определяет тип кода маркировки по его значению.
// 
// Параметры:
//  КодМаркировки - строка - штрихкод.
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
Функция ТипШтрихкода(КодМаркировки) Экспорт
	
	ЗначениеSSCC = Неопределено;
	
	Если ШтрихкодированиеИСМПКлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки) Тогда
		Возврат Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	ИначеЕсли ШтрихкодированиеИСМПКлиентСервер.ЭтоКодЛогистическойУпаковки(КодМаркировки, ЗначениеSSCC) Тогда
		Если ЗначениеЗаполнено(ЗначениеSSCC) Тогда
			Возврат Перечисления.ТипыШтрихкодов.SSCC;
		Иначе
			Возврат Перечисления.ТипыШтрихкодов.GS1_128;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ТипыШтрихкодов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Формирует данные неизвестной продукции, которая отсутствует в справочнике Штрихкоды упаковок. 
// Создает элемент справочника Штрихкоды упаковок.
// 
// Параметры:
//  Штрихкоды - Массив - Массив штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - коллекция, ключ которой - значение штрихкода, значение - полученные данные по штрихкоду в
//	государственной системе.
Функция ДанныеНеизвестнойМаркируемойПродукции(Штрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам) Экспорт
	
	ДанныеНеизвестнойМаркируемойПродукции = Новый Соответствие;
	
	Если Штрихкоды.Количество() = 0 Тогда
		Возврат ДанныеНеизвестнойМаркируемойПродукции;
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		ДанныеНеизвестнойМаркируемойПродукции = ДанныеНеизвестнойМаркируемойПродукцииСЗапросомДанныхВИСМП(
			Штрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки);
	Иначе
		ДанныеНеизвестнойМаркируемойПродукции = ДанныеНеизвестнойМаркируемойПродукцииБезЗапросаДанныхВИСМП(
			Штрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам);
	КонецЕсли;
	
	Возврат ДанныеНеизвестнойМаркируемойПродукции;
	
КонецФункции

// Дополняет данные, полученные по штрихкодам спецификой, характерной для обуви.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Иначе
		ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьШтрихкодыВводаОстатковНаШтрихкодыИБ(ДанныеПоШтрихкодам);
	
КонецПроцедуры

// Дополняет свойства структуры Данные штрихкода свойствами, которые используются только для обуви.
// 
// Параметры:
//  КоллекцияДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода)
Процедура ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода) Экспорт
	
	ДанныеШтрихкода.Вставить("ИННВладельца"               "");
	ДанныеШтрихкода.Вставить("Владелец",                  Неопределено);
	ДанныеШтрихкода.Вставить("Статус",                    Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеСтатуса"       "");
	ДанныеШтрихкода.Вставить("КоличествоВложенныхЕдиниц", 1);
	ДанныеШтрихкода.Вставить("ИННПроизводителя",          "");
	ДанныеШтрихкода.Вставить("Производитель",             Неопределено);
	ДанныеШтрихкода.Вставить("НаименованиеПроизводителя", "");
	ДанныеШтрихкода.Вставить("ДатаЭмиссии",               Неопределено);
	ДанныеШтрихкода.Вставить("GTIN",                      "");
	ДанныеШтрихкода.Вставить("СпособВводаВОборот",        Неопределено);
	ДанныеШтрихкода.Вставить("ОсобоеСостояние",           Неопределено);
	
КонецПроцедуры

// Дополняет свойства структуры результат обработки штрихкода специфичными свойствами, характерными для обуви.
// 
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода)
Процедура ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияИСМП", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораСерии",     Новый Структура);

КонецПроцедуры

// Формирует структуру, описывающую результат обработки кода маркировки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода)
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования)
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище которой 
//  надо поместить данные.
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка штрихкода.
// Возвращаемое значение:
//  Структура - сожержит в себе информацию по результату обработки штрихкодов обувной продукции.
Функция РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор, Форма = Неопределено, ДанныеПоШтрихкодам = Неопределено) Экспорт
	
	ЭтоКодВводаОстатков = Ложь;
	Если ДанныеПоШтрихкодам <> Неопределено Тогда
		НайденнаяСтрока = ДанныеПоШтрихкодам.ДанныеКодовМаркировок.Найти(ДанныеШтрихкода.Штрихкод, "КодМаркировки");
		ЭтоКодВводаОстатков = НайденнаяСтрока.ЭтоКодВводаОстатков;
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Если ЭтоКодВводаОстатков И Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		
		РезультатОбработки = ШтрихкодированиеИС.РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	ИначеЕсли ДанныеШтрихкода.ТребуетсяВыборСерии Тогда
		
		РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
		ПараметрыВыбораСерии = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
		ПараметрыВыбораСерии.Номенклатура           = ДанныеШтрихкода.Номенклатура;
		ПараметрыВыбораСерии.Характеристика         = ДанныеШтрихкода.Характеристика;
		ПараметрыВыбораСерии.КодМаркировки          = ДанныеШтрихкода.Штрихкод;
		ПараметрыВыбораСерии.ПараметрыУказанияСерий = ОбщегоНазначения.СкопироватьРекурсивно(
		ПараметрыСканирования.ПараметрыУказанияСерий, Ложь);
		ПараметрыВыбораСерии.Склад                  = ПараметрыСканирования.Склад;
		ПараметрыВыбораСерии.ПараметрыСканирования  = ПараметрыСканирования;
		РезультатОбработки.ПараметрыУточненияДанных = ПараметрыВыбораСерии;
		
	ИначеЕсли Не РезультатОбработки.ТребуетсяУточнениеДанных И Форма <> Неопределено Тогда
		
		РезультатОбработки = ШтрихкодированиеИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Инициализирует структуру, которая описывает результат обработки штрихкодов. Состоит из базовых свойств 
// (См.ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода), дополненных специфичными свойствами
// (См.ШтрихкодированиеИСМП.ДополнитьСвойстваРезультатаОбработкиШтрихкода).
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода = Неопределено) Экспорт
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода();
	ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Обувная);
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Выполняет поиск ошибок в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (см. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	ПравилаПроверкиНаОшибки = ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам);
	ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
	
КонецПроцедуры

// Первый этап проверок. Выполняется сразу после считывания штрихкода. 
// 
// Параметры:
//  СписокШтрихкодов - Массив - Проверяемые штрихкоды.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - В случае удачного прохождения проверок - возвращает пустое соответствие,
//           В случае выявления ошибок или необходимого уточнения информации - возвращает заполненное соответствие с указанием причины.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования) Экспорт
	
	РезультатОбработкиШтрихкода = Неопределено;
	
	ЕстьШтрихкодОбуви = Ложь;
	Для Каждого Штрихкод Из СписокШтрихкодов Цикл
		
		Если ШтрихкодированиеИСМПКлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(Штрихкод)
			Или ЭтоКодУпаковки(Штрихкод, Истина) Тогда
			
			ЕстьШтрихкодОбуви = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьШтрихкодОбуви И ТребуетсяАвторизацияПользователя(ПараметрыСканирования) Тогда
	
		РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
		РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМП = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Возвращает результат обработки штрихкода с описанием ошибки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИСМП.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатДобавления.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, Неопределено);
	ЗаполнитьЗначенияСвойств(РезультатДобавления, ДанныеШтрихкода);
	
	Возврат РезультатДобавления;
	
КонецФункции

// Реализует обработку действий пользователя. Возвращает результат обработки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Действие - Строка - Идентификатор действия.
//  Параметры - (См. ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИСМП.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт
	
	Если Действие = "ОбработатьВыборСерии" Или Действие = "ОбработатьУточнениеДанных" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
КонецФункции

// Получает данные из государтсвенных информационных систем и заполняет данные для упаковок, о которых нет никакой 
// информации в справочнике Штрихкоды упакоковок.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура ОбработатьШтрихкодыНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	КодыНеизвестныхУпаковок = Новый Массив;
	Для Каждого КодУпаковки Из ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок Цикл
		
		НайденнаяСтрока = ДанныеПоШтрихкодам.ДанныеКодовМаркировок.Найти(КодУпаковки, "КодМаркировки");
		Если ШтрихкодированиеИС.ПрисутствуетОбувнаяПродукция(НайденнаяСтрока.ВидыПродукцииКодаМаркировки) Тогда
			КодыНеизвестныхУпаковок.Добавить(КодУпаковки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КодыНеизвестныхУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = ТекстОшибкиЗапрещеноЗапрашиватьДанныеВИСМП();
		
		Возврат;
	Иначе
		
		Результат = ВложенныеШтрихкодыПоДаннымИСМП(КодыНеизвестныхУпаковок, ПараметрыСканирования);
		Если Результат.ЕстьОшибки Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
			
			Возврат;
		КонецЕсли;
		
		Если Результат.ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления,
				Результат.ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления,
				Истина); 
				
			Возврат;
		КонецЕсли;
		
		ДанныеПоШтрихкодам.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Обувная);
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоШтрихкодам.ВидыПродукции);
		ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, Результат.ВложенныеШтрихкоды);
		ОбработанныеШтрихкоды = СформироватьОбработанныеШтрихкодыПоДаннымДереваУпаковок(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ОбработанныеШтрихкоды, Истина);
		
		ШтрихкодыИзвестныхУпаковок = Новый Массив;
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
			
			ШтрихкодыИзвестныхУпаковок.Добавить(КлючЗначение.Ключ);
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, 
				ШтрихкодыИзвестныхУпаковок);
				
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок,
				ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет значение ШтрихкодыПродукцииДляСопоставления структуры ДанныхПоШтрихкодам штрихкодами EAN, которые не найдены
// в ИБ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
Процедура ЗаполнитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам) Экспорт
	
	МассивШтрихкодовEAN = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		Если Не СтрокаДанных.МаркируемаяПродукция Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыПродукцииШтрихкода = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции.Получить(СтрокаДанных.КодМаркировки);
		Если ВидыПродукцииШтрихкода = Перечисления.ВидыПродукцииИС.Обувная Тогда
			
			ШтрихкодEAN = ШтрихкодированиеИС.EANПоКодуМаркировки(СтрокаДанных.КодМаркировки);
			Если ЗначениеЗаполнено(ШтрихкодEAN) Тогда
				МассивШтрихкодовEAN.Добавить(ШтрихкодEAN);
				СтрокаДанных.EAN = ШтрихкодEAN;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СуществующиеШтрихкодыВРегистре = ШтрихкодированиеИС.СуществующиеВРегистреШтрихкодыEAN(МассивШтрихкодовEAN);
	ШтрикходыДляСопоставления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивШтрихкодовEAN, СуществующиеШтрихкодыВРегистре);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления, ШтрикходыДляСопоставления);
	
КонецПроцедуры

// Формирует структуру вложенных штрихкодов по ссылке на документ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияПродукцииИСМП - Детализация, с которой
//    требуется сформировать вложенные штрихкоды.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИСМПСлужебный.ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, Детализация, ПараметрыСканирования = Неопределено) Экспорт
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ШтрихкодыУпаковок") = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'У документа %1 отсутствует табличная часть ШтрихкодыУпаковок.'");
		ВызватьИсключение СтрШаблон(ТекстОшибки, ДокументСсылка);
	КонецЕсли;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДокументСсылка);
	КонецЕсли;
	
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки                                   КАК ШтрихкодУпаковки,
	|	ЕСТЬNULL(ДокументШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода, """") КАК Штрихкод
	|ИЗ
	|	Документ.%1.ШтрихкодыУпаковок КАК ДокументШтрихкодыУпаковок
	|ГДЕ
	|	ДокументШтрихкодыУпаковок.Ссылка = &ДокументСсылка";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяДокумента);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВидПродукции",   Перечисления.ВидыПродукцииИС.Обувная);
	
	ШтрихкодыУпаковок   = Запрос.Выполнить().Выгрузить();
	ИзвестныеУпаковки   = Новый Массив;
	НеизвестныеУпаковки = Новый Массив;
	
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		
		Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
			ИзвестныеУпаковки.Добавить(Строка.ШтрихкодУпаковки);
		Иначе
			НеизвестныеУпаковки.Добавить(Строка.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	Если ИзвестныеУпаковки.Количество() > 0 Тогда
		
		ВложенныеШтрихкодыИзвестныхУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(
			ИзвестныеУпаковки, ПараметрыСканирования.ДопустимыеВидыПродукции);
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
		
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			Результат.ЕстьОшибки  = Истина;
			Результат.ТекстОшибки = ДанныеПоШтрихкодам.ТекстОшибки;
			Результат.ТребуетсяОбновлениеКлючаСессии = ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
		Иначе
			Результат.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если НеизвестныеУпаковки.Количество() > 0 Тогда
		
		Возврат ВложенныеШтрихкодыПоДаннымИСМП(НеизвестныеУпаковки, ПараметрыСканирования);
		
	КонецЕсли;
	
	Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
	Результат.ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	
	Возврат Результат;
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону логистической упаковки.
// 
// Параметры:
//  КодМаркировки - Строка - Штрихкод.
//  КонтрольПоВидуПродукции - Булево - Истина, если будет выполняться проверка по вложенным видам продукции существующих
//  элементов справочника "Штрихкоды упаковок".
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует логистической упаковке.
Функция ЭтоКодУпаковки(КодМаркировки, КонтрольПоВидуПродукции = Ложь) Экспорт
	
	КодСоответствуетУпаковке = ШтрихкодированиеИСМПКлиентСервер.ЭтоКодУпаковки(КодМаркировки);
	
	Если Не КонтрольПоВидуПродукции Тогда
		Возврат КодСоответствуетУпаковке;
	КонецЕсли;
	
	ВидыПродукции = ШтрихкодированиеИС.ВидыПродукцииЛогистическойУпаковки(КодМаркировки);
	Если ВидыПродукции.Количество() = 1 
		И ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная")) <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывает выбор серии.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкод.
//  РезультатВыбора - Структура, ОпределяемыйТип.СерияНоменклатуры - результат выбора серии пользователем.
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - кэшированные значения формы.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Форма);
	
	ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДанныхШтрихкода);
	
	Номенклатура   = РезультатВыбора.ДанныеВыбора.Номенклатура;
	Характеристика = РезультатВыбора.ДанныеВыбора.Характеристика;
	Серия = РезультатВыбора.ДанныеВыбора.Серия;
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеШтрихкода.Номенклатура   = Номенклатура;
	ДанныеШтрихкода.Характеристика = Характеристика;
	ДанныеШтрихкода.Серия          = Серия;
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ШтрихкодированиеИСМПКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
			Блокировка.Заблокировать();
			
			ШтрихкодУпаковкиОбъект = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
			ШтрихкодУпаковкиОбъект.Номенклатура   = Номенклатура;
			ШтрихкодУпаковкиОбъект.Характеристика = Характеристика;
			ШтрихкодУпаковкиОбъект.Серия          = Серия;
			ШтрихкодУпаковкиОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, Форма.УникальныйИдентификатор);
	
	ТипУпаковки = РезультатОбработки.ТипУпаковки;
	
	ВложенныеШтрихкоды = Неопределено;
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТипУпаковки) Тогда
		ВложенныеШтрихкоды = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	РезультатОбработки = ШтрихкодированиеИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Инициализирует дерево упаковок для обувной продукции.
// 
// Возвращаемое значение:
//  ДеревоЗначений - Иерархия упаковок.
Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Выполняет запрос в систему ИС МП и возвращет ответ в виде дерева.
// 
// Параметры:
//  КодыМаркировок - Массив из Строка - список кодов маркировки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИСМП.ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП).
Функция ВложенныеШтрихкодыПоДаннымИСМП(КодыМаркировок, ПараметрыСканирования, НормализоватьВложенныеШтрихкоды = Истина) Экспорт
	
	Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
	
	Детализация = ПараметрыСканирования.Детализация;
	
	ПравилаДетализацииДереваУпаковок = ПравилаДетализацииДереваУпаковок();
	ПравилоДетализации = ПравилаДетализацииДереваУпаковок[Детализация];
	
	Если ЗначениеЗаполнено(ПравилоДетализации) И ПравилоДетализации.РазрешеныПотребУпаковки Тогда
		Детализация = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная;
	КонецЕсли;
	
	РезультатПолученияДерева = ИнтерфейсИСМП.ДеревоУпаковок(КодыМаркировок, Детализация);
	Если РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Требуется обновление ключа сессии.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатПолученияДерева.ТекстОшибки) Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = РезультатПолученияДерева.ТекстОшибки;
	КонецЕсли;
	
	Если Результат.ЕстьОшибки Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаEAN = РезультатПолученияДерева.GTIN;
	ТаблицаEAN.Свернуть("GTIN");
	ВложенныеШтрихкоды.ДеревоУпаковок = РезультатПолученияДерева.ДеревоУпаковок;
	
	Если НормализоватьВложенныеШтрихкоды Тогда
		ЗаполнитьВложенныеШтрихкодыПолученныеИзСервиса(ВложенныеШтрихкоды, ТаблицаEAN, ПараметрыСканирования);
	КонецЕсли;
	
	Результат.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаменитьШтрихкодыВводаОстатковНаШтрихкодыИБ(ДанныеПоШтрихкодам) Экспорт
	
	Если Не ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКодовМаркировок = ДанныеПоШтрихкодам.ДанныеКодовМаркировок;
	
	ДанныеКодовМаркировок.Колонки.Добавить("ШтрихкодПоДаннымИБ", Новый ОписаниеТипов("Строка"));
	ШтрихкодированиеИСПереопределяемый.ЗаполнитьШтрихкоды(ДанныеКодовМаркировок, "ШтрихкодПоДаннымИБ");
	
	Для Каждого Строка Из ДанныеКодовМаркировок Цикл
		Если Не Строка.ЭтоКодВводаОстатков Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Строка.ШтрихкодПоДаннымИБ) Тогда
			Строка.EAN  = "";
			Строка.GTIN = "";
		Иначе
			Строка.EAN  = Строка.ШтрихкодПоДаннымИБ;
			Строка.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(Строка.ШтрихкодПоДаннымИБ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		КодМаркировки   = КлючЗначение.Ключ;
		ДанныеШтрихкода = КлючЗначение.Значение;
		
		НайденнаяСтрока = ДанныеКодовМаркировок.Найти(КодМаркировки, "КодМаркировки");
		
		Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.ЭтоКодВводаОстатков Тогда
			ДанныеШтрихкода.GTIN = НайденнаяСтрока.GTIN;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			
			НайденнаяСтрока = ДанныеКодовМаркировок.Найти(СтрокаТаблицы.Штрихкод, "КодМаркировки");
			Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.ЭтоКодВводаОстатков Тогда
				СтрокаТаблицы.GTIN              = НайденнаяСтрока.GTIN;
				СтрокаТаблицы.СтрокаДерева.GTIN = НайденнаяСтрока.GTIN;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет запрос в систему ИС МП, формирует данные по штрихкодам.
// 
// Параметры:
//  Штрихкоды - Массив - перечень штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ТекстОшибки - Строка - Ошибка при попытке получения данных из сервиса ИС МП.
// Возвращаемое значение:
//  Соответствие - Ключ - значение штрихкода, значение - данные штрихкода.
Функция ДанныеНеизвестнойМаркируемойПродукцииСЗапросомДанныхВИСМП(КодыМаркировки, ПараметрыСканирования, ТекстОшибки)
	
	РезультатПоДаннымИСМП = ВложенныеШтрихкодыПоДаннымИСМП(КодыМаркировки, ПараметрыСканирования);
	Если РезультатПоДаннымИСМП.ЕстьОшибки Тогда
		
		ТекстОшибки = РезультатПоДаннымИСМП.ТекстОшибки;
		
		Возврат Новый Соответствие;
	КонецЕсли;
	
	НормализоватьДанныеДереваУпаковок(РезультатПоДаннымИСМП.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
	ДанныеНеизвестнойМаркируемойПродукции = СформироватьОбработанныеШтрихкодыПоДаннымДереваУпаковок(
		РезультатПоДаннымИСМП.ВложенныеШтрихкоды.ДеревоУпаковок);
		
	КодыМаркировки = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеНеизвестнойМаркируемойПродукции Цикл
		КодыМаркировки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ЗаполнитьСпособВводаВОборотСпецификиШтрихкодов(ДанныеНеизвестнойМаркируемойПродукции, КодыМаркировки, ПараметрыСканирования);
	
	Возврат ДанныеНеизвестнойМаркируемойПродукции;
	
КонецФункции

// Дополняет коллекцию обработанные штрихкоды данными, специфичными для обуви.
// 
// Параметры:
//  ОбработанныеШтрихкоды - Соответствие - Ключ - штрихкод, значение - данные штрихкода.
//  ДанныеДополнения - Соответствие - Ключ - значение штрихкода, значение - специфичные данные.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура ДополнитьСпецификойОбработанныеШтрихкоды(ОбработанныеШтрихкоды, ДанныеДополнения, ПараметрыСканирования)
	
	ПредставленияСтатусов = ПредставленияСтатусов();
	Для Каждого КлючЗначение Из ОбработанныеШтрихкоды Цикл
		
		КодМаркировки   = КлючЗначение.Ключ;
		ДанныеШтрихкода = КлючЗначение.Значение;
		ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода);
		
		СпецификаШтрихкода = ДанныеДополнения.Получить(КодМаркировки);
		ДанныеШтрихкода.ПредставлениеСтатуса = НСтр("ru='<Нет статуса>'");
		
		Если СпецификаШтрихкода = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, СпецификаШтрихкода);
		ДанныеШтрихкода.ПредставлениеСтатуса      = ПредставленияСтатусов.Получить(ДанныеШтрихкода.Статус);
		ДанныеШтрихкода.ПредставлениеНоменклатуры = СпецификаШтрихкода.НаименованиеПродукции;
		ДанныеШтрихкода.Владелец                  = СпецификаШтрихкода.Контрагент;
		
		СоставКодаМаркировки = ШтрихкодированиеИСМПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
		Если СоставКодаМаркировки <> Неопределено Тогда
			ДанныеШтрихкода.GTIN = СоставКодаМаркировки.GTIN;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует данные по штрихкодам без обращения в сервис ИС МП.
// 
// Параметры:
//  Штрихкоды - Массив - перечень штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - Ключ соответствия - значение штрихкода, значение соответствия - данные штрихкода.
Функция ДанныеНеизвестнойМаркируемойПродукцииБезЗапросаДанныхВИСМП(Штрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	Возврат СформироватьОбработанныеШтрихкодыНеизвестнойМаркируемойПродукции(Штрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам);
	
КонецФункции

// Формирует данные по штрихкодам без обращения в сервис ИС МП.
// 
// Параметры:
//  Штрихкоды - Массив - перечень штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - Ключ соответствия - значение штрихкода, значение соответствия - данные штрихкода.
Функция СформироватьОбработанныеШтрихкодыНеизвестнойМаркируемойПродукции(Штрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	ОбработанныеШтрихкоды       = Новый Соответствие;
	МассивEANДляПолученияДанных = Новый Массив;
	СоответствиеШтрихкодов      = Новый Соответствие;
	ДанныеКодовМаркировок       = ДанныеПоШтрихкодам.ДанныеКодовМаркировок;
	
	Для Каждого КодМаркировки Из Штрихкоды Цикл
		
		ЗначениеEAN = ШтрихкодированиеИС.EANПоКодуМаркировки(КодМаркировки);
		СоответствиеШтрихкодов.Вставить(КодМаркировки, ЗначениеEAN);
		МассивEANДляПолученияДанных.Добавить(ЗначениеEAN);
		
	КонецЦикла;
	
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(МассивEANДляПолученияДанных);
	
	Для Каждого КлючЗначение Из СоответствиеШтрихкодов Цикл
		
		НайденнаяСтрока = ДанныеКодовМаркировок.Найти(КлючЗначение.Ключ , "КодМаркировки");
		ЭтоКодВводаОстатков = Ложь;
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭтоКодВводаОстатков = НайденнаяСтрока.ЭтоКодВводаОстатков;
		Иначе
			НайденнаяСтрока = ДанныеПоШтрихкодамEAN.Найти(КлючЗначение.Значение, "ШтрихкодEAN");
		КонецЕсли;
		
		Если НайденнаяСтрока <> Неопределено И (ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура) Или ЭтоКодВводаОстатков) Тогда
			
			ДанныеКодаМаркировки = ИнициализироватьДанныеКодаМаркировки();
			Если ЗначениеЗаполнено(НайденнаяСтрока.ВидПродукции) Тогда
				ДанныеКодаМаркировки.ВидыПродукции.Добавить(НайденнаяСтрока.ВидПродукции);
			КонецЕсли;
			ДанныеКодаМаркировки.Номенклатура              = НайденнаяСтрока.Номенклатура;
			ДанныеКодаМаркировки.Характеристика            = НайденнаяСтрока.Характеристика;
			ДанныеКодаМаркировки.МаркируемаяПродукция      = НайденнаяСтрока.МаркируемаяПродукция;
			ДанныеКодаМаркировки.ТипУпаковки               = Перечисления.ТипыУпаковок.МаркированныйТовар;
			ДанныеКодаМаркировки.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
			ДанныеКодаМаркировки.Штрихкод                  = КлючЗначение.Ключ;
			ДанныеКодаМаркировки.КоличествоВложенныхЕдиниц = 1;
			
			ШтрихкодУпаковки = ШтрихкодированиеИС.СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеКодаМаркировки);
			ДанныеКодаМаркировки.ШтрихкодУпаковки = ШтрихкодУпаковки;
			
			ОбработанныеШтрихкоды.Вставить(КлючЗначение.Ключ, ДанныеКодаМаркировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбработанныеШтрихкоды;
	
КонецФункции

// Инициализирует структуру, которая будет содержать в себе всю собранную информацию с учетом специфики маркируемой 
// продукции.
// 
// Параметры:
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода
//              и ШтрихкодированиеИСМП.ДополнитьСвойстваДанныхШтрихкода).
Функция ИнициализироватьДанныеКодаМаркировки()
	
	ДанныеКодаМаркировки = ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода();
	ДополнитьСвойстваДанныхШтрихкода(ДанныеКодаМаркировки);
	
	Возврат ДанныеКодаМаркировки;
	
КонецФункции

// Дополняет входящие в состав "Вложенных штрихкодов" коллекции - "Дерево упаковок" и "Маркированные товары" свойствами
// специфичными для табачной продукции и заполняет на основании данных - "Специфика штрихкодов".
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, СпецификаШтрихкодов = Неопределено)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, СпецификаШтрихкодов);
	НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары);
	
КонецПроцедуры

// Дополняет таблицу значений "Маркированные товары" свойствами специфичными для табачной продукции и заполняет
// на основании данных - "Дерева упаковок".
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
Процедура НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары)
	
	МаркированныеТовары.Очистить();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары);
	ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, МаркированныеТовары);
	
КонецПроцедуры

// Заполняет таблицу "Маркированные товары" на основании данных дерева упаковок. При заполнении исключаются упаковки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Строка дерева верхнего уровня.
Процедура ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокиДерева, МаркированныеТовары, УпаковкаВерхнегоУровня = Неопределено)
	
	МаркированныйТовар = Перечисления.ТипыУпаковок.МаркированныйТовар;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = МаркированныйТовар Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева           = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокаДерева.Строки, МаркированныеТовары);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует обработанные штрихкоды по первым строкам дерева упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - иерархия упаковок.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Данные кода маркировки.
Функция СформироватьОбработанныеШтрихкодыПоДаннымДереваУпаковок(ДеревоУпаковок)
	
	ДанныеМаркируемойПродукции = Новый Соответствие;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ДанныеКодаМаркировки = ИнициализироватьДанныеКодаМаркировки();
		ЗаполнитьЗначенияСвойств(ДанныеКодаМаркировки, СтрокаДерева);
		ДанныеКодаМаркировки.МаркируемаяПродукция = Истина;
		ДанныеКодаМаркировки.Штрихкод             = СтрокаДерева.Штрихкод;
		ДанныеКодаМаркировки.ТипУпаковки          = СтрокаДерева.ТипУпаковки;
		ДанныеКодаМаркировки.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Обувная);
		ДанныеМаркируемойПродукции.Вставить(СтрокаДерева.Штрихкод, ДанныеКодаМаркировки);
		
	КонецЦикла;
	
	Возврат ДанныеМаркируемойПродукции;
	
КонецФункции

// Выполянет дополнение дерева упаковок и маркированных товаров, информация по которым была получена из ИС МП.
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Описание:
// * ШтрихкодыПродукцииДляСопоставления - Массив - коллекция штрихкодов EAN, которые необходимо идентифицировать.
// * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции, присутствующие в дереве упаковок.
// * МаркированныеТовары - ТаблицаЗначений - Таблица с маркированной продукцией.
// * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ТаблицаEAN - Неопределено, ТаблицаЗначений - Описание:
// * GTIN - Строка - штрихкод GTIN.
//  ПараметрыСканирования - ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура ЗаполнитьВложенныеШтрихкодыПолученныеИзСервиса(ВложенныеШтрихкоды, ТаблицаEAN, ПараметрыСканирования)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	ДанныеПоEAN         = ДанныеПоEAN(ТаблицаEAN, ПараметрыСканирования);
	
	Если ДанныеПоEAN.ШтрихкодыПродукцииДляСопоставления <> Неопределено Тогда
		ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления = ДанныеПоEAN.ШтрихкодыПродукцииДляСопоставления;
		Возврат;
	КонецЕсли;
	
	ИнформацияПоEAN  = ДанныеПоEAN.ИнформацияПоEAN;
	ДанныеЗаполнения = ИнициализиацияДанныхЗаполненияДереваУпаковок();
	ДанныеЗаполнения.ИнформацияПоEAN = ИнформацияПоEAN;
	
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, Неопределено, ДанныеЗаполнения);
	СоздатьЭлементыШтрихкодовУпаковокПоДереву(ДеревоУпаковок, ПараметрыСканирования);
	НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары);
	
КонецПроцедуры

// Формирует данные по массиву EAN. Данные формируются на основании информации БД. Если информация в БД отсутствует -
// выполняется попытка получения данных из ИС МП.
//
// Параметры:
//  ТаблицаEAN - Неопределено, ТаблицаЗначений - Описание:
// * GTIN - Строка - штрихкод GTIN.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
// * ШтрихкодыПродукцииДляСопоставления - Массив - Штрихкоды, по которым не удалось собрать информацию.
// * ИнформацияПоEAN - Соответствие - Ключ - штрихкод EAN, значение - данные по нему.
Функция ДанныеПоEAN(ТаблицаEAN, ПараметрыСканирования)
	
	МассивEAN = ТаблицаEAN.ВыгрузитьКолонку("GTIN");
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(МассивEAN);
	
	ИнформацияПоКоллекцииEAN = Новый Структура;
	ИнформацияПоEAN          = Новый Соответствие;
	ИнформацияПоКоллекцииEAN.Вставить("ИнформацияПоEAN", ИнформацияПоEAN);
	ИнформацияПоКоллекцииEAN.Вставить("ШтрихкодыПродукцииДляСопоставления");
	
	МассивИзвестныхEAN   = ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ШтрихкодEAN");
	МассивНеизвестныхEAN = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивEAN, МассивИзвестныхEAN);
	
	Для Каждого Строка Из ДанныеПоШтрихкодамEAN Цикл
		
		ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		ИнформацияПоEAN.Вставить(Строка.ШтрихкодEAN, ДанныеШтрихкода);
		
	КонецЦикла;
	
	Если МассивНеизвестныхEAN.Количество() = 0 Тогда
		Возврат ИнформацияПоКоллекцииEAN;
	КонецЕсли;
	
	Если ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
		
		ИнформацияПоКоллекцииEAN.ШтрихкодыПродукцииДляСопоставления = МассивНеизвестныхEAN;
	
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.СсылкаНаОбъект) Тогда
		
		ДанныеНоменклатурыПоДаннымУПД = ДанныеМаркируемойНоменклатурыПоДаннымУПД(ПараметрыСканирования.СсылкаНаОбъект);
		ИнформацияПоКоллекцииEAN.ИнформацияПоEAN = ДанныеНоменклатурыПоДаннымУПД;
		
	Иначе
		ИнформацияНеизвестныхEANПоДаннымИСМП = ИнформацияНеизвестныхEANПоДаннымИСМП(МассивНеизвестныхEAN);
		
		Для Каждого КлючЗначение Из ИнформацияНеизвестныхEANПоДаннымИСМП Цикл
			
			ИнформацияПоШтрихкоду = Новый Структура("Номенклатура, ПредставлениеНоменклатуры");
			Если КлючЗначение.Значение = Неопределено Тогда
				ИнформацияПоШтрихкоду.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
			Иначе
				ИнформацияПоШтрихкоду.ПредставлениеНоменклатуры = КлючЗначение.Значение.Наименование;
			КонецЕсли;
			
			ИнформацияПоEAN.Вставить(КлючЗначение.Ключ, ИнформацияПоШтрихкоду);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИнформацияПоКоллекцииEAN;
	
КонецФункции

// Формирует элементы справочника Штрихкоды упаковок на основании данных полученных из ИС МП.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура СоздатьЭлементыШтрихкодовУпаковокПоДереву(ДеревоУпаковок, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоУпаковок.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(ДеревоУпаковок);
		ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Создание элементов справочника штрихкоды упаковок.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет во всех строках дерева упаковку верхнего уровня.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - верхний уровень дерева.
Процедура ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьУпаковкуВерхнегоУровняДерева(СтрокаДерева, УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует структуру заполнения вложенных штрихкодов.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
// * ПредставленияСтатусов - Соответствие - Ключ - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП, Значение - Представление.
// * Контрагенты - Соответствие - Ключ - ИНН, Значение - Контрагент.
// * УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Верхний уровень иерархии.
// * ИнформацияПоEAN - Неопределено, Соответствие - Информация по штрихкоду EAN.
Функция ИнициализиацияДанныхЗаполненияДереваУпаковок()

	ДанныеЗаполнения = Новый Структура;

	ДанныеЗаполнения.Вставить("ИнформацияПоEAN");
	ДанныеЗаполнения.Вставить("УпаковкаВерхнегоУровня", Неопределено);
	ДанныеЗаполнения.Вставить("Контрагенты",            Новый Соответствие);
	ДанныеЗаполнения.Вставить("ПредставленияСтатусов",  ПредставленияСтатусов());

	Возврат ДанныеЗаполнения;

КонецФункции

// Формирует правила детализации.
//
// Параметры:
// Возвращаемое значение:
//  Соответствие - Ключ - ПеречислениеСсылка.ДетализацияСтруктурыХраненияПродукцииИСМП, значение - свойство
//      правила. (См. ШтрихкодированиеИСМПСлужебный.СвойствоПравилаДетализации).
Функция ПравилаДетализацииДереваУпаковок()
	
	ПравилаДетализации = Новый Соответствие;
	
	ДетализацияПолная       = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная;
	ПотребительскиеУпаковки = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки;
	КоробаИУпаковки         = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.КоробаПотребительскиеУпаковки;
	
	ПравилаДетализации.Вставить(ДетализацияПолная,        СвойствоПравилаДетализации(Истина, Истина, Истина));
	ПравилаДетализации.Вставить(ПотребительскиеУпаковки,  СвойствоПравилаДетализации(Ложь,   Ложь,   Истина));
	ПравилаДетализации.Вставить(КоробаИУпаковки         , СвойствоПравилаДетализации(Ложь,   Истина, Истина));
	
	Возврат ПравилаДетализации;
	
КонецФункции

// Формирует свойство правила детализации.
//
// Параметры:
//  РазрешеныКоробки - Булево - Истина, в дереве разрешено показывать упаковки.
//  РазрешеныБлоки - Булево - Истина, в дереве разрешено показывать табачные блоки.
//  РазрешеныПачки - Булево - Истина, в дереве разрешено показывать пачки.
// Возвращаемое значение:
//  Структура - Описание:
// * РазрешеныКоробки - Булево - Истина, в дереве разрешено показывать упаковки.
// * РазрешеныБлоки - Истина, в дереве разрешено показывать табачные блоки.
// * РазрешеныПачки - Истина, в дереве разрешено показывать пачки.
Функция СвойствоПравилаДетализации(РазрешеныКонтейнеры, РазрешеныКоробаИПотребУпаковки, РазрешеныПотребУпаковки)
	
	Возврат Новый Структура("РазрешеныКонтейнеры, РазрешеныКоробаИПотребУпаковки, РазрешеныПотребУпаковки",
		РазрешеныКонтейнеры, РазрешеныКоробаИПотребУпаковки, РазрешеныПотребУпаковки);
	
КонецФункции

// Получает информацию по коллекции EAN из сервиса МОТП.
//
// Параметры:
//  ШтрихкодыEANДляСопоставления - Массив - Штрихкоды EAN.
// Возвращаемое значение:
//  (См. ИнтерфейсМОТП.ДанныеПродукцииПоШтрихкодуEAN).
Функция ИнформацияНеизвестныхEANПоДаннымИСМП(ШтрихкодыEANДляСопоставления)
	
	ИнформацияНеизвестныхEAN = Новый Соответствие;
	Если ШтрихкодыEANДляСопоставления.Количество() = 0 Тогда
		Возврат ИнформацияНеизвестныхEAN;
	КонецЕсли;
	
	ДанныеИСМП = ИнтерфейсИСМП.ДанныеПродукцииПоШтрихкодуEAN(ШтрихкодыEANДляСопоставления);
	
	Если ДанныеИСМП.ТребуетсяОбновлениеКлючаСессии Тогда
		ВызватьИсключение НСтр("ru = 'Требуется обновление ключа сессии.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИСМП.ТекстОшибки) Тогда
		ВызватьИсключение ДанныеИСМП.ТекстОшибки;
	КонецЕсли;
	
	Возврат ДанныеИСМП.ДанныеПродукцииПоШтрихкодуEAN;
	
КонецФункции

//Проверяет необходимость авторизации пользователя на сервере ИС МП.
// 
// Параметры:
//  ПараметрыСканирования - Структура - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования.
// Возвращаемое значение:
//  Булево.
Функция ТребуетсяАвторизацияПользователя(ПараметрыСканирования)
	
	ТребуетсяАвторизация = Ложь;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		
		Организация = ПараметрыСканирования.Организация;
		Если ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
			ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация)) Тогда
			ТребуетсяАвторизация = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТребуетсяАвторизация;
	
КонецФункции

// Возвращает соответствие статусов их представлениям.
// 
// Параметры:
// Возвращаемое значение:
//  Соответствие - статусы и их представления.
Функция ПредставленияСтатусов()
	
	ПредставленияСтатусов = Новый Соответствие();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыКодовМаркировки.Ссылка                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыКодовМаркировки.Ссылка) КАК ПредставлениеСтатуса
	|ИЗ
	|	Перечисление.СтатусыКодовМаркировкиИСМП КАК СтатусыКодовМаркировки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставленияСтатусов.Вставить(Выборка.Статус, Выборка.ПредставлениеСтатуса);
	КонецЦикла;
	
	Возврат ПредставленияСтатусов;
	
КонецФункции

// Выполняет проверку на ошибки по заданным правилам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив из Структура:
//     * КоллекцияСтрокСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Коллекция строк, где были выявлены 
//                          ошибки по контролю статусов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		
		ПроверитьНаОшибкиСтрокиДерева(ДеревоУпаковок.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировок, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				ОсобоеСостояние = ?(ЗначениеЗаполнено(СтрокаДерева.ОсобоеСостояние), "(" + СтрокаДерева.ОсобоеСостояние + ")", "");
				СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1 %2'"), 
					СтрокаДерева.ПредставлениеСтатуса, ОсобоеСостояние);
				СтрокаДерева.ЕстьОшибки = Истина;
			КонецЦикла;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда 
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru = 'ИНН владельца: %1'"), СтрокаДерева.ИННВладельца);
				СтрокаДерева.ЕстьОшибки  = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот")
			И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				ШаблонОшибки = НСтр("ru = 'Способ ввода в оборот: %1'");
				СтрокаДерева.ТекстОшибки = СтрШаблон(ШаблонОшибки, СтрокаДерева.СпособВводаВОборот);
				СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСоставаУпаковокИСМП") Тогда
		
		ЕстьРасхождения = Ложь;
		ШтрихкодированиеИС.ВыявитьРасхожденияВСоставахДеревьев(
			ДеревоУпаковок, ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса, ЕстьРасхождения);
		
		Если ЕстьРасхождения Тогда
			ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков")
		И ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Количество() > 0 Тогда
		
		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков Цикл
			
			Если СтрокаДерева.ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировок.Найти(СтрокаДерева.Штрихкод, "КодМаркировки");
			Если Не СтрокаДанных.ЭтоКодВводаОстатков И ПараметрыСканирования.ЭтоМаркировкаОстатков Тогда
				СтрокаДерева.ТекстОшибки = НСтр("ru='Допустима обработка только кодов маркировки ввода остатков.'");
			ИначеЕсли СтрокаДанных.ЭтоКодВводаОстатков И Не ПараметрыСканирования.ЭтоМаркировкаОстатков Тогда
				СтрокаДерева.ТекстОшибки = НСтр("ru='Недопустима обработка кодов маркировки ввода остатков.'");
			КонецЕсли;
			
			СтрокаДерева.ЕстьОшибки  = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПравилаПроверкиНаОшибки = ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам); 
	ПроверитьНаОшибкиОбработанныеШтрихкоды(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки,
		ПараметрыСканирования, ЕстьОшибки);
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
		И ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Количество() > 0 Тогда
		
		Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками Цикл
			ДанныеШтрихкода =  КлючЗначение.Значение;
			ОсобоеСостояние = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ОсобоеСостояние), "(" + ДанныеШтрихкода.ОсобоеСостояние + ")", "");
			ДанныеШтрихкода.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1 %2'"),
				ДанныеШтрихкода.ПредставлениеСтатуса, ОсобоеСостояние);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
		И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
		
		Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
			
			Если ЗначениеЗаполнено(КлючЗначение.Значение.Владелец) Тогда
				Владелец = "(" + КлючЗначение.Значение.Владелец + ")";
			Иначе
				Владелец = "";
			КонецЕсли;
			
			КлючЗначение.Значение.ТекстОшибки = СтрШаблон(НСтр("ru = 'ИНН владельца: %1 %2'"),
				КлючЗначение.Значение.ИННВладельца, Владелец);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков")
		И ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Количество() > 0 Тогда
		
		Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков Цикл
			
			СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировок.Найти(КлючЗначение.Значение.Штрихкод, "КодМаркировки");
			Если Не СтрокаДанных.ЭтоКодВводаОстатков И ПараметрыСканирования.ЭтоМаркировкаОстатков Тогда
				КлючЗначение.Значение.ТекстОшибки = НСтр("ru='Допустима обработка только кодов маркировки ввода остатков.'");
			ИначеЕсли СтрокаДанных.ЭтоКодВводаОстатков И Не ПараметрыСканирования.ЭтоМаркировкаОстатков Тогда
				КлючЗначение.Значение.ТекстОшибки = НСтр("ru='Недопустима обработка кодов маркировки ввода остатков.'");
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот")
		И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Количество() > 0 Тогда
		
		Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот Цикл
			СпособВводаВОборот = КлючЗначение.Значение.СпособВводаВОборот;
			Если СпособВводаВОборот = Неопределено Тогда
				СпособВводаВОборот = НСтр("ru='Неопределен'");
			КонецЕсли;
			
			ШаблонОшибки = НСтр("ru = 'Способ ввода в оборот: %1
			                          |Ожидаемый способ ввода в оборот: %2'");
			КлючЗначение.Значение.ТекстОшибки = СтрШаблон(ШаблонОшибки,
				СпособВводаВоборот, ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
		КонецЦикла;
			
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИС.ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(
		ПравилаПроверкиНаОшибки, ПараметрыСканирования);
	
КонецПроцедуры

// Выполняет проверку строк дерева на ошибки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПравилаПроверкиНаОшибки - Структура - правила, по которым выполняется проверка:
//    * КонтрольСерий - для дерева заполнение серий не контролируется.
//    * КонтрольСтатусов - Массив - список строк дерева, в которых статус не соответствует ожидаемому.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если при проверке выявлены ошибки.
Процедура ПроверитьНаОшибкиСтрокиДерева(СтрокиДерева, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеКодовМаркировок, ЕстьОшибки)
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
		СведенияОбОрганизации= Новый Структура();
		СведенияОбОрганизации.Вставить("ИНН", "");
		
		ИнтеграцияИСПереопределяемый.ЗаполнитьСведенияОбОрганизации(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
		ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов") Тогда
			ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусы;
			Если ДопустимыеСтатусыИСМП.Найти(СтрокаДерева.Статус) = Неопределено
				Или СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
				И ДопустимыеСтатусыИСМП.Найти(Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен) <> Неопределено
				И СтрокаДерева.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Добавить(СтрокаДерева);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот") Тогда
			
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И СтрокаДерева.СпособВводаВОборот <> ПараметрыСканирования.ДопустимыйСпособВводаВОборот Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И СтрокаДерева.ИННВладельца <> ОжидаемыйИННВладельца Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДерева);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков") Тогда
			
			НайденнаяСтрока = ДанныеКодовМаркировок.Найти(СтрокаДерева.Штрихкод, "КодМаркировки");
			
			Если НайденнаяСтрока <> Неопределено
				И НайденнаяСтрока.МаркируемаяПродукция
				И (Не НайденнаяСтрока.ЭтоКодВводаОстатков И ПараметрыСканирования.ЭтоМаркировкаОстатков
				Или НайденнаяСтрока.ЭтоКодВводаОстатков И Не ПараметрыСканирования.ЭтоМаркировкаОстатков) Тогда
				
				ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Добавить(СтрокаДерева);
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверитьНаОшибкиСтрокиДерева(СтрокаДерева.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеКодовМаркировок, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет обработанные штрихкоды на ошибки по заданным правилам.
// 
// Параметры:
//  ОбработанныеШтрихкоды - Соответствие - Ключ - Штриххкод, значение - данные штрихкода.
//  ПравилаПроверкиНаОшибки - Структура, Структура - Описание:
// * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
// * КонтрольСтатусов - Массив из Структура:
//     * КоллекцияСтрокСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиМОПТ - Коллекция строк, где были выявлены 
//                          ошибки по контролю статусов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиОбработанныеШтрихкоды(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	ОбработанныеШтрихкоды = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды;
	Для Каждого КлючЗначение Из ОбработанныеШтрихкоды Цикл
		
		Если ДанныеПоШтрихкодам.МаркируемаяПродукция.Найти(КлючЗначение.Ключ) = Неопределено Тогда // Проверка на упаковку
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода = КлючЗначение.Значение;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
			
			СведенияОбОрганизации= Новый Структура();
			СведенияОбОрганизации.Вставить("ИНН", "");
		
			ИнтеграцияИСПереопределяемый.ЗаполнитьСведенияОбОрганизации(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
			ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
			
			Если ДанныеШтрихкода.ИННВладельца <> ОжидаемыйИННВладельца Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(КлючЗначение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов") Тогда
			ДопустимыеСтатусы           = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусы;
			ОтсутствуетДопустимыйСтатус = (ДопустимыеСтатусы.Найти(ДанныеШтрихкода.Статус) = Неопределено
				И ДопустимыеСтатусы.Найти(ДанныеШтрихкода.ОсобоеСостояние) = Неопределено);
			Если ОтсутствуетДопустимыйСтатус
				Или ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
				И ДанныеШтрихкода.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Добавить(КлючЗначение);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий") Тогда
			
			Если ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования) Тогда
				
				ПравилаПроверкиНаОшибки.КонтрольСерий.Добавить(КлючЗначение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков") Тогда
			
			СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировок.Найти(ДанныеШтрихкода.Штрихкод, "КодМаркировки");
			Если Не СтрокаДанных.ЭтоКодВводаОстатков И ПараметрыСканирования.ЭтоМаркировкаОстатков
				Или СтрокаДанных.ЭтоКодВводаОстатков И Не ПараметрыСканирования.ЭтоМаркировкаОстатков Тогда
				
				ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Добавить(КлючЗначение);
				ЕстьОшибки = Истина;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот") Тогда
			
			Если ДанныеШтрихкода.СпособВводаВОборот <> ПараметрыСканирования.ДопустимыйСпособВводаВОборот Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Добавить(КлючЗначение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость указания серии для маркиремой продукции.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется указать серию.
Функция ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования)
	
	ТребуетсяВыбор = Ложь;
	
	Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар 
		И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		
		ПараметрыУказанияСерий = ПараметрыСканирования.ПараметрыУказанияСерий;
		Склад                  = ПараметрыСканирования.Склад;
		Номенклатура           = ДанныеШтрихкода.Номенклатура;
		Характеристика         = ДанныеШтрихкода.Характеристика;
		ДанныеДляРасчетаСерии  = Новый Структура("Склад, Номенклатура, Характеристика", Склад, Номенклатура, Характеристика);
		ШтрихкодированиеИСПереопределяемый.ПриОпределинииНеобходимостиВыбораСерии(
			ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяВыбор);
		
	КонецЕсли;
	
	Возврат ТребуетсяВыбор;
	
КонецФункции

// Инициализирует структуру правил для проверки на ошибки данных по кодам маркировки.
// 
// Параметры:
//  ПараметрыСканирования - (см. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ДанныеПоШтрихкодам - (см. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Структура - Описание:
// * КонтрольВладельца - Массив - коллекция, куда требуется поместить строки с ошибками при контроле владельца.
// * КонтрольСоставаУпаковокИСМП - Массив - коллекция, куда требуется поместить строки с ошибками при контроле состава упаковок.
// * КонтрольСпособаВводаВОборот - Массив - коллекция, куда требуется поместить строки с ошибками при контроле способа ввода в оборот.
// * КонтрольСерий - Массив - коллекция, куда требуется поместить строки с ошибками при контроле серий.
// * КонтрольСтатусов - коллекция, куда требуется поместить строки с ошибками при контроле допустимых статусов.
Функция ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	ПравилаПроверкиНаОшибки = Новый Структура;
	
	Если ПараметрыСканирования.ДопустимыеСтатусыИСМП.Количество() > 0
		И ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		
		ПравилоКонтроляСтатусов = Новый Структура;
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусы",       ПараметрыСканирования.ДопустимыеСтатусыИСМП);
		ПравилоКонтроляСтатусов.Вставить("КоллекцияСтрокСОшибками", Новый Массив);
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСтатусов", ПравилоКонтроляСтатусов);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСерий", Новый Массив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот)
		И ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборот", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольСоставаУпаковокИСМП
		И ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса <> Неопределено Тогда
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСоставаУпаковокИСМП", Новый Массив);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыИСМП
		И ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольВладельца", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.ЭтоМаркировкаОстатков <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольКодовВводаОстатков", Новый Массив);
	КонецЕсли;
	
	Возврат ПравилаПроверкиНаОшибки;
	
КонецФункции

#Область ЗаполнениеДанных

// Дополняет данные по штрихкодам спецификой, исключая информацию без обращения в систему ИС МП.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДеревоУпаковок = Неопределено;
	
	КодыМаркировкиДляПолученияСпецифики = КодыМаркировкиДляПолученияСпецифики(ДанныеПоШтрихкодам, ПараметрыСканирования);
	СпецификаКодовМаркировки = СпецификаКодовМаркировкиПоДаннымПула(КодыМаркировкиДляПолученияСпецифики, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ВложенныеШтрихкоды) Тогда
		
		ДеревоУпаковок      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары);
		НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, СпецификаКодовМаркировки);
		ПривестиДанныеМаркированныхТоваровВСоответствиеДеревуУпаковок(МаркированныеТовары);
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.Свойство("ОбработанныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды) Тогда
		
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
			
			КодМаркировки = КлючЗначение.Ключ;
			ДанныеКодаМаркировки = КлючЗначение.Значение;
			ДополнитьСвойстваДанныхШтрихкода(ДанныеКодаМаркировки);
			СпецификаКодаМаркировки = СпецификаКодовМаркировки.Получить(КодМаркировки);
			
			Если СпецификаКодаМаркировки <> Неопределено Тогда
				ДанныеКодаМаркировки.Владелец             = СпецификаКодаМаркировки.Контрагент;
				ДанныеКодаМаркировки.ИННВладельца         = СпецификаКодаМаркировки.ИННВладельца;
				ДанныеКодаМаркировки.СпособВводаВОборот   = СпецификаКодаМаркировки.СпособВводаВОборот;
				ДанныеКодаМаркировки.Статус               = СпецификаКодаМаркировки.Статус;
				ДанныеКодаМаркировки.ПредставлениеСтатуса = СпецификаКодаМаркировки.ПредставлениеСтатуса;
			КонецЕсли;
			
		КонецЦикла;
		
		СоставКодаМаркировки = ШтрихкодированиеИСМПКлиентСервер.СоставКодаМаркировки(ДанныеКодаМаркировки.Штрихкод);
		Если СоставКодаМаркировки <> Неопределено Тогда
			ДанныеКодаМаркировки.GTIN = СоставКодаМаркировки.GTIN;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает все коды маркировки, находящиеся в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// Возвращаемое значение:
//  Массив из Строка - Коды маркировки.
Функция КодыМаркировкиДляПолученияСпецифики(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	КодыМаркировкиДляПолученияСпецифики = Новый Массив;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
			И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		КодыМаркировкиДляПолученияСпецифики = ШтрихкодированиеИС.ЗначенияШтрихкодовДереваУпаковок(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок);
		
	КонецЕсли;
	
	
	Если ДанныеПоШтрихкодам.Свойство("ОбработанныеШтрихкоды")
			И ДанныеПоШтрихкодам.ОбработанныеШтрихкоды <> Неопределено Тогда
			
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
			
			Если ДанныеПоШтрихкодам.МаркируемаяПродукция.Найти(КлючЗначение.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КодыМаркировкиДляПолученияСпецифики.Добавить(КлючЗначение.Значение.Штрихкод);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КодыМаркировкиДляПолученияСпецифики;
	
КонецФункции

// Возвращает специфику, сформированную по данным регистра сведений "Пул кодов маркировки СУЗ".
// 
// Параметры:
//  КодыМаркировки - Массив из Строка - Коды маркировки, по которым требуется получить специфику.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - Ключ - код маркировки, значение - специфика кода маркировки.
Функция СпецификаКодовМаркировкиПоДаннымПула(КодыМаркировки, ПараметрыСканирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпецификаКодовМаркировки = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.КодМаркировки           КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная КАК ДатаПечати,
	|	ПулКодовМаркировкиСУЗ.Организация             КАК Владелец,
	|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот      КАК СпособВводаВОборот
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.КодМаркировки В (&КодыМаркировки)");
	Запрос.УстановитьПараметр("КодыМаркировки", КодыМаркировки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ПредставленияСтатусов = ПредставленияСтатусов();
	
	СоответствиеОрганизацииИННиКПП = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		ИННиКПП = СоответствиеОрганизацииИННиКПП.Получить(Выборка.Владелец);
		
		Если ИННиКПП = Неопределено Тогда
			ИННиКПП = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Выборка.Владелец);
			СоответствиеОрганизацииИННиКПП.Вставить(Выборка.Владелец, ИННиКПП);
		КонецЕсли;
		
		СпецификаКода = Новый Структура;
		
		СпецификаКода.Вставить("ИННВладельца",         ИННиКПП.ИНН);
		СпецификаКода.Вставить("Контрагент",           Выборка.Владелец);
		СпецификаКода.Вставить("СпособВводаВОборот",   Выборка.СпособВводаВОборот);
		СпецификаКода.Вставить("Статус",               Неопределено);
		СпецификаКода.Вставить("ПредставлениеСтатуса", "Неопределен");

		Если ЗначениеЗаполнено(ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию) Тогда
			СпецификаКода.Статус               = ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию;
			СпецификаКода.ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СпецификаКода.Статус);
		КонецЕсли;
		
		СпецификаКодовМаркировки.Вставить(Выборка.КодМаркировки, СпецификаКода);
		
	КонецЦикла;
	
	Возврат СпецификаКодовМаркировки;
	
КонецФункции

// Заполняет связанные строки таблицы Маркированные товары данными строк дерева упаковок.
// 
// Параметры:
//  МаркированныеТовары - ТаблицаЗначений - Таблица маркируемой продукции.
Процедура ПривестиДанныеМаркированныхТоваровВСоответствиеДеревуУпаковок(МаркированныеТовары)
	
	Для Каждого СтрокаТовары Из МаркированныеТовары Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТовары.СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет заполнение данных по штрихкодам спецификой продукции ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыДляПолученияСпецифики = КодыМаркировкиДляПолученияСпецифики(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
			И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
			
		Если ПараметрыСканирования.КонтрольСоставаУпаковокИСМП Тогда
			
			ШтрихкодыУпаковок = Новый Массив;
			
			Для Каждого Штрихкод Из ДанныеПоШтрихкодам.ВсеШтрихкоды Цикл
				Если ШтрихкодированиеИСМПКлиентСервер.ЭтоКодЛогистическойУпаковки(Штрихкод) Тогда
					ШтрихкодыУпаковок.Добавить(Штрихкод);
				КонецЕсли;
			КонецЦикла;
			
			РезультатПолученияДанных = ВложенныеШтрихкодыПоДаннымИСМП(ШтрихкодыУпаковок, ПараметрыСканирования, Ложь); 
			Если РезультатПолученияДанных.ЕстьОшибки Тогда
				ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
				ДанныеПоШтрихкодам.ТекстОшибки = РезультатПолученияДанных.ТекстОшибки;
			Иначе
				ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса = РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ШтрихкодыДляПолученияСпецифики.Количество() = 0 Тогда
		СпецификаШтрихкодов = Неопределено;
	Иначе
		Результат = СпецификаДляДополненияДанныхПоШтрихкодам(ШтрихкодыДляПолученияСпецифики);
		Если Результат.ЕстьОшибки Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
			
			Возврат;
		Иначе
			
			СпецификаШтрихкодов = Результат.СпецификаШтрихкодов;
			ЗаполнитьСпособВводаВОборотСпецификиШтрихкодов(СпецификаШтрихкодов, ШтрихкодыДляПолученияСпецифики, ПараметрыСканирования);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, СпецификаШтрихкодов);
		
	КонецЕсли;
	
	Если СпецификаШтрихкодов <> Неопределено Тогда
		ДополнитьСпецификойОбработанныеШтрихкоды(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, СпецификаШтрихкодов, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет способ ввода в оборот специфики кодов маркировки. Сначала выполянется заполнение на основании данных регистра
//    сведений "Пул кодов маркировки СУЗ", если получить способа ввода в оборот не удается выполняется обращение в сервис ИС МП.
// 
// Параметры:
//  СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из ИС МП.
//  КодыМаркировки - Массив из Строка - Список кодов маркировки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура ЗаполнитьСпособВводаВОборотСпецификиШтрихкодов(СпецификаШтрихкодов, КодыМаркировки, ПараметрыСканирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПулаПоКодамМаркировки = РегистрыСведений.ПулКодовМаркировкиСУЗ.ДанныеКодовМаркировки(КодыМаркировки);
	
	Для Каждого КлючЗначение Из СпецификаШтрихкодов Цикл
		
		КодМаркировки           = КлючЗначение.Ключ;
		СпецификаКодаМаркировки = КлючЗначение.Значение;
		ДанныеПула              = ДанныеПулаПоКодамМаркировки.Получить(КодМаркировки);
		СпособВводаВОборот      = Неопределено;
		
		Если ДанныеПула <> Неопределено Тогда
			
			СпособВводаВОборот = ДанныеПула.СпособВводаВОборот;
			
		ИначеЕсли СпецификаКодаМаркировки.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
			
			СпособВводаВОборот = СпособВводаВОборотКодаМаркировки(КодМаркировки, ПараметрыСканирования);
			
		КонецЕсли;
		
		СпецификаКодаМаркировки = КлючЗначение.Значение;
		СпецификаКодаМаркировки.Вставить("СпособВводаВОборот", СпособВводаВОборот);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает способ ввода в оборот по коду маркировки.
// 
// Параметры:
//  КодМаркировки - Произвольный - Описание
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Неопределено, ПеречислениеСсылка.СпособыВводаВОборотСУЗ - Способ ввода в оборот кода маркировки.
Функция СпособВводаВОборотКодаМаркировки(КодМаркировки, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.ЗапрашиватьСпособВводаВОборот Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыСредстваИдентификации = ИнтерфейсИСМП.ПараметрыСредстваИдентификации(КодМаркировки);
	Если ПараметрыСредстваИдентификации.ПараметрыКодаМаркировки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыСредстваИдентификации.ПараметрыКодаМаркировки.СпособВводаВОборот;
	
КонецФункции

// Получение спицифичных данных, используемых только для табачной продукции.
// 
// Параметры:
//  ШтрихкодыДляПолученияСпецифики - Массив - Коды маркировок.
// Возвращаемое значение:
//  Структура - Описание:
//   * СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из ИС МП.
//   * ЕстьОшибки - Истина, если при попытке получения данных из ИСМП возникла ошибка.
//   * ТекстОшибки - Описание ошибки.
Функция СпецификаДляДополненияДанныхПоШтрихкодам(ШтрихкодыДляПолученияСпецифики)
	
	Результат = Новый Структура;
	Результат.Вставить("СпецификаШтрихкодов",            Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ДанныеПоШтрихкодамИСМП = ИнтерфейсИСМП.СтатусыКодовМаркировки(ШтрихкодыДляПолученияСпецифики);
	
	Если ДанныеПоШтрихкодамИСМП.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МП.
		                                   |По причине: Требуется обновление ключа сессии.'");
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат Результат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеПоШтрихкодамИСМП.ТекстОшибки) Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить данные из ИС МП.
			           |По причине: %1'"), ДанныеПоШтрихкодамИСМП.ТекстОшибки);
		
		Возврат Результат;
	КонецЕсли;
	
	СтатусыКодовМаркировки = ДанныеПоШтрихкодамИСМП.СтатусыКодовМаркировки;
	
	МассивИНН = Новый Массив;
	Для Каждого КлючЗначение Из СтатусыКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(КлючЗначение.Значение.ИННВладельца) Тогда
			МассивИНН.Добавить(КлючЗначение.Значение.ИННВладельца);
		КонецЕсли;
		
	КонецЦикла;
	
	КонтрагентыПоИНН      = КонтрагентыПоКоллекцииИНН(МассивИНН);
	ПредставленияСтатусов = ПредставленияСтатусов();
	
	Для Каждого КлючЗначение Из СтатусыКодовМаркировки Цикл
		
		Контрагент = КонтрагентыПоИНН.Получить(КлючЗначение.Значение.ИННВладельца);
		КлючЗначение.Значение.Вставить("Контрагент", Контрагент);
		
		ПредставлениеСтатуса = ПредставленияСтатусов.Получить(КлючЗначение.Значение.Статус);
		КлючЗначение.Значение.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
		
	КонецЦикла;
	
	Результат.СпецификаШтрихкодов = СтатусыКодовМаркировки;
	
	Возврат Результат;
	
КонецФункции

// Получает контрагентов по коллекции ИНН.
// 
// Параметры:
//  КоллекцияИНН - Массив - список ИНН контрагентов
// Возвращаемое значение:
//  Соответствие:
//		Ключ     - Строка                       - ИНН контрагента
//		Значение - СправочникСсылка.Контрагенты - элемент справочника
Функция КонтрагентыПоКоллекцииИНН(КоллекцияИНН)
	
	СоответствиеИННКонтрагентам = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, СоответствиеИННКонтрагентам);
	
	Возврат СоответствиеИННКонтрагентам;
	
КонецФункции

// Дополняет дерево упаковок колонками, специфичными для табачной продукции. Заполняет значения специфичных колонок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  СпецификаШтрихкодов - Неопределено, Соответствие - Ключ - код маркировки, значение - данные спицифики.
//  ДанныеЗаполнения - Неопределено, Структура - Описание:
// * ПредставленияСтатусов - Соответствие - Ключ - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП, значение - представление.
// * Контрагенты - Соответствие - Ключ - ИНН, значение - контрагент.
// * УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Строка дерева верхнего уровня.
// * ИнформацияПоEAN - Неопределено, соответствие - Информация по штрихкоду EAN.
Процедура НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, СпецификаШтрихкодов = Неопределено, ДанныеЗаполнения = Неопределено)
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	ЗаполнитьСтрокиДерева(ДеревоУпаковок.Строки, ПараметрыСканирования, СпецификаШтрихкодов, ДанныеЗаполнения);
	
КонецПроцедуры

// Заполняет строки дерева упаковок данными специфичными для табачной продукции.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  СпецификаШтрихкодов - Неопределено, Соответствие - Данные, специфичные для табачной продукции.
//  ДанныеЗаполнения - (См. ШтрихкодированиеИСМП.ИнициализиацияДанныхЗаполненияДереваУпаковок).
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка иерархии дерева упаковок.
Процедура ЗаполнитьСтрокиДерева(СтрокиДерева, ПараметрыСканирования, СпецификаШтрихкодов = Неопределено,
	ДанныеЗаполнения = Неопределено, УпаковкаВерхнегоУровня = Неопределено, ЭтоПервыйУровень = Истина)
	
	ПервыйОбходСтрокУровня = Истина;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВидПродукции)
			И СтрокаДерева.ВидПродукции <> Перечисления.ВидыПродукцииИС.Обувная Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПервыйУровень Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
			ЭтоПервыйУровень = Ложь;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьСтрокиДерева(
			СтрокаДерева.Строки, ПараметрыСканирования, СпецификаШтрихкодов,
			ДанныеЗаполнения, УпаковкаВерхнегоУровня, Ложь);
		
		ЗаполнитьХарактеристикиУпаковкиСтрокиДерева(СтрокаДерева, ПервыйОбходСтрокУровня);
		РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева);
		ЗаполнитьСтрокуДереваПоДаннымЗаполнения(СтрокаДерева, ДанныеЗаполнения);
		ЗаполнитьСпецификуСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов);
		ЗаполнитьGTINСтрокиДерева(СтрокаДерева);
		ЗаполнитьСпособВводаВОборот(СтрокаДерева, ПараметрыСканирования);
		СтрокаДерева.Штрихкод = ШтрихкодированиеИСМПКлиентСервер.НормализоватьКодМаркировки(СтрокаДерева.Штрихкод);
		
		ПервыйОбходСтрокУровня = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет способ ввода в оборот в строке дерева упаковок.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьСпособВводаВОборот(СтрокаДерева, ПараметрыСканирования)
	
	Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
		И Не ЗначениеЗаполнено(СтрокаДерева.СпособВводаВОборот) Тогда
		СтрокаДерева.СпособВводаВОборот = СпособВводаВОборотКодаМаркировки(СтрокаДерева.Штрихкод, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет количественных показателей строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		СтрокаДерева.КоличествоВложенныхЕдиниц = 1;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		СтрокаДерева.Родитель.КоличествоВложенныхЕдиниц = СтрокаДерева.Родитель.КоличествоВложенныхЕдиниц
		                                                + СтрокаДерева.КоличествоВложенныхЕдиниц;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет характеристики упаковки строки дерева, такие как: "ЭтоЛогистическаяУпаковка", "ТипШтрихкода".
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  ПервыйОбходСтрокУровня - Булево - Истина, если выполняет первый обход строк дерева.
Процедура ЗаполнитьХарактеристикиУпаковкиСтрокиДерева(СтрокаДерева, ПервыйОбходСтрокУровня)
	
	СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128;
	СтрокаДерева.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная;
	
	ЭтоЛогистическаяУпаковка = Истина;
	
	Если СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
		СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	
	Если ШтрихкодированиеИСМПКлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(СтрокаДерева.Штрихкод) Тогда
		
		СтрокаДерева.ТипУпаковки  = Перечисления.ТипыУпаковок.МаркированныйТовар;
		СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
		ЭтоЛогистическаяУпаковка  = Ложь;
		ЗаменитьЗначенияНеопределеноНаПустыеСсылкиВСтрокеДерева(СтрокаДерева);
		
	КонецЕсли;
	
	Родитель = СтрокаДерева.Родитель;
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Родитель.ТипУпаковки) Тогда
		Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	
	Если ПервыйОбходСтрокУровня И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.GTIN           = СтрокаДерева.GTIN;
		Родитель.Номенклатура   = СтрокаДерева.Номенклатура;
		Родитель.Характеристика = СтрокаДерева.Характеристика;
		Родитель.Серия          = СтрокаДерева.Серия;
		
		Возврат;
		
	КонецЕсли;
	
	Если Родитель.GTIN <> СтрокаДерева.GTIN
		И Родитель.Номенклатура <> СтрокаДерева.Номенклатура
		И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.Номенклатура = Неопределено;
		Родитель.GTIN         = Неопределено;
		Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		
	КонецЕсли;
	
	Если Родитель.Характеристика <> СтрокаДерева.Характеристика
		И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.Характеристика = Неопределено;
		Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		
	КонецЕсли;
	
	Если Родитель.Серия <> СтрокаДерева.Серия
		И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.Серия = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет замену значений строки дерева со значениями Неопределено на пустые ссылки.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Описание
Процедура ЗаменитьЗначенияНеопределеноНаПустыеСсылкиВСтрокеДерева(СтрокаДерева)
	
	ПустаяНоменклатура   = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	ПустаяХарактеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	ПустаяСерия          = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	
	Если СтрокаДерева.Номенклатура = Неопределено Тогда
		СтрокаДерева.Номенклатура = ПустаяНоменклатура;
	КонецЕсли;
	
	Если СтрокаДерева.Характеристика = Неопределено Тогда
		СтрокаДерева.Характеристика = ПустаяХарактеристика;
	КонецЕсли;
	
	Если СтрокаДерева.Серия = Неопределено Тогда
		СтрокаДерева.Серия = ПустаяСерия;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет значение GTIN в строке дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура ЗаполнитьGTINСтрокиДерева(СтрокаДерева)
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
		СтрокаДерева.GTIN = ШтрихкодированиеИС.EANПоКодуМаркировки(СтрокаДерева.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку дерева на основании данных дополнения.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  ДанныеЗаполнения - (См. ШтрихкодированиеМОТП.ИнициализиацияДанныхЗаполненияДереваУпаковок).
Процедура ЗаполнитьСтрокуДереваПоДаннымЗаполнения(СтрокаДерева, ДанныеЗаполнения)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияПоКоллекцииEAN = ДанныеЗаполнения.ИнформацияПоEAN;
	Контрагенты              = ДанныеЗаполнения.Контрагенты;
	ПредставленияСтатусов    = ДанныеЗаполнения.ПредставленияСтатусов;
	
	Если ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
		
		ИнформацияПоEAN = ИнформацияПоКоллекцииEAN[СтрокаДерева.GTIN];
		Если ИнформацияПоEAN <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ИнформацияПоEAN);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДерева.ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДерева.Статус);
	
	Контрагент = Контрагенты.Получить(СтрокаДерева.ИННВладельца);
	Если Контрагент = Неопределено Тогда
		Контрагент = ИнтеграцияИСМП.КонтрагентПоИНН(СтрокаДерева.ИННВладельца);
		ДанныеЗаполнения.Контрагенты.Вставить(СтрокаДерева.ИННВладельца, Контрагент);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет спецификой все строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  СпецификаШтрихкодов - Соответствие, Неопределено - Ключ - код маркировки, Значение - специфика.
Процедура ЗаполнитьСпецификуСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов)
	
	Если СпецификаШтрихкодов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпецификаШтрихкода = СпецификаШтрихкодов.Получить(СтрокаДерева.Штрихкод);
	
	Если СпецификаШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.ИННВладельца         = СпецификаШтрихкода.ИННВладельца;
	СтрокаДерева.Контрагент           = СпецификаШтрихкода.Контрагент;
	СтрокаДерева.Статус               = СпецификаШтрихкода.Статус;
	СтрокаДерева.ПредставлениеСтатуса = Строка(СпецификаШтрихкода.Статус);
	СтрокаДерева.СпособВводаВОборот   = СпецификаШтрихкода.СпособВводаВОборот;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

// Формирует вложенные штрихкоды путем получения базовых коллекций "ДеревоУпаковок" и "МаркированныеТовары" и дополнения
// их колонками специфичными для табачной продукции.
//
// Параметры:
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов)
//   и (См. ШтрихкодированиеИСМП.НормализоватьСвойстваКоллекцииВложенныхШтрихкодов).
Функция ИнициализацияВложенныхШтрихкодов()
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.ДеревоУпаковок);
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.МаркированныеТовары);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Дополняет свойства таблицы значений - "МаркированныеТовары" или дерево значение - "ДеревоУпаковок" колонками,
// специфичными для табачной продукции.
//
// Параметры:
//  Коллекция - ТаблицаЗначений, ДеревоЗначений - "МаркированныеТовары" или "ДеревоУпаковок".
Процедура НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(Коллекция)
	
	Если Коллекция.Колонки.Найти("КоличествоПотребительскихУпаковок") <> Неопределено Тогда
		Коллекция.Колонки.Найти("КоличествоПотребительскихУпаковок").Имя = "КоличествоВложенныхЕдиниц";
	КонецЕсли;
	
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиДереваУпаковок();
		КоллекцияОбязательныхКолонок.Вставить("ОсобоеСостояние");
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда 
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары();
	КонецЕсли;
	
	КоллекцияОбязательныхКолонок.Вставить("ИННВладельца",              Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("Контрагент",                Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("GTIN",                      Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("Статус",                    Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеСтатуса",      Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоВложенныхЕдиниц", Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("СпособВводаВОборот",        Неопределено);
	
	Для Каждого КлючЗначение Из КоллекцияОбязательныхКолонок Цикл
		
		Если Коллекция.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Коллекция.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Инициаилизирует структуру, описывающую результат получения вложенных штрихкродов по данным ИС МП.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка - Ошибка, возникшая в результате запроса данных из ИС МП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка.
// * ВложенныеШтрихкоды - См. ШтрихкодированиеИСМПСлужебный.ИнициализацияВложенныхШтрихкодов.
Функция ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВложенныеШтрихкоды",             Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст ошибки о запрещении запрашивать данные по неизвестным кодам в ИС МП.
// 
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиЗапрещеноЗапрашиватьДанныеВИСМП()
	
	Возврат НСтр("ru = 'Запрещено запрашивать данные по неизвестным штрихкодам в ИС МП.'");
	
КонецФункции

#КонецОбласти

#Область СборИнформацииПоДаннымУПД

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   УПД учетного документа.
// 
// Параметры:
//  УчетныйДокумент - ЛюбаяСсылка - Документ, формируемый на основании УПД.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымУПД(УчетныйДокумент)
	
	Если УчетныйДокумент = Неопределено Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	// Получаем электронный документ и присоединенный файл титула продавца
	ЭлектронныйДокумент = ОбменСКонтрагентами.СтатусДокументооборота(УчетныйДокумент).ЭлектронныйДокумент;
	СсылкаНаФайл = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭлектронныйДокумент);
	
	// Сохраняем файл на диск
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	//Формируем дерево документа
	ОписаниеЭД = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяВременногоФайла);
	ДеревоДокумента = ОписаниеЭД.СтрокаОбъекта.ЗначениеРеквизита;
	
	// Заполняем номенклатуру информационной базы в дереве.
	ДанныеЭлектронногоДокумента = Новый Структура("Контрагент", УчетныйДокумент.Контрагент);
	
	ОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВДеревеДокумента(
		ДанныеЭлектронногоДокумента, ДеревоДокумента);
	
	ИмяСобытия = НСтр("ru = 'Формирование дерева разбора ЭДО.Удаление временного файла.'");
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента);
	
КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по УПД.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным УПД.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента)
	
	СоответствиеШтрихкодаEANНоменклатуре = Новый Соответствие;
	СведенияОТоварах = ДеревоДокумента.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат СоответствиеШтрихкодаEANНоменклатуре;
	КонецЕсли;
	
	ПутьКИндивидуальнымУпаковкам155 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок";
	ПутьКИндивидуальнымУпаковкам820 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки";
	ПутьКНоменклатуре               = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике             = "СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам820, "ПолныйПуть", Истина);
		Если ИндивидуальныеУпаковки = Неопределено Тогда
			
			ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам155, "ПолныйПуть", Истина);
			Если ИндивидуальныеУпаковки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ИндивидУпаковка Из ИндивидуальныеУпаковки.Строки Цикл
			
			Если ИндивидУпаковка.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КодМаркировки = ИндивидУпаковка.Строки[0].Значение;
			
			Если ПустаяСтрока(КодМаркировки) Тогда //Товар без маркировки.
				Продолжить;
			КонецЕсли;
			
			ДанныеНоменклатуры = Новый Структура;
			ДанныеНоменклатуры.Вставить("Номенклатура",              Номенклатура);
			ДанныеНоменклатуры.Вставить("Характеристика",            Характеристика);
			ДанныеНоменклатуры.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
			
			СоставКодаМаркировки = ШтрихкодированиеИСМПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
			ШтрихкодEAN = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(СоставКодаМаркировки.GTIN);
			СоответствиеШтрихкодаEANНоменклатуре.Вставить(ШтрихкодEAN, ДанныеНоменклатуры);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СоответствиеШтрихкодаEANНоменклатуре;
	
КонецФункции

#КонецОбласти

#КонецОбласти
