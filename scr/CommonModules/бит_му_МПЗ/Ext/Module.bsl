
#Область СлужебныйПрограммныйИнтерфейс

#Область СчетаУчетаНоменклатуры

// Функция получает счета учета номенклатуры.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
// Возвращаемое значение:
//  РезСтруктура   - Структура
// 
Функция ПолучитьСчетаУчетаНоменклатуры(СтруктураПараметров) Экспорт
	
	ИмяТаблицыНоменклатурнаяГруппа = бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ИмяСправочникаНоменклатурныеГруппы();
	ПустаяНоменклатурнаяГруппа = Справочники[ИмяТаблицыНоменклатурнаяГруппа].ПустаяСсылка();
	
	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("Организация", 			Справочники.Организации.ПустаяСсылка());
	РезСтруктура.Вставить("НоменклатурнаяГруппа", 	ПустаяНоменклатурнаяГруппа);
	РезСтруктура.Вставить("Номенклатура", 			Справочники.Номенклатура.ПустаяСсылка());
	РезСтруктура.Вставить("Склад", 					Справочники.Склады.ПустаяСсылка());
	РезСтруктура.Вставить("СчетУчета", 				ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("СчетРезерва", 			ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());	
	
	МассивОрганизация	 		= Новый Массив();
	МассивНоменклатурнаяГруппа 	= Новый Массив();
	МассивВидНоменклатуры       = Новый Массив();
	МассивНоменклатура	 		= Новый Массив();
	МассивТипСклада             = Новый Массив();	
	МассивСклад			 		= Новый Массив();
	
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивНоменклатурнаяГруппа.Добавить(ПустаяНоменклатурнаяГруппа);
	МассивВидНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.ПустаяСсылка());
	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивТипСклада.Добавить(Перечисления.ТипыСкладов.ПустаяСсылка());
	МассивСклад.Добавить(Справочники.Склады.ПустаяСсылка());
	
	Организация 			= бит_ОбщегоНазначения.ПолучитьЗначениеИзСтруктуры(СтруктураПараметров, "Организация");
	Номенклатура 			= бит_ОбщегоНазначения.ПолучитьЗначениеИзСтруктуры(СтруктураПараметров, "Номенклатура");
	НоменклатурнаяГруппа 	= Номенклатура[бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ИмяРеквизитаНоменклатурнаяГруппа()];
	Склад 					= бит_ОбщегоНазначения.ПолучитьЗначениеИзСтруктуры(СтруктураПараметров, "Склад");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивОрганизация.Добавить(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		МассивНоменклатурнаяГруппа.Добавить(НоменклатурнаяГруппа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		МассивНоменклатура.Добавить(Номенклатура);
		СписокГрупп = бит_ОбщегоНазначения.ПолучитьСписокВышеСтоящихГрупп(Номенклатура);
		Для каждого Элемент Из СписокГрупп Цикл
			МассивНоменклатура.Добавить(Элемент);
		КонецЦикла;
		
		МассивВидНоменклатуры.Добавить(Номенклатура.ВидНоменклатуры);
		
	КонецЕсли; 
	
	
	Если ЗначениеЗаполнено(Склад) Тогда
		МассивСклад.Добавить(Склад);
		МассивТипСклада.Добавить(Склад.ТипСклада);
	КонецЕсли;
	
	ТестЗапрос = Новый Запрос();
	
	ТестЗапрос.УстановитьПараметр("Организация",        	МассивОрганизация);
	ТестЗапрос.УстановитьПараметр("НоменклатурнаяГруппа",	МассивНоменклатурнаяГруппа);
	ТестЗапрос.УстановитьПараметр("ВидНоменклатуры",        МассивВидНоменклатуры);
	ТестЗапрос.УстановитьПараметр("Номенклатура",       	МассивНоменклатура);
	ТестЗапрос.УстановитьПараметр("ТипСклада",              МассивТипСклада);
	ТестЗапрос.УстановитьПараметр("Склад",			    	МассивСклад);
	
	ТестЗапрос.Текст = "ВЫБРАТЬ
	                   |	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	                   |	СчетаУчетаНоменклатуры.Организация КАК Организация,
	                   |	СчетаУчетаНоменклатуры.НоменклатурнаяГруппа,
	                   |	СчетаУчетаНоменклатуры.ВидНоменклатуры,
	                   |	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	                   |	СчетаУчетаНоменклатуры.ТипСклада,
	                   |	СчетаУчетаНоменклатуры.Склад КАК Склад,
	                   |	СчетаУчетаНоменклатуры.СчетУчета КАК СчетУчета,
	                   |	СчетаУчетаНоменклатуры.СчетРезерва КАК СчетРезерва
	                   |ИЗ
	                   |	РегистрСведений.бит_му_СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	                   |ГДЕ
	                   |	СчетаУчетаНоменклатуры.Организация В(&Организация)
	                   |	И СчетаУчетаНоменклатуры.НоменклатурнаяГруппа В(&НоменклатурнаяГруппа)
	                   |	И СчетаУчетаНоменклатуры.Номенклатура В(&Номенклатура)
	                   |	И СчетаУчетаНоменклатуры.Склад В(&Склад)
	                   |	И СчетаУчетаНоменклатуры.ВидНоменклатуры В(&ВидНоменклатуры)
	                   |	И СчетаУчетаНоменклатуры.ТипСклада В(&ТипСклада)";
	
	ТаблицаЗапроса = ТестЗапрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, НоменклатурнаяГруппа Убыв, ВидНоменклатуры Убыв, ТипСклада Убыв, Склад Убыв, Организация Убыв");

	Если ТаблицаЗапроса.Количество() > 0 Тогда

		СведенияОСчетах = ТаблицаЗапроса[0];		
		ЗаполнитьЗначенияСвойств(РезСтруктура, СведенияОСчетах);

	КонецЕсли;

	РезСтруктура.Вставить("БазоваяЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);	
	
	Возврат РезСтруктура;
	
КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

#КонецОбласти

#Область ПроцедурыИФункцииПартионныйУчетМпзМуПриходныеДвижения

// Процедура-вход для документов поступления.
// 
Процедура ВыполнитьПриходПоРегистрамПартий(СтруктураШапкиДокумента
										   , Отказ = Ложь
										   , ТаблицаПоТоварам = Неопределено
										   , СтруктураКурсыВалют = Неопределено) Экспорт
										   
	// Переменные для хранения копий таблиц данных.									   
	Перем  КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам;
	
	Если Отказ Тогда
        Возврат;
	КонецЕсли;
	
	// Сохранение таблиц в копии
	Если ТаблицаПоТоварам <> Неопределено Тогда
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
	КонецЕсли;
	
	// Переведем в валюту учета
	Для Каждого СтрокаСписания Из КопияТаблицаПоТоварам Цикл
		
		СтрокаСписания.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаСписания.Сумма,
			СтруктураКурсыВалют["Документ"].Валюта, СтруктураКурсыВалют["Упр"].Валюта,
			СтруктураКурсыВалют["Документ"].Курс, СтруктураКурсыВалют["Упр"].Курс,
			СтруктураКурсыВалют["Документ"].Кратность, СтруктураКурсыВалют["Упр"].Кратность);
			
	КонецЦикла;
	
	ТипРегистратора = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	
	Если ТипРегистратора = Тип("ДокументСсылка.бит_му_ПоступлениеМПЗ") Тогда
		ВыполнитьПриходПоРегистрамПартийМУ(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам);
	Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("ru = 'Не удалось сформировать движения по партиям'");
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПриходПоРегистрамПартий()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииПартионныйУчетМпзМу

// Общая процедура для добавления записей в набор записей с сопутствующими действиями.
// Добавляет строку в таблицу движений, инкрементирует номер последней строки,
// устанавливает признак модифицированности.
// 
Функция ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров) Экспорт

	Движение = СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Добавить();
	
	// Устанавливаем флаг модификации
	СтруктураПараметров["ИзмененыДвижения" + ИмяРегистра] = Истина;

	Возврат Движение;

КонецФункции // ДобавитьДвижениеВСтруктуруПараметров()

// Читает заданные в структуре реквизиты объекта, переданного ссылкой.
// 
Процедура ПолучитьРеквизитыОбъекта(ДокументСсылка, СтруктураРеквизитов) Экспорт
	
	ТипДок = ТипЗнч(ДокументСсылка);
	МетаДок = Метаданные.НайтиПоТипу(ТипДок);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипДок) тогда
		НазваниеТаблицы = "Справочник."+МетаДок.Имя;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипДок) тогда
		НазваниеТаблицы = "Документ."+МетаДок.Имя;
	Иначе
		Возврат;
	КонецЕсли;
		
	Если МетаДок <> Неопределено Тогда
		
		СтрРеквизиты = "";
		Для Каждого Элемент Из СтруктураРеквизитов Цикл
			СтрРеквизиты = СтрРеквизиты +", "+Элемент.Ключ;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	" + Сред(СтрРеквизиты, 2) +"
		|ИЗ
		|	"+НазваниеТаблицы+"
		|
		|ГДЕ
		|	Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Для Каждого Элемент Из СтруктураРеквизитов Цикл
				СтруктураРеквизитов.Вставить(Элемент.Ключ, Выборка[Элемент.Ключ]);
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьРеквизитыОбъекта()

// Возвращает таблицу значений с данными учетной политики для организации
// Данные берутся на заданный момент времени. 
// 
// Параметры:
// 	Момент времени, дата.
// 
// Возварщаемое значение: 
// 	Таблица значений.
// 
Функция ПолучитьУчетнуюПолитику(МоментКон, Организация) Экспорт
	
	Результат = Новый Структура();
	
	СпособОценкиМПЗ = ПолучитьПараметрУчетнойПолитикиМУ(МоментКон, Организация, "СпособОценкиМПЗ");
	
	Если СпособОценкиМПЗ = Неопределено Тогда
		СпособОценкиМПЗ = Перечисления.бит_СпособыОценки.ПоСредней;
	КонецЕсли;
	
	Если ТипЗнч(МоментКон) = Тип("Граница") Тогда
		ДатаУчетнойПолитики = МоментКон.Значение;
	ИначеЕсли ТипЗнч(МоментКон) = Тип("МоментВремени") Тогда 
		ДатаУчетнойПолитики = МоментКон.Дата;
	Иначе	
		ДатаУчетнойПолитики = МоментКон;
	КонецЕсли; 
	ТекУчетнаяПолитика   = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(ДатаУчетнойПолитики, Новый Структура("Организация", Организация));
	СчетГотовойПродукции = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ТекУчетнаяПолитика, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.СчетГотовойПродукции);
	
	// Способ оценки МПЗ
	Результат.Вставить("СпособОценкиМПЗ", СпособОценкиМПЗ);
	// Счет готовой продукции
	Результат.Вставить("СчетГотовойПродукции", СчетГотовойПродукции);
	// Ведение партионного учета
	Результат.Вставить("ВестиПартионныйУчетПоСкладам", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_му_ВестиПартионныйУчетПоСкладам"));
	// Оперативность списания партий (задел под отложенное проведение).
	Результат.Вставить("СписыватьПартииПриПроведенииДокументов", Истина);
	
	Возврат Результат;
	
КонецФункции // ПолучитьУчетнуюПолитику()

// Создает наборы записей для необходимых регистров.
// 
Процедура СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания = Неопределено, Регистратор = Неопределено) Экспорт
	
	СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладах", РегистрыНакопления.бит_му_ПартииМПЗ.СоздатьНаборЗаписей());
		
КонецПроцедуры // СоздатьНаборыЗаписей()

// Приведение таблицы списания к требуемому виду.
// 
Процедура ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания) Экспорт
	
	Если ТаблицаСписания.Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено Тогда
		
		// Получим данные о признаках ведения учета по сериям, установленным для номенклатуры
		// задел для УПП, пока не будем реализовывать.
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЕстьНаСкладах"			, Истина);
    СтруктураПараметров.Вставить("ИсточникПоКодуОперации"	, "НаСкладах");
	
	// СчитТаблица строк получена из документа		
	ЕстьНаСкладах 	= Истина;
	
	Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
		
		СтрокаСписания.ИсточникПоКодуОперации = "НаСкладах";
		
		Если ЕстьНаСкладах ИЛИ СтрокаСписания.ИсточникПоКодуОперации = "НаСкладах" Тогда
			ЕстьНаСкладах = Истина;
		КонецЕсли;			
						
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ЕстьНаСкладах", ЕстьНаСкладах);
		
КонецПроцедуры // ПодготовитьТаблицуСписания

// Подготавливает наборы записей регистров партионного учета для проведения по партиям.
// 
Процедура ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи = Истина, ИзмененыДвижения = Истина) Экспорт
	
	СтруктураПараметров.Вставить("Период",         Период);
	СтруктураПараметров.Вставить("Регистратор",    Регистратор);
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладах", Истина);
			
	СтруктураПараметров.ДвиженияПартииТоваровНаСкладах.Очистить();
	СтруктураПараметров.ДвиженияПартииТоваровНаСкладах.Отбор.Регистратор.Установить(Регистратор);
	
	// Таблицы движений:
	
	// Для партий на складах
	СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладах", СтруктураПараметров.ДвиженияПартииТоваровНаСкладах.Выгрузить());
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
	
	// Служебные колонки
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	// Валюты и курсы - для пересчета
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Колонки.Добавить("ВалютаДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Колонки.Добавить("КурсДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Колонки.Добавить("КратностьДокумента");
	
	// Количество поступления - для комплектации.
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
КонецПроцедуры // ПодготовитьНаборыЗаписей

// Процедура заполняет структуру таблиц документа, значением которое будет одинаковым для всех таблиц 
// (например значением шапки документа)
// 	Параметры:
// 		- СтруктТаблицДокумента - структура таблиц документа, сформированная функцией ЗагрузитьТаблицыДокументаВСтруктуру()
// 		- ИмяПоля - имя колонки в таблицах локумента, в которую будет установлено новое значение
// 		- УстанавливаемоеЗначение - значение, которое надо установить в таблицы документа
// 		- СтрТабЧасти - имена таб. частей документа в которые необходимо установить новое значение. строка, в которой
// 						имена таб. частей разделены запятыми. необязательный параметр, по умолчанию - все таблицы.
// 
Процедура УстановитьЗначениеВТаблицыДокумента(СтруктТаблицДокумента, ИмяПоля, УстанавливаемоеЗначение, СтрТабЧасти = "") Экспорт
	
	СтруктТабЧасти = ?( ПустаяСтрока(СтрТабЧасти), СтруктТаблицДокумента, Новый Структура(СтрТабЧасти));
	Для Каждого ТабЧасть Из СтруктТабЧасти Цикл
	
		Если СтруктТаблицДокумента[ТабЧасть.Ключ].Количество() > 0 Тогда
		    СтруктТаблицДокумента[ТабЧасть.Ключ].ЗаполнитьЗначения( УстанавливаемоеЗначение, ИмяПоля);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗначениеВТаблицыДокумента()

// Процедура формирует движение в регистр на основании данных в таблицах документов
// 	Параметры:
// 		- Движение - движение документа, в которое необходимо произвести добавление записей (т.е. регистр).
// 		- ВидДвижения - вид движения накопления (приход/расход).
// 		- СтруктТаблицДокумента - структура таблиц документа, сформированная функцией ЗагрузитьТаблицыДокументаВСтруктуру().
// 		- ДатаДвижения - дата на которую будут формироваться записи.
// 
Процедура ЗаписатьТаблицыДокументаВРегистр(Движение, ВидДвижения, СтруктТаблицДокумента, ДатаДвижения) Экспорт
	
	Движение.мПериод = ДатаДвижения;
	
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
	
		Если ТабЧасть.Значение.Количество() = 0 Тогда
			Продолжить; // Пропускаем пустые табличные части
		КонецЕсли;
		
		Движение.мТаблицаДвижений = ТабЧасть.Значение;
		
		бит_ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(Движение, ВидДвижения);
			
	КонецЦикла;

КонецПроцедуры // ЗаписатьТаблицыДокументаВРегистр()

// Функция загружает таблицы документа в таблицы соответствующие структуре регистров
// 	Параметры:
// 		- Движение - движение документа (т.е. регистр)
// 		- СтруктТаблицДокумента - структура содержашая таблицы документа. 
// 				ключ 	 - имя таблицы, 
// 				значение - таблица значений с данными документа.
// 
// 	Возврат:
// 		- Структура, в которой ключ - это имя таблицы документа, 
// 			соответствующий параметру СтруктТаблицДокумента,
// 		  	значение - таблица значений, со структурой соответствующей структуре параметра 
// 			(т.е. регистра) Движение
// 		  В таблицы значений данные загружаются по соответствию с имен полей.
// 
Функция ЗагрузитьТаблицыДокументаВСтруктуру(Движение, СтруктТаблицДокумента) Экспорт
	
	ПустаяТабРегистра = Движение.Выгрузить();
	ПустаяТабРегистра.Очистить();
	
	СтруктДанных = Новый Структура;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
	
		ТабРегистра = ПустаяТабРегистра.Скопировать();
		
		Если ТабЧасть.Значение <> Неопределено И ТабЧасть.Значение.Количество() > 0 Тогда
			ЗагрузитьВТаблицуЗначений(ТабЧасть.Значение, ТабРегистра);
		КонецЕсли;
		
		СтруктДанных.Вставить( ТабЧасть.Ключ, ТабРегистра);
		
	КонецЦикла;
	
	Возврат СтруктДанных;

КонецФункции // ЗагрузитьТаблицыДокументаВСтруктуру()

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
// 
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
// 
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	Сч = 0;
	
	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		
        СтрокаТаблицыПриемника.СуммаУпр 			= СтрокаТаблицыИсточника.Сумма;
		СтрокаТаблицыПриемника.СуммаПоступленияУпр 	= СтрокаТаблицыИсточника.Сумма;
		
		СтрокаТаблицыПриемника.НомерСтроки 			= Сч;
		Сч = Сч + 1;
		
	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

#КонецОбласти

#Область ПроцедурыИФункцииПартионныйУчетМпзМуУчетНереализованнойПрибыли

// Обработчик одноименной подписки на событие для учета НРП.
// 
Процедура бит_му_ОбработкаПроведенияПартииСобственныхКонтрагентовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ЭтоЧужойПодчиненныйУзел") = Истина Тогда
		
	    // Функционал БФ может работать только в узлах, созданных с помощью ПО бит_Полный.
		Возврат;
	
	КонецЕсли; 		
		
	Если не ЭтоДокументНРП(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействияУчетНРП(Источник, Отказ);
	
	
КонецПроцедуры // бит_му_ОбработкаПроведенияПартииСобственныхКонтрагентовОбработкаПроведения()

// Процедура-вход для документов, влияющих на НРП.
// 
Процедура ВыполнитьДействияУчетНРП(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаДокументНРП = Источник.Ссылка;
	
	СтруктураПараметров = Неопределено; // Резервная переменная - структура
	
	Если не НеобходимУчетНРП(СсылкаДокументНРП) Тогда
		Возврат;
	КонецЕсли;
	
	Поступление = ЭтоДокументПоступленияТоваровНРП(СсылкаДокументНРП);
	
	ПодготовитьСтруктуруПараметровНРП(Источник, СтруктураПараметров);
	
	Если Поступление Тогда
		ВыполнитьДействияУчетНРП_Поступление(Источник, СтруктураПараметров, Отказ);
	Иначе
		ВыполнитьДействияУчетНРП_Реализация(Источник, СтруктураПараметров, Отказ);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ПартииИзменены") И СтруктураПараметров.ПартииИзменены Тогда
	
		Источник.Движения.бит_му_ПартииМПЗ.Очистить();
		Источник.Движения.бит_му_ПартииМПЗ.Записывать = Истина;
		Для каждого СтрокаДвижений Из СтруктураПараметров.ДвиженияПартииМПЗ Цикл
		
			НовоеДвижение = Источник.Движения.бит_му_ПартииМПЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаДвижений);
		
		КонецЦикла; 
		
		Источник.Движения.бит_му_ПартииМПЗСобственныхКонтрагентов.Записывать = Истина;		
		
	КонецЕсли; 
	
КонецПроцедуры // ВыполнитьДействияУчетНРП()

// Готовит структуру параметров для выполнения движений нереализованной прибыли
// для МУ.
// 
Процедура ПодготовитьСтруктуруПараметровНРП(Источник, СтруктураПараметров) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
    ТекУчетнаяПолитика	= ПолучитьУчетнуюПолитику(Источник.Дата, Источник.Организация);
	
	// СтруктураПараметров.Вставить("МоментКон"			, Новый Граница(Источник.Дата, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("МоментКон"			, Источник.МоментВремени());
	СтруктураПараметров.Вставить("Организация"			, Источник.Организация);
	СтруктураПараметров.Вставить("УчетнаяПолитика"		, ТекУчетнаяПолитика);
	СтруктураПараметров.Вставить("ДокументСсылка"		, Источник.Ссылка);
	
	// Получим движения партий документа
	
	Поступление = ЭтоДокументПоступленияТоваровНРП(Источник.Ссылка);
	
	Если Источник.Движения.бит_му_ПартииМПЗ.Количество() > 0  Тогда // Трансляция
		
		Если не Поступление Тогда // Если это трансляция, то при оформлении реализации
								  // необходимо скорректировать праведливую стоимость партий
								  
			ВыполнитьКорректировкуСправедливойСтоимости(Источник, СтруктураПараметров);					  
			
		КонецЕсли;
		
		Источник.Движения.бит_му_ПартииМПЗ.Записать(Истина);
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыНакопления.бит_му_ПартииМПЗ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
	НаборЗаписей.Прочитать();

	ДвиженияПартииМПЗ 		= НаборЗаписей;
	ДвиженияНРП				= Источник.Движения.бит_му_ПартииМПЗСобственныхКонтрагентов;
		
	СтруктураПараметров.Вставить("ДвиженияПартииМПЗ"	, ДвиженияПартииМПЗ);
	СтруктураПараметров.Вставить("ДвиженияНРП"			, ДвиженияНРП);
			
КонецПроцедуры // ПодготовитьСтруктуруПараметровНРП()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииМуУчетНереализованнойПрибыли

// Возвращает контрагента, соотвествующего организации, согласно
// данным регистра "Собственные контрагенты".
// 
Функция ПолучитьСобственногоКонтрагентаОрганизации(Организация) Экспорт
	
	ИмяТаблицы = "бит_СобственныеКонтрагенты";
		
	ТекстЗапроса = "ВЫБРАТЬ
	|	" + ИмяТаблицы + ".Контрагент
	|ИЗ
	|	РегистрСведений." + ИмяТаблицы + " КАК " + ИмяТаблицы + "
	|ГДЕ
	|	" + ИмяТаблицы + ".Объект = &Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Контрагент;
	КонецЕсли;
	
	Возврат Неопределено;
    	
КонецФункции // ПолучитьСобственногоКонтрагентаОрганизации()

// Возвращает организацию, соотвествующую контрагенту, согласно
// данным регистра "Собственные контрагенты".
// 
Функция ПолучитьОрганизациюСобственногоКонтрагента(Контрагент) Экспорт
	
	ИмяТаблицы = "бит_СобственныеКонтрагенты";
		
	ТекстЗапроса = "ВЫБРАТЬ
	|	" + ИмяТаблицы + ".Объект КАК Организация
	|ИЗ
	|	РегистрСведений." + ИмяТаблицы + " КАК " + ИмяТаблицы + "
	|ГДЕ
	|	" + ИмяТаблицы + ".Контрагент = &Контрагент";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Организация;
	КонецЕсли;
	
	Возврат Неопределено;
    	
КонецФункции // ПолучитьОрганизациюСобственногоКонтрагента()

#КонецОбласти

#Область ПроцедурыИФункцииРаботаСПоследовательностьюПартионныйУчет

// Устанавливает границу последовательности при движениях партий товаров.
// 
Процедура УстановкаГраницыПоследовательности(ДокументМоментВремени) Экспорт
	
	ИмяПоследовательности = "бит_му_ПоследовательностьПартионныйУчет";
	
	Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", ДокументМоментВремени.Ссылка.Организация, Ложь);
	
	СдвинутьГраницуПоследовательности(ИмяПоследовательности, ДокументМоментВремени, Отбор);
    	
КонецПроцедуры // УстановкаГраницыПоследовательности()

// Осуществляет сдвиг границы последовательности назад.
// 
Процедура СдвинутьГраницуПоследовательностиНазад(Дата, Ссылка, ТаблицаСтаройРегистрацииВПоследовательности, ТаблицаПоследовательностейДляРегистрации = Неопределено) Экспорт
	
	Для Каждого ТекущееСтароеСостояние Из ТаблицаСтаройРегистрацииВПоследовательности Цикл
		
		Если Дата > ТекущееСтароеСостояние.Период  // Дата документа при перепроведении увеличилась
		  ИЛИ ТаблицаПоследовательностейДляРегистрации = Неопределено // Отмена проведения документа
		  ИЛИ ТаблицаПоследовательностейДляРегистрации.НайтиСтроки(Новый Структура("ИмяПоследовательности, Организация", ТекущееСтароеСостояние.ИмяПоследовательности, ТекущееСтароеСостояние.Организация)).Количество() = 0 
		  // Изменились организация или признаки отражения в учете.
		  
		Тогда
		
			// Состояние изменилось, нужно передвинуть границу последовательности на старое состояние.
			ОтборГраницы = Новый Структура("Организация, ПроведенВХронологическойПоследовательности",ТекущееСтароеСостояние.Организация, Ложь);
			СтараяГраница = Последовательности[ТекущееСтароеСостояние.ИмяПоследовательности].ПолучитьГраницу(ОтборГраницы);
			
			Если СтараяГраница.Сравнить(Новый МоментВремени(ТекущееСтароеСостояние.Период, Ссылка)) = 1 Тогда
				
				Последовательности[ТекущееСтароеСостояние.ИмяПоследовательности].УстановитьГраницу(ТекущееСтароеСостояние.Период,ОтборГраницы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦИкла;
	
КонецПроцедуры // СдвинутьГраницуПоследовательностиНазад()

// Удаляет регистрацию документа в последовательности партионного учета.
// 
Процедура УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, ПроверятьДвижения = Ложь)Экспорт
	
	// Получение списка последовательностей в которых зарегистрирован документ.
	Если ПроверятьДвижения Тогда
		
		ТаблицаРегистраций = ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект);
		
	КонецЕсли;
	
	ТаблицаСтаройРегистрацииВПоследовательности = Новый ТаблицаЗначений();
	ТаблицаСтаройРегистрацииВПоследовательности.Колонки.Добавить("ИмяПоследовательности");
	ТаблицаСтаройРегистрацииВПоследовательности.Колонки.Добавить("Организация");
	ТаблицаСтаройРегистрацииВПоследовательности.Колонки.Добавить("Период");
	
	КоллекцияПоследовательностей = ДокументОбъект.ПринадлежностьПоследовательностям;
	
	Для Каждого НаборЗаписейРегистрацииВПоследовательности ИЗ КоллекцияПоследовательностей Цикл
		
		Если (НаборЗаписейРегистрацииВПоследовательности.Количество() > 0)
		  ИЛИ (ПроверятьДвижения И (НЕ ТаблицаРегистраций.Найти(НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя,"Имя") = Неопределено)) Тогда
		  
		  НаборЗаписейРегистрацииВПоследовательности.Прочитать();
		  
		  Для Каждого ЗаписьВПоследовательности Из НаборЗаписейРегистрацииВПоследовательности Цикл
			  
			  НоваяЗаписьРегистрации = ТаблицаСтаройРегистрацииВПоследовательности.Добавить();
			  НоваяЗаписьРегистрации.ИмяПоследовательности = НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя;
			  НоваяЗаписьРегистрации.Организация = ЗаписьВПоследовательности.Организация;
			  НоваяЗаписьРегистрации.Период = ЗаписьВПоследовательности.Период;
			  
		  КонецЦикла;
		  
		  НаборЗаписейРегистрацииВПоследовательности.Очистить();
		  НаборЗаписейРегистрацииВПоследовательности.Записать();
		  
	   КонецЕсли;
	   
	КонецЦикла;
	
	Если ТаблицаСтаройРегистрацииВПоследовательности.Количество() > 0 Тогда
		СдвинутьГраницуПоследовательностиНазад(ДокументОбъект.Дата, ДокументОбъект.Ссылка, ТаблицаСтаройРегистрацииВПоследовательности);
	КонецЕсли;
	
	ТаблицаСтаройРегистрацииВПоследовательности.Свернуть("ИмяПоследовательности,Организация,Период"); 
	ДокументОбъект.ДополнительныеСвойства.Вставить("ТаблицаСтаройРегистрацииВПоследовательности",ТаблицаСтаройРегистрацииВПоследовательности);
	
КонецПроцедуры // УдалитьРегистрациюДокументаВПоследовательностях

// Определяет наличие уже имеющейся регистрации документа в последовательности.
// 
Функция ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект) Экспорт
	
	ТекстЗапроса = "";	
	
	Для Каждого Последовательность ИЗ ДокументОбъект.ПринадлежностьПоследовательностям Цикл
		
		// В запросе получаем имена последовательностей, в которых документ зарегистрирован.
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ """ + Последовательность.Метаданные().Имя 
		+  """ КАК Имя ИЗ " + Последовательность.Метаданные().ПолноеИмя()  
		+ " ГДЕ Регистратор = &Регистратор";
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		
		Возврат Новый ТаблицаЗначений();
		
	Иначе
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();	
		Возврат ТаблицаЗапроса;
		
	КонецЕсли;
	
КонецФункции // ОпределитьНаличиеРегистрацииДокументаВПоследовательности()

// Регистрирует документ в последовательности партионного учета.
// 
Процедура ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ДокументОбъект, Дата, Организация = Неопределено) Экспорт
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности") Тогда
		ТаблицаСтаройРегистрацииВПоследовательности = ДокументОбъект.ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности;
	Иначе
		ТаблицаСтаройРегистрацииВПоследовательности = Неопределено;
	КонецЕсли;
	
	ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(ДокументОбъект.Ссылка, Дата, Организация, ТаблицаСтаройРегистрацииВПоследовательности);
	
КонецПроцедуры // ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета()

// Регистрирует документ в последовательности партионного учета.
// 
Процедура ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(Ссылка, Дата, Организация = Неопределено, ТаблицаСтаройРегистрацииВПоследовательности = Неопределено) Экспорт
	
	ТаблицаПоследовательностейДляРегистрации = Новый ТаблицаЗначений();
	ТаблицаПоследовательностейДляРегистрации.Колонки.Добавить("ИмяПоследовательности");
	ТаблицаПоследовательностейДляРегистрации.Колонки.Добавить("Организация");
	
	НоваяСтрока = ТаблицаПоследовательностейДляРегистрации.Добавить();
	НоваяСтрока.ИмяПоследовательности = "бит_му_ПоследовательностьПартионныйУчет";
	НоваяСтрока.Организация = Ссылка.Организация;
	
	Если ТаблицаСтаройРегистрацииВПоследовательности <> Неопределено
	  И ТаблицаСтаройРегистрацииВПоследовательности.Количество() > 0 Тогда
		// Документ перепроводиться и уже был зарегистрирован в последовательности ранее.
		СдвинутьГраницуПоследовательностиНазад(Дата, Ссылка, ТаблицаСтаройРегистрацииВПоследовательности, ТаблицаПоследовательностейДляРегистрации);
	КонецЕсли;
		
	Для Каждого ТекущееСостояние Из ТаблицаПоследовательностейДляРегистрации Цикл
		// В таблице значений может быть только по одной строке на каждую последовательность.
		НаборЗаписейПоследовательности = Последовательности[ТекущееСостояние.ИмяПоследовательности].СоздатьНаборЗаписей();
		НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(Ссылка);
		НоваяЗапись = НаборЗаписейПоследовательности.Добавить();
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.Организация = ТекущееСостояние.Организация;
		НоваяЗапись.Регистратор = Ссылка;
		НаборЗаписейПоследовательности.Записать();
	КонецЦикла;	
		
КонецПроцедуры // ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере()

#КонецОбласти

// Процедура-вход для всех документов. Проводит переданный документ по учету партий товаров.
// 
// Параметры
//  ОбрабатываемыйДокумент - проводимый документ.
// 
Процедура ДвижениеПартийТоваров(ОбрабатываемыйДокумент, ТаблицаСписания = Неопределено, СтруктураКурсыВалют = Неопределено,
								КоличествоСтрокВДокументе = 0,
								Останавливаться = Ложь, ПроведениеОстановлено = Ложь,
								ДокументМоментВремени = Неопределено, СписаниеВыполняетсяОбработкой = Ложь,
								СтруктураНаборовЗаписей = Неопределено,
								ФормироватьПроводки = Неопределено, ТекУчетнаяПолитика = Неопределено) Экспорт
								
	СтруктураДата = Новый Структура("Дата");
	ПолучитьРеквизитыОбъекта(ОбрабатываемыйДокумент, СтруктураДата);
	
	КоличествоСтрокВДокументе = ТаблицаСписания.Количество();
	
	СтруктураПараметров = Новый Структура;
	
	Если ДокументМоментВремени = Неопределено Тогда
		ДокументМоментВремени = Новый МоментВремени(СтруктураДата.Дата, ОбрабатываемыйДокумент);
	КонецЕсли; 
	
	Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
		
		СтрокаСписания.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаСписания.Сумма,
			СтруктураКурсыВалют["Документ"].Валюта, СтруктураКурсыВалют["МУ"].Валюта,
			СтруктураКурсыВалют["Документ"].Курс, СтруктураКурсыВалют["МУ"].Курс,
			СтруктураКурсыВалют["Документ"].Кратность, СтруктураКурсыВалют["МУ"].Кратность);
		
	КонецЦикла;
	
	Если КоличествоСтрокВДокументе > 0 Тогда
		
		СтруктураПараметров.Вставить("ТекстСообщений", "");
		
		СтруктураПараметров.Вставить("Отказ", Ложь);
		
		// Получение учетной политики
		Если ТекУчетнаяПолитика = Неопределено Тогда
			
			СтруктураПараметров.Вставить("УчетнаяПолитика", ПолучитьУчетнуюПолитику(ДокументМоментВремени, ОбрабатываемыйДокумент.Организация));
															
			Если СтруктураПараметров.УчетнаяПолитика = Неопределено Тогда												
				Возврат;
			КонецЕсли;
			
		Иначе
			
			СтруктураПараметров.Вставить("УчетнаяПолитика", ТекУчетнаяПолитика);
			
		КонецЕсли;	
		
		Если СтруктураНаборовЗаписей = Неопределено Тогда
			// Движения - наборы записей по регистрам
			СоздатьНаборыЗаписей(СтруктураПараметров);
		Иначе
			
			Для каждого Элемент Из СтруктураНаборовЗаписей Цикл
        		СтруктураПараметров.Вставить(Элемент.Ключ, Элемент.Значение);
	    	КонецЦикла;
		
		КонецЕсли; 
				
		ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания);

		Строка0 = ТаблицаСписания[0];
		
		Если НЕ ЗначениеЗаполнено(Строка0.Регистратор) Тогда
			ТаблицаСписания.ЗаполнитьЗначения(ОбрабатываемыйДокумент, "Регистратор");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка0.Период) Тогда
			ТаблицаСписания.ЗаполнитьЗначения(СтруктураДата.Дата, "Период");
		КонецЕсли;
		
		// Выполним списание партий
		ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, ДокументМоментВремени, Останавливаться, ПроведениеОстановлено);
		
		СдвигГраницыПоследовательности = Истина;
		
		Если СдвигГраницыПоследовательности Тогда
			УстановкаГраницыПоследовательности(ДокументМоментВремени);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвижениеПартийТоваров()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииПартионныйУчетМпзМуРасходныеДвижения

// Движения партий товаров МУ сверх остатка.
// 
Процедура ВыполнитьДвиженияПартииТоваровМУ_СверхОстатка(СтрокаДокумента
														, СтруктураПараметров
														, РегистрУчета
														, ИмяРегистра
														, КоличествоОсталосьПогасить
														, СтрокаСписанныхТоваров)
	
	ТекУчетнаяПолитика = СтруктураПараметров.УчетнаяПолитика;
	УчетПоСкладам	   = ТекУчетнаяПолитика.ВестиПартионныйУчетПоСкладам;
	
	Если не УчетПоСкладам Тогда
		СтрокаДокумента.Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	// Добавим новую строку
	Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
	
	// Свойства
	Движение.Период 	 = СтрокаДокумента.Период;
	Движение.Регистратор = СтрокаДокумента.Регистратор;
	Движение.Активность  = Истина;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	
	// Измерения
	Движение.Номенклатура 	= СтрокаДокумента.Номенклатура;
	Движение.Организация 	= СтруктураПараметров.Организация;
	
	// Ресурсы 
	Движение.Количество	= КоличествоОсталосьПогасить;
		
	// Заполнение полей, специфических для учета.
	Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;
	Движение.СерияНоменклатуры 			= СтрокаДокумента.СерияНоменклатуры;
	
	Движение.Склад 			        	= СтрокаДокумента.Склад;
	
	Движение.Качество  					= СтрокаДокумента.Качество;
	// Движение.ДокументОприходования		= СтрокаДокумента.ДокументОприходования;
	// !СЧЕТ.
	Движение.СчетУчета					= СтрокаДокумента.СчетУчета;
	
	ПодготовитьДанныеДляВыполненияДвиженийПоРезультатамСписания(СтруктураПараметров
																, Движение
																, СтрокаДокумента
																, СтрокаДокумента
																, РегистрУчета
																, "Списание"
																, Неопределено
																, Неопределено
																, СтрокаСписанныхТоваров);
	
КонецПроцедуры // ВыполнитьДвиженияПартииТоваровМУ_СверхОстатка()

// Получение строки остатков партий.
// 
Функция ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий)
	
	ЗаполнитьЗначенияСвойств(СтруктураИзмерений, СтрокаПартииРаспределения);
	
	МассивСтрок = ТаблицаОстатковПартий.НайтиСтроки(СтруктураИзмерений);
	
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТаблицы = ТаблицаОстатковПартий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПартииРаспределения);
	Иначе
		СтрокаТаблицы = МассивСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
		
Конецфункции // ПолучитьСтрокуОстатковПартий()

// Подготовка данных для выполнения движений списания партий.
// 
Процедура ПодготовитьДанныеДляВыполненияДвиженийПоРезультатамСписания(СтруктураПараметров
	                                                                  , Движение
																	  , СтрокаПартии
																	  , СтрокаДокумента
																	  , РегистрУчета
	                                                                  , ВидОперации
																	  , СписаноИз
																	  , ТипЗаписи
																	  , СтрокаСписанныхТоваров = Неопределено)
	
	ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаСписанныхПартий;
	НоваяСтрока = ТаблицаСписанныхПартий.Добавить();
	
	// Заполнение по строке партии
	Если НЕ СтрокаПартии = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
	КонецЕсли;	
	
	// Заполнение по строке движения, возможно изменение одного части значений.
	Если НЕ Движение = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
	КонецЕсли;	

	// Максимальный приоритет по строке документа.
	Если НЕ СтрокаДокумента = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
	КонецЕсли;	
	
	Если СтрокаСписанныхТоваров <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСписанныхТоваров);
	КонецЕсли;	
	
	НоваяСтрока.Движение = Движение;
	
	// Дополнить служебной информацией 
	ЗаполнитьЗначенияСвойств(НоваяСтрока,
	Новый структура("ВидОперации, СписаноИз, ТипЗаписи, РегистрУчета", ВидОперации, СписаноИз, ТипЗаписи, РегистрУчета));
	
КонецПроцедуры // ПодготовитьДанныеДляВыполненияДвиженийПоРезультатамСписания()

// Сообщает о нехватке партии 
// 
// Параметры:
// 	СтрокаДокумента.
// 
Процедура СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	ТекстСообщения = НСтр("ru = 'Международный учет. Документ %Регистратор%" +
	?(ЗначениеЗаполнено(СтрокаДокумента.ВидТабличнойЧасти), ", табличная часть ""%ИмяТабличнойЧасти%""", " ") + "
	|Не списано по партиям %КоличествоОсталосьПогасить% %ЕдиницаИзмерения% товара %Номенклатура%" + 
	?(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_му_ВестиПартионныйУчетПоСкладам"), ", со склада: %Склад%", "") + "'");
	
	СтрЗамена = Новый Структура;
	СтрЗамена.Вставить("Регистратор" 				, СтрокаДокумента.Регистратор);
	СтрЗамена.Вставить("КоличествоОсталосьПогасить"	, КоличествоОсталосьПогасить);
	СтрЗамена.Вставить("ЕдиницаИзмерения"			, СтрокаДокумента.Номенклатура.ЕдиницаИзмерения);
	СтрЗамена.Вставить("Номенклатура"				, СтрокаДокумента.Номенклатура);
	СтрЗамена.Вставить("Склад"						, СтрокаДокумента.Склад);
	СтрЗамена.Вставить("ИмяТабличнойЧасти"			, Строка(СтрокаДокумента.ВидТабличнойЧасти));
	                            	
	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ЗаполнитьПараметрыСтроки(ТекстСообщения, СтрЗамена);				 
	
	СтруктураПараметров.Вставить("Отказ", Истина);
	
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
КонецПроцедуры // СообщитьОНехваткеПартии()

#КонецОбласти

// Выполняет приход по регистрам партионного учета МУ.
// 
Процедура ВыполнитьПриходПоРегистрамПартийМУ(СтруктураШапкиДокумента, Отказ = Ложь, ТаблицаПоТоварам = Неопределено)
	
	Движения = Новый Структура();
	
	// Получение учетных политик
	ТекУчетнаяПолитика = Новый Структура();
	
	ДокументМоментВремени = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	
	// ТОВАРЫ ПО РЕГИСТРУ бит_му_ПартииМПЗ
	
	СтруктТаблицДокумента = Новый Структура;
	
	Если НЕ ТаблицаПоТоварам = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	КонецЕсли;	
	
	СпособВеденияПартионногоУчетаПоОрганизации = Неопределено;
	
	ПараметрыУчетнойПолитики = ПолучитьУчетнуюПолитику(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли; 
		
	ТекУчетнаяПолитика.Вставить("МеждународныйУчет", ПараметрыУчетнойПолитики);
		
	ВыполнитьПриходПоРегистрамПартийПоМУ_ВидыУчета(СтруктураШапкиДокумента
												   , ТекУчетнаяПолитика
												   , Отказ
												   , СтруктТаблицДокумента
												   , Движения
												   , "МеждународныйУчет");
						
	Для Каждого ТекущееДвижение Из Движения Цикл
		Если ТекущееДвижение.Значение.Модифицированность() Тогда
			ТекущееДвижение.Значение.Записать(Ложь);
		КонецЕсли;
	КонецЦИкла;	
	
	Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", СтруктураШапкиДокумента.Организация, Ложь);
	СдвинутьГраницуПоследовательности("бит_му_ПоследовательностьПартионныйУчет", ДокументМоментВремени, Отбор);
	
КонецПроцедуры // ВыполнитьПриходПоРегистрамПартийМУ()

// Выполняет приход по регистрам партионного учета МУ.
// 
Процедура ВыполнитьПриходПоРегистрамПартийПоМУ_ВидыУчета(СтруктураШапкиДокумента
														 , ТекУчетнаяПолитика
														 , Отказ
														 , СтруктТаблицДокумента
														 , Движения
														 , ВидУчета)
	
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	
	Движения.Вставить("бит_му_ПартииМПЗ", РегистрыНакопления.бит_му_ПартииМПЗ.СоздатьНаборЗаписей());
	Движения.бит_му_ПартииМПЗ.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	ТаблицыДанныхДокумента = ЗагрузитьТаблицыДокументаВСтруктуру(Движения.бит_му_ПартииМПЗ, СтруктТаблицДокумента);
	
	ВестиПартионныйУчетПоСкладам = ТекУчетнаяПолитика.МеждународныйУчет.ВестиПартионныйУчетПоСкладам;
	
	СписокТаблицДокумента = "";
	
	// Заполнить недостающие поля.
	Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда												
		СписокТаблицДокумента = СписокТаблицДокумента + ?(СписокТаблицДокумента = "","",", ") + "ТаблицаПоТоварам";
	    ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоТоварам, 
														ТаблицыДанныхДокумента["ТаблицаПоТоварам"], 
														ВестиПартионныйУчетПоСкладам, 
														ТекУчетнаяПолитика.МеждународныйУчет.СпособОценкиМПЗ,
														СтруктураШапкиДокумента);
	КонецЕсли;													
		
	// Установить качество Новый для всех таблиц
	// УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
		
	ЗаписатьТаблицыДокументаВРегистр(Движения.бит_му_ПартииМПЗ
									 , ВидДвиженияНакопления.Приход
									 , ТаблицыДанныхДокумента
									 , СтруктураШапкиДокумента.Дата);	
	
КонецПроцедуры // ВыполнитьПриходПоРегистрамПартийПоМУ_ВидыУчета()

// Заполняет недостающие поля при поступлении партий.
// 
Процедура ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(ТаблицаТЧ
	 													, ТаблицаДвижений
														, ВестиПартионныйУчетПоСкладам
														, СпособОценкиМПЗ
														, СтруктураШапкиДокумента)
	
	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
		
		СтрокаТЧ = ТаблицаТЧ[СтрокаДвижений.НомерСтроки];
		
		Если ВестиПартионныйУчетПоСкладам Тогда
			
			Если ТаблицаТЧ.Колонки.Найти("Склад") = Неопределено Тогда
				СтрокаДвижений.Склад = СтруктураШапкиДокумента.Склад;
			Иначе	
				СтрокаДвижений.Склад = СтрокаТЧ.Склад;
			КонецЕсли;
				
		Иначе
			
			СтрокаДвижений.Склад = Неопределено;
			
		КонецЕсли;
		
		Если Не СпособОценкиМПЗ = Перечисления.бит_СпособыОценки.ПоСредней Тогда 
			СтрокаДвижений.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;
		Иначе	
			СтрокаДвижений.ДокументОприходования = Документы.бит_му_ПоступлениеМПЗ.ПустаяСсылка();
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе()

// Функция получает остатки партий товаров на складах для целей МУ.
// 
// Параметры:
//  МоментКон 			- МоментВремени.
//  СтруктураПараметров - Структура.
// 
// Возвращаемое значение:
//  ТаблицаЗначений   	- Остатки партий товаров на складах.
// 
Функция ПолучитьТаблицуПартийНаСкладахМУ(МоментКон, СтруктураПараметров, ТаблицаСписания)

	Запрос = Новый Запрос;
	
	Регистратор 					= СтруктураПараметров.Регистратор;
	СпособОценкиМПЗ 				= СтруктураПараметров.УчетнаяПолитика.СпособОценкиМПЗ;
	ВестиПартионныйУчетПоСкладам 	= СтруктураПараметров.УчетнаяПолитика.ВестиПартионныйУчетПоСкладам;

	// Работаем по общей схеме списания
	
	ЗаполнитьЗапросПартийНаСкладахМУ(Запрос, ВестиПартионныйУчетПоСкладам, СпособОценкиМПЗ);
		
	// Для БП упрощаем возможности партионного учета, но оставляем структуру данных для реализации на УПП.
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры"	, ""); // Для УПП: Справочники.СерииНоменклатуры.ПустаяСсылка()
	Запрос.УстановитьПараметр("ПустоеКачество"			, ""); // Для УПП: Справочники.Качество.ПустаяСсылка()
	Запрос.УстановитьПараметр("КачествоНовый"			, ""); // Для УПП: Справочники.Качество.Новый
	
	Запрос.УстановитьПараметр("ПустойСклад"				, Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация"				, СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Ссылка"					, Регистратор);
	Запрос.УстановитьПараметр("ОсновнойДокумент"		, Регистратор);
	
	Запрос.УстановитьПараметр("СписокСкладов"			, ТаблицаСписания.ВыгрузитьКолонку("Склад"));
	Запрос.УстановитьПараметр("СписокНоменклатуры"		, ТаблицаСписания.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТаблицаСписания"			, ТаблицаСписания);
	
	Запрос.УстановитьПараметр("Дат"						, МоментКон);
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		КопияДляБлокировки = ТаблицаСписания.Скопировать();
		// !СЧЕТ
		КопияДляБлокировки.Свернуть("Организация, Склад, Номенклатура, СчетУчета, ХарактеристикаНоменклатуры, СерияНоменклатуры");
		
		Если КопияДляБлокировки.Количество() > 0 Тогда
			// Добавление кода. Начало 07.06.			
			Если ТранзакцияАктивна() Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.бит_му_ПартииМПЗ");
				ЭлементБлокировки.УстановитьЗначение("Период",	    Новый Диапазон(, МоментКон.Дата));
				
				ЭлементБлокировки.ИсточникДанных = КопияДляБлокировки;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетУчета", "СчетУчета");
				Блокировка.Заблокировать();
				
			КонецЕсли;
			// Добавление кода конец. 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуПартийНаСкладахМУ

// Формирует запрос, получающий остатки партий на складах по общей схеме.
// 
Процедура ЗаполнитьЗапросПартийНаСкладахМУ(Запрос, ВестиПартионныйУчетПоСкладам, СпособОценкиМПЗ)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ, "бит_му_ПартииМПЗ");

	УсловиеКачество = "";
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСписания.Номенклатура,
	|	ТаблицаСписания.Склад,
	|	ТаблицаСписания.ХарактеристикаНоменклатуры,
	|	ТаблицаСписания.СерияНоменклатуры,
	|	ТаблицаСписания.Качество,
	// !СЧЕТ
	|	ТаблицаСписания.СчетУчета,
	|	ТаблицаСписания.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаСписания
	|ИЗ
	|	&ТаблицаСписания КАК ТаблицаСписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_му_ПартииМПЗ.Номенклатура,
	|	бит_му_ПартииМПЗ.ДокументОприходования КАК ДокументОприходования,
	|	" + ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор + "
	|	бит_му_ПартииМПЗ.Склад,
	|	бит_му_ПартииМПЗ.ХарактеристикаНоменклатуры,
	|	бит_му_ПартииМПЗ.ПартияСобственногоКонтрагента,
	|	бит_му_ПартииМПЗ.СерияНоменклатуры,
	// !СЧЕТ
	|	бит_му_ПартииМПЗ.СчетУчета,
	|	бит_му_ПартииМПЗ.Качество,
	|	бит_му_ПартииМПЗ.КоличествоОстаток КАК Количество,
	|	бит_му_ПартииМПЗ.СуммаУпрОстаток КАК Стоимость,
	|	бит_му_ПартииМПЗ.СуммаПоступленияУпрОстаток КАК СтоимостьУпр,	
	|	0 КАК ЧислоСерияНоменклатуры,
	|	0 КАК ЧислоДокументОприходования,
	|	0 КАК ЧислоЗаказ,
	|	0 КАК ЧислоСтатусПартии,
	|	ТаблицаСписания.НомерСтроки
	|ИЗ
	|	ТаблицаСписания КАК ТаблицаСписания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.бит_му_ПартииМПЗ.Остатки(
	|				&Дат,
	|				Организация = &Организация " + ?(ВестиПартионныйУчетПоСкладам, "
	|					И (Склад В (&СписокСкладов)
	|						ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) ", "") + "
	|					И Номенклатура В (&СписокНоменклатуры)) КАК бит_му_ПартииМПЗ
	|		ПО ТаблицаСписания.Номенклатура = бит_му_ПартииМПЗ.Номенклатура
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ТаблицаСписания.Склад = бит_му_ПартииМПЗ.Склад или бит_му_ПартииМПЗ.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))", "") + "
	|			И ТаблицаСписания.ХарактеристикаНоменклатуры = бит_му_ПартииМПЗ.ХарактеристикаНоменклатуры " + УсловиеКачество + "  
	|			И ТаблицаСписания.СерияНоменклатуры = бит_му_ПартииМПЗ.СерияНоменклатуры
	// !СЧЕТ
	|			И ТаблицаСписания.СчетУчета = бит_му_ПартииМПЗ.СчетУчета
	|
// 	|ДЛЯ ИЗМЕНЕНИЯ РегистрНакопления.бит_му_ПартииМПЗ.Остатки
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии,
	|	" + ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка + "
	|	ДокументОприходования" + ?(Строка(СпособОценкиМПЗ) = "ЛИФО", " Убыв","") + ",
    |	бит_му_ПартииМПЗ.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСписания";


КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахМУ()

// Процедура выполняет списание партий товаров.
// 
// Параметры 
// 	ТаблицаСписания - таблица значений.
// 	МоментКон	   - момент времени проведения документа.
// 	Останавливаться - останавливать проведение по партиям на первом документе, который не провелся по партиям.
// 	ПроведениеОстановлено - признак того что проведение остановлено для обработки проведение по партиям.
// 
Процедура ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, МоментКон, Останавливаться = Ложь, ПроведениеОстановлено = Ложь)
	
	Организация = ТаблицаСписания[0].Организация;
	
	СтруктураПараметров.Вставить("Организация"	, Организация);
	
	ДополнитьСтруктуруПараметров(СтруктураПараметров, ТаблицаСписания);
		
	Если ЗначениеЗаполнено(ТаблицаСписания[0].ОсновнойДокумент) Тогда
		
		СтруктураПараметров.Вставить("ОсновнойДокумент", ТаблицаСписания[0].ОсновнойДокумент);
		
	КонецЕсли;
	
	// Подготовка наборов записей
	ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор, Истина);
	
	СтруктураПараметров.Вставить("ТипЗначенияРегистратора"	, ТипЗнч(ТаблицаСписания[0].Регистратор));
	
	СтруктураПараметров.Вставить("ТаблицаСписанныхПартий"	, ПодготовитьСтруктуруТаблицыСписания(СтруктураПараметров, ТаблицаСписания));
	
	// В некоторых случаях получать остатки не нужно
	ТребуетсяПолучитьОстатки = Истина; // Задел под отложенное проведение. Пока не реализовываем
		
	Если ТребуетсяПолучитьОстатки Тогда
	
		// Добавление в структуру остатков по партионному учету.
		ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);
	
	КонецЕсли;
	
	ОбрабатываемыйДокумент = Неопределено;
	
	СтрокаДокумента = Новый Структура;
	
	Для Каждого Колонка ИЗ ТаблицаСписания.Колонки Цикл
		СтрокаДокумента.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыСписания Из ТаблицаСписания Цикл
		
		ОбрабатываемыйДокумент = СтрокаТаблицыСписания.Регистратор;
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТаблицыСписания);
		
		// Сначала обрабатывается списание
		СписаниеПартий(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента.ИсточникПоКодуОперации);
		
	КонецЦикла; 
	
	Если Не ОбрабатываемыйДокумент = Неопределено Тогда
		
		ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладах, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах, Истина);
		


		#Если Клиент Тогда
			Состояние("Проведен документ " + ОбрабатываемыйДокумент);
		#КонецЕсли
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьСписание()

// Получает остатки партий на складах.
// 
Функция ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация)
	
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровНаСкладахМУ", 
	ПолучитьТаблицуПартийНаСкладахМУ(МоментКон, СтруктураПараметров, ТаблицаСписания));
	
	СтруктураИзмерений 		= Новый Структура;
	ТаблицаОстатковПартий 	= Новый ТаблицаЗначений;
	
	Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.бит_му_ПартииМПЗ.Измерения Цикл
		
		СтруктураИзмерений.Вставить(Измерение.Имя);
		ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		
	КонецЦикла;
	
	ТаблицаОстатковПартий.Колонки.Добавить("Количество");
	ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
	
	СтруктураПараметров.Вставить("ПартииТоваровНаСкладах" + "СтруктураИзмерений"	, СтруктураИзмерений);
	СтруктураПараметров.Вставить("ПартииТоваровНаСкладах" + "ТаблицаОстатков"		, ТаблицаОстатковПартий);
	
КонецФункции // ПолучитьОстатки()

// Списание со склада по строке.
// 
// Параметры
//  СтруктураПараметров  - Структура, содержащая общие параметры.
// 
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица списанных партий.
// 
Процедура СписаниеПартий(СтрокаДокумента, СтруктураПараметров, РегистрУчета)
	
	// Партии для данного учета
	ИмяРегистра = "ПартииТоваровНаСкладах";
	
	ТаблицаПартий = СтруктураПараметров.ТаблицаПартииТоваровНаСкладахМУ;
	
	СтруктураИзмерений 		= СтруктураПараметров.ПартииТоваровНаСкладахСтруктураИзмерений;
	ТаблицаОстатковПартий 	= СтруктураПараметров.ПартииТоваровНаСкладахТаблицаОстатков;
	
	Отбор = Новый Структура("НомерСтроки", СтрокаДокумента.НомерСтроки);
	
	СтрокиПартий = ТаблицаПартий.НайтиСтроки(Отбор);
	
	// Подлежащее погашению при списании количество.
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	КоэффСписанияВалютный = 0;
	
	СтрокаСписанныхТоваров = Новый Структура("КоличествоПоступление", СтрокаДокумента.Количество);
	
	КоличествоСписанноеПоДоументуПартии = 0;
		
	Для Каждого СтрокаПартииРаспределения ИЗ СтрокиПартий Цикл
		
		Если КоличествоОсталосьПогасить <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий);
		
		// Количество по строке больше 0
		Если НЕ СтрокаПартии.Количество > 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/СтрокаПартии.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		// Добавим новую строку
		Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
		
		// Свойства
		Движение.Период 	 = СтрокаДокумента.Период;
		Движение.Регистратор = СтрокаДокумента.Регистратор;
		Движение.Активность  = Истина;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.Номенклатура 	= СтрокаПартии.Номенклатура;
		Движение.Организация 	= СтруктураПараметров.Организация;
		
		// Ресурсы 
		Движение.Количество				= Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
		Движение.СуммаУПР				= Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
		Движение.СуммаПоступленияУПР	= Окр(СтрокаПартииРаспределения.СтоимостьУпр * КоэффСписания,2,1);
		
		Если Движение.Количество < КоличествоОсталосьПогасить Тогда
			КоэффПоступления = Движение.Количество / КоличествоОсталосьПогасить;
		Иначе
			КоэффПоступления = 1;
		КонецЕсли;
		
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
		
		СтрокаПартии.Количество = СтрокаПартии.Количество - Движение.Количество;
		СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Движение.СуммаУпр;
		
		// Заполнение полей, специфических для учета.
		ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);
		
		ПодготовитьДанныеДляВыполненияДвиженийПоРезультатамСписания(СтруктураПараметров
																	, Движение
																	, СтрокаПартии
																	, СтрокаДокумента
																	, РегистрУчета
																	, "Списание"
																	, Неопределено
																	, Неопределено
																	, СтрокаСписанныхТоваров);
		
	КонецЦикла;
	
	// Проверим, возможно разрешено превышения остатка по партиям.
	РазрешеноПревышениеОстаткаПоПартиям = ПроверитьВозможностьПревышенияОстатков(ПараметрыСеанса.ТекущийПользователь);
	
	// Товара не хватило
	Если (КоличествоОсталосьПогасить > 0) Тогда
		Если РазрешеноПревышениеОстаткаПоПартиям Тогда
			ВыполнитьДвиженияПартииТоваровМУ_СверхОстатка(СтрокаДокумента, СтруктураПараметров, РегистрУчета, ИмяРегистра, КоличествоОсталосьПогасить, СтрокаСписанныхТоваров);
		Иначе
			СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // СписаниеПартий()

// Заполняет поля записи списания.
// 
Процедура ЗаполнитьПоляЗаписиСписания(Движение
									  , СтрокаПартии
									  , СтрокаДокумента
									  , СтруктураПараметров
									  , РегистрУчета
									  , КоэффСписания
									  , КоэффПоступления)
	
	Движение.ХарактеристикаНоменклатуры 	= СтрокаПартии.ХарактеристикаНоменклатуры;
	// !СЧЕТ
	Движение.СчетУчета 						= СтрокаПартии.СчетУчета;
	Движение.СерияНоменклатуры 				= СтрокаПартии.СерияНоменклатуры;
	Движение.Склад 			        		= СтрокаПартии.Склад;
	Движение.Качество  						= СтрокаПартии.Качество;
	Движение.ДокументОприходования			= СтрокаПартии.ДокументОприходования;
	Движение.ПартияСобственногоКонтрагента	= СтрокаПартии.ПартияСобственногоКонтрагента;
		
КонецПроцедуры // ЗаполнитьПоляЗаписиСписания()

// Формирует часть запроса сортировки партий для запроса остатков партий на складах.
// 
Функция ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ, ПсевдонимТаблицы)
	
	флПоСредней = ложь;
	
	Если ВРег(Строка(СпособОценкиМПЗ)) = "ПО СРЕДНЕЙ" Тогда
		
		флПоСредней = истина;
		
	КонецЕсли;
	
	Если флПоСредней Тогда
		
		стрПолеВыборки 		= "";
		стрПолеСортировки 	= "";
		
	Иначе
		
		стрПолеВыборки 		= ПсевдонимТаблицы + ".ДокументОприходования.Дата КАК ДокументОприходованияДата,";
		стрПолеСортировки 	= "ДокументОприходованияДата" + ?(Строка(СпособОценкиМПЗ) = "ЛИФО", " Убыв", "") + ",";
		
	КонецЕсли;
	
	Возврат новый Структура("ДокОприходованияДата_Выбор, ДокОприходованияДата_Сортировка", стрПолеВыборки, стрПолеСортировки);
	
КонецФункции // ПолучитьДанныеДляЗапроса_ДокументОприходованияДата()

// Возвращает заданный параметр учетной политики МУ для указанной организации
// на указанный момент времени.
// 
Функция ПолучитьПараметрУчетнойПолитикиМУ(МоментКон, Организация, Настройка)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("Настройка"	, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики[Настройка]);
	
	ПолитикаМУСрезПоследних = РегистрыСведений.бит_му_УчетнаяПолитика.ПолучитьПоследнее(МоментКон, Отбор);
	
	Возврат ПолитикаМУСрезПоследних.ЗначениеНастройки; 
	
КонецФункции // ПолучитьПараметрУчетнойПолитикиМУ()

// Дополняет структуру параметров для проведения по партиям.
// 
Процедура ДополнитьСтруктуруПараметров(СтруктураПараметров, ТаблицаСписания) 
	
	// Задел под УПП. Пока не реализовываем

КонецПроцедуры // ДополнитьСтруктуруПараметров(СтруктураПараметров)

// Подготавливает структуру таблицы списания для проведения по партиям.
// 
Функция ПодготовитьСтруктуруТаблицыСписания(СтруктураПараметров, ТаблицаСписания)
	
	ТаблицаСписанныхПартий = Новый ТаблицаЗначений();
	
	// Определение состава колонок 
	СтруктураКолонокТаблицыСписания = Новый Структура();
	СтруктураКолонокТаблицыСписания.Вставить("НомерСтрокиДокумента");
	
	ОпределитьСоставКолонокТаблицаСписанныхПартий(СтруктураПараметров, СтруктураКолонокТаблицыСписания);

	// Подготовка структуры таблицы
	КолонкиТаблицыСписания = ТаблицаСписания.Колонки;
	ПриоритетныеКолонкиТаблицыСписания = "";
	
	Для Каждого Колонка из СтруктураКолонокТаблицыСписания Цикл
		
		ТипЗначения = Неопределено;
		
		Если не КолонкиТаблицыСписания.Найти(Колонка.Ключ) = Неопределено тогда
			ТипЗначения = КолонкиТаблицыСписания.Найти(Колонка.Ключ).ТипЗначения;
			ПриоритетныеКолонкиТаблицыСписания = ПриоритетныеКолонкиТаблицыСписания + "," + Колонка.Ключ;
		Иначе
			ТипЗначения = Колонка.Значение;
		КонецЕсли;
		
		Если ТипЗначения = Неопределено Тогда
			// Тип не объявлен
		ИначеЕсли ТипЗначения.СодержитТип(Тип("Число")) Тогда
			
			Разрядность = ТипЗначения.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
			
			ТипЗначения = Новый ОписаниеТипов(ТипЗначения,,,КвалификаторЧисла);
			
		КонецЕсли;
		
		ТаблицаСписанныхПартий.Колонки.Добавить(Колонка.Ключ, ТипЗначения);
		
	КонецЦикла;
	
	Если ТаблицаСписанныхПартий.Колонки.Найти("РегистрУчета") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("РегистрУчета");
	КонецЕсли;
	Если ТаблицаСписанныхПартий.Колонки.Найти("Движение") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("Движение");
	КонецЕсли; 
	
	Если не ПустаяСтрока(ПриоритетныеКолонкиТаблицыСписания) Тогда
		ПриоритетныеКолонкиТаблицыСписания = Сред(ПриоритетныеКолонкиТаблицыСписания,2);
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("ПриоритетныеКолонкиТаблицыСписания", ПриоритетныеКолонкиТаблицыСписания);
	
	Возврат ТаблицаСписанныхПартий;
	
КонецФункции // ПодготовитьСтруктуруТаблицыСписания()

// Определяет состав колонок таблицы списания партий товаров.
// 
Процедура ОпределитьСоставКолонокТаблицаСписанныхПартий(СтруктураПараметров, СтруктураКолонок)
	
	СтруктураКолонок.Вставить("Организация");
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Склад");
	СтруктураКолонок.Вставить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	СтруктураКолонок.Вставить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("КодОперацииПартииТоваров");
	СтруктураКолонок.Вставить("КодОперации"); // Из движений
	СтруктураКолонок.Вставить("СписаноИз");
	СтруктураКолонок.Вставить("ТипЗаписи");
	СтруктураКолонок.Вставить("СерияНоменклатуры");
	СтруктураКолонок.Вставить("ХарактеристикаНоменклатуры");
	// !СЧЕТ
	СтруктураКолонок.Вставить("СчетУчета");
	СтруктураКолонок.Вставить("ДокументОприходования");	
	СтруктураКолонок.Вставить("Регистратор");
	СтруктураКолонок.Вставить("ВестиПартионныйУчетПоСериям");
    
КонецПроцедуры // ОпределитьСоставКолонокТаблицаСписанныхПартий()

// Записывет набор записей в базу данных.
// 
Процедура ЗаписатьДвижения(ДвиженияРегистра, ТаблицаДвиженийРегистра, Замещать)

	ДМ = ДвиженияРегистра.Метаданные();
	ЕстьРеквизитСписаниеПартий = (ДМ.Реквизиты.Найти("СписаниеПартий") <> Неопределено);
	
	Если ТаблицаДвиженийРегистра <> Неопределено Тогда
		
		// Заполним параметр "Списание партий"
		Если ЕстьРеквизитСписаниеПартий Тогда
			ТаблицаДвиженийРегистра.ЗаполнитьЗначения(Истина, "СписаниеПартий");
		КонецЕсли;
		
		бит_ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		
	КонецЕсли;
	
	ДвиженияРегистра.Записывать = Истина;
	ДвиженияРегистра.Записать(Замещать);
	
КонецПроцедуры // ЗаписатьДвижения

// Функция возвращает признак возможности превышения остатков партий.
// 
Функция ПроверитьВозможностьПревышенияОстатков(Пользователь)
	
	// Возврат Истина; // Заглушка для тестирования.

	Возврат бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(ПараметрыСеанса.ТекущийПользователь, ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешитьПревышениеОстаткаПартийМПЗ);
	
КонецФункции // ПроверитьВозможностьПревышенияОстатков()

// Проверяет на принадлежность документа механизму учета НРП.
// 
Функция ЭтоДокументНРП(ДокументСсылка)
	
	Возврат ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.бит_му_ПоступлениеМПЗ") 
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.бит_му_РеализацияМПЗ");
	
КонецФункции // ЭтоДокументНРП()

// Проверяет, является ли проводимый документ документом поступления товаров
// с точки зрения НРП.
// 
Функция ЭтоДокументПоступленияТоваровНРП(Ссылка)

	Возврат ТипЗнч(Ссылка) = Тип("ДокументСсылка.бит_му_ПоступлениеМПЗ") или ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
	
КонецФункции // ЭтоДокументПоступленияТоваровНРП()

// Возвращает признак необходимости учета нереализованной прибыли для целей МУ.
// 
Функция НеобходимУчетНРП(Ссылка)
	
	Возврат Истина; // Заглушка для тестирования
	
КонецФункции // НеобходимУчетНРП()

// Выполняет действия учета НРП для документов поступления МПЗ.
// 
Процедура ВыполнитьДействияУчетНРП_Поступление(Источник, СтруктураПараметров = Неопределено, Отказ = Ложь)
	
	// 1. Если принимается товар от собственного контрагента, необходимо отразить данную операцию
	// в регистре "ПартииМПЗ" путем установки партии и себестоимости поставщика. Для этого
	// получаем все партии, предназначенные нам от контрагента из регистра 
	// "Партии МПЗ собственных контрагентов" и, в зависимости от стратегии списания поступаем следующим
	// образом:
	// ФИФО, ЛИФО: Сортируем партии по дате документа оприходования и подставляем в качестве документа
	// оприходования собственного контрагента и стоимости поступления УПР - полученные данные, одновременно
	// закрывая регистр НРП
	// ПО СРЕДНЕЙ: усреднять партии в регистре НРП нельзя. У них тоже есть документы оприходования (реализация)
	// Необходимо списывать их из регистра по средней в рамках партий реализации, отсортированных по ФИФО.
	
	Если бит_ОбщегоНазначения.СобственныйКонтрагент(Источник.Контрагент) Тогда
		
		ОтразитьНРППоступление(СтруктураПараметров, Отказ);
		
	Иначе
		
		
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДействияУчетНРП_Поступление()

// Выполняет действия учета НРП для документов реализации МПЗ.
// 
Процедура ВыполнитьДействияУчетНРП_Реализация(Источник, СтруктураПараметров = Неопределено, Отказ = Ложь)
	
	// 1. Если списывается партия собственному контрагенту необходимо отразить данную операцию
	// в регистре "Партии МПЗ собственных контрагентов", причем в качестве себестоимости нужно указать 
	// значение ресурса "СуммаПоступленияУпр" партионного регистра
	// Записи этого регистра необходимы для последующего разбиения входящих партий при оформлении поступления
	// у собственного контрагента.
	
	Если бит_ОбщегоНазначения.СобственныйКонтрагент(Источник.Контрагент) Тогда // Проверим на принадлежность покупателя
		
		// Все списанные партии отразим в регистре НРП.
		ОтразитьНРПРеализация(СтруктураПараметров, Отказ);
		
	Иначе
		
		// 2. Если списывается партия стороннему контрагенту - ничего делать не нужно.
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДействияУчетНРП_Реализация()

// Отражает движения учета НРП для документов реализации МПЗ.
// 
Процедура ОтразитьНРПРеализация(СтруктураПараметров = Неопределено, Отказ = Ложь)
	
	ТаблицаПартий 	= СтруктураПараметров.ДвиженияПартииМПЗ.Выгрузить();
	ТаблицаНРП		= СтруктураПараметров.ДвиженияНРП.Выгрузить();
	
	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		
		СтрокаНРП = ТаблицаНРП.Добавить();
		
		ЗаполнитьСтрокуДвиженияНРП_Реализация(СтрокаНРП, СтрокаПартии, СтруктураПараметров);
		
	КонецЦикла;
	
	ЗаписатьДвижения(СтруктураПараметров.ДвиженияНРП, ТаблицаНРП, Истина);
	
КонецПроцедуры // ОтразитьНРПРеализация()

// Отражает движения учета НРП для документов поступления МПЗ.
// 
Процедура ОтразитьНРППоступление(СтруктураПараметров = Неопределено, Отказ = Ложь)
	
	ТаблицаПартий 	= СтруктураПараметров.ДвиженияПартииМПЗ.Выгрузить();
	// ТаблицаНРП		= СтруктураПараметров.ДвиженияНРП;
	
	СпособОценки 	= ВРег(Строка(СтруктураПараметров.УчетнаяПолитика.СпособОценкиМПЗ));
	
    // Получим остатки по партиям НРП, связанных с оприходованными партиями.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаСписания.Организация,
	|	ТаблицаСписания.Номенклатура,
	|	ТаблицаСписания.ДокументОприходования,
	|	ТаблицаСписания.ХарактеристикаНоменклатуры,
	|	ТаблицаСписания.СерияНоменклатуры,
	|	ТаблицаСписания.Качество,
	|	ТаблицаСписания.ПартияСобственногоКонтрагента,
	|	ТаблицаСписания.СуммаУпр,
	// !СЧЕТ
	|	ТаблицаСписания.СчетУчета,
	|	ТаблицаСписания.СуммаПоступленияУпр,
	|	ТаблицаСписания.Количество,
	|	ТаблицаСписания.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаСписания
	|ИЗ
	|	&ТаблицаСписания КАК ТаблицаСписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.Продавец КАК Организация,
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.Продавец КАК Продавец,
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.Покупатель,
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.Номенклатура,
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.ХарактеристикаНоменклатуры,
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.СерияНоменклатуры,
	// !СЧЕТ
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.СчетУчета,
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.ДокументОприходования КАК ПартияСобственногоКонтрагента,
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.ДокументОприходования КАК ДокументОприходования,	
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.КоличествоОстаток КАК Количество,
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.СебестоимостьПоставщикаОстаток КАК СебестоимостьПоставщика,
	|	ТаблицаСписания.НомерСтроки
	|ИЗ
	|	ТаблицаСписания КАК ТаблицаСписания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.бит_му_ПартииМПЗСобственныхКонтрагентов.Остатки(
	|				&ПериодКон,
	|				Покупатель = &МыКакКонтрагент
	|					И Номенклатура В (&СписокНоменклатуры)
	|					И Продавец = &Контрагент) КАК бит_му_ПартииМПЗСобственныхКонтрагентовОстатки
	|		ПО ТаблицаСписания.Номенклатура = бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.Номенклатура
	|			И ТаблицаСписания.ХарактеристикаНоменклатуры = бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.ХарактеристикаНоменклатуры
	|			И ТаблицаСписания.СерияНоменклатуры = бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.СерияНоменклатуры
	// !СЧЕТ
	// |			И ТаблицаСписания.СчетУчета = бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.СчетУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	бит_му_ПартииМПЗСобственныхКонтрагентовОстатки.ДокументОприходования.Дата " + ?(СпособОценки = "ЛИФО", "УБЫВ", "ВОЗР") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСписания";
	
	Запрос.УстановитьПараметр("ТаблицаСписания"		, ТаблицаПартий);
	Запрос.УстановитьПараметр("ПериодКон"			, СтруктураПараметров.МоментКон);
	Запрос.УстановитьПараметр("МыКакКонтрагент"		, ПолучитьСобственногоКонтрагентаОрганизации(СтруктураПараметров.Организация));
	Запрос.УстановитьПараметр("СписокНоменклатуры"	, ТаблицаПартий.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Контрагент"			, ПолучитьОрганизациюСобственногоКонтрагента(СтруктураПараметров.ДокументСсылка.Контрагент));
	
	ВозможныеПартииКЗачету = Запрос.Выполнить().Выгрузить();
	
	ВыполнитьСписаниеНРП_КорректировкаПартий(СтруктураПараметров, ВозможныеПартииКЗачету);
	
КонецПроцедуры // ОтразитьНРППоступление()

// Корректировка партий при поступлении МПЗ (может быть дополнительное разбиение
// партий в зависимости от данных по партиям собственного контрагента).
// 
Процедура ВыполнитьСписаниеНРП_КорректировкаПартий(СтруктураПараметров, ВозможныеПартииКЗачету)
	
	НовыеДвиженияПартии = СтруктураПараметров.ДвиженияПартииМПЗ.Выгрузить();
	НовыеДвиженияПартии.Очистить();
	
	ПартииИзменены = Ложь;
	
	Для Каждого СтрокаПартий Из СтруктураПараметров.ДвиженияПартииМПЗ Цикл
		
		НомерСтрокиПартии = СтрокаПартий.НомерСтроки;
		Отбор = Новый Структура("НомерСтроки", НомерСтрокиПартии);
		
		СтрокиВозможныхПартий = ВозможныеПартииКЗачету.НайтиСтроки(Отбор);
		
		КоличествоОсталосьРаспределить 	= СтрокаПартий.Количество;
		СуммаУпрОсталосьРаспределить	= СтрокаПартий.СуммаУпр;
		
		Для Каждого СтрокаВозможныхПартий Из СтрокиВозможныхПартий Цикл
			
			Если КоличествоОсталосьРаспределить <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПартииИзменены = Истина;
			
			Если СтрокаВозможныхПартий.Количество >= КоличествоОсталосьРаспределить Тогда
				КоэффСписания = КоличествоОсталосьРаспределить / СтрокаВозможныхПартий.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			НовоеДвижениеПартии = НовыеДвиженияПартии.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижениеПартии, СтрокаПартий);
			
			НовоеДвижениеПартии.ПартияСобственногоКонтрагента = СтрокаВозможныхПартий.ПартияСобственногоКонтрагента;
			
			НовоеДвижениеПартии.Количество 			= Окр(СтрокаВозможныхПартий.Количество * КоэффСписания,3,1);
			НовоеДвижениеПартии.СуммаПоступленияУпр	= Окр(СтрокаВозможныхПартий.СебестоимостьПоставщика * КоэффСписания,2,1);
			// НовоеДвижениеПартии.СуммаУпр			= Окр(СтрокаПартий.СебестоимостьПоставщика * КоэффСписания,2,1);
			
			Если КоличествоОсталосьРаспределить >= НовоеДвижениеПартии.Количество Тогда
				КоэффСебестоимости = НовоеДвижениеПартии.Количество / КоличествоОсталосьРаспределить;
			Иначе
				КоэффСебестоимости = 1;
			КонецЕсли;
			
			НовоеДвижениеПартии.СуммаУпр 	= Окр(СуммаУпрОсталосьРаспределить * КоэффСебестоимости, 2, 1);
			
			КоличествоОсталосьРаспределить 	= КоличествоОсталосьРаспределить - НовоеДвижениеПартии.Количество;
			СуммаУпрОсталосьРаспределить	= СуммаУпрОсталосьРаспределить - НовоеДвижениеПартии.СуммаУпр;
			
			// Движения-сторно возможных партий
			ДвижениеСторно = СтруктураПараметров.ДвиженияНРП.Добавить();
			
			ЗаполнитьЗначенияСвойств(ДвижениеСторно, СтрокаВозможныхПартий);
			
			ДвижениеСторно.ВидДвижения 				= ВидДвиженияНакопления.Расход;
			ДвижениеСторно.Период					= СтруктураПараметров.ДокументСсылка.Дата;
			ДвижениеСторно.Количество 				= НовоеДвижениеПартии.Количество;
			ДвижениеСторно.СебестоимостьПоставщика  = НовоеДвижениеПартии.СуммаПоступленияУпр;
			
			Если ВРЕГ(Строка(СтруктураПараметров.УчетнаяПолитика.СпособОценкиМПЗ)) = "ПО СРЕДНЕЙ" Тогда
				НовоеДвижениеПартии.ПартияСобственногоКонтрагента = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
		// Могут остаться нераспределенные партии
		Если КоличествоОсталосьРаспределить > 0 Тогда
			
			НовоеДвижениеПартии = НовыеДвиженияПартии.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижениеПартии, СтрокаПартий);
			
			НовоеДвижениеПартии.Количество 			= КоличествоОсталосьРаспределить;
			НовоеДвижениеПартии.СуммаУпр 			= СуммаУпрОсталосьРаспределить;
			НовоеДвижениеПартии.СуммаПоступленияУпр = СуммаУпрОсталосьРаспределить;
						
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПартииИзменены Тогда
		
		// Очистим старые движения по партиям 
		СтруктураПараметров.ДвиженияПартииМПЗ.Очистить();
		// Запишем скорректированные движения
		ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииМПЗ	, НовыеДвиженияПартии, Истина);
		// ЗаписатьДвижения(СтруктураПараметров.ДвиженияНРП		, СтруктураПараметров.ДвиженияНРП.Выгрузить(), Истина);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПартииИзменены", ПартииИзменены);
	
КонецПроцедуры // ВыполнитьСписаниеНРП_КорректировкаПартий()

// Заполняет строку движеняи НРП данными строки партии.
// 
Процедура ЗаполнитьСтрокуДвиженияНРП_Реализация(СтрокаДвиженияНРП, СтрокаПартии, СтруктураПараметров)
	
	ЗаполнитьЗначенияСвойств(СтрокаДвиженияНРП, СтрокаПартии);
	
	СтрокаДвиженияНРП.ВидДвижения 				= ВидДвиженияНакопления.Приход;
	СтрокаДвиженияНРП.Продавец					= СтрокаДвиженияНРП.Организация;
	СтрокаДвиженияНРП.Покупатель				= СтруктураПараметров.ДокументСсылка.Контрагент;
	СтрокаДвиженияНРП.СебестоимостьПоставщика   = СтрокаПартии.СуммаПоступленияУпр;
	
	// В случае, если в строке партии указана Партия собственного контрагента - 
	// укажем ее в качестве партии.
	Если ЗначениеЗаполнено(СтрокаПартии.ПартияСобственногоКонтрагента) Тогда
		СтрокаДвиженияНРП.ДокументОприходования = СтрокаПартии.ПартияСобственногоКонтрагента;
	КонецЕсли;
	
	Если ВРег(Строка(СтруктураПараметров.УчетнаяПолитика.СпособОценкиМПЗ)) = "ПО СРЕДНЕЙ" Тогда
		// В качестве партии укажем документ реализации.
		СтрокаДвиженияНРП.ДокументОприходования = СтруктураПараметров.ДокументСсылка;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуДвиженияНРП_Реализация()

// Выполняет корректировку справедливой стоимости партии МПЗ, в случае
// использования трансляции движений для целей МУ.
// 
Процедура ВыполнитьКорректировкуСправедливойСтоимости(Источник, СтруктураПараметров)
	
	ДвиженияПартииМПЗ = Источник.Движения.бит_му_ПартииМПЗ;
	
	СпособОценкиМПЗ 				= СтруктураПараметров.УчетнаяПолитика.СпособОценкиМПЗ;
	ВестиПартионныйУчетПоСкладам 	= СтруктураПараметров.УчетнаяПолитика.ВестиПартионныйУчетПоСкладам;
	
	СпособОценкиМПЗПоСредней = (СпособОценкиМПЗ = Перечисления.бит_СпособыОценки.ПоСредней);
	
	СчетГотовойПродукции = СтруктураПараметров.УчетнаяПолитика.СчетГотовойПродукции;
	
	КопияДвиженияПартииМПЗ = ДвиженияПартииМПЗ.Выгрузить();
	
	КопияДвиженияПартииМПЗ.Свернуть("НомерСтроки, Организация, Склад, Номенклатура, СерияНоменклатуры, ДокументОприходования, ХарактеристикаНоменклатуры, СчетУчета, СуммаУпр, СуммаПоступленияУпр, Количество");
	
	// Движения еще не записаны, поэтому на остатки повлиять не могут. Необходимо получить остатки конкретных партий.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КопияПартийМПЗ.НомерСтроки,
	|	КопияПартийМПЗ.Организация,
	|	КопияПартийМПЗ.Склад,
	|	КопияПартийМПЗ.Номенклатура,
	|	КопияПартийМПЗ.ХарактеристикаНоменклатуры,
	|	КопияПартийМПЗ.СерияНоменклатуры,
	// !СЧЕТ
	|	КопияПартийМПЗ.СчетУчета,
	|	КопияПартийМПЗ.ДокументОприходования
	|ПОМЕСТИТЬ КопияПартийМПЗ
	|ИЗ
	|	&КопияПартийМПЗ КАК КопияПартийМПЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КопияПартийМПЗ.НомерСтроки,
	|	бит_му_ПартииМПЗОстатки.Организация,
	|	бит_му_ПартииМПЗОстатки.Склад,
	|	бит_му_ПартииМПЗОстатки.Номенклатура,
	|	бит_му_ПартииМПЗОстатки.ДокументОприходования,
	|	бит_му_ПартииМПЗОстатки.ХарактеристикаНоменклатуры,
	|	бит_му_ПартииМПЗОстатки.СерияНоменклатуры,
	|	бит_му_ПартииМПЗОстатки.Качество,
	|	бит_му_ПартииМПЗОстатки.СчетУчета,
	|	бит_му_ПартииМПЗОстатки.ПартияСобственногоКонтрагента,
	|	бит_му_ПартииМПЗОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	бит_му_ПартииМПЗОстатки.СуммаПоступленияУпрОстаток КАК СуммаПоступленияУпр,
	|	бит_му_ПартииМПЗОстатки.КоличествоОстаток КАК Количество
	|			" + ?(СпособОценкиМПЗПоСредней, "
	|	,ЕСТЬNULL(бит_Дополнительный_2Обороты.СуммаУпрОборотКт, 0) КАК СуммаУпрПоСчету
	|	,ЕСТЬNULL(бит_Дополнительный_2Обороты.КоличествоОборотКт, 0) КАК КоличествоПоСчету", "") + "
	|ИЗ
	|	РегистрНакопления.бит_му_ПартииМПЗ.Остатки(
	|			&МоментОстатков,
	|			Организация = &Организация " + ?(ВестиПартионныйУчетПоСкладам, "
	|					И (Склад В (&СписокСкладов)
	|						ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) ", "") + "
	|				И Номенклатура В (&СписокНоменклатуры)) КАК бит_му_ПартииМПЗОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КопияПартийМПЗ КАК КопияПартийМПЗ
	|		ПО бит_му_ПартииМПЗОстатки.Организация = КопияПартийМПЗ.Организация
	|			И бит_му_ПартииМПЗОстатки.Склад = КопияПартийМПЗ.Склад
	|			И бит_му_ПартииМПЗОстатки.Номенклатура = КопияПартийМПЗ.Номенклатура
	|			И бит_му_ПартииМПЗОстатки.ХарактеристикаНоменклатуры = КопияПартийМПЗ.ХарактеристикаНоменклатуры
	|			И бит_му_ПартииМПЗОстатки.СерияНоменклатуры = КопияПартийМПЗ.СерияНоменклатуры
	|			И бит_му_ПартииМПЗОстатки.ДокументОприходования = КопияПартийМПЗ.ДокументОприходования
	// !СЧЕТ
	|			И бит_му_ПартииМПЗОстатки.СчетУчета = КопияПартийМПЗ.СчетУчета
	|			" + ?(СпособОценкиМПЗПоСредней, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				Счет В ИЕРАРХИИ (&СчетГП),
	|				&МассивСубконто,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНоменклатуры),
	|				,
	|				) КАК бит_Дополнительный_2Обороты
	|		ПО бит_му_ПартииМПЗОстатки.Организация = бит_Дополнительный_2Обороты.Организация
	|			И бит_му_ПартииМПЗОстатки.Склад = бит_Дополнительный_2Обороты.Субконто2
	|			И бит_му_ПартииМПЗОстатки.Номенклатура = бит_Дополнительный_2Обороты.Субконто1", "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КопияПартийМПЗ";
	
	Запрос.УстановитьПараметр("МоментОстатков"		, СтруктураПараметров.МоментКон);
	Запрос.УстановитьПараметр("Организация"			, СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("СписокНоменклатуры"	, КопияДвиженияПартииМПЗ.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СписокСкладов"		, КопияДвиженияПартииМПЗ.ВыгрузитьКолонку("Склад"));
	Запрос.УстановитьПараметр("КопияПартийМПЗ"		, КопияДвиженияПартииМПЗ);
	
	Запрос.УстановитьПараметр("СчетГП"				, СчетГотовойПродукции);
	
	МассивСубконто 	= Новый Массив;
	ВидыСубконто	= ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	МассивСубконто.Добавить(ВидыСубконто.Номенклатура);
	МассивСубконто.Добавить(ВидыСубконто.Склады);
	Запрос.УстановитьПараметр("МассивСубконто"		, МассивСубконто);
	
	Запрос.УстановитьПараметр("ДатаНач"				, НачалоМесяца(СтруктураПараметров.МоментКон.Дата));
	Запрос.УстановитьПараметр("ДатаКон"				, КонецМесяца(СтруктураПараметров.МоментКон.Дата));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Очистим предыдущие движения партий
	ДвиженияПартииМПЗ.Очистить();
	
	// Совершаем обход копи старых движений и формируем партионные движения заново.
	
	Для Каждого СтрокаКопииДвижений Из КопияДвиженияПартииМПЗ Цикл
		
		// Найдем соответствия
		Отбор = Новый Структура("НомерСтроки", СтрокаКопииДвижений.НомерСтроки);
		СтрокиОстатка = Результат.НайтиСтроки(Отбор);
		
		// Считаем, что списываемые партии идентичные списанным в типовом партионном учете,
		// но могут "дробиться" за счет указния партий собственного контрагента.
		
		Если СтрокиОстатка.Количество() > 0 Тогда
			
			КоличествоОсталосьРаспределить 	= СтрокаКопииДвижений.Количество;
			СуммаУпрОсталосьРаспределить	= СтрокаКопииДвижений.СуммаУпр;
			
			Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
				
				// Если это готовая продукция - берем себестоимость из проводок.
				Если СпособОценкиМПЗПоСредней И ЗначениеЗаполнено(СтрокаОстатка.СчетУчета) И СтрокаОстатка.СчетУчета.ПринадлежитЭлементу(СчетГотовойПродукции) Тогда
					Если СтрокаОстатка.КоличествоПоСчету <> 0 Тогда
						СтрокаОстатка.СуммаПоступленияУпр = (СтрокаОстатка.СуммаУпрПоСчету * СтрокаОстатка.Количество) / СтрокаОстатка.КоличествоПоСчету;
					КонецЕсли;
				КонецЕсли;
				
				// Распределим, пропорционально имеющемуся количеству.
				Если КоличествоОсталосьРаспределить <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаОстатка.Количество >= КоличествоОсталосьРаспределить Тогда
					КоэффСписания = КоличествоОсталосьРаспределить / СтрокаОстатка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				НоваяСтрокаПартии = ДвиженияПартииМПЗ.Добавить();
				НоваяСтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Расход;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПартии, СтрокаОстатка);
				
				НоваяСтрокаПартии.Количество 			= Окр(СтрокаОстатка.Количество * КоэффСписания,3,1);
				НоваяСтрокаПартии.СуммаПоступленияУпр	= Окр(СтрокаОстатка.СуммаПоступленияУпр * КоэффСписания,2,1);
				НоваяСтрокаПартии.СуммаУпр				= Окр(СтрокаОстатка.СуммаУпр * КоэффСписания,2,1);
				
				КоличествоОсталосьРаспределить 	= КоличествоОсталосьРаспределить - НоваяСтрокаПартии.Количество;
				СуммаУпрОсталосьРаспределить	= СуммаУпрОсталосьРаспределить - НоваяСтрокаПартии.СуммаУпр;
				
			КонецЦикла;
			
			Если КоличествоОсталосьРаспределить > 0 Тогда
				
				НоваяСтрокаПартии = ДвиженияПартииМПЗ.Добавить();
				НоваяСтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Расход;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПартии, СтрокаКопииДвижений);
				
				НоваяСтрокаПартии.Количество 			= КоличествоОсталосьРаспределить;
				НоваяСтрокаПартии.СуммаУпр 				= СуммаУпрОсталосьРаспределить;
				НоваяСтрокаПартии.СуммаПоступленияУпр 	= СуммаУпрОсталосьРаспределить;
				
			КонецЕсли;
			
		Иначе
			
			// Запишем партию "Как есть"
			НоваяСтрокаПартии = ДвиженияПартииМПЗ.Добавить();
			НоваяСтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Расход;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПартии, СтрокаКопииДвижений);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДвижениеМПЗ Из ДвиженияПартииМПЗ Цикл
		ДвижениеМПЗ.Период = Источник.Дата;
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьКорректировкуСправедливойСтоимости()

// Осуществляет сдвиг границы последовательности.
// 
Процедура СдвинутьГраницуПоследовательности(ИмяПоследовательности, ДокументМоментВремени, Отбор)
	
	СдвигатьГраницу = ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени, Отбор);

	Если СдвигатьГраницу Тогда
		
		Последовательности[ИмяПоследовательности].УстановитьГраницу(ДокументМоментВремени, Отбор);
	
		Набор = Последовательности[ИмяПоследовательности].СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ДокументМоментВремени.Ссылка);
		
		Если ЗначениеЗаполнено(Набор.Отбор.Регистратор.Значение) ТОгда
		  	Если ДокументМоментВремени.Ссылка.Проведен Тогда
				
				ДокументПроведенВХронологическойПоследовательности = ОпределитьНаличиеПоследующихДокументовВПоследовательности(ДокументМоментВремени, Отбор);
				
				Если ДокументПроведенВХронологическойПоследовательности Тогда
					
					Набор.Прочитать();
					
					Для Каждого ТекСтрока Из Набор Цикл
						ТекСтрока.ПроведенВХронологическойПоследовательности = Истина;
					КонецЦикла;
					
					Набор.Записать();
					
				КонецЕсли;
				
			Иначе
				Набор.Записать(); // Удалим не проведенный документ из таблицы регистрации в последовательности.
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // СдвинутьГраницуПоследовательности()

// Определяет необходимость сдвига границы последовательности.
// 
Функция ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени, Отбор = Неопределено, СписыватьПартииПриПроведенииДокументов = Ложь)
	
	// Границу последовательности можно сдвигать вперед только если между границей
	// и документом нет других документов в последовательности.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Последовательность.Регистратор
	|ИЗ
	|	Последовательность.бит_му_ПоследовательностьПартионныйУчет КАК Последовательность
	|ГДЕ
	|    Организация =&Организация
	|	И Последовательность.МоментВремени > &Граница
	|	И Последовательность.МоментВремени < &Документ
	|	И (НЕ Последовательность.Регистратор = &Регистратор)";
	
	ГраницаМоментВремени = Последовательности.бит_му_ПоследовательностьПартионныйУчет.ПолучитьГраницу(Отбор);
	
	Запрос.УстановитьПараметр("Организация"		, Отбор.Организация);
	Запрос.УстановитьПараметр("Граница"			, ГраницаМоментВремени);
	Запрос.УстановитьПараметр("Документ"		, ДокументМоментВремени);
	Запрос.УстановитьПараметр("Регистратор"		, ДокументМоментВремени.Ссылка);
	
	Если ГраницаМоментВремени = Неопределено ИЛИ ГраницаМоментВремени.Дата = '00010101' Тогда
		Возврат Истина;
	ИначеЕсли ГраницаМоментВремени.Дата > ДокументМоментВремени.Дата Тогда
		Возврат Ложь;
	Иначе	
		Возврат Запрос.Выполнить().Пустой();
	КонецЕсли;	
	
КонецФункции // ОпределитьНеобходимостьСдвигаГраницы()

// Определяет, есть ли в последовательности документы, зарегистрированные позже проводимого.
// 
Функция ОпределитьНаличиеПоследующихДокументовВПоследовательности(ДокументМоментВремени, Отбор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Последовательность.Регистратор
	|ИЗ
	|	Последовательность.бит_му_ПоследовательностьПартионныйУчет КАК Последовательность
	|ГДЕ
	|    Организация =&Организация
	|	И Последовательность.МоментВремени > &Документ
	|	И (НЕ Последовательность.Регистратор = &Регистратор)";
	
	Запрос.УстановитьПараметр("Организация"	, Отбор.Организация);
	Запрос.УстановитьПараметр("Документ"	, ДокументМоментВремени);
	Запрос.УстановитьПараметр("Регистратор"	, ДокументМоментВремени.Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции // ОпределитьНаличиеПоследующихДокументовВПоследовательности()

#КонецОбласти
