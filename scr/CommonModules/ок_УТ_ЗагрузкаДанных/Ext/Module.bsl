
#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьДанныеРЗ() Экспорт
	
	Параметры	=	ок_ОбщегоНазначенияФинансы21.ПолучитьПараметрыРегламентногоЗадания();
	
	Если Не Параметры = Неопределено Тогда 
		ЗагрузитьДанные(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанные(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗагрузитьТаблицу(ПолучитьИнтеграционнуюТаблицу(Параметры));
	
КонецПроцедуры

Функция ПолучитьДанные(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПолучитьИнтеграционнуюТаблицу(Параметры);
	
КонецФункции

Функция ЗагрузитьТаблицу(ТаблицаЗначений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗавершеноУспешно		=	Истина;
	
	#Область Логирование
	
	ИдентификаторОперации	=	"ок_УТ_ЗагрузкаДанных";
	ИдентификаторЗадания	=	Строка(Новый УникальныйИдентификатор);
	ИдентификаторПотока		=	Строка(Новый УникальныйИдентификатор);
	
	НастройкиЛогирования	=	ок_ЛогированиеОпераций.ПолучитьНастройкиЛогирования(ИдентификаторОперации);
	
	ИспользоватьЛогирование			=	НастройкиЛогирования.Использовать;
	ЗаписыватьСообщенияПользователю	=	НастройкиЛогирования.ЗаписыватьСообщенияПользователю;
	
	Если ИспользоватьЛогирование Тогда
		
		ПараметрыЛогирования	=	ок_ЛогированиеОпераций.ИнициализироватьПараметрыЛогирования();	
		
		ПараметрыЛогирования.Вставить("ИдентификаторОперации",	ИдентификаторОперации);
		ПараметрыЛогирования.Вставить("ИдентификаторЗадания",	ИдентификаторЗадания);
		ПараметрыЛогирования.Вставить("ИдентификаторПотока",	ИдентификаторПотока);
		
		ок_ЛогированиеОпераций.ЗаписастьЛогДО(ПараметрыЛогирования);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Параметры	=	ПолучитьПараметры(ИспользоватьЛогирование, ЗаписыватьСообщенияПользователю, ПараметрыЛогирования);
	
	Выборка		=	Мэппинг(ТаблицаЗначений, Параметры);
	
	Пока Выборка.Следующий() Цикл
		
		#Область Логирование
		Если Параметры.ИспользоватьЛогирование Тогда
			
			ОписаниеОшибки	=	"";
			Если Выборка.НесопоставленоДоговор Тогда
				ОписаниеОшибки	=	ОписаниеОшибки	+	?(ЗначениеЗаполнено(ОписаниеОшибки), Символы.ПС, "");
				ОписаниеОшибки	=	ОписаниеОшибки	+	"Не сопоставлен договор: " + Выборка.ВидОперации + "_" + Выборка.Объект;
			КонецЕсли;
			Если Выборка.НесопоставленоОбъект Тогда
				ОписаниеОшибки	=	ОписаниеОшибки	+	?(ЗначениеЗаполнено(ОписаниеОшибки), Символы.ПС, "");
				ОписаниеОшибки	=	ОписаниеОшибки	+	"Не сопоставлен объект: " + Выборка.Объект;
			КонецЕсли;
			Если Выборка.НесопоставленоНоменклатурнаяГруппа Тогда
				ОписаниеОшибки	=	ОписаниеОшибки	+	?(ЗначениеЗаполнено(ОписаниеОшибки), Символы.ПС, "");
				ОписаниеОшибки	=	ОписаниеОшибки	+	"Не сопоставлена НГ: " + Выборка.Объект;
			КонецЕсли;
			//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2021-11-09 (#AT-2154797)
			// Не нужно сообщать о несопоставлении Статьи ДДС для реализации услуг доставки.
			//Если Выборка.НесопоставленоСтатьяДДС Тогда
			Если Выборка.НесопоставленоСтатьяДДС И Не Выборка.ВидОперации = "Реализация услуг доставки"  Тогда
			//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2021-11-09 (#AT-2154797)
				ОписаниеОшибки	=	ОписаниеОшибки	+	?(ЗначениеЗаполнено(ОписаниеОшибки), Символы.ПС, "");
				ОписаниеОшибки	=	ОписаниеОшибки	+	"Не сопоставлена статья ДДС: " + Выборка.ВидОперации;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке(ОписаниеОшибки, Параметры);
			КонецЕсли;
			
		КонецЕсли;
		#КонецОбласти
		
		Результат	=	Истина;
		
		Если Выборка.СуммаНал > 0 И (Выборка.ВидОперации = "Оплата товара" Или Выборка.ВидОперации = "Оплата услуг доставки") Тогда
			Результат	=	Результат И ЗагрузитьПриходныйКассовыйОрдер(Выборка, Параметры);
		КонецЕсли;
		
		Если Выборка.СуммаБезнал > 0 И (Выборка.ВидОперации = "Оплата товара" Или Выборка.ВидОперации = "Оплата услуг доставки")  Тогда
			Результат	=	Результат И ЗагрузитьОплатуПлатежнойКартой(Выборка, Параметры);
		КонецЕсли;
		
		Если Выборка.Сумма > 0 И Выборка.ВидОперации = "Реализация услуг доставки" Тогда
			Результат	=	Результат И ЗагрузитьРеализациюТоваровУслуг(Выборка, Параметры);
		КонецЕсли;
		
		Если Результат Тогда
			УстановитьПризнакЗагрузки(Выборка, 1);
		КонецЕсли;
		
		ЗавершеноУспешно	=	ЗавершеноУспешно И Результат;
		
	КонецЦикла;
	
	#Область Логирование
	
	Если ИспользоватьЛогирование Тогда
		ПараметрыЛогирования.Вставить("ДатаОкончания",	ТекущаяДатаСеанса());
		ПараметрыЛогирования.Вставить("Состояние",		?(ЗавершеноУспешно, 1, 2));
		
		ок_ЛогированиеОпераций.ЗаписастьЛогДО(ПараметрыЛогирования);
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат ЗавершеноУспешно;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗагрузитьПриходныйКассовыйОрдер(Выборка, Параметры)
	
	Попытка
		Если ЗначениеЗаполнено(Выборка.ПриходныйКассовыйОрдерСсылка) Тогда
			ДокументОбъект		=	Выборка.ПриходныйКассовыйОрдерСсылка.ПолучитьОбъект();	
		Иначе
			ДокументОбъект		=	Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Дата	=	НачалоДня(Выборка.Дата);
		КонецЕсли;
		
		Если Не ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		КонецЕсли;
		
		Если Не ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации Тогда
			ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		КонецЕсли;
		
		Если Не ДокументОбъект.Организация = Выборка.ОрганизацияСсылка Тогда
			ДокументОбъект.Организация = Выборка.ОрганизацияСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ок_Объект = Выборка.ОбъектСсылка Тогда
			ДокументОбъект.ок_Объект = Выборка.ОбъектСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.Контрагент = Выборка.КонтрагентСсылка Тогда
			ДокументОбъект.Контрагент = Выборка.КонтрагентСсылка;
		КонецЕсли;
		
		ПринятоОт	=	СокрЛП(Выборка.КонтрагентСсылка);
		
		Если Не ДокументОбъект.ПринятоОт = ПринятоОт Тогда
			ДокументОбъект.ПринятоОт = ПринятоОт;
		КонецЕсли;
		
		Если Не ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорСсылка Тогда
			ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорСсылка;
		КонецЕсли;
		
		ОснованиеОплаты	=	"Выручка от розничного покупателя";
		Если Не ДокументОбъект.Основание = ОснованиеОплаты Тогда
			ДокументОбъект.Основание = ОснованиеОплаты;
		КонецЕсли;
		
		ВалютаДокумента	=	Выборка.ДоговорСсылка.ВалютаВзаиморасчетов;
			
		Если Не ДокументОбъект.ВалютаДокумента = ВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента	=	ВалютаДокумента;
		КонецЕсли;
		
		МассивИменКолонок	=	"ДоговорКонтрагента, СтатьяДвиженияДенежныхСредств, СуммаПлатежа, СуммаВзаиморасчетов,
								|СтавкаНДС, СуммаНДС, СпособПогашенияЗадолженности, СчетУчетаРасчетовСКонтрагентом,
								|СчетУчетаРасчетовПоАвансам, КурсВзаиморасчетов, КратностьВзаиморасчетов";
		
		РасшифровкаПлатежа	=	ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонки(МассивИменКолонок);
	
		СтрокаРасшифровки	=	РасшифровкаПлатежа.Добавить();
		
		Если Не СтрокаРасшифровки.ДоговорКонтрагента = Выборка.ДоговорСсылка Тогда
			СтрокаРасшифровки.ДоговорКонтрагента = Выборка.ДоговорСсылка;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДССсылка Тогда
			СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДССсылка;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СуммаПлатежа = Выборка.СуммаНал Тогда
			СтрокаРасшифровки.СуммаПлатежа = Выборка.СуммаНал;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СуммаВзаиморасчетов = Выборка.СуммаНал Тогда
			СтрокаРасшифровки.СуммаВзаиморасчетов = Выборка.СуммаНал;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать Тогда
			СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		КонецЕсли;
		
		СтруктураКурсаДокумента        				=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		Если Не СтрокаРасшифровки.КурсВзаиморасчетов	=	СтруктураКурсаДокумента.Курс Тогда 
			СтрокаРасшифровки.КурсВзаиморасчетов	=	СтруктураКурсаДокумента.Курс;
		КонецЕсли;
		Если Не СтрокаРасшифровки.КратностьВзаиморасчетов	=	СтруктураКурсаДокумента.Кратность Тогда 
			СтрокаРасшифровки.КратностьВзаиморасчетов	=	СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
		
		Если Не ок_ОбщегоНазначенияФинансы21.ТаблицыЗначенийРавны(ДокументОбъект.РасшифровкаПлатежа.Выгрузить(, МассивИменКолонок), РасшифровкаПлатежа) Тогда
			ДокументОбъект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);	
		КонецЕсли;
		
		СуммаДокумента	=	ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		Если Не ДокументОбъект.СуммаДокумента = СуммаДокумента Тогда
			ДокументОбъект.СуммаДокумента = СуммаДокумента;
		КонецЕсли;
		
		Если ДокументОбъект.Модифицированность() Тогда
			
			ДокументОбъект.Ответственный	=	Пользователи.ТекущийПользователь();
			ДокументОбъект.Комментарий		=	Выборка.Комментарий + " " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Проведен документ: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		Иначе
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Документ не был изменен: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки	=	ОписаниеОшибки();
		
		#Область Логирование
		ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке(ОписаниеОшибки, Параметры);
		#КонецОбласти
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьОплатуПлатежнойКартой(Выборка, Параметры)
	
	Попытка
		Если ЗначениеЗаполнено(Выборка.ОплатаПлатежнойКартойСсылка) Тогда
			ДокументОбъект		=	Выборка.ОплатаПлатежнойКартойСсылка.ПолучитьОбъект();	
		Иначе
			ДокументОбъект		=	Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
			ДокументОбъект.Дата	=	НачалоДня(Выборка.Дата);
		КонецЕсли;
		
		Если Не ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
		КонецЕсли;
		
		Если Не ДокументОбъект.ВидОплаты = Параметры.ВидОплаты Тогда
			ДокументОбъект.ВидОплаты = Параметры.ВидОплаты;
		КонецЕсли;
		
		Если Не ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.ПереводыВПути Тогда
			ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.ПереводыВПути;
		КонецЕсли;
		
		Если Не ДокументОбъект.Организация = Выборка.ОрганизацияСсылка Тогда
			ДокументОбъект.Организация = Выборка.ОрганизацияСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ок_Объект = Выборка.ОбъектСсылка Тогда
			ДокументОбъект.ок_Объект = Выборка.ОбъектСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.Контрагент = Выборка.КонтрагентСсылка Тогда
			ДокументОбъект.Контрагент = Выборка.КонтрагентСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорСсылка Тогда
			ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ок_СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДССсылка Тогда
			ДокументОбъект.ок_СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДССсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ок_ВидыПереводов = Перечисления.ОК_ВидыПереводов.ПластиковыеКарты Тогда
			ДокументОбъект.ок_ВидыПереводов = Перечисления.ОК_ВидыПереводов.ПластиковыеКарты;
		КонецЕсли;
		
		ВалютаДокумента	=	Выборка.ДоговорСсылка.ВалютаВзаиморасчетов;
			
		Если Не ДокументОбъект.ВалютаДокумента = ВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента	=	ВалютаДокумента;
		КонецЕсли;
		
		МассивИменКолонок	=	"ДоговорКонтрагента, СуммаПлатежа, СуммаВзаиморасчетов, СтавкаНДС, СуммаНДС,
								|СпособПогашенияЗадолженности, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,
								|КурсВзаиморасчетов, КратностьВзаиморасчетов";
		
		РасшифровкаПлатежа	=	ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонки(МассивИменКолонок);
		
		СтрокаРасшифровки	=	РасшифровкаПлатежа.Добавить();
		
		Если Не СтрокаРасшифровки.ДоговорКонтрагента = Выборка.ДоговорСсылка Тогда
			СтрокаРасшифровки.ДоговорКонтрагента = Выборка.ДоговорСсылка;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СуммаПлатежа = Выборка.СуммаБезнал Тогда
			СтрокаРасшифровки.СуммаПлатежа = Выборка.СуммаБезнал;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СуммаВзаиморасчетов = Выборка.СуммаБезнал Тогда
			СтрокаРасшифровки.СуммаВзаиморасчетов = Выборка.СуммаБезнал;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать Тогда
			СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам =	ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		КонецЕсли;
		
		СтруктураКурсаДокумента        				=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		Если Не СтрокаРасшифровки.КурсВзаиморасчетов	=	СтруктураКурсаДокумента.Курс Тогда 
			СтрокаРасшифровки.КурсВзаиморасчетов	=	СтруктураКурсаДокумента.Курс;
		КонецЕсли;
		Если Не СтрокаРасшифровки.КратностьВзаиморасчетов	=	СтруктураКурсаДокумента.Кратность Тогда 
			СтрокаРасшифровки.КратностьВзаиморасчетов	=	СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
		
		Если Не ок_ОбщегоНазначенияФинансы21.ТаблицыЗначенийРавны(ДокументОбъект.РасшифровкаПлатежа.Выгрузить(, МассивИменКолонок), РасшифровкаПлатежа) Тогда
			ДокументОбъект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);	
		КонецЕсли;
		
		СуммаДокумента	=	ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		Если Не ДокументОбъект.СуммаДокумента = СуммаДокумента Тогда
			ДокументОбъект.СуммаДокумента = СуммаДокумента;
		КонецЕсли;
		
		Если ДокументОбъект.Модифицированность() Тогда
			
			ДокументОбъект.Ответственный	=	Пользователи.ТекущийПользователь();
			ДокументОбъект.Комментарий		=	Выборка.Комментарий + " " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Проведен документ: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		Иначе
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Документ не был изменен: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки	=	ОписаниеОшибки();
		
		#Область Логирование
		ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке(ОписаниеОшибки, Параметры);
		#КонецОбласти
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьРеализациюТоваровУслуг(Выборка, Параметры)
	
	Попытка
		Если ЗначениеЗаполнено(Выборка.РеализацияТоваровУслугСсылка) Тогда
			ДокументОбъект		=	Выборка.РеализацияТоваровУслугСсылка.ПолучитьОбъект();	
		Иначе
			ДокументОбъект		=	Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			ДокументОбъект.Дата	=	НачалоДня(Выборка.Дата);
		КонецЕсли;
		
		Если Не ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		КонецЕсли;
		
		Если Не ДокументОбъект.Организация = Выборка.ОрганизацияСсылка Тогда
			ДокументОбъект.Организация = Выборка.ОрганизацияСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.Контрагент = Выборка.КонтрагентСсылка Тогда
			ДокументОбъект.Контрагент = Выборка.КонтрагентСсылка;
		КонецЕсли;
		
		Если Не ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорСсылка Тогда
			
			ДокументОбъект.ДоговорКонтрагента	=	Выборка.ДоговорСсылка;
			НоваяВалютаДокумента				=	ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			Если Не ДокументОбъект.ВалютаДокумента = НоваяВалютаДокумента Тогда
				ДокументОбъект.ВалютаДокумента			=	НоваяВалютаДокумента;
				
				СтруктураКурсаДокумента        			=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
				ДокументОбъект.КурсВзаиморасчетов		=	СтруктураКурсаДокумента.Курс;
				ДокументОбъект.КратностьВзаиморасчетов	=	СтруктураКурсаДокумента.Кратность;
			КонецЕсли;	
			
		КонецЕсли;
		
		Если Не ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		КонецЕсли;
		
		Если Не ДокументОбъект.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			ДокументОбъект.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		КонецЕсли;
		
		Если Не ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		КонецЕсли;
		
		Если Не ДокументОбъект.СуммаВключаетНДС Тогда
			ДокументОбъект.СуммаВключаетНДС	=	Истина;
		КонецЕсли;
		
		Если ДокументОбъект.ок_ВключитьСчетВПакетЭДО Тогда
			ДокументОбъект.ок_ВключитьСчетВПакетЭДО	=	Ложь;
		КонецЕсли;
		
		МассивИменКолонок	=	"Номенклатура, Содержание, Количество, Сумма, Цена, СтавкаНДС, СуммаНДС,
								|Субконто, Субконто2, СчетДоходов, СчетРасходов, СчетУчетаНДСПоРеализации";
		
		Услуги				=	ДокументОбъект.Услуги.ВыгрузитьКолонки(МассивИменКолонок);
	
		СтрокаУслуг			=	Услуги.Добавить();
		
		Содержание			=	"Услуги доставки";
		
		Если Не СтрокаУслуг.Номенклатура = Параметры.Номенклатура Тогда
			СтрокаУслуг.Номенклатура = Параметры.Номенклатура;
		КонецЕсли;
		
		Если Не СтрокаУслуг.Содержание = Содержание Тогда
			СтрокаУслуг.Содержание = Содержание;
		КонецЕсли;
		
		Если Не СтрокаУслуг.Количество = 1 Тогда
			СтрокаУслуг.Количество = 1;
		КонецЕсли;
		
		Если Не СтрокаУслуг.Сумма = Выборка.СуммаСНДС Тогда
			СтрокаУслуг.Сумма = Выборка.СуммаСНДС;
		КонецЕсли;
		
		Если Не СтрокаУслуг.Цена = Выборка.СуммаСНДС Тогда
			СтрокаУслуг.Цена = Выборка.СуммаСНДС;
		КонецЕсли;
		
		Если Не СтрокаУслуг.СтавкаНДС = Выборка.СтавкаНДССсылка Тогда
			СтрокаУслуг.СтавкаНДС = Выборка.СтавкаНДССсылка;
		КонецЕсли;
		
		Если Не СтрокаУслуг.СуммаНДС = Выборка.СуммаСНДС - Выборка.Сумма Тогда
			СтрокаУслуг.СуммаНДС = Выборка.СуммаСНДС - Выборка.Сумма;
		КонецЕсли;
		
		Если Не СтрокаУслуг.Субконто = Выборка.НоменклатурнаяГруппаСсылка Тогда
			СтрокаУслуг.Субконто = Выборка.НоменклатурнаяГруппаСсылка;
		КонецЕсли;
		
		Если Не СтрокаУслуг.Субконто2 = Выборка.СтавкаНДССсылка Тогда
			СтрокаУслуг.Субконто2 = Выборка.СтавкаНДССсылка;
		КонецЕсли;
		
		Если Не СтрокаУслуг.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД Тогда
			СтрокаУслуг.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
		КонецЕсли;
		
		Если Не СтрокаУслуг.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД Тогда
			СтрокаУслуг.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
		КонецЕсли;
		
		Если Не СтрокаУслуг.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС Тогда
			СтрокаУслуг.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		КонецЕсли;
		
		Если Не ок_ОбщегоНазначенияФинансы21.ТаблицыЗначенийРавны(ДокументОбъект.Услуги.Выгрузить(, МассивИменКолонок), Услуги) Тогда
			ДокументОбъект.Услуги.Загрузить(Услуги);	
		КонецЕсли;
		
		Если ДокументОбъект.Модифицированность() Тогда
			
			ДокументОбъект.Ответственный	=	Пользователи.ТекущийПользователь();
			ДокументОбъект.Комментарий		=	Выборка.Комментарий + " " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Проведен документ: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
			СрокиОплатыДокументов.ОбновитьСрокОплаты(ДокументОбъект.Ссылка, Выборка.Дата, Ложь);
			
			РезультатСозданияСФ	=	УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОбъект.Ссылка);
			
			Если ТипЗнч(РезультатСозданияСФ) = Тип("Структура") Тогда
				Если РезультатСозданияСФ.Свойство("Ссылка") И ЗначениеЗаполнено(РезультатСозданияСФ.Ссылка)
					И РезультатСозданияСФ.Свойство("Проведен") И РезультатСозданияСФ.Проведен Тогда
					#Область Логирование
					ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Проведен документ: " + РезультатСозданияСФ.Ссылка, Параметры);
					#КонецОбласти
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			#Область Логирование
			ок_ЛогированиеОпераций.ЗаписатьСообщенияПользователю("Документ не был изменен: " + ДокументОбъект.Ссылка, Параметры);
			#КонецОбласти
			
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки	=	ОписаниеОшибки();
		
		#Область Логирование
		ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке(ОписаниеОшибки, Параметры);
		#КонецОбласти
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПараметры(ИспользоватьЛогирование, ЗаписыватьСообщенияПользователю, ПараметрыЛогирования)
	
	Параметры				=	Новый Структура;
	
	Параметры.Вставить("ИспользоватьЛогирование", 			ИспользоватьЛогирование);
	Параметры.Вставить("ЗаписыватьСообщенияПользователю",	ЗаписыватьСообщенияПользователю);
	Параметры.Вставить("ПараметрыЛогирования",				ПараметрыЛогирования);
	
	Номенклатура			=	Справочники.Номенклатура.ПустаяСсылка();
	
	ИмяНастройкиОрганизация	=	ок_ОбщегоНазначенияФинансы21.ПолучитьИмяНастройкиОрганизацияОКЕЙ();
	Организация				=	ок_ОбщегоНазначенияФинансы21.ПолучитьОрганизацию(ИмяНастройкиОрганизация);
	
	Параметры.Вставить("Организация",	Организация);
	
	#Область Логирование
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке("Организация не найдена: " + ИмяНастройкиОрганизация, Параметры);
	КонецЕсли;
	#КонецОбласти
	
	Измерения	=	Метаданные.РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.Измерения;
	
	ТаблицаЗначений	=	Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Группа",			Измерения.Группа.Тип);
	ТаблицаЗначений.Колонки.Добавить("ИмяНастройки",	Измерения.ИмяНастройки.Тип);
	ТаблицаЗначений.Колонки.Добавить("Идентификатор",	Измерения.ИмяНастройки.Тип);
	
	НоваяСтрока	=	ТаблицаЗначений.Добавить();
	НоваяСтрока.Группа			=	ок_ОбщегоНазначенияФинансы21.ПолучитьИмяГруппыНастроекЗагрузкаДанныхИзКристалл();
	НоваяСтрока.ИмяНастройки	=	"Вид оплаты";
	НоваяСтрока.Идентификатор	=	"ВидОплаты";
	
	НоваяСтрока	=	ТаблицаЗначений.Добавить();
	НоваяСтрока.Группа			=	ок_ОбщегоНазначенияФинансы21.ПолучитьИмяГруппыНастроекЗагрузкаДанныхИзУТ();
	НоваяСтрока.ИмяНастройки	=	ПолучитьИмяНастройкиНоменклатураДоставки();
	НоваяСтрока.Идентификатор	=	"Номенклатура";
	
	Запрос			=	Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ТаблицаЗначений.Группа КАК Группа,
	|	ТаблицаЗначений.ИмяНастройки КАК ИмяНастройки,
	|	ТаблицаЗначений.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаЗначений
	|ИЗ
	|	&ТаблицаЗначений КАК ТаблицаЗначений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗначений.Группа КАК Группа,
	|	ТаблицаЗначений.ИмяНастройки КАК ИмяНастройки,
	|	ТаблицаЗначений.Идентификатор КАК Идентификатор,
	|	ЕСТЬNULL(бит_ок_НастройкиМеханизмаИмпортаДанных.Значение, НЕОПРЕДЕЛЕНО) КАК Значение
	|ИЗ
	|	ТаблицаЗначений КАК ТаблицаЗначений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	|		ПО ТаблицаЗначений.Группа = бит_ок_НастройкиМеханизмаИмпортаДанных.Группа
	|			И ТаблицаЗначений.ИмяНастройки = бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки";
	Результат	=	Запрос.Выполнить();
	
	Выборка	=	Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Параметры.Вставить(Выборка.Идентификатор,	Выборка.Значение);
		
		#Область Логирование
		Если Не ЗначениеЗаполнено(Выборка.Значение) Тогда
			ок_ЛогированиеОпераций.ЗаписатьИнформациюОбОшибке("Настройка не заполнена: """ + Выборка.Группа + ": " + Выборка.ИмяНастройки + """", Параметры);
		КонецЕсли;
		#КонецОбласти
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

Процедура УстановитьПризнакЗагрузки(Выборка, ПризнакЗагрузки)
	
	МенеджерЗаписи	=	ВнешниеИсточникиДанных.ок_УТ_ЗагрузкаДанных.Таблицы.dbo_UT_ExportDataTo1C.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка, "ВидОперации, Объект, Дата");
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Если Не МенеджерЗаписи.Загружен	=	ПризнакЗагрузки Тогда 
			МенеджерЗаписи.Загружен	=	ПризнакЗагрузки;	
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИнтеграционнуюТаблицу(Параметры)
	
	ДатаНачала			=	Неопределено;
	ДатаОкончания		=	Неопределено;
	Объект				=	Неопределено;
	ПризнакЗагрузки		=	Неопределено;
	ВидыОпераций		=	Неопределено;
	ИгнорироватьПериод	=	Неопределено;
	
	Параметры.Свойство("ДатаНачала",			ДатаНачала);
	Параметры.Свойство("ДатаОкончания",			ДатаОкончания);
	Параметры.Свойство("Объект",				Объект);
	Параметры.Свойство("ПризнакЗагрузки",		ПризнакЗагрузки);
	Параметры.Свойство("ВидыОпераций",			ВидыОпераций);
	Параметры.Свойство("ИгнорироватьПериод",	ИгнорироватьПериод);
	
	ИспользоватьОтборПоВидамОпераций	=	ЗначениеЗаполнено(ВидыОпераций);
	ИспользоватьОтборПоПризнакуЗагрузки	=	ПризнакЗагрузки = 0 Или ПризнакЗагрузки = 1;
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", 							ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 							ДатаОкончания);
	Запрос.УстановитьПараметр("ИгнорироватьПериод", 					ИгнорироватьПериод);
	Запрос.УстановитьПараметр("ОбъектСтрока", 							ок_ОбщегоНазначенияФинансы21.ПолучитьОтборПоОбъекту(Объект, ПолучитьИсточник()));
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОбъекту",				ЗначениеЗаполнено(Объект));
	Запрос.УстановитьПараметр("ВидыОпераций", 							ВидыОпераций);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидамОпераций",		ИспользоватьОтборПоВидамОпераций);
	Запрос.УстановитьПараметр("ПризнакЗагрузки", 						ПризнакЗагрузки);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоПризнакуЗагрузки",	ИспользоватьОтборПоПризнакуЗагрузки);
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	dbo_UT_ExportDataTo1C.ВидОперации КАК ВидОперации,
	|	dbo_UT_ExportDataTo1C.Дата КАК Дата,
	|	dbo_UT_ExportDataTo1C.Объект КАК Объект,
	|	dbo_UT_ExportDataTo1C.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(dbo_UT_ExportDataTo1C.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(dbo_UT_ExportDataTo1C.СуммаБезнал, 0) КАК СуммаБезнал,
	|	ЕСТЬNULL(dbo_UT_ExportDataTo1C.СуммаНал, 0) КАК СуммаНал,
	|	ЕСТЬNULL(dbo_UT_ExportDataTo1C.СуммаСНДС, 0) КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА dbo_UT_ExportDataTo1C.Загружен = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Загружен,
	|	dbo_UT_ExportDataTo1C.ДатаСоздания КАК ДатаСоздания,
	|	dbo_UT_ExportDataTo1C.ДатаИзменения КАК ДатаИзменения
	|ИЗ
	|	ВнешнийИсточникДанных.ок_УТ_ЗагрузкаДанных.Таблица.dbo_UT_ExportDataTo1C КАК dbo_UT_ExportDataTo1C
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ИспользоватьОтборПоВидамОпераций
	|				ТОГДА dbo_UT_ExportDataTo1C.ВидОперации В (&ВидыОпераций)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ИспользоватьОтборПоПризнакуЗагрузки
	|				ТОГДА dbo_UT_ExportDataTo1C.Загружен = &ПризнакЗагрузки
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ИгнорироватьПериод
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ dbo_UT_ExportDataTo1C.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ИспользоватьОтборПоОбъекту
	|				ТОГДА dbo_UT_ExportDataTo1C.Объект = &ОбъектСтрока
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ВидОперации";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьИсточник()
	Возврат "УТ";	
КонецФункции

Функция ПолучитьИмяНастройкиНоменклатураДоставки()
	Возврат "Номенклатура доставки";	
КонецФункции

Функция Мэппинг(ИнтеграционнаяТаблица, Параметры)
	
	Организация							=	Параметры.Организация;
	
	НесопоставленоНоменклатурнаяГруппа	=	Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	НесопоставленоСтатьяДДС				=	Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	НесопоставленоДоговор				=	Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	НесопоставленоОбъект				=	Справочники.ОбъектыСтроительства.ПустаяСсылка();
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("Группа",	"Служебные элементы Не сопоставлено");
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки КАК ИмяНастройки,
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	|ГДЕ
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа";
	Результат	=	Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка	=	Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ИмяНастройки = "Договоры" Тогда
				НесопоставленоДоговор	=	Выборка.Значение;
			КонецЕсли;
			Если Выборка.ИмяНастройки = "Номенклатурные группы" Тогда
				НесопоставленоНоменклатурнаяГруппа	=	Выборка.Значение;
			КонецЕсли;
			Если Выборка.ИмяНастройки = "Объекты строительства" Тогда
				НесопоставленоОбъект	=	Выборка.Значение;
			КонецЕсли;
			Если Выборка.ИмяНастройки = "Статьи движения денежных средств" Тогда
				НесопоставленоСтатьяДДС	=	Выборка.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата",						ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИнтеграционнаяТаблица",				ИнтеграционнаяТаблица);
	Запрос.УстановитьПараметр("Организация",						Организация);
	Запрос.УстановитьПараметр("Источник",							ПолучитьИсточник());
	
	Запрос.УстановитьПараметр("НесопоставленоДоговор",				НесопоставленоДоговор);
	Запрос.УстановитьПараметр("НесопоставленоНоменклатурнаяГруппа",	НесопоставленоНоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("НесопоставленоОбъект",				НесопоставленоОбъект);
	Запрос.УстановитьПараметр("НесопоставленоСтатьяДДС",			НесопоставленоСтатьяДДС);
	
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ИнтеграционнаяТаблица.ВидОперации КАК ВидОперации,
	|	ИнтеграционнаяТаблица.Дата КАК Дата,
	|	ИнтеграционнаяТаблица.Объект КАК Объект,
	|	ИнтеграционнаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ИнтеграционнаяТаблица.Сумма КАК Сумма,
	|	ИнтеграционнаяТаблица.СуммаБезнал КАК СуммаБезнал,
	|	ИнтеграционнаяТаблица.СуммаНал КАК СуммаНал,
	|	ИнтеграционнаяТаблица.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ИнтеграционнаяТаблица
	|ИЗ
	|	&ИнтеграционнаяТаблица КАК ИнтеграционнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнтеграционнаяТаблица.ВидОперации КАК ВидОперации,
	|	ИнтеграционнаяТаблица.Дата КАК Дата,
	|	ИнтеграционнаяТаблица.Объект КАК Объект,
	|	ИнтеграционнаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ИнтеграционнаяТаблица.Сумма КАК Сумма,
	|	ИнтеграционнаяТаблица.СуммаБезнал КАК СуммаБезнал,
	|	ИнтеграционнаяТаблица.СуммаНал КАК СуммаНал,
	|	ИнтеграционнаяТаблица.СуммаСНДС КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ИнтеграционнаяТаблица.СтавкаНДС = ""20""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|		КОГДА ИнтеграционнаяТаблица.СтавкаНДС = ""10""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|		КОГДА ИнтеграционнаяТаблица.СтавкаНДС = ""0""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДССсылка,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ок_СопоставлениеАналитикиДляИнтеграций_Объект.Аналитика1С, &НесопоставленоОбъект) КАК Справочник.ОбъектыСтроительства)) КАК ОбъектСсылка,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ок_СопоставлениеАналитикиДляИнтеграций_НоменклатурнаяГруппа.Аналитика1С, &НесопоставленоНоменклатурнаяГруппа) КАК Справочник.НоменклатурныеГруппы)) КАК НоменклатурнаяГруппаСсылка,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.Аналитика1С, &НесопоставленоСтатьяДДС) КАК Справочник.СтатьиДвиженияДенежныхСредств)) КАК СтатьяДДССсылка,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ок_СопоставлениеАналитикиДляИнтеграций_Договор.Аналитика1С, &НесопоставленоДоговор) КАК Справочник.ДоговорыКонтрагентов)) КАК ДоговорСсылка,
	|	МАКСИМУМ(""#"" + ИнтеграционнаяТаблица.Объект + "" ("" + ВЫРАЗИТЬ(ЕСТЬNULL(ок_СопоставлениеАналитикиДляИнтеграций_Объект.Аналитика1С, &НесопоставленоОбъект) КАК Справочник.ОбъектыСтроительства).Наименование + ""). "" + ИнтеграционнаяТаблица.ВидОперации + "". Загружен из ИМ (УТ)"") КАК Комментарий
	|ПОМЕСТИТЬ РезультирующаяТаблица
	|ИЗ
	|	ИнтеграционнаяТаблица КАК ИнтеграционнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СопоставлениеАналитикиДляИнтеграций КАК ок_СопоставлениеАналитикиДляИнтеграций_Объект
	|		ПО ИнтеграционнаяТаблица.Объект = ок_СопоставлениеАналитикиДляИнтеграций_Объект.АналитикаИсточника
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Объект.Источник = &Источник)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Объект.Организация = &Организация)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Объект.Тип1С.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОбъектовСистемы.Справочник))
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Объект.Тип1С.ИмяОбъекта = ""ОбъектыСтроительства"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СопоставлениеАналитикиДляИнтеграций КАК ок_СопоставлениеАналитикиДляИнтеграций_НоменклатурнаяГруппа
	|		ПО ИнтеграционнаяТаблица.Объект = ок_СопоставлениеАналитикиДляИнтеграций_НоменклатурнаяГруппа.АналитикаИсточника
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_НоменклатурнаяГруппа.Источник = &Источник)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_НоменклатурнаяГруппа.Организация = &Организация)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_НоменклатурнаяГруппа.Тип1С.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОбъектовСистемы.Справочник))
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_НоменклатурнаяГруппа.Тип1С.ИмяОбъекта = ""НоменклатурныеГруппы"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СопоставлениеАналитикиДляИнтеграций КАК ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС
	|		ПО ИнтеграционнаяТаблица.ВидОперации = ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.АналитикаИсточника
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.Источник = &Источник)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.Организация = &Организация)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.Тип1С.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОбъектовСистемы.Справочник))
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_СтатьяДДС.Тип1С.ИмяОбъекта = ""СтатьиДвиженияДенежныхСредств"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_СопоставлениеАналитикиДляИнтеграций КАК ок_СопоставлениеАналитикиДляИнтеграций_Договор
	|		ПО (ИнтеграционнаяТаблица.ВидОперации + ""_"" + ИнтеграционнаяТаблица.Объект = ок_СопоставлениеАналитикиДляИнтеграций_Договор.АналитикаИсточника)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Договор.Источник = &Источник)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Договор.Организация = &Организация)
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Договор.Тип1С.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОбъектовСистемы.Справочник))
	|			И (ок_СопоставлениеАналитикиДляИнтеграций_Договор.Тип1С.ИмяОбъекта = ""ДоговорыКонтрагентов"")
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнтеграционнаяТаблица.ВидОперации,
	|	ИнтеграционнаяТаблица.Дата,
	|	ИнтеграционнаяТаблица.Объект,
	|	ИнтеграционнаяТаблица.СтавкаНДС,
	|	ИнтеграционнаяТаблица.Сумма,
	|	ИнтеграционнаяТаблица.СуммаБезнал,
	|	ИнтеграционнаяТаблица.СуммаНал,
	|	ИнтеграционнаяТаблица.СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ИнтеграционнаяТаблица.СтавкаНДС = ""20""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|		КОГДА ИнтеграционнаяТаблица.СтавкаНДС = ""10""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|		КОГДА ИнтеграционнаяТаблица.СтавкаНДС = ""0""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультирующаяТаблица.ВидОперации КАК ВидОперации,
	|	РезультирующаяТаблица.Объект КАК Объект,
	|	РезультирующаяТаблица.Дата КАК Дата,
	|	РезультирующаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	РезультирующаяТаблица.Сумма КАК Сумма,
	|	РезультирующаяТаблица.СуммаБезнал КАК СуммаБезнал,
	|	РезультирующаяТаблица.СуммаНал КАК СуммаНал,
	|	РезультирующаяТаблица.СуммаСНДС КАК СуммаСНДС,
	|	РезультирующаяТаблица.Комментарий КАК Комментарий,
	|	&Организация КАК ОрганизацияСсылка,
	|	РезультирующаяТаблица.ДоговорСсылка.Владелец КАК КонтрагентСсылка,
	|	РезультирующаяТаблица.СтавкаНДССсылка КАК СтавкаНДССсылка,
	|	РезультирующаяТаблица.ОбъектСсылка КАК ОбъектСсылка,
	|	РезультирующаяТаблица.НоменклатурнаяГруппаСсылка КАК НоменклатурнаяГруппаСсылка,
	|	РезультирующаяТаблица.СтатьяДДССсылка КАК СтатьяДДССсылка,
	|	РезультирующаяТаблица.ДоговорСсылка КАК ДоговорСсылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПриходныйКассовыйОрдер.Ссылка, ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка))) КАК ПриходныйКассовыйОрдерСсылка,
	|	МАКСИМУМ(ЕСТЬNULL(ОплатаПлатежнойКартой.Ссылка, ЗНАЧЕНИЕ(Документ.ОплатаПлатежнойКартой.ПустаяСсылка))) КАК ОплатаПлатежнойКартойСсылка,
	|	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))) КАК РеализацияТоваровУслугСсылка,
	|	ВЫБОР
	|		КОГДА РезультирующаяТаблица.ОбъектСсылка = &НесопоставленоОбъект
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесопоставленоОбъект,
	|	ВЫБОР
	|		КОГДА РезультирующаяТаблица.НоменклатурнаяГруппаСсылка = &НесопоставленоНоменклатурнаяГруппа
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесопоставленоНоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА РезультирующаяТаблица.СтатьяДДССсылка = &НесопоставленоСтатьяДДС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесопоставленоСтатьяДДС,
	|	ВЫБОР
	|		КОГДА РезультирующаяТаблица.ДоговорСсылка = &НесопоставленоДоговор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесопоставленоДоговор
	|ИЗ
	|	РезультирующаяТаблица КАК РезультирующаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ПО (РезультирующаяТаблица.ВидОперации = ""Оплата товара""
	|				ИЛИ РезультирующаяТаблица.ВидОперации = ""Оплата услуг доставки"")
	|			И (НАЧАЛОПЕРИОДА(РезультирующаяТаблица.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПриходныйКассовыйОрдер.Дата, ДЕНЬ))
	|			И (РезультирующаяТаблица.СуммаНал > 0)
	|			И (ПриходныйКассовыйОрдер.Комментарий ПОДОБНО РезультирующаяТаблица.Комментарий + ""%"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|		ПО (РезультирующаяТаблица.ВидОперации = ""Оплата товара""
	|				ИЛИ РезультирующаяТаблица.ВидОперации = ""Оплата услуг доставки"")
	|			И (НАЧАЛОПЕРИОДА(РезультирующаяТаблица.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ОплатаПлатежнойКартой.Дата, ДЕНЬ))
	|			И (РезультирующаяТаблица.СуммаБезнал > 0)
	|			И (ОплатаПлатежнойКартой.Комментарий ПОДОБНО РезультирующаяТаблица.Комментарий + ""%"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (РезультирующаяТаблица.ВидОперации = ""Реализация услуг доставки"")
	|			И (НАЧАЛОПЕРИОДА(РезультирующаяТаблица.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ))
	|			И (РезультирующаяТаблица.Сумма > 0)
	|			И (РеализацияТоваровУслуг.Комментарий ПОДОБНО РезультирующаяТаблица.Комментарий + ""%"")
	|
	|СГРУППИРОВАТЬ ПО
	|	РезультирующаяТаблица.ВидОперации,
	|	РезультирующаяТаблица.Дата,
	|	РезультирующаяТаблица.Объект,
	|	РезультирующаяТаблица.СтавкаНДС,
	|	РезультирующаяТаблица.Сумма,
	|	РезультирующаяТаблица.СуммаБезнал,
	|	РезультирующаяТаблица.СуммаНал,
	|	РезультирующаяТаблица.СуммаСНДС,
	|	РезультирующаяТаблица.СтавкаНДССсылка,
	|	РезультирующаяТаблица.ОбъектСсылка,
	|	РезультирующаяТаблица.НоменклатурнаяГруппаСсылка,
	|	РезультирующаяТаблица.СтатьяДДССсылка,
	|	РезультирующаяТаблица.ДоговорСсылка,
	|	РезультирующаяТаблица.ДоговорСсылка.Владелец,
	|	РезультирующаяТаблица.Комментарий,
	|	ВЫБОР
	|		КОГДА РезультирующаяТаблица.ОбъектСсылка = &НесопоставленоОбъект
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РезультирующаяТаблица.НоменклатурнаяГруппаСсылка = &НесопоставленоНоменклатурнаяГруппа
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РезультирующаяТаблица.СтатьяДДССсылка = &НесопоставленоСтатьяДДС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РезультирующаяТаблица.ДоговорСсылка = &НесопоставленоДоговор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти