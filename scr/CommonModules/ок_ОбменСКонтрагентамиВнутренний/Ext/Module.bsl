//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103

Функция ПустыеПараметрыОбменаЭДО()
	
	ок_ПараметрыОбменаЭДО = Новый Структура("Сбис_ИдентификаторСессии, Сбис_ИдентификаторСессииДата, Сбис_ПолнаяВерсияПродукта");
	ок_ПараметрыОбменаЭДО.Сбис_ИдентификаторСессии = "";
	ок_ПараметрыОбменаЭДО.Сбис_ИдентификаторСессииДата = '00010101';
	Информация = Новый СистемнаяИнформация;
	ок_ПараметрыОбменаЭДО.Сбис_ПолнаяВерсияПродукта = "1C" + Информация.ВерсияПриложения + "_VO2.0.32";
	
	Возврат ок_ПараметрыОбменаЭДО;
		
КонецФункции	

Процедура УстановитьПараметрыСеанса() Экспорт
	
	//ок_ПараметрыОбменаЭДО = Новый Структура("Сбис_ИдентификаторСессии, Сбис_ИдентификаторСессииДата, Сбис_ПолнаяВерсияПродукта");
	//ок_ПараметрыОбменаЭДО.Сбис_ИдентификаторСессии = "";
	//ок_ПараметрыОбменаЭДО.Сбис_ИдентификаторСессииДата = '00010101';
	//Информация = Новый СистемнаяИнформация;
	//ок_ПараметрыОбменаЭДО.Сбис_ПолнаяВерсияПродукта = "1C" + Информация.ВерсияПриложения + "_VO2.0.32";
	//ПараметрыСеанса.ок_ПараметрыОбменаЭДО = Новый ХранилищеЗначения(ок_ПараметрыОбменаЭДО);
	Параметры = Новый Соответствие;
	//Параметры.Вставить(Неопределено, ПустыеПараметрыОбменаЭДО());
	УстановитьПривилегированныйРежим(Истина);	
	ПараметрыСеанса.ок_ПараметрыОбменаЭДО = Новый ХранилищеЗначения(Параметры);
		
КонецПроцедуры

Функция ПараметрыОбменаЭДО(ПрофильНастроекЭДО)
	
	УстановитьПривилегированныйРежим(Истина);	
	//Возврат ПараметрыСеанса.ок_ПараметрыОбменаЭДО.Получить();
	Параметры = ПараметрыСеанса.ок_ПараметрыОбменаЭДО.Получить();
	Данные = Параметры.Получить(ПрофильНастроекЭДО);
	Если Данные = Неопределено Тогда
		Данные = ПустыеПараметрыОбменаЭДО();		
		Параметры.Вставить(ПрофильНастроекЭДО, Данные);
		ПараметрыСеанса.ок_ПараметрыОбменаЭДО = Новый ХранилищеЗначения(Параметры);
	КонецЕсли;	
	
	Возврат Данные;
	
КонецФункции	

Функция ПолучитьСоединение(СпособОбменаЭД, Параметры) Экспорт
	
	Если Параметры = Неопределено Тогда
		ВызватьИсключение "Место которое ищем";
	КонецЕсли;	

	Адрес = "";
	ЗащищенноеСоединение = Ложь;
	Протокол = "";
	
	НастройкиСервисаЭДО = СтруктураНастроек(СпособОбменаЭД, Параметры);
	
	ЭлектронноеВзаимодействиеСлужебный.ОпределитьПараметрыСайта(
		НастройкиСервисаЭДО.АдресВебСервиса, ЗащищенноеСоединение, Адрес, Протокол);
	//Прокси = ЭлектронноеВзаимодействиеСлужебный.СформироватьПрокси(Протокол);
	Прокси = Новый ИнтернетПрокси(Ложь); //в ОК через указанную в настройках проксю пакеты не проходят 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-28 (#3696)
	//Таймаут = 30;
	Таймаут = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЭДО", "Таймаут соединения");
	Если Не ЗначениеЗаполнено(Таймаут) ИЛИ ТипЗнч(Таймаут) <> Тип("Число") Тогда
		Таймаут = 30;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-28 (#3696)
	//ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL( , СертификатыУдостоверяющихЦентров);
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(); //в ОК на сервере заработало только так...
	Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

Функция СтруктураНастроек(СпособОбменаЭД, Параметры) Экспорт
	
	СтруктураНастроек = Новый Структура;
	Если СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		СтруктураНастроек.Вставить("АдресВебСервиса", "https://online.sbis.ru");
		Если Параметры <> Неопределено И Параметры.Свойство("АдресСервера") И ЗначениеЗаполнено(Параметры.АдресСервера) Тогда
			СтруктураНастроек.Вставить("АдресВебСервиса", Параметры.АдресСервера);
		КонецЕсли;	
	//ИначеЕсли СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОДиадок Тогда
	//	СтруктураНастроек.Вставить("АдресВебСервиса", "https://....");
	КонецЕсли;

	Возврат СтруктураНастроек;
	
КонецФункции

Функция ТестПодключения(ПараметрыЭДО, Ответ = "") Экспорт
	
	Результат = Ложь;
	Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		Соединение = ПолучитьСоединение(ПараметрыЭДО.СпособОбменаЭД, ПараметрыЭДО);
		Результат = сбисАвторизоваться(Соединение, ПараметрыЭДО);
		Если Результат Тогда
			Ответ = "Идентификатор сессии: " + ПараметрыОбменаЭДО(ПараметрыЭДО.Ссылка).Сбис_ИдентификаторСессии;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьИдентификаторУчастникаОбмена(ПараметрыЭДО, Параметры, Ответ = "") Экспорт
	
	Результат = Ложь;
	Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		Соединение = ПолучитьСоединение(ПараметрыЭДО.СпособОбменаЭД, ПараметрыЭДО);
		Результат = сбисПолучитьИдентификаторУчастникаОбмена(Соединение, ПараметрыЭДО, Параметры, Ответ);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЧерезОператораЭДО(Знач АдресРесурса, ДатаПоследнегоЗапроса, Маркер, ПараметрыЭДО) Экспорт
	
	//пока это только получние приглашений, не делаем
	Возврат Неопределено;
	
	//Соединение = ПолучитьСоединение(ПараметрыЭДО.СпособОбменаЭД, ПараметрыЭДО);
	//Маркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Маркер);
	//
	////АдресРесурса = АдресРесурса + ?(ЗначениеЗаполнено(ДатаПоследнегоЗапроса), "?date=" + ДатаПоследнегоЗапроса, "");
	//
	//СписокЭД_XML = ПолучитьЭлектронныеДокументыОператораЭДО(Маркер, Соединение, АдресРесурса, , ПараметрыЭДО, ДатаПоследнегоЗапроса);
	//
	//Возврат СписокЭД_XML;
	
КонецФункции

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
//Функция ПроверитьДействиеНастройкиЭДО(НастройкаЭДО, Период = Неопределено) Экспорт 
Функция ПроверитьДействиеНастройкиЭДО(НастройкаЭДО, Параметры = Неопределено) 
	
	ВременнаяСтруктура = Новый Структура("Дата, Направление", Неопределено, ""); 
	Если Параметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Параметры);
	КонецЕсли;	
	Период = ВременнаяСтруктура.Дата;
	Направление = ВременнаяСтруктура.Направление;
	
	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3337)

	Если Период = '00010101' Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-10-02 (#3337)
	
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
	//	|	СоглашенияОбИспользованииЭД.ок_ОграничениеПотока КАК ок_ОграничениеПотока
	//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3337)
	//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-12 (#3337)
	//	//|	СоглашенияОбИспользованииЭД.ок_ДатаНачала КАК ок_ДатаНачала
	//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-12 (#3337)
	//	|ИЗ
	//	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	//	|ГДЕ
	//	|	СоглашенияОбИспользованииЭД.Ссылка = &Ссылка
	//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-12 (#3337)
	//	//|	И СоглашенияОбИспользованииЭД.ок_ДатаНачала <= &Период
	//	|	И ВЫБОР
	//	|		КОГДА СоглашенияОбИспользованииЭД.ок_ОграничениеПотока = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	//	|			ТОГДА СоглашенияОбИспользованииЭД.ок_ДатаНачалаВходящий
	//	|		КОГДА СоглашенияОбИспользованииЭД.ок_ОграничениеПотока = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	//	|			ТОГДА СоглашенияОбИспользованииЭД.ок_ДатаНачалаИсходящий
	//	|		ИНАЧЕ СоглашенияОбИспользованииЭД.ок_ДатаНачала 
	//	|	КОНЕЦ <= &Период
	//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-12 (#3337)
	//    |";
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Данные.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Справочник.СоглашенияОбИспользованииЭД.ок_ПериодыДействияВходящие КАК Данные
	//	|ГДЕ
	//	|	Данные.Ссылка = &Ссылка
	//	|	И Данные.ДатаНачала <= &Период
	//	|	И (КОНЕЦПЕРИОДА(Данные.ДатаОкончания, ДЕНЬ) >= &Период
	//	|			ИЛИ Данные.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	//	|	И &Направление = ""входящий""
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	Данные.Ссылка
	//	|ИЗ
	//	|	Справочник.СоглашенияОбИспользованииЭД.ок_ПериодыДействияИсходящие КАК Данные
	//	|ГДЕ
	//	|	Данные.Ссылка = &Ссылка
	//	|	И Данные.ДатаНачала <= &Период
	//	|	И (КОНЕЦПЕРИОДА(Данные.ДатаОкончания, ДЕНЬ) >= &Период
	//	|			ИЛИ Данные.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	//	|	И &Направление = ""исходящий""";
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ок_ПериодыДействияСоглашений.Отправитель КАК ИдентификаторОтправителя
	               |ИЗ
	               |	РегистрСведений.ок_ПериодыДействияСоглашений КАК ок_ПериодыДействияСоглашений
				   //ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-29 (#3879)
	               //|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументов
	               //|		ПО ок_ПериодыДействияСоглашений.Отправитель = НастройкиОтправкиЭлектронныхДокументов.Отправитель
	               //|			И ок_ПериодыДействияСоглашений.Получатель = НастройкиОтправкиЭлектронныхДокументов.Получатель
	               //|			И ок_ПериодыДействияСоглашений.Договор = НастройкиОтправкиЭлектронныхДокументов.Договор
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
				   |		ПО ок_ПериодыДействияСоглашений.Отправитель = НастройкиПолученияЭлектронныхДокументов.Получатель
				   |			И ок_ПериодыДействияСоглашений.Получатель = НастройкиПолученияЭлектронныхДокументов.Отправитель
				   |			И ок_ПериодыДействияСоглашений.ИдентификаторОтправителя = НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
				   |			И ок_ПериодыДействияСоглашений.ИдентификаторПолучателя = НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя
				   //ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-29 (#3879)
	               |ГДЕ
				   //ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-10-01 (#3879)
	               //|	НастройкиОтправкиЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
	               //|	И НастройкиОтправкиЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
	               |	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
	               |	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
				   //ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-10-01 (#3879)
	               |	И ок_ПериодыДействияСоглашений.ДатаНачала <= &Период
	               |	И (КОНЕЦПЕРИОДА(ок_ПериодыДействияСоглашений.ДатаОкончания, ДЕНЬ) >= &Период
	               |			ИЛИ ок_ПериодыДействияСоглашений.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	               |	И &Направление = ""входящий""
	               |	И ок_ПериодыДействияСоглашений.Входящий
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ок_ПериодыДействияСоглашений.Отправитель
	               |ИЗ
	               |	РегистрСведений.ок_ПериодыДействияСоглашений КАК ок_ПериодыДействияСоглашений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументов
	               |		ПО ок_ПериодыДействияСоглашений.Отправитель = НастройкиОтправкиЭлектронныхДокументов.Отправитель
	               |			И ок_ПериодыДействияСоглашений.Получатель = НастройкиОтправкиЭлектронныхДокументов.Получатель
	               |			И ок_ПериодыДействияСоглашений.Договор = НастройкиОтправкиЭлектронныхДокументов.Договор
				   //ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-29 (#3879)
				    |			И ок_ПериодыДействияСоглашений.ИдентификаторОтправителя = НастройкиОтправкиЭлектронныхДокументов.ИдентификаторОтправителя
					|			И ок_ПериодыДействияСоглашений.ИдентификаторПолучателя = НастройкиОтправкиЭлектронныхДокументов.ИдентификаторПолучателя
				   //ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-29 (#3879)
	               |ГДЕ
	               |	НастройкиОтправкиЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
	               |	И НастройкиОтправкиЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
	               |	И ок_ПериодыДействияСоглашений.ДатаНачала <= &Период
	               |	И (КОНЕЦПЕРИОДА(ок_ПериодыДействияСоглашений.ДатаОкончания, ДЕНЬ) >= &Период
	               |			ИЛИ ок_ПериодыДействияСоглашений.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	               |	И &Направление = ""исходящий""
	               |	И НЕ ок_ПериодыДействияСоглашений.Входящий";
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
		
	Запрос.УстановитьПараметр("Направление", НРег(Направление));
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-10-02 (#3337)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//Запрос.УстановитьПараметр("Ссылка", НастройкаЭДО);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", НастройкаЭДО.Отправитель);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", НастройкаЭДО.Получатель);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено, ТекущаяДатаСеанса(), Период));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-10-02 (#3337)
	
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
	////Возврат Не РезультатЗапроса.Пустой();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.ок_ОграничениеПотока = Перечисления.НаправленияЭД.Входящий Тогда
	//		Если НРег(Направление) = "входящий" Тогда
	//			Возврат Истина;
	//		КонецЕсли;	
	//	ИначеЕсли Выборка.ок_ОграничениеПотока = Перечисления.НаправленияЭД.Исходящий Тогда
	//		Если НРег(Направление) = "исходящий" Тогда
	//			Возврат Истина;
	//		КонецЕсли;	
	//	Иначе
	//		Возврат Истина;
	//	КонецЕсли;	
	//КонецЦикла;	
	
	Возврат Не РезультатЗапроса.Пустой();
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-10-02 (#3337)
	
	
	Возврат Ложь;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3337)
	
КонецФункции	

Процедура ВывестиПодписиВТабличныйДокумент(ТабличныйДокумент, ПараметрыПечати) Экспорт
	
	Если Не ПараметрыПечати.Свойство("СтруктураПодписей") Тогда
		Возврат;
	ИначеЕсли Не ТипЗнч(ПараметрыПечати.СтруктураПодписей) = Тип("Структура") Тогда
		Возврат;
	ИначеЕсли Не ПараметрыПечати.СтруктураПодписей.Свойство("Подписи") Тогда
		Возврат;
	ИначеЕсли Не ТипЗнч(ПараметрыПечати.СтруктураПодписей.Подписи) = Тип("Массив") Тогда
		Возврат;
	ИначеЕсли ПараметрыПечати.СтруктураПодписей.Подписи.Количество() = 0 Тогда
		Возврат;
	Конецесли;	
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ок_Информация");
	ОбластьПодпись = Макет.ПолучитьОбласть("Подпись");
	НовыйТабличныйДокумент = Новый ТабличныйДокумент;
	Для каждого СтрокаПодписи Из ПараметрыПечати.СтруктураПодписей.Подписи Цикл
		ЗаполнитьЗначенияСвойств(ОбластьПодпись.Параметры, СтрокаПодписи);
		ОтпечатокПредставление = "";
		Если Не ПустаяСтрока(СтрокаПодписи.Отпечаток) Тогда
			ОтпечатокПредставление = СтрЗаменить(Строка(Base64Значение(СтрокаПодписи.Отпечаток)), " ", "");
		КонецЕсли;
		ОбластьПодпись.Параметры.ОтпечатокПредставление = ОтпечатокПредставление;
		ПодписьПредставление = "";
		Если ТипЗнч(СтрокаПодписи.Подпись) = Тип("ДвоичныеДанные") Тогда
			ПодписьПредставление = Лев(СтрЗаменить(Строка(СтрокаПодписи.Подпись), " ", ""), 256) +"...";
		КонецЕсли;
		ОбластьПодпись.Параметры.ПодписьПредставление = ПодписьПредставление;
		НовыйТабличныйДокумент.Вывести(ОбластьПодпись);
	КонецЦикла;
	
	ОбластьЯчеек = НовыйТабличныйДокумент.Область(1, 1, НовыйТабличныйДокумент.ВысотаТаблицы, НовыйТабличныйДокумент.ШиринаТаблицы);
	ОбластьЯчеек.СоздатьФорматСтрок();
	ТабличныйДокумент.Вывести(НовыйТабличныйДокумент);
	
	//НачалоНовогоФорматаСтрок = НовыйТабличныйДокумент.ВысотаТаблицы + 1;
	//ОбластьПрямоугольная = НовыйТабличныйДокумент.Область(1, , НовыйТабличныйДокумент.ВысотаТаблицы, );
	//ТабличныйДокумент.ВставитьОбласть(НовыйТабличныйДокумент.Область(1, , НовыйТабличныйДокумент.ВысотаТаблицы, ), ТДПриемник.Область(НачалоНовогоФорматаСтрок, 1));
	//ТабличныйДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + Отчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
	//// назначим ширину колонок у новой области формата строк

	//Для Счетчик = 1 По Отчет.ШиринаТаблицы Цикл
	//    ТДПриемник.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = Отчет.Область(1, Счетчик).ШиринаКолонки;
	//КонецЦикла;
	
КонецПроцедуры

Функция HTMLПредставлениеФайлаЭД(Файл, Расширение) Экспорт
	
	Если НРег(Расширение) = "pdf" Тогда
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(Файл);
		Возврат "<html><body><EMBED id='PDF' width=100% height=100% type=""application/pdf"" src=""" + ДанныеФайла.НавигационнаяСсылкаТекущейВерсии + """></EMBED></body></html>";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции	

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-26 (#3336)
Функция ЗаписатьЛогФайл(ИмяФайла, Содержание)
	
	Попытка
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(Содержание);
		ТекстовыйДокумент.Записать(ИмяФайла);
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-26 (#3336)

//Функция ВидыЭДООтражаемыеВУчете() Экспорт
//	
//	Данные = Новый Массив;
//	Данные.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
//	Данные.Добавить(Перечисления.ВидыЭД.СчетФактура);
//	Данные.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
//	
//	Возврат Данные;
//	
//КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// API СБИС

Функция сбисОтправитьИОбработатьКоманду(Соединение, Параметры, ПараметрыЭДО) Экспорт
	
	Если ПустаяСтрока(Параметры.ПараметрыАдресации.АдресРесурса) Тогда
		Возврат Неопределено;
	ИначеЕсли ПустаяСтрока(Параметры.ПараметрыАдресации.Метод) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если Не Параметры.БезПроверкиАутентификации И (ПустаяСтрока(ПараметрыОбменаЭДО(ПараметрыЭДО.Ссылка).Сбис_ИдентификаторСессии) ИЛИ ПараметрыОбменаЭДО(ПараметрыЭДО.Ссылка).Сбис_ИдентификаторСессииДата + 60 * 60 * 1 < ТекущаяДатаСеанса()) Тогда
		Если Не сбисАвторизоваться(Соединение, ПараметрыЭДО) Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-26 (#3336)
	КаталогЛогирования = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Тестирование", "КаталогЛогированияИсходящихЗапросовЭДО");
	Если Не ЗначениеЗаполнено(КаталогЛогирования) ИЛИ ТипЗнч(КаталогЛогирования) <> Тип("Строка") Тогда
		КаталогЛогирования = "";
	Иначе
		КаталогЛогирования = СокрП(КаталогЛогирования);
		Если Прав(КаталогЛогирования, 1) <> "\" Тогда
			КаталогЛогирования = КаталогЛогирования + "\";
		КонецЕсли;	
		ПроверяемыйКаталог = Новый Файл(КаталогЛогирования);
		Если Не ПроверяемыйКаталог.Существует() Тогда
			КаталогЛогирования = "";
		КонецЕсли;	
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-20 (#4056)
	ИмяФайлаПолучаемого = "";
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-20 (#4056) 
	ИмяФайла = ""; 
	ТекстЛога = "";
	Если Не ПустаяСтрока(КаталогЛогирования) Тогда
		ВременнаяМетка = Формат(ТекущаяДата(), "ДФ=yyyyMMdd_hhmmss");
		ИмяФайла = КаталогЛогирования + ВременнаяМетка + "_" + Строка(Новый УникальныйИдентификатор) + "_" + СтрЗаменить(Параметры.ПараметрыАдресации.Метод, "СБИС.", "") + ".log";
		ТекстЛога = "Метка времени:" + ВременнаяМетка + Символы.ПС 
						+ "Адрес ресурса:" + Параметры.ПараметрыАдресации.АдресРесурса + Символы.ПС 
						+ "Метод:" + Параметры.ПараметрыАдресации.Метод;
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-26 (#3336)
	
	HTTPЗапрос = Новый HTTPЗапрос(Параметры.ПараметрыАдресации.АдресРесурса);
	Если Не Параметры.Get Тогда
		ТекстЗапроса = сбисСформироватьТекстЗапроса(Параметры.ПараметрыАдресации.Метод, Параметры.ПараметрыЗапроса);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса, "UTF-8", ИспользованиеByteOrderMark.Авто);
	КонецЕсли;	
	
	Если Параметры.Свойство("Заголовки") И ЗначениеЗаполнено(Параметры.Заголовки) Тогда
		HTTPЗапрос.Заголовки = Параметры.Заголовки;
	Иначе	
		HTTPЗапрос.Заголовки = сбисСформироватьЗаголовки(ПараметрыЭДО);
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-26 (#3336)
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		ТекстЛога = ТекстЛога + Символы.ПС + "X-SBISSessionID:" + HTTPЗапрос.Заголовки.Получить("X-SBISSessionID");
		ТекстЛога = ТекстЛога + Символы.ПС + "Content-Type:" + HTTPЗапрос.Заголовки.Получить("Content-Type");
		ТекстЛога = ТекстЛога + Символы.ПС + "User-Agent:" + HTTPЗапрос.Заголовки.Получить("User-Agent");
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-26 (#3336)
	
	НеОповещатьПользователяОбОшибке = Ложь;
	Если Параметры.Свойство("НеОповещатьПользователяОбОшибке") Тогда
		НеОповещатьПользователяОбОшибке = Параметры.НеОповещатьПользователяОбОшибке;
	КонецЕсли;
	
	Попытка
		Если Параметры.Get Тогда
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-20 (#4056)
			//ИмяФайла = Параметры.ИмяФайла;
			ИмяФайлаПолучаемого = Параметры.ИмяФайла;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-20 (#4056) 
			Если ПустаяСтрока(ИмяФайла) Тогда
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-20 (#4056)
				//ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
				ИмяФайлаПолучаемого = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-20 (#4056) 
			КонецЕсли;	
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-26 (#3336)			
			Если Не ПустаяСтрока(ИмяФайла) Тогда
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-20 (#4056) 
				//ТекстЛога = ТекстЛога + Символы.ПС + "Адрес запрашиваемого файла:" + Символы.ПС + ИмяФайла;
				ТекстЛога = ТекстЛога + Символы.ПС + "Адрес запрашиваемого файла:" + Символы.ПС + ИмяФайлаПолучаемого;
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-20 (#4056) 
				ЗаписатьЛогФайл(ИмяФайла, ТекстЛога);
			КонецЕсли;	
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-26 (#3336)
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-20 (#4056) 
			//Соединение.Получить(HTTPЗапрос, ИмяФайла);
			Соединение.Получить(HTTPЗапрос, ИмяФайлаПолучаемого);
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-20 (#4056) 
		Иначе	
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-26 (#3336)
			Если Не ПустаяСтрока(ИмяФайла) Тогда
				ТекстЛога = ТекстЛога + Символы.ПС + "Тело запроса:" + Символы.ПС + ТекстЗапроса + Символы.ПС + "#####";
				ЗаписатьЛогФайл(ИмяФайла, ТекстЛога);
			КонецЕсли;	
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-26 (#3336)
			Данные = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли;	
	Исключение
		Если Параметры.Get Тогда
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-20 (#4056) 
			//ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
			//ИмяФайла = Неопределено;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаПолучаемого);
			ИмяФайлаПолучаемого = Неопределено;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-20 (#4056) 
		КонецЕсли;	
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка получения результата запроса на сервере оператора ЭДО.'");
		Если НеОповещатьПользователяОбОшибке Тогда
			ТекстОшибки = ТекстОшибки + "; " + ТекстСообщения;
			ТекстСообщения = "";
		КонецЕсли;	
		Операция = Параметры.ПараметрыАдресации.Метод + "/" + Параметры.ПараметрыАдресации.АдресРесурса;
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-26 (#3336)
		Если Не ПустаяСтрока(ИмяФайла) Тогда
			ТекстЛога = ТекстЛога + Символы.ПС + "Ошибка отправки:" + Символы.ПС + ТекстСообщения + Символы.ПС + ТекстОшибки;
			ЗаписатьЛогФайл(ИмяФайла, ТекстЛога);
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-26 (#3336)
		Возврат Неопределено;
	КонецПопытки;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-20 (#4056) 
	//Если Параметры.Get И ИмяФайла <> Неопределено Тогда
	//	Файл = Новый Файл(ИмяФайла);
	//	Если Не Файл.Существует() Тогда
	//		Возврат Неопределено;
	//	КонецЕсли;
	//	Возврат ИмяФайла;
	//КонецЕсли;
	Если Параметры.Get И ИмяФайлаПолучаемого <> Неопределено Тогда
		Файл = Новый Файл(ИмяФайлаПолучаемого);
		Если Не Файл.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат ИмяФайлаПолучаемого;
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-20 (#4056) 
	
	СтруктураРезультата = Неопределено;
	Попытка
		СтруктураРезультата = ок_Сбис_РаботаСJSON.сбисПрочитатьJSON(Данные.ПолучитьТелоКакСтроку(),,, Истина);
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message + ?(СтруктураРезультата.error.details <> СтруктураРезультата.error.message, " " + СтруктураРезультата.error.details, ""); 
				ТекстСообщения = НСтр("ru = 'Сервер оператора ЭДО вернул ошибку.'");
				//Если СокрЛП(СтруктураРезультата.error.details) = "Событие обрабатывается другим процессом" Тогда //не критичная ошибка, не выводим оповещение, только в ЖР
				//	ТекстСообщения = "";
				//КонецЕсли;	
				Если НеОповещатьПользователяОбОшибке Тогда
					ТекстОшибки = ТекстОшибки + "; " + ТекстСообщения;
					ТекстСообщения = "";
				КонецЕсли;	
				Операция = Параметры.ПараметрыАдресации.Метод + "/" + Параметры.ПараметрыАдресации.АдресРесурса;
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
				//
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-26 (#3336)
				Если Не ПустаяСтрока(ИмяФайла) Тогда
					ТекстЛога = ТекстЛога + Символы.ПС + "Ответ сервиса ЭДО об ошибке:" + Символы.ПС + ТекстСообщения + Символы.ПС + ТекстОшибки;
					ЗаписатьЛогФайл(ИмяФайла, ТекстЛога);
				КонецЕсли;	
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-26 (#3336)
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка разбора ответа от сервера оператора ЭДО.'");
		Операция = Параметры.ПараметрыАдресации.Метод + "/" + Параметры.ПараметрыАдресации.АдресРесурса;
		Если НеОповещатьПользователяОбОшибке Тогда
			ТекстОшибки = ТекстОшибки + "; " + ТекстСообщения;
			ТекстСообщения = "";
		КонецЕсли;	
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-26 (#3336)
		Если Не ПустаяСтрока(ИмяФайла) Тогда
			ТекстЛога = ТекстЛога + Символы.ПС + "Ошибка разбора ответа:" + Символы.ПС + ТекстСообщения + Символы.ПС + ТекстОшибки;
			ЗаписатьЛогФайл(ИмяФайла, ТекстЛога);
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-26 (#3336)
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция сбисСформироватьТекстЗапроса(Метод, СтруктураПараметровЗапроса)
	ТекстЗапроса = "{""jsonrpc"":""2.0"",""method"":"""+Метод+""",""params"":{";
	ТекстЗапроса = ТекстЗапроса+сбисЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса);
	ТекстЗапроса = ТекстЗапроса+"},""id"":1}";	
	Возврат ТекстЗапроса;	
КонецФункции

Функция сбисЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса)
	ТекстЗапроса = "";
	Для Каждого Элемент Из СтруктураПараметровЗапроса Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+СтрЗаменить(Элемент.Значение, """", "\""")+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Неопределено") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":{"+сбисЗаписатьПараметрыЗапроса(Элемент.Значение)+"},";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":[";
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ТекстЗапроса = ТекстЗапроса+"{";
				ТекстЗапроса = ТекстЗапроса+сбисЗаписатьПараметрыЗапроса(ЭлементМассива);
				ТекстЗапроса = ТекстЗапроса+"},";
			КонецЦикла;
			Если Прав(ТекстЗапроса, 1) = "," Тогда
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
			КонецЕсли;
 			ТекстЗапроса = ТекстЗапроса+"],";
		КонецЕсли;
	КонецЦикла;
	Если Прав(ТекстЗапроса, 1) = "," Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
	КонецЕсли;
	Возврат ТекстЗапроса 	
КонецФункции

Функция сбисСформироватьЗаголовки(ПараметрыЭДО, БезИдентификатора = Ложь)
	Заголовки = Новый Соответствие;
	Если Не БезИдентификатора Тогда
		Заголовки.Вставить("X-SBISSessionID", ПараметрыОбменаЭДО(ПараметрыЭДО.Ссылка).Сбис_ИдентификаторСессии);
	КонецЕсли;	
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("User-Agent", ПараметрыОбменаЭДО(ПараметрыЭДО.Ссылка).Сбис_ПолнаяВерсияПродукта);
	Возврат Заголовки;
КонецФункции

Функция сбисПараметрыИнтеграции(АдресРесурса, СтруктураПараметров, ПараметрыКоманды = Неопределено) Экспорт
	
	ПараметрыИнтеграции = Новый Структура;
	//Если СтруктураПараметров.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		
		ПараметрыИнтеграции.Вставить("Get", Ложь);
		ПараметрыИнтеграции.Вставить("БезПроверкиАутентификации", Ложь);
		
		//известные возможные адреса ресурса: "/service/?srv=1", "/auth/service/" 
		ПараметрыАдресации = Новый Структура("АдресРесурса, Метод", "/service/?srv=1", "");
		Если Лев(АдресРесурса, 21) = "GetContactListUpdates" Тогда
			//ПараметрыАдресации.Метод = "";
		ИначеЕсли АдресРесурса = "GetFileOnURL" Тогда
			ПараметрыАдресации.Метод = "Get";
			ПараметрыИнтеграции.Вставить("Get", Истина);
		ИначеЕсли АдресРесурса = "GetMessage" Тогда
			ПараметрыАдресации.Метод = "СБИС.ПрочитатьДокумент";
		ИначеЕсли Лев(АдресРесурса, 14) = "GetMessageList" Тогда
			//ПараметрыАдресации.Метод = "СБИС.СписокДокументовПоСобытиям";
			//ПараметрыИнтеграции.Вставить("ПараметрыЗапроса", Новый Структура("Фильтр", сбисПолучитьФильтр(Новый Структура("ТипРеестра", "Входящие"))));
			ПараметрыАдресации.Метод = "СБИС.СписокИзменений";
		ИначеЕсли Лев(АдресРесурса, 14) = "Authentificate" Тогда
			ПараметрыАдресации.АдресРесурса = "/auth/service/";
			ПараметрыАдресации.Метод = "СБИС.Аутентифицировать";
		ИначеЕсли АдресРесурса = "GetSertificates" Тогда
			ПараметрыАдресации.Метод = "СБИС.СписокСертификатов";
			ПараметрыИнтеграции.Вставить("ПараметрыЗапроса", Новый Структура("Фильтр", Новый Структура));
		ИначеЕсли АдресРесурса = "ListServiceStages" Тогда
			ПараметрыАдресации.Метод = "СБИС.СписокСлужебныхЭтапов";
		ИначеЕсли АдресРесурса = "InfoServiceStages" Тогда
			ПараметрыАдресации.Метод = "СБИС.ИнформацияОСлужебныхЭтапах";
		ИначеЕсли АдресРесурса = "PrepareAction" Тогда
			ПараметрыАдресации.Метод = "СБИС.ПодготовитьДействие";
		ИначеЕсли АдресРесурса = "ExecuteAction" Тогда
			ПараметрыАдресации.Метод = "СБИС.ВыполнитьДействие";
		ИначеЕсли АдресРесурса = "SubjectInfo" Тогда
			ПараметрыАдресации.Метод = "СБИС.ИнформацияОКонтрагенте";
		ИначеЕсли АдресРесурса = "SendMessage" Тогда
			ПараметрыАдресации.Метод = "СБИС.ЗаписатьДокумент";
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-07 (#3821)
		ИначеЕсли АдресРесурса = "GetPartnerMessageList" Тогда
			ПараметрыАдресации.Метод = "СБИС.СписокДокументовПоСобытиям";
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-07 (#3821)
		КонецЕсли;	
		
		Если ПараметрыКоманды <> Неопределено Тогда
			Для каждого Параметр из ПараметрыКоманды Цикл
				Если ПараметрыИнтеграции.Get И Параметр.Ключ = "URL" Тогда
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-24 (#4056) 
					//ПараметрыАдресации.АдресРесурса = СтрЗаменить(СтрЗаменить(Параметр.Значение,"https://online.sbis.ru",""),"https://fix-online.sbis.ru","");
					ПараметрыАдресации.АдресРесурса = Параметр.Значение;
					СписокДоменовСБИС = ок_ОбщегоНазначенияСерверПовтИсп.ПолучитьСписокДоменовСБИС();
					Если СписокДоменовСБИС = Неопределено Тогда
						ПараметрыАдресации.АдресРесурса = СтрЗаменить(ПараметрыАдресации.АдресРесурса,"https://online.sbis.ru","");
						ПараметрыАдресации.АдресРесурса = СтрЗаменить(ПараметрыАдресации.АдресРесурса,"https://fix-online.sbis.ru","");
						ПараметрыАдресации.АдресРесурса = СтрЗаменить(ПараметрыАдресации.АдресРесурса,"https://fix-disk.sbis.ru","");
						ПараметрыАдресации.АдресРесурса = СтрЗаменить(ПараметрыАдресации.АдресРесурса,"https://disk.sbis.ru","");
					Иначе
						
						ДоменНайден = Ложь;
						Для каждого ДоменСБИС Из СписокДоменовСБИС Цикл
							
							НачальнаяПозиция = Найти(Параметр.Значение, ДоменСБИС);		
							Если НачальнаяПозиция > 0 Тогда
								ДоменНайден = Истина;
								ПараметрыАдресации.АдресРесурса = Сред(Параметр.Значение,НачальнаяПозиция + СтрДлина(ДоменСБИС));
						    	Прервать;
							КонецЕсли;
							
						КонецЦикла; 
						
						Если Не ДоменНайден Тогда
							ЗаписьЖурналаРегистрации("Электронное взаимодействие. Получение файла", УровеньЖурналаРегистрации.Ошибка, , , "Новый адрес СБИС! Необходимо добавить его в универсальную настройку <ЭДО/Домены СБИС> : " + ПараметрыАдресации.АдресРесурса);
						КонецЕсли;
											
					КонецЕсли;					
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-24 (#4056)
					Продолжить;
				КонецЕсли;	
				ПараметрыИнтеграции.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЦикла;	
			Если Не ПараметрыИнтеграции.Свойство("ПараметрыЗапроса") Тогда
				ПараметрыИнтеграции.Вставить("ПараметрыЗапроса", Новый Структура);
			КонецЕсли;	
		КонецЕсли;	
		
		ПараметрыИнтеграции.Вставить("ПараметрыАдресации", ПараметрыАдресации);
		
		Если Не ПараметрыИнтеграции.Свойство("ИмяФайла") И ПараметрыИнтеграции.Get Тогда
			ПараметрыИнтеграции.ИмяФайла = "";
		КонецЕсли;	
		
	//КонецЕсли;
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

Функция сбисПолучитьИдентификаторУчастникаОбмена(Соединение, ПараметрыЭДО, Параметры, Ответ = "") Экспорт
	
	Если ПустаяСтрока(Параметры.ИдентификаторКонтрагента) Тогда
		Ответ = "Не заполнен идентификатор получателя";
		Возврат Ложь;
	КонецЕсли;	
	
	ДанныеКонтрагента = сбисСтруктураУчастника(Параметры.Контрагент, Параметры.ИдентификаторКонтрагента, Истина, Ответ);
	Если ДанныеКонтрагента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	//Ответ = "";
	//РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Контрагент, "Наименование, НаименованиеПолное, ЮридическоеФизическоеЛицо");
	//Наименование = РеквизитыКонтрагента.НаименованиеПолное;
	//Если ПустаяСтрока(Наименование) Тогда
	//	Наименование = РеквизитыКонтрагента.Наименование;
	//КонецЕсли;	
	//Если ПустаяСтрока(Наименование) Тогда
	//	Ответ = "Не заполнено наименование контрагента";
	//	Возврат Ложь;
	//КонецЕсли;	
	//Идентификатор = СтрЗаменить(Параметры.ИдентификаторКонтрагента, "_", Символы.ПС);
	//ИНН = СтрПолучитьСтроку(Идентификатор, 1);
	//Если ПустаяСтрока(ИНН) Тогда
	//	Ответ = "Не заполнен идентификатор получателя";
	//	Возврат Ложь;
	//КонецЕсли;	
	//КПП = "";
	//Если СтрЧислоСтрок(Идентификатор) > 1 Тогда
	//	КПП = СтрПолучитьСтроку(Идентификатор, 2);
	//КонецЕсли;	
	//Если РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
	//	Фамилия = "";
	//	Имя = "";
	//	Отчество = "";
	//	ДанныеФИО = СтрЗаменить(Наименование, " ", Символы.ПС);
	//	Для й = 1 по СтрЧислоСтрок(ДанныеФИО) Цикл
	//		Строка = СтрПолучитьСтроку(ДанныеФИО, й);
	//		Если ПустаяСтрока(Строка) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Если Фамилия = "" Тогда
	//			Фамилия = Строка;
	//			Продолжить;
	//		ИначеЕсли Имя = "" Тогда
	//			Имя = Строка;
	//			Продолжить;
	//		КонецЕсли;
	//		Отчество = Отчество + ?(ПустаяСтрока(Отчество), "", " ") + Строка;
	//	КонецЦикла;	
	//	ДанныеКонтрагента = Новый Структура("СвФЛ", Новый Структура("ИНН, Фамилия, Имя, Отчество", ИНН, Фамилия, Имя, Отчество));
	//Иначе	
	//	ДанныеКонтрагента = Новый Структура("СвЮЛ", Новый Структура("ИНН, КПП, Название", ИНН, КПП, Наименование));
	//КонецЕсли;	
	ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Участник", ДанныеКонтрагента));
	Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("SubjectInfo", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Результат.Свойство("result") И ТипЗнч(Результат.result) = Тип("Структура") И Результат.result.Свойство("Идентификатор") Тогда
		Ответ = Результат.result.Идентификатор;
		Если Не ПустаяСтрока(Ответ) Тогда
			Возврат Истина;
		Иначе
			Ответ = "Оператор ЭДО вернул пустой идентификатор";
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

Функция сбисАвторизоваться(Соединение, ПараметрыЭДО) Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыЗапроса = Новый Структура;
	Если ПараметрыЭДО.Свойство("Отпечаток") И ЗначениеЗаполнено(ПараметрыЭДО.Отпечаток) Тогда
		ПараметрыЗапроса.Вставить("Сертификат", Новый Структура("Отпечаток", ПараметрыЭДО.Отпечаток));
	Иначе
		ПараметрыЗапроса.Вставить("Логин", ПараметрыЭДО.Логин);
		ПараметрыЗапроса.Вставить("Пароль", ПараметрыЭДО.Пароль);
	КонецЕсли;	
	ПараметрыКоманды.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	ПараметрыКоманды.Вставить("Заголовки", сбисСформироватьЗаголовки(ПараметрыЭДО, Истина));
	ПараметрыКоманды.Вставить("БезПроверкиАутентификации", Истина);
	
	Результат =  сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("Authentificate", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Результат.Свойство("result") И Не ПустаяСтрока(Результат.result) Тогда
		ок_ПараметрыОбменаЭДО = ПараметрыОбменаЭДО(ПараметрыЭДО.Ссылка);
		ок_ПараметрыОбменаЭДО.Сбис_ИдентификаторСессии = Результат.result;
		ок_ПараметрыОбменаЭДО.Сбис_ИдентификаторСессииДата = ТекущаяДатаСеанса();
		//ПараметрыСеанса.ок_ПараметрыОбменаЭДО = Новый ХранилищеЗначения(ок_ПараметрыОбменаЭДО);
		УстановитьПривилегированныйРежим(Истина);	
		Параметры = ПараметрыСеанса.ок_ПараметрыОбменаЭДО.Получить();
		Параметры.Вставить(ПараметрыЭДО.Ссылка, ок_ПараметрыОбменаЭДО);
		ПараметрыСеанса.ок_ПараметрыОбменаЭДО = Новый ХранилищеЗначения(Параметры);
	
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

Функция сбисСтруктураУчастника(Субъект, ИдентификаторСубъекта = "", ДанныеНаименования = Ложь, Ответ = "")
		
	Ответ = "";
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субъект, "Наименование, НаименованиеПолное, ЮридическоеФизическоеЛицо, ИНН, КПП");
	ИНН = Реквизиты.ИНН;
	КПП = Реквизиты.КПП;
	Если Не ПустаяСтрока(ИдентификаторСубъекта) Тогда
		Идентификатор = СтрЗаменить(ИдентификаторСубъекта, "_", Символы.ПС);
		ИНН = СтрПолучитьСтроку(Идентификатор, 1);
		КПП = "";
		Если СтрЧислоСтрок(Идентификатор) > 1 Тогда
			КПП = СтрПолучитьСтроку(Идентификатор, 2);
		КонецЕсли;	
	КонецЕсли;
	
	Данные = Новый Структура("ИНН", ИНН);
	Если Реквизиты.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Данные.Вставить("КПП", КПП);
	КонецЕсли;
	
	Если ДанныеНаименования Тогда
		Наименование = Реквизиты.НаименованиеПолное;
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = Реквизиты.Наименование;
		КонецЕсли;	
		Если ПустаяСтрока(Наименование) Тогда
			Ответ = "Не заполнено наименование контрагента";
			Возврат Неопределено;
		КонецЕсли;
		Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Фамилия = "";
			Имя = "";
			Отчество = "";
			ДанныеФИО = СтрЗаменить(Наименование, " ", Символы.ПС);
			Для й = 1 по СтрЧислоСтрок(ДанныеФИО) Цикл
				Строка = СтрПолучитьСтроку(ДанныеФИО, й);
				Если ПустаяСтрока(Строка) Тогда
					Продолжить;
				КонецЕсли;
				Если Фамилия = "" Тогда
					Фамилия = Строка;
					Продолжить;
				ИначеЕсли Имя = "" Тогда
					Имя = Строка;
					Продолжить;
				КонецЕсли;
				Отчество = Отчество + ?(ПустаяСтрока(Отчество), "", " ") + Строка;
			КонецЦикла;	
			Данные.Вставить("Фамилия", Фамилия);
			Данные.Вставить("Имя", Имя);
			Данные.Вставить("Отчество", Отчество);
		Иначе	
			Данные.Вставить("Название", Наименование);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Новый Структура(?(Реквизиты.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "СвЮЛ", "СвФЛ"), Данные); 

КонецФункции	

Функция сбисПолучитьФильтрСписокИзменений(Параметры = Неопределено) Экспорт
	
	//ДатаВремяС
	//ДатаВремяПо
	//ИдентификаторСобытия
	//НашаОрганизация
	
	ТД = Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	ТестированиеНачалоПериода = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Тестирование", "Начало периода изменений" + ТД);
	ТестированиеОкончаниеПериода = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Тестирование", "Окончание периода изменений" + ТД);
		
	Данные = Новый Структура("ПолныйСертификатЭП", "Нет");
	//Данные.Вставить("ДатаВремяПо", Формат('20181120', "ДФ=""дд.ММ.гггг ЧЧ.мм.сс"""));
	Если ТестированиеОкончаниеПериода <> Неопределено Тогда
		Данные.Вставить("ДатаВремяПо", Формат(ТестированиеОкончаниеПериода, "ДФ=""дд.ММ.гггг ЧЧ.мм.сс"""));
	КонецЕсли;	
	РазмерСтраницы = 25;	
	Если Параметры <> Неопределено Тогда
		Для Каждого Элемент Из Параметры Цикл
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			Если Ключ = "ДатаПоследнегоЗапроса"	Тогда
				//Значение = '20181113';
				Ключ = "ДатаВремяС";
				МинимальнаяДата = '20190301'; //раньше этой даты не подгружаем
				Если Не ЗначениеЗаполнено(Значение) ИЛИ ТипЗнч(Значение) <> Тип("Дата") Тогда
					Значение = МинимальнаяДата;
				КонецЕсли;	
				Значение = Макс(Значение, МинимальнаяДата);
				Если ТестированиеНачалоПериода <> Неопределено Тогда
					Значение = ТестированиеНачалоПериода;
				КонецЕсли;	
				Значение = Формат(Значение, "ДФ=""дд.ММ.гггг ЧЧ.мм.сс""");
			ИначеЕсли Ключ = "ИдентификаторОрганизации" Или Ключ = "ИдентификаторКонтрагента" Тогда 
				Продолжить;
			ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
				Значение = Формат(Значение, "ДФ=""дд.ММ.гггг ЧЧ.мм.сс""");
			ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
				Ключ = "НашаОрганизация";
				Идентификатор = "";
				Если Параметры.Свойство("ИдентификаторОрганизации") Тогда
					Идентификатор = Параметры.ИдентификаторОрганизации;
				КонецЕсли;	
				Значение = сбисСтруктураУчастника(Значение, Идентификатор); 
			ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Контрагенты") Тогда //по контрагенту не работает...
				Продолжить;
				Ключ = "Контрагент";
				Если Параметры.Свойство("ИдентификаторКонтрагента") Тогда
					Идентификатор = Параметры.ИдентификаторКонтрагента;
				КонецЕсли;	
				Значение = сбисСтруктураУчастника(Значение, Идентификатор); 
			КонецЕсли;	
			
			Данные.Вставить(Ключ, Значение);	
		КонецЦикла;
		Если Параметры.Свойство("РазмерСтраницы") Тогда
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-15 (#4056)
			//Страницы = Параметры.РазмерСтраницы;
			РазмерСтраницы = Параметры.РазмерСтраницы;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-15 (#4056) 
		КонецЕсли;	
		//приоритет идентификатора события над датой
		Если Данные.Свойство("ИдентификаторСобытия") И ЗначениеЗаполнено(Данные.ИдентификаторСобытия) И Данные.Свойство("ДатаВремяС") Тогда
			Данные.Удалить("ДатаВремяС");
		КонецЕсли;	
	КонецЕсли;
	
	Данные.Вставить("Навигация", Новый Структура("РазмерСтраницы", РазмерСтраницы));
	
	Возврат Данные;
	
КонецФункции	

Функция сбисПолучитьИдентификаторСубъектаОбмена(Данные)
	
	Если Данные.Свойство("СвЮЛ") Тогда
		Возврат Данные.СвЮЛ.ИНН + "_" + Данные.СвЮЛ.КПП;
	ИначеЕсли Данные.Свойство("СвФЛ") Тогда
		Возврат Данные.СвФЛ.ИНН;
	КонецЕсли;
	
	Возврат "";

КонецФункции

Функция сбисРазобратьТекстСпискаЭД(СписокЭД_XML, ТЗ, ПараметрыЭДО) 	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИДДокументооборота");
	ТЗ.Колонки.Добавить("КодТранзакции");
	ТЗ.Колонки.Добавить("ИДДокумента");
	ТЗ.Колонки.Добавить("Приоритет");
	ТЗ.Колонки.Добавить("ИДОрганизация");
	ТЗ.Колонки.Добавить("ИДКонтрагент");
	ТЗ.Колонки.Добавить("СсылкаНаАрхив");
	
	//соберу для анализа вспомогательные данные
	ТЗ.Колонки.Добавить("Направление");
	ТЗ.Колонки.Добавить("Название");
	ТЗ.Колонки.Добавить("ДатаВремяСоздания");
	ТЗ.Колонки.Добавить("Дата");
	ТЗ.Колонки.Добавить("Номер");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("Тип");
	ТЗ.Колонки.Добавить("Удален");
	//ТЗ.Колонки.Добавить("Состояние_Название");
	ТЗ.Колонки.Добавить("Событие_ДатаВремя");
	ТЗ.Колонки.Добавить("Событие_Комментарий"); //для причины отклонения
	//ТЗ.Колонки.Добавить("ДатаРедакции");
	//ТЗ.Колонки.Добавить("Регламент_Название");
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-08 (#3509)
	ТЗ.Колонки.Добавить("ДополнительныеФайлы");
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-08 (#3509)
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-31 (#4181)
	ТЗ.Колонки.Добавить("ок_АктуальнаяРедакция", Новый ОписаниеТипов("Булево"));
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-31 (#4181)
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	ТЗ.Колонки.Добавить("ок_КорреспонденцияВходящая", Новый ОписаниеТипов("Булево"));
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	
	////фильтр по контрагенту в запрос выборки изменений в сбис не отрабатывает, поэтому берем общую выборку и фильтруем результаты
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//			|	ВЫБОР
	//			|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	//			|			ТОГДА Контрагенты.ИНН
	//			|		ИНАЧЕ Контрагенты.ИНН + ""_"" + Контрагенты.КПП
	//			|	КОНЕЦ КАК ИДКонтрагент
	//			|ИЗ
	//			|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	//			|		ПО СоглашенияОбИспользованииЭД.Контрагент = Контрагенты.Ссылка
	//			|ГДЕ
	//			|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	//			|	И СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
	//			|	И (СоглашенияОбИспользованииЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	//			|			ИЛИ ИСТИНА)
	//			|	И СоглашенияОбИспользованииЭД.СостояниеСоглашения = ЗНАЧЕНИЕ(Перечисление.СостоянияСоглашенийЭД.Действует)";
	//		
	//Запрос.УстановитьПараметр("ПрофильНастроекЭДО", ПараметрыЭДО.Ссылка);    
	//ЗагружаемыеИДКонтрагент = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИДКонтрагент");
	
	ДатаВремяЗапроса = '00010101';
	
	Для каждого Документ Из СписокЭД_XML Цикл
		//Если Документ.Направление <> "Входящий"	Тогда
		//	Продолжить;
		//КонецЕсли;
		ИДДокументооборота = Документ.Идентификатор;
		//Состояние_Название = "";
		//Если Документ.Свойство("Состояние") И Документ.Состояние.Свойство("Название") Тогда
		//	Состояние_Название = Документ.Состояние.Название;
		//КонецЕсли;	
		//Регламент_Название = "";
		//Если Документ.Свойство("Регламент") И Документ.Регламент.Свойство("Название") Тогда
		//	Регламент_Название = Документ.Регламент.Название;
		//КонецЕсли;	
		
		//не буду, так как дата редакции это ДатаВремяСоздания
		//Редакция_Дата = '00010101';
		//Если Документ.Свойство("Редакция") И ТипЗнч(Документ.Редакция) = Тип("Массив") И Документ.Редакция.Количество() > 0 Тогда
		//	Для каждого Редакция из Документ.Редакция Цикл
		//		Если Редакция.ДатаВремя > Редакция_Дата Тогда
		//			Редакция_Дата = Редакция.ДатаВремя;
		//		КонецЕсли;
		//	КонецЦикла;	
		//КонецЕсли;	
		ИДОрганизация = сбисПолучитьИдентификаторСубъектаОбмена(Документ.НашаОрганизация);
		ИДКонтрагент = сбисПолучитьИдентификаторСубъектаОбмена(Документ.Контрагент);
		//Если ЗагружаемыеИДКонтрагент.Найти(ИДКонтрагент) = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;	
		Если Документ.Свойство("Событие") Тогда
			Для каждого Событие из Документ.Событие Цикл
				КодТранзакции = Событие.Название;
				Если Не сбисЗначимыйКодТранзакции(КодТранзакции) Тогда
					Продолжить;
				КонецЕсли;	
				НоваяСтрока = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Документ);
				НоваяСтрока.ИДДокументооборота = ИДДокументооборота;
				НоваяСтрока.ИДДокумента = Событие.Идентификатор;
				НоваяСтрока.КодТранзакции = КодТранзакции;
				НоваяСтрока.ИДОрганизация = ИДОрганизация;
				НоваяСтрока.ИДКонтрагент = ИДКонтрагент;
				Если Событие.ДатаВремя > ДатаВремяЗапроса Тогда
					ДатаВремяЗапроса = Событие.ДатаВремя;
				КонецЕсли;	
				НоваяСтрока.Событие_ДатаВремя = Событие.ДатаВремя;
				НоваяСтрока.Событие_Комментарий = Событие.Комментарий;
				//НоваяСтрока.ДатаРедакции = Редакция_Дата;
				НоваяСтрока.Удален = ?(НРег(НоваяСтрока.Удален) = "да", Истина, Ложь);
				//НоваяСтрока.Событие_Идентификатор = Событие.Идентификатор;
				//НоваяСтрока.Состояние_Название = Состояние_Название;
				//НоваяСтрока.Регламент_Название = Регламент_Название;
				
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-08 (#3509)
				ДополнительныеФайлы = сбисПолучитьДополнительныеФайлы(ПараметрыЭДО, ИДДокументооборота);
				Если ДополнительныеФайлы <> Неопределено Тогда 
					НоваяСтрока.ДополнительныеФайлы = ДополнительныеФайлы;
				КонецЕсли;	
				
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-01 (#4181)
				Если Документ.Свойство("Редакция") 
					И ТипЗнч(Документ.Редакция) = Тип("Массив")
					И Документ.Редакция.Количество() > 0 
					И ТипЗнч(Документ.Редакция[0]) = Тип("Структура")
					И Документ.Редакция[0].Свойство("Актуален") Тогда
					
					НоваяСтрока.ок_АктуальнаяРедакция = НРег(Документ.Редакция[0].Актуален) = "да";
					
				КонецЕсли;
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-01 (#4181)
				
				// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
				НоваяСтрока.ок_КорреспонденцияВходящая = (Документ.Тип = "КоррВх"); 
				// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
				
				//присутствует только на первом событии, поэтому не подошло, так как не подгружает втрой штамп
				//Если Событие.Свойство("Вложение") Тогда
				//	
				//	ДополнительныеФайлы = Новый Соответствие;
				//	
				//	Для каждого Вложение из Событие.Вложение Цикл
				//		
				//		Если Не Вложение.Свойство("Файл") Тогда
				//			Продолжить;
				//		ИначеЕсли ТипЗнч(Вложение.Файл) <> Тип("Структура") Тогда
				//			Продолжить;
				//		ИначеЕсли Не Вложение.Файл.Свойство("Имя") Тогда
				//			Продолжить;
				//		ИначеЕсли ПустаяСтрока(Вложение.Файл.Имя) Или СтрДлина(СокрП(Вложение.Файл.Имя)) < 3 Тогда
				//			Продолжить;
				//		ИначеЕсли НРег(СокрП(Прав(Вложение.Файл.Имя, 3))) = "xml" Тогда //для xml представления в пакете уже есть
				//			Продолжить;
				//		КонецЕсли;	
				//		
				//		Если Вложение.Свойство("СсылкаНаPDF")
				//			И ЗначениеЗаполнено(Вложение.СсылкаНаPDF) Тогда
				//			
				//			ДополнительныеФайлы.Вставить(Вложение.Файл.Имя + ПрефиксДляИмениФайлаПредставления(), Вложение.СсылкаНаPDF);
				//			
				//		КонецЕсли;		
				//		
				//	КонецЦикла;
				//	
				//	Если ДополнительныеФайлы.Количество() > 0 Тогда
				//		НоваяСтрока.ДополнительныеФайлы = ДополнительныеФайлы;
				//	КонецЕсли;
				//	
				//КонецЕсли;	
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-08 (#3509)
				
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	//Если ЗначениеЗаполнено(СписокЭД_XML) Тогда
	//	
	//	ЧтениеХМЛ = Новый ЧтениеXML;
	//	ЧтениеХМЛ.ОткрытьФайл(СписокЭД_XML);
	//	
	//	ИДДокументооборота = Неопределено;
	//	КодТранзакции      = Неопределено;
	//	Пока ЧтениеХМЛ.Прочитать() Цикл
	//		
	//		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ContainerDescription" Тогда
	//			ДатаВремяЗапроса = ЧтениеХМЛ.ПолучитьАтрибут("LastRecordDateTime");
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "DocFlow" Тогда
	//			ИДДокументооборота = ЧтениеХМЛ.ПолучитьАтрибут("Id");
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Document" Тогда
	//			КодТранзакции      = ЧтениеХМЛ.ПолучитьАтрибут("TransactionCode");
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Identifiers" Тогда
	//			
	//			СтрТЗ = ТЗ.Добавить();
	//			СтрТЗ.ИДДокументооборота = ИДДокументооборота;
	//			СтрТЗ.ИДДокумента        = ЧтениеХМЛ.ПолучитьАтрибут("InternalId");
	//			СтрТЗ.КодТранзакции      = КодТранзакции;
	//			
	//			Если КодТранзакции = "MainDocument" Тогда
	//				
	//				СтрТЗ.Приоритет = 0;
	//			ИначеЕсли КодТранзакции = "VendorTitle" ИЛИ КодТранзакции = "CustomerTitle" Тогда
	//				
	//				СтрТЗ.Приоритет = 1;
	//			ИначеЕсли КодТранзакции = "Invoice" Тогда
	//				
	//				СтрТЗ.Приоритет = 2;
	//			ИначеЕсли КодТранзакции = "PostDateConfirmation"
	//				ИЛИ КодТранзакции = "SendConfirmation"
	//				ИЛИ КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
	//				
	//				СтрТЗ.Приоритет = 3;
	//			ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
	//				
	//				СтрТЗ.Приоритет = 4;
	//			ИначеЕсли КодТранзакции = "MainDocumentReject" Тогда
	//				
	//				СтрТЗ.Приоритет = 5;
	//			Иначе
	//				
	//				СтрТЗ.Приоритет = 6;
	//			КонецЕсли;
	//			
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Type" Тогда
	//			
	//			ТипДокумента = ЧтениеХМЛ.ПолучитьАтрибут("Name");
	//			
	//			Если КодТранзакции = "Invoice"
	//				И (ТипДокумента = "PrimaryAccountingDocumentVendor"
	//					ИЛИ ТипДокумента = "PrimaryAccountingDocumentCustomer"
	//					ИЛИ ТипДокумента = "CorPrimaryAccountingDocumentVendor"
	//					ИЛИ ТипДокумента = "CorPrimaryAccountingDocumentCustomer") Тогда
	//				
	//				СтрТЗ.Приоритет = 1;
	//			КонецЕсли;
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	ТЗ.Сортировать("Приоритет");
	//КонецЕсли;
	
	//ТЗ.Сортировать("Событие_ДатаВремя");
	ДатаВремяЗапроса = ?(ДатаВремяЗапроса = '00010101', Неопределено, ДатаВремяЗапроса);
	
	Возврат ДатаВремяЗапроса;
	
КонецФункции

Функция сбисЗначимыйКодТранзакции(Код)
	
	//События:
	//•	"Отправка"
	////•	"Подтверждение даты отправки"
	////•	"Извещение о получении Подтверждения даты отправки"
	//•	"Подтверждение даты получения"
	////•	"Извещение о получении Подтверждения даты получения"
	////•	"Получение"
	////•	"Извещение о получении"
	////•	"Подтверждение даты получения извещения о получении документов"
	////•	"Извещение о получении подтверждения даты получения извещения о получении документов"
	////•	"Уведомление о приеме"
	////•	"Извещение о получении Уведомления о приеме"
	////•	"Уведомление об уточнении"
	////•	"Извещение о получении Уведомления об уточнении"
	
	//•	"Удаление вложений из документа"
	
	////•	"Уведомление об удалении на стороне отправителя"
	////•	"Уведомление об удалении на стороне получателя"
	
	Если ПустаяСтрока(Код) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-06-28 (#4244)
	//Коды = Новый Массив;
	//
	////"DESADV" идет первым, не известно что, пропускаем

	//Коды.Добавить("Получение"); //файл поступил от контрагента к Оператору
	//Коды.Добавить("Подтверждение даты отправки"); //оператор подтверждает что отправитель отправил получателю файл
	////или
	//Коды.Добавить("Утверждение");
	//
	//Коды.Добавить("Уведомление о приеме"); //мы подтвердили документ
	////или
	//Коды.Добавить("Уведомление об уточнении"); //мы отказались
	//
	//Коды.Добавить("Извещение о получении"); //оператор получил наш ответ
	//Коды.Добавить("Подтверждение даты получения извещения о получении документов"); //оператор прилал нам ответ 
	//
	//Коды.Добавить("Извещение о получении подтверждения даты получения извещения о получении документов");
	////или
	//Коды.Добавить("Извещение о получении Подтверждения даты отправки");
	//
	//Коды.Добавить("Извещение о получении Уведомления о приеме");
	////или
	//Коды.Добавить("Извещение о получении Уведомления об уточнении");
	//
	//////вне
	////Коды.Добавить("Уведомление об удалении на стороне отправителя");
	////
	//////пока не встретил в файле
	////Коды.Добавить("Уведомление об удалении на стороне получателя");
	//	
	//Возврат Коды.Найти(Код) <> Неопределено;
	Коды = ок_ОбщегоНазначенияСерверПовтИсп.ПолучитьМассивЗначимыхКодовТранзакции();	
	Если Коды.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Коды.Найти(Код) <> Неопределено;
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-06-28 (#4244)
	
КонецФункции	

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-06-28 (#4244)
//Теперь необходимо использовать ок_ОбщегоНазначенияСерверПовтИсп.ПолучитьМассивЗавершающихКодовТранзакции()
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-06-28 (#4244)
Функция сбисЗавершительныеКодыТранзакции()	
	
	Возврат ",Извещение о получении Уведомления о приеме,Извещение о получении Уведомления об уточнении,";
	
КонецФункции

Функция сбисКодыТранзакцииОтклонения()
	
	//Возврат ",Уведомление об уточнении,Извещение о получении Уведомления об уточнении,";
	Возврат ",Уведомление об уточнении,";
	
КонецФункции

Функция сбисФильтрВПараметрыЗапроса(ДанныеФильтра)
	
	Возврат Новый Структура("ПараметрыЗапроса", Новый Структура("Фильтр", ДанныеФильтра));
	
КонецФункции

Функция сбисДанныеСертификата(Сертификат)
	
	Данные = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Фамилия КАК Фамилия,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Имя КАК Имя,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отчество КАК Отчество,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Должность КАК Должность,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Организация.ИНН КАК ИНН,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка = &Сертификат";
	
	Запрос.УстановитьПараметр("Сертификат", Сертификат);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ФИО = Выборка.Фамилия;
		Если Не ПустаяСтрока(Выборка.Имя) Тогда
			ФИО = ФИО + ?(ПустаяСтрока(ФИО), "", " ") + Выборка.Имя;
		КонецЕсли;	
		Если Не ПустаяСтрока(Выборка.Отчество) Тогда
			ФИО = ФИО + ?(ПустаяСтрока(ФИО), "", " ") + Выборка.Отчество;
		КонецЕсли;	
		Данные.Вставить("ФИО", ФИО);
		Данные.Вставить("Должность", Выборка.Должность);	
		Данные.Вставить("ИНН", Выборка.ИНН);
		//перестал работать отпечаток в Base64, перекодируем назад и прелобразуем к строке
		//02VFP66sMDOxwbmmDgW+IaMF9hQ=
		//D365453FAEAC3033B1C1B9A60E05BE21A305F614
		//Данные.Вставить("Отпечаток", Выборка.Отпечаток);
		Отпечаток = "";
		Если Не ПустаяСтрока(Выборка.Отпечаток) Тогда
			Отпечаток = СтрЗаменить(Строка(Base64Значение(Выборка.Отпечаток)), " ", "");
		КонецЕсли;	
		Данные.Вставить("Отпечаток", Отпечаток);
	КонецЦикла;
	
	Возврат Данные
КонецФункции	

Функция сбисСтрокаВBASE64(Строка, Кодировка = "windows-1251") экспорт
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(Строка);
	ИмяФайла = ПолучитьИмяВременногоФайла(".xml");
	ТекстДок.Записать(ИмяФайла, Кодировка);
	ТекстXMLBase64 = сбисФайлВBASE64(ИмяФайла);  
    УдалитьФайлы(ИмяФайла); 
	
	Возврат ТекстXMLBase64;
	
КонецФункции

Функция сбисФайлВBASE64(ПолноеИмяФайла) экспорт
	
	Возврат сбисДвоичныеДанныеВBASE64(Новый ДвоичныеДанные(ПолноеИмяФайла));
	
КонецФункции

функция сбисДвоичныеДанныеВBASE64(Данные) экспорт
	
	НедопустимыеСимволы = Новый Массив;
	НедопустимыеСимволы.Добавить(Символы.ПС);
	НедопустимыеСимволы.Добавить(Символы.ВК);
	
	Результат = Base64Строка(Данные);
	Для Каждого НедопустимыйСимвол Из НедопустимыеСимволы Цикл
		Результат = СтрЗаменить(Результат, НедопустимыйСимвол, "");
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

//Функция сбисПолучитьДанныеОтправляемогоДокумента(Документ, Идентификатор) Экспорт 
Функция сбисПолучитьДанныеОтправляемогоДокумента(ДанныеФайлов, Идентификатор) Экспорт 
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//	|	Данные.ДокументОснование.Дата КАК Дата,
	//	|	Данные.ДокументОснование.Номер КАК Номер,
	//	|	Данные.ДокументОснование.СуммаДокумента КАК СуммаДокумента,
	//	|	Данные.Ссылка.Контрагент КАК Контрагент,
	//	|	Данные.Ссылка.Организация КАК Организация,
	//	|	Данные.Ссылка.НастройкаЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	//	|	Данные.Ссылка.НастройкаЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	//	|	Данные.Ссылка.Комментарий КАК Комментарий,
	//	|	Данные.Ссылка КАК Документ
	//	|ПОМЕСТИТЬ ВТ
	//	|ИЗ
	//	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК Данные
	//	|ГДЕ
	//	|	Данные.Ссылка = &Документ
	//	|	И Данные.ДокументОснование <> НЕОПРЕДЕЛЕНО
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Данные.НомерСтроки
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ЭДПрисоединенныеФайлы.Ссылка КАК Файл,
	//	|	ВТ.Дата КАК Дата,
	//	|	ВТ.Номер КАК Номер,
	//	|	ВТ.СуммаДокумента КАК СуммаДокумента,
	//	|	ВТ.Контрагент КАК Контрагент,
	//	|	ВТ.Организация КАК Организация,
	//	|	ВТ.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	//	|	ВТ.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	//	|	ВТ.Комментарий КАК Комментарий,
	//	|	ВТ.Документ КАК Документ,
	//	|	ЭДПрисоединенныеФайлы.НаименованиеФайла КАК ИмяФайла,
	//	|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение
	//	|ИЗ
	//	|	ВТ КАК ВТ
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	//	|		ПО ВТ.Документ = ЭДПрисоединенныеФайлы.ВладелецФайла";
	//
	//Запрос.УстановитьПараметр("Документ", Документ);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ОписаниеДокумента = Новый Структура("Тип, Дата, Номер, Идентификатор");
	ОписаниеДокумента.Тип = "ДокОтгрИсх";
	ОписаниеДокумента.Идентификатор = Идентификатор;
	
	Вложения = Новый Массив;
	Начало = Истина;
	//Выборка = РезультатЗапроса.Выбрать();
	//Пока Выборка.Следующий() Цикл
	Для каждого Выборка из ДанныеФайлов Цикл	
		Если Начало Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеДокумента, Выборка);
			ОписаниеДокумента.Дата = Формат(ОписаниеДокумента.Дата, "ДФ=dd.MM.yyyy");

			Если Не ПустаяСтрока(Выборка.Комментарий) Тогда
				ОписаниеДокумента.Вставить("Примечание", Выборка.Комментарий);
			КонецЕсли;
			ОписаниеДокумента.Вставить("НашаОрганизация", сбисСтруктураУчастника(Выборка.Организация, Выборка.ИдентификаторОрганизации));
			ОписаниеДокумента.Вставить("Контрагент", сбисСтруктураУчастника(Выборка.Контрагент, Выборка.ИдентификаторКонтрагента, Истина));
			ОписаниеДокумента.Вставить("Примечание", Выборка.Комментарий);
		КонецЕсли;
		Начало = Ложь;
		ИдентификаторФайла = Строка(Выборка.Файл.УникальныйИдентификатор());
		ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(Выборка.Файл);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		//ДанныеФайла = Новый Структура("Имя,ДвоичныеДанные", Выборка.ИмяФайла + ?(ПустаяСтрока(Выборка.Расширение), "", "." + Выборка.Расширение), сбисДвоичныеДанныеВBASE64(ДвоичныеДанныеФайла));
		ДанныеФайла = Новый Структура("Имя,ДвоичныеДанные", ДанныеФайла.ИмяФайла, сбисДвоичныеДанныеВBASE64(ДвоичныеДанныеФайла));
		
		Вложения.Добавить(Новый Структура("Идентификатор, Файл", ИдентификаторФайла, ДанныеФайла));
	КонецЦикла;	
	
	ОписаниеДокумента.Вставить("Вложение", Вложения);
	
	Возврат Новый Структура("Документ", ОписаниеДокумента);
	
КонецФункции	

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
//Функция сбисПолучитьДанныеДляПодписания(ПараметрыЭДО, Идентификатор, Сертификат = Неопределено, НазваниеДействия = "Утвердить", Комментарий = "") Экспорт
Функция сбисПолучитьДанныеДляПодписания(ПараметрыЭДО, Идентификатор, Сертификат = Неопределено, НазваниеДействия = "Утвердить", Комментарий = "", ДокументыКПодписанию = Неопределено, ДокументЭД = Неопределено) Экспорт 
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849)
	
	Соединение = ПолучитьСоединение(ПараметрыЭДО.СпособОбменаЭД, ПараметрыЭДО);
	Если НазваниеДействия = "Отправить" Тогда
		//ДанныеДокумента = сбисПолучитьДанныеОтправляемогоДокумента(ПараметрыЭДО.Документ, Идентификатор);
		ДанныеДокумента = сбисПолучитьДанныеОтправляемогоДокумента(ПараметрыЭДО.ДанныеФайлов, Идентификатор);
		Если ДанныеДокумента = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("SendMessage", ПараметрыЭДО, Новый Структура("ПараметрыЗапроса", ДанныеДокумента)), ПараметрыЭДО);
	Иначе	
		Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetMessage", ПараметрыЭДО, Новый Структура("ПараметрыЗапроса", Новый Структура("Документ", Новый Структура("Идентификатор", Идентификатор)))), ПараметрыЭДО);
	КонецЕсли;	
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли Не Результат.Свойство("result") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Документ = Результат.result;
	//Данные = Новый Массив;
	//Для каждого Вложение из Документ.Вложение Цикл
	//	Если Вложение.Свойство("Служебный") И Вложение.Служебный <> "Нет" Тогда
	//		Продолжить;
	//	ИначеЕсли Не Вложение.Свойство("Файл")  Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	//скачиваем файл по ссылке
	//	ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("tmp");
	//	СсылкаНаАрхив = Вложение.Файл.Ссылка;
	//	ИмяФайлаРезультат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetFileOnURL", ПараметрыЭДО, Новый Структура("Get, URL, ИмяФайла", Истина, СсылкаНаАрхив, ИмяФайла)), ПараметрыЭДО);
	//	Если ИмяФайлаРезультат = Неопределено Тогда
	//		Возврат Неопределено;
	//	КонецЕсли;	
	//	Данные.Добавить(Новый Структура("Идентификатор, ИмяФайла, Адрес", Вложение.Идентификатор, Вложение.Файл.Имя, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаРезультат))));
	//	УдалитьФайлы(ИмяФайлаРезультат);
	//КонецЦикла;
	
	Если Не Документ.Свойство("Этап") Тогда
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
		Если ТипЗнч(ДокументыКПодписанию) = Тип("Массив") И Документ.Свойство("Состояние") И Документ.Состояние.Свойство("Название") Тогда
			ИмяСобытияЖР ="Электронное взаимодействие.Подписание ЭД";
			КомментарийЖР = "Не определен этап документа с событием документа " + Документ.Состояние.Название;
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЭлектронныйДокументВходящий, ДокументЭД, КомментарийЖР);
			ДокЭлементМассива = ДокументыКПодписанию.Найти(ДокументЭД);
			Если ДокЭлементМассива <> Неопределено Тогда
				ДокументыКПодписанию.Удалить(ДокЭлементМассива);
			КонецЕсли;
		КонецЕсли;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849)
		Возврат Неопределено;
	ИначеЕсли Документ.Этап.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Этап = Документ.Этап[0];
	Если Не Этап.Свойство("Действие") Тогда
		Возврат Неопределено;
	ИначеЕсли Этап.Действие.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если НазваниеДействия = "Утвердить" Или НазваниеДействия = "Отклонить" Тогда 
		Если СтрНайти(",Утверждение,Утвердить,", Этап.Название) = 0 Тогда
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
			Если ТипЗнч(ДокументыКПодписанию) = Тип("Массив") И Документ.Свойство("Состояние") И Документ.Состояние.Свойство("Название") Тогда
				ИмяСобытияЖР ="Электронное взаимодействие.Подписание ЭД";
				КомментарийЖР = "На текущем этапе " + Этап.Название + " нельзя Утвердить/Отклонить документ";
				ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЭлектронныйДокументВходящий, ДокументЭД, КомментарийЖР);
				ДокЭлементМассива = ДокументыКПодписанию.Найти(ДокументЭД);
				Если ДокЭлементМассива <> Неопределено Тогда
					ДокументыКПодписанию.Удалить(ДокЭлементМассива);
				КонецЕсли;
			КонецЕсли;
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849)
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	
	//сначала служебные пакеты обработаем, так в АПИ СБИСА
	//РезультатОбработкиСлужебных = сбисОбработатьСлужебныеДокументыПоПакету(Соединение, ПараметрыЭДО, Документ.Идентификатор);
	//ДокументРезультат.Этап[0].Вложение[0].Модифицирован
	
	// Назначение этапа
	ОписаниеЭтапа = Новый Структура("Название, Идентификатор");
	ЗаполнитьЗначенияСвойств(ОписаниеЭтапа, Этап);
	
	// Назначение действие на этап
	ОписаниеДействия = Новый Структура("Название, Сертификат", НазваниеДействия, "");
	Если НазваниеДействия = "Отправить" Тогда
		Если Этап.Свойство("Действие") И Этап.Действие.Количество() > 0 Тогда
			ОписаниеДействия.Название = Этап.Действие[0].Название; 
		КонецЕсли;	
	КонецЕсли;	
	Если Сертификат <> Неопределено Тогда
		ОписаниеДействия.Вставить("Сертификат", сбисДанныеСертификата(Сертификат));
	КонецЕсли;	
	Если Комментарий <> "" Тогда
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-29 (#3336)
		//судя по всему 
		//ОписаниеДействия.Вставить("Комментарий", Комментарий);
		ОписаниеДействия.Вставить("Комментарий", ок_Сбис_РаботаСJSON.ЗначениеВJSON(Комментарий));
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-29 (#3336)
	КонецЕсли;	
	ОписаниеЭтапа.Вставить("Действие", ОписаниеДействия);
	
	// Подготовка этапа
	ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Документ", Новый Структура("Идентификатор, Этап", Документ.Идентификатор, ОписаниеЭтапа)));
	РезультатПодготовки = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("PrepareAction", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	Если РезультатПодготовки = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ РезультатПодготовки.Свойство("result") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументРезультат = РезультатПодготовки.result;
	
	//этап
	Если Не ДокументРезультат.Свойство("Этап") Тогда
		Возврат Неопределено;
	ИначеЕсли ДокументРезультат.Этап.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЭтапРезультат = ДокументРезультат.Этап[0];
	
	ОписаниеЭтапа = Новый Структура("Идентификатор, Название");
	ЗаполнитьЗначенияСвойств(ОписаниеЭтапа, ЭтапРезультат);
	
	//действие
	Если Не ЭтапРезультат.Свойство("Действие") Тогда
		Возврат Неопределено;
	ИначеЕсли ЭтапРезультат.Действие.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДействиеРезультат = ЭтапРезультат.Действие[0];
	//ОписаниеДействия = Новый Структура("Идентификатор, Название, Комментарий, ТребуетПодписания", "", "", "", Истина);
	ОписаниеДействия = Новый Структура("Идентификатор, Название, Комментарий", "", "", "");
	ЗаполнитьЗначенияСвойств(ОписаниеДействия, ДействиеРезультат);
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-06 (#3336)
	ОписаниеДействия.Комментарий = ок_Сбис_РаботаСJSON.ЗначениеВJSON(ОписаниеДействия.Комментарий);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-06 (#3336)
	
	Сертификаты = Новый Массив;
	Если ДействиеРезультат.Свойство("Сертификат") Тогда 
		Для каждого СертификатРезультат из ДействиеРезультат.Сертификат Цикл
			Сертификаты.Добавить(Новый Структура("Отпечаток", СертификатРезультат.Отпечаток));
		КонецЦикла;
	КонецЕсли;
	ОписаниеДействия.Вставить("Сертификат", Сертификаты);
	ОписаниеЭтапа.Вставить("Действие", ОписаниеДействия);
	
	Данные = Новый Массив;
	Для каждого Вложение из ЭтапРезультат.Вложение Цикл
		Если Не Вложение.Свойство("Файл")  Тогда
			Продолжить;
		//ИначеЕсли Вложение.Свойство("Служебный") И Вложение.Служебный <> "Нет" Тогда
		//	Продолжить;
		КонецЕсли;	
		//скачиваем файл по ссылке
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("tmp");
		СсылкаНаАрхив = Вложение.Файл.Ссылка;				
		ИмяФайлаРезультат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetFileOnURL", ПараметрыЭДО, Новый Структура("Get, URL, ИмяФайла", Истина, СсылкаНаАрхив, ИмяФайла)), ПараметрыЭДО);
		Если ИмяФайлаРезультат = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		ДанныеФайла = Новый Структура("Идентификатор", "");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Вложение);
		ДанныеФайла.Вставить("Служебный", НРег(Вложение.Служебный) = "да");
		ДанныеФайла.Вставить("ИмяФайла", Вложение.Файл.Имя);
		ДанныеФайла.Вставить("Адрес", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаРезультат)));
		ДанныеФайла.Вставить("АдресФайлаНаСервере", ИмяФайлаРезультат);
		Данные.Добавить(ДанныеФайла);
		//пока не удаляю, т.к. асинхронное подписание, поэтому недоступнно временнное хранилище исходного сеанса
		//а мне нужен файл чтобы поместить его в базу после успешного подписания и отправки
		//УдалитьФайлы(ИмяФайлаРезультат);
	КонецЦикла;
	
	Редакции = Новый Массив;
	Для каждого РедакцияРезультат из ДокументРезультат.Редакция Цикл
		Редакции.Добавить(Новый Структура("Идентификатор", РедакцияРезультат.Идентификатор));
	КонецЦикла;
		
	Возврат Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания", ДокументРезультат.Идентификатор, ОписаниеЭтапа, Редакции, ПараметрыЭДО, Данные);
	
КонецФункции	

Функция сбисВыполнитьДействиеПодписания(ПараметрыЭДО, ДанныеДляПодписания, НеОповещатьПользователяОбОшибке = Ложь) Экспорт
	
	Соединение = ПолучитьСоединение(ПараметрыЭДО.СпособОбменаЭД, ПараметрыЭДО);
		
	ПараметрыДействия = Новый Структура("Идентификатор, Этап, Редакция");
	ЗаполнитьЗначенияСвойств(ПараметрыДействия, ДанныеДляПодписания);
	
	//добавляем подписи
	Вложения = Новый Массив;  
	Для каждого ЭлементДляПодписания Из ДанныеДляПодписания.ФайлыДляПодписания Цикл
		ЭЦП = Новый Массив;
		ФайлЭЦП = Новый Структура;
		ФайлЭЦП.Вставить("Имя", ЭлементДляПодписания.ИмяФайла + ".sgn"); 
		ФайлЭЦП.Вставить("ДвоичныеДанные",сбисДвоичныеДанныеВBASE64(ПолучитьИзВременногоХранилища(ЭлементДляПодписания.АдресПодписи))); 
		ЭЦП.Добавить(Новый Структура("Файл", ФайлЭЦП));
		Вложения.Добавить(Новый Структура("Идентификатор, Подпись", ЭлементДляПодписания.Идентификатор, ЭЦП));
	КонецЦикла;	
	ПараметрыДействия.Этап.Вставить("Вложение", Вложения);
		
	//Возврат Ложь;
	
	ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Документ", ПараметрыДействия));
	ПараметрыКоманды.Вставить("НеОповещатьПользователяОбОшибке", НеОповещатьПользователяОбОшибке);
	Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("ExecuteAction", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Результат.Свойство("result") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Функция сбисПроверитьНаличиеНеобработанныхСлужебныхДокументов(ПараметрыЭДО, Соединение = Неопределено, ПрекратитьЗапросы = Ложь, Количество = 0) Экспорт 
	
	ПрекратитьЗапросы = Ложь;
	Количество = 0;
	
	Если Соединение = Неопределено Тогда
		Соединение = ПолучитьСоединение(ПараметрыЭДО.СпособОбменаЭД, ПараметрыЭДО);
	КонецЕсли;	
	
	ПараметрыКоманды = сбисФильтрВПараметрыЗапроса(Новый Структура("НашаОрганизация", сбисСтруктураУчастника(ПараметрыЭДО.Организация, ПараметрыЭДО.ИдентификаторОрганизации)));
	ПараметрыКоманды.Вставить("НеОповещатьПользователяОбОшибке", Истина);
	Информация = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("InfoServiceStages", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
	Если Информация = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
	
	Если Не Информация.Свойство("result") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Информация.result.Свойство("ПрекратитьЗапросы") И НРег(Информация.result.ПрекратитьЗапросы = "да") Тогда
		ПрекратитьЗапросы = Истина;
	КонецЕсли;
	
	Если Не Информация.result.Свойство("ЧислоНеобработанныхЭтапов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Количество = Число(Информация.result.ЧислоНеобработанныхЭтапов);
	Исключение
	КонецПопытки;
	
	Возврат Количество <> 0;

КонецФункции

Функция сбисПолучитьДанныеСлужебныхДокументовДляПодписания(ПараметрыЭДО, 
															Сертификат = Неопределено, 
															Продолжать = Ложь
															//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
															, ИдентификаторДокумента = Неопределено
															, ПрекратитьЗапросы = Ложь
															, ДатаСеанса = '00010101'
															//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
																						) Экспорт 
	
	Продолжать = Ложь;
	
	ДанныеСлужебныхДокументов = Новый Соответствие;
	Соединение = ПолучитьСоединение(ПараметрыЭДО.СпособОбменаЭД, ПараметрыЭДО);
	
	ПрекратитьЗапросы = Ложь;
	Если Не сбисПроверитьНаличиеНеобработанныхСлужебныхДокументов(ПараметрыЭДО, Соединение, ПрекратитьЗапросы) Тогда
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
		Если ИдентификаторДокумента <> Неопределено Тогда
			Возврат ДанныеСлужебныхДокументов;
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
		Возврат Неопределено;
	КонецЕсли;
		
	//ПараметрыКоманды = сбисФильтрВПараметрыЗапроса(Новый Структура("НашаОрганизация", сбисСтруктураУчастника(ПараметрыЭДО.Организация, ПараметрыЭДО.ИдентификаторОрганизации)));
	//Информация = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("InfoServiceStages", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	//Если Не Информация.Свойство("result") Тогда
	//	Возврат Неопределено;
	//ИначеЕсли Не Информация.result.Свойство("ЧислоНеобработанныхЭтапов") Тогда
	//	Возврат Неопределено;
	//КонецЕсли;

	//Если Число(Информация.result.ЧислоНеобработанныхЭтапов) = 0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//Если Информация.result.Свойство("ПрекратитьЗапросы") И  НРег(Информация.result.ПрекратитьЗапросы = "да") Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
	//ПараметрыКоманды = сбисФильтрВПараметрыЗапроса(Новый Структура("НашаОрганизация", сбисСтруктураУчастника(ПараметрыЭДО.Организация, ПараметрыЭДО.ИдентификаторОрганизации)));
	
	Если ПрекратитьЗапросы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФильтра = Новый Структура("НашаОрганизация", сбисСтруктураУчастника(ПараметрыЭДО.Организация, ПараметрыЭДО.ИдентификаторОрганизации));
	ПараметрыФильтра.Вставить("Навигация", Новый Структура("РазмерСтраницы", 20));
	Если ИдентификаторДокумента <> Неопределено Тогда
		ПараметрыФильтра.Вставить("ИдентификаторДокумента", ИдентификаторДокумента);
	КонецЕсли;	
	
	ПараметрыКоманды = сбисФильтрВПараметрыЗапроса(ПараметрыФильтра);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
	
	ПараметрыКоманды.Вставить("НеОповещатьПользователяОбОшибке", Истина);
	Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("ListServiceStages", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли Не Результат.Свойство("result") Тогда 
		Возврат Неопределено;
	ИначеЕсли Не Результат.result.Свойство("Документ") Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Обработано = 0;
	СлужебныеДокументы = Результат.result.Документ;
	Для Каждого Документ Из СлужебныеДокументы Цикл
		
		Если Не Документ.Свойство("Этап") Тогда
			Продолжить;
		ИначеЕсли Документ.Этап.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Этап = Документ.Этап[0];
		Если Не Этап.Свойство("Действие") Тогда
			Продолжить;
		ИначеЕсли Этап.Действие.Количество() = 0 Тогда
			Продолжить;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
		ИначеЕсли Не Этап.Свойство("Служебный") Тогда
			Продолжить;
		ИначеЕсли НРег(Этап.Служебный) <> "да" Тогда
			Продолжить;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
		КонецЕсли;	
		Действие = Этап.Действие[0];
		Если Не Действие.Свойство("ТребуетПодписания") Тогда
			Продолжить;
		ИначеЕсли НРег(Действие.ТребуетПодписания) <> "да" Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим существует ли действующая настройка ЭДО для этого контрагента
		ИДОрганизация = сбисПолучитьИдентификаторСубъектаОбмена(Документ.НашаОрганизация);
		ИДКонтрагент = сбисПолучитьИдентификаторСубъектаОбмена(Документ.Контрагент);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
		//НастройкиСоглашения = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(ИДОрганизация, ИДКонтрагент);
		ПараметрыДокумента = Новый Структура("Направление, Дата");
		ЗаполнитьЗначенияСвойств(ПараметрыДокумента, Документ);
		НастройкиСоглашения = ПолучитьДействующиеНастройкиОбменаЭД(ИДОрганизация, ИДКонтрагент, "", ПараметрыДокумента);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3337)
		Если НастройкиСоглашения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		// Назначение этапа
		ОписаниеЭтапа = Новый Структура("Название, Идентификатор");
		ЗаполнитьЗначенияСвойств(ОписаниеЭтапа, Этап);
		
		// Назначение действие на этап
		ОписаниеДействия = Новый Структура("Название, Сертификат");
		ЗаполнитьЗначенияСвойств(ОписаниеДействия, Действие);
		Если Сертификат <> Неопределено Тогда
			ОписаниеДействия.Вставить("Сертификат", сбисДанныеСертификата(Сертификат));
		КонецЕсли;	
		ОписаниеЭтапа.Вставить("Действие", ОписаниеДействия);
		
		// Подготовка этапа
		ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Документ", Новый Структура("Идентификатор, Этап", Документ.Идентификатор, ОписаниеЭтапа)));
		РезультатПодготовки = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("PrepareAction", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
		Если РезультатПодготовки = Неопределено Тогда
			Продолжить;
		ИначеЕсли НЕ РезультатПодготовки.Свойство("result") Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументРезультат = РезультатПодготовки.result;
		
		//этап
		Если Не ДокументРезультат.Свойство("Этап") Тогда
			Продолжить;
		ИначеЕсли ДокументРезультат.Этап.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЭтапРезультат = ДокументРезультат.Этап[0];
		
		ОписаниеЭтапа = Новый Структура("Идентификатор, Название");
		ЗаполнитьЗначенияСвойств(ОписаниеЭтапа, ЭтапРезультат);
		
		//действие
		Если Не ЭтапРезультат.Свойство("Действие") Тогда
			Продолжить;
		ИначеЕсли ЭтапРезультат.Действие.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ДействиеРезультат = ЭтапРезультат.Действие[0];
		ОписаниеДействия = Новый Структура("Идентификатор, Название, Комментарий", "", "", "");
		ЗаполнитьЗначенияСвойств(ОписаниеДействия, ДействиеРезультат);
		
		Сертификаты = Новый Массив;
		Если ДействиеРезультат.Свойство("Сертификат") Тогда 
			Для каждого СертификатРезультат из ДействиеРезультат.Сертификат Цикл
				Сертификаты.Добавить(Новый Структура("Отпечаток", СертификатРезультат.Отпечаток));
			КонецЦикла;
		КонецЕсли;
		ОписаниеДействия.Вставить("Сертификат", Сертификаты);
		ОписаниеЭтапа.Вставить("Действие", ОписаниеДействия);
		
		Данные = Новый Массив;
		Для каждого Вложение из ЭтапРезультат.Вложение Цикл
			Если Не Вложение.Свойство("Файл")  Тогда
				Продолжить;
			ИначеЕсли Вложение.Свойство("Служебный") И Нрег(Вложение.Служебный) <> "да" Тогда
				Продолжить;
			КонецЕсли;	
			//скачиваем файл по ссылке
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("tmp");
			СсылкаНаАрхив = Вложение.Файл.Ссылка;
			ИмяФайлаРезультат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetFileOnURL", ПараметрыЭДО, Новый Структура("Get, URL, ИмяФайла", Истина, СсылкаНаАрхив, ИмяФайла)), ПараметрыЭДО);
			Если ИмяФайлаРезультат = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			ДанныеФайла = Новый Структура("Идентификатор", "");
			ЗаполнитьЗначенияСвойств(ДанныеФайла, Вложение);
			ДанныеФайла.Вставить("Служебный", НРег(Вложение.Служебный) = "да");
			ДанныеФайла.Вставить("ИмяФайла", Вложение.Файл.Имя);
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-18 (#4234)
			//ДанныеФайла.Вставить("Адрес", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаРезультат)));
			ДанныеФайла.Вставить("Адрес", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаРезультат), Новый УникальныйИдентификатор));
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-18 (#4234)
			Данные.Добавить(ДанныеФайла);
			УдалитьФайлы(ИмяФайлаРезультат);
		КонецЦикла;
		
		Если Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Редакции = Новый Массив;
		Для каждого РедакцияРезультат из ДокументРезультат.Редакция Цикл
			Редакции.Добавить(Новый Структура("Идентификатор", РедакцияРезультат.Идентификатор));
		КонецЦикла;
		
		Обработано = Обработано + 1;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
		//по одному идентификатору документа может быть несколько служебных документов
		//поэтому запакуем данные в массив
		//ДанныеСлужебныхДокументов.Вставить(ДокументРезультат.Идентификатор, Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания", ДокументРезультат.Идентификатор, ОписаниеЭтапа, Редакции, ПараметрыЭДО, Данные));
		ДанныеСлужебногоДокументаДляПодписания = Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания", ДокументРезультат.Идентификатор, ОписаниеЭтапа, Редакции, ПараметрыЭДО, Данные);
		ДанныеПоИдентификаторуДокумента = ДанныеСлужебныхДокументов.Получить(ДокументРезультат.Идентификатор);
		Если ДанныеПоИдентификаторуДокумента = Неопределено Тогда
			ДанныеПоИдентификаторуДокумента = Новый Массив;
		КонецЕсли;
		ДанныеПоИдентификаторуДокумента.Добавить(ДанныеСлужебногоДокументаДляПодписания);
		ДанныеСлужебныхДокументов.Вставить(ДокументРезультат.Идентификатор, ДанныеПоИдентификаторуДокумента);
		Если ИдентификаторДокумента <> Неопределено Тогда //по новой схеме зарегистрируем количество документов на обработку, и потом после обработки служебного документа будем снимать счетчик 
			РегистрыСведений.ок_ДокументыЭДДляПроверкиСлужебныхЭтапов.ЗарегистрироватьКоличествоСлужебныхДокументов(ДокументРезультат.Идентификатор, ДатаСеанса, Обработано);
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
		
	КонецЦикла;
	
	//Если Обработано = 0  Тогда     
	//	//Обработать по какой-то причине не можем (например нет сертификатов)
	//	Прервать;
	//КонецЕсли;
	
	Если Результат.result.Свойство("Навигация") И Результат.result.Навигация.Свойство("ЕстьЕще") Тогда
		Продолжать = (Результат.result.Навигация.ЕстьЕще = "Да");
	КонецЕсли;	
		
	Возврат ДанныеСлужебныхДокументов;
		
КонецФункции	

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-08 (#3509)
Функция сбисПолучитьДополнительныеФайлы(ПараметрыЭДО, Идентификатор) Экспорт 
	
	Соединение = ПолучитьСоединение(ПараметрыЭДО.СпособОбменаЭД, ПараметрыЭДО);
	Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetMessage", ПараметрыЭДО, Новый Структура("ПараметрыЗапроса", Новый Структура("Документ", Новый Структура("Идентификатор", Идентификатор)))), ПараметрыЭДО);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли Не Результат.Свойство("result") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Документ = Результат.result;
	
	Если Документ.Свойство("Вложение") Тогда
		
		ДополнительныеФайлы = Новый Соответствие;
		
		Для каждого Вложение из Документ.Вложение Цикл
			
			
			Если Вложение.Свойство("Служебный") И НРег(Вложение.Служебный) = "да" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Вложение.Свойство("Файл") Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Вложение.Файл) <> Тип("Структура") Тогда
				Продолжить;
			ИначеЕсли Не Вложение.Файл.Свойство("Имя") Тогда
				Продолжить;
			ИначеЕсли ПустаяСтрока(Вложение.Файл.Имя) Или СтрДлина(СокрП(Вложение.Файл.Имя)) < 3 Тогда
				Продолжить;
			ИначеЕсли НРег(СокрП(Прав(Вложение.Файл.Имя, 3))) = "xml" Тогда //для xml представления в пакете уже есть
				Продолжить;
			КонецЕсли;	
			
			
			Если Вложение.Свойство("СсылкаНаPDF")
				И ЗначениеЗаполнено(Вложение.СсылкаНаPDF) Тогда		
				ДополнительныеФайлы.Вставить(Вложение.Файл.Имя + ПрефиксДляИмениФайлаПредставления(), Вложение.СсылкаНаPDF);
			КонецЕсли;		
			
		КонецЦикла;
		
		Если ДополнительныеФайлы.Количество() > 0 Тогда
			Возврат ДополнительныеФайлы;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Неопределено;

КонецФункции	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-08 (#3509)

//уже не используются
Функция сбисПроверитьСертификат(Действие, Сертификат = Неопределено)
	
	Возврат Истина;
	
	Если Не Действие.Свойство("Сертификат") Тогда //нет доступных сертификатов
		Возврат Ложь;
	ИначеЕсли Действие.Сертификат.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	Сертификат = Действие.Сертификат[0];
	
	Возврат Истина;
	
КонецФункции

Функция сбисВыполнитьКоманду(ПараметрыЭДО, Идентификатор, ИмяКоманды, Комментарий = "") 
	
	Соединение = ПолучитьСоединение(ПараметрыЭДО.СпособОбменаЭД, ПараметрыЭДО);
	//Документ = ПрочитатьДокумент(Соединение, ПараметрыЭДО, Идентификатор);
	Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetMessage", ПараметрыЭДО, Новый Структура("ПараметрыЗапроса", Новый Структура("Документ", Новый Структура("Идентификатор", Идентификатор)))), ПараметрыЭДО);
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Не Результат.Свойство("result") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Документ = Результат.result;

	Если Не Документ.Свойство("Этап") Тогда
		Возврат Ложь;
	ИначеЕсли Документ.Этап.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Этап = Документ.Этап[0];
	Если Не Этап.Свойство("Действие") Тогда
		Возврат Ложь;
	ИначеЕсли Этап.Действие.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ИмяКоманды = "Отклонить" И Комментарий = "" Тогда 
		Возврат Ложь;
	КонецЕсли;	
		
	//проверка на соответствие текущему этапу
	Если ИмяКоманды = "Утвердить" Или ИмяКоманды = "Отклонить" Тогда 
		Если СтрНайти(",Утверждение,Утвердить,", Этап.Название) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	//сначала служебные пакеты обработаем, так в АПИ СБИСА
	//Результат = сбисОбработатьСлужебныеДокументыПоПакету(Соединение, ПараметрыЭДО, Документ.Идентификатор);
	
	Для Каждого Действие из Этап.Действие Цикл
		Если Действие.Название = ИмяКоманды Тогда
			//Возврат сбисВыполнитьДействие(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);
			Возврат сбисВыполнитьДействиеБезОбработкиСлужебных(Соединение, ПараметрыЭДО, Документ, Этап, Действие, Комментарий);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция сбисВыполнитьДействиеБезОбработкиСлужебных(Соединение, ПараметрыЭДО, СоставПакета, Этап, Действие, Комментарий = "") 
	Перем Сертификат;
	
	Если Не сбисПроверитьСертификат(Действие, Сертификат) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	// Выполняет указанное действие по документу СБИС
	//МестныйКэш = Кэш;
	//certificate = Действие.Сертификат[0];
	ДанныеДляПодписания = Неопределено;
	Если ПараметрыЭДО.Свойство("ДанныеДляПодписания") И ПараметрыЭДО.ДанныеДляПодписания.Количество() > 0 Тогда
		
		ДанныеДляПодписания = ПараметрыЭДО.ДанныеДляПодписания;
		Сертификат = сбисДанныеСертификата(ПараметрыЭДО.ДанныеДляПодписания[0].Сертификат);
	Иначе	
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	// Назначение этапа
	ОписаниеЭтапа = Новый Структура("Название, Идентификатор");
	ЗаполнитьЗначенияСвойств(ОписаниеЭтапа, Этап);
	
	// Назначение действие на этап
	ОписаниеДействия = Новый Структура("Название, Сертификат", Действие.Название, "");
	Если Сертификат <> Неопределено Тогда
		ОписаниеДействия.Вставить("Сертификат", Сертификат);
	КонецЕсли;	
	Если Комментарий <> "" Тогда
		ОписаниеДействия.Вставить("Комментарий", Комментарий);
	КонецЕсли;	
	ОписаниеЭтапа.Вставить("Действие", ОписаниеДействия);
	
	//document_in = Новый Структура;
	//document_in.Вставить( "Идентификатор", СоставПакета.Идентификатор );	
	//document_in.Вставить( "Этап", stage );
	//	
	//СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
	//Заголовки = сбисСформироватьЗаголовки(Кэш.Парам, Кэш.Парам.ИдентификаторСессии);
	
	// Подготовка этапа
	ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Документ", Новый Структура("Идентификатор, Этап", СоставПакета.Идентификатор, ОписаниеЭтапа)));
	Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("PrepareAction", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	//СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "/service/?srv=1", "СБИС.ПодготовитьДействие", СтруктураПараметровЗапроса, Заголовки, Ложь);
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Результат.Свойство("result") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументРезультат = Результат.result;
	
	//этап
	Если Не ДокументРезультат.Свойство("Этап") Тогда
		Возврат Ложь;
	ИначеЕсли ДокументРезультат.Этап.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ЭтапРезультат = ДокументРезультат.Этап[0];
	ОписаниеЭтапа = Новый Структура("Идентификатор, Название");
	ЗаполнитьЗначенияСвойств(ОписаниеЭтапа, ЭтапРезультат);
	Если Этап.Свойство("Исполнитель") Тогда //Добавлено, так как у документов может быть этап, связанный с исполнителем не только при работе через extSDK
		ОписаниеЭтапа.Вставить("Исполнитель", Этап.Исполнитель);
	КонецЕсли;
	
	//действие
	Если Не ЭтапРезультат.Свойство("Действие") Тогда
		Возврат Ложь;
	ИначеЕсли ЭтапРезультат.Действие.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ДействиеРезультат = ЭтапРезультат.Действие[0];
	ОписаниеДействия = Новый Структура("Идентификатор, Название, Комментарий, ТребуетПодписания", "", "", "", Истина);
	ЗаполнитьЗначенияСвойств(ОписаниеДействия, ДействиеРезультат);
	
	Сертификаты = Новый Массив;
	Если ДействиеРезультат.Свойство("Сертификат") Тогда 
		Для каждого СертификатРезультат из ДействиеРезультат.Сертификат Цикл
			Сертификаты.Добавить(Новый Структура("Отпечаток", СертификатРезультат.Отпечаток));
		КонецЦикла;
	КонецЕсли;
	ОписаниеДействия.Вставить("Сертификат", Сертификаты);
	ОписаниеЭтапа.Вставить("Действие", ОписаниеДействия);
	
	//вложения
	Вложения = Новый Массив;  
	//Если СоставПакета.Свойство("Вложение") Тогда
	//	// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
	//	ИдентификаторПодтверждаемогоЗаказа = "";
	//	Если ЭтапРезультат.Свойство("Вложение") Тогда
	//		Для каждого ВложениеРезультат из ЭтапРезультат.Вложение Цикл
	//			Если ВложениеРезультат.Свойство("Тип") и ВложениеРезультат.Тип = "ПодтверждениеЗаказа" Тогда
	//				ИдентификаторПодтверждаемогоЗаказа = ВложениеРезультат.Идентификатор;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//	Для Каждого ВложениеПакета Из СоставПакета.Вложение Цикл
	//		Если Не ВложениеПакета.Свойство("Идентификатор") Тогда
	//			НовыйИдентификатор = Строка(Новый УникальныйИдентификатор());
	//			Вложение = Новый Структура("Идентификатор", Строка(Новый УникальныйИдентификатор()));
	//			Если ВложениеПакета.Название = "Подтверждение заказа" И ЗначениеЗаполнено(ИдентификаторПодтверждаемогоЗаказа) Тогда 
	//				Вложение.Вставить("Идентификатор",  ИдентификаторПодтверждаемогоЗаказа);
	//			КонецЕсли;
	//			ВложениеФайл = Новый Структура;
	//			ВложениеФайл.Вставить("Имя", ВложениеПакета.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДатаСеанса(),"ДФ=yyyyMMdd")+"_"+Вложение.Идентификатор+".xml"); 
	//		    ВложениеФайл.Вставить("ДвоичныеДанные", сбисСтрокаВBASE64(ВложениеПакета.XMLДокумента)); 
	//			Вложение.Вставить("Файл", ВложениеФайл);
	//			Вложения.Добавить(Вложение);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//ОписаниеЭтапа.Вставить("Вложение", Вложения);
	
	Для Каждого ВложениеПакета Из ЭтапРезультат.Вложение Цикл
		Для каждого ЭлементДляПодписания Из ДанныеДляПодписания Цикл
			Если ЭлементДляПодписания.Идентификатор <> ВложениеПакета.Идентификатор Тогда
				Продолжить;
			КонецЕсли;
			
			ЭЦП = Новый Массив;
			ФайлЭЦП = Новый Структура;
			ФайлЭЦП.Вставить("Имя", ЭлементДляПодписания.ИмяФайла + ".sgn"); 
			ФайлЭЦП.Вставить("ДвоичныеДанные",сбисДвоичныеДанныеВBASE64(ПолучитьИзВременногоХранилища(ЭлементДляПодписания.АдресПодписи))); 
			ЭЦП.Добавить(Новый Структура("Файл", ФайлЭЦП));
			Вложения.Добавить(Новый Структура("Идентификатор, Подпись", ВложениеПакета.Идентификатор, ЭЦП));
		КонецЦикла;	
	КонецЦикла;	
	ОписаниеЭтапа.Вставить("Вложение", Вложения);
	
	Редакции = Новый Массив;
	Для каждого РедакцияРезультат из ДокументРезультат.Редакция Цикл
		Редакции.Добавить(Новый Структура("Идентификатор", РедакцияРезультат.Идентификатор));
	КонецЦикла;
		
	ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Документ", Новый Структура("Идентификатор, Этап, Редакция", ДокументРезультат.Идентификатор, ОписаниеЭтапа, Редакции)));
	Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("ExecuteAction", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Результат.Свойство("result") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//// Завершение этапа
	//СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
	//// Подготовка этапа
	//СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "/service/?srv=1", "СБИС.ВыполнитьДействие", СтруктураПараметровЗапроса, Заголовки);
	
	//Если НЕ СтруктураРезультата.Свойство("result") Тогда
	//	Если СтруктураРезультата.Свойство("error") Тогда
	//		Попытка
	//			ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		ТекстОшибки = "Не удалось выполнить действие.";
	//	КонецЕсли;
	//	Сообщить(ТекстОшибки);
	//	Возврат Ложь;
	//КонецЕсли;

	Возврат Истина;
КонецФункции

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-07 (#3821) - Функция сбисПолучитьФильтр сейчас  не используется. Перепишем ее под задачу 3821
Функция сбисПолучитьФильтр(Параметры = Неопределено) 
	
	// Формирует структуру фильтра для списочных методов SDK	
	//Известные значения фильтра:
	//	ТипРеестра
	//	ДатаС 
	//	ДатаПо
	//	Состояние
	//	ТипВложения
	//	НашаОрганизация
	//	Контрагент
	//	Страница
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-07 (#3821)
	//Данные = Новый Структура; 
	//Данные.Вставить( "ДопПоля", "Этап");
	//Страница = 0;	
	//РазмерСтраницы = 100;	
	//Если Параметры <> Неопределено Тогда
	//	Для Каждого Элемент Из Параметры Цикл
	//		Ключ = Элемент.Ключ;
	//		Значение = Элемент.Значение;
	//		Если СтрНайти(",РазмерСтраницы,Страница,", "," + Элемент.Ключ + ",") > 0 Тогда
	//			Продолжить;
	//		ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
	//			Значение = Формат(Значение, "ДФ=""дд.ММ.гггг""");
	//		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
	//			Ключ = "НашаОрганизация";
	//			Значение = сбисСтруктураУчастника(Значение); 
	//		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
	//			Ключ = "Контрагент";
	//			Значение = сбисСтруктураУчастника(Значение); 
	//		КонецЕсли;	
	//		Данные.Вставить(Ключ, Значение);	
	//	КонецЦикла;
	//	Если Параметры.Свойство("Страница") Тогда
	//		Страница = Параметры.Страница;	
	//	КонецЕсли;	
	//	Если Параметры.Свойство("РазмерСтраницы") Тогда
	//		Страница = Параметры.РазмерСтраницы;	
	//	КонецЕсли;	
	//КонецЕсли;
	//
	//Данные.Вставить("Навигация", Новый Структура("РазмерСтраницы, Страница", РазмерСтраницы, Страница));
	//
	//Возврат Данные;
	
	Данные = Новый Структура;
	Если Параметры <> Неопределено Тогда
		Для Каждого Элемент Из Параметры Цикл
			
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			
			Если Ключ = "ИдентификаторОрганизации" 
				Или Ключ = "Страница" 
				Или Ключ = "РазмерСтраницы" 
				Или Ключ = "ИдентификаторКонтрагента" Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
				Значение = Формат(Значение, "ДФ=""дд.ММ.гггг ЧЧ.мм.сс""");
			ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
				Ключ = "НашаОрганизация";
				Идентификатор = "";
				Если Параметры.Свойство("ИдентификаторОрганизации") Тогда
					Идентификатор = Параметры.ИдентификаторОрганизации;
				КонецЕсли;	
				Значение = сбисСтруктураУчастника(Значение, Идентификатор); 
			ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Контрагенты") Тогда 
				Ключ = "Контрагент";
				Идентификатор = "";
				Если Параметры.Свойство("ИдентификаторКонтрагента") Тогда
					Идентификатор = Параметры.ИдентификаторКонтрагента;
				КонецЕсли;	
				Значение = сбисСтруктураУчастника(Значение, Идентификатор); 
			КонецЕсли;	
			
			Данные.Вставить(Ключ, Значение);	
			
		КонецЦикла;
	КонецЕсли;
	
	Навигация = Новый Структура("Страница", 0);
	Если Параметры.Свойство("РазмерСтраницы") Тогда //по умолчанию 20
		Навигация.Вставить("РазмерСтраницы", Параметры.РазмерСтраницы);
	КонецЕсли;	
	Если Параметры.Свойство("Страница") Тогда 
		Навигация.Вставить("Страница", Параметры.Страница);
	КонецЕсли;	
	
	Данные.Вставить("Навигация", Навигация);
	
	Возврат Данные;
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-07 (#3821) 
	
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// Получение ЭД

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-07 (#3821)
// ДопПараметры
//		{Если в ДопПараметры передано свойство СтруктураДляПолученияЭДПоКонтрагенту, 
//			то СтруктураДляПолученияЭДПоКонтрагенту имеет структуру
//		ИдентификаторКонтрагента 	- Строка 					- Обязательно заполнена
//		ИдентификаторОрганизации 	- Строка 					- Обязательно заполнена
//		Контрагент				 	- Справочник.Контрагенты 	- Обязательно заполнена
//		Организация 			 	- Справочник.Организации	- Обязательно заполнена
//		ДатаС 						- Дата 						- Обязательно заполнена
//		ДатаПо 						- Дата 						- Обязательно заполнена
//		}
//
//Функция ПолучитьЭлектронныеДокументыОператораЭДО(Маркер, Соединение, АдресРесурса, ПовторноеПолучение = Ложь, ПараметрыЭДО, ДатаПоследнегоЗапроса = Неопределено) 
Функция ПолучитьЭлектронныеДокументыОператораЭДО(Маркер, Соединение, АдресРесурса, ПовторноеПолучение = Ложь, ПараметрыЭДО, ДатаПоследнегоЗапроса = Неопределено, ДопПараметры = Неопределено)
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-07 (#3821) 	
	
	Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		Если Лев(АдресРесурса, 14) = "GetMessageList" Тогда
			МассивДокументов = Новый Массив;
			//ПараметрыФильтра = Новый Структура("Организация, ДатаПоследнегоЗапроса", ПараметрыЭДО.Организация, ДатаПоследнегоЗапроса);
			ПараметрыФильтра = Новый Структура("Организация, ИдентификаторОрганизации, ДатаПоследнегоЗапроса", ПараметрыЭДО.Организация, ПараметрыЭДО.ИдентификаторОрганизации, ДатаПоследнегоЗапроса);
			ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Фильтр", сбисПолучитьФильтрСписокИзменений(ПараметрыФильтра)));
			ПродолжатьЗапросы = Истина;
			ПервыйЗапрос = Истина;
			Пока ПродолжатьЗапросы Цикл
				Если Не ПервыйЗапрос Тогда
					Если МассивДокументов.Количество() = 0 Тогда
						Прервать;
					КонецЕсли;	
					ПоследнийДокумент = МассивДокументов[МассивДокументов.Количество() - 1];
					Если ПоследнийДокумент.Свойство("Событие") Тогда
						ПараметрыФильтра.Вставить("ИдентификаторСобытия", ПоследнийДокумент.Событие[ПоследнийДокумент.Событие.Количество() - 1].Идентификатор);
						ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Фильтр", сбисПолучитьФильтрСписокИзменений(ПараметрыФильтра)));
					Иначе
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
				Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции(АдресРесурса, ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
				Если Результат = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;	
				ПервыйЗапрос = Ложь;
				Если Не Результат.Свойство("result") Тогда //неожиданный результат, нужно останавливать загрузку, а то будет сдвигаться дата получения изменений
					Возврат Неопределено;
				КонецЕсли;	
				ПродолжатьЗапросы = (Результат.result.Навигация.ЕстьЕще = "Да");
				Для Каждого Документ Из Результат.result.Документ Цикл
					МассивДокументов.Добавить(Документ);
				КонецЦикла;
			КонецЦикла;	
			
			Если МассивДокументов.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	
			Возврат МассивДокументов;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-07 (#3821)
		ИначеЕсли Лев(АдресРесурса, 21) = "GetPartnerMessageList" 
			И ТипЗнч(ДопПараметры) = Тип("Структура") 
			И ДопПараметры.Свойство("СтруктураДляПолученияЭДПоКонтрагенту") 
			И ТипЗнч(ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту) = Тип("Структура") Тогда
			
			МассивДокументов = Новый Массив;
			
			ПараметрыФильтра = Новый Структура();
			ПараметрыФильтра.Вставить("ДатаС",						ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ДатаС);
			ПараметрыФильтра.Вставить("ДатаПо", 					ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ДатаПо);
			ПараметрыФильтра.Вставить("Организация",				ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.Организация);
			ПараметрыФильтра.Вставить("ИдентификаторОрганизации", 	ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ИдентификаторОрганизации);
			ПараметрыФильтра.Вставить("Контрагент",					ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.Контрагент);
			ПараметрыФильтра.Вставить("ИдентификаторКонтрагента",	ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ИдентификаторКонтрагента);
			ПараметрыФильтра.Вставить("ТипРеестра", 				"Входящие");
			
			ПродолжатьЗапросы = Истина;
			Страница = 0;
			
			Пока ПродолжатьЗапросы Цикл
				
				Если Страница > 0 И МассивДокументов.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ПараметрыФильтра.Вставить("Страница", Страница);
				
				ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Фильтр", сбисПолучитьФильтр(ПараметрыФильтра)));
				
				Результат = ок_ОбменСКонтрагентамиВнутренний.сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetPartnerMessageList", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
				Если Результат = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Если Не Результат.Свойство("result") Тогда //неожиданный результат, нужно останавливать загрузку, а то будет сдвигаться дата получения изменений
					Возврат Неопределено;
				КонецЕсли;	
				
				Страница = Страница + 1;
				ПродолжатьЗапросы = (Результат.result.Навигация.ЕстьЕще = "Да");
				
				Для Каждого ЗаписьРеестра Из Результат.result.Реестр Цикл
					
					Если ЗаписьРеестра.Документ.Редакция[0].Актуален = "Да" Тогда
						ПараметрыЗапросаДляДокумента = Новый Структура();
						ПараметрыЗапросаДляДокумента.Вставить("ПараметрыЗапроса", Новый Структура("Документ", Новый Структура("Идентификатор", ЗаписьРеестра.Документ.Идентификатор)));
						РезультатПоДокументу = ок_ОбменСКонтрагентамиВнутренний.сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetMessage", ПараметрыЭДО, ПараметрыЗапросаДляДокумента), ПараметрыЭДО);
						Если РезультатПоДокументу = Неопределено Тогда
							Продолжить;
						ИначеЕсли Не РезультатПоДокументу.Свойство("result") Тогда
							Продолжить;
						КонецЕсли;
						МассивДокументов.Добавить(РезультатПоДокументу.result);
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
			
			Если МассивДокументов.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Возврат МассивДокументов;
			
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-07 (#3821)
		КонецЕсли;	
		
		Возврат Неопределено;
		//ПараметрыКоманды = Неопределено;
		//Возврат сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции(АдресРесурса, ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	КонецЕсли;	
	
	Возврат Неопределено;
	
	//ИмяФайлаРезультата = Неопределено;
	//Если ЗначениеЗаполнено(Маркер) Тогда
	//	Заголовки = "";
	//	ДобавитьПараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
	//	ИмяФайлаРезультата = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	//	Попытка
	//		Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
	//	Исключение
	//		// Если возникла ошибка по причине истечения времени действия маркера,
	//		// то пробуем получить новый маркер и повторить попытку получения ЭД.
	//		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	//		ИмяФайлаРезультата = Неопределено;
	//		
	//		// Повторное получение ЭД. Только одна попытка.
	//		ПовторноеПолучение = Не ПовторноеПолучение;
	//		
	//		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//		ТекстСообщения = НСтр("ru = 'Ошибка получения входящих электронных документов на сервере оператора ЭДО.'");
	//		Операция = НСтр("ru = 'Получение ЭД'");
	//		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
	//	КонецПопытки;
	//КонецЕсли;
	//Возврат ИмяФайлаРезультата;
	
КонецФункции

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
//Функция сбисПолучитьДанныеВходящегоЭД(ИДОрганизация, ИДКонтрагент, ИДДокумента, ДанныеТранзакции)
Функция ПолучитьДействующиеНастройкиОбменаЭД(ИДОрганизация, ИДКонтрагент, ИДДокумента, ДанныеТранзакции)
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3337)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров = Неопределено;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//НастройкиСоглашения = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(ИДОрганизация, ИДКонтрагент);
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
	Если НРег(ДанныеТранзакции.Направление) = "входящий" Тогда
		
		НастройкиСоглашения = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиПолученияЭДПоИД(ИДКонтрагент, 
																							ИДОрганизация, 
																							Неопределено,
																							Неопределено,
																							Ложь,
																							Истина);
																							
		
		Если НастройкиСоглашения.ПараметрыНастройки = Неопределено Тогда
			НастройкиСоглашения = Неопределено;
		Иначе
			НастройкиСоглашения.Вставить("ПрофильНастроекЭДО", 	ИДОрганизация);
			НастройкиСоглашения.Вставить("СпособОбменаЭД",		НастройкиСоглашения.ПараметрыНастройки.СпособОбменаЭД);
			НастройкиСоглашения.Вставить("НастройкаЭДО",		Новый Структура("Отправитель, Получатель", ИДКонтрагент, ИДОрганизация));
			НастройкиСоглашения.Вставить("АдресОтправителя",	"");
			НастройкиСоглашения.Вставить("АдресПолучателя",		"");
			НастройкиСоглашения.Вставить("Организация",			НастройкиСоглашения.ПараметрыНастройки.Организация);
			НастройкиСоглашения.Вставить("Контрагент",			НастройкиСоглашения.ПараметрыНастройки.Контрагент);
		КонецЕсли;
	Иначе	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879) 
		НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДОрганизация, ИДКонтрагент);
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
	КонецЕсли;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	Если НастройкиСоглашения <> Неопределено Тогда
		
		////Если Не ПроверитьДействиеНастройкиЭДО(НастройкиСоглашения.НастройкаЭДО, ДанныеТранзакции.Дата) Тогда 
		//Если Не ПроверитьДействиеНастройкиЭДО(НастройкиСоглашения.НастройкаЭДО, ДанныеТранзакции.Событие_ДатаВремя) Тогда 
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
		//Если Не ПроверитьДействиеНастройкиЭДО(НастройкиСоглашения.НастройкаЭДО, ДанныеТранзакции.Дата) Тогда //20190410 все не могут определиться что им нужно
		Если Не ПроверитьДействиеНастройкиЭДО(НастройкиСоглашения.НастройкаЭДО, ДанныеТранзакции) Тогда 
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3337)
			Возврат СтруктураПараметров;
		КонецЕсли;	
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиСоглашения.ПрофильНастроекЭДО);
		СтруктураПараметров.Вставить("СпособОбменаЭД",      НастройкиСоглашения.СпособОбменаЭД);
		СтруктураПараметров.Вставить("НастройкаЭДО",        НастройкиСоглашения.НастройкаЭДО);
		СтруктураПараметров.Вставить("Получатель",          ИДОрганизация);
		СтруктураПараметров.Вставить("Отправитель",         ИДКонтрагент);
		СтруктураПараметров.Вставить("АдресОтправителя",    НастройкиСоглашения.АдресОтправителя);
		СтруктураПараметров.Вставить("АдресПолучателя",     НастройкиСоглашения.АдресПолучателя);
		СтруктураПараметров.Вставить("Организация",         НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",          НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("Зашифрован",          Ложь); // Шифрование данных через Оператора не поддерживается.
		СтруктураПараметров.Вставить("СертификатОрганизацииДляРасшифровки", Неопределено);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия30);
		СтруктураПараметров.Вставить("ВнешнийУИД",          ИДДокумента);
		СтруктураПараметров.Вставить("СтатусПакета",        Перечисления.СтатусыПакетовЭД.КРаспаковке);
		СтруктураПараметров.Вставить("НаправленияЭД",       Перечисления.НаправленияЭД.Входящий);
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
		//ВременнаяСтруктура = ДанныеТранзакции;
		ВременнаяСтруктура = Новый Структура("Событие_ДатаВремя,КодТранзакции,Событие_Комментарий,Название,Сумма,Направление,Удален,Дата,ДатаВремяСоздания");
		ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, ДанныеТранзакции);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3337)
		
		СтруктураПараметров.Вставить("ок_ДатаТранзакции", ВременнаяСтруктура.Событие_ДатаВремя);
		СтруктураПараметров.Вставить("ок_КодТранзакции", ВременнаяСтруктура.КодТранзакции);
		СтруктураПараметров.Вставить("Комментарий", ВременнаяСтруктура.Событие_Комментарий);
		СтруктураПараметров.Вставить("ок_Наименование", ВременнаяСтруктура.Название);
		Сумма = 0;
		Если ТипЗнч(ВременнаяСтруктура.Сумма) = Тип("Строка") Тогда
			Попытка 
				Сумма = Число(ВременнаяСтруктура.Сумма);
			Исключение
			КонецПопытки;
		КонецЕсли;	
		СтруктураПараметров.Вставить("ок_Сумма", Сумма);
		Если ВременнаяСтруктура.Направление <> "Входящий" Тогда
			СтруктураПараметров.Вставить("НаправленияЭД", Перечисления.НаправленияЭД.Исходящий);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ок_Удален", ВременнаяСтруктура.Удален);
		СтруктураПараметров.Вставить("ок_Дата", ВременнаяСтруктура.Дата);
		//СтруктураПараметров.Вставить("ок_ДатаВремяСоздания", ДанныеТранзакции.ДатаВремяСоздания);
		//СтруктураПараметров.Вставить("ок_ДатаРедакции", ДанныеТранзакции.ДатаРедакции);
		СтруктураПараметров.Вставить("ок_ДатаРедакции", ВременнаяСтруктура.ДатаВремяСоздания);
		
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
		СтруктураПараметров.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-21 (#3849)
		Если ТипЗнч(ДанныеТранзакции) = Тип("СтрокаТаблицыЗначений")
			И ДанныеТранзакции.Владелец().Колонки.Найти("ИДДокументооборота") <> Неопределено Тогда
			СтруктураПараметров.Вставить("ок_УИДДокументаОператораЭДО", ДанныеТранзакции.ИДДокументооборота);
		КонецЕсли;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-21 (#3849)
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-31 (#4181)
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеТранзакции, "ок_АктуальнаяРедакция") Тогда
			СтруктураПараметров.Вставить("ок_АктуальнаяРедакция", ДанныеТранзакции.ок_АктуальнаяРедакция);
		КонецЕсли;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-31 (#4181)
		
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеТранзакции, "ок_КорреспонденцияВходящая") Тогда
			СтруктураПараметров.Вставить("ок_КорреспонденцияВходящая", ДанныеТранзакции.ок_КорреспонденцияВходящая);
		КонецЕсли;
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// ДопПараметры
//		{Если в ДопПараметры передано свойство СтруктураДляПолученияЭДПоКонтрагенту, 
//			то СтруктураДляПолученияЭДПоКонтрагенту имеет структуру
//		ИдентификаторКонтрагента 	- Строка 					- Обязательно заполнена
//		ИдентификаторОрганизации 	- Строка 					- Обязательно заполнена
//		Контрагент				 	- Справочник.Контрагенты 	- Обязательно заполнена
//		Организация 			 	- Справочник.Организации	- Обязательно заполнена
//		ДатаС 						- Дата 						- Обязательно заполнена
//		ДатаПо 						- Дата 						- Обязательно заполнена
//		}
Процедура ПолучитьНовыеЭДОператораЭДО(
			СтруктураВозврата,
			СоотвСоглашенийИСтруктурСертификатов,
			ПолучитьВесьСписок = Ложь,
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-07 (#3821)
			//ПовторноеПолучение = Ложь) Экспорт
			ПовторноеПолучение = Ложь,
			ДопПараметры = Неопределено) Экспорт
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-07 (#3821)
			
			
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2021-02-05 (#4056)
	// получим настройку для перехода в алгоритм работы с новой версией получения событий
	Версия = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЭДО", "ВерсияПолученияСобытийОператораСБИС", "2020");
	Если Версия = "2021_0205" Тогда
		ПолучитьНовыеЭДОператораЭДО_2021(СтруктураВозврата,
			СоотвСоглашенийИСтруктурСертификатов,
			ПолучитьВесьСписок,
			ПовторноеПолучение,
			ДопПараметры);
		Возврат;	
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2021-02-05 (#4056)
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-10 (#3821)
	ИдентификаторОрганизацииДляОтбора = "";
	ПолучитьЭДПоКонтрагенту = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("СтруктураДляПолученияЭДПоКонтрагенту")
		И ТипЗнч(ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту) = Тип("Структура") Тогда
		ИдентификаторОрганизацииДляОтбора = ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ИдентификаторОрганизации;
		ПолучитьЭДПоКонтрагенту = Истина;
	КонецЕсли;
	
	Если ПолучитьЭДПоКонтрагенту И Не ЗначениеЗаполнено(ИдентификаторОрганизацииДляОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	ВестиПодсчетКоличествоОбъектов = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("КоличествоОбъектовСОшибками")
		И ТипЗнч(ДопПараметры.КоличествоОбъектовСОшибками) = Тип("Число")
		И ДопПараметры.Свойство("КоличествоОбъектов")
		И ТипЗнч(ДопПараметры.КоличествоОбъектов) = Тип("Число")
	Тогда
		ВестиПодсчетКоличествоОбъектов = Истина;
	КонецЕсли;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-10 (#3821)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//"ВЫБРАТЬ
	//|	ПрофилиНастроекЭДОЧерезОЭДО.Ссылка КАК ПрофильНастроекЭДО,
	//|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПолученияЭД КАК ДатаПолученияЭД
	//|ИЗ
	//|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДОЧерезОЭДО
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	//|		ПО (СостоянияОбменовЭДЧерезОператоровЭДО.ПрофильНастроекЭДО = ПрофилиНастроекЭДОЧерезОЭДО.Ссылка)
	//|ГДЕ
	////|	ПрофилиНастроекЭДОЧерезОЭДО.СпособОбменаЭД В (ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском), ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО))
	//|	ИСТИНА
	//|	И НЕ ПрофилиНастроекЭДОЧерезОЭДО.ПометкаУдаления";
	"ВЫБРАТЬ
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ИдентификаторОрганизации КАК ПрофильНастроекЭДО,
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПолученияЭД КАК ДатаПолученияЭД
	|ИЗ
	|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-10 (#3821)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ИдентификаторОрганизации = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СостоянияОбменовЭДЧерезОператоровЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|		КОНЕЦ
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-10 (#3821)
	|";
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-10 (#3821)
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизацииДляОтбора);
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-10 (#3821)
	
	ТаблицаДатПолученияЭД = Запрос.Выполнить().Выгрузить();
	
	//ИдентификаторыЭДО = Новый Массив;
	Для Каждого Элемент Из СоотвСоглашенийИСтруктурСертификатов Цикл
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-10 (#3821)
		Если ПолучитьЭДПоКонтрагенту = Истина 
			И Элемент.Ключ <> ИдентификаторОрганизацииДляОтбора Тогда
			Продолжить;	
		КонецЕсли;	
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-10 (#3821)
		
		ПрофильНастроекЭДО = Элемент.Ключ;
		СтруктураСертификата = Элемент.Значение;
		
		Если ТипЗнч(СтруктураСертификата) <> Тип("Структура") ИЛИ (Не СтруктураСертификата.Свойство("ок_СпособОбменаЭД")) Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(СтруктураСертификата.ок_СпособОбменаЭД) Тогда
			Продолжить;
		КонецЕсли;	
		Если ТипЗнч(СтруктураСертификата.СпособОбменаЭД) <> Тип("ПеречислениеСсылка.ок_СпособыОбменаЭД") Тогда
			СтруктураСертификата.СпособОбменаЭД = СтруктураСертификата.ок_СпособОбменаЭД;
		КонецЕсли;	
		
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		ПарольКСертификату = Неопределено;
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
			И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
			И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
			СтруктураСертификата.Свойство("ПарольПользователя", ПарольКСертификату);
			Если НЕ ЗначениеЗаполнено(МаркерРасшифрованный) И ПарольКСертификату = Неопределено
				ИЛИ НЕ ОбменСКонтрагентамиСлужебный.РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтруктураСертификата) Тогда
				Продолжить;
			Иначе
				МаркерРасшифрованный = СтруктураСертификата.МаркерРасшифрованный;
			КонецЕсли;
		//Иначе
		//	Продолжить;
		КонецЕсли;
		
		ДатаВремяЗапроса = Неопределено;
		СтрокаТаблицы = ТаблицаДатПолученияЭД.Найти(ПрофильНастроекЭДО);
		Если СтрокаТаблицы <> Неопределено Тогда
			ДатаВремяЗапроса = СтрокаТаблицы.ДатаПолученияЭД;
		КонецЕсли;
		
		СтруктураВозврата.Профили.Добавить(ПрофильНастроекЭДО);
		
		Соединение = ПолучитьСоединение(СтруктураСертификата.ок_СпособОбменаЭД, СтруктураСертификата);
		Маркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(МаркерРасшифрованный);
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-22 (#4056)
		ЗагружатьДопФайлы = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЭДО", "ЗагружатьДопФайлы", Ложь);
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-22 (#4056) 
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-10 (#3821) 
		//СдвигатьДату = Истина;
		СдвигатьДату = ?(ПолучитьЭДПоКонтрагенту = Истина, Ложь, Истина);
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-10 (#3821) 
		ПолученыВсеДокументы = Ложь;
		Пока Не ПолученыВсеДокументы Цикл
			
			//ДатаВремяЗапроса = Формат(ДатаВремяЗапроса, "ДФ='yyyy-MM-dd HH:mm:ss'");
			//АдресРесурса = "GetMessageList" + ?(ЗначениеЗаполнено(ДатаВремяЗапроса), "?date=" + ДатаВремяЗапроса, "");
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
			НачалоЗамера = ТекущаяДатаСеанса();
			ОтразитьЗаписьЛогаОценкиПроизводительности("Начало получения событий ЭДО, профиль: " + ПрофильНастроекЭДО);
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)
			
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-07 (#3821)
			//СписокЭД_XML = ПолучитьЭлектронныеДокументыОператораЭДО(Маркер, Соединение, "GetMessageList", ПовторноеПолучение, СтруктураСертификата, ДатаВремяЗапроса);
			Если ПолучитьЭДПоКонтрагенту Тогда
				СписокЭД_XML = ПолучитьЭлектронныеДокументыОператораЭДО(Маркер, Соединение, "GetPartnerMessageList", ПовторноеПолучение, СтруктураСертификата, ДатаВремяЗапроса, ДопПараметры);
			Иначе
				СписокЭД_XML = ПолучитьЭлектронныеДокументыОператораЭДО(Маркер, Соединение, "GetMessageList", ПовторноеПолучение, СтруктураСертификата, ДатаВремяЗапроса);
			КонецЕсли;
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-07 (#3821)
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
			КоличествоСобытий = 0;
			Если СписокЭД_XML <> Неопределено Тогда
				КоличествоСобытий = СписокЭД_XML.Количество();
			КонецЕсли;
			ОтразитьЗаписьЛогаОценкиПроизводительности("Конец получения событий ЭДО, профиль: " + ПрофильНастроекЭДО + "; Длительность (сек.): " 
															+ Строка(ТекущаяДатаСеанса() - НачалоЗамера) + "; Количество событий: " + КоличествоСобытий);
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)
			
			Если СписокЭД_XML = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
			НачалоЗамера = ТекущаяДатаСеанса();
			ОтразитьЗаписьЛогаОценкиПроизводительности("Начало проверки соответствия событий ЭДО существующим настройкам и получение файлов - доппредставлений, профиль: " + ПрофильНастроекЭДО);
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)
			
			СписокИДДокументов = Новый Массив;
			Если СтруктураСертификата.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда 
				ДатаВремяЗапроса = СбисРазобратьТекстСпискаЭД(СписокЭД_XML, СписокИДДокументов, СтруктураСертификата); 
			КонецЕсли;	
			//ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СписокЭД_XML);
			//Возврат;
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
			ОтразитьЗаписьЛогаОценкиПроизводительности("Конец проверки соответствия событий ЭДО существующим настройкам и получение файлов - доппредставлений, профиль: " + ПрофильНастроекЭДО + "; Длительность (сек.): " 
															+ Строка(ТекущаяДатаСеанса() - НачалоЗамера) + "; Количество событий: " + СписокИДДокументов.Количество());
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)
			
			Если СписокИДДокументов.Количество() = 0 Тогда
				ПолученыВсеДокументы = Истина;
				Прервать;
			КонецЕсли;
					
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
			НачалоЗамера = ТекущаяДатаСеанса();
			ОтразитьЗаписьЛогаОценкиПроизводительности("Начало создания пакетов ЭДО, профиль: " + ПрофильНастроекЭДО);
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)
			
			Для Каждого Стр Из СписокИДДокументов Цикл
				
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-02-20 (#3614)
				//Если НЕ ПакетЭДУжеЗагружен(Стр.ИДДокумента) Тогда
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-22 (#4056)
				//Если НЕ ПакетЭДУжеЗагружен(Стр.ИДДокумента, ПрофильНастроекЭДО) Тогда
				Если НЕ ПакетЭДУжеЗагружен2021(Стр.ИДДокумента,Стр.КодТранзакции, Стр.Событие_Датавремя, ПрофильНастроекЭДО) Тогда				
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-22 (#4056) 
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-02-20 (#3614)
					
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
					//СтруктураПараметров = Неопределено;
					//Если СтруктураСертификата.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
					//	//проверяем что есть действующее соглашение ЭДО, иначе нет смысла скачивать
					//	СтруктураПараметров = сбисПолучитьДанныеВходящегоЭД(Стр.ИДОрганизация, Стр.ИДКонтрагент, Стр.ИДДокумента, Стр);
					//	Если СтруктураПараметров = Неопределено Тогда
					//		Продолжить;
					//	КонецЕсли;
					//КонецЕсли;
					СтруктураПараметров = ПолучитьДействующиеНастройкиОбменаЭД(Стр.ИДОрганизация, Стр.ИДКонтрагент, Стр.ИДДокумента, Стр);
					Если СтруктураПараметров = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3337)
					
					//ФайлЭД = ПолучитьЭДОператораЭДО(Маркер, Соединение, СтруктураСертификата, Стр.ИДДокумента, ПовторноеПолучение);
					//ФайлЭД = ПолучитьЭДОператораЭДО(Маркер, Соединение, СтруктураСертификата, Стр.ИДДокументооборота, ПовторноеПолучение);
					ФайлЭД = ПолучитьЭДОператораЭДО(Маркер, Соединение, СтруктураСертификата, Стр.СсылкаНаАрхив, ПовторноеПолучение);
					
					Если ФайлЭД = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-22 (#4056)
					Если ЗагружатьДопФайлы Тогда
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-22 (#4056) 
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-08 (#3509)
					//в архиве может быть не все
					//докидываем в архив дополнительные файлы
					Если ЗначениеЗаполнено(Стр.ДополнительныеФайлы) Тогда
						
						ДопФайлы = Новый Соответствие;
						Для каждого ДополнительныйФайл из Стр.ДополнительныеФайлы Цикл
							
							Для й = 1 по 20 Цикл
								
								ДопФайлЭД = ПолучитьЭДОператораЭДО(Маркер, Соединение, СтруктураСертификата, ДополнительныйФайл.Значение);
								Если ДопФайлЭД = Неопределено Тогда
									Прервать;
								КонецЕсли;
								
								ОшибкаПолученияФайла = Ложь;
								ВременныйФайл = Новый Файл(ДопФайлЭД);
								Если ВременныйФайл.Существует() Тогда
									
									Если ВременныйФайл.Размер() > 1000 Тогда //ответ "подождать" размером 513 байтов, ответ поврежден файл\неверный формат 537 байт
										Прервать;
									Иначе
										ОшибкаПолученияФайла = Истина;
									КонецЕсли;	
									
								Иначе	
									
									ДопФайлЭД = Неопределено;
									ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ДопФайлЭД);
								
								КонецЕсли;
								
								ТД = ТекущаяДата();
								Пока ТекущаяДата() < ТД + 3 Цикл //пауза
									Продолжить;
								КонецЦикла;	
								
							КонецЦикла;
							
							Если ДопФайлЭД = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							Если ОшибкаПолученияФайла Тогда //сохраним файл-ошибку
								ДопФайлы.Вставить("Ошибка_" + ДополнительныйФайл.Ключ + ".txt", ДопФайлЭД);
								Продолжить;
							КонецЕсли;	

							ДопФайлы.Вставить(ДополнительныйФайл.Ключ, ДопФайлЭД);
														
						КонецЦикла;
						
						Если ДопФайлы.Количество() > 0 Тогда
							
							ПодкаталогАрхива = "";
							ФильтрРасширенийХэширования = "";
							Если СтруктураСертификата.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
								ПодкаталогАрхива = "PDF";
								ФильтрРасширенийХэширования = "pdf";
							КонецЕсли;	
							
							ДобавитьДополнительныеФайлыВАрхив(ФайлЭД, ДопФайлы, ПодкаталогАрхива, ФильтрРасширенийХэширования);
				
							Для каждого ДопФайлЭД из ДопФайлы Цикл
								ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ДопФайлЭД.Значение);
							КонецЦикла;	
							
						КонецЕсли;	
						
					КонецЕсли;	
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-08 (#3509)
					
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-22 (#4056)
					КонецЕсли; //ЗагружатьДопФайлы
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-22 (#4056) 
					
					//Если ФайлЭД <> Неопределено Тогда
						ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ФайлЭД);
						
						//будет нужно если как у 1с из данных нужно определять настройку ЭДО
						//СтруктураПараметров = ПолучитьДанныеВходящегоЭД(ДвоичныеДанныеЭлемента,
						//												Стр.КодТранзакции,
						//												Стр.ИДДокументооборота,
						//												Стр.ИДДокумента);
																		
						Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
							//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
							//ПакетЭД = ОбменСКонтрагентамиСлужебный.СформироватьНовыйПакетЭД(СтруктураПараметров);
							//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-01 (#3821)
							Если ПолучитьЭДПоКонтрагенту Тогда
								СтруктураПараметров.СтатусПакета = Перечисления.СтатусыПакетовЭД.РаспакованДокументыНеОбработаны;
							КонецЕсли;
							//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-01 (#3821)
							ПакетЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПакетЭД(СтруктураПараметров);
							//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
							
							Если ЗначениеЗаполнено(ПакетЭД.Ссылка) Тогда
								
								ИмяФайла = "EDI_" + СтруктураПараметров.ВнешнийУИД + "_" + Стр.ИДДокументооборота;
								АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
								
								ПараметрыФайла = Новый Структура();
								ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
								ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД.Ссылка);
								ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайла);
								ПараметрыФайла.Вставить("РасширениеБезТочки", "zip");
								ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

								ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
									ПараметрыФайла, АдресВХранилище);
						
								СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
								
							Иначе
								СдвигатьДату = Ложь;
							КонецЕсли;
						//ИначеЕсли Стр.КодТранзакции = "PostDateConfirmation"
						//	ИЛИ Стр.КодТранзакции = "SendConfirmation"
						//	ИЛИ Стр.КодТранзакции = "ReceiveNoticePostDateConfirmation"
						//	ИЛИ Стр.КодТранзакции = "CustomerInformationPostDateConfirmation" Тогда
						//	СдвигатьДату = Ложь;
						//Иначе
						//	СохранитьНеизвестныйПакет(ДвоичныеДанныеЭлемента, ПрофильНастроекЭДО, Стр.ИДДокумента);
						КонецЕсли;
						ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлЭД);
					//КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
			ОтразитьЗаписьЛогаОценкиПроизводительности("Конец создания пакетов ЭДО, профиль: " + ПрофильНастроекЭДО + "; Длительность (сек.): " 
															+ Строка(ТекущаяДатаСеанса() - НачалоЗамера));
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)
			
			Если СдвигатьДату И ЗначениеЗаполнено(ДатаВремяЗапроса) И СписокИДДокументов.Количество() > 0 Тогда
				
				Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
				//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
				//Запись.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
				Запись.ИдентификаторОрганизации = ПрофильНастроекЭДО;
				//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
				Запись.Прочитать();
				//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-24 (#3816)
				Запись.ИдентификаторОрганизации = ПрофильНастроекЭДО;
				//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-24 (#3816)
				Запись.ДатаПолученияЭД = ДатаВремяЗапроса;
				Запись.Записать();
			КонецЕсли;
			
			//цикл получения реализован на другом уровне
			ПолученыВсеДокументы = Истина;
			
		КонецЦикла;
		
		//Если ПолученыВсеДокументы И ПараметрыПрофиляНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		//	 ИдентификаторыЭДО.Добавить(ПараметрыПрофиляНастроекЭДО.ИдентификаторОрганизации);
		//КонецЕсли;
		
	КонецЦикла;
	
	ПовторноеПолучение = Ложь;
	
	//СтруктураВозврата.Вставить("ИдентификаторыЭДО", ИдентификаторыЭДО);
	
КонецПроцедуры

//Функция ПолучитьЭДОператораЭДО(Маркер, Соединение, ПараметрыЭДО, ИДДокумента, ПовторноеПолучение = Ложь)
Функция ПолучитьЭДОператораЭДО(Маркер, Соединение, ПараметрыЭДО, СсылкаНаАрхив, ПовторноеПолучение = Ложь)
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-21 (#3849)
	Экспорт
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-21 (#3849)
	
	ИмяФайлаРезультат = Неопределено;
	//Документ = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetMessage", ПараметрыЭДО, Новый Структура("ПараметрыЗапроса", Новый Структура("Идентификатор", ИДДокумента))), ПараметрыЭДО);
	//Если Документ = Неопределено Тогда
	//	Возврат Неопределено;
	//ИначеЕсли Не Документ.Свойство("СсылкаНаАрхив") ИЛИ ПустаяСтрока(Документ.СсылкаНаАрхив) Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("zip");
	//ИмяФайлаРезультат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetFileOnURL", ПараметрыЭДО, Новый Структура("Get, URL, ИмяФайла", Истина, Документ.СсылкаНаАрхив, ИмяФайла)), ПараметрыЭДО);
	Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		ИмяФайлаРезультат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetFileOnURL", ПараметрыЭДО, Новый Структура("Get, URL, ИмяФайла", Истина, СсылкаНаАрхив, ИмяФайла)), ПараметрыЭДО);
	КонецЕсли;	
	
	Если ИмяФайлаРезультат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяФайлаРезультат;
	
	//ИмяФайлаРезультата = Неопределено;
	//Если ЗначениеЗаполнено(Маркер) Тогда
	//	АдресРесурса = "GetMessage/" + ИДДокумента;
	//	Заголовки = "";
	//	
	//	//ДобавитьПараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
	//	ИмяФайлаРезультата = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	//	Попытка
	//		Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
	//	Исключение
	//		// Если возникла ошибка по причине истечения времени действия маркера,
	//		// то пробуем получить новый маркер и повторить попытку получения ЭД.
	//		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	//		ИмяФайлаРезультата = Неопределено;
	//		
	//		// Повторное получение ЭД. Только одна попытка.
	//		ПовторноеПолучение = Не ПовторноеПолучение;
	//	КонецПопытки;
	//КонецЕсли;
	//
	//Возврат ИмяФайлаРезультата;
	
КонецФункции

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-02-20 (#3614)
//Функция ПакетЭДУжеЗагружен(ИДДокумента)
Функция ПакетЭДУжеЗагружен(ИДДокумента, ПрофильНастроекЭДО = Неопределено)
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-02-20 (#3614)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-19 (#4056)
	//"ВЫБРАТЬ
	"ВЫБРАТЬ ПЕРВЫЕ 1
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-19 (#4056) 
	|	ПакетЭД.Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ВнешнийУИД = &ВнешнийУИД
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-02-20 (#3614)
	|	И НЕ ПакетЭД.ПометкаУдаления
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-10 (#3821) 
	//|	И (ПакетЭД.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
	|	И (ПакетЭД.Получатель = &ПрофильНастроекЭДО
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-10 (#3821) 
	|			ИЛИ &ПоВсемПрофилям)
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-02-20 (#3614)
	|";
	//|	И ПакетЭД.Направление = &Направление";
	//Запрос.УстановитьПараметр("Направление", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("ВнешнийУИД",  ИДДокумента);
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-02-20 (#3614)
	Запрос.УстановитьПараметр("ПрофильНастроекЭДО",  ПрофильНастроекЭДО);
	Запрос.УстановитьПараметр("ПоВсемПрофилям",  ПрофильНастроекЭДО = Неопределено);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-02-20 (#3614)

	РезультатПустой = Запрос.Выполнить().Пустой();
	
	Возврат НЕ РезультатПустой;
	
КонецФункции

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
//Функция ПолучитьДанныеВходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат = Неопределено) Экспорт
Функция ПолучитьДанныеВходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат = Неопределено, ДокументыКПодписанию = Неопределено) Экспорт
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849)	
	
	Данные = Новый Соответствие;
	Для каждого Документ из ВыделенныеСтроки Цикл
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		//Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ПрофильНастроекЭДО,УникальныйИД,ПричинаОтклонения,ок_ДатаРедакции");
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ИдентификаторОрганизации,УникальныйИД,ПричинаОтклонения,ок_ДатаРедакции");
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
		Если не ЗначениеЗаполнено(Реквизиты.УникальныйИД) Тогда
			Продолжить;
		КонецЕсли;
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		//ПараметрыЭДО = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(Реквизиты.ПрофильНастроекЭДО);
		ПараметрыЭДО = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(Реквизиты.ИдентификаторОрганизации);
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
		ДанныеДляПодписания = Неопределено;
		Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
			//ДанныеДляПодписания = сбисПолучитьДанныеДляПодписания(ПараметрыЭДО, Реквизиты.УникальныйИД, Сертификат, ?(ПустаяСтрока(Реквизиты.ПричинаОтклонения), "Утвердить", "Отклонить"), Реквизиты.ПричинаОтклонения);
			ДанныеДляПодписания = сбисПолучитьДанныеДляПодписания(ПараметрыЭДО, Реквизиты.УникальныйИД, Сертификат, ?(ПустаяСтрока(Реквизиты.ПричинаОтклонения), "Утвердить", "Отклонить"), Реквизиты.ПричинаОтклонения, ДокументыКПодписанию, Документ);
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849)
		КонецЕсли;
		Если ДанныеДляПодписания = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим что файлы для подписания соответствуют файлам в базе данных
		Если ПроверитьДанныеДляПодписания(Документ, ДанныеДляПодписания, Реквизиты.ок_ДатаРедакции) Тогда
			Данные.Вставить(Документ, ДанныеДляПодписания);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПроверитьДанныеДляПодписания(Документ, ДанныеДляПодписания, Версия)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Данные.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА Данные.ДатаФормированияЭДОтправителем = &Версия
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК Данные
	               |ГДЕ
	               |	Данные.ВладелецФайла = &ВладелецФайла
	               |	И НЕ Данные.ПометкаУдаления
				   //ОКЕЙ Наумов АН(СофтЛаб) Начало 2020-12-24 (#4003)
	               //|	И Данные.НомерЭД = &НомерЭД
				   |	И ВЫБОР
					|		КОГДА Данные.НомерЭД = &НомерЭД
					|				ТОГДА ИСТИНА
					|			КОГДА Данные.НаименованиеФайла + ""."" + Данные.Расширение = &НомерЭД
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ ЛОЖЬ
					|		КОНЕЦ
				   //ОКЕЙ Наумов АН(СофтЛаб) Конец 2020-12-24 (#4003)
	               |	И НЕ Данные.ок_Неактуальный
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
	               |	И (Данные.ДатаФормированияЭДОтправителем = &Версия ИЛИ Данные.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1))
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	Запрос.УстановитьПараметр("Версия", Версия);
	
	Для каждого ЭлементФайла Из ДанныеДляПодписания.ФайлыДляПодписания Цикл
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
		ЭлементФайла.Вставить("Ссылка", Неопределено);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
		
		Если ЭлементФайла.Служебный Тогда
			Продолжить;
		КонецЕсли;
		ДанныеФайлаВБазе = Неопределено;
		Запрос.УстановитьПараметр("НомерЭД", ЭлементФайла.ИмяФайла);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
			//ПрисоединенныйФайл = Выборка.Ссылка;
			ЭлементФайла.Вставить("Ссылка", Выборка.Ссылка);
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
		
			ДанныеФайлаВБазе = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка);
		КонецЕсли;
		
		Если ДанныеФайлаВБазе = Неопределено Тогда
			Операция = НСтр("ru = 'Подписание входящего документа'");
			ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл %1 документа %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ЭлементФайла.ИмяФайла, Документ);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстОшибки, , Документ);
			Возврат Ложь;
		КонецЕсли;
		
		ДанныеФайлаОператора = ПолучитьИзВременногоХранилища(ЭлементФайла.Адрес);
		
		Если Не ДвоичныеДанныеСовпадают(ДанныеФайлаВБазе, ДанныеФайлаОператора) Тогда
			Операция = НСтр("ru = 'Подписание входящего документа'");
			ТекстОшибки = НСтр("ru = 'Данные файла %1 в базе и у оператора ЭДО не совпадают.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ЭлементФайла.ИмяФайла);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстОшибки, , Документ);
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЦикла;
		
	Возврат Истина;	
	
КонецФункции

Функция ДвоичныеДанныеСовпадают(Данные1, Данные2) Экспорт
	
	Возврат ПолучитьХешДвоичныхДанных(Данные1) = ПолучитьХешДвоичныхДанных(Данные2);
	
КонецФункции

Функция ПолучитьХешДвоичныхДанных(Данные) Экспорт
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеширование.Добавить(Данные);
	
	Возврат Хеширование.ХешСумма;
	
КонецФункции	
	
////////////////////////////////////////////////////////////////////////////////
// Распаковка ЭД

//Функция ВидЭДПоИмени(Имя) Экспорт
//	
//	ВидЭД = Перечисления.ВидыЭД.ПустаяСсылка();
//	Если СтрНайти(Имя, "ON_SCHFDOPPR") > 0 Тогда
//		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
//	ИначеЕсли СтрНайти(Имя, "ON_SCHFDOPPOK") > 0 Тогда
//		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
//	ИначеЕсли СтрНайти(Имя, "ON_KORSCHFDOPPR") > 0 Тогда
//		ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
//	ИначеЕсли СтрНайти(Имя, "ON_KORSCHFDOPPOK") > 0 Тогда
//		ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
//	ИначеЕсли СтрНайти(Имя, "ON_SFAKT") > 0 Тогда
//		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
//	ИначеЕсли СтрНайти(Имя, "ON_KORSFAKT") > 0 Тогда // корректировочный счет-фактура
//		ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
//	ИначеЕсли СтрНайти(Имя, "OKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
//		ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
//	ИначеЕсли СтрНайти(Имя, "OTORG12") > 0 Тогда // торг-12 титул продавца
//		ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
//	ИначеЕсли СтрНайти(Имя, "PTORG12") > 0 Тогда // торг-12 титул покупателя
//		ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
//	ИначеЕсли СтрНайти(Имя, "PKORDOC") > 0 Тогда // корректировочный торг-12 титул покупателя
//		ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
//	ИначеЕсли СтрНайти(Имя, "IAKTPRM") > 0 Тогда // Акт титул исполнителя
//		ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
//	ИначеЕсли СтрНайти(Имя, "ZAKTPRM") > 0 Тогда // Акт титул заказчика
//		ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
//	ИначеЕсли СтрНайти(Имя, "DP_TOVTORGPR") > 0 Тогда // Передача товаров продавец
//		ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
//	ИначеЕсли СтрНайти(Имя, "DP_TOVTORGPOK") > 0 Тогда // Передача товаров покупатель
//		ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
//	ИначеЕсли СтрНайти(Имя, "DP_REZRUISP") > 0 Тогда // Передача работ исполнитель
//		ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
//	ИначеЕсли СтрНайти(Имя, "DP_REZRUZAK") > 0 Тогда // Передача работ исполнитель
//		ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
//	КонецЕсли;
//	
//	Возврат ВидЭД;
//	
//КонецФункции
Функция ЭтоЗавершительныйКодТранзакции(ок_КодТранзакции, ок_СпособОбменаЭД) Экспорт
	
	Если ПустаяСтрока(ок_КодТранзакции) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ок_СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-06-28 (#4244) 
		//Возврат СтрНайти(сбисЗавершительныеКодыТранзакции(), "," + ок_КодТранзакции + ",") > 0;
		Коды = ок_ОбщегоНазначенияСерверПовтИсп.ПолучитьМассивЗавершающихКодовТранзакции();
				
		Возврат Коды.Найти(ок_КодТранзакции) <> Неопределено;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-06-28 (#4244)
	КонецЕсли;
	
	Возврат Ложь;
			
КонецФункции	

Функция ЭтоКодТранзакцииОтклонения(ок_КодТранзакции, ок_СпособОбменаЭД) Экспорт
	
	Если ПустаяСтрока(ок_КодТранзакции) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ок_СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		Возврат СтрНайти(сбисКодыТранзакцииОтклонения(), "," + ок_КодТранзакции + ",") > 0;
	КонецЕсли;
	
	Возврат Ложь;
			
КонецФункции	

Функция УстановитьСтатусПакетаРаспакованИПустыеДанныеПакета(ПакетЭД)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "СтатусПакета") <> Перечисления.СтатусыПакетовЭД.Распакован Тогда
		ОбъектПакетЭД = ПакетЭД.ПолучитьОбъект();
		ОбъектПакетЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
		ОбъектПакетЭД.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;	
		
	Возврат Неопределено;
	
КонецФункции		

Процедура ЗаписатьФайлыПредставленияИзАрхиваПакета(РеквизитыПакета, ДанныеАрхива, ВладелецЭД, НомерЭДО, ок_СпособОбменаЭД)
	
	Если НРег(ДанныеАрхива.Расширение) <> "zip" Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеАрхива = ПолучитьИзВременногоХранилища(ДанныеАрхива.СсылкаНаДвоичныеДанныеФайла);
	ФайлАрхива = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанныеАрхива.Записать(ФайлАрхива);
	
	АрхивЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор; 
	ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", УникальныйИдентификатор);
	
	Попытка
		АрхивЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(АрхивЧтение, ПапкаДляРаспаковки) Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка архива пакета ЭД'"), ТекстОшибки,
		ТекстСообщения);
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
		Возврат;
	КонецПопытки;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-20 (#4330)
	ТаблицаПрисоединенныеXMLНаЗамену = Новый ТаблицаЗначений;
	Если РеквизитыПакета.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий")
		И ЭтоЗавершительныйКодТранзакции(РеквизитыПакета.ок_КодТранзакции, ПредопределенноеЗначение("Перечисление.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис")) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
		               |	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД
		               |ИЗ
		               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		               |ГДЕ
		               |	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		               |	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипЭлементаВерсииЭД)";
		
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецЭД);
		
		ТипЭлементаВерсииЭД = Новый Массив;
		ТипЭлементаВерсииЭД.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		ТипЭлементаВерсииЭД.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		
		Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
		ТаблицаПрисоединенныеXMLНаЗамену = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-20 (#4330)
	
	АрхивЧтение.Закрыть();
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
	МассивФайлов = НайтиФайлы(ПапкаДляРаспаковки, "*", Истина);
	Для каждого Файл Из МассивФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;	
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-20 (#4330)
		ЗаменяемыйФайл = Неопределено;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-20 (#4330)
		//реализация операторозависимой логики
		Если ок_СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-20 (#4330)
			
			Если ТаблицаПрисоединенныеXMLНаЗамену.Количество() > 0 Тогда
				НайденныйФайл = ТаблицаПрисоединенныеXMLНаЗамену.Найти(Файл.Имя, "НомерЭД");
				Если ЗначениеЗаполнено(НайденныйФайл) Тогда
					ЗаменяемыйФайл = НайденныйФайл.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЗаменяемыйФайл) Тогда
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-20 (#4330)
				Если НРег(Файл.Расширение) <> ".pdf" Тогда
					Продолжить;
				КонецЕсли;
				Если Файл.Путь = ПапкаДляРаспаковки Тогда //служебные в подпапке Дополнительно
					Продолжить;
				КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-20 (#4330)
			КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-20 (#4330) 
		КонецЕсли;
		
		АдресЭД = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя));
		
		СтруктураПараметровПоиска = Новый Структура;
		СтруктураПараметровПоиска.Вставить("НомерЭД",       Файл.Имя);
		СтруктураПараметровПоиска.Вставить("УникальныйИД",  НомерЭДО);
		СтруктураПараметровПоиска.Вставить("ВладелецФайла", ВладелецЭД);
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-20 (#4330)
		Если ЗначениеЗаполнено(ЗаменяемыйФайл) Тогда
			ПрисоединенныйФайлОбъект = ЗаменяемыйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ок_Неактуальный = Истина;
			ПрисоединенныйФайлОбъект.Записать();
		Иначе
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-20 (#4330) 
			ДобавленныйФайл = ОбменСКонтрагентамиСлужебный.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-20 (#4330)
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-20 (#4330)
		
		Если ДобавленныйФайл = Неопределено Тогда
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
			ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение));
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			
			СсылкаНаЭДПрисоединенныйФайл = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
			ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(
			ПараметрыФайла, АдресЭД, , , СсылкаНаЭДПрисоединенныйФайл);
			
			Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
				СтруктураЭД = Новый Структура;
				СтруктураЭД.Вставить("ВладелецЭД", ВладелецЭД);
				СтруктураЭД.Вставить("Отправитель", РеквизитыПакета.Отправитель);
				СтруктураЭД.Вставить("Получатель", РеквизитыПакета.Получатель);
				СтруктураЭД.Вставить("УникальныйИД", НомерЭДО);
				СтруктураЭД.Вставить("НомерЭД", Файл.Имя);
				СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
				СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4330)
				Если ЗаменяемыйФайл <> Неопределено Тогда
					СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", ЗаменяемыйФайл.ТипЭлементаВерсииЭД);
				Иначе
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4330) 
					СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД);
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4330)
				КонецЕсли;
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4330)
				СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", "");
				СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
				ДополнительныеПараметрыФайла = Новый Структура("ок_КодТранзакции, ок_ДатаТранзакции");
				ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыФайла, РеквизитыПакета);
				СтруктураЭД.Вставить("ДополнительныеСвойства", ДополнительныеПараметрыФайла);
				
				ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
			КонецЕсли;
		Иначе
			
			//нужно перезаписать более свежими данными
			ДатаПоследнейТранзакции = '00010101';
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЖурналСобытийЭД.ок_ДатаТранзакции) КАК ок_ДатаТранзакции
			|ИЗ
			|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
			|ГДЕ
			|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
			Запрос.УстановитьПараметр("ПрисоединенныйФайл", ДобавленныйФайл);
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			Пока Выборка.Следующий() Цикл
				ДатаПоследнейТранзакции = Выборка.ок_ДатаТранзакции;
				Прервать;
			КонецЦикла;
			Если РеквизитыПакета.ок_ДатаТранзакции > ДатаПоследнейТранзакции Тогда 
				ДополнительныеПараметрыФайла = Новый Структура("ок_КодТранзакции, ок_ДатаТранзакции");
				ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыФайла, РеквизитыПакета);
				ПараметрыФайла = Новый Структура("ДополнительныеСвойства", ДополнительныеПараметрыФайла);
				ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресЭД);
				ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", "");
				РаботаСФайлами.ОбновитьФайл(ДобавленныйФайл, ПараметрыФайла);
			КонецЕсли;
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресЭД);
		
	КонецЦикла;	
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
	
КонецПроцедуры	

Функция ДанныеПакетаЭД(ПакетЭД, НастройкаЭДО, ок_СпособОбменаЭД) Экспорт
		
	РеквизитыПакета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "ок_КодТранзакции, ок_ДатаТранзакции, Направление, Отправитель, Получатель, Комментарий, ок_Наименование, ок_Сумма, ок_ДатаРедакции, ок_Удален, ок_Дата");
	Если РеквизитыПакета.Направление = Перечисления.НаправленияЭД.Исходящий Тогда 
		
		Попытка
			
			//функция вызывается только при распаковке пакета
			//для исходящего пакета нам нужно только архив приложить в присоединенные файлы и статус исходящего изменить
			ВыборкаПрисоединенныхФайлов = ОбменСКонтрагентамиСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
			Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) 
				Или НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
				Возврат УстановитьСтатусПакетаРаспакованИПустыеДанныеПакета(ПакетЭД);
			КонецЕсли;
			ПараметрыДанных = РаботаСФайлами.ДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
			
			НомерЭДО = СтрЗаменить(ВыборкаПрисоединенныхФайлов.Наименование, "_", Символы.ПС); //EDI_НомерПакета_НомерДокументооборота
			НомерЭДО = СтрПолучитьСтроку(НомерЭДО, СтрЧислоСтрок(НомерЭДО));
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить("ок_СпособОбменаЭД", ок_СпособОбменаЭД);
			СтруктураВложения.Вставить("ок_КодТранзакции", РеквизитыПакета.ок_КодТранзакции);
			СтруктураВложения.Вставить("ок_ДатаТранзакции", РеквизитыПакета.ок_ДатаТранзакции);
			СтруктураВложения.Вставить("ок_ДокуменооборотЗавершен", ЭтоЗавершительныйКодТранзакции(РеквизитыПакета.ок_КодТранзакции, ок_СпособОбменаЭД));
			СтруктураВложения.Вставить("ок_Отклонен", ЭтоКодТранзакцииОтклонения(РеквизитыПакета.ок_КодТранзакции, ок_СпособОбменаЭД));
			//СтруктураВложения.Вставить("ок_ВидЭД", Перечисления.ВидыЭД.ПроизвольныйЭД);
			
			СтруктураВложения.Вставить("УникальныйИД", НомерЭДО);
			СтруктураВложения.Вставить("НомерЭД", ПараметрыДанных.ИмяФайла);
			СтруктураВложения.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД);
			СтруктураВложения.Вставить("АдресЭД", ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
			СтруктураВложения.Вставить("СсылкаНаЭДПрисоединенныйФайл", Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			СтруктураВложения.Вставить("ИмяБезРасширения", ПараметрыДанных.Наименование);
			СтруктураВложения.Вставить("Расширение", ПараметрыДанных.Расширение);
			
			ДобавленныйФайл = Неопределено;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	Данные.Ссылка КАК Ссылка
			               |ИЗ
			               |	Документ.ЭлектронныйДокументИсходящий КАК Данные
			               |ГДЕ
			               |	Данные.УникальныйИД = &УникальныйИД";
			
			Запрос.УстановитьПараметр("УникальныйИД", СтруктураВложения.УникальныйИД);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Возврат УстановитьСтатусПакетаРаспакованИПустыеДанныеПакета(ПакетЭД);
			КонецЕсли;	
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ВладелецЭД = Выборка.Ссылка;
			СтруктураПараметровПоиска = Новый Структура;
			СтруктураПараметровПоиска.Вставить("НомерЭД",       СтруктураВложения.НомерЭД);
			СтруктураПараметровПоиска.Вставить("УникальныйИД",  СтруктураВложения.УникальныйИД);
			СтруктураПараметровПоиска.Вставить("ВладелецФайла", ВладелецЭД);
			СтруктураПараметровПоиска.Вставить("ок_Архив", Истина);
			ДобавленныйФайл = ОбменСКонтрагентамиСлужебный.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
			
			Если ДобавленныйФайл = Неопределено Тогда
				ПараметрыФайла = Новый Структура();
				ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
				ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураВложения.ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураВложения.Расширение));
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
				
				ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайла, СтруктураВложения.АдресЭД, , , СтруктураВложения.СсылкаНаЭДПрисоединенныйФайл);
				
				Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
					СтруктураЭД = Новый Структура;
					СтруктураЭД.Вставить("ВладелецЭД", ВладелецЭД);
					СтруктураЭД.Вставить("Отправитель", РеквизитыПакета.Отправитель);
					СтруктураЭД.Вставить("Получатель", РеквизитыПакета.Получатель);
					СтруктураЭД.Вставить("УникальныйИД", СтруктураВложения.УникальныйИД);
					СтруктураЭД.Вставить("НомерЭД", СтруктураВложения.НомерЭД);
					СтруктураЭД.Вставить("НаименованиеФайла", СтруктураВложения.ИмяБезРасширения);
					СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
					СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", СтруктураВложения.ТипЭлементаВерсииЭД);
					СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", "");
					СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
					СтруктураЭД.Вставить("ок_Архив", Истина);
					ДополнительныеПараметрыФайла = Новый Структура("ок_КодТранзакции, ок_ДатаТранзакции");
					ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыФайла, СтруктураВложения);
					СтруктураЭД.Вставить("ДополнительныеСвойства", ДополнительныеПараметрыФайла);
					
					ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
				КонецЕсли;
			Иначе
				
				//нужно перезаписать более свежими данными
				ДатаПоследнейТранзакции = '00010101';
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	МАКСИМУМ(ЖурналСобытийЭД.ок_ДатаТранзакции) КАК ок_ДатаТранзакции
				|ИЗ
				|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
				|ГДЕ
				|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
				Запрос.УстановитьПараметр("ПрисоединенныйФайл", ДобавленныйФайл);
				УстановитьПривилегированныйРежим(Истина);
				Выборка = Запрос.Выполнить().Выбрать();
				УстановитьПривилегированныйРежим(Ложь);
				Пока Выборка.Следующий() Цикл
					ДатаПоследнейТранзакции = Выборка.ок_ДатаТранзакции;
					Прервать;
				КонецЦикла;
				Если СтруктураВложения.ок_ДатаТранзакции > ДатаПоследнейТранзакции Тогда 
					ДополнительныеПараметрыФайла = Новый Структура("ок_КодТранзакции, ок_ДатаТранзакции");
					ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыФайла, СтруктураВложения);
					ПараметрыФайла = Новый Структура("ДополнительныеСвойства", ДополнительныеПараметрыФайла);
					ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", СтруктураВложения.АдресЭД);
					ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", "");
					РаботаСФайлами.ОбновитьФайл(ДобавленныйФайл, ПараметрыФайла);
				КонецЕсли;
				
			КонецЕсли;
			
			//Если СтруктураВложения.ок_ДокуменооборотЗавершен Тогда
				ЗаписатьФайлыПредставленияИзАрхиваПакета(РеквизитыПакета, ПараметрыДанных, ВладелецЭД, НомерЭДО, ок_СпособОбменаЭД);
			//КонецЕсли;
			
			РеквизитыВладелецЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "ок_Статус,ок_Отклонен,ПричинаОтклонения");
			Если СтруктураВложения.ок_ДокуменооборотЗавершен ИЛИ (СтруктураВложения.ок_Отклонен <> РеквизитыВладелецЭД.ок_Отклонен) Тогда
				ОбъектВладелецЭД = ВладелецЭД.ПолучитьОбъект();
				Если СтруктураВложения.ок_ДокуменооборотЗавершен И РеквизитыВладелецЭД.ок_Статус <> Перечисления.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Завершен Тогда
					ОбъектВладелецЭД.ок_Статус = Перечисления.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Завершен;
					//ОбъектВладелецЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
				КонецЕсли;	
				Если СтруктураВложения.ок_Отклонен <> РеквизитыВладелецЭД.ок_Отклонен Тогда
					ОбъектВладелецЭД.ок_Отклонен = СтруктураВложения.ок_Отклонен;
					ОбъектВладелецЭД.ПричинаОтклонения = РеквизитыПакета.Комментарий;
				КонецЕсли;	
				ОбъектВладелецЭД.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;	
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
			РегистрыСведений.ок_ДокументыЭДДляПроверкиСлужебныхЭтапов.ЗарегистрироватьДокумент(ВладелецЭД);
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
			
			Возврат УстановитьСтатусПакетаРаспакованИПустыеДанныеПакета(ПакетЭД);
		
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки,
			ТекстСообщения,
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-02 (#3821)
			,
			ПакетЭД
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-02 (#3821) 
			);
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-02 (#4056)
			Если ПакетЭД.СтатусПакета <> ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Неизвестный") Тогда
				ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
				ПакетЭДОбъект.СтатусПакета = ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Неизвестный");
				ПакетЭДОбъект.ОбменДанными.Загрузка = Истина;
				ПакетЭДОбъект.Записать();
			КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-02 (#4056)
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
			//исправлена потенциально возможная ошибка
			Возврат Неопределено;
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)
			
		КонецПопытки;
		
	КонецЕсли;	
	
	МассивЭД = Новый Массив;
	МассивЭП = Новый Массив;
	УникальныйИдентификатор = ПакетЭД.УникальныйИдентификатор();
	
	Попытка
		
		// Необходимо получить архив пакета из присоединенных файлов к документу.
		ВыборкаПрисоединенныхФайлов = ОбменСКонтрагентамиСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
		Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) 
			Или НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Для каждого из пакетов необходимо определить файл с данными.
		ПараметрыДанных = РаботаСФайлами.ДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
		МаксимальныйРазмерПакетаЭДДляРаспаковки = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Тестирование", "МаксимальныйРазмерПакетаЭДДляРаспаковки");
		Если ЗначениеЗаполнено(МаксимальныйРазмерПакетаЭДДляРаспаковки) И ТипЗнч(МаксимальныйРазмерПакетаЭДДляРаспаковки) = Тип("Число") Тогда
			Если ПараметрыДанных.Свойство("Размер") И ПараметрыДанных.Размер > МаксимальныйРазмерПакетаЭДДляРаспаковки Тогда
				//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-15 (#3849)
				ИмяСобытияЖР ="Электронное взаимодействие.Проверка размера пакета ЭД";
				КомментарийЖР = Строка(ПакетЭД) + " не распакован. Размер пакета ЭД превышает значение, установленное в настройке МаксимальныйРазмерПакетаЭДДляРаспаковки РС «Универсальные настройки (ОКЕЙ)»";
				ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПакетЭД, ПакетЭД, КомментарийЖР);
				//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-15 (#3849)
				Возврат Неопределено;
			КонецЕсли;	
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		АрхивЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", УникальныйИдентификатор);
		
		Попытка
			АрхивЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(АрхивЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка архива пакета ЭД'"), ТекстОшибки,
			ТекстСообщения);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
						
			Возврат Неопределено;
		КонецПопытки;
		
		АрхивЧтение.Закрыть();
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
		НомерЭДО = СтрЗаменить(ВыборкаПрисоединенныхФайлов.Наименование, "_", Символы.ПС); //EDI_НомерПакета_НомерДокументооборота
		//Если СтрЧислоСтрок(НомерЭДО) <> 3 Тогда
		//	Возврат Неопределено;
		//КонецЕсли;	
		НомерЭДО = СтрПолучитьСтроку(НомерЭДО, СтрЧислоСтрок(НомерЭДО));
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-08 (#3509)
		ИменаФайловСДополнительнымиПредставлениями = Новый Массив;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-08 (#3509)
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
		//хеш
		ИспользоватьХешированиеЭД = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Тестирование", "ИспользоватьХешированиеЭД");
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-15 (#4056)
		Версия = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЭДО", "ВерсияПолученияСобытийОператораСБИС", "2020");
		ЗагружатьДопФайлы = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЭДО", "ЗагружатьДопФайлы", Ложь);
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-15 (#4056)
		
		ЕстьТоварнаяНакладная = Ложь;
		//РеквизитыНастройкаЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО, "ок_ИдентификаторУчастникаОбмена");
		МассивФайлов = НайтиФайлы(ПапкаДляРаспаковки, "*", Истина);
		Для каждого Файл Из МассивФайлов Цикл
			Если Файл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;	
			Если НРег(Файл.Расширение) = ".sgn" Тогда
				Продолжить;
			КонецЕсли;	
			СтруктураВложения = Новый Структура("ТипДанных, АдресЭД, АдресДополнительногоЭД,
			|УникальныйИД, НомерЭД, КодТранзакции, КодРегламента, ТипЭлементаВерсииЭД, МассивИдентификаторовДокументовОснований,
			|Зашифрован, СсылкаНаСертификатРасшифровки, ДополнительныеПараметры,
			|ПроизвольныйЭД, ТипДокумента, ТекстСопроводительнойЗаписки, ТребуетсяПодтверждение,
			|АдресЭП, АдресСертификата, Отпечаток, КомуВыданСертификат, ДатаПроверкиПодписи, ПодписьВерна");
			
			КодТранзакции = "";
			КодРегламента = "Nonformalized";
			Зашифрован = Ложь;
			ТипКарточкиЭД = Перечисления.ТипыЭД.Прочее;
			ТипКарточкиЭДПолучен = Ложь;
			//НомерЭДКарточки = Файл.ИмяБезРасширения + "_" + Формат(Файл.ПолучитьВремяИзменения(),"ДФ=yyyyMMddЧЧммсс" ) + Файл.Расширение;
			НомерЭДКарточки = Файл.ИмяБезРасширения + Файл.Расширение;
			ПроизвольныйЭД = Ложь;
			ТекстСопроводительнойЗаписки = "";
			МассивИдентификаторовДокументовОснований = Новый Массив;
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД;
			ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.ПустаяСсылка();
			ок_ВходитВПакетЭД = Ложь;
			
			СтруктураВложения.Вставить("НастройкаЭДО", НастройкаЭДО);
			СтруктураВложения.Вставить("ок_СпособОбменаЭД", ок_СпособОбменаЭД);
			СтруктураВложения.Вставить("ок_Порядок", 2);
			СтруктураВложения.Вставить("ок_КодТранзакции", РеквизитыПакета.ок_КодТранзакции);
			СтруктураВложения.Вставить("ок_ДатаТранзакции", РеквизитыПакета.ок_ДатаТранзакции);
			СтруктураВложения.Вставить("ок_ДокуменооборотЗавершен", ЭтоЗавершительныйКодТранзакции(РеквизитыПакета.ок_КодТранзакции, ок_СпособОбменаЭД));
			СтруктураВложения.Вставить("ок_ВидЭД", Перечисления.ВидыЭД.ПроизвольныйЭД);
			СтруктураВложения.Вставить("ок_Наименование", РеквизитыПакета.ок_Наименование);
			СтруктураВложения.Вставить("ок_Сумма", РеквизитыПакета.ок_Сумма);
			СтруктураВложения.Вставить("ок_Удален", РеквизитыПакета.ок_Удален);
			СтруктураВложения.Вставить("ДатаФормированияЭДОтправителем", РеквизитыПакета.ок_ДатаРедакции);
			СтруктураВложения.Вставить("ок_ДатаРедакции", РеквизитыПакета.ок_ДатаРедакции);
			СтруктураВложения.Вставить("ок_ИдентификаторУчастникаОбменаОтправитель", "");
			СтруктураВложения.Вставить("ок_ИдентификаторУчастникаОбменаПолучатель", "");
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-09 (#3360)
			СтруктураВложения.Вставить("ок_НомерЗаявки", Неопределено);
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-09 (#3360)
			
			ТребуетсяПодтверждение = Ложь;
			//ТипДанных = "ДополнительныйЭД"; //дополнительный ИД может быть только один к каждому ЭД, у него НомерЭД и УникальныйИД должны быть как у самого ЭД
			ТипДанных = "ЭД";
			//Если Файл.Путь <> ПапкаДляРаспаковки И НРег(Файл.Расширение) = ".xml" Тогда //служебные в подпапке Дополнительно
			//	//	ТипДанных = "СлужебныйЭД";
			//КонецЕсли;
			
			//Если ТипДанных = "СлужебныйЭД" Тогда 
			//	//смотреть ОбиенСКонтрагентамиВнутренний.ПрочитатьШапкуСлужебногоФайлаCMLпоXDTO
			//	Если Лев(НомерЭДКарточки, 9) = "DP_IZVPOL" Тогда
			//		КодТранзакции = "ReceiveNotice";
			//	ИначеЕсли Лев(НомерЭДКарточки, 9) = "DP_PDOTPR" Тогда
			//		КодТранзакции = "PostDateConfirmation";
			//	КонецЕсли;
			//КонецЕсли;
			
			Если НРег(Файл.Расширение) = ".xml" Тогда
				//Если Лев(НомерЭДКарточки, 12) = "ON_SCHFDOPPR" Тогда
				//	СтруктураВложения.Вставить("ок_Порядок", 0);
				//	ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
				//ИначеЕсли Лев(НомерЭДКарточки, 12) = "DP_TOVTORGPR" Тогда
				//	ТипКарточкиЭД = Перечисления.ТипыЭД.ТоварнаяНакладная;
				//КонецЕсли;
				ВидЭД = Неопределено;
				ОписаниеОшибки = "";
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
				КопироватьФайл(Файл.ПолноеИмя, ИмяВременногоФайла);
				ДанныеФайлаЭД = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ИмяВременногоФайла, ОписаниеОшибки);
				УдалитьФайлы(ИмяВременногоФайла);
				Если ПустаяСтрока(ОписаниеОшибки) Тогда
					СтруктураФайлаЭД = Новый Структура;
					ОбменСКонтрагентамиВнутренний.ПрочитатьШапкуФайлаCMLПоXDTO(ДанныеФайлаЭД, СтруктураФайлаЭД, ОписаниеОшибки);
					Если ПустаяСтрока(ОписаниеОшибки) Тогда
						Если СтруктураФайлаЭД.Свойство("ВидЭД") Тогда // неизвестный XML не удалось определить видЭД
							ВидЭД = СтруктураФайлаЭД.ВидЭД;
						КонецЕсли;
						Если СтруктураФайлаЭД.Свойство("ок_ИдОтпр") Тогда 
							СтруктураВложения.Вставить("ок_ИдентификаторУчастникаОбменаОтправитель", СтруктураФайлаЭД.ок_ИдОтпр);
						КонецЕсли;
						Если СтруктураФайлаЭД.Свойство("ок_ИдПол") Тогда 
							СтруктураВложения.Вставить("ок_ИдентификаторУчастникаОбменаПолучатель", СтруктураФайлаЭД.ок_ИдПол);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
					СтруктураВложения.Вставить("ок_Порядок", 0);
					КодРегламента = "Invoice";
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.Акт;
					//НомерЭДКарточки = НомерЭДО;
					
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-09 (#3360)
					СтруктураВложения.Вставить("ок_НомерЗаявки", ПолучитьНомерЗаявкиИзЭД(, Файл.ПолноеИмя));
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-09 (#3360)
					
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
					ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.СчетФактура;
					ДеревоРазбора = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
					НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
					НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
					НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					ОшибкаЧтенияЭД = Ложь;
					ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
					КопироватьФайл(Файл.ПолноеИмя, ИмяВременногоФайла);
					ОбменСКонтрагентамиВнутренний.ок_ПрочитатьФайлCMLпоXDTOЭкспортируемая(ИмяВременногоФайла, ДеревоРазбора, НовыйЭД, ОшибкаЧтенияЭД);
					УдалитьФайлы(ИмяВременногоФайла);
					Если Не ОшибкаЧтенияЭД Тогда
						СтруктураВложения.Вставить("ок_Порядок", 1);
						КодРегламента = "Invoice";
						Если НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
							ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД;
							ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.УПД;
						ИначеЕсли НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда 
							ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД;
							//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
							//ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.ПустаяСсылка();  
							ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.Накладная;
							//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)
						КонецЕсли;	
						
						//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-09 (#3360)
						СтруктураВложения.Вставить("ок_НомерЗаявки", ПолучитьНомерЗаявкиИзЭД(НовыйЭД.ЗначениеРеквизита, , "ДопДанныеСчетаФактуры.ТекстоваяИнформация"));
						//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-09 (#3360)
						
						//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-06-08 (#4207)
						//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-01 (#4383)
						//ИнформацияОПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(НовыйЭД.ЗначениеРеквизита, "СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.НомерТовара", Ложь);
						//СтруктураВложения.Вставить("ок_Прослеживаемость", ЗначениеЗаполнено(ИнформацияОПрослеживаемости));
						СтруктураВложения.Вставить("ок_Прослеживаемость", Ложь);
						//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-01 (#4383)
						//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-06-08 (#4207) 
						
						//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-08-24 (#4185)
						СтрокаТаблицаТоваров = НовыйЭД.ЗначениеРеквизита.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
						
						Если ЗначениеЗаполнено(СтрокаТаблицаТоваров) Тогда
							ТаблицаТоваров = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(НовыйЭД.ЗначениеРеквизита, СтрокаТаблицаТоваров.ПолныйПуть);
							//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-11 (#4383)
							ФорматСПрослеживаемостью = ТаблицаТоваров.Колонки.Найти("СведенияОПрослеживаемости") <> Неопределено;
							//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-11 (#4383)
							Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
								
								ИдентификаторДляСопоставленияНоменклатуры = ВРег(СтрЗаменить(СтрокаТовара.ТоварНаименование, " ", "")) + "#" + СокрЛП(СтрокаТовара.ТоварКод) + "##";

								ОписаниеНоменклатурыИБ = ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы();
									
								ОписаниеНоменклатурыКонтрагента = ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента(ПакетЭД.Контрагент,
											ИдентификаторДляСопоставленияНоменклатуры);					
								ОписаниеНоменклатурыКонтрагента.Наименование = СтрокаТовара.ТоварНаименование;
								ОписаниеНоменклатурыКонтрагента.ЕдиницаИзмерения = СтрокаТовара.ЕдиницаИзмеренияНаименование;
								ОписаниеНоменклатурыКонтрагента.ЕдиницаИзмеренияКод = СтрокаТовара.ЕдиницаИзмеренияКод;
								
								Отбор = Новый Структура;
								Отбор.Вставить("НоменклатураКонтрагента", ОписаниеНоменклатурыКонтрагента);
								СопоставленнаяНоменклатура = ОбменСКонтрагентами.НайтиСоответствиеНоменклатуры(Отбор);
								
								НайденаСопоставленнаяНоменклатура = СопоставленнаяНоменклатура.Количество();
								
								Если Не НайденаСопоставленнаяНоменклатура Тогда 
									
									ОбменСКонтрагентами.УстановитьСоответствиеНоменклатуры(ОписаниеНоменклатурыКонтрагента, ОписаниеНоменклатурыИБ);

								КонецЕсли;
								//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-01 (#4383)
								Если ФорматСПрослеживаемостью Тогда
									СтруктураВложения.Вставить("ок_Прослеживаемость", Макс(СтруктураВложения.ок_Прослеживаемость, СтрокаТовара.СведенияОПрослеживаемости.Количество() > 0));
								КонецЕсли;								
								//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-01 (#4383)

							КонецЦикла;
						КонецЕсли;
						//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-08-24 (#4185)
					КонецЕсли;	
					//НомерЭДКарточки = НомерЭДО;
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-09-10 (#4281) 
				//ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура 
					ИЛИ	ВидЭД = Перечисления.ВидыЭД.УКД Тогда
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-09-10 (#4281)
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
					ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.СчетФактура;
					ДеревоРазбора = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
					НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
					НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
					НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					ОшибкаЧтенияЭД = Ложь;
					ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
					КопироватьФайл(Файл.ПолноеИмя, ИмяВременногоФайла);
					ОбменСКонтрагентамиВнутренний.ок_ПрочитатьФайлCMLпоXDTOЭкспортируемая(ИмяВременногоФайла, ДеревоРазбора, НовыйЭД, ОшибкаЧтенияЭД);
					УдалитьФайлы(ИмяВременногоФайла);
					Если Не ОшибкаЧтенияЭД Тогда
						СтруктураВложения.Вставить("ок_Порядок", 1);
						//КодРегламента = "Invoice";
						Если НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
							ТипЭлементаВерсииЭД = НовыйЭД.ТипЭлементаВерсииЭД;
							ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.УКД;
						ИначеЕсли НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда 
							ТипЭлементаВерсииЭД = НовыйЭД.ТипЭлементаВерсииЭД;
							ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.КорректировкаПоступления;
						//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-09-09 (#4281)
						Иначе
							ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД;
							ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.УКД;
						//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-09-09 (#4281)	
						КонецЕсли;	
					КонецЕсли;	
					
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-09-09 (#4281) 
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-01 (#4383)
					//ИнформацияОПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(НовыйЭД.ЗначениеРеквизита, "СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.НомерТовара", Ложь);
					//СтруктураВложения.Вставить("ок_Прослеживаемость", ЗначениеЗаполнено(ИнформацияОПрослеживаемости));
					СтруктураВложения.Вставить("ок_Прослеживаемость", Ложь);
					
					СтрокаТаблицаТоваров = НовыйЭД.ЗначениеРеквизита.Строки.Найти("СведенияОТоварах", "ПолныйПуть");	
					Если СтрокаТаблицаТоваров <> Неопределено Тогда
						ТаблицаТоваров = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(НовыйЭД.ЗначениеРеквизита, СтрокаТаблицаТоваров.ПолныйПуть);
						Если ТаблицаТоваров.Колонки.Найти("СведенияОПрослеживаемости") <> Неопределено Тогда
							Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
								СтруктураВложения.Вставить("ок_Прослеживаемость", Макс(СтруктураВложения.ок_Прослеживаемость, СтрокаТовара.СведенияОПрослеживаемости.Количество() > 0));
							КонецЦикла;
						КонецЕсли;						
					КонецЕсли;
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-01 (#4383)
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-09-09 (#4281)
					
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
					
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-09-09 (#4281) 
					//ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД;
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-01 (#4383)
					//ИнформацияОПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(НовыйЭД.ЗначениеРеквизита, "СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.НомерТовара", Ложь);
					//СтруктураВложения.Вставить("ок_Прослеживаемость", ЗначениеЗаполнено(ИнформацияОПрослеживаемости));
					СтруктураВложения.Вставить("ок_Прослеживаемость", Ложь);
					
					СтрокаТаблицаТоваров = НовыйЭД.ЗначениеРеквизита.Строки.Найти("СведенияОТоварах", "ПолныйПуть");	
					Если СтрокаТаблицаТоваров <> Неопределено Тогда
						ТаблицаТоваров = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(НовыйЭД.ЗначениеРеквизита, СтрокаТаблицаТоваров.ПолныйПуть);
						Если ТаблицаТоваров.Колонки.Найти("СведенияОПрослеживаемости") <> Неопределено Тогда
							Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
								СтруктураВложения.Вставить("ок_Прослеживаемость", Макс(СтруктураВложения.ок_Прослеживаемость, СтрокаТовара.СведенияОПрослеживаемости.Количество() > 0));
							КонецЦикла;
						КонецЕсли;						
					КонецЕсли;
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-01 (#4383)
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-09-09 (#4281)
					
					ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.КорректировкаПоступления;
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)
				//не разбирался пока что в ТОРГ12 подставлять
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.Накладная;
				//	ТипКарточкиЭД = Перечисления.ТипыЭД.ТоварнаяНакладная;
				КонецЕсли;
				//Если Лев(НомерЭДКарточки, 12) = "DP_TOVTORGPR" Тогда
				//	ЕстьТоварнаяНакладная = Истина;
				//КонецЕсли;
				
			КонецЕсли;
			
			//реализация операторозависимой логики
			Если ок_СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
				Если Не ЗначениеЗаполнено(ок_ТипДокумента) И Файл.Путь = ПапкаДляРаспаковки Тогда
					Если НРег(Файл.Расширение) <> ".xml" Тогда
						ок_ТипДокумента = Перечисления.ок_ТипыДокументовЭД.Неформализованный;
					КонецЕсли;	
				КонецЕсли;	
				//Если НРег(Файл.Расширение) = ".xml" И Лев(НомерЭДКарточки, 8) = "ON_SCHET" И ВидЭД <> Перечисления.ВидыЭД.СчетНаОплату Тогда //если формат счета не поддерживается
				//	ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД;
				//ИначеЕсли НРег(Файл.Расширение) = ".pdf" И Лев(НомерЭДКарточки, 8) = "ON_SCHET" И ВидЭД <> Перечисления.ВидыЭД.СчетНаОплату Тогда 
				//	ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД;
				//Если Файл.Путь = ПапкаДляРаспаковки И НРег(Файл.Расширение) = ".xml" Тогда //сами xml решено не выводить
				//	ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД;
				Если Файл.Путь <> ПапкаДляРаспаковки Тогда //служебные в подпапке Дополнительно
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД;
					Если НРег(Файл.Расширение) = ".pdf" Тогда //пойдут в отображение пользователям вместо xml
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД;
												
						//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-23 (#4056)
						Если Не ЗагружатьДопФайлы Тогда
							ИменаФайловСДополнительнымиПредставлениями.Добавить(Файл.Имя);	
						Иначе
							//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-08 (#3509)
							Если Прав(Файл.Имя, СтрДлина(ПрефиксДляИмениФайлаПредставления())) = ПрефиксДляИмениФайлаПредставления() Тогда
								ИменаФайловСДополнительнымиПредставлениями.Добавить(Лев(Файл.Имя, СтрДлина(Файл.Имя) - СтрДлина(ПрефиксДляИмениФайлаПредставления())));
							КонецЕсли;	
							//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-08 (#3509)
						КонецЕсли;	
						//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-23 (#4056) 
						
					КонецЕсли;
				ИначеЕсли НомерЭДКарточки = "Справка о прохождении.html" Тогда //справка тоже служебный
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД;
				КонецЕсли;
				Если Файл.Путь = ПапкаДляРаспаковки И НомерЭДКарточки <> "Справка о прохождении.html" Тогда 
					ок_ВходитВПакетЭД = Истина;	
				КонецЕсли;
			КонецЕсли;
			
			// Из ЭД
			СтруктураВложения.Вставить("УникальныйИД",                 НомерЭДО);
			СтруктураВложения.Вставить("НомерЭД",                      НомерЭДКарточки);
			СтруктураВложения.Вставить("КодТранзакции",                КодТранзакции);
			СтруктураВложения.Вставить("КодРегламента",                КодРегламента);
			СтруктураВложения.Вставить("ТипЭлементаВерсииЭД",          ТипЭлементаВерсииЭД);
			СтруктураВложения.Вставить("ПроизвольныйЭД",               ПроизвольныйЭД);
			СтруктураВложения.Вставить("ТипДокумента",                 ТипКарточкиЭД);
			СтруктураВложения.Вставить("ТекстСопроводительнойЗаписки", ТекстСопроводительнойЗаписки);
			СтруктураВложения.Вставить("ТребуетсяПодтверждение",       ТребуетсяПодтверждение);
			СтруктураВложения.Вставить("МассивИдентификаторовДокументовОснований", МассивИдентификаторовДокументовОснований);
			СтруктураВложения.Вставить("ДополнительныеПараметры",      Новый Структура("НеТребуетсяИзвещение", Истина));
			
			СтруктураВложения.Вставить("АдресЭД", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), УникальныйИдентификатор));
			СтруктураВложения.Вставить("СсылкаНаЭДПрисоединенныйФайл", Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			СтруктураВложения.Вставить("ок_ТипДокумента", ок_ТипДокумента);
			СтруктураВложения.Вставить("ок_ВходитВПакетЭД", ок_ВходитВПакетЭД);
			
			// Когда приходят пакеты от оператора ЭДО без явного признака "НеФормализованный".
			Если ВРег(Файл.Расширение) <> ".ZIP" И ВРег(Файл.Расширение) <> ".XML" Тогда
				СтруктураВложения.Вставить("ПроизвольныйЭД", Истина);
			КонецЕсли;
			
			// Получим файл электронного документа
			СтруктураЭлектронногоДокумента = Новый Структура;
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектронногоДокумента, СтруктураВложения);
			
			СтруктураЭлектронногоДокумента.Вставить("ТипДанных",        ТипДанных);
			//СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения + "_" + Формат(Файл.ПолучитьВремяИзменения(),"ДФ=yyyyMMddЧЧммсс" ));
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-23 (#4056)
			//СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-24 (#4175)     //Префикс необходим только для PDF 
			//Если Файл.Путь <> ПапкаДляРаспаковки И Не ЗагружатьДопФайлы Тогда
			Если Файл.Путь <> ПапкаДляРаспаковки 
				И Не ЗагружатьДопФайлы
				И ВРег(Файл.Расширение) = ".PDF" Тогда                      
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-24 (#4175) 
				СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения + "_(п)");
				СтруктураЭлектронногоДокумента.Вставить("НомерЭД", НомерЭДКарточки + "_(п)");
			Иначе
				СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);		
			КонецЕсли;			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-23 (#4056) 
			СтруктураЭлектронногоДокумента.Вставить("Расширение",       Файл.Расширение);
			СтруктураЭлектронногоДокумента.Вставить("Зашифрован",       Зашифрован);
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
			//хеш
			СтруктураЭлектронногоДокумента.Вставить("ТекстСопроводительнойЗаписки", "");
			Если ИспользоватьХешированиеЭД = Истина Тогда
				Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
				Хеширование.ДобавитьФайл(Файл.ПолноеИмя);
				СтруктураЭлектронногоДокумента.Вставить("ТекстСопроводительнойЗаписки", Base64Строка(Хеширование.ХешСумма));
			КонецЕсли;
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)
			
			МассивЭД.Добавить(СтруктураЭлектронногоДокумента);
			
			//поищем подписи на файл ЭД
			//пока отключу, так как до конца не работоспособно, чтобы не ругалось
			//Для каждого ФайлПодпись Из МассивФайлов Цикл
			//	Если НРег(ФайлПодпись.Расширение) <> ".sgn" Тогда
			//		Продолжить;
			//	ИначеЕсли ФайлПодпись.Путь <> Файл.Путь Тогда 
			//		Продолжить;
			//	ИначеЕсли СтрНайти(ФайлПодпись.ИмяБезрасширения, Файл.ИмяБезРасширения) = 0 Тогда  //файл-подпись совпадает с именем файла, в имя просто добавляются символы SGN и порядковый номер
			//		Продолжить;
			//	КонецЕсли;	
			//	СтруктураЭлектроннойПодписи = Новый Структура;
			//	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектроннойПодписи, СтруктураВложения);
			//	
			//	СтруктураЭлектроннойПодписи.Вставить("АдресЭП", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлПодпись.ПолноеИмя), УникальныйИдентификатор));
			//	СтруктураЭлектроннойПодписи.Вставить("ТипДанных",        ?(ТипДанных = "ДополнительныйЭД", "ПодписьДополнительногоЭД", "ЭП"));
			//	СтруктураЭлектроннойПодписи.Вставить("ИмяБезРасширения", ФайлПодпись.ИмяБезРасширения);
			//	СтруктураЭлектроннойПодписи.Вставить("Расширение",       ФайлПодпись.Расширение);
			//	МассивЭП.Добавить(СтруктураЭлектроннойПодписи);
			//КонецЦикла;	
			
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-04-30 (#3614)
		Если СтруктураВложения.ок_ДокуменооборотЗавершен Тогда 
			
			СвойстваСтруктурыПодписи = "АдресЭП, АдресСертификата, Отпечаток, КомуВыданСертификат, ДатаПроверкиПодписи, ПодписьВерна";
			//Если ВФоне Тогда
			//	СвойстваСтруктурыПодписи = СвойстваСтруктурыПодписи + ",ДанныеСертификата";
			//КонецЕсли;
			
			Для каждого ФайлПодпись Из МассивФайлов Цикл
				
				Если НРег(ФайлПодпись.Расширение) <> ".sgn" Тогда
					Продолжить;
				ИначеЕсли ФайлПодпись.Путь <> Файл.Путь Тогда 
					Продолжить;
				//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-10-30 (#3940)
				//ИначеЕсли СтрНайти(ФайлПодпись.ИмяБезрасширения, Файл.ИмяБезРасширения) = 0 Тогда  //файл-подпись совпадает с именем файла, в конец имени добавляются символы SGN, порядковый номер, прочие символы
				//	Продолжить;
				//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-10-30 (#3940)
				КонецЕсли;
				
				//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-10-30 (#3940)
				//Возникает ошибка "Хеш-значение неправильное." из-за того что к файлу SGN не корреткно определяют файл, к которому он привязан.
				НачалоВхожденияПрефиксаSGN = СтрНайти(ФайлПодпись.ИмяБезрасширения, "_SGN_");
				Если НачалоВхожденияПрефиксаSGN = 0 Тогда
					Продолжить;
				КонецЕсли;
				ИмяФайлаSGNБезПрефиксаSGN = Лев(ФайлПодпись.ИмяБезрасширения, НачалоВхожденияПрефиксаSGN - 1);
				Если Файл.ИмяБезРасширения <> ИмяФайлаSGNБезПрефиксаSGN Тогда
					Продолжить;
				КонецЕсли;
				//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-10-30 (#3940)
			
				СтруктураЭлектроннойПодписи = Новый Структура(СвойстваСтруктурыПодписи);
				
				ДвоичныеДанныеФайлаЭП = Новый ДвоичныеДанные(ФайлПодпись.ПолноеИмя);
				//Если ВФоне Тогда
				//	СтруктураЭлектроннойПодписи.Вставить("ДанныеФайлаЭП", ДвоичныеДанныеФайлаЭП);
				//Иначе
				АдресЭП = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаЭП, УникальныйИдентификатор);
				СтруктураЭлектроннойПодписи.Вставить("АдресЭП", АдресЭП);
				//КонецЕсли;
				
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
				//СтруктураЭлектроннойПодписи.Вставить("СсылкаНаЭДПрисоединенныйФайл", СтруктураВложения.СсылкаНаЭДПрисоединенныйФайл);
				СтруктураЭлектроннойПодписи.Вставить("СсылкаНаЭДПрисоединенныйФайл", Неопределено);
				//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)
				СтруктураЭлектроннойПодписи.Вставить("УникальныйИД", СтруктураВложения.УникальныйИД);
				СтруктураЭлектроннойПодписи.Вставить("ок_НомерЭД", СтруктураВложения.НомерЭД); //имя файла, нужно для сопоставления подписи существующему файлу
				СтруктураЭлектроннойПодписи.Вставить("КодТранзакции", СтруктураВложения.КодТранзакции);
				СтруктураЭлектроннойПодписи.Вставить("ТипДанных", "ЭП");
				СтруктураЭлектроннойПодписи.Вставить("ИмяБезРасширения", ФайлПодпись.ИмяБезРасширения);
				СтруктураЭлектроннойПодписи.Вставить("Расширение",       ФайлПодпись.Расширение);
				
				Если СтруктураВложения.Свойство("АдресЭД") Тогда
					СтруктураЭлектроннойПодписи.Вставить("АдресЭД", СтруктураВложения.АдресЭД);
				КонецЕсли;
				//Если СтруктураВложения.Свойство("ДанныеФайлаЭД") Тогда
				//	СтруктураЭлектроннойПодписи.Вставить("ДанныеФайлаЭД", СтруктураВложения.ДанныеФайлаЭД);
				//КонецЕсли;
				
				СтруктураЭлектроннойПодписи.Вставить("ДанныеСертификата", Неопределено);
				//СтруктураЭлектроннойПодписи.Вставить("Отпечаток", Неопределено);
				//СтруктураЭлектроннойПодписи.Вставить("КомуВыданСертификат", Неопределено);
				СтруктураЭлектроннойПодписи.Вставить("ПодписьВерна", Ложь);
				СтруктураЭлектроннойПодписи.Вставить("ДатаПроверкиПодписи", '00010101');
				
				ДанныеПодписи = ЭлектроннаяПодпись.ПрочитатьДанныеПодписи(ДвоичныеДанныеФайлаЭП);
				Если ДанныеПодписи <> Неопределено Тогда
					СтруктураЭлектроннойПодписи.Вставить("ДанныеСертификата", ДанныеПодписи.ДвоичныеДанныеСертификата);
					СтруктураЭлектроннойПодписи.Вставить("Отпечаток", ДанныеПодписи.Отпечаток);
					СтруктураЭлектроннойПодписи.Вставить("КомуВыданСертификат", ДанныеПодписи.КомуВыданСертификат);
					ОшибкаПроверкиПодписи = "";
					ПодписьВерна = ЭлектроннаяПодпись.ПроверитьПодпись(Неопределено, СтруктураВложения.АдресЭД, СтруктураЭлектроннойПодписи.АдресЭП, ОшибкаПроверкиПодписи);
					СтруктураЭлектроннойПодписи.Вставить("ПодписьВерна", ПодписьВерна);
					Если Не ПустаяСтрока(ОшибкаПроверкиПодписи) Тогда
						СтруктураЭлектроннойПодписи.Вставить("Комментарий", ОшибкаПроверкиПодписи);
					КонецЕсли;	
					СтруктураЭлектроннойПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
				КонецЕсли;	
				
				СтруктураЭлектроннойПодписи.Вставить("ИмяФайлаПодписи", ФайлПодпись.ИмяБезРасширения);
				
				//можно потом порядок подписей доделать
				//СтруктураЭлектроннойПодписи.Вставить("ок_Порядок", 0);
				//Если ок_СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
				//	//DP_REZRUISP_2BEfb1c17c6771e4766b448f7223f56d399_2BEfa4a99238c83471a88fdb74886a9ad0e_20181031_5daf7c87-67f0-4e29-8280-ff7aeb78dbf9_SGN_.sgn
				//	//DP_REZRUISP_2BEfb1c17c6771e4766b448f7223f56d399_2BEfa4a99238c83471a88fdb74886a9ad0e_20181031_5daf7c87-67f0-4e29-8280-ff7aeb78dbf9_SGN_.2.sgn
				//КонецЕсли;	
				
				МассивЭП.Добавить(СтруктураЭлектроннойПодписи);
				
			КонецЦикла;
			
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-04-30 (#3614)
			
		КонецЦикла;	
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-13 (#3614)
		СоответствиеТипуДокумента = Новый Соответствие;
		Для каждого ЭлементМассива Из МассивЭД Цикл
		
			Если НЕ ЗначениеЗаполнено(ЭлементМассива.ок_ТипДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СоответствиеТипуДокумента.Получить(ЭлементМассива.ИмяБезРасширения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СоответствиеТипуДокумента.Вставить(ЭлементМассива.ИмяБезРасширения, ЭлементМассива.ок_ТипДокумента);
			
		КонецЦикла; 
		
		Для каждого ЭлементМассива Из МассивЭД Цикл
		
			Если ЗначениеЗаполнено(ЭлементМассива.ок_ТипДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СоответствиеТипуДокумента.Получить(ЭлементМассива.ИмяБезРасширения) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементМассива.ок_ТипДокумента = СоответствиеТипуДокумента.Получить(ЭлементМассива.ИмяБезРасширения);
			
		КонецЦикла;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-13 (#3614) 
		
		МинимальныйПорядок = 99999;
		Для каждого Элемент из МассивЭД Цикл
			Если Элемент.ок_Порядок < МинимальныйПорядок Тогда
				МинимальныйПорядок = Элемент.ок_Порядок
			КонецЕсли;
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-15 (#4056)
			Скрыть = Ложь;
			Если Версия = "2021_0205" ИЛИ НЕ ЗагружатьДопФайлы Тогда
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-07 (#4070) 
				//Если Элемент.Расширение  = ".docx" 
				//	Или Элемент.Расширение  = ".xlsx" Тогда 
				//	Скрыть = Истина;
				//КонецЕсли;		
				
				СкрываемыеРасширенияСБИС = ок_ОбщегоНазначенияСерверПовтИсп.ПолучитьСписокСкрываемыхРасширенийСБИС();
				Если СкрываемыеРасширенияСБИС = Неопределено Тогда
					СкрываемыеРасширенияСБИС = Новый Массив;
					СкрываемыеРасширенияСБИС.Добавить(".docx");
					СкрываемыеРасширенияСБИС.Добавить(".xlsx");
					СкрываемыеРасширенияСБИС.Добавить(".jpg");
				КонецЕсли;
				
				Если СкрываемыеРасширенияСБИС.Найти(НРег(Элемент.Расширение)) <> Неопределено Тогда
					Скрыть = Истина;
				КонецЕсли;
				 //ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-07 (#4070)
				
			КонецЕсли;	
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-15 (#4056) 
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-08 (#3509)
			//если есть допфайл представления на файл пакета, то изменяем его тип, чтобы он не отображался в карточке
			Если Элемент.ок_ВходитВПакетЭД 
				И Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-15 (#4056)
//				И ИменаФайловСДополнительнымиПредставлениями.Найти(Элемент.НомерЭД) <> Неопределено Тогда
				И (Скрыть ИЛИ ИменаФайловСДополнительнымиПредставлениями.Найти(Элемент.НомерЭД) <> Неопределено) Тогда
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-15 (#4056) 
				
				Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД;
				
			КонецЕсли;	
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-08 (#3509)
			
		КонецЦикла;	
		СтруктураПакетаЭД = Новый Структура("ПакетЭДСсылка, МассивЭД, МассивЭП");
		СтруктураПакетаЭД.Вставить("ПакетЭДСсылка", ПакетЭД);
		СтруктураПакетаЭД.Вставить("МассивЭП",      МассивЭП);
		//нужно чтобы первым был файл нужный формализованный, тогда типовой код создаст входящий документ с правильным видом 
		НовыйМассивЭД = Новый Массив;
		Для й = 1 по 2 Цикл
			Для каждого Элемент из МассивЭД Цикл
				Если й = 1 Тогда
					Если Элемент.ок_Порядок <> МинимальныйПорядок Тогда
						Продолжить;
					КонецЕсли;
					//Если ЕстьТоварнаяНакладная Тогда
					//	Элемент.ТипДокумента = Перечисления.ТипыЭД.ТоварнаяНакладная;
					//КонецЕсли;
				Иначе	
					Если Элемент.ок_Порядок = МинимальныйПорядок Тогда
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				НовыйМассивЭД.Добавить(Элемент);
			КонецЦикла;	
		КонецЦикла;	
		СтруктураПакетаЭД.Вставить("МассивЭД",      НовыйМассивЭД);
		
		Возврат СтруктураПакетаЭД;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки,
		ТекстСообщения,
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-02 (#3821) 
		,
		ПакетЭД
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-02 (#3821)
		);
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-02 (#4056)
		Если ПакетЭД.СтатусПакета <> ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Неизвестный") Тогда
			ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
			ПакетЭДОбъект.СтатусПакета = ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Неизвестный");
			ПакетЭДОбъект.ОбменДанными.Загрузка = Истина;
			ПакетЭДОбъект.Записать();
		КонецЕсли;		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-02 (#4056)  
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПослеЗаписиРаспакованногоПакета(ПакетЭДОбъект, ок_СпособОбменаЭД, Параметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ок_СпособОбменаЭД) Тогда
		Возврат;
	КонецЕсли;	
	
	//для входящих Сбис мы скачиваем всегда весь пакет документов, поэтому нужно пометить на удаление неактуальные
	Если ПакетЭДОбъект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		Если Не ЗначениеЗаполнено(ПакетЭДОбъект.ок_ДатаТранзакции) Тогда
			Возврат;
		КонецЕсли;	
		ЭлектронныеДокументы = ПакетЭДОбъект.ЭлектронныеДокументы.ВыгрузитьКолонку("ОбъектВладелец");
		Если ЭлектронныеДокументы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		ЭлектронныйДокумент = ЭлектронныеДокументы[0];
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
		//исходящие пакеты сюда не попадают и регистрируются в другом месте
		РегистрыСведений.ок_ДокументыЭДДляПроверкиСлужебныхЭтапов.ЗарегистрироватьДокумент(ЭлектронныйДокумент);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДатаПоследнейТранзакции = '00010101';
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЖурналСобытийЭД.ок_ДатаТранзакции) КАК ок_ДатаТранзакции
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ВладелецЭД = &ВладелецЭД";
		Запрос.УстановитьПараметр("ВладелецЭД", ЭлектронныйДокумент);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДатаПоследнейТранзакции = Выборка.ок_ДатаТранзакции;
			Прервать;
		КонецЦикла;
		Если ДатаПоследнейТранзакции > ПакетЭДОбъект.ок_ДатаТранзакции Тогда //есть более свежие транзакции
			Возврат;
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
			|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-08 (#3509)
			//не ставим неактуальными внутреннюю переписку и допфайлы представления, так как они только в событии Получение, а в последующих их уже не будет
			|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_ВнутренняяПереписка)
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-08 (#3509)
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-10-05 (#4280)
			//|	И НЕ ЭДПрисоединенныеФайлы.Ссылка В(&МассивФайлов)
			|	И НЕ ЭДПрисоединенныеФайлы.Ссылка В(&МассивФайлов);
			////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
			|	И ЭДПрисоединенныеФайлы.Ссылка В (&МассивФайлов)
			|	И ЭДПрисоединенныеФайлы.ок_Неактуальный";
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-10-05 (#4280)
		
		Запрос.УстановитьПараметр("ВладелецФайла", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("МассивФайлов", ПакетЭДОбъект.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент"));
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-10-05 (#4280)
		//РезультатЗапроса = Запрос.Выполнить();
		МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
		РезультатЗапроса = МассивРезультатовЗапроса[0];
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-10-05 (#4280)
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПрисоединенныйФайл = Выборка.Ссылка.ПолучитьОбъект();
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
			//ПрисоединенныйФайл.ПометкаУдаления = Истина;
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
			ПрисоединенныйФайл.ок_Неактуальный = Истина;
			ПрисоединенныйФайл.Записать();
		КонецЦикла;
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-10-05 (#4280)
		// Восстановление файлов:
		// Может быть такое, что СБИС из-за сбоя в каком то из пакетов не прислал файлы и они становятся неактульными по алгоритму выше.
		// Но по факту эти файлы есть и они актуальные, если они пришли в следующих пакетах, то их необходимо восстановить.
		РезультатЗапроса = МассивРезультатовЗапроса[1];
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПрисоединенныйФайл = Выборка.Ссылка.ПолучитьОбъект();
			ПрисоединенныйФайл.ок_Неактуальный = Ложь;
			ПрисоединенныйФайл.Записать();
		КонецЦикла;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-10-05 (#4280)
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДополнитьДаннымиПакетЭД(ПакетЭД, СтруктураПараметров) Экспорт
	
	ок_Параметры = Новый Структура("ок_КодТранзакции, ок_ДатаТранзакции, Комментарий, ок_Сумма, ок_Наименование, ок_Удален, ок_Дата, ок_ДатаРедакции");
	ЗаполнитьЗначенияСвойств(ок_Параметры, СтруктураПараметров);
	ЗаполнитьЗначенияСвойств(ПакетЭД, ок_Параметры);
	
КонецПроцедуры

Функция ПроверитьИдентификаторУчастникаОбменаЭД(НастройкаЭДО, ИдентификаторОтправитель, ИдентификаторПолучатель, ПричинаОтклонения = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторОтправитель) ИЛИ Не ЗначениеЗаполнено(ИдентификаторПолучатель) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СоглашенияОбИспользованииЭД.ок_ИдентификаторУчастникаОбмена КАК ок_ИдентификаторУчастникаОбменаНастройка,
	//	|	СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО.ок_ИдентификаторУчастникаОбмена КАК ок_ИдентификаторУчастникаОбменаПрофиль
	//	|ИЗ
	//	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	//	|ГДЕ
	//	|	СоглашенияОбИспользованииЭД.Ссылка = &НастройкаЭДО";
	//Запрос.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкиОтправкиЭлектронныхДокументовПоВидам.ок_ИдентификаторУчастникаОбмена КАК ок_ИдентификаторУчастникаОбменаНастройка,
	                      |	УчетныеЗаписиЭДО.ок_ИдентификаторУчастникаОбмена КАК ок_ИдентификаторУчастникаОбменаПрофиль
	                      |ИЗ
	                      |	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	                      |		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = УчетныеЗаписиЭДО.ИдентификаторЭДО
	                      |ГДЕ
	                      |	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = &ИдентификаторОтправителя
	                      |	И НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя = &ИдентификаторПолучателя");
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", НастройкаЭДО.Отправитель);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", НастройкаЭДО.Получатель);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	//ок_ИдентификаторУчастникаОбменаНастройка = Выборка.ок_ИдентификаторУчастникаОбменаНастройка;
	Если Не ЗначениеЗаполнено(Выборка.ок_ИдентификаторУчастникаОбменаНастройка) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-10 (#3391)
	//Если ИдентификаторОтправитель = Выборка.ок_ИдентификаторУчастникаОбменаНастройка 
	//	ИЛИ ИдентификаторПолучатель = Выборка.ок_ИдентификаторУчастникаОбменаНастройка Тогда
	//	Возврат Истина;
	//КонецЕсли;	
	Если ВРег(ИдентификаторОтправитель) = ВРег(Выборка.ок_ИдентификаторУчастникаОбменаНастройка) 
		ИЛИ ВРег(ИдентификаторПолучатель) = ВРег(Выборка.ок_ИдентификаторУчастникаОбменаНастройка) Тогда
		Возврат Истина;
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-10 (#3391)
	
	ИдентификаторУчастникаОбмена = "";
	//часть документов пакета могут быть ответные, поэтому определяем идентификатор контрагента, как НЕ идентификатор нашей организации
	Если ЗначениеЗаполнено(Выборка.ок_ИдентификаторУчастникаОбменаПрофиль) Тогда
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-10 (#3391)
		//Если ИдентификаторОтправитель = Выборка.ок_ИдентификаторУчастникаОбменаПрофиль Тогда 
		//	ИдентификаторУчастникаОбмена = ИдентификаторПолучатель;
		//ИначеЕсли ИдентификаторПолучатель = Выборка.ок_ИдентификаторУчастникаОбменаПрофиль Тогда 
		//	ИдентификаторУчастникаОбмена = ИдентификаторОтправитель;
		//Конецесли;	
		Если ВРег(ИдентификаторОтправитель) = ВРег(Выборка.ок_ИдентификаторУчастникаОбменаПрофиль) Тогда 
			ИдентификаторУчастникаОбмена = ИдентификаторПолучатель;
		ИначеЕсли ВРег(ИдентификаторПолучатель) = ВРег(Выборка.ок_ИдентификаторУчастникаОбменаПрофиль) Тогда 
			ИдентификаторУчастникаОбмена = ИдентификаторОтправитель;
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-10 (#3391)
	КонецЕсли;	
	
	ПричинаОтклонения = "Контрагент с Идентификатором участника ЭДО по ЭСФ " + ИдентификаторУчастникаОбмена + " не настроен на обмен на стороне Покупателя";
	
	Возврат Ложь;
	
КонецФункции	

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
Процедура ЗаполнитьНомерВерсииПрисоединенногоФайла(Источник) Экспорт
	
	//дата редакции пишется в ДатаФормированияЭДОтправителем, по наименованию (НомерЭД) отбор не работает, так как в новой версии имя файла обычно меняется (есть суффикс даты)
	//мы будем получать номер редакции как количество различных ДатаФормированияЭДОтправителем всех файлов электронного документа до этой даты файла
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭДПрисоединенныеФайлы.ДатаФормированияЭДОтправителем КАК ДатаФормированияЭДОтправителем
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		//|	И ЭДПрисоединенныеФайлы.НомерЭД = &НомерЭД
		//|	И ЭДПрисоединенныеФайлы.Ссылка <> &Ссылка
		|	И ЭДПрисоединенныеФайлы.ДатаФормированияЭДОтправителем <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЭДПрисоединенныеФайлы.ДатаФормированияЭДОтправителем < &ДатаФормированияЭДОтправителем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(1) КАК Номер
		|ИЗ
		|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Источник.ВладелецФайла);
	Запрос.УстановитьПараметр("ДатаФормированияЭДОтправителем", Источник.ДатаФормированияЭДОтправителем);
	//Запрос.УстановитьПараметр("НомерЭД", Источник.НомерЭД);
	//Запрос.УстановитьПараметр("Ссылка", ?(Источник.ЭтоНовый(), Неопределено, Источник.Ссылка));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Количество = 0;
	Пока Выборка.Следующий() Цикл
		Количество = ?(Выборка.Номер = NULL, 0, Выборка.Номер);
	КонецЦикла;
	
	Источник.ок_НомерВерсииЭД = Количество + 1;

КонецПроцедуры	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)

//Процедура ПроверитьИдентификаторУчастникаОбменаИСкорректироватьСтатусДокументаЭД(Статус, НастройкаЭДО, ИдентификаторОтправитель, ИдентификаторПолучатель, ПричинаОтклонения = "", СтруктураВладельцаЭД = Неопределено) Экспорт
//	
//	Если Не ПроверитьИдентификаторУчастникаОбменаЭД(НастройкаЭДО, ИдентификаторОтправитель, ИдентификаторПолучатель, ПричинаОтклонения, Статус) Тогда
//		Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать;
//	КонецЕсли;
//	
//	Если СтруктураВладельцаЭД <> Неопределено Тогда
//		СтруктураВладельцаЭД.Вставить("ПричинаОтклонения", ПричинаОтклонения);
//	КонецЕсли;	
//	
//	//Если Не ЗначениеЗаполнено(ок_ИдентификаторУчастникаОбменаОтправитель) ИЛИ Не ЗначениеЗаполнено(ок_ИдентификаторУчастникаОбменаПолучатель) Тогда
//	//	Возврат;
//	//КонецЕсли;	
//	//
//	//Если Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый И Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ПустаяСсылка() Тогда
//	//	Возврат;
//	//КонецЕсли;	
//	//
//	//Запрос = Новый Запрос;
//	//Запрос.Текст = 
//	//	"ВЫБРАТЬ
//	//	|	СоглашенияОбИспользованииЭД.ок_ИдентификаторУчастникаОбмена КАК ок_ИдентификаторУчастникаОбменаНастройка,
//	//	|	СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО.ок_ИдентификаторУчастникаОбмена КАК ок_ИдентификаторУчастникаОбменаПрофиль
//	//	|ИЗ
//	//	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
//	//	|ГДЕ
//	//	|	СоглашенияОбИспользованииЭД.Ссылка = &НастройкаЭДО";
//	//Запрос.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
//	//УстановитьПривилегированныйРежим(Истина);
//	//РезультатЗапроса = Запрос.Выполнить();
//	//Если РезультатЗапроса.Пустой() Тогда
//	//	Возврат;
//	//КонецЕсли;	
//	//
//	//Выборка = РезультатЗапроса.Выбрать();
//	//Выборка.Следующий();

//	//ок_ИдентификаторУчастникаОбменаНастройка = Выборка.ок_ИдентификаторУчастникаОбменаНастройка;
//	//Если Не ЗначениеЗаполнено(ок_ИдентификаторУчастникаОбменаНастройка) Тогда
//	//	Возврат;
//	//КонецЕсли;	
//	//
//	//Если ок_ИдентификаторУчастникаОбменаОтправитель = ок_ИдентификаторУчастникаОбменаНастройка 
//	//	ИЛИ ок_ИдентификаторУчастникаОбменаПолучатель = ок_ИдентификаторУчастникаОбменаНастройка Тогда
//	//	Возврат;
//	//КонецЕсли;	
//	//
//	//Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать;
//	//
//	//ИдентификаторУчастникаОбмена = "";
//	////часть документов пакета могут быть ответные, поэтому определяем идентификатор контрагента, как НЕ идентификатор нашей организации
//	//Если ЗначениеЗаполнено(Выборка.ок_ИдентификаторУчастникаОбменаПрофиль) Тогда
//	//	Если ок_ИдентификаторУчастникаОбменаОтправитель = Выборка.ок_ИдентификаторУчастникаОбменаПрофиль Тогда 
//	//		ИдентификаторУчастникаОбмена = ок_ИдентификаторУчастникаОбменаПолучатель;
//	//	ИначеЕсли ок_ИдентификаторУчастникаОбменаПолучатель = Выборка.ок_ИдентификаторУчастникаОбменаПрофиль Тогда 
//	//		ИдентификаторУчастникаОбмена = ок_ИдентификаторУчастникаОбменаОтправитель;
//	//	Конецесли;	
//	//КонецЕсли;	
//	//ПричинаОтклонения = "Контрагент с Идентификатором участника ЭДО по ЭСФ " + ИдентификаторУчастникаОбмена + " не настроен на обмен на стороне Покупателя";
//	//
//	//Если СтруктураВладельцаЭД <> Неопределено Тогда
//	//	СтруктураВладельцаЭД.Вставить("ПричинаОтклонения", ПричинаОтклонения);
//	//КонецЕсли;	

//КонецПроцедуры	

			
////////////////////////////////////////////////////////////////////////////////
// Отображение входящего ЭД

Процедура ВывестиПодчиненныеДокументы(ТекущийДокумент, ДеревоРодитель, АктуальныйЭД = Неопределено, ВыводитьНеактуальные = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПрисоединенныеФайлы.Ссылка.СтатусЭД КАК СтатусЭД,
	|	ПрисоединенныеФайлы.Ссылка.ДатаИзмененияСтатусаЭД КАК ДатаИзмененияСтатусаЭД,
	|	ПрисоединенныеФайлы.Ссылка.ЭлектронныйДокументВладелец КАК ЭлектронныйДокументВладелец,
	|	ПрисоединенныеФайлы.Ссылка.НаправлениеЭД КАК НаправлениеЭД,
	|	ПрисоединенныеФайлы.Ссылка.ВладелецФайла КАК ВладелецФайла,
	|	ПрисоединенныеФайлы.Ссылка.Представление КАК Представление,
	|	ПрисоединенныеФайлы.Ссылка.Расширение КАК Расширение,
	|	ПрисоединенныеФайлы.Ссылка.ок_ВходитВПакетЭД КАК ок_ВходитВПакетЭД,
	|	ПрисоединенныеФайлы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ПодчиненныеПрисоединенныеФайлы.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаличиеПодчиненныхДокументов,
	|	ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД КАК ТипЭД,
	|	ВЫБОР
	|		КОГДА ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД В (&СписокТиповЭД)
	|			ТОГДА ВЫБОР
	|					КОГДА ПрисоединенныеФайлы.Ссылка.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|						ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|							ИНАЧЕ ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Версия
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ВладелецФайла = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения)) КАК ПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеПрисоединенныеФайлы
	|		ПО (НЕ ПодчиненныеПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения))
	|			И ПрисоединенныеФайлы.Ссылка = ПодчиненныеПрисоединенныеФайлы.ЭлектронныйДокументВладелец
	|ГДЕ
	|	НЕ ПрисоединенныеФайлы.Ссылка.ПометкаУдаления
	|	И НЕ ПрисоединенныеФайлы.Ссылка.ок_Неактуальный
	//|	И ПрисоединенныеФайлы.Ссылка.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзмененияСтатусаЭД";
		
	Запрос.УстановитьПараметр("СписокТиповЭД", МассивТиповЭДКорневыхЭлементовДерева());
	Запрос.УстановитьПараметр("ТиповЭДИсключения", МассивТиповЭДНеОтображаемыхВДереве());
	Запрос.УстановитьПараметр("ОбъектВладелец", ТекущийДокумент);
	//Запрос.УстановитьПараметр("ВыводитьНеактуальные", ВыводитьНеактуальные);
	//Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийДокумент, "ТипЭлементаВерсииЭД"));
	Выборка = Запрос.Выполнить().Выбрать();

	ДатаАктуальногоЭД = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ВыводитьНеактуальные Тогда
			Если Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД Тогда
				Продолжить;
			ИначеЕсли Выборка.ок_ВходитВПакетЭД И НРег(Выборка.Расширение) = "xml" Тогда //вместо корневых отображаем пдф-ки
				Продолжить;
			ИначеЕсли Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД Тогда
				
			ИначеЕсли ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Выборка.ТипЭД) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСтрокуДерева(ДеревоРодитель, Выборка, ДатаАктуальногоЭД);
		
		//Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Выборка.Ссылка) Тогда
		//	ЗаполнитьСтрокуДерева(ДеревоРодитель, Выборка, ДатаАктуальногоЭД);
		//	Продолжить;
		//КонецЕсли;
		//
		//ТипЭД = ?(Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО,
		//	Перечисления.ТипыЭлементовВерсииЭД.ПДП,
		//	Выборка.ТипЭД);
		//	
		//Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
		//	ПараметрыПоиска = Новый Структура("ТипЭД", ТипЭД);
		//Иначе 
		//	ПараметрыПоиска = Новый Структура("ТипЭД, НаправлениеЭД", ТипЭД, Выборка.НаправлениеЭД);
		//КонецЕсли;
		//
		//
		//МассивСтрокДерева = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
		//
		//Если МассивСтрокДерева.Количество() = 0 Тогда
		//	// Добавляются уведомления об уточнении подчиненных ЭД
		//	// (ТОРГ-12 титул покупателя, Акт титул заказчика).
		//	Если ЗначениеЗаполнено(Выборка.ЭлектронныйДокументВладелец) Тогда
		//		ПараметрыПоиска = Новый Структура("Ссылка",Выборка.ЭлектронныйДокументВладелец);
		//		МассивСтрокДереваВладельца = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоиска, Ложь);
		//		Если МассивСтрокДереваВладельца.Количество() > 0 Тогда
		//			СтрокаДерева = МассивСтрокДереваВладельца[0].Строки.Добавить();
		//		Иначе
		//			СтрокаДерева = ДеревоРодитель.Строки.Добавить();
		//		КонецЕсли;
		//	Иначе
		//		СтрокаДерева = ДеревоРодитель.Строки.Добавить();
		//	КонецЕсли;
		//	ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД);
		//КонецЕсли;
		//
		//Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
		//	ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД);
		//КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД)
	
	НоваяСтрокаДерева = СтрокаДерева.Строки.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Выборка,
		"Ссылка, СтатусЭД, ДатаИзмененияСтатусаЭД, НаправлениеЭД, Представление, ПометкаУдаления, Версия, ТипЭД");
	
	//СтруктураПараметров = Новый Структура;
	//Если Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
	//	ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
	//	ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
	//	ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
	//	ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
	//	ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
	//	ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
	//	ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
	//	ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
	//	
	//	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ВладелецФайла,"НомерДокументаОтправителя,ДатаДокументаОтправителя");

	//	СтруктураПараметров.Вставить("НомерВладельца", СвойстваЭД.НомерДокументаОтправителя);
	//	СтруктураПараметров.Вставить("ДатаВладельца",  СвойстваЭД.ДатаДокументаОтправителя);
	//КонецЕсли;
	//СтруктураПараметров.Вставить("ТипЭД",              Выборка.ТипЭД);

	//СтрокаДерева.Представление = ОбменСКонтрагентамиСлужебный.ОпределитьПредставлениеЭД(СтрокаДерева.ВидЭД, СтруктураПараметров);
	//
	//// Для входящих ЭД актуальность меняется вручную. В связи с этим надо выделять в списке
	//// цветом более актуальные ЭД. Для этого в дереве есть реквизит "ДатаЭДБольшеАктуального",
	//// а так же для сравнивания текущей даты создания ЭД с датой актуального ЭД, существует
	//// реквизит объекта "ДатаАктуальногоЭД". Необходимо заполнить их.
	//СтрокаДерева.ДатаЭДБольшеАктуального = Ложь;
	//Если СтрокаДерева.АктуальныйЭД Тогда
	//	Если НЕ ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия) Тогда
	//		ДатаАктуальногоЭД = Выборка.Версия;
	//	КонецЕсли;
	//ИначеЕсли ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия)
	//	И ДатаАктуальногоЭД < Выборка.Версия Тогда
	//	СтрокаДерева.ДатаЭДБольшеАктуального = Истина;
	//КонецЕсли;
		
КонецПроцедуры

Функция МассивТиповЭДКорневыхЭлементовДерева()
	
	СписокТиповЭД = Новый Массив;	
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	
	Возврат СписокТиповЭД;
	
КонецФункции

Функция МассивТиповЭДНеОтображаемыхВДереве()
	
	СписокТиповЭД = Новый Массив;
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
	
	Возврат СписокТиповЭД;
	
КонецФункции

Функция ПрисоединенныйФайл(ВладелецФайла, ТипЭлементаВерсииЭД = Неопределено,СообщатьОбОшибке = Ложь) Экспорт
	
	Перем ПрисоединенныйФайл;
	
	Если ТипЭлементаВерсииЭД = Неопределено Тогда
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ТипЭлементаВерсииЭД");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
				   //1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
				   |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
				   |			ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = ЭлектронныйДокументВходящий.ИдентификаторОрганизации
				   //1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	               |		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокументВходящий.Ссылка
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	               |	И ВЫБОР
	               |			КОГДА ЭлектронныйДокументВходящий.Ссылка ЕСТЬ NULL
	               |				ТОГДА ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД
				   //1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	               //|			КОГДА ЭлектронныйДокументВходящий.ПрофильНастроекЭДО.ок_СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)
				   |			КОГДА УчетныеЗаписиЭДО.ок_СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)
				   //1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	               |				ТОГДА ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВладелецФайла",ВладелецФайла);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД",ТипЭлементаВерсииЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПрисоединенныйФайл = Выборка.Ссылка;
	ИначеЕсли СообщатьОбОшибке Тогда
		Операция = НСтр("ru = 'Получение присоединенного файла'");
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл документа %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ВладелецФайла);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
		Операция, ТекстОшибки, ТекстОшибки, , ВладелецФайла);
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
Функция ПолучитьПрисоединенныеФайлыВходящегоЭДДляОтображения(Документ, ОтображатьВсеФайлы = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
	//текст запроса вынесен в отдельную функцию
	ПолучитьТекстЗапросаПрисоединенныеФайлыВходящегоЭДДляОтображения();
	//ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)
		
			
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	Запрос.УстановитьПараметр("ОтображатьВсеФайлы", ОтображатьВсеФайлы);
	Запрос.УстановитьПараметр("ОсновныеТипыЭД", ОбменСКонтрагентамиСлужебный.ОсновныеТипыЭД());

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьПрисоединенныеФайлыИсходящегоЭДДляОтображения(Документ, ОтображатьВсеФайлы = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Данные.Ссылка КАК ПрисоединенныйФайл,
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4330)
			|	Данные.ок_Неактуальный КАК ок_Неактуальный,
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4330)
			|	Данные.Расширение КАК Расширение,
			|	Данные.НаименованиеФайла + ВЫБОР
			|		КОГДА Данные.Расширение = """"
			|			ТОГДА """"
			|		ИНАЧЕ "".""
			|	КОНЕЦ + Данные.Расширение КАК Имя,
			|	Данные.ДатаМодификацииУниверсальная КАК ДатаИзменения,
			|	Данные.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК Данные
			|		ПО (ЭлектронныйДокументИсходящий.Ссылка = &ВладелецФайла)
			|			И ЭлектронныйДокументИсходящий.Ссылка = Данные.ВладелецФайла
			|ГДЕ
			|	ВЫБОР
			|			КОГДА &ОтображатьВсеФайлы
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ВЫБОР
			|						КОГДА ЭлектронныйДокументИсходящий.ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Подписать)
			|								ИЛИ ЭлектронныйДокументИсходящий.ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.ПустаяСсылка)
			|							ТОГДА Данные.ТипЭлементаВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД)
			|						КОГДА ЭлектронныйДокументИсходящий.ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Отправлен)
			|							ТОГДА Не Данные.ок_Архив И Данные.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД)
			|								 И ВЫБОР
			|										КОГДА Данные.Расширение = ""pdf""
			|											ИЛИ Данные.Расширение = ""PDF""
			|										ТОГДА Данные.ПодписанЭП
			|									ИНАЧЕ ИСТИНА
			|									КОНЕЦ
			|						КОГДА ЭлектронныйДокументИсходящий.ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Завершен)
			|							ТОГДА Не Данные.ок_Архив И Данные.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД) 
			|								 И ВЫБОР
			|										КОГДА Данные.Расширение = ""pdf""
			|											ИЛИ Данные.Расширение = ""PDF""
			|										ТОГДА НЕ Данные.ПодписанЭП
			|									ИНАЧЕ ИСТИНА
			|									КОНЕЦ
			|						ИНАЧЕ ЛОЖЬ
			|					КОНЕЦ
			//|			КОГДА Данные.Расширение = ""xml""
			//|					ИЛИ Данные.Расширение = ""XML""
			//|				ТОГДА ВЫБОР
			//|						КОГДА ЭлектронныйДокументИсходящий.ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Подписать)
			//|								ИЛИ ЭлектронныйДокументИсходящий.ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.ПустаяСсылка)
			//|							ТОГДА Данные.ТипЭлементаВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД)
			//|						ИНАЧЕ Данные.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД)
			//|					КОНЕЦ
			//|			КОГДА Данные.Расширение = ""pdf""
			//|					ИЛИ Данные.Расширение = ""PDF""
			//|				ТОГДА ИСТИНА
			//|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	И НЕ Данные.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаИзменения УБЫВ";
			
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	Запрос.УстановитьПараметр("ОтображатьВсеФайлы", ОтображатьВсеФайлы);
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)

////////////////////////////////////////////////////////////////////////////////
// Утверждение входящих ЭД

Функция УтвердитьОтклонитьВходящийДокумент(Документ, ДанныеДляПодписания, НеОповещатьПользователяОбОшибке = Ложь) Экспорт
	
	Возврат ВыполнитьПодписаниеЭлектронногоДокумента(Документ, ДанныеДляПодписания, "Входящий", НеОповещатьПользователяОбОшибке);
	
КонецФункции

Функция ВыполнитьПодписаниеЭлектронногоДокумента(Документ, ДанныеДляПодписания, ВидДокумента = "Входящий", НеОповещатьПользователяОбОшибке = Ложь) Экспорт

	РезультатОтправки = Ложь;
	Если Не ДанныеДляПодписания.Свойство("ПараметрыЭДО") Тогда
		Возврат РезультатОтправки;
	КонецЕсли;	
	
	Если ВидДокумента = "Входящий" Тогда
		НовыйСтатус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен;
	Иначе
		НовыйСтатус = Перечисления.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Отправлен;
	КонецЕсли;	
	
	Результат = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьРезультатЗапросаДляПроверкиЭлектронногоДокументаПередИзменениемСтатуса(Документ, НовыйСтатус, ВидДокумента);
	Если Результат.Пустой() Тогда
		Возврат РезультатОтправки;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьЭлектронныйДокументПередИзменениемСтатуса(Выборка, НовыйСтатус, НеОповещатьПользователяОбОшибке) Тогда
			Возврат РезультатОтправки;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	Если ДанныеДляПодписания.ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		РезультатОтправки = сбисВыполнитьДействиеПодписания(ДанныеДляПодписания.ПараметрыЭДО, ДанныеДляПодписания);
	КонецЕсли;	
	
	Если Не РезультатОтправки Тогда
		Возврат РезультатОтправки;
	КонецЕсли;	
	
	Если ВидДокумента = "Исходящий" Тогда
		//сохраним возвращенный подписанный файл и подпись
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-05 (#4330)
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		               |ГДЕ
		               |	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		               |	И ЭДПрисоединенныеФайлы.Наименование = &Наименование
		               |	И ЭДПрисоединенныеФайлы.Расширение ПОДОБНО &Расширение";
		
		Запрос.УстановитьПараметр("ВладелецФайла", Документ);
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-05 (#4330) 
		Для каждого ДанныеФайлаДляПодписания Из ДанныеДляПодписания.ФайлыДляПодписания Цикл
			
			ДанныеИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДанныеФайлаДляПодписания.ИмяФайла);
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", Документ);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ДанныеИмениФайла.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ДанныеИмениФайла.Расширение));
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			
			Файл = Новый Файл(ДанныеФайлаДляПодписания.АдресФайлаНаСервере);
			Если Файл.Существует() Тогда
				ВременныйАдрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ДанныеФайлаДляПодписания.АдресФайлаНаСервере));
				УдалитьФайлы(ДанныеФайлаДляПодписания.АдресФайлаНаСервере);			
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-09-27 (#4330)
				//ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ВременныйАдрес, , , );
				Запрос.УстановитьПараметр("Наименование", ДанныеИмениФайла.ИмяБезРасширения);
				Запрос.УстановитьПараметр("Расширение", ПараметрыФайла.РасширениеБезТочки);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НайденныйПрисоединенныйФайл = Выборка.Ссылка;
					ДобавленныйФайл = НайденныйПрисоединенныйФайл;
				Иначе
					НайденныйПрисоединенныйФайл = Неопределено;
					ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ВременныйАдрес, , , );
				КонецЕсли;
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-09-27 (#4330)
				
				УдалитьИзВременногоХранилища(ВременныйАдрес);
				Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
					
					СтруктураЭД = Новый Структура;
					СтруктураЭД.Вставить("ВладелецЭД", Документ);
					//СтруктураЭД.Вставить("Отправитель", ПараметрыПакетаЭД.Отправитель);
					//СтруктураЭД.Вставить("Получатель", ПараметрыПакетаЭД.Получатель);
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-19 (#4330)
					//СтруктураЭД.Вставить("УникальныйИД", ДанныеФайлаДляПодписания.Идентификатор);
					Если Не ЗначениеЗаполнено(НайденныйПрисоединенныйФайл) Тогда
						СтруктураЭД.Вставить("УникальныйИД", ДанныеФайлаДляПодписания.Идентификатор);
					КонецЕсли;
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-19 (#4330)
					СтруктураЭД.Вставить("НомерЭД", ДанныеФайлаДляПодписания.ИмяФайла);
					СтруктураЭД.Вставить("НаименованиеФайла", ДанныеИмениФайла.ИмяБезРасширения);
					СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-09-30 (#4330)
					//СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД);
					Если Не ЗначениеЗаполнено(НайденныйПрисоединенныйФайл) Тогда
						СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД);
					Иначе
						СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", НайденныйПрисоединенныйФайл.ТипЭлементаВерсииЭД);
					КонецЕсли;
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-09-30 (#4330)
					СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
					
					ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
					
					ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ДанныеФайлаДляПодписания.АдресПодписи);
					УдалитьИзВременногоХранилища(ДанныеФайлаДляПодписания.АдресПодписи);
					СвойстваПодписи = Новый Структура;
					СвойстваПодписи.Вставить("Подпись", ДвоичныеДанныеПодписи);
					СвойстваПодписи.Вставить("Отпечаток", ДанныеФайлаДляПодписания.Отпечаток);
					СвойстваПодписи.Вставить("ПодписьВерна", Истина);
					СвойстваПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
					РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеФайлаДляПодписания.Сертификат, "КомуВыдан, ДанныеСертификата");
					СвойстваПодписи.Вставить("Сертификат", РеквизитыСертификата.ДанныеСертификата.Получить());
					СвойстваПодписи.Вставить("КомуВыданСертификат", РеквизитыСертификата.КомуВыдан);
					
					ЭлектроннаяПодпись.ДобавитьПодпись(ДобавленныйФайл, СвойстваПодписи);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
	Иначе
		//установим признак отправленного
		Для каждого ДанныеФайлаДляПодписания Из ДанныеДляПодписания.ФайлыДляПодписания Цикл
			
			Если Не ДанныеФайлаДляПодписания.Свойство("Ссылка") Тогда
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(ДанныеФайлаДляПодписания.Ссылка) Тогда
				Продолжить;
			КонецЕсли;	
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-26 (#3796)
			//ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДанныеФайлаДляПодписания.Ссылка, Новый Структура("ок_Отправлен", Истина), Ложь);
			ПараметрыФайла = Новый Структура("ок_Отправлен", Истина);
			//ПараметрыФайла.Вставить("ДополнительныеСвойства", Новый Структура("ок_НеЗаполнятьДанныеДокументовЭД", Истина)); //более не требуется
			ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДанныеФайлаДляПодписания.Ссылка, ПараметрыФайла, Ложь);
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-26 (#3796)
			
		КонецЦикла;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
	
	КонецЕсли;	
	
	Объект = Документ.ПолучитьОбъект();
	Объект.ок_Статус = НовыйСтатус;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
	Если ВидДокумента = "Входящий" И (НЕ ЗначениеЗаполнено(Объект.ок_ДатаРедакцииОтправленной)) Тогда
		Объект.ок_НомерВерсииОтправленной = Объект.НомерВерсииЭД;
		Объект.ок_ДатаРедакцииОтправленной = Объект.ок_ДатаРедакции;
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)

	Попытка
		Объект.Записать(?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	Исключение
		ШаблонОшибкиЗаписать = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Документ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = НСтр("ru = 'Ошибка установки статуса Отправлен.'");
		Если НеОповещатьПользователяОбОшибке Тогда
			ТекстОшибки = ТекстОшибки + "; " + ТекстСообщения;
			ТекстСообщения = "";
		КонецЕсли;	
		Операция = "Подписание документа";
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
	КонецПопытки;
		
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ЭлектронныйДокументВходящий.УникальныйИД КАК Идентификатор,
	//	|	ЭлектронныйДокументВходящий.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	//	|	ЭлектронныйДокументВходящий.ПричинаОтклонения КАК ПричинаОтклонения
	//	|ИЗ
	//	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	//	|ГДЕ
	//	|	ЭлектронныйДокументВходящий.ПрофильНастроекЭДО.ок_СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)
	//	|	И ЭлектронныйДокументВходящий.Ссылка = &Документ
	//	|	И ЭлектронныйДокументВходящий.НастройкаЭДО.СостояниеСоглашения = ЗНАЧЕНИЕ(Перечисление.СостоянияСоглашенийЭД.Действует)";
	//
	//Запрос.УстановитьПараметр("Документ", Документ);  
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ПараметрыЭДО = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(Выборка.ПрофильНастроекЭДО);
	//	ПараметрыЭДО.Вставить("ДанныеДляПодписания", ДанныеДляПодписания);
	//	Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
	//		Возврат сбисВыполнитьДействиеПодписания(ПараметрыЭДО, Выборка.Идентификатор, ?(ПустаяСтрока(Выборка.ПричинаОтклонения), "Утвердить", "Отклонить"), Выборка.ПричинаОтклонения);
	//	КонецЕсли;	
	//КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка служебных этапов

Процедура ОбработатьСлужебныеЭтапы(ПрофильНастроекЭДО = Неопределено) Экспорт
	
	Возврат;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	Данные.Ссылка КАК ПрофильНастроекЭДО
	//	|ИЗ
	//	|	Справочник.ПрофилиНастроекЭДО КАК Данные
	//	|ГДЕ
	//	|	НЕ Данные.ПометкаУдаления
	//	|	И Данные.ок_СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)
	//	|	И (Данные.Ссылка = &ПрофильНастроекЭДО
	//	|			ИЛИ &ПоВсем)";
	//
	//Запрос.УстановитьПараметр("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
	//Запрос.УстановитьПараметр("ПоВсем", ПрофильНастроекЭДО = Неопределено);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	ПараметрыЭДО = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(Выборка.ПрофильНастроекЭДО);
	//	//ПараметрыКоманды = Неопределено;
	//	//Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("ProcessServiceStages", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	//	Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
	//		
	//		Соединение = ПолучитьСоединение(ПараметрыЭДО.СпособОбменаЭД, ПараметрыЭДО);
	//		ПараметрыКоманды = сбисФильтрВПараметрыЗапроса(Новый Структура("НашаОрганизация", сбисСтруктураУчастника(ПараметрыЭДО.Организация, ПараметрыЭДО.ИдентификаторОрганизации)));
	//		ПродолжатьЗапросы = Истина;
	//		Пока ПродолжатьЗапросы Цикл
	//			
	//			Результат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("ListServiceStages", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	//			Если Результат = Неопределено Тогда
	//				Прервать;
	//			ИначеЕсли Не Результат.Свойство("result") Тогда 
	//				Прервать;
	//			КонецЕсли;	
	//			
	//			Обработано = 0;
	//			Для Каждого СоставПакета Из Результат.result.Документ Цикл
	//				//Если СоставПакета.Этап.Количество() = 0 Тогда
	//				//	Продолжить;
	//				//ИначеЕсли СоставПакета.Этап[0].Действие.Количество() = 0 Тогда
	//				//	Продолжить;
	//				//ИначеЕсли Не сбисПроверитьСертификат(СоставПакета.Этап[0].Действие[0]) Тогда
	//				//	Продолжить;
	//				//КонецЕсли;	
	//				
	//				//ПараметрыКомандыИнформация = сбисФильтрВПараметрыЗапроса(Новый Структура("ИдентификаторДокумента", СоставПакета.Идентификатор));
	//				//Информация = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("InfoServiceStages", ПараметрыЭДО, ПараметрыКомандыИнформация), ПараметрыЭДО);
	//				//Если Не Информация.Свойство("result") Тогда
	//				//	Продолжить;
	//				//ИначеЕсли Не Информация.result.Свойство("ЧислоНеобработанныхЭтапов") Тогда
	//				//	Продолжить;
	//				//КонецЕсли;

	//				//Если Число(Информация.result.Свойство("ЧислоНеобработанныхЭтапов")) > 0 Тогда
	//				//	РезультатПоДокументу = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("ListServiceStages", ПараметрыЭДО, ПараметрыКомандыИнформация), ПараметрыЭДО);
	//				//	Если РезультатПоДокументу = Неопределено Тогда
	//				//		Продолжить;
	//				//	ИначеЕсли Не РезультатПоДокументу.Свойство("result") Тогда 
	//				//		Продолжить;
	//				//	КонецЕсли;	
	//				//	
	//				//	Для Каждого Документ Из РезультатПоДокументу.result.Документ Цикл
	//				//		ВыполненЭтап = сбисВыполнитьДействиеБезОбработкиСлужебных(Соединение, ПараметрыЭДО, Документ, Документ.Этап[0], Документ.Этап[0].Действие[0]);
	//				//		Если ВыполненЭтап Тогда
	//				//			Обработано = Обработано + 1;
	//				//		КонецЕсли;
	//				//	КонецЦикла;
	//				//КонецЕсли;
	//				
	//				
	//				Выполнено = сбисОбработатьСлужебныеДокументыПоПакету(Соединение, ПараметрыЭДО, СоставПакета.Идентификатор);
	//				Если Выполнено Тогда
	//					Обработано = Обработано + 1;
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			Если Обработано = 0  Тогда     
	//				//Обработать по какой-то причине не можем (например нет сертификатов)
	//				Прервать;
	//			КонецЕсли;
	//			ПродолжатьЗапросы = (Результат.result.Навигация.ЕстьЕще = "Да");
	//			
	//		КонецЦикла;
	//	КонецЕсли;	
	//		
	//КонецЦикла;
	
	
КонецПроцедуры

Функция УтвердитьСлужебныйДокумент(Документ, ДанныеДляПодписания) Экспорт
		
	Если ДанныеДляПодписания.Свойство("ПараметрыЭДО") Тогда
		Если ДанныеДляПодписания.ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
			//Возврат сбисВыполнитьДействиеПодписания(ДанныеДляПодписания.ПараметрыЭДО, ДанныеДляПодписания, Истина);
			//Результат = Истина;
			Результат = сбисВыполнитьДействиеПодписания(ДанныеДляПодписания.ПараметрыЭДО, ДанныеДляПодписания, Истина);
			Если Результат Тогда
				РегистрыСведений.ок_ДокументыЭДДляПроверкиСлужебныхЭтапов.СнятьСРегистрацииДокумент(Документ, ДанныеДляПодписания.ДатаСеанса);
			КонецЕсли;	
			
			Возврат Результат;
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
			
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьНаличиеНеобработанныхСлужебныхДокументов(ПараметрыЭДО, ПрекратитьЗапросы = Ложь, Количество = 0) Экспорт 
	
	Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		Возврат сбисПроверитьНаличиеНеобработанныхСлужебныхДокументов(ПараметрыЭДО, , ПрекратитьЗапросы, Количество);
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
//Функция ПолучитьДанныеСлужебныхДокументовДляПодписания(Профиль, Сертификат = Неопределено, Продолжать = Ложь) Экспорт
Функция ПолучитьДанныеСлужебныхДокументовДляПодписания(Профиль, Сертификат = Неопределено, Продолжать = Ложь, ДатаСеанса = '00010101') Экспорт
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
	
	Данные = Новый Соответствие;
		
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
	Идентификаторы = РегистрыСведений.ок_ДокументыЭДДляПроверкиСлужебныхЭтапов.ПолучитьИдентификаторыДокументовДляПроверкиСлужебныхЭтапов(Профиль, ДатаСеанса);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
	
	ПараметрыЭДО = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(Профиль);
	Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
 		Если Идентификаторы = Неопределено Тогда
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
		
 		Данные = сбисПолучитьДанныеСлужебныхДокументовДляПодписания(ПараметрыЭДО, Сертификат, Продолжать);
		Если Данные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
		Иначе
			
			Продолжать = (Идентификаторы.Количество() > 0); //возможно еще есть данные
			
			Если Идентификаторы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Для каждого ИдентификаторДокумента из Идентификаторы Цикл
				
				Прекратить = Ложь;
	 			ДанныеПоИдентификатору = сбисПолучитьДанныеСлужебныхДокументовДляПодписания(ПараметрыЭДО, Сертификат, , ИдентификаторДокумента, Прекратить, ДатаСеанса);
				
				Если Прекратить Тогда
					Возврат ?(Данные.Количество() = 0, Неопределено, Данные);
				КонецЕсли;
				
				Если ДанныеПоИдентификатору = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДанныеПоИдентификатору.Количество() = 0 Тогда //нет служебных этапов
					РегистрыСведений.ок_ДокументыЭДДляПроверкиСлужебныхЭтапов.СнятьСРегистрацииДокумент(ИдентификаторДокумента, , Истина);
					Продолжить;
				КонецЕсли;
				
				Для каждого Элемент Из ДанныеПоИдентификатору Цикл
					Данные.Вставить(Элемент.Ключ, Элемент.Значение);
				КонецЦикла;	
				//Данные.Вставить(ИдентификаторДокумента, ДанныеПоИдентификатору);
				
			КонецЦикла;	
			
		КонецЕсли;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
		
	КонецЕсли;
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание документов поступления

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Загрузка электронных документов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "", ЭлектронныйДокумент = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка

		НайтиСоздатьПоступлениеТоваровУслугДляПередачаРабот(ДеревоДанных, СсылкаНаВладельца, ЭлектронныйДокумент);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура НайтиСоздатьПоступлениеТоваровУслугДляПередачаРабот(ДеревоДанных, СсылкаНаВладельца = Неопределено, ЭлектронныйДокумент = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОбъекта = ОбменСКонтрагентамиБП.ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачаРаботЭкспортируемая(ДеревоДанных);
	
	//Если ДанныеОбъекта.Шапка.Исправление Тогда
	//	ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеОбъекта);
	//Иначе
		ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеОбъекта, ЭлектронныйДокумент);
	//КонецЕсли;
	
КонецПроцедуры

//Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачаРабот(ДеревоДанных)
//	
//	ДанныеОбъекта = Новый Структура;
//	
//	ЭтоИсправление = ЗначениеЗаполнено(
//		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
//		
//	Услуги = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
//	Товары = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
//	ВозвратнаяТара = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().ВозвратнаяТара.ВыгрузитьКолонки();
//	
//	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
//				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
//	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
//	
//	КурсВзаиморасчетов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
//				ДеревоДанных, "ДопДанные.ДопДанныеПодписанные.КурсВзаиморасчетов", Ложь);
//	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
//	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
//	
//	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
//	
//	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
//	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
//	
//	ДокументыОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
//	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
//		
//		Если ТипЗнч(ДокументыОснования) = Тип("Массив") И ДокументыОснования.Количество() > 0 Тогда
//			ДокументОснование = ДокументыОснования[0];
//		Иначе
//			ДокументОснование = ДокументыОснования;
//		КонецЕсли;
//		
//		Если ЭтоИсправление Тогда
//			ДанныеОбъекта.Вставить("Основание", ДокументОснование);
//		Иначе
//			ДанныеОбъекта.Вставить("СчетНаОплатуПоставщика", ДокументОснование);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"));
//	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
//	
//	Если ЭтоИсправление Тогда
//		ДанныеОбъекта.Вставить("Исправление", Истина);
//		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
//		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
//	Иначе
//		ДанныеОбъекта.Вставить("Исправление", Ложь);
//	КонецЕсли;
//	
//	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "Исполнитель"));
//	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "Заказчик"));
//	
//	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
//	
//	ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
//	Если ЗначениеЗаполнено(ДокументОснование) Тогда
//		
//		ДанныеОбъекта.Вставить("СчетНаОплатуПоставщика", ДокументОснование);
//		
//	КонецЕсли;
//	
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		
//		НоваяСтрока = Услуги.Добавить();
//		
//		// Обязательные реквизиты:
//		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
//		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "ТаблицаУслуг.НомерСтроки.СуммаНДС");
//		
//		// Необязательные реквизиты:
//		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Количество");
//		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Цена");
//		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
//		НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Описание");
//		
//		ИдентификаторНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.ИдТовараУКонтрагента");
//		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
//				"ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
//		НоваяСтрока.Номенклатура = НоменклатураКонтрагента(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
//		
//		Если Не ЗначениеЗаполнено(НоваяСтрока.Содержание) Тогда
//			НоваяСтрока.Содержание = НаименованиеНоменклатуры;
//		КонецЕсли;	
//		
//	КонецЦикла;
//	
//	ДанныеДляЗаполнения = Новый Структура();
//	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
//	ДанныеДляЗаполнения.Вставить("Услуги", Услуги);
//	ДанныеДляЗаполнения.Вставить("Товары", Товары);
//	ДанныеДляЗаполнения.Вставить("ВозвратнаяТара", ВозвратнаяТара);
//	
//	Возврат ДанныеДляЗаполнения;
//	
//КонецФункции

Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, ДеревоРазбора, СсылкиНаВладельцев = Неопределено, Записывать = Истина, СпособОбработки = "", ЭлектронныйДокумент = Неопределено) Экспорт
	
	Параметры = Новый Структура("ТипЭлементаВерсииЭД, ЭлектронныйДокумент", ДеревоДанных.ТипЭлементаВерсииЭД, ЭлектронныйДокумент);
	ЗаполнятьДокументыОснованияСчетаФактуры = Ложь;
	Если ДеревоДанных.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД 
		ИЛИ ДеревоДанных.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД 
		ИЛИ ДеревоДанных.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД Тогда //разбор формата 1с
		
		ДеревоАнализа = ДеревоДанных.ЗначениеРеквизита;
		ЗаполнятьДокументыОснованияСчетаФактуры = Истина;
	Иначе //разбор формализованного формата ФНС
		
		ДеревоАнализа = ДеревоДанных;
	КонецЕсли;	
		
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		НайтиСоздатьПоступлениеТоваровУслугДляЕдиногоДокумента(ДеревоАнализа, ДеревоРазбора, ПервичныйДокумент, Параметры);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		Если ЗаполнятьДокументыОснованияСчетаФактуры Тогда
			ДокументыОснованияСчетаФактуры = Новый Массив;
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоАнализа, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
			//это работоспособный код
			//отключу, лучше вводом на основании
			//ЭлектронноеВзаимодействиеБП.НайтиСоздатьСчетФактуруДляЕдиногоДокумента(ДеревоАнализа, СчетФактура);
			//ДокументыУчета.Добавить(СчетФактура);
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура НайтиСоздатьПоступлениеТоваровУслугДляЕдиногоДокумента(ДеревоДанных, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД 
		ИЛИ Параметры.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД 
		ИЛИ Параметры.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД Тогда //разбор формата 1с
		
		ДанныеУПД = ОбменСКонтрагентамиБП.ПодготовитьСтруктуруДляПоступленияТоваровУслугУПДЭкспортируемая(ДеревоДанных);
	Иначе	
		ДанныеУПД = ОбменСКонтрагентамиБП.ПодготовитьСтруктуруДляПоступленияТоваровУслугЭкспортируемая(ДеревоДанных, ДеревоРазбора);
	КонецЕсли;
	
	Если Параметры.ЭлектронныйДокумент <> Неопределено Тогда
		ДанныеУПД.Шапка.Вставить("ок_НомерЗаявки", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЭлектронныйДокумент, "ок_НомерЗаявки")); 
	КонецЕсли;
	
	////в СБИС документы с учетом КПП, а в базе все на одной организации с одним КПП, поэтому организацию может не находить, подставим ее из входящего ЭД
	//Если ДанныеУПД.Шапка.Свойство("Организация") И (Не ЗначениеЗаполнено(ДанныеУПД.Шапка.Организация)) Тогда
	//	Если Параметры.ЭлектронныйДокумент <> Неопределено Тогда
	//		ДанныеУПД.Шапка.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЭлектронныйДокумент, "Организация"));
	//	КонецЕсли;	
	//КонецЕсли;	
	
	//Если ДанныеУПД.Шапка.Исправление Тогда
	//	ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеУПД);
	//Иначе
		ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеУПД, Параметры.ЭлектронныйДокумент);
	//КонецЕсли;
	
КонецПроцедуры

//Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугУПД(ДеревоДанных)
//	
//	ДанныеОбъекта = Новый Структура;
//	
//	Товары         = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
//	Услуги         = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
//	ВозвратнаяТара = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().ВозвратнаяТара.ВыгрузитьКолонки();
//	
//	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
//				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
//	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
//	КурсВзаиморасчетов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
//	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
//	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
//	
//	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
//	
//	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
//	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
//	
//	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
//	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
//	
//	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
//		ДанныеОбъекта.Вставить("Исправление", Истина);
//		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
//		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
//	Иначе
//		ДанныеОбъекта.Вставить("Исправление", Ложь);
//	КонецЕсли;
//	
//	ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
//	
//	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе"));
//	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
//	
//	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
//	
//	ОснованиеСчетаФактуры = Неопределено;
//	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
//	Если Тип(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда
//		Для Каждого ДокументОснование Из ДокументыОснованияСчетаФактуры Цикл
//			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
//				ОснованиеСчетаФактуры = ДокументОснование;
//				Прервать;
//			КонецЕсли;
//		КонецЦикла;
//	ИначеЕсли Тип(ДокументыОснованияСчетаФактуры) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
//		ОснованиеСчетаФактуры = ДокументыОснованияСчетаФактуры;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
//		ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыПолученного(ОснованиеСчетаФактуры);
//		Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
//			ДанныеОбъекта.Вставить("Основание", ДокументОснованиеСчетаФактуры);
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТекстоваяИнформация = ДеревоДанных.Строки.Найти("ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть", Истина);
//	Если ТекстоваяИнформация <> Неопределено Тогда
//		Для Каждого СтрокаТекстовойИнформации Из ТекстоваяИнформация.Строки Цикл
//			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации, 
//						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор") = "ПередачаТовараКомитентом" Тогда
//				ДанныеОбъекта.ПередачаТовараКомитентом = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации,
//						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение") = "Истина";
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		
//		ИдентификаторНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
//		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
//				"СведенияОТоварах.НомерСтроки.ТоварНаименование");
//		Номенклатура = НоменклатураКонтрагента(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
//		
//		Признак = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
//		Если НЕ ЗначениеЗаполнено(Признак)
//			И ЗначениеЗаполнено(Номенклатура) Тогда
//			
//			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Услуга") Тогда
//				Признак = "1";
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//		Признак = ""; //сказали что будут только услуги
//		
//		Если Признак = "1" Тогда
//			НоваяСтрока = Товары.Добавить();
//			НоваяСтрока.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
//				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод"));
//		Иначе
//			НоваяСтрока = Услуги.Добавить();
//			НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
//		КонецЕсли;
//				
//		// Обязательные реквизиты:
//		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
//		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
//		
//		// Необязательные реквизиты:
//		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
//		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
//		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
//		
//		НоваяСтрока.Номенклатура = Номенклатура;
//		
//		Если Признак = "1" Тогда
//		
//			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
//											"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
//			
//			Если СведенияОТаможеннойДекларации <> Неопределено
//				И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
//				
//				НомерТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
//								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
//				
//				КодСтраныТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
//								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
//				
//				Если ЗначениеЗаполнено(НомерТД) Тогда
//					ТаможеннаяДекларация = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НомерТД", НомерТД);
//					Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
//						ТаможеннаяДекларацияОбъект = Справочники.НомераГТД.СоздатьЭлемент();
//						ТаможеннаяДекларацияОбъект.Код = НомерТД;
//						ТаможеннаяДекларацияОбъект.Записать();
//						ТаможеннаяДекларация = ТаможеннаяДекларацияОбъект.Ссылка;
//					КонецЕсли;
//					НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
//					НоваяСтрока.СтранаПроисхождения = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", КодСтраныТД)
//				КонецЕсли;
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	ДанныеДляЗаполнения = Новый Структура();
//	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
//	ДанныеДляЗаполнения.Вставить("Товары", Товары);
//	ДанныеДляЗаполнения.Вставить("Услуги", Услуги);
//	ДанныеДляЗаполнения.Вставить("ВозвратнаяТара", ВозвратнаяТара);
//	
//	Возврат ДанныеДляЗаполнения;
//	
//КонецФункции

//доработал чтобы брало организацию с любым КПП, а то у них одна орагнизация, а в сбис несколько КПП
//Функция ОрганизацияПоДаннымЭД(ДеревоДанных, ВидУчастника)
//	
//	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
//		
//		Запрос = Новый Запрос();
//		Запрос.Текст = 
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Организации.Ссылка КАК Ссылка,
//			|	ВЫБОР
//			|		КОГДА Организации.КПП = &КПП
//			|			ТОГДА 0
//			|		ИНАЧЕ 1
//			|	КОНЕЦ КАК Порядок
//			|ИЗ
//			|	Справочник.Организации КАК Организации
//			|ГДЕ
//			|	Организации.ИНН = &ИНН
//			//|	И Организации.КПП = &КПП
//			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	Порядок";
//		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН"));
//		Запрос.УстановитьПараметр("КПП", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП"));
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Возврат Выборка.Ссылка;
//		КонецЕсли;
//		
//	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
//		
//		Запрос = Новый Запрос();
//		Запрос.Текст = 
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Организации.Ссылка
//			|ИЗ
//			|	Справочник.Организации КАК Организации
//			|ГДЕ
//			|	Организации.ИНН = &ИНН
//			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
//		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН"));
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Возврат Выборка.Ссылка;
//		КонецЕсли;
//		
//	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
//		
//		Запрос = Новый Запрос();
//		Запрос.Текст = 
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Организации.Ссылка
//			|ИЗ
//			|	Справочник.Организации КАК Организации
//			|ГДЕ
//			|	Организации.ИНН = &ИНН
//			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
//		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН"));
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Возврат Выборка.Ссылка;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат Справочники.Организации.ПустаяСсылка();
//	
//КонецФункции

//Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
//	
//	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
//		
//		Запрос = Новый Запрос();
//		Запрос.Текст = 
//			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//			|	Контрагенты.Ссылка
//			|ИЗ
//			|	Справочник.Контрагенты КАК Контрагенты
//			|ГДЕ
//			|	Контрагенты.ИНН = &ИНН
//			|	И Контрагенты.КПП = &КПП
//			|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
//		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН"));
//		Запрос.УстановитьПараметр("КПП", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП"));
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Возврат Выборка.Ссылка;
//		КонецЕсли;
//		
//	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
//		
//		Запрос = Новый Запрос();
//		Запрос.Текст = 
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Контрагенты.Ссылка
//			|ИЗ
//			|	Справочник.Контрагенты КАК Контрагенты
//			|ГДЕ
//			|	Контрагенты.ИНН = &ИНН
//			|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
//		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН"));
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Возврат Выборка.Ссылка;
//		КонецЕсли;
//		
//	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ"  Тогда
//		
//		Запрос = Новый Запрос();
//		Запрос.Текст = 
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Контрагенты.Ссылка
//			|ИЗ
//			|	Справочник.Контрагенты КАК Контрагенты
//			|ГДЕ
//			|	Контрагенты.ИНН = &ИНН
//			|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
//		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН"));
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Возврат Выборка.Ссылка;
//		КонецЕсли;
//		
//	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
//		
//		Запрос = Новый Запрос();
//		Запрос.Текст = 
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Контрагенты.Ссылка
//			|ИЗ
//			|	Справочник.Контрагенты КАК Контрагенты
//			|ГДЕ
//			|	Контрагенты.НаименованиеПолное = &НаименованиеПолное";
//		Запрос.УстановитьПараметр("НаименованиеПолное",
//			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации"));
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Возврат Выборка.Ссылка;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат Справочники.Контрагенты.ПустаяСсылка();
//	
//КонецФункции

//Функция ДокументОснованиеСчетаФактурыПолученного(СчетФактура)
//	
//	Запрос = Новый Запрос();
//	Запрос.Параметры.Вставить("СчетФактура", СчетФактура);
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СчетФактураПолученныйДокументыОснования.ДокументОснование
//	|ИЗ
//	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
//	|ГДЕ
//	|	СчетФактураПолученныйДокументыОснования.Ссылка = &СчетФактура
//	|	И СчетФактураПолученныйДокументыОснования.НомерСтроки = 1";
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.ДокументОснование;
//	КонецЕсли;
//	
//	Возврат Неопределено;
//	
//КонецФункции

//Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
//	
//	ДанныеОбъекта = Новый Структура;
//	
//	Товары         = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
//	Услуги         = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
//	ВозвратнаяТара = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().ВозвратнаяТара.ВыгрузитьКолонки();
//	
//	ВалКод = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВалКод");
//	Если ВалКод <> "643" Тогда
//		ДанныеОбъекта.Вставить("ВалютаДокумента", ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ВалКод));
//	Иначе
//		ДанныеОбъекта.Вставить("ВалютаДокумента", Константы.ВалютаРегламентированногоУчета.Получить());
//	КонецЕсли;
//	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", 1);
//	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
//	
//	//ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
//	
//	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
//	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
//	
//	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
//	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
//	
//	//Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
//	//	ДанныеОбъекта.Вставить("Исправление", Истина);
//	//	ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
//	//	ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
//	//Иначе
//		ДанныеОбъекта.Вставить("Исправление", Ложь);
//	//КонецЕсли;
//	
//	ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
//	
//	//ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе"));
//	//ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
//	
//	ДанныеОбъекта.Вставить("Организация", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора));
//	ДанныеОбъекта.Вставить("Контрагент", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Контрагент", Истина, ДеревоРазбора)); 
//	
//	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
//	
//	//ОснованиеСчетаФактуры = Неопределено;
//	//ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
//	//Если Тип(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда
//	//	Для Каждого ДокументОснование Из ДокументыОснованияСчетаФактуры Цикл
//	//		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
//	//			ОснованиеСчетаФактуры = ДокументОснование;
//	//			Прервать;
//	//		КонецЕсли;
//	//	КонецЦикла;
//	//ИначеЕсли Тип(ДокументыОснованияСчетаФактуры) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
//	//	ОснованиеСчетаФактуры = ДокументыОснованияСчетаФактуры;
//	//КонецЕсли;
//	//
//	//Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
//	//	ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыПолученного(ОснованиеСчетаФактуры);
//	//	Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
//	//		ДанныеОбъекта.Вставить("Основание", ДокументОснованиеСчетаФактуры);
//	//	КонецЕсли;
//	//КонецЕсли;
//	
//	//ТекстоваяИнформация = ДеревоДанных.Строки.Найти("ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть", Истина);
//	//Если ТекстоваяИнформация <> Неопределено Тогда
//	//	Для Каждого СтрокаТекстовойИнформации Из ТекстоваяИнформация.Строки Цикл
//	//		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации, 
//	//					"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор") = "ПередачаТовараКомитентом" Тогда
//	//			ДанныеОбъекта.ПередачаТовараКомитентом = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации,
//	//					"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение") = "Истина";
//	//		КонецЕсли;
//	//	КонецЦикла;
//	//КонецЕсли;
//	
//	СведенияОТоварах = СтрокаДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
//	Для Каждого СведенияОТоваре Из СведенияОТоварах Цикл
//		НаименованиеНоменклатуры  = ПолучитьЗначениеРеквизита(СведенияОТоваре, "НаимТов");
//		ИдентификаторНоменклатуры = НаименованиеНоменклатуры;
//		Номенклатура = НоменклатураКонтрагента(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
//		
//		//НоваяСтрока = Товары.Добавить();
//		НоваяСтрока = Услуги.Добавить();
//		НоваяСтрока.Номенклатура = Номенклатура;
//		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
//			НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
//		КонецЕсли;	
//		ОКЕИ = ПолучитьЗначениеРеквизита(СведенияОТоваре, "ОКЕИ_Тов");
//		Если ЗначениеЗаполнено(ОКЕИ) Тогда
//			ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ОКЕИ);
//			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
//				НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
//			КонецЕсли;	
//		КонецЕсли;	
//				
//		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеБП.ПолучитьСтавкуНДСПеречислением(ПолучитьЗначениеРеквизита(СведенияОТоваре, "НалСтВел"));
//		
//		НоваяСтрока.Количество = ПолучитьЗначениеРеквизита(СведенияОТоваре, "КолТов");
//		НоваяСтрока.Цена = ПолучитьЗначениеРеквизита(СведенияОТоваре, "ЦенаТов");
//		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизита(СведенияОТоваре, "СтТовБезНДС");
//		СуммаСНДС = ПолучитьЗначениеРеквизита(СведенияОТоваре, "СтТовУчНал");
//		НоваяСтрока.СуммаНДС = СуммаСНДС - НоваяСтрока.Сумма;
//		
//		НомерТД = ПолучитьЗначениеРеквизита(СведенияОТоваре, "НомерТД");
//		КодСтраныТД = ПолучитьЗначениеРеквизита(СведенияОТоваре, "КодПроисх");
//		Если ЗначениеЗаполнено(НомерТД) Тогда
//			ТаможеннаяДекларация = Справочники.НомераГТД.НайтиПоКоду(НомерТД);
//			Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
//				ТаможеннаяДекларацияОбъект = Справочники.НомераГТД.СоздатьЭлемент();
//				ТаможеннаяДекларацияОбъект.Код = НомерТД;
//				ТаможеннаяДекларацияОбъект.Записать();
//				ТаможеннаяДекларация = ТаможеннаяДекларацияОбъект.Ссылка;
//			КонецЕсли;
//			НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
//			НоваяСтрока.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоКоду(КодСтраныТД);
//		КонецЕсли;
//				
//		
//	КонецЦикла;
//	
//	ДанныеДляЗаполнения = Новый Структура();
//	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
//	ДанныеДляЗаполнения.Вставить("Товары", Товары);
//	ДанныеДляЗаполнения.Вставить("Услуги", Услуги);
//	ДанныеДляЗаполнения.Вставить("ВозвратнаяТара", ВозвратнаяТара);
//	
//	Возврат ДанныеДляЗаполнения;
//	
//КонецФункции

//Функция ПолучитьЗначениеРеквизита(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
//	
//	Результат = Неопределено;
//	
//	Если СтрокаДерева.Строки.Количество()>0 Тогда
//		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
//	Иначе
//		НайденнаяСтрока = СтрокаДерева;
//	КонецЕсли;
//	
//	Если НайденнаяСтрока <> Неопределено Тогда
//		Результат = НайденнаяСтрока.ЗначениеРеквизита;
//		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
//		// тогда нашли всего лишь индекс строки
//		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
//			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
//			Если НайденнаяСтрока <> Неопределено Тогда
//				Результат = НайденнаяСтрока.СсылкаНаОбъект;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция НоменклатураКонтрагента(Контрагент, Идентификатор, Наименование)
//	
//	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
//	
//	Возврат Номенклатура; //пока только услуги...
//	
//	Если ЗначениеЗаполнено(Контрагент) Тогда
//		// Заполним номенклатуру поставщика
//		РеквизитыНоменклатурыПоставщика = Новый Структура;
//		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", Контрагент);
//		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", Идентификатор);
//		НоменклатураПоставщикаСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
//			РеквизитыНоменклатурыПоставщика);
//		Если ЗначениеЗаполнено(НоменклатураПоставщикаСсылка) Тогда
//			Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураПоставщикаСсылка, "Номенклатура");
//		Иначе
//			НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
//			НоменклатураПоставщика.Идентификатор = Идентификатор;
//			НоменклатураПоставщика.Владелец     = Контрагент;
//			НоменклатураПоставщика.Наименование = Наименование;
//			
//			НоменклатураПоставщика.Записать();
//			Номенклатура = НоменклатураПоставщика.Номенклатура;
//		КонецЕсли;
//		
//		
//	КонецЕсли;
//	
//	Возврат Номенклатура;
//	
//КонецФункции

Процедура ЗаполнитьДокументПоступленияТоваровУслуг(Документ, ДанныеДокумента, ЭлектронныйДокумент = Неопределено)
	
	ДанныеШапки = ДанныеДокумента.Шапка;
	
	ПередачаТовараКомитентом = ДанныеШапки.ПередачаТовараКомитентом;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ЗагрузкаИзExcel = Ложь;
		Если ДанныеШапки.Свойство("ЗагрузкаИзФайлаExcel", ЗагрузкаИзExcel) И Булево(ЗагрузкаИзExcel) 
			И ЗначениеЗаполнено(ДанныеШапки.Дата) Тогда
			
			ДокументОбъект.Дата = ДанныеШапки.Дата;
			
		Иначе
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеШапки);
		
		//пока без договора
		//СписокВидовДоговоров = Новый СписокЗначений;
		//Если ПередачаТовараКомитентом Тогда
		//	
		//	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		//	
		//Иначе
		//	
		//	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		//	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		//	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		//	
		//КонецЕсли;
		//ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		//СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		//
		//РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
		//				ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
	КонецЕсли;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	Если ПередачаТовараКомитентом Тогда
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		
	Иначе
		
		Если ДанныеДокумента.Товары.Количество()=0 Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		ИначеЕсли ДанныеДокумента.Услуги.Количество()=0 Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		КонецЕсли;
		
	КонецЕсли;
	
	ТипСклада   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Склад, "ТипСклада");
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДоговорКонтрагента, "ВидДоговора");
	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	РассчитыватьСуммаВРознице = ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
								И УчетВПродажныхЦенах
								И (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
									ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары)
								И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

	НТТ = ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	
	ЗаполнятьСтавкуНДСВРознице = НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице;
	
	ПлательщикНДС	 = УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	ЭтоКомиссия		 = ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ОтражениеВУСН	 = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(ДокументОбъект.ВидОперации, ЭтоКомиссия);
	
	ДокументОбъект.Товары.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеДокумента.Товары Цикл
		
		СтрокаТЧ = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		Если РассчитыватьСуммаВРознице Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВРозницеТабЧасти(СтрокаТЧ, ДокументОбъект, ДокументОбъект.Метаданные());
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТЧ);
		КонецЕсли;
		
		Если ЗаполнятьСтавкуНДСВРознице Тогда
			СтрокаТЧ.СтавкаНДСВРознице = ?(ПлательщикНДС, СтрокаТЧ.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		КонецЕсли;
		
		СтрокаТЧ.ОтражениеВУСН = ОтражениеВУСН;
		
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.Услуги.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеДокумента.Услуги Цикл
		СтрокаТЧ = ДокументОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		СтрокаТЧ.ОтражениеВУСН = ОтражениеВУСН;
		
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.ВозвратнаяТара.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеДокумента.ВозвратнаяТара Цикл
		
		СтрокаТЧ = ДокументОбъект.ВозвратнаяТара.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.Заполнить(ДокументОбъект, Новый Структура());
	
	ОбменСКонтрагентамиБП.ЗаписатьДокументЭкспортируемая(ДокументОбъект, РежимЗаписи);
	
	//сказали надо связать с заявкой через регистр
	ЗначениеАналитики = Неопределено;
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) И ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ЗначениеАналитики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ок_НомерЗаявки");
	КонецЕсли;	
	АналитикаЗаявка = ок_ПодпискиНаСобытия.бит_ДополнительныхАналитикаНомерЗаявки();
	Набор = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(ДокументОбъект.Ссылка);
	Набор.Отбор.Аналитика.Установить(АналитикаЗаявка);
	Если ЗначениеЗаполнено(ЗначениеАналитики) Тогда
		Запись = Набор.Добавить();
		Запись.Объект = ДокументОбъект.Ссылка;
		Запись.Аналитика = АналитикаЗаявка;
		Запись.ЗначениеАналитики = ЗначениеАналитики;
	КонецЕсли;
	Набор.Записать();
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументыУчетаЭлектронногоДокумента(ЭлектронныйДокумент, СпособОбработки = "СчетФактураПолученный", ТранзакцияОткрыта = Ложь) Экспорт
	
	//по сути повторяем алгоритм процедуры СоздатьДокументУчетаНаСервере из Документ.ЭлектронныйДокументВходящий.Форма.ПодборДокументовУчета
	
	СтруктураПараметров = Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ФайлЭД = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭлектронныйДокумент, , Истина);
	Если ФайлЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлЭД, "ТипЭлементаВерсииЭД,ЭлектронныйДокументВладелец");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ПрофильНастроекЭДО, ВидЭД, ТипЭлементаВерсииЭД");
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ИдентификаторОрганизации, ВидЭД, ТипЭлементаВерсииЭД");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	//проверка на тип документа
	ВозможноСоздание = Ложь;
	Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
		ВозможноСоздание = Истина;
	ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
		ВозможноСоздание = Истина;
	ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			ВозможноСоздание = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не ВозможноСоздание Тогда
		Возврат;
	КонецЕсли;	

	Если ЗначениеЗаполнено(РеквизитыЭД.ПрофильНастроекЭДО) Тогда
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		//СтруктураПараметров.Вставить("ок_СпособОбменаЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.ПрофильНастроекЭДО, "ок_СпособОбменаЭД"));
		СтруктураПараметров.Вставить("ок_СпособОбменаЭД", РегистрыСведений.УчетныеЗаписиЭДО.ЗначениеРеквизитаРегистра(РеквизитыЭД.ПрофильНастроекЭДО, "ок_СпособОбменаЭД"));
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	КонецЕсли;	
	
	//Если ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(РеквизитыФайлаЭД.ТипЭлементаВерсииЭД) Тогда
	//	ЭД = РеквизитыФайлаЭД.ЭлектронныйДокументВладелец;
	//КонецЕсли;
	СтруктураПараметров.Вставить("ФайлДанныхСсылка", ОбменСКонтрагентамиСлужебный.ПолучитьДанныеЭД(ФайлЭД));
	
	Если Не ТранзакцияОткрыта Тогда
		НачатьТранзакцию();
	КонецЕсли;	
	
	Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлЭД, "ВладелецФайла");
		НастройкаЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "НастройкаЭДО");
		
		ДокументыУчета = Новый Массив;
		ДокументыУчета.Добавить(НастройкаЭДО);
		
	Иначе
		
		ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументыУчета) Тогда
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		Для каждого Основание Из ДокументыУчета Цикл
			
			Если Не ДокументОбъект.ДокументыОснования.Найти(Основание, "ДокументОснование") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Основание;
			НоваяСтрока.СпособОбработки = СпособОбработки;
			
			ОбменСКонтрагентамиСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(Основание, ЭлектронныйДокумент);
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЕсли;
	
	Если Не ТранзакцияОткрыта Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Согласование входящие ЭД

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-26 (#3997)
//Получатель = Справочник.бит_БК_Инициаторы
Функция ОтправитьПисьмоПоВходящемуЭлектронномуДокументу(Документ, Виза, Комментарий, СообщениеОбОшибке = "", Комментатор = Неопределено, Шаблон = Неопределено, КомментарийДляИсторииПереписки = "", Получатель = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		СообщениеОбОшибке = "Не указан документ.";
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСогласованияПоПочте = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Использовать согласования по почте", Ложь);
	Если Не ИспользоватьСогласованияПоПочте Тогда
		Возврат Истина;
	КонецЕсли;
	    
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ок_ФункциональныйДиректор, ок_НомерЗаявки, Контрагент, ок_КомментарийДляСогласующего, ок_ПричинаОтклоненияСогласования, ок_ДатаРедакции, НомерВерсииЭД"); 
	
	НастройкаДоставки = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Учетная запись почты согласований ЭДО");	
	Если Не ЗначениеЗаполнено(НастройкаДоставки) Тогда
		СообщениеОбОшибке = "Не заполнена настройка: Согласование по почте/Учетная запись почты согласований ЭДО";
		Возврат Ложь;
	КонецЕсли;
		
	ИдентификаторЗаписи = Строка(Документ.УникальныйИдентификатор());

	пМассивФайлов = Новый Массив;
	ПрикладываемыеФайлы = ПолучитьПрисоединенныеФайлыВходящегоЭДДляОтправки(Документ);
	//если уже выбраны файлы отмеченные к отправке значит они есть в РС Временные файлы. еще раз их записывать не требуется
	СУчетомФлагаКОтправке = (ПрикладываемыеФайлы.Найти(Истина, "ок_КОтправке") <> Неопределено);
	Для каждого Выборка Из ПрикладываемыеФайлы Цикл
		
		Если Выборка.ВнутренняяПереписка Тогда
			Продолжить;
		КонецЕсли;
		
		пСтруктураФайла = Новый Структура;
		пСтруктураФайла.Вставить("ИмяФайла", Выборка.Имя);
		пСтруктураФайла.Вставить("Файл"	   , Выборка.ПрисоединенныйФайл);
		пМассивФайлов.Добавить(пСтруктураФайла);
		
	КонецЦикла;
	
	Если пМассивФайлов.Количество() > 0 Тогда
		бит_ФормаВводаБюджетаВызовСервера.СохранитьВременныеФайлыВложений(ИдентификаторЗаписи, пМассивФайлов, СУчетомФлагаКОтправке);
	КонецЕсли;
	
	Получатели = Новый Массив;
	СтруктураСтрокиМассива = Новый Структура("Инициатор,ИнициаторАдрес,ИнициаторПользователь, ОтветственныйЗаНомерЗаявки");
	
	Если ЗначениеЗаполнено(Получатель) Тогда
		
		Инициатор = Получатель;
		РеквизитыИнициатора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инициатор, "Email, Пользователь");
		ИнициаторАдрес = РеквизитыИнициатора.Email;
		ИнициаторПользователь = РеквизитыИнициатора.Пользователь;
		
		СтруктураСтрокиМассива.Вставить("Инициатор",Инициатор);	
		СтруктураСтрокиМассива.Вставить("ИнициаторАдрес",ИнициаторАдрес);	
		СтруктураСтрокиМассива.Вставить("ИнициаторПользователь",ИнициаторПользователь);
		Получатели.Добавить(СтруктураСтрокиМассива);
		
	ИначеЕсли Виза = ПредопределенноеЗначение("Справочник.бит_Визы.ок_ФД") Тогда
		
		ФДПолучатель = РеквизитыДокумента.ок_ФункциональныйДиректор;
					
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бит_НазначенныеЗаместители.Заместитель КАК Заместитель,
		|	бит_БК_Инициаторы.Ссылка КАК Получатель
		|ИЗ
		|	РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
		|		ПО бит_НазначенныеЗаместители.Виза = бит_ГруппыВизВизыГруппы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
		|		ПО бит_НазначенныеЗаместители.Заместитель = бит_БК_Инициаторы.Пользователь
		|ГДЕ
		|	бит_НазначенныеЗаместители.Пользователь = &Пользователь
		|	И бит_НазначенныеЗаместители.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен)
		|	И ВЫБОР
		|			КОГДА бит_НазначенныеЗаместители.Виза ССЫЛКА Справочник.бит_Визы
		|				ТОГДА бит_НазначенныеЗаместители.Виза
		|			ИНАЧЕ бит_ГруппыВизВизыГруппы.Виза
		|		КОНЕЦ = ЗНАЧЕНИЕ(Справочник.бит_Визы.ок_ФД)
		|	И бит_НазначенныеЗаместители.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
		|	И бит_НазначенныеЗаместители.ДатаНачала <= &ТекДата
		|	И (бит_НазначенныеЗаместители.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|	ИЛИ бит_НазначенныеЗаместители.ДатаОкончания >= &ТекДата)";
		
		Запрос.УстановитьПараметр("Пользователь", ФДПолучатель.Пользователь);
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			Инициатор = ФДПолучатель;
			РеквизитыИнициатора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инициатор, "Email, Пользователь");
			ИнициаторАдрес = РеквизитыИнициатора.Email;
			ИнициаторПользователь = РеквизитыИнициатора.Пользователь;
			
			СтруктураСтрокиМассива.Вставить("Инициатор",Инициатор);	
			СтруктураСтрокиМассива.Вставить("ИнициаторАдрес",ИнициаторАдрес);	
			СтруктураСтрокиМассива.Вставить("ИнициаторПользователь",ИнициаторПользователь);
			Получатели.Добавить(СтруктураСтрокиМассива);	
		Иначе
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл

				Инициатор = Выборка.Получатель;
				РеквизитыИнициатора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инициатор, "Email, Пользователь");
				ИнициаторАдрес = РеквизитыИнициатора.Email;
				ИнициаторПользователь = РеквизитыИнициатора.Пользователь;
				
				СтруктураСтрокиМассива = Новый Структура;
				СтруктураСтрокиМассива.Вставить("Инициатор",Инициатор);	
				СтруктураСтрокиМассива.Вставить("ИнициаторАдрес",ИнициаторАдрес);	
				СтруктураСтрокиМассива.Вставить("ИнициаторПользователь",ИнициаторПользователь);
				Получатели.Добавить(СтруктураСтрокиМассива);
			КонецЦикла;
			
		КонецЕсли;
				
	ИначеЕсли Виза = ПредопределенноеЗначение("Справочник.бит_Визы.ок_Инициатор") Тогда
		
		Для Каждого СтрокаИнициатор из Документ.ок_Инициаторы Цикл
			Инициатор = СтрокаИнициатор.Инициатор;
			РеквизитыИнициатора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инициатор, "Email, Пользователь");
			ИнициаторАдрес = РеквизитыИнициатора.Email;
			ИнициаторПользователь = РеквизитыИнициатора.Пользователь;
			
			СтруктураСтрокиМассива = Новый Структура;
			СтруктураСтрокиМассива.Вставить("Инициатор",Инициатор);	
			СтруктураСтрокиМассива.Вставить("ИнициаторАдрес",ИнициаторАдрес);	
			СтруктураСтрокиМассива.Вставить("ИнициаторПользователь",ИнициаторПользователь);
			СтруктураСтрокиМассива.Вставить("ОтветственныйЗаНомерЗаявки", СтрокаИнициатор.ОтветственныйЗаНомерЗаявки);
			Получатели.Добавить(СтруктураСтрокиМассива);
		КонецЦикла;
		
	Иначе		
		СообщениеОбОшибке = "Виза " + Виза + " не может быть обработана";
		Возврат Ложь;		
	КонецЕсли;
	
	Если Шаблон = Неопределено Тогда
		
		ШаблонСогласования = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Шаблон согласования входящего электронного документа");	
		Если Не ЗначениеЗаполнено(ШаблонСогласования) Тогда
			СообщениеОбОшибке = "Не заполнена настройка: Согласование по почте/Шаблон согласования входящего электронного документа";
			ЗаписьЖурналаРегистрации("Отправка на согласование ВД",УровеньЖурналаРегистрации.Ошибка,,,СообщениеОбОшибке);
		КонецЕсли;
		   
		ШаблонСогласования_ТребуетсяЗаявка1С = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Шаблон согласования входящего электронного документа (Требуется заявка 1С)");	
		Если Не ЗначениеЗаполнено(ШаблонСогласования_ТребуетсяЗаявка1С) Тогда
			СообщениеОбОшибке = "Не заполнена настройка: Согласование по почте/Шаблон согласования входящего электронного документа (Требуется заявка 1С)";
			ЗаписьЖурналаРегистрации("Отправка на согласование ВД",УровеньЖурналаРегистрации.Ошибка,,,СообщениеОбОшибке);
		КонецЕсли;

	КонецЕсли;
		
	Для Каждого СтрокаИнициатор из Получатели Цикл
		
		Если Шаблон = Неопределено Тогда
			
			Если Не Документ.ок_ТребуетсяЗаявка1С ИЛИ ЗначениеЗаполнено(Документ.ок_НомерЗаявки) Тогда
				ШаблонНаОтправку = ШаблонСогласования;
			Иначе
				Если СтрокаИнициатор.ОтветственныйЗаНомерЗаявки Тогда
					ШаблонНаОтправку = ШаблонСогласования_ТребуетсяЗаявка1С;
				Иначе
					ШаблонНаОтправку = ШаблонСогласования;   
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ШаблонНаОтправку = Шаблон;
		КонецЕсли;
		
		Инициатор = СтрокаИнициатор.Инициатор;		
		ИнициаторАдрес = СтрокаИнициатор.ИнициаторАдрес;
		ИнициаторПользователь = СтрокаИнициатор.ИнициаторПользователь;
			
		
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ШаблонНаОтправку, "Сообщение_Текст, Сообщение_Подпись, Сообщение_Заголовок, ТипТекстаСообщения");
		
		СтруктураКонтекста = Новый Структура();
		СтруктураКонтекста.Вставить("Виза", Виза);
		СтруктураКонтекста.Вставить("Период", ТекущаяДатаСеанса()); 
	    СтруктураКонтекста.Вставить("ТекущийОбъект", Документ);         				
	    СтруктураКонтекста.Вставить("Комментарий", Комментарий);         				
		СтруктураКонтекста.Вставить("Шаблон", ШаблонНаОтправку);
		СтруктураКонтекста.Вставить("Инициатор", Инициатор);
		СтруктураКонтекста.Вставить("ИнициаторEmail", ИнициаторАдрес);
		СтруктураКонтекста.Вставить("Получатель", Инициатор);
	    СтруктураКонтекста.Вставить("НеПроверятьНаличиеЗаписи", Истина);
		СтруктураКонтекста.Вставить("ИдентификаторЗаписи", ИдентификаторЗаписи); 
		СтруктураКонтекста.Вставить("Пользователь", ИнициаторПользователь); 
	    СтруктураКонтекста.Вставить("Заявка", РеквизитыДокумента.ок_НомерЗаявки);         				
	    СтруктураКонтекста.Вставить("Контрагент", РеквизитыДокумента.Контрагент);         				
				
		СтруктураКонтекста.Вставить("ЗаявкаДата", "");
		СтруктураКонтекста.Вставить("ЗаявкаНомер", "");
		Если ЗначениеЗаполнено(РеквизитыДокумента.ок_НомерЗаявки) Тогда 
			РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.ок_НомерЗаявки, "Номер, Дата"); 
			СтруктураКонтекста.Вставить("ЗаявкаДата", РеквизитыЗаявки.Дата);
			СтруктураКонтекста.Вставить("ЗаявкаНомер", СокрЛП(РеквизитыЗаявки.Номер));
		КонецЕсли;
		СтруктураКонтекста.Вставить("ТипТекстаСообщения", РеквизитыШаблона.ТипТекстаСообщения);
	    СтруктураКонтекста.Вставить("ДатаВерсии", Формат(РеквизитыДокумента.ок_ДатаРедакции, "ДЛФ=DT"));         				
	    СтруктураКонтекста.Вставить("НомерВерсии", Строка(РеквизитыДокумента.НомерВерсииЭД));         				
	    СтруктураКонтекста.Вставить("НомерВерсииРазвернуто", "Версия " + Строка(РеквизитыДокумента.НомерВерсииЭД) + " (" + Формат(РеквизитыДокумента.ок_ДатаРедакции, "ДЛФ=DT") + ")");         				
		
		ТекстЦитата = "";
		Если ЗначениеЗаполнено(Комментарий) Тогда
			ТекстЦитата = "
			|---------- текущий комментарий ----------- <BR/>
			|	Комментарий %1: <b>%2</b><BR/>";

			ТекстЦитата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЦитата, СтруктураКонтекста.Период, Комментарий);
		ИначеЕсли ЗначениеЗаполнено(РеквизитыДокумента.ок_ПричинаОтклоненияСогласования) Тогда
			ТекстЦитата = "
			|----------********----------- <BR/>";
			Если ЗначениеЗаполнено(РеквизитыДокумента.ок_НомерЗаявки) Тогда
				ТекстЦитата = ТекстЦитата + "
				|	Заявка: %1 от %2 <BR/>";
			КонецЕсли;
			ТекстЦитата = ТекстЦитата + "
			|	Цитата (комментарий): %3 <BR/>
			|----------********----------- <BR/>
			|";
			
			ТекстЦитата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЦитата, 
					СтруктураКонтекста.ЗаявкаНомер, 
					СтруктураКонтекста.ЗаявкаДата, 
					РеквизитыДокумента.ок_ПричинаОтклоненияСогласования);
					
		КонецЕсли;
				
		Если Виза = ПредопределенноеЗначение("Справочник.бит_Визы.ок_ФД") Тогда
			ТекстПереписки = РегистрыСведений.бит_УстановленныеВизы.ПодготовитьТекстПерепискиДокумента(Документ, СтруктураКонтекста);
		Иначе 	
			ТекстПереписки = РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ПодготовитьТекстПерепискиДокумента(Документ, СтруктураКонтекста);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПереписки) Тогда
			ТекстЦитата = 
			"<hr>
			|Полная информация по согласованию:<BR/>
			|<span style=""font-size: 80%"">
			|" + ТекстЦитата + "
			|---------- история переписки ----------- <BR/></span>
			|" + ТекстПереписки;		
		КонецЕсли;	
		СтруктураКонтекста.Вставить("ОтветИзОфиса", ТекстЦитата);
		
		КэшАдресов = Новый ТаблицаЗначений;
		КэшАдресов.Колонки.Добавить("Получатель"             ,Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		КэшАдресов.Колонки.Добавить("ВидКонтактнойИнформации");
		КэшАдресов.Колонки.Добавить("Адрес"                  );

		КэшАдресов.Индексы.Добавить("Получатель,ВидКонтактнойИнформации");       

		СтрокаКэш = КэшАдресов.Добавить();
		СтрокаКэш.Получатель = СтруктураКонтекста.Получатель;
		СтрокаКэш.Адрес	     = СтруктураКонтекста.ИнициаторEmail;
					
		// попытка записать в РС "Оповещения" данные, для последующей отправки на эл. почту
		РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода("Нет");
		Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.СформироватьИЗаписатьСообщение(Неопределено
											   ,СтруктураКонтекста.Шаблон
											   ,НастройкаДоставки
											   ,СтруктураКонтекста
											   ,КэшАдресов
											   ,РежимыВывода.ВыводитьОшибки); 
											   
		Если СтруктураКонтекста.Свойство("СтруктураСообщения") Тогда
			Заголовок = СтруктураКонтекста.СтруктураСообщения.Заголовок;
		Иначе
			Заголовок = НСтр("ru = 'Согласование входящего документа'");
		КонецЕсли;	
		
		Если КомментарийДляИсторииПереписки <> "" Тогда
			РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(Документ, Комментатор, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Исходящее"), ИдентификаторЗаписи, КомментарийДляИсторииПереписки, , Заголовок, , СтруктураКонтекста.Получатель);
		Иначе
			РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(Документ, Комментатор, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Исходящее"), ИдентификаторЗаписи, Комментарий, , Заголовок, , СтруктураКонтекста.Получатель);
		КонецЕсли;
	КонецЦикла;	
				
	Возврат Истина;	
	
КонецФункции
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-26 (#3997) 


//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-26 (#3997)
//реквизит ок_КомментарийДляСогласующего еще не установлен в документе, поэтому передаем его как Комментарий в процедуру
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
//Функция ОтправитьНаСогласованиеВходящийЭлектронныйДокумент(Документ, Комментарий, СообщениеОбОшибке = "") Экспорт
//Функция ОтправитьНаСогласованиеВходящийЭлектронныйДокумент(Документ, 
//															Комментарий, 
//															СообщениеОбОшибке = "", 
//															Комментатор = Неопределено
////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
//															, Шаблон = Неопределено	
////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-20 (#3780)
//															, КомментарийДляИсторииПереписки = ""
////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-20 (#3780)
//															) Экспорт
////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
//	
//	Если Не ЗначениеЗаполнено(Документ) Тогда
//		СообщениеОбОшибке = "Не указан документ для согласования.";
//		Возврат Ложь;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ИспользоватьСогласованияПоПочте = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Использовать согласования по почте", Ложь);
//	Если Не ИспользоватьСогласованияПоПочте Тогда
//		Возврат Истина;
//	КонецЕсли;
//	    
//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
//	//РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ок_Инициатор, ок_НомерЗаявки, Контрагент, ок_КомментарийДляСогласующего, ок_ПричинаОтклоненияСогласования"); 
//	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ок_Инициатор, ок_НомерЗаявки, Контрагент, ок_КомментарийДляСогласующего, ок_ПричинаОтклоненияСогласования, ок_ДатаРедакции, НомерВерсииЭД"); 
//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
//	
//	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-13 (#3997)
//	
//	//Инициатор = РеквизитыДокумента.ок_Инициатор; 
//	//Если Не ЗначениеЗаполнено(Инициатор) Тогда
//	//	СообщениеОбОшибке = "Не заполнен инициатор.";
//	//	Возврат Ложь;
//	//КонецЕсли;
//	//
//	//РеквизитыИнициатора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инициатор, "Email, Пользователь"); 
//	//ИнициаторАдрес = РеквизитыИнициатора.Email; 
//	//Если Не ЗначениеЗаполнено(ИнициаторАдрес) Тогда
//	//	СообщениеОбОшибке = "У инициатора не заполнен адрес электронной почты.";
//	//	Возврат Ложь;
//	//КонецЕсли;
//	
//	//ИнициаторПользователь = РеквизитыИнициатора.Пользователь; 
//	//Если Не ЗначениеЗаполнено(ИнициаторПользователь) Тогда //при загрузке проверяется только по справочнику пользователей, поэтому если не проверить, то будет ошибка
//	//	СообщениеОбОшибке = "У инициатора не заполнен пользователь.";
//	//	Возврат Ложь;
//	//КонецЕсли;
//	

//	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-13 (#3997)
//	
//	
//	
//	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
//	НастройкаДоставки = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Учетная запись почты согласований ЭДО");	
//	Если Не ЗначениеЗаполнено(НастройкаДоставки) Тогда
//		СообщениеОбОшибке = "Не заполнена настройка: Согласование по почте/Учетная запись почты согласований ЭДО";
//		Возврат Ложь;
//	КонецЕсли;
//	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
//	
//	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-14 (#3997)
//	СтруктураПараметров = Новый Структура;
//	СтруктураПараметров.Вставить("СтруктурноеПодразделение",Документ.Организация);
//	СтруктураПараметров.Вставить("ок_ЦФО",Документ.ок_ЦФО);

//	бит_Визирование.ОбновитьПереченьВиз(Документ,ТекущаяДата(),СтруктураПараметров);
//	
//	ИдентификаторЗаписи = Строка(Документ.УникальныйИдентификатор());

//	пМассивФайлов = Новый Массив;
//	ПрикладываемыеФайлы = ПолучитьПрисоединенныеФайлыВходящегоЭДДляОтправки(Документ);
//	//если уже выбраны файлы отмеченные к отправке значит они есть в РС Временные файлы. еще раз их записывать не требуется
//	СУчетомФлагаКОтправке = (ПрикладываемыеФайлы.Найти(Истина, "ок_КОтправке") <> Неопределено);
//	Для каждого Выборка Из ПрикладываемыеФайлы Цикл
//		
//		Если Выборка.ВнутренняяПереписка Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		пСтруктураФайла = Новый Структура;
//		пСтруктураФайла.Вставить("ИмяФайла", Выборка.Имя);
//		пСтруктураФайла.Вставить("Файл"	   , Выборка.ПрисоединенныйФайл);
//		пМассивФайлов.Добавить(пСтруктураФайла);
//		
//	КонецЦикла;
//	
//	Если пМассивФайлов.Количество() > 0 Тогда
//		бит_ФормаВводаБюджетаВызовСервера.СохранитьВременныеФайлыВложений(ИдентификаторЗаписи, пМассивФайлов, СУчетомФлагаКОтправке); 
//	КонецЕсли;
//			
//	Если Шаблон = Неопределено Тогда
//		
//		ШаблонСогласования = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Шаблон согласования входящего электронного документа");	
//		Если Не ЗначениеЗаполнено(ШаблонСогласования) Тогда
//			СообщениеОбОшибке = "Не заполнена настройка: Согласование по почте/Шаблон согласования входящего электронного документа";
//			Возврат Ложь;
//		КонецЕсли;
//		   
//		ШаблонСогласования_ТребуетсяЗаявка1С = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Шаблон согласования входящего электронного документа (Требуется заявка 1С)");	
//		Если Не ЗначениеЗаполнено(ШаблонСогласования_ТребуетсяЗаявка1С) Тогда
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена настройка: Согласование по почте/Шаблон согласования входящего электронного документа (Требуется заявка 1С)");
//			Возврат Ложь;
//		КонецЕсли;
//		   
//	КонецЕсли;
//	   
//	Для Каждого СтрокаИнициатор из Документ.ок_Инициаторы Цикл
//		
//		Инициатор = СтрокаИнициатор.Инициатор;
//		РеквизитыИнициатора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Инициатор, "Email, Пользователь");
//		ИнициаторАдрес = РеквизитыИнициатора.Email;
//		ИнициаторПользователь = РеквизитыИнициатора.Пользователь;
//	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-14 (#3997)
//	
//		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
//		Если Шаблон = Неопределено Тогда	
//		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
//			
//		//	Шаблон = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Шаблон согласования входящего электронного документа");	
//		//	Если Не ЗначениеЗаполнено(Шаблон) Тогда
//		//		СообщениеОбОшибке = "Не заполнена настройка: Согласование по почте/Шаблон согласования входящего электронного документа";
//		//		Возврат Ложь;
//		//	КонецЕсли;

//		//	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-20 (#3780)
//		//	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
//		//		И Документ.ок_ТребуетсяЗаявка1С Тогда
//		//		
//		//		Шаблон_ТребуетсяЗаявка1С = УниверсальнаяНастройка("Согласование по почте", "Шаблон согласования входящего электронного документа (Требуется заявка 1С)");	
//		//		Если Не ЗначениеЗаполнено(Шаблон_ТребуетсяЗаявка1С) Тогда
//		//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена настройка: Согласование по почте/Шаблон согласования входящего электронного документа (Требуется заявка 1С)");
//		//		КонецЕсли;
//		//		
//		//		Если ЗначениеЗаполнено(Шаблон_ТребуетсяЗаявка1С) Тогда
//		//			Шаблон = Шаблон_ТребуетсяЗаявка1С;
//		//		КонецЕсли;
//		//		
//		//	КонецЕсли; 
//		////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-20 (#3780)	
//		
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-29 (#3997) 
//		   Если Не Документ.ок_ТребуетсяЗаявка1С ИЛИ ЗначениеЗаполнено(Документ.ок_НомерЗаявки) Тогда
//			   ШаблонНаОтправку = ШаблонСогласования;
//		   Иначе
//			   Если СтрокаИнициатор.ОтветственныйЗаНомерЗаявки Тогда
//			       ШаблонНаОтправку = ШаблонСогласования_ТребуетсяЗаявка1С;
//			   Иначе
//			       ШаблонНаОтправку = ШаблонСогласования;   
//			   КонецЕсли;
//		   КонецЕсли;
//		   
//	   	Иначе
//		   
//			ШаблонНаОтправку = Шаблон;   
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-29 (#3997) 
//		
//		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
//		КонецЕсли;	
//		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
//		
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-29 (#3997) 
//		//РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "Сообщение_Текст, Сообщение_Подпись, Сообщение_Заголовок, ТипТекстаСообщения");
//		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ШаблонНаОтправку, "Сообщение_Текст, Сообщение_Подпись, Сообщение_Заголовок, ТипТекстаСообщения");
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-29 (#3997) 
//		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
//		Если Найти(НРег(РеквизитыШаблона.Сообщение_Текст + РеквизитыШаблона.Сообщение_Подпись), "гиперссылк") = 0 Тогда
//		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
//			СообщениеОбОшибке = "В шаблоне письма не указан тег с гиперссылками для ответов по согласованию.";
//			Возврат Ложь;
//		КонецЕсли;
//		
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-14 (#3997)
//		     //перенос кода до цикла
//		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
//		//ИдентификаторЗаписи = Строка(Документ.УникальныйИдентификатор());
//		////ИдентификаторЗаписи = Новый УникальныйИдентификатор();
//		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
//		
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-14 (#3997)
//		
//		СтруктураКонтекста = Новый Структура("Виза, ТекущийОбъект");
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-14 (#3997)
//		//СтруктураКонтекста.Вставить("Виза", ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ОЦР"));
//		СтруктураКонтекста.Вставить("Виза", ПредопределенноеЗначение("Справочник.бит_Визы.ок_Инициатор"));
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-14 (#3997)
//	    СтруктураКонтекста.Вставить("Период", ТекущаяДатаСеанса()); //+
//	    СтруктураКонтекста.Вставить("ТекущийОбъект", Документ);         				
//	    СтруктураКонтекста.Вставить("Комментарий", Комментарий);
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-29 (#3997)
//		//СтруктураКонтекста.Вставить("Шаблон", Шаблон);
//		СтруктураКонтекста.Вставить("Шаблон", ШаблонНаОтправку);
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-29 (#3997) 
//		СтруктураКонтекста.Вставить("Инициатор", Инициатор);
//		СтруктураКонтекста.Вставить("ИнициаторEmail", ИнициаторАдрес);
//		СтруктураКонтекста.Вставить("Получатель", Инициатор);
//	    СтруктураКонтекста.Вставить("НеПроверятьНаличиеЗаписи", Истина);
//		СтруктураКонтекста.Вставить("ИдентификаторЗаписи", ИдентификаторЗаписи); 
//		СтруктураКонтекста.Вставить("Пользователь", ИнициаторПользователь); 
//	    СтруктураКонтекста.Вставить("Заявка", РеквизитыДокумента.ок_НомерЗаявки);         				
//	    СтруктураКонтекста.Вставить("Контрагент", РеквизитыДокумента.Контрагент);         				
//				
//		СтруктураКонтекста.Вставить("ЗаявкаДата", "");
//		СтруктураКонтекста.Вставить("ЗаявкаНомер", "");
//		Если ЗначениеЗаполнено(РеквизитыДокумента.ок_НомерЗаявки) Тогда 
//			РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.ок_НомерЗаявки, "Номер, Дата"); 
//			СтруктураКонтекста.Вставить("ЗаявкаДата", РеквизитыЗаявки.Дата);
//			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
//			//говорят что пробелы стопорят
//			//СтруктураКонтекста.Вставить("ЗаявкаНомер", РеквизитыЗаявки.Номер);
//			СтруктураКонтекста.Вставить("ЗаявкаНомер", СокрЛП(РеквизитыЗаявки.Номер));
//			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
//		КонецЕсли;
//		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
//		СтруктураКонтекста.Вставить("ТипТекстаСообщения", РеквизитыШаблона.ТипТекстаСообщения);
//	    СтруктураКонтекста.Вставить("ДатаВерсии", Формат(РеквизитыДокумента.ок_ДатаРедакции, "ДЛФ=DT"));         				
//	    СтруктураКонтекста.Вставить("НомерВерсии", Строка(РеквизитыДокумента.НомерВерсииЭД));         				
//	    СтруктураКонтекста.Вставить("НомерВерсииРазвернуто", "Версия " + Строка(РеквизитыДокумента.НомерВерсииЭД) + " (" + Формат(РеквизитыДокумента.ок_ДатаРедакции, "ДЛФ=DT") + ")");         				
//		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
//		
//		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
//		//СтруктураКонтекста.Вставить("ОтветИзОфиса", ?(ПустаяСтрока(Комментарий), "", "Ответ из офиса: " + Комментарий));
//		// оформим шаблон "ОтветИзОфиса",если это переписка не новая
//		ТекстЦитата = "";
//		Если ЗначениеЗаполнено(Комментарий) Тогда
//			ТекстЦитата = "
//			|---------- текущий комментарий ----------- <BR/>
//			|	Комментарий %1: <b>%2</b><BR/>";

//			ТекстЦитата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЦитата, СтруктураКонтекста.Период, Комментарий);
//		ИначеЕсли ЗначениеЗаполнено(РеквизитыДокумента.ок_ПричинаОтклоненияСогласования) Тогда
//			ТекстЦитата = "
//			|----------********----------- <BR/>";
//			Если ЗначениеЗаполнено(РеквизитыДокумента.ок_НомерЗаявки) Тогда
//				ТекстЦитата = ТекстЦитата + "
//				|	Заявка: %1 от %2 <BR/>";
//			КонецЕсли;
//			ТекстЦитата = ТекстЦитата + "
//			|	Цитата (комментарий): %3 <BR/>
//			|----------********----------- <BR/>
//			|";
//			
//			ТекстЦитата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЦитата, 
//					СтруктураКонтекста.ЗаявкаНомер, 
//					СтруктураКонтекста.ЗаявкаДата, 
//					РеквизитыДокумента.ок_ПричинаОтклоненияСогласования);
//					
//		КонецЕсли;
//		ТекстПереписки = РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ПодготовитьТекстПерепискиДокумента(Документ, СтруктураКонтекста);
//		Если ЗначениеЗаполнено(ТекстПереписки) Тогда
//			ТекстЦитата = 
//			"<hr>
//			|Полная информация по согласованию:<BR/>
//			|<span style=""font-size: 80%"">
//			|" + ТекстЦитата + "
//			|---------- история переписки ----------- <BR/></span>
//			|" + ТекстПереписки;
//			//ТекстЦитата = ТекстЦитата + ТекстПереписки;		
//		КонецЕсли;	
//		СтруктураКонтекста.Вставить("ОтветИзОфиса", ТекстЦитата);
//		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
//		
//		КэшАдресов = Новый ТаблицаЗначений;
//		КэшАдресов.Колонки.Добавить("Получатель"             ,Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
//		КэшАдресов.Колонки.Добавить("ВидКонтактнойИнформации");
//		КэшАдресов.Колонки.Добавить("Адрес"                  );

//		КэшАдресов.Индексы.Добавить("Получатель,ВидКонтактнойИнформации");       

//		СтрокаКэш = КэшАдресов.Добавить();
//		СтрокаКэш.Получатель = СтруктураКонтекста.Получатель;
//		СтрокаКэш.Адрес	     = СтруктураКонтекста.ИнициаторEmail;
//			
//		//файлы для вложения в письмо
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-14 (#3997)
//			//перенос кода до цикла
//		//пМассивФайлов = Новый Массив;	
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-14 (#3997)
//		
//		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
//		//Запрос = Новый Запрос;
//		//Запрос.Текст = 
//		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		//|	МАКСИМУМ(Данные.Ссылка) КАК Ссылка,
//		//|	Данные.Наименование КАК Наименование,
//		//|	Данные.Расширение КАК Расширение,
//		//|	Данные.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
//		//|ИЗ
//		//|	Справочник.ЭДПрисоединенныеФайлы КАК Данные
//		//|ГДЕ
//		//|	НЕ Данные.ПометкаУдаления
//		//|	И Данные.ВладелецФайла = &Документ
//		//|
//		//|СГРУППИРОВАТЬ ПО
//		//|	Данные.Наименование,
//		//|	Данные.Расширение,
//		//|	Данные.ТипЭлементаВерсииЭД"
//		//;
//		//Запрос.УстановитьПараметр("Документ", Документ);

//		//Выборка = Запрос.Выполнить().Выбрать();
//		//Пока Выборка.Следующий() Цикл
//		//	Если НРег(Выборка.Расширение) <> "pdf" Тогда
//		//		Продолжить;
//		//	КонецЕсли;
//		//	пСтруктураФайла = Новый Структура;
//		//	пСтруктураФайла.Вставить("ИмяФайла", Выборка.Наименование + "." + Выборка.Расширение);
//		//	пСтруктураФайла.Вставить("Файл"	   , Выборка.Ссылка);
//		//	пМассивФайлов.Добавить(пСтруктураФайла);

//		//КонецЦикла;
//		
//		//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
//		//ПрикладываемыеФайлы = ПолучитьПрисоединенныеФайлыВходящегоЭДДляОтображения(Документ);
//		
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-14 (#3997)
//		          //перенос кода до цикла
//		//ПрикладываемыеФайлы = ПолучитьПрисоединенныеФайлыВходящегоЭДДляОтправки(Документ);
//		////если уже выбраны файлы отмеченные к отправке значит они есть в РС Временные файлы. еще раз их записывать не требуется
//		//СУчетомФлагаКОтправке = (ПрикладываемыеФайлы.Найти(Истина, "ок_КОтправке") <> Неопределено);
//		////ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)
//		//
//		//Для каждого Выборка Из ПрикладываемыеФайлы Цикл
//		//	
//		//	Если Выборка.ВнутренняяПереписка Тогда
//		//		Продолжить;
//		//	КонецЕсли;
//		//	
//		//	пСтруктураФайла = Новый Структура;
//		//	пСтруктураФайла.Вставить("ИмяФайла", Выборка.Имя);
//		//	пСтруктураФайла.Вставить("Файл"	   , Выборка.ПрисоединенныйФайл);
//		//	пМассивФайлов.Добавить(пСтруктураФайла);
//		//	
//		//КонецЦикла;
//		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
//		//
//		//Если пМассивФайлов.Количество() > 0 Тогда
//		//	//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
//		//	//бит_ФормаВводаБюджетаВызовСервера.СохранитьВременныеФайлыВложений(ИдентификаторЗаписи, пМассивФайлов);
//		//	бит_ФормаВводаБюджетаВызовСервера.СохранитьВременныеФайлыВложений(ИдентификаторЗаписи, пМассивФайлов, СУчетомФлагаКОтправке);
//		//	//ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)
//		//КонецЕсли;
//		
//			//Теперь визы добавляются маршрутом (Назаренко Д.В.)
//			
//		//// фиксация на РС "Установленные визы" запись с пустым решением
//		//НаборЗаписейВизы = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
//		////Вдовиченко Г.В. 20190305
//		////?...
//		////НаборЗаписейВизы.Отбор.Объект.Установить(Документ.Ссылка);
//		//НаборЗаписейВизы.Отбор.Объект.Установить(Документ);
//		////Вдовиченко Г.В. 20190305
//		//НаборЗаписейВизы.Отбор.ИД.Установить(ИдентификаторЗаписи);
//		//НаборЗаписейВизы.Отбор.Виза.Установить(СтруктураКонтекста.Виза);
//		//
//		//НаборЗаписейВизы.Прочитать();
//		//
//		//Если НаборЗаписейВизы.Количество() = 0 Тогда
//		//	//Вдовиченко Г.В. 20190305
//		//	//НаборЗаписейВизы.Добавить();
//		//	ЗаписьВизы = НаборЗаписейВизы.Добавить();
//		//	Для каждого ЗначениеОтбора из НаборЗаписейВизы.Отбор Цикл
//		//		ЗаписьВизы[ЗначениеОтбора.Имя] = ЗначениеОтбора.Значение;
//		//	КонецЦикла;	
//		//	//Вдовиченко Г.В. 20190305
//		//КонецЕсли;
//		//
//		//Для Каждого ЗаписьВизы Из НаборЗаписейВизы Цикл
//		//	ЗаписьВизы.Пользователь 	= СтруктураКонтекста.Пользователь;
//		//	ЗаписьВизы.ФизическоеЛицо 	= СтруктураКонтекста.Инициатор;
//		//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
//		//	ЗаписьВизы.Комментарий 	= "";
//		//	ЗаписьВизы.Решение 	= Справочники.бит_ВидыРешенийСогласования.ПустаяСсылка();
//		//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
//		//КонецЦикла;	
//		//
//		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
//		//НаборЗаписейВизы.ДополнительныеСвойства.Вставить("ок_БезОтраженияРезультатаСогласования", Истина);
//		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
//		//
//		//бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписейВизы);
//		
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-14 (#3997)
//		
//		// попытка записать в РС "Оповещения" данные, для последующей отправки на эл. почту
//		РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода("Нет");
//		//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
//		//Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.ЗаписатьОповещение(Неопределено
//		Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.СформироватьИЗаписатьСообщение(Неопределено
//		//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
//											   ,СтруктураКонтекста.Шаблон
//											   //ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
//											   //,СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаДоставки_ДляОтправкиПисем")
//											   ,НастройкаДоставки
//											   //ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
//											   ,СтруктураКонтекста
//											   ,КэшАдресов
//											   ,РежимыВывода.ВыводитьОшибки); 
//											   
//		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
//		Если СтруктураКонтекста.Свойство("СтруктураСообщения") Тогда
//			Заголовок = СтруктураКонтекста.СтруктураСообщения.Заголовок;
//		Иначе
//			Заголовок = НСтр("ru = 'Согласование входящего документа'");
//		КонецЕсли;	
//		//СтруктураСообщения = бит_фн_ОповещенияСервер.СформироватьСообщениеПоШаблону(РеквизитыШаблона, СтруктураКонтекста);
//		//СтруктураСообщения.Заголовок = бит_СтрокиКлиентСервер.ОбработатьТекстШаблона(СтруктураСообщения.Заголовок, СтруктураКонтекста);
//		//РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(Документ, Комментатор, Перечисления.СтатусыПисем.Исходящее, ИдентификаторЗаписи, Комментарий, , СтруктураСообщения.Заголовок);
//		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-20 (#3780)
//		//РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(Документ, Комментатор, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Исходящее"), ИдентификаторЗаписи, Комментарий, , Заголовок);
//		
//		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-13 (#3997)
//		//Если КомментарийДляИсторииПереписки <> "" Тогда
//		//	РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(Документ, Комментатор, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Исходящее"), ИдентификаторЗаписи, КомментарийДляИсторииПереписки, , Заголовок);
//		//Иначе
//		//	РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(Документ, Комментатор, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Исходящее"), ИдентификаторЗаписи, Комментарий, , Заголовок);
//		//КонецЕсли; 
//		
//		Если КомментарийДляИсторииПереписки <> "" Тогда
//			РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(Документ, Комментатор, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Исходящее"), ИдентификаторЗаписи, КомментарийДляИсторииПереписки, , Заголовок, , СтруктураКонтекста.Получатель);
//		Иначе
//			РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ОбновитьИсторию(Документ, Комментатор, ПредопределенноеЗначение("Перечисление.СтатусыПисем.Исходящее"), ИдентификаторЗаписи, Комментарий, , Заголовок, , СтруктураКонтекста.Получатель);
//		КонецЕсли;
//	КонецЦикла;	
//	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-13 (#3997)
//			
//	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-20 (#3780)
//	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
//	
//	Возврат Истина;	
//	
//КонецФункции
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-26 (#3997)

// Процедура вызывается из модуля набора записей РС "бит_УстановленныеВизы"
// Необходима для обновления статуса и комментария эл. вх. документа
//
Процедура ОтразитьРезультатВизыСогласованияВходящегоЭлектронногоДокумента(НаборЗаписей) Экспорт
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ок_БезОтраженияРезультатаСогласования") И НаборЗаписей.ДополнительныеСвойства.ок_БезОтраженияРезультатаСогласования Тогда
		Возврат;
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
	
	НовыйСтатус = Неопределено;
	Комментарий = "";
	Для каждого Запись из НаборЗаписей Цикл //когда все записи с решением: все согласованные - согласовано, хотябы одна нет - не согласовано
		Если Не ЗначениеЗаполнено(Запись.Решение) Тогда
			НовыйСтатус = Неопределено;
			Прервать;
		КонецЕсли;
		Статус = Неопределено;
		Если Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Отклонено Тогда
			Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован;
		ИначеЕсли Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Согласовано Тогда
			Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован;
		Иначе
			Продолжить;
		КонецЕсли;
		Если НовыйСтатус = Неопределено Тогда
			НовыйСтатус = Статус;
		ИначеЕсли Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован И Статус <> НовыйСтатус Тогда
			НовыйСтатус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован;
		КонецЕсли;	
		Если Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
			Комментарий = Запись.Комментарий;
		КонецЕсли;	
	КонецЦикла;
	Если Не ЗначениеЗаполнено(НовыйСтатус) Тогда
		Возврат;
	КонецЕсли;	
	Объект = Неопределено;
	Для каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл
		Если ЭлементОтбора.Имя <> "Объект" Тогда
			Продолжить;
		ИначеЕсли Не ЭлементОтбора.Использование Тогда
			Продолжить;
		ИначеЕсли ЭлементОтбора.ВидСравнения <> Видсравнения.Равно Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеОтбора = ЭлементОтбора.Значение;
		Если ТипЗнч(ЗначениеОтбора) <> Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			Прервать;
		КонецЕсли;	
		Объект = ЗначениеОтбора;
		Прервать;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Данные.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &Ссылка
	|	И Данные.ок_Статус <> &НовыйСтатус
	|	И Данные.ок_Статус В(&ок_Статус)"
	;
	
	ок_Статусы = Новый Массив;
	ок_Статусы.Добавить(Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ПустаяСсылка());
	ок_Статусы.Добавить(Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый);
	ок_Статусы.Добавить(Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование);
	//ок_Статусы.Добавить(Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ОтправленоНаСогласование);
	Запрос.УстановитьПараметр("ок_Статус", ок_Статусы);
	Запрос.УстановитьПараметр("НовыйСтатус", НовыйСтатус);
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	// изменение статуса, номера заявки и комментария в эл. вход. документе
	ИзменяемыйОбъект = Объект.ПолучитьОбъект();	
	ИзменяемыйОбъект.ок_Статус = НовыйСтатус;
	
	Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
		ИзменяемыйОбъект.ок_ПричинаОтклоненияСогласования = Комментарий;
	КонецЕсли;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ТекстНомераЗаявки") Тогда
		ТекстНомерФВБ = НаборЗаписей.ДополнительныеСвойства.ТекстНомераЗаявки;
		Если ЗначениеЗаполнено(ТекстНомерФВБ) Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	бит_ФормаВводаБюджета.Ссылка КАК ДокФВБ
			|ИЗ
			|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
			|ГДЕ
			|	бит_ФормаВводаБюджета.Номер = &ТекстНомерФВБ
			|
			|УПОРЯДОЧИТЬ ПО
			|	бит_ФормаВводаБюджета.Дата УБЫВ"
			;
			Запрос.УстановитьПараметр("ТекстНомерФВБ", ТекстНомерФВБ);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда				
				ИзменяемыйОбъект.ок_НомерЗаявки = Выборка.ДокФВБ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	ИзменяемыйОбъект.ОбменДанными.Загрузка = Истина;
	ИзменяемыйОбъект.Записать();
	
КонецПроцедуры	

Функция ПолучитьПарольСертификата(Сертификат) Экспорт
	
	Пароль = Неопределено;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-10 (#3395)
	//УстановитьПривилегированныйРежим(Истина);
	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АдминистраторСистемы") Тогда
		УстановитьПривилегированныйРежим(Истина);
	Иначе	
		Возврат Пароль;
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-10 (#3395)
	
	Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Сертификат, "ПаролиСертификатов");
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-10 (#3395)
	//УстановитьПривилегированныйРежим(Ложь);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-10 (#3395)
	
	Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
		Данные = Новый Соответствие;
	КонецЕсли;
	
	Пароль = Данные.Получить(Пользователи.ТекущийПользователь());
	
	Если Пароль = Неопределено Тогда   
		Пароль = Данные.Получить(Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Пароль;
	
КонецФункции	

Процедура СоздатьПисьмаНаСогласование() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	бит_МодульРегламентныхЗаданий.ОтправкаОповещений();
	
КонецПроцедуры

Процедура ПроверитьРезультатыСогласования() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	бит_Визирование.РегламентноеЗаданиеПарсингПочтыСогласований();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование исходящие ЭД

Функция СчетФактураРеализации(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &Документ
		|	И СчетФактураВыданныйДокументыОснования.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетФактураВыданный.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &Документ
		|	И СчетФактураВыданный.Проведен";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

Функция СчетРеализации(Документ) Экспорт
	
	Счет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СчетНаОплатуПокупателю");
	Если ЗначениеЗаполнено(Счет) Тогда
		Возврат Счет;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|ГДЕ
		|	СчетНаОплатуПокупателю.Реализация = &Документ
		|	И СчетНаОплатуПокупателю.Проведен";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ПолучитьПрикладываемыйФайлКРеализации(Документ) Экспорт
	
	ПрисоединенныйФайл = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Данные.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РеализацияТоваровУслугПрисоединенныеФайлы КАК Данные
		|ГДЕ
		|	Данные.ВладелецФайла = &Документ
		|	И НЕ Данные.ПометкаУдаления
		|	И Данные.Наименование = ""Расчет""
		|	И Данные.Расширение = ""pdf""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные.ДатаМодификацииУниверсальная УБЫВ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

Процедура ДобавитьДополнительныеФайлыВИсходящийДокумент(ПараметрыОбмена, ЭлектронныйДокумент, СтруктураЭД, УникальныйИдентификаторЭД, ДобавленныйФайл) Экспорт
	
	//ДокументОснование = Неопределено;
	//Если СтруктураЭД.Свойство("ДокументыОснования") И СтруктураЭД.ДокументыОснования.Количество() > 0 Тогда
	//	ДокументОснование = СтруктураЭД.ДокументыОснования[0];
	//КонецЕсли;
	//Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
	//	Возврат;
	//КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
	//Если Не ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоДополнительныйСервисЭДО(СтруктураЭД.ПрофильНастроекЭДО) Тогда
	Если Не ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоДополнительныйСервисЭДО(СтруктураЭД.Отправитель) Тогда	
		Возврат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(СтруктураЭД.Владелец);
	Если ТипЗначения = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Если СтруктураЭД.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
			Документ = СчетФактураРеализации(СтруктураЭД.Владелец);
			Если ЗначениеЗаполнено(Документ) Тогда
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(Документ);
				ПараметрыОбмена = ПолучитьПараметрыОбмена(МассивОбъектов);
				Если МассивОбъектов.Количество() > 0 Тогда
					//МассивСтруктурОбмена = ОбменСКонтрагентамиСлужебный.СформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена);
					МассивСтруктурОбмена = ОбменСКонтрагентамиСлужебный.СформироватьXMLФайлыДокументов(МассивОбъектов, ПараметрыОбмена);
					Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
						ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(СтруктураОбмена.ПолноеИмяФайла, ЭлектронныйДокумент, СтруктураЭД, УникальныйИдентификаторЭД, ДобавленныйФайл, Перечисления.ВидыЭД.СчетФактура, Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//сбис ругается на типовой документ от 1с, ему кажется, что лишние данные в адресе контрагента...
		//поэтому счет будем слать пдфкой
		//Документ = СчетРеализации(СтруктураЭД.Владелец);
		//Если ЗначениеЗаполнено(Документ) Тогда
		//	МассивОбъектов = Новый Массив;
		//	МассивОбъектов.Добавить(Документ);
		//	ПараметрыОбмена = ПолучитьПараметрыОбмена(МассивОбъектов);
		//	Если МассивОбъектов.Количество() > 0 Тогда
		//		МассивСтруктурОбмена = ОбменСКонтрагентамиСлужебный.СформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена);
		//		Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
		//			ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(СтруктураОбмена.ПолноеИмяФайла, ЭлектронныйДокумент, СтруктураЭД, УникальныйИдентификаторЭД, ДобавленныйФайл, Перечисления.ВидыЭД.СчетНаОплату, Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД);
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЭД.Владелец, "ок_ВключитьСчетВПакетЭДО") Тогда
			ДокументыДляПечати = Новый Массив;
			ДокументыДляПечати.Добавить(СтруктураЭД.Владелец); 
			ДополнительныеПараметрыПечати = Новый Структура;
			ТипыОбъектовПечати = Новый Массив;
			//ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы("Обработка.ПечатьСчетаНаОплату", "СчетЗаказСПечатью", ДокументыДляПечати, ДополнительныеПараметрыПечати, ТипыОбъектовПечати);
			ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы("Обработка.ПечатьСчетаНаОплату", "СчетЗаказ", ДокументыДляПечати, ДополнительныеПараметрыПечати, ТипыОбъектовПечати);
			Для каждого ДанныеПечатнойФормы Из ПечатныеФормы.КоллекцияПечатныхФорм Цикл
				Если ТипЗнч(ДанныеПечатнойФормы.ТабличныйДокумент) <> Тип("ТабличныйДокумент") Тогда
					Продолжить;
				КонецЕсли;	
				Если ДанныеПечатнойФормы.ТабличныйДокумент.ВысотаТаблицы = 0 Тогда
					Продолжить;
				КонецЕсли;	
				ВременныйКаталог = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", Строка(Новый УникальныйИдентификатор));
				ПолноеИмяФайла = ВременныйКаталог + "Счет на оплату" + ?(ПечатныеФормы.КоллекцияПечатныхФорм.Индекс(ДанныеПечатнойФормы) = 0, "", (ПечатныеФормы.КоллекцияПечатныхФорм.Индекс(ДанныеПечатнойФормы) + 1)) + ".pdf";
				ДанныеПечатнойФормы.ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
				ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(ПолноеИмяФайла, ЭлектронныйДокумент, СтруктураЭД, УникальныйИдентификаторЭД, ДобавленныйФайл);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВременныйКаталог);
			КонецЦикла;
		КонецЕсли;
		
		Документ = ПолучитьПрикладываемыйФайлКРеализации(СтруктураЭД.Владелец);
		Если ЗначениеЗаполнено(Документ) Тогда
			ПараметрыДанных = РаботаСФайлами.ДанныеФайла(Документ);
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
			ВременныйКаталог = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", Строка(Новый УникальныйИдентификатор));
			ПолноеИмяФайла = ВременныйКаталог + ПараметрыДанных.ИмяФайла;
			ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
			УдалитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);				
			ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(ПолноеИмяФайла, ЭлектронныйДокумент, СтруктураЭД, УникальныйИдентификаторЭД, ДобавленныйФайл);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВременныйКаталог);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыОбмена(МассивСсылокНаОбъект)
	НастройкиОбъектов = Новый Соответствие;
	Для Сч = -МассивСсылокНаОбъект.Количество() + 1 По 0 Цикл
		СсылкаНаОбъект = МассивСсылокНаОбъект[-Сч];
		
		// Для случая определения вида ЭД пользователем
		ВидЭД = "";
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-18 (#3816)
		//НастройкиОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект,
		//,
		////,
		//,
		//ВидЭД);
		ПараметрыОпределенияНастройки = Новый Структура("ВидЭД", ВидЭД);
		НастройкиОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект, ПараметрыОпределенияНастройки);
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-18 (#3816)
		// Проверим, что в полученных настройках используются действующие форматы
		ОбменСКонтрагентамиСлужебный.АктуализироватьФорматыЭДВНастройкахОбмена(НастройкиОбмена);
		
		Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
			МассивСсылокНаОбъект.Удалить(-Сч);
		Иначе
			НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиОбъектов;
	
КонецФункции	

Функция СоздатьПрисоединенныйДопФайл(ПолноеИмяФайла, ЭлектронныйДокумент, СтруктураЭД, УникальныйИдентификаторЭД, ДобавленныйФайл, ВидЭД = Неопределено, ТипЭлементаВерсииЭД = Неопределено)
	
	ДопЭДСоздан = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		Возврат ДопЭДСоздан;
	КонецЕсли;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя));
		
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", ЭлектронныйДокумент); 
	ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение, ".", ""));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	
	НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
	ДопФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаЭД);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяФайла);
	УдалитьИзВременногоХранилища(АдресФайла);				
	
	Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
		ДопЭДСоздан = Истина;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-06-17 (#3377)
		//СтруктураПараметров.Вставить("ВидЭД", ?(ВидЭД = Неопределено, Перечисления.ВидыЭД.ДопДанные, ВидЭД));
		СтруктураПараметров.Вставить("ВидЭД", ?(ВидЭД = Неопределено, Перечисления.ВидыЭД.ПроизвольныйЭД, ВидЭД));
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-17 (#3377)
		СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
		СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
		СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
		СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-18 (#3816) - по коду не видно, что бы использовали СоглашениеЭД, но на всякий случай сделаем проверку на наличие свойства
		//СтруктураПараметров.Вставить("СоглашениеЭД", СтруктураЭД.СоглашениеЭД);
		Если СтруктураЭД.Свойство("СоглашениеЭД") Тогда
			СтруктураПараметров.Вставить("СоглашениеЭД", СтруктураЭД.СоглашениеЭД);
		КонецЕсли;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-18 (#3816)
		СтруктураПараметров.Вставить("ВладелецЭД", ЭлектронныйДокумент);
		СтруктураПараметров.Вставить("УникальныйИД", УникальныйИдентификаторЭД);
		СтруктураПараметров.Вставить("НомерЭД", СтруктураЭД.НомерЭД);
		СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", ?(ТипЭлементаВерсииЭД = Неопределено, Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД, ТипЭлементаВерсииЭД));
		СтруктураПараметров.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, СтруктураПараметров, Ложь);
	КонецЕсли;	
		
	Возврат ДопЭДСоздан;
	
КонецФункции

//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
Функция ДобавитьФайлыОтИнициатора(Сообщение, СтруктураКонтекста) Экспорт
	
	УникальныйИдентификаторЭД = "";
		
	Для Каждого ЭлементВложенийПисьма Из Сообщение.Вложения Цикл
		
		ДвоичныеДанныеЭлемента = ЭлементВложенийПисьма.Значение;
		АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
		
		ПараметрыФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ЭлементВложенийПисьма.Ключ);
		ПараметрыФайла.Вставить("Автор", 			СтруктураКонтекста.Пользователь);
		ПараметрыФайла.Вставить("ВладелецФайлов", 	СтруктураКонтекста.ЭлектронныйДокумент);
		ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ПараметрыФайла.Расширение));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище, , , НоваяСсылкаЭД);
		
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			
			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
			//РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураКонтекста.ЭлектронныйДокумент, "Организация, Контрагент, НастройкаЭДО");
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураКонтекста.ЭлектронныйДокумент, "Организация, Контрагент, ИдентификаторКонтрагента, ИдентификаторОрганизации");
			РеквизитыДокумента.Вставить("НастройкаЭДО", Новый Структура("ИдентификаторКонтрагента, ИдентификаторОрганизации", РеквизитыДокумента.ИдентификаторКонтрагента, РеквизитыДокумента.ИдентификаторОрганизации));
			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
			                     
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ПрисоединенныйФайл);
			СтруктураПараметров.Вставить("ВидЭД", 				ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД"));
			СтруктураПараметров.Вставить("НаправлениеЭД", 		ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"));
			СтруктураПараметров.Вставить("СтатусЭД", 			ПредопределенноеЗначение("Перечисление.СтатусыЭД.Сформирован"));
			СтруктураПараметров.Вставить("Организация", 		РеквизитыДокумента.Организация);
			СтруктураПараметров.Вставить("Контрагент", 			РеквизитыДокумента.Контрагент);
			СтруктураПараметров.Вставить("СоглашениеЭД", 		РеквизитыДокумента.НастройкаЭДО);
			СтруктураПараметров.Вставить("ВладелецЭД", 			СтруктураКонтекста.ЭлектронныйДокумент);
			СтруктураПараметров.Вставить("УникальныйИД", 		УникальныйИдентификаторЭД);
			//СтруктураПараметров.Вставить("НомерЭД", 			СтруктураЭД.НомерЭД);
			СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ок_ВнутренняяПереписка"));
			СтруктураПараметров.Вставить("НаименованиеФайла", 	ПараметрыФайла.ИмяБезРасширения);
			СтруктураПараметров.Вставить("ДатаФормированияЭДОтправителем",		СтруктураКонтекста.ДатаВерсии);
			СтруктураПараметров.Вставить("ок_НомерВерсииЭД", 		СтруктураКонтекста.НомерВерсии);
						
			ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресВХранилище);
		
	КонецЦикла;
	
КонецФункции	
//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)

Функция СформироватьИсходящиеДокументы(МассивСсылокНаОбъект) Экспорт
	
	МассивОтпечатковСертификатов = Новый Массив;
	ДопПараметры = Новый Структура;
	СоответствиеСертификатаИПароля = Новый Соответствие;
	ЭД = Неопределено;
	
	Возврат ОбменСКонтрагентамиСлужебныйВызовСервера.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
																				МассивОтпечатковСертификатов,
																				"Сформировать",
																				ДопПараметры,
																				ЭД,
																				СоответствиеСертификатаИПароля);
																				
КонецФункции	

Функция ПолучитьДокументыДляСозданияИсходящихЭД(Документы = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-05 (#4330)
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Организация	
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка,
	|	КорректировкаРеализации.Дата,
	|	КорректировкаРеализации.Контрагент,
	|	КорректировкаРеализации.Организация
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Проведен
	|	И НЕ КорректировкаРеализации.ПометкаУдаления
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-05 (#4330)
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
	|	Данные.Дата КАК Дата,
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
	//|	СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК ИДОрганизация,
	//|	СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК ИДКонтрагент,
	|	СоглашенияОбИспользованииЭД.ИдентификаторОтправителя КАК ИДОрганизация,
	|	СоглашенияОбИспользованииЭД.ИдентификаторПолучателя КАК ИДКонтрагент,	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3337)
	|	Данные.Ссылка КАК Документ
	|ИЗ
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-05 (#4330)
	//|	Документ.РеализацияТоваровУслуг КАК Данные
	|	ВТ_Документы КАК Данные
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-05 (#4330) 
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьСоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	//|		ПО Данные.Контрагент = СоглашенияОбИспользованииЭД.Контрагент
	//|			И Данные.Организация = СоглашенияОбИспользованииЭД.Организация
	//|			И (НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления)
	//|			И (СоглашенияОбИспользованииЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято))
	//|			И (Данные.Проведен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК СоглашенияОбИспользованииЭД
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|			ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = СоглашенияОбИспользованииЭД.ИдентификаторПолучателя
	|				И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = СоглашенияОбИспользованииЭД.ИдентификаторОтправителя
	|				И (ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято))	
	|		ПО Данные.Контрагент = СоглашенияОбИспользованииЭД.Получатель
	|			И Данные.Организация = СоглашенияОбИспользованииЭД.Отправитель
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-05 (#4330)
	//|			И (Данные.Проведен)	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-05 (#4330)
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО Данные.Ссылка = СостоянияЭД.СсылкаНаОбъект
	|ГДЕ
	|	(Данные.Ссылка В (&МассивСсылок)
	|			ИЛИ &ПоВсемДокументам)
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-09-10 (#4281)
	|			И НЕ СостоянияЭД.ок_СтатусЭД = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Черновик)
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-09-10 (#4281)
	|	И (СостоянияЭД.ЭлектронныйДокумент ЕСТЬ NULL
	|			ИЛИ СостоянияЭД.ЭлектронныйДокумент = НЕОПРЕДЕЛЕНО
	|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)
	|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
	|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи))";
	
	Запрос.УстановитьПараметр("ПоВсемДокументам", Документы = Неопределено);
	Если ТипЗнч(Документы) = Тип("Массив") Тогда
		МассивСсылок = Документы;
	Иначе
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Документы);
	КонецЕсли;	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Данные = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
		ПараметрыДокумента = Новый Структура("Направление, Дата", "Исходящий", Выборка.Дата);
		НастройкиСоглашения = ПолучитьДействующиеНастройкиОбменаЭД(Выборка.ИДОрганизация, Выборка.ИДКонтрагент, "", ПараметрыДокумента);
		Если НастройкиСоглашения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3337)
		Отказ = Ложь;
		ЭлектронноеВзаимодействиеБП.ПроверитьВозможностьФормированияЕдиногоДокумента(Выборка.Документ, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
		//Данные.Добавить(Выборка.Документ);
		Если Данные.Найти(Выборка.Документ) = Неопределено Тогда
			Данные.Добавить(Выборка.Документ);
		КонецЕсли;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3337)
	КонецЦикла;
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат Данные;
	
КонецФункции	

//регламентоное задание 
Процедура ок_СозданиеИсходящихЭД() Экспорт
	
	СоздатьИсходящиеЭД();
	
КонецПроцедуры

Процедура СоздатьИсходящиеЭД(Документ = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСсылок = ПолучитьДокументыДляСозданияИсходящихЭД(Документ);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Результат = СформироватьИсходящиеДокументы(МассивСсылок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подписание исходящие ЭД

Функция ПолучитьДанныеИсходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат = Неопределено) Экспорт
	
	Данные = Новый Соответствие;
	Для каждого Документ из ВыделенныеСтроки Цикл
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
		//Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ПрофильНастроекЭДО,УникальныйИД");
		//ПараметрыЭДО = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(Реквизиты.ПрофильНастроекЭДО);
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ИдентификаторОрганизации,УникальныйИД");
		ПараметрыЭДО = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(Реквизиты.ИдентификаторОрганизации);
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
		
		ПараметрыЭДО.Вставить("Документ", Документ);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Данные.ДокументОснование.Дата КАК Дата,
			|	Данные.ДокументОснование.Номер КАК Номер,
			|	Данные.ДокументОснование.СуммаДокумента КАК СуммаДокумента,
			|	Данные.Ссылка.Контрагент КАК Контрагент,
			|	Данные.Ссылка.Организация КАК Организация,
			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
			//|	Данные.Ссылка.НастройкаЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			//|	Данные.Ссылка.НастройкаЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	Данные.Ссылка.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	Данные.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
			|	Данные.Ссылка.Комментарий КАК Комментарий,
			|	Данные.Ссылка КАК Документ
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК Данные
			|ГДЕ
			|	Данные.Ссылка = &Документ
			|	И Данные.ДокументОснование <> НЕОПРЕДЕЛЕНО
			|
			|УПОРЯДОЧИТЬ ПО
			|	Данные.НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭДПрисоединенныеФайлы.Ссылка КАК Файл,
			|	ВТ.Дата КАК Дата,
			|	ВТ.Номер КАК Номер,
			|	ВТ.СуммаДокумента КАК СуммаДокумента,
			|	ВТ.Контрагент КАК Контрагент,
			|	ВТ.Организация КАК Организация,
			|	ВТ.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	ВТ.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	ВТ.Комментарий КАК Комментарий,
			|	ВТ.Документ КАК Документ,
			|	ЭДПрисоединенныеФайлы.НаименованиеФайла КАК ИмяФайла,
			|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение
			|ИЗ
			|	ВТ КАК ВТ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ПО ВТ.Документ = ЭДПрисоединенныеФайлы.ВладелецФайла
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипЭлементаВерсииЭД)";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", ВыгружаемыеТипыЭлементовВерсииЭД());
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();
		ДанныеФайлов = Новый Массив;
		Для каждого СтрокаДанных из ДанныеЗапроса Цикл
			ОписаниеФайла = Новый Структура;
			Для каждого Колонка из ДанныеЗапроса.Колонки Цикл
				ОписаниеФайла.Вставить(Колонка.Имя, Неопределено);
			КонецЦикла;	
		    ЗаполнитьЗначенияСвойств(ОписаниеФайла, СтрокаДанных);
			ДанныеФайлов.Добавить(ОписаниеФайла);
		КонецЦикла;	
		
		ПараметрыЭДО.Вставить("ДанныеФайлов", ДанныеФайлов);
		
		Если ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
			//Идентификатор = Строка(Документ.УникальныйИдентификатор());
			ДанныеДляПодписания = сбисПолучитьДанныеДляПодписания(ПараметрыЭДО, Реквизиты.УникальныйИД, Сертификат, "Отправить");
			Если ДанныеДляПодписания = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Данные.Вставить(Документ, ДанныеДляПодписания);
		КонецЕсли;
	КонецЦикла;
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ОтправитьИсходящийДокумент(Документ, ДанныеДляПодписания, НеОповещатьПользователяОбОшибке = Ложь) Экспорт
		
	Возврат ВыполнитьПодписаниеЭлектронногоДокумента(Документ, ДанныеДляПодписания, "Исходящий", НеОповещатьПользователяОбОшибке);
	
	//Если ДанныеДляПодписания.Свойство("ПараметрыЭДО") Тогда
	//	Если ДанныеДляПодписания.ПараметрыЭДО.СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис Тогда
	//		Возврат сбисВыполнитьДействиеПодписания(ДанныеДляПодписания.ПараметрыЭДО, ДанныеДляПодписания);
	//	КонецЕсли;	
	//КонецЕсли;	
	//
	//Возврат Ложь;
	
КонецФункции

Функция ВыгружаемыеТипыЭлементовВерсииЭД() Экспорт
	
	Данные = Новый Массив;
	Данные.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД);
	Данные.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	Данные.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	Данные.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	Данные.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	Данные.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	Данные.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	
	Данные.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-09-08 (#4281)
	Данные.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-09-08 (#4281)
	
	Возврат Данные;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Отображение исходящего ЭД

Функция ЕстьАрхивИсходящегоДокумента(Документ, СсылкаНаАрхив = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Данные.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК Данные
	|ГДЕ
	|	Данные.ВладелецФайла = &ВладелецФайла
	|	И Данные.ок_Архив";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СсылкаНаАрхив = Выборка.Ссылка;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТабличныйДокументФайлаЭД(ФайлЭД, УникальныйИдентификатор = Неопределено) Экспорт

	//прототип ОбменСКонтрагентамиСлужебный.СоздатьРеквизитыИЭлементыДляПечатныхФорм(Форма, ДеревоЗначений)
	
	//СтруктураПодписей = Новый Структура;
	//Если СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
	//	Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
	//	Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
	//	Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
	//	Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
	//	Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
	//	
	//	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Ссылка,"ВладелецФайла");
	//	
	//	Если ЭтоТитулФНС(ВладелецФайла) Тогда
	//		ЭлектронныеПодписиЭД = ЭлектронныеПодписиДвухТитулов(СтрокаТаблицы.Ссылка);
	//	Иначе
	//		ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(СтрокаТаблицы.Ссылка);
	//	КонецЕсли;
	//Иначе
	//	ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(СтрокаТаблицы.Ссылка);
	//КонецЕсли;
	
	//СтруктураПодписей.Вставить("Подписи", ЭлектронныеПодписиЭД);
	
	Если Не ЗначениеЗаполнено(ФайлЭД) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПодписей = Новый Структура;
	СтруктураПодписей.Вставить("Подписи", ЭлектроннаяПодпись.УстановленныеПодписи(ФайлЭД));
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("СтруктураПодписей", СтруктураПодписей);
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыПросмотра.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	КонецЕсли;	
	
	ДанныеЭД = ОбменСКонтрагентамиВнутренний.ФайлДанныхЭД(ФайлЭД, ПараметрыПросмотра);
	
	Если ДанныеЭД <> Неопределено И ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
		
		ИменаОбластей = "ОбластьДД,ОбластьДДСЭП,ОбластьДДБезЭП,ОбластьДДСЭП_УС,ОбластьДДСЭП_У,ОбластьДДСЭП_С";
		ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ДанныеЭД, ИменаОбластей);
		ИменаОбластей = "ДопДанныеШапки_Шапка";
		ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ДанныеЭД, ИменаОбластей, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Возврат ДанныеЭД;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции		



//для тестирования, обход защиты БИТ 
//в глобальном подписчике бит_ОбработкаПолученияФормы поменять процедуру на эту
Процедура ПодпискаОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-24 (#3336)
//временные функции, аналоги типовых из более свежего релиза, для решения проблемы разбора xml-файлов
//после обновления можно убирать
Функция ЗначениеСвойстваXDTO(ОбъектXDTO, ИмяСвойства, Тип = Неопределено, ЭтоСписок = Ложь, НеопределеноПоУмолчанию = Ложь) Экспорт
	
	Значение = ЗначениеСвойстваXDTOСлужебный(ОбъектXDTO, ИмяСвойства);
	
	Если Тип <> Неопределено Тогда
		
		Если Значение <> Неопределено Тогда
			Если Тип = "Число" Тогда
				Значение = Число(Значение);
			ИначеЕсли Тип = "Дата" Тогда
				Значение = ДатаИзСтроки(Значение);
			ИначеЕсли Тип = "Время" Тогда
				Значение = ВремяИзСтроки(Значение);
			ИначеЕсли Тип = "XMLДата" Тогда
				Значение = XMLЗначение(Тип("Дата"),Значение);
			ИначеЕсли Тип = "Булево" Тогда
				Значение = Булево(Значение);
			КонецЕсли;
			
		ИначеЕсли НеопределеноПоУмолчанию Тогда
			
		ИначеЕсли Тип = "Число" Тогда
			Значение = 0;
		ИначеЕсли Тип = "Дата" Тогда
			Значение = '00010101';
		ИначеЕсли Тип = "XMLДата" Тогда
			Значение = '00010101';
		ИначеЕсли Тип = "Булево" Тогда
			Значение = Ложь;
		ИначеЕсли Тип = "Строка" Тогда
			Значение = "";
		КонецЕсли;
		
	ИначеЕсли ЭтоСписок И ТипЗнч(Значение) <> Тип("СписокXDTO") И Значение <> Неопределено Тогда
		
		// При чтении xml файла фабрикой XDTO без указания типа, если в СпискеXDTO только 1 строка,
		// то список конвертируется в ОбъектXDTO. Вернем его в массиве, чтобы
		// всегда обходить в цикле, вне зависимости от количества строк.
		
		Коллекция = Новый Массив;
		Коллекция.Добавить(Значение);
		
		Значение = Коллекция;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеСвойстваXDTOСлужебный(ОбъектXDTO, Путь) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Путь, ".");
	
	Если ОбъектXDTO.Свойства().Получить(МассивСтрок[0]) = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 1 Тогда
		Значение = ОбъектXDTO[МассивСтрок[0]];
		Если ТипЗнч(Значение) = Тип("ОбъектXDTO") И Значение.Свойства().Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Значение;
	Иначе
		НаборСвойств = ОбъектXDTO.Свойства();
		Свойство = НаборСвойств.Получить(МассивСтрок[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Свойство.ВерхняяГраница = 1 Тогда
			ПодОбъектXDTO = ОбъектXDTO.ПолучитьXDTO(Свойство);
		Иначе
			Список = ОбъектXDTO.ПолучитьСписок(Свойство);
			Если Список.Количество() = 0 Тогда
				Возврат Неопределено;
			Иначе
				ПодОбъектXDTO = Список[0];
			КонецЕсли;
		КонецЕсли;
		МассивСтрок.Удалить(0);
		НоваяСтрока = "";
		Для Каждого Элемент Из МассивСтрок Цикл
			НоваяСтрока = НоваяСтрока + ?(ПустаяСтрока(НоваяСтрока), "", ".") + Элемент;
		КонецЦикла;
		Возврат ЗначениеСвойстваXDTO(ПодОбъектXDTO, НоваяСтрока);
	КонецЕсли;
	
КонецФункции

Функция ДатаИзСтроки(Строка) Экспорт
	
	ЧастьДаты    = "";
	ЧастьВремени = "000000";
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(Строка, 3, 1)) Тогда
		ЧастьДаты = Сред(Строка, 7, 4) + Сред(Строка, 4, 2) + Сред(Строка, 1, 2);
		// заполним дополнительно время для формата "dd.MM.yyyy HH.mm.ss".
		Если СтрДлина(Строка) = 19 Тогда
			ЧастьВремени = СтрЗаменить(Сред(Строка, 12), ".", "");
		КонецЕсли;
	Иначе
		ЧастьДаты = Сред(Строка, 1, 4) + Сред(Строка, 6, 2) + Сред(Строка, 9, 2);
		// заполним дополнительно время для формата 20 символов.
		Если СтрДлина(Строка) = 20 Тогда
			ЧастьВремени = СтрЗаменить(Сред(Строка, 12), ":", "");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Дата(ЧастьДаты + ЧастьВремени);
	
КонецФункции

Функция ВремяИзСтроки(Знач ВремяСтрокой, Знач Разделитель = ".")
	
	ЧастьДаты = "00010101";
	ЧастьВремени = СтрЗаменить(СокрЛП(ВремяСтрокой), Разделитель, "");
	
	Возврат Дата(ЧастьДаты + ЧастьВремени);
	
КонецФункции
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-24 (#3336)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-06-19 (#3381)

Функция ЭтоДополнительныйСервисЭДО(ПрофильНастроекЭДО, СпособОбменаЭД = Неопределено) Экспорт
	
	СпособОбменаЭД = Перечисления.ок_СпособыОбменаЭД.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(ПрофильНастроекЭДО) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "ок_СпособОбменаЭД");
	СпособОбменаЭД = РегистрыСведений.УчетныеЗаписиЭДО.ЗначениеРеквизитаРегистра(ПрофильНастроекЭДО, "ок_СпособОбменаЭД");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	Возврат ЗначениеЗаполнено(СпособОбменаЭД);
	
КонецФункции

Функция ЭтоДокументДополнительногоСервисаЭДО(Ссылка, ЭлектронныйДокумент = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ТипЗначения = ТипЗнч(Ссылка);
	Если ТипЗначения = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") 
		ИЛИ ТипЗначения = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
		ЭлектронныйДокумент = Ссылка;
			
	Иначе
		
		ЭлектронныйДокумент = АктуальныйЭлектронныйДокументВладельца(Ссылка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		//Возврат ЭтоДополнительныйСервисЭДО(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ПрофильНастроекЭДО"));
		Возврат ЭтоДополнительныйСервисЭДО(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ИдентификаторОрганизации"));
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
		
	КонецЕсли;	
		
	Возврат Ложь;
	
КонецФункции

Функция СостояниеВерсииЭД(СсылкаНаВладельца) Экспорт
	
	ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	
	ТипЗначения = ТипЗнч(СсылкаНаВладельца);
	Если ТипЗначения = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипЗначения = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
		ЭлектронныйДокумент = СсылкаНаВладельца;
		
	Иначе
		
		ЭлектронныйДокумент = АктуальныйЭлектронныйДокументВладельца(СсылкаНаВладельца);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаВладельца, "ок_Статус");
		
		Если ЗначениеЗаполнено(Статус) Тогда
			ВозвращаемоеЗначение = "Статус ЭДО: " + Строка(Статус);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция АктуальныйЭлектронныйДокументВладельца(СсылкаНаВладельца) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлектронныйДокумент.Ссылка.Дата КАК Дата,
		|	ЭлектронныйДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокумент
		|ГДЕ
		|	ЭлектронныйДокумент.ДокументОснование = &СсылкаНаВладельца
		|	И НЕ ЭлектронныйДокумент.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектронныйДокумент.Ссылка.Дата,
		|	ЭлектронныйДокумент.Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокумент
		|ГДЕ
		|	ЭлектронныйДокумент.ДокументОснование = &СсылкаНаВладельца
		|	И НЕ ЭлектронныйДокумент.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Ссылка;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-19 (#3381)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-06-17 (#3377)
Функция НастройкиДоставкиОповещений_ПолучитьЗначениеНастройки(НастройкаДоставки, ИмяНастройки) Экспорт
	Перем ЗначениеНастройки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиДоставки.ЗначениеНастройки КАК ЗначениеНастройки
	|ИЗ
	|	Справочник.бит_фн_НастройкиДоставкиОповещений.НастройкиДоставки КАК НастройкиДоставки
	|ГДЕ
	|	НастройкиДоставки.Ссылка = &НастройкаДоставки
	|	И НастройкиДоставки.ИмяНастройки = &ИмяНастройки"
	;
	Запрос.УстановитьПараметр("НастройкаДоставки", НастройкаДоставки);
	Запрос.УстановитьПараметр("ИмяНастройки", ИмяНастройки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеНастройки;
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-17 (#3377)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-10 (#3391)
Функция РегистронезависимоеУсловиеДляЗапроса(Строка) Экспорт
	
	Результат = "";
	Для й = 1 по СтрДлина(Строка) Цикл
		
		Символ = Сред(Строка, й, 1);
		
		Если ВРег(Символ) <> Символ Тогда
			Символ = Символ + ВРег(Символ);
		ИначеЕсли НРег(Символ) <> Символ Тогда
			Символ = Символ + НРег(Символ);
		КонецЕсли;	
		
		Результат = Результат + "[" + Символ + "]";
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-10 (#3391)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-10 (#3392)
Функция ПолучитьДействующиеНастройкиОбменаЭДПоДокументу(Документ) Экспорт
	
	ДанныеПоиска = Новый Структура("Организация, Контрагент, Дата, Направление");
	ТипЗначения = ТипЗнч(Документ);
	
	Если ТипЗначения = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ЗаполнитьЗначенияСвойств(ДанныеПоиска, Документ);
		ДанныеПоиска.Вставить("Направление", "Исходящий");
	Иначе	
		Возврат Неопределено;
	КонецЕсли;	
		
	Если Не ЗначениеЗаполнено(ДанныеПоиска.Организация) Или Не ЗначениеЗаполнено(ДанныеПоиска.Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Данные.Ссылка КАК НастройкаЭДО
	//|ИЗ
	//|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК Данные
	//|ГДЕ
	//|	Данные.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	//|	И НЕ Данные.Ссылка.ПометкаУдаления
	//|	И ВЫБОР
	//|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	//|				ТОГДА ИСТИНА
	//|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрикладнойЭД)
	//|				ТОГДА Данные.ПрикладнойВидЭД = &ПрикладнойВидЭД
	//|			ИНАЧЕ Данные.ИсходящийДокумент = &ВидЭД
	//|		КОНЕЦ
	//|	И Данные.Ссылка.Организация = &Организация
	//|	И Данные.Ссылка.Контрагент = &Контрагент";
 	"ВЫБРАТЬ
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК Отправитель,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК Получатель
	 |ИЗ
	 |	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	 |		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
	 |			И НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
	 |ГДЕ
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Организация
	 |	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Контрагент
	 |	И ВЫБОР
	 |			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	 |				ТОГДА ИСТИНА
	 |			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрикладнойЭД)
	 |				ТОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.ПрикладнойВидЭД = &ПрикладнойВидЭД
	 |			ИНАЧЕ НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидЭД
	 |		КОНЕЦ 
	 |	И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	Запрос.УстановитьПараметр("Контрагент", ДанныеПоиска.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДанныеПоиска.Организация);
	Запрос.УстановитьПараметр("ВидЭД", Неопределено);
	Запрос.УстановитьПараметр("ПрикладнойВидЭД", Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		//Если ПроверитьДействиеНастройкиЭДО(Выборка.НастройкаЭДО, ДанныеПоиска) Тогда 
		//	Возврат Выборка.НастройкаЭДО;
		//КонецЕсли;	
		НастройкаЭДО = Новый Структура("Отправитель, Получатель");
		ЗаполнитьЗначенияСвойств(НастройкаЭДО, Выборка);
		Если ПроверитьДействиеНастройкиЭДО(НастройкаЭДО, ДанныеПоиска) Тогда 
			Возврат НастройкаЭДО;
		КонецЕсли;	
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )

	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-10 (#3392)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-10 (#3395)
Процедура ОтразитьСостояниеКонтрагентаБЭД(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Контрагент = Источник.Контрагент;
	
	Набор = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьНаборЗаписей();
	Набор.Отбор.Контрагент.Установить(Контрагент);
	Набор.Прочитать();
	
	ЕстьСоглашение = Ложь;	
	ДополнительныеДанные = ПолучитьДополнительныеДанныеДляСостоянияКонтрагентаБЭД(Контрагент, ЕстьСоглашение);
	
	Если Не ЕстьСоглашение И Набор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Если Набор.Количество() > 0 Тогда //ничего не изменилось
		Если Набор[0].ок_ОбрабатыватьОграничение = ДополнительныеДанные.ок_ОбрабатыватьОграничение
			И Набор[0].ок_ОграничениеПотока = ДополнительныеДанные.ок_ОграничениеПотока Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("Контрагент", Контрагент);
	ДанныеЗаписи.Вставить("Состояние", Перечисления.СостоянияКонтрагентаБЭД.НеПодключен);
	ДанныеЗаписи.Вставить("ИНН", "");
	ДанныеЗаписи.Вставить("КПП", "");
	
	Если Набор.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи, Набор[0]);
		Набор.Очистить();
	Иначе
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи, ДополнительныеДанные); //инн, кпп
	КонецЕсли;	
	
	Запись = Набор.Добавить();
	
	ЗаполнитьЗначенияСвойств(Запись, ДополнительныеДанные);
	
	ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
	
	Набор.Записать();
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Данные.ок_ОграничениеПотока <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	//|					И Данные.ок_ОграничениеПотока <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ) КАК Полный,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Данные.ок_ОграничениеПотока = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ) КАК Исходящий,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Данные.ок_ОграничениеПотока = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ) КАК Входящий,
	//|	МАКСИМУМ(Данные.Контрагент.ИНН) КАК ИНН,
	//|	МАКСИМУМ(Данные.Контрагент.КПП) КАК КПП
	//|ИЗ
	//|	Справочник.СоглашенияОбИспользованииЭД КАК Данные
	//|ГДЕ
	//|	Данные.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	//|	И НЕ Данные.ПометкаУдаления
	//|	И Данные.Контрагент = &Контрагент
	//|	И Данные.ПрофильНастроекЭДО.ок_СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)";
	//
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//
	//Данные = Новый Структура("Контрагент, Состояние, ИНН, КПП, ок_ОбрабатыватьОграничение, ок_ОграничениеПотока", 
	//                                            Контрагент,
	//											Перечисления.СостоянияКонтрагентаБЭД.НеПодключен, 
	//											"", 
	//											"",
	//											Ложь,
	//											Перечисления.НаправленияЭД.ПустаяСсылка());
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Если Набор.Количество() > 0 Тогда
	//		Записывать = Истина;
	//	КонецЕсли;
	//Иначе	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		
	//		Данные.ок_ОбрабатыватьОграничение = Истина;
	//		
	//		Если Выборка.Полный Тогда
	//			Данные.ок_ОграничениеПотока = Перечисления.НаправленияЭД.ПустаяСсылка();
	//		ИначеЕсли Выборка.Исходящий И Выборка.Входящий Тогда	
	//			Данные.ок_ОграничениеПотока = Перечисления.НаправленияЭД.ПустаяСсылка();
	//		ИначеЕсли Выборка.Исходящий Тогда	
	//			Данные.ок_ОграничениеПотока = Перечисления.НаправленияЭД.Исходящий;
	//		ИначеЕсли Выборка.Входящий Тогда	
	//			Данные.ок_ОграничениеПотока = Перечисления.НаправленияЭД.Входящий;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
		
	//	Если Набор.Количество() > 0 Тогда
	//		ЗаполнитьЗначенияСвойств(Данные, Набор[0], , "ок_ОбрабатыватьОграничение, ок_ОграничениеПотока");
	//		Набор.Очистить();
	//	Иначе
	//		ЗаполнитьЗначенияСвойств(Данные, Выборка);
	//	КонецЕсли;	
	//			
	//		Запись = Набор.Добавить();
	//		ЗаполнитьЗначенияСвойств(Запись, Данные);
	//		
	//		Запись.ок_ОграничениеПотока = Ограничение;
	//		
	//		Записывать = Истина;

	//	
	//КонецЕсли;
	//
	//Если Записывать Тогда
	//	Набор.Записать();
	//КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьДополнительныеДанныеДляСостоянияКонтрагентаБЭД(Контрагент, ЕстьСоглашение = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьСоглашение = Ложь;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//"ВЫБРАТЬ
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Данные.ок_ОграничениеПотока <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	//|					И Данные.ок_ОграничениеПотока <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ) КАК Полный,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Данные.ок_ОграничениеПотока = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ) КАК Исходящий,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Данные.ок_ОграничениеПотока = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ) КАК Входящий,
	//|	МАКСИМУМ(Данные.Контрагент.ИНН) КАК ИНН,
	//|	МАКСИМУМ(Данные.Контрагент.КПП) КАК КПП
	//|ИЗ
	//|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК Данные
	//|ГДЕ
	//|	Данные.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)
	//|	И НЕ Данные.ПометкаУдаления
	//|	И Данные.Контрагент = &Контрагент
	//|	И Данные.ПрофильНастроекЭДО.ок_СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)"; 
	//
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//
	//Данные = Новый Структура("ок_ОбрабатыватьОграничение, ок_ОграничениеПотока, ИНН, КПП", Ложь, Перечисления.НаправленияЭД.ПустаяСсылка(), "", "");
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	Если Выборка.Полный = NULL Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Данные.ок_ОбрабатыватьОграничение = Истина;
	//	
	//	Если Выборка.Полный Тогда
	//		Данные.ок_ОграничениеПотока = Перечисления.НаправленияЭД.ПустаяСсылка();
	//	ИначеЕсли Выборка.Исходящий И Выборка.Входящий Тогда	
	//		Данные.ок_ОграничениеПотока = Перечисления.НаправленияЭД.ПустаяСсылка();
	//	ИначеЕсли Выборка.Исходящий Тогда	
	//		Данные.ок_ОграничениеПотока = Перечисления.НаправленияЭД.Исходящий;
	//	ИначеЕсли Выборка.Входящий Тогда	
	//		Данные.ок_ОграничениеПотока = Перечисления.НаправленияЭД.Входящий;
	//	КонецЕсли;
	//	
	//	ЕстьСоглашение = Истина;	
	//	
	//КонецЦикла;
	"ВЫБРАТЬ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель.ИНН КАК ИНН,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель.КПП КАК КПП
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = СостоянияКонтрагентовБЭД.Контрагент
	|			И СостоянияКонтрагентовБЭД.Состояние = Значение(Перечисление.СостоянияКонтрагентаБЭД.Подключен)
	|ГДЕ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Получатель"; 
	
	Запрос.УстановитьПараметр("Получатель", Контрагент);
	
	Данные = Новый Структура("ок_ОбрабатыватьОграничение, ок_ОграничениеПотока, ИНН, КПП", Ложь, Перечисления.НаправленияЭД.ПустаяСсылка(), "", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Данные.ок_ОбрабатыватьОграничение = Истина;
		Данные.ок_ОграничениеПотока = Перечисления.НаправленияЭД.ПустаяСсылка();
		
		ЕстьСоглашение = Истина;	
		
	КонецЕсли;	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	Возврат Данные;
	
КонецФункции

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-10 (#3395)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-25 (#3356)
Функция ПользовательЯвляетсяАдминистратором(Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Данные.Пользователь КАК Пользователь
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК Данные
		|ГДЕ
		|	Данные.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
		|	И Данные.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой(); 

КонецФункции	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-25 (#3356)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)

Процедура ЗаполнитьТаблицуЗагружаемыхДокументовЭД(Форма, ТекущийОбъект) Экспорт
	
	ТекущийОбъект.ок_ЗагружаемыеДокументы.Очистить();	
	Для каждого Строка из Форма.ок_ЗагружаемыеДокументы Цикл
		
		Если Не Строка.Формировать Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТекущийОбъект.ок_ЗагружаемыеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;	
			
КонецПроцедуры	

Процедура СоздатьВТАктуальныеПрисоединенныеФайлыВходящегоЭД(Документ, МенеджерВТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	//для совместимости со старыми данными в базе
	//когда УПД только передаточный документ в предыдущем варианте реализации устанавливается пустая ссылка при записи присоединенного файла, 
	//мы подставим накладную для наших целей, то как сейчас работает
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР
			|		КОГДА Данные.ок_ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ок_ТипыДокументовЭД.ПустаяСсылка)
			|				И Данные.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ок_ТипыДокументовЭД.Накладная)
			|		ИНАЧЕ Данные.ок_ТипДокумента
			|	КОНЕЦ КАК ТипДокумента,
			|	Данные.Ссылка КАК ПрисоединенныйФайл
			|ПОМЕСТИТЬ ВТАктуальныеФайлы
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокумент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК Данные
			|		ПО (ЭлектронныйДокумент.Ссылка = &ВладелецФайла)
			|			И ЭлектронныйДокумент.Ссылка = Данные.ВладелецФайла
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ЭлектронныйДокумент.ок_ДатаРедакцииОтправленной = ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА НЕ Данные.ок_Неактуальный
			|			ИНАЧЕ Данные.ДатаФормированияЭДОтправителем = ЭлектронныйДокумент.ок_ДатаРедакцииОтправленной
			|		КОНЕЦ
			|	И НЕ Данные.ПометкаУдаления";
		
			
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);

	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТипыПрисоединенныхФайловВходящегоДокументаЭД(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	СоздатьВТАктуальныеПрисоединенныеФайлыВходящегоЭД(Документ, МенеджерВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТАктуальныеФайлы.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	ВТАктуальныеФайлы КАК ВТАктуальныеФайлы
		|ГДЕ
		|	ВТАктуальныеФайлы.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ок_ТипыДокументовЭД.ПустаяСсылка)";

	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипДокумента");
	
КонецФункции	

Функция НаличиеУчетныхДокументовПоДаннымПрисоединенныхФайловВходящегоДокументаЭД(Документ, ДобавлятьКорректировку = Ложь) Экспорт
	
	Результат = Новый Структура("Поступление, СчетФактура", Ложь, Ложь);
	
	ТипыФайлов = ТипыПрисоединенныхФайловВходящегоДокументаЭД(Документ);	
	
	Если ТипыФайлов.Найти(Перечисления.ок_ТипыДокументовЭД.СчетФактура) <> Неопределено
		ИЛИ ТипыФайлов.Найти(Перечисления.ок_ТипыДокументовЭД.УКД) <> Неопределено 
		ИЛИ ТипыФайлов.Найти(Перечисления.ок_ТипыДокументовЭД.УПД) <> Неопределено Тогда
		Результат.СчетФактура = Истина;
	КонецЕсли;	
	
	Если ТипыФайлов.Найти(Перечисления.ок_ТипыДокументовЭД.Акт) <> Неопределено
		ИЛИ ТипыФайлов.Найти(Перечисления.ок_ТипыДокументовЭД.Накладная) <> Неопределено
		ИЛИ ТипыФайлов.Найти(Перечисления.ок_ТипыДокументовЭД.КорректировкаПоступления) <> Неопределено
		ИЛИ ТипыФайлов.Найти(Перечисления.ок_ТипыДокументовЭД.УКД) <> Неопределено 
		ИЛИ ТипыФайлов.Найти(Перечисления.ок_ТипыДокументовЭД.УПД) <> Неопределено Тогда
		Результат.Поступление = Истина;
	КонецЕсли;	
	
	Если ДобавлятьКорректировку Тогда
		Если ТипыФайлов.Найти(Перечисления.ок_ТипыДокументовЭД.КорректировкаПоступления) <> Неопределено
			ИЛИ ТипыФайлов.Найти(Перечисления.ок_ТипыДокументовЭД.УКД) <> Неопределено Тогда
			Результат.Вставить("Корректировка", Истина);
		КонецЕсли;	
	КонецЕсли;	

	Возврат Результат;
				
КонецФункции	

Функция ЗагружаемыеПрисоединенныеФайлыВходящегоДокументаЭДПоТипам(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	СоздатьВТАктуальныеПрисоединенныеФайлыВходящегоЭД(Документ, МенеджерВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВТАктуальныеФайлы.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ок_ТипыДокументовЭД.КорректировкаПоступления)
		|			ТОГДА 1
		|		КОГДА ВТАктуальныеФайлы.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ок_ТипыДокументовЭД.УПД)
		|			ТОГДА 2
		|		КОГДА ВТАктуальныеФайлы.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ок_ТипыДокументовЭД.УКД)
		|			ТОГДА 2
		|		КОГДА ВТАктуальныеФайлы.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ок_ТипыДокументовЭД.СчетФактура)
		|			ТОГДА 3
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	ВТАктуальныеФайлы.ТипДокумента КАК ТипДокумента,
		|	МАКСИМУМ(ВТАктуальныеФайлы.ПрисоединенныйФайл) КАК ПрисоединенныйФайл
		|ИЗ
		|	ВТАктуальныеФайлы КАК ВТАктуальныеФайлы
		|ГДЕ
		|	ВТАктуальныеФайлы.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ок_ТипыДокументовЭД.ПустаяСсылка)
		|	И ВТАктуальныеФайлы.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ок_ТипыДокументовЭД.Неформализованный)
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-11 (#3783)
		|	И (ВТАктуальныеФайлы.ПрисоединенныйФайл.Расширение ПОДОБНО ""%zip%""
		|		ИЛИ ВТАктуальныеФайлы.ПрисоединенныйФайл.Расширение ПОДОБНО ""%xml%"")
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-11 (#3783)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТАктуальныеФайлы.ТипДокумента,
		|	ВЫБОР
		|		КОГДА ВТАктуальныеФайлы.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ок_ТипыДокументовЭД.УПД)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ТипДокумента, Выборка.ПрисоединенныйФайл);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция ЗагружаемыеВидыВходящегоДокументаЭД(Документ)
	
	Результат = Новый Структура("Поступление, СчетФактура");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Данные.ВидЗагружаемогоДокумента КАК ВидЗагружаемогоДокумента
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ок_ЗагружаемыеДокументы КАК Данные
		|ГДЕ
		|	Данные.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ок_ОбменСКонтрагентамиКлиентСервер.ВидЗагружаемогоДокументаЯвляетсяПоступлением(Выборка.ВидЗагружаемогоДокумента) Тогда
			Результат.Поступление = Выборка.ВидЗагружаемогоДокумента;
		ИначеЕсли ок_ОбменСКонтрагентамиКлиентСервер.ВидЗагружаемогоДокументаЯвляетсяСчетомФактурой(Выборка.ВидЗагружаемогоДокумента) Тогда
			Результат.СчетФактура = Выборка.ВидЗагружаемогоДокумента;
		КонецЕсли;	

	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ТипДокументаПоступленияПоВидуЗагружаемогоДокументаЭД(Вид) Экспорт 
	
	ТипДокумента = Неопределено;
	
	Если Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеУслуги") 
		Или Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеОборудование")
		Или Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеТовары")
		Или Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеТоварыУслугиКомиссия")
		Или Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеОбъектыСтроительства") Тогда
		
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
		
	ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеДопрасходы") Тогда
		
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов");
		
	ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеНМА") Тогда
		
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеНМА");
		
	КонецЕсли;	
	
	Возврат ТипДокумента;
	
КонецФункции

Функция ВидОперацииПоступленияПоВидуЗагружаемогоДокументаЭД(Вид) Экспорт 
	
	Если Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеУслуги") Тогда
		
		Возврат Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		
	ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеОборудование") Тогда
		
		Возврат Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
		
	ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеТовары") Тогда
		
		Возврат Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		
	ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеТоварыУслугиКомиссия") Тогда
		
		Возврат Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		
	ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеОбъектыСтроительства") Тогда
		
		Возврат Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

Процедура СоздатьДокументыУчетаЭлектронногоДокумента2019(ЭлектронныйДокумент, СпособОбработки = "Автоматически") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументыУчета = Новый Массив;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	ЭтоБумажныйДокумент = ЭтоБумажныйДокумент(ЭлектронныйДокумент);
	Если ЭтоБумажныйДокумент Тогда
		
		ДанныеФайлов = Новый Соответствие;
		ДанныеФайлов.Вставить(ЭлектронныйДокумент, ЭлектронныйДокумент);
		
	Иначе	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
		ДанныеФайлов = ЗагружаемыеПрисоединенныеФайлыВходящегоДокументаЭДПоТипам(ЭлектронныйДокумент);
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	Для каждого Элемент Из ДанныеФайлов Цикл
	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		Если ЭтоБумажныйДокумент Тогда
			ДанныеЭД = ЭлектронныйДокумент;
		Иначе	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		
		ДанныеЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеЭД(Элемент.Значение);
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		
		Если Не ЗначениеЗаполнено(ДанныеЭД) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
		СтруктураПараметров.Вставить("ФайлДанныхСсылка", ДанныеЭД);
		
		ИменаРеквизитовДокумента = "ок_СоздаватьУчетныйДокументКопированием,ок_ДокументКопирования,ок_ДокументОснование,ок_ВидОперацииКорректировкаПоступления,ок_ДокументОснованиеСчетФактура, ок_НомерЗаявки";
		ДополнительныеПараметры = Новый Структура(ИменаРеквизитовДокумента);
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, ИменаРеквизитовДокумента));
		ДополнительныеПараметры.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
		ДополнительныеПараметры.Вставить("ТипДокумента", Элемент.Ключ);
		ДополнительныеПараметры.Вставить("ЗагружаемыеВиды", ЗагружаемыеВидыВходящегоДокументаЭД(ЭлектронныйДокумент));
		ДополнительныеПараметры.Вставить("СпособОбработки", СпособОбработки);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		ДополнительныеПараметры.Вставить("ЭтоБумажныйДокумент", ЭтоБумажныйДокумент);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		
		ДополнительныеПараметры.Вставить("ПредыдущиеДокументыУчета", ДокументыУчета);
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-21 (#3816) - определение первичного документа возмем как в типовом функционале
		ДополнительныеПараметры.Вставить("ПервичныйДокумент", "");
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВидЭД");
		СписокОпераций = ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(ВидЭД, Истина);
		Для Каждого ЭлементСписка Из СписокОпераций Цикл
			Если ЭлементСписка.Пометка Тогда
				ДополнительныеПараметры.ПервичныйДокумент = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-21 (#3816)
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		Если ЭтоБумажныйДокумент Тогда
			НовыеДокументыУчета = СохранитьДанныеБумажногоОбъекта(СтруктураПараметров, ДополнительныеПараметры);
			
			Если СпособОбработки = "Вручную" И ТипЗнч(НовыеДокументыУчета) = Тип("Массив") И НовыеДокументыУчета.Количество() > 0 Тогда
				ТекстСообщения = "";
				Для каждого НовыйДокумент Из НовыеДокументыУчета Цикл
					Если Не ЗначениеЗаполнено(НовыйДокумент) Тогда
						Продолжить;
					КонецЕсли;	
					ТекстСообщения = ТекстСообщения + СокрЛП(НовыйДокумент) + " ";
				КонецЦикла;	
				Если Не ПустаяСтрока(ТекстСообщения) Тогда
					ТекстСообщения = "Созданы документы учета: " + ТекстСообщения;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;	
			КонецЕсли;	

		Иначе	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		
			НовыеДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, ДополнительныеПараметры);
			
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		
		Если ТипЗнч(НовыеДокументыУчета) = Тип("Массив") Тогда
			
			Для каждого НовыйДокументУчета из НовыеДокументыУчета Цикл
				
				Если не ЗначениеЗаполнено(НовыйДокументУчета) Тогда
					Продолжить;
				КонецЕсли;	
				
				Если ДокументыУчета.Найти(НовыйДокументУчета) = Неопределено Тогда
					ДокументыУчета.Добавить(НовыйДокументУчета);
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ЗарегистрироватьСвязьДокументовУчетаСДокументомЭД(ДокументыУчета, ЭлектронныйДокумент, СпособОбработки);
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-12 (#4376)
	Если ДокументыУчета.Количество() = 0
		И ЭлектронныйДокумент.ок_СоздаватьУчетныйДокументКопированием Тогда
		
		ДокументПоступление = СоздатьПоступлениеКопированием(ЭлектронныйДокумент);
		Если ДокументПоступление = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Объект = ЭлектронныйДокумент.ПолучитьОбъект();
		НоваяСтрока = Объект.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = ДокументПоступление;
		НоваяСтрока.СпособОбработки = СпособОбработки;
		
		ОбменСКонтрагентамиСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(ДокументПоступление, Объект.Ссылка);
		Объект.Записать(?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	КонецЕсли;	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-12 (#4376)
КонецПроцедуры

Процедура ЗарегистрироватьСвязьДокументовУчетаСДокументомЭД(ДокументыУчета, ЭлектронныйДокумент, СпособОбработки)
	
	Если ДокументыУчета.Количество() > 0 Тогда
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		Для каждого Основание Из ДокументыУчета Цикл
			
			Если Не ДокументОбъект.ДокументыОснования.Найти(Основание, "ДокументОснование") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Основание;
			НоваяСтрока.СпособОбработки = СпособОбработки;
			
			ОбменСКонтрагентамиСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(Основание, ЭлектронныйДокумент);
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры
	

Процедура ДополнитьДанныеОбъектаДляСозданияУчетногоДокумента(УчетныйДокумент, ДанныеОбъекта, ДополнительныеПараметры, ИмяПроцедуры, ДляСчетаФактуры = Ложь) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат;
	ИначеЕсли Не ДополнительныеПараметры.Свойство("ок_СоздаватьУчетныйДокументКопированием") Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеОбъекта.Вставить("ок_ДополнительныеПараметры", ДополнительныеПараметры);
	ДанныеОбъекта.Вставить("ок_ИмяПроцедуры", ИмяПроцедуры);
	
	Если ИмяПроцедуры = "НайтиСоздатьДокументПередачаТоваров" Тогда //из DP_TOVTORGPR
		
		ОбработатьПризнакИсправление(ДанныеОбъекта);		
		
	ИначеЕсли ИмяПроцедуры = "НайтиСоздатьДокументПередачаРезультатовРабот" Тогда //из DP_REZRUISP
		
		ОбработатьПризнакИсправление(ДанныеОбъекта);		
		
	ИначеЕсли ИмяПроцедуры = "НайтиСоздатьУниверсальныйПередаточныйДокумент" Тогда //из ON_SCHFDOPR СЧФДОП 5.01
		
		Если ДляСчетаФактуры Тогда
			//УстановитьОснованиеСчетаФактуры(ДанныеОбъекта);
		Иначе	
			ОбработатьПризнакИсправление(ДанныеОбъекта);		
		КонецЕсли;	
		
	ИначеЕсли ИмяПроцедуры = "НайтиСоздатьУниверсальныйПередаточныйДокумент_2019" Тогда //из ON_SCHFDOPR СЧФДОП 2019
		
		Если ДляСчетаФактуры Тогда
			//УстановитьОснованиеСчетаФактуры(ДанныеОбъекта);
		Иначе	
			ОбработатьПризнакИсправление(ДанныеОбъекта);		
		КонецЕсли;	
		
	ИначеЕсли ИмяПроцедуры = "НайтиСоздатьУПДСчетФактуру" Тогда //из ON_SCHFDOPR СЧФ 5.01
		
	ИначеЕсли ИмяПроцедуры = "НайтиСоздатьУПДСчетФактуру_2019" Тогда //из ON_SCHFDOPR СЧФ 2019
		
	ИначеЕсли ИмяПроцедуры = "НайтиСоздатьУПДДокументОПередаче" Тогда //из ON_SCHFDOPR ДОП 5.01
		
		ОбработатьПризнакИсправление(ДанныеОбъекта);		
		
	ИначеЕсли ИмяПроцедуры = "НайтиСоздатьУПДДокументОПередаче_2019" Тогда //из ON_SCHFDOPR ДОП 2019
		
		ОбработатьПризнакИсправление(ДанныеОбъекта);		
		
	ИначеЕсли ИмяПроцедуры = "НайтиСоздатьУниверсальныйКорректировочныйДокумент" Тогда  //из ON_KORSCHFDOPPR СЧФДОП
		
		ОбработатьПризнакИсправление(ДанныеОбъекта, Истина);		
		
	ИначеЕсли ИмяПроцедуры = "НайтиСоздатьУКДДокументОбИзмененииСтоимости" Тогда //из ON_KORSCHFDOPPR ДОП
		
		ОбработатьПризнакИсправление(ДанныеОбъекта, Истина);		
		
	ИначеЕсли ИмяПроцедуры = "НайтиСоздатьУКДСчетФактуру" Тогда //из ON_KORSCHFDOPPR СЧФ
		
	КонецЕсли;	

КонецПроцедуры	

Процедура УстановитьОснованиеСчетаФактуры(ДанныеОбъекта)
	
	Перем ок_ДокументОснованиеСчетФактура;
	
	//подставим основание, если оно указано
	Если ТипЗнч(ДанныеОбъекта) = Тип("Структура") 
		И ДанныеОбъекта.Свойство("ок_ДополнительныеПараметры") Тогда
		
		Если ДанныеОбъекта.ок_ДополнительныеПараметры.Свойство("ок_ДокументОснованиеСчетФактура", ок_ДокументОснованиеСчетФактура) Тогда
			Если ЗначениеЗаполнено(ок_ДокументОснованиеСчетФактура) Тогда
				
				ДокументыОснованияСчетаФактуры = Новый Массив;
				ДокументыОснованияСчетаФактуры.Добавить(ок_ДокументОснованиеСчетФактура);
					
				ДанныеОбъекта.Вставить("ДокументыОснования", ДокументыОснованияСчетаФактуры);
				
			КонецЕсли;		
		КонецЕсли;		
		
		ДополнятьПредыдущими = Ложь;
		Если Не ДанныеОбъекта.Свойство("ДокументыОснования") Тогда
			ДополнятьПредыдущими = Истина;
		ИначеЕсли ТипЗнч(ДанныеОбъекта.ДокументыОснования) = Тип("Массив") Тогда
			ЕстьОснование = Ложь;
			Для каждого Основание из ДанныеОбъекта.ДокументыОснования Цикл
				Если ЗначениеЗаполнено(Основание) Тогда
					ЕстьОснование = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			ДополнятьПредыдущими = Не ЕстьОснование;
		КонецЕсли;	
			
		Если ДополнятьПредыдущими И ДанныеОбъекта.ок_ДополнительныеПараметры.Свойство("ПредыдущиеДокументыУчета", ок_ДокументОснованиеСчетФактура) Тогда
			Для каждого Документ Из ок_ДокументОснованиеСчетФактура Цикл
				
				ТипЗначения = ТипЗнч(Документ);
				Если ТипЗначения = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
					Или ТипЗначения = Тип("ДокументСсылка.ПоступлениеДопРасходов")
					Или ТипЗначения = Тип("ДокументСсылка.КорректировкаПоступления")
					Или ТипЗначения = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
					
					ДокументыОснованияСчетаФактуры = Новый Массив;
					ДокументыОснованияСчетаФактуры.Добавить(Документ);
					
					ДанныеОбъекта.Вставить("ДокументыОснования", ДокументыОснованияСчетаФактуры);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбработатьПризнакИсправление(ДанныеОбъекта, Корректировка = Ложь)
	
	//в процедуру корректировки поступления должно уходить не только когда во входящем документе указано
	Исправление = Ложь;
	
	Если ТипЗнч(ДанныеОбъекта) = Тип("Структура") 
		И ДанныеОбъекта.Свойство("Шапка") 
		И ДанныеОбъекта.Шапка.Свойство("Исправление") Тогда
		
		Исправление = ДанныеОбъекта.Шапка.Исправление;
		
		Если Исправление Тогда
			Если ДанныеОбъекта.ок_ДополнительныеПараметры.Свойство("ЗагружаемыеВиды") Тогда
				ДанныеОбъекта.Шапка.Исправление = (ДанныеОбъекта.ок_ДополнительныеПараметры.ЗагружаемыеВиды.Поступление = Перечисления.ок_ВидЗагружаемыхДокументовЭД.КорректировкаПоступления);
			КонецЕсли;		
		КонецЕсли;		
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ок_ИсправлениеИзФайла", Корректировка ИЛИ Исправление);
	ДанныеОбъекта.Вставить("ок_ЭтоУКД", Корректировка);
	
	ДанныеОбъекта.Вставить("ок_УчетныйДокументОснование", ПолучитьЗначениеНастройкиЗагрузкиУчетногоДокумента(ДанныеОбъекта, "ок_ДокументОснование"));
	ДанныеОбъекта.Вставить("ок_ВидОперацииКорректировкаПоступления", ПолучитьЗначениеНастройкиЗагрузкиУчетногоДокумента(ДанныеОбъекта, "ок_ВидОперацииКорректировкаПоступления"));
	
КонецПроцедуры	

Функция ПолучитьДокументКопирования(ДанныеДокумента, ТипЗначения = Неопределено)
	
	Перем СоздаватьУчетныйДокументКопированием;
	Перем ДокументКопирования;
	
	Если Не ДанныеДокумента.ок_ДополнительныеПараметры.Свойство("ок_СоздаватьУчетныйДокументКопированием", СоздаватьУчетныйДокументКопированием) Тогда
		Возврат ДокументКопирования;
	КонецЕсли;
	
	Если Не СоздаватьУчетныйДокументКопированием Тогда
		Возврат ДокументКопирования;
	КонецЕсли;
		
	Если Не ДанныеДокумента.ок_ДополнительныеПараметры.Свойство("ок_ДокументКопирования", ДокументКопирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументКопирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если ТипЗначения <> Неопределено Тогда
		Если ТипЗнч(ДокументКопирования) <> ТипЗначения Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//Возврат ДокументКопирования;
	
	//нужно обойти обнуление данных ФВБ в процедуре копирования
	Результат = ДокументКопирования.ПолучитьОбъект();
	Результат.ДополнительныеСвойства.Вставить("ок_НеОчищатьДанныеФВБ", Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеНастройкиЗагрузкиУчетногоДокумента(ДанныеДокумента, Имя)
	
	Перем Значение;
	
		
	Если Не ДанныеДокумента.ок_ДополнительныеПараметры.Свойство(Имя, Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

Процедура ЗаполнитьШапкуДокументаПоДаннымВходящегоДокументаЭД(Документ, ДанныеДокумента, Копирование)
	
	Перем ЭлектронныйДокумент;
	Перем ЗагружаемыеВиды;
	
	Если Не ДанныеДокумента.ок_ДополнительныеПараметры.Свойство("ЭлектронныйДокумент", ЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
	//ИменаРеквизитов = "Организация,Контрагент,ДоговорКонтрагента,ок_НомерЗаявки";
	ИменаРеквизитов = "ок_НомерЗаявки";
	Если Не Копирование Тогда
		ИменаРеквизитов = ИменаРеквизитов + ",Организация,Контрагент,ДоговорКонтрагента";
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-01-21 (#3612)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, ИменаРеквизитов);
	
	Если ДанныеДокумента.ок_ДополнительныеПараметры.Свойство("ЗагружаемыеВиды", ЗагружаемыеВиды) Тогда
		ВидОперации = ВидОперацииПоступленияПоВидуЗагружаемогоДокументаЭД(ЗагружаемыеВиды.Поступление);
		Если ЗначениеЗаполнено(ВидОперации) Тогда
			Реквизиты.Вставить("ВидОперации", ВидОперации);
		КонецЕсли;	
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Документ, Реквизиты);
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	Если ДанныеДокумента.ок_ДополнительныеПараметры.Свойство("ЭтоБумажныйДокумент") 
		И ДанныеДокумента.ок_ДополнительныеПараметры.ЭтоБумажныйДокумент Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ок_ДатаВходящегоСчетаФактуры, ок_НомерВходящегоСчетаФактуры, ок_СтавкаНДС, ок_СуммаНДС, СуммаДокумента");
		Реквизиты = Новый Структура("ок_ДатаВходящегоСчетаФактуры, ок_НомерВходящегоСчетаФактуры, Сумма, СтавкаНДС, СуммаНДС", 
										РеквизитыДокумента.ок_ДатаВходящегоСчетаФактуры, 
										РеквизитыДокумента.ок_НомерВходящегоСчетаФактуры,
										РеквизитыДокумента.СуммаДокумента,
										РеквизитыДокумента.ок_СтавкаНДС,
										РеквизитыДокумента.ок_СуммаНДС);
		ЗаполнитьЗначенияСвойств(Документ, Реквизиты);
		
		МетаданныеДокумента = Документ.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента) 
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента)
			И ЗначениеЗаполнено(Документ.ДоговорКонтрагента) Тогда
			
			ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			Если ЗначениеЗаполнено(ВалютаДоговора) И ВалютаДоговора <> Документ.ВалютаДокумента Тогда
				
				Документ.ВалютаДокумента = ВалютаДоговора;
				
				// КурсДокумента.
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсДокумента", МетаданныеДокумента) Тогда
					СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Документ.ВалютаДокумента, Документ.Дата);
					Документ.КурсДокумента = СтруктураКурсаДокумента.Курс;

					// КратностьДокумента.
					Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьДокумента", МетаданныеДокумента) Тогда
						Документ.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
КонецПроцедуры

Процедура ОтразитьСвязьЗаявкиДокументаПоступления(Документ, Заявка, ДанныеДокумента)
	
	Перем ЭлектронныйДокумент;
	
	Если Заявка = Неопределено Тогда
		Если Не ДанныеДокумента.ок_ДополнительныеПараметры.Свойство("ЭлектронныйДокумент", ЭлектронныйДокумент) Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Возврат;
		КонецЕсли;
	
		Заявка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ок_НомерЗаявки");
	КонецЕсли;	
	
	АналитикаЗаявка = ок_ПодпискиНаСобытия.бит_ДополнительныхАналитикаНомерЗаявки();
	Набор = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Документ);
	Набор.Отбор.Аналитика.Установить(АналитикаЗаявка);
	Если ЗначениеЗаполнено(Заявка) Тогда
		Запись = Набор.Добавить();
		Запись.Объект = Документ;
		Запись.Аналитика = АналитикаЗаявка;
		Запись.ЗначениеАналитики = Заявка;
	КонецЕсли;
	Набор.Записать();

КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияТоваровУслуг2019(Документ, ДанныеДокумента)
	
	//+
	Перем ДанныеЗаявкиДляЗаполнения;
	
	ДокументКопирования = ПолучитьДокументКопирования(ДанныеДокумента, Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	Если ДокументКопирования <> Неопределено И ЗначениеЗаполнено(Документ) Тогда //перезаполнение существующего документа копированием не реализуем пока
		Возврат;
	КонецЕсли;	
	//+
	
	ДанныеШапки = ДанныеДокумента.Шапка;
	
	ПередачаТовараКомитентом = ДанныеШапки.ПередачаТовараКомитентом;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		
		//+
		Если ДокументКопирования <> Неопределено Тогда
			ДокументОбъект = ДокументКопирования.Скопировать();
		Иначе	
		//+	
		
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		
		//+	
		КонецЕсли;
		//+	
	
		//ЗагрузкаИзExcel = Ложь;
		//Если ДанныеШапки.Свойство("ЗагрузкаИзФайлаExcel", ЗагрузкаИзExcel) И Булево(ЗагрузкаИзExcel) 
		//	И ЗначениеЗаполнено(ДанныеШапки.Дата) Тогда
		//	
		//	ДокументОбъект.Дата = ДанныеШапки.Дата;
		//	
		//Иначе
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
		//КонецЕсли;
		
		//+
		Если ДокументКопирования = Неопределено Тогда
		//+
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеШапки);
		
		//+	
		//ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		//СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		//
		//СписокВидовДоговоров = Новый СписокЗначений;
		//Если ПередачаТовараКомитентом Тогда
		//	
		//	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		//	
		//ИначеЕсли ДанныеДокумента.Свойство("НДСИсчисляетсяНалоговымАгентом")
		//	И ДанныеДокумента.НДСИсчисляетсяНалоговымАгентом Тогда
		//	
		//	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		//	СтруктураПараметров.Вставить("УчетАгентскогоНДС", Новый Структура("ЗначениеОтбора", Истина));
		//	СтруктураПараметров.Вставить("ВидАгентскогоДоговора",
		//		Новый Структура("ЗначениеОтбора", Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров));
		//	
		//Иначе
		//	
		//	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		//	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
		//	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		//	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		//	
		//КонецЕсли;
		//
		//РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
		//				ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);
		//
		КонецЕсли;
		//+	
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
	КонецЕсли;
	
	//+
	//// вручную переопределим, если требуется
	//ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	//+
	
	//+
	ИменаРеквизитов = "";
	Если ДокументКопирования <> Неопределено Тогда
		ИменаРеквизитов = ",НомерВходящегоДокумента,ДатаВходящегоДокумента,";
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
		ИменаРеквизитов = ИменаРеквизитов + "Организация,Контрагент,ДоговорКонтрагента,";
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-01-21 (#3612)
		
	КонецЕсли;	
	ПерезаполнениеЗначенийРеквизитовШапки2019(ДокументОбъект, ДанныеШапки, ИменаРеквизитов);
	
	ЗаполнитьШапкуДокументаПоДаннымВходящегоДокументаЭД(ДокументОбъект, ДанныеДокумента, ДокументКопирования <> Неопределено);
	
	Если ДокументКопирования = Неопределено Тогда
	//+
	
	//+
	//Если ПередачаТовараКомитентом Или ДанныеДокумента.ВозвратнаяТара.Количество() > 0 Тогда
	//	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	//Иначе
	//	Если ДанныеДокумента.Товары.Количество()=0 Тогда
	//		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
	//	ИначеЕсли ДанныеДокумента.Услуги.Количество()=0 Тогда
	//		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
	//	Иначе
	//		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ТипСклада   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Склад, "ТипСклада");
	//+
	
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДоговорКонтрагента, "ВидДоговора");
	
	//+
	//УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	//РассчитыватьСуммаВРознице = ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
	//							И УчетВПродажныхЦенах
	//							И (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
	//								ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары)
	//							И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

	//НТТ = ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	//СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
	//	ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	//РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
	//	ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
	//	ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	//
	//ЗаполнятьСтавкуНДСВРознице = НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице;
	//+
	
	ПлательщикНДС	 = УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	ЭтоКомиссия		 = ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ОтражениеВУСН	 = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(ДокументОбъект.ВидОперации, ЭтоКомиссия);
	
	//+
	//ДокументОбъект.Товары.Очистить();
	//Для Каждого СтрокаНакладной Из ДанныеДокумента.Товары Цикл
	//	
	//	СтрокаТЧ = ДокументОбъект.Товары.Добавить();
	//	ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
	//	
		//Если РассчитыватьСуммаВРознице Тогда
		//	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВРозницеТабЧасти(СтрокаТЧ, ДокументОбъект, ДокументОбъект.Метаданные());
		//	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТЧ);
		//КонецЕсли;
		//
		//Если ЗаполнятьСтавкуНДСВРознице Тогда
		//	СтрокаТЧ.СтавкаНДСВРознице = ?(ПлательщикНДС, СтрокаТЧ.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		//КонецЕсли;
	//	
	//	СтрокаТЧ.ОтражениеВУСН = ОтражениеВУСН;
	//	
	//	Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
	//		ДокументОбъект.НДСНеВыделять = Ложь;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//ДокументОбъект.Услуги.Очистить();
	//Для Каждого СтрокаНакладной Из ДанныеДокумента.Услуги Цикл
	//	СтрокаТЧ = ДокументОбъект.Услуги.Добавить();
	//	ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
	//	
	//	СтрокаТЧ.ОтражениеВУСН = ОтражениеВУСН;
	//	
	//	Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
	//		ДокументОбъект.НДСНеВыделять = Ложь;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	//ДокументОбъект.ВозвратнаяТара.Очистить();
	//Для Каждого СтрокаНакладной Из ДанныеДокумента.ВозвратнаяТара Цикл
	//	
	//	СтрокаТЧ = ДокументОбъект.ВозвратнаяТара.Добавить();
	//	ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
	//	
	//КонецЦикла;
	//
	//Если ДанныеДокумента.Свойство("ШтрихкодыУпаковок") Тогда 
	//	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ДанныеДокумента.ШтрихкодыУпаковок);
	//КонецЕсли;
	//+
	
	//+
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Услуги.Очистить();
	ДокументОбъект.Оборудование.Очистить();
	ДокументОбъект.ОбъектыСтроительства.Очистить();
	
	ИмяТЧТовары = "Товары";
	ИмяТЧУслуги = "Услуги";
	
	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		ИмяТЧТовары = "Услуги";
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		ИмяТЧТовары = "Оборудование";
		ИмяТЧУслуги = "Оборудование";
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
		ИмяТЧУслуги = "Товары";
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ИмяТЧТовары = "ОбъектыСтроительства";
		ИмяТЧУслуги = "ОбъектыСтроительства";
	КонецЕсли;	
	
	Для Каждого СтрокаНакладной Из ДанныеДокумента.Товары Цикл
		
		СтрокаТЧ = ДокументОбъект[ИмяТЧТовары].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		Если ИмяТЧТовары = "Товары" ИЛИ ИмяТЧТовары = "Услуги" Тогда
			СтрокаТЧ.ОтражениеВУСН = ОтражениеВУСН;
		КонецЕсли;	
		
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
		
		ЗаполнитьДанныеСтрокиУчетногоДокументаДаннымиЗаявки(ДокументОбъект, СтрокаТЧ, ДокументОбъект.ок_НомерЗаявки, ДанныеЗаявкиДляЗаполнения);		
		
	КонецЦикла;
	
	Для Каждого СтрокаНакладной Из ДанныеДокумента.Услуги Цикл
		
		СтрокаТЧ = ДокументОбъект[ИмяТЧУслуги].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		Если ИмяТЧУслуги = "Товары" ИЛИ ИмяТЧУслуги = "Услуги" Тогда
			СтрокаТЧ.ОтражениеВУСН = ОтражениеВУСН;
		КонецЕсли;	
		
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
		
		ЗаполнитьДанныеСтрокиУчетногоДокументаДаннымиЗаявки(ДокументОбъект, СтрокаТЧ, ДокументОбъект.ок_НомерЗаявки, ДанныеЗаявкиДляЗаполнения);		
		
	КонецЦикла;
	
	//попросили заполнять статью затрат как в форме документа по кнопке "Дозаполнить по управленческим аналитикам".
	//скопировал код заполнения из Документы.ПоступлениеТоваровУслуг.Форма.ФормаДокументаОбщая.ЗаполнитьТЧПоУправленческимАналитикамНаСервере()
	Если ДокументОбъект.ОбъектыСтроительства.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов КАК СтатьяОборотов,
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл КАК СтатьяРегл
		|ИЗ
		|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
		|ГДЕ
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.СтатьиЗатрат
		|	И бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов В(&СтатьиОборотов)";
		
		Запрос.УстановитьПараметр("СтатьиОборотов", ДокументОбъект.ОбъектыСтроительства.ВыгрузитьКолонку("ок_СтатьяОборотов"));
		пСоответствиеСтатей = Запрос.Выполнить().Выгрузить();
		
		Для каждого пСтрокаТЧ из ДокументОбъект.ОбъектыСтроительства Цикл
		
			пНайденнаяСтрока = пСоответствиеСтатей.Найти(пСтрокаТЧ.ок_СтатьяОборотов);
			Если пНайденнаяСтрока<>Неопределено Тогда 
				пСтрокаТЧ.СтатьяЗатрат = пНайденнаяСтрока.СтатьяРегл;				
			КонецЕсли;		
			
		КонецЦикла;
		
	КонецЕсли;	
	//+
	
	СчетаУчетаВДокументах.Заполнить(ДокументОбъект, Новый Структура());
	
	//+	
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-15 (#4214)
	Если ДанныеДокумента.Свойство("СведенияПрослеживаемости") Тогда 
		ДокументОбъект.СведенияПрослеживаемости.Загрузить(ДанныеДокумента.СведенияПрослеживаемости);
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-15 (#4214)

	ЗаполнитьСтруктуруПодчиненностиБКПоступление(ДокументОбъект, ДокументОбъект.ок_НомерЗаявки);
	//+	
	
	//ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	ОбменСКонтрагентамиБП.ЗаписатьДокументЭкспортируемая(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	//+
	//сказали надо связать с заявкой через регистр
	ОтразитьСвязьЗаявкиДокументаПоступления(Документ, ДокументОбъект.ок_НомерЗаявки, ДанныеДокумента);
	//+
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияДопрасходов2019(Документ, ДанныеДокумента)
	
	Перем ДанныеЗаявкиДляЗаполнения;
	
	ДокументКопирования = Неопределено;
	//ДокументКопирования = ПолучитьДокументКопирования(ДанныеДокумента, Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	//Если ДокументКопирования <> Неопределено И ЗначениеЗаполнено(Документ) Тогда //перезаполнение существующего документа копированием не реализуем
	//	Возврат;
	//КонецЕсли;	
	
	Заявка = ПолучитьЗначениеНастройкиЗагрузкиУчетногоДокумента(ДанныеДокумента, "ок_НомерЗаявки");	
	ДокументОснование = ПолучитьЗначениеНастройкиЗагрузкиУчетногоДокумента(ДанныеДокумента, "ок_ДокументОснование");
	
	ДанныеШапки = ДанныеДокумента.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		
		Если ДокументКопирования <> Неопределено Тогда
			ДокументОбъект = ДокументКопирования.Скопировать();
		Иначе	
			ДокументОбъект = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
		КонецЕсли;
		
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		Если ДокументКопирования = Неопределено Тогда
			
			ДокументОбъект.Заполнить(ДокументОснование);
			
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
	КонецЕсли;
	
	ИменаРеквизитов = "";
	Если ДокументКопирования <> Неопределено Тогда
		ИменаРеквизитов = ",НомерВходящегоДокумента,ДатаВходящегоДокумента,";
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
		ИменаРеквизитов = ИменаРеквизитов + "Организация,Контрагент,ДоговорКонтрагента,";
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-01-21 (#3612)
		
	КонецЕсли;	
	
	ПерезаполнениеЗначенийРеквизитовШапки2019(ДокументОбъект, ДанныеШапки, ИменаРеквизитов);
		
	ЗаполнитьШапкуДокументаПоДаннымВходящегоДокументаЭД(ДокументОбъект, ДанныеДокумента, ДокументКопирования <> Неопределено);
		
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	//во входящем документе сумма включет НДС
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		МетаданныеДокументОснование = ДокументОснование.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокументОснование) Тогда
			Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СуммаВключаетНДС") Тогда
				ДокументОбъект.Сумма = 	ДокументОбъект.Сумма - ДокументОбъект.СуммаНДС;
			КонецЕсли;	
		КонецЕсли;	
			
	Иначе
		
		ДокументОбъект.СуммаВключаетНДС = Истина;	
		
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	
	Если ДокументКопирования = Неопределено Тогда
		
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		ЭтоБумажныйДокумент = Ложь;
		Если ДанныеДокумента.ок_ДополнительныеПараметры.Свойство("ЭтоБумажныйДокумент") 
			И ДанныеДокумента.ок_ДополнительныеПараметры.ЭтоБумажныйДокумент Тогда
			ЭтоБумажныйДокумент = Истина;
		КонецЕсли;
		
		Если Не ЭтоБумажныйДокумент Тогда
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		
		ДокументОбъект.Сумма = 0;
		ДокументОбъект.СуммаНДС = 0;
		ДокументОбъект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
		Для Каждого СтрокаНакладной Из ДанныеДокумента.Товары Цикл
			ДокументОбъект.Сумма = ДокументОбъект.Сумма + СтрокаНакладной.Сумма;
			ДокументОбъект.СуммаНДС = ДокументОбъект.СуммаНДС + СтрокаНакладной.СуммаНДС;
			Если Не ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС) Тогда
				ДокументОбъект.СтавкаНДС = СтрокаНакладной.СтавкаНДС;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого СтрокаНакладной Из ДанныеДокумента.Услуги Цикл
			ДокументОбъект.Сумма = ДокументОбъект.Сумма + СтрокаНакладной.Сумма;
			ДокументОбъект.СуммаНДС = ДокументОбъект.СуммаНДС + СтрокаНакладной.СуммаНДС;
			Если Не ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС) Тогда
				ДокументОбъект.СтавкаНДС = СтрокаНакладной.СтавкаНДС;
			КонецЕсли;	
		КонецЦикла;
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		КонецЕсли;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС) Тогда
			ДокументОбъект.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, ДокументОбъект.Дата);
		КонецЕсли;	
		
		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
			
			СтрокаТЧ.ДокументПартии = ДокументОснование;
			
			Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
				ДокументОбъект.НДСНеВыделять = Ложь;
			КонецЕсли;
			
			ЗаполнитьДанныеСтрокиУчетногоДокументаДаннымиЗаявки(ДокументОбъект, СтрокаТЧ, Заявка, ДанныеЗаявкиДляЗаполнения);		
			
		КонецЦикла;
				
	КонецЕсли;
	
	ЗаполнитьСтруктуруПодчиненностиБКПоступление(ДокументОбъект, Заявка);
	
	ОбменСКонтрагентамиБП.ЗаписатьДокументЭкспортируемая(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ОтразитьСвязьЗаявкиДокументаПоступления(Документ, Заявка, ДанныеДокумента);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияНМА2019(Документ, ДанныеДокумента)
	
	Перем ДанныеЗаявкиДляЗаполнения;
	
	ДокументКопирования = ПолучитьДокументКопирования(ДанныеДокумента, Тип("ДокументСсылка.ПоступлениеНМА"));
	Если ДокументКопирования <> Неопределено И ЗначениеЗаполнено(Документ) Тогда //перезаполнение существующего документа копированием не реализуем пока
		Возврат;
	КонецЕсли;	
	
	Заявка = ПолучитьЗначениеНастройкиЗагрузкиУчетногоДокумента(ДанныеДокумента, "ок_НомерЗаявки");	
	ДанныеШапки = ДанныеДокумента.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		
		Если ДокументКопирования <> Неопределено Тогда
			ДокументОбъект = ДокументКопирования.Скопировать();
		Иначе	
			ДокументОбъект = Документы.ПоступлениеНМА.СоздатьДокумент();
		КонецЕсли;
		
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		Если ДокументКопирования = Неопределено Тогда
			
			ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеШапки);
			
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
	КонецЕсли;
			
	ИменаРеквизитов = "";
	Если ДокументКопирования <> Неопределено Тогда
		ИменаРеквизитов = ",НомерВходящегоДокумента,ДатаВходящегоДокумента,";
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3612)
		ИменаРеквизитов = ИменаРеквизитов + "Организация,Контрагент,ДоговорКонтрагента,";
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-01-21 (#3612)
		
	КонецЕсли;	
	
	ПерезаполнениеЗначенийРеквизитовШапки2019(ДокументОбъект, ДанныеШапки, ИменаРеквизитов);
	
	ЗаполнитьШапкуДокументаПоДаннымВходящегоДокументаЭД(ДокументОбъект, ДанныеДокумента, ДокументКопирования <> Неопределено);
		
	Если ДокументКопирования = Неопределено Тогда
		
		Документы.ПоступлениеНМА.ЗаполнитьСчетаУчетаРасчетов(ДокументОбъект);
		
		//ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДоговорКонтрагента, "ВидДоговора");
		
		//ПлательщикНДС	 = УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
		//ЭтоКомиссия		 = ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		//ОтражениеВУСН	 = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(ДокументОбъект.ВидОперации, ЭтоКомиссия);
		
		ДокументОбъект.НематериальныеАктивы.Очистить();
		
		Для Каждого СтрокаНакладной Из ДанныеДокумента.Товары Цикл
			
			СтрокаТЧ = ДокументОбъект.НематериальныеАктивы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
			
			//СтрокаТЧ.ОтражениеВУСН = ОтражениеВУСН;
			
			ЗаполнитьДанныеСтрокиУчетногоДокументаДаннымиЗаявки(ДокументОбъект, СтрокаТЧ, Заявка, ДанныеЗаявкиДляЗаполнения);		
			
			Документы.ПоступлениеНМА.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(СтрокаТЧ, ДокументОбъект.Дата);
			
		КонецЦикла;
		
		Для Каждого СтрокаНакладной Из ДанныеДокумента.Услуги Цикл
			
			СтрокаТЧ = ДокументОбъект.НематериальныеАктивы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
			
			//СтрокаТЧ.ОтражениеВУСН = ОтражениеВУСН;
			
			ЗаполнитьДанныеСтрокиУчетногоДокументаДаннымиЗаявки(ДокументОбъект, СтрокаТЧ, Заявка, ДанныеЗаявкиДляЗаполнения);		
			
			Документы.ПоступлениеНМА.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(СтрокаТЧ, ДокументОбъект.Дата);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьСтруктуруПодчиненностиБКПоступление(ДокументОбъект, Заявка);
	
	ОбменСКонтрагентамиБП.ЗаписатьДокументЭкспортируемая(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ОтразитьСвязьЗаявкиДокументаПоступления(Документ, Заявка, ДанныеДокумента);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступления2019(Документ, ДанныеДокумента, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") 
		И ДанныеДокумента.Свойство("ок_ДополнительныеПараметры") Тогда
		
		    СтандартнаяОбработка = Ложь;
			
	Иначе
		
		Возврат;		
		
	КонецЕсли;	
		
	//ок_СозданиеПоступлениеПоДаннымСчетаФактуры = Ложь;
	//ДанныеДокумента.Свойство("ок_СозданиеПоступлениеПоДаннымСчетаФактуры", ок_СозданиеПоступлениеПоДаннымСчетаФактуры);

	Если Не ДанныеДокумента.ок_ДополнительныеПараметры.Свойство("ЗагружаемыеВиды") Тогда
		Возврат;
	КонецЕсли;	
		
	Если Не ЗначениеЗаполнено(ДанныеДокумента.ок_ДополнительныеПараметры.ЗагружаемыеВиды.Поступление) Тогда
		Возврат;
	КонецЕсли;	
	
	//Если Не ДанныеДокумента.Свойство("ок_ИсправлениеИзФайла") И ДанныеДокумента.ок_ИсправлениеИзФайла Тогда //идет файл корректировки, а в ЭД пользователь указал грузить поступление, такие пропускаем
	//	Возврат;
	//КонецЕсли;	
	
	Если ДанныеДокумента.ок_ДополнительныеПараметры.ЗагружаемыеВиды.Поступление = Перечисления.ок_ВидЗагружаемыхДокументовЭД.КорректировкаПоступления Тогда
		
		Если Не ДанныеДокумента.Свойство("ок_УчетныйДокументОснование") Тогда
		    СтандартнаяОбработка = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеДокумента.ок_УчетныйДокументОснование) Тогда
		    СтандартнаяОбработка = Истина;
		Иначе	
			ЗаполнитьДокументКорректировкиПоступления2019(Документ, ДанныеДокумента);
		КонецЕсли;	
		
	Иначе	
		
		ТипДокумента = ТипДокументаПоступленияПоВидуЗагружаемогоДокументаЭД(ДанныеДокумента.ок_ДополнительныеПараметры.ЗагружаемыеВиды.Поступление);
		
		Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда	
			ЗаполнитьДокументПоступленияТоваровУслуг2019(Документ, ДанныеДокумента);
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда	
			ЗаполнитьДокументПоступленияДопрасходов2019(Документ, ДанныеДокумента);
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеНМА") Тогда	
			ЗаполнитьДокументПоступленияНМА2019(Документ, ДанныеДокумента);
		КонецЕсли;	
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗаполнитьДокументСчетФактураПолученный2019(Документ, ДанныеДокумента, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") 
		И ДанныеДокумента.Свойство("ок_ДополнительныеПараметры") Тогда
		
	Иначе
		
		Возврат;		
		
	КонецЕсли;	
		
	Если Не ДанныеДокумента.ок_ДополнительныеПараметры.Свойство("ЗагружаемыеВиды") Тогда
		Возврат;
	КонецЕсли;	
		
	ЭлектронныйДокумент = ДанныеДокумента.ок_ДополнительныеПараметры.ЭлектронныйДокумент;
	НаличиеФайлов = НаличиеУчетныхДокументовПоДаннымПрисоединенныхФайловВходящегоДокументаЭД(ЭлектронныйДокумент);
	Если Не НаличиеФайлов.Поступление И ЗначениеЗаполнено(ДанныеДокумента.ок_ДополнительныеПараметры.ЗагружаемыеВиды.Поступление) Тогда //создание поступления, когда файл только СЧФ
		
		//ДанныеДокумента.Вставить("ок_СозданиеПоступлениеПоДаннымСчетаФактуры", Истина);
		Если ДанныеДокумента.Свойство("ок_ДанныеПоступление") Тогда
			ДокументПоступления = Неопределено;
			ЗаполнитьДокументПоступления2019(ДокументПоступления, ДанныеДокумента.ок_ДанныеПоступление, Истина);
			ДокументыУчета = Новый Массив;
			ДокументыУчета.Добавить(ДокументПоступления);
			ЗарегистрироватьСвязьДокументовУчетаСДокументомЭД(ДокументыУчета, ЭлектронныйДокумент, ДанныеДокумента.ок_ДополнительныеПараметры.СпособОбработки);
			ДанныеДокумента.ок_ДополнительныеПараметры.Вставить("ПредыдущиеДокументыУчета", ДокументыУчета);
		КонецЕсли;	
		
	КонецЕсли;	
	
	//сказали создавать счет-фактуру если есть файл, но не указана галка в эд
	//Если Не ЗначениеЗаполнено(ДанныеДокумента.ок_ДополнительныеПараметры.ЗагружаемыеВиды.СчетФактура) Тогда //указано не создавать счет-фактуру
	//    СтандартнаяОбработка = Ложь;
	//	Возврат;
	//КонецЕсли;	
	
	УстановитьОснованиеСчетаФактуры(ДанныеДокумента);
	
	//СЧФ из корректировки создаем как по кнопке корректировки
	ДокументОснование = Неопределено;
	Если ДанныеДокумента.Свойство("ДокументыОснования") И ТипЗнч(ДанныеДокумента.ДокументыОснования) = Тип("Массив") Тогда
		Для каждого Основание из ДанныеДокумента.ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Основание) Тогда
				ДокументОснование = Основание;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Документ = ЗарегистрироватьСчетФактуруПоКорректировкеПоступления(ДокументОснование, ДанныеДокумента);
		//ВременнаяСтруктура = Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента, КодВидаОперации", '00010101', "", "01");;
		//ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, ДанныеДокумента);
		//Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ДокументОснование, ВременнаяСтруктура.НомерВходящегоДокумента, ВременнаяСтруктура.ДатаВходящегоДокумента);
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗарегистрироватьСчетФактуруПоКорректировкеПоступления(ДокументОснование, ДанныеДокумента)
	
	Результат = Новый Структура ("Ссылка", Документы.СчетФактураПолученный.ПустаяСсылка());
	
	ВременнаяСтруктура = Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента, КодВидаОперации", '00010101', "", "01");;
	ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, ДанныеДокумента);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ВидОперации,ДокументПоступления,НомерИсправления,Контрагент");
	СчетФактураИсправляемый = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(РеквизитыДокумента.ДокументПоступления);
	
	Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		И ЗначениеЗаполнено(ВременнаяСтруктура.НомерВходящегоДокумента)
		И ЗначениеЗаполнено(ВременнаяСтруктура.ДатаВходящегоДокумента)
		И ЗначениеЗаполнено(СчетФактураИсправляемый) Тогда
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ДокументОснование,
			ВременнаяСтруктура.НомерВходящегоДокумента,
			ВременнаяСтруктура.ДатаВходящегоДокумента);
		
	ИначеЕсли РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И ЗначениеЗаполнено(РеквизитыДокумента.НомерИсправления)
		И ЗначениеЗаполнено(ВременнаяСтруктура.ДатаВходящегоДокумента)
		И ЗначениеЗаполнено(СчетФактураИсправляемый) Тогда
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ДокументОснование,
			РеквизитыДокумента.НомерИсправления,
			ВременнаяСтруктура.ДатаВходящегоДокумента);
		
	ИначеЕсли РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
		
		ПараметрыЗаполнения = ПараметрыЗаполненияСчетаФактурыНаИсправлениеСобственнойОшибки(ДокументОснование, СчетФактураИсправляемый, РеквизитыДокумента, ВременнаяСтруктура);
		
		Результат = УчетНДСВызовСервера.СоздатьАктуализироватьИсправлениеСобственнойОшибки(ПараметрыЗаполнения);
		
	КонецЕсли;
	
	Возврат Результат.Ссылка;
	
КонецФункции

Функция ПараметрыЗаполненияСчетаФактурыНаИсправлениеСобственнойОшибки(ДокументОснование, СчетФактураИсправляемый, РеквизитыДокумента, ДанныеДокумента)
	
	РеквизитыСчетФактураИсправляемый = Новый Структура("ИННКонтрагента,КППКонтрагента", "", "");
	Если ЗначениеЗаполнено(СчетФактураИсправляемый) Тогда
		РеквизитыСчетФактураИсправляемый = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактураИсправляемый, "ИННКонтрагента,КППКонтрагента");
	КонецЕсли;
	
	Если ПустаяСтрока(РеквизитыСчетФактураИсправляемый.ИННКонтрагента) Тогда
		РеквизитыКонтрагента = Справочники.Контрагенты.СведенияОКонтрагенте(РеквизитыДокумента.Контрагент, ДанныеДокумента.ДатаВходящегоДокумента);
		РеквизитыСчетФактураИсправляемый = Новый Структура("ИННКонтрагента,КППКонтрагента", РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП);
	КонецЕсли;	
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДокументОснование"          , ДокументОснование);   //
	Результат.Вставить("СчетФактураИсправляемый"    , СчетФактураИсправляемый); //
	Результат.Вставить("СчетФактура"                , Документы.СчетФактураПолученный.ПустаяСсылка());
	Результат.Вставить("НомерСчетаФактуры"          , ДанныеДокумента.НомерВходящегоДокумента);
	Результат.Вставить("ДатаСчетаФактуры"           , ДанныеДокумента.ДатаВходящегоДокумента);
	Результат.Вставить("КодВидаОперации"            , ДанныеДокумента.КодВидаОперации);
	Результат.Вставить("КодВидаОперацииНаУменьшение", ДанныеДокумента.КодВидаОперации);
	Результат.Вставить("ИННКонтрагентаДоИзменения"  , РеквизитыСчетФактураИсправляемый.ИННКонтрагента);
	Результат.Вставить("КППКонтрагентаДоИзменения"  , РеквизитыСчетФактураИсправляемый.КППКонтрагента);
	Результат.Вставить("ИННКонтрагента"             , РеквизитыСчетФактураИсправляемый.ИННКонтрагента);
	Результат.Вставить("КППКонтрагента"             , РеквизитыСчетФактураИсправляемый.КППКонтрагента);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДокументКорректировкиПоступления2019(Документ, ДанныеДокумента) 
	
	//+
	Перем ДанныеЗаявкиДляЗаполнения;
	
	Заявка = ПолучитьЗначениеНастройкиЗагрузкиУчетногоДокумента(ДанныеДокумента, "ок_НомерЗаявки");	
	//+
	
	ДанныеЗаполнения = ДанныеДокумента.Шапка;
	
	//+
	//подадим на вход процедуре заполнения указанные настройки во входящем ЭД
	Если ДанныеДокумента.Свойство("ок_УчетныйДокументОснование") Тогда
		Если ЗначениеЗаполнено(ДанныеДокумента.ок_УчетныйДокументОснование) Тогда
			ДанныеЗаполнения.Вставить("Основание", ДанныеДокумента.ок_УчетныйДокументОснование);
		КонецЕсли;	
	КонецЕсли;	
	ДанныеДокумента.Вставить("ок_ВидОперации", Неопределено);
	Если ДанныеДокумента.Свойство("ок_ВидОперацииКорректировкаПоступления") Тогда
		Если ЗначениеЗаполнено(ДанныеДокумента.ок_ВидОперацииКорректировкаПоступления) Тогда
			ДанныеЗаполнения.Вставить("ВидОперации", ДанныеДокумента.ок_ВидОперацииКорректировкаПоступления);
			ДанныеДокумента.Вставить("ок_ВидОперации", ДанныеДокумента.ок_ВидОперацииКорректировкаПоступления);
		КонецЕсли;	
	КонецЕсли;	
	//+
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	Если Не ДанныеЗаполнения.Свойство("Основание") Или Не ЗначениеЗаполнено(ДанныеЗаполнения.Основание) Тогда
		ТекстСообщения = "Не указан документ основание для создания корректировки поступления.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если Документ.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе // создаем новый
		
		ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	//+
	Если Не ЗначениеЗаполнено(ДанныеДокумента.ок_ВидОперации) Тогда
	//+
	
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	Иначе
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	КонецЕсли;
	
	//+
	КонецЕсли;
	//+
	
	ДокументОбъект.ЗаполнитьСвойстваШапки();
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	Если ДанныеЗаполнения.Свойство("ВидОперацииЭД")
		И ДанныеЗаполнения.Свойство("НомерИсправления")
		И ДанныеЗаполнения.Свойство("ДатаИсправления") Тогда
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДокументОбъект.НомерИсправления = ДанныеЗаполнения.НомерИсправления;
		ДокументОбъект.ДатаИсправления = ДанныеЗаполнения.ДатаИсправления;
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	Если ДанныеЗаполнения.Свойство("НомерИсходногоДокумента")
		И ЗначениеЗаполнено(ДанныеЗаполнения.НомерИсходногоДокумента) Тогда
		ДокументОбъект.НомерИсходногоДокумента = ДанныеЗаполнения.НомерИсходногоДокумента;
		ДокументОбъект.ДатаИсходногоДокумента  = ДанныеЗаполнения.ДатаИсходногоДокумента;
		Если ДанныеЗаполнения.УчитыватьИсправлениеИсходногоДокумента Тогда
			ДокументОбъект.НомерИсправленияИсходногоДокумента = ДанныеЗаполнения.НомерИсправленияИсходногоДокумента;
			ДокументОбъект.ДатаИсправленияИсходногоДокумента  = ДанныеЗаполнения.ДатаИсправленияИсходногоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументПоступления = ДокументОбъект.ДокументПоступления;
	Если Не ЗначениеЗаполнено(ДокументПоступления) И ДанныеЗаполнения.Свойство("Основание") Тогда
		ДокументПоступления = ДанныеЗаполнения.Основание;
	КонецЕсли;
	
	// Заполненим корректировку поступления данными основания
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		ДокументОбъект.Заполнить(ДокументПоступления);
	КонецЕсли;
	
	//+
	//пока у нас нет сопоставления, поэтому не заполняем
	//если включать, то нужно через времнную структуру изолировать отсутствие колонок в загружаемой структуре, а то отваливается на ЗаполнитьЗначенияСвойств
	
	//// Заполним табличные части данными корректировки
	//ТабличныеЧастиДляЗаполения = Новый Структура("Товары, Услуги");
	//СтрокиТабличнойЧастиДляПерезаполнения = Новый Структура("Товары, Услуги",
	//		"Количество, Цена, Сумма, СуммаНДС, НомерГТД, СтранаПроисхождения", 
	//		"Количество, Цена, Сумма, СуммаНДС, Содержание");
	//Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
	//	СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги", "", "");
	//Иначе
	//	СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги",
	//			"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, НомерГТДДоИзменения, СтранаПроисхожденияДоИзменения", 
	//			"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, СодержаниеДоИзменения");
	//КонецЕсли;
	//Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДляЗаполения Цикл
	//	
	//	ИмяТЧ = ТабличнаяЧасть.Ключ;
	//	
	//	СтруктураПоиска = Новый Структура("Номенклатура, СтавкаНДС");
	//	
	//	Для Каждого СтрокаДокумента Из ДокументОбъект[ИмяТЧ] Цикл
	//		
	//		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
	//		РезультатПоискаДанныхЗаполнения = ДанныеДокумента[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	//		
	//		Если РезультатПоискаДанныхЗаполнения.Количество() > 0 Тогда
	//			
	//			СтрокаДанныхЗаполнения = РезультатПоискаДанныхЗаполнения[0];
	//			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДанныхЗаполнения, СтрокиТабличнойЧастиДляПерезаполнения[ИмяТЧ]);
	//			
	//			// Удалим обработанную строку из данных заполнения
	//			ДанныеДокумента[ИмяТЧ].Удалить(СтрокаДанныхЗаполнения);
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	// Добавим новые строки в документ
	//	Если ДанныеДокумента[ИмяТЧ].Количество() > 0 Тогда
	//		
	//		Для Каждого СтрокаДанныхЗаполнения Из ДанныеДокумента[ИмяТЧ] Цикл
	//			
	//			НоваяСтрока = ДокументОбъект[ИмяТЧ].Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхЗаполнения, , СтрокиТабличнойЧастиДляПерезаполненияНового[ИмяТЧ]);
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	//если одна строка, то заполним
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-09-13 (#4281) 
	//КоличествоСтрокДокумент = 0;
	//КоличествоСтрокВФайле = 0;
	//ТабличныеЧастиДляЗаполения = Новый Структура("Товары, Услуги");
	//Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДляЗаполения Цикл
	//	
	//	ИмяТЧ = ТабличнаяЧасть.Ключ;
	//	
	//	КоличествоСтрокДокумент = КоличествоСтрокДокумент + ДокументОбъект[ИмяТЧ].Количество();
	//	КоличествоСтрокВФайле = КоличествоСтрокВФайле + ДанныеДокумента[ИмяТЧ].Количество();
	//	
	//КонецЦикла;
	//
	//Если КоличествоСтрокДокумент = 1 И КоличествоСтрокВФайле = 1 Тогда
	//	ТабличныеЧастиДляЗаполения = Новый Структура("Товары, Услуги");
	//	ВременнаяСтруктура = Новый Структура("Количество, Цена, Сумма, СуммаНДС, НомерГТД, СтранаПроисхождения, Содержание"); 
	//	
	//	СтрокаДокумента = Неопределено;
	//	
	//	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДляЗаполения Цикл
	//		
	//		ИмяТЧ = ТабличнаяЧасть.Ключ;
	//		
	//		Если ДокументОбъект[ИмяТЧ].Количество() = 1 Тогда
	//			СтрокаДокумента = ДокументОбъект[ИмяТЧ][0];
	//		КонецЕсли;	
	//		
	//		Если ДанныеДокумента[ИмяТЧ].Количество() = 1 Тогда
	//			ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, ДанныеДокумента[ИмяТЧ][0]);
	//		КонецЕсли;	
	//		
	//	КонецЦикла;
	//	
	//	Если СтрокаДокумента <> Неопределено Тогда
	//		ЗаполнитьЗначенияСвойств(СтрокаДокумента, ВременнаяСтруктура);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Для каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
	//	ЗаполнитьДанныеСтрокиУчетногоДокументаДаннымиЗаявки(ДокументОбъект, СтрокаТЧ, Заявка, ДанныеЗаявкиДляЗаполнения);		
	//КонецЦикла;	
	//
	//Для каждого СтрокаТЧ Из ДокументОбъект.Услуги Цикл
	//	ЗаполнитьДанныеСтрокиУчетногоДокументаДаннымиЗаявки(ДокументОбъект, СтрокаТЧ, Заявка, ДанныеЗаявкиДляЗаполнения);		
	//КонецЦикла;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-01 (#4433)
	Если НЕ (ДанныеДокумента.Свойство("ок_ДополнительныеПараметры") 
		И ДанныеДокумента.ок_ДополнительныеПараметры.Свойство("ЭтоБумажныйДокумент")
		И ДанныеДокумента.ок_ДополнительныеПараметры.ЭтоБумажныйДокумент) Тогда
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-01 (#4433)
	
	// Заполним табличные части данными корректировки
	ТабличныеЧастиДляЗаполения = Новый Структура("Товары, Услуги");
	СтрокиТабличнойЧастиДляПерезаполнения = Новый Структура("Товары, Услуги",
			"Количество, Цена, Сумма, СуммаНДС, НомерГТД", 
			"Количество, Цена, Сумма, СуммаНДС, Содержание");
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги", "", "");
	Иначе
		СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги",
				"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, НомерГТДДоИзменения", 
				"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, СодержаниеДоИзменения");
	КонецЕсли;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДляЗаполения Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Ключ;
		СтруктураПоиска = Новый Структура("Номенклатура, СтавкаНДС");
		Для Каждого СтрокаДокумента Из ДокументОбъект[ИмяТЧ] Цикл

			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
			РезультатПоискаДанныхЗаполнения = ДанныеДокумента[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-12 (#4408)
			Если РезультатПоискаДанныхЗаполнения.Количество() = 0 Тогда
				СтруктураДопПоиска = Новый Структура;
				СтруктураДопПоиска.Вставить("КоличествоДоКорректировки", СтрокаДокумента.Количество);
				СтруктураДопПоиска.Вставить("СуммаДоКорректировки", СтрокаДокумента.Сумма);
				РезультатПоискаДанныхЗаполнения = ДанныеДокумента[ИмяТЧ].НайтиСтроки(СтруктураДопПоиска);	
			КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-12 (#4408)
			
			Если РезультатПоискаДанныхЗаполнения.Количество() > 0 Тогда
				
				СтрокаДанныхЗаполнения = РезультатПоискаДанныхЗаполнения[0];
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДанныхЗаполнения, СтрокиТабличнойЧастиДляПерезаполнения[ИмяТЧ]);
				
				// В регламенте УКД нет данных о стране происхождения, поэтому заполним данными документа поступления.
				Если СтрНайти(СтрокиТабличнойЧастиДляПерезаполнения[ИмяТЧ], "СтранаПроисхождения") > 0 Тогда
					СтрокаДокумента.СтранаПроисхождения = СтрокаДокумента.СтранаПроисхожденияДоИзменения;
				КонецЕсли;
				
				// Удалим обработанную строку из данных заполнения
				ДанныеДокумента[ИмяТЧ].Удалить(СтрокаДанныхЗаполнения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-12 (#4408)
		//Закоментируем, пока не разработаем бизнес-процесс появления новой номенклатуры в УКД
		//// Добавим новые строки в документ
		//Если ДанныеДокумента[ИмяТЧ].Количество() > 0 Тогда
		//	
		//	Для Каждого СтрокаДанныхЗаполнения Из ДанныеДокумента[ИмяТЧ] Цикл
		//		
		//		НоваяСтрока = ДокументОбъект[ИмяТЧ].Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхЗаполнения,, СтрокиТабличнойЧастиДляПерезаполненияНового[ИмяТЧ]);
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-12 (#4408)
		
	КонецЦикла;

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-01 (#4433)
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-01 (#4433)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-09-13 (#4281)	
	//+
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-20 (#4214)
	Если ДанныеДокумента.Свойство("СведенияПрослеживаемости") Тогда
		ОбменСКонтрагентамиБП.ЗаполнитьСведенияОПрослеживаемостиВДокументеИБ_УКД(ДокументОбъект.СведенияПрослеживаемости,
			ДанныеДокумента.СведенияПрослеживаемости, ДокументОбъект.Товары);
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-20 (#4214)
	
	//ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	ОбменСКонтрагентамиБП.ЗаписатьДокументЭкспортируемая(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	//+
	ОтразитьСвязьЗаявкиДокументаПоступления(Документ, Заявка, ДанныеДокумента);
	//+
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСтрокиУчетногоДокументаДаннымиЗаявки(УчетныйДокумент, СтрокаУчетногоДокумента, Заявка, ДанныеЗаявки = Неопределено)
	
	Если Не ЗначениеЗаполнено(Заявка) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДанныеЗаявки = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Данные.Период КАК ок_Период,
			|	Данные.ЦФО КАК ок_ЦФО,
			|	Данные.СтатьяОборотов КАК ок_СтатьяОборотов,
			|	Данные.Аналитика_2 КАК ок_Аналитика_2,
			|	Данные.Сумма КАК Сумма,
			|	Данные.Проект КАК ок_Проект
			|ИЗ
			|	Документ.бит_ФормаВводаБюджета.БДДС КАК Данные
			|ГДЕ
			|	Данные.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Данные.НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", Заявка);
		ДанныеЗаявки = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Если ДанныеЗаявки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сумма = СтрокаУчетногоДокумента.Сумма + ?(УчетныйДокумент.СуммаВключаетНДС, 0, СтрокаУчетногоДокумента.СуммаНДС);
	
	Отбор = Новый Структура("Сумма", Сумма);
	Строки = ДанныеЗаявки.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Строки = ДанныеЗаявки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаУчетногоДокумента, Строки[0], , "Сумма");
	
КонецПроцедуры	

Функция ПолучитьПризнакОчисткиДанныхФВБВУчетномДокументеПриКопировании(ОбъектКопирования) Экспорт
	
	Результат = Истина;
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ОбъектКопирования) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ОбъектКопирования.ДополнительныеСвойства.Свойство("ок_НеОчищатьДанныеФВБ") Тогда
		Результат = Ложь;;
	КонецЕсли;	

	Возврат Результат;
	
КонецФункции	

Функция МассивДокументовУчетаВходящегоЭД(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.ДокументОснование КАК Документ,
		|	ВЫБОР
		|		КОГДА Данные.ДокументОснование ССЫЛКА Документ.СчетФактураПолученный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК Данные
		|ГДЕ
		|	Данные.Ссылка = &ЭлектронныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Данные.ДокументОснование.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	
КонецФункции

Процедура ПерезаполнениеЗначенийРеквизитовШапки2019(ТекущийОбъект, ДанныеЗаполнения, Имена = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если Не ПустаяСтрока(Имена) И СтрНайти(Имена, "," + Строка.Ключ + ",") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруПодчиненностиБКПоступление(ДокументОбъект, Заявка)
	
	ДокументОбъект.ок_СтруктураПодчиненностиБК.Очистить();
	Если ЗначениеЗаполнено(Заявка) Тогда
		НоваяСтрока = ДокументОбъект.ок_СтруктураПодчиненностиБК.Добавить();
		НоваяСтрока.ФормаВводаБюджета = Заявка;
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	ДокументОбъект.ДополнительныеСвойства.Вставить("ок_ФВБ", Заявка);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-09 (#3360)

Функция ПолучитьДанныеИзФайлаЭД(ИмяФайла, ДеревоДанных = Неопределено)
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ДеревоДанных = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоДанных, "ОбменСКонтрагентами");
	
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
	ОшибкаЧтенияЭД = Ложь;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	КопироватьФайл(ИмяФайла, ИмяВременногоФайла);
	
	ОбменСКонтрагентамиВнутренний.ок_ПрочитатьФайлCMLпоXDTOЭкспортируемая(ИмяВременногоФайла, ДеревоДанных, НовыйЭД, ОшибкаЧтенияЭД);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Если ОшибкаЧтенияЭД Тогда
		ДеревоДанных = Неопределено;
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат НовыйЭД;
	
КонецФункции	

Функция ПолучитьНомерЗаявкиИзЭД(ДеревоДанных = Неопределено, ИмяФайла = "", Расположение = "")
	
	Результат = Неопределено;
	
	Если ДеревоДанных = Неопределено Тогда
		
		Если ПустаяСтрока(ИмяФайла) Тогда
			Возврат Результат;
		КонецЕсли;	
		
		НовыйЭД = ПолучитьДанныеИзФайлаЭД(ИмяФайла);
		
		Если НовыйЭД = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;	
		
		ДеревоДанных = НовыйЭД.ЗначениеРеквизита;
		
	КонецЕсли;	
	
	Если Расположение = "" Тогда
		Расположение = "ок_номер_заявки";
	КонецЕсли;
	
	Значение = "";
	
	Если Прав(Расположение, 19) = "ТекстоваяИнформация" Тогда //из таблицы значений
	
		//20191018
		//может возвращать исключение, обойдем
		//ТекстоваяИнформацияЭД = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, Расположение);
		ТекстоваяИнформацияЭД = Неопределено;
		Попытка
			ТекстоваяИнформацияЭД = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, Расположение);
		Исключение
		КонецПопытки;
		//20191018
	
		Если ТекстоваяИнформацияЭД <> Неопределено 
			И ТипЗнч(ТекстоваяИнформацияЭД) = Тип("ТаблицаЗначений") 
			И ТекстоваяИнформацияЭД.Колонки.Найти("Идентификатор") <> Неопределено 
			И ТекстоваяИнформацияЭД.Колонки.Найти("Значение") <> Неопределено Тогда
			
			Для каждого СтрокаТекстовойИнформацииЭД Из ТекстоваяИнформацияЭД Цикл
				Если Нрег(СтрокаТекстовойИнформацииЭД.Идентификатор) = "номер_заявки" Тогда
					
					Значение = СтрокаТекстовойИнформацииЭД.Значение;
					Прервать;
					
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;	
		
	Иначе
		
		Значение = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Расположение, Ложь);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ФормаВводаБюджета.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
		|ГДЕ
		|	НЕ бит_ФормаВводаБюджета.ПометкаУдаления
		|	И бит_ФормаВводаБюджета.Номер = &Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	бит_ФормаВводаБюджета.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("Номер", Значение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

Процедура ДополнитьИнформациюИзИнфПолФХЖ1ВДеревоДокумента(ЭД, ДеревоЭД) Экспорт
	
	Если ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.СодФХЖ1.ИнфПолФХЖ1") <> Неопределено Тогда
		
		ТекстИнф = ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.СодФХЖ1.ИнфПолФХЖ1.ТекстИнф",, Истина);
		Если ТекстИнф <> Неопределено Тогда
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ТекстИнф Цикл
				
				Идентиф = ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
				Значен  = ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
				
				Если Значен = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = Идентиф;
				НоваяСтрока.Значение      = Значен;
				
			КонецЦикла;
			
			//ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТекстоваяИнформация, "ок_ДопДанные.ТекстоваяИнформация"); //под это надо править макет, не буду так как снесут при обновлении
			
			Ном = 0;
			Для каждого Строка Из ТекстоваяИнформация Цикл
				Ном = Ном + 1;
				НоваяСтрока = ДеревоЭД.Строки.Добавить();
				ВременнаяСтруктура = Новый Структура;
				ВременнаяСтруктура.Вставить("ПолныйПуть", "ок_" + НРег(Строка.Идентификатор));
				ВременнаяСтруктура.Вставить("Значение", Строка.Значение);
				ВременнаяСтруктура.Вставить("ПутьXDTO", "Документ.СвДокПРУ.СодФХЖ1.ИнфПолФХЖ1.ТекстИнф" + Ном);
				ВременнаяСтруктура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка"));
				ВременнаяСтруктура.Вставить("Типы", "Строка");
				ВременнаяСтруктура.Вставить("Уровень1", НоваяСтрока.Значение);
				ВременнаяСтруктура.Вставить("КодПредставления", "ок" + Ном);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВременнаяСтруктура);
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-09 (#3360)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
Функция ЭтоБумажныйДокумент(Ссылка = Неопределено, Профиль = Неопределено) Экспорт
	
	Если Профиль = Неопределено Тогда
        //1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		//Профиль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПрофильНастроекЭДО");
		Профиль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИдентификаторОрганизации");
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	КонецЕсли;	
	
	Возврат Не ЗначениеЗаполнено(Профиль);
	
КонецФункции	

Функция ТипЭлементовВерсииЭДПоТипуДокументаОК(ТипДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
		
		Возврат Перечисления.ТипыЭлементовВерсииЭД.ПустаяСсылка();
		
	ИначеЕсли ТипДокумента = Перечисления.ок_ТипыДокументовЭД.Акт Тогда
		
		Возврат Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
		
	ИначеЕсли ТипДокумента = Перечисления.ок_ТипыДокументовЭД.КорректировкаПоступления Тогда
		
		Возврат Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
		
	ИначеЕсли ТипДокумента = Перечисления.ок_ТипыДокументовЭД.Накладная Тогда
		
		Возврат Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
		
	ИначеЕсли ТипДокумента = Перечисления.ок_ТипыДокументовЭД.Неформализованный Тогда
		
		Возврат Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД;
		
	ИначеЕсли ТипДокумента = Перечисления.ок_ТипыДокументовЭД.СчетФактура Тогда
		
		Возврат Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
		
	ИначеЕсли ТипДокумента = Перечисления.ок_ТипыДокументовЭД.УКД Тогда
		
		Возврат Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД;
		
	ИначеЕсли ТипДокумента = Перечисления.ок_ТипыДокументовЭД.УПД Тогда
		
		Возврат Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД;
		
	ИначеЕсли ТипДокумента = Перечисления.ок_ТипыДокументовЭД.Счет Тогда
		
		Возврат Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД;
		
	КонецЕсли;	
	
	Возврат Перечисления.ТипыЭлементовВерсииЭД.ПустаяСсылка();
	
КонецФункции	

Процедура ок_УстановитьСтатусЗакрытУРодителяЭлектронногоДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Источник.ок_ДокументРодитель) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ок_ДокументРодитель, "ок_Статус") <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен Тогда
		Объект = Источник.ок_ДокументРодитель.ПолучитьОбъект();
		Объект.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен;
		Объект.Записать();
	КонецЕсли;	
		
КонецПроцедуры

Функция СохранитьДанныеБумажногоОбъекта(СтруктураПараметров, СпособОбработки = "")  
	
	//ДеревоРазбора = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
	
	Если НЕ СтруктураПараметров.Свойство("ФайлДанныхСсылка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ДокументыУчета") Тогда
		
		ДокументыУчета = СтруктураПараметров.ДокументыУчета;
	Иначе
		ДокументыУчета = Неопределено;
	КонецЕсли;
	
	//НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
	//НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	//
	//Если НЕ (СтруктураПараметров.Свойство("НаправлениеЭД", НовыйЭД.НаправлениеЭД)
	//	И ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД)) Тогда
	//	НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	//КонецЕсли;
	//	
	////ОшибкаЧтенияЭД = Ложь;
	////ФорматЭлектронногоДокумента = Неопределено;
	////ПрочитатьФайлCMLпоXDTO(ВремФайл, ДеревоРазбора, НовыйЭД, ОшибкаЧтенияЭД, ФорматЭлектронногоДокумента);
	//
	//НовыйЭД.ЗначениеРеквизита = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.УПД_ИнформацияПродавца_2019");
	
	//Если Не ОшибкаЧтенияЭД Тогда
		
		// Заполним ссылки на объекты из дерева соответствий, если ссылок нет,
		// тогда будем создавать объекты.
		Если Не ЗначениеЗаполнено(ДокументыУчета) Или СтруктураПараметров.Свойство("ЗаполнитьДокумент") Тогда
			
			ЗаполнитьДокументыУчета = Истина;
			ОписаниеОшибки = "";
			
			ДокументУчета = Неопределено;
			Если ЗначениеЗаполнено(ДокументыУчета) Тогда
				ДокументУчета = ДокументыУчета[0];
			КонецЕсли;
			
			//ПараметрыОтражения = Новый Структура;
			//ПараметрыОтражения.Вставить("ЭлектронныйДокумент", СтруктураПараметров.ЭлектронныйДокумент);
			//ПараметрыОтражения.Вставить("СпособОбработки", СпособОбработки);
			//ПараметрыОтражения.Вставить("ДеревоДокумента", НовыйЭД);
			//Отказ = Ложь;
			//ОбменСКонтрагентамиСлужебный.ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой(
			//	ПараметрыОтражения, Отказ);
			//Если Отказ Тогда
			//	Возврат ДокументыУчета;
			//КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка
					
				НайтиСоздатьУчетныйДокументПоДаннымБумажногоДокумента(СтруктураПараметров.ФайлДанныхСсылка, ДокументыУчета, СпособОбработки);
				ЗаполнитьДокументыУчета = Ложь;
					
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Заполнение документа на основе ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					ТекстСообщения);
				//ОшибкаЗаписи = Истина;
				ЗаполнитьДокументыУчета = Ложь;
				
				ВызватьИсключение;
				
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(ДокументУчета) Тогда
				ЗаполнитьДокументыУчета = Ложь;
			КонецЕсли;
					
			Если ЗаполнитьДокументыУчета Тогда
				ДокументыУчета = Новый Массив;
				ДокументыУчета.Добавить(ДокументУчета);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДокументыУчета) Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось создать документ базы данных.'");
				ТекстЖурналаРегистрации = НСтр("ru = 'Необходимо проверить работу процедуры
						|СохранитьДанныеБумажногоОбъекта'");
				ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД.'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					ВидОперации, ТекстЖурналаРегистрации, ТекстСообщения);
					//ОшибкаЗаписи = Истина;
			КонецЕсли;
			
		КонецЕсли;
	//КонецЕсли;
	
	Возврат ДокументыУчета;
	
КонецФункции

Процедура НайтиСоздатьУчетныйДокументПоДаннымБумажногоДокумента(БумажныйДокумент, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено) 
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		УстановитьПривилегированныйРежим(Истина);
	
		Данные = ПодготовитьСтруктуруДляПоступленияТоваровПоДаннымБумажногоДокумента(БумажныйДокумент);
		
		ДополнитьДанныеОбъектаДляСозданияУчетногоДокумента(ПервичныйДокумент, Данные, СпособОбработки, "НайтиСоздатьУниверсальныйПередаточныйДокумент");
		
		ЗаполнитьДокументПоступления2019(ПервичныйДокумент, Данные, Неопределено);
		
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БумажныйДокумент, "ок_ДатаВходящегоСчетаФактуры, ок_НомерВходящегоСчетаФактуры");
			
			Если ЗначениеЗаполнено(РеквизитыДокумента.ок_ДатаВходящегоСчетаФактуры) 
				И ЗначениеЗаполнено(РеквизитыДокумента.ок_НомерВходящегоСчетаФактуры) Тогда
			
				Если ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
					
					Данные = Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента", 
													РеквизитыДокумента.ок_ДатаВходящегоСчетаФактуры, 
													РеквизитыДокумента.ок_НомерВходящегоСчетаФактуры);
													
					СчетФактура = ЗарегистрироватьСчетФактуруПоКорректировкеПоступления(ПервичныйДокумент, Данные);
					
				Иначе

					Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
						ПервичныйДокумент,
						РеквизитыДокумента.ок_НомерВходящегоСчетаФактуры,
						РеквизитыДокумента.ок_ДатаВходящегоСчетаФактуры);
						
					Если Результат <> Неопределено Тогда
						СчетФактура = Результат.Ссылка;
						//контрагент и организация не устанавливаются без сумм в типовом поведении, поэтому установим сами
						РеквизитыСчетФактура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, "Организация, Контрагент");
						//ТребуетсяОбновление = Ложь;
						Если ЗначениеЗаполнено(СчетФактура)
							И (Не ЗначениеЗаполнено(РеквизитыСчетФактура.Организация)
							Или Не ЗначениеЗаполнено(РеквизитыСчетФактура.Контрагент)) Тогда
							
							СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
							МетаданныеДокумента = ПервичныйДокумент.Метаданные();
							Если Не ЗначениеЗаполнено(РеквизитыСчетФактура.Организация) И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента) Тогда
								СчетФактураОбъект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйДокумент, "Организация");
							КонецЕсли;	
							Если Не ЗначениеЗаполнено(РеквизитыСчетФактура.Контрагент) И ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеДокумента) Тогда
								СчетФактураОбъект.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйДокумент, "Контрагент");
							КонецЕсли;
							СчетФактураОбъект.Записать();
							
						КонецЕсли;
							
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если СчетФактура <> Неопределено Тогда
			ДокументыУчета.Добавить(СчетФактура);
		КонецЕсли;	
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляПоступленияТоваровПоДаннымБумажногоДокумента(БумажныйДокумент)
	
	ДанныеОбъекта = Новый Структура;
	
	Товары = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("ШтрихкодыУпаковок");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//ШтрихкодыУпаковок = ИнтеграцияМОТП.НоваяТаблицаШтрихкодыУпаковок();
	ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
	Услуги         = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	ВозвратнаяТара = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().ВозвратнаяТара.ВыгрузитьКолонки();
	
	ДанныеОбъекта.Вставить("ВалютаДокумента", Неопределено);
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", 1);
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	//ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БумажныйДокумент, "ДатаДокументаОтправителя, НомерДокументаОтправителя");
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", РеквизитыДокумента.НомерДокументаОтправителя);
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  РеквизитыДокумента.ДатаДокументаОтправителя);
	
	ДанныеОбъекта.Вставить("Исправление", Ложь);
	
	ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	
	//ОпределитьУчастниковПоДаннымЭД_2019(ДеревоДанных, ДанныеОбъекта);
	
	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
	
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка",             ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары",            Товары);
	ДанныеДляЗаполнения.Вставить("Услуги",            Услуги);
	ДанныеДляЗаполнения.Вставить("ВозвратнаяТара",    ВозвратнаяТара);
	ДанныеДляЗаполнения.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Процедура ок_ОтразитьВспомогательныеДанныеЭДВходящийПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Источник.ок_ПричиныОтклоненияПредставление = "";
	Для каждого Строка из Источник.ок_ПричиныОтклонения Цикл
		Источник.ок_ПричиныОтклоненияПредставление = Источник.ок_ПричиныОтклоненияПредставление + ?(ПустаяСтрока(Источник.ок_ПричиныОтклоненияПредставление), "", ";") + Строка.Причина;
	КонецЦикла;	
	
	//блок согласования по почте недружелюбен к пустой дате версии, заполним на всякий случа
	Если Источник.ЭтоНовый() И Не ЗначениеЗаполнено(Источник.ок_ДатаРедакции) Тогда
		Источник.ок_ДатаРедакции = ТекущаяДатаСеанса();
	КонецЕсли;	
		
КонецПроцедуры

Функция СформироватьРеестрыПроблемныхДокументов(МассивДокументов, Контрагенты = Неопределено, Инициаторы = Неопределено) Экспорт
	
	Контрагенты = Новый Массив;
	Инициаторы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Ссылка КАК Ссылка,
		|	Данные.ДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
		|	Данные.НомерДокументаОтправителя КАК НомерДокументаОтправителя,
		|	Данные.ок_ПричиныОтклоненияПредставление КАК ок_ПричиныОтклоненияПредставление,
		|	ВЫБОР
		|		КОГДА Данные.Контрагент.НаименованиеПолное = """"
		|			ТОГДА Данные.Контрагент.Наименование
		|		ИНАЧЕ Данные.Контрагент.НаименованиеПолное
		|	КОНЕЦ КАК КонтрагентПредставление,
		|	Данные.Контрагент.Код КАК КонтрагентКод,
		|	Данные.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА Данные.Организация.НаименованиеПолное = """"
		|			ТОГДА Данные.Организация.Наименование
		|		ИНАЧЕ Данные.Организация.НаименованиеПолное
		|	КОНЕЦ КАК Организация,
		|	Данные.ок_Статус КАК ок_Статус,
		|	Данные.СуммаДокумента КАК СуммаДокумента,
		|	Данные.ок_СуммаНДС КАК ок_СуммаНДС,
		|	Данные.ПричинаОтклонения КАК ПричинаОтклонения,
		|	Данные.ок_Инициатор КАК Инициатор
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий КАК Данные
		|ГДЕ
		|	НЕ Данные.ПометкаУдаления
		|	И Данные.УдалитьПрофильНастроекЭДО = ЗНАЧЕНИЕ(Справочник.УдалитьПрофилиНастроекЭДО.ПустаяСсылка)
		|	И Данные.ок_Проблемный
		|	И Данные.ок_Статус <> ЗНАЧЕНИЕ(Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен)
		|	И (Данные.Ссылка В (&МассивДокументов)
		|			ИЛИ &ПоВсемДокументам)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	ДатаДокументаОтправителя,
		|	Организация,
		|	НомерДокументаОтправителя
		|ИТОГИ ПО
		|	Контрагент";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ПоВсемДокументам", МассивДокументов = Неопределено);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Результат = Новый Массив;
	
	Макет = ПолучитьОбщийМакет("ок_РеестрДокументовБумажныйДО");
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ДатаФормирования = ТекущаяДатаСеанса();
	
	ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагент.Следующий() Цикл
		
		ТабДок = Новый ТабличныйДокумент;
		ОбластьШапка.Параметры.Заполнить(ВыборкаКонтрагент);
		ОбластьШапка.Параметры.ДатаФормирования = ДатаФормирования;
		ТабДок.Вывести(ОбластьШапка);
		
		ДанныеИнициаторов = Новый Массив;
	
		Ном = 0;
		ВыборкаДетальныеЗаписи = ВыборкаКонтрагент.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Ном = Ном + 1;
			ОбластьСтрока.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			ОбластьСтрока.Параметры.Ном = Ном;
			ТабДок.Вывести(ОбластьСтрока);
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Инициатор) И ДанныеИнициаторов.Найти(ВыборкаДетальныеЗаписи.Инициатор) = Неопределено Тогда
				ДанныеИнициаторов.Добавить(ВыборкаДетальныеЗаписи.Инициатор);
			КонецЕсли;	
			
		КонецЦикла;
		
		ТабДок.Вывести(ОбластьПодвал);
		ТабДок.АвтоМасштаб = Истина;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		Результат.Добавить(ТабДок);
		Контрагенты.Добавить(ВыборкаКонтрагент.Контрагент);
		
		Инициаторы.Добавить(ДанныеИнициаторов);
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции	

Процедура ОтправитьПисьмаРеестрыПроблемныхДокументов(Документы = Неопределено, Комментировать = Истина) Экспорт
	
	Контрагенты = Неопределено;
	Инициаторы = Неопределено;
	
	ТабличныеДокументы = СформироватьРеестрыПроблемныхДокументов(Документы, Контрагенты, Инициаторы);
	
	Если ТабличныеДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	УстановитьПривилегированныйРежим(Истина);
	
	Шаблон = ок_ОбменСКонтрагентамиВнутренний.УниверсальнаяНастройка("Документооборот", "Шаблон реестра проблемных документов");	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Если Комментировать Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена настройка: Документооборот/Шаблон реестра проблемных документов");
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru='Не удалось отправить письмо контрагенту %Контрагент%. %ОписаниеОшибки%'");
	
	Ном = 0;
	Для каждого ТабличныйДокумент из ТабличныеДокументы Цикл
		
		Ном = Ном + 1;
		
		СообщениеОбОшибке = "";
		
		Вложения = Новый Массив;
		Вложения.Добавить(Новый Структура("ИмяФайла, Файл", "Реестр документов.pdf", ТабличныйДокумент));
		ДополнительныеПолучатели = Неопределено;
		
		Если Инициаторы <> Неопределено И ТипЗнч(Инициаторы) = Тип("Массив") И Инициаторы.Количество() > 0 Тогда
			
			ДополнительныеПолучатели = Новый Массив;
			Для каждого Инициатор Из Инициаторы[Ном - 1] Цикл
				Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Инициатор, "Email"); 
				Если Не ЗначениеЗаполнено(Адрес) Тогда
					Продолжить;
				КонецЕсли;
				Если ДополнительныеПолучатели.Найти(Адрес) = Неопределено Тогда
					ДополнительныеПолучатели.Добавить(Адрес);
				КонецЕсли;	
			КонецЦикла;	
				
		КонецЕсли;
		
		Отправлено = ок_ОбменСКонтрагентамиВнутренний.ОтправитьПисьмоКонтрагентуПоШаблону(Контрагенты[Ном - 1], Шаблон, Вложения, ДополнительныеПолучатели, , СообщениеОбОшибке);
		
		Если Не Отправлено И Комментировать Тогда
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Контрагент%", Контрагенты[Ном - 1]);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", СообщениеОбОшибке);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры


Процедура ок_ОтправитьРеестрыПроблемныхДокументовВходящегоДокументооборота() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтправитьПисьмаРеестрыПроблемныхДокументов(, Ложь);
	
КонецПроцедуры

Функция УниверсальнаяНастройка(Группа, ИмяНастройки, ЗначениеПоУмолчанию = Неопределено, ТипВозвращаемогоЗначения = "Значение") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат бит_БК_Общий.ПолучитьЗначениеНастройкиБК(Группа, ИмяНастройки, ЗначениеПоУмолчанию, ТипВозвращаемогоЗначения);	
	
КонецФункции

Функция ОтправитьПисьмоКонтрагентуПоШаблону(Контрагент, Шаблон, Вложения = Неопределено, ДополнительныеПолучатели = Неопределено, КонтекстДляШаблона = Неопределено, СообщениеОбОшибке = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		СообщениеОбОшибке = "Не указан контрагент.";
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	АдресПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
	Если Не ЗначениеЗаполнено(АдресПочты) Тогда
		СообщениеОбОшибке = "У контрагента " + Контрагент + " не заполнен адрес электронной почты.";
		Возврат Ложь;
	КонецЕсли;
	
	УчетнаяЗапись = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Учетная запись почты согласований ЭДО");	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		СообщениеОбОшибке = "Не заполнена настройка: Согласование по почте/Учетная запись почты согласований ЭДО";
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторЗаписи = Новый УникальныйИдентификатор();
	
	Если КонтекстДляШаблона = Неопределено Тогда
		КонтекстДляШаблона = Новый Структура;
	КонецЕсли;
	
	Если Не КонтекстДляШаблона.Свойство("ДатаФормирования") Тогда
	    КонтекстДляШаблона.Вставить("Период", ТекущаяДатаСеанса());
	КонецЕсли;	
		
	Получатель = Новый СписокЗначений;
	Получатель.Добавить(Контрагент);
	
	//заполним кэш адресов чтобы фунция взяла из него
	КэшАдресов = Новый ТаблицаЗначений;
	КэшАдресов.Колонки.Добавить("Получатель");
	КэшАдресов.Колонки.Добавить("ВидКонтактнойИнформации");
	КэшАдресов.Колонки.Добавить("Адрес");
	
	НоваяСтрока = КэшАдресов.Добавить();
	НоваяСтрока.Получатель = Контрагент;
	НоваяСтрока.Адрес = АдресПочты;
		
	
	Если ДополнительныеПолучатели <> Неопределено Тогда
		Для каждого ДополнительныйПолучатель из ДополнительныеПолучатели Цикл
			
			Получатель.Добавить(ДополнительныйПолучатель);
			
			НоваяСтрока = КэшАдресов.Добавить();
			НоваяСтрока.Получатель = ДополнительныйПолучатель;
			НоваяСтрока.Адрес = ДополнительныйПолучатель;
		
		КонецЦикла;	
	КонецЕсли;	
	
	//обязательные поля контекста, без них будет крашится процедура записи оповещения
	КонтекстДляШаблона.Вставить("ИдентификаторЗаписи", ИдентификаторЗаписи); 
	КонтекстДляШаблона.Вставить("Шаблон", Шаблон);
	КонтекстДляШаблона.Вставить("Получатель", Получатель);  
	КонтекстДляШаблона.Вставить("ТекущийОбъект", Документы.бит_ФормаВводаБюджета.ПустаяСсылка());         				
	КонтекстДляШаблона.Вставить("Пользователь", Пользователи.ТекущийПользователь()); 
	КонтекстДляШаблона.Вставить("НеПроверятьНаличиеЗаписи", Истина);
	
	Если Не КонтекстДляШаблона.Свойство("Контрагент") Тогда
		КонтекстДляШаблона.Вставить("Контрагент", Контрагент);
	КонецЕсли;	
		

	Если Вложения <> Неопределено И Вложения.Количество() > 0 Тогда
		бит_ФормаВводаБюджетаВызовСервера.СохранитьВременныеФайлыВложений(ИдентификаторЗаписи, Вложения);
	КонецЕсли;
	
	// попытка записать в РС "Оповещения" данные, для последующей отправки на эл. почту
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.ЗаписатьОповещение(Неопределено
	Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.СформироватьИЗаписатьСообщение(Неопределено
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
										   ,Шаблон
										   ,УчетнаяЗапись
										   ,КонтекстДляШаблона
										   ,КэшАдресов
										   ,бит_ОбщегоНазначения.ОпределитьРежимыВывода("Нет").ВыводитьОшибки); 
	
	Возврат Истина;	
	
КонецФункции

Процедура ОтправитьПовторныеПисьмаНаСогласованиеВходящихЭлектронныхДокументов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчетнаяЗапись = УниверсальнаяНастройка("Согласование по почте", "Учетная запись почты согласований ЭДО");	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена настройка: Согласование по почте/Учетная запись почты согласований ЭДО");
		ЗаписьЖурналаРегистрации("Отправка напоминаний согласования ВД",УровеньЖурналаРегистрации.Ошибка,,,"Не заполнена настройка: Согласование по почте/Учетная запись почты согласований ЭДО");
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 		
		Возврат;
	КонецЕсли;
	
	Шаблон = УниверсальнаяНастройка("Согласование по почте", "Шаблон напоминания согласования входящего электронного документа");	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена настройка: Согласование по почте/Шаблон напоминания согласования входящего электронного документа");
		ЗаписьЖурналаРегистрации("Отправка напоминаний согласования ВД",УровеньЖурналаРегистрации.Ошибка,,,"Не заполнена настройка: Согласование по почте/Шаблон напоминания согласования входящего электронного документа");
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 		
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-20 (#3780)
	Шаблон_ТребуетсяЗаявка1С = УниверсальнаяНастройка("Согласование по почте", "Шаблон напоминания согласования входящего электронного документа (Требуется заявка 1С)");	
	Если Не ЗначениеЗаполнено(Шаблон_ТребуетсяЗаявка1С) Тогда
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена настройка: Согласование по почте/Шаблон напоминания согласования входящего электронного документа (Требуется заявка 1С)");
		ЗаписьЖурналаРегистрации("Отправка напоминаний согласования ВД",УровеньЖурналаРегистрации.Ошибка,,,"Не заполнена настройка: Согласование по почте/Шаблон напоминания согласования входящего электронного документа (Требуется заявка 1С)");
		Возврат;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997)		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-20 (#3780)

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-29 (#3997) 
	ШаблонФД = УниверсальнаяНастройка("Согласование по почте", "Шаблон напоминания согласования входящего электронного документа ФД");	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		ЗаписьЖурналаРегистрации("Отправка напоминаний согласования ВД",УровеньЖурналаРегистрации.Ошибка,,,"Не заполнена настройка: Согласование по почте/Шаблон напоминания согласования входящего электронного документа ФД");		
		Возврат;
	КонецЕсли;
	
	ВизаФД = ПредопределенноеЗначение("Справочник.бит_Визы.ок_ФД"); 
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-29 (#3997) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-29 (#3997) 
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	бит_фн_Оповещения.ИД КАК ИД
		//|ПОМЕСТИТЬ ВТОтправленные
		//|ИЗ
		//|	РегистрСведений.бит_фн_Оповещения КАК бит_фн_Оповещения
		//|ГДЕ
		//|	бит_фн_Оповещения.Статус = ЗНАЧЕНИЕ(Перечисление.бит_фн_СтатусыОтправкиОповещений.Отправлено)
		//|	И бит_фн_Оповещения.ДатаОтправки >= &НачалоПериода
		//|	И бит_фн_Оповещения.ДатаОтправки < &КонецПериода
		//|	И бит_фн_Оповещения.НастройкаДоставки = &УчетнаяЗапись
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-19 (#3732)
		////|ВЫБРАТЬ РАЗЛИЧНЫЕ
		////|	ок_ИсторияПерепискиСогласованияЭД.ИдентификаторОповещения КАК ИдентификаторОповещения
		////|ПОМЕСТИТЬ ВТПолученные
		////|ИЗ
		////|	РегистрСведений.ок_ИсторияПерепискиСогласованияЭД КАК ок_ИсторияПерепискиСогласованияЭД
		////|ГДЕ
		////|	ок_ИсторияПерепискиСогласованияЭД.ДатаСобытия > ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -1 * &МаксимальнаяДлительностьПроцессаСогласования)
		////|	И ок_ИсторияПерепискиСогласованияЭД.Направление = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
		////|;
		////|
		////|////////////////////////////////////////////////////////////////////////////////
		////|ВЫБРАТЬ
		////|	ВТОтправленные.ИД КАК ИД
		////|ИЗ
		////|	ВТОтправленные КАК ВТОтправленные
		////|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолученные КАК ВТПолученные
		////|		ПО ВТОтправленные.ИД = ВТПолученные.ИдентификаторОповещения
		////|ГДЕ
		////|	ВТПолученные.ИдентификаторОповещения ЕСТЬ NULL";
		//|ВЫБРАТЬ
		//|	ВТОтправленные.ИД КАК ИД
		//|ПОМЕСТИТЬ ВТОтправленные_НаСогласовании
		//|ИЗ
		//|	ВТОтправленные КАК ВТОтправленные
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_ИсторияПерепискиСогласованияЭД КАК ок_ИсторияПерепискиСогласованияЭД
		//|		ПО ВТОтправленные.ИД = ок_ИсторияПерепискиСогласованияЭД.ИдентификаторОповещения
		//|ГДЕ
		//|	(ок_ИсторияПерепискиСогласованияЭД.ЭлектронныйДокумент.ок_Статус = &СтатусЭД
		//|			ИЛИ ок_ИсторияПерепискиСогласованияЭД.ЭлектронныйДокумент ЕСТЬ NULL)
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ВТОтправленные.ИД
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ок_ИсторияПерепискиСогласованияЭД.ИдентификаторОповещения КАК ИдентификаторОповещения,
		//|	ок_ИсторияПерепискиСогласованияЭД.Направление КАК Направление,
		//|	ок_ИсторияПерепискиСогласованияЭД.ДатаСобытия КАК ДатаСобытия
		//|ПОМЕСТИТЬ ВТИсторияПереписки
		//|ИЗ
		//|	ВТОтправленные_НаСогласовании КАК ВТОтправленные
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_ИсторияПерепискиСогласованияЭД КАК ок_ИсторияПерепискиСогласованияЭД
		//|		ПО ВТОтправленные.ИД = ок_ИсторияПерепискиСогласованияЭД.ИдентификаторОповещения
		//|ГДЕ
		//|	ок_ИсторияПерепискиСогласованияЭД.ДатаСобытия > ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -1 * &МаксимальнаяДлительностьПроцессаСогласования)
		//|	И ок_ИсторияПерепискиСогласованияЭД.ЭлектронныйДокумент.ок_Статус = &СтатусЭД
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ВТИсторияПереписки.ИдентификаторОповещения КАК ИдентификаторОповещения,
		//|	МАКСИМУМ(ВТИсторияПереписки.ДатаСобытия) КАК ДатаСобытия
		//|ПОМЕСТИТЬ ВТИсторияПереписки_МаксимальнаяДатаСобытия
		//|ИЗ
		//|	ВТИсторияПереписки КАК ВТИсторияПереписки
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ВТИсторияПереписки.ИдентификаторОповещения
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ВТИсторияПереписки_МаксимальнаяДатаСобытия.ИдентификаторОповещения КАК ИдентификаторОповещения,
		//|	МАКСИМУМ(ВТИсторияПереписки.Направление) КАК Направление
		//|ПОМЕСТИТЬ ВТПоследнееСобытие
		//|ИЗ
		//|	ВТИсторияПереписки_МаксимальнаяДатаСобытия КАК ВТИсторияПереписки_МаксимальнаяДатаСобытия
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсторияПереписки КАК ВТИсторияПереписки
		//|		ПО ВТИсторияПереписки_МаксимальнаяДатаСобытия.ИдентификаторОповещения = ВТИсторияПереписки.ИдентификаторОповещения
		//|			И ВТИсторияПереписки_МаксимальнаяДатаСобытия.ДатаСобытия = ВТИсторияПереписки.ДатаСобытия
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ВТИсторияПереписки_МаксимальнаяДатаСобытия.ИдентификаторОповещения
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ВТОтправленные.ИД КАК ИД
		//|ИЗ
		//|	ВТОтправленные_НаСогласовании КАК ВТОтправленные
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследнееСобытие КАК ВТПоследнееСобытие
		//|		ПО ВТОтправленные.ИД = ВТПоследнееСобытие.ИдентификаторОповещения
		//|			И (ВТПоследнееСобытие.Направление = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное))
		//|ГДЕ
		//|	ВТПоследнееСобытие.ИдентификаторОповещения ЕСТЬ NULL";
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-19 (#3732)
		
	"ВЫБРАТЬ
	|	бит_УстановленныеВизы.Объект КАК Объект,
	|	бит_УстановленныеВизы.Виза КАК Виза,
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-30 (#4112)
	|	бит_УстановленныеВизы.ИД КАК ИД,
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-30 (#4112)
	|	бит_УстановленныеВизы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	бит_УстановленныеВизы.Объект.ок_ТребуетсяЗаявка1С КАК ок_ТребуетсяЗаявка1С,
	|	бит_УстановленныеВизы.Объект.ок_НомерЗаявки КАК ок_НомерЗаявки,
	|	бит_УстановленныеВизы.Объект.ок_КомментарийДляСогласующего КАК ок_КомментарийДляСогласующего
	|ПОМЕСТИТЬ ВТ_Визы
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	бит_УстановленныеВизы.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка)
	|	И бит_УстановленныеВизы.Объект ССЫЛКА Документ.ЭлектронныйДокументВходящий
	|	И ВЫРАЗИТЬ(бит_УстановленныеВизы.Объект КАК Документ.ЭлектронныйДокументВходящий).ок_Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование)
	|	И бит_УстановленныеВизы.ДатаКрайняя >= &НачалоПериода
	|	И бит_УстановленныеВизы.ДатаКрайняя < &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Визы.Объект КАК Объект,
	|	ВТ_Визы.Виза КАК Виза,
	|	ВТ_Визы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Визы.ок_ТребуетсяЗаявка1С КАК ок_ТребуетсяЗаявка1С,
	|	ВТ_Визы.ок_НомерЗаявки КАК ок_НомерЗаявки,
	|	ВТ_Визы.ок_КомментарийДляСогласующего КАК ок_КомментарийДляСогласующего,
	|	ЕСТЬNULL(ЭлектронныйДокументВходящийок_Инициаторы.ОтветственныйЗаНомерЗаявки, ЛОЖЬ) КАК ОтветственныйЗаНомерЗаявки
	|ИЗ
	|	ВТ_Визы КАК ВТ_Визы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ок_Инициаторы КАК ЭлектронныйДокументВходящийок_Инициаторы
	|		ПО ВТ_Визы.Объект = ЭлектронныйДокументВходящийок_Инициаторы.Ссылка
	|			И (ВТ_Визы.Виза = ЗНАЧЕНИЕ(Справочник.бит_Визы.ок_Инициатор))
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-19 (#4054)
	//|			И ВТ_Визы.ФизическоеЛицо = ЭлектронныйДокументВходящийок_Инициаторы.Инициатор";
	|			И ВТ_Визы.ИД = ЭлектронныйДокументВходящийок_Инициаторы.ИД";
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-19 (#4054) 	
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-29 (#3997) 
	
	ОдинДень = 24 * 60 * 60; 
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-29 (#3997)
	//КоличествоДней = УниверсальнаяНастройка("Согласование по почте", "Количество дней анализа оповещений для напоминаний");	
	//Если Не ЗначениеЗаполнено(КоличествоДней) Тогда
	//	КоличествоДней = 7;
	//КонецЕсли;		
	//	
	//КоличествоДнейОтсрочки = УниверсальнаяНастройка("Согласование по почте", "Количество дней отсрочки оповещений для напоминаний");	
	//Если Не ЗначениеЗаполнено(КоличествоДнейОтсрочки) Тогда
	//	КоличествоДнейОтсрочки = 1;
	//КонецЕсли;
	//
	//МаксимальнаяДлительностьПроцессаСогласования = УниверсальнаяНастройка("Согласование по почте", "Максимальная длительность процесса согласования");	
	//Если Не ЗначениеЗаполнено(МаксимальнаяДлительностьПроцессаСогласования) Тогда
	//	МаксимальнаяДлительностьПроцессаСогласования = 180;
	//КонецЕсли;
	
	КоличествоДней = УниверсальнаяНастройка("Согласование по почте", "Количество дней анализа оповещений для напоминаний", 7);
	КоличествоДнейОтсрочки = УниверсальнаяНастройка("Согласование по почте", "Количество дней отсрочки оповещений для напоминаний", 1);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-29 (#3997)
	
	Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДатаСеанса() - ОдинДень * КоличествоДней);
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДатаСеанса() - ОдинДень * КоличествоДнейОтсрочки);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-29 (#3997)
	//Запрос.УстановитьПараметр("МаксимальнаяДлительностьПроцессаСогласования", МаксимальнаяДлительностьПроцессаСогласования);
	//Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-19 (#3732)
	//Запрос.УстановитьПараметр("СтатусЭД", ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование"));
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-19 (#3732)
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-29 (#3997)
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-29 (#3997)
		
		//Документ = Документы.ЭлектронныйДокументВходящий.ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.ИД));
		//Если Не ОбщегоНазначения.СсылкаСуществует(Документ) Тогда
		//	Продолжить;
		//КонецЕсли;

		//Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ок_КомментарийДляСогласующего, ок_Комментатор");
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-20 (#3780)
		////Отправлено = ОтправитьНаСогласованиеВходящийЭлектронныйДокумент(Документ, Реквизиты.ок_КомментарийДляСогласующего, , Реквизиты.ок_Комментатор, Шаблон);	
		//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		//	И Документ.ок_ТребуетсяЗаявка1С
		//	И ЗначениеЗаполнено(Шаблон_ТребуетсяЗаявка1С) Тогда
		//	Отправлено = ОтправитьНаСогласованиеВходящийЭлектронныйДокумент(Документ, Реквизиты.ок_КомментарийДляСогласующего, , Реквизиты.ок_Комментатор, Шаблон_ТребуетсяЗаявка1С);	
		//Иначе
		//	Отправлено = ОтправитьНаСогласованиеВходящийЭлектронныйДокумент(Документ, Реквизиты.ок_КомментарийДляСогласующего, , Реквизиты.ок_Комментатор, Шаблон);	
		//КонецЕсли;
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-20 (#3780)
		Получатель = Выборка.ФизическоеЛицо;
		
		Если Выборка.Виза = ВизаФД Тогда
			ШаблонНаОтправку = ШаблонФД;
			Получатель = "";
		Иначе	
			Если Не Выборка.ок_ТребуетсяЗаявка1С ИЛИ ЗначениеЗаполнено(Выборка.ок_НомерЗаявки) Тогда
				ШаблонНаОтправку = Шаблон; 
			ИначеЕсли Выборка.ОтветственныйЗаНомерЗаявки Тогда
				ШаблонНаОтправку = Шаблон_ТребуетсяЗаявка1С; 
			Иначе
				ШаблонНаОтправку = Шаблон; 
			КонецЕсли;			
		КонецЕсли;
				
		Отправлено = ОтправитьПисьмоПоВходящемуЭлектронномуДокументу(Выборка.Объект, Выборка.Виза, Выборка.ок_КомментарийДляСогласующего, , , ШаблонНаОтправку, "Отправлено автоматически РЗ", Получатель);
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-29 (#3997) 
		
	КонецЦикла;
	

КонецПроцедуры	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-10-02 (#3337)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
//Функция ПоследниеПериодыДействияСоглашенияОбИспользованияЭД(Знач Соглашение, ТаблицаПериодов) Экспорт
Функция ПоследниеПериодыДействияСоглашенияОбИспользованияЭД(Знач Соглашение, ТаблицаПериодов = Неопределено, ВидПериодов = "") Экспорт
//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )	
 
	Результат = Новый Структура("ДатаНачала, ДатаОкончания, ДатаНачалаИсходящие, ДатаОкончанияИсходящие", '00010101', '00010101', '00010101', '00010101');
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//КоличествоСтрок = Соглашение.ок_ПериодыДействияВходящие.Количество();
	//Если КоличествоСтрок > 0 Тогда
	//	Результат.ДатаНачала = Соглашение.ок_ПериодыДействияВходящие[КоличествоСтрок - 1].ДатаНачала;
	//	Результат.ДатаОкончания = Соглашение.ок_ПериодыДействияВходящие[КоличествоСтрок - 1].ДатаОкончания;
	//КонецЕсли;	
	//
	//КоличествоСтрок = Соглашение.ок_ПериодыДействияИсходящие.Количество();
	//Если КоличествоСтрок > 0 Тогда
	//	Результат.ДатаНачалаИсходящие = Соглашение.ок_ПериодыДействияИсходящие[КоличествоСтрок - 1].ДатаНачала;
	//	Результат.ДатаОкончанияИсходящие = Соглашение.ок_ПериодыДействияИсходящие[КоличествоСтрок - 1].ДатаОкончания;
	//КонецЕсли;	
	Если Не ТаблицаПериодов = Неопределено Тогда
		КоличествоСтрок = ТаблицаПериодов.Количество();
		Если КоличествоСтрок > 0 Тогда
			Результат["ДатаНачала" + ВидПериодов] = ТаблицаПериодов[КоличествоСтрок - 1].ДатаНачала;
			Результат["ДатаОкончания" + ВидПериодов] = ТаблицаПериодов[КоличествоСтрок - 1].ДатаОкончания;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ок_ПериодыДействияСоглашений.ДатаНачала КАК ДатаНачала,
	                      |	ок_ПериодыДействияСоглашений.ДатаОкончания КАК ДатаОкончания
	                      |ИЗ
	                      |	РегистрСведений.ок_ПериодыДействияСоглашений КАК ок_ПериодыДействияСоглашений
	                      |ГДЕ
	                      |	ок_ПериодыДействияСоглашений.Входящий
	                      |	И ок_ПериодыДействияСоглашений.Отправитель = &Отправитель
	                      |	И ок_ПериодыДействияСоглашений.Получатель = &Получатель
						  //ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
						  |	И ок_ПериодыДействияСоглашений.ИдентификаторОтправителя = &ИдентификаторОтправителя
	                      |	И ок_ПериодыДействияСоглашений.ИдентификаторПолучателя = &ИдентификаторПолучателя
						  //ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаНачала УБЫВ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ок_ПериодыДействияСоглашений.ДатаНачала КАК ДатаНачала,
	                      |	ок_ПериодыДействияСоглашений.ДатаОкончания КАК ДатаОкончания
	                      |ИЗ
	                      |	РегистрСведений.ок_ПериодыДействияСоглашений КАК ок_ПериодыДействияСоглашений
	                      |ГДЕ
	                      |	НЕ ок_ПериодыДействияСоглашений.Входящий
	                      |	И ок_ПериодыДействияСоглашений.Отправитель = &Отправитель
	                      |	И ок_ПериодыДействияСоглашений.Получатель = &Получатель
						  //ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
						  |	И ок_ПериодыДействияСоглашений.ИдентификаторОтправителя = &ИдентификаторОтправителя
	                      |	И ок_ПериодыДействияСоглашений.ИдентификаторПолучателя = &ИдентификаторПолучателя
						  //ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаНачала УБЫВ");
	Запрос.УстановитьПараметр("Отправитель", Соглашение.Отправитель);
	Запрос.УстановитьПараметр("Получатель", Соглашение.Получатель);
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", Соглашение.ИдентификаторОтправителя);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", Соглашение.ИдентификаторПолучателя);
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ок_ПериодыДействияВходящие = ПакетЗапросов[0].Выбрать();
	ок_ПериодыДействияИсходящие = ПакетЗапросов[1].Выбрать();
	Если ок_ПериодыДействияВходящие.Следующий() Тогда
		Результат.ДатаНачала = ок_ПериодыДействияВходящие.ДатаНачала;
		Результат.ДатаОкончания = ок_ПериодыДействияВходящие.ДатаОкончания;
	КонецЕсли;	
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
	//Если ок_ПериодыДействияВходящие.Следующий() Тогда
	Если ок_ПериодыДействияИсходящие.Следующий() Тогда	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
		Результат.ДатаНачалаИсходящие = ок_ПериодыДействияИсходящие.ДатаНачала;
		Результат.ДатаОкончанияИсходящие = ок_ПериодыДействияИсходящие.ДатаОкончания;
	КонецЕсли;	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	Возврат Результат;
	
КонецФункции	

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-10-02 (#3337)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-08 (#3509)
Процедура ДобавитьДополнительныеФайлыВАрхив(ИмяФайлаАрхива, ДопФайлы, ИмяКаталога = "", Расширение = "") Экспорт
	
	//ОКЕЙ Наумов А.Н. (СофтЛаб) Начало 2021-02-04 (#4056)
	//АрхивЧтение = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	//ОКЕЙ Наумов А.Н. (СофтЛаб) Конец 2021-02-04 (#4056)
	ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", Новый УникальныйИдентификатор);
	
	//ОКЕЙ Наумов А.Н. (СофтЛаб) Начало 2021-02-04 (#4056)
	Если Не ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(ИмяФайлаАрхива, ПапкаДляРаспаковки, НСтр("ru = 'Распаковка пакета ЭД для добавления PDF'")) Тогда
		Возврат; // неудачная попытка распаковки архива
	КонецЕсли;	
	
	//Попытка
	//	АрхивЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
	//Исключение
	//	Возврат;
	//КонецПопытки;
	//
	//АрхивЧтение.Закрыть();
	//ОКЕЙ Наумов А.Н. (СофтЛаб) Конец 2021-02-04 (#4056)
	
	Хеши = Новый Массив;
	
	МассивФайлов = НайтиФайлы(ПапкаДляРаспаковки, "*", Истина);
	Для каждого Файл Из МассивФайлов Цикл
		
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Расширение <> "" И СтрЗаменить(НРег(Файл.Расширение), ".", "") <> СтрЗаменить(НРег(Расширение), ".", "") Тогда
			Продолжить;
		КонецЕсли;	
		
		Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
		Хеширование.ДобавитьФайл(Файл.ПолноеИмя);
		Хеши.Добавить(Хеширование.ХешСумма);
		
	КонецЦикла;
	
	КаталогДляКопирования = ПапкаДляРаспаковки + ?(ПустаяСтрока(ИмяКаталога), "", ИмяКаталога + ПолучитьРазделительПути());
	ФайлКаталог = Новый Файл(КаталогДляКопирования);
	Если Не ФайлКаталог.Существует() Тогда
		СоздатьКаталог(КаталогДляКопирования);
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	Для каждого ДопФайл Из ДопФайлы Цикл
		
		Файл = Новый Файл(ДопФайл.Значение);
		Если Не Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;	
		
		Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
		Хеширование.ДобавитьФайл(Файл.ПолноеИмя);
		Если Хеши.Найти(Хеширование.ХешСумма) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КопироватьФайл(ДопФайл.Значение, КаталогДляКопирования + ДопФайл.Ключ);
		ЕстьИзменения = Истина;
		
	КонецЦикла;	
	
	Если ЕстьИзменения Тогда
		
		Архиватор = Новый ЗаписьZipФайла(ИмяФайлаАрхива, , , , УровеньСжатияZIP.Максимальный);
		Архиватор.Добавить(ПапкаДляРаспаковки + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		
		//ОКЕЙ Наумов А.Н. (СофтЛаб) Начало 2021-02-04 (#4056)
		//Архиватор.Записать();
		
		Попытка
			Архиватор.Записать();	
		Исключение
			КонтекстОперации = ЭлектронноеВзаимодействиеСлужебный.НовыйКонтекстОперации();
			
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(НСтр("ru = 'Обновление пакета ЭД файлами PDF'"),
				ОбменСКонтрагентамиДиагностика.ВидОшибкиНеизвестнаяОшибка(), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
				
			ЭлектронноеВзаимодействиеОбработкаОшибок.ДобавитьОшибку(КонтекстОперации, Ошибка);
		КонецПопытки;
		//ОКЕЙ Наумов А.Н. (СофтЛаб) Конец 2021-02-04 (#4056)
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(КаталогДляКопирования);
		
КонецПроцедуры		

Функция ПрефиксДляИмениФайлаПредставления()
	
	Возврат "_(п).pdf";	
	
КонецФункции	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-08 (#3509)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
Процедура ОтразитьЗаписьЛогаОценкиПроизводительности(ТекстСообщения) Экспорт
	
	Отключить = УниверсальнаяНастройка("Логирование ЭДО", "Отключить логирование ЭДО");	
	Если ЗначениеЗаполнено(Отключить) И ТипЗнч(Отключить) = Тип("Булево") Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации("ЭДО ОК.Оценка производительности", УровеньЖурналаРегистрации.Примечание, , , ТекстСообщения);
	
КОнецпроцедуры	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-02-17 (#3623)
Процедура ок_ЗаполнитьДанныеДокументовЭДПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ЭлектронныйДокумент = Неопределено;
	ТипЗначения = ТипЗнч(Источник);
	Если ТипЗначения = Тип("СправочникОбъект.ЭДПрисоединенныеФайлы") Тогда
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-26 (#3796)
		Если Не Источник.ДополнительныеСвойства.Свойство("ок_ЗаполнятьДанныеДокументовЭД") Тогда
			Возврат;
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-26 (#3796)
		ЭлектронныйДокумент = Источник.ВладелецФайла;
	ИначеЕсли ТипЗначения = Тип("ДокументОбъект.ЭлектронныйДокументВходящий") Тогда
		ЭлектронныйДокумент = Источник.Ссылка;
	//пока не реализую поддержку
	//ИначеЕсли ТипЗначения = Тип("ДокументОбъект.ЭлектронныйДокументИсходящий") Тогда
	//	ЭлектронныйДокумент = Источник.Ссылка;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		РегистрыСведений.ок_ДанныеДокументовЭД.ОбновитьДанныеДокумента(ЭлектронныйДокумент);
	КонецЕсли;	
	
КонецПроцедуры
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) 2020-02-17 (#3623)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
Процедура ОбновитьДанныеВходящегоДокументаЭДПриЗагрузкеПрисоединенногоФайлаИзПакетаЭД(ВладелецЭД, ок_ЭлектронныйДокумент, НастройкаЭДО) Экспорт
	
	//обновим данные входящего документа
	Если ВладелецЭД <> Неопределено И ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		РеквизитыВладелецЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "ок_Статус,
		|ок_Наименование,
		|ок_Сумма,
		|ок_ДатаРедакции,
		|НомерВерсииЭД, 
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-09 (#3360)
		|ок_НомерЗаявки,
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-09 (#3360)
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-06-09 (#4207)
		|ок_Прослеживаемость,
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-06-09 (#4207) 
		|ок_Удален");
		УстановитьСтатусЗавершен = Ложь;
		Если ок_ЭлектронныйДокумент.ок_ДокуменооборотЗавершен Тогда
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-02 (#4181)
			//Если РеквизитыВладелецЭД.ок_Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен Тогда
			Если РеквизитыВладелецЭД.ок_Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен 
				И РеквизитыВладелецЭД.ок_Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ОтмененПоставщиком Тогда
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-02 (#4181)
				УстановитьСтатусЗавершен = Истина;
			КонецЕсли;	
		КонецЕсли;	
		ОбновитьДатуРедакции = Ложь;
		Если РеквизитыВладелецЭД.ок_ДатаРедакции < ок_ЭлектронныйДокумент.ок_ДатаРедакции Тогда
			ОбновитьДатуРедакции = Истина;
		КонецЕсли;	
		ПричинаОтклонения = "";
		ИдентификаторКорректный = ок_ОбменСКонтрагентамиВнутренний.ПроверитьИдентификаторУчастникаОбменаЭД(НастройкаЭДО, ок_ЭлектронныйДокумент.ок_ИдентификаторУчастникаОбменаОтправитель, ок_ЭлектронныйДокумент.ок_ИдентификаторУчастникаОбменаПолучатель, ПричинаОтклонения);
		Если УстановитьСтатусЗавершен 
			ИЛИ ОбновитьДатуРедакции
			ИЛИ РеквизитыВладелецЭД.ок_Сумма <> ок_ЭлектронныйДокумент.ок_Сумма
			ИЛИ РеквизитыВладелецЭД.ок_Удален <> ок_ЭлектронныйДокумент.ок_Удален
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-09 (#3360)
			ИЛИ (ЗначениеЗаполнено(ок_ЭлектронныйДокумент.ок_НомерЗаявки) И РеквизитыВладелецЭД.ок_НомерЗаявки <> ок_ЭлектронныйДокумент.ок_НомерЗаявки)
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-09 (#3360)
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-06-09 (#4207)
			ИЛИ (РеквизитыВладелецЭД.ок_Прослеживаемость <> ок_ЭлектронныйДокумент.ок_Прослеживаемость)
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-06-09 (#4207) 
			ИЛИ Не ИдентификаторКорректный
			ИЛИ РеквизитыВладелецЭД.ок_Наименование <> ок_ЭлектронныйДокумент.ок_Наименование Тогда
			ОбъектВладелецЭД = ВладелецЭД.ПолучитьОбъект();
			Если УстановитьСтатусЗавершен Тогда
				ОбъектВладелецЭД.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен;
			КонецЕсли;	
			ОбъектВладелецЭД.ок_Сумма = ок_ЭлектронныйДокумент.ок_Сумма;
			ОбъектВладелецЭД.ок_Наименование = ок_ЭлектронныйДокумент.ок_Наименование;
			ОбъектВладелецЭД.ок_Удален = ок_ЭлектронныйДокумент.ок_Удален;
			
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-09 (#3360)
			Если ЗначениеЗаполнено(ок_ЭлектронныйДокумент.ок_НомерЗаявки) Тогда
				ОбъектВладелецЭД.ок_НомерЗаявки = ок_ЭлектронныйДокумент.ок_НомерЗаявки;
			КонецЕсли;	
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-09 (#3360)
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-06-09 (#4207)
			ОбъектВладелецЭД.ок_Прослеживаемость = ок_ЭлектронныйДокумент.ок_Прослеживаемость;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-06-09 (#4207) 
			
			Если ОбновитьДатуРедакции Тогда
				ОбъектВладелецЭД.ок_ДатаРедакции = ок_ЭлектронныйДокумент.ок_ДатаРедакции;
				ОбъектВладелецЭД.НомерВерсииЭД = ?(ОбъектВладелецЭД.НомерВерсииЭД = 0, 2, ОбъектВладелецЭД.НомерВерсииЭД + 1);
				Если ОбъектВладелецЭД.ок_Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен
					// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-14 (#4181)
					//И ОбъектВладелецЭД.ок_Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен Тогда
					И ОбъектВладелецЭД.ок_Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен
					И ОбъектВладелецЭД.ок_Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ОтмененПоставщиком Тогда
					// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-14 (#4181)
					ОбъектВладелецЭД.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый; //пришла новая версия, возврат в начало
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
					ОбъектВладелецЭД.ПричинаОтклонения = ""; //обнуляем причину отказа
					ОбъектВладелецЭД.ок_ПричинаОтклоненияСогласования = ""; //обнуляем причину отказа, которую указал согласующий
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-14 (#4181)
				//Иначе
				ИначеЕсли ОбъектВладелецЭД.ок_Статус <> Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ОтмененПоставщиком Тогда
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-14 (#4181)
					ОбъектВладелецЭД.ПричинаОтклонения = "По данному документу процесс ЭДО завершен, пришлите новый документ (не редакцию)."; 
					ОбъектВладелецЭД.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать; //отправить отказ
					//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)
				КонецЕсли;	
			КонецЕсли;	
			Если Не ИдентификаторКорректный 
				И (ОбъектВладелецЭД.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый 
				ИЛИ ОбъектВладелецЭД.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ПустаяСсылка()) Тогда
				ОбъектВладелецЭД.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать;
				ОбъектВладелецЭД.ПричинаОтклонения = ПричинаОтклонения;
			КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-06-28 (#4244)
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-12 (#4451)
			//ОбъектВладелецЭД.ДополнительныеСвойства.Вставить("РучноеИзменениеСтатуса", Истина);
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-12 (#4451)
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-06-28 (#4244) 
			ОбъектВладелецЭД.Записать(РежимЗаписиДокумента.Запись);
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-15 (#3849)
			Если ОбъектВладелецЭД.ПричинаОтклонения = "По данному документу процесс ЭДО завершен, пришлите новый документ (не редакцию)." Тогда
				ИмяСобытияЖР ="Электронное взаимодействие.Отклонение версии ЭД";
				КомментарийЖР = "Отклонена новая версия ЭД по " + ОбъектВладелецЭД.Ссылка  + ". " + ОбъектВладелецЭД.ПричинаОтклонения;
				ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЭлектронныйДокументВходящий, ОбъектВладелецЭД.Ссылка, КомментарийЖР);
			КонецЕсли;
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-15 (#3849)
		КонецЕсли;	
	КонецЕсли;
								
КонецПроцедуры								
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-07-13 (#3796)
// ДопПараметры - Тип структура
//		{Если в ДопПараметры передано свойство СтруктураДляПолученияЭДПоКонтрагенту, 
//			то СтруктураДляПолученияЭДПоКонтрагенту имеет структуру
//		ИдентификаторКонтрагента 	- Строка 					- Обязательно заполнена
//		ИдентификаторОрганизации 	- Строка 					- Обязательно заполнена
//		Контрагент				 	- Справочник.Контрагенты 	- Обязательно заполнена
//		Организация 			 	- Справочник.Организации	- Обязательно заполнена
//		ДатаС 						- Дата 						- Обязательно заполнена
//		ДатаПо 						- Дата 						- Обязательно заполнена
//		}
//
//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-26 (#3821) 
//Процедура ок_ПолучениеНовыхПакетовЭД() Экспорт
Процедура ок_ПолучениеНовыхПакетовЭД(ДопПараметры = Неопределено) Экспорт	
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-26 (#3821) 	

	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-20 (#3821)
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ДатаНачалаРЗ = ТекущаяДатаСеанса();
	
	ЭтоРЗ = Не ДопПараметры.Свойство("ЭтоРЗ")
		Или ДопПараметры.ЭтоРЗ = Истина;
		
	ЕстьОшибки = Ложь;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-20 (#3821)

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-20 (#4175)
	СтруктураДляРС = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
															Метаданные.РегламентныеЗадания.ок_ПолучениеНовыхПакетовЭД.Синоним,
															ЭтоРЗ,
															ЕстьОшибки,
															0);
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляРС, Истина);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-20 (#4175) 

	Попытка
		СоотвСоглашений = Неопределено;
		КоличествоПакетов = 0; 
		Если ОбменСКонтрагентамиСлужебный.ДоступныПараметрыДляАвторизацииНаСервереОператора( , СоотвСоглашений
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-10-02 (#3879)
			, 
			,ДопПараметры 
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-10-02 (#3879) 
			) Тогда
			
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашений);
			
		КонецЕсли;
		
		НачалоЗамера = ТекущаяДатаСеанса();
		ОтразитьЗаписьЛогаОценкиПроизводительности("Начало получения новых пакетов ЭД");
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-26 (#3821)
		//НовыеДокументы = ОбменСКонтрагентамиСлужебный.ПолучитьНовыеЭД(СоотвСоглашений);
		НовыеДокументы = ОбменСКонтрагентамиСлужебный.ПолучитьНовыеЭД(СоотвСоглашений,
																		,
																		,
																		ДопПараметры);
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-26 (#3821)
		
		ОтразитьЗаписьЛогаОценкиПроизводительности("Конец получения новых пакетов ЭД ; Длительность (сек.): " 
														+ Строка(ТекущаяДатаСеанса() - НачалоЗамера) + "; Количество пакетов: " + КоличествоПакетов);
														
		КоличествоПакетов = НовыеДокументы.МассивПакетовЭД.Количество();
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-01 (#3821)
		Если ДопПараметры.Свойство("МассивПакетовЭД") Тогда
			ДопПараметры.МассивПакетовЭД = НовыеДокументы.МассивПакетовЭД;
		КонецЕсли;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-01 (#3821)
		
		ШаблонСообщения = НСтр("ru = 'Закончено регламентное задание.
									|Получено пакетов: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПакетов);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, "РегламентныеЗадания",
			УровеньЖурналаРегистрации.Информация);
	Исключение
		
		Операция = НСтр("ru = 'Регламентное получение новых пакетов ЭД'");
		
		ШаблонСообщения = НСтр("ru = 'При процессе выполнении произошла ошибка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения);
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-01 (#3821) 
		ЕстьОшибки = Истина;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-01 (#3821)
	КонецПопытки;
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-20 (#3821)
	СтруктураДляРС = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
															Метаданные.РегламентныеЗадания.ок_ПолучениеНовыхПакетовЭД.Синоним,
															ЭтоРЗ,
															ЕстьОшибки,
															КоличествоПакетов);
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляРС);
	ДопПараметры.Вставить("ДатаНачалаРЗ", ДатаНачалаРЗ);
	ДопПараметры.Вставить("ДатаОкончания", СтруктураДляРС.ДатаОкончания);
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-20 (#3821)
	
КонецПроцедуры

Процедура ок_РаспаковкаПакетовЭД(ДопПараметры = Неопределено) Экспорт
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-20 (#3821)
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ДатаНачалаРЗ = ТекущаяДатаСеанса();
	
	ЭтоРЗ = Не ДопПараметры.Свойство("ЭтоРЗ")
		Или ДопПараметры.ЭтоРЗ = Истина;
		
	МассивПакетовЭДДляОтбора = Новый Массив;
	ОтборПоДокументам = Ложь;
	Если ДопПараметры.Свойство("МассивПакетовЭД")
		И ТипЗнч(ДопПараметры.МассивПакетовЭД) = Тип("Массив")
	Тогда
		МассивПакетовЭДДляОтбора = ДопПараметры.МассивПакетовЭД;
		ОтборПоДокументам = Истина;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-20 (#3821)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-20 (#4175)
	СтруктураДляРС = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
															Метаданные.РегламентныеЗадания.ок_РаспаковкаПакетовЭД.Синоним,
															ЭтоРЗ,
															ЕстьОшибки,
															0);
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляРС, Истина);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-20 (#4175)
	
	Попытка
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-31 (#4181)
		ОтменяющиеКодыТранзакции = ок_ОбщегоНазначенияСерверПовтИсп.ПолучитьМассивОтменяющихКодовТранзакции();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетЭД.Ссылка КАК ПакетЭД
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|ГДЕ
		|	ПакетЭД.ок_КодТранзакции В(&ОтменяющиеКодыТранзакции)
		|	И НЕ ПакетЭД.ПометкаУдаления
		|	И ПакетЭД.ок_АктуальнаяРедакция
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-10-04 (#4161)
		//|	И ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.КРаспаковке)";
		|	И ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.КРаспаковке)
		|	И ПакетЭД.Ссылка В (&МассивПакетовЭДДляОтбора)";
		
		Если ОтборПоДокументам Тогда // отбор только по документам, отбор по статусу в этом случае удаляется
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.КРаспаковке)", "");
			Запрос.УстановитьПараметр("МассивПакетовЭДДляОтбора", МассивПакетовЭДДляОтбора);
			
		Иначе // отбор только по статусу, отбор по документам в этом случае удаляется
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПакетЭД.Ссылка В (&МассивПакетовЭДДляОтбора)", "");
		КонецЕсли;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-10-04 (#4161)
		
		Запрос.УстановитьПараметр("ОтменяющиеКодыТранзакции", ОтменяющиеКодыТранзакции);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ПараметрыОбработкиДокументов = Новый Структура;
			ПараметрыОбработкиДокументов.Вставить("ОбрабатываемыеДокументы", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПакетЭД"));
			
			ОбработатьОтмененныеДокументы(ПараметрыОбработкиДокументов);
			
		КонецЕсли;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-31 (#4181)
		
		КолРаспакованныхЭД = 0;
		
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2021-02-03 (#4056)
		ТекстЗапросаПервые = "";
		Если ЭтоРЗ Тогда
			КоличествоПакетовВПорции = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЭДО", "ПорцияДляРаспаковкиПакетовЭДО");
			Если ЗначениеЗаполнено(КоличествоПакетовВПорции) Тогда
				ТекстЗапросаПервые = "ПЕРВЫЕ " + КоличествоПакетовВПорции;
			Иначе
				ТекстЗапросаПервые = "ПЕРВЫЕ 1000";
			КонецЕсли;
		КонецЕсли;		
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2021-02-03 (#4056)
		
		Запрос = Новый Запрос;

		Запрос.Текст =
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2021-02-03 (#4056)	
		//"ВЫБРАТЬ
		"ВЫБРАТЬ " + ТекстЗапросаПервые + "
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2021-02-03 (#4056)
		|	ПакетЭД.Ссылка КАК Пакет
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|ГДЕ
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-01 (#3821)
		//|	ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.КРаспаковке)
		|	&УсловиеДляОтбора
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-01 (#3821)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-10-04 (#4161)
		//|	И НЕ ПакетЭД.ПометкаУдаления";
		|	И НЕ ПакетЭД.ПометкаУдаления
		|	И ПакетЭД.СтатусПакета <> ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.Отменен)";
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-10-04 (#4161)
		
		Если ОтборПоДокументам Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДляОтбора", "ПакетЭД.Ссылка В(&МассивПакетовЭДДляОтбора)");
			Запрос.УстановитьПараметр("МассивПакетовЭДДляОтбора", МассивПакетовЭДДляОтбора);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДляОтбора", "ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.КРаспаковке)");
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.Пустой() Тогда
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-02 (#4342)
			СтруктураДляРС = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
															Метаданные.РегламентныеЗадания.ок_РаспаковкаПакетовЭД.Синоним,
															ЭтоРЗ,
															ЕстьОшибки,
															КолРаспакованныхЭД);
			ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляРС);
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-02 (#4342)
			Возврат;
		КонецЕсли;
		
		МассивПакетовЭД = Результат.Выгрузить().ВыгрузитьКолонку("Пакет");
		
		НачалоЗамера = ТекущаяДатаСеанса();
		ОтразитьЗаписьЛогаОценкиПроизводительности("Начало распаковки пакетов ЭДО");
			
		// Распаковываем принятые пакеты с электронными документами.
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-19 (#3816)
		//ОбменСКонтрагентамиСлужебный.РаспаковатьПакетыЭДНаСервере(МассивПакетовЭД, КолРаспакованныхЭД);
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебный.НовыйКонтекстОперации();
		ОбменСКонтрагентамиСлужебный.РаспаковатьПакетыЭДНаСервере(МассивПакетовЭД, 
																	КолРаспакованныхЭД, 
																	КонтекстОперации);
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-19 (#3816)
		
		ОтразитьЗаписьЛогаОценкиПроизводительности("Конец распаковки пакетов ЭДО ; Длительность (сек.): " 
														+ Строка(ТекущаяДатаСеанса() - НачалоЗамера) + "; Количество распакованных: " + КолРаспакованныхЭД);
			
		ШаблонСообщения = НСтр("ru = 'Закончено регламентное задание.
									|Распаковано: %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КолРаспакованныхЭД);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, "РегламентныеЗадания",
			УровеньЖурналаРегистрации.Информация);
			
	Исключение
		
		Операция = НСтр("ru = 'Регламентное распаковка пакетов ЭД'");
		
		ШаблонСообщения = НСтр("ru = 'При процессе выполнении произошла ошибка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения);
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-01 (#3821) 
		ЕстьОшибки = Истина;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-01 (#3821)
	КонецПопытки;
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-20 (#3821)
	Если ОтборПоДокументам Тогда
		
		Попытка
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПакетЭД.Ссылка КАК Пакет
			|ИЗ
			|	Документ.ПакетЭД КАК ПакетЭД
			|ГДЕ
			|	ПакетЭД.Ссылка В (&УсловиеДляОтбора)
			|	И НЕ ПакетЭД.ПометкаУдаления
			|	И ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.РаспакованДокументыНеОбработаны)
			|";
			
			Запрос.УстановитьПараметр("УсловиеДляОтбора", МассивПакетовЭДДляОтбора);
			
			УстановитьПривилегированныйРежим(Истина);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				ЕстьОшибки = Истина;
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ПакетЭДОбъект 				= ВыборкаДетальныеЗаписи.Пакет.ПолучитьОбъект();
					ПакетЭДОбъект.СтатусПакета 	= Перечисления.СтатусыПакетовЭД.КРаспаковке;
					ПакетЭДОбъект.Записать();
				КонецЦикла;
				
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		Исключение
			УстановитьПривилегированныйРежим(Ложь);
		КонецПопытки;
	КонецЕсли;
	
	СтруктураДляРС = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
															Метаданные.РегламентныеЗадания.ок_РаспаковкаПакетовЭД.Синоним,
															ЭтоРЗ,
															ЕстьОшибки,
															КолРаспакованныхЭД);
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляРС);
	ДопПараметры.Вставить("ДатаОкончания", СтруктураДляРС.ДатаОкончания);
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-20 (#3821)
	
КонецПроцедуры
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-07-13 (#3796)

//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОтправителя, ИДПолучателя, ВидЭД = Неопределено, ПрикладнойВидЭД = Неопределено) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	 "ВЫБРАТЬ
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Организация,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Контрагент,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.АдресОтправителя КАК АдресОтправителя,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.АдресПолучателя КАК АдресПолучателя,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД КАК СпособОбменаЭД
	 |ИЗ
	 |	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	 |		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
	 |			И НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
	 |ГДЕ
	 |	ВЫБОР
	 |			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
	 |				ТОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя = &ИдентификаторКонтрагента
	 |			ИНАЧЕ ИСТИНА
	 |		КОНЕЦ
	 |	И ВЫБОР
	 |			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
	 |				ТОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = &ИдентификаторОрганизации
	 |			ИНАЧЕ ИСТИНА
	 |		КОНЕЦ
	 |	И ВЫБОР
	 |			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	 |				ТОГДА ИСТИНА
	 |			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрикладнойЭД)
	 |				ТОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.ПрикладнойВидЭД = &ПрикладнойВидЭД
	 |			ИНАЧЕ НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидЭД
	 |		КОНЕЦ
	 |	И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОтправителя);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Запрос.УстановитьПараметр("ПрикладнойВидЭД", ПрикладнойВидЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         	ИДОтправителя);
		СтруктураВозврата.Вставить("Получатель",          	ИДПолучателя);
		СтруктураВозврата.Вставить("Организация",         	Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          	Выборка.Контрагент);
		СтруктураВозврата.Вставить("ПрофильНастроекЭДО",	ИДОтправителя);
		НастройкаЭДО = Новый Структура("Отправитель, Получатель", ИДОтправителя, ИДПолучателя);
		СтруктураВозврата.Вставить("НастройкаЭДО",      	НастройкаЭДО);
		СтруктураВозврата.Вставить("СпособОбменаЭД",    	Выборка.СпособОбменаЭД);
		СтруктураВозврата.Вставить("АдресОтправителя", 		Выборка.АдресОтправителя);
		СтруктураВозврата.Вставить("АдресПолучателя",  		Выборка.АдресПолучателя);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции
//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-07-22 (#3787)
Процедура ок_ОтправкаПовторныхПисемНаСогласованиеЭД() Экспорт
	
	ОтправитьПовторныеПисьмаНаСогласованиеВходящихЭлектронныхДокументов();
	
КонецПроцедуры
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-07-22 (#3787)

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-18 (#3849)
Процедура ок_ПроверкаФайловЭДО() Экспорт
	
	ДатаНачалаРЗ 				= ТекущаяДатаСеанса();
	ЕстьОшибки 					= Ложь;
	КоличествоОбъектов 			= 0;
	КоличествоОбъектовСОшибками = 0;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-20 (#4175)
	СтруктураДляРС = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
															Метаданные.РегламентныеЗадания.ок_ПроверкаФайловЭДО.Синоним,
															Истина,
															ЕстьОшибки,
															0);
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляРС);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-20 (#4175) 

	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетЭДПрисоединенныеФайлы.Ссылка КАК ФайлЭД,
		|	ПакетЭДПрисоединенныеФайлы.Наименование КАК Наименование,
		|	ПакетЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ,
		|	ИСТИНА КАК ЗначимыйФайл
		|ПОМЕСТИТЬ ТабДанныеФайлов
		|ИЗ
		|	Справочник.ПакетЭДПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
		|ГДЕ
		|	НЕ ПакетЭДПрисоединенныеФайлы.ПометкаУдаления
		|	И ПакетЭДПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-12-28 (#3964)
		|	И ПакетЭДПрисоединенныеФайлы.ВладелецФайла.СтатусПакета <> ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ок_АрхивУдален)
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-12-28 (#3964)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	ЭДПрисоединенныеФайлы.Наименование,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла,
		|	ВЫБОР
		|			КОГДА ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД)
		|					И (ЭДПрисоединенныеФайлы.Расширение = ""html""
		|						ИЛИ ЭДПрисоединенныеФайлы.Расширение = ""HTML""
		|						ИЛИ ЭДПрисоединенныеФайлы.Расширение = ""Html"")
		|					И ЭДПрисоединенныеФайлы.НаименованиеФайла = ""Справка о прохождении""
		|				ТОГДА ИСТИНА
		|			КОГДА ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД)
		|				ТОГДА ЛОЖЬ
		|			КОГДА ЭДПрисоединенныеФайлы.ок_ВходитВПакетЭД
		|					И (ЭДПрисоединенныеФайлы.Расширение = ""xml""
		|						ИЛИ ЭДПрисоединенныеФайлы.Расширение = ""XML""
		|						ИЛИ ЭДПрисоединенныеФайлы.Расширение = ""Xml"")
		|				ТОГДА ЛОЖЬ
		|			КОГДА ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД)
		|				ТОГДА ИСТИНА
		|			КОГДА ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_ВнутренняяПереписка)
		|				ТОГДА ИСТИНА
		|			КОГДА НЕ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ОсновныеТипыЭД)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		И ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ЭлектронныйДокументВходящий).ок_ДатаРедакцииОтправленной = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА НЕ ЭДПрисоединенныеФайлы.ок_Неактуальный
		|			ИНАЧЕ ЭДПрисоединенныеФайлы.ДатаФормированияЭДОтправителем = ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ЭлектронныйДокументВходящий).ок_ДатаРедакцииОтправленной
		|		КОНЕЦ
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|	И ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|	И ЭДПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ок_НенайденныеФайлыЭДО.ПрисоединенныйФайл КАК ЗначениеИзмерения,
		|	""ок_НенайденныеФайлыЭДО"" КАК ИмяРС,
		|	""ПрисоединенныйФайл"" КАК ИмяИзмерения
		|ИЗ
		|	РегистрСведений.ок_НенайденныеФайлыЭДО КАК ок_НенайденныеФайлыЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабДанныеФайлов КАК ТабДанныеФайлов
		|		ПО ок_НенайденныеФайлыЭДО.ПрисоединенныйФайл = ТабДанныеФайлов.ФайлЭД
		|			И (НЕ ТабДанныеФайлов.Документ.ПометкаУдаления)
		|ГДЕ
		|	ТабДанныеФайлов.ФайлЭД ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ок_ЭлектронныеДокументыСОтсутствующимиФайлами.Документ,
		|	""ок_ЭлектронныеДокументыСОтсутствующимиФайлами"",
		|	""Документ""
		|ИЗ
		|	РегистрСведений.ок_ЭлектронныеДокументыСОтсутствующимиФайлами КАК ок_ЭлектронныеДокументыСОтсутствующимиФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабДанныеФайлов КАК ТабДанныеФайлов
		|		ПО ок_ЭлектронныеДокументыСОтсутствующимиФайлами.Документ = ТабДанныеФайлов.Документ
		|			И (НЕ ТабДанныеФайлов.Документ.ПометкаУдаления)
		|ГДЕ
		|	ТабДанныеФайлов.ФайлЭД ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабДанныеФайлов.ФайлЭД КАК ФайлЭД,
		|	ТабДанныеФайлов.Наименование КАК Наименование,
		|	ТабДанныеФайлов.Документ КАК Документ,
		|	ок_НенайденныеФайлыЭДО.ПутьКФайлу КАК ПутьКФайлу,
		|	ВЫБОР
		|		КОГДА НЕ ок_НенайденныеФайлыЭДО.ПрисоединенныйФайл ЕСТЬ NULL
		|				И ТабДанныеФайлов.Документ <> ок_НенайденныеФайлыЭДО.Документ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеАктуальныйДокумент,
		|	ВЫБОР
		|		КОГДА НЕ ок_НенайденныеФайлыЭДО.ПрисоединенныйФайл ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗаписьЕстьВРС,
		|	ТабДанныеФайлов.ЗначимыйФайл КАК ЗначимыйФайл
		|ИЗ
		|	ТабДанныеФайлов КАК ТабДанныеФайлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_НенайденныеФайлыЭДО КАК ок_НенайденныеФайлыЭДО
		|		ПО ТабДанныеФайлов.ФайлЭД = ок_НенайденныеФайлыЭДО.ПрисоединенныйФайл
		|ИТОГИ ПО
		|	Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ок_ЭлектронныеДокументыСОтсутствующимиФайлами.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.ок_ЭлектронныеДокументыСОтсутствующимиФайлами КАК ок_ЭлектронныеДокументыСОтсутствующимиФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_НенайденныеФайлыЭДО КАК ок_НенайденныеФайлыЭДО
		|		ПО ок_ЭлектронныеДокументыСОтсутствующимиФайлами.Документ = ок_НенайденныеФайлыЭДО.Документ
		|ГДЕ
		|	ок_НенайденныеФайлыЭДО.ПрисоединенныйФайл ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("ОсновныеТипыЭД", ОбменСКонтрагентамиСлужебный.ОсновныеТипыЭД());
		
		РезультатЗапросаПакет = Запрос.ВыполнитьПакет();
		
		//Очистим неактуальные записи
		ВыборкаНеактуальные = РезультатЗапросаПакет[1].Выбрать();
		
		Пока ВыборкаНеактуальные.Следующий() Цикл
			НаборРС = РегистрыСведений[ВыборкаНеактуальные.ИмяРС].СоздатьНаборЗаписей();
			НаборРС.Отбор[ВыборкаНеактуальные.ИмяИзмерения].Установить(ВыборкаНеактуальные.ЗначениеИзмерения);
			НаборРС.Записать();
		КонецЦикла;
		
		ВыборкаНеактуальные = РезультатЗапросаПакет[3].Выбрать();
		
		Пока ВыборкаНеактуальные.Следующий() Цикл
			НаборРС = РегистрыСведений.ок_ЭлектронныеДокументыСОтсутствующимиФайлами.СоздатьНаборЗаписей();
			НаборРС.Отбор.Документ.Установить(ВыборкаНеактуальные.Документ);
			НаборРС.Записать();
		КонецЦикла;
		
		//Проверка наличия файлов
		ВыборкаДокумент = РезультатЗапросаПакет[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДокумент.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаДокумент.Выбрать();
			
			ЗначимыйФайл 	= Ложь;
			СчитатьДокумент = Ложь;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				КоличествоОбъектов = КоличествоОбъектов + 1;
				
				СвойстваФайла = РаботаСФайламиВТомахСлужебный.СвойстваФайлаВТоме();
				ЗаполнитьЗначенияСвойств(СвойстваФайла, ВыборкаДетальныеЗаписи.ФайлЭД);
				
				ПутьКФайлу = РаботаСФайламиВТомахСлужебный.ПолноеИмяФайлаВТоме(СвойстваФайла);
				ФайлПакета = Новый Файл(ПутьКФайлу);
				Если Не ФайлПакета.Существует() Тогда
					
					Если Не ВыборкаДетальныеЗаписи.ЗаписьЕстьВРС
						Или Не ВыборкаДетальныеЗаписи.НеАктуальныйДокумент
						Или ПутьКФайлу <> ВыборкаДетальныеЗаписи.ПутьКФайлу Тогда
						
						НаборРС = РегистрыСведений.ок_НенайденныеФайлыЭДО.СоздатьНаборЗаписей();
						НаборРС.Отбор.ПрисоединенныйФайл.Установить(ВыборкаДетальныеЗаписи.ФайлЭД);
						НоваяСтрока = НаборРС.Добавить();
						НоваяСтрока.ПрисоединенныйФайл = ВыборкаДетальныеЗаписи.ФайлЭД;
						НоваяСтрока.ПутьКФайлу = ПутьКФайлу;
						НоваяСтрока.Документ = ВыборкаДетальныеЗаписи.Документ;
						НаборРС.Записать();
					КонецЕсли;
					
					Если ВыборкаДетальныеЗаписи.ЗначимыйФайл Тогда
						ЗначимыйФайл = Истина;
					КонецЕсли;
					
					ИмяСобытияЖР ="Проверка файлов ЭДО";
					МетаданныеДляЖР = ВыборкаДетальныеЗаписи.ФайлЭД.Метаданные();
					КомментарийЖР = "По " + ВыборкаДетальныеЗаписи.Документ + " отсутсвует файл " + ВыборкаДетальныеЗаписи.ФайлЭД + " в каталоге " + ФайлПакета.Путь;
					ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, МетаданныеДляЖР, ВыборкаДетальныеЗаписи.ФайлЭД, КомментарийЖР);
					
					СчитатьДокумент = Истина;
					
				ИначеЕсли ВыборкаДетальныеЗаписи.ЗаписьЕстьВРС Тогда //Файл существует, и он есть в РС
					НаборРС = РегистрыСведений.ок_НенайденныеФайлыЭДО.СоздатьНаборЗаписей();
					НаборРС.Отбор.ПрисоединенныйФайл.Установить(ВыборкаДетальныеЗаписи.ФайлЭД);
					НаборРС.Записать();
				КонецЕсли;
			КонецЦикла;
			
			НаборРС = РегистрыСведений.ок_ЭлектронныеДокументыСОтсутствующимиФайлами.СоздатьНаборЗаписей();
			НаборРС.Отбор.Документ.Установить(ВыборкаДокумент.Документ);
			Если ЗначимыйФайл Тогда
				НоваяСтрока = НаборРС.Добавить();
				НоваяСтрока.Документ = ВыборкаДокумент.Документ;
			КонецЕсли;
			НаборРС.Записать();
			
			Если СчитатьДокумент Тогда
				КоличествоОбъектовСОшибками = КоличествоОбъектовСОшибками + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		ЕстьОшибки = Истина;
		
		Операция = НСтр("ru = 'Регламентная проверка файлов ЭД'");
		
		ШаблонСообщения = НСтр("ru = 'При процессе выполнении произошла ошибка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения, , "РегламентныеЗадания");
	КонецПопытки;
	
	
	СтруктураДляРС = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
																										Метаданные.РегламентныеЗадания.ок_ПроверкаФайловЭДО.Синоним,
																										Истина,
																										ЕстьОшибки,
																										КоличествоОбъектов);
	СтруктураДляРС.Вставить("КоличествоОбъектовСОшибками", КоличествоОбъектовСОшибками);
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляРС);
	
КонецПроцедуры
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-18 (#3849)


//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-12-05 (#3964)
Функция ТекстЗапросаДляОчисткиФайловПакетЭД() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПакетЭДЭлектронныеДокументы.ОбъектВладелец) КАК ЭлектронныйДокумент,
		|	ПакетЭДЭлектронныеДокументы.Ссылка КАК ПакетЭД
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
		|ГДЕ
		|	ПакетЭДЭлектронныеДокументы.Ссылка.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.Распакован)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПакетЭДЭлектронныеДокументы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|
		//|	СправочникФайлы.Ссылка,
		|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) КАК ВладелецФайла,
		|	Файлы.Размер /1024 /1024 КАК ОбъемНенужныхФайлов,
		|	Файлы.Ссылка КАК ФайлСсылка,
		|
		|	ВТ.ПакетЭД КАК Ссылка,
		|	ВТ.ПакетЭД.Ссылка КАК ПакетЭД,
		|	ВТ.ПакетЭД.Дата КАК Дата,
		|	ВТ.ПакетЭД.Контрагент КАК Контрагент,
		|	ВТ.ПакетЭД.Направление КАК Направление,
		|	ВТ.ПакетЭД.Организация КАК Организация,
		|	ВТ.ПакетЭД.ок_КодТранзакции КАК КодТранзакции,
		|	ВТ.ПакетЭД.ок_ДатаТранзакции КАК ДатаТранзакции,
		|	ВТ.ПакетЭД.ок_Дата КАК ок_Дата,
		|	ВТ.ПакетЭД.ок_ДатаРедакции КАК ДатаРедакции,
		|	РАЗНОСТЬДАТ(ВТ.ПакетЭД.Дата, &ТекущаяДата, ДЕНЬ) КАК ДнейДоУдаленияОтДата,
		|	РАЗНОСТЬДАТ(ВТ.ПакетЭД.ок_ДатаТранзакции, &ТекущаяДата, ДЕНЬ) КАК ДнейДоУдаленияОтДатаТранзакции,
		|	РАЗНОСТЬДАТ(ВТ.ПакетЭД.ок_ДатаРедакции, &ТекущаяДата, ДЕНЬ) КАК ДнейДоУдаленияОтДатаРедакции,
		|	РАЗНОСТЬДАТ(ВТ.ПакетЭД.ок_Дата, &ТекущаяДата, ДЕНЬ) КАК ДнейДоУдаленияОток_Дата,
		|	ВЫБОР
		|		КОГДА ВТ.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|			ТОГДА ЭлектронныйДокументВходящий.Ссылка
		|		КОГДА ВТ.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументИсходящий
		|			ТОГДА ЭлектронныйДокументИсходящий.Ссылка
		|		ИНАЧЕ ВТ.ЭлектронныйДокумент
		|	КОНЕЦ КАК ЭлектронныйДокумент,
		|	ВЫБОР
		|		КОГДА ВТ.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|			ТОГДА ЭлектронныйДокументВходящий.Дата
		|		КОГДА ВТ.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументИсходящий
		|			ТОГДА ЭлектронныйДокументИсходящий.Дата
		|		ИНАЧЕ ДАТАВРЕМЯ(2100, 1, 1)
		|	КОНЕЦ КАК ЭлектронныйДокументДата,
		|	РАЗНОСТЬДАТ(ВЫБОР
		|			КОГДА ВТ.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|				ТОГДА ЭлектронныйДокументВходящий.Дата
		|			КОГДА ВТ.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументИсходящий
		|				ТОГДА ЭлектронныйДокументИсходящий.Дата
		|			ИНАЧЕ ДАТАВРЕМЯ(2100, 1, 1)
		|		КОНЕЦ, &ТекущаяДата, ДЕНЬ) КАК ДнейДоУдаленияОтЭлектронныйДокументДата,
		|	ВЫБОР
		|		КОГДА ВТ.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|			ТОГДА ЭлектронныйДокументВходящий.ок_Статус
		|		КОГДА ВТ.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументИсходящий
		|			ТОГДА ЭлектронныйДокументИсходящий.ок_Статус
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ЭлектронныйДокументСтатус
		|ИЗ
		|	Справочник.ПакетЭДПрисоединенныеФайлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|			ПО Файлы.ВладелецФайла = ВТ.ПакетЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|		ПО ВТ.ЭлектронныйДокумент = ЭлектронныйДокументВходящий.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|		ПО ВТ.ЭлектронныйДокумент = ЭлектронныйДокументИсходящий.Ссылка
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА Файлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
		|				ТОГДА (ВЫРАЗИТЬ(Файлы.ПутьКФайлу КАК СТРОКА(100))) <> """"
		|						ИЛИ НЕ Файлы.Том = ЗНАЧЕНИЕ(Справочник.ТомаХраненияФайлов.ПустаяСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) = &ТипВладельца
		|";
			
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЭтоПоследнийПакетЭДПоЭлектронномуДокументу(ПакетЭД, ПоследнийПакетЭД = Неопределено) Экспорт
	
	ПоследнийПакетЭД = ПакетЭД;
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	МАКСИМУМ(ПакетЭДЭлектронныеДокументы.ОбъектВладелец) КАК ЭлектронныйДокумент,
	//	|	ПакетЭДЭлектронныеДокументы.Ссылка КАК Ссылка,
	//	|	МАКСИМУМ(ВЫБОР
	//	|			КОГДА ПакетЭДЭлектронныеДокументы.ОбъектВладелец ССЫЛКА Документ.ЭлектронныйДокументВходящий
	//	|				ТОГДА ПакетЭДЭлектронныеДокументы.ОбъектВладелец.ок_ДатаРедакцииОтправленной
	//	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	//	|		КОНЕЦ) КАК ок_ДатаРедакцииОтправленной
	//	|ПОМЕСТИТЬ ВТ
	//	|ИЗ
	//	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	//	|ГДЕ
	//	|	ПакетЭДЭлектронныеДокументы.Ссылка = &ПакетЭД
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ПакетЭДЭлектронныеДокументы.Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	ВЫБОР
	//	|		КОГДА ВТ.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящий
	//	|			ТОГДА ВЫБОР
	//	|					КОГДА ВТ.ок_ДатаРедакцииОтправленной <> ДАТАВРЕМЯ(1, 1, 1)
	//	|							И ПакетЭДЭлектронныеДокументы.Ссылка.ок_ДатаРедакции = ВТ.ок_ДатаРедакцииОтправленной
	//	|						ТОГДА 0
	//	|					ИНАЧЕ 1
	//	|				КОНЕЦ
	//	|		ИНАЧЕ 2
	//	|	КОНЕЦ КАК Порядок,
	//	|	ПакетЭДЭлектронныеДокументы.Ссылка КАК Ссылка,
	//	|	ВТ.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	//	|ИЗ
	//	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	//	|		ПО ПакетЭДЭлектронныеДокументы.ОбъектВладелец = ВТ.ЭлектронныйДокумент
	//	|			И (ПакетЭДЭлектронныеДокументы.ОбъектВладелец <> НЕОПРЕДЕЛЕНО)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Порядок,
	//	|	ПакетЭДЭлектронныеДокументы.Ссылка.ок_ДатаТранзакции УБЫВ";
	
	//сказали сделать чтобы оставался последний пакет по каждой редакции
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПакетЭДЭлектронныеДокументы.ОбъектВладелец) КАК ЭлектронныйДокумент,
		|	ПакетЭДЭлектронныеДокументы.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ПакетЭДЭлектронныеДокументы.Ссылка.ок_ДатаРедакции) КАК ок_ДатаРедакции
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
		|ГДЕ
		|	ПакетЭДЭлектронныеДокументы.Ссылка = &ПакетЭД
		|
		|СГРУППИРОВАТЬ ПО
		|	ПакетЭДЭлектронныеДокументы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПакетЭДЭлектронныеДокументы.Ссылка КАК Ссылка,
		|	ВТ.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО ПакетЭДЭлектронныеДокументы.ОбъектВладелец = ВТ.ЭлектронныйДокумент
		|			И (ПакетЭДЭлектронныеДокументы.ОбъектВладелец <> НЕОПРЕДЕЛЕНО)
		|			И ПакетЭДЭлектронныеДокументы.Ссылка.ок_ДатаРедакции = ВТ.ок_ДатаРедакции
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПакетЭДЭлектронныеДокументы.Ссылка.ок_ДатаТранзакции УБЫВ,
		|	Ссылка УБЫВ";
	Запрос.УстановитьПараметр("ПакетЭД", ПакетЭД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Не ЗначениеЗаполнено(Выборка.ЭлектронныйДокумент) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПоследнийПакетЭД = Выборка.Ссылка;
	
	Возврат ПоследнийПакетЭД = ПакетЭД;
	
КонецФункции	

Функция ЕстьВсеФайлыЭлектронногоДокументаПакетаЭД(ПакетЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПакетЭДЭлектронныеДокументы.ОбъектВладелец) КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
		|ГДЕ
		|	ПакетЭДЭлектронныеДокументы.Ссылка = &ПакетЭД
		|
		|СГРУППИРОВАТЬ ПО
		|	ПакетЭДЭлектронныеДокументы.Ссылка";
	
	Запрос.УстановитьПараметр("ПакетЭД", ПакетЭД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Не ЗначениеЗаполнено(Выборка.ЭлектронныйДокумент) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Выборка.ЭлектронныйДокумент) <> Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
	               |	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	               |	И ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
	               |	И ЭДПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
	               |	И ЭДПрисоединенныеФайлы.ВладелецФайла = &ЭлектронныйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", Выборка.ЭлектронныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПрисоединенныйФайлОбъект = Выборка.Ссылка.ПолучитьОБъект();
	
		СвойстваФайла = РаботаСФайламиВТомахСлужебный.СвойстваФайлаВТоме();
		ЗаполнитьЗначенияСвойств(СвойстваФайла, ПрисоединенныйФайлОбъект);
		ИмяФайла = РаботаСФайламиВТомахСлужебный.ПолноеИмяФайлаВТоме(СвойстваФайла);
		Если ПустаяСтрока(ИмяФайла) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайла);
		Если Не Файл.Существует() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-12-05 (#3964)

//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
Процедура ок_ПередЗаписьюЭдПрисоединенныеФайлыПередЗаписью(Источник, Отказ) Экспорт
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	//неактуальные файлы снимаем с отправки
	Если Источник.ок_Неактуальный Тогда 
		Источник.ок_КОтправке = Ложь;
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьТекстЗапросаПрисоединенныеФайлыВходящегоЭДДляОтображения() Экспорт
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Данные.Ссылка КАК ПрисоединенныйФайл,
			|	Данные.Расширение КАК Расширение,
			|	Данные.НаименованиеФайла + ВЫБОР
			|		КОГДА Данные.Расширение = """"
			|			ТОГДА """"
			|		ИНАЧЕ "".""
			|	КОНЕЦ + Данные.Расширение КАК Имя,
			|	Данные.ДатаМодификацииУниверсальная КАК ДатаИзменения,
			|	Данные.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
			|	Данные.ок_Отправлен КАК ок_Отправлен,
			|	Данные.ДатаФормированияЭДОтправителем КАК ДатаФормированияЭДОтправителем,
			|	Данные.ок_НомерВерсииЭД КАК ок_НомерВерсииЭД,
			|	Данные.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_ВнутренняяПереписка) КАК ВнутренняяПереписка,
			|	ВЫБОР
			|		КОГДА ЭлектронныйДокумент.ок_ДатаРедакцииОтправленной = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА НЕ Данные.ок_Неактуальный
			|		ИНАЧЕ Данные.ДатаФормированияЭДОтправителем = ЭлектронныйДокумент.ок_ДатаРедакцииОтправленной
			|	КОНЕЦ КАК АктуальнаяВерсия,
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
			|	Данные.ок_ТипДокумента КАК ТипДокумента,
			|	Данные.ок_НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	Данные.ок_ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
			|	Данные.ок_Неактуальный КАК ок_Неактуальный
			//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
			|	, Данные.Размер КАК Размер
			|	, Данные.ок_КОтправке КАК ок_КОтправке
			//ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокумент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК Данные
			|		ПО (ЭлектронныйДокумент.Ссылка = &ВладелецФайла)
			|			И ЭлектронныйДокумент.Ссылка = Данные.ВладелецФайла
			|ГДЕ
			|	ВЫБОР
			|			КОГДА &ОтображатьВсеФайлы
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ВЫБОР
			//|					КОГДА Данные.ок_Неактуальный
			//|						ТОГДА ЛОЖЬ
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-07 (#3510)
			|					КОГДА Данные.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД)
			|						И (Данные.Расширение = ""html""
			|							ИЛИ Данные.Расширение = ""HTML""
			|							ИЛИ Данные.Расширение = ""Html"")
			|						И Данные.НаименованиеФайла = ""Справка о прохождении""
			|						ТОГДА ИСТИНА
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-07 (#3510)
			|					КОГДА Данные.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_СлужебныйЭД)
			|						ТОГДА ЛОЖЬ
			|					КОГДА Данные.ок_ВходитВПакетЭД
			|							И (Данные.Расширение = ""xml""
			|								ИЛИ Данные.Расширение = ""XML""
			|								ИЛИ Данные.Расширение = ""Xml"")
			|						ТОГДА ЛОЖЬ
			|					КОГДА Данные.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД)
			|						ТОГДА ИСТИНА
			|					КОГДА Данные.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_ВнутренняяПереписка)
			|						ТОГДА ИСТИНА
			|					КОГДА НЕ Данные.ТипЭлементаВерсииЭД В (&ОсновныеТипыЭД)
			|						ТОГДА ЛОЖЬ
			|					ИНАЧЕ ИСТИНА
			|				КОНЕЦ
			|				И ВЫБОР
			|					КОГДА ЭлектронныйДокумент.ок_ДатаРедакцииОтправленной = ДАТАВРЕМЯ(1, 1, 1)
			|						ТОГДА НЕ Данные.ок_Неактуальный
			|					ИНАЧЕ Данные.ДатаФормированияЭДОтправителем = ЭлектронныйДокумент.ок_ДатаРедакцииОтправленной
			|				КОНЕЦ
			|		КОНЕЦ
			|	И НЕ Данные.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаФормированияЭДОтправителем УБЫВ";
	
КонецФункции

Функция ПолучитьПрисоединенныеФайлыВходящегоЭДДляОтправки(Документ, ОтображатьВсеФайлы = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПрисоединенныеФайлыВходящегоЭДДляОтображения());
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"И НЕ Данные.ПометкаУдаления","И НЕ Данные.ПометкаУдаления И НЕ Данные.ок_Неактуальный И НЕ Данные.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ок_ВнутренняяПереписка)");
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	Запрос.УстановитьПараметр("ОтображатьВсеФайлы", ОтображатьВсеФайлы);
	Запрос.УстановитьПараметр("ОсновныеТипыЭД", ОбменСКонтрагентамиСлужебный.ОсновныеТипыЭД());

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-17 (#4056)
#Область ОптимизацияПолученияСобытийЭДО
 
Процедура ок_ПолучениеНовыхПакетовЭД_2021(ДопПараметры = Неопределено) Экспорт	
 	Перем СоответствиеСоглашений;
	
	ДатаНачалаРЗ = ТекущаяДатаСеанса();
	МетаДатаРЗ = Метаданные.РегламентныеЗадания.Найти("ок_ПолучениеНовыхПакетовЭД");
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ЭтоРЗ = Не ДопПараметры.Свойство("ЭтоРЗ") ИЛИ ДопПараметры.ЭтоРЗ = Истина;
	Если ЭтоРЗ Тогда
		// стандартная процедура проверок при запуске РЗ
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(МетаДатаРЗ);
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-20 (#4175)
	СтруктураДляРС = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
															МетаДатаРЗ,
															Истина,
															Ложь,
															0);
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляРС);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-20 (#4175) 
	 
	Если ОбменСКонтрагентамиСлужебный.ДоступныПараметрыДляАвторизацииНаСервереОператора( , СоответствиеСоглашений, , ДопПараметры) Тогда
		ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоответствиеСоглашений);	
	КонецЕсли;
	 
	Если Не ТипЗнч(СоответствиеСоглашений) = Тип("Соответствие") Тогда
		
		Операция = НСтр("ru = 'Регламентное получение новых пакетов ЭД'");
		ТекстСообщения = НСтр("ru = 'Ошибка обработки соглашений и учетных записей ЭДО");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения);
		
		Возврат;
	КонецЕсли;	
	
	ЕстьОшибки = Ложь; КоличествоПакетов = 0;
	
	Попытка
		// получение новых событий
		Результат = ОбменСКонтрагентамиСлужебный.ПолучитьНовыеЭД(СоответствиеСоглашений, , ,ДопПараметры);
		КоличествоПакетов = Результат.МассивПакетовЭД.Количество();	
	Исключение
		
		Операция = НСтр("ru = 'Регламентное получение новых пакетов ЭД'");
		
		ШаблонСообщения = НСтр("ru = 'При процессе выполнении произошла ошибка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения);
		
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	СтруктураДляРС = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ДатаНачалаРЗ,
			МетаДатаРЗ.Синоним,
			ЭтоРЗ,
			ЕстьОшибки,
			КоличествоПакетов);
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляРС);
	ДопПараметры.Вставить("ДатаНачалаРЗ", ДатаНачалаРЗ);
	ДопПараметры.Вставить("ДатаОкончания", СтруктураДляРС.ДатаОкончания);
	
	Если ДопПараметры.Свойство("МассивПакетовЭД") И Не ЕстьОшибки Тогда
		ДопПараметры.МассивПакетовЭД = Результат.МассивПакетовЭД;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьНовыеЭДОператораЭДО_2021(
			СтруктураВозврата,
			СоотвСоглашенийИСтруктурСертификатов,
			ПолучитьВесьСписок = Ложь,
			ПовторноеПолучение = Ложь,
			ДопПараметры = Неопределено) Экспорт
	
	ИдентификаторОрганизацииДляОтбора = "";
	ПолучитьЭДПоКонтрагенту = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("СтруктураДляПолученияЭДПоКонтрагенту")
		И ТипЗнч(ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту) = Тип("Структура") Тогда
		ИдентификаторОрганизацииДляОтбора = ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ИдентификаторОрганизации;
		ПолучитьЭДПоКонтрагенту = Истина;
	КонецЕсли;
	
	Если ПолучитьЭДПоКонтрагенту И Не ЗначениеЗаполнено(ИдентификаторОрганизацииДляОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	ВестиПодсчетКоличествоОбъектов = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("КоличествоОбъектовСОшибками")
		И ТипЗнч(ДопПараметры.КоличествоОбъектовСОшибками) = Тип("Число")
		И ДопПараметры.Свойство("КоличествоОбъектов")
		И ТипЗнч(ДопПараметры.КоличествоОбъектов) = Тип("Число")
	Тогда
		ВестиПодсчетКоличествоОбъектов = Истина;
	КонецЕсли;
	
	// получим основные настройки для дальнейшей работы с ними
	КоличествоСобытийВПорции = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЭДО", "ПорцияПолученияСобытийОператораСБИС", 100); 
	КоличествоСобытийВПорции = Макс(25, КоличествоСобытийВПорции); 
		
	// обход сертификатов по организациям, по каждому получаем ленту событий
	Для Каждого Элемент Из СоотвСоглашенийИСтруктурСертификатов Цикл
		
		Если ПолучитьЭДПоКонтрагенту = Истина 
			И Элемент.Ключ <> ИдентификаторОрганизацииДляОтбора Тогда
			Продолжить; // нужна конкретная организация для отбора	
		КонецЕсли;	
		
		ПрофильНастроекЭДО 		= Элемент.Ключ;
		СтруктураСертификата 	= Элемент.Значение;
		
		Если ТипЗнч(СтруктураСертификата) <> Тип("Структура") ИЛИ (Не СтруктураСертификата.Свойство("ок_СпособОбменаЭД")) Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(СтруктураСертификата.ок_СпособОбменаЭД) Тогда
			Продолжить;
		КонецЕсли;	
		Если ТипЗнч(СтруктураСертификата.СпособОбменаЭД) <> Тип("ПеречислениеСсылка.ок_СпособыОбменаЭД") Тогда
			СтруктураСертификата.СпособОбменаЭД = СтруктураСертификата.ок_СпособОбменаЭД;
		КонецЕсли;
		
		Если Не СтруктураСертификата.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис") Тогда
			Продолжить;
		КонецЕсли;	
		
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		ПарольКСертификату = Неопределено;
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
			И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
			И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
			СтруктураСертификата.Свойство("ПарольПользователя", ПарольКСертификату);
			Если НЕ ЗначениеЗаполнено(МаркерРасшифрованный) И ПарольКСертификату = Неопределено
				ИЛИ НЕ ОбменСКонтрагентамиСлужебный.РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтруктураСертификата) Тогда
				Продолжить;
			Иначе
				МаркерРасшифрованный = СтруктураСертификата.МаркерРасшифрованный;
			КонецЕсли;
		
		КонецЕсли;
		
		СтруктураВозврата.Профили.Добавить(ПрофильНастроекЭДО);
		
		// готовим соединение с оператором ЭДО СБИС
		Соединение 	= ПолучитьСоединение(СтруктураСертификата.ок_СпособОбменаЭД, СтруктураСертификата);
		Маркер 		= ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(МаркерРасшифрованный);
		
		СтруктураОперации = Новый Структура;
		СтруктураОперации.Вставить("ПовторноеПолучение", 			ПовторноеПолучение);
		СтруктураОперации.Вставить("ПолучитьЭДПоКонтрагенту", 		ПолучитьЭДПоКонтрагенту);
		СтруктураОперации.Вставить("СтруктураСертификата", 			СтруктураСертификата);		
		СтруктураОперации.Вставить("ПрофильЭДО", 					ПрофильНастроекЭДО);
		СтруктураОперации.Вставить("ДопПараметры", 					ДопПараметры);
		СтруктураОперации.Вставить("ЕстьОшибки", 					Ложь);
		СтруктураОперации.Вставить("ПолученыВсеДокументы", 			Ложь);
		СтруктураОперации.Вставить("ДатаПоследнегоСобытия", 		ДатаПоследнегоСобытияОператораЭДО(СтруктураОперации.ПрофильЭДО));
		СтруктураОперации.Вставить("КоличествоСобытийВПорции", 		КоличествоСобытийВПорции);
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-10-06 (#4161)
		//Если ПолучитьЭДПоКонтрагенту Тогда
		//	СтруктураОперации.Вставить("КомандаРесурса", "GetPartnerMessageList");
		//Иначе
		//	СтруктураОперации.Вставить("КомандаРесурса", "GetMessageList");
		//КонецЕсли;	
		СтруктураОперации.Вставить("КомандаРесурса", "GetMessageList");
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-10-06 (#4161)
		
		// начинаем получать ленту событий порциями по 100 и записывать пакеты в базу,
		// после каждой итерации необходимо сдвигать запись в РС с датой начала обработки ленты событий
		Пока Не СтруктураОперации.ПолученыВсеДокументы Цикл
			
			// Этап 1 - получить ленту событий
			НачалоЗамера = ТекущаяДатаСеанса();
			
			// зафиксируем начало этапа в ЖР
			ШаблонСообщения = НСтр("ru = 'Начало получения событий ЭДО, профиль: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО);
			ОтразитьЗаписьЛогаОценкиПроизводительности(ТекстСообщения);
			
			// очередная порция событий
			СписокЭД_XML = ПолучитьПорциюСобытийОтОператораЭДО(Соединение, СтруктураОперации);
			
			Если СтруктураОперации.ЕстьОшибки Тогда
				// при работе с оператором ЭДО возникли ошибки, прекратить обработку
				Операция 		= НСтр("ru = 'Регламентное получение новых пакетов ЭД'");
				ТекстСообщения 	= НСтр("ru = 'При получении событий ЭДО произошла ошибка'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения);
				Прервать; // завершаем цикл и выходим из функции
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'Конец получения событий ЭДО, профиль: %1, Длительность (сек.): %2, Количество событий: %3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО, ТекущаяДатаСеанса() - НачалоЗамера, СписокЭД_XML.Количество());
			ОтразитьЗаписьЛогаОценкиПроизводительности(ТекстСообщения);
			
			Если СписокЭД_XML.Количество() = 0 Тогда // оператор все отдал, уходим в следующий сертификат организации
				// актуализируем РС с датой последнего ЭД
				Если НЕ ПолучитьЭДПоКонтрагенту И СтруктураОперации.ПолученыВсеДокументы Тогда					
					ЗаписатьДатуПоследнегоСобытияЭД(ПрофильНастроекЭДО, СтруктураОперации.ДатаПоследнегоСобытия);	
				КонецЕсли;	
				Прервать;
			КонецЕсли;
			
			// Этап 2 обработка событий
			НачалоЗамера = ТекущаяДатаСеанса();
			ШаблонСообщения = НСтр("ru = 'Начало проверки соответствия событий ЭДО существующим настройкам, профиль: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО);
			ОтразитьЗаписьЛогаОценкиПроизводительности(ТекстСообщения);
	
			// обходим события и дополняем атрибутами полученные данные 
			
			ТаблицаЭД = сбисРазобратьТекстСобытийОператораЭДО(СписокЭД_XML, СтруктураОперации); 
			
			ШаблонСообщения = НСтр("ru = 'Конец проверки соответствия событий ЭДО существующим настройкам, профиль: %1, Длительность (сек.): %2, Количество событий: %3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО, ТекущаяДатаСеанса() - НачалоЗамера, ТаблицаЭД.Количество());
			ОтразитьЗаписьЛогаОценкиПроизводительности(ТекстСообщения);
			
			Если ТаблицаЭД.Количество() = 0 Тогда // в этой порции документов нет КА, по которым есть актуальная настройка ЭДО
				// актуализируем РС с датой последнего ЭД, чтоб эти события не обрабатывать повторно
				Если НЕ ПолучитьЭДПоКонтрагенту Тогда
					ЗаписатьДатуПоследнегоСобытияЭД(ПрофильНастроекЭДО, СтруктураОперации.ДатаПоследнегоСобытия);
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-24 (#4356)
					Продолжить;
				Иначе // единственное условие выхода из цикла, в этом случае
					Прервать;
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-24 (#4356)
				КонецЕсли;	
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-24 (#4356)
				//Продолжить; 
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-24 (#4356)
			КонецЕсли;
					
			// Этап 3 запись пакетов в БД
			НачалоЗамера = ТекущаяДатаСеанса();
			ШаблонСообщения = НСтр("ru = 'Начало создания пакетов ЭДО, профиль: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО);
			ОтразитьЗаписьЛогаОценкиПроизводительности(ТекстСообщения);

			
			РезультатОперации = СоздатьПакетыПоСобытиямОператораЭДО(Соединение, ТаблицаЭД, СтруктураОперации);
					
			ШаблонСообщения = НСтр("ru = 'Конец создания пакетов ЭДО, профиль: %1, Длительность (сек.): %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО, ТекущаяДатаСеанса() - НачалоЗамера);
			ОтразитьЗаписьЛогаОценкиПроизводительности(ТекстСообщения);

			Если РезультатОперации.Свойство("МассивПакетовЭДО") Тогда 
				
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-24 (#4356)
				Если РезультатОперации.МассивПакетовЭДО.Количество() = 0 Тогда
					
					Если Не ПолучитьЭДПоКонтрагенту И Не РезультатОперации.ЕстьОшибка Тогда
						ЗаписатьДатуПоследнегоСобытияЭД(ПрофильНастроекЭДО, СтруктураОперации.ДатаПоследнегоСобытия);
					КонецЕсли;
					
					Прервать;
					
				Иначе
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-24 (#4356)
					Для Каждого ПакетЭДО Из РезультатОперации.МассивПакетовЭДО Цикл 
						СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭДО);
					КонецЦикла;
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-24 (#4356)
				КонецЕсли;
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-24 (#4356)
			КонецЕсли;
			
			Если ПолучитьЭДПоКонтрагенту Тогда
				Прервать;
			КонецЕсли;
			
			Если Не РезультатОперации.ЕстьОшибка Тогда // обновим дату в РС	 
				ЗаписатьДатуПоследнегоСобытияЭД(ПрофильНастроекЭДО, СтруктураОперации.ДатаПоследнегоСобытия);
			КонецЕсли;		
			
		КонецЦикла; // по событиям ЭДО
			
	КонецЦикла; // по сертификатам организаций
	
КонецПроцедуры

Функция ПолучитьНастройкиСоглашенияВходящегоОбменаЭД(ИДОрганизация, ИДКонтрагент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиСоглашения = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиПолученияЭДПоИД(ИДКонтрагент, 
			ИДОрганизация, 
			Неопределено,
			Неопределено,
			Ложь,
			Истина);
	
	Если НастройкиСоглашения.ПараметрыНастройки = Неопределено Тогда
		НастройкиСоглашения = Неопределено;
	Иначе
		НастройкиСоглашения.Вставить("ПрофильНастроекЭДО", 	ИДОрганизация);
		НастройкиСоглашения.Вставить("СпособОбменаЭД",		НастройкиСоглашения.ПараметрыНастройки.СпособОбменаЭД);
		НастройкиСоглашения.Вставить("НастройкаЭДО",		Новый Структура("Отправитель, Получатель", ИДКонтрагент, ИДОрганизация));
		НастройкиСоглашения.Вставить("АдресОтправителя",	"");
		НастройкиСоглашения.Вставить("АдресПолучателя",		"");
		НастройкиСоглашения.Вставить("Организация",			НастройкиСоглашения.ПараметрыНастройки.Организация);
		НастройкиСоглашения.Вставить("Контрагент",			НастройкиСоглашения.ПараметрыНастройки.Контрагент);
	КонецЕсли;
	
	Возврат НастройкиСоглашения;
	
КонецФункции

Функция ПолучитьНастройкиСоглашенияИсходящегоОбменаЭД(ИДОрганизация, ИДКонтрагент)
		 
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиСоглашения = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	 "ВЫБРАТЬ
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Организация,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Контрагент,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.АдресОтправителя КАК АдресОтправителя,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.АдресПолучателя КАК АдресПолучателя,
	 |	НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД КАК СпособОбменаЭД
	 |ИЗ
	 |	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	 |		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
	 |			И НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
	 |ГДЕ
	 |	ВЫБОР
	 |			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
	 |				ТОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя = &ИдентификаторКонтрагента
	 |			ИНАЧЕ ИСТИНА
	 |		КОНЕЦ
	 |	И ВЫБОР
	 |			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
	 |				ТОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = &ИдентификаторОрганизации
	 |			ИНАЧЕ ИСТИНА
	 |		КОНЕЦ
	 |	И ВЫБОР
	 |			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	 |				ТОГДА ИСТИНА
	 |			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрикладнойЭД)
	 |				ТОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.ПрикладнойВидЭД = &ПрикладнойВидЭД
	 |			ИНАЧЕ НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидЭД
	 |		КОНЕЦ
	 |	И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДКонтрагент);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОрганизация);
	Запрос.УстановитьПараметр("ВидЭД", Неопределено);
	Запрос.УстановитьПараметр("ПрикладнойВидЭД", Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НастройкаЭДО = Новый Структура("Отправитель, Получатель", ИДКонтрагент, ИДОрганизация);
		
		НастройкиСоглашения = Новый Структура;
		НастройкиСоглашения.Вставить("Отправитель",         	ИДКонтрагент);
		НастройкиСоглашения.Вставить("Получатель",          	ИДОрганизация);
		НастройкиСоглашения.Вставить("Организация",         	Выборка.Организация);
		НастройкиСоглашения.Вставить("Контрагент",          	Выборка.Контрагент);
		НастройкиСоглашения.Вставить("ПрофильНастроекЭДО",		ИДОрганизация);
		НастройкиСоглашения.Вставить("НастройкаЭДО",      		НастройкаЭДО);
		НастройкиСоглашения.Вставить("СпособОбменаЭД",    		Выборка.СпособОбменаЭД);
		НастройкиСоглашения.Вставить("АдресОтправителя", 		Выборка.АдресОтправителя);
		НастройкиСоглашения.Вставить("АдресПолучателя",  		Выборка.АдресПолучателя);
	КонецЕсли;
	
	Возврат НастройкиСоглашения;
	
КонецФункции

Функция сбисРазобратьТекстСобытийОператораЭДО(СписокСобытий, СтруктураОперации) 	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИДДокументооборота");
	ТЗ.Колонки.Добавить("КодТранзакции");
	ТЗ.Колонки.Добавить("ИДДокумента");
	ТЗ.Колонки.Добавить("Приоритет");
	ТЗ.Колонки.Добавить("ИДОрганизация");
	ТЗ.Колонки.Добавить("ИДКонтрагент");
	ТЗ.Колонки.Добавить("СсылкаНаАрхив");
	
	//собираем для анализа вспомогательные данные
	ТЗ.Колонки.Добавить("Направление");
	ТЗ.Колонки.Добавить("Название");
	ТЗ.Колонки.Добавить("ДатаВремяСоздания");
	ТЗ.Колонки.Добавить("Дата");
	ТЗ.Колонки.Добавить("Номер");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("Тип");
	ТЗ.Колонки.Добавить("Удален");
	ТЗ.Колонки.Добавить("Событие_ДатаВремя");
	ТЗ.Колонки.Добавить("Событие_Комментарий"); //для причины отклонения
	ТЗ.Колонки.Добавить("ВерсияФорматаПакета"); 
	ТЗ.Колонки.Добавить("СтатусПакета");
	ТЗ.Колонки.Добавить("НаправленияЭД");
	ТЗ.Колонки.Добавить("ДоговорКонтрагента");
	// дополним колонками для заполнения реквизитов пакета
	ТЗ.Колонки.Добавить("ок_ДатаТранзакции"); 
	ТЗ.Колонки.Добавить("ок_КодТранзакции");
	ТЗ.Колонки.Добавить("ок_Наименование");
	ТЗ.Колонки.Добавить("ок_Сумма");     
	ТЗ.Колонки.Добавить("ок_Удален");
	ТЗ.Колонки.Добавить("Комментарий");
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-10 (#4181)
	//ТЗ.Колонки.Добавить("ок_УИДДокументаОператораЭДО");	
	ТЗ.Колонки.Добавить("ок_УИДДокументаОператораЭДО", ОбщегоНазначения.ОписаниеТипаСтрока(36));	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-10 (#4181)
	ТЗ.Колонки.Добавить("ВнешнийУИД");         
	ТЗ.Колонки.Добавить("ок_Дата");            
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-10 (#4181)
	//ТЗ.Колонки.Добавить("ок_ДатаРедакции");    
	ТЗ.Колонки.Добавить("ок_ДатаРедакции", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));    
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-10 (#4181)
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("Организация");
	ТЗ.Колонки.Добавить("Отправитель");
	ТЗ.Колонки.Добавить("Получатель");
	ТЗ.Колонки.Добавить("СпособОбменаЭД"); 
	ТЗ.Колонки.Добавить("Зашифрован"); //Когда заполнять?? 
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-01 (#4181)
	ТЗ.Колонки.Добавить("ок_АктуальнаяРедакция", Новый ОписаниеТипов("Булево"));
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-01 (#4181)
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	ТЗ.Колонки.Добавить("ок_КорреспонденцияВходящая", Новый ОписаниеТипов("Булево"));
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
		
	// кеш Организация, Контрагент - нстройка ЭДО,
	// если в кеше есть настройка, то проверка только на ее актуальность на дату транзакции
	// если в кеш нет, то сначала получаем настройку, потом проверка даты
	СоответствиеНастроекЭДО = Новый Соответствие;
		
	ДатаВремяЗапроса = '00010101';
	
	Для каждого Документ Из СписокСобытий Цикл
		
		Если Не Документ.Свойство("Событие") Тогда
			Продолжить;
		КонецЕсли;
		
		ИДДокументооборота 	= Документ.Идентификатор;	
		ИДОрганизация 		= сбисПолучитьИдентификаторСубъектаОбмена(Документ.НашаОрганизация);
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-09-14 (#4281) // исключить ошибку при приёме "левого" документа Изменение стоимости 
		//ИДКонтрагент 	= сбисПолучитьИдентификаторСубъектаОбмена(Документ.Контрагент);
		Попытка
			ИДКонтрагент 	= сбисПолучитьИдентификаторСубъектаОбмена(Документ.Контрагент);
		Исключение
			Продолжить;
		КонецПопытки;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-09-14 (#4281) 
		
		// проверка в кеше
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-20 (#4330)
		//КлючПоиска 			= ИДОрганизация + "_" + ИДКонтрагент;
		Если Документ.Направление = "Исходящий" Тогда
			КлючПоиска = ИДКонтрагент + "_" + ИДОрганизация;
		Иначе
			КлючПоиска = ИДОрганизация + "_" + ИДКонтрагент;
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-20 (#4330)
		НастройкаСоглашения = СоответствиеНастроекЭДО[КлючПоиска];
		Если НастройкаСоглашения = Неопределено Тогда
			НастройкаСоглашения = ПолучитьНастройкиСоглашенияВходящегоОбменаЭД(ИДОрганизация, ИДКонтрагент);
			Если НастройкаСоглашения = Неопределено Тогда // в системе нет настройки, укажем это
				НастройкаСоглашения = "НетНастроек";	
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-20 (#4330)
			ИначеЕсли Документ.Направление = "Исходящий" Тогда
				НастройкаСоглашения.НастройкаЭДО.Вставить("Отправитель", НастройкаСоглашения.ПараметрыНастройки.Получатель);
				НастройкаСоглашения.НастройкаЭДО.Вставить("Получатель", НастройкаСоглашения.ПараметрыНастройки.Отправитель);
				НастройкаСоглашения.ПараметрыНастройки.Вставить("Отправитель", НастройкаСоглашения.НастройкаЭДО.Отправитель);
				НастройкаСоглашения.ПараметрыНастройки.Вставить("Получатель", НастройкаСоглашения.НастройкаЭДО.Получатель);
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-20 (#4330)
			КонецЕсли;
			СоответствиеНастроекЭДО.Вставить(КлючПоиска, НастройкаСоглашения);
		КонецЕсли;
		
		Если НастройкаСоглашения = "НетНастроек" Тогда // пропускаем такие события, нет у КА и организации настройки
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-24 (#4356)
			ИндексСобытия = Документ.Событие.ВГраница();
			Если ИндексСобытия >= 0 
				И Документ.Событие[ИндексСобытия].ДатаВремя > ДатаВремяЗапроса Тогда
				ДатаВремяЗапроса = Документ.Событие[ИндексСобытия].ДатаВремя;
			КонецЕсли;
			
			Если СтруктураОперации.Свойство("ПолучитьЭДПоКонтрагенту")
				И СтруктураОперации.ПолучитьЭДПоКонтрагенту Тогда // Интерактивная загрука по кнопке, выводим сообщение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Не найдена настройка для идентификаторов %1 и %2", ИДОрганизация, ИДКонтрагент));
			КонецЕсли;
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-24 (#4356)
			Продолжить;
		КонецЕсли;	
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-29 (#4433)
		СтруктураПоиска = Новый Структура("Направление, Дата", Документ.Направление, Документ.Дата);
		Если Не ПроверитьДействиеНастройкиЭДО(НастройкаСоглашения.НастройкаЭДО, СтруктураПоиска) Тогда
			Продолжить;
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-29 (#4433)
		
		// обходим события документа
		Для каждого Событие из Документ.Событие Цикл
			
			КодТранзакции = Событие.Название;
			Если Не сбисЗначимыйКодТранзакции(КодТранзакции) Тогда
				Продолжить; // только определенные коды транзакций умеем обрабатывать
			КонецЕсли;
			
			// проверка на актуальность настройки с датой события
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-29 (#4433)
			//СтруктураПоиска = Новый Структура("Направление, ДатаВремя", Документ.Направление, Событие.ДатаВремя);
			//Если Не ПроверитьДействиеНастройкиЭДО(НастройкаСоглашения.НастройкаЭДО, СтруктураПоиска) Тогда
			//	Продолжить;
			//КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-29 (#4433)
			
			// событие прошло проверки, надо обработать в дальнейшем файлы события
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Документ);
			НоваяСтрока.ИДДокументооборота 	= ИДДокументооборота;
			НоваяСтрока.ИДДокумента 		= Событие.Идентификатор;
			НоваяСтрока.КодТранзакции 		= КодТранзакции;
			НоваяСтрока.ИДОрганизация 		= ИДОрганизация;
			НоваяСтрока.ИДКонтрагент 		= ИДКонтрагент;
			НоваяСтрока.Событие_ДатаВремя 	= Событие.ДатаВремя;
			НоваяСтрока.Событие_Комментарий = Событие.Комментарий;
			НоваяСтрока.Удален 				= ?(НРег(НоваяСтрока.Удален) = "да", Истина, Ложь);
			
			НоваяСтрока.ВерсияФорматаПакета = ПредопределенноеЗначение("Перечисление.ВерсииФорматаПакетаЭД.Версия30");
			НоваяСтрока.ВнешнийУИД 			= ИДДокументооборота;
			НоваяСтрока.СтатусПакета 		= ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.КРаспаковке");

			НоваяСтрока.ок_ДатаТранзакции 	= Событие.ДатаВремя;
			НоваяСтрока.ок_КодТранзакции 	= КодТранзакции;
			НоваяСтрока.Комментарий 		= Событие.Комментарий;
			НоваяСтрока.ок_Наименование 	= Документ.Название;
			НоваяСтрока.ок_Сумма 			= Документ.Сумма;
			ПараметрыНастройки = НастройкаСоглашения.ПараметрыНастройки;
			НоваяСтрока.Контрагент 	        = ПараметрыНастройки.Контрагент;
			НоваяСтрока.Организация      	= ПараметрыНастройки.Организация;
			НоваяСтрока.Отправитель 		= ПараметрыНастройки.Отправитель;
			НоваяСтрока.Получатель      	= ПараметрыНастройки.Получатель;
			НоваяСтрока.СпособОбменаЭД      = ПараметрыНастройки.СпособОбменаЭД;
			НоваяСтрока.ок_Удален 			= НоваяСтрока.Удален;
			НоваяСтрока.ок_Дата 			= НоваяСтрока.Дата;
			НоваяСтрока.ок_ДатаРедакции		= НоваяСтрока.ДатаВремяСоздания;
			НоваяСтрока.ДоговорКонтрагента	= ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			НоваяСтрока.ок_УИДДокументаОператораЭДО	= ИДДокументооборота;
			
			Если НРег(НоваяСтрока.Направление) = "входящий" Тогда
				НоваяСтрока.НаправленияЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий");
			Иначе	
				НоваяСтрока.НаправленияЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий");
			КонецЕсли;
			
			// получим дату и время последнего события
			Если Событие.ДатаВремя > ДатаВремяЗапроса Тогда
				ДатаВремяЗапроса = Событие.ДатаВремя;
			КонецЕсли;	
			
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-01 (#4181)
			Если Документ.Свойство("Редакция") 
				И ТипЗнч(Документ.Редакция) = Тип("Массив")
				И Документ.Редакция.Количество() > 0 
				И ТипЗнч(Документ.Редакция[0]) = Тип("Структура")
				И Документ.Редакция[0].Свойство("Актуален") Тогда
				
				НоваяСтрока.ок_АктуальнаяРедакция = НРег(Документ.Редакция[0].Актуален) = "да";
				
			КонецЕсли;
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-01 (#4181)
			
			// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
			НоваяСтрока.ок_КорреспонденцияВходящая = (Документ.Тип = "КоррВх"); 
			// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
			
		КонецЦикла;	
			
	КонецЦикла;	
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-10 (#4181)
	// Если есть хотя бы 1 отмененный пакет с таким же ИД и датой редакции, то текущий загружаемый пакет сразу загружаем со статусом отменен
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаКЗагрузке.ок_УИДДокументаОператораЭДО КАК ок_УИДДокументаОператораЭДО,
		|	ТаблицаКЗагрузке.ок_ДатаРедакции КАК ок_ДатаРедакции
		|ПОМЕСТИТЬ ВТ_ТаблицаКЗагрузке
		|ИЗ
		|	&ТаблицаКЗагрузке КАК ТаблицаКЗагрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаКЗагрузке.ок_УИДДокументаОператораЭДО КАК ок_УИДДокументаОператораЭДО,
		|	ВТ_ТаблицаКЗагрузке.ок_ДатаРедакции КАК ок_ДатаРедакции
		|ИЗ
		|	ВТ_ТаблицаКЗагрузке КАК ВТ_ТаблицаКЗагрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПакетЭД КАК ПакетЭД
		|		ПО ВТ_ТаблицаКЗагрузке.ок_УИДДокументаОператораЭДО = ПакетЭД.ок_УИДДокументаОператораЭДО
		|			И ВТ_ТаблицаКЗагрузке.ок_ДатаРедакции = ПакетЭД.ок_ДатаРедакции
		|ГДЕ
		|	ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.Отменен)";
	
	Запрос.УстановитьПараметр("ТаблицаКЗагрузке", ТЗ);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ок_УИДДокументаОператораЭДО", ВыборкаДетальныеЗаписи.ок_УИДДокументаОператораЭДО);
		СтруктураПоиска.Вставить("ок_ДатаРедакции", ВыборкаДетальныеЗаписи.ок_ДатаРедакции);
		
		МассивСтрок = ТЗ.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Строка Из МассивСтрок Цикл
			Строка.СтатусПакета = Перечисления.СтатусыПакетовЭД.Отменен;
		КонецЦикла;
		
	КонецЦикла;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-10 (#4181)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-16 (#4433)
	Если Не ЗначениеЗаполнено(ДатаВремяЗапроса) Тогда
		ИндексПакета = СписокСобытий.ВГраница();
		Если ИндексПакета >= 0
			И СписокСобытий[ИндексПакета].Свойство("Событие") Тогда
			
			ДокументСобытие = СписокСобытий[ИндексПакета].Событие;
			ИндексСобытия = ДокументСобытие.ВГраница();
			Если ИндексСобытия >= 0 Тогда
				ДатаВремяЗапроса = ДокументСобытие[ИндексСобытия].ДатаВремя;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-16 (#4433)
	
	Если ЗначениеЗаполнено(ДатаВремяЗапроса) Тогда
		СтруктураОперации.Вставить("ДатаПоследнегоСобытия", ДатаВремяЗапроса);
	Иначе
		СтруктураОперации.Вставить("ДатаПоследнегоСобытия", СтруктураОперации.ДатаПоследнегоСобытия + 1);
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьПорциюСобытийОтОператораЭДО(Соединение, СтруктураОперации)
	
	МассивДокументов 	= Новый Массив;
	ПараметрыЭДО		= СтруктураОперации.СтруктураСертификата;
	
	Если Лев(СтруктураОперации.КомандаРесурса, 14) = "GetMessageList" Тогда
		
		// готовим фильтры для выполнения запроса оператору ЭДО
		ДатаПоследнегоЗапроса = СтруктураОперации.ДатаПоследнегоСобытия;
		
		ПараметрыФильтра = Новый Структура("Организация, ИдентификаторОрганизации, ДатаПоследнегоЗапроса", 
			ПараметрыЭДО.Организация, 
			ПараметрыЭДО.ИдентификаторОрганизации, 
			ДатаПоследнегоЗапроса);
			
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-28 (#4161)
		// СБИС не умеет фильтровать документы по контрагенту и дате. 
		// По этому в случае отбора по контрагенту, накладываем условие только на период, а в пост обработке ответа отбрасываем не нужных контрагентов
		РеквизитыДляОтбораКонтрагента = Неопределено;
		
		Если СтруктураОперации.Свойство("ДопПараметры")
			И СтруктураОперации.ДопПараметры.Свойство("СтруктураДляПолученияЭДПоКонтрагенту")
			И СтруктураОперации.ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.Свойство("Контрагент")
			И СтруктураОперации.ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.Свойство("ДатаС")
			И СтруктураОперации.ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.Свойство("ДатаПо") Тогда
			
			РеквизитыДляОтбораКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураОперации.ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.Контрагент, "ЮридическоеФизическоеЛицо, ИНН, КПП");
			
			ВидКонтрагента = ?(РеквизитыДляОтбораКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "СвФЛ", "СвЮЛ");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-10 (#4447)
			ИДКонтрагентаОтбор = СокрЛП(СтруктураОперации.ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ИдентификаторКонтрагента);
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-10 (#4447)
			ПараметрыФильтра.Вставить("ДатаВремяС",  СтруктураОперации.ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ДатаС);
			ПараметрыФильтра.Вставить("ДатаВремяПо", СтруктураОперации.ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ДатаПо);
			
		КонецЕсли;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-28 (#4161)
			
		ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Фильтр", сбисПолучитьФильтрСписокИзменений(ПараметрыФильтра)));
		ПараметрыИнтеграции = сбисПараметрыИнтеграции(СтруктураОперации.КомандаРесурса, ПараметрыЭДО, ПараметрыКоманды);
		
		ПродолжатьЗапросы 	= Истина;
		ПервыйЗапрос 		= Истина;
		
		Пока ПродолжатьЗапросы Цикл
			
			Если Не ПервыйЗапрос Тогда
				
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-10-11 (#4161)
				//Если МассивДокументов.Количество() = 0 Тогда
				Если МассивДокументов.Количество() = 0 
					И РеквизитыДляОтбораКонтрагента = Неопределено Тогда
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-10-11 (#4161)
					Прервать; // лента пустая после первого запроса, дальше нет смысла выполнять следующие запросы
				КонецЕсли;
				
				// для следующего запроса необходимо изменить фильтр команды, сдвинем отбор ДатаС = идентификатор последнего полученного документа из предыдущего запроса
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-10-11 (#4161)
				//ПоследнийДокумент = МассивДокументов[МассивДокументов.Количество() - 1];
				Если РеквизитыДляОтбораКонтрагента = Неопределено Тогда // В случае отбора по контрагенту последним документом считаем не документ в массиве, а в ответе от сервера
					ПоследнийДокумент = МассивДокументов[МассивДокументов.Количество() - 1];
				КонецЕсли;
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-10-11 (#4161)
				Если ПоследнийДокумент.Свойство("Событие") Тогда
					
					// укажем в команде идентификатор последнего события из последнего документа
					Если ПараметрыИнтеграции.Свойство("ПараметрыЗапроса") 
						И ПараметрыИнтеграции.ПараметрыЗапроса.Свойство("Фильтр") Тогда
						
						ПараметрыИнтеграции.ПараметрыЗапроса.Фильтр.Вставить("ИдентификаторСобытия", ПоследнийДокумент.Событие[ПоследнийДокумент.Событие.Количество() - 1].Идентификатор);
						Если ПараметрыИнтеграции.ПараметрыЗапроса.Фильтр.Свойство("ДатаВремяС") Тогда
							ПараметрыИнтеграции.ПараметрыЗапроса.Фильтр.Удалить("ДатаВремяС");
						КонецЕсли;
					Иначе	
						ПараметрыФильтра.Вставить("ИдентификаторСобытия", ПоследнийДокумент.Событие[ПоследнийДокумент.Событие.Количество() - 1].Идентификатор);
						ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Фильтр", сбисПолучитьФильтрСписокИзменений(ПараметрыФильтра)));
						ПараметрыИнтеграции = сбисПараметрыИнтеграции(СтруктураОперации.КомандаРесурса, ПараметрыЭДО, ПараметрыКоманды);
					КонецЕсли;						
										
				Иначе
					Возврат МассивДокументов;
				КонецЕсли;
			КонецЕсли;
			
			// выполняем команду оператора для получения очередной порции событий
			Результат = сбисОтправитьИОбработатьКоманду(Соединение, ПараметрыИнтеграции, ПараметрыЭДО);
									
			// обработаем результат запроса
			Если Результат = Неопределено Тогда // что-то не так
				СтруктураОперации.ЕстьОшибки = Истина;
				Возврат МассивДокументов;
			КонецЕсли;
			
			Если Не Результат.Свойство("result") Тогда //неожиданный результат, нужно останавливать загрузку, а то будет сдвигаться дата получения изменений
				СтруктураОперации.ЕстьОшибки = Истина;
				Возврат МассивДокументов;
			КонецЕсли;	
			
			// если оператор определил, что есть еще события, то укажем о необходимости продолжить выполнение запросов
			ПродолжатьЗапросы 						= (Результат.result.Навигация.ЕстьЕще = "Да");
			СтруктураОперации.ПолученыВсеДокументы 	= Не ПродолжатьЗапросы; // укажем, что надо вернуться в получение после записи порции в БД
			
			// заполним массив с документами
			Для Каждого Документ Из Результат.result.Документ Цикл
				
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-10-06 (#4161)
				Если РеквизитыДляОтбораКонтрагента <> Неопределено Тогда // Пост обработка результата, фильтр по контрагенту
					
					ПоследнийДокумент = Документ;
					
					Если Не Документ.Свойство("Контрагент") Тогда // Отсутствует контрагент
						Продолжить;
					КонецЕсли;
					
					Если Не Документ.Контрагент.Свойство(ВидКонтрагента) Тогда // Отсутствует вид контрагента
						Продолжить;
					КонецЕсли;
					
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-10 (#4447)
					//Если Не Документ.Контрагент[ВидКонтрагента].Свойство("ИНН") 
					//	Или Не Документ.Контрагент[ВидКонтрагента].Свойство("КПП") Тогда // Отсутствует ИНН или КПП контрагента
					//	Продолжить;
					//КонецЕсли;
					//
					//Если НЕ (Документ.Контрагент[ВидКонтрагента].ИНН = РеквизитыДляОтбораКонтрагента.ИНН 
					//	И Документ.Контрагент[ВидКонтрагента].КПП = РеквизитыДляОтбораКонтрагента.КПП) Тогда // Контрагент не удовлетворяет условиям отбора
					//	Продолжить;
					//КонецЕсли;
					Если Не Документ.Контрагент[ВидКонтрагента].Свойство("ИНН") Тогда
						Продолжить;
					КонецЕсли;
					
					ИДКонтрагентаПакета = СокрЛП(Документ.Контрагент[ВидКонтрагента].ИНН);
					
					Если Документ.Контрагент[ВидКонтрагента].Свойство("КПП")
						И ЗначениеЗаполнено(Документ.Контрагент[ВидКонтрагента].КПП) Тогда
						ИДКонтрагентаПакета = ИДКонтрагентаПакета + "_" + СокрЛП(Документ.Контрагент[ВидКонтрагента].КПП);
					КонецЕсли;
					
					Если ИДКонтрагентаПакета <> ИДКонтрагентаОтбор Тогда
						Продолжить;
					КонецЕсли;
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-10 (#4447)
					
				КонецЕсли;
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-10-06 (#4161)
				
				МассивДокументов.Добавить(Документ);
				Если МассивДокументов.Количество() = СтруктураОперации.КоличествоСобытийВПорции Тогда
					ПродолжатьЗапросы = Ложь; // прерываем получение событий, запишем в БД полученную порцию со сдвигом даты в РС
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		
			ПервыйЗапрос = Ложь;
		КонецЦикла;	
	
	
	ИначеЕсли Лев(СтруктураОперации.КомандаРесурса, 21) = "GetPartnerMessageList" Тогда
		
		ДопПараметры = СтруктураОперации.ДопПараметры;
		
		Если Не (ТипЗнч(ДопПараметры) = Тип("Структура") 
				И ДопПараметры.Свойство("СтруктураДляПолученияЭДПоКонтрагенту") 
				И ТипЗнч(ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту) = Тип("Структура")) Тогда
				
			// некорректные параметры на входе, ругаемся с фиксацией ошибки
			СтруктураОперации.ЕстьОшибки = Истина;
			Возврат МассивДокументов;
		КонецЕсли;	
		
	
		ПараметрыФильтра = Новый Структура();
		ПараметрыФильтра.Вставить("ДатаС",						ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ДатаС);
		ПараметрыФильтра.Вставить("ДатаПо", 					ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ДатаПо);
		ПараметрыФильтра.Вставить("Организация",				ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.Организация);
		ПараметрыФильтра.Вставить("ИдентификаторОрганизации", 	ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ИдентификаторОрганизации);
		ПараметрыФильтра.Вставить("Контрагент",					ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.Контрагент);
		ПараметрыФильтра.Вставить("ИдентификаторКонтрагента",	ДопПараметры.СтруктураДляПолученияЭДПоКонтрагенту.ИдентификаторКонтрагента);
		ПараметрыФильтра.Вставить("ТипРеестра", 				"Входящие");
		
		ПродолжатьЗапросы = Истина;
		Страница = 0;
		
		Пока ПродолжатьЗапросы Цикл
			
			Если Страница > 0 И МассивДокументов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыФильтра.Вставить("Страница", Страница);
			
			ПараметрыКоманды = Новый Структура("ПараметрыЗапроса", Новый Структура("Фильтр", сбисПолучитьФильтр(ПараметрыФильтра)));
			
			Результат = ок_ОбменСКонтрагентамиВнутренний.сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetPartnerMessageList", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
			Если Результат = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если Не Результат.Свойство("result") Тогда //неожиданный результат, нужно останавливать загрузку, а то будет сдвигаться дата получения изменений
				Возврат Неопределено;
			КонецЕсли;	
			
			Страница = Страница + 1;
			ПродолжатьЗапросы = (Результат.result.Навигация.ЕстьЕще = "Да");
			
			Для Каждого ЗаписьРеестра Из Результат.result.Реестр Цикл
				
				Если ЗаписьРеестра.Документ.Редакция[0].Актуален = "Да" Тогда
					ПараметрыЗапросаДляДокумента = Новый Структура();
					ПараметрыЗапросаДляДокумента.Вставить("ПараметрыЗапроса", Новый Структура("Документ", Новый Структура("Идентификатор", ЗаписьРеестра.Документ.Идентификатор)));
					РезультатПоДокументу = ок_ОбменСКонтрагентамиВнутренний.сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetMessage", ПараметрыЭДО, ПараметрыЗапросаДляДокумента), ПараметрыЭДО);
					Если РезультатПоДокументу = Неопределено Тогда
						Продолжить;
					ИначеЕсли Не РезультатПоДокументу.Свойство("result") Тогда
						Продолжить;
					КонецЕсли;
					МассивДокументов.Добавить(РезультатПоДокументу.result);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		
	КонецЕсли;	
		
	// возвращаем порцию событий для последующей обработки
	Возврат МассивДокументов;	
		
КонецФункции

Функция ДатаПоследнегоСобытияОператораЭДО(ИдентификаторОрганизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПолученияЭД КАК ДатаПолученияЭД
	|ИЗ
	|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	|ГДЕ
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации"
	;
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаВремяЗапроса = Выборка.ДатаПолученияЭД;
	Иначе
		ДатаВремяЗапроса = Дата("00010101");
	КонецЕсли;
	
	Возврат ДатаВремяЗапроса;
	
КонецФункции	

Процедура ЗаписатьДатуПоследнегоСобытияЭД(ПрофильНастроекЭДО, ДатаВремяСобытия)
	
	Если Не ЗначениеЗаполнено(ДатаВремяСобытия) Тогда
		Возврат;
	КонецЕсли;	
		
	Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
	Запись.ИдентификаторОрганизации = ПрофильНастроекЭДО;
	Запись.Прочитать();
	
	Если Запись.ДатаПолученияЭД < ДатаВремяСобытия Тогда
		Запись.ИдентификаторОрганизации = ПрофильНастроекЭДО;
		Запись.ДатаПолученияЭД = ДатаВремяСобытия;
		Запись.Записать();
	КонецЕсли;	
	
КонецПроцедуры

Функция СоздатьПакетыПоСобытиямОператораЭДО(Соединение, ТаблицаЭД, СтруктураОперации)
	
	ЕстьОшибка 			= Ложь;
	МассивПакетовЭДО 	= Новый Массив;
	
	// обходим строки событий и пытаемся создать пакет ЭДО
	Для Каждого СтрокаСобытия Из ТаблицаЭД Цикл
		
		// проверим, если пакет уже есть в системе, то идем дальше
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4330)
		//Если ПакетЭДУжеЗагружен2021(СтрокаСобытия.ИДДокументооборота, СтрокаСобытия.КодТранзакции, СтрокаСобытия.Событие_Датавремя, СтруктураОперации.ПрофильЭДО) Тогда
		Если ПакетЭДУжеЗагружен2021(СтрокаСобытия.ИДДокументооборота, СтрокаСобытия.КодТранзакции, СтрокаСобытия.Событие_Датавремя, СтруктураОперации.ПрофильЭДО, СтрокаСобытия.НаправленияЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий")) Тогда
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4330)
			Продолжить;
		КонецЕсли;
		
		// получим файл-архив
		ФайлЭД = ПолучитьФайлСобытияОператораЭДО(Соединение, СтруктураОперации, СтрокаСобытия.СсылкаНаАрхив);
			
		Если ФайлЭД = Неопределено Тогда
			ЕстьОшибка = Истина;
			Продолжить; // не удалось получить файлы, пропускаем событие
		КонецЕсли;	
		
		Если СтруктураОперации.ПолучитьЭДПоКонтрагенту Тогда
			СтрокаСобытия.СтатусПакета = ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.РаспакованДокументыНеОбработаны");
		КонецЕсли;
		
		ПакетЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПакетЭД(СтрокаСобытия);
		
		Если ЗначениеЗаполнено(ПакетЭД) Тогда // создан пакет в базе, надо архив прикрепить
			
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ФайлЭД);
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			
			ИмяФайла = "EDI_" + СтрокаСобытия.ВнешнийУИД + "_" + СтрокаСобытия.ИДДокументооборота;
		
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД.Ссылка);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайла);
			ПараметрыФайла.Вставить("РасширениеБезТочки", "zip");
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			
			// создаем в базе прикрепленный к пакету файл-архив
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище);
			МассивПакетовЭДО.Добавить(ПакетЭД);				
						
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлЭД);
			ВызватьИсключение НСтр("ru = 'Не удалось записать пакет в систему.'");
		КонецЕсли;
			
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлЭД);	
	
	КонецЦикла;
	
	Результат = Новый Структура("ЕстьОшибка, МассивПакетовЭДО", ЕстьОшибка, МассивПакетовЭДО);
	Возврат Результат;

КонецФункции

Функция ПолучитьФайлСобытияОператораЭДО(Соединение, СтруктураОперации, СсылкаНаАрхивURL, Расширение = "zip")
	Перем ИмяФайлаРезультат;
	
	ИмяФайла 		= ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(Расширение);
	ПараметрыЭДО 	= СтруктураОперации.СтруктураСертификата;
	
	Если ПараметрыЭДО.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис") Тогда
		ПараметрыКоманды = Новый Структура("Get, URL, ИмяФайла", Истина, СсылкаНаАрхивURL, ИмяФайла);
		ИмяФайлаРезультат = сбисОтправитьИОбработатьКоманду(Соединение, сбисПараметрыИнтеграции("GetFileOnURL", ПараметрыЭДО, ПараметрыКоманды), ПараметрыЭДО);
	КонецЕсли;	
	
	Возврат ИмяФайлаРезультат;

КонецФункции

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4330)
//Функция ПакетЭДУжеЗагружен2021(ИДДокумента, КодТранзакции, ДатаТранзакции, ПрофильНастроекЭДО = Неопределено)
Функция ПакетЭДУжеЗагружен2021(ИДДокумента, КодТранзакции, ДатаТранзакции, ПрофильНастроекЭДО = Неопределено, Исходящий = Ложь)
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4330)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ВнешнийУИД = &ВнешнийУИД
	|	И ПакетЭД.ок_КодТранзакции = &КодТранзакции
	|	И ПакетЭД.ок_ДатаТранзакции = &ДатаТранзакции
	|	И НЕ ПакетЭД.ПометкаУдаления
	|	И (ПакетЭД.Получатель = &ПрофильНастроекЭДО
	|			ИЛИ &ПоВсемПрофилям)";
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4330)
	Если Исходящий Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПакетЭД.Получатель", "ПакетЭД.Отправитель");
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4330)
	
	Запрос.УстановитьПараметр("ВнешнийУИД",  ИДДокумента);
	Запрос.УстановитьПараметр("ПрофильНастроекЭДО",  ПрофильНастроекЭДО);
	Запрос.УстановитьПараметр("ПоВсемПрофилям",  ПрофильНастроекЭДО = Неопределено);
	Запрос.УстановитьПараметр("КодТранзакции",  КодТранзакции);
	Запрос.УстановитьПараметр("ДатаТранзакции",  ДатаТранзакции);
	
	РезультатПустой = Запрос.Выполнить().Пустой();
	
	Возврат НЕ РезультатПустой;
	
КонецФункции
 
#КонецОбласти
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-17 (#4056)

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-31 (#4181)
Процедура ОбработатьОтмененныеДокументы(Параметры) Экспорт
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		ВызватьИсключение "Неверный тип параметра №1, ожидается структура";
	КонецЕсли;
	
	Если Не Параметры.Свойство("ОбрабатываемыеДокументы") Тогда
		ВызватьИсключение "В параметре №1 отсутствует обязательный ключ ""ОбрабатываемыеДокументы""";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетЭД.Ссылка КАК Ссылка,
		|	ПакетЭД.ок_УИДДокументаОператораЭДО КАК ок_УИДДокументаОператораЭДО
		|ПОМЕСТИТЬ ВТ_ДокументыБезЭД
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|		ПО ПакетЭД.ок_УИДДокументаОператораЭДО = ЭлектронныйДокументВходящий.УникальныйИД
		|ГДЕ
		|	ПакетЭД.Ссылка В(&ОбрабатываемыеДокументы)
		|	И ЭлектронныйДокументВходящий.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДокументыБезЭД.Ссылка КАК ПакетЭДСсылка
		|ИЗ
		|	ВТ_ДокументыБезЭД КАК ВТ_ДокументыБезЭД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПакетЭД.Ссылка
		|ИЗ
		|	ВТ_ДокументыБезЭД КАК ВТ_ДокументыБезЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПакетЭД КАК ПакетЭД
		|		ПО ВТ_ДокументыБезЭД.Ссылка <> ПакетЭД.Ссылка
		|			И ВТ_ДокументыБезЭД.ок_УИДДокументаОператораЭДО = ПакетЭД.ок_УИДДокументаОператораЭДО
		|ГДЕ
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-11-10 (#4447)
		//|	ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.КРаспаковке)
		|	(ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.КРаспаковке)
		|		ИЛИ ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.РаспакованДокументыНеОбработаны))
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-11-10 (#4447)
		|	И НЕ ПакетЭД.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящий.Ссылка КАК ДокументЭД,
		|	бит_СтатусыОбъектов.Статус КАК Статус,
		|	МАКСИМУМ(ЕСТЬNULL(ЭДПрисоединенныеФайлы.ок_Отправлен, ЛОЖЬ)) КАК НаличиеПодписаннойРедакции
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|			ПО ЭлектронныйДокументВходящий.Ссылка = бит_СтатусыОбъектов.Объект
		|				И (бит_СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ПО (ЭлектронныйДокументВходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла
		|					И ЭДПрисоединенныеФайлы.ок_Отправлен)
		|		ПО ПакетЭД.ок_УИДДокументаОператораЭДО = ЭлектронныйДокументВходящий.УникальныйИД
		|ГДЕ
		|	ПакетЭД.Ссылка В(&ОбрабатываемыеДокументы)
		|	И НЕ ПакетЭД.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_ДокументыБезЭД.Ссылка
		|				ИЗ
		|					ВТ_ДокументыБезЭД)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныйДокументВходящий.Ссылка,
		|	бит_СтатусыОбъектов.Статус";
	
	Запрос.УстановитьПараметр("ОбрабатываемыеДокументы", Параметры.ОбрабатываемыеДокументы);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = РезультатыЗапросов[1]; // Документы "ПакетЭД" для которых еще не создано ни одного электронного документа
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		УстанавливаемыйСтатусПакету = Перечисления.СтатусыПакетовЭД.Отменен;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Попытка
				
				ПакетЭДОбъект = Выборка.ПакетЭДСсылка.ПолучитьОбъект();
				ПакетЭДОбъект.СтатусПакета = УстанавливаемыйСтатусПакету;
				ПакетЭДОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				
				ЗаписьЖурналаРегистрации("Электронное взаимодействие.Обработка отмененных документов", 
																	 УровеньЖурналаРегистрации.Ошибка,
																	 ПакетЭДОбъект.Метаданные(),
																	 Выборка.ПакетЭДСсылка,
																	 ОписаниеОшибки.Описание);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатЗапроса = РезультатыЗапросов[2]; // Документы "ЭлектронныйДокумент" 
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		УстанавливаемыйСтатусЭД = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.ОтмененПоставщиком;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Статус", УстанавливаемыйСтатусЭД);
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НаличиеПодписаннойРедакции Тогда
				
				Если Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен
					Или Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать
					Или Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен
					Или Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован Тогда
					
					ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусВходящегоДокументооборота(Выборка.ДокументЭД, СтруктураПараметров);
					
				КонецЕсли;
				
			Иначе
				
				Если Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый
					Или Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован
					Или Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать
					Или Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен
					Или Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован
					Или Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен Тогда
					
					ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусВходящегоДокументооборота(Выборка.ДокументЭД, СтруктураПараметров);
					
				ИначеЕсли Выборка.Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование Тогда
					ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусНаСервере(Выборка.ДокументЭД, УстанавливаемыйСтатусЭД);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-31 (#4181)

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-08-31 (#4281)
Функция НовыеПараметрыФормированияДанныхОбъектаУчет() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Формат");
	Параметры.Вставить("ТипДокумента");
	Параметры.Вставить("Отправитель");
	Параметры.Вставить("ЗаполнениеКодаТовара");
	Параметры.Вставить("ВыгружатьДополнительныеСведения");
	Возврат Параметры;
КонецФункции

Функция УКД2020_ИнформацияПродавца_НастройкиЗаполнения(Знач Параметры) ЭКСПОРТ
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТипДокумента", Параметры.ТипДокумента);
	
	Настройки.Вставить("ВариантыЗаполненияПолей", Новый Структура);
	Настройки.ВариантыЗаполненияПолей.Вставить("ТоварКод", Параметры.ЗаполнениеКодаТовара);
	
	Возврат Настройки;
	
КонецФункции

Функция УКД2020_ИнформацияПродавца_Описание(Знач Параметры) ЭКСПОРТ
	
	Описание = Новый Структура;
	Описание.Вставить("Основания", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

// Инициализирует данные для заполнения документа.
//
// Возвращаемое значение:
//  Структура - данные для заполнения:
//   * ВерсияПрограммы - Строка - версия программы, с помощью которой сформирован файл. По умолчанию "1С:Предприятие 8".
//   * УникальныйИдентификатор - Строка- 36 символьный глобально уникальный идентификатор.
//   * Товары - Массив - список товаров.
//   * ЗначенияДополнительныхПолей - Структура - значения дополнительных полей электронного документа.
//   * Участники - Структура - участники ЭДО:
//    ** ИдентификаторОтправителя - Строка - идентификатор отправителя.
//    ** ИдентификаторПолучателя - Строка - идентификатор получателя.
//    ** Оператор - Структура - информация об операторе ЭДО отправителя:
//     *** Наименование - Строка - наименование оператора.
//     *** ИНН - Строка - ИНН оператора.
//     *** Идентификатор - Строка - идентификатор отправителя.
//
Функция НовыеДанныеДляФормированияОсновногоТитула() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("ВерсияПрограммы", "1С:Предприятие 8");
	Данные.Вставить("УникальныйИдентификатор", "");
	Данные.Вставить("ДанныеДокумента", Новый ДеревоЗначений);
	Данные.Вставить("ЗначенияДополнительныхПолей", Новый Структура);
	Данные.Вставить("Участники", Новый Структура);
	Данные.Участники.Вставить("ИдентификаторОтправителя", "");
	Данные.Участники.Вставить("ИдентификаторПолучателя", "");
	Данные.Участники.Вставить("Оператор", Новый Структура);
	Данные.Участники.Оператор.Вставить("Наименование", "");
	Данные.Участники.Оператор.Вставить("ИНН", "");
	Данные.Участники.Оператор.Вставить("Идентификатор", "");
	
	Возврат Данные;
	
КонецФункции

// Инициализирует настройки формирования электронного документа по объекту учета.
//
// Возвращаемое значение:
//  Структура - параметры формирования:
//   * Формат - Строка - формат документа (см. ПоддерживаемыеФорматы).
//   * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - вид документа.
//   * ВыгружатьДополнительныеСведения - Булево - признак выгрузки дополнительных сведений.
//   * ОтключитьРассчетДополнительныхПолей - Булево - признак отключения расч. счета дополнительных полей.
//   * ЗаполнениеКодаТовара - Строка - значение из списка, заданного в 
//                                     ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов.
//
Функция НовыеНастройкиФормированияДокументаПоОбъектуУчета() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Формат", "");
	Параметры.Вставить("ТипДокумента", Перечисления.ВидыЭД.ПустаяСсылка());
	Параметры.Вставить("ВыгружатьДополнительныеСведения", Истина);
	Параметры.Вставить("ОтключитьРассчетДополнительныхПолей", Ложь);
	Параметры.Вставить("ЗаполнениеКодаТовара", "");
		
	Возврат Параметры;
	
КонецФункции
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-08-31 (#4281) 

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-07 (#4376)
Функция СоздатьПоступлениеКопированием(ВходящийДокумент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВходящийДокумент.ок_ДокументКопирования) 
		ИЛИ ТипЗнч(ВходящийДокумент.ок_ДокументКопирования) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ДокументОбъект = ВходящийДокумент.ок_ДокументКопирования.Скопировать();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();

	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
	Если ЗначениеЗаполнено(ВходящийДокумент.ок_НомерЗаявки) Тогда
		ЗаполнитьСтруктуруПодчиненностиБКПоступление(ДокументОбъект, ВходящийДокумент.ок_НомерЗаявки);
		ДокументОбъект.ок_НомерЗаявки = ВходящийДокумент.ок_НомерЗаявки;
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать();
	Исключение
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'Запись документа ИБ'"), 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;				
	КонецПопытки; 
	
	
	Если ЗначениеЗаполнено(ВходящийДокумент.ок_НомерЗаявки) Тогда
		ОтразитьСвязьЗаявкиДокументаПоступления(ДокументОбъект.Ссылка, ДокументОбъект.ок_НомерЗаявки, Неопределено);
	КонецЕсли;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-07 (#4376) 