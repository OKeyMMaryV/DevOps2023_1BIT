////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры/функции механизма получения данных доступные как на клиенте так и на сервере.
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс
	
// Функция выполняет поиск объекта по ИД в базе, подключенной через внешнее соединение.
// 
// Параметры:
//  ЗначениеПоиска - Произвольный.
//  СтруктураИмен  - Структура.
//  Соединение     - ComObject.
//  ВыводитьОшибки - Булево.
// 
// Возвращаемое значение:
//  НайденноеЗначение - Произвольный.
// 
Функция НайтиПоИД(Соединение, СтруктураПараметров, СтруктураИмен, Режим = "ПоСсылке",  ВыводитьОшибки = Ложь) Экспорт
	
	НайденноеЗначение = Неопределено;	
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ Сервер Тогда
		
		ЗначениеПоиска   = СтруктураПараметров.ЗначениеПоиска;
		Направление      = СтруктураПараметров.Направление;		
		
		флПриемникВнешняя = ?(ВРег(Направление) = ВРег("ТекущаяВнешняя"),Истина,Ложь);
		
		
		Если Режим = "ПоИД" Тогда
			
			ИдСтр    = ЗначениеПоиска;
			
		Иначе
			
			Если флПриемникВнешняя Тогда
				
				ИдСтр    = Строка(ЗначениеПоиска.УникальныйИдентификатор());
				
			Иначе	
				
				ИдСтр    = Соединение.String(ЗначениеПоиска.УникальныйИдентификатор());
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если флПриемникВнешняя Тогда
			
			ИдПоиска = Соединение.NewObject("УникальныйИдентификатор",ИдСтр);
			
		Иначе
			
			ИдПоиска = Новый УникальныйИдентификатор(ИдСтр);
			
		КонецЕсли; 
		
		
		Попытка
			
			Если флПриемникВнешняя Тогда
				
				НайденноеЗначение = Соединение[СтруктураИмен.ИмяКоллекции][СтруктураИмен.ИмяОбъекта].ПолучитьСсылку(ИдПоиска);
				
				Если НЕ ПроверитьСсылку(НайденноеЗначение, Соединение) Тогда
				
					НайденноеЗначение = Неопределено;
				
				КонецЕсли; 
				
			Иначе
				
				Менеджер = бит_ОбщегоНазначения.ПолучитьМенеджер(СтруктураИмен.ИмяКоллекции);
				НайденноеЗначение = Менеджер[СтруктураИмен.ИмяОбъекта].ПолучитьСсылку(ИдПоиска);
				флЗначениеДоступно = бит_рлс_Основной.СсылкаДоступна(НайденноеЗначение);
				Если НЕ флЗначениеДоступно Тогда
					
					НайденноеЗначение = Неопределено;
					
				КонецЕсли; 
				
				
			КонецЕсли; 
			
		Исключение
			
			Если ВыводитьОшибки Тогда
				
				ТекстСообщения = НСтр("ru = 'Ошибка поиска объекта ""%1%"" по идентификатору! Описание ошибки ""%2%"".'");
				ИмяОбъектаПолное = СтруктураИмен.ИмяКласса+"."+СтруктураИмен.ИмяОбъекта;
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																								,ИмяОбъектаПолное
																								,Строка(ОписаниеОшибки()));
				
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																			 
				
			КонецЕсли; 
			
		КонецПопытки;
		
	#КонецЕсли 
	
	Возврат НайденноеЗначение;
	
КонецФункции // НайтиПоИД()

// Функция проверяет доступность ссылки.
// 
// Параметры:
//  ЗначениеПроверки - 
// 
// Возвращаемое значение:
//  ЗначениеДоступно - Булево.
// 
Функция ПроверитьСсылку(ЗначениеПроверки, Соединение) Экспорт
	
	ЗначениеДоступно = Истина;
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ Сервер Тогда	
		
		Если ТипЗнч(ЗначениеПроверки) = Тип("COMОбъект") Тогда
			
			 Попытка
			 
			 	СтрИД = Соединение.String(ЗначениеПроверки.УникальныйИдентификатор());
				Если НЕ ЗначениеЗаполнено(СтрИД) ИЛИ СтрИД = "00000000-0000-0000-0000-000000000000" Тогда
				
					ЗначениеДоступно = Ложь;
				
				КонецЕсли; 
			 
			 Исключение
				 
				 ЗначениеДоступно = Ложь;
				 
			 КонецПопытки;
			
		Иначе	
			
			// Проверка на "битые" ссылки
			Если НЕ ЗначениеПроверки = Неопределено 
				И НЕ ЗначениеПроверки.Пустая() Тогда
				
				Попытка
					
					ТекОбъект = ЗначениеПроверки.ПолучитьОбъект();
					Если ТекОбъект = Неопределено Тогда
						
						ЗначениеДоступно = Ложь;
						
					КонецЕсли;
					
				Исключение
					
					ЗначениеДоступно = Ложь;
					
				КонецПопытки;
				
			КонецЕсли; 
			
			
		КонецЕсли; 	
	
	#КонецЕсли 	
	
	Возврат ЗначениеДоступно;
	
КонецФункции // ПроверитьСсылку()

// Функция возвращает строку признак обращения к встроенному REST сервису по протоколу OData.
// 
// Возвращаемое значение:
//  РезСтрока - Строка.
// 
Функция ПризнакОбращенияОДата() Экспорт

	РезСтрока = "/odata/standard.odata/";

	Возврат РезСтрока;
	
КонецФункции // ПризнакОбращенияОДата()

// Функция определяет сформировано ли имя области в типовом стиле R<>C<>.
// 
// Параметры:
//  ИмяОбласти  - Строка
// 
// Возвращаемое значение:
//   Булево
// 
Функция ИмяОбластиТиповое(ИмяОбласти) Экспорт

	флИмяОбластиТиповое = Ложь;
	
	Если Найти(ВРЕГ(ИмяОбласти), "R") > 0 ИЛИ Найти(ВРЕГ(ИмяОбласти), "C") > 0 Тогда
	
		флИмяОбластиТиповое = Истина;
	
	КонецЕсли; 
	
	Возврат флИмяОбластиТиповое;

КонецФункции // ИмяОбластиТиповое()

// Функция получает область ячеек табличного документа по имени.
// 
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент.
//  ИмяОбласти        - Строка.
//  ВыводитьСообщения - Булево.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ПолучитьОбластьЯчеек(ТабличныйДокумент, ИмяОбласти, ВыводитьСообщения = Ложь)  Экспорт
	
	Область = ТабличныйДокумент.Области.Найти(ИмяОбласти);
	
	Если ВыводитьСообщения И Область = Неопределено Тогда  			
		ТекстСообщения = Нстр("ru = 'Не удалось найти область макета по имени: %1!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения, ИмяОбласти));		
	КонецЕсли;
	
	Возврат Область;
	
КонецФункции // ПолучитьОбластьЯчеек()

// Функция формирует имя области табличного документа.
// 
// Параметры:
//  Префикс      - Строка
//  НомерОбласти - Число
//  Длина		 - Число
//  Постфикс     - Строка
// 
// Возвращаемое значение:
//   Строка
// 
Функция СформироватьИмяОбласти(Префикс, НомерОбласти, Длина, Постфикс = "")  Экспорт
	
	Длина      = ?(Длина = 0, 9, Длина);
	СтрФормат  = "ЧЦ=" + Длина + "; ЧВН=; ЧГ=";
	ИмяОбласти = Префикс + Формат(НомерОбласти, СтрФормат) + Постфикс;
	
	Возврат ИмяОбласти;
	
КонецФункции // СформироватьИмяОбласти()

// Функция генерирует имя области ячейки в стиле RC.
//
// Параметры:
//   Верх - Число
//   Лево - Число
//
// Возвращаемое значение:
//  ИмяОбласти - Строка.
//
Функция СформироватьТиповоеИмяОбласти(Верх, Лево) Экспорт

	ИмяОбласти = "R"+Формат(Верх,"ЧГ=")+"C"+Формат(Лево,"ЧГ=");

	Возврат ИмяОбласти;
	
КонецФункции // СформироватьТиповоеИмяОбласти()

#КонецОбласти
