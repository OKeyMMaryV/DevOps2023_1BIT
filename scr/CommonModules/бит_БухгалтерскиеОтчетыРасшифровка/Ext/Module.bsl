////////////////////////////////////////////////////////////////////////////////
// Расширение функционала ОМ.БухгалтерскиеОтчетыРасшифровка
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. БухгалтерскиеОтчетыРасшифровка.ПоменятьНумерациюСубконтоВОтборе()
//
Процедура ПоменятьНумерациюСубконтоВОтборе(Настройки, НовыйСчет, КартаВидовСубконто) Экспорт
	
	ЭлементыОтбораКУдалению = Новый Массив();
	ЭлементыОтбораПодЗамену = Новый Массив();

	ЗаполнитьЭлементыОтбораПодЗамену(
		КартаВидовСубконто,
		Настройки.Отбор.Элементы,
		ЭлементыОтбораПодЗамену,
		ЭлементыОтбораКУдалению);
	
	Если ЭлементыОтбораПодЗамену.Количество() > 0 Тогда
		
		ВидыСубконто = Новый Соответствие;
		СвойстваСчета = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НовыйСчет);
		
		Для НомерСубконто = 1 По бит_БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
			ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
			Если ВидСубконто <> Неопределено Тогда
				ВидыСубконто.Вставить(ВидСубконто, НомерСубконто);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементЗамены Из ЭлементыОтбораПодЗамену Цикл
			
			ПоляПодходящегоТипа = Новый Массив;
			
			ЛевоеЗначениеПуть = СтрРазделить(ЭлементЗамены.ЛевоеЗначение, ".");
			
			Для Каждого ВидСубконто Из ВидыСубконто Цикл
				
				Если ВидСубконто.Ключ.ТипЗначения.СодержитТип(ТипЗнч(ЭлементЗамены.ПравоеЗначение)) Тогда
					ПоляПодходящегоТипа.Добавить(ПутьПоляСНовымНомеромСубконто(ЛевоеЗначениеПуть, ВидСубконто.Значение));
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПоляПодходящегоТипа.Количество() = 1 Тогда
				ЭлементЗамены.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПоляПодходящегоТипа[0]);
			Иначе
				ЭлементыОтбораКУдалению.Вставить(ЭлементЗамены);
				
				НоваяГруппа = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				НоваяГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				НоваяГруппа.Использование = Истина;
				
				Для Каждого Поле Из ПоляПодходящегоТипа Цикл
					
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НоваяГруппа, Поле, ЭлементЗамены.Ключ.ПравоеЗначение,  ЭлементЗамены.Ключ.ВидСравнения);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ЭлементДляУдаления Из ЭлементыОтбораКУдалению Цикл
		Настройки.Отбор.Элементы.Удалить(ЭлементДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

// См. БухгалтерскиеОтчетыРасшифровка.ОбработатьИзменениеНастройки().
//
Процедура ОбработатьИзменениеНастройки(Настройки, ИмяНастройки, СтароеЗначение, НовоеЗначение) Экспорт
	
	Если ИмяНастройки = "Счет" тогда
		
		Если ТипЗнч(НовоеЗначение) = Тип("ПланСчетовСсылка.бит_Дополнительный_2") И СтароеЗначение <> НовоеЗначение Тогда
			
			Если Настройки.СписокВидовСубконто.Количество() > 0 Тогда
				ВидыСубконтоИсходногоСчета = Новый Соответствие;
				НомерСубконто = 1;
				Для Каждого ВидСубконто Из Настройки.СписокВидовСубконто Цикл
					ВидыСубконтоИсходногоСчета.Вставить(НомерСубконто, ВидСубконто.Значение);
					НомерСубконто = НомерСубконто + 1;
				КонецЦикла;
			Иначе
				ВидыСубконтоИсходногоСчета = ВидыСубконтоСчета(СтароеЗначение);
			КонецЕсли;
			
			КартаВидовСубконто = КартаПереходаСубконтоМеждуСчетами(ВидыСубконтоИсходногоСчета, ВидыСубконтоСчета(НовоеЗначение));

			ПоменятьНумерациюСубконтоВОтборе(Настройки, НовоеЗначение, КартаВидовСубконто);
			ПоменятьНумерациюСубконтоВТабличнойЧасти("ТаблицаГруппировка", Настройки, СтароеЗначение, НовоеЗначение, КартаВидовСубконто);
			ПоменятьНумерациюСубконтоВТабличнойЧасти("ТаблицаДополнительныеПоля", Настройки, СтароеЗначение, НовоеЗначение, КартаВидовСубконто);
			СброситьНедопустимыеДляСчетаПоказатели(НовоеЗначение, Настройки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Вставить(ИмяНастройки, НовоеЗначение);

КонецПроцедуры

// См. БухгалтерскиеОтчетыРасшифровка.ПоменятьНумерациюСубконтоВТабличнойЧасти().
//
Процедура ПоменятьНумерациюСубконтоВТабличнойЧасти(ИмяТабличнойЧасти, Настройки, ИсходныйСчет, НовыйСчет, КартаВидовСубконто = Неопределено) Экспорт
	
	ТабличнаяЧасть = Неопределено;
	
	Настройки.Свойство(ИмяТабличнойЧасти, ТабличнаяЧасть);
	Если ТипЗнч(ТабличнаяЧасть) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если КартаВидовСубконто = Неопределено Тогда
		
		КартаВидовСубконто = КартаПереходаСубконтоМеждуСчетами(ВидыСубконтоСчета(ИсходныйСчет), ВидыСубконтоСчета(НовыйСчет));
		
	КонецЕсли;
	
	СтрокиКоторыеНужноУдалить = Новый Массив;
	
	Для ИндексСтроки = 0 По ТабличнаяЧасть.ВГраница() Цикл
		
		Строка = ТабличнаяЧасть.Получить(ИндексСтроки);
		
		Поле = 	Строка.Поле;
		Путь = СтрРазделить(Строка.Поле, ".");
		
		Если СтрНачинаетсяС(Путь[0],"Субконто") Тогда
			
			НомерЗамены = КартаВидовСубконто.Получить(БухгалтерскиеОтчетыКлиентСервер.НомерСубконто(Путь[0]));
			
			Если НомерЗамены = Неопределено Тогда
				Продолжить;
			ИначеЕсли НомерЗамены = 0 Тогда
				СтрокиКоторыеНужноУдалить.Добавить(ИндексСтроки);
			Иначе
				Строка.Поле = ПутьПоляСНовымНомеромСубконто(Путь, НомерЗамены);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКоторыеНужноУдалить Цикл
		
		ТабличнаяЧасть.Удалить(Строка);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. БухгалтерскиеОтчетыРасшифровка.ПутьПоляСНовымНомеромСубконто()
//
Функция ПутьПоляСНовымНомеромСубконто(Путь, НовыйНомерСубконто)
	
	НовыйПуть = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Путь);
	НовыйПуть.Установить(0, "Субконто" + НовыйНомерСубконто);
	Возврат СтрСоединить(НовыйПуть, ".");

КонецФункции

// См. БухгалтерскиеОтчетыРасшифровка.ЗаполнитьЭлементыОтбораПодЗамену().
//
Процедура ЗаполнитьЭлементыОтбораПодЗамену(КартаВидовСубконто, ЭлементыОтбора, ЭлементыОтбораПодЗамену, ЭлементыОтбораКУдалению)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			ЭлементыОтбораКУдалению.Добавить(ЭлементОтбора);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ЗаполнитьЭлементыОтбораПодЗамену(КартаВидовСубконто, ЭлементОтбора.Элементы, ЭлементыОтбораПодЗамену, ЭлементыОтбораКУдалению);
			
		Иначе
			
			ЛевоеЗначениеПуть = СтрРазделить(ЭлементОтбора.ЛевоеЗначение, ".");
			
			Если СтрНачинаетсяС(ЛевоеЗначениеПуть[0],"Субконто") Тогда
				
				НомерЗамены = КартаВидовСубконто.Получить(БухгалтерскиеОтчетыКлиентСервер.НомерСубконто(ЛевоеЗначениеПуть[0]));
				
				Если НомерЗамены = Неопределено Тогда
					Продолжить;
				ИначеЕсли НомерЗамены = 0 Тогда
					// Если прямого совпадения по виду субконто нет, 
					// то ниже попытаемся найти нужный вид субконто по типу значения отбора.
					ЭлементыОтбораПодЗамену.Добавить(ЭлементОтбора);
					
				Иначе
					
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьПоляСНовымНомеромСубконто(ЛевоеЗначениеПуть, НомерЗамены));
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. БухгалтерскиеОтчетыРасшифровка.КартаПереходаСубконтоМеждуСчетами().
//
Функция КартаПереходаСубконтоМеждуСчетами(ВидыСубконтоИсходногоСчета, ВидыСубконтоНовогоСчета)
	
	КартаПереходаНомеровСубконто = Новый Соответствие;
	
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ВидыСубконтоИсходногоСчета, ВидыСубконтоНовогоСчета) Тогда
		
		МаксимальноеКоличествоСубконто = бит_БухгалтерскийУчет.МаксимальноеКоличествоСубконто();
		
		НомераСубконтоНовогоСчета = Новый Соответствие;
		Для НомерСубконто = 1 По МаксимальноеКоличествоСубконто Цикл
			НомераСубконтоНовогоСчета.Вставить(ВидыСубконтоНовогоСчета[НомерСубконто], НомерСубконто);
		КонецЦикла;
		
		Для НомерСубконтоИсходногоСчета = 1 По МаксимальноеКоличествоСубконто Цикл
			ВидСубконто = ВидыСубконтоИсходногоСчета[НомерСубконтоИсходногоСчета];
			НомерСубконтоНовогоСчета = НомераСубконтоНовогоСчета[ВидСубконто];
			КартаПереходаНомеровСубконто.Вставить(НомерСубконтоИсходногоСчета, НомерСубконтоНовогоСчета);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КартаПереходаНомеровСубконто;
	
КонецФункции

// См. БухгалтерскиеОтчетыРасшифровка.ВидыСубконтоСчета().
//
Функция ВидыСубконтоСчета(Счет)
	
	ВидыСубконто = Новый Соответствие;
	СвойстваСчета = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для НомерСубконто = 1 По бит_БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
		Если ВидСубконто <> Неопределено Тогда
			ВидыСубконто.Вставить(НомерСубконто, ВидСубконто);
		КонецЕсли;
	КонецЦикла;
	Возврат ВидыСубконто;

КонецФункции

// См. БухгалтерскиеОтчетыРасшифровка.СброситьНедопустимыеДляСчетаПоказатели().
//
Процедура СброситьНедопустимыеДляСчетаПоказатели(Счет, Настройки)
	
	СвойстваСчета = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если НЕ СвойстваСчета.Количественный Тогда
		Настройки.ПоказательКоличество = Ложь;
	КонецЕсли;
	
	// Для счетов групп валютная сумма допустима.
	Если НЕ СвойстваСчета.Валютный И НЕ СвойстваСчета.ЗапретитьИспользоватьВПроводках Тогда
		Настройки.ПоказательВалютнаяСумма = Ложь;
	КонецЕсли;
		
	Если СвойстваСчета.Вид <> ВидСчета.АктивноПассивный Тогда
		Настройки.РазвернутоеСальдо = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 