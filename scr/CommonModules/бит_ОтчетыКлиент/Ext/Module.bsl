
#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСКомпоновщиком

// Процедура устанавливает параметр компоновщика.
// 
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных.
//  Значение	 		- Произвольное значение.
//  ИмяПараметра  	 	- Строка.
//  ИмяКлюча 			- Строка (необязательный).
// 
Процедура УстановитьЗначениеПараметраКомпоновщика(КомпоновщикНастроек, Значение, ИмяПараметра, ИмяКлюча = Неопределено) Экспорт

	НовыйПараметрКД =  Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(НовыйПараметрКД);
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИдНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ЗначениеПараметра);
	
	ПараметрСКД = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдНастройки);
	
	Если ПараметрСКД = Неопределено Тогда
		ТекстСообщения = Нстр("ru = 'Ошибка. Не найден параметр СКД.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрСКД.Использование = Истина;
	
	Если ИмяКлюча = Неопределено Тогда
		ПараметрСКД.Значение = Значение;
	Иначе	
	    ПараметрСКД.Значение[ИмяКлюча] = Значение;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПараметраКомпоновщика()

// Процедура получает параметр компоновщика.
// 
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных.
//  ИмяПараметра  	 	- Строка.
//  ИмяКлюча 			- Строка (необязательный).
// 
// Возвращаемое значение:
//  Произвольное значение.
// 
Функция ПолучитьЗначениеПараметраКомпоновщика(КомпоновщикНастроек, ИмяПараметра, ИмяКлюча = Неопределено) Экспорт

	НовыйПараметрКД =  Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(НовыйПараметрКД);
	
	ИдНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ЗначениеПараметра);
	
	ПараметрСКД = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдНастройки);
	
	Если ИмяКлюча = Неопределено Тогда
		Значение = ПараметрСКД.Значение;
	Иначе	
	    Значение = ПараметрСКД.Значение[ИмяКлюча];
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьЗначениеПараметраКомпоновщика()

#КонецОбласти

#Область ВыводРезультатаДополниетльныеОпции

// Процедура выводит копию результата в отдельном окне.
// 
// Параметры:
//  Результат - ТабличныйДокумент.
// 
Процедура ПоказатьКопиюРезультата(Результат) Экспорт
	
	ТабДок = бит_ОтчетыСервер.СформироватьКопиюРезультата(Результат);

	ТабДок.Показать();
	
КонецПроцедуры // ПоказатьКопиюРезультата()

#КонецОбласти

#Область РаботаСПанельюВыбораСохраненныхНастроек

// Процедура обрабатывает событие "Нажатие" элемента формы "ДекорацияНастройки<№>".
// 
// Параметры:
//  Элементы	 				   - ВсеЭлементыФормы.
//  Элемент						   - ДекорацияФормы.
//  ИмяЭлемента_ВыбраннаяНастройка - Строка.
// 
Процедура ОбработатьНажатиеНаПолеСохраненнойНастройки(Элементы, Элемент, ИмяЭлемента_ВыбраннаяНастройка) Экспорт
	
	ПоменятьТипыРамок(Элементы, Элемент.Имя, ИмяЭлемента_ВыбраннаяНастройка);
		 	
КонецПроцедуры // ОбработатьНажатиеНаПолеСохраненнойНастройки()

#КонецОбласти

#Область Расшифровка

// Процедура обрабатывает расшифровку.
// 
// Параметры:
//  Расшифровка 		 	 - ИдентификаторРасшифровкиКомпоновкиДанны.
//  ДанныеРасшифровки 	 	 - Строка.
//  ИмяОтчета			 	 - Строка.
//  АдресСКД			 	 - Строка.
//  СтандартнаяОбработка 	 - Булево.
//  ДополнительныеПунктыМеню - Структура (По умолчанию = Неопределено).
//  ДополнительныеПараметры	 - Структура (По умолчанию = Неопределено).
//  ЗаполнятьВыбранные		 - Булево (По умолчанию = Ложь).
//  ОткрыватьДопЗначение	 - Булево (По умолчанию = Ложь).
// 
Процедура ОбработкаРасшифровки(ФормаВладелец, Расшифровка, ДанныеРасшифровки, ИмяОтчета, АдресСКД, СтандартнаяОбработка 
												, ДополнительныеПунктыМеню = Неопределено 
												, ДополнительныеПараметры = Неопределено 
												, ЗаполнятьВыбранные = Ложь
												, ОткрыватьДопЗначение = Ложь) Экспорт
	
	// Переменная, хранящее значение выполненого действия.
	Перем ВыполненноеДействие;
	// Переменная, хранящее значение параметра выполненого действия.
	Перем ПараметрВыполненногоДействия;
		
	СтандартнаяОбработка = Ложь;
		
	СтруктураРасшифровки = бит_ОтчетыСервер.ПолучитьДанныеРасшифровки(Расшифровка, ДанныеРасшифровки, ДополнительныеПунктыМеню);
	ЗначениеРасшифровки  = СтруктураРасшифровки.ЗначениеРасшифровки;
		
	Если ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
		
		Если ТипЗнч(ЗначениеРасшифровки) = Тип("Массив") Тогда
		    // Не выодим NULL в массиве.
			КоличествоЭл = ЗначениеРасшифровки.Количество();
			Для i = 1 По КоличествоЭл Цикл
				// Обход элементов массива с конца.
				НЭл = КоличествоЭл - i;
				Если ЗначениеРасшифровки[НЭл] = NULL Тогда
					ЗначениеРасшифровки.Удалить(НЭл);				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ПоказатьЗначение( , ЗначениеРасшифровки);
				
	Иначе
		
		Если ВРег(ИмяОтчета) = ВРег("Отчет.бит_ОтчетПоБюджету") Тогда
			ПолеРасшифровки = "об_"+СтруктураРасшифровки.ПолеРасшифровки;
		Иначе
			ПолеРасшифровки = СтруктураРасшифровки.ПолеРасшифровки;
		КонецЕсли; 
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			Если ДополнительныеПараметры.Свойство("Сценарий") И ДополнительныеПараметры.Свойство("СценарийЭталон") Тогда
		    	Если Найти(ПолеРасшифровки, "Эталон") <> 0 Тогда
					ДополнительныеПараметры.Сценарий = ДополнительныеПараметры.СценарийЭталон;
				КонецЕсли;
				ДополнительныеПараметры.Удалить("СценарийЭталон");
			КонецЕсли;		
		КонецЕсли;
						
		ДоступныеДействия = Новый Массив;
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
		Если ОткрыватьДопЗначение Тогда
			ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
			ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
			// ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить); 			
			ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);		
		КонецЕсли;
		
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
		ОбработкаРКД = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникНастроек);
		
		Попытка 
			
			ДопПараметрыОповещения = Новый Структура;
			ДопПараметрыОповещения.Вставить("ИмяОтчета"				 , ИмяОтчета);
			ДопПараметрыОповещения.Вставить("Расшифровка"			 , Расшифровка);
			ДопПараметрыОповещения.Вставить("ДанныеРасшифровки"		 , ДанныеРасшифровки);
			ДопПараметрыОповещения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			ДопПараметрыОповещения.Вставить("ПолеРасшифровки"		 , ПолеРасшифровки);
			ДопПараметрыОповещения.Вставить("ЗаполнятьВыбранные"	 , ЗаполнятьВыбранные);
			ДопПараметрыОповещения.Вставить("ФормаВладелец"	 		 , ФормаВладелец); 			
			ОбработчикВДРЗ = Новый ОписаниеОповещения("ВыбратьДействиеРасшифровкиЗавершение", ЭтотОбъект, ДопПараметрыОповещения);
			ОбработкаРКД.ПоказатьВыборДействия(ОбработчикВДРЗ, Расшифровка, ДоступныеДействия, ДополнительныеПунктыМеню);
			
		Исключение
			
			ТекстСообщения = Нстр("ru = 'Не удалось выполнить расшифровку.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат;
			
		КонецПопытки;
										
	КонецЕсли;
		
КонецПроцедуры // ОбработкаРасшифровки()

// Процедура - завершение выбора действия расшифровки.
// 
// Параметры:
//  ВыполненноеДействие.
//  ПараметрВыполненногоДействия.
//  ДопПараметры.
//
Процедура ВыбратьДействиеРасшифровкиЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДопПараметры) Экспорт
	
	Если ТипЗнч(ВыполненноеДействие) <> Тип("Неопределено") Тогда
		
		ИмяОтчета 	   	   	    = ДопПараметры.ИмяОтчета;
		Расшифровка 	   	    = ДопПараметры.Расшифровка;
		ДанныеРасшифровки  	    = ДопПараметры.ДанныеРасшифровки;
		ЗаполнятьВыбранные 	    = ДопПараметры.ЗаполнятьВыбранные;
		ПолеРасшифровки    	    = ДопПараметры.ПолеРасшифровки;
		ДополнительныеПараметры = ДопПараметры.ДополнительныеПараметры;
		ФормаВладелец 			= ДопПараметры.ФормаВладелец;
		
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать 
			ИЛИ ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать 
			ИЛИ ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать
			ИЛИ ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить Тогда
			
			ОписаниеОбработкиРКД = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Расшифровка, ПараметрВыполненногоДействия);
			Если ЗаполнятьВыбранные И ЗначениеЗаполнено(ПолеРасшифровки) Тогда
				ВыбранноеПоле = ОписаниеОбработкиРКД.ПрименяемыеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеРасшифровки);
				// ВыбранноеПоле.Заголовок = "Показатель";
			КонецЕсли;
			
			ПараметрыФормы = ?(ДополнительныеПараметры = Неопределено, Новый Структура, ДополнительныеПараметры);
			ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			ПараметрыФормы.Вставить("КлючВарианта"			 , Неопределено);
			ПараметрыФормы.Вставить("ПредставлениеВарианта"	 , "Расшифровка");
			ПараметрыФормы.Вставить("Расшифровка"			 , ОписаниеОбработкиРКД);
			ОткрытьФорму(ИмяОтчета + ".Форма"  					 // ИмяФормы.
							, ПараметрыФормы  					 // Параметры.
							, ФормаВладелец                      // Владелец.
							, Новый УникальныйИдентификатор      // Уникальность.
							, 									 // Окно.
							,                                    // НавигационнаяСсылка.
							,                                    // ОписаниеОповещенияОЗакрытии.
							, РежимОткрытияОкнаФормы.Независимый // РежимОткрытияОкна.
							);
			
		ИначеЕсли ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ПоказатьЗначение( , ПараметрВыполненногоДействия);
			
		ИначеЕсли ТипЗнч(ВыполненноеДействие) = Тип("ДействиеОбработкиРасшифровкиКомпоновкиДанных") Тогда
			
			Возврат;
			
		Иначе // Расшифровка отчетом (Например: бит_ОплатаЗаявок, бит_ДанныеБюджета).
			
			РасшифроватьОтчетом(ВыполненноеДействие, ДопПараметры);	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыбратьДействиеРасшифровкиЗавершение()

#КонецОбласти

// Процедура вычисляет сумму по выделенным областям табличного документа.
// 
// Параметры:
//  ПолеТабличногоДокумента - Табличный документ.
// 
// Возвращаемое значение:
//  Число.
// 
Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеТабличногоДокумента) Экспорт
	
	Сумма = 0;
	
	Для Каждого Область Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					
					Попытка
						
						ТекущаяОбласть = ПолеТабличногоДокумента.Область("R" + Формат(ИндексСтрока , "ЧГ=0") 
																		+ "C" + Формат(ИндексКолонка, "ЧГ=0"));
						
						Если ТекущаяОбласть <> Неопределено И ТекущаяОбласть.Видимость Тогда
                        							
							МассивЧисел = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ТекущаяОбласть.Текст, Символы.ПС);
							СтрокаБезПробелов = СтрЗаменить(МассивЧисел[0], " ", "");
							Попытка
								НовоеЧисло = Число(СтрокаБезПробелов);						
							Исключение
								НовоеЧисло = 0;
							КонецПопытки;
							
							Сумма = Сумма + НовоеЧисло;
							
						КонецЕсли;
						
					Исключение
					КонецПопытки;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента()

// Процедура формирует отчет на СКД. 
// В зависимости от режима формирования отчет будет формироваться в фоне или непосредственно.
// 
// Параметры:
//  ФормаОтчета       - УправляемаяФорма.
//  КомПанель         - ГруппаФормы.
//  РежимФормирования - Строка.
// 
Процедура СформироватьОтчет(ФормаОтчета, КомПанель, РежимФормирования) Экспорт
	  		
	СтрРегистрация = Новый Структура;
	бит_ук_СлужебныйВызовСервера.РегистрацияНачалоСобытия(Ложь, СтрРегистрация, ФормаОтчета.ИмяФормы);
	
	Если ВРег(РежимФормирования) = ВРег("Авто") Тогда
		
		ФормаОтчета.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
		бит_ук_СлужебныйВызовСервера.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);
		
	ИначеЕсли ВРег(РежимФормирования) = ВРег("Непосредственно") Тогда
		
		ФормаОтчета.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Непосредственно);
		бит_ук_СлужебныйВызовСервера.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);
		
	ИначеЕсли ВРег(РежимФормирования) = ВРег("Фоновый") Тогда
		
		ФормаОтчета.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Фоновый);
		бит_ук_СлужебныйВызовСервера.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);
		
	ИначеЕсли ВРег(РежимФормирования) = ВРег("ВыборПользователя") Тогда
		
		Меню = Новый СписокЗначений();
		Меню.Добавить("Непосредственно");
		Меню.Добавить("ВФоне","В фоне");
		
		// РезЗначение = ФормаОтчета.ВыбратьИзМеню(Меню, КомПанель);
		ДопПараметры = Новый Структура("ФормаОтчета", ФормаОтчета);
		ОбработчикВМ = Новый ОписаниеОповещения("СкомпоноватьРезультат_Завершение", бит_ОтчетыКлиент.ЭтотОбъект, ДопПараметры);
		ФормаОтчета.ПоказатьВыборИзМеню(ОбработчикВМ, Меню, КомПанель);
				
	Иначе
		
		ФормаОтчета.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Непосредственно);
		бит_ук_СлужебныйВызовСервера.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);
		
	КонецЕсли; 
		
КонецПроцедуры // СформироватьОтчет()

// Процедура формирует отчет выбранным способом.
// 
// Параметры:
//  РезЗначение.
//  ДопПараметры - Структура.
//  
Процедура СкомпоноватьРезультат_Завершение(РезЗначение, ДопПараметры) Экспорт

	ФормаОтчета = ДопПараметры.ФормаОтчета;
	
	Если РезЗначение <> Неопределено  Тогда
		
		СтрРегистрация = Новый Структура;
		бит_ук_СлужебныйВызовСервера.РегистрацияНачалоСобытия(Ложь, СтрРегистрация, ДопПараметры.ФормаОтчета.ИмяФормы);

		
		Если РезЗначение.Значение = "ВФоне" Тогда
			
			ФормаОтчета.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Фоновый);
			
		Иначе	
			
			ФормаОтчета.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Непосредственно);
			
		КонецЕсли; 
		
		бит_ук_СлужебныйВызовСервера.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);
		
	КонецЕсли;	

КонецПроцедуры // СкомпоноватьРезультат_Завершение()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура меняет отображение выбранной настройки.
// 
// Параметры:
//  Элементы	 					- ВсеЭлементыФормы.
//  ИмяЭлемента  					- Строка.
//  ИмяЭлемента_ВыбраннаяНастройка 	- Строка.
// 
Процедура ПоменятьТипыРамок(Элементы, ИмяЭлемента, ИмяЭлемента_ВыбраннаяНастройка)

	Если ИмяЭлемента = ИмяЭлемента_ВыбраннаяНастройка Тогда
		Возврат;	
	КонецЕсли;
	
	Элементы[ИмяЭлемента].Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Вдавленная, 2);
	
	Если ЗначениеЗаполнено(ИмяЭлемента_ВыбраннаяНастройка) Тогда
		Элементы[ИмяЭлемента_ВыбраннаяНастройка].Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Выпуклая, 2);
	КонецЕсли;
	
	ИмяЭлемента_ВыбраннаяНастройка = ИмяЭлемента;
	
КонецПроцедуры // ПоменятьТипыРамок() 

// Процедура расшифровывает отчетом "бит_ОплатаЗаявок".
// 
// Параметры:
//  Отчет  		 - ОтчетОбъект.
//  ДопПараметры - Структура.
// 
Процедура РасшифроватьОтчетом(ИмяОтчета, ДопПараметры)
    
    ФормаВладелец = ДопПараметры.ФормаВладелец;
    ДопПараметры.Удалить("ФормаВладелец");
        
	ПользовательскиеНастройки = бит_ОтчетыСервер.ПолучитьПользовательскиеНастройкиОтчета(ИмяОтчета, ДопПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии"  , Истина);
	ПараметрыФормы.Вставить("КлючВарианта"			   , Неопределено);
	ПараметрыФормы.Вставить("ПредставлениеВарианта"	   , "Расшифровка");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	СтрокаФорма = "Отчет." + ИмяОтчета + ".Форма";
	Попытка
		ОткрытьФорму(СтрокаФорма  								  // ИмяФормы.
						, ПараметрыФормы  						  // Параметры.
						, ФормаВладелец                           // Владелец.
						,                                         // Уникальность.
						, 			                              // Окно.
						,                                         // НавигационнаяСсылка.
						,                                         // ОписаниеОповещенияОЗакрытии.
						, РежимОткрытияОкнаФормы.Независимый);    // РежимОткрытияОкна.
	Исключение    
		ТекстСообщения = Нстр("ru = 'Не удалось расшифровать отчетом.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			
	КонецПопытки;
	
КонецПроцедуры // РасшифроватьОтчетом()

#КонецОбласти
