////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ РАБОТЫ С ВНЕШНЕЙ БИБЛИОТЕКОЙ ПРОЦЕДУР.
// 
// 	Модуль содержит процедуры и функции, являющиеся интерфейсом
// 	к внешней библиотеке, реализующей возможности отсутствующие в 1С.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыИФункцииРаботыСБуферомОбмена

// Проверяет наличие изображения в буфере обмена Windows.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - в буфере обмена содержится изображение;
// 													 Ложь - в противном случае.
// 
Функция ЕстьКартинкаВБуфереОбмена(АдресУтилитВоВременномХранилище = "", АдресРегистратора = "") Экспорт


	#Если ТонкийКлиент Тогда
		Если Не ЗначениеЗаполнено(АдресУтилитВоВременномХранилище) Или АдресУтилитВоВременномХранилище = Неопределено 
			Или АдресРегистратора = "" Или АдресРегистратора = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	#КонецЕсли
	Библиотека = бит_ПолучитьБиблиотекуУтилит(АдресУтилитВоВременномХранилище,АдресРегистратора);
	Если Библиотека = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Ошибка = "";
	КартинкаСтрокой = Библиотека.GetClipBrdImage2("png", Ошибка);
	Если КартинкаСтрокой = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции // ЕстьКартинкаВБуфереОбмена()

// Помещает переданную картинку в буфер обмена Windows.
// 
// Параметры 
// 	ПарамКартинка      	 -	Картинка,				 Данные картинки
// 							ДвоичныеДанные
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - картинка помещена в буфере обмена;
// 													 Ложь - в противном случае.
// 
Функция ПоместитьКартинкуВБуферОбмена(ПарамКартинка, АдресУтилитВоВременномХранилище = "", АдресРегистратора = "") Экспорт
	Библиотека = бит_ПолучитьБиблиотекуУтилит(АдресУтилитВоВременномХранилище,АдресРегистратора);
	Если Библиотека = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ПарамКартинка) = Тип("Картинка") Тогда
		ВремКартинка = ПарамКартинка;
	ИначеЕсли ТипЗнч(ПарамКартинка) = Тип("ДвоичныеДанные") Тогда
		ВремКартинка = Новый Картинка(ПарамКартинка);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Попытка
		ВремКартинка = ВремКартинка.Преобразовать(ФорматКартинки.PNG);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	КартинкаСтрокой = СтрЗаменить(Base64Строка(ВремКартинка.ПолучитьДвоичныеДанные()), Символы.ВК + Символы.ПС, "");
	Попытка
		Возврат Библиотека.SetClipBrdImage(КартинкаСтрокой);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
КонецФункции // ПоместитьКартинкуВБуферОбмена()

// Получает изображение из буфера обмена Windows.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	Картинка               	 Полученное изображение;
// 													 Неопределено - не удалось получить изображение.
// 
Функция ПолучитьКартинкуИзБуфераОбмена(АдресУтилитВоВременномХранилище = "", АдресРегистратора = "", Формат = "BMP") Экспорт
	Библиотека = бит_ПолучитьБиблиотекуУтилит(АдресУтилитВоВременномХранилище,АдресРегистратора);
	Если Библиотека = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВремКартинка = Неопределено;
	Попытка
		Ошибка = "";
		КартинкаСтрокой = Библиотека.GetClipBrdImage2(Формат, Ошибка);
		Если ЗначениеЗаполнено(Ошибка) Тогда
			ВремКартинка = Неопределено;
		Иначе
			ВремКартинка = Base64Значение(КартинкаСтрокой);
		КонецЕсли;
		// ВремТекст = Новый ТекстовыйДокумент();
		// ВремТекст.ДобавитьСтроку(КартинкаСтрокой);
		// ВремФайл = ПолучитьИмяВременногоФайла("txt");
		// ВремТекст.Записать(ВремФайл);
		// ВремТекст = Новый Картинка(ВремКартинка);
		// ВремФайл = ПолучитьИмяВременногоФайла(Формат);
		// ВремТекст.Записать(ВремФайл);
	Исключение
		ВремКартинка = Неопределено;
	КонецПопытки;
	Возврат ВремКартинка;
КонецФункции // ПолучитьКартинкуИзБуфераОбмена()

#КонецОбласти

#Область ПроцедурыИФункцииПолученияХэшаЗначений

// Получает хэш по алгоритму MD5 для переданной строки.
// 
// Параметры 
// 	ПарамСтрока      	 -	Строка				   	 Строка, для которой требуется хэш.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка, Неопределено   	 Хэш строки;
// 													 Неопределено - ошибка получения хэша.
// 
Функция ПолучитьХэшСтроки(ПарамСтрока) Экспорт
	Библиотека = бит_ПолучитьБиблиотекуУтилит();
	Если Библиотека = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВремХэш = Неопределено;
	Попытка
		ВремХэш = Библиотека.GetStringHash(ПарамСтрока);
	Исключение
	КонецПопытки;
	Возврат ВремХэш;
КонецФункции // ПолучитьХэшСтроки()

// Получает хэш по алгоритму MD5 для указанного файла или каталога.
// 
// Параметры 
// 	ПутьКФайлу      	 -	Строка				   	 Путь к файлу/каталогу, для которого требуется получить хэш.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка, Неопределено   	 Хэш файла/каталога;
// 													 Неопределено - ошибка получения хэша.
// 
Функция ПолучитьХэшФайла(ПутьКФайлу) Экспорт
	Библиотека = бит_ПолучитьБиблиотекуУтилит();
	Если Библиотека = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВремХэш = Неопределено;
	Попытка
		ВремХэш = Библиотека.GetFileHash(ПутьКФайлу);
	Исключение
	КонецПопытки;
	Возврат ВремХэш;
КонецФункции // ПолучитьХэшФайла()

#КонецОбласти

// Регистрирует внешнюю библиотеку для текущего пользователя системы.
// 
// Параметры 
// 	ИмяБиблиотеки      	 -	Строка				   	 Имя объекта-библиотеки
// 	УИД             	 -	Строка				   	 GUID для регистрации объекта в формате xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.
// 	ПутьКФайлуБиблиотеки -	Строка				   	 Расположение файла библиотеки.
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - библиотека успешно зарегистрирована;
// 													 Ложь - в противном случае.
// 
Функция бит_ЗарегистрироватьВнешнююБиблиотеку(ИмяБиблиотеки, УИД, ПутьКФайлуБиблиотеки, АдресРегистратора = "") Экспорт


	#Если Клиент Тогда
	#Если Не ВебКлиент Тогда
		ВремРегистратор = ПолучитьИмяВременногоФайла("exe");
	#Иначе
		// Для веб клиента загрузка из буфера отключена.
		ВремРегистратор = Неопределено;
	#КонецЕсли
	#Если Не ТонкийКлиент И Не ВебКлиент Тогда
		ВремДанныеРегистратора = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.бит_РегистраторВнешнихБиблиотек.Имя);
	#Иначе
		ВремДанныеРегистратора = ПолучитьИзВременногоХранилища(АдресРегистратора);
	#КонецЕсли
	ВремДанныеРегистратора.Записать(ВремРегистратор);
	Попытка
		ЗапуститьПриложение(ВремРегистратор + " """ + ИмяБиблиотеки + """ ""{" + УИД + "}"" """ + ПутьКФайлуБиблиотеки + """", , Истина);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
	#Иначе
	Возврат Ложь;
	#КонецЕсли
КонецФункции // бит_ЗарегистрироватьВнешнююБиблиотеку()

// &НаСервере
// Функция ПолучитьОбщийМакетНаСервере(РегистраторВнешнихБиблиотек) Экспорт 
// 	Макет = ПолучитьОбщийМакет(?(РегистраторВнешнихБиблиотек
// 		, Метаданные.ОбщиеМакеты.бит_РегистраторВнешнихБиблиотек.Имя
// 		, Метаданные.ОбщиеМакеты.бит_Утилиты.Имя));
// 	Возврат Макет;
// КонецФункции
	
// Получает объект внешней библиотеки
// 
// Параметры 
// 	ИмяБиблиотеки      	 -	Строка				   	 Имя объекта-библиотеки
// 	УИД             	 -	Строка				   	 GUID для регистрации объекта в формате xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
// 	ПутьКФайлуБиблиотеки -	Строка				   	 Расположение файла библиотеки.
// Возвращаемое значение:
// 	Возврат ...        	 -	COMОбъект, Неопределено	 Загруженный объект библиотеки процедур;
// 													 Неопределено - не удалось загрузить объект.
// 
Функция бит_ПолучитьБиблиотеку(ИмяБиблиотеки, УИД = "", ПутьКФайлуБиблиотеки = "", АдресРегистратора = "") Экспорт
	ВремБиблиотека = Неопределено;
	Попытка
		ВремБиблиотека = Новый COMОбъект(ИмяБиблиотеки);
	Исключение
	КонецПопытки;
	
	
	Если ВремБиблиотека = Неопределено Тогда
		Если бит_Утилиты.бит_ЗарегистрироватьВнешнююБиблиотеку(ИмяБиблиотеки, УИД, ПутьКФайлуБиблиотеки,АдресРегистратора) Тогда
			Попытка
				ВремБиблиотека = Новый COMОбъект(ИмяБиблиотеки);
			Исключение
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Возврат ВремБиблиотека;
КонецФункции // бит_ПолучитьБиблиотеку()

// Получает объект внешней библиотеки утилит БИТ (BITUtils.dll), хранимой в макете конфигурации.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	COMОбъект, Неопределено	 Загруженный объект библиотеки процедур;
// 													 Неопределено - не удалось загрузить объект.
// 
Функция бит_ПолучитьБиблиотекуУтилит(АдресУтилитВоВременномХранилище = "", АдресРегистратора = "") Экспорт
	#Если Не ВебКлиент Тогда
	ВремФайл = Новый Файл(КаталогВременныхФайлов() + "\BIT\BITUtils.dll");
	#Иначе
	ВремФайл = Неопределено;
	#КонецЕсли
	Если НЕ ВремФайл.Существует() Тогда
		#Если Не ВебКлиент Тогда
		СоздатьКаталог(КаталогВременныхФайлов() + "\BIT");
		ВремФайлБиблиотеки = КаталогВременныхФайлов() + "\BIT\BITUtils.dll";	// "%AppData%\BIT\BITUtils.dll";
		#Иначе
		ВремФайлБиблиотеки = Неопределено;
		#КонецЕсли
		#Если Не ТонкийКлиент И Не ВебКлиент Тогда
			ВремДанныеБиблиотеки = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.бит_Утилиты.Имя);
		#Иначе
			ВремДанныеБиблиотеки = ПолучитьИзВременногоХранилища(АдресУтилитВоВременномХранилище );
		#КонецЕсли
		ВремДанныеБиблиотеки.Записать(ВремФайлБиблиотеки);
	КонецЕсли;
	Возврат бит_Утилиты.бит_ПолучитьБиблиотеку("BitUtils.Bit",
											   "D6D3457D-A49A-41B9-938A-53BE4CAA3A87",
											   ?(НЕ ВремФайлБиблиотеки = Неопределено,
											     ВремФайлБиблиотеки,
												 ВремФайл.ПолноеИмя),АдресРегистратора);
КонецФункции // бит_ПолучитьБиблиотекуУтилит()

#КонецОбласти
