
Процедура бит_ПередЗаписьюКонтрагентаПередЗаписью(Источник, Отказ) Экспорт
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-05 (#3487)
	//Если Источник.ОбменДанными.Загрузка Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Источник.Ссылка)Тогда 
	//	Если Источник.Модифицированность() Или  Источник.ЭтоНовый()  Тогда
	//		
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	ДоговорыКонтрагентов.Ссылка
	//		|ИЗ
	//		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//		|ГДЕ
	//		|	ДоговорыКонтрагентов.Владелец = &Владелец
	//		|	И ДоговорыКонтрагентов.Организация В (&Организации)";
	//		
	//		Организации = Новый Массив;
	//		Организации.Добавить(Справочники.Организации.НайтиПоКоду("000000045"));
	//		Организации.Добавить(Справочники.Организации.НайтиПоКоду("000000056"));
	//		
	//		Запрос.УстановитьПараметр("Владелец", Источник.Ссылка);
	//		Запрос.УстановитьПараметр("Организации", Организации);
	//		
	//		Результат = Запрос.Выполнить();
	//
	//		Если Не  Результат.Пустой() Тогда
	//			УстановитьПривилегированныйРежим(Истина);
	//			МенеджерЗаписей = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
	//			МенеджерЗаписей.Объект = Источник.Ссылка;  
	//			МенеджерЗаписей.ДатаИзменения = ТекущаяДата();
	//			МенеджерЗаписей.Записать();
	//			УстановитьПривилегированныйРежим(Ложь);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-05 (#3487)
	
КонецПроцедуры

Процедура бит_ПередЗаписьюДоговораПередЗаписью(Источник, Отказ) Экспорт
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-05 (#3487)
	//// ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-02-20 (#2965)
	//Если Источник.ОбменДанными.Загрузка Тогда
	//	Возврат;
	//КонецЕсли;
	//СписокОрганизаций_НеПогашатьЗадолженность = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_НеПогашатьЗадолженность");
	//Если СписокОрганизаций_НеПогашатьЗадолженность = Неопределено Тогда // нет константы, нет обмена с Аксапта
	//	Возврат;
	//ИначеЕсли СписокОрганизаций_НеПогашатьЗадолженность.НайтиПоЗначению(Источник.Организация) = Неопределено Тогда // организация не обменивается с Аксапта
	//	Возврат;
	//КонецЕсли;	
	//// ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-02-20 (#2965)
	//
	//// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-20 (#2965)
	//// ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-06-27 (#2965)
	////Если НЕ ЗначениеЗаполнено(Источник.бит_СтадияДоговора) Тогда
	////	Источник.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Подготовка;
	////КонецЕсли;
	//// ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-06-27 (#2965)
	//// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-20 (#2965)
	//
	//Если Источник.ДополнительныеСвойства.Свойство("ТекущийДоговорИзменен")  Тогда ;	
	//	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда 
	//		Если Источник.Модифицированность() Тогда 
	//			Если Источник.бит_СтадияДоговора <> Источник.Ссылка.бит_СтадияДоговора и 
	//				Источник.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Замечания  Тогда 
	//				ИзменитьСтадииВДоговорахКонтрагента(Источник,Ложь);	
	//				
	//			КонецЕсли;
	//		КонецЕсли;
	//	Иначе 
	//		//ИзменитьСтадииВДоговорахКонтрагента(Источник,Истина);	
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-20 (#2965)
	//		
	////Если Источник.ЭтоНовый() или (ЗначениеЗаполнено(Источник.Ссылка) и Источник.ДополнительныеСвойства.Свойство("ТекущийДоговорИзменен") )Тогда 
	////	Если Источник.Организация = Справочники.Организации.НайтиПоКоду("000000045") Или 
	////		Источник.Организация = Справочники.Организации.НайтиПоКоду("000000056") Тогда  
	////		Источник.ДополнительныеСвойства.Вставить("ВыгрузитьДоговор",Истина);
	////	КонецЕсли;
	////КонецЕсли;

	////Установка свойства выгрузки договора в Аксапту
	//// ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-06-27 (#2965)
	////Если Источник.ДополнительныеСвойства.Свойство("ТекущийДоговорИзменен") И Источник.бит_СтадияДоговора <> Перечисления.бит_ВидыСтадийДоговоров.Подготовка Тогда
	//Если Источник.ДополнительныеСвойства.Свойство("ТекущийДоговорИзменен") И Не Источник.ЭтоНовый() Тогда // новый договор не выгружаем
	//// ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-06-27 (#2965) 
	//	
	//	Если Источник.бит_СтатьиОборотов.Количество() = 0 Тогда
	//		ТекстСообщения = НСтр("ru = 'В договоре не указана ни одна статья оборотов БДДС. Пожалуйста, укажите статью, пройдя по ссылке Дополнительные реквизиты (БИТ).'");
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(Источник.бит_ОсновнаяСтатьяОборотов) Тогда
	//		СтатьяОборотов = Источник.бит_ОсновнаяСтатьяОборотов;
	//	Иначе
	//		Для Каждого СтрокаТабЧасти Из Источник.бит_СтатьиОборотов Цикл
	//			Если СтрокаТабЧасти.СтатьяОборотов.ТипСтатьи = ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС") Тогда
	//				СтатьяОборотов = СтрокаТабЧасти.СтатьяОборотов;
	//				Прервать;
	//			КонецЕсли;	
	//		КонецЦикла;	
	//	КонецЕсли;
	//	
	//	Если Не ЗначениеЗаполнено(СтатьяОборотов) Тогда
	//		ТекстСообщения = НСтр("ru = 'В договоре не указана ни одна статья оборотов БДДС. Пожалуйста, укажите статью, пройдя по ссылке Дополнительные реквизиты (БИТ).'");
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	//		Возврат;
	//	КонецЕсли;
	//	
	//	УстановитьПривилегированныйРежим(Истина);
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//	|	ЕСТЬNULL(бит_ок_СопоставлениеАналитики.КодАналитикиАксапты, """") КАК КодАналитикиАксапты,
	//	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов КАК СтатьяОборотов
	//	|ИЗ
	//	|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
	//	|		ПО бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл = бит_ок_СопоставлениеАналитики.Аналитика1С
	//	|ГДЕ
	//	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов = &СтатьяОборотов
	//	|	И бит_ок_СопоставлениеАналитики.Организация = &Организация
	//	|	И бит_ок_СопоставлениеАналитики.СчетАксапты = ""51""
	//	|	И НЕ ЕСТЬNULL(бит_ок_СопоставлениеАналитики.КодАналитикиАксапты, """") = """"";
	//	
	//	Запрос.Параметры.Вставить("СтатьяОборотов", СтатьяОборотов);
	//	Запрос.Параметры.Вставить("Организация", Источник.Организация);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();		
	//	Если РезультатЗапроса.Пустой() Тогда
	//		ТекстСообщения = НСтр("ru = 'Для указанной статьи оборотов %1 не настроено соответствие кода аналитики Аксапты. Обратитесь к руководителю.'");
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтатьяОборотов);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	//		Возврат;
	//	КонецЕсли;			
	//	
	//	Источник.ДополнительныеСвойства.Вставить("ВыгрузитьДоговор", Истина); // устанавливаем признак необходимости выгрузки в Аксапту
	//	
	//КонецЕсли;
	//// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-20 (#2965)
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", НЕ ЗначениеЗаполнено(Источник.Ссылка));
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-05 (#3487)
		
КонецПроцедуры

Процедура ИзменитьСтадииВДоговорахКонтрагента (Источник,НовыйЭлемент) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-20 (#2965)
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-20 (#2965)
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Ссылка <> &Ссылка
	|	И ДоговорыКонтрагентов.бит_СтадияДоговора = Значение(Перечисление.бит_ВидыСтадийДоговоров.Исполнение)	";
	
	Запрос.УстановитьПараметр("Владелец", Источник.Владелец);
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Если НовыйЭлемент Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ДоговорыКонтрагентов.Владелец <> &Ссылка","//И ДоговорыКонтрагентов.Владелец <> &Ссылка");
	КонецЕсли;
	
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат
	КонецЕсли;
	
	Выборка= Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.бит_СтадияДоговора =  Перечисления.бит_ВидыСтадийДоговоров.Замечания;
		ДокОбъект.Записать();
		
	КонецЦикла;
				
 КонецПроцедуры

Процедура ВыгрузкаДоговраВЭкспортнуюТаблицу(Источник)
	 
	 	
	Перем ТЗ;	

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-20 (#МДМ)
	ИнтеграцияКонтрагентовИДоговоровВключена_МДМ = ок_ВыгрузкаВАксапту.ИнтеграцияКонтрагентовИДоговоровВключена_МДМ();
	Если ИнтеграцияКонтрагентовИДоговоровВключена_МДМ Тогда
		Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
		Если Источник.Организация = Организация_Окей Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-20 (#МДМ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВариантЗагрузки.Значение КАК Источник
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ВариантЗагрузки
	|ГДЕ
	|	ВариантЗагрузки.ИмяНастройки = ""Источник загрузки""
	|	И ВариантЗагрузки.Группа = ""ПараметрыЗагрузкиАксапты""";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если Результат.Пустой() Тогда 
		Возврат
	КонецЕсли;
	
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	ИсточникЗагрузки = ВыборкаДетальныеЗаписи.Источник;

	Если ИсточникЗагрузки = "AX" Тогда 
		
		//ОК+ Аверьянова 24.12.15 корректировка условия выгрузки для договора по материалам
		//Если Источник.бит_НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.НайтиПоНаименованию("НЕУТВ") Тогда
		//	Возврат;
		//КонецЕсли;
		Если Источник.бит_НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.НайтиПоНаименованию("НЕУТВ") Тогда
			Если Источник.Владелец.бит_ГруппаПоставщиков = Перечисления.бит_ГруппаПоставщиков.ПМат И Источник.СБ_ПрофильРазноски = "60.01.02" Тогда
			Иначе	
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		//ОК-
		
	КонецЕсли;

	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 100; 

    
	Если  Источник.Организация = Справочники.Организации.НайтиПоКоду("000000045") Тогда 
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресСервера.Значение КАК АдресСервера,
		|	БазаДанных.Значение КАК БазаДанных,
		|	ИмяПользователя.Значение КАК ИмяПользователя,
		|	Пароль.Значение КАК Пароль
		|ИЗ
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
		|ГДЕ
		|	АдресСервера.ИмяНастройки = ""АдресСервера""
		|	И БазаДанных.ИмяНастройки = ""БазаДанных""
		|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя""
		|	И Пароль.ИмяНастройки = ""Пароль""
		|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
		|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
		|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
		|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
		
		
	ИначеЕсли  Источник.Организация = Справочники.Организации.НайтиПоКоду("000000056") Тогда 		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресСервера.Значение КАК АдресСервера,
		|	БазаДанных.Значение КАК БазаДанных,
		|	ИмяПользователя.Значение КАК ИмяПользователя,
		|	Пароль.Значение КАК Пароль
		|ИЗ
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
		|ГДЕ
		|	АдресСервера.ИмяНастройки = ""АдресСервера Лоджистикс""
		|	И БазаДанных.ИмяНастройки = ""БазаДанных Лоджистикс""
		|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя Лоджистикс""
		|	И Пароль.ИмяНастройки = ""Пароль Лоджистикс""
		|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
		|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
		|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
		|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
		
	Иначе 
		Возврат;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
	ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
	Пароль = ВыборкаДетальныеЗаписи.Пароль;
	База = ВыборкаДетальныеЗаписи.БазаДанных;
	
	СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 

	
	Попытка
		СоединениеАДО.Open(СтрокаСоединения); 
		Сообщить("Соединение с базой установлено для выгрузки договора");
	Исключение 
    	Сообщить("Не удалось установить соединение с базой данных для выгрузки договора, договор записан в регистр", СтатусСообщения.Важное);
		УстановитьПривилегированныйРежим(Истина);
		Запись = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
		Запись.Объект = Источник.Ссылка;
		Запись.ДатаИзменения = ТекущаяДата();
		Запись.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецПопытки;
	
	Отказ =Ложь;
	
	ПолучитьРеквизиты(ТЗ,Отказ,Источник.Ссылка);
	
	ЗапросАДО = Новый COMОбъект("ADODB.Command");
	ЗапросАДО.ActiveConnection = СоединениеАДО; 

    ШапкаЗапросаSQL	= "INSERT INTO "+База+".[dbo].[ContractTable_IMP] (
				  | [CODE1C]
				  |,[RContractAccount]
				  |,[ContractRecId]
				  |,[CURRENCYCODE]
				  |,[DIMENSION2]
				  |,[CONTRACTPOSTINGPROGILE]
				  |,[RCONTRACTCODE]
				  |,[RContractPartnerType]
				  |,[RCONTRACTNUMBER]
				  |,[CONTRACTDATE]
				  |,[CONTRACTSTARTDATE]
				  |,[CONTRACTENDDATE]
				  |,[RCONTRACTPARTNERCODE]
				  |,[RContractPartnerCode1C]
				  |,[RCONTRACTSTATUS]
				  |,[RCONTRACTSUBJECT]
				  |,[CONTRACTIDEXT]
				  |,[Source])
				  |VALUES";
				
		
				
	СтрокиЗначений="";
	
	ВыборкаПоШапке = ТЗ.Выбрать();
	
	Пока ВыборкаПоШапке.Следующий() Цикл 
		
		КодДоговора = ВыборкаПоШапке.Код;
		ВалютаКод =  ВыборкаПоШапке.ВалютаРасчетов;
		СтатьяОборотов =   ВыборкаПоШапке.КодАналитикиАксапты;   
		ПрофильРазноски =  ВыборкаПоШапке.СБ_ПрофильРазноски;                     
		НаправлениеДоговора =  ВыборкаПоШапке.НаправлениеДоговора;            
		ВидДоговора = ВыборкаПоШапке.ВидДоговора;            
		Номер =ВыборкаПоШапке.Номер;			
		НомерАХ =  ВыборкаПоШапке.НомерАХ;
		RecId =  ВыборкаПоШапке.RECID;
		Если  Не ЗначениеЗаполнено(ВыборкаПоШапке.Дата)Тогда 
			 ДатаОт = Дата(1,1,1);
		Иначе 
			 ДатаОт = Дата(ВыборкаПоШапке.Дата);
		КонецЕсли;
        От  = Формат(ДатаОт,"ДФ=yyyy-MM-dd");
		Если  Не ЗначениеЗаполнено(ВыборкаПоШапке.ДатаВозникновенияОбязательства)Тогда 
			 ДатаВозникновения = Дата(1,1,1);
		 Иначе 
			 ДатаВозникновения = Дата(ВыборкаПоШапке.ДатаВозникновенияОбязательства);
		КонецЕсли;
		ДатаВозникновенияОбяз = Формат(ДатаВозникновения,"ДФ=yyyy-MM-dd");
		ВладелецКод = Лев(ВыборкаПоШапке.КодКонтрагента,9);
		//ДатаПогашенияОбяз =  Формат(ВыборкаПоШапке.ДатаПогашенияОбязательства,"ДЛФ=Д");
		Если  Не ЗначениеЗаполнено(ВыборкаПоШапке.ДатаПогашенияОбязательства)Тогда 
			 ДатаПогашения = Дата(1,1,1);
		 Иначе 
			 ДатаПогашения = Дата(ВыборкаПоШапке.ДатаПогашенияОбязательства);
		КонецЕсли;
		
		ДатаПогашенияОбяз =  Формат(ДатаПогашения,"ДФ=yyyy-MM-dd");
		ВладелецНомДокИмпорта = ВыборкаПоШапке.ВладелецКодАксапта;
		СтадияДоговора =  ВыборкаПоШапке.СтадияДоговора;
		ПредметДоговора =   ВыборкаПоШапке.бит_ПредметДоговора;
		ВнешнийКодКонтракта =  ВыборкаПоШапке.бит_ВнешнийКодКонтракта;
		Иcточник = "1C";  
		
		СтрокиЗначений = СтрокиЗначений + "
			 	|('"+ КодДоговора+
				"','"+НомерАХ+
				"','"+RecId+
				"','"+ВалютаКод+
				"','"+СтатьяОборотов+
				"','"+ПрофильРазноски+
				"','"+НаправлениеДоговора+
				"','"+ВидДоговора+
				"','"+Номер+
				"','"+От+
				"','"+ДатаВозникновенияОбяз+                  
				"','"+ДатаПогашенияОбяз+
				"','"+ВладелецНомДокИмпорта+
				"','"+ВладелецКод+
				"',"+СтадияДоговора +
				",'"+ПредметДоговора+
				"','"+ВнешнийКодКонтракта+
				"','"+Иcточник+"'
			|)";	

			
			
			//Состояние("Выполнение запроса SQL");
			ЗапросАДО.CommandText =ШапкаЗапросаSQL + СтрокиЗначений;
			Попытка
				РезультатЗагрузки = ЗапросАДО.Execute(); 
				Сообщить("Договор выгружен в экспортную таблицу.");
				СтрокиЗначений ="";
				УстановитьПривилегированныйРежим(Истина);
				Запись = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект = Источник.Ссылка;
				Запись.Удалить();
				УстановитьПривилегированныйРежим(Ложь);
			Исключение
				//	//|" + ЗапросАДО.CommandText); 
				Сообщить("Не удалось выгрузить договор, договор записан в регистр", СтатусСообщения.Важное);
				Запись = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект = Источник.Ссылка;
				Запись.ДатаИзменения = ТекущаяДата();
				Запись.Записать();
			КонецПопытки;
			
						
	КонецЦикла;
	
	СоединениеАДО.Close();
КонецПроцедуры

Процедура ПолучитьРеквизиты(ТЗ,Отказ,Ссылка)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Код,
	|	ПОДСТРОКА(ДоговорыКонтрагентов.ВалютаВзаиморасчетов.Наименование, 1, 3) КАК ВалютаРасчетов,
	|	КодАксапты.КодАналитикиАксапты,
	|	ДоговорыКонтрагентов.СБ_ПрофильРазноски,
	|	ДоговорыКонтрагентов.бит_НаправлениеДоговора.Наименование КАК НаправлениеДоговора,
	|	ВЫБОР ДоговорыКонтрагентов.ВидДоговора
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ТОГДА 0
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)
	|			ТОГДА 2
	|	КОНЕЦ КАК ВидДоговора,
	|	ДоговорыКонтрагентов.Дата,
	|	ДоговорыКонтрагентов.Номер,
	|	ДоговорыКонтрагентов.ДатаВозникновенияОбязательства,
	|	ДоговорыКонтрагентов.ДатаПогашенияОбязательства,
	|	ДоговорыКонтрагентов.Владелец.Код КАК КодКонтрагента,
	|	ВЫБОР ДоговорыКонтрагентов.ВидДоговора
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ТОГДА ДоговорыКонтрагентов.Владелец.НомДокИмпорт
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДоговорыКонтрагентов.Владелец.НомДокИмпорт2
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)
	|			ТОГДА ДоговорыКонтрагентов.Владелец.НомДокИмпорт
	|	КОНЕЦ КАК ВладелецКодАксапта,
	|	ВЫБОР ДоговорыКонтрагентов.бит_СтадияДоговора
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Подготовка)
	|			ТОГДА 0
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Исполнение)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Закрыт)
	|			ТОГДА 2
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Замечания)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтадияДоговора,
	|	ДоговорыКонтрагентов.бит_ПредметДоговора,
	|	ДоговорыКонтрагентов.бит_ВнешнийКодКонтракта,
	|	ДоговорыКонтрагентов.бит_НомерАХ КАК НомерАХ,
	|	ДоговорыКонтрагентов.бит_RECID КАК RECID
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтатьиРегДДС.Ссылка КАК Ссылка,
	|			СопоставлениеАналитикиОтбор51счет.КодАналитикиАксапты КАК КодАналитикиАксапты
	|		ИЗ
	|			(ВЫБРАТЬ
	|				СтатьиБДДС.Ссылка КАК Ссылка,
	|				бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл КАК СтатьяРегл
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ДоговорыКонтрагентовбит_СтатьиОборотов.СтатьяОборотов КАК СтатьяОборотов,
	|					ДоговорыКонтрагентовбит_СтатьиОборотов.Ссылка КАК Ссылка
	|				ИЗ
	|					Справочник.ДоговорыКонтрагентов.бит_СтатьиОборотов КАК ДоговорыКонтрагентовбит_СтатьиОборотов
	|				ГДЕ
	|					ДоговорыКонтрагентовбит_СтатьиОборотов.СтатьяОборотов.ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДДС)) КАК СтатьиБДДС
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	|					ПО СтатьиБДДС.СтатьяОборотов = бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов) КАК СтатьиРегДДС
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					бит_ок_СопоставлениеАналитики.СчетАксапты КАК СчетАксапты,
	|					бит_ок_СопоставлениеАналитики.КодАналитикиАксапты КАК КодАналитикиАксапты,
	|					бит_ок_СопоставлениеАналитики.Организация КАК Организация,
	|					бит_ок_СопоставлениеАналитики.Аналитика1С КАК Аналитика1С,
	|					бит_ок_СопоставлениеАналитики.Тип1С КАК Тип1С
	|				ИЗ
	|					РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
	|				ГДЕ
	|					бит_ок_СопоставлениеАналитики.СчетАксапты = ""51"") КАК СопоставлениеАналитикиОтбор51счет
	|				ПО СтатьиРегДДС.Ссылка.Организация = СопоставлениеАналитикиОтбор51счет.Организация
	|					И СтатьиРегДДС.СтатьяРегл = СопоставлениеАналитикиОтбор51счет.Аналитика1С) КАК КодАксапты
	|		ПО (КодАксапты.Ссылка = ДоговорыКонтрагентов.Ссылка)
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Рез = Запрос.Выполнить();

	Если Рез.Пустой() Тогда 
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	ТЗ = Рез;
	
	
КонецПроцедуры

Процедура ВыгрузкаКонтрагентаВладельцаДоговора (Контрагент,Организация)
		
	Перем ТЗ;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-20 (#МДМ)
	ИнтеграцияКонтрагентовИДоговоровВключена_МДМ = ок_ВыгрузкаВАксапту.ИнтеграцияКонтрагентовИДоговоровВключена_МДМ();
	Если ИнтеграцияКонтрагентовИДоговоровВключена_МДМ Тогда
		Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
		Если Организация = Организация_Окей Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-20 (#МДМ)
	
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 100; 
	 
	
	Отказ = Ложь;	
	ПолучитьРеквизитыКонтрагента(ТЗ,Отказ,Контрагент);
	
	ЗапросАДО = Новый COMОбъект("ADODB.Command");
	//ЗапросАДО.ActiveConnection = СоединениеАДО; 
	СтрокиЗначений="";
	
	Выборка = ТЗ.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если  Организация = Справочники.Организации.НайтиПоКоду("000000045") Тогда 
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресСервера.Значение КАК АдресСервера,
			|	БазаДанных.Значение КАК БазаДанных,
			|	ИмяПользователя.Значение КАК ИмяПользователя,
			|	Пароль.Значение КАК Пароль
			|ИЗ
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
			|ГДЕ
			|	АдресСервера.ИмяНастройки = ""АдресСервера""
			|	И БазаДанных.ИмяНастройки = ""БазаДанных""
			|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя""
			|	И Пароль.ИмяНастройки = ""Пароль""
			|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
			|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
			|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
			|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
			
			
		ИначеЕсли  Организация = Справочники.Организации.НайтиПоКоду("000000056") Тогда 		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресСервера.Значение КАК АдресСервера,
			|	БазаДанных.Значение КАК БазаДанных,
			|	ИмяПользователя.Значение КАК ИмяПользователя,
			|	Пароль.Значение КАК Пароль
			|ИЗ
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
			|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
			|ГДЕ
			|	АдресСервера.ИмяНастройки = ""АдресСервера Лоджистикс""
			|	И БазаДанных.ИмяНастройки = ""БазаДанных Лоджистикс""
			|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя Лоджистикс""
			|	И Пароль.ИмяНастройки = ""Пароль Лоджистикс""
			|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
			|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
			|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
			|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
			
		Иначе 
			Возврат;
		КонецЕсли;

		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий(); 
		Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
		ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
		Пароль = ВыборкаДетальныеЗаписи.Пароль;
		База = ВыборкаДетальныеЗаписи.БазаДанных;
		
		СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 
		
		
		Попытка
			СоединениеАДО.Open(СтрокаСоединения); 
			Сообщить("Соединение с базой установлено для выгрузки контрагента");
		Исключение 
			Сообщить("Не удалось установить соединение с базой данных для выгрузки контрагента, контрагент записан в регистр", СтатусСообщения.Важное); 
			УстановитьПривилегированныйРежим(Истина);
			МенеджерЗаписей = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
			МенеджерЗаписей.Объект = Контрагент;  
			МенеджерЗаписей.ДатаИзменения = ТекущаяДата();
			МенеджерЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		КонецПопытки;
		
		ЗапросАДО.ActiveConnection = СоединениеАДО; 
		
		Код = Выборка.Код;
		Наименование =  СтрЗаменить(Выборка.Наименование,"'","''");
		ПолноеНаименование =  СтрЗаменить(Выборка.НаименованиеПолное,"'","''");
		ЮридическийАдрес =  СтрЗаменить(Выборка.Адрес,"'","''");
		ИНН =   Выборка.ИНН;
		КПП =   Выборка.КПП;
		Телефон = Выборка.Телефон;
		Факс = Выборка.Факс; 
		ЭлПочатБух = Выборка.ЭлАдресБух;
		ЭлПочтаЗаказ = Выборка.ЭлАдресЗаказ;
		Статус= Выборка.Статус;
		НомДокИмпорт = Выборка.НомДокИмпорт;
		НомДокИмпорт2 = Выборка.НомДокИмпорт2;
		ВнешнийКод = СтрЗаменить(Выборка.ВнешнийКодSoftSolution,"'","''");
		Источник =  СтрЗаменить(Выборка.Источник,"'","''");
		Если ЗначениеЗаполнено(Выборка.ГруппаПоставщиков) Тогда 
			ЗначениеПеречисления = Выборка.ГруппаПоставщиков;
			ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
			ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
			ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		Иначе 
		    ИмяЗначенияПеречисления = "";
		КонецЕсли;
		
			
		ГруппаПоставщиков = ИмяЗначенияПеречисления ;
		Если ЗначениеЗаполнено(Выборка.ГруппаКлиентов) Тогда 

			ЗначениеПеречисления = Выборка.ГруппаКлиентов;
			ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
			ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
			ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		Иначе 
			ИмяЗначенияПеречисления = "";
		КонецЕсли;
		

		ГруппаКлиентов =  ИмяЗначенияПеречисления ;
		ДатаНаименования = Формат(Выборка.ДатаНаименование,"ДФ=yyyy-MM-dd");
		ДатаНаименованиеПолное = Формат(Выборка.ДатаНаименованиеПолное,"ДФ=yyyy-MM-dd"); 
		ДатаИНН =Формат(Выборка.ДатаИНН,"ДФ=yyyy-MM-dd"); 
		ДатаКПП = Формат(Выборка. ДатаКПП,"ДФ=yyyy-MM-dd");
		ДатаАдреса = Формат(Выборка.ДатаЮридическийАдрес,"ДФ=yyyy-MM-dd");

		Если Выборка.ЮридическоеФизическоеЛицо =Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда 
			ТипОрганизации = 0;
		ИначеЕсли Выборка.ЮридическоеФизическоеЛицо =Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда  
			ТипОрганизации = 1;
		Иначе 
			ТипОрганизации = 2;
		КонецЕсли;
		
		ШапкаЗапросаSQLПоКонтрагентам	= "Insert into ["+База+"].[dbo].[CustVendTable_IMP] (
		|[CODE1C]
		|,[VendNum]
		|,[CustNum]
		|,[NAMEALIAS]
		|,[NAME]
		|,[ADDRESS]
		|,[INN]
		|,[KPP]
		|,[PHONE]
		|,[TELEFAX]
		|,[EMAILFINANCE]
		|,[EMAILPURCHORDER]
		|,[ACCOUNTSTATUS1C]
		|,[CodeSS]
		|,[Source]
		|,[VENDGroup]
		|,[CustGroup]
		|,[DATEMODNAME]
		|,[DateModNameAlias]
		//|,[DATEMODALIASNAME]
		|,[DATEMODINN]
		|,[DATEMODKPP]
		|,[DATEMODADDRESS]
		|,[OrganizationType])
		|VALUES";

		

		
		СтрокиЗначений =ШапкаЗапросаSQLПоКонтрагентам+ "
		
		|('"+Код+"'
		|,'"+НомДокИмпорт +"'
		|,'"+НомДокИмпорт2 +"'
		|,'"+Наименование+"' 
		|,'"+ПолноеНаименование+"' 
		|,'"+ЮридическийАдрес+"' 
		|,'"+ИНН+"' 
		|,'"+КПП+"' 
		|,'"+Телефон+"'
		|,'"+Факс+"'
		|,'"+ЭлПочатБух+"'
		|,'"+ЭлПочтаЗаказ+"'
		|,'"+Статус+"'
		|,'"+ВнешнийКод+"'
		|,'"+Источник+"'
		|,'"+ГруппаПоставщиков+"'
		|,'"+ГруппаКлиентов+"'
		|,'"+ДатаНаименования+"'
		|,'"+ДатаНаименованиеПолное+"'
		|,'"+ДатаИНН+"'
		|,'"+ДатаКПП+"'
		|,'"+ДатаАдреса+"'
		|,'"+ТипОрганизации+"')";
		
		
		
		ЗапросАДО.CommandText = СтрокиЗначений;
		Попытка 
			РезультатЗагрузки = ЗапросАДО.Execute(); 
			СтрокиЗначений ="";
			УстановитьПривилегированныйРежим(Истина);
			Запись = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = Выборка.Ссылка;
			Запись.Удалить();
			УстановитьПривилегированныйРежим(Ложь);
			#Если Клиент Тогда 
				Сообщить("Контрагент выгружен в экспортную таблицу.");
			#КонецЕсли
		Исключение
			#Если Клиент Тогда 
				Сообщить("Не удалось выполнить выгрузку, контрагент записан в регистр "+ОписаниеОшибки());
			#КонецЕсли
			УстановитьПривилегированныйРежим(Истина); 
			Запись = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = Выборка.Ссылка;
			Запись.ДатаИзменения = ТекущаяДата();
			Запись.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецПопытки;
		
	КонецЦикла;
	
	СоединениеАДО.Close();
	
КонецПроцедуры

Процедура ПолучитьРеквизитыКонтрагента(ТЗ,Отказ,Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Код,
	|	Контрагенты.НомДокИмпорт,
	|	Контрагенты.НомДокИмпорт2,
	|	Контрагенты.Наименование,
	|	Контрагенты.НаименованиеПолное,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	ТабКонтактнаяИнформация.Адрес,
	|	ТабКонтактнаяИнформация.Телефон,
	|	ВЫБОР Контрагенты.бит_Статус
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.Проверено)
	|			ТОГДА 0
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.Рабочий)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе)
	|			ТОГДА 2
	|	КОНЕЦ КАК Статус,
	|	""1C"" КАК Источник,
	|	ТабКонтактнаяИнформация.ЭлАдресБух,
	|	ТабКонтактнаяИнформация.ЭлАдресЗаказ,
	|	Контрагенты.Ссылка,
	|	ТабКонтактнаяИнформация.Факс,
	|	Контрагенты.бит_ГруппаПоставщиков.Ссылка КАК ГруппаПоставщиков,
	|	Контрагенты.бит_ГруппаКлиентов.Ссылка КАК ГруппаКлиентов,
	|	Контрагенты.бит_ВнешнийКодSoftSolution,
	|	Контрагенты.ЮридическоеФизическоеЛицо
	|ПОМЕСТИТЬ ВР_ДанныеПоКонтрагенту
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТабКонтактнаяИнформация.Объект КАК Объект,
	|			ТабКонтактнаяИнформация.Адрес КАК Адрес,
	|			ТабКонтактнаяИнформация.Телефон КАК Телефон,
	|			ТабКонтактнаяИнформация.ЭлАдресБух КАК ЭлАдресБух,
	|			ТабКонтактнаяИнформация.ЭлАдресЗаказ КАК ЭлАдресЗаказ,
	|			ТабКонтактнаяИнформация.Факс КАК Факс
	|		ИЗ
	|			(ВЫБРАТЬ
	|				КИ.Объект КАК Объект,
	|				МАКСИМУМ(КИ.Адрес) КАК Адрес,
	|				МАКСИМУМ(КИ.Телефон) КАК Телефон,
	|				МАКСИМУМ(КИ.ЭлАдресБух) КАК ЭлАдресБух,
	|				МАКСИМУМ(КИ.ЭлАдресЗаказ) КАК ЭлАдресЗаказ,
	|				МАКСИМУМ(КИ.Факс) КАК Факс
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ВЫРАЗИТЬ(Адрес.Представление КАК СТРОКА(250)) КАК Адрес,
	|					Адрес.Ссылка КАК Объект,
	|					NULL КАК Телефон,
	|					NULL КАК ЭлАдресБух,
	|					NULL КАК ЭлАдресЗаказ,
	|					NULL КАК Факс
	|				ИЗ
	|					Справочник.Контрагенты.КонтактнаяИнформация КАК Адрес
	|				ГДЕ
	|					Адрес.Тип = &ТипАдрес
	|					И Адрес.Вид = &ВидАдрес
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					NULL,
	|					Телефон.Ссылка,
	|					ВЫРАЗИТЬ(Телефон.Представление КАК СТРОКА(20)),
	|					NULL,
	|					NULL,
	|					NULL
	|				ИЗ
	|					Справочник.Контрагенты.КонтактнаяИнформация КАК Телефон
	|				ГДЕ
	|					Телефон.Тип = &ТипТелефон
	|					И Телефон.Вид = &ВидТелефон
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					NULL,
	|					ЭлПочтаБух.Ссылка,
	|					NULL,
	|					ВЫРАЗИТЬ(ЭлПочтаБух.Представление КАК СТРОКА(150)),
	|					NULL,
	|					NULL
	|				ИЗ
	|					Справочник.Контрагенты.КонтактнаяИнформация КАК ЭлПочтаБух
	|				ГДЕ
	|					ЭлПочтаБух.Тип = &ТипЭлПочта
	|					И ЭлПочтаБух.Вид = &ВидЭлПочтаБух
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					NULL,
	|					ЭлПочтаЗаказ.Ссылка,
	|					NULL,
	|					NULL,
	|					ВЫРАЗИТЬ(ЭлПочтаЗаказ.Представление КАК СТРОКА(150)),
	|					NULL
	|				ИЗ
	|					Справочник.Контрагенты.КонтактнаяИнформация КАК ЭлПочтаЗаказ
	|				ГДЕ
	|					ЭлПочтаЗаказ.Тип = &ТипЭлПочта
	|					И ЭлПочтаЗаказ.Вид = &ВидЭлПочтаЗаказ
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					NULL,
	|					ТабКонтактнаяИнформация.Ссылка,
	|					NULL,
	|					NULL,
	|					NULL,
	|					ВЫРАЗИТЬ(ТабКонтактнаяИнформация.Представление КАК СТРОКА(20))
	|				ИЗ
	|					Справочник.Контрагенты.КонтактнаяИнформация КАК ТабКонтактнаяИнформация
	|				ГДЕ
	|					ТабКонтактнаяИнформация.Тип = &ТипТелефон
	|					И ТабКонтактнаяИнформация.Вид = &ВидФакс) КАК КИ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				КИ.Объект) КАК ТабКонтактнаяИнформация) КАК ТабКонтактнаяИнформация
	|		ПО Контрагенты.Ссылка = ТабКонтактнаяИнформация.Объект
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаНаименование,
	|	бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаНаименованиеПолное,
	|	бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаЮридическийАдрес,
	|	бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаИНН,
	|	бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.ДатаКПП,
	|	ВР_ДанныеПоКонтрагенту.Код,
	|	ВР_ДанныеПоКонтрагенту.НомДокИмпорт,
	|	ВР_ДанныеПоКонтрагенту.НомДокИмпорт2,
	|	ВР_ДанныеПоКонтрагенту.Наименование,
	|	ВР_ДанныеПоКонтрагенту.НаименованиеПолное,
	|	ВР_ДанныеПоКонтрагенту.ИНН,
	|	ВР_ДанныеПоКонтрагенту.КПП,
	|	ВР_ДанныеПоКонтрагенту.Адрес,
	|	ВР_ДанныеПоКонтрагенту.Телефон,
	|	ВР_ДанныеПоКонтрагенту.Статус,
	|	ВР_ДанныеПоКонтрагенту.Источник,
	|	ВР_ДанныеПоКонтрагенту.ЭлАдресБух,
	|	ВР_ДанныеПоКонтрагенту.ЭлАдресЗаказ,
	|	ВР_ДанныеПоКонтрагенту.Ссылка,
	|	ВР_ДанныеПоКонтрагенту.Факс,
	|	ВР_ДанныеПоКонтрагенту.ГруппаПоставщиков,
	|	ВР_ДанныеПоКонтрагенту.ГруппаКлиентов,
	|	ВР_ДанныеПоКонтрагенту.бит_ВнешнийКодSoftSolution КАК ВнешнийКодSoftSolution,
	|	ВР_ДанныеПоКонтрагенту.ЮридическоеФизическоеЛицо
	|ИЗ
	|	ВР_ДанныеПоКонтрагенту КАК ВР_ДанныеПоКонтрагенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ИсторияИзмененияРеквизитовКонтрагентов.СрезПоследних(
	|				,
	|				Контрагент В
	|					(ВЫБРАТЬ
	|						ВР_ДанныеПоКонтрагенту.Ссылка
	|					ИЗ
	|						ВР_ДанныеПоКонтрагенту КАК ВР_ДанныеПоКонтрагенту)) КАК бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних
	|		ПО ВР_ДанныеПоКонтрагенту.Ссылка = бит_ИсторияИзмененияРеквизитовКонтрагентовСрезПоследних.Контрагент";
	
	
	Запрос.УстановитьПараметр("Ссылка",Контрагент);
	Запрос.УстановитьПараметр("ТипАдрес",Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидАдрес", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("ТипТелефон",Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ВидТелефон",Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Запрос.УстановитьПараметр("ВидФакс",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00033"));
	Запрос.УстановитьПараметр("ТипЭлПочта",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидЭлПочтаЗаказ",Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Заявка"));
	Запрос.УстановитьПараметр("ВидЭлПочтаБух",Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Бухгалтерия"));
	
	
	Рез = Запрос.Выполнить();

	Если Рез.Пустой() Тогда 
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
		
	ТЗ = Рез;
	

КонецПроцедуры

Процедура бит_ПриЗаписиДоговораПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-02 (#3487)
	//Если  (Источник.ДополнительныеСвойства.Свойство("ВыгрузитьДоговор") и
	//	 не Источник.ДополнительныеСвойства.Свойство("ЗагруженИзАксапты")) Тогда 
	//	
	//	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-20 (#2965)
	//	//Выгрузим договор в экспортную таблицу
	//	//Если Источник.Организация = Справочники.Организации.НайтиПоКоду("000000045") Или 
	//	//	Источник.Организация = Справочники.Организации.НайтиПоКоду("000000056") Тогда  
	//	//	ВыгрузкаКонтрагентаВладельцаДоговора(Источник.Владелец,Источник.Организация);
	//	//	ВыгрузкаДоговраВЭкспортнуюТаблицу(Источник);
	//	//КонецЕсли;
	//	
	//	СписокОрганизаций_НеПогашатьЗадолженность = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_НеПогашатьЗадолженность");
	//	Если СписокОрганизаций_НеПогашатьЗадолженность = Неопределено Тогда // нет константы, нет обмена с Аксапта
	//		Возврат;
	//	ИначеЕсли СписокОрганизаций_НеПогашатьЗадолженность.НайтиПоЗначению(Источник.Организация) = Неопределено Тогда // организация не обменивается с Аксапта
	//		Возврат;
	//	КонецЕсли;	  
	//	
	//	ВыгрузкаКонтрагентаВладельцаДоговора(Источник.Владелец,Источник.Организация);
	//	ВыгрузкаДоговраВЭкспортнуюТаблицу(Источник);
	//	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-20 (#2965)
	//	
	//КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-02 (#3487)
	
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 25.09.2019 (#3487)
	Если Источник.ДополнительныеСвойства.Свойство("ТекущийДоговорИзменен") 
		И Источник.ДополнительныеСвойства.Свойство("ЭтоНовый")
		И Не Источник.ДополнительныеСвойства.ЭтоНовый Тогда // новый договор не выгружаем
		
		Если Источник.бит_СтатьиОборотов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В договоре не указана ни одна статья оборотов БДДС. Пожалуйста, укажите статью, пройдя по ссылке Дополнительные реквизиты (БИТ).'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.бит_ОсновнаяСтатьяОборотов) Тогда
			СтатьяОборотов = Источник.бит_ОсновнаяСтатьяОборотов;
		Иначе
			Для Каждого СтрокаТабЧасти Из Источник.бит_СтатьиОборотов Цикл
				Если СтрокаТабЧасти.СтатьяОборотов.ТипСтатьи = ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС") Тогда
					СтатьяОборотов = СтрокаТабЧасти.СтатьяОборотов;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтатьяОборотов) Тогда
			ТекстСообщения = НСтр("ru = 'В договоре не указана ни одна статья оборотов БДДС. Пожалуйста, укажите статью, пройдя по ссылке Дополнительные реквизиты (БИТ).'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ВыгрузитьДоговор") 
		И Источник.ДополнительныеСвойства.ВыгрузитьДоговор 
		ИЛИ
		Источник.бит_СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Замечания")
		И бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Лоджистикс") = Источник.Организация Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|	ДоговорыКонтрагентов.бит_СтадияДоговора КАК бит_СтадияДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.Ссылка = &Ссылка
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Ссылка", 		Источник.Ссылка);
		Запрос.УстановитьПараметр("Владелец", 		Источник.Владелец);
		Запрос.УстановитьПараметр("Организация", 	Источник.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Источник.ДополнительныеСвойства.Свойство("ВыгрузитьДоговор") 
			И Источник.ДополнительныеСвойства.ВыгрузитьДоговор Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			// записываем договор для выгрузки
			МенеджерЗаписей = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
			МенеджерЗаписей.Объект = Источник.Ссылка;  
			МенеджерЗаписей.ДатаИзменения = ТекущаяДата();
			МенеджерЗаписей.Записать();
			
			// если договор по организацяим для выгрузки (Окей и Окей Лоджистикс) первый,
			// то выгружаем и контрагента
			Выборка = РезультатЗапроса.Выбрать();
			Если НЕ Выборка.Следующий() Тогда
				МенеджерЗаписей = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
				МенеджерЗаписей.Объект = Источник.Владелец;  
				МенеджерЗаписей.ДатаИзменения = ТекущаяДата();
				МенеджерЗаписей.Записать();
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;

		Если Источник.бит_СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Замечания")
			И (НЕ Источник.ДополнительныеСвойства.Свойство("РежимИзмененияСтатусаЗамечения") 
				ИЛИ НЕ Источник.ДополнительныеСвойства.РежимИзмененияСтатусаЗамечения) Тогда
			
			Если бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Лоджистикс") = Источник.Организация Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.бит_СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Замечания") Тогда
						Продолжить;
					КонецЕсли;
					
					ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДоговорОбъект.ДополнительныеСвойства.Вставить("ВыгрузитьДоговор", Ложь);
					ДоговорОбъект.ДополнительныеСвойства.Вставить("РежимИзмененияСтатусаЗамечения", Истина);
					ДоговорОбъект.бит_СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Замечания");
					
					НоваяСтрока = ДоговорОбъект.ок_ИсторияСтатусов.Добавить();
					НоваяСтрока.Период 			= ТекущаяДата();
					НоваяСтрока.Статус 			= ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Замечания");
					НоваяСтрока.Ответственный 	= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
					
					ДоговорОбъект.Записать();
					
				КонецЦикла; 
				
				УстановитьПривилегированныйРежим(Истина);
				МенеджерЗаписей = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
				МенеджерЗаписей.Объект 				= Источник.Владелец;  
				МенеджерЗаписей.ДатаИзменения 		= ТекущаяДата();
				МенеджерЗаписей.ок_БлокировкаОплаты = Истина;
				МенеджерЗаписей.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 25.09.2019 (#3487)
	
КонецПроцедуры
    
Процедура бит_ЗагрузкаОткликаОтSQLДляДоговоров() Экспорт
	
	Перем Выборка;
	
	//ЗаписьЖурналаРегистрации("Параментры соединения с базой",,,,СтрокаСоединенияИнформационнойБазы());
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
   	СоединениеАДО.ConnectionTimeOut = 600; 
    СоединениеАДО.CommandTimeOut = 600; 
    СоединениеАДО.CursorLocation = 3; 
	
	//Если Организация = Справочники.Организации.НайтиПоКоду(
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресСервера.Значение КАК АдресСервера,
	|	БазаДанных.Значение КАК БазаДанных,
	|	ИмяПользователя.Значение КАК ИмяПользователя,
	|	Пароль.Значение КАК Пароль
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК АдресСервера,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК БазаДанных,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК ИмяПользователя,
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК Пароль
	|ГДЕ
	|	АдресСервера.ИмяНастройки = ""АдресСервера""
	|	И БазаДанных.ИмяНастройки = ""БазаДанных""
	|	И ИмяПользователя.ИмяНастройки = ""ИмяПользователя""
	|	И Пароль.ИмяНастройки = ""Пароль""
	|	И АдресСервера.Группа = ""ПараметрыСоединенияSQL""
	|	И БазаДанных.Группа = ""ПараметрыСоединенияSQL""
	|	И ИмяПользователя.Группа = ""ПараметрыСоединенияSQL""
	|	И Пароль.Группа = ""ПараметрыСоединенияSQL""";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	Сервер = ВыборкаДетальныеЗаписи.АдресСервера;
	ИмяПользователя = ВыборкаДетальныеЗаписи.ИмяПользователя;
	Пароль = ВыборкаДетальныеЗаписи.Пароль;
	База = ВыборкаДетальныеЗаписи.БазаДанных;
	
	СтрокаСоединения = "driver={SQL Server};server="+Сервер+";uid="+ИмяПользователя+";pwd="+Пароль+";Database="+ База; 
	
	//СтрокаСоединения = "driver={SQL Server};server=1c-sql2.okmarket.ru;uid=sa;pwd=bmssa_pwd;Database=HyperOk_New"; 
	
	Попытка
		СоединениеАДО.Open(СтрокаСоединения); 
		//Сообщить("Соединение с базой установлено");
	Исключение 
    	Сообщить("Не удалось установить соединение с базой данных", СтатусСообщения.Важное); 
 		Возврат;
	КонецПопытки;
	

	
    Запрос = "";
	
	ПолучитьЗапросДляОтклика(Запрос,База);
	
	
    ЗапросВыполенен = ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка);
	
	Если НЕ ЗапросВыполенен Тогда 
		Возврат
	КонецЕсли;
	
	таб = Новый ТаблицаЗначений;
	
	таб.Колонки.Добавить("CODE1C");
	таб.Колонки.Добавить("RContractAccount");
    таб.Колонки.Добавить("ContractRecId");
	
	
	
	Пока Не Выборка.EOF() Цикл 
		fields=FieldsСтруктура(Выборка.Fields);
		нов=таб.Добавить();
		ЗаполнитьЗначенияСвойств(нов,fields);	
		Выборка.MoveNext(); 
	КонецЦикла;	

	Для Каждого Строка Из  таб Цикл 
		
		  ДоговорСсылка = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Строка.CODE1C);
		  
		  Если НЕ ЗначениеЗаполнено(ДоговорСсылка) Тогда 
			  Продолжить;
		  КонецЕсли;
		  
		  ДоговорОбъект = ДоговорСсылка.ПолучитьОбъект();
		  ДоговорОбъект.бит_RECID = Строка.ContractRecId;
		  ДоговорОбъект.бит_НомерАХ =Строка.RContractAccount;
		  ДоговорОбъект.ДополнительныеСвойства.Вставить("ЗагруженИзАксапты");
		  ДоговорОбъект.Записать();		  
		  
		  ЗаписьРегистра = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
		  ЗаписьРегистра.Организация = ДоговорОбъект.Организация;
		  ЗаписьРегистра.СчетАксапты = "76";
		  ЗаписьРегистра.КодАналитикиАксапты = Строка.ContractRecId;
		  ЗаписьРегистра.Аналитика1С = ДоговорОбъект.Ссылка;
		  
		  ЗаписьРегистра.Тип1С = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов");
		  ЗаписьРегистра.Записать();
		  
		  
		  
		  
		  ЗаписьРегистра = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
		  ЗаписьРегистра.Организация =ДоговорОбъект.Организация;
		  Если ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда 
			  ЗаписьРегистра.СчетАксапты = "62"
		  Иначе 
			  ЗаписьРегистра.СчетАксапты = "60";
		  КонецЕсли;
		  ЗаписьРегистра.КодАналитикиАксапты = Строка.ContractRecId;
		  ЗаписьРегистра.Аналитика1С = ДоговорОбъект.Ссылка;
		  ЗаписьРегистра.Тип1С =Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов");
		  ЗаписьРегистра.Записать();
		  
		  //ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-04 (#ПроектИнтеграцияАксапта12)
		  ЗаписьРегистра = РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
		  ЗаписьРегистра.Организация 			= ДоговорОбъект.Организация;
		  ЗаписьРегистра.СчетАксапты 			= "76";
		  ЗаписьРегистра.КодАналитикиАксапты 	= Строка.RContractAccount;
		  ЗаписьРегистра.Аналитика1С 			= ДоговорОбъект.Ссылка;
		  ЗаписьРегистра.Тип1С 					= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов");
		  ЗаписьРегистра.Записать();
		  
		  ЗаписьРегистра = РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
		  ЗаписьРегистра.Организация 			= ДоговорОбъект.Организация;
		  ЗаписьРегистра.КодАналитикиАксапты 	= Строка.RContractAccount;
		  ЗаписьРегистра.Аналитика1С 			= ДоговорОбъект.Ссылка;
		  ЗаписьРегистра.Тип1С 					= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ДоговорыКонтрагентов");
		  
		  Если ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда 
			  ЗаписьРегистра.СчетАксапты = "62"
		  Иначе 
			  ЗаписьРегистра.СчетАксапты = "60";
		  КонецЕсли;
		  
		  ЗаписьРегистра.Записать();
		  //ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-04 (#ПроектИнтеграцияАксапта12)
		  
	КонецЦикла;

КонецПроцедуры

Процедура ПолучитьЗапросДляОтклика(Запрос,База)
	
	Запрос = "
			  |SELECT  [Code1C]
			  |,[RContractAccount]
			  |,[CurrencyCode]
			  |,[Dimension2]
			  |,[ContractRecId]
			  |,[ContractPostingProgile]
			  |,[RContractCode]
			  |,[RContractPartnerType]
			  |,[RContractNumber]
			  |,[ContractDate]
			  |,[ContractStartDate]
			  |,[ContractEndDate]
			  |,[RContractPartnerCode]
			  |,[RContractPartnerCode1C]
			  |,[RContractStatus]
			  |,[RContractSubject]
			  |,[ContractIdExt]
			  |,[Source]
			  |,[ModifiedDate]
			  |,[RecId]
			  |FROM ["+База+"].[dbo].[ContractTable_IMP]
			  |Where [Source] = 'Ax'";
КонецПроцедуры

Функция ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка)
	рез=ложь;
	
	ЗапросАДО = Новый COMОбъект("ADODB.Command");
    ЗапросАДО.CommandTimeout = 600;
	ЗапросАДО.ActiveConnection=СоединениеАДО; 	
	ЗапросАДО.CommandText=Запрос; 
	Попытка
		Выборка = ЗапросАДО.Execute(); 		
		рез=Истина;
	Исключение 
    	Сообщить("	Не удалось выполнить запрос!"+Символы.ПС+Строка(Запрос)+Символы.ПС+Строка(ОписаниеОшибки()));  		
	КонецПопытки; 
	
	возврат рез;  
КонецФункции

Функция FieldsСтруктура(fields)
	рез=новый Структура;
	Для каждого стр из fields
	Цикл
		
		рез.Вставить(стр.name,ЧислоВСтроку(стр.value));
		
	КонецЦикла;
	возврат рез;
КонецФункции

Функция ЧислоВСтроку(значение)
	
	рез=значение;
	
	Если ТипЗнч(значение)=Тип("Число") тогда
		рез = Формат(значение,"ЧГ=0");			
	КонецЕсли;	
	
	возврат рез;
КонецФункции

Функция ЗаписьВЦелевуюСтруктуру(fields,СоответствиеПолей)
	рез= новый Структура;
	Для каждого поле из СоответствиеПолей
	Цикл
		рез.Вставить(поле.Значение.Поле,fields[поле.Ключ]);
	КонецЦикла;   
	
	Возврат рез;
КонецФункции	

Процедура бит_ПередЗаписьюЗаявкиПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		
		Если Источник.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Или 
			Источник.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Или 
			Источник.ВидОперации =Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда 
			
			Если  Источник.Модифицированность() Тогда
				УстановитьПривилегированныйРежим(Истина);
				МенеджерЗаписей = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
				МенеджерЗаписей.Объект = Источник.Ссылка;  
				МенеджерЗаписей.ДатаИзменения = ТекущаяДата();
				МенеджерЗаписей.Новый = Ложь;
				МенеджерЗаписей.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
		КонецЕсли;
	Иначе 
		//1c-izhtc spawn (
		//Источник.ДополнительныеСвойства.Вставить("ЭтоНовый");
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ЭтоНовый());
		//1c-izhtc spawn )
	КонецЕсли;
	
КонецПроцедуры

Процедура бит_ПриЗаписиЗаявкеПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Если Источник.Ссылка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Или 
			Источник.Ссылка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Или 
			Источник.Ссылка.ВидОперации =Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда 
			Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда 
				УстановитьПривилегированныйРежим(Истина);
				МенеджерЗаписей = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
				МенеджерЗаписей.Объект = Источник.Ссылка;  
				МенеджерЗаписей.ДатаИзменения = ТекущаяДата();
				МенеджерЗаписей.Новый = Истина;
				МенеджерЗаписей.Записать();
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// ОКЕЙ Гиль А.В.(Софтлаб) Начало 23.09.2019 (#3487) 
Процедура ок_ПриЗаписиКонтрагентаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ВыгрузитьКонтрагента") 
		И Источник.ДополнительныеСвойства.ВыгрузитьКонтрагента
		И Источник.ДополнительныеСвойства.Свойство("ЭтоНовый")  
		И НЕ Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		МенеджерЗаписей = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Источник.Ссылка;  
		МенеджерЗаписей.ДатаИзменения = ТекущаяДата();
		МенеджерЗаписей.Новый = Источник.ДополнительныеСвойства.ЭтоНовый;
		МенеджерЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		// ОКЕЙ Наумов А.Н.(Софтлаб) Начало 29.10.2019 (#3515)
		Если Источник.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе")
			Или Источник.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированыОплаты") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
			|	ДоговорыКонтрагентов.бит_СтадияДоговора КАК бит_СтадияДоговора
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
			|	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
			|	И ДоговорыКонтрагентов.Владелец = &Владелец
			|	И ДоговорыКонтрагентов.Организация В
			|			(ВЫБРАТЬ
			|				бит_ок_НастройкиМеханизмаИмпортаДанных.Значение КАК Значение
			|			ИЗ
			|				РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
			|			ГДЕ
			|				бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа
			|				И бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки В (&СписокИменНастроекОтбора))";
			
			СписокИменНастроекОтбора = Новый Массив;
			СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.ПустаяСсылка();
			
			Если Источник.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе") Тогда
				СписокИменНастроекОтбора = бит_Общий.ПолучитьСписокИменНастроекДляОтбораПоГруппеОрганизации();
				СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Закрыт");
			ИначеЕсли Источник.бит_Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированыОплаты") Тогда
				СписокИменНастроекОтбора.Добавить("Организация Лоджистикс");
				СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Замечания");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Владелец", Источник.Ссылка);
			Запрос.УстановитьПараметр("Группа", "Организации");
			Запрос.УстановитьПараметр("СписокИменНастроекОтбора", СписокИменНастроекОтбора);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.бит_СтадияДоговора = СтадияДоговора Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДоговорОбъект.бит_СтадияДоговора = СтадияДоговора;
					ДоговорОбъект.ДополнительныеСвойства.Вставить("ВыгрузитьДоговор", Истина);
					
					НоваяСтрока = ДоговорОбъект.ок_ИсторияСтатусов.Добавить();
					НоваяСтрока.Период 			= ТекущаяДата();
					НоваяСтрока.Статус 			= СтадияДоговора;
					НоваяСтрока.Ответственный 	= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
					НоваяСтрока.Описание	 	= НСтр("ru = 'Статус изменен при записи контрагента'");
					
					ДоговорОбъект.Записать();
				Исключение
					ТекстСообщения = ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				КонецПопытки;
				
			КонецЦикла; 
			
		КонецЕсли;
		// ОКЕЙ Наумов А.Н.(Софтлаб) Конец 29.10.2019 (#3515)
		
	КонецЕсли;
	
	
КонецПроцедуры
// ОКЕЙ Гиль А.В.(Софтлаб) Конец 23.09.2019 (#3487)

