#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// БИТ.ФИНАНС

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "БитФинанс";
	Описание.Версия = бит_ОбщегоНазначенияПовтИсп.ПолучитьСведенияОПрограмме().НомерРелиза_БИТ;
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  // Версия - номер версии конфигурации, при обновлении на которую должна быть вызвана процедура обновления, 
// 	// указанная в параметре Процедура.	
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если бит_ПолныеПрава.ЭтоЧужойПодчиненныйУзел() Тогда
		Возврат;	
	КонецЕсли; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ПервыйЗапуск";
	Обработчик.НачальноеЗаполнение = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "*";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ОбновитьОбъектыСистемы";
	Обработчик.НачальноеЗаполнение = Истина; 

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "*";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗаполнитьСправочникВидыРеквизитовДвижений";
	Обработчик.НачальноеЗаполнение = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "*";
	Обработчик.Процедура 		   = "бит_ук_СлужебныйСервер.УдалитьНакопленныеПакеты";
	Обработчик.НачальноеЗаполнение = Ложь; 
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "*";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗаписатьНастройкуПоказыватьДополнительнуюИнформациюБит";

	// Переход с 20: "2.8.11"	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.8.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеСПредыдущейРедакцииБФ.ВыполнитьПереходНаНовуюРедакцию";
	// Конец переход с 20: "2.8.11"
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.3.2";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "ПланыВидовХарактеристик.бит_ВидыОбъектовАдресацииЗадач.ОбработатьДанныеДляПереходаНаНовуюВерсию";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьСпособыПроверкиПринадлежности", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.3.2";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Справочники.бит_НастройкиФормВводаБюджета.СкорректироватьКлючОбъектаПриОбновлении";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ПроверитьИменаСправочниковВНастройкахФормы", 1);
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.3.2";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Справочники.бит_ВидыПроформ.ОбработатьДанныеДляПереходаНаНовуюВерсию";//ДобавитьПроцедуруВМассив(МассивПроцедур, "КонвертироватьВидыПроформ", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.3.2";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Справочники.бит_ПравилаТрансляции.ОбработатьДанныеДляПереходаНаНовуюВерсию";//ДобавитьПроцедуруВМассив(МассивПроцедур, "КонвертироватьПравилаТрансляции", 1);
	 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.4.2";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "Справочники.бит_НастройкиФормВводаБюджета.УстановитьИспользоватьОбщиеИтогиПриОбновлении"; //ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьФлагОбщиеИтоги", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.4.2";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "РегистрыСведений.бит_ДоступныеИнтерфейсы.ОбработатьДанныеДляПереходаНаНовуюВерсию";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьРегистрДоступностьИнтерфейсов", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.4.2";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "Справочники.бит_ЭлементыДанных.ОбработатьДанныеДляПереходаНаНовуюВерсию";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьПредставленияОтборовЭлементовДанных", 1);

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.6.2";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "Справочники.бит_СтруктураКонструктораПравилТрансляции.ЗаполнитьОписаниеТиповКолонки";//ДобавитьПроцедуруВМассив(МассивПроцедур, "КонвертироватьКонструкторыПравилТрансляции", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.9.2";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.УстановитьРежимИспользованияСоответствий"; //ДобавитьПроцедуруВМассив(МассивПроцедур, "УстановитьРежимИспользованияСоответствий_ПравилаЗаполненияТрансляции", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.10.2";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "Справочники.бит_НастройкиФормВводаБюджета.УстановитьВидНастройкиПриОбновлении";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.10.2";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.УстановитьКонстантуРлсБФ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.11.1";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "РегистрыСведений.бит_НастройкиДоступностиВариантовОтчетов.УстановитьИспользоватьПриОткрытии";//ДобавитьПроцедуруВМассив(МассивПроцедур, "КонвертироватьНастройкиОтчетовОбработок_ИспользоватьПриОткрытии", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.12.1";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.СпособыКомпоновкиИсточниковДанныхЗаполнитьСпособыПересчетаПоКурсам";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьСпособыПересчетаПоКурсамВСпособахКомпоновкиИсточников", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.13.1";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "РегистрыСведений.бит_МаскиКодов.КонвертироватьМаскиКодаПлановСчетов";//ДобавитьПроцедуруВМассив(МассивПроцедур, "КонвертироватьМаскиКодаПлановСчетов", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.13.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.КонвертироватьНеПредопределенныеВариантыОтчета";//ДобавитьПроцедуруВМассив(МассивПроцедур, "КНВ_КонвертироватьНеПредопределенныеВариантыОтчета_бит_ПланФактныйАнализПоБюджету_ОстаткиПоСчетам", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.14.1";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.КонвертироватьНеПредопределенныеВариантыОтчета";//ДобавитьПроцедуруВМассив(МассивПроцедур, "КНВ_КонвертироватьНеПредопределенныеВариантыОтчета_бит_ПланФактныйАнализПоБюджету_ОстаткиПоСчетам", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.14.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗаполнитьВалютуДокументовПоМУ";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьВалютуДокументовПоМУ", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.14.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ПроверитьЗаполнитьПорядокСчетов";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ПроверитьЗаполнитьПорядокСчетов", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.15.1";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "Справочники.бит_ВидыСоответствийАналитик.НастроитьПредопределенныеВидыСоответствий";//ДобавитьПроцедуруВМассив(МассивПроцедур, "НастроитьПредопределенныеВидыСоответствий", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.15.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗаполнитьРежимФормированияДвиженийФормаВвода";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьРежимФормированияДвиженийФормаВвода", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.15.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Справочники.бит_НастройкиФормВводаБюджета.ЗаполнитьЦветАргументовПриОбновлении";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьЦветАргументовНастройкиФормыВвода", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.15.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗаполнитьВалютуДокументовПоМУ";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьВалютуДокументовПоМУ", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.15.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.УстановитьНастройкуВыделятьАргументыФормулФормыВвода";//ДобавитьПроцедуруВМассив(МассивПроцедур, "УстановитьНастройкуВыделятьАргументыФормулФормыВвода", 1);

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.17.1";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗаполнитьРежимПроцессов";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьРежимПроцессов", 1);	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.18.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.НазначитьОбъектСтатусамПодсистемыМТО";//ДобавитьПроцедуруВМассив(МассивПроцедур, "НазначитьОбъектСтатусамПодсистемыМТО", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.18.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.НазначитьОбъектСтатусамМДМ";//ДобавитьПроцедуруВМассив(МассивПроцедур, "НазначитьОбъектСтатусамМДМ", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.18.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗаполнитьНастройкиМТО";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьНастройкиМТО", 0.5);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.18.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ДобавитьГруппировкиВНастройкиОтчета";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ДобавитьГруппировкиВНастройкиОтчетов18", 1);

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.20.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.УстановитьКонстантуБДРПланируетсяСНДС";//ДобавитьПроцедуруВМассив(МассивПроцедур, "УстановитьКонстантуБДРПланируетсяСНДС", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.21.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗаполнитьСпособТранспорта";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьСпособТранспорта", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.22.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Справочники.бит_ВидыСоответствийАналитик.НастроитьПредопределенныеВидыСоответствий";//ДобавитьПроцедуруВМассив(МассивПроцедур, "НастроитьПредопределенныеВидыСоответствий", 1);

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.24.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.НазначитьОбъектСтатусамПротоколРасхожденийБюджета";//ДобавитьПроцедуруВМассив(МассивПроцедур, "НазначитьОбъектСтатусамПротоколРасхожденийБюджета", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.24.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Справочники.бит_ПрофилиРаспределенияПоПериодам.ЗаполнитьВидПрофиляРаспределенияПриОбновлении";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьВидПрофиляРаспределения", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.24.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ПользовательскиеДействияЗаполнитьЭтоВыражение";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьЭтоВыражениеПользовательскоеДействие", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.24.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ПользовательскиеДействияКонвертироватьАвтоДействия";//ДобавитьПроцедуруВМассив(МассивПроцедур, "КонвертироватьАвтоДействияПользовательскихДействий", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.26.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ТаблицыПроизвольныхОтчетовАктуализироватьПредыдущиеКоординаты"; //ДобавитьПроцедуруВМассив(МассивПроцедур, "УстановитьПредыдущиеЗначенияРеквизитовТаблицПроизвольныхОтчетов", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.28.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ук_СлужебныйСервер.ПервоначальноеЗаполнение";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ОбновитьПараметрыУлучшенияКачества", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.30.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ПравилаЗаполненияПолейПриТрансляцииЗаполнитьСинонимПоляПриемника"; //ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьСинонимПоляПриемникаПравилаЗаполненияПолейПриТрансляции", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.30.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.НазначитьОбъектСтатусамОперацииУпр";//ДобавитьПроцедуруВМассив(МассивПроцедур, "НазначитьОбъектСтатусамОперацииУпр", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.30.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ук_СлужебныйСервер.ПервоначальноеЗаполнение";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ОбновитьПараметрыУлучшенияКачества", 1);

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.31.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.НазначитьОбъектСтатусамПодсистемыВалютныйКонтроль";//ДобавитьПроцедуруВМассив(МассивПроцедур, "НазначитьОбъектСтатусамПодсистемыВалютныйКонтроль", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.31.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ук_СлужебныйСервер.ПервоначальноеЗаполнение";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ОбновитьПараметрыУлучшенияКачества", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.31.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ВключитьОпциюИспользоватьРучнуюКорректировкуФакта";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ВключитьОпциюИспользоватьРучнуюКорректировкуФакта", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.31.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ПеренестиСоответствияАналитик";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ПеренестиСоответствияАналитик", 1);

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.33.1";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ПеренестиВерсииОбъектов";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ПеренестиВерсииОбъектов", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.34.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.КонвертацияПрисоединенныхФайлов";//ДобавитьПроцедуруВМассив(МассивПроцедур, "КонвертацияПрисоединенныхФайлов", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.34.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ТочкиАлгоритмовУстановитьОформлениеТочек";//ДобавитьПроцедуруВМассив(МассивПроцедур, "УстановитьОформлениеТочекАлгоритма", 1);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.34.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗаполнитьНастройкуКонтролироватьОстаткиНаСкладеДляПередачи";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнитьНастройкуКонтролироватьОстаткиНаСкладеДляПередачи", 1);

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.35.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗаполнитьСуммыДокументовЗакупок";//ДобавитьПроцедуруВМассив(МассивПроцедур, "ЗаполнениеСуммыДокументовЗакупок", 1);

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.37.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ФормаВводаБюджетаЗаполнитьВычислятьФормулыПриВводе";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.37.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Документы.бит_ДополнительныеУсловияПоДоговору.ПеренестиНазначениеПлатежаПриПереходеНаНовуюВерсию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.37.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Документы.бит_ЗаявкаНаРасходованиеСредств.ПеренестиНазначениеПлатежаПриПереходеНаНовуюВерсию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.37.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Документы.бит_ЗаявкаНаРасходованиеСредствОбщая.ПеренестиНазначениеПлатежаПриПереходеНаНовуюВерсию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.37.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Документы.бит_ПланируемоеПоступлениеДенежныхСредств.ПеренестиНазначениеПлатежаПриПереходеНаНовуюВерсию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.37.3";
	Обработчик.Процедура           = "Справочники.бит_ПаспортаСделок.ЗаполнитьВидРегистрацииДоговора";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.38.1";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ПеренестиФлагРешенийСогласования";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.40.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.УстановитьИспользованиеПодключенияКВнешнимБазам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.40.1";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.АктуализироватьМеханизмРазделенияДоступаНаУровнеБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.40.1";
	Обработчик.Процедура           = "РегистрыСведений.бит_Удалить_МаскиКодов.ПеренестиДанныеПриОбновлении";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.40.1";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ОбновитьДанныеДокументовМСФО";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.42.1";
	Обработчик.Процедура           = "Справочники.бит_СтруктураКонструктораПравилТрансляции.ЗаполнитьКолонкуОписанияТиповПриПереходеНаНовуюВерсию";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.42.1";
	Обработчик.Процедура           = "РегистрыСведений.бит_ДополнительныеПараметрыОбъектов.ЗаполнитьПриПереходеНаНовуюВерсию";
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("3760164e-230f-4cab-b7ed-c1f6882d2d34");
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет ""Запретить перезаполнение аналитик"" для списка ""Дополнительные параметры объектов"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.42.1";
	Обработчик.Процедура           = "Документы.бит_му_ПринятиеКУчетуОС.ЗаполнитьСчетаУчетаПроцентов";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.42.1";
	Обработчик.Процедура           = "бит_Визирование.ЗаполнитьВерсиюПринятийКУчету";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.42.1";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.НастроитьРежимыТрансляцииПриНаличииПравилТрансляции";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.42.4";
	Обработчик.Процедура           = "Документы.бит_КорректировкаКонтрольныхЗначений.ЗаполнитьВерсиюПринятийКУчету";
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.42.7";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.СвойстваУстановитьЗначениеПризнакаИспользуется";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.1.42.9";
	Обработчик.Процедура           = "УчетНДФЛ.ЗаполнитьНДФЛКПеречислению";
	Обработчик.РежимВыполнения     = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("5b15b417-7c89-48c6-a964-5e80f1b341b4");
	Обработчик.Комментарий         = НСтр("ru = 'Заполнение НДФЛ к перечислению.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.1.42.9";
	Обработчик.Процедура           = "УчетНДФЛ.ЗаполнитьНДФЛПеречисленный";
	Обработчик.РежимВыполнения     = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("de920e37-35ce-41b8-8ed9-352165701527");
	Обработчик.Комментарий         = НСтр("ru = 'Заполнение НДФЛ перечисленного.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.Процедура           = "Справочники.бит_Запросы.ОбновитьПредопределенныеЗапросы";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.Процедура           = "Документы.бит_удалить_ВалютныйСвоп.ОчиститьСтатусыВизы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ЗарегистрироватьИзмененияПриДобавленииПолный";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.СписаниеСРасчетногоСчетаСформироватьРаспределениеПлатежа";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("b7343046-c77e-4080-854b-b68097d2f399");
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет таблицу ""Распределение бюджета"" в документе ""Списание с расчетного счета""
									|До завершения обработки ""Распределение бюджета"" данных документов будет отображаться некорректно.'");
	Обработчик.ПроцедураПроверки   = "бит_ОбновлениеИнформационнойБазыБФ.РаспределениеПлатежаСформированоПриПереходеНаНовуюВерсию";
    Обработчик.БлокируемыеОбъекты  = "Документ.СписаниеСРасчетногоСчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ПоступлениеНаРасчетныйСчетСформироватьРаспределениеПлатежа";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("2522a177-4539-46f4-8a7c-438cd6a24424");
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет таблицу ""Распределение бюджета"" в документе ""Поступление на расчетный счет""
									|До завершения обработки ""Распределение бюджета"" данных документов будет отображаться некорректно.'");
	Обработчик.ПроцедураПроверки   = "бит_ОбновлениеИнформационнойБазыБФ.РаспределениеПлатежаСформированоПриПереходеНаНовуюВерсию";
    Обработчик.БлокируемыеОбъекты  = "Документ.ПоступлениеНаРасчетныйСчет";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ПриходныйКассовыйОрдерСформироватьРаспределениеПлатежа";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("d141f2a8-b372-4186-b2cc-3a4727400f6a");
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет таблицу ""Распределение бюджета"" в документе ""Поступление наличных""
									|До завершения обработки ""Распределение бюджета"" данных документов будет отображаться некорректно.'");
	Обработчик.ПроцедураПроверки   = "бит_ОбновлениеИнформационнойБазыБФ.РаспределениеПлатежаСформированоПриПереходеНаНовуюВерсию";
    Обработчик.БлокируемыеОбъекты  = "Документ.ПриходныйКассовыйОрдер";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.РасходныйКассовыйОрдерСформироватьРаспределениеПлатежа";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("5e746199-2b4b-491c-8f88-42479c6966e8");
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет таблицу ""Распределение бюджета"" в документе ""Выдача наличных""
									|До завершения обработки ""Распределение бюджета"" данных документов будет отображаться некорректно.'");
	Обработчик.ПроцедураПроверки   = "бит_ОбновлениеИнформационнойБазыБФ.РаспределениеПлатежаСформированоПриПереходеНаНовуюВерсию";
    Обработчик.БлокируемыеОбъекты  = "Документ.РасходныйКассовыйОрдер";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.Процедура           = "Документы.бит_му_ИзменениеПараметровУчетаОС.ЗаполнитьРеквизитыШапкиИзменениеПараметровУчетаОС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Справочники.бит_СтатусыОбъектов.УстановитьОбъектыСистемыПриПереходеНаНовуюВерсию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "бит_Визирование.ЗаполнитьОбъектыМобильногоВизирования";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.Процедура           = "Справочники.бит_уп_Алгоритмы.ЗаполнитьКартуМаршрутаXMLПриПереходеНаНовуюВерсию";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "Обработки.бит_си_СправочнаяИнформация.ЗагрузитьСправочнуюИнформациюПриПереходеНаНовуюВерсию";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.1";
	Обработчик.Процедура           = "РегистрыСведений.бит_БюджетЗапрещенКИспользованиюВПланировании.ЗаполнитьИнформациюОБюджетах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.5";
	Обработчик.Процедура           = "Задачи.бит_уп_Задача.УдалитьОшибочныеСсылкиПриПереходеНаНовуюВерсию";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.43.5";
	Обработчик.Процедура           = "Справочники.бит_ПользовательскиеДействия.ОбработатьПредметыЗадачПриПереходеНаНовуюВерсию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.44.2";
	Обработчик.Процедура           = "Обработки.бит_КонсольОперативногоВизирования.УстановитьАктивныеТочкиВизированияПриПереходеНаНовуюВерсию";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("4bd794b4-6d57-426e-95eb-f0289bac9c76");
	Обработчик.Комментарий         = НСтр("ru = 'Устанавливает признак активных точек согласования в регистре ""Установленные визы""
									|До завершения операции обработка ""Консоль оперативного визирования"" может отражать не полный перечень виз для согласования.'");
    
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.44.2";
	Обработчик.Процедура           = "РегистрыСведений.бит_НастройкиПрограммы.УстановитьНастройкуПрограммыПриПереходеНа3_1_44";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.44.2";
	Обработчик.Процедура           = "Документы.бит_ПереоценкаВалютныхДенежныхСтатей.УстановитьПризнакПоВсемЦФО";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("c0e6040f-a091-48e9-83b1-8e78b5ff9196");
	Обработчик.Комментарий         = НСтр("ru = 'Устанавливает признак ""По всем ЦФО"" для документов ""Переоценка валютных денежных статей""
									|До завершения операции не рекомендуется проводить документы ""Переоценка валютных денежных статей"" без данного признака.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.1.44.5";
	Обработчик.Процедура           = "бит_ОбновлениеИнформационнойБазыБФ.ИсправитьДублиКлючейРасшифровкиПлатежа";

	// Справочная информация. Обработчик.Процедура  = "бит_ук_СлужебныйСервер.УдалитьНакопленныеПакеты";
	// Примеры отложенного обновления: 
	// - РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ЗаполнитьСтавкиНалогаНаПрибыльС2017По2020Годы,
	// - РегистрыСведений.СтатусыДокументов.ЗаполнитьСтатусыСчетовФактурПоДокументамРеализация.
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	ВерсияКонфигурации = ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);
	Если ВерсияКонфигурации <> "0.0.0.0" Тогда
		
		ВерсияБитФинанс  = Константы.бит_НомерРелиза.Получить();
		ВерсияБиблиотеки = ОбновлениеИнформационнойБазы.ВерсияИБ("БитФинанс");
		
		Если ВерсияБиблиотеки = "0.0.0.0" Тогда
			Если НЕ ПустаяСтрока(ВерсияБитФинанс) Тогда
				// Бит.Финанс уже эксплуатируется.
				Если бит_ОбновлениеСПредыдущейРедакцииБФ.ЭтоПереходСРедакции20() Тогда
					// Переход с 2.8 с вызовом первоначального заполнения.
					ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ("БитФинанс", "2.8.0.0", Ложь);
				Иначе
					// Переход на библиотечную поставку.
					ОбновлениеИнформационнойБазы.ЗарегистрироватьНовуюПодсистему("БитФинанс", ВерсияБитФинанс);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Константы.ИспользоватьГруппыПользователей.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьГруппыПользователей.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
		
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПервыйЗапуск() Экспорт

	УстановитьПривилегированныйРежим(Истина);
		
	// Обработать переход на ред. 3.1.
	Если бит_ОбновлениеСПредыдущейРедакцииБФ.ЭтоПереходСРедакции20() Тогда
	     Возврат;	
	КонецЕсли; 
	 
	ВалютаУпрУчета = Константы.бит_ВалютаУправленческогоУчета.Получить();
	Если ЗначениеЗаполнено(ВалютаУпрУчета) Тогда
		Возврат;	
	КонецЕсли; 

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Общие настройки/Первый запуск БИТ.ФИНАНС", "", Истина);
	
	Константы.бит_ВалютаУправленческогоУчета.Установить(Константы.ВалютаРегламентированногоУчета.Получить());
	Константы.бит_РежимОбновленияПеречняВиз.Установить(Перечисления.бит_РежимыОбновленияПеречняВиз.НеОбновлять);
	Константы.бит_РежимФормированияОтчетов.Установить(Перечисления.бит_РежимыФормированияОтчетов.Авто);
	Константы.бит_РежимАвтоЗаполненияАналитик.Установить(Перечисления.бит_РежимыАвтоЗаполненияАналитик.ЗаполнятьВсегда);
	Константы.бит_рлсБФ.Установить(бит_ОбщегоНазначения.ЭтоСемействоБП() Или бит_ОбщегоНазначения.ЭтоУТ());

	ЗаполнитьНастройкиПрограммыПоУмолчанию();
	ЗаполнитьНастройкиПользователяПоУмолчанию();
	
	// Заполнение справочников.
	ДобавитьЯзыки();
	ЗаполнитьСценарииБюджетирования();
	УстановитьВидГруппамОбъектовДоступа();
	ЗаполнитьСтатусыОбъектов();
	ЗаполнитьОперацииВГО();
	СоздатьИНазначитьВизы();
	НазначитьДополнительныеАналитики();
	ОбновитьОбъектыУправленческогоУчета();
	Справочники.бит_Запросы.ОбновитьПриПереходеНаНовыйРелиз();
	Справочники.бит_ИсточникиДанных.ОбновитьПредопределенныеИсточники();
	Справочники.бит_ПользовательскиеФункции.ОбновитьПредопределенныеЭлементы();
	Справочники.бит_КомандыБотуТелеграм.ЗаполнитьКомандыТелеграмПоУмолчанию();
	
	ОбновитьДополнительныеОтчетыИОбработки();
	ОбновлениеПрофилейГруппДоступаПервыйЗапуск();
	ЗаполнитьСправочникВидыДополнительныхСтавок();
	ЗаполнитьТипыКатегорийФинансовыхАктивов();
	ЗаполнитьТипВСоставляющихПлатежейПоФинДоговорам();
	НазначениеВидовРешенийСогласования();
	ЗаполнитьСправочникВидыИнформационныхБаз();
	бит_ОтчетыСервер.ОбновитьПредопределенныеВарианты(,"Ошибки");
	РегистрыСведений.бит_МаскиКодов.УстановитьМаскиКодаПлановСчетовПоУмолчанию();
	Справочники.бит_ВидыСоответствийАналитик.НастроитьПредопределенныеВидыСоответствий();
	Справочники.бит_му_КлассыОсновныхСредств.ЗаполнитьВидыКлассовДляПредопределенныхКлассовОС();
	НастроитьРежимыТрансляции();
	УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
	//СтандартныеПодсистемыСервер.ОбновитьВсеПараметрыРаботыПрограммы();                
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ОбновитьОбъектыСистемы() Экспорт 

	 бит_УправлениеОбъектамиСистемы.ОбновитьОбъектыСистемы("Ошибки");

КонецПроцедуры

Процедура ЗаполнитьСправочникВидыРеквизитовДвижений()  Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		бит_МеханизмХозяйственныхОперацийСервер.ОбновитьСоставРеквизитовДвижений(Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСправочникВидыРеквизитовДвижений()

Процедура УстановитьКонстантуРлсБФ() Экспорт

	Константы.бит_рлсБФ.Установить(бит_ОбщегоНазначения.ЭтоСемействоБП() Или бит_ОбщегоНазначения.ЭтоУТ());	
	
КонецПроцедуры

Процедура УстановитьКонстантуБДРПланируетсяСНДС() Экспорт 

	Константы.бит_БДРПланируетсяСНДС.Установить(Истина);

КонецПроцедуры // УстановитьКонстантуБДРПланируетсяСНДС()

// Процедура заполняет способы пересчета по курсам в способах компоновки источников.
// 
Процедура СпособыКомпоновкиИсточниковДанныхЗаполнитьСпособыПересчетаПоКурсам() Экспорт

	Запрос = Новый Запрос(); 
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_СпособыКомпоновкиИсточниковДанных.КолонкиТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.ВидКолонки = ""Ресурс""
	|	И Таблица.СпособПересчетаПоКурсам = ЗНАЧЕНИЕ(Перечисление.бит_СпособыПересчетаПоКурсам.Пустаяссылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НужноЗаписать = Ложь;
		// Заполнение способов пересчета по курсам
		Для каждого КолонкаТб Из ТекущийОбъект.КолонкиТаблицы Цикл
			Если КолонкаТб.ВидКолонки = "Ресурс" Тогда
				Если Не ЗначениеЗаполнено(КолонкаТб.СпособПересчетаПоКурсам) Тогда
					КолонкаТб.СпособПересчетаПоКурсам = Перечисления.бит_СпособыПересчетаПоКурсам.НеПересчитывается;
					НужноЗаписать = Истина;
				КонецЕсли;   							
			КонецЕсли; 
		КонецЦикла;
		Если НужноЗаписать Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
		КонецЕсли;
	КонецЦикла; 		

КонецПроцедуры // СпособыКомпоновкиИсточниковДанныхЗаполнитьСпособыПересчетаПоКурсам()

// Процедура конвертирует маски кода для планов счетов БИТ.
// 
// Параметры:
//  Нет
// 
Процедура КонвертироватьНеПредопределенныеВариантыОтчета() Экспорт

	// Для БП в 14 релизе 
	// производится конвертация настроек непредопределенных вариантов 
	// отчета бит_ПланФактныйАнализПоБюджету_ОстаткиПоСчетам.	
	
	МассивКлючейОбъекта = Новый Массив;
	МассивКлючейОбъекта.Добавить("Отчет.бит_ПланФактныйАнализПоБюджету_ОстаткиПоСчетам");
	бит_ОтчетыСервер.КНВ_КонвертироватьНеПредопределенныеВариантыОтчетов(МассивКлючейОбъекта);
	
КонецПроцедуры // КонвертироватьНеПредопределенныеВариантыОтчета()

// Выполняет заполнение реквизита ВалютаДокумента по указанному списку документов.
// 
Процедура ЗаполнитьВалютуДокументовПоМУ() Экспорт
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить("бит_му_ПринятиеКУчетуНМА");
	МассивДокументов.Добавить("бит_му_НачислениеАмортизацииНМА");
	МассивДокументов.Добавить("бит_му_ОбесценениеНМА");
	МассивДокументов.Добавить("бит_му_ПереоценкаНМА");
	МассивДокументов.Добавить("бит_му_ВыбытиеНМА");
	МассивДокументов.Добавить("бит_му_ПринятиеКУчетуОС");
	МассивДокументов.Добавить("бит_му_НачислениеАмортизацииОС");
	МассивДокументов.Добавить("бит_му_ОбесценениеОС");
	МассивДокументов.Добавить("бит_му_ПереоценкаОС");
	МассивДокументов.Добавить("бит_му_ВыбытиеОС");
	МассивДокументов.Добавить("бит_му_ПереводОСВСоставИнвестиционнойСобственности");
	МассивДокументов.Добавить("бит_му_МодернизацияОС");
	
	ТекстЗапроса = "";
	Ном = 0;
	Для Каждого ТекДокумент Из МассивДокументов Цикл
		
		ОбъектМета = Метаданные.Документы.Найти(ТекДокумент);
		Если ОбъектМета = Неопределено
			ИЛИ НЕ бит_РаботаСМетаданными.ЕстьРеквизит("ВалютаДокумента", ОбъектМета)
			ИЛИ НЕ бит_РаботаСМетаданными.ЕстьРеквизит("КурсДокумента", ОбъектМета)
			ИЛИ НЕ бит_РаботаСМетаданными.ЕстьРеквизит("КратностьДокумента", ОбъектМета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ном = 0 Тогда
			СтрРазрешенные = "РАЗРЕШЕННЫЕ";
		Иначе
			СтрРазрешенные = "";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС)+
		"ВЫБРАТЬ "+СтрРазрешенные+"
		|	ДокМУ.Ссылка 
		|ИЗ
		|	Документ."+ТекДокумент+" КАК ДокМУ
		|ГДЕ
		|	(ДокМУ.ВалютаДокумента = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			ИЛИ ДокМУ.КурсДокумента = 0
		|			ИЛИ ДокМУ.КратностьДокумента = 0)";
		
		Ном = Ном+1;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(ТекущийОбъект.Организация);
		СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущийОбъект.ВалютаДокумента, ТекущийОбъект.Дата);
		ТекущийОбъект.КурсДокумента 	 = СтруктураКурса.Курс;
		ТекущийОбъект.КратностьДокумента = СтруктураКурса.Кратность;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет поиск счетов с пустым порядком и заполняет порядок. 
// 
Процедура ПроверитьЗаполнитьПорядокСчетов() Экспорт
	
	ПроверитьЗаполнитьПорядокПоПлануСчетов("бит_Бюджетирование");
	Для н = 1 По 5 Цикл
		ПроверитьЗаполнитьПорядокПоПлануСчетов("бит_Дополнительный_"+н);
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнитьПорядокСчетов()

// Процедура заполняет реквизит РежимФормированияДвижений в документах ФормаВводаБюджета.
// 
Процедура ЗаполнитьРежимФормированияДвиженийФормаВвода() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабДок.Ссылка
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета КАК ТабДок
	|ГДЕ
	|	ТабДок.РежимФормированияДвижений = ЗНАЧЕНИЕ(Перечисление.бит_РежимыФормированияДвиженийФормыВвода.ПустаяСсылка)";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.РежимФормированияДвижений = Перечисления.бит_РежимыФормированияДвиженийФормыВвода.Все;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийОбъект);
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьРежимФормированияДвиженийФормаВвода()

Процедура УстановитьНастройкуВыделятьАргументыФормулФормыВвода() Экспорт
	
	// Отображение аргументов формул в форме ввода.
	Если бит_РаботаСМетаданными.ЕстьПредопределенныйЭлемент("ПланВидовХарактеристик.бит_НастройкиПользователей.ВыделятьАргументыФормулФормыВвода") Тогда
		НаборЗаписей = РегистрыСведений.бит_НастройкиПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.бит_НастройкиПользователей.ВыделятьАргументыФормулФормыВвода);
		НаборЗаписей.Отбор.Пользователь.Установить(Справочники.ГруппыПользователей.ВсеПользователи);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Настройка         = ПланыВидовХарактеристик.бит_НастройкиПользователей.ВыделятьАргументыФормулФормыВвода;
		Запись.Пользователь      = Справочники.ГруппыПользователей.ВсеПользователи;
		Запись.ЗначениеНастройки = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьНастройкуВыделятьАргументыФормулФормыВвода()

// Процедура выполняет заполнение новых реквизитов Процессов БИТ. 
// 
Процедура ЗаполнитьРежимПроцессов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Режим", Перечисления.бит_уп_РежимыПроцессов.ПустаяСсылка()); 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_уп_Процесс.Ссылка
	|ИЗ
	|	БизнесПроцесс.бит_уп_Процесс КАК бит_уп_Процесс
	|ГДЕ
	|	бит_уп_Процесс.Режим = &Режим";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПроцессОбъект.Режим = Перечисления.бит_уп_РежимыПроцессов.Обычный;
		ПроцессОбъект.РежимАдресацииАвтоматическихЗадач = Перечисления.бит_уп_РежимыАдресацииАвтоматическихЗадач.АдминистраторПроцесса;
		ПроцессОбъект.ОбменДанными.Загрузка = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроцессОбъект);
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьРежимПроцессов()

// Процедура назначает объект системы статусам документов подсистемы МТО. 
// 
Процедура НазначитьОбъектСтатусамПодсистемыМТО() Экспорт 
	
	ЗаявкаНаПотребность  = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_мто_ЗаявкаНаПотребность");
	
	// Заявка на потребность
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Черновик  	,1, ЗаявкаНаПотребность);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Рабочая   	,2, ЗаявкаНаПотребность);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Утверждена	,3, ЗаявкаНаПотребность);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Выдача  		,4, ЗаявкаНаПотребность);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Закупка		,5, ЗаявкаНаПотребность);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Исполнена  	,6, ЗаявкаНаПотребность);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_ЧастичноИсполнена,7, ЗаявкаНаПотребность);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Закрыта   	,8, ЗаявкаНаПотребность);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Отклонена	,9, ЗаявкаНаПотребность);
	
	ЗаявкаНаЗакупку  = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_мто_ЗаявкаНаЗакупку");
	
	// Заявка на закупку
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Черновик 	,1, ЗаявкаНаЗакупку);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Рабочая 		,2, ЗаявкаНаЗакупку);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Утверждена 	,3, ЗаявкаНаЗакупку);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Исполнена  	,4, ЗаявкаНаЗакупку);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_ЧастичноИсполнена  	,5, ЗаявкаНаЗакупку);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Закрыта  	,6, ЗаявкаНаЗакупку);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Отклонена  	,7, ЗаявкаНаЗакупку);
	
КонецПроцедуры

// Процедура заполняет объект системы статусам подсистемы МДМ. 
// 
Процедура НазначитьОбъектСтатусамМДМ() Экспорт

	ЗаявкаНаИзменение = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_мдм_ЗаявкаНаИзменение");
	ЗаявкаНаУдаление  = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_мдм_ЗаявкаНаУдаление");	
	
	// Заявка на изменение
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаИзменение_Черновик  , 1, ЗаявкаНаИзменение);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаИзменение_Рабочая   , 2, ЗаявкаНаИзменение);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаИзменение_Утверждена, 3, ЗаявкаНаИзменение);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаИзменение_Исполнена , 4, ЗаявкаНаИзменение);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаИзменение_Отклонена , 5, ЗаявкаНаИзменение);
	
	// Заявка на удаление
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаУдаление_Черновик   , 1, ЗаявкаНаУдаление);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаУдаление_Рабочая    , 2, ЗаявкаНаУдаление);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаУдаление_Утверждена , 3, ЗаявкаНаУдаление);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаУдаление_Исполнена  , 4, ЗаявкаНаУдаление);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаУдаление_Отклонена  , 5, ЗаявкаНаУдаление);
	
КонецПроцедуры // НазначитьОбъектСтатусамМДМ()

// Процедура назначает объект системы статусам документа бит_ПротоколРасхожденийБюджета. 
// 
Процедура НазначитьОбъектСтатусамПротоколРасхожденийБюджета() Экспорт 
	
	ПротоколРасхожденийБюджета = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_ПротоколРасхожденийБюджета");
	
	// Протокол расхождений бюджета
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Черновик 	,1,ПротоколРасхожденийБюджета);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Рабочий 	,2,ПротоколРасхожденийБюджета);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Утвержден	,3,ПротоколРасхожденийБюджета);
	
КонецПроцедуры // НазначитьОбъектСтатусамПротоколРасхожденийБюджета()

// Процедура заполняет объект системы статусам документа Операция (управленческий). 
// 
Процедура НазначитьОбъектСтатусамОперацииУпр() Экспорт

	ОперацияУпр = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_ОперацияУправленческий");
	
	// Операция (управленческий)
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Операция_Черновик  ,1,ОперацияУпр);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Операция_Рабочая   ,2,ОперацияУпр);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Операция_Утверждена,3,ОперацияУпр);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Операция_Отклонена ,4,ОперацияУпр);
	
КонецПроцедуры // НазначитьОбъектСтатусамОперацииУпр()

// Процедура назначает объект системы статусам документов подсистемы Валютный контроль. 
// 
Процедура НазначитьОбъектСтатусамПодсистемыВалютныйКонтроль() Экспорт 
	
	// Справка о валютных операциях
	СправкаОВалютныхОперациях  = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_СправкаОВалютныхОперациях");
	
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.СправкаОВалютныхОперациях_Черновик  	,1, СправкаОВалютныхОперациях);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.СправкаОВалютныхОперациях_Рабочая   	,2, СправкаОВалютныхОперациях);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.СправкаОВалютныхОперациях_Утверждена	,3, СправкаОВалютныхОперациях);
	
	// Справка о подтверждающих документах
	СправкаОПодтверждающихДокументах  = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_СправкаОПодтверждающихДокументах");
	
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.СправкаОПодтверждающихДокументах_Черновик  	,1, СправкаОПодтверждающихДокументах);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.СправкаОПодтверждающихДокументах_Рабочая   	,2, СправкаОПодтверждающихДокументах);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.СправкаОПодтверждающихДокументах_Утверждена	,3, СправкаОПодтверждающихДокументах);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиМТО() Экспорт 

	МенеджерЗаписи = РегистрыСведений.бит_НастройкиПрограммы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период            = Дата('19800101');
	МенеджерЗаписи.Настройка         = ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьКоличествоНоменклатурыПоЗаявкамНаЗакупку;
	МенеджерЗаписи.ЗначениеНастройки = Перечисления.бит_мто_ВидыКонтроляПоЗаявкамНаЗакупку.Предупреждать;
	МенеджерЗаписи.Записать();

КонецПроцедуры // ЗаполнитьНастройкиМТО()

Процедура ДобавитьГруппировкиВНастройкиОтчета() Экспорт
	
	МассивКлючейОбъектов = Новый Массив;
	МассивКлючейОбъектов.Добавить("Отчет.бит_АнализСубконто_Бюджетирование_Построитель"); 
	
	ТаблицаГруппировки = Новый ТаблицаЗначений;
	ТаблицаГруппировки.Колонки.Добавить("Имя");
	ТаблицаГруппировки.Колонки.Добавить("Использование");
	ТаблицаГруппировки.Колонки.Добавить("Представление");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивКлючейОбъектов", МассивКлючейОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_СохраненныеНастройки.КлючОбъекта КАК КлючОбъекта,
	|	бит_СохраненныеНастройки.Ссылка КАК Ссылка,
	|	бит_СохраненныеНастройки.ХранилищеНастроек КАК ХранилищеНастроек,
	|	бит_СохраненныеНастройки.НастраиваемыйОбъект КАК НастраиваемыйОбъект
	|ИЗ
	|	Справочник.бит_СохраненныеНастройки КАК бит_СохраненныеНастройки
	|ГДЕ
	|	бит_СохраненныеНастройки.НастраиваемыйОбъект В(&МассивКлючейОбъектов)";
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		СсылкаНаСправочник = Выборка.Ссылка;
		ТекНастройки = Выборка.ХранилищеНастроек.Получить();
		Если ТекНастройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТекНастройки.Свойство("ТаблицаГруппировки") Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.КлючОбъекта = "Отчет.бит_АнализСубконто_Бюджетирование_Построитель" 
			И Не ТекНастройки.Свойство("Субконто") Тогда
			Продолжить;
		КонецЕсли;
		
		// Получим объект для записи
		ЭлемСправочника = СсылкаНаСправочник.ПолучитьОбъект();
		
		// Очистка таблицы группировки
		ТаблицаГруппировки.Очистить();
		Если Выборка.КлючОбъекта = "Отчет.бит_АнализСубконто_Бюджетирование_Построитель" Тогда
			ТаблицаСубконто = ТекНастройки.Субконто.Получить();
			// Заполнение таблицы группировки по таблице субконто.
			инд = 1;
			Для каждого СтрСубконто Из ТаблицаСубконто Цикл
			    СтрГруппы = ТаблицаГруппировки.Добавить();
				СтрГруппы.Имя = "Субконто" + Строка(инд);
				СтрГруппы.Использование = Истина;
				СтрГруппы.Представление = СокрЛП(СтрСубконто.ВидСубконто);
			 	инд = инд + 1;
			КонецЦикла;  			
		КонецЕсли;    		
		
		// Запись таблицы группировки
		ТекНастройки.Вставить("ТаблицаГруппировки", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаГруппировки));
		
		ЭлемСправочника.ХранилищеНастроек = Новый ХранилищеЗначения(ТекНастройки);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлемСправочника);
	КонецЦикла;	

КонецПроцедуры

// Процедура заполняет реквизит способ транспорта в настройка оповещений и шаблонах сообщений. 
 //
Процедура ЗаполнитьСпособТранспорта() Экспорт
 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойСпособТранспорта", Перечисления.бит_фн_СпособыТранспортаОповещений.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_фн_НастройкиДоставкиОповещений.Ссылка
	|ИЗ
	|	Справочник.бит_фн_НастройкиДоставкиОповещений КАК бит_фн_НастройкиДоставкиОповещений
	|ГДЕ
	|	бит_фн_НастройкиДоставкиОповещений.СпособТранспорта = &ПустойСпособТранспорта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_фн_ШаблоныСообщений.Ссылка
	|ИЗ
	|	Справочник.бит_фн_ШаблоныСообщений КАК бит_фн_ШаблоныСообщений
	|ГДЕ
	|	бит_фн_ШаблоныСообщений.СпособТранспорта = &ПустойСпособТранспорта";
	
	Результат = Запрос.Выполнить();			 
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.СпособТранспорта = Перечисления.бит_фн_СпособыТранспортаОповещений.ЭлектроннаяПочта;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьСпособТранспорта()

Процедура ВключитьОпциюИспользоватьРучнуюКорректировкуФакта() Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_РучнаяКорректировкаФакта.Объект
	|ИЗ
	|	РегистрСведений.бит_РучнаяКорректировкаФакта КАК бит_РучнаяКорректировкаФакта";
	
	РезультатЗапроса = Запрос.Выполнить();
    Константы.бит_ИспользоватьРучнуюКорректировкуФакта.Установить(НЕ РезультатЗапроса.Пустой());

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ВключитьОпциюИспользоватьРучнуюКорректировкуФакта

Процедура ПеренестиСоответствияАналитик() Экспорт 
	
	ДанныеЗаполнения = Новый Структура("ВидСоответствия," 
									   "ЛеваяАналитика_1, ЛеваяАналитика_2, ЛеваяАналитика_3,"
									   "ПраваяАналитика_1, ПраваяАналитика_2, ПраваяАналитика_3"); 
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Источник.ВидСоответствия,
	|	Источник.ЛеваяАналитика_1 КАК ЛеваяАналитика_1,
	|	Источник.ЛеваяАналитика_2 КАК ЛеваяАналитика_2,
	|	Источник.ЛеваяАналитика_3,
	|	Источник.ПраваяАналитика_1,
	|	Источник.ПраваяАналитика_2,
	|	Источник.ПраваяАналитика_3
	|ИЗ
	|	РегистрСведений.бит_УдалитьСоответствияАналитик КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК Приемник
	|		ПО Источник.ВидСоответствия = Приемник.ВидСоответствия
	|			И Источник.ЛеваяАналитика_1 = Приемник.ЛеваяАналитика_1
	|			И Источник.ЛеваяАналитика_2 = Приемник.ЛеваяАналитика_2
	|			И Источник.ЛеваяАналитика_3 = Приемник.ЛеваяАналитика_3
	|			И Источник.ПраваяАналитика_1 = Приемник.ПраваяАналитика_1
	|			И Источник.ПраваяАналитика_2 = Приемник.ПраваяАналитика_2
	|			И Источник.ПраваяАналитика_3 = Приемник.ПраваяАналитика_3
	|ГДЕ
	|	Приемник.Регистратор ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НачатьТранзакцию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДетальныеЗаписи);
		
		Док = Документы.бит_НазначениеСоответствияАналитик.СоздатьДокумент();
		Док.Заполнить(ДанныеЗаполнения);
		Док.Дата = '2001-01-01';
		Док.Проведен = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
		
		ПараметрыПроведения = Документы.бит_НазначениеСоответствияАналитик.ПодготовитьПараметрыПроведения(Док.Ссылка, Ложь);
		НаборЗаписей        = РегистрыСведений.бит_СоответствияАналитик.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Док.Ссылка);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,ДанныеЗаполнения);		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Перенос накопленных данных со старой версии Версионирования на БСП.
//
Процедура ПеренестиВерсииОбъектов() Экспорт
	
	
КонецПроцедуры

// Процедура заполняет реквизит ЭтоВыражение в табличной части ДополнительныеПараметры.
//
Процедура ПользовательскиеДействияЗаполнитьЭтоВыражение() Экспорт

  Запрос = Новый Запрос;
  Запрос.Текст = 
  "ВЫБРАТЬ РАЗЛИЧНЫЕ
  |	ТабЧасть.Ссылка
  |ИЗ
  |	Справочник.бит_ПользовательскиеДействия.ДополнительныеПараметры КАК ТабЧасть
  |ГДЕ
  |	ВЫРАЗИТЬ(ТабЧасть.Значение КАК СТРОКА(100)) ПОДОБНО ""#ПП.%""
  |	И НЕ ТабЧасть.ЭтоВыражение";
  
  Результат = Запрос.Выполнить();
  Выборка = Результат.Выбрать();
  
  Пока Выборка.Следующий() Цикл
	Записывать = Ложь;  
  	ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
	Для каждого СтрокаТаблицы Из ТекущийОбъект.ДополнительныеПараметры Цикл
		 Если СтрНайти(СтрокаТаблицы.Значение,"#ПП.") > 0 И НЕ СтрокаТаблицы.ЭтоВыражение Тогда
		 	  СтрокаТаблицы.ЭтоВыражение = Истина;
			  Записывать = Истина;
		 КонецЕсли; 
	КонецЦикла; 
	Если Записывать Тогда
	    ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	КонецЕсли; 
  КонецЦикла; 

КонецПроцедуры // ЗаполнитьЭтоВыражениеПользовательскоеДействие() 

// Процедура конвертирует имена автоматических действий в 
// значения перечисления бит_уп_ВидыАвтоматическихДействий.
//
Процедура ПользовательскиеДействияКонвертироватьАвтоДействия() Экспорт
	
	МетаПеречисление = Метаданные.Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустоеДействие", Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабАвтоДействия.Ссылка
	|ИЗ
	|	Справочник.бит_ПользовательскиеДействия.АвтоматическиеДействия КАК ТабАвтоДействия
	|ГДЕ
	|	ТабАвтоДействия.Действие = &ПустоеДействие";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Записывать 	  = Ложь;		
		Для каждого СтрокаТаблицы Из ТекущийОбъект.АвтоматическиеДействия Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Действие) Тогда
				Если НЕ МетаПеречисление.ЗначенияПеречисления.Найти(СтрокаТаблицы.Удалить_Имя) = Неопределено Тогда
					СтрокаТаблицы.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач[СтрокаТаблицы.Удалить_Имя];
					Записывать = Истина;
				КонецЕсли;	 
			КонецЕсли; 
		КонецЦикла; // АвтоДействия
		Если Записывать Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
		КонецЕсли; 
	КонецЦикла; // Выборка
	
КонецПроцедуры // ПользовательскиеДействияКонвертироватьАвтоДействия()

// Процедура заполняет предыдущие значения реквизитов справочника ТаблицыПроизвольныхОтчетов.
//
Процедура ТаблицыПроизвольныхОтчетовАктуализироватьПредыдущиеКоординаты() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицыПроизвольныхОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_мпд_ТаблицыПроизвольныхОтчетов КАК ТаблицыПроизвольныхОтчетов
	|ГДЕ
	|	ТаблицыПроизвольныхОтчетов.ЛевоПред = 0
	|	И ТаблицыПроизвольныхОтчетов.ВерхПред = 0";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		 ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		 ТекущийОбъект.АктуализироватьПредыдущиеКоординаты();
		 ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект,,Истина);
	КонецЦикла; 
	
КонецПроцедуры // ТаблицыПроизвольныхОтчетовАктуализироватьПредыдущиеКоординаты() 

Процедура ПравилаЗаполненияПолейПриТрансляцииЗаполнитьСинонимПоляПриемника()  Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_ПравилаЗаполненияПолейПриТрансляции.ПоляПриемника КАК Т
	|ГДЕ
	|	Т.Синоним ПОДОБНО """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка         = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НастройкиДопИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

	Пока ВыборкаСсылка.Следующий() Цикл

		ТекущийОбъект         = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		ТаблицаПолей      = ТекущийОбъект.ПоляПриемника;
		ТаблицаРеквизитов = Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.ЗаполнитьТаблицуРеквизитов(ТекущийОбъект.Приемник);
		
		Для каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
			// Cубконто по-умолчанию не добавляем
			Если СтрокаТаблицы.ЭтоСубконто Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = ТаблицаПолей.Найти(СтрокаТаблицы.ИмяРеквизита, "ИмяПоля");  // это таб. часть
			Если НЕ НоваяСтрока = Неопределено Тогда
				УстановитьСинонимСтруктурыКонструктораПравилТрансляции(СтрокаТаблицы, НоваяСтрока, НастройкиДопИзмерений);
			КонецЕсли; 
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	КонецЦикла;

КонецПроцедуры //ПравилаЗаполненияПолейПриТрансляцииЗаполнитьСинонимПоляПриемника

// Конвертация присоединненных файлов из справочника файлы на БСП.
//
Процедура КонвертацияПрисоединенныхФайлов() Экспорт

	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;

	ДоступныеТипы = Метаданные.ОбщиеКоманды.бит_ПрисоединенныеФайлы.ТипПараметраКоманды.Типы();
	
	МассивФайлов = Новый Массив(); 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДоступныеТипы",ДоступныеТипы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Файлы.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ПометкаУдаления = ЛОЖЬ
	|	И ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) В (&ДоступныеТипы)
	|	И НЕ ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) = ТИП(Документ.бит_ПроектДоговора)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();	
	Пока Выборка.Следующий() Цикл
		РаботаСФайлами.ИзменитьСправочникХраненияФайлов(Выборка.ВладелецФайла);
	КонецЦикла;
	
	ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений();
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();	
	КонецЕсли;  
	
КонецПроцедуры

Процедура ТочкиАлгоритмовУстановитьОформлениеТочек() Экспорт

	ВидТочки = Новый Массив;
	ВидТочки.Добавить(Перечисления.бит_уп_ВидыТочекАлгоритмов.Старт);
	ВидТочки.Добавить(Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидТочки", ВидТочки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_уп_ТочкиАлгоритмов.Ссылка,
	|	бит_уп_ТочкиАлгоритмов.ОформлениеТочки
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов КАК бит_уп_ТочкиАлгоритмов
	|ГДЕ
	|	бит_уп_ТочкиАлгоритмов.ВидТочки В(&ВидТочки)";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОформлениеТочки.Получить()=Неопределено Тогда
			СтруктураОформление = Новый Структура;
			Цвет = Новый Цвет(0,0,0);
			СтруктураОформление.Вставить("Шрифт"                  ,Новый Шрифт("Roboto",8,Ложь));
			СтруктураОформление.Вставить("ЦветФона"               ,Новый Цвет(255,255,255));
			СтруктураОформление.Вставить("ЦветЛинии"              ,Цвет);	
			СтруктураОформление.Вставить("ЦветТекста"             ,Цвет);	
			СтруктураОформление.Вставить("ГоризонтальноеПоложение",ГоризонтальноеПоложение.Центр);
			СтруктураОформление.Вставить("ВертикальноеПоложение"  ,ВертикальноеПоложение.Центр);
			
			ОформлениеТочки = Новый ХранилищеЗначения(СтруктураОформление);
			
			ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТекущийОбъект.ОформлениеТочки = ОформлениеТочки;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);			
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуКонтролироватьОстаткиНаСкладеДляПередачи() Экспорт 

	НаборЗаписей = РегистрыСведений.бит_НастройкиПрограммы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьОстаткиНаСкладеДляПередачи);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период            = Дата('19800101');
	Запись.Настройка         = ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьОстаткиНаСкладеДляПередачи;
	Запись.ЗначениеНастройки = Перечисления.бит_мто_ВидыКонтроляПоЗаявкамНаЗакупку.Предупреждать;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры 

Процедура ЗаполнитьСуммыДокументовЗакупок() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЗаявкаНаПотребностьТовары.Сумма) КАК СуммаВсего,
	|	ЗаявкаНаПотребностьТовары.Ссылка,
	|	ЗаявкаНаПотребность.Сумма КАК Сумма
	|ИЗ
	|	Документ.бит_мто_ЗаявкаНаПотребность.Товары КАК ЗаявкаНаПотребностьТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_мто_ЗаявкаНаПотребность КАК ЗаявкаНаПотребность
	|		ПО ЗаявкаНаПотребностьТовары.Ссылка = ЗаявкаНаПотребность.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаПотребностьТовары.Ссылка,
	|	ЗаявкаНаПотребность.Сумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаЗакупкуТовары.Ссылка,
	|	СУММА(ЗаявкаНаЗакупкуТовары.Сумма) КАК СуммаВсего,
	|	ЗаявкаНаЗакупку.Сумма КАК Сумма
	|ИЗ
	|	Документ.бит_мто_ЗаявкаНаЗакупку.Товары КАК ЗаявкаНаЗакупкуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_мто_ЗаявкаНаЗакупку КАК ЗаявкаНаЗакупку
	|		ПО ЗаявкаНаЗакупкуТовары.Ссылка = ЗаявкаНаЗакупку.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаЗакупкуТовары.Ссылка,
	|	ЗаявкаНаЗакупку.Сумма";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаЗП = Результат[0].Выбрать();
	Пока ВыборкаЗП.Следующий() Цикл
		Если ВыборкаЗП.Сумма = 0 Тогда
			ЗаявкаНаПотребностьОб = ВыборкаЗП.Ссылка.ПолучитьОбъект();
			ЗаявкаНаПотребностьОб.Сумма = ВыборкаЗП.СуммаВсего;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаявкаНаПотребностьОб);
		КонецЕсли; 
	КонецЦикла;
	
	ВыборкаЗЗ = Результат[1].Выбрать();
	Пока ВыборкаЗЗ.Следующий() Цикл
		Если ВыборкаЗЗ.Сумма = 0 Тогда
			ЗаявкаНаЗакупкуОб = ВыборкаЗЗ.Ссылка.ПолучитьОбъект();
			ЗаявкаНаЗакупкуОб.Сумма = ВыборкаЗЗ.СуммаВсего;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаявкаНаЗакупкуОб);
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ФормаВводаБюджетаЗаполнитьВычислятьФормулыПриВводе() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ФормаВводаБюджета.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	|ГДЕ
	|	бит_ФормаВводаБюджета.ВычислятьФормулыПриВводе = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекущийОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.ВычислятьФормулыПриВводе = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийОбъект, Ложь, Ложь, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ПеренестиФлагРешенийСогласования() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСогласования.Ссылка КАК ВидРешения
	|ПОМЕСТИТЬ ВидыРешений
	|ИЗ
	|	Справочник.бит_ВидыРешенийСогласования КАК ВидыСогласования
	|ГДЕ
	|	ВидыСогласования.НеобходимКомментарийЗадача = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НазначениеРешенийСогласования.Организация КАК Организация,
	|	НазначениеРешенийСогласования.ОбъектСистемы КАК ОбъектСистемы,
	|	НазначениеРешенийСогласования.ВидРешения КАК ВидРешения
	|ИЗ
	|	РегистрСведений.бит_НазначениеВидовРешенийСогласования КАК НазначениеРешенийСогласования
	|ГДЕ
	|	НазначениеРешенийСогласования.ВидРешения В
	|			(ВЫБРАТЬ
	|				ВидыРешений.ВидРешения
	|			ИЗ
	|				ВидыРешений)";
	
	Запрос.УстановитьПараметр("Истина", Истина);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.бит_НазначениеВидовРешенийСогласования.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация   = Выборка.Организация;
		МенеджерЗаписи.ОбъектСистемы = Выборка.ОбъектСистемы;
		МенеджерЗаписи.ВидРешения    = Выборка.ВидРешения;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.НеобходимКомментарийЗадача = Истина;
			МенеджерЗаписи.Записать();
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьИспользованиеПодключенияКВнешнимБазам() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_мпд_НастройкиВнешнихПодключений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_мпд_НастройкиВнешнихПодключений КАК бит_мпд_НастройкиВнешнихПодключений";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Константы.бит_ИспользоватьПодключениеКВнешнимБазам.Установить(Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура АктуализироватьМеханизмРазделенияДоступаНаУровнеБазы() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("бит_ИспользоватьРазделениеДоступаНаУровнеБазы") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_ОбъектыСистемы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_ОбъектыСистемы КАК бит_ОбъектыСистемы
	|ГДЕ
	|	НЕ бит_ОбъектыСистемы.ЭтоГруппа
	|	И бит_ОбъектыСистемы.Отключено = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.Отключено = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийОбъект, Ложь, Ложь);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьДанныеДокументовМСФО() Экспорт
	
	Если НЕ бит_ОбщегоНазначения.ЕстьОбъектыМСФО() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.бит_му_ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|ГДЕ
	|	ПринятиеКУчетуОС.СпособПолученияСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_СпособыПолученияНоминальнойСтавки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзменениеПараметровУчетаОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.бит_му_ИзменениеПараметровУчетаОС КАК ИзменениеПараметровУчетаОС
	|ГДЕ
	|	ИзменениеПараметровУчетаОС.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыОперацийИзменениеПараметровУчетаОС.ПустаяСсылка)";
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	// обработка документов "Принятие к учету ОС (МСФО)".
	ВыборкаПринятиеКУчетуОС = РезультатПакета[0].Выбрать();
	Пока ВыборкаПринятиеКУчетуОС.Следующий() Цикл
		ДокументСсылка = ВыборкаПринятиеКУчетуОС.Ссылка;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.Расчет;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
	// обработка документов "Изменение параметров учета ОС (МСФО)".
	ВыборкаИзменениеПараметровУчетаОС = РезультатПакета[1].Выбрать();
	Пока ВыборкаИзменениеПараметровУчетаОС.Следующий() Цикл
		ДокументСсылка = ВыборкаИзменениеПараметровУчетаОС.Ссылка;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.ВидОперации = Перечисления.бит_му_ВидыОперацийИзменениеПараметровУчетаОС.ИзменениеПараметровУчетаОС;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Запускается при обновлении конфигурации БД с целью удаления строковых представлений типов данных,
// отсутвующих в тек. конфигурации.
//
Процедура ИсправитьХранимыеТипыСтруктуруКонструктораПравилТрансляции() Экспорт

	// ++ NB Разобраться со справочником.
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_СтруктураКонструктораПравилТрансляции.КолонкиПравилТрансляции КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСсылка    = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаСсылка.Следующий() Цикл

		Объект     = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаТаблицы Из Объект.КолонкиПравилТрансляции Цикл
		
			КУдалению      = Новый Массив;
			Стр 		   = СтрокаТаблицы.ТипыЗначенийСтр;
			КоличествоРазделителей = СтрЧислоВхождений(Стр,"/");
			Для й = 1 По КоличествоРазделителей+1 Цикл
				
				ПозицияРазделителя = Найти(Стр,"/");
				Если ПозицияРазделителя >0 Тогда
					ТекущееИмя = Лев(Стр,ПозицияРазделителя-1);
					Стр = Сред(Стр,ПозицияРазделителя+1);
				Иначе
					ТекущееИмя = СокрЛП(Стр);
				КонецЕсли; 
				
				Если Найти(ТекущееИмя,"Строка(")>0 Тогда
					
					Продолжить;
					
				КонецЕсли; 
				
				Если Найти(ТекущееИмя, "Число(")>0 Тогда
					
					Продолжить;
					
				КонецЕсли; 
				
				Если Найти(ТекущееИмя, "Дата(")>0 Тогда
					
					Продолжить;
					
				КонецЕсли; 

				Попытка
					НовыйТип = Тип(ТекущееИмя); 
				Исключение
				    КУдалению.Добавить(ТекущееИмя + "/");
				КонецПопытки; 
			КонецЦикла;
			
		    Для каждого Запись Из КУдалению Цикл
			
				СтрокаТаблицы.ТипыЗначенийСтр = СтрЗаменить(СтрокаТаблицы.ТипыЗначенийСтр, Запись, "");
			
			КонецЦикла; 
		КонецЦикла;
		
		Если НЕ КУдалению.Количество() = 0 Тогда
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		КонецЕсли; 
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Процедура обновляет типы колонок в структуре конструктора правил трансляции.
// 
Процедура ПроверитьОбновитьСтруктурыКонструктораТрансляции() Экспорт
	
	// ++ NB Разобраться со справочником.
	флЕстьХотябыОдно = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурыКонструктора.Ссылка
	               |ИЗ
	               |	Справочник.бит_СтруктураКонструктораПравилТрансляции КАК СтруктурыКонструктора
	               |ГДЕ
	               |	НЕ СтруктурыКонструктора.ЭтоГруппа";
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		 ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		 флЕстьИзменения = ТекОбъект.ОбновитьТипыКолонок();
		 
		 Если флЕстьИзменения Тогда
			 
			ТекОбъект.ОбменДанными.Загрузка = Истина; 
		 	бит_ОбщегоНазначения.ЗаписатьСправочник(ТекОбъект, "", "Ошибки", Истина);
			
			флЕстьХотябыОдно = Истина;
			
		 КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

// Процедура записывает настройку "Показывать дополнительную информацию (БИТ)"
// для предопределенной группы пользователей "ВсеПользователи".
// 
// 
Процедура ЗаписатьНастройкуПоказыватьДополнительнуюИнформациюБит() Экспорт

	ВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	Настройка		= ПланыВидовХарактеристик.бит_НастройкиПользователей.ПоказыватьДополнительнуюИнформациюБит;
	
	НаборЗаписей = РегистрыСведений.бит_НастройкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Настройка.Установить(Настройка);
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Запись.ЗначениеНастройки = Истина;
		
	КонецЦикла; 
	
	ТабВрем = НаборЗаписей.Выгрузить();
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("Пользователь", ВсеПользователи);
	
	МассивСтрок = ТабВрем.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
	
		Запись = НаборЗаписей.Добавить();
		Запись.Пользователь 	 = ВсеПользователи;
		Запись.Настройка 		 = Настройка;
		Запись.ЗначениеНастройки = Истина;
	
	КонецЕсли; 
	
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура СвойстваУстановитьЗначениеПризнакаИспользуется() Экспорт

	Элементы = Новый Массив(); 
	Элементы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_бит_СтатьиОборотов);
	Элементы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_бит_ПроектДоговора);
	Элементы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Подразделения);
	Элементы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Проекты);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Элементы", Элементы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитовИСведений.Используется
	|	И НаборыДополнительныхРеквизитовИСведений.Ссылка В(&Элементы)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НаборОбъект.Используется = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборОбъект);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПриДобавленииПолный() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Данные = Новый Массив(); 
	// Константы
	Данные.Добавить(Метаданные.Константы.бит_ВалютаУправленческогоУчета);
	Данные.Добавить(Метаданные.Константы.бит_ИспользоватьЗаполнениеАналитикПоНазначениюПлатежа);
	Данные.Добавить(Метаданные.Константы.бит_ИспользоватьПодсистемуВалютныйКонтроль);
	Данные.Добавить(Метаданные.Константы.бит_мто_ИспользоватьПодсистемуПланированияМТО);
	// Справочники
	Данные.Добавить(Метаданные.Справочники.бит_Бюджеты);
	Данные.Добавить(Метаданные.Справочники.бит_вго_НастройкиАктовСверкиВГО);
	Данные.Добавить(Метаданные.Справочники.бит_вго_ОперацииВГО);
	Данные.Добавить(Метаданные.Справочники.бит_вго_ПричиныРасхождений);
	Данные.Добавить(Метаданные.Справочники.бит_ВидыВалютныхОпераций);
	Данные.Добавить(Метаданные.Справочники.бит_ВидыЗакрытияСчетов);
	Данные.Добавить(Метаданные.Справочники.бит_ВидыПроформ);
	Данные.Добавить(Метаданные.Справочники.бит_ВидыРеквизитовДвижений);
	Данные.Добавить(Метаданные.Справочники.бит_ВидыРешенийСогласования);
	Данные.Добавить(Метаданные.Справочники.бит_ВидыСобытийДоговоров);
	Данные.Добавить(Метаданные.Справочники.бит_ВидыСоответствийАналитик);
	Данные.Добавить(Метаданные.Справочники.бит_ВидыСтатейОборотов);
	Данные.Добавить(Метаданные.Справочники.бит_Визы);
	Данные.Добавить(Метаданные.Справочники.бит_ГруппыВиз);
	Данные.Добавить(Метаданные.Справочники.бит_ГруппыОбъектовСистемы);
	Данные.Добавить(Метаданные.Справочники.бит_ГруппыСтруктурныхПодразделений);
	Данные.Добавить(Метаданные.Справочники.бит_ДополнительныеЗначенияАналитик);
	Данные.Добавить(Метаданные.Справочники.бит_Запросы);
	Данные.Добавить(Метаданные.Справочники.бит_ИсточникиДанных);
	Данные.Добавить(Метаданные.Справочники.бит_КомплектыДвижений);
	Данные.Добавить(Метаданные.Справочники.бит_мпд_ВидыИнформационныхБаз);
	Данные.Добавить(Метаданные.Справочники.бит_мпд_НастройкиВнешнихПодключений);
	Данные.Добавить(Метаданные.Справочники.бит_мпд_НастройкиПрезентацийОтчетности);
	Данные.Добавить(Метаданные.Справочники.бит_мпд_НастройкиПуловПодключений);
	Данные.Добавить(Метаданные.Справочники.бит_мпд_ПравилаПоискаДанных);
	Данные.Добавить(Метаданные.Справочники.бит_мпд_ТаблицыПроизвольныхОтчетов);
	Данные.Добавить(Метаданные.Справочники.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов);
	Данные.Добавить(Метаданные.Справочники.бит_мто_Потребности);
	Данные.Добавить(Метаданные.Справочники.бит_му_ВидыАктивовОбязательств);
	Данные.Добавить(Метаданные.Справочники.бит_му_ВидыДополнительныхСтавок);
	Данные.Добавить(Метаданные.Справочники.бит_му_ВидыЗатрат);
	Данные.Добавить(Метаданные.Справочники.бит_му_ВидыКонсолидационныхПоправок);
	Данные.Добавить(Метаданные.Справочники.бит_му_ВидыРБП);
	Данные.Добавить(Метаданные.Справочники.бит_му_КатегорииФинансовыхАктивовМСФО);
	Данные.Добавить(Метаданные.Справочники.бит_му_КлассыНМА);
	Данные.Добавить(Метаданные.Справочники.бит_му_КлассыОсновныхСредств);
	Данные.Добавить(Метаданные.Справочники.бит_му_НастройкиРазнесенияСальдо);
	Данные.Добавить(Метаданные.Справочники.бит_му_НастройкиЭлиминации);
	Данные.Добавить(Метаданные.Справочники.бит_му_ПериметрыКонсолидации);
	Данные.Добавить(Метаданные.Справочники.бит_му_ПричиныОбесцененияВНА);
	Данные.Добавить(Метаданные.Справочники.бит_му_РыночныеСтавкиКредитыЗаймы);
	Данные.Добавить(Метаданные.Справочники.бит_му_СоставИнвесторов);
	Данные.Добавить(Метаданные.Справочники.бит_му_СпособыОтраженияРасходовПоАмортизации);
	Данные.Добавить(Метаданные.Справочники.бит_НаправленияДоговоров);
	Данные.Добавить(Метаданные.Справочники.бит_НастройкиЗагрузкиИзExcel);
	Данные.Добавить(Метаданные.Справочники.бит_НастройкиЗакрытия);
	Данные.Добавить(Метаданные.Справочники.бит_НастройкиОтчетов);
	Данные.Добавить(Метаданные.Справочники.бит_НастройкиПроизвольныхОтчетов);
	Данные.Добавить(Метаданные.Справочники.бит_НастройкиПротоколовРасхожденийБюджета);
	Данные.Добавить(Метаданные.Справочники.бит_НастройкиРаспределенияБюджета);
	Данные.Добавить(Метаданные.Справочники.бит_НастройкиФормВводаБюджета);
	Данные.Добавить(Метаданные.Справочники.бит_ОбластиДоступа);
	Данные.Добавить(Метаданные.Справочники.бит_ОбъектыСистемы);
	Данные.Добавить(Метаданные.Справочники.бит_ПаспортаСделок);
	Данные.Добавить(Метаданные.Справочники.бит_ПоказателиПроизвольныхОтчетов);
	Данные.Добавить(Метаданные.Справочники.бит_ПользовательскиеДействия);
	Данные.Добавить(Метаданные.Справочники.бит_ПользовательскиеУсловия);
	Данные.Добавить(Метаданные.Справочники.бит_ПользовательскиеФункции);
	Данные.Добавить(Метаданные.Справочники.бит_ПравилаЗаполненияПолейПриТрансляции);
	Данные.Добавить(Метаданные.Справочники.бит_ПравилаТрансляции);
	Данные.Добавить(Метаданные.Справочники.бит_ПричиныЗакрытия);
	Данные.Добавить(Метаданные.Справочники.бит_ПричиныЗакрытияДокументовПланированияПлатежа);
	Данные.Добавить(Метаданные.Справочники.бит_ПричиныРасхожденийБюджета);
	Данные.Добавить(Метаданные.Справочники.бит_ПрофилиРаспределенияПоПериодам);
	Данные.Добавить(Метаданные.Справочники.бит_РолиИсполнителей);
	Данные.Добавить(Метаданные.Справочники.бит_СоставляющиеПлатежейПоФинДоговорам);
	Данные.Добавить(Метаданные.Справочники.бит_СпособыКомпоновкиИсточниковДанных);
	Данные.Добавить(Метаданные.Справочники.бит_СпособыРасчетовГрафиковПлатежейПоФинДоговорам);
	Данные.Добавить(Метаданные.Справочники.бит_СтатусыОбъектов);
	Данные.Добавить(Метаданные.Справочники.бит_СтатьиБюджета);
	Данные.Добавить(Метаданные.Справочники.бит_СтатьиОборотов);
	Данные.Добавить(Метаданные.Справочники.бит_СтруктураКонструктораДвижений);
	Данные.Добавить(Метаданные.Справочники.бит_СтруктураКонструктораПравилТрансляции);
	Данные.Добавить(Метаданные.Справочники.бит_СчетаБюджета);
	Данные.Добавить(Метаданные.Справочники.бит_ТипыДоговоров);
	Данные.Добавить(Метаданные.Справочники.бит_ТипыПлатежей);
	Данные.Добавить(Метаданные.Справочники.бит_ТипыПроводок);
	Данные.Добавить(Метаданные.Справочники.бит_уп_Алгоритмы);
	Данные.Добавить(Метаданные.Справочники.бит_уп_ТочкиАлгоритмов);
	Данные.Добавить(Метаданные.Справочники.бит_фн_НастройкиДоставкиОповещений);
	Данные.Добавить(Метаданные.Справочники.бит_фн_ШаблоныСообщений);
	Данные.Добавить(Метаданные.Справочники.бит_ШаблоныДвижений);
	Данные.Добавить(Метаданные.Справочники.бит_ЭкземплярыОтчетов);
	Данные.Добавить(Метаданные.Справочники.бит_ЭлементыДанных);
	Данные.Добавить(Метаданные.Справочники.бит_Языки);
	// ПланыВидовХарактеристик
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_вго_ВидыНастроекСверкиВГО);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ВидыОбъектовАдресацииЗадач);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ВидыПроизвольныхПараметров);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ВидыСубконтоБюджетирования);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_1);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_3);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_4);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_5);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_НастройкиПользователей);
	Данные.Добавить(Метаданные.ПланыВидовХарактеристик.бит_НастройкиПрограммы);
	// ПланыСчетов
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Бюджетирование);
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Дополнительный_1);
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Дополнительный_2);
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Дополнительный_3);
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Дополнительный_4);
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Дополнительный_5);
	// РегистрыСведений
	Данные.Добавить(Метаданные.РегистрыСведений.бит_ВалютныеНеденежныеСтатьи);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_вго_ЗакрытиеРедактированияСверкиВГО);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_вго_НастройкиПроведенияСверкиВГО);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_вго_СоответствиеОперацийВГО);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_ДанныеПроизвольныхОтчетов);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_ЗначенияПараметровФинансовыхДоговоров);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_ЗначенияРеквизитовШаблонов);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_ИсполнителиЗадач);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_ИспользованиеШаблоновДвижений);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_ИсторияРедактированияРеквизитов);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_КурсыВалютОтчетности);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_КурсыСценариевПланирования);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_МаскиКодов);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_мпд_НазначениеПравилПоискаДанных);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_ГруппыВНА_КлассыВНА);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_ДополнительныеСтавки);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_НазначенияНастроекРазнесенияСальдо);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_НастройкиРасчетаОтложенныхНалогов);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_НоминальныеСтавки);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_ПараметрыКлассовВНА);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_ПараметрыРасчетаРезервовМПЗ);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_ПериодыПросрочкиДебиторскойЗадолженности);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_РасчетыОтложенныхНалогов);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_РыночныеСтавкиКредитыЗаймы);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_СоставИнвесторов);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_СоставПериметровКонсолидации);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_СтатьиРегл_ВидыЗатрат);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_СчетаИсключенияПересчетаВВалютуПредставления);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_СчетаРасчетовСКонтрагентами);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_СчетаУчетаНоменклатуры);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_му_УчетнаяПолитика);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_НазначениеАлгоритмовЗакрытия);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_НазначениеВидовРешенийСогласования);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_НазначениеВнешнихОбработок);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_НазначениеДополнительныхАналитик);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_НазначениеДополнительныхИзмерений);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_НазначениеПравилЗаполненияПриТрансляции);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_НастройкаКонтроляПоСценариям);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_НастройкиДоступностиЭлементовУправления);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_НастройкиЗаполненияАналитикПоНазначениюПлатежа);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_НачалоОткрытогоПериода);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_ПринадлежностьСтатейОборотов);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_СобственныеКонтрагенты);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_СоответствиеСтатейПоступленияИРасходованияДС);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_СостоянияПаспортовСделок);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_СтатьиОборотов_НоменклатурныеГруппы);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_СтатьиОборотов_СтатьиРегл);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_уп_НазначениеАлгоритмов);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_ЦФО_Организаций);
	Данные.Добавить(Метаданные.РегистрыСведений.бит_ЦФО_Подразделения);
	// ПланыСчетов
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Бюджетирование);
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Дополнительный_1);
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Дополнительный_2);
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Дополнительный_3);
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Дополнительный_4);
	Данные.Добавить(Метаданные.ПланыСчетов.бит_Дополнительный_5);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Полный.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.Полный КАК Полный
	|ГДЕ
	|	НЕ Полный.ЭтотУзел";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для каждого Элемент Из Данные Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка, Элемент);		
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик обновления версии 3.1.43.
// См. документацию БСП - Отложенное обновление больших архивов данных.
// 
Процедура СписаниеСРасчетногоСчетаСформироватьРаспределениеПлатежа(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// 1с-ижтиси Поцелуйко М. (
	// оптимизация обработчиков обновления
	//"ВЫБРАТЬ ПЕРВЫЕ 1000
	"ВЫБРАТЬ ПЕРВЫЕ 10000
	// 1с-ижтиси Поцелуйко М. )
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаспределениеБюджета.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.СписаниеСРасчетногоСчета.бит_РаспределениеБюджета КАК РаспределениеБюджета
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РаспределениеБюджета.Ссылка) КАК РаспределениеБюджета
	|		ПО Реквизиты.Ссылка = РаспределениеБюджета.Ссылка
	|ГДЕ
	|	РаспределениеБюджета.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Выборка = РезультатЗапроса.Выбрать();
	
	// 1с-ижтиси Поцелуйко М. (
	// оптимизация обработчиков обновления
	КоличествоКОбработке = Выборка.Количество();
	КоличествоПотоков = 8;
	КоличествоНаПоток = Окр(КоличествоКОбработке/КоличествоПотоков, 0);
	
	Если КоличествоКОбработке < 100 Тогда 
		
		СформироватьРаспределениеПлатежаОтложенно_Общая(Выборка);
		
	Иначе
		
		мДанные = Новый Массив;
		мФоновыеЗадания = Новый Массив;
		ъДанные = 0;
		
		Пока Выборка.Следующий() Цикл
			
			Если ъДанные<>0 И ъДанные%КоличествоНаПоток = 0 Тогда 
				мПараметрыФЗ = Новый Массив;
				мПараметрыФЗ.Добавить(мДанные);
				ФоновоеЗадание = ФоновыеЗадания.Выполнить("бит_ОбновлениеИнформационнойБазыБФ.СформироватьРаспределениеПлатежаОтложенно_Общая", мПараметрыФЗ);
				мФоновыеЗадания.Добавить(ФоновоеЗадание);
				мДанные = Новый Массив;
			КонецЕсли;
			
			СтруктураДанных = Новый Структура("Ссылка", Выборка.Ссылка);
			мДанные.Добавить(СтруктураДанных);
			ъДанные = ъДанные + 1;
			
		КонецЦикла;
		
		Если мДанные.Количество() <> 0 Тогда 
			мПараметрыФЗ = Новый Массив;
			мПараметрыФЗ.Добавить(мДанные);
			ФоновоеЗадание = ФоновыеЗадания.Выполнить("бит_ОбновлениеИнформационнойБазыБФ.СформироватьРаспределениеПлатежаОтложенно_Общая", мПараметрыФЗ);
			мФоновыеЗадания.Добавить(ФоновоеЗадание);
		КонецЕсли;
		
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(мФоновыеЗадания);
		Исключение
		КонецПопытки;
	
	КонецЕсли;
	//Пока Выборка.Следующий() Цикл
	//	Попытка
	//		
	//		СформироватьРаспределениеПлатежаОтложенно(Выборка);
	//		ОбъектовОбработано = ОбъектовОбработано + 1;
	//		
	//	Исключение
	//		// Если не удалось обработать какой-либо документ, повторяем попытку снова.
	//		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
	//		
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Не удалось обработать документ: %1 по причине:
	//				|%2'"),
	//				Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
	//			УровеньЖурналаРегистрации.Предупреждение,
	//			Метаданные.Документы.СписаниеСРасчетногоСчета, Выборка.Ссылка, ТекстСообщения);
	//	КонецПопытки;
	//	
	//КонецЦикла;
	//
	//Если ОбъектовОбработано = 0 Тогда
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = 'Процедуре СформироватьРаспределениеПлатежаОтложенно
	//			|не удалось обработать некоторые документы Списание с расчетного счета (пропущены): %1'"),
	//			ПроблемныхОбъектов);
	//	ВызватьИсключение ТекстСообщения;
	//Иначе
	//	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
	//		УровеньЖурналаРегистрации.Информация,
	//		Метаданные.Документы.СписаниеСРасчетногоСчета,,
	//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Процедура СформироватьРаспределениеПлатежаОтложенно
	//				|обработала очередную порцию документов Списание с расчетного счета: %1'"), ОбъектовОбработано));
	//КонецЕсли;
	// 1с-ижтиси Поцелуйко М. )
	
КонецПроцедуры

// Обработчик обновления версии 3.1.43.
// См. документацию БСП - Отложенное обновление больших архивов данных.
// 
Процедура ПоступлениеНаРасчетныйСчетСформироватьРаспределениеПлатежа(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// 1с-ижтиси Поцелуйко М. (
	// оптимизация обработчиков обновления
	//"ВЫБРАТЬ ПЕРВЫЕ 1000
	"ВЫБРАТЬ ПЕРВЫЕ 10000
	// 1с-ижтиси Поцелуйко М. )
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаспределениеБюджета.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ПоступлениеНаРасчетныйСчет.бит_РаспределениеБюджета КАК РаспределениеБюджета
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РаспределениеБюджета.Ссылка) КАК РаспределениеБюджета
	|		ПО Реквизиты.Ссылка = РаспределениеБюджета.Ссылка
	|ГДЕ
	|	РаспределениеБюджета.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Выборка = РезультатЗапроса.Выбрать();
	// 1с-ижтиси Поцелуйко М. (
	// оптимизация обработчиков обновления
	КоличествоКОбработке = Выборка.Количество();
	КоличествоПотоков = 8;
	КоличествоНаПоток = Окр(КоличествоКОбработке/КоличествоПотоков, 0);
	
	Если КоличествоКОбработке < 100 Тогда 
		
		СформироватьРаспределениеПлатежаОтложенно_Общая(Выборка);
		
	Иначе
		
		мДанные = Новый Массив;
		мФоновыеЗадания = Новый Массив;
		ъДанные = 0;
		
		Пока Выборка.Следующий() Цикл
			
			Если ъДанные<>0 И ъДанные%КоличествоНаПоток = 0 Тогда 
				мПараметрыФЗ = Новый Массив;
				мПараметрыФЗ.Добавить(мДанные);
				ФоновоеЗадание = ФоновыеЗадания.Выполнить("бит_ОбновлениеИнформационнойБазыБФ.СформироватьРаспределениеПлатежаОтложенно_Общая", мПараметрыФЗ);
				мФоновыеЗадания.Добавить(ФоновоеЗадание);
				мДанные = Новый Массив;
			КонецЕсли;
			
			СтруктураДанных = Новый Структура("Ссылка", Выборка.Ссылка);
			мДанные.Добавить(СтруктураДанных);
			ъДанные = ъДанные + 1;
			
		КонецЦикла;
		
		Если мДанные.Количество() <> 0 Тогда 
			мПараметрыФЗ = Новый Массив;
			мПараметрыФЗ.Добавить(мДанные);
			ФоновоеЗадание = ФоновыеЗадания.Выполнить("бит_ОбновлениеИнформационнойБазыБФ.СформироватьРаспределениеПлатежаОтложенно_Общая", мПараметрыФЗ);
			мФоновыеЗадания.Добавить(ФоновоеЗадание);
		КонецЕсли;
		
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(мФоновыеЗадания);
		Исключение
		КонецПопытки;
	
	КонецЕсли;
	//Пока Выборка.Следующий() Цикл
	//	Попытка
	//		
	//		СформироватьРаспределениеПлатежаОтложенно(Выборка);
	//		ОбъектовОбработано = ОбъектовОбработано + 1;
	//		
	//	Исключение
	//		// Если не удалось обработать какой-либо документ, повторяем попытку снова.
	//		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
	//		
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Не удалось обработать документ: %1 по причине:
	//				|%2'"),
	//				Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
	//			УровеньЖурналаРегистрации.Предупреждение,
	//			Метаданные.Документы.ПоступлениеНаРасчетныйСчет, Выборка.Ссылка, ТекстСообщения);
	//	КонецПопытки;
	//	
	//КонецЦикла;
	//
	//Если ОбъектовОбработано = 0 Тогда
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = 'Процедуре СформироватьРаспределениеПлатежаОтложенно
	//			|не удалось обработать некоторые документы Поступление на расчетный счет (пропущены): %1'"),
	//			ПроблемныхОбъектов);
	//	ВызватьИсключение ТекстСообщения;
	//Иначе
	//	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
	//		УровеньЖурналаРегистрации.Информация,
	//		Метаданные.Документы.СписаниеСРасчетногоСчета,,
	//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Процедура СформироватьРаспределениеПлатежаОтложенно
	//				|обработала очередную порцию документов Поступление на расчетный счет: %1'"), ОбъектовОбработано));
	//КонецЕсли;
	// 1с-ижтиси Поцелуйко М. )
	
КонецПроцедуры

// Обработчик обновления версии 3.1.43.
// См. документацию БСП - Отложенное обновление больших архивов данных.
// 
Процедура ПриходныйКассовыйОрдерСформироватьРаспределениеПлатежа(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// 1с-ижтиси Поцелуйко М. (
	// оптимизация обработчиков обновления
	//"ВЫБРАТЬ ПЕРВЫЕ 1000
	"ВЫБРАТЬ ПЕРВЫЕ 10000
	// 1с-ижтиси Поцелуйко М. )
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаспределениеБюджета.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ПриходныйКассовыйОрдер.бит_РаспределениеБюджета КАК РаспределениеБюджета
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РаспределениеБюджета.Ссылка) КАК РаспределениеБюджета
	|		ПО Реквизиты.Ссылка = РаспределениеБюджета.Ссылка
	|ГДЕ
	|	РаспределениеБюджета.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Выборка = РезультатЗапроса.Выбрать();
	// 1с-ижтиси Поцелуйко М. (
	// оптимизация обработчиков обновления
	КоличествоКОбработке = Выборка.Количество();
	КоличествоПотоков = 8;
	КоличествоНаПоток = Окр(КоличествоКОбработке/КоличествоПотоков, 0);
	
	Если КоличествоКОбработке < 100 Тогда 
		
		СформироватьРаспределениеПлатежаОтложенно_Общая(Выборка);
		
	Иначе
		
		мДанные = Новый Массив;
		мФоновыеЗадания = Новый Массив;
		ъДанные = 0;
		
		Пока Выборка.Следующий() Цикл
			
			Если ъДанные<>0 И ъДанные%КоличествоНаПоток = 0 Тогда 
				мПараметрыФЗ = Новый Массив;
				мПараметрыФЗ.Добавить(мДанные);
				ФоновоеЗадание = ФоновыеЗадания.Выполнить("бит_ОбновлениеИнформационнойБазыБФ.СформироватьРаспределениеПлатежаОтложенно_Общая", мПараметрыФЗ);
				мФоновыеЗадания.Добавить(ФоновоеЗадание);
				мДанные = Новый Массив;
			КонецЕсли;
			
			СтруктураДанных = Новый Структура("Ссылка", Выборка.Ссылка);
			мДанные.Добавить(СтруктураДанных);
			ъДанные = ъДанные + 1;
			
		КонецЦикла;
		
		Если мДанные.Количество() <> 0 Тогда 
			мПараметрыФЗ = Новый Массив;
			мПараметрыФЗ.Добавить(мДанные);
			ФоновоеЗадание = ФоновыеЗадания.Выполнить("бит_ОбновлениеИнформационнойБазыБФ.СформироватьРаспределениеПлатежаОтложенно_Общая", мПараметрыФЗ);
			мФоновыеЗадания.Добавить(ФоновоеЗадание);
		КонецЕсли;
		
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(мФоновыеЗадания);
		Исключение
		КонецПопытки;
	
	КонецЕсли;
	//Пока Выборка.Следующий() Цикл
	//	Попытка
	//		
	//		СформироватьРаспределениеПлатежаОтложенно(Выборка);
	//		ОбъектовОбработано = ОбъектовОбработано + 1;
	//		
	//	Исключение
	//		// Если не удалось обработать какой-либо документ, повторяем попытку снова.
	//		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
	//		
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Не удалось обработать документ: %1 по причине:
	//				|%2'"),
	//				Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
	//			УровеньЖурналаРегистрации.Предупреждение,
	//			Метаданные.Документы.ПриходныйКассовыйОрдер, Выборка.Ссылка, ТекстСообщения);
	//	КонецПопытки;
	//	
	//КонецЦикла;
	//
	//Если ОбъектовОбработано = 0 Тогда
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = 'Процедуре СформироватьРаспределениеПлатежаОтложенно
	//			|не удалось обработать некоторые документы Поступление наличных (пропущены): %1'"),
	//			ПроблемныхОбъектов);
	//	ВызватьИсключение ТекстСообщения;
	//Иначе
	//	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
	//		УровеньЖурналаРегистрации.Информация,
	//		Метаданные.Документы.СписаниеСРасчетногоСчета,,
	//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Процедура СформироватьРаспределениеПлатежаОтложенно
	//				|обработала очередную порцию документов Поступление наличных: %1'"), ОбъектовОбработано));
	//КонецЕсли;
	// 1с-ижтиси Поцелуйко М. )
	
КонецПроцедуры

// Обработчик обновления версии 3.1.43.
// См. документацию БСП - Отложенное обновление больших архивов данных.
// 
Процедура РасходныйКассовыйОрдерСформироватьРаспределениеПлатежа(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// 1с-ижтиси Поцелуйко М. (
	// оптимизация обработчиков обновления
	//"ВЫБРАТЬ ПЕРВЫЕ 1000
	"ВЫБРАТЬ ПЕРВЫЕ 10000
	// 1с-ижтиси Поцелуйко М. )
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаспределениеБюджета.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.РасходныйКассовыйОрдер.бит_РаспределениеБюджета КАК РаспределениеБюджета
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РаспределениеБюджета.Ссылка) КАК РаспределениеБюджета
	|		ПО Реквизиты.Ссылка = РаспределениеБюджета.Ссылка
	|ГДЕ
	|	РаспределениеБюджета.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Выборка = РезультатЗапроса.Выбрать();
	// 1с-ижтиси Поцелуйко М. (
	// оптимизация обработчиков обновления
	КоличествоКОбработке = Выборка.Количество();
	КоличествоПотоков = 8;
	КоличествоНаПоток = Окр(КоличествоКОбработке/КоличествоПотоков, 0);
	
	Если КоличествоКОбработке < 100 Тогда 
		
		СформироватьРаспределениеПлатежаОтложенно_Общая(Выборка);
		
	Иначе
		
		мДанные = Новый Массив;
		мФоновыеЗадания = Новый Массив;
		ъДанные = 0;
		
		Пока Выборка.Следующий() Цикл
			
			Если ъДанные<>0 И ъДанные%КоличествоНаПоток = 0 Тогда 
				мПараметрыФЗ = Новый Массив;
				мПараметрыФЗ.Добавить(мДанные);
				ФоновоеЗадание = ФоновыеЗадания.Выполнить("бит_ОбновлениеИнформационнойБазыБФ.СформироватьРаспределениеПлатежаОтложенно_Общая", мПараметрыФЗ);
				мФоновыеЗадания.Добавить(ФоновоеЗадание);
				мДанные = Новый Массив;
			КонецЕсли;
			
			СтруктураДанных = Новый Структура("Ссылка", Выборка.Ссылка);
			мДанные.Добавить(СтруктураДанных);
			ъДанные = ъДанные + 1;
			
		КонецЦикла;
		
		Если мДанные.Количество() <> 0 Тогда 
			мПараметрыФЗ = Новый Массив;
			мПараметрыФЗ.Добавить(мДанные);
			ФоновоеЗадание = ФоновыеЗадания.Выполнить("бит_ОбновлениеИнформационнойБазыБФ.СформироватьРаспределениеПлатежаОтложенно_Общая", мПараметрыФЗ);
			мФоновыеЗадания.Добавить(ФоновоеЗадание);
		КонецЕсли;
		
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(мФоновыеЗадания);
		Исключение
		КонецПопытки;
	
	КонецЕсли;
	//Пока Выборка.Следующий() Цикл
	//	Попытка
	//		
	//		СформироватьРаспределениеПлатежаОтложенно(Выборка);
	//		ОбъектовОбработано = ОбъектовОбработано + 1;
	//		
	//	Исключение
	//		// Если не удалось обработать какой-либо документ, повторяем попытку снова.
	//		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
	//		
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Не удалось обработать документ: %1 по причине:
	//				|%2'"),
	//				Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
	//			УровеньЖурналаРегистрации.Предупреждение,
	//			Метаданные.Документы.РасходныйКассовыйОрдер, Выборка.Ссылка, ТекстСообщения);
	//	КонецПопытки;
	//	
	//КонецЦикла;
	//
	//Если ОбъектовОбработано = 0 Тогда
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = 'Процедуре СформироватьРаспределениеПлатежаОтложенно
	//			|не удалось обработать некоторые документы Выдача наличных (пропущены): %1'"),
	//			ПроблемныхОбъектов);
	//	ВызватьИсключение ТекстСообщения;
	//Иначе
	//	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
	//		УровеньЖурналаРегистрации.Информация,
	//		Метаданные.Документы.СписаниеСРасчетногоСчета,,
	//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Процедура СформироватьРаспределениеПлатежаОтложенно
	//				|обработала очередную порцию документов Выдача наличных: %1'"), ОбъектовОбработано));
	//КонецЕсли;
	// 1с-ижтиси Поцелуйко М. )
	
КонецПроцедуры

// Обработчик обновления версии 3.1.43.
// См. документация БСП - Блокировка необработанных данных в пользовательском интерфейсе.
//
Функция РаспределениеПлатежаСформированоПриПереходеНаНовуюВерсию(Параметры) Экспорт
	
	Ссылка 	  = Неопределено;
	ЭтоОбъект = Ложь;
	
	Если ТипЗнч(Параметры.Данные) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Данные.Свойство("Ссылка", Ссылка);
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Истина;		
		КонецЕсли; 
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Параметры.Данные)) Тогда
		Ссылка = Параметры.Данные;
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Истина;
		КонецЕсли; 
	Иначе
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Параметры.Данные));
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
			// Очевидно - это "ДокументОбъект.*";
			Ссылка 	  = Параметры.Данные.Ссылка;
			ЭтоОбъект = Истина;
			Если Параметры.Данные.ЭтоНовый() Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	ДокументыСРасшифровкой = бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ДокументыСРасшифровкой();
	Если ДокументыСРасшифровкой.Найти(ТипЗнч(Ссылка)) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если ЭтоОбъект И Параметры.Данные.ЭтоНовый() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РаспределениеБюджета.Ссылка КАК Ссылка
	|ИЗ
	|	#РаспределениеБюджета КАК РаспределениеБюджета
	|ГДЕ
	|	РаспределениеБюджета.Ссылка = &Ссылка";
	
	ЧтоЗаменить	  = "#РаспределениеБюджета";
	НаЧтоЗаменить = "Документ." + Ссылка.Метаданные().Имя + ".бит_РаспределениеБюджета";
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

// Обработчик обновления версии 3.1.44.5.
// 
Процедура ИсправитьДублиКлючейРасшифровкиПлатежа() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	РасшифровкаПлатежа.бит_КлючСтроки КАК бит_КлючСтроки,
	|	КОЛИЧЕСТВО(РасшифровкаПлатежа.бит_КлючСтроки) КАК Сумма
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Ссылка,
	|	РасшифровкаПлатежа.бит_КлючСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РасшифровкаПлатежа.бит_КлючСтроки) > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Ссылка,
	|	РасшифровкаПлатежа.бит_КлючСтроки,
	|	КОЛИЧЕСТВО(РасшифровкаПлатежа.бит_КлючСтроки)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Ссылка,
	|	РасшифровкаПлатежа.бит_КлючСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РасшифровкаПлатежа.бит_КлючСтроки) > 1";
	
	Результат = Запрос.Выполнить();
	Выгрузка = Результат.Выгрузить();
	
	Ссылки = Выгрузка.ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(Ссылки);
	
	ОтборСтрок = Новый Структура("бит_КлючСтроки");
	
	Для каждого Ссылка Из Ссылки Цикл
	
		ТекущийОбъект = Ссылка.ПолучитьОбъект();
		Ключи = Выгрузка.НайтиСтроки(Новый Структура("Ссылка", Ссылка));
		Для каждого Ключ Из Ключи Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Ключ);
			РезультатПоиска = ТекущийОбъект.РасшифровкаПлатежа.НайтиСтроки(ОтборСтрок);
			Для каждого СтрокаТаблицы Из РезультатПоиска Цикл
				СтрокаТаблицы.бит_КлючСтроки = Строка(Новый УникальныйИдентификатор());
			КонецЦикла;
			
			РезультатПоиска = ТекущийОбъект.бит_РаспределениеБюджета.НайтиСтроки(ОтборСтрок);
			Для каждого СтрокаТаблицы Из РезультатПоиска Цикл
				Индекс = ТекущийОбъект.бит_РаспределениеБюджета.Индекс(СтрокаТаблицы);
				ТекущийОбъект.бит_РаспределениеБюджета.Удалить(Индекс);
			КонецЦикла; 
		КонецЦикла;
		
		Отказ = Ложь;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
		Если ТекущийОбъект.Проведен Тогда
			
			бит_Казначейство.бит_ПередЗаписьюПлатежногоДокументаБП(ТекущийОбъект, Отказ, РежимЗаписиДокумента.Запись, 
				РежимПроведенияДокумента.Неоперативный);
			бит_Казначейство.бит_ОбработкаПроведенияПлатежногоДокумента(ТекущийОбъект, Отказ, 
				РежимПроведенияДокумента.Неоперативный, Ложь);
			
			Если ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
				бит_Казначейство.бит_ОбработкаПроведенияПоступлениеДСОбработкаПроведения(ТекущийОбъект, Отказ, 
					РежимПроведенияДокумента.Неоперативный, Ложь);
			Иначе	
				бит_Казначейство.бит_ОбработкаПроведенияРасходДСОбработкаПроведения(ТекущийОбъект, Отказ, 
					РежимПроведенияДокумента.Неоперативный, Ложь);
			КонецЕсли; 	
			
			Для каждого Проводки Из ТекущийОбъект.Движения Цикл
				Если Проводки.Записывать Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Проводки);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийОбъект);	
	КонецЦикла; 

КонецПроцедуры
 
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// 1с-ижтиси Поцелуйко М. (
// оптимизация обработчиков обновления
Процедура СформироватьРаспределениеПлатежаОтложенно_Общая(Данные) Экспорт 
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда 
		Для Каждого текДанные ИЗ Данные Цикл 
			СформироватьРаспределениеПлатежаОтложенно(текДанные);
		КонецЦикла;
	Иначе
		Пока Данные.Следующий() Цикл
			СформироватьРаспределениеПлатежаОтложенно(Данные);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
// 1с-ижтиси Поцелуйко М. )

Процедура СформироватьРаспределениеПлатежаОтложенно(ЭлементВыборки)

	РеквизитыТаблицы = Новый Структура; 
	РеквизитыТаблицы.Вставить("бит_УдалитьЦФО", "ЦФО");
	РеквизитыТаблицы.Вставить("бит_УдалитьСтатьяОборотов", "СтатьяОборотов");
	РеквизитыТаблицы.Вставить("бит_УдалитьПроект", "Проект");
	РеквизитыТаблицы.Вставить("бит_УдалитьНоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	РеквизитыТаблицы.Вставить("бит_УдалитьАналитика_1", "Аналитика_1");
	РеквизитыТаблицы.Вставить("бит_УдалитьАналитика_2", "Аналитика_2");
	РеквизитыТаблицы.Вставить("бит_УдалитьАналитика_3", "Аналитика_3");
	РеквизитыТаблицы.Вставить("бит_УдалитьАналитика_4", "Аналитика_4");
	РеквизитыТаблицы.Вставить("бит_УдалитьАналитика_5", "Аналитика_5");
	РеквизитыТаблицы.Вставить("бит_УдалитьАналитика_6", "Аналитика_6");
	РеквизитыТаблицы.Вставить("бит_УдалитьАналитика_7", "Аналитика_7");
	РеквизитыТаблицы.Вставить("СуммаПлатежа", "СуммаПлатежа");
	РеквизитыТаблицы.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
	РеквизитыТаблицы.Вставить("СуммаНДС", "СуммаНДС");
	
	Таблица = "";
	ИмяСтарогоРеквизита = "";
	
	Если ТипЗнч(ЭлементВыборки.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		
		Таблица = "Документ.ПоступлениеНаРасчетныйСчет";
		ИмяСтарогоРеквизита = "бит_УдалитьПланируемоеПоступление";
		
	ИначеЕсли ТипЗнч(ЭлементВыборки.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Таблица = "Документ.ПриходныйКассовыйОрдер";
		ИмяСтарогоРеквизита = "";
		
	ИначеЕсли ТипЗнч(ЭлементВыборки.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Таблица = "Документ.РасходныйКассовыйОрдер";
		ИмяСтарогоРеквизита = "бит_УдалитьПлатежнаяПозиция";
		
	ИначеЕсли ТипЗнч(ЭлементВыборки.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		Таблица = "Документ.СписаниеСРасчетногоСчета";
		ИмяСтарогоРеквизита = "бит_УдалитьПлатежнаяПозиция";
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Таблица);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементВыборки.Ссылка);
		Блокировка.Заблокировать();

		ДокументОбъект = ЭлементВыборки.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

		ЕстьРасшифровкаПлатежа = бит_ОбщегоНазначенияПереопределяемый.ЕстьРасшифровкаПлатежа(ДокументОбъект.Ссылка, 
							 		ДокументОбъект.ВидОперации);
							 
		РасшифровкаПлатежаНеПустая = ДокументОбъект.РасшифровкаПлатежа.Количество() <> 0;
		// В предыдущей реализации мы добавляли строки в "РасшифровкаПлатежа",
		// даже если вид операции такого не поддерживал.
		Если РасшифровкаПлатежаНеПустая Тогда
			Для каждого СтрокаТаблицы Из ДокументОбъект.РасшифровкаПлатежа Цикл
				
				Если ЕстьРасшифровкаПлатежа Тогда
					КлючСтроки = Новый УникальныйИдентификатор();
				Иначе						
					// Случай, когда мы добавляли строки.
					КлючСтроки = "";
				КонецЕсли; 
				
				СтрокаТаблицы.бит_КлючСтроки = КлючСтроки;
				ДокументПланирования = Неопределено;
				Если НЕ ПустаяСтрока(ИмяСтарогоРеквизита) Тогда
					ДокументПланирования = СтрокаТаблицы[ИмяСтарогоРеквизита];
				КонецЕсли;			
				
				НоваяСтрока = ДокументОбъект.бит_РаспределениеБюджета.Добавить();
				НоваяСтрока.бит_КлючСтроки = КлючСтроки;
				НоваяСтрока.ДокументПланирования = ДокументПланирования;
				
				Для каждого КлючЗначение Из РеквизитыТаблицы Цикл
					НоваяСтрока[КлючЗначение.Значение] = СтрокаТаблицы[КлючЗначение.Ключ];
				КонецЦикла;
			КонецЦикла; 
		Иначе
			
			НоваяСтрока = ДокументОбъект.бит_РаспределениеБюджета.Добавить();
			НоваяСтрока.СуммаПлатежа 		= ДокументОбъект.СуммаДокумента;
			НоваяСтрока.СуммаВзаиморасчетов = ДокументОбъект.СуммаДокумента;
		КонецЕсли; 
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры
 
Процедура ЗаполнитьНастройкиПрограммыПоУмолчанию()
	
	ДатаУстановки = Дата('19800101');
	Настройки = ПланыВидовХарактеристик.бит_НастройкиПрограммы;
	Менеджер  = РегистрыСведений.бит_НастройкиПрограммы;
	
	// Заполним настройки программы по умолчанию.
	Менеджер.УстановитьНастройку(Настройки.НеФормироватьДвиженияПоФактуАвтоматически, Ложь, ДатаУстановки);
	
	Если Не бит_ОбщегоНазначения.ЭтоУТ() Тогда
		Менеджер.УстановитьНастройку(Настройки.КонтролироватьОстаткиПоОбщейЗаявке	 , Истина, ДатаУстановки);
		Менеджер.УстановитьНастройку(Настройки.КонтролироватьЗаявкуПоБюджету	 	 , Ложь	 , ДатаУстановки);
		Менеджер.УстановитьНастройку(Настройки.ДопустимыйПроцентПревышенияСуммыЗаявки, 0	 , ДатаУстановки);
		Менеджер.УстановитьНастройку(Настройки.ЗапретитьПлатежиБезЗаявки			 , Ложь	 , ДатаУстановки); 
		Менеджер.УстановитьНастройку(Настройки.КонтролироватьКоличествоНоменклатурыПоЗаявкамНаЗакупку, 
						Перечисления.бит_мто_ВидыКонтроляПоЗаявкамНаЗакупку.Предупреждать, ДатаУстановки);
	КонецЕсли;
	// ++ БП 
	Менеджер.УстановитьНастройку(Настройки.ЗаполнятьНазначениеПлатежаВЗаявкеНаРасходованиеДС, Истина, ДатаУстановки);
	// -- БП 
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиПользователяПоУмолчанию()
	
	Если бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("Константы","ИспользоватьГруппыПользователей") Тогда
		// Отображение групп пользователей необходимо
		// , т.к. на группы пользователей осуществляются различные настройки подсистем БИТ.
		Константы.ИспользоватьГруппыПользователей.Установить(Истина);
	КонецЕсли; 
	
	// Получаем текущего пользователя.
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Заполним настройки пользователя по умолчанию.
	Если Метаданные.Обработки.Найти("бит_ПанельФункций") <> Неопределено Тогда
		бит_УправлениеПользователямиСервер.УстановитьЗначениеПоУмолчанию("ОткрыватьПриЗапускеПанельФункцийБИТ", Истина, ТекущийПользователь);
	КонецЕсли;	   
	
	Если бит_ОбщегоНазначения.ЭтоУУ() И Не бит_ОбщегоНазначения.ЭтоУТ()Тогда
		
		РегистрМСФО = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2);
		Если ЗначениеЗаполнено(РегистрМСФО) Тогда
			
			МенеджерЗаписи = РегистрыСведений.бит_НастройкиПользователей.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Настройка         = ПланыВидовХарактеристик.бит_НастройкиПользователей.ОсновнойРегистрБухгалтерииУУ;
			МенеджерЗаписи.Пользователь      = Справочники.ГруппыПользователей.ВсеПользователи;
			МенеджерЗаписи.ЗначениеНастройки = РегистрМСФО;
			МенеджерЗаписи.Записать();
			
		КонецЕсли; 
		
		МенеджерЗаписи = РегистрыСведений.бит_НастройкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Настройка         = ПланыВидовХарактеристик.бит_НастройкиПользователей.ОтражатьМСФО;
		МенеджерЗаписи.Пользователь      = Справочники.ГруппыПользователей.ВсеПользователи;
		МенеджерЗаписи.ЗначениеНастройки = Истина;
		МенеджерЗаписи.Записать();
		
		МенеджерЗаписи = РегистрыСведений.бит_НастройкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Настройка         = ПланыВидовХарактеристик.бит_НастройкиПользователей.ОтражатьРСБУ;
		МенеджерЗаписи.Пользователь      = Справочники.ГруппыПользователей.ВсеПользователи;
		МенеджерЗаписи.ЗначениеНастройки = Истина;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;

	// Отображение аргументов формул в форме ввода.
	Если бит_РаботаСМетаданными.ЕстьПредопределенныйЭлемент("ПланВидовХарактеристик.бит_НастройкиПользователей.ВыделятьАргументыФормулФормыВвода") Тогда
		
		МенеджерЗаписи = РегистрыСведений.бит_НастройкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Настройка         = ПланыВидовХарактеристик.бит_НастройкиПользователей.ВыделятьАргументыФормулФормыВвода;
		МенеджерЗаписи.Пользователь      = Справочники.ГруппыПользователей.ВсеПользователи;
		МенеджерЗаписи.ЗначениеНастройки = Истина;
		МенеджерЗаписи.Записать();
		
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьНастройкиПользователяПоУмолчанию()

Процедура ЗаполнитьСценарииБюджетирования()
			
	// Установим параметры в сценарии факт
	СпрОбъект = Справочники.СценарииПланирования.Факт.ПолучитьОбъект();
	СпрОбъект.Валюта                     = Константы.ВалютаРегламентированногоУчета.Получить();
	СпрОбъект.ПродолжительностьИнтервала = 12;
	СпрОбъект.бит_Периодичность          = Перечисления.бит_ПериодичностьПланирования.Месяц;
	СпрОбъект.ПериодичностьКонтроля      = СпрОбъект.бит_Периодичность;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект);
	
КонецПроцедуры 

Процедура УстановитьВидГруппамОбъектовДоступа()

	ВидыОбъектов = Новый Соответствие;
	ВидыОбъектов.Вставить(Справочники.бит_ОбъектыСистемы.Справочники            ,Перечисления.бит_ВидыОбъектовСистемы.Справочник);
	ВидыОбъектов.Вставить(Справочники.бит_ОбъектыСистемы.Документы              ,Перечисления.бит_ВидыОбъектовСистемы.Документ);
	ВидыОбъектов.Вставить(Справочники.бит_ОбъектыСистемы.Отчеты                 ,Перечисления.бит_ВидыОбъектовСистемы.Отчет);
	ВидыОбъектов.Вставить(Справочники.бит_ОбъектыСистемы.Обработки              ,Перечисления.бит_ВидыОбъектовСистемы.Обработка);
	ВидыОбъектов.Вставить(Справочники.бит_ОбъектыСистемы.ПланыСчетов            ,Перечисления.бит_ВидыОбъектовСистемы.ПланСчетов);
	ВидыОбъектов.Вставить(Справочники.бит_ОбъектыСистемы.ПланыВидовХарактеристик,Перечисления.бит_ВидыОбъектовСистемы.ПланВидовХарактеристик);
	ВидыОбъектов.Вставить(Справочники.бит_ОбъектыСистемы.РегистрыСведений       ,Перечисления.бит_ВидыОбъектовСистемы.РегистрСведений);
	ВидыОбъектов.Вставить(Справочники.бит_ОбъектыСистемы.РегистрыНакопления     ,Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления);
	ВидыОбъектов.Вставить(Справочники.бит_ОбъектыСистемы.РегистрыБухгалтерии    ,Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	
	Для каждого КлючИЗначение Из ВидыОбъектов Цикл
		ГруппаОбъектов = КлючИЗначение.Ключ;
		Если НЕ ЗначениеЗаполнено(ГруппаОбъектов.ВидОбъекта)  Тогда
			СпрОбъект = ГруппаОбъектов.ПолучитьОбъект();
			СпрОбъект.ВидОбъекта = КлючИЗначение.Значение;
			СпрОбъект.ОбменДанными.Загрузка = Истина;
			СпрОбъект.Записать();
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // УстановитьВидГруппамОбъектовДоступа()

Процедура ЗаполнитьСтатусыОбъектов()

	// Установим для статусов объекты
	
	// Заявка
	Заявка     = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_ЗаявкаНаРасходованиеСредств");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Заявка_Черновик  ,1,Заявка);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Заявка_Рабочая   ,2,Заявка);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Заявка_Утверждена,3,Заявка);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Заявка_Оплачена  ,4,Заявка);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Заявка_Закрыта   ,5,Заявка);
	
	// Реестр
	Реестр     = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_РеестрПлатежей");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Черновик ,1,Реестр);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Проверен ,2,Реестр);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден,3,Реестр);
	
	// Форма ввода бюджета
	ФормаВвода = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_ФормаВводаБюджета");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик ,1,ФормаВвода);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ФормаВвода_Проверен ,2,ФормаВвода);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ФормаВвода_Утвержден,3,ФормаВвода);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ФормаВвода_Рабочая  ,4,ФормаВвода);
    
    // Дополнительные условия по договору.
	ДопУсловияПоДоговору = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_ДополнительныеУсловияПоДоговору");
    НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Черновик , 1, ДопУсловияПоДоговору);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Рабочий  , 2, ДопУсловияПоДоговору);	
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Проверен , 3, ДопУсловияПоДоговору);	
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Утвержден, 4, ДопУсловияПоДоговору);
	
	// Актуализация бюджета
	АктуализацияБюджета  = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_АктуализацияБюджета");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Черновик , 1, АктуализацияБюджета);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Рабочая  , 2, АктуализацияБюджета);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Проверен , 3, АктуализацияБюджета);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Утвержден, 4, АктуализацияБюджета);
	
	// Корректировка бюджета
	КорректировкаБюджета = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_КорректировкаБюджета");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Черновик  , 1, КорректировкаБюджета);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Рабочая   , 2, КорректировкаБюджета);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Проверена , 3, КорректировкаБюджета);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Утверждена, 4, КорректировкаБюджета);
	
	// Прогноз платежа
	Прогноз    = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_ЗаявкаНаРасходованиеСредствОбщая");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Черновик  ,1,Прогноз);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Рабочая   ,2,Прогноз);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Утверждена,3,Прогноз);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Закрыта   ,4,Прогноз);
	
	// Операция (управленческий)
	ОперацияУпр = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_ОперацияУправленческий");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Операция_Черновик  ,1,ОперацияУпр);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Операция_Рабочая   ,2,ОперацияУпр);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Операция_Утверждена,3,ОперацияУпр);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Операция_Отклонена ,4,ОперацияУпр);
	
	БюджетнаяОперация = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_БюджетнаяОперация");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.БюджетнаяОперация_Черновик  , 1, БюджетнаяОперация);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.БюджетнаяОперация_Рабочая   , 2, БюджетнаяОперация);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.БюджетнаяОперация_Утверждена, 3, БюджетнаяОперация);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.БюджетнаяОперация_Проверена , 4, БюджетнаяОперация);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.БюджетнаяОперация_Отклонена , 5, БюджетнаяОперация);
	
	// ++ Учет договоров и затрат
	// Заявка на затраты
	ЗаявкаНаЗатраты  = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_ЗаявкаНаЗатраты");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Черновик  ,1, ЗаявкаНаЗатраты);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Рабочая   ,2, ЗаявкаНаЗатраты);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Утверждена,3, ЗаявкаНаЗатраты);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Выполнена ,4, ЗаявкаНаЗатраты);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Закрыта   ,5, ЗаявкаНаЗатраты);
	
	// Расходная позиция
	РасходнаяПозиция = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_РасходнаяПозиция");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Рабочая  ,1, РасходнаяПозиция);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Выполнена,2, РасходнаяПозиция);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Закрыта  ,3, РасходнаяПозиция);
	
	// Проект договора
	ПроектДоговора 	 = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_ПроектДоговора");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ПроектДоговора_Черновик ,1, ПроектДоговора);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ПроектДоговора_Рабочий  ,2, ПроектДоговора);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.ПроектДоговора_Утвержден,3, ПроектДоговора);
	// -- Учет договоров и затрат
	
	// Корректировка контрольных значений
	КорректировкаКонтрольныхЗначений  = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_КорректировкаКонтрольныхЗначений");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Черновик ,1, КорректировкаКонтрольныхЗначений);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Рабочий  ,2, КорректировкаКонтрольныхЗначений);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Утвержден,3, КорректировкаКонтрольныхЗначений);
	
	// Задача бит_уп_Задача
	ЗадачаБитУп  = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Задача.бит_уп_Задача");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Задача_Создана    ,1, ЗадачаБитУп);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Задача_Принята    ,2, ЗадачаБитУп);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Задача_Выполнена  ,3, ЗадачаБитУп);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Задача_Отменена   ,4, ЗадачаБитУп);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Задача_Просрочена ,5, ЗадачаБитУп);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Задача_Остановлена,6, ЗадачаБитУп);
	
	ПроцессБит  = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "БизнесПроцесс.бит_уп_Процесс");
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Процесс_Записан    ,1, ПроцессБит);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Процесс_Активный   ,2, ПроцессБит);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Процесс_Завершен   ,3, ПроцессБит);
	НазначитьОбъектСтатусу(Справочники.бит_СтатусыОбъектов.Процесс_Остановлен ,4, ПроцессБит);

	// Остальные объекты будут заполнены при выполнении обработчиков обновления.
	// Это нужно для перехода с БП20 на БП30
	// ++ Подсистема МДМ
	// НазначитьОбъектСтатусамМДМ();
	// -- Подсистема МДМ
	
	// ++ Подсистема МТО
	//НазначитьОбъектСтатусамПодсистемыМТО();
	// -- Подсистема МТО
	
	// ++ 
	// НазначитьОбъектСтатусамПротоколРасхожденийБюджета();
	// --
	
	// ++ Подсистема "Валютный контроль" 
	// НазначитьОбъектСтатусамПодсистемыВалютныйКонтроль()
	// -- Подсистема "Валютный контроль"
	

КонецПроцедуры // ЗаполнитьСправочникСтатусыОбъектов()

Процедура НазначитьОбъектСтатусу(Статус,Порядок,Объект)
	
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли; 	
	
	СпрОбъект = Статус.ПолучитьОбъект();
	СпрОбъект.Порядок 				= Порядок;
	СпрОбъект.Объект  				= Объект;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
	
КонецПроцедуры // НазначитьОбъектСтатусу()

Процедура ЗаполнитьОперацииВГО()

	Если Метаданные.Справочники.Найти("бит_вго_ОперацииВГО") = Неопределено Тогда
	     Возврат;	
	КонецЕсли; 
	
	МенеджерСправочника = Справочники["бит_вго_ОперацииВГО"];
	ТипОперацииОстатки  = Перечисления["бит_вго_ВидыОперацийВГО"].Остатки;
	
	СпрОбъект = МенеджерСправочника.НачальноеСальдо.ПолучитьОбъект();
	СпрОбъект.ВидОперации = ТипОперацииОстатки;
	СпрОбъект.ОбменДанными.Загрузка = Истина;
	СпрОбъект.Записать();
	
	СпрОбъект = МенеджерСправочника.КонечноеСальдо.ПолучитьОбъект();
	СпрОбъект.ВидОперации = ТипОперацииОстатки;
	СпрОбъект.ОбменДанными.Загрузка = Истина;
	СпрОбъект.Записать();
	
	СпрОбъект = МенеджерСправочника.ЭффектОтПересчета.ПолучитьОбъект();
	СпрОбъект.ВидОперации = ТипОперацииОстатки;
	СпрОбъект.ОбменДанными.Загрузка = Истина;
	СпрОбъект.Записать();

	РегистрыСведений.бит_вго_НастройкиПроведенияСверкиВГО.ДобавитьНастройкиВГОПоУмолчанию();
	
КонецПроцедуры

Процедура СоздатьИНазначитьВизы()

	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		Если Справочники.бит_Визы.КоличествоВиз() = 0 Тогда
			// Создадим и назначим визы
			бит_Визирование.СоздатьИНазначитьВизы(Истина, Ложь, Ложь);
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры

Процедура НазначитьДополнительныеАналитики()
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		МассивАналитик = Новый Массив;
		МассивАналитик.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ЦФО);
		МассивАналитик.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.СтатьяОборотов);
		МассивАналитик.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.Проект);
		
		НаборЗаписей = РегистрыСведений.бит_НазначениеДополнительныхАналитик.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Справочники.бит_ОбъектыСистемы.ПустаяСсылка());
		Для каждого Аналитика Из МассивАналитик Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Аналитика = Аналитика; 
		КонецЦикла;     	
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли; 	
	
КонецПроцедуры // НазначениеДополнительныхАналитик()

Процедура ОбновитьОбъектыУправленческогоУчета() 
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		бит_НазначениеСинонимовОбъектов.ЗаполнитьСинонимыОбъектовИзМакета();
	КонецЕсли;
	
КонецПроцедуры // ОбновитьОбъектыУправленческогоУчета()

Процедура ОбновлениеПрофилейГруппДоступаПервыйЗапуск()
	
	// ++ NB Убедиться в необходимости.
	// Обновление ПрофилейГруппДоступа
	Если бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("Справочники", "ПрофилиГруппДоступа") Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
			МодульУправлениеДоступомСлужебный.ОбновитьПараметрыОграниченияДоступа();
		КонецЕсли;
		Выполнить("Справочники.ПрофилиГруппДоступа.ОбновитьОписаниеПоставляемыхПрофилей();");
		Выполнить("Справочники.ПрофилиГруппДоступа.ОбновитьПоставляемыеПрофилиПоИзменениямКонфигурации();");
	
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ОбновитьДополнительныеОтчетыИОбработки()
	
	// ++ NB См. как 1С регистрирует "Путеводитель по демо-базе".
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		Возврат;
	КонецЕсли;
	
#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОбработок.Расширение КАК Расширение,
	|	ТаблицаОбработок.СтароеИмяФайла КАК СтароеИмяФайла,
	|	ТаблицаОбработок.ИмяМакета КАК ИмяМакета
	|ПОМЕСТИТЬ ТаблицаОбработок
	|ИЗ
	|	&ТаблицаОбработок КАК ТаблицаОбработок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбработок.Расширение КАК Расширение,
	|	ТаблицаОбработок.ИмяМакета КАК ИмяМакета,
	|	ЕСТЬNULL(НайденПоИмениОбъекта.Ссылка, НайденПоИмениФайла.Ссылка) КАК Ссылка,
	|	ЕСТЬNULL(НайденПоИмениОбъекта.Версия, НайденПоИмениФайла.Версия) КАК Версия
	|ИЗ
	|	ТаблицаОбработок КАК ТаблицаОбработок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК НайденПоИмениФайла
	|		ПО ТаблицаОбработок.СтароеИмяФайла = НайденПоИмениФайла.ИмяФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК НайденПоИмениОбъекта
	|		ПО ТаблицаОбработок.ИмяМакета = НайденПоИмениОбъекта.ИмяОбъекта";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаОбработок = Новый ТаблицаЗначений();
	ТаблицаОбработок.Колонки.Добавить("Расширение",     Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3, ДопустимаяДлина.Переменная)));
	ТаблицаОбработок.Колонки.Добавить("СтароеИмяФайла", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(260, ДопустимаяДлина.Переменная)));
	ТаблицаОбработок.Колонки.Добавить("ИмяМакета",      Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	// Текущее имя файла образовывается от имени макета и расширения.
	СтрокаТаблицы = ТаблицаОбработок.Добавить();
	СтрокаТаблицы.ИмяМакета      = "ШаблонПечатиПроектДоговораMSWord";
	СтрокаТаблицы.СтароеИмяФайла = "ШаблонПечатиПроектДоговораMSWord.epf";
	СтрокаТаблицы.Расширение     = "epf";
	
	Запрос.УстановитьПараметр("ТаблицаОбработок", ТаблицаОбработок);
	
	// Получаем текущего пользователя.
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанные    = ПолучитьОбщийМакет("бит_ШаблонПечатиПроектДоговораMSWord");
		Менеджер          = ?(Выборка.Расширение = "erf", ВнешниеОтчеты, ВнешниеОбработки);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИмяОбъекта = ПолучитьИмяВременногоФайла(Выборка.Расширение);	
		ДвоичныеДанные.Записать(ИмяОбъекта);
	    #Иначе
		Попытка
			Выполнить("ЗащитаЛожь = Новый ОписаниеЗащитыОтОпасныхДействий;
				|ЗащитаЛожь.ПредупреждатьОбОпасныхДействиях = Ложь;
				|				
				|АдресДанных       = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				|ИмяОбъекта        = Менеджер.Подключить(АдресДанных, , Истина, ЗащитаЛожь);");
		Исключение
			АдресДанных       = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			ИмяОбъекта        = Менеджер.Подключить(АдресДанных, , Истина);				
		КонецПопытки;
		#КонецЕсли
		ВнешнийОбъект     = Менеджер.Создать(ИмяОбъекта);
		ОбработкаСведения = ВнешнийОбъект.СведенияОВнешнейОбработке();
		
		Если НЕ бит_ОбщегоНазначенияКлиентСервер.ВерсияОбновленияСтарше(Выборка.Версия, ОбработкаСведения.Версия) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбработкаСведения.Наименование = Неопределено ИЛИ ОбработкаСведения.Информация = Неопределено Тогда
			ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
			Если ОбработкаСведения.Наименование = Неопределено Тогда
				ОбработкаСведения.Наименование = ВнешнийОбъектМетаданные.Представление();
			КонецЕсли;
			Если ОбработкаСведения.Информация = Неопределено Тогда
				ОбработкаСведения.Информация = ВнешнийОбъектМетаданные.Комментарий;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			СправочникОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СправочникОбъект, ОбработкаСведения, "Наименование, БезопасныйРежим, Версия, Информация");
		
		СправочникОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
		СправочникОбъект.Вид        = ДополнительныеОтчетыИОбработки.ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(
			ОбработкаСведения.Вид);
		
		СправочникОбъект.ИспользоватьДляФормыОбъекта = Истина;
		СправочникОбъект.ИспользоватьДляФормыСписка  = Истина;
		СправочникОбъект.Ответственный               = ТекущийПользователь;
		СправочникОбъект.ХранилищеОбработки          = Новый ХранилищеЗначения(ДвоичныеДанные);
		СправочникОбъект.ИмяОбъекта                  = Выборка.ИмяМакета;
		СправочникОбъект.ИмяФайла                    = Выборка.ИмяМакета + "." + Выборка.Расширение;
		
		СправочникОбъект.ИспользуетХранилищеВариантов = Ложь;
		Если СправочникОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
			Если Метаданные.ХранилищеВариантовОтчетов <> Неопределено
				И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов" Тогда
				СправочникОбъект.ИспользуетХранилищеВариантов = Истина;
			Иначе
				ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
				Если ВнешнийОбъектМетаданные.ХранилищеВариантов <> Неопределено
					И ВнешнийОбъектМетаданные.ХранилищеВариантов.Имя = "ХранилищеВариантовОтчетов" Тогда
					СправочникОбъект.ИспользуетХранилищеВариантов = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СправочникОбъект.Команды.Очистить();
		СправочникОбъект.Назначение.Очистить();
		СправочникОбъект.Разделы.Очистить();
		
		Для Каждого КомандаОписание Из ОбработкаСведения.Команды Цикл
			
			Попытка
				ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок." + КомандаОписание.Использование);
			Исключение
				ВариантЗапуска = Неопределено;
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(ВариантЗапуска) Тогда
				ТекстСообщения = НСтр("ru='Для команды ""%1%"" не определен способ запуска.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, КомандаОписание.Представление);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			КонецЕсли;
			
			Команда = СправочникОбъект.Команды.Добавить();
			ЗаполнитьЗначенияСвойств(Команда, КомандаОписание);
			Команда.ВариантЗапуска = ВариантЗапуска;
			
		КонецЦикла;
		
		Если ДополнительныеОтчетыИОбработки.ПроверитьГлобальнаяОбработка(СправочникОбъект.Вид) Тогда
			Разделы = Новый Массив;
			Если СправочникОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
				ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОбработками(Разделы);
			Иначе
				ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОтчетами(Разделы);
			КонецЕсли;
			
			Для Каждого Раздел Из Разделы Цикл
				НовыйРаздел = СправочникОбъект.Разделы.Добавить();
				Если Раздел = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола() Тогда
					НовыйРаздел.Раздел = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
				Иначе
					НовыйРаздел.Раздел = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Раздел);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОписаниеНазначения Из ОбработкаСведения.Назначение Цикл
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеНазначения);
				Если ОбъектМетаданных <> Неопределено Тогда
					НовоеНазначение = СправочникОбъект.Назначение.Добавить();
					НовоеНазначение.ОбъектНазначения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СправочникОбъект.Разрешения.Очистить();
		Разрешения = Неопределено;
		Если ОбработкаСведения.Свойство("Разрешения", Разрешения) Тогда
			
			Для Каждого Разрешение Из Разрешения Цикл
				
				ТипXDTO = Разрешение.Тип();
				
				СтрокаТЧ = СправочникОбъект.Разрешения.Добавить();
				СтрокаТЧ.ВидРазрешения = ТипXDTO.Имя;
				
				Параметры = Новый Структура();
				
				Для Каждого СвойствоXDTO Из ТипXDTO.Свойства Цикл
					
					Параметры.Вставить(СвойствоXDTO.Имя,
						Разрешение.ПолучитьXDTO(СвойствоXDTO.Имя).Значение
					);
					
				КонецЦикла;
				
				СтрокаТЧ.Параметры = Новый ХранилищеЗначения(Параметры);
				
			КонецЦикла;
			
		КонецЕсли;
		
		СправочникОбъект.Записать();
	КонецЦикла;
	
#КонецЕсли

КонецПроцедуры

Процедура ЗаполнитьСправочникВидыДополнительныхСтавок()
	
	Если Метаданные.Справочники.Найти("бит_му_ВидыДополнительныхСтавок") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Справочники["бит_му_ВидыДополнительныхСтавок"].ОбновитьПредопределенные();
	
КонецПроцедуры // ЗаполнитьСправочникбит_му_ВидыДополнительныхСтавок()

Процедура ЗаполнитьТипыКатегорийФинансовыхАктивов()

	Если Метаданные.Справочники.Найти("бит_му_КатегорииФинансовыхАктивовМСФО") = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Справочники["бит_му_КатегорииФинансовыхАктивовМСФО"].ПервоначальноеЗаполнение();
	
КонецПроцедуры

Процедура ЗаполнитьТипВСоставляющихПлатежейПоФинДоговорам()

	Если Метаданные.Справочники.Найти("бит_СоставляющиеПлатежейПоФинДоговорам") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Справочники["бит_СоставляющиеПлатежейПоФинДоговорам"].ПервоначальноеЗаполнение();

КонецПроцедуры

Процедура ДобавитьЯзыки()

	НайтиСоздатьЯзык("Русский (Россия)","ru","ru_RU");
	НайтиСоздатьЯзык("Английский (США)","en","en_US");

КонецПроцедуры
 
Функция НайтиСоздатьЯзык(НаименованиеЯзыка,КодЯзыка,КодСтраны)

	СпрЯзык = Справочники.бит_Языки.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодЯзыка",КодЯзыка);
	Запрос.УстановитьПараметр("ЯзыкСтрана",КодСтраны);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_Языки.Ссылка
	|ИЗ
	|	Справочник.бит_Языки КАК бит_Языки
	|ГДЕ
	|	бит_Языки.КодЯзыка = &КодЯзыка
	|	И бит_Языки.ЯзыкСтрана = &ЯзыкСтрана";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СпрЯзык = Выборка.Ссылка;
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(СпрЯзык) Тогда
		СпрОбъект = Справочники.бит_Языки.СоздатьЭлемент();
		СпрОбъект.Наименование = НаименованиеЯзыка;
		СпрОбъект.КодЯзыка     = КодЯзыка;
		СпрОбъект.ЯзыкСтрана   = КодСтраны;
		СпрОбъект.УстановитьНовыйКод();
		СпрОбъект.Записать();
		СпрЯзык = СпрОбъект.Ссылка;
	КонецЕсли; 
	
	Возврат СпрЯзык;
	
КонецФункции // НайтиСоздатьЯзык()

Процедура НазначениеВидовРешенийСогласования()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаВидовРешений.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ НазначениеВидовРешенийСогласования.ВидРешения ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ТаблицаВидовРешений
	|ИЗ
	|	Справочник.бит_ВидыРешенийСогласования КАК ТаблицаВидовРешений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначениеВидовРешенийСогласования КАК НазначениеВидовРешенийСогласования
	|		ПО ТаблицаВидовРешений.Ссылка = НазначениеВидовРешенийСогласования.ВидРешения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВидовРешений.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидовРешений.Ссылка КАК ВидРешения,
	|	ЕСТЬNULL(ТаблицаВидовРешений.Количество, 0) КАК Количество
	|ИЗ
	|	ТаблицаВидовРешений КАК ТаблицаВидовРешений
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаВидовРешений.Количество, 0) = 0";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		МенеджерЗаписи = РегистрыСведений.бит_НазначениеВидовРешенийСогласования.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидРешения = Выборка.ВидРешения;
		МенеджерЗаписи.Записать(); 
	
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьНазначениеРешений()

Процедура ЗаполнитьСправочникВидыИнформационныхБаз()

	СпрОбъект = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза.ПолучитьОбъект();
	СпрОбъект.РасположениеДанных = Перечисления.бит_мпд_ВидыРасположенияДанных.ТекущаяИнформационнаяБаза;
	СпрОбъект.Платформа          = Перечисления.бит_мпд_Платформы.V82;
	СпрОбъект.Записать();
	
КонецПроцедуры // ДозаполнитьНастройкуТекущаяИнформационнаяБаза()

Процедура НастроитьРежимыТрансляции()
	
	ЗакрытиеСчетов = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.Документы.бит_ЗакрытиеСчетов);
	
	МенеджерЗаписи = РегистрыСведений.бит_НастройкиРежимовТрансляции.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Дата('19800101');
	МенеджерЗаписи.Режим  = Перечисления.бит_РежимыТрансляции.НеВыполнять;
	МенеджерЗаписи.ОбъектСистемы = ЗакрытиеСчетов;
	МенеджерЗаписи.Записать();

	МенеджерЗаписи = РегистрыСведений.бит_НастройкиРежимовТрансляции.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Режим  = Перечисления.бит_РежимыТрансляции.НеВыполнять;
	МенеджерЗаписи.Период = Дата('19800101');
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура НастроитьРежимыТрансляцииПриНаличииПравилТрансляции() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_НастройкиРежимовТрансляции.Период КАК Период
	|ИЗ
	|	РегистрСведений.бит_НастройкиРежимовТрансляции КАК бит_НастройкиРежимовТрансляции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_НазначениеПравилТрансляции.Период КАК Период
	|ИЗ
	|	РегистрСведений.бит_НазначениеПравилТрансляции КАК бит_НазначениеПравилТрансляции";
	
	Пакет = Запрос.ВыполнитьПакет();
	ЕстьНастройки = НЕ Пакет[0].Пустой();
	ЕстьПравила	  = НЕ Пакет[1].Пустой();
	
	Если НЕ ЕстьНастройки Тогда
		Если ЕстьПравила Тогда
			НаборЗаписей = РегистрыСведений.бит_НастройкиРежимовТрансляции.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Дата('19800101'));
			НаборЗаписей.Отбор.ОбъектСистемы.Установить(Справочники.бит_ОбъектыСистемы.ПустаяСсылка());
			Запись = НаборЗаписей.Добавить();
			Запись.Период = Дата('19800101');
			Запись.Режим  = Перечисления.бит_РежимыТрансляции.OnLine;
			Запись.ОбъектСистемы = Справочники.бит_ОбъектыСистемы.ПустаяСсылка();
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗакрытиеСчетов = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.Документы.бит_ЗакрытиеСчетов);
			
			НаборЗаписей = РегистрыСведений.бит_НастройкиРежимовТрансляции.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Дата('19800101'));
			НаборЗаписей.Отбор.ОбъектСистемы.Установить(ЗакрытиеСчетов);
			Запись = НаборЗаписей.Добавить();
			Запись.Период = Дата('19800101');
			Запись.Режим  = Перечисления.бит_РежимыТрансляции.НеВыполнять;
			Запись.ОбъектСистемы = ЗакрытиеСчетов;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		Иначе	
			НастроитьРежимыТрансляции();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняет поиск счетов с пустым порядком и заполняет порядок.
// 
// Параметры:
//  ИмяПланаСчетов - Строка.
// 
Процедура ПроверитьЗаполнитьПорядокПоПлануСчетов(ИмяПланаСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПС.Ссылка
	|ИЗ
	|	ПланСчетов."+ИмяПланаСчетов+" КАК ПС
	|ГДЕ
	|	ПС.Порядок = """"";
	
	Результат = Запрос.Выполнить();
	ЕстьПустые = НЕ Результат.Пустой();
	Если ЕстьПустые Тогда
		МаскаКода = РегистрыСведений.бит_МаскиКодов.ПолучитьМаскуКодаПланаСчетов(ИмяПланаСчетов);
		Выборка = ПланыСчетов[ИмяПланаСчетов].Выбрать();
		Пока Выборка.Следующий() Цикл
			СчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СчетОбъект.Порядок =  РегистрыСведений.бит_МаскиКодов.ПолучитьПорядокКодаПоМаскеКода(МаскаКода, СчетОбъект.Код);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнитьПорядокПоПлануСчетов()

Процедура УстановитьСинонимСтруктурыКонструктораПравилТрансляции(Источник, Приемник, НастройкиДопИзмерений)

	Буфер = Новый Структура("ИмяРеквизита, Синоним, Тип");
	ЗаполнитьЗначенияСвойств(Буфер, Источник);
	
	Справочники.бит_СтруктураКонструктораПравилТрансляции.ДобавитьИнформациюОбИзмерении(Буфер, НастройкиДопИзмерений);
	Буфер.Синоним = СократитьСинонимСтруктурыКонструктораПравилТрансляции(Буфер);

	ЗаполнитьЗначенияСвойств(Приемник, Буфер, "Синоним");
	
КонецПроцедуры

Функция СократитьСинонимСтруктурыКонструктораПравилТрансляции(ТекСтрока)

	Универсальные = "Аналитика_";
	Если НЕ Найти(ТекСтрока.ИмяРеквизита, Универсальные) = 0 Тогда
		Имя     = СтрЗаменить(ТекСтрока.ИмяРеквизита, "_", " ");
		Синоним = СтрЗаменить(ТекСтрока.Синоним, Имя, "");
		Синоним = СокрЛП(СтрЗаменить(Синоним, ":", ""));
	Иначе
		Синоним = ТекСтрока.Синоним;
	КонецЕсли; 
	
	Возврат Синоним;

КонецФункции

#Область РаботаСФайлами

Функция РаботаСфайламиВыбратьСсылкиДляОбработки(ПолноеИмяОбъектаМетаданных)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	#Таблица КАК Т";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#Таблица",ПолноеИмяОбъектаМетаданных);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать().Выбрать();

КонецФункции 

Процедура ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений()
	
	Типы = Метаданные.ПодпискиНаСобытия.бит_ПереопределитьПолучаемуюФормуПрисоединенногоФайла.Источник.Типы();
	
	ПолныеИменаСправочников = Новый Массив(); 
	Для каждого Элемент Из Типы Цикл
		ПолныеИменаСправочников.Добавить(Метаданные.НайтиПоТипу(Элемент).ПолноеИмя());
	КонецЦикла; 
	
	ОбработкаЗавершена = Ложь;
	
	Для Каждого ПолноеИмяСправочника Из ПолныеИменаСправочников Цикл
		ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведенийДляТаблицы(Неопределено,
			ПолноеИмяСправочника, ОбработкаЗавершена);
	КонецЦикла;
		
КонецПроцедуры

// Позволяет перенести элементы табличных частей УдалитьЭлектронныеПодписи и УдалитьСертификатыШифрования
// в регистры сведений ЭлектронныеПодписи и СертификатыШифрования.
//
// Параметры:
//  ПараметрыОбновления        - Структура - структура параметров отложенного обработчика обновления.
//
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, из которого переносятся данные табличных частей
//                                        УдалитьЭлектронныеПодписи и УдалитьСертификатыШифрования.
//  ОбработкаЗавершена         - Булево - Истина, если обработаны все данные при обновлении ИБ.
//
Процедура ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведенийДляТаблицы(ПараметрыОбновления, ПолноеИмяОбъектаМетаданных, ОбработкаЗавершена)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если ОбъектМетаданных = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указан объект для обработки электронных подписей и сертификатов шифрования.");
	КонецЕсли;
	
	ЕстьТабличнаяЧастьЭП = ОбъектМетаданных.ТабличныеЧасти.Найти("УдалитьЭлектронныеПодписи") <> Неопределено;
	ЕстьТабличнаяЧастьСШ = ОбъектМетаданных.ТабличныеЧасти.Найти("УдалитьСертификатыШифрования") <> Неопределено;
	
	ВыборкаСсылок = РаботаСфайламиВыбратьСсылкиДляОбработки(ПолноеИмяОбъектаМетаданных);
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	МассивСсылок = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		Пока ВыборкаСсылок.Следующий() Цикл
			МассивСсылок.Добавить(ВыборкаСсылок.Ссылка);
		КонецЦикла;
		
		Если ЕстьТабличнаяЧастьЭП Тогда
			ПеренестиДанныеЭлектроннойПодписиВРегистрСведений(МассивСсылок,
				ПолноеИмяОбъектаМетаданных, ОбъектМетаданных);
		КонецЕсли;
		
		Если ЕстьТабличнаяЧастьСШ Тогда
			ПеренестиДанныеСертификатовВРегистрСведений(МассивСсылок, ПолноеИмяОбъектаМетаданных);
		КонецЕсли;
		
		ОбъектовОбработано = МассивСсылок.Количество();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		// Если не удалось обработать какой-либо объект, требуется повторить попытку.
		ПроблемныхОбъектов = ПроблемныхОбъектов + МассивСсылок.Количество();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать объект: %1 по причине:
			           |%2'"),
			ОбъектМетаданных,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, ОбъектМетаданных, , ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Для процедуры ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведенийДляТаблицы.
Процедура ПеренестиДанныеЭлектроннойПодписиВРегистрСведений(МассивОбъектов, ПолноеИмяОбъектаМетаданных, ОбъектМетаданных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧЭлектронныеПодписи.Ссылка КАК ПодписанныйОбъект,
	|	ТЧЭлектронныеПодписи.ДатаПодписи,
	|	ТЧЭлектронныеПодписи.ИмяФайлаПодписи,
	|	ТЧЭлектронныеПодписи.Комментарий,
	|	ТЧЭлектронныеПодписи.КомуВыданСертификат,
	|	ТЧЭлектронныеПодписи.Отпечаток,
	|	ТЧЭлектронныеПодписи.Подпись,
	|	ТЧЭлектронныеПодписи.УстановившийПодпись,
	|	ТЧЭлектронныеПодписи.НомерСтроки КАК ПорядковыйНомер,
	|	ТЧЭлектронныеПодписи.Сертификат, 
	|	ТЧЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
	|	ТЧЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи
	|ИЗ
	|	" + ПолноеИмяОбъектаМетаданных + ".УдалитьЭлектронныеПодписи КАК ТЧЭлектронныеПодписи
	|ГДЕ
	|	ТЧЭлектронныеПодписи.Ссылка В(&МассивОбъектов)
	|ИТОГИ
	|	ПО ПодписанныйОбъект";
	
	Если ОбъектМетаданных = Метаданные.Справочники.ВерсииФайлов Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ТЧЭлектронныеПодписи.Ссылка КАК ПодписанныйОбъект",
			"ТЧЭлектронныеПодписи.Ссылка.Владелец КАК ПодписанныйОбъект");
	КонецЕсли;
	
	РеквизитыТЧ = ОбъектМетаданных.ТабличныеЧасти.УдалитьЭлектронныеПодписи.Реквизиты;
	
	Если РеквизитыТЧ.Найти("ПодписьВерна") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТЧЭлектронныеПодписи.ПодписьВерна", "ЛОЖЬ");
	КонецЕсли;
	
	Если РеквизитыТЧ.Найти("ДатаПроверкиПодписи") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТЧЭлектронныеПодписи.ДатаПроверкиПодписи", "Неопределено");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого Строка Из Выгрузка.Строки Цикл
		Если Не ЗначениеЗаполнено(Строка.ПодписанныйОбъект) Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений["ЭлектронныеПодписи"].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(Строка.ПодписанныйОбъект);
		Для Каждого Подстрока Из Строка.Строки Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Подстрока);
		КонецЦикла;
		// Используется параллельное обновление с нестандартной отметкой выполнения обработанных данных.
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведенийДляТаблицы.
Процедура ПеренестиДанныеСертификатовВРегистрСведений(МассивОбъектов, ПолноеИмяОбъектаМетаданных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧСертификатыШифрования.Ссылка КАК ЗашифрованныйОбъект,
	|	ТЧСертификатыШифрования.Отпечаток,
	|	ТЧСертификатыШифрования.Сертификат,
	|	ТЧСертификатыШифрования.НомерСтроки КАК ПорядковыйНомер,
	|	ТЧСертификатыШифрования.Представление
	|ИЗ
	|	" + ПолноеИмяОбъектаМетаданных + ".УдалитьСертификатыШифрования КАК ТЧСертификатыШифрования
	|ГДЕ
	|	ТЧСертификатыШифрования.Ссылка В(&МассивОбъектов)
	|ИТОГИ
	|	ПО ЗашифрованныйОбъект";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого Строка Из Выгрузка.Строки Цикл
		НаборЗаписей = РегистрыСведений["СертификатыШифрования"].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗашифрованныйОбъект.Установить(Строка.ЗашифрованныйОбъект);
		Для Каждого Подстрока Из Строка.Строки Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Подстрока);
		КонецЦикла;
		// Используется параллельное обновление с нестандартной отметкой выполнения обработанных данных.
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти 

#Область ПереходНаВерсионированиеБСП

Функция ДанныеДляХранения(Знач Объект)
	
	// Удалить в совместимо.
	СсылкаНаОбъект = Объект;
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) Тогда
		Объект = Объект.ПолучитьОбъект();
	Иначе
		СсылкаНаОбъект = Объект.Ссылка;
	КонецЕсли;
	
	ДанныеОбъекта = ВерсионированиеОбъектов.СериализоватьОбъект(Объект);
	
	ТабличныеДокументы = ТабличныеДокументыОбъекта(СсылкаНаОбъект);
	
	ДополнительныеРеквизиты = КоллекцияДополнительныхРеквизитов();
	СкрываемыеРеквизиты = Новый Массив;
	
	ВерсионированиеОбъектовПереопределяемый.ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствамиСлужебный");
		МодульУправлениеСвойствамиСлужебный.ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты);
		СкрываемыеРеквизиты.Добавить("ДополнительныеРеквизиты.*");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
		МодульУправлениеКонтактнойИнформациейСлужебный.ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты);
		СкрываемыеРеквизиты.Добавить("КонтактнаяИнформация.*");
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект);
	Настройки = НастройкиПодсистемы();
	Попытка
		МенеджерОбъекта.ПриОпределенииНастроекВерсионированияОбъектов(Настройки);
	Исключение
		Настройки = НастройкиПодсистемы();
	КонецПопытки;
	
	СлужебныеРеквизитыОбъекта = Новый Массив;
	Если Настройки.ПриПолученииСлужебныхРеквизитов Тогда
		МенеджерОбъекта.ПриПолученииСлужебныхРеквизитов(СлужебныеРеквизитыОбъекта);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СкрываемыеРеквизиты, СлужебныеРеквизитыОбъекта);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СкрываемыеРеквизиты, СлужебныеРеквизитыОбъектов());
	
	Результат = Новый Структура;
	
	Если ТабличныеДокументы <> Неопределено И ТабличныеДокументы.Количество() > 0 Тогда
		Результат.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Количество() > 0 Тогда
		Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;
	
	Если СкрываемыеРеквизиты.Количество() > 0 Тогда
		Результат.Вставить("СкрываемыеРеквизиты", СкрываемыеРеквизиты);
	КонецЕсли;
	
	Если Результат.Количество() > 0 Тогда
		Результат.Вставить("Объект", ДанныеОбъекта);
	Иначе
		Результат = ДанныеОбъекта;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Контрольная сумма по алгоритму MD5.
Функция КонтрольнаяСумма(Данные)
	
	// Удалить в совместимо.
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ХешированиеДанных.Добавить(Данные.Объект);
		Если Данные.Свойство("ДополнительныеРеквизиты") Тогда
			ХешированиеДанных.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(Данные.ДополнительныеРеквизиты));
		КонецЕсли;
	Иначе
		ХешированиеДанных.Добавить(Данные);
	КонецЕсли;
	
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
КонецФункции

Функция ТабличныеДокументыОбъекта(Ссылка)
	
	// Удалить в совместимо.
	Результат = Новый Структура;
	ВерсионированиеОбъектовПереопределяемый.ПриПолученииТабличныхДокументовОбъекта(Ссылка, Результат);
	Возврат Результат;
	
КонецФункции

Функция КоллекцияДополнительныхРеквизитов()
	
	// Удалить в совместимо.
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор");
	Результат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Значение");
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиПодсистемы()
	
	// Удалить в совместимо.
	Результат = Новый Структура;
	Результат.Вставить("ПриПолученииСлужебныхРеквизитов", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция СлужебныеРеквизитыОбъектов()
	
	// Удалить в совместимо.
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Ref");
	Реквизиты.Добавить("IsFolder");
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

 
