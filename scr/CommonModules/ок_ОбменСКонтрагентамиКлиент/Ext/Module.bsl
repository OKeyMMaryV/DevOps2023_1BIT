//ОК(СофтЛаб) Вдовиченко Г.В. 20181101

#Область ПрограммныйИнтерфейс

#Область ПомощникиПодключенияЭДО

Процедура ПомощникПодключенияКСервисуЭДОСбис() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ок_СпособыОбменаЭД", СпособыОЭД);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ок_ПомощникПодключенияЭДО", ПараметрыФормы);
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ок_ПомощникПодключенияЭДО", ПараметрыФормы);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	                                                                       
КонецПроцедуры

Процедура ПомощникПодключенияКСервисуЭДОДиадок() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.ок_СпособыОбменаЭД.ЧерезОператораЭДОДиадок"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ок_СпособыОбменаЭД", СпособыОЭД);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ок_ПомощникПодключенияЭДО", ПараметрыФормы);
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ок_ПомощникПодключенияЭДО", ПараметрыФормы);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
КонецПроцедуры

#КонецОбласти

Процедура ВыполнитьЗапросСертификатаДляПодписания(МодульОбработчикаОповещения, ИмяОбработчикаОповещения, ПередаваемыеПараметры = Неопределено, МассивСертификатов = Неопределено, Заголовок = "") Экспорт
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("Те_сТ");
	ИмяФайла = ПолучитьИмяВременногоФайла();
	Текст.Записать(ИмяФайла);
	Файлы = Новый Массив;
	Файлы.Добавить(Новый Структура("Данные, Представление", Новый ДвоичныеДанные(ИмяФайла), Заголовок));
	УдалитьФайлы(ИмяФайла);
	
	ОписаниеДанных = Новый Структура;
	//ОписаниеДанных.Вставить("ок_ПодписаниеОбменСКонтрагентами", Истина); //просто так не проходит до процедуры создания формы, нужно дописывать
	ОписаниеДанных.Вставить("Операция", "Подписание электронных документов");
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЗаголовокДанных", "Укажите сертификат для подписания");
	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	Если МассивСертификатов <> Неопределено Тогда
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
	КонецЕсли;	
	ОписаниеДанных.Вставить("НаборДанных", Файлы);
	//ОписаниеДанных.Вставить("ПредставлениеНабора", Заголовок);
	//
	//СписокПредставлений = Новый СписокЗначений;
	//СписокПредставлений.Добавить(" ");
	//ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
	
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения(ИмяОбработчикаОповещения, МодульОбработчикаОповещения, ПередаваемыеПараметры);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	
КонецПроцедуры	

Функция ДостаточноДанныхДляПодписанияБезЗапросаПользователя(Сертификат, ПроверятьТолькоСохраненныйВБазе = Ложь) Экспорт
	
	ПарольСертификата = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПарольСертификата(Сертификат);
	Если ПарольСертификата <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если ПроверятьТолькоСохраненныйВБазе Тогда
		Возврат Ложь;
	КонецЕсли;	
		
	//надо проверить, что ранее в форме подписания был указан с галкой сохранения
	Раздел = ПараметрыПриложения.Получить("СтандартныеПодсистемы.ПараметрыЭлектроннойПодписиИШифрования");
	Если Раздел <> Неопределено Тогда
		Форма = Раздел.Получить("ФормаПередачаПараметров");
		Если Форма <> Неопределено Тогда
			Если Форма.ПользовательУказалПризнакЗапомнитьПарольСертификата(Сертификат) Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

Процедура ОбработатьСлужебныеДокументы(Форма, ОбновитьДанныеСписка = Ложь, Профили = Неопределено) Экспорт
	
	Если Профили = Неопределено Тогда
		Профили = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПрофилиДляОбработкиСлужебныхДокументов();
	КонецЕсли;
	
	Для каждого Профиль Из Профили Цикл
		МассивСертификатов = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьСертификатыПрофиля(Профиль);
		Если МассивСертификатов.Количество() = 0 Тогда
			Продолжить;
			МассивСертификатов = Неопределено;
		КонецЕсли;
		ПрекратитьЗапросы = Ложь;
		Количество = 0;
		Если ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьНаличиеНеобработанныхСлужебныхДокументов(Профиль, ПрекратитьЗапросы, Количество) Тогда
			Если ПрекратитьЗапросы Тогда
				ПоказатьПредупреждение(, "Сервер оператора ЭДО по профилю: " + Профиль + " сейчас занят. Попробуйте повторить через 3-5 минут");
			Иначе	
				ИсходящиеПараметры = Новый Структура("Профиль, Форма, ОбновитьДанныеСписка, МоментСтарта", Профиль, Форма, ОбновитьДанныеСписка, ТекущаяДата());
				ВыполнитьЗапросСертификатаДляПодписания(ЭтотОбъект, "ОбработатьСлужебныеДокументыЗавершение", ИсходящиеПараметры, МассивСертификатов, 
																										"служебных документов по профилю " + Профиль + ". Количество документов - " + Количество);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСлужебныеДокументыЗавершение(Результат, ВходящиеДанные) Экспорт
	
	Профиль = ВходящиеДанные.Профиль;
	
	МаксимальнаяДлительность = 600; //защита от зацикливания на стороне оператора
	Если ВходящиеДанные.Свойство("МаксимальнаяДлительность") Тогда
		МаксимальнаяДлительность = ВходящиеДанные.МаксимальнаяДлительность;
	КонецЕсли;	
	Если ТекущаяДата() - ВходящиеДанные.МоментСтарта > МаксимальнаяДлительность Тогда //выход по таймауту
		Возврат;
	КонецЕсли;	
	
	Сертификат = Неопределено;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
		Сертификат = Результат.ВыбранныйСертификат.Ссылка;
	ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда //вызов из продолжения
		Сертификат = Результат;
	КонецЕсли;	
	
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Профиль) Тогда
		Возврат;
	КонецЕсли;	
	
	Продолжать = Ложь;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
	//ДанныеФайловДляПодписания = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеСлужебныхДокументовДляПодписания(Профиль, Сертификат, Продолжать);
	ДанныеФайловДляПодписания = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеСлужебныхДокументовДляПодписания(Профиль, Сертификат, Продолжать, ВходящиеДанные.МоментСтарта);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
	Если ДанныеФайловДляПодписания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-09 (#3849)
	Если ТипЗнч(ПараметрыПриложения) = Тип("Соответствие") И ПараметрыПриложения.Получить("СлужебныеДокументыКПодписанию") <> Неопределено Тогда
		ИДСлужебныхДокументовКПодписанию = Новый Массив;
		Для Каждого ИДДокументыДляПодписи Из ДанныеФайловДляПодписания Цикл
			ИДСлужебныхДокументовКПодписанию.Добавить(ИДДокументыДляПодписи.Ключ);
		КонецЦикла;
		СлужебныеДокументыКПодписанию = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьВходящиеДокументыПоИД(ИДСлужебныхДокументовКПодписанию);
		ПараметрыПриложения.Вставить("СлужебныеДокументыКПодписанию", СлужебныеДокументыКПодписанию);
		ПараметрыПриложения.Вставить("КоличествоСлужебныхДокументовКПодписанию", СлужебныеДокументыКПодписанию.Количество());
	КонецЕсли;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-09 (#3849)
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
	//КоличествоИсходящихДокументов = ДанныеФайловДляПодписания.Количество();
	Ном = 0;
	Для каждого Элемент из ДанныеФайловДляПодписания Цикл
		Для каждого СлужебныйДокумент из Элемент.Значение Цикл
			Ном = Ном + 1;
		КонецЦикла;	
	КонецЦикла;	
	КоличествоИсходящихДокументов = Ном;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
	
	Ном = 0;
	Для каждого Элемент из ДанныеФайловДляПодписания Цикл
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
		Для каждого СлужебныйДокумент из Элемент.Значение Цикл
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
		
		Ном = Ном + 1;
		Файлы = Новый Массив;
		СписокПредставлений = Новый СписокЗначений;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
		//Для каждого ЭлементФайла Из Элемент.Значение.ФайлыДляПодписания Цикл
		Для каждого ЭлементФайла Из СлужебныйДокумент.ФайлыДляПодписания Цикл
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
			Файлы.Добавить(Новый Структура("Данные", ПолучитьИзВременногоХранилища(ЭлементФайла.Адрес)));
			СписокПредставлений.Добавить(ЭлементФайла.ИмяФайла);
		КонецЦикла;
		Если Файлы.Количество() = 0 Тогда
			Если Ном = КоличествоИсходящихДокументов Тогда
				Если ВходящиеДанные.ОбновитьДанныеСписка И ВходящиеДанные.Форма <> Неопределено Тогда
					ВходящиеДанные.Форма.ОбновитьДанныеСписка();
				КонецЕсли;	
			КонецЕсли;	
			Продолжить;
		КонецЕсли;	
		//ВходящийДокумент = Элемент.Ключ;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
		//ОписаниеДанных = Новый Структура;
		//ОписаниеДанных.Вставить("Операция", "Подписание файлов");
		//ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		//ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл(ы)");
		//ОписаниеДанных.Вставить("БезПодтверждения", Истина);
		//ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
		//Если Сертификат <> Неопределено Тогда
		//	МассивСертификатов = Новый Массив;
		//	МассивСертификатов.Добавить(Сертификат);
		//	ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		//КонецЕсли;	
		//ОписаниеДанных.Вставить("НаборДанных", Файлы);
		//ОписаниеДанных.Вставить("ПредставлениеНабора", "Файл(ы): " + Файлы.Количество());
		//ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
		////ПараметрыОбработчика = Новый Структура("Документ, Данные, Количество, Номер, Продолжать, Сертификат, Профиль", Элемент.Ключ, Элемент.Значение, КоличествоИсходящихДокументов, Ном, Продолжать, Сертификат, Профиль);
		//ПараметрыОбработчика = Новый Структура("Документ, Данные, Количество, Номер, Продолжать, Сертификат, Профиль, ДатаСеанса", 
		//															Элемент.Ключ, 
		//															СлужебныйДокумент, 
		//															КоличествоИсходящихДокументов, 
		//															Ном, 
		//															Продолжать, 
		//															Сертификат, 
		//															Профиль, 
		//															ВходящиеДанные.МоментСтарта);
		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
		//ПараметрыОбработчика.Вставить("ОбновитьДанныеСписка", ВходящиеДанные.ОбновитьДанныеСписка);
		//ПараметрыОбработчика.Вставить("Форма", ВходящиеДанные.Форма);
		//ПараметрыОбработчика.Вставить("МоментСтарта", ВходящиеДанные.МоментСтарта);
		//Если ВходящиеДанные.Свойство("МаксимальнаяДлительность") Тогда
		//	ПараметрыОбработчика.Вставить("МаксимальнаяДлительность", ВходящиеДанные.МаксимальнаяДлительность);
		//КонецЕсли;	
		//ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ОбработчикЗавершенияПодписанияСлужебныеДокументы", ЭтотОбъект, ПараметрыОбработчика);
		//ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
		
		ИндексФайла = 0;
		Для каждого Файл1 из Файлы Цикл
			
			ОписаниеДанных = Новый Структура;
			ОписаниеДанных.Вставить("Операция", "Подписание файла");
			ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
			ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл");
			ОписаниеДанных.Вставить("БезПодтверждения", Истина);
			ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
			Если Сертификат <> Неопределено Тогда
				МассивСертификатов = Новый Массив;
				МассивСертификатов.Добавить(Сертификат);
				ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
			КонецЕсли;	
			
			Файлы1 = Новый Массив;
			Файлы1.Добавить(Файл1);
			
			СписокПредставлений1 = Новый СписокЗначений;
			СписокПредставлений1.Добавить(СписокПредставлений[ИндексФайла].Значение);
			
			ОписаниеДанных.Вставить("НаборДанных", Файлы1);
			ОписаниеДанных.Вставить("ПредставлениеНабора", "Файл: " + СписокПредставлений[ИндексФайла].Значение);
			ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений1);
			
			
			ПараметрыОбработчика = Новый Структура("Документ, Данные, Количество, Номер, Продолжать, Сертификат, Профиль, ИндексФайла, КоличествоФайлов, ДатаСеанса", 
																		Элемент.Ключ, 
																		СлужебныйДокумент, 
																		КоличествоИсходящихДокументов, 
																		Ном, 
																		Продолжать, 
																		Сертификат, 
																		Профиль,
																		ИндексФайла, 
																		Файлы.Количество(),
																		ВходящиеДанные.МоментСтарта);
																		
			ПараметрыОбработчика.Вставить("ОбновитьДанныеСписка", ВходящиеДанные.ОбновитьДанныеСписка);
			ПараметрыОбработчика.Вставить("Форма", ВходящиеДанные.Форма);
			ПараметрыОбработчика.Вставить("МоментСтарта", ВходящиеДанные.МоментСтарта);
			Если ВходящиеДанные.Свойство("МаксимальнаяДлительность") Тогда
				ПараметрыОбработчика.Вставить("МаксимальнаяДлительность", ВходящиеДанные.МаксимальнаяДлительность);
			КонецЕсли;	
			
			ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ОбработчикЗавершенияПодписанияСлужебныеДокументы", ЭтотОбъект, ПараметрыОбработчика);
			ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
			
			ИндексФайла = ИндексФайла + 1;
			
		КонецЦикла;	
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)
		
		ДанныеРегламентногоЗадания = ПараметрыПриложения.Получить("ок_РегламентноеЗаданиеОбменСКонтрагентами");
		Если ДанныеРегламентногоЗадания <> Неопределено Тогда
			ДанныеРегламентногоЗадания.КоличествоНазначенныхОповещенийСлужебныеДокументы = ДанныеРегламентногоЗадания.КоличествоНазначенныхОповещенийСлужебныеДокументы + 1;
		КонецЕсли;	
				
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
		КонецЦикла;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
		
	КонецЦикла;
		
КонецПроцедуры	

Процедура ОбработчикЗавершенияПодписанияСлужебныеДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеРегламентногоЗадания = ПараметрыПриложения.Получить("ок_РегламентноеЗаданиеОбменСКонтрагентами");
	Если ДанныеРегламентногоЗадания <> Неопределено Тогда
		ДанныеРегламентногоЗадания.КоличествоНазначенныхОповещенийСлужебныеДокументы = ДанныеРегламентногоЗадания.КоличествоНазначенныхОповещенийСлужебныеДокументы - 1;
	КонецЕсли;	
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
		////отправить документы...
		//ДанныеДляОтправки = Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания");
		//ЗаполнитьЗначенияСвойств(ДанныеДляОтправки, ДополнительныеПараметры.Данные);
		//
		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-11-25 (#3529)
		//ДанныеДляОтправки.Вставить("ДатаСеанса", ДополнительныеПараметры.ДатаСеанса);
		////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-11-25 (#3529)
		//
		//Индекс = 0;
		//Для каждого ДанныеФайла из ДанныеДляОтправки.ФайлыДляПодписания Цикл
		//	//ДанныеПодписи = Результат.НаборДанных[Индекс].СвойстваПодписи.Подпись;
		//	СвойстваПодписи = Результат.НаборДанных[Индекс].СвойстваПодписи;
		//	//при серверном подписании возвращается адрес в хранилище
		//	Если ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
		//		СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		//	КонецЕсли;	
		//	ДанныеПодписи = СвойстваПодписи.Подпись;
		//	ДанныеФайла.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(ДанныеПодписи));
		//	ДанныеФайла.Вставить("Сертификат", Результат.ВыбранныйСертификат.Ссылка);
		//	ДанныеФайла.Вставить("Отпечаток", Результат.ВыбранныйСертификат.Отпечаток);
		//	Индекс = Индекс + 1;
		//КонецЦикла;
		//
		//РезультатОтправки = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УтвердитьСлужебныйДокумент(ДополнительныеПараметры.Документ, ДанныеДляОтправки);
		
		ДанныеФайла = Новый Структура;
		Для каждого ДанныеРезультата из Результат.НаборДанных Цикл
			СвойстваПодписи = ДанныеРезультата.СвойстваПодписи;
			//при серверном подписании возвращается адрес в хранилище
			Если ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
				СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
			КонецЕсли;	
			ДанныеПодписи = СвойстваПодписи.Подпись;
			//ДанныеФайла.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(ДанныеПодписи));
			ДанныеФайла.Вставить("ДанныеПодписи", ДанныеПодписи);
			ДанныеФайла.Вставить("Сертификат", Результат.ВыбранныйСертификат.Ссылка);
			ДанныеФайла.Вставить("Отпечаток", Результат.ВыбранныйСертификат.Отпечаток);
			Прервать;
		КонецЦикла;
		
		ОбщиеДанныеПодписания = ок_ОбменСКонтрагентамиКлиент.ПолучитьПараметрыПриложения().Получить("ок_ТекущиеДанныеПодписанияСД");
		Если ОбщиеДанныеПодписания = Неопределено Тогда
			ОбщиеДанныеПодписания = Новый Соответствие;
		КонецЕсли;
		ДанныеПодписанияДокумента = ОбщиеДанныеПодписания.Получить(ДополнительныеПараметры.Документ);
		Если ДанныеПодписанияДокумента = Неопределено Тогда
			ДанныеПодписанияДокумента = Новый Соответствие;
		КонецЕсли;
		ДанныеПодписанияДокумента.Вставить(ДополнительныеПараметры.ИндексФайла, ДанныеФайла); 
		ОбщиеДанныеПодписания.Вставить(ДополнительныеПараметры.Документ, ДанныеПодписанияДокумента);
		ок_ОбменСКонтрагентамиКлиент.ПолучитьПараметрыПриложения().Вставить("ок_ТекущиеДанныеПодписанияСД", ОбщиеДанныеПодписания);
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
	Если ДополнительныеПараметры.ИндексФайла = (ДополнительныеПараметры.КоличествоФайлов - 1) Тогда
		
		//отправить документы...
		ДанныеДляОтправки = Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания");
		ЗаполнитьЗначенияСвойств(ДанныеДляОтправки, ДополнительныеПараметры.Данные);
		ДанныеДляОтправки.Вставить("ДатаСеанса", ДополнительныеПараметры.ДатаСеанса);
		
		ОбщиеДанныеПодписания = ок_ОбменСКонтрагентамиКлиент.ПолучитьПараметрыПриложения().Получить("ок_ТекущиеДанныеПодписанияСД");
		Если ОбщиеДанныеПодписания = Неопределено Тогда
			ОбщиеДанныеПодписания = Новый Соответствие;
		КонецЕсли;
		ДанныеПодписанияДокумента = ОбщиеДанныеПодписания.Получить(ДополнительныеПараметры.Документ);
		Если ДанныеПодписанияДокумента = Неопределено Тогда
			ДанныеПодписанияДокумента = Новый Соответствие;
		КонецЕсли;
		
		Индекс = 0;
		Для каждого ДанныеФайла из ДанныеДляОтправки.ФайлыДляПодписания Цикл
			ДанныеПодписи = ДанныеПодписанияДокумента.Получить(Индекс); 
			Если ДанныеПодписи = Неопределено Тогда
				Возврат;
			КонецЕсли;	
			
			ДанныеФайла.Вставить("АдресПодписи", Неопределено);
			ДанныеФайла.Вставить("Сертификат", Неопределено);
			ДанныеФайла.Вставить("Отпечаток", Неопределено);
			ЗаполнитьЗначенияСвойств(ДанныеФайла, ДанныеПодписи);
			ДанныеФайла.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(ДанныеПодписи.ДанныеПодписи));
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		ОбщиеДанныеПодписания.Удалить(ДополнительныеПараметры.Документ);
		ок_ОбменСКонтрагентамиКлиент.ПолучитьПараметрыПриложения().Вставить("ок_ТекущиеДанныеПодписанияСД", ОбщиеДанныеПодписания);
		
		РезультатОтправки = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УтвердитьСлужебныйДокумент(ДополнительныеПараметры.Документ, ДанныеДляОтправки);
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-15 (#3849)
		Если РезультатОтправки = Истина Тогда
			КоличествоСлужебныхПодписанныхДокументов = ПараметрыПриложения.Получить("КоличествоСлужебныхПодписанныхДокументов");
			Если КоличествоСлужебныхПодписанныхДокументов <> Неопределено Тогда
				ПараметрыПриложения.Вставить("КоличествоСлужебныхПодписанныхДокументов", КоличествоСлужебныхПодписанныхДокументов + 1);;
			КонецЕсли;
			
			СлужебныеДокументыКПодписанию = ПараметрыПриложения.Получить("СлужебныеДокументыКПодписанию");
			Если СлужебныеДокументыКПодписанию <> Неопределено Тогда
				ЭлементМассиваКУдалению = СлужебныеДокументыКПодписанию.Найти(ДополнительныеПараметры.Документ);
				Если ЭлементМассиваКУдалению <> Неопределено Тогда
					СлужебныеДокументыКПодписанию.Удалить(ЭлементМассиваКУдалению);
					ПараметрыПриложения.Вставить("СлужебныеДокументыКПодписанию", СлужебныеДокументыКПодписанию);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-15 (#3849)
		
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)
	
	Если ДополнительныеПараметры.Номер = ДополнительныеПараметры.Количество Тогда
		Если ДополнительныеПараметры.Продолжать Тогда //есть еще порции
			ИсходящиеПараметры = Новый Структура("Профиль, Форма, ОбновитьДанныеСписка, МоментСтарта");
			ЗаполнитьЗначенияСвойств(ИсходящиеПараметры, ДополнительныеПараметры);
			Если ДополнительныеПараметры.Свойство("МаксимальнаяДлительность") Тогда
				ИсходящиеПараметры.Вставить("МаксимальнаяДлительность", ДополнительныеПараметры.МаксимальнаяДлительность);
			КонецЕсли;	
			ОбработатьСлужебныеДокументыЗавершение(ДополнительныеПараметры.Сертификат, ИсходящиеПараметры);	
		Иначе	
			Если ДополнительныеПараметры.ОбновитьДанныеСписка Тогда
				ДополнительныеПараметры.Форма.ОбновитьДанныеСписка();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-23 (#4234)
//Процедура ВыполнитьПодписаниеЭД() Экспорт
Процедура ВыполнитьПодписаниеЭД(ПараметрыПодписанияДокументов) Экспорт
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-23 (#4234)
// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-23 (#4234)
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
	//НачалоЗамера = ТекущаяДата();
	//ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтразитьЗаписьЛогаОценкиПроизводительности("Начало подписания ЭДО");
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)
	//
	//Данные = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДокументыНаПодписание();	
	//
	////ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-09 (#3849)
	//ДокументыКПодписанию = Новый Массив;
	//ОбновитьДокументыКПодписанию = Ложь;
	//Если Данные.Свойство("Документы") И ТипЗнч(ПараметрыПриложения) = Тип("Соответствие") И ПараметрыПриложения.Получить("ДокументыКПодписанию") <> Неопределено Тогда
	//	Для Каждого ДокументыДляПодписи Из Данные.Документы Цикл
	//		Если ДокументыДляПодписи.ВидДокумента = "Входящий" Тогда
	//			ДокументыКПодписанию.Добавить(ДокументыДляПодписи.Документ);
	//	    КонецЕсли;
	//	КонецЦикла;
	//	ПараметрыПриложения.Вставить("ДокументыКПодписанию", ДокументыКПодписанию);
	//	ПараметрыПриложения.Вставить("КоличествоДокументовКПодписанию", ДокументыКПодписанию.Количество());
	//	ОбновитьДокументыКПодписанию = Истина;
	//КонецЕсли;
	////ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-09 (#3849)
	//
	////документы на подпись
	//Для каждого ВидДокумента Из Данные.ВидыДокументов Цикл
	//	Для каждого Сертификат Из Данные.Сертификаты Цикл
	//		Если Не ДостаточноДанныхДляПодписанияБезЗапросаПользователя(Сертификат, Истина) Тогда
	//			Продолжить;
	//		КонецЕсли;	
	//		Документы = Новый Массив;
	//		Для каждого Документ Из Данные.Документы Цикл
	//			Если Документ.ВидДокумента <> ВидДокумента Тогда
	//				Продолжить;
	//			КонецЕсли;	
	//			Если Документ.Сертификат <> Сертификат Тогда
	//				Продолжить;
	//			КонецЕсли;	
	//			Документы.Добавить(Документ.Документ);
	//		КонецЦикла;
	//		Если Документы.Количество() = 0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
	//		//ПодписатьИОтправитьДокументы(Сертификат, Документы, ВидДокумента);
	//		ПодписатьИОтправитьДокументы(Сертификат, Документы, ВидДокумента, ,ДокументыКПодписанию);
	//		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849)
	//	КонецЦикла;
	//КонецЦикла;
	//
	////ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
	//Если ОбновитьДокументыКПодписанию Тогда
	//	ПараметрыПриложения.Вставить("ДокументыКПодписанию", ДокументыКПодписанию);
	//КонецЕсли;
	////ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849)
	//
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
	//ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтразитьЗаписьЛогаОценкиПроизводительности("Конец получения данных для подписания ЭДО; Длительность (сек.): " 
	//								+ Строка(ТекущаяДата() - НачалоЗамера));
	//НачалоЗамера = ТекущаяДата();
	//ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтразитьЗаписьЛогаОценкиПроизводительности("Начало обработки служебных документов ЭДО");
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)
	//
	////служебные документы
	//Данные = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПрофилиНаОбработкуСлужебныхДокументов();
	//Для каждого Элемент из Данные Цикл
	//	Если Не ДостаточноДанныхДляПодписанияБезЗапросаПользователя(Элемент.Сертификат, Истина) Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	ИсходящиеПараметры = Новый Структура("Профиль, Форма, ОбновитьДанныеСписка, МоментСтарта", Элемент.ПрофильНастроекЭДО, Неопределено, Ложь, ТекущаяДата());
	//	ОбработатьСлужебныеДокументыЗавершение(Элемент.Сертификат, ИсходящиеПараметры);
	//КонецЦикла;	
	//
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-12-27 (#3594)
	//ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтразитьЗаписьЛогаОценкиПроизводительности("Конец получения данных для обработки служебных документов ЭДО; Длительность (сек.): " 
	//								+ Строка(ТекущаяДата() - НачалоЗамера));
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-12-27 (#3594)
	
	Если ПараметрыПодписанияДокументов.ПодписаниеСлужебныхДокументов Тогда
		ПодписатьСлужебныеДокументыЭД(ПараметрыПодписанияДокументов);
	Иначе
		ПодписатьДокументыЭД(ПараметрыПодписанияДокументов);
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-23 (#4234)
	
КонецПроцедуры

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
//Процедура ПодписатьИОтправитьДокументы(Сертификат, Документы, ВидДокументов = "Входящий", Форма = Неопределено) Экспорт
Процедура ПодписатьИОтправитьДокументы(Сертификат, 
										Документы, 
										ВидДокументов = "Входящий", 
										Форма = Неопределено,
										ДокументыКПодписанию = Неопределено) Экспорт	
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849)	
	
	Если Форма <> Неопределено Тогда //при вызове из формы дополнительно попытаемся отправить служебные документы
		Если ок_ОбменСКонтрагентамиКлиент.ДостаточноДанныхДляПодписанияБезЗапросаПользователя(Сертификат) Тогда
			ПрофильЭДО = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПрофильДокумента(Документы[0]);
			Если ЗначениеЗаполнено(ПрофильЭДО) Тогда
				ИсходящиеПараметры = Новый Структура("Профиль, Форма, ОбновитьДанныеСписка, МоментСтарта, МаксимальнаяДлительность", ПрофильЭДО, Форма, Ложь, ТекущаяДата(), 120);
				ОбработатьСлужебныеДокументыЗавершение(Сертификат, ИсходящиеПараметры);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если ВидДокументов = "Входящий" Тогда
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-11-10 (#3849)
		//ДанныеФайловДляПодписания = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеВходящегоДокументаДляПодписания(Документы, Сертификат);
		ДанныеФайловДляПодписания = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеВходящегоДокументаДляПодписания(Документы, Сертификат, ДокументыКПодписанию);
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-11-10 (#3849)
	Иначе	
		ДанныеФайловДляПодписания = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеИсходящегоДокументаДляПодписания(Документы, Сертификат);
	КонецЕсли;
	
	Если ДанныеФайловДляПодписания = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	КоличествоИсходящихДокументов = ДанныеФайловДляПодписания.Количество();
	Ном = 0;
	Для каждого Элемент из ДанныеФайловДляПодписания Цикл
		
		Ном = Ном + 1;
		Файлы = Новый Массив;
		СписокПредставлений = Новый СписокЗначений;
		Для каждого ЭлементФайла Из Элемент.Значение.ФайлыДляПодписания Цикл
			Файлы.Добавить(Новый Структура("Данные", ПолучитьИзВременногоХранилища(ЭлементФайла.Адрес)));
			УдалитьИзВременногоХранилища(ЭлементФайла.Адрес);
			ЭлементФайла.Адрес = Неопределено;
			СписокПредставлений.Добавить(ЭлементФайла.ИмяФайла);
		КонецЦикла;
		Если Файлы.Количество() = 0 Тогда
			Если Ном = КоличествоИсходящихДокументов И Форма <> Неопределено Тогда
				Форма.ОбновитьДанныеСписка();
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
		//при передаче на подписание 70+ файлов, программа аварийно завершается без сообщений
		//обойдем проблему, будем посылать на подпись по одному файлу
		//ВходящийДокумент = Элемент.Ключ;
		//ОписаниеДанных = Новый Структура;
		//ОписаниеДанных.Вставить("Операция", "Подписание файлов");
		//ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		//ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл(ы)");
		//ОписаниеДанных.Вставить("БезПодтверждения", Истина);
		//ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
		//Если Сертификат <> Неопределено Тогда
		//	МассивСертификатов = Новый Массив;
		//	МассивСертификатов.Добавить(Сертификат);
		//	ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		//КонецЕсли;	
		//ОписаниеДанных.Вставить("НаборДанных", Файлы);
		//ОписаниеДанных.Вставить("ПредставлениеНабора", "Файл(ы): " + Файлы.Количество());
		//ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
		//ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ОбработчикЗавершенияПодписания", 
		//												ЭтотОбъект, 
		//												Новый Структура("Документ, Данные, Количество, Номер, Форма, ВидДокументов", 
		//																	Элемент.Ключ, Элемент.Значение, КоличествоИсходящихДокументов, Ном, Форма, ВидДокументов));
		//ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
		ИндексФайла = 0;
		Для каждого Файл1 из Файлы Цикл
			
			ОписаниеДанных = Новый Структура;
			ОписаниеДанных.Вставить("Операция", "Подписание файла");
			ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
			ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл");
			ОписаниеДанных.Вставить("БезПодтверждения", Истина);
			ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
			Если Сертификат <> Неопределено Тогда
				МассивСертификатов = Новый Массив;
				МассивСертификатов.Добавить(Сертификат);
				ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
			КонецЕсли;	
			
			Файлы1 = Новый Массив;
			Файлы1.Добавить(Файл1);
			
			СписокПредставлений1 = Новый СписокЗначений;
			СписокПредставлений1.Добавить(СписокПредставлений[ИндексФайла].Значение);
			
			ОписаниеДанных.Вставить("НаборДанных", Файлы1);
			ОписаниеДанных.Вставить("ПредставлениеНабора", "Файл: " + СписокПредставлений[ИндексФайла].Значение);
			ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений1);
			ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ОбработчикЗавершенияПодписания", 
															ЭтотОбъект, 
															Новый Структура("Документ, Данные, Количество, Номер, Форма, ВидДокументов, ИндексФайла, КоличествоФайлов", 
																				Элемент.Ключ, Элемент.Значение, КоличествоИсходящихДокументов, Ном, Форма, ВидДокументов, ИндексФайла, Файлы.Количество()));
			ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
			
			ИндексФайла = ИндексФайла + 1;
			
		КонецЦикла;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)
		
		ДанныеРегламентногоЗадания = ПараметрыПриложения.Получить("ок_РегламентноеЗаданиеОбменСКонтрагентами");
		Если ДанныеРегламентногоЗадания <> Неопределено Тогда
			ДанныеРегламентногоЗадания.КоличествоНазначенныхОповещений = ДанныеРегламентногоЗадания.КоличествоНазначенныхОповещений + 1;
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры	

Процедура ОбработчикЗавершенияПодписания(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеРегламентногоЗадания = ПараметрыПриложения.Получить("ок_РегламентноеЗаданиеОбменСКонтрагентами");
	Если ДанныеРегламентногоЗадания <> Неопределено Тогда
		ДанныеРегламентногоЗадания.КоличествоНазначенныхОповещений = ДанныеРегламентногоЗадания.КоличествоНазначенныхОповещений - 1;
	КонецЕсли;	
	
	Форма = Неопределено;
	ДополнительныеПараметры.Свойство("Форма", Форма);
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
		//добавим подпись в глобальную структуру данных для подписания
		
		////отправить документы...
		//ДанныеДляОтправки = Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания");
		//ЗаполнитьЗначенияСвойств(ДанныеДляОтправки, ДополнительныеПараметры.Данные);
		//
		//Индекс = 0;
		//Для каждого ДанныеФайла из ДанныеДляОтправки.ФайлыДляПодписания Цикл
		//	//ДанныеПодписи = Результат.НаборДанных[Индекс].СвойстваПодписи.Подпись;
		//	СвойстваПодписи = Результат.НаборДанных[Индекс].СвойстваПодписи;
		//	//при серверном подписании возвращается адрес в хранилище
		//	Если ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
		//		СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		//	КонецЕсли;	
		//	ДанныеПодписи = СвойстваПодписи.Подпись;
		//	ДанныеФайла.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(ДанныеПодписи));
		//	ДанныеФайла.Вставить("Сертификат", Результат.ВыбранныйСертификат.Ссылка);
		//	ДанныеФайла.Вставить("Отпечаток", Результат.ВыбранныйСертификат.Отпечаток);
		//	Индекс = Индекс + 1;
		//КонецЦикла;
		//
		//Если ДополнительныеПараметры.ВидДокументов = "Входящий" Тогда
		//	РезультатОтправки = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УтвердитьОтклонитьВходящийДокумент(ДополнительныеПараметры.Документ, ДанныеДляОтправки, Форма = Неопределено);
		//	//Если РезультатОтправки Тогда
		//	//    КоличествоОбработанных = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусВходящегоДокументооборота(ДополнительныеПараметры.Документ, Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен")));
		//	//КонецЕсли;
		//Иначе	
		//	РезультатОтправки = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправитьИсходящийДокумент(ДополнительныеПараметры.Документ, ДанныеДляОтправки, Форма = Неопределено);
		//	//Если РезультатОтправки Тогда
		//	//    КоличествоОбработанных = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусИсходящегоДокументооборота(ДополнительныеПараметры.Документ, Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Отправлен")));
		//	//КонецЕсли;
		//КонецЕсли;
		
		ДанныеФайла = Новый Структура;
		Для каждого ДанныеРезультата из Результат.НаборДанных Цикл
			СвойстваПодписи = ДанныеРезультата.СвойстваПодписи;
			//при серверном подписании возвращается адрес в хранилище
			Если ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
				СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
			КонецЕсли;	
			ДанныеПодписи = СвойстваПодписи.Подпись;
			//временное хранилище недоступно из другого обработчика, поэтому будем передавать сами данные
			//ДанныеФайла.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(ДанныеПодписи));
			ДанныеФайла.Вставить("ДанныеПодписи", ДанныеПодписи);
			ДанныеФайла.Вставить("Сертификат", Результат.ВыбранныйСертификат.Ссылка);
			ДанныеФайла.Вставить("Отпечаток", Результат.ВыбранныйСертификат.Отпечаток);
			Прервать;
		КонецЦикла;
		
		ОбщиеДанныеПодписания = ок_ОбменСКонтрагентамиКлиент.ПолучитьПараметрыПриложения().Получить("ок_ТекущиеДанныеПодписания");
		Если ОбщиеДанныеПодписания = Неопределено Тогда
			ОбщиеДанныеПодписания = Новый Соответствие;
		КонецЕсли;
		ДанныеПодписанияДокумента = ОбщиеДанныеПодписания.Получить(ДополнительныеПараметры.Документ);
		Если ДанныеПодписанияДокумента = Неопределено Тогда
			ДанныеПодписанияДокумента = Новый Соответствие;
		КонецЕсли;
		ДанныеПодписанияДокумента.Вставить(ДополнительныеПараметры.ИндексФайла, ДанныеФайла); 
		ОбщиеДанныеПодписания.Вставить(ДополнительныеПараметры.Документ, ДанныеПодписанияДокумента);
		ок_ОбменСКонтрагентамиКлиент.ПолучитьПараметрыПриложения().Вставить("ок_ТекущиеДанныеПодписания", ОбщиеДанныеПодписания);
	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-06-29 (#3796)
	//последняя подпись, отправляем документ
	Если ДополнительныеПараметры.ИндексФайла = (ДополнительныеПараметры.КоличествоФайлов - 1) Тогда
		
		//отправить документы...
		ДанныеДляОтправки = Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания");
		ЗаполнитьЗначенияСвойств(ДанныеДляОтправки, ДополнительныеПараметры.Данные);
		
		ОбщиеДанныеПодписания = ок_ОбменСКонтрагентамиКлиент.ПолучитьПараметрыПриложения().Получить("ок_ТекущиеДанныеПодписания");
		Если ОбщиеДанныеПодписания = Неопределено Тогда
			ОбщиеДанныеПодписания = Новый Соответствие;
		КонецЕсли;
		ДанныеПодписанияДокумента = ОбщиеДанныеПодписания.Получить(ДополнительныеПараметры.Документ);
		Если ДанныеПодписанияДокумента = Неопределено Тогда
			ДанныеПодписанияДокумента = Новый Соответствие;
		КонецЕсли;
		
		Индекс = 0;
		Для каждого ДанныеФайла из ДанныеДляОтправки.ФайлыДляПодписания Цикл
			
			ДанныеПодписи = ДанныеПодписанияДокумента.Получить(Индекс); 
			Если ДанныеПодписи = Неопределено Тогда
				Возврат;
			КонецЕсли;	
			
			ДанныеФайла.Вставить("АдресПодписи", Неопределено);
			ДанныеФайла.Вставить("Сертификат", Неопределено);
			ДанныеФайла.Вставить("Отпечаток", Неопределено);
			ЗаполнитьЗначенияСвойств(ДанныеФайла, ДанныеПодписи);
			ДанныеФайла.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(ДанныеПодписи.ДанныеПодписи));
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		ОбщиеДанныеПодписания.Удалить(ДополнительныеПараметры.Документ);
		ок_ОбменСКонтрагентамиКлиент.ПолучитьПараметрыПриложения().Вставить("ок_ТекущиеДанныеПодписания", ОбщиеДанныеПодписания);
		
		Если ДополнительныеПараметры.ВидДокументов = "Входящий" Тогда
			РезультатОтправки = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УтвердитьОтклонитьВходящийДокумент(ДополнительныеПараметры.Документ, ДанныеДляОтправки, Форма = Неопределено);
		Иначе	
			РезультатОтправки = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправитьИсходящийДокумент(ДополнительныеПараметры.Документ, ДанныеДляОтправки, Форма = Неопределено);
		КонецЕсли;
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-15 (#3849)
		Если РезультатОтправки = Истина Тогда
			КоличествоПодписанныхДокументов = ПараметрыПриложения.Получить("КоличествоПодписанныхДокументов");
			Если КоличествоПодписанныхДокументов <> Неопределено Тогда
				ПараметрыПриложения.Вставить("КоличествоПодписанныхДокументов", КоличествоПодписанныхДокументов + 1);
			КонецЕсли;
			
			ДокументыКПодписанию = ПараметрыПриложения.Получить("ДокументыКПодписанию");
			Если ДокументыКПодписанию <> Неопределено Тогда
				ЭлементМассиваКУдалению = ДокументыКПодписанию.Найти(ДополнительныеПараметры.Документ);
				Если ЭлементМассиваКУдалению <> Неопределено Тогда
					ДокументыКПодписанию.Удалить(ЭлементМассиваКУдалению);
					ПараметрыПриложения.Вставить("ДокументыКПодписанию", ДокументыКПодписанию);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-15 (#3849)
		
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-06-29 (#3796)
	
	Если Форма <> Неопределено И ДополнительныеПараметры.Номер = ДополнительныеПараметры.Количество Тогда
		Форма.ОбновитьДанныеСписка();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы(Параметры = Неопределено) Экспорт
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-23 (#4234)
	//Если СтрНайти(ПараметрЗапуска, "ок_ПодписатьЭД") > 0 Тогда
	Если СтрНачинаетсяС(ПараметрЗапуска, "ок_Подписание") Тогда
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-23 (#4234)
		
		//проверка что предыдущий запущенный сеанс еще работает
		ТД = ТекущаяДата();
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-22 (#4234)
		//Если ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СеансРегламентогоЗаданияПодписаниеЭДУжеЗапущен(ТД) Тогда
		ПараметрыПодписанияДокументов = Новый Структура;
		ПараметрыПодписанияДокументов.Вставить("ПараметрЗапуска", ПараметрЗапуска);
		ПараметрыПодписанияДокументов.Вставить("ТД"				, ТД); 
		ПараметрыПодписанияДокументов.Вставить("ДатаНачалаРЗ"	, ТД);
		ПараметрыПодписанияДокументов.Вставить("ИмяРЗ"			, "Подписать ЭД (ОК)");
		
		ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ДополнитьПараметрыПодписанияДокументовНаСервере(ПараметрыПодписанияДокументов);
		
		Если Не ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьЗапускРегламентногоЗаданияПодписаниеЭД(ПараметрыПодписанияДокументов) Тогда
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-22 (#4234)
			ЗавершитьРаботуСистемы(Ложь, Ложь);
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-27 (#4234)
			Возврат;// завершить работу системы не прерывает выполнение
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-27 (#4234)
		КонецЕсли;	
		
		ПараметрыПриложения.Вставить("ок_РегламентноеЗаданиеОбменСКонтрагентами", 
										Новый Структура("ДатаЗапуска, КоличествоНазначенныхОповещений, КоличествоНазначенныхОповещенийСлужебныеДокументы", 
															ТД, 0, 0));
															
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-15 (#3849)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-30 (#4234)
		//ПараметрыПриложения.Вставить("ДатаНачалаРЗ", 					ТекущаяДата());
		ПараметрыПриложения.Вставить("ДатаНачалаРЗ", 					ТД);
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-30 (#4234)
		ПараметрыПриложения.Вставить("КоличествоПодписанныхДокументов", 0);
		ПараметрыПриложения.Вставить("ЕстьОшибки", 						Ложь);
		ПараметрыПриложения.Вставить("ЭтоРЗ",							Истина);
		ПараметрыПриложения.Вставить("ДокументыКПодписанию", 			Новый Массив);
		ПараметрыПриложения.Вставить("КоличествоДокументовКПодписанию", 0);
		ПараметрыПриложения.Вставить("КоличествоСлужебныхДокументовКПодписанию", 0);
		ПараметрыПриложения.Вставить("СлужебныеДокументыКПодписанию", 	Новый Массив);
		ПараметрыПриложения.Вставить("КоличествоСлужебныхПодписанныхДокументов", 0);
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-23 (#4234)
		////ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-20 (#4175)
		//ИмяРЗ = "Подписать ЭД (ОК)";
		//СтруктураДляРС = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСтруктуруДляИнформацииПоРЗ(ПараметрыПриложения["ДатаНачалаРЗ"],
		//														ИмяРЗ,
		//														Истина,
		//														Ложь,
		//														0);
		//														

		//ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ЗафиксироватьИнформациюПоРЗ(СтруктураДляРС, Истина);
		////ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-20 (#4175)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-23 (#4234)

		Попытка
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-15 (#3849)
		
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-23 (#4234)
			//ВыполнитьПодписаниеЭД()
			ВыполнитьПодписаниеЭД(ПараметрыПодписанияДокументов);
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-23 (#4234)
			
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-15 (#3849)
		Исключение
			Операция = НСтр("ru = 'Регламентное подписание пакетов ЭД'");
		
			ШаблонСообщения = НСтр("ru = 'При процессе выполнении произошла ошибка: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения);
			
		КонецПопытки;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-15 (#3849)
		
		ПодключитьОбработчикОжидания("ок_КонтрольЗавершенияРаботыРегалментногоЗаданияПодписаниеЭД", 60);
		//ЗавершитьРаботуСистемы(Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьПараметрыПриложения() Экспорт
	
	Возврат ПараметрыПриложения;
	
КонецФункции	

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-04-22 (#3332)
Функция HTMLПредставлениеФайлаЭД(Источник, Расширение) Экспорт
	
	Если НРег(Расширение) = "pdf" Тогда
		//ОКЕЙ Морозов А.В(СофтЛаб) Начало 2020-07-26 (#3816)
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.16.0") > 0 Тогда
			HTML = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьHTML();
			HTML = СтрЗаменить(HTML,"<url1S>","file:///"+СтрЗаменить(Источник, "\", "//"));
			Возврат HTML;
		Иначе
		//ОКЕЙ Морозов А.В(СофтЛаб) Конец 2020-07-26 (#3816)
			Возврат "<html><body><EMBED id='PDF' width=100% height=100% type=""application/pdf"" src=""" + Источник + """></EMBED></body></html>";
		//ОКЕЙ Морозов А.В(СофтЛаб) Начало 2020-07-26 (#3816)
		КонецЕсли;
		//ОКЕЙ Морозов А.В(СофтЛаб) Конец 2020-07-26 (#3816)
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции	

Процедура ОчиститьВременныйФайл(ИмяВременногоФайла) Экспорт 
	
	Если ПустаяСтрока(ИмяВременногоФайла) Тогда
		Возврат;
	КонецЕсли;	
	
	ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	Если ВременныйФайл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли;	
	
	ИмяВременногоФайла = "";
	
КонецПроцедуры
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-04-22 (#3332)

//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
Процедура ПередОтправкойФайловНаСогласование(ДополнительныеПараметры) Экспорт
	
	Элементы = ДополнительныеПараметры.ЭтаФорма.Элементы;
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(ДополнительныеПараметры.ИмяОбработчикаОповещения, ДополнительныеПараметры.МодульОбработчикаОповещения, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиРазмераФайлов = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьРазмерФайловПередОтправкойНаСогласование(ВыделенныеСтроки);
	Если РезультатПроверкиРазмераФайлов.МассивЭдСПревышениемРазмера.Количество() = 0 Тогда 
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(ДополнительныеПараметры.ИмяОбработчикаОповещения, ДополнительныеПараметры.МодульОбработчикаОповещения, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;	
	
	ДополнительныеПараметры.Вставить("МаксимальныйРазмерПисьма", РезультатПроверкиРазмераФайлов.МаксимальныйРазмерПисьма);
	ДополнительныеПараметры.Вставить("МассивЭдСПревышениемРазмера", РезультатПроверкиРазмераФайлов.МассивЭдСПревышениемРазмера);
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ОткрытьФормуДляОтметкиФайловКОтправке", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении,"Размер файлов превышает допустимый размер вложений для отправки по почте. Требуется выбрать файлы для отправки в пределах разрешенного лимита");	
	
КонецПроцедуры	

Процедура ОткрытьФормуДляОтметкиФайловКОтправке(ДополнительныеПараметры) Экспорт
	
	//может быть выбрано несколько ЭД на согласование. отметить файлы нужно по каждому из них
	Пока ДополнительныеПараметры.МассивЭдСПревышениемРазмера.ВГраница() >=0 Цикл 
		
		ДополнительныеПараметры.Вставить("Документ", ДополнительныеПараметры.МассивЭдСПревышениемРазмера.Получить(ДополнительныеПараметры.МассивЭдСПревышениемРазмера.ВГраница()));
		ПараметрыФормыВыбораФайлов = Новый Структура("Документ, МаксимальныйРазмерПисьма", ДополнительныеПараметры.Документ, ДополнительныеПараметры.МаксимальныйРазмерПисьма);
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПродолжитьОтметкуФайловКОтправке", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ВыборочнаяОтправкаВложенийПоПочте",ПараметрыФормыВыбораФайлов,,,,,ОписаниеОповещенияОЗавершении, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); // блокировать интерфейс нужно потому что открываться будет форма по каждому ЭД и следующая форма открывается после закрытия предыдущей
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПродолжитьОтметкуФайловКОтправке(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда //если не Истина то закрыли форму выбора файлов без кнопки Применить
		ДополнительныеПараметры.МассивЭдСПревышениемРазмера.Удалить(ДополнительныеПараметры.МассивЭдСПревышениемРазмера.Найти(ДополнительныеПараметры.Документ));
		Если ДополнительныеПараметры.МассивЭдСПревышениемРазмера.Количество() = 0 Тогда 
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(ДополнительныеПараметры.ИмяОбработчикаОповещения, ДополнительныеПараметры.МодульОбработчикаОповещения, ДополнительныеПараметры);		
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении);	
		Иначе
			ОткрытьФормуДляОтметкиФайловКОтправке(ДополнительныеПараметры);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-27 (#3997)
Процедура УстановитьСтатус(Форма, Статус) Экспорт
	
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	//ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
	//Если ТекущиеДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//ДополнительныеПараметры = Новый Структура("Форма, ТекущийДокумент, Статус", Форма, ТекущиеДанные.Ссылка, Статус);
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Форма.Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Форма, СписокДокументов, Статус", Форма, ВыделенныеСтроки, Статус);
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
		
	ТекстВопроса = "Не стандартная ситуация";
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	//Результат = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьНаличиеМаршрутаИПрисутствиеТекущегоИнициатора(ТекущиеДанные.Ссылка);
	Результат = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьНаличиеМаршрутаИПрисутствиеТекущегоИнициатора(ВыделенныеСтроки.Получить(0));
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	
	Если Результат = "Решение установлено" Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ваше решение уже было установлено ранее");
		Возврат;
	ИначеЕсли Результат = "Решение не установлено" Тогда
		
		Если Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован") Тогда 
			Решение = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Согласовано");
		Иначе	
			Решение = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено");
		КонецЕсли;
		
		УстановитьРешение(Форма, Решение);
		Возврат;
	ИначеЕсли Результат = "Маршрут не найден" Тогда
		ТекстВопроса = "Выполнить изменение статуса документа на " + Статус + "?";
	ИначеЕсли Результат = "Маршрут найден" Тогда 
		ТекстВопроса = "Обнаружен сформированный маршрут согласования. Для изменения статуса документа на " + Статус + " требуется удалить маршрут согласования. Очистить маршрут?";	
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусПродолжение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
		
КонецПроцедуры
 
Процедура УстановитьСтатусПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	                                                                                
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	//ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусНаСервере(ДополнительныеПараметры.ТекущийДокумент, ДополнительныеПараметры.Статус);	
	Для Каждого ТекущийДокумент Из ДополнительныеПараметры.СписокДокументов Цикл
		ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусНаСервере(ТекущийДокумент, ДополнительныеПараметры.Статус);	
	КонецЦикла;
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	
	ДополнительныеПараметры.Форма.Элементы.Список.Обновить();
	ДополнительныеПараметры.Форма.СписокПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

Процедура ОтменитьСогласование(Форма) Экспорт
	
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	//ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
	//Если ТекущиеДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//ДополнительныеПараметры = Новый Структура("Форма, ТекущийДокумент", Форма, ТекущиеДанные.Ссылка);
	//
	//Если бит_Визирование.ОпределитьКоличествоВиз(Новый Структура("Объект", ТекущиеДанные.Ссылка)) > 0 Тогда
	//	ТекстВопроса = "Обнаружен сформированный маршрут согласования. Для изменения статуса документа на ""Новый"" требуется удалить маршрут согласования. Очистить маршрут?";
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ОтменитьСогласованиеПродолжение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
	//Иначе
	//	ОтменитьСогласованиеПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);	
	//КонецЕсли;
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Форма.Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Форма, СписокДокументов", Форма, ВыделенныеСтроки);
	
	НужнаОчисткаМаршрута = Ложь;
	Для Каждого ТекущийДокумент Из ВыделенныеСтроки Цикл
		Если бит_Визирование.ОпределитьКоличествоВиз(Новый Структура("Объект", ТекущийДокумент)) > 0 Тогда	
			НужнаОчисткаМаршрута = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если НужнаОчисткаМаршрута Тогда
		ТекстВопроса = "Обнаружен сформированный маршрут согласования. Для изменения статуса документа на ""Новый"" требуется удалить маршрут согласования. Очистить маршрут?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтменитьСогласованиеПродолжение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
	Иначе
		ОтменитьСогласованиеПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);	
	КонецЕсли;
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
		
КонецПроцедуры

Процедура ОтменитьСогласованиеПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	//ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусНаСервере(ДополнительныеПараметры.ТекущийДокумент, ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый"));	
	Для Каждого ТекущийДокумент Из ДополнительныеПараметры.СписокДокументов Цикл
		ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусНаСервере(ТекущийДокумент, ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый"));	
	КонецЦикла;
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	
	ДополнительныеПараметры.Форма.Элементы.Список.Обновить();
	ДополнительныеПараметры.Форма.СписокПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

Процедура УстановитьРешение(Форма, Решение, НомерЗаявки = Неопределено) Экспорт
	
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	СписокДокументов = Новый Массив;
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	
	
	Если Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.Форма.ок_РаботаСВходящимиБумажнымиДокументами" Тогда
		
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
		//ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
		//Если ТекущиеДанные = Неопределено Тогда
		//	Возврат;
		//КонецЕсли;
		//ТекущийДокумент = ТекущиеДанные.Ссылка;
		СписокДокументов = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Форма.Элементы.Список);
		Если СписокДокументов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.Форма.ок_РаботаСВходящимиДокументами" Тогда
		СписокДокументов = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Форма.Элементы.Список);
		Если СписокДокументов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	Иначе
		ТекущийДокумент = Форма.Документ;
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
		СписокДокументов.Добавить(ТекущийДокумент);
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	КонецЕсли;
			
	ИмяРешения = Строка(Решение);
	ТекстВопроса = "По данному документу будет принято решение %ИмяРешения%. Продолжить?";
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяРешения%", Решение);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	//ДополнительныеПараметры.Вставить("ТекущийДокумент", ТекущийДокумент);
	ДополнительныеПараметры.Вставить("ТекущийДокумент", СписокДокументов.Получить(0)); // для совместимости
	ДополнительныеПараметры.Вставить("СписокДокументов", СписокДокументов);
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	ДополнительныеПараметры.Вставить("ИмяРешения", ИмяРешения);
	ДополнительныеПараметры.Вставить("Решение", Решение);
	ДополнительныеПараметры.Вставить("НомерЗаявки", НомерЗаявки);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-06 (#4117)
	//ДополнительныеПараметры.Вставить("УказатьКомментарий", ИмяРешения = "Отклонено");
	//ДополнительныеПараметры.Вставить("ЗаголовокОкнаКомментария", НСтр("ru = 'Укажите причину'"));
	//ДополнительныеПараметры.Вставить("ПредупреждениеПустогоКомментария", НСтр("ru = 'Не указана причина!'"));
	ИспользоватьФормуВводаКомментарияИВложенияФайлов = Ложь;
	Если ИмяРешения = "Согласовано" И Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.Форма.ок_ФормаПросмотраВходящегоДокумента" Тогда
		РеквизитыДокумента = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ТекущийДокумент, "ИдентификаторОрганизации");
		ИспользоватьФормуВводаКомментарияИВложенияФайлов = НЕ ЗначениеЗаполнено(РеквизитыДокумента.ИдентификаторОрганизации);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ОткрытьФормуВводаКомментарияИВложенияФайлов", ИспользоватьФормуВводаКомментарияИВложенияФайлов);
	ДополнительныеПараметры.Вставить("УказатьКомментарий", НЕ ИспользоватьФормуВводаКомментарияИВложенияФайлов);
	Если ИмяРешения = "Отклонено" Тогда
		ДополнительныеПараметры.Вставить("ЗаголовокОкнаКомментария", НСтр("ru = 'Укажите причину'"));
		ДополнительныеПараметры.Вставить("ПредупреждениеПустогоКомментария", НСтр("ru = 'Не указана причина!'"));		
	Иначе
		ДополнительныеПараметры.Вставить("ЗаголовокОкнаКомментария", НСтр("ru = 'Можете оставить комментарий'"));
		ДополнительныеПараметры.Вставить("ПредупреждениеПустогоКомментария", "");
	КонецЕсли;
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-06 (#4117)	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьРешениеПродолжение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура УстановитьРешениеПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Если ДополнительныеПараметры.УказатьКомментарий Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("УстановитьРешениеЗавершение", ЭтотОбъект, ДополнительныеПараметры),"" , ДополнительныеПараметры.ЗаголовокОкнаКомментария, , Истина)
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-06 (#4117) 
	ИначеЕсли ДополнительныеПараметры.ОткрытьФормуВводаКомментарияИВложенияФайлов Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", ДополнительныеПараметры.ТекущийДокумент);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьРешениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВводаКомментарияИВложениеФайлов", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-06 (#4117) 	
	Иначе
		УстановитьРешениеЗавершение("", ДополнительныеПараметры);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьРешениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-06 (#4117)
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-06 (#4117)
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПредупреждениеПустогоКомментария) Тогда
	
		Если Результат = Неопределено Тогда
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(Результат) И ДополнительныеПараметры.УказатьКомментарий Тогда
			ПоказатьПредупреждение(, ДополнительныеПараметры.ПредупреждениеПустогоКомментария);
			Возврат;
		КонецЕсли;

	КонецЕсли;

	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	//ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьРешениеНаСервере(ДополнительныеПараметры.Решение, ДополнительныеПараметры.ТекущийДокумент,Результат, ДополнительныеПараметры.НомерЗаявки);
	Для Каждого ТекущийДокумент Из ДополнительныеПараметры.СписокДокументов Цикл
		ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьРешениеНаСервере(ДополнительныеПараметры.Решение, ТекущийДокумент,Результат, ДополнительныеПараметры.НомерЗаявки);
	КонецЦикла;
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	
	Если ДополнительныеПараметры.Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.ок_ФормаПросмотраВходящегоДокумента"
		ИЛИ ДополнительныеПараметры.Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.Форма.ок_ФормаПросмотраВходящегоДокумента" Тогда
		ДополнительныеПараметры.Форма.Элементы.Согласовать.Доступность = Ложь;
		ДополнительныеПараметры.Форма.Элементы.НеСогласовывать.Доступность = Ложь;
	ИначеЕсли ДополнительныеПараметры.Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.ок_РаботаСВходящимиДокументами" 
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
		ИЛИ ДополнительныеПараметры.Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.Форма.ок_РаботаСВходящимиДокументами"
		ИЛИ ДополнительныеПараметры.Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.Форма.ок_РаботаСВходящимиБумажнымиДокументами"
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
		ИЛИ ДополнительныеПараметры.Форма.ИмяФормы = "Обработка.ОбменСКонтрагентами.ок_РаботаСВходящимиБумажнымиДокументами" Тогда 
		
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
		Если ДополнительныеПараметры.Форма.ок_НовыйСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен")
			Или ДополнительныеПараметры.Форма.ок_НовыйСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ЗавершенБезПодписания") Тогда 
			ДополнительныеПараметры.Форма.УстановитьСтатусПоВыделеннымСтрокамБезусловно(ДополнительныеПараметры.Форма.ок_НовыйСтатусВыбраннойСтроки, Ложь);	
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
		Иначе	
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
			ДополнительныеПараметры.Форма.Элементы.Список.Обновить();
			ДополнительныеПараметры.Форма.СписокПриАктивизацииСтроки(Неопределено);
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
		КонецЕсли;	
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-22 (#3997) 

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-23 (#4234)
Процедура ПодписатьДокументыЭД(ПараметрыПодписанияДокументов)
	
	НачалоЗамера = ТекущаяДата();
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтразитьЗаписьЛогаОценкиПроизводительности("Начало подписания ЭДО");
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-28 (#4227)
	//Данные = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДокументыНаПодписание(ПараметрыПодписанияДокументов);	
	//ДокументыКПодписанию = Новый Массив;
	//ОбновитьДокументыКПодписанию = Ложь;
	//Если Данные.Свойство("Документы") И ТипЗнч(ПараметрыПриложения) = Тип("Соответствие") И ПараметрыПриложения.Получить("ДокументыКПодписанию") <> Неопределено Тогда
	//	Для Каждого ДокументыДляПодписи Из Данные.Документы Цикл
	//		Если ДокументыДляПодписи.ВидДокумента = "Входящий" Тогда
	//			ДокументыКПодписанию.Добавить(ДокументыДляПодписи.Документ);
	//	    КонецЕсли;
	//	КонецЦикла;
	//	ПараметрыПриложения.Вставить("ДокументыКПодписанию", ДокументыКПодписанию);
	//	ПараметрыПриложения.Вставить("КоличествоДокументовКПодписанию", ДокументыКПодписанию.Количество());
	//	ОбновитьДокументыКПодписанию = Истина;
	//КонецЕсли;
	
	ДанныеДокументов = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДокументыНаПодписание(ПараметрыПодписанияДокументов);	
	
	ДокументыКПодписанию = Новый Массив;
	Для каждого	СертификатИДокуметы Из ДанныеДокументов.ВходящиеДокументы.Данные Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыКПодписанию, СертификатИДокуметы.Документы);
	КонецЦикла;
	
	Если ПараметрыПриложения.Получить("ДокументыКПодписанию") <> Неопределено Тогда
		
		ПараметрыПриложения.Вставить("ДокументыКПодписанию", ДокументыКПодписанию);
		ПараметрыПриложения.Вставить("КоличествоДокументовКПодписанию", ДанныеДокументов.ВходящиеДокументы.ВсегоДокументовВВыборке);
		ОбновитьДокументыКПодписанию = Истина;
		
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-28 (#4227)
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-28 (#4227)
	//документы на подпись
	//Для каждого ВидДокумента Из Данные.ВидыДокументов Цикл
	//	Для каждого Сертификат Из Данные.Сертификаты Цикл
	//		Если Не ДостаточноДанныхДляПодписанияБезЗапросаПользователя(Сертификат, Истина) Тогда
	//			Продолжить;
	//		КонецЕсли;	
	//		Документы = Новый Массив;
	//		Для каждого Документ Из Данные.Документы Цикл
	//			Если Документ.ВидДокумента <> ВидДокумента Тогда
	//				Продолжить;
	//			КонецЕсли;	
	//			Если Документ.Сертификат <> Сертификат Тогда
	//				Продолжить;
	//			КонецЕсли;	
	//			Документы.Добавить(Документ.Документ);
	//		КонецЦикла;
	//		Если Документы.Количество() = 0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		ПодписатьИОтправитьДокументы(Сертификат, Документы, ВидДокумента, ,ДокументыКПодписанию);
	//	КонецЦикла;
	//КонецЦикла;
	ВходящиеДокументы  = ДанныеДокументов.ВходящиеДокументы.Данные;
	ИсходящиеДокументы = ДанныеДокументов.ИсходящиеДокументы.Данные;
	
	Для каждого ДанныеДокументов Из ВходящиеДокументы Цикл
		ПодписатьИОтправитьДокументы(ДанныеДокументов.Сертификат, ДанныеДокументов.Документы, "Входящий", ,ДокументыКПодписанию);
	КонецЦикла;
	
	Для каждого ДанныеДокументов Из ИсходящиеДокументы Цикл
		ПодписатьИОтправитьДокументы(ДанныеДокументов.Сертификат, ДанныеДокументов.Документы, "Исходящий", ,ДокументыКПодписанию);
	КонецЦикла;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-28 (#4227)
	
	Если ОбновитьДокументыКПодписанию Тогда
		ПараметрыПриложения.Вставить("ДокументыКПодписанию", ДокументыКПодписанию);
	КонецЕсли;

	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтразитьЗаписьЛогаОценкиПроизводительности("Конец получения данных для подписания ЭДО; Длительность (сек.): " 
									+ Строка(ТекущаяДата() - НачалоЗамера));
	
КонецПроцедуры
								
Процедура ПодписатьСлужебныеДокументыЭД(ПараметрыПодписанияДокументов)
				
	НачалоЗамера = ТекущаяДата();
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтразитьЗаписьЛогаОценкиПроизводительности("Начало обработки служебных документов ЭДО");
	
	//служебные документы
	Данные = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПрофилиНаОбработкуСлужебныхДокументов();
	Для каждого Элемент из Данные Цикл
		Если Не ДостаточноДанныхДляПодписанияБезЗапросаПользователя(Элемент.Сертификат, Истина) Тогда
			Продолжить;
		КонецЕсли;	
		ИсходящиеПараметры = Новый Структура("Профиль, Форма, ОбновитьДанныеСписка, МоментСтарта", Элемент.ПрофильНастроекЭДО, Неопределено, Ложь, ТекущаяДата());
		ОбработатьСлужебныеДокументыЗавершение(Элемент.Сертификат, ИсходящиеПараметры);
	КонецЦикла;	
	
	ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтразитьЗаписьЛогаОценкиПроизводительности("Конец получения данных для обработки служебных документов ЭДО; Длительность (сек.): " 
									+ Строка(ТекущаяДата() - НачалоЗамера));
									
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-23 (#4234)
#КонецОбласти
